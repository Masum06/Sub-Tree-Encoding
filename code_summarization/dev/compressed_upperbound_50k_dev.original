$F60268 ( value )
public void onStart $F72 $F845
$F1 protected void propertyChange ( PropertyChangeEvent evt ) { if ( SeaGlassLookAndFeel . shouldUpdateStyle ( evt ) ) { updateStyle ( ( JTextComponent ) evt . getSource ( ) ) ; } super . propertyChange ( evt ) ; }
$F1113 public PsiQuery filter ( $F1113 final Class < ? extends PsiNamedElement > clazz , $F1113 final String name ) { final Set $F265759 result = new HashSet $F265759 $F6 ( Arrays , myPsiElements ) ; for ( final PsiElement element : myPsiElements ) { final PsiNamedElement namedElement = PyUtil . as ( element , clazz ) ; if ( ( namedElement == null ) || ( ! $F3174 ( name , namedElement ) ) ) $F106 ( result , element ) } return new PsiQuery ( result . toArray ( new PsiElement $F2313 ( result ) ) ) ; }
protected void writeQualifiedName ( String nsAlias , String name ) throws IOException { if $F22 ( nsAlias ) { writer . write ( nsAlias ) ; $F3410 ( writer ) } writer . write ( name ) ; }
public TextEditor deleteAll ( String pattern ) $F73165 ( replaceAll , pattern )
public synchronized GcmHelper addRegistrationCallback ( $F4170 Context context , $F4170 GcmRegistrationListener registrationListener , boolean sticky ) { if ( null == registrationCallbacks ) { registrationCallbacks = new ConcurrentLinkedQueue $F200 $F72 ; } registrationCallbacks . add ( registrationListener ) ; if ( sticky && ! TextUtils . isEmpty ( this . pushToken ) ) { registrationListener . onTokenAvailable ( context , pushToken , _BOOL ) ; } return this ; }
$F1 public void acceptTrainingSet ( TrainingSetEvent e ) { Instances trainingSet = e . getTrainingSet ( ) ; $F179981 ( dse , this , trainingSet ) acceptDataSet ( dse ) ; }
$F4203 $F5675 onFind ( $F20474 modelClass , $F806 columns , $F806 conditions , String orderBy , String limit , boolean isEager ) { BaseUtility . checkConditionsCorrect ( conditions ) ; $F5675 dataList = query ( modelClass , columns , getWhereClause ( conditions ) , getWhereArgs ( conditions ) , null , null , orderBy , limit , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; return dataList ; }
private boolean isAgentEmpty ( Agent agent ) { if ( agent != null ) { String first = agent . getFirstName ( ) ; String last = agent . getLastName ( ) ; String email = agent . getEmail ( ) ; String home = agent . getHomepage ( ) ; String org = agent . getOrganisation ( ) ; String phone = agent . getPhone ( ) ; String position = agent . getPosition ( ) ; String city = null ; String street = null ; String country = null ; String code = null ; String province = null ; Address address = agent . getAddress ( ) ; if ( address != null ) { city = address . getCity ( ) ; street = address . getAddress ( ) ; country = address . getCountry ( ) ; code = address . getPostalCode ( ) ; province = address . getProvince ( ) ; } String directory = null ; String identifier = null ; List < UserId > userIds = agent . getUserIds ( ) ; if $F5973 ( userIds ) { UserId userId = userIds . get ( NUM00 ) ; directory = userId . getDirectory ( ) ; identifier = userId . getIdentifier ( ) ; } return ( Strings . isNullOrEmpty ( city ) && Strings . isNullOrEmpty ( street ) && Strings . isNullOrEmpty ( country ) && Strings . isNullOrEmpty ( code ) && Strings . isNullOrEmpty ( province ) && Strings . isNullOrEmpty ( first ) && Strings . isNullOrEmpty ( last ) && Strings . isNullOrEmpty ( email ) && Strings . isNullOrEmpty ( home ) && Strings . isNullOrEmpty ( org ) && Strings . isNullOrEmpty ( phone ) && Strings . isNullOrEmpty ( position ) && Strings . isNullOrEmpty ( directory ) && Strings . isNullOrEmpty ( identifier ) ) ; } return _BOOL ; }
public static $F96 calendarToRawBytes ( Calendar timestamp , boolean honorDeviceTimeOffset ) { if ( honorDeviceTimeOffset ) { int offsetInHours = MiBandCoordinator . getDeviceTimeOffsetHours ( ) ; if ( offsetInHours != NUM00 ) { timestamp . add ( Calendar . HOUR_OF_DAY , offsetInHours ) ; } } $F96 year = fromUint16 ( $F21621 ( timestamp , Calendar ) ) ; return new byte [ ] { year [ NUM00 ] , year [ NUM00 ] , fromUint8 ( $F21623 ( timestamp , Calendar ) + NUM00 ) , fromUint8 ( $F36854 ( timestamp , Calendar ) ) , fromUint8 ( $F13065 ( timestamp , Calendar ) ) , fromUint8 ( $F21629 ( timestamp , Calendar ) ) , fromUint8 ( $F21631 ( timestamp , Calendar ) ) , dayOfWeekToRawBytes ( timestamp ) , NUM00 } ; }
$F2192 ( bits , result , byteSegments , codewordPosition , d1 , unrandomize255State , count , FormatException , bytes , i , uee )
protected void initBPOrderDetails ( int C_BPartner_ID , boolean forInvoice ) { $F81293 ( log , C_BPartner_ID ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; orderField . removeActionListener ( this ) ; $F213890 ( orderField ) orderField . addItem ( pp ) ; $F104317 list = loadOrderData ( C_BPartner_ID , forInvoice , sameWarehouseCb . isSelected ( ) ) ; $F104320 ( knp , list , orderField ) $F53383 ( orderField ) orderField . addActionListener ( this ) ; initBPDetails ( C_BPartner_ID ) ; }
public ModpackInitializationPanel ( WizardController controller , Map wizardData , $F11968 versions , String selVersion ) { initComponents ( ) ; this . controller = controller ; this . wizardData = wizardData ; wizardData . put ( KEY_GAME_VERSION , versions ) ; $F545 ( wizardData , selVersion ) wizardData . put ( KEY_INCLUDING_LAUNCHER , _BOOL ) ; configureComboContents ( ) ; checkProblem ( ) ; }
public synchronized void remove ( int index ) { super . remove ( index ) ; double removedValue = mValue . remove ( index ) ; if ( removedValue == mMinValue || removedValue == mMaxValue ) $F5795 ( initRange ) }
private boolean coordIsCalendarCell ( float y ) { return y > cellHeight ; }
protected void sprint ( double doubleField ) $F45719 ( sprint , String , doubleField )
private int attributeMap ( String name ) { $F99426 ( num , map , name ) $F1084 ( num ) $F10182 ( num ) }
private void groupPlayerStandingCSV $F72 { for ( PlayerQB p : teamQBs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerRB p : teamRBs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerWR p : teamWRs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerK p : teamKs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerOL p : teamOLs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerS p : teamSs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerCB p : teamCBs ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } for ( PlayerF7 p : teamF7s ) { if ( p . year == NUM00 ) teamRSs . add ( p ) ; else if ( p . year == NUM00 ) teamFRs . add ( p ) ; else if ( p . year == NUM00 ) teamSOs . add ( p ) ; else if ( p . year == NUM00 ) teamJRs . add ( p ) ; else if ( p . year == NUM00 ) teamSRs . add ( p ) ; } }
public String list $F72 throws IOException , TomcatManagerException { return invoke ( $F244022 ) ; }
public AttributeFiller ( AttributesImpl attributes , PO poToAutoFill ) { $F725 ( attributes ) atts = attributes ; po = poToAutoFill ; }
public static final void toByteArray ( ByteArrayOutputStream output , String str ) { $F2329 ( str ) $F25097 ( output ) $F1749 ( max , str ) for ( $F119 ( i , max ) ) { $F8205 ( b , str , i ) if ( ( b >= NUM00 ) && ( b <= NUM00 ) ) { switch ( b ) { $F3366 $F3366 $F25097 ( output ) $F597 } output . write ( b ) ; } else { $F25097 ( output ) switch ( b ) { $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F3366 $F25097 ( output ) $F597 $F1267 $F25097 ( output ) int b3 = b > > NUM00 ; int b4 = b & NUM00 ; if ( b4 < NUM00 ) b4 += NUM00 ; else b4 += NUM00 ; int b2 = b3 > > NUM00 ; b3 &= NUM00 ; if ( b3 < NUM00 ) b3 += NUM00 ; else b3 += NUM00 ; int b1 = b2 > > NUM00 ; b2 &= NUM00 ; if ( b2 < NUM00 ) b2 += NUM00 ; else b2 += NUM00 ; if ( b1 < NUM00 ) b1 += NUM00 ; else b1 += NUM00 ; output . write ( b1 ) ; output . write ( b2 ) ; output . write ( b3 ) ; output . write ( b4 ) ; $F597 } } } $F25097 ( output ) }
$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 File file , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { file . setCreationTS ( DateConverter . stringToDate ( file . getTableCreationTS ( ) ) ) ; fileDAO . insert ( file ) ; $F4608 ( restWrapper , file , RestWrapper ) LOGGER . info ( NUM00 + file . getBatchId ( ) + NUM00 + principal . getName ( ) + file ) ; } $F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
private void enableUpdates $F72 { if ( lmgr != null ) { try { lmgr . addGpsStatusListener ( this ) ; lmgr . requestLocationUpdates ( LocationManager . GPS_PROVIDER , gpsLoggingInterval , NUM00 , this ) ; } catch ( SecurityException e ) $F13955 ( Log , TAG ) } }
private void addInteger $F72 { int oldPos = pos - NUM00 ; String literal = scanInteger ( ) ; final String substring ; final int radix ; if $F418 ( literal ) { radix = NUM00 ; substring = literal . substring ( NUM00 ) ; } else if ( literal . startsWith ( NUM00 ) && $F20 ( literal ) ) { radix = NUM00 ; substring = literal . substring ( NUM00 ) ; } else { radix = NUM00 ; substring = literal ; } int value = NUM00 ; try { value = Integer . parseInt ( substring , radix ) ; } catch ( NumberFormatException e ) $F35015 ( error , radix , literal ) addToken ( TokenKind . INT , oldPos , pos , value ) ; }
public void removeMouseListener ( GlobalMouseListener listener ) $F106 ( listeners , listener )
public XMLDocument ( double version , boolean standalone ) { prolog = new $F20764 $F989 ; $F280 ( versionStr ) $F84 ( versionStr ) versionStr . append ( version ) ; $F84 ( versionStr ) if ( standalone ) $F84 ( versionStr ) else $F84 ( versionStr ) this . versionDecl = versionStr . toString ( ) ; }
public ObjectName createDistributionLocator ( String host , int port , String workingDirectory , String productDirectory , String remoteCommand ) throws MalformedObjectNameException { try { DistributionLocatorJmxImpl locator = ( DistributionLocatorJmxImpl ) addDistributionLocator ( ) ; DistributionLocatorConfig config = locator . getConfig ( ) ; config . setHost ( host ) ; config . setPort ( port ) ; config . setWorkingDirectory ( workingDirectory ) ; config . setProductDirectory ( productDirectory ) ; config . setRemoteCommand ( remoteCommand ) ; return new ObjectName ( locator . getMBeanName ( ) ) ; } catch ( RuntimeException e ) { logger . warn ( $F1573 ( e ) ) ; throw e ; } $F79506 ( SystemFailure , err ) catch ( Error e ) { $F79507 ( SystemFailure ) $F1575 ( logger , e ) throw e ; } }
void applyCenterPanel ( GrassMarlin ui ) { if ( treeViewComponent != null ) { centerPanelComponent . add ( treeViewComponent , SplitPane . Position . CENTER ) ; } centerPanelComponent . add ( graphComponent , SplitPane . Position . RIGHT ) ; centerPanelComponent . add ( logComponent , SplitPane . Position . LEFT_BOTTOM ) ; Border b = BorderFactory . createMatteBorder ( NUM00 , NUM00 , NUM00 , NUM00 , Color . GRAY ) ; Border b2 = BorderFactory . createMatteBorder ( NUM00 , NUM00 , NUM00 , NUM00 , Color . GRAY ) ; treeViewComponent . setBorder ( b2 ) ; graphComponent . setBorder ( b ) ; logComponent . setBorder ( b2 ) ; centerPanelComponent . setInitialSize ( x , y ) ; $F32537 ( d ) ui . add ( new Filler ( d , d , d ) , BorderLayout . WEST ) ; ui . add ( new Filler ( d , d , d ) , BorderLayout . EAST ) ; $F30063 ( ui , centerPanelComponent , BorderLayout ) }
private boolean isAbstract ( String source ) { int nonterminalCount = NUM00 ; for ( $F55140 ( t , source ) ) { if $F129995 ( t , NT_REGEX ) return _BOOL ; nonterminalCount ++ ; } return nonterminalCount != NUM00 ; }
public static String URIforPortablePath ( String path ) { if ( path . startsWith ( FileUtil . PREFERENCES ) ) { return path . replaceFirst ( FileUtil . PREFERENCES , NUM00 ) ; } else if ( path . startsWith ( FileUtil . PROGRAM ) ) { return path . replaceFirst ( FileUtil . PROGRAM , NUM00 ) ; } else $F1337 }
public int hashCode $F72 { return Float . floatToIntBits ( value ) ; }
public static void log ( Throwable error , String message , Object ... args ) { if ( loggingEnabled ) { Log . d ( TAG , args . length == NUM00 ? message : String . format ( message , args ) , error ) ; } }
public void addExtensionNamespace ( String uri , ExtensionHandler extNS ) $F1717 ( m_extensionFunctionNamespaces , uri , extNS )
private void generateTypeParameterInfos ( BinaryMember parent , $F1469 signature , HashMap newElements , ArrayList typeParameterHandles ) { $F8249 ( signature ) $F10849 typeParameterSignatures = Signature . getTypeParameters ( signature ) ; for ( $F151668 ( i , typeParameterCount , typeParameterSignatures ) ) { $F16051 ( typeParameterSignature , typeParameterSignatures , i ) $F1469 typeParameterName = Signature . getTypeVariable ( typeParameterSignature ) ; $F127812 ( CharOperation , typeParameterSignature ) ; $F10849 typeParameterBoundSignatures = Signature . getTypeParameterBounds ( typeParameterSignature ) ; int boundLength = typeParameterBoundSignatures . length ; $F10849 typeParameterBounds = new char [ boundLength ] [ ] ; for ( $F119 ( j , boundLength ) ) { typeParameterBounds [ j ] = Signature . toCharArray ( typeParameterBoundSignatures [ j ] ) ; } TypeParameter typeParameter = new TypeParameter ( parent , parent . manager , new String ( typeParameterName ) ) ; TypeParameterElementInfo info = new TypeParameterElementInfo $F72 ; info . bounds = typeParameterBounds ; info . boundsSignatures = typeParameterBoundSignatures ; typeParameterHandles . add ( typeParameter ) ; while $F1710 ( newElements , typeParameter ) typeParameter . occurrenceCount ++ ; newElements . put ( typeParameter , info ) ; } }
public final void testNextBytesbyteArray02 $F72 { $F96 myBytes ; $F96 myBytes1 ; $F96 myBytes2 ; for ( int i = NUM00 ; i < LENGTH ; i += INCR ) { $F1325 ( myBytes , i ) for ( $F119 ( j , i ) ) { myBytes [ j ] = $F8046 ( j ) ; } sr . setSeed ( myBytes ) ; sr2 . setSeed ( myBytes ) ; for ( int k = NUM00 ; k < LENGTH ; k += INCR ) { $F1325 ( myBytes1 , k ) $F1325 ( myBytes2 , k ) sr . nextBytes ( myBytes1 ) ; sr2 . nextBytes ( myBytes2 ) ; for ( $F119 ( l , k ) ) { assertFalse ( NUM00 + l + NUM00 + k + NUM00 + i + NUM00 + myBytes1 [ l ] + NUM00 + myBytes2 [ l ] , myBytes1 [ l ] != myBytes2 [ l ] ) ; } } } for ( int n = NUM00 ; n < LENGTH ; n += INCR ) { int n1 = NUM00 ; int n2 = NUM00 ; int n3 = NUM00 ; $F459355 ( bytes1 , n1 ) $F459355 ( bytes2 , n2 ) for ( $F1139 ( k , bytes1 ) ) { sr . nextBytes ( bytes1 [ k ] ) ; } for ( $F1139 ( k , bytes2 ) ) { sr2 . nextBytes ( bytes2 [ k ] ) ; } for ( $F119 ( k , n3 ) ) { int i1 = k / n1 ; int i2 = k % n1 ; int i3 = k / n2 ; int i4 = k % n2 ; assertTrue ( NUM00 + i1 + NUM00 + i2 + NUM00 + i3 + NUM00 + i4 , bytes1 [ i1 ] [ i2 ] == bytes2 [ i3 ] [ i4 ] ) ; } } }
$F9538 ( takeLock , this , notEmpty )
public RoutingInfo ( Object o ) { this . text = o . toString ( ) ; }
$F183298 ( view , cache )
public static CertChainKeyPair generateSigned ( String fqdn , X509Certificate issuerCertificate , PrivateKey issuerPrivateKey ) { try { return generateCertificateAndSign ( fqdn , issuerCertificate , issuerPrivateKey , getServerExtensions ( issuerCertificate ) ) ; } catch ( CertificateException | OperatorCreationException | NoSuchAlgorithmException | IOException e ) { throw new RuntimeException ( String . format ( $F10629 ( e ) ) , e ) ; } }
$F43398 ( animator , ValueAnimator , nameValueList , mPendingAnimations , propertyMask , propertyCount , i , nameValuesHolder , mAnimatorMap , mAnimatorEventListener , mStartDelaySet , mStartDelay , mDurationSet , mDuration , mInterpolatorSet , mInterpolator )
public void addRequest ( Request request ) $F207 ( requestSet , request )
public static double logpmf ( double x , int n , double p ) { if ( x < NUM00 || x > n ) $F86429 ( Double ) if ( p <= NUM00 ) { return x == NUM00 ? NUM00 : Double . NEGATIVE_INFINITY ; } if ( p >= NUM00 ) { return x == n ? NUM00 : Double . NEGATIVE_INFINITY ; } final double q = NUM00 - p ; if ( x == NUM00 ) { if ( p < NUM00 ) { return - devianceTerm ( n , n * q ) - n * p ; } else { return n * Math . log ( q ) ; } } if ( x == n ) { if ( p > NUM00 ) { return - devianceTerm ( n , n * p ) - n * q ; } else { return n * Math . log ( p ) ; } } final double lc = stirlingError ( n ) - stirlingError ( x ) - stirlingError ( n - x ) - devianceTerm ( x , n * p ) - devianceTerm ( n - x , n * q ) ; final double f = ( MathUtil . TWOPI * x * ( n - x ) ) / n ; return lc - NUM00 * Math . log ( f ) ; }
private void byte2hex ( byte b , StringBuffer buf ) { $F1469 hexChars = $F32662 ; int $F84703 ( high , b ) ; $F74266 ( low , b ) $F6939 ( buf , hexChars , high ) $F6939 ( buf , hexChars , low ) }
public static List < GeoTimeSerie > timesplit ( GeoTimeSerie gts , long quietperiod , int minvalues , String labelname ) { List < GeoTimeSerie > series = new ArrayList < GeoTimeSerie > $F72 ; if ( NUM00 == gts . values || gts . hasLabel ( labelname ) ) { series . add ( gts . clone ( ) ) ; return series ; } sort ( gts , _BOOL ) ; long lasttick = gts . ticks [ NUM00 ] ; int idx = NUM00 ; int gtsid = NUM00 ; GeoTimeSerie serie = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM00 ) ; $F69429 ( serie , gts ) $F13404 ( labels ) labels . putAll ( gts . getLabels ( ) ) ; labels . put ( labelname , Integer . toString ( gtsid ) ) ; serie . setLabels ( labels ) ; while ( idx < gts . values ) { if ( gts . ticks [ idx ] - lasttick >= quietperiod ) { if ( serie . values > NUM00 && serie . values >= minvalues ) $F207 ( series , serie ) serie = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM00 ) ; $F69429 ( serie , gts ) $F168026 ( labels ) labels . putAll ( gts . getLabels ( ) ) ; gtsid ++ ; labels . put ( labelname , Integer . toString ( gtsid ) ) ; serie . setLabels ( labels ) ; } Object value = GTSHelper . valueAtIndex ( gts , idx ) ; GTSHelper . setValue ( serie , gts . ticks [ idx ] , null != gts . locations ? gts . locations [ idx ] : GeoTimeSerie . NO_LOCATION , null != gts . elevations ? gts . elevations [ idx ] : GeoTimeSerie . NO_ELEVATION , value , _BOOL ) ; lasttick = gts . ticks [ idx ] ; idx ++ ; } if ( serie . values > NUM00 && serie . values >= minvalues ) $F207 ( series , serie ) return series ; }
protected void checkSignature $F97 ( buf ) { if ( ! Arrays . equals ( buf , PngHelperInternal . getPngIdSignature ( ) ) ) throw new PngjInputException $F580 ; }
private void twoWayMergeInternal ( final ReservoirLongsSketch sketchIn , final boolean isModifiable ) { if ( sketchIn . getN ( ) <= sketchIn . getK ( ) ) { twoWayMergeInternalStandard ( sketchIn ) ; } else if ( gadget_ . getN ( ) < gadget_ . getK ( ) ) { final ReservoirLongsSketch tmpSketch = gadget_ ; gadget_ = ( isModifiable ? sketchIn : sketchIn . copy ( ) ) ; twoWayMergeInternalStandard ( tmpSketch ) ; } else if ( sketchIn . getImplicitSampleWeight ( ) < gadget_ . getN ( ) / ( ( double ) ( gadget_ . getK ( ) - NUM00 ) ) ) { twoWayMergeInternalWeighted ( sketchIn ) ; } else { final ReservoirLongsSketch tmpSketch = gadget_ ; gadget_ = ( isModifiable ? sketchIn : sketchIn . copy ( ) ) ; twoWayMergeInternalWeighted ( tmpSketch ) ; } }
final public void print ( Object v ) { Writer out = this . out ; $F8249 ( out ) try { if ( v == null ) $F17918 ( out , _nullChars ) else { $F1822 ( s , v ) $F170077 ( out , s ) } } $F53427 ( log , Level , e ) }
public void subscribeTo ( final K key , final Subscriber $F2193 subscriber , final Executor subscribeOn ) { CompletableFuture . runAsync ( null , subscribeOn ) ; }
$F98441 ( is , os , listener , bufferSize , current , total , DEFAULT_IMAGE_TOTAL_SIZE , bytes , count , shouldStopLoading , _BOOL )
private void refreshBuffer $F72 throws IOException { if ( output == null ) { throw new OutOfSpaceException $F72 ; } $F11584 ( output , buffer , position ) position = NUM00 ; }
public String damageBayDoor $F72 { String bayType = NUM00 ; Vector < Bay > potential ; potential = new Vector < Bay > $F72 ; Enumeration < Transporter > iter = transports . elements ( ) ; while $F1444 ( iter ) { Transporter next = iter . nextElement ( ) ; if ( next instanceof Bay ) { Bay nextBay = ( Bay ) next ; if ( nextBay . getDoors ( ) > NUM00 ) $F207 ( potential , nextBay ) } } if $F3817 ( potential ) { Bay chosenBay = potential . elementAt ( Compute . randomInt ( potential . size ( ) ) ) ; chosenBay . destroyDoor ( ) ; chosenBay . resetDoors ( ) ; chosenBay . setDoors ( chosenBay . getDoors ( ) - NUM00 ) ; $F86218 ( bayType , chosenBay ) } return bayType ; }
public void updateEnabledState $F72 { boolean b = $F9774 ( getSimulationThread ) ; boolean prep = b && controller != null && controller . isPrepared ( ) ; clearButton . setEnabled ( b ) ; prepareButton . setEnabled ( b ) ; runButton . setEnabled ( prep ) ; if ( b ) pauseButton . setSelected ( _BOOL ) ; pauseButton . setEnabled ( ! b ) ; stepButton . setEnabled ( prep ) ; cancelButton . setEnabled ( ! b ) ; for ( JComboBox $F1432 combo : selectors . combos ) combo . setEnabled ( b ) ; }
private void prepareVolumeData $F72 throws Exception $F9099 ( prepareVPlexVolumeData , prepareRPVolumeData )
private static int determineIconIdByMimeTypeList $F24643 ( mimetypes ) { if ( mimetypes == null || $F6213 ( mimetypes ) ) { return R . drawable . file ; } else { for ( String mimetype : mimetypes ) { $F99426 ( iconId , MIMETYPE_TO_ICON_MAPPING , mimetype ) $F21525 ( iconId ) } for ( String mimetype : mimetypes ) { $F64065 ( mainMimetypePart , mimetype ) $F99426 ( iconId , MAINMIMETYPE_TO_ICON_MAPPING , mainMimetypePart ) $F21525 ( iconId ) } } return R . drawable . file ; }
public SmsMmsMessage ( Context _context , long _messageId , long _threadId , long _timestamp , String _messageBody , int _unreadCount , int _messageType ) { context = _context ; messageId = _messageId ; threadId = _threadId ; timestamp = _timestamp ; messageBody = _messageBody ; unreadCount = _unreadCount ; messageType = _messageType ; fromAddress = SmsPopupUtils . getMmsAddress ( context , messageId ) ; fromEmailGateway = _BOOL ; contactName = PhoneNumberUtils . formatNumber ( fromAddress ) ; ContactIdentification contactIdentify = SmsPopupUtils . getPersonIdFromPhoneNumber ( context , fromAddress ) ; if ( contactIdentify == null ) { contactIdentify = SmsPopupUtils . getPersonIdFromEmail ( context , fromAddress ) ; if ( contactIdentify != null ) { fromEmailGateway = _BOOL ; } } if ( contactIdentify != null ) { contactId = contactIdentify . contactId ; contactLookupKey = contactIdentify . contactLookup ; contactName = contactIdentify . contactName ; } }
public void attributeAsClass $F72 { DataSortedTableModel model ; $F110345 ( m_CurrentCol ) model = ( DataSortedTableModel ) m_TableData . getModel ( ) ; if ( model . getAttributeAt ( m_CurrentCol ) == null ) $F932 setCursor ( $F92769 ( Cursor ) ) ; model . attributeAsClassAt ( m_CurrentCol ) ; setCursor ( $F88367 ( Cursor ) ) ; }
public void addListener ( RefreshListener listener ) { $F896 ( listener ) refreshListeners . add ( listener ) ; }
public final void doExport ( final String trackName , final File target , int verbosity ) throws IOException { Log . i ( $F71440 ( TAG , target ) ) ; mDbHelper = new DatabaseHelper ( mContext . getApplicationContext ( ) ) ; final BufferedWriter bw = new BufferedWriter ( new FileWriter ( target ) ) ; bw . write ( XML_HEADER ) ; bw . write ( TAG_GPX ) ; if ( verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_WAYPOINTS_ONLY || verbosity == VERBOSITY_ALL ) { writeWaypoints ( bw ) ; } if ( verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_ALL ) { writeTrackpoints ( trackName , bw ) ; } $F1206 ( bw ) if ( verbosity == VERBOSITY_ALL ) { writeWifis ( bw ) ; $F1206 ( bw ) writeCells ( bw ) ; $F1206 ( bw ) } bw . write ( TAG_GPX_CLOSE ) ; $F59 ( bw ) $F59 ( mDbHelper ) $F1594 ( Log , TAG ) }
public $F2194 valuesInSelection ( RichEditText editor , int spanType ) { $F2194 $F376851 ( result ) ; Selection expandedSelection = getExpandedSelection ( editor , spanType ) ; if ( expandedSelection != null ) { for ( Span $F2193 span : getSpans ( editor . getText ( ) , expandedSelection ) ) { $F100054 ( result , span ) } } return result ; }
private boolean isGTEDelta ( double value ) { return Math . abs ( value ) - Math . abs ( mDelta ) > - NUM00 ; }
public static String rowToString ( JSONArray ja ) { $F83 ( sb ) for ( $F146321 ( i , ja ) ) { $F34674 ( i , sb ) Object object = ja . opt ( i ) ; if ( object != null ) { $F1822 ( string , object ) if ( $F20 ( string ) && ( $F116993 ( string ) || $F48845 ( string ) || string . indexOf ( NUM00 ) >= NUM00 || $F4431 ( string ) ) ) { $F84 ( sb ) $F115 ( length , string ) for ( $F6225 ( j , length ) ) { $F1280 ( c , string , j ) if ( c >= NUM00 && c != NUM00 ) $F288 ( sb , c ) } $F84 ( sb ) } else $F288 ( sb , string ) } } $F84 ( sb ) $F92 ( sb ) }
private void maybeSampleSyncParams $F72 { long playbackPositionUs = audioTrackUtil . getPlaybackHeadPositionUs ( ) ; $F32905 ( playbackPositionUs ) if ( log . allowVerbose ( ) ) { log . v ( NUM00 + playbackPositionUs ) ; } long $F11380 ( systemClockUs , System ) ; if ( systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US ) { playheadOffsets [ nextPlayheadOffsetIndex ] = playbackPositionUs - systemClockUs ; $F271125 ( nextPlayheadOffsetIndex , MAX_PLAYHEAD_OFFSET_COUNT ) if ( playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT ) { playheadOffsetCount ++ ; } lastPlayheadSampleTimeUs = systemClockUs ; smoothedPlayheadOffsetUs = NUM00 ; for ( $F119 ( i , playheadOffsetCount ) ) { smoothedPlayheadOffsetUs += playheadOffsets [ i ] / playheadOffsetCount ; } } $F84963 ( needsPassthroughWorkarounds ) if ( systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US ) { audioTimestampSet = audioTrackUtil . updateTimestamp ( ) ; if ( audioTimestampSet ) { long audioTimestampUs = audioTrackUtil . getTimestampNanoTime ( ) / NUM00 ; if ( log . allowVerbose ( ) ) { log . v ( NUM00 + audioTimestampUs ) ; } long audioTimestampFramePosition = audioTrackUtil . getTimestampFramePosition ( ) ; if ( audioTimestampUs < resumeSystemTimeUs ) { audioTimestampSet = _BOOL ; log . w ( NUM00 + audioTimestampUs + NUM00 + resumeSystemTimeUs ) ; } else if $F19505 ( Math , audioTimestampUs , systemClockUs , MAX_AUDIO_TIMESTAMP_OFFSET_US ) { String message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; if ( failOnSpuriousAudioTimestamp ) { throw new InvalidAudioTrackTimestampException ( message ) ; } log . w ( message ) ; audioTimestampSet = _BOOL ; } else if ( Math . abs ( framesToDurationUs ( audioTimestampFramePosition ) - playbackPositionUs ) > MAX_AUDIO_TIMESTAMP_OFFSET_US ) { String message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; if ( failOnSpuriousAudioTimestamp ) { throw new InvalidAudioTrackTimestampException ( message ) ; } log . w ( message ) ; audioTimestampSet = _BOOL ; } } if ( isLatencyQuirkEnabled ) { latencyUs = AmazonQuirks . getAudioHWLatency ( ) ; } else if ( getLatencyMethod != null && ! passthrough ) { try { latencyUs = ( Integer ) $F99198 ( getLatencyMethod , audioTrack ) * NUM00 - bufferSizeUs ; $F89002 ( latencyUs , Math ) if ( latencyUs > MAX_LATENCY_US ) { log . w ( NUM00 + latencyUs ) ; latencyUs = NUM00 ; } } catch ( Exception e ) { getLatencyMethod = null ; } } lastTimestampSampleTimeUs = systemClockUs ; } }
$F1 public boolean contains ( Object object ) { $F1933 ( object , _BOOL ) for ( $F119 ( i , size ) ) $F55055 ( object , elements , i , _BOOL ) return _BOOL ; }
$F136015 ( writer )
public static void substituteProperties ( Node node , Properties properties ) { Node child ; $F15376 ( next , node ) while $F200462 ( child , next ) { $F5901 ( next , child ) if ( $F77051 ( child , Node ) ) { child . setNodeValue ( PropertiesUtil . substituteProperty ( child . getNodeValue ( ) , properties ) ) ; } else if $F61358 ( child , Node ) { $F32683 ( attributes , child ) for ( $F85554 ( i , attributes ) ) { $F61359 ( attribute , attributes , i ) attribute . setNodeValue ( PropertiesUtil . substituteProperty ( attribute . getNodeValue ( ) , properties ) ) ; } substituteProperties ( child , properties ) ; } } }
$F1431 public PseudoFunctionSelector ( String functionName , String expression ) { super ( Type . PSEUDO_FUNCTION ) ; this . pseudoFunction = ( PseudoFunction $F11685 ) $F140410 ( lookupPseudoFunction , functionName ) ; this . expression = expression ; this . parsedExpression = pseudoFunction . parseExpression ( expression ) ; }
public static String fixQueryMistakes ( String q ) { $F2899 ( q ) $F2899 ( q ) return q ; }
public $F96 readBytes $F72 throws IOException { if $F931 ( parseTag ) throw new BurlapProtocolException $F580 ; $F1822 ( tag , sbuf ) if $F3057 ( tag ) { expectEndTag ( NUM00 ) ; $F1274 } else if $F3057 ( tag ) { $F4910 ( sbuf ) $F74534 ( value , parseBytes ) expectEndTag ( NUM00 ) ; return value ; } else throw expectBeginTag ( NUM00 , tag ) ; }
public synchronized Utterance pend $F72 { Utterance utterance = null ; while $F10471 ( list ) { try $F5795 ( wait ) catch ( InterruptedException ie ) $F1337 } utterance = ( Utterance ) list . removeFirst ( ) ; notify ( ) ; return utterance ; }
public void testLongValuePos $F72 { String a = NUM00 ; $F12208 ( aNumber , a ) long result = NUM00 ; assertTrue ( NUM00 , aNumber . longValue ( ) == result ) ; }
public static EvaluationResult findOrCreate ( ResultHierarchy hierarchy , Result parent , String name , String shortname ) { ArrayList < EvaluationResult > ers = ResultUtil . filterResults ( hierarchy , parent , EvaluationResult . class ) ; EvaluationResult ev = null ; for ( EvaluationResult e : ers ) { if ( shortname . equals ( e . getShortName ( ) ) ) $F3468 ( ev , e ) } if ( ev == null ) { ev = new EvaluationResult ( name , shortname ) ; hierarchy . add ( parent , ev ) ; } return ev ; }
public static boolean isRunningJavaWebStart $F72 { boolean hasJNLP = _BOOL ; try { $F32352 ( Class ) hasJNLP = _BOOL ; } catch ( ClassNotFoundException ex ) { hasJNLP = _BOOL ; } return hasJNLP ; }
public boolean isConnected $F72 $F1522 ( connected )
private void tryScheduleAction ( Runnable action ) { try $F135437 ( scheduler , action ) catch ( RejectedExecutionException e ) $F845 }
private static double scoreSequence ( List < LatLong > pts ) { LatLong $F7662 ( prev , pts ) ; LatLong $F7662 ( prevprev , pts ) ; double prevAngle = Math . atan2 ( prev . lat - prevprev . lat , prev . lng - prevprev . lng ) ; double score = NUM00 ; for ( LatLong pt : pts ) { double angle = Math . atan2 ( pt . lat - prev . lat , pt . lng - prev . lng ) ; double diff = prevAngle - angle ; if ( diff > Math . PI ) diff -= Math . PI * NUM00 ; else if ( diff < - Math . PI ) diff += Math . PI * NUM00 ; if ( diff < NUM00 ) score += NUM00 ; else score += diff ; prev = pt ; prevAngle = angle ; } return score ; }
public void addWebAppDebugModelListener ( IWebAppDebugModelListener listener ) $F138275 ( privateInstanceLock , webAppDebugModelListeners , listener )
public void resetPolicy $F72 { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; $F17621 ( mPreferences ) }
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_getClassContext , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_currentClassLoader0 , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_SecurityManager_currentLoadedClass0 , method , thisVar , returnVar , params ) else $F5501 ( defaultMethod , method , thisVar , returnVar , params ) }
public static boolean isFileExists ( final String path ) { if $F4329 ( TextUtils , path ) $F277465 ( Log , _BOOL ) $F15885 ( fileToCheck , path ) return fileToCheck . exists ( ) && $F4925 ( fileToCheck ) ; }
private List < Reference > createSignatureReferences ( XMLSignatureFactory xmlSigFactory , $F3803 referenceIdList ) throws NoSuchAlgorithmException , InvalidAlgorithmParameterException { List < Reference > result = new ArrayList < Reference > $F72 ; for ( String refId : referenceIdList ) { $F4322 ( refId ) Reference ref = xmlSigFactory . newReference ( NUM00 + refId , xmlSigFactory . newDigestMethod ( DigestMethod . SHA512 , null ) , Collections . singletonList ( xmlSigFactory . newCanonicalizationMethod ( CanonicalizationMethod . EXCLUSIVE , ( C14NMethodParameterSpec ) null ) ) , null , null ) ; result . add ( ref ) ; } $F26666 ( Collections , result ) }
public boolean removeNetworkConnection ( NetworkConnection networkConnection ) $F20067 ( networkConnections , networkConnection )
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F9007 ( result ) $F9007 ( result ) $F1000 ( result ) $F1007 ( result ) }
protected Object convertArray ( Object value ) { return value ; }
public static String encodeString ( String s ) { return new String ( encode ( s . getBytes ( ) ) ) ; }
GridLuceneFile ( GridLuceneDirectory dir ) { this . dir = dir ; $F5224 ( filesCnt ) }
public void addAttributes ( Attributes atts ) throws SAXException { $F19322 ( nAtts , atts ) for ( $F119 ( i , nAtts ) ) { String uri = atts . getURI ( i ) ; if ( null == uri ) uri = NUM00 ; addAttributeAlways ( uri , atts . getLocalName ( i ) , atts . getQName ( i ) , atts . getType ( i ) , atts . getValue ( i ) , _BOOL ) ; } }
public synchronized void addPanListener ( PanListener listener ) $F207 ( mPanListeners , listener )
public synchronized long lastOnlineAgo $F72 { return $F32708 ( System , lastOnline ) ; }
public double distance_weighted ( PlaPointFloat p_other , double p_horizontal_weight , double p_vertical_weight ) { double delta_x = v_x - p_other . v_x ; double delta_y = v_y - p_other . v_y ; delta_x *= p_horizontal_weight ; delta_y *= p_vertical_weight ; $F25559 ( result , Math , delta_x , delta_y ) return result ; }
public NameSpace swap ( NameSpace newTop ) { NameSpace oldTop = ( NameSpace ) ( stack . elementAt ( NUM00 ) ) ; stack . setElementAt ( newTop , NUM00 ) ; return oldTop ; }
public static $F3803 classesPath $F72 throws FileNotFoundException , LoadingFileException { $F11300 files = getJavaFiles ( ) ; $F10144 ( paths ) for ( File file : files ) paths . add ( file . getPath ( ) ) ; return paths ; }
public static Number sub ( Number a , Number b ) { if $F71585 ( isFloatingPoint , a , b ) { return a . doubleValue ( ) - b . doubleValue ( ) ; } else { return a . longValue ( ) - b . longValue ( ) ; } }
public static Stream $F4 wordsOf ( String text ) { requireNonNull ( text ) ; return WORDS . splitAsStream ( text ) ; }
public static DeleteParticipant [ ] loadDeleteParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , DeleteArguments arguments , IParticipantDescriptorFilter filter , $F806 affectedNatures , SharableParticipants shared ) { RefactoringParticipant [ ] participants = fgDeleteInstance . getParticipants ( status , processor , element , arguments , filter , affectedNatures , shared ) ; DeleteParticipant [ ] result = new DeleteParticipant [ participants . length ] ; $F7057 ( System , participants , result ) return result ; }
public PutResult $F176270 ( successCount , failCount , errorMessages ) { _successCount = successCount ; _failCount = failCount ; $F9404 ( _errorMessages ) $F36447 ( errorMessages , _errorMessages ) }
$F1 public int hashCode $F72 { int myPosition = position ; int hash = NUM00 ; while ( myPosition < limit ) { hash = hash + get ( myPosition ++ ) ; } return hash ; }
public void print ( CharSequence text ) throws IOException { $F1749 ( size , text ) int pos = NUM00 ; for ( $F119 ( i , size ) ) { if $F11983 ( text , i ) { write ( text . subSequence ( pos , size ) , i - pos + NUM00 ) ; pos = i + NUM00 ; atStartOfLine = _BOOL ; } } write ( text . subSequence ( pos , size ) , size - pos ) ; }
public void closeRunningApp ( String deviceID , String app_package ) throws InterruptedException , IOException { cmd . runCommand ( NUM00 + deviceID + NUM00 + app_package ) ; }
$F30902 public void test_unwrap_05 $F72 { String host = NUM00 ; int port = NUM00 ; $F30907 ( bbA , ByteBuffer ) $F30909 ( bb , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; try { sse . unwrap ( bb , bbA , NUM00 , bbA . length ) ; fail ( NUM00 ) ; } $F30913 $F30915 ( fail , e ) }
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public boolean filteroutInvalidation ( T tag , TagQualityStatus statusToAdd , String statusDescription , Timestamp timestamp ) { return filterout ( tag , tag . getValue ( ) , tag . getValueDescription ( ) , statusToAdd , statusDescription , timestamp ) ; }
public void bindY ( DoubleProperty yProperty ) { minYWorld . bind ( yProperty . add ( getMinY ( ) ) ) ; maxYWorld . bind ( minYWorld . add ( getHeight ( ) ) ) ; }
private void copyFieldAttributes $F72 { if ( ( loadFields == null ) || fields == null ) $F932 for ( $F1139 ( i , loadFields ) ) { ObjectStreamField loadField = loadFields [ i ] ; $F20605 ( name , loadField ) for ( $F1139 ( j , fields ) ) { ObjectStreamField field = fields [ j ] ; if $F3175 ( name , field ) { loadField . setUnshared ( field . isUnshared ( ) ) ; loadField . setOffset ( field . getOffset ( ) ) ; $F597 } } } }
public static Uri . Builder appendId ( Uri . Builder builder , long id ) { return builder . appendEncodedPath ( String . valueOf ( id ) ) ; }
private static void beginStartingService ( Context context , Intent intent ) { synchronized ( sStartingServiceSync ) { if ( sStartingService == null ) { PowerManager pm = ( PowerManager ) context . getSystemService ( Context . POWER_SERVICE ) ; sStartingService = pm . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , NUM00 ) ; } $F90610 ( sStartingService ) if ( context . startService ( intent ) == null ) $F13955 ( Log , TAG ) } }
$F28896 ( index , paint , bounds , title , getTitle )
public static double stddev $F9830 ( a ) $F148602 ( Math , var , a )
public SimpleArgumentsBundle ( $F4170 $F2539 arguments , $F4170 DisplayMetrics metrics ) { mArguments = arguments ; mMetrics = metrics ; }
public static String collapseWhitespace ( String str ) $F12588 ( collapse , str , WHITE_SPACES )
private void adjustASIAndCollectFollowElements ( CustomInternalN4JSParser previousParser , boolean strict , Set < FollowElement > result ) { ObservableXtextTokenStream tokens = ( ObservableXtextTokenStream ) previousParser . getTokenStream ( ) ; $F40484 ( lastTokenIndex , tokens ) if ( lastTokenIndex >= NUM00 ) { CommonToken lastToken = ( CommonToken ) tokens . LT ( - NUM00 ) ; $F1431 $F40119 tokenList = tokens . getTokens ( ) ; $F2329 ( lastToken ) if ( shouldSkipASI ( lastToken ) ) { if ( maySkipASI ( lastToken , tokens ) ) { tokenList . remove ( lastTokenIndex ) ; $F15415 ( result , resetAndGetFollowElements , tokens , strict ) removePostfixOperator ( result ) ; } } else if ( shouldAddSyntheticSemicolon ( previousParser , lastTokenIndex , lastToken ) ) { CommonToken token = new CommonToken ( semi ) ; tokenList . add ( token ) ; $F15415 ( result , resetAndGetFollowElements , tokens , strict ) removePostfixOperator ( result ) ; } } }
public LinkedList $F89473 patch_make ( String text1 , String text2 ) { $F3541 ( text1 , text2 ) $F16501 diffs = diff_main ( text1 , text2 , _BOOL ) ; if $F3817 ( diffs ) $F86383 ( diff_cleanupSemantic , diffs , diff_cleanupEfficiency ) return patch_make ( text1 , diffs ) ; }
public void testBasicsV6 $F72 throws Exception { Directory dir = newDirectory ( ) ; RandomIndexWriter writer = new RandomIndexWriter ( random ( ) , dir ) ; $F10888 ( document ) InetAddress address = InetAddress . getByName ( NUM00 ) ; document . add ( new InetAddressPoint ( NUM00 , address ) ) ; writer . addDocument ( document ) ; IndexReader reader = writer . getReader ( ) ; IndexSearcher searcher = newSearcher ( reader ) ; assertEquals ( NUM00 , searcher . count ( InetAddressPoint . newExactQuery ( NUM00 , address ) ) ) ; assertEquals ( NUM00 , searcher . count ( InetAddressPoint . newPrefixQuery ( NUM00 , address , NUM00 ) ) ) ; assertEquals ( NUM00 , searcher . count ( InetAddressPoint . newRangeQuery ( NUM00 , InetAddress . getByName ( NUM00 ) , InetAddress . getByName ( NUM00 ) ) ) ) ; $F59 ( reader ) $F59 ( writer ) $F59 ( dir ) }
private boolean isMinorVersionUpgrade ( String currentVersion , String targetVersion ) { String currentDbSchemaVersion = VdcUtil . getDbSchemaVersion ( currentVersion ) ; $F1933 ( currentDbSchemaVersion , _BOOL ) return currentDbSchemaVersion . equals ( VdcUtil . getDbSchemaVersion ( targetVersion ) ) ; }
public static final void exception ( Throwable e ) { logExpensive ( Level . SEVERE , e . getMessage ( ) , e ) ; }
private static DefaultAlignment valueOf ( String str , boolean isHorizontal ) { if $F40270 ( str ) { return FILL_ALIGN ; } else if $F40270 ( str ) { return CENTER_ALIGN ; } else if ( isHorizontal ) { if $F40270 ( str ) { return RIGHT_ALIGN ; } else if $F40270 ( str ) { return LEFT_ALIGN ; } else $F1337 } else if $F40270 ( str ) { return TOP_ALIGN ; } else if $F40270 ( str ) { return BOTTOM_ALIGN ; } else $F1337 }
public void combineSets ( HashMap < String , $F2689 > containerAffinities , OperatorPair pair ) { $F2689 set1 = containerAffinities . get ( pair . first ) ; $F2689 set2 = containerAffinities . get ( pair . second ) ; set1 . addAll ( set2 ) ; containerAffinities . put ( pair . first , set1 ) ; containerAffinities . put ( pair . second , set1 ) ; }
protected void firePropertyChange $F109214 ( propertyName , oldValue , newValue ) { propertyChangeSupport . firePropertyChange ( propertyName , oldValue , newValue ) ; }
$F1 public boolean isBusy $F72 $F9911 ( m_splitThread )
public static $F11685 boolean isNotEmpty ( CharSequence c ) { return $F23754 ( c ) ; }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . COMPOSITE_PROCESSOR__NAME : $F6439 ( NAME_EDEFAULT , name ) case EipPackage . COMPOSITE_PROCESSOR__TO_CHANNELS : $F6441 ( toChannels ) case EipPackage . COMPOSITE_PROCESSOR__FROM_CHANNELS : $F6441 ( fromChannels ) case EipPackage . COMPOSITE_PROCESSOR__OWNED_ENDPOINTS : $F6441 ( ownedEndpoints ) } $F6444 ( super , featureID ) }
private void addInfoButton ( JPanel panel , Object o , String clientProp ) { JButton hButton ; hButton = new JButton $F3362 ( o ) ; hButton . putClientProperty ( clientProp , o ) ; hButton . addActionListener ( this ) ; hButton . setFont ( font ) ; hButton . setMargin ( $F32450 ) ; hButton . setBackground ( LOG_BUTTON_BG ) ; panel . add ( hButton ) ; }
public void removeNetworkListener ( NetworkListener networkListener ) $F106 ( networkListeners , networkListener )
public static String chomp ( String s ) { if $F8991 ( s ) $F16082 ( s ) if $F128455 ( s ) $F16082 ( s ) return s ; }
private void validateSurrogateSettings $F72 { faultySurrogatesRadioButton . setEnabled ( _BOOL ) ; discardSurrogatesArticleRadioButton . setEnabled ( _BOOL ) ; replaceSurrogatesRadioButton . setEnabled ( _BOOL ) ; discardSurrogatesRevisionRadioButton . setSelected ( _BOOL ) ; }
static DiskId createDiskId ( long maxOplogSize , boolean isPersistenceType , boolean needsLinkedList ) { long bytes = maxOplogSize * NUM00 * NUM00 ; if ( bytes > Integer . MAX_VALUE ) { if ( isPersistenceType ) { if ( needsLinkedList ) { return new PersistenceWithLongOffset $F72 ; } else { return new PersistenceWithLongOffsetNoLL $F72 ; } } else { if ( needsLinkedList ) { return new OverflowOnlyWithLongOffset $F72 ; } else { return new OverflowOnlyWithLongOffsetNoLL $F72 ; } } } else { if ( isPersistenceType ) { if ( needsLinkedList ) { return new PersistenceWithIntOffset $F72 ; } else { return new PersistenceWithIntOffsetNoLL $F72 ; } } else { if ( needsLinkedList ) { return new OverflowOnlyWithIntOffset $F72 ; } else { return new OverflowOnlyWithIntOffsetNoLL $F72 ; } } } }
public void startElement $F42838 ( namespaceURI , localName , name , atts ) throws $F2253 { ElemContext elemContext = m_elemContext ; if ( elemContext . m_startTagOpen ) $F42845 ( closeStartTag , elemContext , _BOOL ) else if ( m_cdataTagOpen ) $F62354 ( closeCDATA , m_cdataTagOpen , _BOOL ) else $F62355 ( m_needToCallStartDocument , startDocumentInternal , _BOOL ) if ( m_needToOutputDocTypeDecl ) { String n = name ; if $F6036 ( n ) { n = localName ; } outputDocTypeDecl ( n ) ; } if $F49270 ( namespaceURI ) { super . startElement ( namespaceURI , localName , name , atts ) ; $F665 } try { ElemDesc elemDesc = getElemDesc2 ( name ) ; int elemFlags = elemDesc . getFlags ( ) ; if ( m_doIndent ) { boolean isBlockElement = ( elemFlags & ElemDesc . BLOCK ) != NUM00 ; if ( m_ispreserve ) m_ispreserve = _BOOL ; else if ( ( null != elemContext . m_elementName ) && ( ! m_inBlockElem || isBlockElement ) ) $F21847 ( m_startNewLine , _BOOL , indent ) m_inBlockElem = ! isBlockElement ; } $F27424 ( atts , addAttributes ) m_isprevtext = _BOOL ; $F42851 ( writer , m_writer ) $F3410 ( writer ) writer . write ( name ) ; $F42855 ( m_tracer , firePseudoAttributes ) if ( ( elemFlags & ElemDesc . EMPTY ) != NUM00 ) { m_elemContext = elemContext . push ( ) ; m_elemContext . m_elementName = name ; m_elemContext . m_elementDesc = elemDesc ; $F665 } else { elemContext = elemContext . push ( namespaceURI , localName , name ) ; m_elemContext = elemContext ; elemContext . m_elementDesc = elemDesc ; elemContext . m_isRaw = ( elemFlags & ElemDesc . RAW ) != NUM00 ; } if ( ( elemFlags & ElemDesc . HEADELEM ) != NUM00 ) { closeStartTag ( ) ; elemContext . m_startTagOpen = _BOOL ; if ( ! m_omitMetaTag ) { $F32367 ( m_doIndent , indent ) $F3410 ( writer ) String encoding = getEncoding ( ) ; String encode = Encodings . getMimeEncoding ( encoding ) ; writer . write ( encode ) ; $F3410 ( writer ) } } } $F6289 ( e ) }
public static long sizeOf ( Class clazz ) { long maxSize = headerSize ( clazz ) ; while ( clazz != $F12222 ) { for ( $F128325 ( f , clazz ) ) { if ( ( f . getModifiers ( ) & Modifier . STATIC ) == NUM00 ) { long offset = unsafe . objectFieldOffset ( f ) ; if ( offset > maxSize ) { maxSize = offset + NUM00 ; } } } $F7852 ( clazz ) } return roundUpTo8 ( maxSize ) ; }
public void addHandler ( String columnName , SQLDataHandler handler ) { if ( m_overrides == null ) $F6450 ( m_overrides ) ; m_overrides . put ( columnName , handler ) ; }
public void addNearEvicted ( KeyCacheObject key ) { $F21432 ( nearEvicted ) nearEvicted . add ( key ) ; }
public Word ( String word , String displayAs , String ... soundsLike ) { this ( ) ; this . word = word ; this . displayAs = displayAs ; $F37437 ( this , Arrays , soundsLike ) }
public EnumeratedDistribution ( final List < Pair $F165782 > pmf ) throws MathIllegalArgumentException { $F132214 ( singletons , pmf ) final $F1986 probs = new double $F2313 ( pmf ) ; for ( $F2277 ( i , pmf ) ) { final Pair $F165782 sample = pmf . get ( i ) ; $F44305 ( singletons , sample ) final double p = sample . getValue ( ) ; probs [ i ] = p ; } probabilities = checkAndNormalize ( probs ) ; $F14238 ( cumulativeProbabilities , probabilities ) double sum = NUM00 ; for ( $F1139 ( i , probabilities ) ) { sum += probabilities [ i ] ; cumulativeProbabilities [ i ] = sum ; } }
$F1 public Calendar next $F72 { if $F1238 ( spot , endFinal ) $F6747 $F113057 ( spot , Calendar ) return ( Calendar ) spot . clone ( ) ; }
public void pauseWork $F72 { mExitTasksEarly = _BOOL ; setPause ( _BOOL ) ; if ( DEBUG ) { $F118527 ( Log , Log_TAG , String , this ) } }
public static List < ErrorLogger . ErrorObject > isVirtualTrackInCPLConformed ( PayloadRecord cplPayloadRecord , VirtualTrack virtualTrack , List < PayloadRecord > essencesHeaderPartitionPayloads ) throws IOException { List < VirtualTrack > $F204 ( virtualTracks ) ; IMFErrorLogger imfErrorLogger = new IMFErrorLoggerImpl $F72 ; virtualTracks . add ( virtualTrack ) ; imfErrorLogger . addAllErrors ( checkVirtualTrackAndEssencesHeaderPartitionPayloadRecords ( virtualTracks , essencesHeaderPartitionPayloads ) ) ; if ( imfErrorLogger . hasFatalErrors ( ) ) { return imfErrorLogger . getErrors ( ) ; } imfErrorLogger . addAllErrors ( conformVirtualTracksInCPL ( cplPayloadRecord , essencesHeaderPartitionPayloads , _BOOL ) ) ; return imfErrorLogger . getErrors ( ) ; }
public byte receiveOneByte $F72 { $F13527 ( Log , TAG ) try { acquireLock ( ) ; mServerSocket . receive ( mReceivePacket ) ; Log . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; return $F94795 ( mReceivePacket ) ; } $F12241 ( e ) return Byte . MIN_VALUE ; }
public static String encode $F97 ( input ) { $F193057 ( input ) int zeros = NUM00 ; $F107776 ( zeros , input ) input = $F17877 ( Arrays , input ) ; $F10567 ( encoded , input ) int outputStart = encoded . length ; for ( $F107777 ( inputStart , zeros , input ) ) { encoded [ -- outputStart ] = ALPHABET [ divmod ( input , inputStart , NUM00 , NUM00 ) ] ; $F107780 ( input , inputStart ) } while $F304435 ( outputStart , encoded , ENCODED_ZERO ) { ++ outputStart ; } while ( -- zeros >= NUM00 ) { encoded [ -- outputStart ] = ENCODED_ZERO ; } return new String $F218 ( encoded , outputStart ) ; }
public static $F2027 cells $F22564 ( start , end ) { Arrays . sort ( start ) ; Arrays . sort ( end ) ; int overlap = NUM00 ; int gaps = NUM00 ; for ( int i = NUM00 , j = NUM00 ; j < end . length ; ) { if ( i < start . length && start [ i ] < end [ j ] ) $F1097 ( overlap , i ) else $F166832 ( j , overlap ) if ( overlap == NUM00 ) { gaps ++ ; } } $F69133 ( cells , gaps ) overlap = NUM00 ; gaps = NUM00 ; int previousOverlap = NUM00 ; for ( int i = NUM00 , j = NUM00 ; j < end . length ; ) { if ( i < start . length && start [ i ] < end [ j ] ) { overlap ++ ; if ( previousOverlap == NUM00 ) $F49219 ( cells , gaps , start , i ) i ++ ; } else { overlap -- ; if ( overlap == NUM00 ) $F49219 ( cells , gaps , end , j ) j ++ ; } previousOverlap = overlap ; } return cells ; }
$F1 public InStore openRead ( long address , int size ) { if ( fileSize ( ) < address + size ) { throw new IllegalStateException ( L . l ( NUM00 , this , address , size , fileSize ( ) ) ) ; } if $F27748 ( _isClosed ) { throw new IllegalStateException $F136796 ( L , this ) ; } if ( _fileSize < address + size ) { throw new IllegalStateException ( L . l ( NUM00 , Long . toHexString ( address ) , size ) ) ; } try { streamOpen ( address , size ) ; return openReadImpl ( address , size ) ; } $F12153 ( e ) }
List < Address > geoDecode ( String searchedLocation ) { try { Geocoder geo = new Geocoder ( sContext , Locale . getDefault ( ) ) ; List < Address > addresses = geo . getFromLocationName ( searchedLocation , NUM00 ) ; if $F8841 ( addresses ) { return addresses ; } } $F15720 $F1274 }
private boolean isIdentifierStartChar ( int position ) { if ( _len >= NUM00 && position >= _len ) { return _BOOL ; } char ch = _working [ position ] ; return Character . isUnicodeIdentifierStart ( ch ) ; }
public void destroy $F72 { $F725 ( fallbackStorage ) FileUtils . deleteQuietly ( fallbackStorageFile ) ; }
public static SelectClause create ( String ... propertyNames ) { List $F57151 selectList = new ArrayList $F57151 $F72 ; for ( String name : propertyNames ) { selectList . add ( new SelectClauseExpression ( new PropertyValueExpression ( name ) ) ) ; } return new SelectClause ( StreamSelector . ISTREAM_ONLY , selectList ) ; }
$F156045 ( msg , x , super , this )
public static String makeMarginTransform ( double owidth , double oheight , double iwidth , double iheight , double lmargin , double tmargin , double rmargin , double bmargin ) { double swidth = iwidth + lmargin + rmargin ; double sheight = iheight + tmargin + bmargin ; double scale = Math . max ( swidth / owidth , sheight / oheight ) ; double offx = ( scale * owidth - swidth ) * NUM00 + lmargin ; double offy = ( scale * oheight - sheight ) * NUM00 + tmargin ; return NUM00 + fmt ( NUM00 / scale ) + NUM00 + fmt ( offx ) + NUM00 + fmt ( offy ) + NUM00 ; }
public static boolean isAttachment ( String contentDisposition ) { return contentDisposition != null && contentDisposition . regionMatches ( _BOOL , NUM00 , NUM00 , NUM00 , NUM00 ) ; }
private JMenu createInsertMenu $F72 { $F132272 ( insertMenu ) insertMenu . add ( actionManager . getNewNetworkAction ( ) ) ; $F132272 ( newGaugeSubMenu ) for ( Action action : actionManager . getPlotActions ( ) ) $F207 ( newGaugeSubMenu , action ) insertMenu . add ( newGaugeSubMenu ) ; $F132272 ( newWorldSubMenu ) for ( Action action : actionManager . getNewWorldActions ( ) ) $F207 ( newWorldSubMenu , action ) insertMenu . add ( newWorldSubMenu ) ; $F55657 ( insertMenu ) insertMenu . add ( actionManager . getNewDocViewerAction ( ) ) ; insertMenu . add ( actionManager . getNewConsoleAction ( ) ) ; return insertMenu ; }
public static $F11968 findPackages $F72 { $F172413 ( result ) $F14937 packages ; initCache ( ) ; $F172414 ( result ) $F54171 ( packages , m_ClassCache ) while $F1444 ( packages ) { $F99853 ( result , packages ) } Collections . sort ( result , new StringCompare $F72 ) ; return result ; }
public static String convertSystemNameToAlternate ( String systemName ) { if ( ! validSystemNameFormat ( systemName , systemName . charAt ( NUM00 ) , NUM00 ) ) $F2455 String altName = NUM00 ; altName = systemName ; return altName ; }
private void initializeUserDirectives $F72 { $F9404 ( userDirectives ) IEclipsePreferences preferences = VelocityCorePlugin . getPreferences ( ) ; String directives = preferences . get ( IPreferencesConstants . VELOCITY_USER_DIRECTIVES , NUM00 ) ; $F17727 ( st , directives ) while $F1444 ( st ) { $F14952 ( directive , st ) $F172220 ( name , directive ) int type = ( directive . endsWith ( NUM00 ) ? Directive . BLOCK : Directive . LINE ) ; $F34170 ( userDirectives , name ) addDirective ( new VelocityDirective ( name , type ) ) ; } }
private synchronized void storeTimestampAndSetStatus ( Timestamper . TimestampSucceeded message , TimestampRecord timestampRecord ) throws Exception { try { persistTimestampRecord ( message , timestampRecord ) ; setTimestampSucceeded ( ) ; } catch ( Exception e ) { $F5197 ( log , e ) setTimestampFailedRegardlessOfQueue ( new DateTime $F72 ) ; throw e ; } }
public static Character [ ] valuesOf $F53421 ( array ) { Character [ ] dest = new Character [ array . length ] ; for ( $F1139 ( i , array ) ) $F11856 ( dest , i , Character , array ) return dest ; }
public void mark ( int readlimit ) { stream . mark ( readlimit ) ; if ( markSupported ( ) ) { markpos = framePos ; markPushBackLen = pushBackLen ; if ( markPushBackLen > NUM00 ) { if ( markPushBackBuffer == null ) $F75474 ( markPushBackBuffer , frameSize ) $F135 ( System , pushBackBuffer , markPushBackBuffer , markPushBackLen ) } } }
public void testCreatingLauncherWithJetty1 $F72 { SwtBotProjectCreation . createMavenGwtProjectIsCreated1 ( bot , PROJECT_NAME , PACKAGE_NAME ) ; SwtBotProjectDebug . launchGWTDevModeWithJettyThenTerminateIt ( bot , PROJECT_NAME ) ; String persistedArgs = SwtBotProjectDebug . getTheProgramArgsTextBox ( bot ) ; $F196452 ( assertTrue , persistedArgs ) }
$F61852 public void test_getTablesLjava_lang_StringLjava_lang_StringLjava_lang_String$Ljava_lang_String $F72 throws SQLException { $F806 tablesName = { VIEW_NAME , DatabaseCreator . TEST_TABLE1 , DatabaseCreator . TEST_TABLE3 } ; $F64831 ( tablesType ) Arrays . sort ( tablesName ) ; Arrays . sort ( tablesType ) ; ResultSet rs = meta . getTables ( null , null , null , null ) ; while $F1682 ( rs ) { assertTrue ( NUM00 , Arrays . binarySearch ( tablesName , rs . getString ( NUM00 ) ) > - NUM00 ) ; assertNull ( $F34152 ( rs ) , rs . getString ( NUM00 ) ) ; assertTrue ( NUM00 , Arrays . binarySearch ( tablesType , rs . getString ( NUM00 ) ) > - NUM00 ) ; $F86060 ( assertEquals , rs ) } $F59 ( rs ) rs = meta . getTables ( conn . getCatalog ( ) , null , null , $F78037 ) ; $F32625 ( assertFalse , rs ) $F59 ( rs ) rs = meta . getTables ( conn . getCatalog ( ) , null , null , $F78037 ) ; $F32625 ( assertTrue , rs ) $F263195 ( assertEquals , VIEW_NAME , rs ) assertNull ( $F34152 ( rs ) , rs . getString ( NUM00 ) ) ; $F86060 ( assertEquals , rs ) $F86060 ( assertEquals , rs ) $F32625 ( assertFalse , rs ) $F32625 ( assertFalse , rs ) $F59 ( rs ) rs = meta . getTables ( null , null , NUM00 , null ) ; while $F1682 ( rs ) { assertTrue ( NUM00 , Arrays . binarySearch ( tablesName , rs . getString ( NUM00 ) ) > - NUM00 ) ; $F86075 ( assertNull , rs ) assertTrue ( NUM00 , Arrays . binarySearch ( tablesType , rs . getString ( NUM00 ) ) > - NUM00 ) ; $F86060 ( assertEquals , rs ) } $F59 ( rs ) $F59 ( conn ) try { meta . getTables ( null , null , null , null ) ; fail ( NUM00 ) ; } $F31184 }
public static boolean needsDefaultFormatter ( ValueFormatter formatter ) { $F397 ( formatter , _BOOL ) if ( formatter instanceof DefaultValueFormatter ) return _BOOL ; return _BOOL ; }
public boolean putGrammar ( SchemaGrammar grammar , boolean deep , boolean ignoreConflict ) { if ( ! ignoreConflict ) $F8587 ( putGrammar , grammar , deep ) SchemaGrammar sg = getGrammar ( grammar . fTargetNamespace ) ; if ( sg == null ) { putGrammar ( grammar ) ; } $F42316 ( deep , _BOOL ) Vector currGrammars = grammar . getImportedGrammars ( ) ; $F1933 ( currGrammars , _BOOL ) Vector grammars = ( ( Vector ) currGrammars . clone ( ) ) ; SchemaGrammar sg1 , sg2 ; Vector gs ; for ( $F2277 ( i , grammars ) ) { sg1 = ( SchemaGrammar ) grammars . elementAt ( i ) ; sg2 = getGrammar ( sg1 . fTargetNamespace ) ; if ( sg2 == null ) { gs = sg1 . getImportedGrammars ( ) ; $F45557 ( gs ) for ( $F5373 ( j , gs ) ) { sg2 = ( SchemaGrammar ) gs . elementAt ( j ) ; if $F2200 ( grammars , sg2 ) grammars . addElement ( sg2 ) ; } } else $F106 ( grammars , sg1 ) } for ( $F5373 ( i , grammars ) ) { putGrammar ( ( SchemaGrammar ) grammars . elementAt ( i ) ) ; } return _BOOL ; }
public List $F36647 nodes ( $F5466 Object key , int cnt ) { $F37759 ( nodes , key , cnt ) }
public boolean isExistsKey ( Connection connection , $F131 keys ) { $F83 ( builder ) $F84 ( builder ) builder . append ( tableName ) ; $F84 ( builder ) String delimiter = NUM00 ; for ( String keyField : keyFieldNames ) { builder . append ( delimiter ) ; builder . append ( keyField ) ; $F84 ( builder ) delimiter = NUM00 ; } $F1822 ( query , builder ) PreparedStatement statement = null ; try { if ( ( ExecutionPathDebugLog . isDebugEnabled ) && $F585 ( log ) ) { log . debug ( NUM00 + query + NUM00 + print ( keys ) + NUM00 ) ; } statement = connection . prepareStatement ( query ) ; for ( $F1139 ( i , keys ) ) { statement . setObject ( i + NUM00 , keys [ i ] ) ; } $F49 ( rs , statement ) if $F17350 ( rs ) { return _BOOL ; } return _BOOL ; } catch ( SQLException ex ) { $F60713 ( message , query , ex ) log . error ( message , ex ) ; storeExceptionHandler . handle ( message , ex ) ; throw new StoreExceptionDBRel ( message , ex ) ; } finally { try $F1823 ( statement ) $F31184 } }
public static $F4203 T implement ( $F20474 type , Object object ) { if $F38790 ( type , object ) { $F123138 ( type , object ) } return type . cast ( Proxy . newProxyInstance ( type . getClassLoader ( ) , $F139647 ( type ) , new DuckType ( object ) ) ) ; }
public boolean isIvrVsan ( int vsanId ) { boolean inRange = vsans . contains ( vsanId ) ; if ( ! inRange ) { for ( IntRange range : getVsansRanges ( ) ) { inRange = range . containsInteger ( vsanId ) ; $F30711 ( inRange ) } } return inRange ; }
private void addBOMLines ( MProduct product , BigDecimal qty ) { MPPProductBOM bom = MPPProductBOM . getDefault ( product , null ) ; MPPProductBOMLine [ ] bomLines = bom . getLines ( _BOOL ) ; for ( $F1139 ( i , bomLines ) ) addBOMLine ( bomLines [ i ] , qty ) ; log . fine ( NUM00 + bomLines . length ) ; }
private QueryExp buildOptionalQueryExp ( final $F806 attributes , final $F131 values ) { QueryExp queryExp = null ; for ( $F1139 ( i , attributes ) ) { if ( values [ i ] instanceof Boolean ) { if ( queryExp == null ) { queryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ; } else { queryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ) ; } } else if ( values [ i ] instanceof Number ) { if ( queryExp == null ) { queryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ; } else { queryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ) ; } } else if ( values [ i ] instanceof String ) { if ( queryExp == null ) { queryExp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ; } else { queryExp = Query . and ( queryExp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ) ; } } } return queryExp ; }
$F1 public Foo fetchByUuid_C_Last $F38154 ( uuid , companyId , orderByComparator ) { int count = countByUuid_C ( uuid , companyId ) ; $F38155 ( count ) $F38156 list = findByUuid_C ( uuid , companyId , count - NUM00 , count , orderByComparator ) ; $F38161 ( list ) $F1274 }
public final boolean at ( String str , CharSequence csq ) { int i = index ; $F115 ( length , csq ) for ( $F124686 ( j , str ) ) { if ( ( i >= length ) || ( str . charAt ( j ++ ) != csq . charAt ( i ++ ) ) ) return _BOOL ; } return _BOOL ; }
public static int findLastOf $F68141 ( container , charSeq , begin ) { for ( int i = begin ; i < container . length ( ) && i >= NUM00 ; -- i ) { if ( charSeq . contains ( NUM00 + container . charAt ( i ) ) ) return i ; } $F150 }
private static CookieOrigin adjustEffectiveHost ( final CookieOrigin origin ) { $F107310 ( host , origin ) boolean isLocalHost = _BOOL ; for ( $F1088 ( i , host ) ) { $F1280 ( ch , host , i ) if $F37111 ( ch ) $F3468 ( isLocalHost , _BOOL ) } if ( isLocalHost ) { host += NUM00 ; return new CookieOrigin ( host , origin . getPort ( ) , origin . getPath ( ) , origin . isSecure ( ) ) ; } else { return origin ; } }
protected final void finalize $F72 $F845
public boolean addBound ( TypeBound bound ) { if ( bound . isTrivial ( ) ) { return _BOOL ; } final boolean wasAdded = internal_addBound ( bound ) ; if ( DEBUG ) { final String suffix = wasAdded ? NUM00 : NUM00 ; log ( NUM00 + bound + suffix ) ; } return wasAdded ; }
public boolean remove ( SimEvent event ) $F20067 ( sortedSet , event )
public static final void printThreadCpuTime ( final Thread thread ) { if ( tbe . isThreadCpuTimeEnabled ( ) ) { log . info ( $F2990 ( thread ) + getThreadCpuTime ( thread ) + NUM00 ) ; } }
public static Version fromBits $F14337 ( major , minor , bugfix ) { return new Version ( major , minor , bugfix ) ; }
$F48525 ( n , d , scale , i , sb , j , rGen , points )
public static String bytesToString $F23416 ( b ) { if $F8830 ( b ) $F2455 return String . format ( NUM00 , b [ NUM00 ] , b [ NUM00 ] , b [ NUM00 ] , b [ NUM00 ] ) ; }
private String convertToIsoDateTime ( String humanReadableDateTime ) throws ParseException { $F121432 ( dfInitial ) $F126579 ( initialDateTime , dfInitial , humanReadableDateTime ) $F121432 ( df ) $F5330 ( df , initialDateTime ) }
private static boolean classNamesEqual ( String name1 , String name2 ) { name1 = $F31604 ( name1 ) ; name2 = $F31604 ( name2 ) ; $F1964 ( name1 , name2 ) }
public boolean optBoolean ( int index ) $F8587 ( optBoolean , index , _BOOL )
public CommandBuilder withLongSwitchIfPresent ( $F2100 ( properties ) , String ... keys ) { withLongSwitchIfPresent ( properties , UnaryOperator . identity ( ) , keys ) ; return this ; }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
private void onCollectionClicked ( Long collectionId ) { Intent intent = new Intent ( this , ProductListActivity . class ) ; if ( collectionId != null ) { intent . putExtra ( ProductListActivity . EXTRA_COLLECTION_ID , collectionId ) ; } startActivity ( intent ) ; }
public void addFrequency ( Frequency frequency ) $F207 ( frequencies , frequency )
public boolean isItemStackRegisteredForName ( ItemStack stack , String oreName ) { final $F2027 oreIDs = OreDictionary . getOreIDs ( stack ) ; for ( final int oreID : oreIDs ) { if ( oreName . equals ( OreDictionary . getOreName ( oreID ) ) ) { return _BOOL ; } } return _BOOL ; }
private static $F2304 $F52326 createClassloaderUrls ( $F2304 URL url ) throws PluginException { List $F100821 urls = new $F188804 $F72 ; urls . add ( url ) ; Manifest mf = null ; $F291035 ( f , url ) if $F4926 ( f ) { JarInputStream jis = null ; try { jis = new JarInputStream ( url . openStream ( ) ) ; mf = jis . getManifest ( ) ; } catch ( IOException ioe ) { throw new PluginException ( NUM00 + url , ioe ) ; } $F19458 ( IO , jis ) } else { File manifest = guessManifest ( f ) ; if ( manifest != null ) { FileInputStream is = null ; try { $F5335 ( is , manifest ) mf = new Manifest ( is ) ; } catch ( IOException e ) { throw new PluginException ( NUM00 + url , e ) ; } $F19458 ( IO , is ) } } if ( mf != null ) { try { addClassPathFromManifest ( url , urls , mf ) ; } catch ( MalformedURLException e ) { throw new PluginException ( NUM00 + url , e ) ; } } return urls . toArray ( new URL $F2313 ( urls ) ) ; }
$F1 public void write $F36827 ( str , st , end ) throws IOException $F21537 ( out , str , st , end )
$F125330 ( isAwake )
private static void transferStreams ( InputStream source , OutputStream destination ) { $F12496 ( buffer ) try { while ( _BOOL ) { int bytesRead = - NUM00 ; try $F616 ( bytesRead , source , buffer ) catch ( IOException e ) $F932 $F167039 ( bytesRead ) try $F29756 ( destination , buffer , bytesRead ) catch ( IOException e ) $F932 } } finally { try $F881 ( source ) $F29052 $F53155 ( destination ) } }
public static void gc $F72 { if ( startedGc ) { forceGc = _BOOL ; gcShouldLoop = _BOOL ; } startGCThread ( ) ; $F8073 ( LOCK ) try $F31130 ( Thread ) catch ( InterruptedException er ) $F845 }
private $F84864 toArrayList $F72 { $F91915 ( list ) $F91919 ( p , first , succ , item , list ) return list ; }
public static BlobEntry isBlobEntryForStoring ( String repositoryLocation , String mimeType ) { RepositoryLocation location ; try { location = new RepositoryLocation ( repositoryLocation ) ; Entry entry = location . locateEntry ( ) ; if ( entry instanceof BlobEntry ) { BlobEntry blobEntry = ( BlobEntry ) entry ; if ( mimeType . equals ( blobEntry . getMimeType ( ) ) ) { return blobEntry ; } else { SwingTools . showSimpleErrorMessage ( $F20534 ( blobEntry ) ) ; $F1274 } } else if ( entry == null ) $F4915 ( createBlobEntry , repositoryLocation ) else { SwingTools . showSimpleErrorMessage ( $F20534 ( entry ) ) ; } } catch ( RepositoryException e ) { SwingTools . showSimpleErrorMessage ( NUM00 , e ) ; } catch ( MalformedRepositoryLocationException e ) { SwingTools . showSimpleErrorMessage ( NUM00 , e ) ; } $F1274 }
$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 Batch batch , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { com . wipro . ats . bdre . md . dao . jpa . Batch jpaBatch = new com . wipro . ats . bdre . md . dao . jpa . Batch $F72 ; jpaBatch . setBatchType ( batch . getBatchType ( ) ) ; InstanceExec instanceExec = new InstanceExec $F72 ; if ( batch . getSourceInstanceExecId ( ) != null ) { instanceExec . setInstanceExecId ( batch . getSourceInstanceExecId ( ) ) ; jpaBatch . setInstanceExec ( instanceExec ) ; } Long autoGenBatchId = batchDAO . insert ( jpaBatch ) ; batch . setBatchId ( autoGenBatchId ) ; $F4608 ( restWrapper , batch , RestWrapper ) LOGGER . info ( RECORDWITHID + batch . getBatchId ( ) + NUM00 + principal . getName ( ) + batch ) ; } $F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
private void onClickGalleryImage ( final RecentMedia aMediaItem ) { if ( null != mCamera ) { mCamera . stopPreview ( ) ; } mSelectedGalleryItemsList . add ( aMediaItem ) ; if ( ( null != aMediaItem . mThumbnail ) && ! mIsAvatarMode ) { updateUiConfiguration ( UI_SHOW_TAKEN_IMAGE , IMAGE_ORIGIN_GALLERY ) ; mImagePreviewImageView . setImageBitmap ( aMediaItem . mThumbnail ) ; VectorApp . setSavedCameraImagePreview ( aMediaItem . mThumbnail ) ; } else if ( null != aMediaItem . mFileUri ) { displayImagePreview ( null , null , aMediaItem . mFileUri , IMAGE_ORIGIN_GALLERY ) ; } else $F13955 ( Log , LOG_TAG ) mImagePreviewImageView . setTag ( aMediaItem . mFileUri ) ; }
public static double pareto ( double alpha ) { if $F102905 ( alpha ) $F824 return Math . pow ( NUM00 - uniform ( ) , - NUM00 / alpha ) - NUM00 ; }
public void disconnectFromBroker ( final MqttAsyncConnection connection ) { try { connection . disconnect ( new MqttDisconnectionResultHandler $F72 ) ; } catch ( SpyException e ) { Platform . runLater ( new MqttEventHandler ( new MqttDisconnectionAttemptFailureEvent ( connection , e ) ) ) ; $F1575 ( logger , e ) } }
public $F131 copyAll $F72 $F138478 ( Arrays , args )
public void start $F72 { $F21153 ( LOG , port , logLevel ) try $F28175 ( component ) $F54147 ( e ) $F10635 ( LOG , port ) running = _BOOL ; $F3224 ( started , System ) }
public FSAccountFedInfo readAccountFedInfo ( String userID , String providerID ) throws FSAccountMgmtException $F25228 ( readAccountFedInfo , userID , providerID )
public Response $F1947 ( status , mimeType , txt ) { this . status = status ; this . mimeType = mimeType ; try { this . data = $F18490 ( txt ) ; } catch ( $F42439 uee ) $F302 ( uee ) }
@ Parallel @ Realtime ( limit = LINEAR ) public E reduce ( BinaryOperator $F11685 operator ) { $F11686 itr = iterator ( ) ; if $F87568 ( itr ) $F1274 $F378645 ( accumulator , itr ) while $F2921 ( itr ) accumulator = operator . apply ( accumulator , itr . next ( ) ) ; return accumulator ; }
public void saveHistory ( String filename ) throws Exception { $F4649 ( fos , filename ) $F7054 ( oos , fos ) oos . writeObject ( getHistory ( ) ) ; $F59 ( oos ) }
private void checkSize ( final int i ) { if ( i >= max_size ) { final int old_size = max_size ; max_size += increment_size ; if ( max_size <= i ) { max_size = i + increment_size + NUM00 ; } final $F1986 temp = items ; $F10254 ( items , max_size ) $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; } }
public double nextGaussian $F72 { return random . nextGaussian ( ) ; }
private void readFromProperties ( final Properties props , final boolean defaultMinimized , final int defaultX , final int defaultY , final boolean defaultVisible ) { minimized = Boolean . parseBoolean ( props . getProperty ( NUM00 + name + NUM00 , Boolean . toString ( defaultMinimized ) ) ) ; visible = Boolean . parseBoolean ( props . getProperty ( NUM00 + name + NUM00 , Boolean . toString ( defaultVisible ) ) ) ; x = Integer . parseInt ( props . getProperty ( NUM00 + name + NUM00 , Integer . toString ( defaultX ) ) ) ; y = Integer . parseInt ( props . getProperty ( NUM00 + name + NUM00 , Integer . toString ( defaultY ) ) ) ; }
public boolean sendEMailAttachments ( int AD_User_ID , String subject , String message , $F92258 attachments , boolean html ) { MUser to = MUser . get ( getCtx ( ) , AD_User_ID ) ; String toEMail = to . getEMail ( ) ; if $F6036 ( toEMail ) { $F37855 ( log , to ) return _BOOL ; } EMail email = createEMail ( null , to , subject , message , html ) ; $F397 ( email , _BOOL ) email . addAttachments ( attachments ) ; try { return sendEmailNow ( null , to , email ) ; } catch ( Exception ex ) { log . severe ( getName ( ) + NUM00 + ex . getLocalizedMessage ( ) ) ; return _BOOL ; } }
private void addUnitTaxCalculationInfoClone ( final TaxCalculationInfo taxCalInfo , final TaxCalculationInfo clone ) { final List < UnitTaxCalculationInfo > units = new ArrayList < UnitTaxCalculationInfo > $F72 ; final List < UnitTaxCalculationInfo > unitsByDate = new ArrayList < UnitTaxCalculationInfo > $F72 ; for ( final UnitTaxCalculationInfo unitInfo : taxCalInfo . getUnitTaxCalculationInfos ( ) ) { final UnitTaxCalculationInfo newUnitInfo = getUnitTaxCalculationInfoClone ( unitInfo ) ; unitsByDate . add ( newUnitInfo ) ; } clone . setUnitTaxCalculationInfo ( units ) ; }
public SocketWrapper accept $F72 throws IOException { for ( $F589 ) { try { Socket sock = serverSocket . accept ( ) ; return new SocketWrapper ( sock ) ; } catch ( SocketTimeoutException e ) $F845 catch ( IOException e ) { if ( done ) { throw new SocketTerminationException ( NUM00 , e ) ; } else { throw e ; } } } }
private String replaceDotInMustacheKeys ( $F20109 ( mustacheKeys ) , final String pluginCall ) { String fixedPluginCall = pluginCall ; for ( String mustacheKey : mustacheKeys ) { if $F3578 ( mustacheKey ) { fixedPluginCall = fixedPluginCall . replace ( NUM00 + mustacheKey + NUM00 , $F139654 ( mustacheKey ) ) ; } } return fixedPluginCall ; }
protected synchronized Instance processBuffers $F72 { if ( m_firstBuffer != null && m_secondBuffer != null && $F3816 ( m_firstBuffer ) && $F3816 ( m_secondBuffer ) ) { if $F27748 ( m_stopRequested ) $F1337 InstanceHolder firstH = m_firstBuffer . peek ( ) ; InstanceHolder secondH = m_secondBuffer . peek ( ) ; Instance first = firstH . m_instance ; Instance second = secondH . m_instance ; int cmp = compare ( first , second , firstH , secondH ) ; if ( cmp == NUM00 ) { Instance newInst = generateMergedInstance ( m_firstBuffer . remove ( ) , m_secondBuffer . remove ( ) ) ; return newInst ; } else if ( cmp < NUM00 ) { do { $F7042 ( m_firstBuffer ) if $F3817 ( m_firstBuffer ) { $F56194 ( firstH , m_firstBuffer ) first = firstH . m_instance ; cmp = compare ( first , second , firstH , secondH ) ; } } while ( cmp < NUM00 && $F3816 ( m_firstBuffer ) ) ; } else { do { $F7042 ( m_secondBuffer ) if $F3817 ( m_secondBuffer ) { $F56194 ( secondH , m_secondBuffer ) second = secondH . m_instance ; cmp = compare ( first , second , firstH , secondH ) ; } } while ( cmp > NUM00 && $F3816 ( m_secondBuffer ) ) ; } } $F1274 }
public boolean isThemeConstant ( String constantName , boolean def ) { String c = getThemeConstant ( constantName , null ) ; $F1933 ( c , def ) return c . equalsIgnoreCase ( NUM00 ) || c . equals ( NUM00 ) ; }
public void testDelete4 $F72 throws SQLException { DatabaseCreator . fillFKCascadeTable ( conn ) ; $F62856 ( statement , DatabaseCreator ) }
public void unmap ( int addr , int len ) { for ( int i = NUM00 ; i < len ; i += PAGE_SIZE ) { int pte = getPTE ( addr + i ) ; if ( getPage ( pte ) != null ) { readableMemory [ pte ] = null ; writableMemory [ pte ] = null ; executableMemory [ pte ] = null ; } else { throw new Error ( $F36004 ( Integer , addr ) + len ) ; } } }
private synchronized void saveToSettings $F72 { List < List > $F204 ( entriesToSave ) ; for ( StatusHistoryEntry entry : entries . values ( ) ) $F3762 ( entriesToSave , entryToList , entry ) settings . putList ( NUM00 , entriesToSave ) ; }
protected void initFinished $F72 $F845
protected void addToMaintenanceQueue ( NodePortTuple npt ) { if $F38948 ( maintenanceQueue , npt , _BOOL ) maintenanceQueue . add ( npt ) ; }
public MovieScraperMetadataPanel ( MovieScraperMetadataConfig config ) $F46658 ( this , config , initComponents )
$F1654 ( seq )
public static void assertPropsPerRow ( Iterator < EventBean > iterator , SafeIterator < EventBean > safeIterator , $F806 propertyNames , $F29684 expected ) { assertPropsPerRow ( EPAssertionUtil . iteratorToArray ( iterator ) , propertyNames , expected ) ; assertPropsPerRow ( EPAssertionUtil . iteratorToArray ( safeIterator ) , propertyNames , expected ) ; $F59 ( safeIterator ) }
public boolean isLeaf $F72 $F52232 ( children )
public void testGet $F72 throws Exception { IgniteCache $F76740 cache = populate ( ) ; for ( long i = from ; i < to ; i ++ ) { $F5856 ( val , cache , i ) assertNotNull ( val ) ; assertEquals ( i , val . longValue ( ) ) ; } $F127421 ( assertEquals , swappedCnt ) $F127421 ( assertEquals , offheapedCnt ) assertEquals ( to - from , unswapedCnt . get ( ) + onheapedCnt . get ( ) ) ; checkEntries ( cache ) ; assertEquals ( to - from , unswapedCnt . get ( ) + onheapedCnt . get ( ) ) ; }
public int read $F72 throws IOException { if ( hasNextChar ) { hasNextChar = _BOOL ; write ( nextChar ) ; return nextChar ; } if ( previousLine != lexer . getLine ( ) ) { numUnicodeEscapesFoundOnCurrentLine = NUM00 ; previousLine = lexer . getLine ( ) ; } $F7468 ( c , reader ) if ( c != NUM00 ) { write ( c ) ; return c ; } $F10201 ( c , reader ) if ( c != NUM00 ) { hasNextChar = _BOOL ; nextChar = c ; write ( NUM00 ) ; $F1278 } int numberOfUChars = NUM00 ; do { numberOfUChars ++ ; $F10201 ( c , reader ) } while ( c == NUM00 ) ; checkHexDigit ( c ) ; $F83 ( charNum ) $F36813 ( charNum , c ) for ( $F6268 ( i ) ) { $F10201 ( c , reader ) checkHexDigit ( c ) ; $F36813 ( charNum , c ) } int rv = Integer . parseInt ( $F89373 ( charNum ) ) ; write ( rv ) ; numUnicodeEscapesFound += NUM00 + numberOfUChars ; numUnicodeEscapesFoundOnCurrentLine += NUM00 + numberOfUChars ; return rv ; }
public boolean isEmpty $F72 { if ( ! built ) $F18904 ( itemBoundables ) $F18904 ( root ) }
protected AbstractWriter ( Writer w , Document doc , int pos , int len ) { this . doc = doc ; it = new ElementIterator ( doc . getDefaultRootElement ( ) ) ; out = w ; startOffset = pos ; endOffset = pos + len ; Object docNewline = doc . getProperty ( DefaultEditorKit . EndOfLineStringProperty ) ; if ( docNewline instanceof String ) { setLineSeparator ( ( String ) docNewline ) ; } else { String newline = null ; try $F185872 ( newline , System ) catch ( SecurityException se ) $F845 $F23170 ( newline ) setLineSeparator ( newline ) ; } canWrapLines = _BOOL ; }
protected void adjustPositionY ( int velocityY ) { if ( reverseLayout ) velocityY *= - NUM00 ; int childCount = getChildCount ( ) ; if ( childCount > NUM00 ) { int curPosition = ViewUtils . getCenterYChildPosition ( this ) ; int $F125539 ( childHeight , getHeight , getPaddingTop , getPaddingBottom ) ; int flingCount = getFlingCount ( velocityY , childHeight ) ; int targetPosition = curPosition + flingCount ; if ( mSinglePageFling ) { flingCount = Math . max ( - NUM00 , Math . min ( NUM00 , flingCount ) ) ; targetPosition = flingCount == NUM00 ? curPosition : mPositionOnTouchDown + flingCount ; } $F89002 ( targetPosition , Math ) targetPosition = $F125548 ( Math , targetPosition , getItemCount ) ; if ( targetPosition == curPosition && ( ! mSinglePageFling || mPositionOnTouchDown == curPosition ) ) { View centerYChild = ViewUtils . getCenterYChild ( this ) ; if ( centerYChild != null ) { if ( mTouchSpan > centerYChild . getHeight ( ) * mTriggerOffset && targetPosition != NUM00 ) { if ( ! reverseLayout ) targetPosition -- ; else targetPosition ++ ; } else if ( mTouchSpan < centerYChild . getHeight ( ) * - mTriggerOffset && targetPosition != getItemCount ( ) - NUM00 ) { if ( ! reverseLayout ) targetPosition ++ ; else targetPosition -- ; } } } if ( DEBUG ) { $F125570 ( Log , mTouchSpan ) $F125570 ( Log , targetPosition ) } smoothScrollToPosition ( safeTargetPosition ( targetPosition , getItemCount ( ) ) ) ; } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F1 public Node importTo ( Document hostDocument ) { ValidateUtil . validateNotNull ( hostDocument , NUM00 ) ; Element clonedTokenElement = ( Element ) hostDocument . importNode ( _parsedToken . getDocumentElement ( ) , _BOOL ) ; markAssertionIdAttribute ( clonedTokenElement ) ; return clonedTokenElement ; }
public static Matrix random ( int m , int n ) { $F3788 ( A , m , n ) $F3791 ( X , A ) for ( $F119 ( i , m ) ) { for ( $F119 ( j , n ) ) $F3794 ( X , i , j , Math ) } return A ; }
public void addPriorityUnit ( String id ) { if ( ! StringUtil . isPositiveInteger ( id ) ) $F932 $F46427 ( addPriorityUnit , Integer , id ) }
private void calcIntervalDis $F72 { $F2329 ( mMarkTextPaint ) String defaultText = NUM00 ; $F28883 ( temp ) int max = NUM00 ; if $F8841 ( mItems ) { for ( String i : mItems ) { $F77589 ( mMarkTextPaint , i , temp ) if ( temp . width ( ) > max ) { max = temp . width ( ) ; } } } else { $F77589 ( mMarkTextPaint , defaultText , temp ) max = temp . width ( ) ; } if $F20899 ( TextUtils , mAdditionCenterMark ) { mMarkTextPaint . setTextSize ( mNormalTextSize ) ; $F77589 ( mMarkTextPaint , mAdditionCenterMark , temp ) mAdditionCenterMarkWidth = temp . width ( ) ; max += temp . width ( ) ; } mIntervalDis = max * mIntervalFactor ; }
public boolean isUseSoftkeys $F72 { return useSoftkeys ; }
public void testDivisionKnuthFirstDigitsEqual $F72 { byte $F3009 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; byte $F3014 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void connectionClosed ( ConnectionEvent event ) { if ( isActive ) { ManagedConnection conn = ( ManagedConnection ) event . getSource ( ) ; TransactionManagerImpl transManager = TransactionManagerImpl . getTransactionManager ( ) ; try { Transaction txn = transManager . getTransaction ( ) ; if ( txn == null ) { mannPoolCache . returnPooledConnectionToPool ( conn ) ; } } catch ( Exception se ) { String exception = $F5351 ( se ) ; if $F585 ( logger ) { logger . debug ( exception , se ) ; } } } }
public MetadataBlockHeader ( boolean isLastBlock , BlockType blockType , int dataLength ) { $F87627 ( rawdata , ByteBuffer , HEADER_LENGTH ) this . blockType = blockType ; this . isLastBlock = isLastBlock ; this . dataLength = dataLength ; byte type ; if ( isLastBlock ) { type = ( byte ) ( NUM00 | blockType . getId ( ) ) ; } else { type = ( byte ) blockType . getId ( ) ; } rawdata . put ( type ) ; rawdata . put ( ( byte ) ( ( dataLength & NUM00 ) > > > NUM00 ) ) ; rawdata . put ( ( byte ) ( ( dataLength & NUM00 ) > > > NUM00 ) ) ; $F42832 ( rawdata , dataLength ) $F1325 ( bytes , HEADER_LENGTH ) $F149311 ( i , HEADER_LENGTH , bytes , rawdata ) }
private void checkFileToRun $F72 throws ExitCodeException { if $F7108 ( runThisFile ) { throw new ExitCodeException ( EXITCODE_MODULE_TO_RUN_NOT_FOUND ) ; } }
public void addLastItem ( M model ) { $F28711 ( addItem , mDatas , model ) ; }
@ ManagedOperation ( description = NUM00 ) public void notifyAllTagCacheListeners $F72 { $F973 ( LOGGER ) for ( Long key : controlTagCache . getKeys ( ) ) { controlTagCache . acquireWriteLockOnKey ( key ) ; try { $F64414 ( controlTag , controlTagCache , key ) $F657 ( eventTime , System ) controlTagCache . notifyListenerStatusConfirmation ( controlTag , eventTime ) ; } finally $F106063 ( controlTagCache , key ) } for ( Long key : dataTagCache . getKeys ( ) ) { dataTagCache . acquireWriteLockOnKey ( key ) ; try { DataTag dataTag = dataTagCache . getCopy ( key ) ; $F657 ( eventTime , System ) dataTagCache . notifyListenerStatusConfirmation ( dataTag , eventTime ) ; } finally $F106063 ( dataTagCache , key ) } $F973 ( LOGGER ) }
public static $F2469 breakdown ( long t , $F4170 TimeUnit unit , boolean roundMillis ) { long days = unit . toDays ( t ) ; long hours = unit . toHours ( t ) % NUM00 ; long minutes = unit . toMinutes ( t ) % NUM00 ; long seconds = unit . toSeconds ( t ) % NUM00 ; long msecs = unit . toMillis ( t ) % NUM00 ; if ( roundMillis ) { if ( msecs >= NUM00 ) { seconds ++ ; msecs = NUM00 ; if ( seconds == NUM00 ) { minutes ++ ; seconds = NUM00 ; if ( minutes == NUM00 ) { hours ++ ; minutes = NUM00 ; if ( hours == NUM00 ) { days ++ ; hours = NUM00 ; } } } } } return new long [ ] { days , hours , minutes , seconds , msecs } ; }
private int socksGetServerPort $F72 { InetSocketAddress addr = ( InetSocketAddress ) proxy . address ( ) ; return addr . getPort ( ) ; }
public static $F4203 ReactiveSeq $F4203 fromList ( $F95121 ( list ) ) { Objects . requireNonNull ( list ) ; final ReversingListSpliterator array = new ReversingListSpliterator $F4203 ( list , _BOOL ) ; return StreamUtils . reactiveSeq ( StreamSupport . stream ( array , _BOOL ) , Optional . ofNullable ( array ) ) ; }
private boolean processKeyUp ( int keyCode ) { if ( keyCode == KeyEvent . KEYCODE_DEL ) { if ( mInKbMode ) { if $F5973 ( mTypedTimes ) { int deleted = deleteLastTypedKey ( ) ; String deletedKeyStr ; $F218511 ( deleted , getAmOrPmKeyCode , AM , deletedKeyStr , mAmText , PM , mPmText , String , getValFromKeyCode ) ViewCompatUtils . announceForAccessibility ( mDelegator , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; updateDisplay ( _BOOL ) ; } } } else $F218536 ( keyCode , KeyEvent , mIs24HourView , getAmOrPmKeyCode , AM , PM , mInKbMode , mRadialTimePickerView , Log , TAG , _BOOL , mTypedTimes , tryStartingKbMode , addKeyIfLegal , updateDisplay ) return _BOOL ; }
public synchronized OMGraphicList prepare $F72 { $F138819 ( list ) Projection proj = getProjection ( ) ; $F1933 ( proj , list ) Point2D upperLeft = proj . getUpperLeft ( ) ; Point2D lowerRight = proj . getLowerRight ( ) ; if ( upperLeft . getX ( ) > lowerRight . getX ( ) ) { getPoints ( new DataBounds ( upperLeft , new $F5047 ( NUM00 , lowerRight . getY ( ) ) ) , list , proj ) ; getPoints ( new DataBounds ( new $F5047 ( - NUM00 , upperLeft . getY ( ) ) , lowerRight ) , list , proj ) ; } else { getPoints ( new DataBounds ( upperLeft , lowerRight ) , list , proj ) ; } OMText statement = new OMText ( NUM00 , proj . getHeight ( ) - NUM00 , getName ( ) + NUM00 + list . size ( ) + NUM00 + dataSource . size ( ) + NUM00 , OMText . JUSTIFY_LEFT ) ; statement . setFillPaint ( Color . gray ) ; statement . generate ( proj ) ; $F6965 ( list , statement ) return list ; }
public X509Name ( Vector oids , Vector values ) { this ( oids , values , new X509DefaultEntryConverter $F72 ) ; }
void nextLine $F72 { try { $F36243 ( nextLine , currentEpisode ) while $F3057 ( nextLine ) $F36243 ( nextLine , currentEpisode ) } catch ( IOException | NullPointerException e ) { nextLine = null ; } }
public Jobs subset $F4374 ( jobIds ) { final List $F67389 subsetResult = new ArrayList $F67389 $F72 ; for ( String jobId : jobIds ) { Job job = jobMap . get ( jobId ) ; if ( job . isAnalysis ( ) ) $F207 ( subsetResult , job ) } return new Jobs ( subsetResult ) ; }
public void addPropertyChangeListener ( PropertyChangeListener listener ) { List $F39994 l = Arrays . asList ( listenerList . getListeners ( PropertyChangeListener . class ) ) ; if $F2200 ( l , listener ) { listenerList . add ( PropertyChangeListener . class , listener ) ; } }
public static $F96 fromHexString ( String text ) { $F1382 ( text ) if ( $F47012 ( text ) != NUM00 ) text = NUM00 + text ; $F203657 ( resLen , text ) int loNibble , hiNibble ; $F2175 ( res , resLen ) for ( $F119 ( i , resLen ) ) { int j = i < < NUM00 ; hiNibble = charToNibble ( text . charAt ( j ) ) ; loNibble = $F203659 ( charToNibble , text , j ) ; if $F44600 ( loNibble , hiNibble ) $F1274 res [ i ] = $F112580 ( hiNibble , loNibble ) ; } return res ; }
protected static double variance ( $F1986 s , $F1986 sS , $F1986 sumOfWeights ) { double var = NUM00 ; for ( $F1139 ( i , s ) ) { if ( sumOfWeights [ i ] > NUM00 ) { var += singleVariance ( s [ i ] , sS [ i ] , sumOfWeights [ i ] ) ; } } return var ; }
public void write ( CharSequence csq ) throws IOException { $F11550 ( length , csq ) for ( int i = NUM00 ; i < length ; ) { $F52837 ( c , csq , i ) if ( c < NUM00 ) { $F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } else { write ( c ) ; } } }
public static boolean canResize ( List constraints ) { for ( $F2774 ( iter , constraints ) ) { $F67999 ( dc , iter ) if ( ! dc . canResize ( ) ) return _BOOL ; } return _BOOL ; }
$F6802 ( esd , connectionAllowed )
String readNumber ( String source , int ofs , String token , boolean adjacent ) { if ( adjacent ) { return $F147460 ( source , ofs , token ) ; } $F1749 ( len , source ) for ( int i = ofs ; i < len ; i ++ ) { $F1280 ( ch , source , i ) if ( isNumeric ( ch ) == _BOOL ) { $F38155 ( i ) $F6669 ( source , ofs , i ) } } $F32744 ( source , ofs ) }
private Vec feedForward ( Vec input ) { Vec x = input ; for ( $F2277 ( i , Ws ) ) { Matrix W_i = Ws . get ( i ) ; Vec b_i = bs . get ( i ) ; Vec a_i = W_i . multiply ( x ) ; a_i . mutableAdd ( b_i ) ; a_i . applyFunction ( f ) ; x = a_i ; } return x ; }
private boolean split_wtrace_other ( BrdTracep found_trace , Collection < BrdTracep > split_pieces , ArrayList $F66714 intersecting_lines , AwtreeFindEntry found_entry ) { if ( found_trace == this ) return _BOOL ; boolean have_trace_split = _BOOL ; for ( PlaLineInt inter_line : intersecting_lines ) { $F46020 ( have_trace_split ) int line_no = found_entry . shape_index_in_object + NUM00 ; $F102811 curr_split_pieces = found_trace . split_with_end_line ( line_no , inter_line ) ; if $F6214 ( curr_split_pieces ) $F598 have_trace_split = _BOOL ; split_pieces . addAll ( curr_split_pieces ) ; } if ( ! have_trace_split ) split_pieces . add ( found_trace ) ; return have_trace_split ; }
private void printSolution ( Solution solution ) { if ( includeVariables ) { for ( int i = NUM00 ; i < solution . getNumberOfVariables ( ) ; i ++ ) { if ( i > NUM00 ) $F21410 ( writer ) writer . print ( encode ( solution . getVariable ( i ) ) ) ; } } for ( $F61686 ( i , solution ) ) { if ( ( i > NUM00 ) || ( includeVariables && ( solution . getNumberOfVariables ( ) > NUM00 ) ) ) $F21410 ( writer ) writer . print ( solution . getObjective ( i ) ) ; } $F21416 ( writer ) }
public void readNBT ( NBTTagCompound nbt ) { if ( nbt . hasKey ( NUM00 , NUM00 ) ) { this . decayLevel = nbt . getInteger ( NUM00 ) ; this . decaySaturationLevel = nbt . getFloat ( NUM00 ) ; this . decayAccelerationLevel = nbt . getFloat ( NUM00 ) ; } }
public void copyTo ( PositionTextureVertex [ ] verts , TexturedQuad [ ] quad ) { TexturedPolygon [ ] poly = new TexturedPolygon [ quad . length ] ; for ( $F1139 ( idx , quad ) ) { poly [ idx ] = new TexturedPolygon ( ( PositionTextureVertex [ ] ) quad [ idx ] . vertexPositions ) ; } copyTo ( verts , poly ) ; }
public synchronized void deleteObserver ( Observer observer ) $F106 ( observers , observer )
public AccountAttribute asAccountAttribute ( Account account ) { $F1338 ( account ) AccountAttribute who = new AccountAttribute $F72 ; who . name = account . getFullName ( ) ; who . email = account . getPreferredEmail ( ) ; who . username = account . getUserName ( ) ; return who ; }
public void delete ( TemplatePersistenceData data ) { if ( data . isUserAdded ( ) ) fTemplates . remove ( data ) ; else data . setDeleted ( _BOOL ) ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F36797 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1000 ( newVector ) newVector . addElement ( new Option ( $F34354 , NUM00 , NUM00 , NUM00 ) ) ; $F1007 ( newVector ) }
public String consumeWord $F72 { int start = pos ; while ( matchesWord ( ) ) pos ++ ; $F6669 ( queue , start , pos ) }
public static void printInlining ( final ResolvedJavaMethod method , final int bci , final int inliningDepth , final boolean success , final String msg , final Object ... args ) { if $F100917 ( HotSpotPrintInlining ) { $F83 ( sb ) $F84 ( sb ) $F84 ( sb ) sb . append ( String . format ( NUM00 , NUM00 , method . isSynchronized ( ) ? NUM00 : NUM00 , NUM00 , NUM00 , method . isNative ( ) ? NUM00 : NUM00 ) ) ; $F84 ( sb ) $F84 ( sb ) $F103815 ( i , inliningDepth , sb ) sb . append ( String . format ( NUM00 , bci , methodName ( method ) , success ? NUM00 : NUM00 , String . format ( msg , args ) ) ) ; $F144975 ( TTY , sb ) } }
public static double calculatePValue ( double t , int v ) { return NUM00 * ( NUM00 - StudentsTDistribution . cdf ( Math . abs ( t ) , v ) ) ; }
public static void appendChild ( Node parent , Node child ) { Document ownerDoc = getOwnerDocument ( parent ) ; if ( child . getOwnerDocument ( ) != ownerDoc ) { parent . appendChild ( ownerDoc . importNode ( child , _BOOL ) ) ; } else $F205551 ( parent , child ) }
protected void deleteSessionVariables $F71933 ( sessionId , varNames ) { $F59924 ( sessionId ) Key key = keyFactory . newKey ( sessionId ) ; Transaction transaction = datastore . newTransaction ( ) ; try { Entity stateEntity = transaction . get ( key ) ; Entity . Builder builder = Entity . builder ( stateEntity ) ; $F83 ( delNames ) for ( String varName : varNames ) { $F86403 ( delNames , varName ) builder = builder . remove ( varName ) ; } datastore . update ( builder . build ( ) ) ; } $F1214 finally { if $F433289 ( transaction ) $F21746 ( transaction ) } }
$F20664 private void pruneScrapViews $F72 { $F18832 ( maxViews , mActiveViews ) final int viewTypeCount = mViewTypeCount ; $F158084 ( scrapViews , mScrapViews ) for ( $F1316 ( i , viewTypeCount ) ) { $F65533 ( scrapPile , scrapViews , i ) $F115 ( size , scrapPile ) final int extras = size - maxViews ; size -- ; $F158088 ( j , extras , removeDetachedView , scrapPile , size , _BOOL ) } if ( mTransientStateViews != null ) { for ( $F2277 ( i , mTransientStateViews ) ) { final View v = mTransientStateViews . valueAt ( i ) ; if ( ! v . hasTransientState ( ) ) { mTransientStateViews . removeAt ( i ) ; i -- ; } } } }
private void updateWorkAmount ( double workTime ) { if ( workTime <= NUM00 ) { currentWorkAmount *= NUM00 ; } else { totalTimeTaken += workTime ; completedWorkAmount += currentWorkAmount ; currentWorkAmount = ( int ) Math . ceil ( targetExecutionMs * completedWorkAmount / totalTimeTaken ) ; } }
public static boolean isLafAqua $F72 { ensureValidCache ( ) ; if ( cachedIsLafAqua == null ) { cachedIsLafAqua = $F130521 ( Boolean , computeIsLafAqua ) ; } $F44652 ( cachedIsLafAqua ) }
public void moveRandomly $F72 { setRandomPathFrom ( getX ( ) , getY ( ) , getMovementRange ( ) / NUM00 ) ; }
public void plnI ( Object o ) throws IOException { $F31458 ( p , o ) pln ( ) ; pI ( ) ; }
$F1 public void writeEntityToNBT ( NBTTagCompound par1NBTTagCompound ) { par1NBTTagCompound . setShort ( NUM00 , ( short ) this . xTile ) ; par1NBTTagCompound . setShort ( NUM00 , ( short ) this . yTile ) ; par1NBTTagCompound . setShort ( NUM00 , ( short ) this . zTile ) ; par1NBTTagCompound . setInteger ( NUM00 , Block . getIdFromBlock ( this . inTile ) ) ; par1NBTTagCompound . setByte ( NUM00 , ( byte ) this . inData ) ; par1NBTTagCompound . setByte ( NUM00 , ( byte ) this . arrowShake ) ; par1NBTTagCompound . setByte ( NUM00 , ( byte ) ( this . inGround ? NUM00 : NUM00 ) ) ; par1NBTTagCompound . setBoolean ( NUM00 , this . isExplosive ) ; }
$F1 public StringBuffer format ( final double value , final StringBuffer buffer , final FieldPosition position ) { return format ( Double . valueOf ( value ) , buffer , position ) ; }
private Object translateStreamToInputStream ( InputStream str , DataFlavor flavor , long format , Transferable localeTransferable ) throws IOException { if ( isFlavorCharsetTextType ( flavor ) && isTextFormat ( format ) ) { str = new ReencodingInputStream ( str , format , DataTransferer . getTextCharset ( flavor ) , localeTransferable ) ; } return constructFlavoredObject ( str , flavor , InputStream . class ) ; }
public void dispose $F72 throws IabAsyncInProgressException { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { throw new IabAsyncInProgressException $F54019 ( mAsyncOperation ) ; } } logDebug ( NUM00 ) ; mSetupDone = _BOOL ; if ( mServiceConn != null ) { logDebug ( NUM00 ) ; if ( mContext != null ) mContext . unbindService ( mServiceConn ) ; } mDisposed = _BOOL ; mContext = null ; mServiceConn = null ; mService = null ; mPurchaseListener = null ; }
private boolean isIPTResourceFolder ( File dir ) { if $F1892 ( dir ) { $F4453 ( persistenceFile , dir , PERSISTENCE_FILE ) File emlFile = new File ( dir , DataDir . EML_XML_FILENAME ) ; return persistenceFile . isFile ( ) && emlFile . isFile ( ) ; } return _BOOL ; }
public $F2689 addSpriteFrames ( String plist , CCTexture2D texture ) { $F530 dict = PlistParser . parse ( plist ) ; return addSpriteFrames ( dict , texture ) ; }
public void addAnnotation ( final Annotation annotation ) { annotationList . add ( annotation ) ; annotation . setxyGraph ( xyGraph ) ; add ( annotation ) ; revalidate ( ) ; changeSupport . firePropertyChange ( NUM00 , null , annotation ) ; }
public static void createOverviews ( ASDocConfiguration config ) throws CompilerException { String templatesPath = config . getTemplatesPath ( ) ; String ditaPath = config . getOutput ( ) + NUM00 + File . separator ; BufferedWriter writer = null ; Reader reader = null ; try { writer = new BufferedWriter ( new FileWriter ( ditaPath + NUM00 ) ) ; if ( config . getPackageDescriptionFile ( ) != null ) { reader = new BufferedReader ( new FileReader ( config . getPackageDescriptionFile ( ) ) ) ; } else { reader = new BufferedReader ( new FileReader ( templatesPath + NUM00 ) ) ; } OverviewsHandler h = new OverviewsHandler ( writer , config ) ; $F77995 ( source , reader ) $F2218 ( factory , SAXParserFactory ) $F49819 ( parser , factory ) parser . parse ( source , h ) ; } catch ( Exception e ) { if ( Trace . error ) $F301 ( e ) CompilerMessage c = new CouldNotCreate ( $F10629 ( e ) ) ; ThreadLocalToolkit . log ( c ) ; throw c ; } finally { $F141989 ( writer ) $F141989 ( reader ) } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public CreateNewNoteIntentBuilder addTags ( $F5466 $F5 tags ) { $F5 list = mArgs . getStringArrayList ( EvernoteIntent . EXTRA_TAG_NAME_LIST ) ; if ( list == null ) { list = tags ; } else $F36447 ( tags , list ) return setTags ( list ) ; }
private RemoteOperationResult refreshSharesForFolder ( OwnCloudClient client ) { RemoteOperationResult result = null ; GetRemoteSharesForFileOperation operation = new GetRemoteSharesForFileOperation ( mLocalFolder . getRemotePath ( ) , _BOOL , _BOOL ) ; result = operation . execute ( client ) ; if ( result . isSuccess ( ) ) { ArrayList < OCShare > shares = new ArrayList < OCShare > $F72 ; for ( Object obj : result . getData ( ) ) { shares . add ( ( OCShare ) obj ) ; } mStorageManager . saveSharesInFolder ( shares , mLocalFolder ) ; } return result ; }
public double dist ( Math_Vector other ) $F167839 ( distX , this , other , distY , Math )
public static String parseString ( String value ) { if ( $F3106 ( value ) && $F8991 ( value ) || $F3106 ( value ) && $F8991 ( value ) ) { if $F4012 ( value ) { if $F12703 ( value ) { return unescape ( $F4019 ( value ) ) ; } $F16082 ( value ) } } $F29525 ( value ) }
private void defineDesktopPanes ( UIDefaults d ) { d . put ( NUM00 , new ColorUIResource $F989 ) ; String c = PAINTER_PREFIX + NUM00 ; String p = NUM00 ; $F13870 ( d , p , c , DesktopPanePainter ) p = NUM00 ; c = PAINTER_PREFIX + NUM00 ; $F13782 ( d , p ) $F13870 ( d , p , c , DesktopIconPainter ) }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
ObjectAnimator animateBoundScroll $F72 { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F16625 ( animateScroll , curScroll , newScroll ) return mScrollAnimator ; }
public IntArray resize ( IntArray array , long size ) { if ( array instanceof BigIntArray ) { return resizeInPlace ( ( BigIntArray ) array , size ) ; } else { AbstractArray arr = ( AbstractArray ) array ; final IntArray newArray = newIntArray ( size , arr . clearOnResize ) ; for ( long i = NUM00 , end = Math . min ( size , array . size ( ) ) ; i < end ; ++ i ) $F221909 ( newArray , i , array ) $F59 ( array ) return newArray ; } }
public DERUTCTime ( Date time ) { $F108456 ( dateF ) dateF . setTimeZone ( new SimpleTimeZone ( NUM00 , NUM00 ) ) ; this . time = Strings . toByteArray ( dateF . format ( time ) ) ; }
public static double pdf $F7635 ( x , mu , beta ) { final double z = ( x - mu ) / beta ; if ( x == Double . NEGATIVE_INFINITY ) $F1083 return Math . exp ( - z - Math . exp ( - z ) ) / beta ; }
private static $F96 copy_buffer $F24576 ( buffer , sOffset , len ) { $F2175 ( newData , len ) $F21535 ( System , buffer , sOffset , newData , len ) return newData ; }
public SharedFsCheckpointSpi $F72 $F1614 ( dirPaths , DFLT_DIR_PATH )
private void configure $F72 throws NullLocationException , FormatterInitException { String Interval = lmanager . getProperty ( LogConstants . LOGSIGN_PERIODINSECONDS ) ; if $F38892 ( Interval ) { signInterval = LogConstants . LOGSIGN_PERIODINSECONDS_DEFAULT * NUM00 ; } else { signInterval = Long . parseLong ( Interval ) * NUM00 ; } String strMaxFileSize = lmanager . getProperty ( LogConstants . MAX_FILE_SIZE ) ; if $F38892 ( strMaxFileSize ) { maxFileSize = NUM00 ; } else $F37473 ( maxFileSize , Integer , strMaxFileSize ) location = lmanager . getProperty ( LogConstants . LOG_PROP_PREFIX + NUM00 + logName + NUM00 ) ; if ( location == null ) { location = lmanager . getProperty ( LogConstants . LOG_LOCATION ) ; } if $F38892 ( location ) { throw new NullLocationException $F580 ; } if ( ! $F22072 ( location , File ) ) { location += File . separator ; } String filesPerKeyStoreString = lmanager . getProperty ( LogConstants . FILES_PER_KEYSTORE ) ; if $F38892 ( filesPerKeyStoreString ) { if $F12866 ( Debug ) { Debug . warning ( logName + NUM00 + NUM00 ) ; } filesPerKeyStoreString = NUM00 ; } filesPerKeyStore = Integer . parseInt ( filesPerKeyStoreString ) ; $F75014 ( Debug , logName , filesPerKeyStoreString ) String archiverClassString = lmanager . getProperty ( LogConstants . ARCHIVER ) ; if $F38892 ( archiverClassString ) { throw new NullLocationException $F580 ; } archiverClass = archiverClassString ; }
public void pull ( final PullParams params , final ProgressMonitor progressMonitor ) throws IOException { pull ( params , progressMonitor , dockerDaemonUri ) ; }
public static InputStream streamFromString ( String location ) throws IOException { InputStream is = null ; URL url = urlFromString ( location , null , _BOOL ) ; if ( url != null ) { $F21223 ( is , url ) } else { $F1705 ( f , location ) if $F3428 ( f ) $F5335 ( is , f ) } if ( is == null ) $F1337 else if ( isGZipFile ( location ) ) { return new GZIPInputStream ( is ) ; } else { return is ; } }
public void addUpdateListener ( AnimatorUpdateListener listener ) { if ( mUpdateListeners == null ) { mUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; } mUpdateListeners . add ( listener ) ; }
public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; SSOToken adminSSOToken = getAdminSSOToken ( ) ; IOutput outputWriter = getOutputWriter ( ) ; String realm = getStringOptionValue ( IArgument . REALM_NAME ) ; String idName = getStringOptionValue ( ARGUMENT_ID_NAME ) ; String type = getStringOptionValue ( ARGUMENT_ID_TYPE ) ; IdType idType = convert2IdType ( type ) ; $F28010 ( params , realm , type , idName ) try { AMIdentityRepository amir = new AMIdentityRepository ( adminSSOToken , realm ) ; Set set = amir . getAllowedIdOperations ( idType ) ; if ( ! set . contains ( IdOperation . SERVICE ) ) { throw new CLIException ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( params ) ) , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } $F28013 ( writeLog , LogWriter , Level , params ) AMIdentity amid = new AMIdentity ( adminSSOToken , idName , idType , realm , null ) ; Set services = amid . getAssignableServices ( ) ; if ( idType . equals ( IdType . USER ) ) { services . remove ( Constants . SVC_NAME_USER ) ; services . remove ( Constants . SVC_NAME_AUTH_CONFIG ) ; services . remove ( Constants . SVC_NAME_SAML ) ; } if $F2772 ( services ) { String msg = getResourceString ( NUM00 ) ; $F806 arg = $F21901 ; for ( $F2774 ( i , services ) ) { arg [ NUM00 ] = $F2775 ( i ) ; outputWriter . printlnMessage ( MessageFormat . format ( msg , $F2486 ( arg ) ) ) ; } } else $F265961 ( outputWriter , getResourceString ) $F28013 ( writeLog , LogWriter , Level , params ) } catch ( IdRepoException e ) { $F28032 ( args , realm , type , idName , e ) debugError ( NUM00 , e ) ; $F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } catch ( SSOException e ) { $F28032 ( args , realm , type , idName , e ) debugError ( NUM00 , e ) ; $F28035 ( writeLog , LogWriter , Level , args ) $F145379 ( e , ExitCodes ) } }
public boolean isAlive $F72 { if ( hasSentData ) { if $F164541 ( System , lastSendTime , TIMEOUT ) return _BOOL ; return hasReceivedData && lastReceiveTime > lastSendTime ; } return _BOOL ; }
private void removeSelectedItems ( List items ) { for ( $F2774 ( iter , items ) ) { $F8877 ( item , iter ) removeHistoryItem ( item ) ; } refreshWithLastSelection = _BOOL ; $F17015 ( contentProvider ) }
public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; map . put ( k3 , v3 ) ; map . put ( k4 , v4 ) ; return map ; }
public static void disableConnectionReuseIfNecessary $F72 { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . FROYO ) { $F2699 ( System ) } }
public static long sizeOf ( Struct sct ) { Iterator < Entry < Key , Object > > it = sct . entryIterator ( ) ; Entry < Key , Object > e ; long size = NUM00 ; while $F2921 ( it ) { $F45366 ( e , it ) size += SizeOf . size ( e . getKey ( ) ) ; size += SizeOf . size ( e . getValue ( ) ) ; } return size ; }
$F1 public boolean isEnabled $F72 { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) $F68134 ( attributeSelectionPanel ) else { $F68135 ( table ) } return _BOOL ; }
public static $F11061 parseHeaders ( final SessionInputBuffer inbuffer , int maxHeaderCount , int maxLineLen , LineParser parser ) throws HttpException , IOException { $F826 ( inbuffer ) $F45529 ( parser , BasicLineParser ) $F12181 ( headerLines ) CharArrayBuffer current = null ; CharArrayBuffer previous = null ; for ( $F589 ) { if ( current == null ) { current = new CharArrayBuffer $F989 ; } else $F9096 ( current ) int l = inbuffer . readLine ( current ) ; if ( l == - NUM00 || $F3598 ( current ) ) $F5153 if ( $F66132 ( current ) && previous != null ) { int i = NUM00 ; while $F7007 ( i , current ) { $F1280 ( ch , current , i ) if $F22868 ( ch ) $F5153 i ++ ; } if ( maxLineLen > NUM00 && $F1285 ( previous ) + current . length ( ) - i > maxLineLen ) $F14525 $F84 ( previous ) previous . append ( current , i , current . length ( ) - i ) ; } else { headerLines . add ( current ) ; previous = current ; current = null ; } if ( maxHeaderCount > NUM00 && headerLines . size ( ) >= maxHeaderCount ) $F14525 } $F11061 headers = new Header $F2313 ( headerLines ) ; for ( $F2277 ( i , headerLines ) ) { CharArrayBuffer buffer = ( CharArrayBuffer ) headerLines . get ( i ) ; try { headers [ i ] = parser . parseHeader ( buffer ) ; } catch ( ParseException ex ) { throw new ProtocolException $F1783 ( ex ) ; } } return headers ; }
$F298952 ( type , supportedTypes , super )
public void readContent $F24576 ( dst , offset , length ) $F112231 ( System , content , dst , offset , length )
public static void putObjectField ( Object obj , long fieldOff , Object val ) { UNSAFE . putObject ( obj , fieldOff , val ) ; }
$F103232 ( curFirst , pager , PAGE_SIZE , calPageSize , newPage , removeViewAt , afterPlatformListGot )
public List < FunctionDesc > listAllFunctions $F72 { List < FunctionDesc > functions = new ArrayList < FunctionDesc > $F72 ; for ( MeasureDesc m : measures ) { functions . add ( m . getFunction ( ) ) ; } return functions ; }
public boolean hasExplicitField ( String fieldName ) { if $F1710 ( fields , fieldName ) { return _BOOL ; } for ( DynamicField df : dynamicFields ) { if ( fieldName . equals ( df . getRegex ( ) ) ) return _BOOL ; } return _BOOL ; }
private static boolean instanceOfAny ( Object o , Collection $F116567 classes ) { for ( Class c : classes ) { if $F38790 ( c , o ) return _BOOL ; } return _BOOL ; }
public static IProposalComputer newSetterAttributeProposalComputer ( ContentAssistRequest contentAssistRequest , IJavaProject javaProject ) { IDOMNode node = ( IDOMNode ) contentAssistRequest . getNode ( ) ; if ( node . getNodeType ( ) != IDOMNode . ELEMENT_NODE ) $F1337 String widgetTypeName = UiBinderXmlModelUtilities . computeQualifiedWidgetTypeName ( node ) ; $F1338 ( widgetTypeName ) String matchString = contentAssistRequest . getMatchString ( ) ; return new SetterAttributeProposalComputer ( node , widgetTypeName , javaProject , matchString , contentAssistRequest . getReplacementBeginPosition ( ) , matchString . length ( ) ) ; }
public void omitAll $F72 { if ( writeChunk != null ) bytesWritten += writeChunk . position ( ) ; bytesRead = bytesWritten ; $F725 ( list ) writeChunk = null ; readChunk = null ; }
Job loadPreview ( FutureCallback < Pair < OmniBuildEnvironment , OmniGradleBuild > > resultHandler , List $F314324 listeners ) ;
private void refresh ( ILaunchConfiguration configuration ) { setLaunchConfiguration ( configuration ) ; try { fModel = createClasspathModel ( configuration ) ; } catch ( Exception e ) { $F5976 ( message , e ) $F3270 ( setErrorMessage , e ) } fClasspathViewer . setLaunchConfiguration ( configuration ) ; fClasspathViewer . setInput ( fModel ) ; setDirty ( _BOOL ) ; }
public void computePackageFragmentRoots ( IClasspathEntry [ ] resolvedClasspath , ObjectVector accumulatedRoots , HashSet rootIDs , IClasspathEntry referringEntry , boolean retrieveExportedRoots , Map rootToResolvedEntries ) throws JavaModelException { if ( referringEntry == null ) $F33452 ( rootIDs , rootID ) for ( $F21059 ( i , length , resolvedClasspath ) ) { computePackageFragmentRoots ( resolvedClasspath [ i ] , accumulatedRoots , rootIDs , referringEntry , retrieveExportedRoots , rootToResolvedEntries ) ; } }
private void init $F72 { setTitle ( NUM00 ) ; somPanel = new SOMPropertiesPanel ( networkPanel , SOMPropsPanelType . CREATE_GROUP ) ; tabLogic . add ( somPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( SOMGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; $F36210 ( tabbedPane , tabLogic ) $F36210 ( tabbedPane , layoutPanel ) setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( somPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
private String diff_linesToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { int lineStart = NUM00 ; int lineEnd = - NUM00 ; String line ; $F83 ( chars ) while $F46112 ( lineEnd , text ) { $F61909 ( lineEnd , text , lineStart ) if ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; lineStart = lineEnd + NUM00 ; if $F1710 ( lineHash , line ) { chars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; } else { lineArray . add ( line ) ; lineHash . put ( $F43443 ( line , lineArray ) ) ; chars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; } } $F92 ( chars ) }
public void remove ( Video video ) $F15777 ( videoList , video , notifyDataSetChanged )
public boolean canInvert $F72 { return _BOOL ; }
public void addAllSearchables ( ArrayList < ? extends SearchResult > searchable ) $F21926 ( searchables , searchable )
public static String toString ( final $F247465 iterable ) { if ( iterable instanceof Collection ) $F2495 ( iterable ) else { $F1121 ( builder ) boolean firstValue = _BOOL ; $F84 ( builder ) for ( final Object value : iterable ) { $F48750 ( firstValue , builder ) builder . append ( value ) ; firstValue = _BOOL ; } $F84 ( builder ) $F92 ( builder ) } }
public static int parseInt ( String text ) $F41330 ( parseInt , text )
$F1 public void endDocument ( Augmentations augs ) throws XNIException { try { if ( fDocumentHandler != null ) { $F45698 ( fDocumentHandler ) } if ( fContentHandler != null ) { $F45698 ( fContentHandler ) } } $F122277 ( e ) }
public String execCommand ( String command ) { $F83 ( buf ) sendWaitFor ( command , defaultTimeout , prompts , buf ) ; $F62755 ( log , buf ) return cleanOutput ( buf ) ; }
private void ClientThreadRun $F72 throws IOException { SocketChannel channel = null ; try { log . debug ( NUM00 , hostname , port , pending . size ( ) ) ; channel = SocketChannel . open ( new InetSocketAddress ( hostname , port ) ) ; channel . configureBlocking ( _BOOL ) ; ClientThreadMainLoop ( channel ) ; } finally { $F2727 ( channel ) if ( current != null ) { pending . offerFirst ( current ) ; current = null ; } } }
$F1 public PathImpl schemeWalk ( String userPath , $F2100 ( newAttributes ) , String uri , int offset ) { $F115 ( length , uri ) if ( length < NUM00 + offset || uri . charAt ( offset ) != NUM00 || uri . charAt ( NUM00 + offset ) != NUM00 ) $F11388 $F110602 ( buf ) int i = NUM00 + offset ; int ch = NUM00 ; boolean isIpv6 = _BOOL ; for ( ; ( i < length && $F31375 ( ch , uri , i ) != NUM00 && ch != NUM00 && ! ( ch == NUM00 && ! isIpv6 ) ) ; i ++ ) { if ( ch == NUM00 ) isIpv6 = _BOOL ; else if ( ch == NUM00 ) isIpv6 = _BOOL ; $F36813 ( buf , ch ) } $F1822 ( host , buf ) if $F1277 ( host ) $F11388 int port = NUM00 ; if ( ch == NUM00 ) { for ( i ++ ; i < length && $F31375 ( ch , uri , i ) >= NUM00 && ch <= NUM00 ; i ++ ) { port = NUM00 * port + uri . charAt ( i ) - NUM00 ; } } return create ( this , userPath , newAttributes , host , port ) ; }
@ RequestMapping ( $F3144 ) public void ssoDefaultTenantBindingError ( Locale locale , HttpServletResponse response ) throws IOException { $F174863 ( logger , locale ) sendError ( locale , response , NUM00 ) ; }
$F234188 ( webClient )
$F1 public void onCanStartVideoServiceChanged ( boolean canStartVideoService ) { Log . i ( NUM00 , NUM00 + String . valueOf ( canStartVideoService ) ) ; if ( canStartVideoService == _BOOL ) { mConversationHelper . startOutgoingVideo ( ) ; mConversationHelper . startIncomingVideo ( ) ; } }
public Manifest ( InputStream is ) throws IOException { while ( is . available ( ) != NUM00 ) { MessageHeader m = new MessageHeader ( is ) ; entries . addElement ( m ) ; } }
$F1 public Object readReply ( Class expectedClass ) throws Throwable { int tag = read ( ) ; if ( tag == NUM00 ) return readObject ( expectedClass ) ; else if ( tag == NUM00 ) { HashMap map = ( HashMap ) readObject ( HashMap . class ) ; throw prepareFault ( map ) ; } else { $F83 ( sb ) $F36813 ( sb , tag ) try { int ch ; while $F61411 ( ch , read ) $F46352 ( sb , ch ) } $F53427 ( log , Level , e ) throw error ( NUM00 + codeName ( tag ) + NUM00 + sb ) ; } }
$F11763 ( listener , clickingListeners )
public static String unexpandLine ( CharSequence self , int tabStop ) { StringBuilder builder = new StringBuilder $F3362 ( self ) ; int index = NUM00 ; while ( index + tabStop < builder . length ( ) ) { $F25024 ( piece , builder , index , tabStop ) int count = NUM00 ; while ( ( count < tabStop ) && ( Character . isWhitespace ( piece . charAt ( tabStop - ( count + NUM00 ) ) ) ) ) count ++ ; if ( count > NUM00 ) { piece = piece . substring ( NUM00 , tabStop - count ) + NUM00 ; builder . replace ( index , index + tabStop , piece ) ; index = index + tabStop - ( count - NUM00 ) ; } else index = index + tabStop ; } $F92 ( builder ) }
private void uninstall ( String rowType ) { if $F1710 ( extensionsByRowtype , rowType ) { extensionsByRowtype . remove ( rowType ) ; File f = getExtensionFile ( rowType ) ; if $F3428 ( f ) { FileUtils . deleteQuietly ( f ) ; } else $F34420 ( log , rowType ) } else $F34420 ( log , rowType ) }
$F16267 ( propertyName , in_pcl , pcSupport )
static final int tableSizeFor ( int cap ) { int n = cap - NUM00 ; $F250876 ( n ) $F250876 ( n ) $F250876 ( n ) $F250876 ( n ) $F250876 ( n ) return ( n < NUM00 ) ? NUM00 : ( n >= MAXIMUM_CAPACITY ) ? MAXIMUM_CAPACITY : n + NUM00 ; }
$F1 public boolean connectionAllowed ( String eventName ) { if ( $F1263 ( eventName ) && $F1263 ( eventName ) && $F1263 ( eventName ) && $F1263 ( eventName ) ) { return _BOOL ; } $F20092 ( m_listenee , _BOOL ) return _BOOL ; }
protected void generateOMGraphic ( OMGraphic g ) { if ( g != null && g . getNeedToRegenerate ( ) ) { Projection proj = getProjection ( ) ; if ( proj != null ) { g . generate ( proj ) ; } else if ( DEBUG ) { Debug . output ( NUM00 + g . getNeedToRegenerate ( ) ) ; } } }
public void insertVariable $F72 { ScriptStep variableStep = ScriptStepFactory . createVariable ( getVariableKey ( ) , getVariableValue ( ) ) ; steps . add ( getInsertIndex ( ) , variableStep ) ; variableKey = NUM00 ; variableValue = NUM00 ; reindexScriptSteps ( ) ; }
protected $F8748 canHandleZeroTraining $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = NUM00 , numTest = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; boolean predictorMissing = _BOOL , classMissing = _BOOL ; return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
public static $F96 long2buff ( long n ) { $F96 bs ; $F46945 ( bs ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F257846 ( bs , n ) $F8048 ( bs , n ) return bs ; }
final boolean tryWriteLock $F72 { $F686 ( current , Thread ) int c = getState ( ) ; if ( c != NUM00 ) { int w = exclusiveCount ( c ) ; if ( w == NUM00 || current != getExclusiveOwnerThread ( ) ) return _BOOL ; $F266914 ( w , MAX_COUNT ) } if ( ! compareAndSetState ( c , c + NUM00 ) ) return _BOOL ; setExclusiveOwnerThread ( current ) ; return _BOOL ; }
public IoServiceListenerSupport ( IoService service ) { $F826 ( service ) this . service = service ; }
private void cancelEventLeaseDo ( long eventID , Uuid leaseID ) throws UnknownLeaseException { $F657 ( now , System ) EventReg reg = ( EventReg ) eventByID . get ( new Long ( eventID ) ) ; if ( reg == null || reg . leaseExpiration <= now ) throw new UnknownLeaseException $F72 ; deleteEvent ( reg ) ; if ( reg . leaseExpiration == minEventExpiration ) concurrentObj . waiterNotify ( eventNotifier ) ; }
public static boolean isValidGDay ( String value ) $F142409 ( regex , value , isValidCalendarValue , _BOOL )
protected void paint3DRectLighting ( Graphics2D g2 , int x , int y , int width , int height ) { $F202051 ( g2 , Color ) g2 . drawLine ( x + NUM00 , y + NUM00 , x + NUM00 , y + height - NUM00 ) ; g2 . drawLine ( x + NUM00 , y + NUM00 , x + width - NUM00 , y + NUM00 ) ; g2 . setColor ( Color . gray ) ; g2 . drawLine ( x + NUM00 , y + height - NUM00 , x + width - NUM00 , y + height - NUM00 ) ; $F175635 ( g2 , x , width , y , height ) g2 . setColor ( Color . darkGray ) ; g2 . drawLine ( x , y + height , x + width , y + height ) ; g2 . drawLine ( x + width , y , x + width , y + height ) ; }
private void parseAttributes ( TypedArray a ) { barWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarWidth , barWidth ) ; rimWidth = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwRimWidth , rimWidth ) ; spinSpeed = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwSpinSpeed , spinSpeed ) ; barLength = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwBarLength , barLength ) ; delayMillis = a . getInteger ( R . styleable . ProgressWheel_pwDelayMillis , delayMillis ) ; $F17370 ( delayMillis ) if ( a . hasValue ( R . styleable . ProgressWheel_pwText ) ) { setText ( a . getString ( R . styleable . ProgressWheel_pwText ) ) ; } barColor = a . getColor ( R . styleable . ProgressWheel_pwBarColor , barColor ) ; textColor = a . getColor ( R . styleable . ProgressWheel_pwTextColor , textColor ) ; rimColor = a . getColor ( R . styleable . ProgressWheel_pwRimColor , rimColor ) ; circleColor = a . getColor ( R . styleable . ProgressWheel_pwCircleColor , circleColor ) ; contourColor = a . getColor ( R . styleable . ProgressWheel_pwContourColor , contourColor ) ; textSize = ( int ) a . getDimension ( R . styleable . ProgressWheel_pwTextSize , textSize ) ; contourSize = a . getDimension ( R . styleable . ProgressWheel_pwContourSize , contourSize ) ; $F17551 ( a ) }
$F1309 public MediaFile ( File f , MediaFileType type ) { this ( f . toPath ( ) , type ) ; }
public CommandLine clear $F72 $F68437 ( line , this )
public static String grepMinusV ( String val , String pattern ) $F19580 ( grepInner , val , pattern , _BOOL )
public DropDownPopupButtonBuilder add ( Action action ) $F18637 ( popupMenu , action , this )
$F20664 private void attachImageFrommGallery $F72 { $F53033 ( conData ) Intent $F192736 ( intent ) ; if ( $F10471 ( mSelectedGalleryItemsList ) || ( Build . VERSION . SDK_INT < Build . VERSION_CODES . JELLY_BEAN_MR2 ) ) { intent . setData ( mSelectedGalleryItemsList . get ( NUM00 ) . mFileUri ) ; } else if $F3817 ( mSelectedGalleryItemsList ) { ClipData . Item firstUri = new ClipData . Item ( null , null , null , mSelectedGalleryItemsList . get ( NUM00 ) . mFileUri ) ; $F806 mimeType = $F21901 ; ClipData clipData = new ClipData ( NUM00 , mimeType , firstUri ) ; for ( $F2277 ( index , mSelectedGalleryItemsList ) ) { ClipData . Item item = new ClipData . Item ( null , null , null , mSelectedGalleryItemsList . get ( index ) . mFileUri ) ; clipData . addItem ( item ) ; } intent . setClipData ( clipData ) ; } else { Uri uriSavedFromLifeCycle = ( Uri ) mImagePreviewImageView . getTag ( ) ; if ( null != uriSavedFromLifeCycle ) { intent . setData ( uriSavedFromLifeCycle ) ; } } intent . putExtras ( conData ) ; setResult ( RESULT_OK , intent ) ; VectorApp . setSavedCameraImagePreview ( null ) ; finish ( ) ; }
public static void mkdirs ( File directory ) throws CreateDirectoryException { if $F3428 ( directory ) { if $F3444 ( directory ) $F932 if $F7119 ( directory ) { throw new CreateDirectoryException ( directory . getAbsolutePath ( ) , new FileDeleteException $F89450 ( directory ) ) ; } } if ( $F4927 ( directory ) && $F4925 ( directory ) ) { throw new CreateDirectoryException $F89450 ( directory ) ; } }
public boolean hasDependency ( Capability c ) { $F58185 ( doNotCheckCapabilities , _BOOL ) $F297 ( m_Dependencies , c ) }
private static int prefixLen ( String o1 , String o2 ) { final int l1 = o1 . length ( ) , l2 = o2 . length ( ) , l = l1 < l2 ? l1 : l2 ; int prefix = NUM00 ; while ( prefix < l && ( o1 . charAt ( prefix ) == o2 . charAt ( prefix ) ) ) { prefix ++ ; } return prefix ; }
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeDouble ( parentDistance ) ; }
static int shouldNativelyFocusHeavyweight ( Component heavyweight , Component descendant , boolean temporary , boolean focusedWindowChangeAllowed , long time , CausedFocusEvent . Cause cause ) { if $F58998 ( log , PlatformLogger ) { if ( heavyweight == null ) $F22807 ( log ) if ( time == NUM00 ) $F22807 ( log ) } $F13265 ( descendant , heavyweight ) KeyboardFocusManager manager = getCurrentKeyboardFocusManager ( SunToolkit . targetToAppContext ( descendant ) ) ; KeyboardFocusManager thisManager = getCurrentKeyboardFocusManager ( ) ; Component currentFocusOwner = thisManager . getGlobalFocusOwner ( ) ; Component nativeFocusOwner = thisManager . getNativeFocusOwner ( ) ; Window nativeFocusedWindow = thisManager . getNativeFocusedWindow ( ) ; if $F935 ( focusLog , PlatformLogger ) { focusLog . finer ( NUM00 , String . valueOf ( descendant ) , String . valueOf ( heavyweight ) ) ; } if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { focusLog . finest ( NUM00 , String . valueOf ( currentFocusOwner ) ) ; focusLog . finest ( NUM00 , String . valueOf ( nativeFocusOwner ) ) ; focusLog . finest ( NUM00 , String . valueOf ( nativeFocusedWindow ) ) ; } synchronized ( heavyweightRequests ) { HeavyweightFocusRequest hwFocusRequest = getLastHWRequest ( ) ; if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { focusLog . finest ( NUM00 , String . valueOf ( hwFocusRequest ) ) ; } if ( hwFocusRequest == null && heavyweight == nativeFocusOwner && heavyweight . getContainingWindow ( ) == nativeFocusedWindow ) { if ( descendant == currentFocusOwner ) { if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) focusLog . finest ( NUM00 , String . valueOf ( descendant ) ) ; return SNFH_FAILURE ; } manager . enqueueKeyEvents ( time , descendant ) ; hwFocusRequest = new HeavyweightFocusRequest ( heavyweight , descendant , temporary , cause ) ; heavyweightRequests . add ( hwFocusRequest ) ; if ( currentFocusOwner != null ) { FocusEvent currentFocusOwnerEvent = new CausedFocusEvent ( currentFocusOwner , FocusEvent . FOCUS_LOST , temporary , descendant , cause ) ; SunToolkit . postEvent ( currentFocusOwner . appContext , currentFocusOwnerEvent ) ; } FocusEvent newFocusOwnerEvent = new CausedFocusEvent ( descendant , FocusEvent . FOCUS_GAINED , temporary , currentFocusOwner , cause ) ; SunToolkit . postEvent ( descendant . appContext , newFocusOwnerEvent ) ; if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) focusLog . finest ( NUM00 , String . valueOf ( descendant ) ) ; return SNFH_SUCCESS_HANDLED ; } else if ( hwFocusRequest != null && hwFocusRequest . heavyweight == heavyweight ) { if ( hwFocusRequest . addLightweightRequest ( descendant , temporary , cause ) ) { manager . enqueueKeyEvents ( time , descendant ) ; } if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) $F224661 ( focusLog , descendant , heavyweight ) return SNFH_SUCCESS_HANDLED ; } else { if ( ! focusedWindowChangeAllowed ) { if ( hwFocusRequest == HeavyweightFocusRequest . CLEAR_GLOBAL_FOCUS_OWNER ) { $F115 ( size , heavyweightRequests ) hwFocusRequest = ( HeavyweightFocusRequest ) ( ( size >= NUM00 ) ? heavyweightRequests . get ( size - NUM00 ) : null ) ; } if ( focusedWindowChanged ( heavyweight , ( hwFocusRequest != null ) ? hwFocusRequest . heavyweight : nativeFocusedWindow ) ) { if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { $F150605 ( focusLog , descendant ) } return SNFH_FAILURE ; } } manager . enqueueKeyEvents ( time , descendant ) ; heavyweightRequests . add ( new HeavyweightFocusRequest ( heavyweight , descendant , temporary , cause ) ) ; if ( focusLog . isLoggable ( PlatformLogger . Level . FINEST ) ) { $F150605 ( focusLog , descendant ) } return SNFH_SUCCESS_PROCEED ; } } }
public NamedThreadFactory ( final String poolID ) { id = poolID ; }
public void moveLocationUp ( RouteLocation rl ) { int sequenceId = rl . getSequenceId ( ) ; if ( sequenceId - NUM00 <= NUM00 ) { rl . setSequenceId ( _sequenceNum + NUM00 ) ; resequenceIds ( ) ; } else { RouteLocation replaceRl = getItemBySequenceId ( sequenceId - NUM00 ) ; if ( replaceRl != null ) { replaceRl . setSequenceId ( sequenceId ) ; rl . setSequenceId ( sequenceId - NUM00 ) ; } else $F5795 ( resequenceIds ) } setDirtyAndFirePropertyChange ( LISTCHANGE_CHANGED_PROPERTY , null , Integer . toString ( sequenceId ) ) ; }
protected Attribute generateAttribute $F120580 ( index , attType , namePrefix ) throws Exception { Attribute result ; String name ; int valIndex ; int nomCount ; String prefix ; result = null ; if ( index == CLASS_IS_LAST ) { valIndex = NUM00 ; name = NUM00 ; prefix = NUM00 ; nomCount = getNumClasses ( ) ; } else { valIndex = index ; nomCount = getNumNominalValues ( ) ; prefix = $F37978 ( valIndex ) ; switch ( attType ) { case Attribute . NOMINAL : name = NUM00 + ( valIndex + NUM00 ) ; $F597 case Attribute . NUMERIC : name = NUM00 + ( valIndex + NUM00 ) ; $F597 case $F70746 NUM00 : name = NUM00 + ( valIndex + NUM00 ) ; $F597 case $F70746 DATE : name = NUM00 + ( valIndex + NUM00 ) ; $F597 case $F70746 RELATIONAL : name = NUM00 + ( valIndex + NUM00 ) ; $F597 default : $F29525 ( attType ) } } switch ( attType ) { case $F70746 NOMINAL : ArrayList < String > nomStrings = new $F5 ( valIndex + NUM00 ) ; for ( $F119 ( j , nomCount ) ) { nomStrings . add ( prefix + ( j + NUM00 ) ) ; } result = new Attribute ( namePrefix + name , nomStrings ) ; $F597 case $F70746 NUMERIC : result = new Attribute ( namePrefix + name ) ; $F597 case $F70746 NUM00 : result = new Attribute ( namePrefix + name , ( $F5 ) null ) ; $F597 case $F70746 DATE : result = new Attribute ( namePrefix + name , NUM00 ) ; $F597 case $F70746 RELATIONAL : Instances rel ; if ( index == CLASS_IS_LAST ) $F20182 ( rel , getRelationalClassFormat ) else { rel = getRelationalFormat ( index ) ; } if ( rel == null ) { TestInstances dataset = new TestInstances $F72 ; dataset . setNumNominal ( getNumRelationalNominal ( ) ) ; dataset . setNumNominalValues ( getNumRelationalNominalValues ( ) ) ; dataset . setNumNumeric ( getNumRelationalNumeric ( ) ) ; dataset . setNumString ( getNumRelationalString ( ) ) ; dataset . setNumDate ( getNumRelationalDate ( ) ) ; dataset . setNumInstances ( NUM00 ) ; dataset . setClassType ( Attribute . NOMINAL ) ; rel = new Instances ( dataset . generate ( ) ) ; if $F931 ( getNoClass ) { int clsIndex = rel . classIndex ( ) ; rel . setClassIndex ( - NUM00 ) ; rel . deleteAttributeAt ( clsIndex ) ; } } result = new Attribute ( namePrefix + name , rel ) ; $F597 default : $F29525 ( attType ) } return result ;
public static String printCanopyAssignments ( Instances dataPoints , List < $F2469 > canopyAssignments ) { $F83 ( temp ) for ( $F2277 ( i , dataPoints ) ) { $F286 ( temp , i ) temp . append ( dataPoints . instance ( i ) ) ; if ( canopyAssignments != null && $F56339 ( canopyAssignments , dataPoints ) ) { $F2469 assignments = canopyAssignments . get ( i ) ; $F6407 ( temp , printSingleAssignment , assignments ) } $F84 ( temp ) } $F92 ( temp ) }
public static void registerDefaultPrefixes $F72 throws XMLSecurityException { setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; setDefaultPrefix ( NUM00 , NUM00 ) ; }
protected void initBPOrderDetails ( int C_BPartner_ID , boolean forInvoice ) { $F81293 ( log , C_BPartner_ID ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; orderField . removeActionListener ( this ) ; $F213890 ( orderField ) orderField . addItem ( pp ) ; $F104317 list = loadOrderData ( C_BPartner_ID , forInvoice , _BOOL ) ; $F104320 ( knp , list , orderField ) $F53383 ( orderField ) orderField . addActionListener ( this ) ; $F30070 ( dialog ) initBPDetails ( C_BPartner_ID ) ; }
private void writeToc ( ByteBuffer dataFileBuffer , TocType tocType , int entryCount , int firstEntryOffset ) { dataFileBuffer . putInt ( tocType . identifier ) ; dataFileBuffer . putInt ( entryCount ) ; dataFileBuffer . putLong ( firstEntryOffset ) ; }
public void startPart $F8306 ( contentType , headers ) throws IOException { writeCurrentBoundary ( ) ; if ( contentType != null ) { writeString ( MimeUtils . HEADER_CONTENT_TYPE + NUM00 + contentType ) ; out . write ( CRLF ) ; } for ( $F30035 ( i , headers ) ) { writeString ( headers [ i ] ) ; out . write ( CRLF ) ; } out . write ( CRLF ) ; }
public EmbeddedMetaService $F72 throws IOException , ExecutionException { this ( System . getenv ( JOLIE_HOME_ENV ) ) ; }
public int showDialog $F72 { m_Result = CANCEL_OPTION ; $F2027 origSelected = m_List . getSelectedIndices ( ) ; setVisible ( _BOOL ) ; if ( m_Result == CANCEL_OPTION ) { m_List . setSelectedIndices ( origSelected ) ; } return m_Result ; }
public final void addAlarmValues ( final List < AlarmValueImpl > alarmValues ) { if ( alarmValues != null ) { for ( AlarmValueImpl alarmValue : alarmValues ) { $F25302 ( alarmValue , addAlarmValue ) } } }
public String product $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F179073 ( M_Product_ID , value ) if ( M_Product_ID == null || $F179074 ( M_Product_ID ) ) $F1278 if ( $F307232 ( Env , ctx , WindowNo ) == M_Product_ID . intValue ( ) && $F307232 ( Env , ctx , WindowNo ) != NUM00 ) mTab . setValue ( NUM00 , $F307232 ( Env , ctx , WindowNo ) ) ; else $F179081 ( mTab ) checkQtyAvailable ( ctx , mTab , WindowNo , M_Product_ID , null ) ; $F1278 }
protected void processpacket ( SimEvent ev ) { CloudSim . cancelAll ( getId ( ) , new PredicateType ( CloudSimTags . Network_Event_UP ) ) ; schedule ( getId ( ) , switching_delay , CloudSimTags . Network_Event_UP ) ; pktlist . add ( ( NetworkPacket ) ev . getData ( ) ) ; }
public void addChild ( Controller controller ) { if ( children == null ) children = new ArrayList < Controller > $F72 ; children . add ( controller ) ; controller . parent = this ; }
protected boolean checkTurnoutsInSection ( Section s , int seqNum , Section nextSection , ActiveTrain at , LayoutEditor le , Section prevSection ) { return turnoutUtil ( s , seqNum , nextSection , at , le , _BOOL , _BOOL , prevSection ) ; }
private Point2D calculateLabelAnchorPoint ( ItemLabelAnchor anchor , Rectangle2D bar , PlotOrientation orientation ) { Point2D result = null ; double offset = getItemLabelAnchorOffset ( ) ; double x0 = bar . getX ( ) - offset ; $F82242 ( x1 , bar ) double x2 = bar . getX ( ) + offset ; double x3 = bar . getCenterX ( ) ; double x4 = bar . getMaxX ( ) - offset ; $F69944 ( x5 , bar ) double x6 = bar . getMaxX ( ) + offset ; double y0 = bar . getMaxY ( ) + offset ; $F69928 ( y1 , bar ) double y2 = bar . getMaxY ( ) - offset ; double y3 = bar . getCenterY ( ) ; double y4 = bar . getMinY ( ) + offset ; $F69930 ( y5 , bar ) double y6 = bar . getMinY ( ) - offset ; if ( anchor == ItemLabelAnchor . CENTER ) $F467389 ( result , x3 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE1 ) $F467389 ( result , x4 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE2 ) $F467389 ( result , x4 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE3 ) $F467389 ( result , x4 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE4 ) $F467389 ( result , x4 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE5 ) $F467389 ( result , x4 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE6 ) $F467389 ( result , x3 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE7 ) $F467389 ( result , x2 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE8 ) $F467389 ( result , x2 , y2 ) else if ( anchor == ItemLabelAnchor . INSIDE9 ) $F467389 ( result , x2 , y3 ) else if ( anchor == ItemLabelAnchor . INSIDE10 ) $F467389 ( result , x2 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE11 ) $F467389 ( result , x2 , y4 ) else if ( anchor == ItemLabelAnchor . INSIDE12 ) $F467389 ( result , x3 , y4 ) else if ( anchor == ItemLabelAnchor . OUTSIDE1 ) $F467389 ( result , x5 , y6 ) else if ( anchor == ItemLabelAnchor . OUTSIDE2 ) $F467389 ( result , x6 , y5 ) else if ( anchor == ItemLabelAnchor . OUTSIDE3 ) $F467389 ( result , x6 , y3 ) else if ( anchor == ItemLabelAnchor . OUTSIDE4 ) $F467389 ( result , x6 , y1 ) else if ( anchor == ItemLabelAnchor . OUTSIDE5 ) $F467389 ( result , x5 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE6 ) $F467389 ( result , x3 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE7 ) $F467389 ( result , x1 , y0 ) else if ( anchor == ItemLabelAnchor . OUTSIDE8 ) $F467389 ( result , x0 , y1 ) else if ( anchor == ItemLabelAnchor . OUTSIDE9 ) $F467389 ( result , x0 , y3 ) else if ( anchor == ItemLabelAnchor . OUTSIDE10 ) $F467389 ( result , x0 , y5 ) else if ( anchor == ItemLabelAnchor . OUTSIDE11 ) $F467389 ( result , x1 , y6 ) else if ( anchor == ItemLabelAnchor . OUTSIDE12 ) $F467389 ( result , x3 , y6 ) return result ; }
$F47733 ( reader , writer , buffer , count )
protected String instanceToMatlab ( Instance inst ) { StringBuffer result ; int i ; $F7398 ( result ) for ( i = NUM00 ; i < inst . numAttributes ( ) ; i ++ ) { if ( i > NUM00 ) { $F562612 ( result , m_UseTabs ) } result . append ( m_Format . format ( inst . value ( i ) ) ) ; } $F92 ( result ) }
private static double distance ( Problem problem , Solution a , Solution b , double power ) { double distance = NUM00 ; for ( $F61686 ( i , problem ) ) { distance += Math . pow ( Math . abs ( a . getObjective ( i ) - b . getObjective ( i ) ) , power ) ; } return Math . pow ( distance , NUM00 / power ) ; }
private List < TokenType > extractStringLiteralDelimitingTokens $F4374 ( tokens ) { List < TokenType > delimitingTokens = new ArrayList < TokenType > $F72 ; for ( String token : tokens ) { String cleanToken = cleanToken ( token ) ; boolean handled = _BOOL ; if ( alternateQuote == null ) { String alternateQuoteFromToken = extractAlternateOpenQuote ( cleanToken ) ; if ( alternateQuoteFromToken != null ) { String closeQuote = computeAlternateCloseQuote ( alternateQuoteFromToken ) ; if ( cleanToken . length ( ) >= ( $F71221 ( alternateQuoteFromToken , closeQuote ) ) && cleanToken . startsWith ( alternateQuoteFromToken ) && cleanToken . endsWith ( closeQuote ) ) $F1448 alternateQuote = closeQuote ; delimitingTokens . add ( TokenType . ALTERNATE_QUOTE ) ; $F598 } } if ( ( alternateQuote != null ) && cleanToken . endsWith ( alternateQuote ) ) { alternateQuote = null ; delimitingTokens . add ( TokenType . ALTERNATE_QUOTE ) ; $F598 } if ( $F45145 ( cleanToken ) && cleanToken . startsWith ( NUM00 ) && cleanToken . endsWith ( NUM00 ) ) $F1448 if ( $F45145 ( cleanToken ) && cleanToken . startsWith ( NUM00 ) && cleanToken . endsWith ( NUM00 ) ) $F1448 if ( isSingleLineComment ( cleanToken ) ) { delimitingTokens . add ( TokenType . SINGLE_LINE_COMMENT ) ; handled = _BOOL ; } if $F3106 ( cleanToken ) { delimitingTokens . add ( TokenType . MULTI_LINE_COMMENT ) ; handled = _BOOL ; } else if $F3106 ( cleanToken ) { delimitingTokens . add ( TokenType . QUOTE ) ; handled = _BOOL ; } if ( $F14942 ( cleanToken ) && cleanToken . endsWith ( NUM00 ) ) { delimitingTokens . add ( TokenType . MULTI_LINE_COMMENT ) ; handled = _BOOL ; } else if ( $F14942 ( cleanToken ) && cleanToken . endsWith ( NUM00 ) ) { delimitingTokens . add ( TokenType . QUOTE ) ; handled = _BOOL ; } if ( ! handled ) { delimitingTokens . add ( TokenType . OTHER ) ; } } return delimitingTokens ; }
private void printRainbowUser ( User user , String userName , boolean action , SpecialColor type , String id ) { SimpleAttributeSet userStyle = new SimpleAttributeSet ( styles . nick ( ) ) ; userStyle . addAttribute ( Attribute . IS_USER_MESSAGE , _BOOL ) ; userStyle . addAttribute ( Attribute . USER , user ) ; if ( id != null ) { userStyle . addAttribute ( Attribute . ID , id ) ; } $F115 ( length , userName ) if ( action ) { print ( NUM00 , styles . nick ( ) ) ; } for ( $F119 ( i , length ) ) { Color c ; if ( type == SpecialColor . RAINBOW ) { c = makeRainbowColor ( i , length ) ; } else { c = makeGoldColor ( i , length ) ; } StyleConstants . setForeground ( userStyle , c ) ; print ( $F10818 ( userName , i ) , userStyle ) ; } }
public void notifyAddressThrottleFound ( DccThrottle t ) { $F35060 ( log ) mThrottle = t ; setEnabled ( _BOOL ) ; mThrottle . addPropertyChangeListener ( this ) ; setFnButtons ( ) ; }
public static void matrixMultWDivMM ( MatrixBlock mW , MatrixBlock mU , MatrixBlock mV , MatrixBlock mX , MatrixBlock ret , WDivMMType wt , int k ) throws DMLRuntimeException { if ( mW . isEmptyBlock ( _BOOL ) || ( wt . isLeft ( ) && mU . isEmptyBlock ( _BOOL ) ) || ( wt . isRight ( ) && mV . isEmptyBlock ( _BOOL ) ) || ( wt . isBasic ( ) && mW . isEmptyBlock ( _BOOL ) ) ) { $F88073 ( ret ) $F665 } ret . sparse = wt . isBasic ( ) ? mW . sparse : _BOOL ; ret . allocateDenseOrSparseBlock ( ) ; if ( ! ret . isThreadSafe ( ) ) { matrixMultWDivMM ( mW , mU , mV , mX , ret , wt ) ; $F665 } try { ExecutorService pool = Executors . newFixedThreadPool ( k ) ; ArrayList < MatrixMultWDivTask > tasks = new ArrayList < MatrixMultWDivTask > $F72 ; if ( wt . isLeft ( ) ) { int blklen = ( int ) ( Math . ceil ( ( double ) mW . clen / k ) ) ; for ( int j = NUM00 ; j < k & j * blklen < mW . clen ; j ++ ) tasks . add ( new MatrixMultWDivTask ( mW , mU , mV , mX , ret , wt , NUM00 , mW . rlen , j * blklen , Math . min ( ( j + NUM00 ) * blklen , mW . clen ) ) ) ; } else { int blklen = ( int ) ( Math . ceil ( ( double ) mW . rlen / k ) ) ; for ( int i = NUM00 ; i < k & i * blklen < mW . rlen ; i ++ ) tasks . add ( new MatrixMultWDivTask ( mW , mU , mV , mX , ret , wt , i * blklen , Math . min ( ( i + NUM00 ) * blklen , mW . rlen ) , NUM00 , mW . clen ) ) ; } List < Future $F17803 > taskret = pool . invokeAll ( tasks ) ; $F733 ( pool ) ret . nonZeros = NUM00 ; for ( Future $F17803 task : taskret ) ret . nonZeros += task . get ( ) ; } catch ( Exception e ) { throw new DMLRuntimeException ( e ) ; } $F88073 ( ret ) }
public boolean verify $F72 throws MissingResourceFailureException , XMLSecurityException { return super . verifyReferences ( _BOOL ) ; }
public OpenIdPrompt ( String prompt ) { originalValue = prompt ; if ( isEmpty ( prompt ) ) { $F131516 ( prompts , Collections ) } else { prompts = stringToSet ( prompt . toLowerCase ( ) ) ; } }
private static boolean calculateIsFailure $F72 { int randomValue = $F6823 ( random ) ; return randomValue <= ERROR_PCT ; }
private int checkUserLink ( SpannableStringBuilder out , String in , int start ) { int pos = start + NUM00 ; $F83 ( temp ) String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM00 ) ) ; for ( $F1088 ( i , targetString ) ) { $F1280 ( c , targetString , i ) if ( $F53963 ( c ) || c == NUM00 ) $F288 ( temp , c ) else $F5153 } $F1822 ( username , temp ) if ( $F3598 ( username ) || username . equalsIgnoreCase ( NUM00 ) ) $F7629 out . append ( username ) ; return pos + username . length ( ) - NUM00 ; }
$F40513 ( mArrayList )
public void test_commonTest_01 $F72 { SSLContextSpiImpl ssl = new SSLContextSpiImpl $F72 ; try { SSLSessionContext slsc = ssl . engineGetClientSessionContext ( ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) try { SSLSessionContext slsc = ssl . engineGetServerSessionContext ( ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) try { SSLServerSocketFactory sssf = ssl . engineGetServerSocketFactory ( ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) try { SSLSocketFactory ssf = ssl . engineGetSocketFactory ( ) ; fail ( NUM00 ) ; } $F132298 ( str , re , fail ) $F132299 ( fail , e ) }
public static ClassDescriptor createClassDescriptorFromResourceName ( String resourceName ) { if ( ! isClassResource ( resourceName ) ) $F29526 ( resourceName ) return createClassDescriptor ( $F4019 ( resourceName ) ) ; }
public static void show ( final Window parent , final String content ) { final CLogFileDialog dialog = new CLogFileDialog ( parent , content ) ; GuiHelper . centerChildToParent ( parent , dialog , _BOOL ) ; dialog . setVisible ( _BOOL ) ; }
protected void endNode ( Node node ) throws $F2253 { switch $F6708 ( node ) { case Node . DOCUMENT_NODE : $F597 case Node . DOCUMENT_TYPE_NODE : serializeDocType ( ( DocumentType ) node , _BOOL ) ; $F597 case Node . ELEMENT_NODE : serializeElement ( ( Element ) node , _BOOL ) ; $F597 case Node . CDATA_SECTION_NODE : $F597 case Node . ENTITY_REFERENCE_NODE : serializeEntityReference ( ( EntityReference ) node , _BOOL ) ; $F597 $F1267 } }
public CreateWindowClause addView ( String namespace , String name ) { views . add ( View . create ( namespace , name ) ) ; return this ; }
$F1654 ( set )
public void associateConnection ( Object connection ) throws ResourceException { $F217922 ( connectionSharing , disassociateConnections ) try { final FBConnection abstractConnection = ( FBConnection ) connection ; abstractConnection . setManagedConnection ( this ) ; connectionHandles . add ( abstractConnection ) ; } catch ( ClassCastException cce ) { throw new FBResourceException ( NUM00 , cce ) ; } }
ChronoLocalDateTime $F48881 toLocalDateTime $F72 ;
private void save $F72 { try { FileUtils . write ( $F33731 ( jarName ) , text ) ; } catch ( IOException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } }
private static void assertNotEmpty ( String message , String string ) { assertNotNull ( message , string ) ; assertFalse ( message , string . equals ( NUM00 ) ) ; }
private void generateEntityConfig ( ManagedEntityConfig config ) throws SAXException { $F107310 ( host , config ) if ( host != null ) { $F153269 ( handler , HOST , EMPTY ) handler . characters ( $F62204 ( host ) ) ; $F153271 ( handler , HOST ) } String remoteCommand = config . getRemoteCommand ( ) ; if ( remoteCommand != null ) { $F153269 ( handler , REMOTE_COMMAND , EMPTY ) handler . characters ( $F62204 ( remoteCommand ) ) ; $F153271 ( handler , REMOTE_COMMAND ) } String workingDirectory = config . getWorkingDirectory ( ) ; if ( workingDirectory != null ) { $F153269 ( handler , WORKING_DIRECTORY , EMPTY ) handler . characters ( $F62204 ( workingDirectory ) ) ; $F153271 ( handler , WORKING_DIRECTORY ) } String productDirectory = config . getProductDirectory ( ) ; if ( productDirectory != null ) { $F153269 ( handler , PRODUCT_DIRECTORY , EMPTY ) handler . characters ( $F62204 ( productDirectory ) ) ; $F153271 ( handler , PRODUCT_DIRECTORY ) } }
public void hiliteLabel ( Node v , NodeData data ) { NodeView nv = viewer . getNV ( v ) ; if ( nv . getLocation ( ) == null ) $F665 Point apt = nv . getLabelPosition ( viewer . trans ) ; $F8249 ( apt ) gc . setColor ( ProgramProperties . SELECTION_COLOR_ADDITIONAL_TEXT ) ; if ( ! nv . getLabelVisible ( ) && nv . getLabel ( ) != null ) { $F252172 ( gc , nv ) gc . drawString ( nv . getLabel ( ) , apt . x , apt . y ) ; } if ( data . getSummarized ( ) . length > NUM00 || ( data . getSummarized ( ) . length == NUM00 && data . getSummarized ( ) [ NUM00 ] > NUM00 ) ) { gc . setFont ( selectionFont ) ; $F83 ( buf ) if ( data . getCountAssigned ( ) > NUM00 ) { $F84 ( buf ) for ( int value : data . getAssigned ( ) ) $F181853 ( buf , String , value ) gc . drawString ( buf . toString ( ) , apt . x , apt . y += NUM00 ) ; } $F6932 ( buf ) $F84 ( buf ) for ( int value : data . getSummarized ( ) ) $F181853 ( buf , String , value ) gc . drawString ( buf . toString ( ) , apt . x , apt . y += NUM00 ) ; } if ( data . getUpPValue ( ) != - NUM00 ) { gc . drawString ( NUM00 + ( float ) data . getUpPValue ( ) , apt . x , apt . y += NUM00 ) ; } if ( data . getDownPValue ( ) != - NUM00 ) { gc . drawString ( NUM00 + ( float ) data . getDownPValue ( ) , apt . x , apt . y += NUM00 ) ; } }
public void appendLine ( CharSequence line ) $F207 ( lines , line )
public void flagActionItems $F72 { $F24126 ( mIsActionItemsStale ) boolean flagged = _BOOL ; for ( $F232606 ref : mPresenters ) { $F232608 ( presenter , ref ) if ( presenter == null ) $F106 ( mPresenters , ref ) else { flagged |= presenter . flagActionItems ( ) ; } } if ( flagged ) { $F725 ( mActionItems ) $F725 ( mNonActionItems ) ArrayList < MenuItemImpl > visibleItems = getVisibleItems ( ) ; $F10162 ( itemsSize , visibleItems ) for ( $F119 ( i , itemsSize ) ) { MenuItemImpl item = visibleItems . get ( i ) ; if ( item . isActionButton ( ) ) $F207 ( mActionItems , item ) else $F207 ( mNonActionItems , item ) } } else { $F725 ( mActionItems ) $F725 ( mNonActionItems ) $F138067 ( mNonActionItems , getVisibleItems ) } mIsActionItemsStale = _BOOL ; }
public static void registerNewAggregationFunction ( String name , Class < ? extends AggregationFunction > clazz , AggregationFunctionMetaDataProvider metaDataProvider ) { AGGREATION_FUNCTIONS . put ( name , clazz ) ; AGGREGATION_FUNCTIONS_META_DATA_PROVIDER . put ( name , metaDataProvider ) ; }
private $F96 buildFileAuthTag $F72 throws FileEncryptionException { SecretKey key = backEncRandomAccessFile . shareKey ; if ( key == null || key . getEncoded ( ) . length == NUM00 ) $F112401 else { $F2268 ( authTagHMac ) KeyParameter keyParameter = new KeyParameter $F4697 ( key ) ; authTagHMac . init ( keyParameter ) ; } if $F10471 ( atagList ) $F112401 else { for ( $F2277 ( i , atagList ) ) { $F96 curChunkTag = atagList . get ( i ) ; if ( ( curChunkTag == null ) || ( curChunkTag . length != CHUNK_AUTH_TAG_LENGTH ) ) { throw new FileEncryptionException ( NUM00 + i ) ; } else { $F118814 ( authTagHMac , curChunkTag , CHUNK_AUTH_TAG_LENGTH ) } } $F2175 ( tmp , AUTH_TAG_SIZE ) $F137382 ( authTagHMac , tmp ) return tmp ; } }
$F60268 ( name )
public void updateData ( MapElement mapElement ) { $F18684 ( nameLabel , mapElement ) pinnedCheckBox . setSelected ( mapElement . isPinned ( ) ) ; }
public int doFinal $F5474 ( out , outOff ) throws DataLengthException , IllegalStateException , InvalidCipherTextException { try { int resultLen = NUM00 ; if ( outOff + bufOff > out . length ) { throw new OutputLengthException $F580 ; } if ( bufOff != NUM00 ) { if ( ! partialBlockOkay ) $F58352 $F58355 ( cipher , buf ) resultLen = bufOff ; bufOff = NUM00 ; $F6483 ( System , buf , out , outOff , resultLen ) } return resultLen ; } $F49978 ( reset ) }
public PriorityQueue ( int initialCapacity , Comparator < ? super E > comparator ) { $F63585 ( initialCapacity ) elements = newElementArray ( initialCapacity ) ; this . comparator = comparator ; }
public void readData ( DataInput input ) throws IOException { $F89921 ( readReference , input ) $F89921 ( readCount , input ) $F89921 ( writeReference , input ) $F89921 ( writeCount , input ) $F34181 ( byteCount , input ) if ( nonWordDataHandler == null ) { byte $F76061 = new byte [ byteCount ] ; $F65245 ( input , buffer , byteCount ) int offset = NUM00 ; registers = new Register [ writeCount ] ; for ( $F119 ( register , writeCount ) ) { registers [ register ] = new SimpleRegister ( $F149550 ( buffer , offset ) ) ; offset += NUM00 ; } } else { nonWordDataHandler . readData ( input , writeReference , writeCount ) ; } }
private boolean isTouchInsideList ( MotionEvent ev ) { float x = $F42972 ( ev , mListView ) ; float y = $F42973 ( ev , mListView ) ; if ( x < NUM00 || x > mListView . getWidth ( ) || y < NUM00 || y > mListView . getHeight ( ) ) { return _BOOL ; } return _BOOL ; }
public static final void centerChildToParent ( final Component parent , final Component child , final boolean bStayOnScreen ) { int x = ( parent . getX ( ) + ( $F77576 ( parent ) ) ) - ( $F77576 ( child ) ) ; int y = ( parent . getY ( ) + $F63371 ( parent ) ) - $F63371 ( child ) ; if ( bStayOnScreen ) { final Toolkit tk = Toolkit . getDefaultToolkit ( ) ; final Dimension ss = new Dimension ( tk . getScreenSize ( ) ) ; if ( ( x + child . getWidth ( ) ) > ss . getWidth ( ) ) { x = ( int ) ( ss . getWidth ( ) - child . getWidth ( ) ) ; } if ( ( y + child . getHeight ( ) ) > ss . getHeight ( ) ) { y = ( int ) ( ss . getHeight ( ) - child . getHeight ( ) ) ; } $F17370 ( x ) $F17370 ( y ) } child . setLocation ( x , y ) ; }
public boolean isConnecting $F72 { return start != null && preview != null && preview . isVisible ( ) ; }
public ProtectedProperties ( Properties props ) { $F85051 ( propEnum , props ) while $F1444 ( propEnum ) { $F14952 ( propName , propEnum ) $F7601 ( propValue , props , propName ) super . setProperty ( propName , propValue ) ; } closed = _BOOL ; }
$F18907 ( itemList )
private static void fixNumericByteOrder $F97 ( bytes ) { for ( $F24429 ( i , bytes ) ) { ByteUtil . swap4Bytes ( bytes , i ) ; } }
public synchronized boolean hasScope $F72 $F3387 ( scopeStack )
private boolean checkAttributeChanged ( String existing , String current ) { if ( existing == null && current == null ) { return _BOOL ; } if ( ( existing == null ) ^ ( current == null ) ) { return _BOOL ; } return $F28190 ( existing , current ) ; }
public boolean isEmpty $F72 { return count ( ) == NUM00 ; }
$F1 public void addTableModelListener ( TableModelListener l ) $F207 ( m_Listeners , l )
private static $F52326 pathToURLs ( String path ) throws MalformedURLException { synchronized ( pathToURLsCache ) { $F131 v = pathToURLsCache . get ( path ) ; if ( v != null ) { return ( ( $F52326 ) v [ NUM00 ] ) ; } } $F70316 ( st , path ) $F52326 urls = new URL $F49889 ( st ) ; for ( int i = NUM00 ; st . hasMoreTokens ( ) ; i ++ ) { urls [ i ] = new URL $F52332 ( st ) ; } synchronized ( pathToURLsCache ) { pathToURLsCache . put ( path , new Object [ ] { urls , new SoftReference $F4 ( path ) } ) ; } return urls ; }
boolean performWork ( TaskManager . Task who , Object param ) throws JobException { Integer tmp = null ; synchronized ( tasks ) { tmp = ( Integer ) tasks . get ( who ) ; } if ( tmp == null ) throw new UnknownTaskException $F72 ; $F79839 ( rank , tmp ) synchronized ( attempts ) { attempts [ rank ] ++ ; } Object result = doWork ( who , param ) ; $F397 ( result , _BOOL ) try { reportDone ( who , result ) ; } catch ( UnknownTaskException e ) $F845 catch ( PartialResultException e ) $F845 catch ( JobException e ) $F845 return _BOOL ; }
public List < Order > loadAllDeepFromCursor ( Cursor cursor ) { $F23386 ( count , cursor ) List < Order > list = new ArrayList < Order > ( count ) ; $F23402 ( cursor , identityScope , count , list , loadCurrentDeep , _BOOL ) return list ; }
public static boolean isValidAuthType ( String authType ) { $F980 ( log ) if ( authType != null ) { if $F5973 ( authType ) { if ( authType . equalsIgnoreCase ( LdapAuthBase . LDAP_AUTH_TYPE_SIMPLE ) ) return _BOOL ; if ( authType . equalsIgnoreCase ( LdapAuthBase . LDAP_AUTH_TYPE_NONE ) ) return _BOOL ; } } return _BOOL ; }
$F73823 ( lock , this , count )
$F234188 ( webClient )
public AnnotationMember ( String name , Object val , Class type , Method m ) { this ( name , val ) ; definingMethod = m ; if $F41233 ( type ) { elementType = $F58948 ; } else if $F41255 ( type ) { elementType = $F61970 ; } else if $F94715 ( type ) { elementType = $F62127 ; } else if $F41249 ( type ) { elementType = $F58950 ; } else if $F41243 ( type ) { elementType = $F20774 ; } else if $F41238 ( type ) { elementType = $F10063 ; } else if $F41261 ( type ) { elementType = $F94724 ; } else if $F41267 ( type ) { elementType = $F94727 ; } else { elementType = type ; } }
public void unregisterPreferenceChangeListener ( PreferenceChangeListener preferenceChangeListener ) $F106 ( mListeners , preferenceChangeListener )
public static String join ( String separator , $F11654 elements ) { if $F45555 ( elements ) $F2455 StringBuffer sb = new StringBuffer $F98338 ( elements ) ; int i = NUM00 ; for ( Object elem : elements ) { if ( i ++ > NUM00 ) $F288 ( sb , separator ) $F6407 ( sb , format , elem ) } $F92 ( sb ) }
public boolean removeTrace ( final Trace trace ) { $F12396 ( result , traceList , trace ) if ( result ) $F34462 ( remove , trace , revalidate ) return result ; }
private void updateRandomValues $F72 { for ( $F119 ( i , mBlockNumber ) ) { for ( $F119 ( j , DEFAULT1BER_RANDOM_VALUES ) ) { mBlockValues [ i ] [ j ] = mRandom . nextFloat ( ) ; if ( mBlockValues [ i ] [ j ] < NUM00 ) $F211213 ( mBlockValues , i , j ) } } }
protected ASN1Set ( ASN1Encodable obj ) $F6659 ( set , obj )
static private String BYTE_Min_Minus $F72 { long tempValue = Byte . MIN_VALUE - NUM00 ; $F33236 ( String , tempValue ) }
public DoubleAccumulator ( DoubleBinaryOperator accumulatorFunction , double identity ) { this . function = accumulatorFunction ; base = this . identity = Double . doubleToRawLongBits ( identity ) ; }
$F42402 ( bmp , mat , unPremultiplyAlpha , nBitmapToMat2 )
public static void sendMail ( Context mContext , String mailID ) { Uri uri = Uri . parse ( NUM00 + mailID ) ; Intent intent = new Intent ( Intent . ACTION_SENDTO , uri ) ; mContext . startActivity ( intent ) ; }
public void push ( $F1113 StatusNotification notification ) $F31742 ( stack , notification )
public void onPaintActions ( ViewTransform transform , Graphics2D g ) { $F24126 ( mIsSelected ) $F2329 ( mColorSet ) if ( mWidget . getVisibility ( ) == ConstraintWidget . GONE ) $F932 $F24126 ( mShowResizeHandles ) $F24126 ( mShowActions ) $F110977 ( mWidgetActions ) int l = transform . getSwingFX ( mWidget . getDrawX ( ) ) ; int t = transform . getSwingFY ( mWidget . getDrawY ( ) ) ; int h = transform . getSwingDimension ( mWidget . getHeight ( ) ) ; int x = l ; int y = t + h + ConnectionDraw . CONNECTION_ANCHOR_SIZE + NUM00 ; g . setColor ( mColorSet . getSelectedFrames ( ) ) ; for ( WidgetAction action : mWidgetActions ) { $F92039 ( action ) if ( $F181253 ( action ) ) $F1448 action . onPaint ( transform , g , x , y ) ; x += ACTION_SIZE + ConnectionDraw . CONNECTION_ANCHOR_SIZE ; } }
$F1 public Lookup createGlobalContext $F72 { if ( proxyLookup == null ) { $F156357 ( logger ) projectLookup = new AbstractLookup ( content ) ; proxyLookup = new ProxyLookup ( globalContextLookup , projectLookup ) ; } return proxyLookup ; }
public void write $F97 ( bytes ) throws IOException { flushBits ( ) ; if $F22195 ( bytes ) { out . write ( bytes ) ; bytesWritten += bytes . length ; } }
public static MutableList $F4 chunk ( String string , int size ) { if ( size <= NUM00 ) $F18931 ( size ) $F115 ( length , string ) if ( length == NUM00 ) { return FastList . newList ( ) ; } MutableList $F4 result = FastList . newList ( ( length + size - NUM00 ) / size ) ; int startOffset = NUM00 ; while ( startOffset < length ) { result . add ( string . substring ( startOffset , Math . min ( startOffset + size , length ) ) ) ; startOffset += size ; } return result ; }
public void removeIm ( ImEntity im ) $F106 ( ims , im )
public LanguageSetting ( Option opt ) { elem = null ; name = opt . getLanguage ( ) ; $F806 suffixArray = opt . getSuffixes ( ) ; $F280 ( strbuf ) for ( $F1139 ( i , suffixArray ) ) { $F6939 ( strbuf , suffixArray , i ) if ( i != suffixArray . length - NUM00 ) $F84 ( strbuf ) } this . suffixes = strbuf . toString ( ) ; minMatchLen = opt . getMinimumMatchLength ( ) ; clusterType = opt . getClustertype ( ) ; readSubdirs = opt . isReadSubdirs ( ) ; storeMatches = opt . getStoreMatches ( ) ; }
private double calcUtil4Performing $F30455 ( typDuration , actualDuration ) { return NUM00 * marginalUtilPerformingSec + marginalUtilPerformingSec * typDuration * Math . log ( actualDuration / typDuration ) ; }
public void clearAllCache $F72 $F9099 ( clearMemoryCache , clearStorageCache )
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1007 ( newVector ) }
public void addNotify $F72 { super . addNotify ( ) ; if ( textArea != null ) { l . install ( textArea ) ; } updateCellWidths ( ) ; updateCellHeights ( ) ; }
@ Description ( summary = NUM00 ) public void mavenInstallLocal $F72 { jarMVStore ( ) ; String pom = new String ( readFile ( $F8806 ) ) ; $F373826 ( pom , replaceAll ) writeFile ( $F8806 , pom . getBytes ( ) ) ; execScript ( NUM00 , args ( NUM00 , NUM00 , NUM00 + getJarSuffix ( ) , NUM00 , NUM00 , NUM00 , NUM00 ) ) ; jar ( ) ; pom = new String ( readFile ( $F8806 ) ) ; $F373826 ( pom , replaceAll ) writeFile ( $F8806 , pom . getBytes ( ) ) ; execScript ( NUM00 , args ( NUM00 , NUM00 , NUM00 + getJarSuffix ( ) , NUM00 , NUM00 , NUM00 , NUM00 ) ) ; }
public static boolean isDtoGetter ( Method method ) { if ( method . isAnnotationPresent ( DelegateTo . class ) ) { return _BOOL ; } if ( $F36180 ( method ) > NUM00 ) { return _BOOL ; } $F20605 ( methodName , method ) return methodName . startsWith ( NUM00 ) || ( methodName . startsWith ( NUM00 ) && ( ( method . getReturnType ( ) == $F61970 || method . getReturnType ( ) == $F41254 ) ) ) ; }
protected List < VideoDTO > extractVideosFromCursor ( Cursor cursor , int offset , int limit ) { List < VideoDTO > $F204 ( videos ) ; int count = NUM00 ; int begin = offset > NUM00 ? offset : NUM00 ; if ( cursor . moveToPosition ( begin ) ) { do { VideoDTO video = extractOneVideoFromCursor ( cursor ) ; videos . add ( video ) ; count ++ ; if ( limit > NUM00 && count > limit ) $F5153 } while $F12260 ( cursor ) ; } $F59 ( cursor ) return videos ; }
private static void computeNextCCWEdges ( Node node , long label ) { DirectedEdgeStar deStar = node . getOutEdges ( ) ; PolygonizeDirectedEdge firstOutDE = null ; PolygonizeDirectedEdge prevInDE = null ; List edges = deStar . getEdges ( ) ; for ( $F5373 ( i , edges ) ) { PolygonizeDirectedEdge de = ( PolygonizeDirectedEdge ) edges . get ( i ) ; PolygonizeDirectedEdge sym = ( PolygonizeDirectedEdge ) de . getSym ( ) ; PolygonizeDirectedEdge outDE = null ; if ( de . getLabel ( ) == label ) outDE = de ; PolygonizeDirectedEdge inDE = null ; if ( sym . getLabel ( ) == label ) inDE = sym ; if ( outDE == null && inDE == null ) $F598 $F57733 ( inDE , prevInDE ) if ( outDE != null ) { if ( prevInDE != null ) { prevInDE . setNext ( outDE ) ; prevInDE = null ; } $F22996 ( firstOutDE , outDE ) } } if ( prevInDE != null ) { Assert . isTrue ( firstOutDE != null ) ; prevInDE . setNext ( firstOutDE ) ; } }
$F1 public boolean equals ( Object other ) { if ( other instanceof IntArrayWrapper ) { return Arrays . equals ( data , ( ( IntArrayWrapper ) other ) . data ) ; } return _BOOL ; }
public static DateTime toDateSimple ( String str , TimeZone timeZone ) throws PageException { DateTime dt = toDateSimple ( str , CONVERTING_TYPE_OFFSET , _BOOL , timeZone , null ) ; if ( dt == null ) throw new ExpressionException ( NUM00 + str + NUM00 ) ; return dt ; }
public boolean contains ( Song s ) $F298 ( mSongs , s )
$F41720 ( value , absMin , absMax , absValue , Math )
private boolean zzRefill $F72 throws $F3258 { $F113517 ( zzStartRead , zzEndRead , zzFinalHighSurrogate , System , zzBuffer , zzCurrentPos , zzMarkedPos ) $F216365 ( zzCurrentPos , zzBuffer , zzFinalHighSurrogate , System , newBuffer , zzEndRead ) int requested = zzBuffer . length - zzEndRead ; $F24020 ( numRead , zzReader , zzBuffer , zzEndRead , requested ) if ( numRead == NUM00 ) { throw new $F3258 $F580 ; } $F216376 ( numRead , zzEndRead , requested , Character , zzBuffer , zzFinalHighSurrogate , _BOOL ) return _BOOL ; }
public int addPadding $F5474 ( in , inOff ) { $F18952 ( code , in , inOff ) while $F18953 ( inOff , in ) { if ( random == null ) $F5629 ( in , inOff ) else { in [ inOff ] = ( byte ) random . nextInt ( ) ; } inOff ++ ; } in [ inOff ] = code ; return code ; }
public static Long makeLong ( String s ) { $F78912 ( WWUtil , s ) try $F62107 ( Long , s ) $F62108 }
private void verifyBlockSnapshotMigration $F72 throws Exception { $F973 ( log ) Iterator $F106744 blockSnapshotItr = _dbClient . queryIterativeObjects ( $F34885 , blockSnapshotURIs ) ; List $F30635 blockObjects = new ArrayList $F30635 $F72 ; $F3536 ( blockSnapshotItr , blockObjects ) verifyBlockObjects ( blockObjects ) ; }
public static String edgeTypeToString ( @ Type int edgeType ) { switch ( edgeType ) { case FALL_THROUGH_EDGE : $F1278 case IFCMP_EDGE : $F1278 case SWITCH_EDGE : $F1278 case SWITCH_DEFAULT_EDGE : $F1278 case JSR_EDGE : $F1278 case RET_EDGE : $F1278 case GOTO_EDGE : $F1278 case RETURN_EDGE : $F1278 case UNHANDLED_EXCEPTION_EDGE : $F1278 case HANDLED_EXCEPTION_EDGE : $F1278 case START_EDGE : $F1278 case BACKEDGE_TARGET_EDGE : $F1278 case BACKEDGE_SOURCE_EDGE : $F1278 case EXIT_EDGE : $F1278 } $F1154 ( edgeType ) }
boolean checkGroups ( PhoneNumberUtil util , PhoneNumber number , StringBuilder normalizedCandidate , $F806 expectedNumberGroups ) ;
private int insertUnassignedGroup $F72 throws SQLException { PreparedStatement groupStatement ; $F3666 ( ruleid , insertUnassignedRule ) final int evaluationOrder = getNumOfGroups ( ) + NUM00 ; String unassignedGroupSqlStatement = NUM00 + GROUPS_TABLE + NUM00 + NUM00 + NUM00 ; unassignedGroupSqlStatement = String . format ( unassignedGroupSqlStatement , UNASSIGNED_GROUP , UNASSIGNED_GROUP_TYPE , UNASSIGNED_DATA_TYPE , ruleid , evaluationOrder ) ; groupStatement = prepareStatement ( unassignedGroupSqlStatement , $F21904 ) ; $F1699 ( groupStatement ) return getInternalId ( groupStatement ) ; }
public Builder deleteExtensionField ( String urn , String fieldName ) { deleteFields . add ( urn + NUM00 + fieldName ) ; return this ; }
public void sendDirect ( $F96 sqlBytes , int offset , int sqlLength , byte commandType ) throws IOException , QueryException { if ( isClosed ( ) ) $F3575 int seqNo = NUM00 ; setCompressSeqNo ( NUM00 ) ; if ( sqlLength + ( useCompression ? NUM00 : NUM00 ) > getMaxAllowedPacket ( ) ) { throw new QueryException ( NUM00 + ( sqlLength + ( useCompression ? NUM00 : NUM00 ) ) + NUM00 + maxAllowedPacket + NUM00 , - NUM00 , INTERRUPTED_EXCEPTION ) ; } if $F931 ( isUseCompression ) { if ( sqlLength + NUM00 <= maxPacketSize ) { $F130978 ( packetBuffer , sqlLength ) packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) & NUM00 ) ; packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; packetBuffer [ NUM00 ] = commandType ; $F21535 ( System , sqlBytes , offset , packetBuffer , sqlLength ) if $F8415 ( logger ) { logger . trace ( NUM00 + seqNo + NUM00 + ( sqlLength + NUM00 ) + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , sqlLength + NUM00 ) ) ; } outputStream . write ( packetBuffer ) ; } else { $F130978 ( packetBuffer , maxPacketSize ) $F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; packetBuffer [ NUM00 ] = commandType ; System . arraycopy ( sqlBytes , offset , packetBuffer , NUM00 , maxPacketSize - NUM00 ) ; int lengthAlreadySend = maxPacketSize - NUM00 ; if $F8415 ( logger ) { logger . trace ( NUM00 + seqNo + NUM00 + maxPacketSize + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , maxPacketSize ) ) ; } outputStream . write ( packetBuffer ) ; int length ; while $F84686 ( length , sqlLength , lengthAlreadySend ) { if ( length > maxPacketSize ) { $F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; System . arraycopy ( sqlBytes , offset + lengthAlreadySend , packetBuffer , NUM00 , maxPacketSize ) ; if $F8415 ( logger ) { logger . trace ( NUM00 + seqNo + NUM00 + maxPacketSize + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , maxPacketSize ) ) ; } outputStream . write ( packetBuffer ) ; lengthAlreadySend += maxPacketSize ; } else { $F8048 ( packetBuffer , length ) $F203203 ( packetBuffer , length ) $F203203 ( packetBuffer , length ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; System . arraycopy ( sqlBytes , offset + lengthAlreadySend , packetBuffer , NUM00 , length ) ; if $F8415 ( logger ) { logger . trace ( NUM00 + seqNo + NUM00 + length + NUM00 + Utils . hexdump ( packetBuffer , maxQuerySizeToLog , NUM00 , length ) ) ; } outputStream . write ( packetBuffer , NUM00 , length + NUM00 ) ; $F597 } } } } else { if ( sqlLength < maxPacketSize ) { $F130978 ( packetBuffer , sqlLength ) packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) & NUM00 ) ; packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; packetBuffer [ NUM00 ] = ( byte ) ( ( sqlLength + NUM00 ) > > > NUM00 ) ; $F65119 ( packetBuffer ) packetBuffer [ NUM00 ] = commandType ; $F21535 ( System , sqlBytes , offset , packetBuffer , sqlLength ) compressedAndSend ( sqlLength + NUM00 , packetBuffer , _BOOL ) ; } else { final int expectedPacketSize = sqlLength + NUM00 + NUM00 * ( ( ( sqlLength + NUM00 ) / maxPacketSize ) + NUM00 ) ; $F2175 ( packetBuffer , expectedPacketSize ) $F8048 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) $F203203 ( packetBuffer , maxPacketSize ) packetBuffer [ NUM00 ] = ( byte ) seqNo ++ ; packetBuffer [ NUM00 ] = commandType ; System . arraycopy ( sqlBytes , offset , packetBuffer , NUM00 , maxPacketSize - NUM00 ) ; int sqlBytesPosition = maxPacketSize - NUM00 ; int positionDest = maxPacketSize + NUM00 ; int length ; while $F84686 ( length , sqlLength , sqlBytesPosition ) { if ( length > maxPacketSize ) { $F189022 ( packetBuffer , positionDest , maxPacketSize ) packetBuffer [ positionDest ++ ] = $F53722 ( maxPacketSize ) ; packetBuffer [ positionDest ++ ] = $F53722 ( maxPacketSize ) ; packetBuffer [ positionDest ++ ] = ( byte ) seqNo ++ ; System . arraycopy ( sqlBytes , offset + sqlBytesPosition , packetBuffer , positionDest , maxPacketSize ) ; sqlBytesPosition += maxPacketSize ; positionDest += maxPacketSize ; } else { $F189022 ( packetBuffer , positionDest , length ) packetBuffer [ positionDest ++ ] = $F53722 ( length ) ; packetBuffer [ positionDest ++ ] = $F53722 ( length ) ; packetBuffer [ positionDest ++ ] = ( byte ) seqNo ++ ; System . arraycopy ( sqlBytes , offset + sqlBytesPosition , packetBuffer , positionDest , length ) ; $F597 } } compressedAndSend ( expectedPacketSize , packetBuffer , _BOOL ) ; } } }
$F1431 private List < List < GroupAttribute > > searchAuthProvider ( Filter queryBuilder , $F806 returnAttributes , final long countLimit , AttributesMapper mapper , ValidationFailureReason [ ] failureReason ) throws SizeLimitExceededException { SearchControls groupSearchControls = new SearchControls ( SearchControls . SUBTREE_SCOPE , countLimit , _searchControls . getTimeLimit ( ) , returnAttributes , _searchControls . getReturningObjFlag ( ) , _searchControls . getDerefLinkFlag ( ) ) ; List < List < GroupAttribute > > queryGroupResults = null ; queryGroupResults = safeLdapSearch ( _baseDN , queryBuilder . encode ( ) , groupSearchControls , mapper , failureReason ) ; return queryGroupResults ; }
protected void export ( OMGraphicList list , $F6689 masterRecord , boolean writeFiles ) { badGraphics = NUM00 ; if ( list == null ) $F932 else if ( list instanceof EsriGraphicList ) { export ( ( EsriGraphicList ) list ) ; $F665 } int dbfIndex = NUM00 ; for ( OMGraphic dtlGraphic : list ) { $F6689 record = masterRecord ; Integer recIndex = ( Integer ) dtlGraphic . getAttribute ( SHAPE_INDEX_ATTRIBUTE ) ; $F13265 ( recIndex , dbfIndex ) $F5178 ( record , getMasterDBFRecord , recIndex ) dbfIndex ++ ; if ( dtlGraphic instanceof OMGraphicList ) { if ( DEBUG ) $F22806 ( logger ) export ( ( OMGraphicList ) dtlGraphic , record , _BOOL ) ; $F598 } if ( dtlGraphic . getRenderType ( ) != RENDERTYPE_LATLON ) $F118993 ( badGraphics ) if ( dtlGraphic instanceof OMAreaList ) { $F22808 ( DEBUG , logger ) addAreaList ( ( OMAreaList ) dtlGraphic , record ) ; } if ( dtlGraphic instanceof OMPoly ) { OMPoly omPoly = ( OMPoly ) dtlGraphic ; if ( isPolygon ( omPoly ) ) { if ( DEBUG ) $F22806 ( logger ) addPolygon ( dtlGraphic , record ) ; } else { if ( DEBUG ) $F22806 ( logger ) addLine ( dtlGraphic , record ) ; } } else if ( dtlGraphic instanceof OMRect ) { if ( DEBUG ) $F22806 ( logger ) addPolygon ( ( OMGraphic ) EsriPolygonList . convert ( ( OMRect ) dtlGraphic ) , record ) ; } else if ( dtlGraphic instanceof OMCircle ) { if ( DEBUG ) $F22806 ( logger ) addPolygon ( ( OMGraphic ) EsriPolygonList . convert ( ( OMCircle ) dtlGraphic , projection ) , record ) ; } else if ( dtlGraphic instanceof OMRangeRings ) { if ( DEBUG ) $F22806 ( logger ) export ( EsriPolygonList . convert ( ( OMRangeRings ) dtlGraphic , projection ) , record , _BOOL ) ; } else if ( dtlGraphic instanceof OMLine ) { if ( DEBUG ) $F22806 ( logger ) addLine ( ( OMGraphic ) EsriPolylineList . convert ( ( OMLine ) dtlGraphic ) , record ) ; } else if ( dtlGraphic instanceof OMPoint ) { if ( DEBUG ) $F22806 ( logger ) addPoint ( dtlGraphic , record ) ; } } if ( badGraphics > NUM00 ) { DrawingToolRenderException . notifyUserOfNonLatLonGraphics ( badGraphics ) ; } $F24126 ( writeFiles ) boolean needConfirmation = _BOOL ; if ( filePath == null ) { filePath = getFilePathFromUser ( ) ; $F2329 ( filePath ) needConfirmation = _BOOL ; } if ( DEBUG ) $F22806 ( logger ) boolean needTypeSuffix = _BOOL ; if ( polyList != null ) { eseInterfaces . add ( new ESEInterface ( polyList , filePath , null ) ) ; needTypeSuffix = _BOOL ; } if ( lineList != null ) { eseInterfaces . add ( new ESEInterface ( lineList , filePath , ( needTypeSuffix ? LineSuffix : null ) ) ) ; needTypeSuffix = _BOOL ; } if ( pointList != null ) { eseInterfaces . add ( new ESEInterface ( pointList , filePath , ( needTypeSuffix ? PointSuffix : null ) ) ) ; } if ( needConfirmation ) $F5795 ( showGUI ) else $F5795 ( writeFiles ) }
public Depend ( PathImpl source , long lastModified , long length ) { _source = source ; _lastModified = lastModified ; _length = length ; }
public boolean hasTaskOfTypeInProgress ( $F1113 ExternalSystemTaskType type , $F1113 Project project ) { String projectId = ExternalSystemTaskId . getProjectId ( project ) ; for ( ExternalSystemTaskId id : myTasksInProgress . keySet ( ) ) { if ( $F283493 ( type , id ) && projectId . equals ( id . getIdeProjectId ( ) ) ) { return _BOOL ; } } return _BOOL ; }
public final void removeChangeListener ( ChangeListener listener ) $F106 ( listeners , listener )
public static boolean containsIgnoreCase ( String str , String query ) { if ( str != null && query != null ) { int limit = $F15171 ( str , query ) + NUM00 ; for ( $F119 ( i , limit ) ) { $F24922 ( matchesIgnoreCase , str , query , i , _BOOL ) } } return _BOOL ; }
public String toMatrixString $F72 throws Exception $F148106 ( toMatrixString )
public QuadEdge connect ( QuadEdge a , QuadEdge b ) { QuadEdge q = QuadEdge . connect ( a , b ) ; quadEdges . add ( q ) ; return q ; }
public Test findTest ( $F3803 suiteNames , String testClassName , String testName , boolean insertIfMissing ) { if $F119130 ( suiteNames ) { TestCase testCase = getTestCase ( testClassName ) ; return testCase . findTest ( testName , insertIfMissing ) ; } else { $F21425 ( rootName , suiteNames ) TestSuite suite = getTestSuite ( rootName ) ; return suite . findTest ( suiteNames , testClassName , testName , insertIfMissing ) ; } }
public Job configure ( boolean isSecured , String metaStoreUris , String principal , String redisHost , int redisPort , String password , int redisDb , String inputDatabase , String inputTable , String inputFilter , String keyName , String valueName , String keyPrefix , int numReducer , boolean replace , boolean pipeline , boolean flush , int commitSize , $F806 anonFields , String exportSalt ) throws Exception { this . isSecured = isSecured ; this . metaStoreUris = metaStoreUris ; this . principal = principal ; this . redisHost = redisHost ; this . redisPort = redisPort ; this . password = password ; this . redisDb = redisDb ; this . inputDatabase = inputDatabase ; this . inputTable = inputTable ; this . inputFilter = inputFilter ; this . keyName = keyName ; this . keyPrefix = keyPrefix ; this . valueName = valueName ; this . numReducer = numReducer ; this . replace = replace ; this . pipeline = pipeline ; this . flush = flush ; this . commitSize = commitSize ; $F256750 ( this , anonFields ) this . exportSalt = exportSalt ; return configure ( ) ; }
public static double log2 ( double a ) { return Math . log ( a ) / log2 ; }
public void addSuggestions ( final $F4170 SuggestionsResult result , final $F4170 String bucket , final $F4170 TokenSource source ) { QueryToken query = result . getQueryToken ( ) ; synchronized ( mLock ) { mResultMap . put ( bucket , result ) ; $F48768 ( waitingForBuckets , mWaitingForResults , query ) if ( waitingForBuckets != null ) { waitingForBuckets . remove ( bucket ) ; if $F10471 ( waitingForBuckets ) $F106 ( mWaitingForResults , query ) } } String currentTokenString = source . getCurrentTokenString ( ) ; synchronized ( mLock ) { $F725 ( mSuggestions ) List < Suggestible > suggestions = mSuggestionsListBuilder . buildSuggestions ( mResultMap , currentTokenString ) ; if $F3817 ( suggestions ) { mSuggestions . addAll ( suggestions ) ; mSuggestionsVisibilityManager . displaySuggestions ( _BOOL ) ; } else { hideSuggestionsIfNecessary ( result . getQueryToken ( ) , source ) ; } } notifyDataSetChanged ( ) ; }
public static < ET extends Enum < ET > > EnumResolver < ET > constructFor ( Class < ET > enumCls , AnnotationIntrospector ai ) { ET [ ] enumValues = enumCls . getEnumConstants ( ) ; if ( enumValues == null ) { throw new IllegalArgumentException $F47919 ( enumCls ) ; } HashMap < String , ET > map = new HashMap < String , ET > $F72 ; for ( ET e : enumValues ) { map . put ( ai . findEnumValue ( e ) , e ) ; } return new EnumResolver < ET > ( enumCls , enumValues , map ) ; }
protected void encodeLineSuffix ( OutputStream aStream ) throws IOException $F46210 ( pStream )
public static boolean replace ( RTextArea textArea , String toFind , String replaceWith , boolean forward , boolean matchCase , boolean wholeWord , boolean regex ) throws PatternSyntaxException { textArea . beginAtomicEdit ( ) ; try { if ( regex ) $F12218 ( regexReplace , textArea , toFind , replaceWith , forward , matchCase , wholeWord ) makeMarkAndDotEqual ( textArea , forward ) ; if ( find ( textArea , toFind , forward , matchCase , wholeWord , _BOOL ) ) { textArea . replaceSelection ( replaceWith ) ; return _BOOL ; } } finally { textArea . endAtomicEdit ( ) ; } return _BOOL ; }
public void preSingleSignOnRequest ( String hostedEntityID , String idpEntityID , String realm , HttpServletRequest request , HttpServletResponse response , AuthnRequest authnRequest ) throws SAML2Exception $F932
$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages )
public static ImageIcon createIcon ( BasicStroke stroke , int width , int height , boolean horizontalOrientation ) { $F214300 ( bigImage , width , height , BufferedImage ) $F23475 ( g , bigImage ) g . setBackground ( OMColor . clear ) ; g . setPaint ( OMColor . clear ) ; $F23479 ( g , width , height ) g . setPaint ( Color . black ) ; g . setStroke ( stroke ) ; if ( horizontalOrientation ) { g . drawLine ( NUM00 , height / NUM00 , width , height / NUM00 ) ; } else { g . drawLine ( width / NUM00 , NUM00 , width / NUM00 , height ) ; } $F34728 ( bigImage ) }
public static final < T extends EObject > $F5675 collectNodesWithinSameThisEnvironment ( EObject root , $F20474 cls ) { final $F5675 $F204 ( result ) ; final TreeIterator < EObject > iter = root . eAllContents ( ) ; while $F2921 ( iter ) { final EObject obj = iter . next ( ) ; if $F178804 ( cls , obj ) { $F1431 final T objCasted = ( T ) obj ; result . add ( objCasted ) ; } if ( obj instanceof ThisArgProvider ) { iter . prune ( ) ; } } return result ; }
protected abstract List < SingleVariableDeclaration > adjustDstParams ( MethodDeclaration method ) ;
public String fullSource $F72 { if ( fullSource == null ) { fullSource = addSentenceMarkers ( source ( ) ) ; } return fullSource ; }
private void updateDetailData $F72 { final long start = mLeftPosition ; final long end = mRightPosition ; final long now = mCurrentTime ; final Context context = getContext ( ) ; NetworkStatsHistory . Entry originalEntry = mOriginalNetworkStatsHistory . getValues ( start , end , now , null ) ; final long originalTotalBytes = originalEntry . rxBytes ; mOriginalTotalPhrase = Formatter . formatFileSize ( context , originalTotalBytes ) ; NetworkStatsHistory . Entry compressedEntry = mReceivedNetworkStatsHistory . getValues ( start , end , now , null ) ; final long compressedTotalBytes = compressedEntry . rxBytes ; mReceivedTotalPhrase = Formatter . formatFileSize ( context , compressedTotalBytes ) ; float percentage = NUM00 ; if ( originalTotalBytes > NUM00 && originalTotalBytes > compressedTotalBytes ) { percentage = ( originalTotalBytes - compressedTotalBytes ) / ( float ) originalTotalBytes ; } mPercentReductionPhrase = String . format ( NUM00 , NUM00 * percentage ) ; mStartDatePhrase = formatDate ( context , start ) ; mEndDatePhrase = formatDate ( context , end ) ; }
public PunctuationTrie $F4203 lookup ( CharSequence s ) { PunctuationTrie $F4203 t = this ; for ( $F133333 ( i , n , s ) ) { t = t . lookup ( s . charAt ( i ) ) ; if ( null == t ) $F5153 } return t ; }
private static File constructFilePaths ( String file1 , String file2 ) { File newPath ; if $F7311 ( file2 , file1 ) $F94463 ( newPath , file2 ) else { $F44418 ( newPath , file1 , file2 ) ; } return newPath ; }
public String resolveTemplate ( ITemplateType templateType , $F2540 ( replacements ) ) throws IOException { Path path = getTemplatePath ( templateType ) ; String template = new String ( Files . readAllBytes ( path ) , StandardCharsets . UTF_8 ) ; return insertProperties ( template , replacements ) ; }
public void execute $F72 { try { $F1699 ( prep ) } $F44917 ( convert , e ) }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
private static $F96 unwrapCalculatedValue $F97 ( data ) { if ( data . length < CALC_DATA_OFFSET ) { return data ; } ByteBuffer buffer = PageChannel . wrap ( data ) ; buffer . position ( CALC_DATA_LEN_OFFSET ) ; $F8354 ( dataLen , buffer ) $F96 newData = new byte [ Math . min ( buffer . remaining ( ) , dataLen ) ] ; buffer . get ( newData ) ; return newData ; }
public synchronized TypeInstance createInstance ( final String name , final String comment , final BaseType baseType , final Section section , final long sectionOffset ) throws CouldntSaveDataException , CouldntLoadDataException { $F1832 ( Preconditions , name ) Preconditions . checkArgument ( comment == null || $F1030 ( comment ) , NUM00 ) ; $F1832 ( Preconditions , baseType ) $F1832 ( Preconditions , section ) $F46507 ( Preconditions , sectionOffset ) Preconditions . checkArgument ( ! instancesByAddress . containsKey ( new TypeInstanceAddress ( section . getStartAddress ( ) , sectionOffset ) ) ) ; final TypeInstance instance = backend . createTypeInstance ( name , comment , baseType , section , sectionOffset ) ; instancesByAddress . put ( instance . getAddress ( ) , instance ) ; instances . add ( instance ) ; notifyInstanceAdded ( instance ) ; return instance ; }
void showInputBox ( String message , Consumer $F4 resultCallback ) $F1861 ( showInputBox , message , resultCallback )
public void add ( Field field ) $F207 ( mFields , field )
public static long measureTime ( Callable $F1432 c , int threadCnt ) throws Exception { A . ensure ( threadCnt >= NUM00 , NUM00 ) ; $F657 ( start , System ) if ( threadCnt == NUM00 ) c . call ( ) ; else GridTestUtils . runMultiThreaded ( c , threadCnt , NUM00 ) ; return System . currentTimeMillis ( ) - start ; }
$F1 public boolean isClosed $F72 $F1522 ( _isClosed )
protected StatementListNode generateDestructorBody ( Context context , StatementListNode statementList ) { Model model = ( Model ) value ; $F164120 ( ids ) if ( model . isDeclared ( ) ) $F42096 ( ids , model ) collectDeclarations ( model . getSubInitializerIterator ( ) , ids ) ; NodeFactory nodeFactory = context . getNodeFactory ( ) ; StatementListNode result = statementList ; StatementListNode functionStatementList = null ; for ( String id : ids ) { LiteralNullNode literalNull = nodeFactory . literalNull ( ) ; IdentifierNode identifier = nodeFactory . identifier ( id ) ; Node expressionStatement = nodeFactory . assignmentExpression ( identifier , ASSIGN_TOKEN , literalNull ) ; functionStatementList = nodeFactory . statementList ( functionStatementList , expressionStatement ) ; } FunctionSignatureNode functionSignature = nodeFactory . functionSignature ( null , null ) ; functionSignature . void_anno = _BOOL ; IdentifierNode functionIdentifier = nodeFactory . identifier ( model . getDefinitionName ( ) + NUM00 ) ; FunctionCommonNode functionCommon = nodeFactory . functionCommon ( context , functionIdentifier , functionSignature , functionStatementList ) ; functionCommon . setUserDefinedBody ( _BOOL ) ; AttributeListNode attributeList = AbstractSyntaxTreeUtil . generatePrivateAttribute ( nodeFactory ) ; FunctionNameNode functionName = nodeFactory . functionName ( Tokens . EMPTY_TOKEN , functionIdentifier ) ; FunctionDefinitionNode functionDefinition = nodeFactory . functionDefinition ( context , attributeList , functionName , functionCommon ) ; result = nodeFactory . statementList ( result , functionDefinition ) ; return result ; }
protected synchronized void expire $F72 throws IllegalMonitorStateException { if ( owner == Thread . currentThread ( ) ) { expired = _BOOL ; } else { throw new IllegalMonitorStateException $F580 ; } }
private StringBuffer prepareOptimizedInsertStatement ( OneRowChange oneRowChange ) { StringBuffer stmt ; $F7398 ( stmt ) $F84 ( stmt ) stmt . append ( conn . getDatabaseObjectName ( oneRowChange . getSchemaName ( ) ) + NUM00 + conn . getDatabaseObjectName ( oneRowChange . getTableName ( ) ) ) ; $F84 ( stmt ) printColumnSpec ( stmt , oneRowChange . getColumnSpec ( ) , null , null , PrintMode . NAMES_ONLY , NUM00 ) ; $F84 ( stmt ) boolean firstRow = _BOOL ; for ( ArrayList < ColumnVal > oneRowValues : oneRowChange . getColumnValues ( ) ) { if ( firstRow ) { firstRow = _BOOL ; } else $F84 ( stmt ) printColumnSpec ( stmt , oneRowChange . getColumnSpec ( ) , null , oneRowValues , PrintMode . PLACE_HOLDER , NUM00 ) ; $F84 ( stmt ) } return stmt ; }
private boolean extractorQueueEmpty $F72 throws InterruptedException { if ( extractor . hasMoreEvents ( ) ) return _BOOL ; else if ( blockCommitIntervalMillis <= NUM00 ) return _BOOL ; else { long nextCommitMillis = lastCommitMillis + blockCommitIntervalMillis ; long sleepMillis = nextCommitMillis - System . currentTimeMillis ( ) ; while ( sleepMillis > NUM00 ) { $F9470 ( Thread ) if ( extractor . hasMoreEvents ( ) ) return _BOOL ; sleepMillis = nextCommitMillis - System . currentTimeMillis ( ) ; } return _BOOL ; } }
$F98526 ( cr , dump , pw , verify )
public FileAsyncHttpResponseHandler ( Context context ) { super ( ) ; this . file = getTemporaryFile ( context ) ; this . append = _BOOL ; this . renameIfExists = _BOOL ; }
public static boolean isWindowOpaque ( Window window ) { $F896 ( window ) return window . isOpaque ( ) ; }
public static $F96 encode $F24576 ( data , off , length ) { int len = ( length + NUM00 ) / NUM00 * NUM00 ; $F39018 ( bOut , len ) $F39025 ( encoder , data , off , length , bOut , e ) $F11316 ( bOut ) }
public double entropyNMIMin $F72 { return ( entropyMutualInformation ( ) / Math . min ( entropyFirst ( ) , entropySecond ( ) ) ) ; }
public static void unregister ( CloseWatcher w ) { w . closeable = null ; refs . remove ( w ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
$F96285 ( labels , map , clones , i )
$F1 public JettySolrRunner createJetty ( File solrHome , String dataDir , String shardList , String solrConfigOverride , String schemaOverride ) throws Exception $F16525 ( createProxiedJetty , solrHome , dataDir , shardList , solrConfigOverride , schemaOverride )
public synchronized void addBatchClassifierListener ( BatchClassifierListener cl ) $F6659 ( m_batchClassifierListeners , cl )
private boolean matchAndwriteOneAuditLog ( BufferedWriter writer , AuditLog auditlog , String keyword ) throws MarshallingExcetion { try { AuditLogUtils . resetDesc ( auditlog , resb ) ; if ( AuditLogUtils . isKeywordContained ( auditlog , keyword ) ) { if ( _count . getAndIncrement ( ) > NUM00 ) { while $F972 ( _firstWritten ) { try $F31130 ( Thread ) catch ( InterruptedException e ) $F10911 ( _logger ) } writer . write ( NUM00 + _mapper . writeValueAsString ( auditlog ) ) ; } else { writer . write ( _mapper . writeValueAsString ( auditlog ) ) ; _firstWritten . set ( _BOOL ) ; } return _BOOL ; } _logger . debug ( NUM00 , auditlog . getDescription ( ) , keyword ) ; return _BOOL ; } catch ( JsonGenerationException e ) { throw new MarshallingExcetion ( NUM00 , e ) ; } catch ( JsonMappingException e ) { throw new MarshallingExcetion ( NUM00 , e ) ; } catch ( IOException e ) { throw new MarshallingExcetion ( NUM00 , e ) ; } }
String toString ( boolean includePrivateCredentials ) { $F21024 ( s , ResourcesMgr ) String suffix = NUM00 ; synchronized ( principals ) { Iterator $F35948 pI = principals . iterator ( ) ; while $F2921 ( pI ) { Principal p = pI . next ( ) ; suffix = suffix + ResourcesMgr . getString ( NUM00 ) + p . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; } } synchronized ( pubCredentials ) { $F91960 pI = pubCredentials . iterator ( ) ; while $F2921 ( pI ) { $F8877 ( o , pI ) suffix = suffix + ResourcesMgr . getString ( NUM00 ) + o . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; } } if ( includePrivateCredentials ) { synchronized ( privCredentials ) { $F91960 pI = privCredentials . iterator ( ) ; while $F2921 ( pI ) { try { $F8877 ( o , pI ) suffix += ResourcesMgr . getString ( NUM00 ) + o . toString ( ) + ResourcesMgr . getString ( NUM00 ) ; } catch ( SecurityException se ) { suffix += ResourcesMgr . getString ( NUM00 ) ; $F597 } } } } return s + suffix ; }
private void decodeTonesPhase ( int chNum , boolean bandHasTones [ ] ) { WavesData dst [ ] = ctx . channels [ chNum ] . tonesInfo ; for ( int sb = NUM00 ; sb < ctx . wavesInfo . numToneBands ; sb ++ ) { if ( ! bandHasTones [ sb ] ) $F1448 int wparam = dst [ sb ] . startIndex ; for ( int i = NUM00 ; i < dst [ sb ] . numWavs ; i ++ ) { ctx . wavesInfo . waves [ wparam + i ] . phaseIndex = br . read ( NUM00 ) ; } } }
public int encode $F56810 ( data , off , length , out ) throws IOException { for ( $F147626 ( i , off , length ) ) { int v = data [ i ] & NUM00 ; out . write ( encodingTable [ $F14870 ( v ) ] ) ; $F56823 ( out , encodingTable , v ) } return length * NUM00 ; }
public void clear $F72 { $F101536 ( mLock , mGraphics ) postInvalidate ( ) ; }
public static String removeAll $F8306 ( str , patterns ) { for ( String pattern : patterns ) str = str . replace ( pattern , NUM00 ) ; return str ; }
public void addSeriesRenderer ( SimpleSeriesRenderer renderer ) $F207 ( mRenderers , renderer )
public static void ccDrawCircle ( GL10 gl , CGPoint center , float r , float a , int segments , boolean drawLineToCenter ) { FloatBuffer vertices = getVertices ( NUM00 * ( segments + NUM00 ) ) ; int additionalSegment = NUM00 ; if ( drawLineToCenter ) additionalSegment ++ ; final float coef = NUM00 * ( float ) Math . PI / segments ; for ( $F9993 ( i , segments ) ) { float rads = i * coef ; float j = ( float ) ( r * Math . cos ( rads + a ) + center . x ) ; float k = ( float ) ( r * Math . sin ( rads + a ) + center . y ) ; vertices . put ( j ) ; vertices . put ( k ) ; } vertices . put ( center . x ) ; vertices . put ( center . y ) ; $F16709 ( vertices ) gl . glDisable ( GL_TEXTURE_2D ) ; gl . glDisableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glDisableClientState ( GL_COLOR_ARRAY ) ; $F126369 ( gl , GL_FLOAT , vertices ) gl . glDrawArrays ( GL_LINE_STRIP , NUM00 , segments + additionalSegment ) ; gl . glEnableClientState ( GL_COLOR_ARRAY ) ; gl . glEnableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glEnable ( GL_TEXTURE_2D ) ; }
$F1 public $F987 listOptions $F72 { $F20795 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
$F1 public boolean isParent ( File folder , File file ) { return folder . equals ( file . getParentFile ( ) ) ; }
$F1 public void print ( char c ) throws IOException { boolean isWS = Character . isWhitespace ( c ) ; if ( isWS ) { $F5453 ( isFirstChar ) $F16699 ( c , CHAR_RETURN ) if $F4012 ( sb ) { printBuffer ( ) ; lastChar = ( c == CHAR_NL ) ? CHAR_NL : c ; super . print ( lastChar ) ; $F665 } } isFirstChar = _BOOL ; if ( c == CHAR_GT && $F20 ( sb ) ) printBuffer ( ) ; if ( isWS || ! addToBuffer ( c ) ) { if ( depthSum == NUM00 ) { if ( isWS ) { $F16699 ( lastChar , CHAR_NL ) if ( c != CHAR_NL ) { if $F104645 ( Character , lastChar ) $F665 } } } lastChar = c ; super . print ( c ) ; } }
public static TokenEndpointAuthMethod fromString ( String type ) { if ( type != null ) { for ( $F40424 ( authMethod , TokenEndpointAuthMethod ) ) { if ( $F206388 ( type , authMethod ) ) { return authMethod ; } } } $F1274 }
public void put ( E e ) throws InterruptedException { $F61745 ( e ) int c = - NUM00 ; $F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { while ( count . get ( ) >= capacity ) $F24081 ( notFull ) enqueue ( e ) ; $F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } $F796 ( putLock ) $F42886 ( c , signalNotEmpty ) }
private boolean compare ( $F3803 remoteModules , $F3803 expectedModules ) { Collections . sort ( remoteModules ) ; Collections . sort ( expectedModules ) ; $F1964 ( remoteModules , expectedModules ) }
private void encodeSize ( ByteBuffer headerBuffer , int size ) { headerBuffer . put ( $F125631 ( size ) ) ; headerBuffer . put ( $F125631 ( size ) ) ; $F42832 ( headerBuffer , size ) logger . fine ( NUM00 + size + NUM00 + Integer . toBinaryString ( size ) + NUM00 + Integer . toHexString ( size ) ) ; }
protected $F16501 diff_bisect $F9179 ( text1 , text2 , deadline ) { $F1749 ( text1_length , text1 ) $F1749 ( text2_length , text2 ) int max_d = ( text1_length + text2_length + NUM00 ) / NUM00 ; int v_offset = max_d ; int v_length = NUM00 * max_d ; $F4120 ( v1 , v_length ) $F4120 ( v2 , v_length ) for ( $F119 ( x , v_length ) ) { v1 [ x ] = - NUM00 ; v2 [ x ] = - NUM00 ; } v1 [ v_offset + NUM00 ] = NUM00 ; v2 [ v_offset + NUM00 ] = NUM00 ; int delta = text1_length - text2_length ; boolean front = ( delta % NUM00 != NUM00 ) ; int k1start = NUM00 ; int k1end = NUM00 ; int k2start = NUM00 ; int k2end = NUM00 ; for ( $F119 ( d , max_d ) ) { if $F16508 ( System , deadline ) $F5153 for ( $F16510 ( k1 , d , k1start , k1end ) ) { int k1_offset = v_offset + k1 ; int x1 ; $F16518 ( k1 , d , v1 , k1_offset , x1 ) int y1 = x1 - k1 ; while ( x1 < text1_length && y1 < text2_length && $F16519 ( text1 , x1 , text2 , y1 ) ) $F1097 ( x1 , y1 ) v1 [ k1_offset ] = x1 ; if ( x1 > text1_length ) { k1end += NUM00 ; } else if ( y1 > text2_length ) { k1start += NUM00 ; } else if ( front ) { int k2_offset = v_offset + delta - k1 ; if $F16524 ( k2_offset , v_length , v2 ) { int x2 = text1_length - v2 [ k2_offset ] ; $F16526 ( x1 , x2 , diff_bisectSplit , text1 , text2 , y1 , deadline ) } } } for ( $F16510 ( k2 , d , k2start , k2end ) ) { int k2_offset = v_offset + k2 ; int x2 ; $F16518 ( k2 , d , v2 , k2_offset , x2 ) int y2 = x2 - k2 ; while ( x2 < text1_length && y2 < text2_length && text1 . charAt ( text1_length - x2 - NUM00 ) == text2 . charAt ( text2_length - y2 - NUM00 ) ) $F1097 ( x2 , y2 ) v2 [ k2_offset ] = x2 ; if ( x2 > text1_length ) { k2end += NUM00 ; } else if ( y2 > text2_length ) { k2start += NUM00 ; } else if ( ! front ) { int k1_offset = v_offset + delta - k2 ; if $F16524 ( k1_offset , v_length , v1 ) { int x1 = v1 [ k1_offset ] ; int y1 = v_offset + x1 - k1_offset ; x2 = text1_length - x2 ; $F16526 ( x1 , x2 , diff_bisectSplit , text1 , text2 , y1 , deadline ) } } } } $F16553 ( diffs ) $F16557 ( diffs , Operation , text1 ) $F16561 ( diffs , Operation , text2 ) return diffs ; }
public boolean thisIsYou ( Object n ) $F23588 ( id , n )
private int syncContactNames ( Context context ) { final ContentResolver contentResolver = context . getContentResolver ( ) ; final Cursor cursor = contentResolver . query ( ContactNotifications . CONTENT_URI , null , null , null , null ) ; $F1084 ( cursor ) if $F22360 ( cursor ) $F1083 int count = NUM00 ; int updatedCount = NUM00 ; String id ; String contactName ; String contactLookup ; String contactId ; while $F12260 ( cursor ) { count ++ ; id = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . _ID ) ) ; contactName = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_NAME ) ) ; contactId = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_ID ) ) ; contactLookup = cursor . getString ( cursor . getColumnIndexOrThrow ( ContactNotifications . CONTACT_LOOKUPKEY ) ) ; ContactIdentification contactInfo = SmsPopupUtils . getPersonNameByLookup ( context , contactLookup , contactId ) ; if ( contactInfo != null ) { boolean runUpdate = _BOOL ; $F20904 ( vals ) if ( contactName == null || $F45203 ( contactName , contactInfo ) ) { vals . put ( ContactNotifications . CONTACT_NAME , contactInfo . contactName ) ; runUpdate = _BOOL ; } if ( contactId == null || $F45203 ( contactId , contactInfo ) ) { vals . put ( ContactNotifications . CONTACT_ID , contactInfo . contactId ) ; runUpdate = _BOOL ; } if ( contactLookup == null || $F45203 ( contactLookup , contactInfo ) ) { vals . put ( ContactNotifications . CONTACT_LOOKUPKEY , contactInfo . contactLookup ) ; runUpdate = _BOOL ; } if ( runUpdate && NUM00 == contentResolver . update ( ContactNotifications . buildContactUri ( id ) , vals , null , null ) ) { updatedCount ++ ; } } } $F2727 ( cursor ) if ( BuildConfig . DEBUG ) Log . v ( NUM00 + updatedCount + NUM00 + count ) ; return updatedCount ; }
$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog )
$F1 protected void deviceFrameRect ( int x , int y , int width , int height , Color color ) { AffineTransform deviceTransform = getTransform ( ) ; $F20997 ( transformType , deviceTransform ) boolean usePath = ( ( transformType & ( AffineTransform . TYPE_GENERAL_ROTATION | AffineTransform . TYPE_GENERAL_TRANSFORM ) ) != NUM00 ) ; if ( usePath ) { draw ( new $F186398 ( x , y , width , height ) ) ; $F665 } Stroke stroke = getStroke ( ) ; if ( stroke instanceof BasicStroke ) { BasicStroke lineStroke = ( BasicStroke ) stroke ; int endCap = lineStroke . getEndCap ( ) ; int lineJoin = lineStroke . getLineJoin ( ) ; if ( ( endCap == BasicStroke . CAP_SQUARE ) && ( lineJoin == BasicStroke . JOIN_MITER ) && ( lineStroke . getMiterLimit ( ) == NUM00 ) ) { float lineWidth = lineStroke . getLineWidth ( ) ; $F13616 penSize = new $F13616 ( lineWidth , lineWidth ) ; deviceTransform . deltaTransform ( penSize , penSize ) ; float deviceLineWidth = Math . min ( $F67900 ( Math , penSize ) , Math . abs ( penSize . y ) ) ; $F13616 ul_pos = $F181599 ( x , y ) ; $F166803 ( deviceTransform , ul_pos ) $F13616 lr_pos = new $F13616 ( x + width , y + height ) ; $F166803 ( deviceTransform , lr_pos ) float w = ( float ) $F205392 ( lr_pos , ul_pos ) ; float h = ( float ) $F205394 ( lr_pos , ul_pos ) ; WPrinterJob wPrinterJob = ( WPrinterJob ) getPrinterJob ( ) ; if ( wPrinterJob . selectStylePen ( endCap , lineJoin , deviceLineWidth , color ) == _BOOL ) { wPrinterJob . frameRect ( $F10740 ( ul_pos ) , $F10783 ( ul_pos ) , w , h ) ; } else { double lowerRes = Math . min ( wPrinterJob . getXRes ( ) , wPrinterJob . getYRes ( ) ) ; if ( ( deviceLineWidth / lowerRes ) < MAX_THINLINE_INCHES ) { wPrinterJob . selectPen ( deviceLineWidth , color ) ; wPrinterJob . frameRect ( $F10740 ( ul_pos ) , $F10783 ( ul_pos ) , w , h ) ; } else { draw ( new $F186398 ( x , y , width , height ) ) ; } } } else { draw ( new $F186398 ( x , y , width , height ) ) ; } } }
public void resetWorkspace $F72 { mBlockFactory . clearPriorBlockReferences ( ) ; $F725 ( mRootBlocks ) $F725 ( mStats ) $F725 ( mDeletedBlocks ) }
private void parseElement ( Element element ) throws SAML2Exception { $F4377 ( assertionFactory , AssertionFactory ) $F4377 ( protoFactory , ProtocolFactory ) requestId = element . getAttribute ( SAML2Constants . ID ) ; validateID ( requestId ) ; version = element . getAttribute ( SAML2Constants . VERSION ) ; validateVersion ( version ) ; String issueInstantStr = element . getAttribute ( SAML2Constants . ISSUE_INSTANT ) ; validateIssueInstant ( issueInstantStr ) ; destinationURI = element . getAttribute ( SAML2Constants . DESTINATION ) ; consent = element . getAttribute ( SAML2Constants . CONSENT ) ; String notOnOrAfterStr = element . getAttribute ( SAML2Constants . NOTONORAFTER ) ; validateNotOnOrAfterStr ( notOnOrAfterStr ) ; reason = element . getAttribute ( SAML2Constants . REASON ) ; String sessionIndexStr = null ; $F9040 ( nList , element ) if ( ( nList != null ) && ( $F72501 ( nList ) ) ) { for ( $F85554 ( i , nList ) ) { $F61359 ( childNode , nList , i ) $F40269 ( cName , childNode ) if ( cName != null ) { if ( cName . equals ( SAML2Constants . ISSUER ) ) { nameID = assertionFactory . createIssuer ( ( Element ) childNode ) ; } else if ( cName . equals ( SAML2Constants . SIGNATURE ) ) { signatureString = XMLUtils . print ( ( Element ) childNode ) ; isSigned = _BOOL ; } else if ( cName . equals ( SAML2Constants . EXTENSIONS ) ) { extensions = protoFactory . createExtensions ( ( Element ) childNode ) ; } else if ( cName . equals ( SAML2Constants . BASEID ) ) { baseId = assertionFactory . createBaseID ( ( Element ) childNode ) ; } else if ( cName . equals ( SAML2Constants . NAMEID ) ) { nameId = assertionFactory . createNameID ( ( Element ) childNode ) ; } else if ( cName . equals ( SAML2Constants . ENCRYPTEDID ) ) { encryptedId = assertionFactory . createEncryptedID ( ( Element ) childNode ) ; } else if ( cName . equals ( SAML2Constants . SESSION_INDEX ) ) { if $F10122 ( sessionIndexList ) $F13242 ( sessionIndexList ) sessionIndexStr = XMLUtils . getElementString ( ( Element ) childNode ) ; sessionIndexList . add ( sessionIndexStr ) ; } } } validateBaseIDorNameIDorEncryptedID ( ) ; if $F13709 ( sessionIndexList ) { $F5939 ( sessionIndexList , Collections ) } } }
protected void onComplete $F72 $F845
public static BigDecimal paidToDate ( int p_C_Invoice_ID , int p_C_Currency_ID , int p_MultiplierAP , Timestamp DateAcct ) throws SQLException { if ( p_C_Invoice_ID == NUM00 || p_C_Currency_ID == NUM00 ) $F1274 BigDecimal MultiplierAP = new BigDecimal $F51635 ( p_MultiplierAP ) ; if ( p_MultiplierAP == NUM00 ) MultiplierAP = Adempiere . ONE ; int C_ConversionType_ID = NUM00 ; BigDecimal paymentAmt = allocatedAmtToDate ( p_C_Invoice_ID , p_C_Currency_ID , C_ConversionType_ID , MultiplierAP , DateAcct ) ; return Currency . round ( paymentAmt , p_C_Currency_ID , null ) ; }
private $F2027 toIntArray $F72 { int length = encoding . length ; $F11844 ( result ) int which = NUM00 ; int fromPos = NUM00 ; for ( $F119 ( i , length ) ) { if ( ( encoding [ i ] & NUM00 ) == NUM00 ) { if ( i - fromPos + NUM00 > NUM00 ) { BigInteger big = new BigInteger ( pack ( encoding , fromPos , i - fromPos + NUM00 , NUM00 , NUM00 ) ) ; if ( fromPos == NUM00 ) { result [ which ++ ] = NUM00 ; BigInteger second = big . subtract ( BigInteger . valueOf ( NUM00 ) ) ; if ( second . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) == NUM00 ) $F1337 else { result [ which ++ ] = second . intValue ( ) ; } } else { if ( big . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) == NUM00 ) $F1337 else { result [ which ++ ] = big . intValue ( ) ; } } } else { int retval = NUM00 ; for ( int j = fromPos ; j <= i ; j ++ ) { retval <<= NUM00 ; byte tmp = encoding [ j ] ; retval |= ( tmp & NUM00 ) ; } if ( fromPos == NUM00 ) { if ( retval < NUM00 ) { result [ which ++ ] = retval / NUM00 ; result [ which ++ ] = retval % NUM00 ; } else { result [ which ++ ] = NUM00 ; result [ which ++ ] = retval - NUM00 ; } } else $F52339 ( result , which , retval ) } fromPos = i + NUM00 ; } if ( which >= result . length ) { result = Arrays . copyOf ( result , which + NUM00 ) ; } } return Arrays . copyOf ( result , which ) ; }
public static List $F349233 windows ( InputStream words , TokenizerFactory tokenizerFactory , int windowSize ) { Tokenizer tokenizer = tokenizerFactory . create ( words ) ; $F24645 ( list ) $F226965 ( tokenizer , list ) if $F2979 ( list ) $F4638 return windows ( list , windowSize ) ; }
public static $F1986 pageRank ( MatrixInterface preparedMatrix , int maxIteration ) { $F1986 init = new double [ preparedMatrix . getRowsCount ( ) ] ; for ( $F15868 ( i , init ) ) init [ i ] = NUM00 ; return pageRank ( preparedMatrix , maxIteration , DEFAULT_D , init ) ; }
public boolean hasMIMEType ( String mimeType ) { $F397 ( mimeType , _BOOL ) String type = mimeType ; if $F56559 ( mimeType ) { type = $F31599 ( mimeType ) ; } for ( String mt : this . mimeTypes ) { $F72433 ( mt , mimeType , _BOOL ) if ( mimeType != type && mt . equalsIgnoreCase ( type ) ) { return _BOOL ; } } return _BOOL ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private void readObject $F154558 ( s ) throws $F169650 { $F6428 ( s ) key = key . clone ( ) ; }
void unexecuteNSDecls ( TransformerImpl transformer ) throws TransformerException $F11707 ( unexecuteNSDecls , transformer )
public boolean add ( ProtocolMessage pm ) $F31974 ( protocolMessages , pm )
public void randomInit $F72 { do { m_bits = new boolean [ m_nNodes * m_nNodes ] ; for ( $F119 ( i , m_nNodes ) ) { int iPos ; do { iPos = m_random . nextInt ( m_nNodes * m_nNodes ) ; } while ( isSquare ( iPos ) ) ; m_bits [ iPos ] = _BOOL ; } } while ( hasCycles ( ) ) ; calcGlobalScore ( ) ; }
public static int safeParseInt ( String s ) { return safeParseInt ( s , - NUM00 ) ; }
protected boolean hasReceiversFor ( DistributedMember endPoint ) { synchronized ( this . receivers ) { for ( $F2774 ( it , receivers ) ) { Connection con = ( Connection ) it . next ( ) ; if ( endPoint . equals ( con . getRemoteAddress ( ) ) ) { return _BOOL ; } } } return _BOOL ; }
protected void decodeBitmapData ( final GifFrame frame , $F96 dstPixels ) { if ( frame != null ) { rawData . position ( frame . bufferFrameStart ) ; } final int nullCode = - NUM00 ; final int npix = ( frame == null ) ? width * height : frame . iw * frame . ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if $F28203 ( dstPixels , npix ) $F75474 ( dstPixels , npix ) if ( prefix == null ) { $F69027 ( prefix , MAX_STACK_SIZE ) } if ( suffix == null ) $F75474 ( suffix , MAX_STACK_SIZE ) if ( pixelStack == null ) { $F83281 ( pixelStack , MAX_STACK_SIZE ) ; } data_size = read ( ) ; clear = NUM00 < < data_size ; end_of_information = clear + NUM00 ; available = clear + NUM00 ; old_code = nullCode ; code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; for ( code = NUM00 ; code < clear ; code ++ ) { prefix [ code ] = NUM00 ; $F78924 ( suffix , code ) } datum = bits = count = first = top = pi = bi = NUM00 ; for ( i = NUM00 ; i < npix ; ) { if ( top == NUM00 ) { if ( bits < code_size ) { if ( count == NUM00 ) { count = readBlock ( ) ; $F65649 ( count ) bi = NUM00 ; } datum += ( ( block [ bi ] ) & NUM00 ) < < bits ; bits += NUM00 ; bi ++ ; count -- ; $F598 } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) $F5153 if ( code == clear ) { code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; available = clear + NUM00 ; old_code = nullCode ; $F598 } if ( old_code == nullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; $F598 } in_code = code ; if ( code == available ) { $F11740 ( pixelStack , top , first ) code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( suffix [ code ] ) & NUM00 ; $F66497 ( available , MAX_STACK_SIZE ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; $F8214 ( suffix , available , first ) available ++ ; if ( $F84469 ( available , code_mask ) && ( available < MAX_STACK_SIZE ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; dstPixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) $F5629 ( dstPixels , i ) }
public void addRangeRestriction ( String ColumnName , Object Code , Object Code_to , String InfoName , String InfoDisplay , String InfoDisplay_to ) { Restriction r = new Restriction ( ColumnName , Code , Code_to , InfoName , InfoDisplay , InfoDisplay_to , _BOOL , NUM00 ) ; m_list . add ( r ) ; }
$F1431 E transfer ( E e , boolean timed , long nanos ) { QNode s = null ; boolean isData = ( e != null ) ; for ( $F589 ) { QNode t = tail ; QNode h = head ; if ( t == null || h == null ) $F598 if ( h == t || t . isData == isData ) { QNode tn = t . next ; if ( t != tail ) $F598 if ( tn != null ) $F171537 ( advanceTail , t , tn ) if ( timed && nanos <= NUM00 ) $F1274 if ( s == null ) s = new QNode ( e , isData ) ; if ( ! t . casNext ( null , s ) ) $F598 advanceTail ( t , s ) ; Object x = awaitFulfill ( s , e , timed , nanos ) ; if ( x == s ) { clean ( t , s ) ; $F1274 } if ( ! s . isOffList ( ) ) { advanceHead ( t , s ) ; if ( x != null ) s . item = s ; s . waiter = null ; } return ( x != null ) ? ( E ) x : e ; } else { QNode m = h . next ; if ( t != tail || m == null || h != head ) $F598 Object x = m . item ; if ( isData == ( x != null ) || x == m || ! m . casItem ( x , e ) ) $F171537 ( advanceHead , h , m ) advanceHead ( h , m ) ; $F139937 ( LockSupport , m ) return ( x != null ) ? ( E ) x : e ; } } }
protected void indexPoints ( InputStream is , long ptr , OutputStream os ) { boolean moreRecords = _BOOL ; byte rHdr [ ] = new byte [ SHAPE_RECORD_HEADER_LENGTH ] ; byte outBuf [ ] = new byte [ SPATIAL_INDEX_RECORD_LENGTH ] ; int result ; int nRecords = NUM00 ; int recLengthWords , recLengthBytes ; long recOffset ; int shapeType ; int recBufSize = NUM00 ; byte recBuf [ ] = new byte [ recBufSize ] ; double x = NUM00 ; double y = NUM00 ; try { while ( moreRecords ) { $F61539 ( result , is , rHdr , SHAPE_RECORD_HEADER_LENGTH ) if ( result < NUM00 ) { moreRecords = _BOOL ; if $F6456 ( logger , Level ) { $F29117 ( logger , nRecords ) $F35577 ( logger , recBufSize ) } } else { nRecords ++ ; recOffset = ptr ; readBEInt ( rHdr , NUM00 ) ; recLengthWords = readBEInt ( rHdr , NUM00 ) ; recLengthBytes = recLengthWords * NUM00 ; if ( recLengthBytes > recBufSize ) { $F35579 ( logger , Level , recLengthBytes ) recBufSize = recLengthBytes ; $F1325 ( recBuf , recBufSize ) } $F61539 ( result , is , recBuf , recLengthBytes ) shapeType = readLEInt ( recBuf , NUM00 ) ; if ( shapeType != SHAPE_TYPE_NULL ) { x = readLEDouble ( recBuf , NUM00 ) ; y = readLEDouble ( recBuf , NUM00 ) ; } ptr += recLengthBytes + NUM00 ; writeBEInt ( outBuf , NUM00 , $F55075 ( recOffset ) ) ; writeBEInt ( outBuf , NUM00 , recLengthWords ) ; writeLEDouble ( outBuf , NUM00 , x ) ; writeLEDouble ( outBuf , NUM00 , y ) ; writeLEDouble ( outBuf , NUM00 , x ) ; writeLEDouble ( outBuf , NUM00 , y ) ; $F11584 ( os , outBuf , SPATIAL_INDEX_RECORD_LENGTH ) } } } $F61572 ( e ) finally { try $F881 ( is ) $F42485 } }
public static String unsignedToString ( final int value ) { if ( value >= NUM00 ) $F23210 ( Integer , value ) else { return Long . toString ( value & NUM00 ) ; } }
public static $F11300 findAll ( File baseFile , String regex ) { $F14386 $F14389 ( found ) ; findAll ( baseFile , regex , found ) ; return found ; }
public void appendCSSDefinition ( StringBuilder buf ) { $F84 ( buf ) buf . append ( name ) ; $F84 ( buf ) for ( $F7329 pair : statements ) { buf . append ( pair . getFirst ( ) ) ; $F84 ( buf ) buf . append ( pair . getSecond ( ) ) ; $F84 ( buf ) } $F84 ( buf ) }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case DatatypePackage . CONSTRAINT__TYPE : return type != TYPE_EDEFAULT ; case DatatypePackage . CONSTRAINT__CONSTRAINT_VALUES : $F6439 ( CONSTRAINT_VALUES_EDEFAULT , constraintValues ) } $F6444 ( super , featureID ) }
protected Object cloneObject ( Object obj ) { $F1338 ( obj ) if ( obj instanceof String || obj instanceof Boolean || obj instanceof Byte || obj instanceof Short || obj instanceof Character || obj instanceof Integer || obj instanceof Long || obj instanceof Float || obj instanceof Double ) { return obj ; } if $F2456 ( obj ) { $F114166 ( body , obj ) $F82619 ( data , body ) $F7057 ( System , body , data ) return data ; } return SerializationHelper . deepClone ( obj ) ; }
private void assertWriteVarint $F31474 ( data , value ) throws Exception { if ( $F14870 ( value ) == NUM00 ) { $F1538 ( rawOutput ) $F2237 ( output , CodedOutputStream , rawOutput ) output . writeRawVarint32 ( ( int ) value ) ; $F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) assertEquals ( data . length , CodedOutputStream . computeRawVarint32Size ( ( int ) value ) ) ; } { $F1538 ( rawOutput ) $F2237 ( output , CodedOutputStream , rawOutput ) output . writeRawVarint64 ( value ) ; $F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) assertEquals ( data . length , CodedOutputStream . computeRawVarint64Size ( value ) ) ; } for ( $F31477 ( blockSize ) ) { if ( $F14870 ( value ) == NUM00 ) { $F1538 ( rawOutput ) CodedOutputStream output = CodedOutputStream . newInstance ( rawOutput , blockSize ) ; output . writeRawVarint32 ( ( int ) value ) ; $F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) } { $F1538 ( rawOutput ) CodedOutputStream output = CodedOutputStream . newInstance ( rawOutput , blockSize ) ; output . writeRawVarint64 ( value ) ; $F1206 ( output ) $F31476 ( assertEqualBytes , data , rawOutput ) } } }
public void attach ( ActionObserver observer ) { observer . makeOneTimeUse ( ) ; $F790 ( lock ) try $F207 ( onceUsedObservers , observer ) $F796 ( lock ) }
private void signCertificateChain $F72 { List $F65938 $F204 ( cc ) ; cc . add ( signCert ) ; List $F65938 $F10252 ( oc , certs ) ; for ( $F3836 ( k , oc ) ) { if ( $F115302 ( signCert , oc , k ) ) { oc . remove ( k ) ; -- k ; } } boolean found = _BOOL ; while ( found ) { X509Certificate v = ( X509Certificate ) $F7661 ( cc ) ; found = _BOOL ; for ( $F3836 ( k , oc ) ) { X509Certificate issuer = ( X509Certificate ) oc . get ( k ) ; try { v . verify ( issuer . getPublicKey ( ) , provider ) ; found = _BOOL ; $F18208 ( cc , oc , k ) oc . remove ( k ) ; $F597 } $F63878 } } signCerts = cc ; }
public static String meterToString ( OFInstructionMeter inst , Logger log ) { return Long . toString ( inst . getMeterId ( ) ) ; }
public String charset $F72 $F8587 ( parameter , HEADER_CONTENT_TYPE , PARAM_CHARSET )
public Dimension minimumLayoutSize ( Container parent ) { Dimension rd , mbd ; Insets i = getInsets ( ) ; if ( contentPane != null ) { rd = contentPane . getMinimumSize ( ) ; } else { rd = parent . getSize ( ) ; } if $F293975 ( menuBar ) { mbd = menuBar . getMinimumSize ( ) ; } else $F293977 ( mbd ) return new Dimension ( $F241074 ( Math , rd , mbd ) + i . left + i . right , rd . height + mbd . height + i . top + i . bottom ) ; }
$F1 public void add ( int location , E object ) { insertElementAt ( object , location ) ; }
public static boolean checkIfCanUse ( String className ) { if ( MockList . shouldBeMocked ( className ) ) { return _BOOL ; } for ( String s : classExceptions ) $F72107 ( className , s , _BOOL ) return _BOOL ; }
private static void applyOverrides $F72 { InputStream stream = getContentTypesPropertiesStream ( ) ; $F2329 ( stream ) try { try { $F2697 ( overrides ) overrides . load ( stream ) ; for ( $F261788 ( entry , overrides ) ) { String $F167509 ( extension , entry ) ; $F189249 ( mimeType , entry ) add ( mimeType , extension ) ; } } $F3229 ( stream ) } $F20287 }
$F1 public void run $F72 { amIActive = _BOOL ; String inputHeader = null ; String outputHeader = null ; int row , col ; float progress = NUM00 ; double maxPatchValue = NUM00 ; int x , y ; boolean blnFoundNeighbour ; boolean blnIncludeDiagNeighbour = _BOOL ; boolean blnTreatZerosAsBackground = _BOOL ; int i ; $F51364 ( args , showFeedback ) for ( $F6929 ( i , args ) ) { if ( i == NUM00 ) { inputHeader = args [ i ] ; } else if ( i == NUM00 ) { outputHeader = args [ i ] ; } else if ( i == NUM00 ) { blnIncludeDiagNeighbour = Boolean . parseBoolean ( args [ i ] ) ; if ( ! blnIncludeDiagNeighbour ) { dX = new int [ ] $F294877 ; dY = new int [ ] { - NUM00 , NUM00 , NUM00 , NUM00 } ; } } else if ( i == NUM00 ) { blnTreatZerosAsBackground = Boolean . parseBoolean ( args [ i ] ) ; } } if $F54923 ( inputHeader , outputHeader ) $F3602 ( showFeedback ) try { numScanCells = dY . length ; $F90048 ( image , inputHeader ) int rows = image . getNumberRows ( ) ; int cols = image . getNumberColumns ( ) ; $F51458 ( noData , image ) double initialValue = - NUM00 ; output = new WhiteboxRaster ( outputHeader , NUM00 , inputHeader , WhiteboxRaster . DataType . FLOAT , initialValue ) ; output . setDataScale ( WhiteboxRaster . DataScale . CATEGORICAL ) ; output . setPreferredPalette ( NUM00 ) ; if ( blnTreatZerosAsBackground ) { for ( row = NUM00 ; row < rows ; row ++ ) { for ( col = NUM00 ; col < cols ; col ++ ) { if ( image . getValue ( row , col ) == NUM00 ) { output . setValue ( row , col , NUM00 ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; } if ( output . getValue ( NUM00 , NUM00 ) == - NUM00 ) { output . setValue ( $F25460 ) ; } } else { output . setValue ( $F25460 ) ; } double patchValue = NUM00 ; double neighbourPatchValue = NUM00 ; double newPatchValue = NUM00 ; double imageValue = NUM00 ; int loopNum = NUM00 ; updateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; for ( row = NUM00 ; row < rows ; row ++ ) { for ( col = NUM00 ; col < cols ; col ++ ) { imageValue = image . getValue ( row , col ) ; if ( imageValue != noData ) { patchValue = output . getValue ( row , col ) ; if ( patchValue == initialValue ) { blnFoundNeighbour = _BOOL ; for ( i = NUM00 ; i < numScanCells ; i ++ ) { x = col + dX [ i ] ; y = row + dY [ i ] ; neighbourPatchValue = output . getValue ( y , x ) ; if ( neighbourPatchValue != initialValue && image . getValue ( y , x ) == imageValue ) { output . setValue ( row , col , neighbourPatchValue ) ; newPatchValue = neighbourPatchValue ; blnFoundNeighbour = _BOOL ; $F597 } } if ( ! blnFoundNeighbour ) { maxPatchValue ++ ; newPatchValue = maxPatchValue ; output . setValue ( row , col , newPatchValue ) ; } depth = NUM00 ; ScanConnectedCells ( row , col , imageValue , initialValue , newPatchValue ) ; } } else { output . setValue ( row , col , noData ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; } boolean somethingDone ; $F1986 reclass = new double [ ( int ) maxPatchValue + NUM00 ] ; do { loopNum ++ ; updateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; somethingDone = _BOOL ; for ( row = NUM00 ; row < rows ; row ++ ) { for ( col = NUM00 ; col < cols ; col ++ ) { imageValue = image . getValue ( row , col ) ; if ( imageValue != noData ) { patchValue = output . getValue ( row , col ) ; for ( i = NUM00 ; i < numScanCells ; i ++ ) { x = col + dX [ i ] ; y = row + dY [ i ] ; neighbourPatchValue = output . getValue ( y , x ) ; if ( neighbourPatchValue != patchValue && image . getValue ( y , x ) == imageValue ) { somethingDone = _BOOL ; if ( patchValue < neighbourPatchValue ) { reclass [ ( int ) neighbourPatchValue ] = - NUM00 ; output . setValue ( y , x , patchValue ) ; ScanConnectedCells ( y , x , imageValue , neighbourPatchValue , patchValue ) ; } else { reclass [ ( int ) patchValue ] = - NUM00 ; output . setValue ( row , col , neighbourPatchValue ) ; ScanConnectedCells ( row , col , imageValue , patchValue , neighbourPatchValue ) ; patchValue = neighbourPatchValue ; } } } } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; } } while ( somethingDone ) ; i = NUM00 ; for ( $F10229 ( a , maxPatchValue ) ) { if ( reclass [ a ] != - NUM00 ) { reclass [ a ] = i ; i ++ ; } } loopNum ++ ; updateProgress ( NUM00 + loopNum + NUM00 , NUM00 ) ; for ( row = NUM00 ; row < rows ; row ++ ) { for ( col = NUM00 ; col < cols ; col ++ ) { patchValue = output . getValue ( row , col ) ; if ( patchValue != noData ) { output . setValue ( row , col , reclass [ ( int ) patchValue ] ) ; } } $F51521 ( cancelOp , cancelOperation ) $F90104 ( progress , row , rows ) updateProgress ( ( int ) progress ) ; } $F90114 ( output , getDescriptiveName ) $F90117 ( output ) $F59 ( image ) $F59 ( output ) returnData ( outputHeader ) ; } $F90121 ( myHost ) $F90125 ( myHost , getDescriptiveName , e ) $F51536 ( updateProgress , amIActive , _BOOL , myHost ) }
public static int readAll ( InputStream i , byte $F1310 ) throws IOException { int len = b . length ; int n = NUM00 ; while ( n < len ) { $F230162 ( count , i , b , n , len ) $F7879 ( count , n ) n += count ; } return n ; }
public void switchToSimple ( Experiment exp ) { if ( exp == null ) { exp = m_advancedPanel . getExperiment ( ) ; } if ( exp != null && ! m_simplePanel . setExperiment ( exp ) ) { m_AdvancedSetupRBut . setSelected ( _BOOL ) ; switchToAdvanced ( exp ) ; } else { remove ( m_advancedPanel ) ; m_advancedPanel . removeNotesFrame ( ) ; add ( m_simplePanel , BorderLayout . CENTER ) ; validate ( ) ; repaint ( ) ; } }
public static CacheSpan createCacheEntry ( File file ) { Matcher matcher = $F53827 ( CACHE_FILE_PATTERN_V2 , file ) ; if $F1152 ( matcher ) $F1337 String key = Util . unescapeFileName ( matcher . group ( NUM00 ) ) ; return key == null ? null : createCacheEntry ( key , $F53832 ( Long , matcher ) , $F53832 ( Long , matcher ) , file ) ; }
public boolean isComponentPartOfCurrentMenu ( Component c ) { if $F3817 ( selection ) { MenuElement me = selection . elementAt ( NUM00 ) ; return isComponentPartOfCurrentMenu ( me , c ) ; } else return _BOOL ; }
public static int hsba $F9302 ( h , s , b , a ) { return setAlpha ( Color . HSBtoRGB ( h , s , b ) , ( int ) ( a * NUM00 + NUM00 ) & NUM00 ) ; }
LambdaFormBuffer replaceFunctions ( NamedFunction [ ] oldFns , NamedFunction [ ] newFns , Object ... forArguments ) { assert ( inTrans ( ) ) ; $F41350 ( oldFns , this ) for ( int i = arity ; i < length ; i ++ ) { Name n = names [ i ] ; int nfi = indexOf ( n . function , oldFns ) ; if ( nfi >= NUM00 && Arrays . equals ( n . arguments , forArguments ) ) { changeName ( i , new Name ( newFns [ nfi ] , n . arguments ) ) ; } } return this ; }
$F1 public ClientSocket openIfLive $F72 { if $F43263 ( _state ) $F1337 ClientSocket stream = openRecycle ( ) ; $F60730 ( stream ) $F80733 ( now , CurrentTime ) if ( isFailed ( now ) ) $F1274 else if ( _state == State . FAIL && $F15854 ( _startingCount ) ) $F1337 return connect ( ) ; }
public void commit $F72 { info ( NUM00 + solrUrl + NUM00 ) ; doGet ( appendParam ( solrUrl . toString ( ) , NUM00 ) ) ; }
public abstract void filesDropped ( $F70659 [ ] files ) ;
protected void waitForThreadToEnterWaitState ( Thread thread , long timeoutMillis ) { long startTime = NUM00 ; for ( $F589 ) { Thread . State s = thread . getState ( ) ; if ( s == Thread . State . BLOCKED || s == Thread . State . WAITING || s == Thread . State . TIMED_WAITING ) $F665 else if ( s == Thread . State . TERMINATED ) fail ( NUM00 ) ; else if ( startTime == NUM00 ) $F101251 ( startTime , System ) else if ( millisElapsedSince ( startTime ) > timeoutMillis ) { threadAssertTrue ( thread . isAlive ( ) ) ; $F665 } $F5756 ( Thread ) } }
public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { if ( ! rewriteExif ( filename , tags ) ) { ExifData tempData = mData ; mData = new ExifData ( DEFAULT_BYTE_ORDER ) ; FileInputStream is = null ; ByteArrayOutputStream bytes = null ; try { $F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; $F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; setTags ( tags ) ; writeExif ( imageBytes , filename ) ; } $F27615 ( closeSilently , is , e ) finally { $F59 ( is ) mData = tempData ; } } }
public static LatLng translatePoint ( LatLng point , double distance , double bearing ) { distance = distance / NUM00 ; $F46307 ( lat , Math , point ) $F89861 ( lng , Math , point ) $F129283 ( bearing , Math ) double Lat2 = Math . asin ( ( Math . sin ( lat ) * Math . cos ( distance / EARTH ) ) + ( Math . cos ( lat ) * Math . sin ( distance / EARTH ) * Math . cos ( bearing ) ) ) ; double Long2 = lng + Math . atan2 ( Math . sin ( bearing ) * Math . sin ( distance / EARTH ) * Math . cos ( lat ) , Math . cos ( distance / EARTH ) - ( Math . sin ( lat ) * Math . sin ( Lat2 ) ) ) ; Lat2 = Math . toDegrees ( Lat2 ) ; Long2 = Math . toDegrees ( Long2 ) ; return new LatLng ( Lat2 , Long2 ) ; }
public boolean init $F72 { $F156357 ( log ) MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = NUM00 ; if ( client . isUseASP ( ) ) ASPFilter = $F40 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 + client . getAD_Client_ID ( ) + NUM00 + NUM00 + NUM00 + NUM00 + NUM00 ; String sql = null ; if ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = $F34354 + NUM00 + NUM00 + NUM00 + ASPFilter + NUM00 ; else sql = $F40645 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 + ASPFilter + NUM00 ; boolean hasFields = _BOOL ; Rows rows = new Rows $F72 ; try { $F46 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , m_processInfo . getAD_Process_ID ( ) ) ; $F49 ( rs , pstmt ) int field = NUM00 ; Row row = null ; while $F1682 ( rs ) { hasFields = _BOOL ; field ++ ; if ( field % NUM00 == NUM00 && mode == BROWSER_MODE ) { row = createField ( rs , rows , row ) ; } else { row = createField ( rs , rows , null ) ; } } $F59 ( rs ) $F59 ( pstmt ) } $F64 ( log , Level , sql , e ) if ( $F15255 ( m_mFields , m_mFields2 ) || $F15255 ( m_mFields , m_wEditors ) || $F15255 ( m_mFields2 , m_wEditors2 ) ) $F81302 ( log , Level ) if ( hasFields ) { centerPanel . appendChild ( rows ) ; dynamicDisplay ( ) ; } else dispose ( ) ; return hasFields ; }
public static String detectPropertiesPath $F72 { $F27462 ( override , System ) $F21525 ( override ) String jarPath = detectJarPath ( ) ; String propFile = Constants . PROPS_FILE + NUM00 ; return fixWhitespaces ( getParentDirectory ( jarPath ) + File . separator + propFile ) ; }
static int formatFloat ( final $F1469 out , float val , int digits ) { boolean negative = _BOOL ; if ( val == NUM00 ) { out [ NUM00 ] = NUM00 ; $F1082 } if ( val < NUM00 ) $F385538 ( negative , _BOOL , val ) if ( digits >= POW10 . length ) $F65461 ( digits , POW10 ) val *= POW10 [ digits ] ; $F385541 ( lval , Math , val ) $F40997 ( index , out ) int charCount = NUM00 ; while ( lval != NUM00 || charCount < ( digits + NUM00 ) ) { $F273037 ( digit , lval ) lval = lval / NUM00 ; out [ index -- ] = ( char ) ( digit + NUM00 ) ; charCount ++ ; if ( charCount == digits ) { out [ index -- ] = NUM00 ; charCount ++ ; } } if ( negative ) { out [ index ] = NUM00 ; charCount ++ ; } return charCount ; }
public void acceptPackage $F53421 ( packageName ) $F845
public void resume $F72 { mPaused = _BOOL ; $F3224 ( mLastFrameTime , System ) invalidate ( ) ; }
public GaussianDensityFunction ( Double mean , Double variance ) { this . mean = new double [ ] { mean } ; this . variance = new double [ ] { variance } ; stdDev = new double [ ] { Math . sqrt ( variance ) } ; if ( variance < NUM00 ) $F37856 ( log , variance ) }
int encryptFinal $F107623 ( in , inOfs , len , out , outOfs ) throws IllegalBlockSizeException , ShortBufferException { if ( out . length - outOfs < ( len + tagLenBytes ) ) { throw new ShortBufferException $F580 ; } processAAD ( ) ; if ( len > NUM00 ) { doLastBlock ( in , inOfs , len , out , outOfs , _BOOL ) ; } $F96 lengthBlock = getLengthBlock ( sizeOfAAD * NUM00 , processed * NUM00 ) ; ghashAllToS . update ( lengthBlock ) ; $F294889 ( s , ghashAllToS ) $F82619 ( sOut , s ) GCTR gctrForSToTag = new GCTR ( embeddedCipher , this . preCounterBlock ) ; gctrForSToTag . doFinal ( $F251440 ( s , sOut ) ) ; System . arraycopy ( sOut , NUM00 , out , ( outOfs + len ) , tagLenBytes ) ; return ( len + tagLenBytes ) ; }
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
public static String componentToImageColName ( String component ) { if ( component . equals ( MixnMatchColumns . KEY_HOMESCREEN ) ) { return ThemesColumns . HOMESCREEN_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_LOCKSCREEN ) ) { return ThemesColumns . LOCKSCREEN_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_BOOT_ANIM ) ) { return ThemesColumns . BOOT_ANIM_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_FONT ) ) { return ThemesColumns . FONT_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_ICONS ) ) { return ThemesColumns . ICON_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_STATUS_BAR ) ) { return ThemesColumns . STATUSBAR_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_NOTIFICATIONS ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_RINGTONE ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_OVERLAYS ) ) { return ThemesColumns . OVERLAYS_URI ; } else if ( component . equals ( MixnMatchColumns . KEY_ALARM ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_NAVIGATION_BAR ) ) $F825 else if ( component . equals ( MixnMatchColumns . KEY_LIVE_LOCK_SCREEN ) ) $F825 $F1274 }
public boolean isAbstract $F72 { return $F79998 ( Modifier , _method ) ; }
public void nodeClicked ( RequestInvocationEvent event , int nodeID ) { boolean forwardTo = _BOOL ; $F4074 ( strNodeId , Integer , nodeID ) if $F4012 ( strNodeId ) { $F28921 ( prefix , strNodeId ) if ( prefix . equals ( AMAdminConstants . TAB_AGENT_PREFIX ) ) { setPageSessionAttribute ( getTrackingTabIDName ( ) , Integer . toString ( nodeID ) ) ; $F4377 ( amconfig , AMViewConfig ) List list = amconfig . getSupportedAgentTypes ( getModel ( ) ) ; $F3108 ( strNodeId ) $F27213 ( idx , Integer , strNodeId ) if $F1765 ( idx , list ) { setPageSessionAttribute ( PG_SESSION_AGENT_TYPE , $F120 ( list , idx ) ) ; AMPostViewBean vb = ( AMPostViewBean ) getViewBean ( AMPostViewBean . class ) ; passPgSessionMap ( vb ) ; vb . setTargetViewBeanURL ( NUM00 ) ; $F50333 ( vb , getRequestContext ) forwardTo = _BOOL ; } } } if ( ! forwardTo ) { try { AMViewBeanBase vb = getTabNodeAssociatedViewBean ( NUM00 , nodeID ) ; String tmp = ( String ) getPageSessionAttribute ( AMAdminConstants . PREVIOUS_REALM ) ; vb . setPageSessionAttribute ( AMAdminConstants . PREVIOUS_REALM , tmp ) ; tmp = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; vb . setPageSessionAttribute ( AMAdminConstants . CURRENT_REALM , tmp ) ; tmp = ( String ) getPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID ) ; vb . setPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID , tmp ) ; unlockPageTrailForSwapping ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } catch ( AMConsoleException e ) { $F5197 ( debug , e ) forwardTo ( ) ; } } }
private static void parseCopyFields ( ParseContext context , FieldMapper fieldMapper , $F3803 copyToFields ) throws IOException { if ( ! context . isWithinCopyTo ( ) && copyToFields . isEmpty ( ) == _BOOL ) { context = context . createCopyToContext ( ) ; for ( String field : copyToFields ) { ParseContext . Document targetDoc = null ; for ( ParseContext . Document doc = context . doc ( ) ; doc != null ; $F10336 ( doc ) ) { if ( field . startsWith ( doc . getPrefix ( ) ) ) $F3468 ( targetDoc , doc ) } assert targetDoc != null ; final ParseContext copyToContext ; if ( targetDoc == context . doc ( ) ) { copyToContext = context ; } else { copyToContext = context . switchDoc ( targetDoc ) ; } parseCopy ( field , copyToContext ) ; } } }
protected File createObbFile ( String name , int rawResId ) { File outFile = null ; try { final File filesDir = mContext . getFilesDir ( ) ; $F63508 ( outFile , filesDir , name ) copyRawToFile ( rawResId , outFile ) ; } catch ( NotFoundException e ) { if ( outFile != null ) $F19636 ( outFile ) } return outFile ; }
public PlaySoundEntity $F36827 ( sound , radius , volume ) { this . sounds = sound . split ( NUM00 ) ; this . radius = radius ; this . volume = volume ; }
public Repository ( String domain ) { this ( domain , _BOOL ) ; }
private void updateView ( int viewPosition ) { notifyItemChanged ( viewPosition ) ; }
public static String optimize ( String ... args ) $F195829 ( simpleTag , args )
protected boolean isValidServer ( final String server ) { boolean isValid = checkServerPrefixes ( server ) ; if ( isValid ) { if $F3106 ( server ) { isValid = canConnect ( server ) ; } else if $F3106 ( server ) { isValid = isDirectory ( server ) ; } } return isValid ; }
public ConcurrentHashMap $F15182 ( m ) $F334729 ( this , Math , m , DEFAULT_LOAD_FACTOR , DEFAULT_INITIAL_CAPACITY , DEFAULT_CONCURRENCY_LEVEL , putAll )
public MapMaker expiration ( long duration , TimeUnit unit ) { if ( expirationNanos != NUM00 ) $F322689 ( expirationNanos ) if ( duration <= NUM00 ) $F18931 ( duration ) this . expirationNanos = unit . toNanos ( duration ) ; useCustomMap = _BOOL ; return this ; }
void initFromNode ( final Node fromNode , final double startTime , final PseudoRemovePriorityQueue $F6869 pendingNodes ) { DijkstraNodeData data = getData ( fromNode ) ; visitNode ( fromNode , data , pendingNodes , startTime , NUM00 , null ) ; }
public Collection $F536800 tokenizeHTML $F72 { List $F536800 tokens = new ArrayList $F536800 $F72 ; String nestedTags = nestedTagsRegex ( NUM00 ) ; Pattern p = Pattern . compile ( $F40 + nestedTags + NUM00 , Pattern . CASE_INSENSITIVE ) ; $F1150 ( m , p , text ) int lastPos = NUM00 ; while $F281 ( m ) { if ( lastPos < m . start ( ) ) { tokens . add ( HTMLToken . text ( text . substring ( lastPos , m . start ( ) ) ) ) ; } tokens . add ( HTMLToken . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ; $F204945 ( lastPos , m ) } if $F7007 ( lastPos , text ) { tokens . add ( HTMLToken . text ( $F83851 ( text , lastPos ) ) ) ; } return tokens ; }
public int decryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , cfbV , cfbOutV ) $F59464 ( System , cfbV , blockSize ) System . arraycopy ( in , inOff , cfbV , cfbV . length - blockSize , blockSize ) ; $F59461 ( i , blockSize , out , outOff , cfbOutV , in , inOff ) return blockSize ; }
private String computeMd5Hash ( String buffer ) { MessageDigest md ; try { $F6161 ( md , MessageDigest ) return bytesToHex ( md . digest ( buffer . getBytes ( NUM00 ) ) ) ; } catch ( NoSuchAlgorithmException ignore ) $F845 catch ( UnsupportedEncodingException e ) $F845 $F1278 }
$F178575 ( expression , errorMessage , String )
public void run $F72 throws $F3 { for ( $F119 ( i , connCnt ) ) exec . submit ( new ClientThread $F72 ) ; Thread . sleep ( $F264 ) ; $F5832 ( exec ) }
public static String pluralize ( String word ) { $F99586 ( word ) final String lowerCaseWord = word . toLowerCase ( ) ; if ( endsWithAny ( lowerCaseWord , NUM00 , NUM00 , NUM00 ) ) $F70142 ( word ) if ( lowerCaseWord . endsWith ( NUM00 ) && $F2363 ( lowerCaseWord ) || endsWithAny ( lowerCaseWord , NUM00 , NUM00 , NUM00 ) ) { return $F55443 ( word ) ; } else $F70142 ( word ) }
protected void onNetworkTypeChange ( NetworkInfo oldNetwork , NetworkInfo newNetwork ) throws RouterException { log . info ( String . format ( NUM00 , oldNetwork == null ? NUM00 : oldNetwork . getTypeName ( ) , newNetwork == null ? NUM00 : newNetwork . getTypeName ( ) ) ) ; if ( disable ( ) ) { log . info ( String . format ( NUM00 , oldNetwork == null ? NUM00 : oldNetwork . getTypeName ( ) ) ) ; } networkInfo = newNetwork ; if ( enable ( ) ) { log . info ( String . format ( NUM00 , newNetwork == null ? NUM00 : newNetwork . getTypeName ( ) ) ) ; } }
private LinkedHashMap < Term , Integer > repeatingTerms $F72 { LinkedHashMap < Term , Integer > $F161023 ( tord ) ; HashMap < Term , Integer > $F8690 ( tcnt ) ; for ( PhrasePositions pp : phrasePositions ) { for ( Term t : pp . terms ) { $F99426 ( cnt0 , tcnt , t ) Integer cnt = cnt0 == null ? $F13791 : new Integer ( NUM00 + cnt0 . intValue ( ) ) ; tcnt . put ( t , cnt ) ; if ( cnt == NUM00 ) { tord . put ( t , tord . size ( ) ) ; } } } return tord ; }
public List < InetAddress > discoverHosts ( int udpPort , int timeoutMillis ) { List < InetAddress > hosts = new ArrayList < InetAddress > $F72 ; DatagramSocket socket = null ; try { $F125428 ( socket ) broadcast ( udpPort , socket ) ; socket . setSoTimeout ( timeoutMillis ) ; while ( _BOOL ) { DatagramPacket packet = new DatagramPacket ( $F10314 , NUM00 ) ; try { socket . receive ( packet ) ; } catch ( SocketTimeoutException ex ) { if ( INFO ) info ( NUM00 , NUM00 ) ; return hosts ; } if ( INFO ) info ( NUM00 , NUM00 + packet . getAddress ( ) ) ; hosts . add ( packet . getAddress ( ) ) ; } } catch ( IOException ex ) { if ( ERROR ) error ( NUM00 , NUM00 , ex ) ; return hosts ; } $F48674 ( socket ) }
protected void reloadClusterConfiguration $F72 { synchronized ( this . cluster ) $F5795 ( loadClusterConfiguration ) }
public double expectedUtility ( NondominatedPopulation population ) { double sum = NUM00 ; for ( $F1139 ( i , weights ) ) { double max = Double . NEGATIVE_INFINITY ; for ( Solution solution : population ) { max = Math . max ( max , utilityFunction . computeUtility ( solution , weights [ i ] ) ) ; } sum += max ; } return sum / weights . length ; }
public void count ( HashMap < String , TreeMap $F8434 > table , String suffix , String tag ) { TreeMap $F8434 counts = table . get ( suffix ) ; if ( counts == null ) { counts = new TreeMap $F8434 $F72 ; table . put ( suffix , counts ) ; } $F99426 ( count , counts , tag ) if ( count == null ) count = NUM00 ; counts . put ( tag , count + NUM00 ) ; }
public void addInputMode ( String mode , $F20725 ( inputChars ) ) $F1717 ( modesMap , mode , inputChars )
public static void sleep ( int msec ) throws InterruptedException $F7595 ( Thread , msec )
public static $F22273 toDate ( String monthStr , String dayStr , String yearStr , String hourStr , String minuteStr , String secondStr ) { int month , day , year , hour , minute , second ; try { month = Integer . parseInt ( monthStr ) ; day = Integer . parseInt ( dayStr ) ; year = Integer . parseInt ( yearStr ) ; hour = Integer . parseInt ( hourStr ) ; minute = Integer . parseInt ( minuteStr ) ; second = Integer . parseInt ( secondStr ) ; } $F34300 return toDate ( month , day , year , hour , minute , second ) ; }
public void propertyChange ( PropertyChangeEvent pce ) { if ( pce . getPropertyName ( ) == OMDrawingTool . LoadersProperty ) { Object obj = pce . getNewValue ( ) ; if ( obj instanceof Vector ) { Vector < EditToolLoader > loaders = ( Vector < EditToolLoader > ) obj ; $F15849 ( setLoaders , loaders ) ; resetGUI ( ) ; } } }
public void removeAppOffer ( Offer offer ) { int indexToRemove = getIndex ( offer ) ; if ( indexToRemove != - NUM00 ) $F15777 ( appOffers , indexToRemove , notifyDataSetChanged ) }
public Data transform ( Data data , XMLCryptoContext xc ) throws TransformException { return spi . transform ( data , xc ) ; }
public static int compare ( Comparable c1 , Comparable c2 , boolean nullGreater ) { if ( c1 == c2 ) $F1083 else if ( c1 == null ) { return $F17979 ( nullGreater ) ; } else if ( c2 == null ) { return $F17973 ( nullGreater ) ; } $F12554 ( c1 , c2 ) }
public static double quantile $F12359 ( val , mu , sigma , xi ) { if $F19274 ( val ) $F6623 ( Double ) if ( xi == NUM00 ) { return mu - sigma * Math . log ( NUM00 - val ) ; } return mu - sigma / xi * ( NUM00 - Math . pow ( NUM00 - val , - xi ) ) ; }
OathDeviceSettings createDeviceProfile ( int minSharedSecretLength ) { Reject . ifFalse ( minSharedSecretLength >= NUM00 , NUM00 ) ; int sharedSecretByteLength = Math . max ( MIN_SHARED_SECRET_BYTE_LENGTH , $F96308 ( Math , minSharedSecretLength ) ) ; $F2175 ( secretBytes , sharedSecretByteLength ) secureRandom . nextBytes ( secretBytes ) ; String sharedSecret = DatatypeConverter . printHexBinary ( secretBytes ) ; return new OathDeviceSettings ( sharedSecret , DEVICE_NAME , INITIAL_LAST_LOGIN_TIME , INITIAL_COUNTER_VALUE ) ; }
public final void deleteSelectedObjects $F72 { $F252345 components = getComponents ( ) ; List < DisplayNode > $F204 ( graphNodes ) ; List < IDisplayEdge > $F204 ( graphEdges ) ; for ( Component comp : components ) { if ( comp instanceof DisplayNode ) { if $F931 ( isDeleteVariablesAllowed ) $F1448 DisplayNode node = ( DisplayNode ) comp ; if $F31483 ( node ) $F207 ( graphNodes , node ) } else if ( comp instanceof IDisplayEdge ) { IDisplayEdge edge = ( IDisplayEdge ) comp ; if $F31483 ( edge ) $F207 ( graphEdges , edge ) } } for ( DisplayNode graphNode : graphNodes ) { removeNode ( graphNode ) ; } for ( IDisplayEdge displayEdge : graphEdges ) { try $F86383 ( removeEdge , displayEdge , resetEdgeOffsets ) catch ( Exception e ) { if ( isNodeEdgeErrorsReported ( ) ) { JOptionPane . showMessageDialog ( JOptionUtils . centeringComp ( ) , e . getMessage ( ) ) ; } } } }
protected final void initStatistics $F8306 ( who , headerLines ) throws AdeException { setStatsFilePath ( ) ; if ( statsFilePath == null ) $F234373 appendStatString ( SPACER ) ; appendStatString ( String . format ( NUM00 , currentTimeStamp ( ) , who ) ) ; appendStatString ( SPACER ) ; $F159660 ( i , headerLines , appendStatString ) appendStatString ( SPACER ) ; }
public static $F529 dayEndCapacityAvailable ( GenericValue techDataCalendarWeek , int dayEnd ) { $F34733 ( result , FastMap ) int moveDay = NUM00 ; Double capacity = null ; Time startTime = null ; while $F355079 ( capacity ) { switch ( dayEnd ) { case Calendar . MONDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . TUESDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . WEDNESDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . THURSDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . FRIDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . SATURDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 case Calendar . SUNDAY : $F225882 ( capacity , techDataCalendarWeek ) $F355080 ( startTime , techDataCalendarWeek ) $F597 } if $F355079 ( capacity ) { moveDay -= NUM00 ; dayEnd = ( dayEnd == NUM00 ) ? NUM00 : dayEnd - NUM00 ; } } $F545 ( result , capacity ) $F545 ( result , startTime ) $F155160 ( result , Integer , moveDay ) return result ; }
protected void addClassPath ( String classpath ) { $F8249 ( classpath ) String sep = $F8907 ( classpath ) ? NUM00 : NUM00 ; $F35105 ( parseCp , classpath , sep ) for ( String cpEntry : parseCp ) { addEntry ( cpEntry ) ; } }
$F14125 EntryUploaderImpl ( EntryInserter entryInserter , EntryProvider entryProvider , EntryUpdater entryUpdater ) { this . entryInserter = checkNotNull ( entryInserter ) ; this . entryProvider = checkNotNull ( entryProvider ) ; this . entryUpdater = checkNotNull ( entryUpdater ) ; }
protected void add ( long bytesIn , long bytesOut ) { totalBytesIn . addAndGet ( bytesIn ) ; totalBytesOut . addAndGet ( bytesOut ) ; }
public static double vectorDistance ( $F1986 vec1 , $F1986 vec2 , double power , double oneOverPower ) { double result = NUM00 ; if ( power == NUM00 ) { for ( $F1139 ( i , vec1 ) ) { result += vec1 [ i ] - vec2 [ i ] == NUM00 ? NUM00 : NUM00 ; } } else if ( power == NUM00 ) { for ( $F1139 ( i , vec1 ) ) { result += Math . abs ( vec1 [ i ] - vec2 [ i ] ) ; } } else if ( power == NUM00 ) { result = Math . sqrt ( distSquaredCartesian ( vec1 , vec2 ) ) ; } else if ( power == Integer . MAX_VALUE || Double . isInfinite ( power ) ) { for ( $F1139 ( i , vec1 ) ) { result = Math . max ( result , Math . max ( vec1 [ i ] , vec2 [ i ] ) ) ; } } else { for ( $F1139 ( i , vec1 ) ) { result += Math . pow ( vec1 [ i ] - vec2 [ i ] , power ) ; } result = Math . pow ( result , oneOverPower ) ; } return result ; }
public static $F5415 randomVector ( int aSize , long seed ) { $F22745 ( rand , seed ) $F25850 ( unk , aSize ) for ( $F1139 ( i , unk ) ) { unk [ i ] = ( rand . nextFloat ( ) - NUM00 ) / aSize ; } return unk ; }
$F125330 ( wasRaw )
public Table findTable $F106000 ( catalogName , schemaName , tableName , caseSensitive ) { String cacheKey = catalogName + NUM00 + schemaName + NUM00 + tableName + NUM00 + caseSensitive ; $F99426 ( tableIndex , tableIndexCache , cacheKey ) if ( tableIndex != null ) { if ( tableIndex < getTableCount ( ) ) { Table table = getTable ( tableIndex ) ; if ( doesMatch ( table , catalogName , schemaName , tableName , caseSensitive ) ) { return table ; } } } Table [ ] tables = getTables ( ) ; for ( $F1139 ( i , tables ) ) { Table table = tables [ i ] ; if ( doesMatch ( table , catalogName , schemaName , tableName , caseSensitive ) ) $F67896 ( tableIndexCache , cacheKey , i , table ) } $F1274 }
public void testDomainMatchesOnLocalAddresses $F72 { assertFalse ( HttpCookie . domainMatches ( NUM00 , NUM00 ) ) ; assertFalse ( HttpCookie . domainMatches ( NUM00 , NUM00 ) ) ; }
public void flush $F72 $F5795 ( writeDataBlock )
protected CRFPCoverageBox [ ] vectorToCRFPCoverageBoxes ( Vector vector ) { $F115 ( size , vector ) CRFPCoverageBox [ ] rets = new CRFPCoverageBox [ size ] ; for ( $F119 ( i , size ) ) { RpfCoverageBox box = ( RpfCoverageBox ) vector . elementAt ( i ) ; if ( box != null ) { rets [ i ] = new CRFPCoverageBox ( ( float ) box . nw_lat , ( float ) box . nw_lon , ( float ) box . se_lat , ( float ) box . se_lon , box . subframeLatInterval , box . subframeLonInterval , box . chartCode , ( short ) box . zone , new XYPoint ( ( short ) box . startIndexes . x , ( short ) box . startIndexes . y ) , new XYPoint ( ( short ) box . endIndexes . x , ( short ) box . endIndexes . y ) , ( short ) box . tocNumber , ( short ) box . entryNumber , box . scale , box . percentCoverage ) ; } } return rets ; }
public void notifyListenersOfInitialization $F72 { if ( initialized ) { for ( ActionListener l : listeners ) { l . actionPerformed ( new ActionEvent ( this , ActionEvent . ACTION_PERFORMED , NUM00 ) ) ; } } }
public void checkPassword ( String password ) throws BadRequestException { if ( password == null ) { throw new BadRequestException $F580 ; } if $F3599 ( password ) { throw new BadRequestException $F580 ; } int numOfLetters = NUM00 ; int numOfDigits = NUM00 ; for ( $F2998 ( passwordChar , password ) ) { if $F119844 ( Character , passwordChar ) { numOfDigits ++ ; } else if ( Character . isLetter ( passwordChar ) ) { numOfLetters ++ ; } } if ( numOfDigits == NUM00 || numOfLetters == NUM00 ) { throw new BadRequestException $F580 ; } }
final $F9341 find ( int h , Object k ) { if ( k != null ) { for ( $F9341 e = first ; e != null ; ) { int s ; K ek ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { if ( e . hash == h && ( ( ek = e . key ) == k || $F35166 ( ek , k ) ) ) return e ; e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { $F35195 ( r , p ) try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; } finally { Thread w ; if ( U . getAndAddInt ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) LockSupport . unpark ( w ) ; } return p ; } } } $F1274 }
$F1431 private void collectAllRegionsDetails ( SystemMemberCacheJmxImpl cache , RegionSubRegionSnapshot regionSnapshot , Map < String , Map $F6251 > regionsInfo , Map < String , ObjectName > existingRegionMbeans ) throws AdminException , OperationsException , MBeanException , ReflectionException { String fullPath = regionSnapshot . getFullPath ( ) ; if $F2137 ( fullPath , PLACE_HOLDER_ROOT_REGION ) { fullPath = fullPath . substring ( $F1092 ( PLACE_HOLDER_ROOT_REGION ) ) ; $F20605 ( name , regionSnapshot ) Integer entryCount = Integer . valueOf ( regionSnapshot . getEntryCount ( ) ) ; $F529 details = new $F27766 $F72 ; details . put ( REGION_NAME , name ) ; details . put ( REGION_PATH , fullPath ) ; details . put ( REGION_ENTRYCOUNT , entryCount ) ; ObjectName regionObjectName = existingRegionMbeans . get ( fullPath ) ; if ( regionObjectName == null ) { regionObjectName = cache . manageRegion ( fullPath ) ; } Object attribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; attribute = attribute != null ? attribute . toString ( ) : attribute ; details . put ( REGION_SCOPE , attribute ) ; attribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; attribute = attribute != null ? attribute . toString ( ) : attribute ; details . put ( REGION_DATAPOLICY , attribute ) ; SubscriptionAttributes interestPolicyAttr = ( SubscriptionAttributes ) getAttribute ( regionObjectName , NUM00 , null ) ; String interestPolicyStr = NOT_AVAILABLE ; if ( interestPolicyAttr != null ) { InterestPolicy interestPolicy = interestPolicyAttr . getInterestPolicy ( ) ; $F170091 ( interestPolicy , interestPolicyStr ) } details . put ( REGION_INTERESTPOLICY , interestPolicyStr ) ; attribute = getAttribute ( regionObjectName , NUM00 , NOT_AVAILABLE ) ; attribute = attribute != null ? attribute . toString ( ) : attribute ; details . put ( REGION_DISKATTRS , attribute ) ; regionsInfo . put ( fullPath , details ) ; } Set subRegionSnapshots = regionSnapshot . getSubRegionSnapshots ( ) ; for ( $F437180 ( iterator , subRegionSnapshots ) ) { RegionSubRegionSnapshot subRegion = ( RegionSubRegionSnapshot ) iterator . next ( ) ; collectAllRegionsDetails ( cache , subRegion , regionsInfo , existingRegionMbeans ) ; } }
public synchronized boolean removeSuspendedResponse ( WorkerCategory category , Response response ) { Deque < Response > deque = workersByCategory . get ( category ) ; $F1933 ( deque , _BOOL ) if $F16914 ( deque , response ) { nWaitingConsumers -= NUM00 ; $F980 ( LOG ) return _BOOL ; } return _BOOL ; }
public static Number sin ( Number a ) { return Math . sin ( a . doubleValue ( ) ) ; }
private TypedClassOperation instantiateOperationTypes ( TypedClassOperation operation ) { $F62886 typeParameters = operation . getTypeParameters ( ) ; $F4975 ( typeParameters , operation ) $F304868 substitution = selectSubstitution ( typeParameters ) ; $F1338 ( substitution ) return operation . apply ( substitution ) ; }
default T fold ( final T identity , final BinaryOperator $F4203 accumulator ) { final $F19288 opt = toOptional ( ) ; if $F16464 ( opt ) return accumulator . apply ( identity , get ( ) ) ; return identity ; }
protected void load ( String filename , Properties p ) throws FileNotFoundException { $F1705 ( file , filename ) if $F1906 ( file ) throw new FileNotFoundException ( filename ) ; classifier = new CRFClassifier < CoreLabel > ( p ) ; try { classifier . loadClassifier ( file , p ) ; } catch ( ClassCastException e ) $F302 ( e ) $F12241 ( e ) catch ( ClassNotFoundException e ) $F302 ( e ) }
public String resolveFont ( java . awt . Font font ) { String ret = NUM00 ; ret = ret . concat ( $F2989 ( font ) ) ; if ( font . isBold ( ) ) ret = ret . concat ( NUM00 ) ; else ret = ret . concat ( NUM00 ) ; if ( font . isItalic ( ) ) ret = ret . concat ( NUM00 ) ; else ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 + font . getSize ( ) ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; ret = ret . concat ( NUM00 ) ; return ret ; }
public void addLineContent ( final ZyLineContent line ) { $F1832 ( Preconditions , line ) m_content . add ( line ) ; }
public static boolean excludeByPackage $F13322 ( pkg , excludePkg ) { for ( String ep : excludePkg ) { if $F44202 ( pkg , ep ) { return _BOOL ; } } return _BOOL ; }
public RegionVersionHolder ( long ver ) { this . version = ver ; }
public static void writeFully ( FileChannel file , long pos , ByteBuffer src ) { try { int off = NUM00 ; do { int len = file . write ( src , pos + off ) ; off += len ; } while $F45853 ( src ) ; } catch ( IOException e ) { throw newIllegalStateException ( ERROR_WRITING_FAILED , NUM00 , file , src . remaining ( ) , pos , e ) ; } }
public void updateRequestTimeout ( TimeSpan span ) throws SecurityException , ApplicationException { checkWriteAccess ( ) ; $F26096 ( hasAccess , ConfigWebUtil , config , SecurityManager ) $F26100 ( hasAccess ) Element scope = _getRootElement ( NUM00 ) ; Element application = _getRootElement ( NUM00 ) ; if ( span != null ) { if ( span . getMillis ( ) <= NUM00 ) throw new ApplicationException $F580 ; application . setAttribute ( NUM00 , span . getDay ( ) + NUM00 + span . getHour ( ) + NUM00 + span . getMinute ( ) + NUM00 + span . getSecond ( ) ) ; } else $F152467 ( application ) if $F186046 ( scope ) $F152467 ( scope ) }
$F1 protected boolean calcProblem $F72 { String type = getTagWithKey ( Tags . KEY_TYPE ) ; if $F3581 ( type ) { return _BOOL ; } return super . calcProblem ( ) ; }
public int readByte $F72 throws IOException { ++ length ; return in . read ( ) & NUM00 ; }
public void updateShapeShadowsToCurrentTime ( boolean updateMinutes , boolean updateHours , int currentMinute , int currentHour ) { if ( updateMinutes ) { int tens = $F71088 ( Math , currentMinute ) ; int units = ( int ) Math . floor ( currentMinute % NUM00 ) ; if ( minutesTens . getCurrentValue ( ) != tens ) { $F574 ( mt , String , tens ) mt = mt . concat ( NUM00 ) ; $F12258 ( Log , TAG , mt ) minutesTens . parseJSON ( mt ) ; } if ( minutesUnits . getCurrentValue ( ) != units ) { $F574 ( mu , String , units ) mu = mu . concat ( NUM00 ) ; $F12258 ( Log , TAG , mu ) minutesUnits . parseJSON ( mu ) ; } } if ( updateHours ) { int tens = $F71088 ( Math , currentHour ) ; int units = ( int ) Math . floor ( currentHour % NUM00 ) ; if ( hoursTens . getCurrentValue ( ) != tens ) { $F574 ( ht , String , tens ) ht = ht . concat ( NUM00 ) ; $F12258 ( Log , TAG , ht ) hoursTens . parseJSON ( ht ) ; } if ( hoursUnits . getCurrentValue ( ) != units ) { $F574 ( hu , String , units ) hu = hu . concat ( NUM00 ) ; $F12258 ( Log , TAG , hu ) hoursUnits . parseJSON ( hu ) ; } } }
public Set < RawProtein < SuperFamilyHmmer3RawMatch > > parse ( InputStream is ) throws IOException { Map < String , RawProtein < SuperFamilyHmmer3RawMatch > > data = new HashMap < String , RawProtein < SuperFamilyHmmer3RawMatch > > $F72 ; BufferedReader reader = null ; try { $F105457 ( reader , is ) String line ; while $F443 ( line , reader ) { Set < SuperFamilyHmmer3RawMatch > rawMatches = parseLine ( line ) ; SuperFamilyHmmer3RawMatch rawMatch ; for ( SuperFamilyHmmer3RawMatch rawMatche : rawMatches ) { rawMatch = rawMatche ; String sequenceId = rawMatch . getSequenceIdentifier ( ) ; if $F1710 ( data , sequenceId ) { RawProtein < SuperFamilyHmmer3RawMatch > rawProtein = data . get ( sequenceId ) ; rawProtein . addMatch ( rawMatch ) ; } else { RawProtein < SuperFamilyHmmer3RawMatch > rawProtein = new RawProtein < SuperFamilyHmmer3RawMatch > ( sequenceId ) ; rawProtein . addMatch ( rawMatch ) ; data . put ( sequenceId , rawProtein ) ; } } } } $F14364 ( reader ) return new HashSet < RawProtein < SuperFamilyHmmer3RawMatch > > $F6680 ( data ) ; }
public UnionPathIterator ( Compiler compiler , int opPos ) throws $F1872 { super ( ) ; opPos = OpMap . getFirstChildPos ( opPos ) ; loadLocationPaths ( compiler , opPos , NUM00 ) ; }
public String relationName $F72 { return m_RelationName ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
@ RequestMapping ( $F3144 , method = RequestMethod . POST , produces = MediaType . TEXT_PLAIN_VALUE ) @ Timed public ResponseEntity $F1011 changePassword ( $F151143 String password ) { if ( ! checkPasswordLength ( password ) ) { return new $F151149 ( NUM00 , HttpStatus . BAD_REQUEST ) ; } userService . changePassword ( password ) ; return new $F151149 ( HttpStatus . OK ) ; }
public void testBadSegment $F72 throws IOException { Directory dir = newDirectory ( ) ; IndexWriter iw = new IndexWriter ( dir , newIndexWriterConfig ( new MockAnalyzer ( random ( ) ) ) ) ; $F10888 ( document ) FieldType customType = new FieldType ( TextField . TYPE_NOT_STORED ) ; customType . setStoreTermVectors ( _BOOL ) ; document . add ( newField ( NUM00 , NUM00 , customType ) ) ; iw . addDocument ( document ) ; $F59 ( iw ) $F59 ( dir ) }
public static int size ( String str ) { $F74334 ( str ) $F115 ( length , str ) int size = length ; try { size = str . getBytes ( NUM00 ) . length ; } catch ( UnsupportedEncodingException e ) { $F62 ( log , Level , str , e ) } return size ; }
protected void synchWithTarget $F72 throws MonitorException { $F52855 ( timeLimit , System , syncWaitMs ) log ( NUM00 + lvmid + NUM00 ) ; while ( ! prologue . isAccessible ( ) ) { log ( NUM00 ) ; $F36705 ( Thread ) if $F16508 ( System , timeLimit ) { logln ( NUM00 + lvmid ) ; throw new MonitorException $F580 ; } } logln ( NUM00 + lvmid ) ; }
public static CharSequence time ( Context context , EasyCursor c ) { $F657 ( now , System ) long when = c . getLong ( Reviews . WRITTEN_ON ) ; return now - when > MINUTE_IN_MILLIS ? DateUtils . getRelativeTimeSpanString ( when , now , NUM00 , FORMAT_ABBREV_ALL ) : context . getString ( R . string . recent_time ) ; }
$F256112 ( screenCoord , width , getWidth , padding , result , Math )
public long roundTripTime $F72 throws InterruptedException { $F681 ( latch ) return received - sent ; }
static private String userIdFromRange $F9816 ( values , include ) { $F167151 ( minId , Integer , values ) $F167151 ( maxId , Integer , values ) String exclusions = values . length > NUM00 ? values [ NUM00 ] : null ; Stack $F2305 stack = getStack ( minId , maxId , exclusions , include ) ; if $F3817 ( stack ) { return Integer . toString ( stack . pop ( ) ) ; } $F824 }
public void testCase4 $F72 { $F3013 $F3017 byte $F3018 = { - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; int aSign = - NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public static String stringDefaultValue ( String bytes ) { try { return new String ( bytes . getBytes ( NUM00 ) , NUM00 ) ; } catch ( UnsupportedEncodingException e ) $F54146 ( e ) }
public void actualizaCampo ( int tipoFicha , ValorCampoGenericoVO campo ) { ValorCampoGenericoVO campoAnterior = retrieve ( tipoFicha , campo . getTipo ( ) , campo . getIdObjeto ( ) , campo . getIdCampo ( ) , campo . getOrden ( ) , campo . getTipoElemento ( ) ) ; if ( campoAnterior == null ) insert ( tipoFicha , campo ) ; else update ( tipoFicha , campo , campoAnterior . getValorInfo ( ) ) ; }
public static int length ( RegExp re ) { RegExp2 r ; switch ( re . type ) { case sym . BAR : { r = ( RegExp2 ) re ; int l1 = length ( r . r1 ) ; $F125151 ( l1 ) int l2 = length ( r . r2 ) ; if ( l1 == l2 ) return l1 ; else $F150 } case sym . CONCAT : { r = ( RegExp2 ) re ; int l1 = length ( r . r1 ) ; $F125151 ( l1 ) int l2 = length ( r . r2 ) ; $F125151 ( l2 ) return l1 + l2 ; } case sym . STAR : case sym . PLUS : case sym . QUESTION : $F150 case sym . CCLASS : case sym . CCLASSNOT : case sym . CHAR : case sym . CHAR_I : $F1082 case $F358481 NUM00 : case $F358481 NUM00 <missing ';'> _I : { String content = $F358483 ( String , re ) ; $F55826 ( content ) } case $F358481 TILDE : case sym . BANG : $F150 case $F358481 MACROUSE : return length ( macros . getDefinition ( $F358483 ( String , re ) ) ) ; } throw new Error ( "STRING" + <missing '{'> re . type + NUM00 + re ) ; }
public static TimeZone randomTimeZone ( Random random ) { String tzIds [ ] = TimeZone . getAvailableIDs ( ) ; return TimeZone . getTimeZone ( $F342958 ( tzIds , random ) ) ; }
public static String arrayToList $F28786 ( array , delimiter ) { if $F4329 ( ArrayUtil , array ) $F1278 StringBuilder sb = new StringBuilder ( array [ NUM00 ] ) ; if $F1277 ( delimiter ) { $F12685 ( c , delimiter ) for ( $F1139 ( i , array ) ) { sb . append ( c ) ; $F6939 ( sb , array , i ) } } else { for ( $F1139 ( i , array ) ) { sb . append ( delimiter ) ; $F6939 ( sb , array , i ) } } $F92 ( sb ) }
$F1 public boolean addAll $F22451 ( c ) { Iterator $F22448 i = c . iterator ( ) ; boolean changed = _BOOL ; while $F2921 ( i ) { boolean ret = $F4337 ( add , i ) ; if ( ! changed ) { changed = ret ; } } return changed ; }
public void reset $F72 { $F725 ( mCodes ) mIsFirstCharCapitalized = _BOOL ; mPreferredWord = null ; $F4910 ( mTypedWord ) mCapsCount = NUM00 ; }
private String extractPath ( final String uri ) { return DefaultWildcardStreamLocator . stripQueryPath ( uri . replace ( PREFIX , StringUtils . EMPTY ) ) ; }
public void addClassesToCheck ( File basedir , String ... relativeNames ) throws IOException $F254297 ( addClassesToCheck , basedir , Arrays , relativeNames )
public static Short toShort ( String str ) throws PageException $F18816 ( Short , toShortValue , str )
public void testReadXmlLangNewStyle $F72 throws Exception { Properties result = xmlToProperties ( NUM00 ) ; assertNotNull ( result ) ; $F253047 ( assertTrue , result ) $F70108 ( assertEquals , result ) $F107616 ( assertEquals , result ) }
public boolean hasPermission ( Security security , GenericValue userLogin ) { return OrderReadHelper . hasPermission ( security , userLogin , orderHeader ) ; }
protected boolean filterFiles $F11301 ( files ) { if ( task . getNoMtimeCheck ( ) || isOutputRepositoryURL ( ) ) { return _BOOL ; } Iterator $F11299 iter = files . iterator ( ) ; while $F2921 ( iter ) { File file = iter . next ( ) ; Module module = inferModule ( file ) ; if ( module == null ) { task . log ( NUM00 + file , Project . MSG_VERBOSE ) ; $F598 } if ( module . getVersion ( ) == null ) { task . log ( $F2989 ( module ) , Project . MSG_VERBOSE ) ; $F598 } long oldest = getArtifactFileTime ( module , file ) ; if ( oldest == Long . MAX_VALUE ) { File outModuleDir = getArtifactDir ( module ) ; oldest = oldestOutputArtifact ( Long . MAX_VALUE , outModuleDir ) ; task . log ( NUM00 + module + NUM00 + new Date ( oldest ) , Project . MSG_DEBUG ) ; } else { task . log ( NUM00 + file + NUM00 + module + NUM00 + new Date ( oldest ) , Project . MSG_DEBUG ) ; } $F105872 ( newestFile , file ) task . log ( NUM00 + file + NUM00 + new Date ( newestFile ) , Project . MSG_DEBUG ) ; if ( newestFile != Long . MIN_VALUE && oldest != Long . MAX_VALUE && newestFile < oldest ) { task . log ( NUM00 + file + NUM00 ) ; $F7042 ( iter ) } } $F214965 ( files ) }
public void flush $F72 $F29882 ( outputStream )
public int createMeasures ( MSLAGoal goal ) { String sql = $F34354 + NUM00 + NUM00 + MInOut . Table_ID + NUM00 ; int counter = NUM00 ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { $F47577 ( pstmt , DB , sql ) pstmt . setInt ( NUM00 , goal . getC_BPartner_ID ( ) ) ; pstmt . setInt ( NUM00 , goal . getPA_SLA_Goal_ID ( ) ) ; $F47578 ( rs , pstmt ) while $F1682 ( rs ) { $F24632 ( M_InOut_ID , rs ) $F307245 ( MeasureActual , rs ) Timestamp MovementDate = rs . getTimestamp ( NUM00 ) ; String Description = rs . getString ( NUM00 ) + NUM00 + rs . getTimestamp ( NUM00 ) ; if ( goal . isDateValid ( MovementDate ) ) { MSLAMeasure measure = new MSLAMeasure ( goal , MovementDate , MeasureActual , Description ) ; measure . setLink ( MInOut . Table_ID , M_InOut_ID ) ; if $F262254 ( measure ) counter ++ ; } } } $F209655 ( log , Level , e ) $F47585 ( DB , rs , pstmt ) return counter ; }
public E removeAt ( int index ) { final Object old = mArray [ index ] ; if ( mSize <= NUM00 ) { if ( DEBUG ) Log . d ( TAG , NUM00 + mHashes . length + NUM00 ) ; freeArrays ( mHashes , mArray , mSize ) ; mHashes = SupportContainerInternals . EMPTY_INTS ; mArray = SupportContainerInternals . EMPTY_OBJECTS ; mSize = NUM00 ; } else { if ( mHashes . length > ( BASE_SIZE * NUM00 ) && mSize < mHashes . length / NUM00 ) { final int n = mSize > ( BASE_SIZE * NUM00 ) ? $F107995 ( mSize ) : ( BASE_SIZE * NUM00 ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + mHashes . length + NUM00 + n ) ; $F92861 ( ohashes , mHashes ) $F108000 ( oarray , mArray ) allocArrays ( n ) ; mSize -- ; if ( index > NUM00 ) { $F100653 ( DEBUG , Log , TAG , index ) $F135 ( System , ohashes , mHashes , index ) $F135 ( System , oarray , mArray , index ) } if ( index < mSize ) { if ( DEBUG ) Log . d ( TAG , $F37980 ( index , mSize ) + index ) ; $F108006 ( System , ohashes , index , mHashes , mSize ) $F108006 ( System , oarray , index , mArray , mSize ) } } else { mSize -- ; if ( index < mSize ) { if ( DEBUG ) Log . d ( TAG , $F37980 ( index , mSize ) + index ) ; $F108014 ( System , mHashes , index , mSize ) $F108014 ( System , mArray , index , mSize ) } mArray [ mSize ] = null ; } } return ( E ) old ; }
$F1 public String resolveVideoUrl ( $F5466 final Video video , Step step ) { $F1275 ( video ) String localPath = databaseFacade . getPathToVideoIfExist ( video ) ; if ( localPath != null && checkExistingOnDisk ( localPath , step ) ) { return localPath ; } else { List < VideoUrl > urlList = video . getUrls ( ) ; if $F45555 ( urlList ) $F1274 return resolveFromWeb ( urlList ) ; } }
protected Object lookupService $F72 throws Exception { Object service = null ; ServiceTemplate templ ; if ( template == null ) { $F18547 types = ( serviceClass == null ? null : $F139647 ( serviceClass ) ) ; $F12345 entry = ( serviceName == null ? null : new Entry [ ] { new Name ( serviceName ) } ) ; templ = new ServiceTemplate ( null , types , entry ) ; } else { templ = template ; } LookupLocator [ ] lookupLocators = null ; if ( locators != null ) { lookupLocators = new LookupLocator [ locators . length ] ; for ( $F1139 ( i , locators ) ) { String locator = locators [ i ] ; $F48788 ( locator ) lookupLocators [ i ] = new LookupLocator ( locator ) ; } } ServiceDiscoveryManager serviceDiscovery = null ; try { serviceDiscovery = SharedDiscoveryManagement . getBackwardsServiceDiscoveryManager ( groups , lookupLocators , null ) ; ServiceItem returnObject = serviceDiscovery . lookup ( templ , null , timeout ) ; if ( returnObject != null ) $F145688 ( service , returnObject ) } finally { if ( serviceDiscovery != null ) { try { $F72716 ( serviceDiscovery ) } $F92403 ( logger , e ) } } return service ; }
public static boolean equals $F66005 ( obj1 , obj2 ) { return $F1256 ( obj1 , obj2 ) ; }
public void testMergeSameFilterWithInitParamInTwoDocuments $F72 throws Exception { String srcXml = $F40645 + NUM00 + NUM00 + NUM00 ; $F34646 ( srcWebXml , WebXmlIo , srcXml ) String mergeXml = $F40645 + NUM00 + NUM00 + NUM00 ; $F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . mergeFilters ( mergeWebXml ) ; $F100788 ( assertTrue , WebXmlUtils , srcWebXml ) $F3803 filterInitParamNames = WebXmlUtils . getFilterInitParamNames ( srcWebXml , NUM00 ) ; assertTrue ( $F10470 ( filterInitParamNames ) ) ; $F100793 ( assertEquals , filterInitParamNames ) $F3803 filterMappings = WebXmlUtils . getFilterMappings ( srcWebXml , NUM00 ) ; $F70108 ( assertEquals , filterMappings ) $F100793 ( assertEquals , filterMappings ) }
public WebappTemplateLoader ( ServletContext servletContext , String subdirPath ) { $F826 ( servletContext ) $F826 ( subdirPath ) $F2936 ( subdirPath ) if $F2364 ( subdirPath ) { subdirPath += NUM00 ; } $F48788 ( subdirPath ) this . subdirPath = subdirPath ; this . servletContext = servletContext ; }
$F22330 public static $F4203 $F10809 insert ( $F10809 dest , T src , int offset , Class componentType ) { $F10809 temp = ( $F10809 ) Array . newInstance ( componentType , dest . length + NUM00 ) ; $F135 ( System , dest , temp , offset ) temp [ offset ] = src ; System . arraycopy ( dest , offset , temp , offset + NUM00 , dest . length - offset ) ; return temp ; }
$F1 public void flush $F72 throws IOException $F139965 ( writer , buffer , fill )
public MetricInstance withDependencyMetricNames $F24643 ( dependencyMetricNames ) { return new MetricInstance ( metricName , maker , $F10148 ( dependencyMetricNames ) ) ; }
public static IStatus validateMethodName ( String name ) { return validateMethodName ( name , CompilerOptions . VERSION_1_3 , CompilerOptions . VERSION_1_3 ) ; }
$F1431 void notifyAlarmClock ( TimerAlarmClockNotification notification ) { TimerNotification timerNotification = null ; Date timerDate = null ; TimerAlarmClock alarmClock = ( TimerAlarmClock ) notification . getSource ( ) ; synchronized ( Timer . this ) { for ( $F131 obj : timerTable . values ( ) ) { if ( obj [ ALARM_CLOCK_INDEX ] == alarmClock ) { timerNotification = ( TimerNotification ) obj [ TIMER_NOTIF_INDEX ] ; timerDate = ( Date ) obj [ TIMER_DATE_INDEX ] ; $F597 } } } sendNotification ( timerDate , timerNotification ) ; updateTimerTable ( timerNotification . getNotificationID ( ) ) ; }
public ProfilerEntity start $F72 { $F101251 ( start_time , System ) return this ; }
public static $F62483 $F62484 of ( E e1 , E e2 , E e3 ) { $F62484 set = of ( e1 , e2 ) ; set . add ( e3 ) ; return set ; }
public PickRequest withCameraPicsDirectory ( $F5466 final File pDirFile ) { this . mCustomCameraPicsDirPath = pDirFile == null ? null : pDirFile . getAbsolutePath ( ) ; return this ; }
public void prepareForNextRun $F72 { for ( $F6268 ( i ) ) { $F58463 ( System ) $F110998 ( Thread , e ) } }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
public void add ( Chip chip ) { if ( ! mChipList . contains ( chip ) || mToleratingDuplicate ) $F36131 ( mChipList , chip , notifyUpdate ) }
private boolean checkTripZoneConsistency $F72 { $F973 ( log ) $F11293 ( missingZones ) for ( Trip T : trips . values ( ) ) { BasicLocation zo = zones . getLocation ( Id . create ( T . zone_o , Zone . class ) ) ; BasicLocation zd = zones . getLocation ( Id . create ( T . zone_d , Zone . class ) ) ; if ( zo == null ) { missingZones . add ( T . zone_o ) ; } if ( zd == null ) { missingZones . add ( T . zone_d ) ; } } if $F3817 ( missingZones ) { String msg = $F37513 ( missingZones ) ; for ( String s : missingZones ) msg += $F369 ( s ) ; log . error ( msg ) ; return _BOOL ; } else $F973 ( log ) return _BOOL ; }
private int insertIndexForLayer ( Component comp , int layer , int position ) { int i , count , curLayer ; int layerStart = - NUM00 ; int layerEnd = - NUM00 ; int componentCount = getComponentCount ( ) ; ArrayList $F44984 compList = new ArrayList $F44984 ( componentCount ) ; for ( $F119 ( index , componentCount ) ) { if ( getComponent ( index ) != comp ) $F3762 ( compList , getComponent , index ) } $F8935 ( count , compList ) for ( i = NUM00 ; i < count ; i ++ ) { curLayer = getLayer ( compList . get ( i ) ) ; if ( layerStart == - NUM00 && curLayer == layer ) { layerStart = i ; } if ( curLayer < layer ) { if ( i == NUM00 ) $F18712 ( layerStart , layerEnd ) else { layerEnd = i ; } $F597 } } if $F96093 ( layerStart , layerEnd ) return count ; if ( layerStart != - NUM00 && layerEnd == - NUM00 ) layerEnd = count ; if ( layerEnd != - NUM00 && layerStart == - NUM00 ) layerStart = layerEnd ; $F101463 ( position , layerEnd ) if ( position > - NUM00 && layerStart + position <= layerEnd ) return layerStart + position ; return layerEnd ; }
public void testTimedInvokeAll2 $F72 throws InterruptedException { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < $F171452 > r = e . invokeAll ( new ArrayList < Callable $F4 > $F72 , MEDIUM_DELAY_MS , MILLISECONDS ) ; assertTrue ( r . isEmpty ( ) ) ; } $F14364 ( cleaner ) }
public static WaitDialog showDialog ( WaitDialog . Runnable runnable , String message , Container container , int width , int height ) { WaitDialog newDialog = null ; if ( container instanceof JDialog ) { newDialog = new WaitDialog ( ( JDialog ) container ) ; } else if ( container instanceof JFrame ) { newDialog = new WaitDialog ( ( JFrame ) container ) ; } else { newDialog = new WaitDialog ( ( JDialog ) null ) ; newDialog . setLocationRelativeTo ( container ) ; } newDialog . buildDialog ( width , height ) ; runnable . setDialog ( newDialog ) ; newDialog . container = container ; newDialog . runnable = runnable ; newDialog . setMessage ( message ) ; Thread processThread = new ProcessThread ( newDialog ) ; $F2346 ( processThread ) while ( $F181253 ( newDialog ) ) { try $F31130 ( Thread ) $F109995 } return newDialog ; }
public void testFlipBitPositiveOutside2 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public synchronized void write $F1313 ( off , len ) throws IOException { if ( len <= NUM00 ) $F665 int freeSpace = buffer . length - pos ; if ( len <= freeSpace ) { System . arraycopy ( b , off , buffer , pos , len ) ; pos += len ; $F665 } flush ( ) ; int local_requested ; while ( _BOOL ) { synchronized ( lock ) { while ( ( local_requested = requested ) < NUM00 && ! disconnected ) { $F29028 ( lock ) } if ( disconnected ) $F3575 } if ( local_requested < len ) { manager . sendTransmit ( info , b , off , local_requested ) ; off += local_requested ; len -= local_requested ; synchronized ( lock ) { requested -= local_requested ; } } else { manager . sendTransmit ( info , b , off , len ) ; synchronized ( lock ) { requested -= len ; } $F597 } } }
protected Alarm $F72 $F1210 ( this )
public void removeMouseMode ( MapMouseMode med ) { boolean needToAdjustActiveMode = _BOOL ; $F2329 ( med ) if $F1238 ( med , activeMouseMode ) { needToAdjustActiveMode = _BOOL ; setInactive ( med ) ; } for ( MapMouseMode checkMM : mouseModes ) { if $F1238 ( med , checkMM ) { med . removeAllMapMouseListeners ( ) ; } else if ( needToAdjustActiveMode ) { setActive ( checkMM ) ; needToAdjustActiveMode = _BOOL ; } } mouseModes . remove ( med ) ; firePropertyChange ( MouseModesProperty , null , mouseModes ) ; }
$F1 public boolean hasDispatchFunction $F72 { return _BOOL ; }
public void addMap ( $F15232 ( map ) , K min , K max ) { if ( min != null && max != null && keyType . compare ( min , max ) > NUM00 ) { DataUtils . newIllegalArgumentException ( NUM00 , min , max ) ; } int len = shards . length + NUM00 ; Shard $F9340 [ ] newShards = Arrays . copyOf ( shards , len ) ; Shard $F9340 newShard = new Shard $F9340 $F72 ; newShard . map = map ; newShard . minIncluding = min ; newShard . maxExcluding = max ; newShards [ len - NUM00 ] = newShard ; shards = newShards ; }
private void retryFailedInterfaces $F72 { for ( $F2774 ( i , failedInterfaces ) ) { NetworkInterface nic = ( NetworkInterface ) i . next ( ) ; try { if ( nic != null ) { socket . setNetworkInterface ( nic ) ; } socket . joinGroup ( requestAddr ) ; $F7042 ( i ) Level l = multicastInterfacesSpecified ? Level . INFO : Level . FINE ; if $F155449 ( logger , l ) { if ( nic != null ) { logger . log ( $F157217 ( l , nic ) ) ; } else { logger . log ( l , NUM00 ) ; } } } $F29052 } }
public void writeHeader $F72 throws IOException { FLVHeader flvHeader = new FLVHeader $F72 ; flvHeader . setFlagAudio ( _BOOL ) ; flvHeader . setFlagVideo ( _BOOL ) ; ByteBuffer header = ByteBuffer . allocate ( HEADER_LENGTH + NUM00 ) ; flvHeader . write ( header ) ; file . setLength ( HEADER_LENGTH + NUM00 ) ; if $F181184 ( header ) { $F980 ( log ) file . write ( header . array ( ) ) ; } else { $F980 ( log ) $F130978 ( tmp , HEADER_LENGTH ) header . get ( tmp ) ; file . write ( tmp ) ; } $F3935 ( bytesWritten , file ) $F725 ( header ) }
public static $F44535 submit ( Runnable task ) { return THREAD_POOL . submit ( task ) ; }
public boolean addOverlay ( Overlay overlay , KmlDocument kmlDoc ) { $F397 ( overlay , _BOOL ) KmlFeature kmlItem ; if ( overlay instanceof GroundOverlay ) { kmlItem = new KmlGroundOverlay ( ( GroundOverlay ) overlay ) ; } else if ( overlay instanceof FolderOverlay ) { kmlItem = new KmlFolder ( ( FolderOverlay ) overlay , kmlDoc ) ; } else if ( overlay instanceof MarkerClusterer ) { kmlItem = new KmlFolder ( ( MarkerClusterer ) overlay , kmlDoc ) ; } else if ( overlay instanceof Marker ) { Marker marker = ( Marker ) overlay ; kmlItem = new KmlPlacemark ( marker ) ; } else if ( overlay instanceof Polygon ) { Polygon polygon = ( Polygon ) overlay ; kmlItem = new KmlPlacemark ( polygon , kmlDoc ) ; } else if ( overlay instanceof Polyline ) { Polyline polyline = ( Polyline ) overlay ; kmlItem = new KmlPlacemark ( polyline , kmlDoc ) ; } else { return _BOOL ; } mItems . add ( kmlItem ) ; return _BOOL ; }
private < T extends SBResource > T lookForResource ( SBResourceType type , $F20474 clazz ) { $F5675 resources = lookForResources ( type , clazz ) ; return resources != null && $F3816 ( resources ) ? resources . get ( NUM00 ) : null ; }
private Object produceEvent $F72 throws InvocationTargetException { if ( ! valid ) { throw new IllegalStateException ( toString ( ) + NUM00 ) ; } try { return method . invoke ( target ) ; } $F180169 ( e ) catch ( InvocationTargetException e ) { if ( e . getCause ( ) instanceof Error ) { throw ( Error ) e . getCause ( ) ; } throw e ; } }
private $F6205 createDashArray ( String dashString ) { $F6542 ( dashes , dashString ) $F55998 ( floatDashArray ) for ( String dashValue : dashes ) { try { floatDashArray . add ( Float . parseFloat ( dashValue ) ) ; } $F62108 } return floatDashArray ; }
public void cleanPatchByVersion ( String versionName ) { $F5768 ( patchDirectory , versionName ) String path = $F3884 ( patchDirectory ) + versionName ; SharePatchFileUtil . deleteDir ( path ) ; }
public static boolean isValidJavaClassName ( String input ) { if ( ! StringUtils . hasText ( input ) ) { return _BOOL ; } if ( ! Character . isJavaIdentifierStart ( input . charAt ( NUM00 ) ) ) { return _BOOL ; } if $F4012 ( input ) { for ( $F1088 ( i , input ) ) { if ( ! Character . isJavaIdentifierPart ( input . charAt ( i ) ) ) { return _BOOL ; } } } return _BOOL ; }
public void test_create_empty $F72 { final String id = NUM00 ; final $F529 metadata = $F532 ; metadata . put ( FileMetadataSchema . ID , id ) ; $F16824 ( metadata ) final int version = repo . create ( metadata ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version ) ) ; assertEquals ( NUM00 , NUM00 , version ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; assertTrue ( NUM00 , doc . exists ( ) ) ; assertEquals ( NUM00 , version , doc . getVersion ( ) ) ; assertNotSame ( NUM00 , NUM00 , doc . getVersionCreateTime ( ) ) ; assertEquals ( NUM00 , doc . getVersionCreateTime ( ) , doc . getEarliestVersionCreateTime ( ) ) ; assertEquals ( NUM00 , doc . getVersionCreateTime ( ) , doc . getMetadataUpdateTime ( ) ) ; $F529 actual = doc . asMap ( ) ; assertEquals ( NUM00 , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( NUM00 , version , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( NUM00 , NUM00 , actual . get ( NUM00 ) ) ; assertEquals ( NUM00 , metadata . size ( ) , actual . size ( ) ) ; }
public static String rename $F1947 ( desc , oldname , newname ) { if $F283026 ( desc , oldname ) return desc ; $F280 ( newdesc ) int head = NUM00 ; int i = NUM00 ; for ( $F589 ) { $F12712 ( j , desc , i ) if ( j < NUM00 ) $F597 else if ( desc . startsWith ( oldname , j + NUM00 ) && desc . charAt ( $F222398 ( j , oldname ) ) == NUM00 ) { $F13037 ( newdesc , desc , head , j ) $F84 ( newdesc ) newdesc . append ( newname ) ; $F84 ( newdesc ) head = i = $F222398 ( j , oldname ) ; } else { i = desc . indexOf ( NUM00 , j ) + NUM00 ; $F7995 ( i ) } } if ( head == NUM00 ) return desc ; else { $F1749 ( len , desc ) if ( head < len ) $F13037 ( newdesc , desc , head , len ) $F92 ( newdesc ) } }
public void sort ( int attIndex ) { $F1986 vals = new double [ numInstances ( ) ] ; Instance [ ] backup = new Instance [ vals . length ] ; for ( $F1139 ( i , vals ) ) { Instance inst = instance ( i ) ; backup [ i ] = inst ; double val = inst . value ( attIndex ) ; if ( Utils . isMissingValue ( val ) ) { vals [ i ] = Double . MAX_VALUE ; } else { vals [ i ] = val ; } } $F2027 sortOrder = Utils . sortWithNoMissingValues ( vals ) ; for ( $F1139 ( i , vals ) ) { m_Instances . set ( i , backup [ sortOrder [ i ] ] ) ; } }
private static byte CallByteMethodV $F4272 ( env , objJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Byte , _BOOL ) ; return Reflection . unwrapByte ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
public boolean adjustEntry ( E entry ) { final SpatialDirectoryEntry se = ( SpatialDirectoryEntry ) entry ; final ModifiableHyperBoundingBox mbr = computeMBR ( ) ; boolean changed = _BOOL ; if ( se . hasMBR ( ) ) { final int dim = se . getDimensionality ( ) ; for ( $F119 ( i , dim ) ) { if ( Math . abs ( se . getMin ( i ) - mbr . getMin ( i ) ) > Float . MIN_NORMAL ) $F3468 ( changed , _BOOL ) if ( Math . abs ( se . getMax ( i ) - mbr . getMax ( i ) ) > Float . MIN_NORMAL ) $F3468 ( changed , _BOOL ) } } else { changed = _BOOL ; } if ( changed ) { se . setMBR ( mbr ) ; } return changed ; }
private void traceObject ( ObjectReference object , boolean root ) { if ( VERBOSE ) { Trace . trace ( Item . SANITY , NUM00 , ObjectModel . getString ( object ) ) ; } if ( object . isNull ( ) ) $F665 boolean marked = blackSet . contains ( object ) ; if ( ! marked ) $F437553 ( blackSet , object , markStack ) visitor . visitObject ( object , root , marked ) ; }
private static int compare ( int fromIndex , CharSequence left , CharSequence right ) { $F43349 ( left ) $F74334 ( right ) for ( int i = fromIndex , n = MathLib . min ( left . length ( ) , right . length ( ) ) ; i < n ; i ++ ) { char c1 = $F29169 ( Character , left , i ) ; char c2 = $F29169 ( Character , right , i ) ; if ( c1 != c2 ) return c1 - c2 ; } return $F15171 ( left , right ) ; }
public boolean restoreAccessibilityFocus ( CalendarDay day ) { if ( ( day . year != mYear ) || ( day . month != mMonth ) || ( day . day > mNumCells ) ) { return _BOOL ; } mTouchHelper . setFocusedVirtualView ( day . day ) ; return _BOOL ; }
public DriverTask createVolumeClone ( List < VolumeClone > clones ) { $F973 ( LOG ) $F423222 ( task ) $F83 ( errBuffer ) int createCount = NUM00 ; for ( VolumeClone clone : clones ) { try { StorageCenterAPI api = connectionManager . getConnection ( clone . getStorageSystemId ( ) ) ; ScReplay replay = null ; api . checkAndInitVolume ( clone . getParentId ( ) ) ; if ( clone . getSourceType ( ) == SourceType . SNAPSHOT ) { replay = api . getReplay ( clone . getParentId ( ) ) ; } else { replay = api . createReplay ( clone . getParentId ( ) , NUM00 ) ; } ScVolume scVol = api . createViewVolume ( clone . getDisplayName ( ) , replay . instanceId ) ; clone . setProvisionedCapacity ( SizeUtil . sizeStrToBytes ( scVol . configuredSize ) ) ; clone . setAllocatedCapacity ( NUM00 ) ; clone . setWwn ( scVol . deviceId ) ; clone . setNativeId ( scVol . instanceId ) ; clone . setDeviceLabel ( scVol . name ) ; clone . setAccessStatus ( AccessStatus . READ_WRITE ) ; clone . setReplicationState ( ReplicationState . SYNCHRONIZED ) ; createCount ++ ; } catch ( DellSCDriverException | StorageCenterAPIException dex ) { String error = String . format ( NUM00 , clone . getParentId ( ) , dex ) ; $F64611 ( errBuffer , String , error ) } } task . setMessage ( errBuffer . toString ( ) ) ; if $F25745 ( createCount , clones ) $F193217 ( task , TaskStatus ) else if ( createCount == NUM00 ) { $F193219 ( task , TaskStatus ) } else $F193223 ( task , TaskStatus ) return task ; }
$F1 public int hashCode $F72 { if ( hash == NUM00 ) { int result = NUM00 ; $F26525 ( result , range ) $F39428 ( bitsWeight , Double , weight ) $F14881 ( result , bitsWeight ) hash = result ; } return hash ; }
$F1 public void onClick ( View v ) { int position = Math . min ( ( Integer ) v . getTag ( ) , $F2281 ( mItemList ) ) ; mSelectedTracker = mItemList . get ( position ) ; mToggleConfigHandler . showForSelectedToggle ( ) ; mToggleConfigHandler . showAtLocation ( v ) ; mToggleConfigHandler . setArrowPosition ( v ) ; }
private int readFromDataSource ( $F96 target , int offset , int length , int bytesAlreadyRead , boolean allowEndOfInput ) throws InterruptedException , IOException { if $F2754 ( Thread ) { $F2757 } $F113519 ( bytesRead , dataSource , target , offset , bytesAlreadyRead , length ) if ( bytesRead == C . RESULT_END_OF_INPUT ) { if ( bytesAlreadyRead == NUM00 && allowEndOfInput ) { return C . RESULT_END_OF_INPUT ; } throw new EOFException $F72 ; } return bytesAlreadyRead + bytesRead ; }
public Explanation explain ( int doc , Explanation freq ) throws IOException { return Explanation . match ( score ( doc , freq . getValue ( ) ) , NUM00 + doc + NUM00 + freq . getValue ( ) + NUM00 , Collections . singleton ( freq ) ) ; }
public static Stack $F4 splitParts ( String name ) { while $F3106 ( name ) $F3108 ( name ) Stack $F4 $F125605 ( parts ) ; int last = NUM00 ; int pos = NUM00 ; String part ; while ( _BOOL ) { pos = last ; while ( _BOOL ) { $F50296 ( pos , name ) $F7995 ( pos ) if $F198486 ( name , pos ) ++ pos ; else $F597 } $F7995 ( pos ) part = name . substring ( last , pos ) ; if $F2364 ( part ) part += NUM00 ; parts . add ( part ) ; last = pos + NUM00 ; } part = name . substring ( last ) ; if $F2364 ( part ) part += NUM00 ; parts . add ( part ) ; return parts ; }
public Set $F69372 collectSourceMethods $F72 { Set $F69372 result = new HashSet $F69372 $F72 ; for ( SourceCallChainInfo cci : entry_points ) { collectSourceMethods ( cci , result ) ; } return result ; }
public void testPrecisionAndScale $F72 throws Exception { testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , - NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; testPrecisionForType ( NUM00 , NUM00 , NUM00 , _BOOL ) ; }
public void register ( NamedBean s ) { String systemName = s . getSystemName ( ) ; _tsys . put ( systemName , s ) ; String userName = s . getUserName ( ) ; if ( userName != null ) $F1717 ( _tuser , userName , s ) firePropertyChange ( NUM00 , null , $F10189 ( Integer , _tsys ) ) ; s . addPropertyChangeListener ( this , NUM00 , NUM00 ) ; }
protected void expandFor $F20449 ( i1 , i2 , d ) { if $F6389 ( i1 , sizes ) { int oldSize = sizes . size ( ) , capacity = vector . length ; sizes . set ( i1 , NUM00 ) ; if $F1765 ( capacity , sizes ) { while $F1765 ( capacity , sizes ) capacity *= NUM00 ; $F69805 ( t , capacity ) $F135 ( System , vector , t , oldSize ) vector = t ; } for ( int i = oldSize ; i < sizes . size ( ) ; ++ i ) vector [ i ] = new double [ defaultCapacity2 ] ; } if ( i2 < sizes . get ( i1 ) ) $F665 int oldSize = sizes . get ( i1 ) , capacity = vector [ i1 ] . length ; sizes . set ( i1 , i2 + NUM00 ) ; if ( capacity >= sizes . get ( i1 ) ) $F665 while ( capacity < sizes . get ( i1 ) ) capacity *= NUM00 ; $F9662 ( t , capacity ) System . arraycopy ( vector [ i1 ] , NUM00 , t , NUM00 , oldSize ) ; if ( d != NUM00 ) Arrays . fill ( t , oldSize , sizes . get ( i1 ) , d ) ; vector [ i1 ] = t ; }
public V put ( final K k , final V v ) { final WeakReference $F2193 ref = newWeakRef ( k , v , referenceQueue ) ; final WeakReference $F2193 oldRef = map . put ( k , ref ) ; final V oldVal = oldRef == null ? null : oldRef . get ( ) ; if ( queue . add ( v ) && DEBUG ) { $F8922 ( log , k , v ) } didUpdate ( k , ref , oldRef ) ; return oldVal ; }
static void delay ( long millis ) throws InterruptedException { long nanos = millis * $F18752 ; $F27344 ( wakeupTime , System , nanos ) do { if ( millis > NUM00 ) Thread . sleep ( millis ) ; else $F5756 ( Thread ) $F27353 ( nanos , wakeupTime , System ) millis = nanos / $F18752 ; } while ( nanos >= NUM00 ) ; }
$F173551 ( sourceList , value , _BOOL )
public void delete ( int key ) { int i = ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; if ( i >= NUM00 ) $F21314 ( System , mKeys , i , mSize , mValues ) }
public static void keepAlive ( final boolean keepAlive ) { $F68359 ( setProperty , Boolean , keepAlive ) ; }
public PageObjectContext peek $F72 { return deque . peek ( ) ; }
protected void writeNamespace ( String prefix , String uri ) throws IOException { if $F23754 ( prefix ) $F74647 ( writer , prefix ) else $F12032 ( writer ) writer . write ( uri ) ; $F3410 ( writer ) }
public static void waitSomeTime ( int seconds ) { try { $F28300 ( Thread , seconds ) } $F887 }
public void encode ( String value , ByteBuffer buffer ) throws BufferOverflowException { if ( value == null ) { buffer . put ( ( byte ) $F989 ) ; $F665 } $F1749 ( charCount , value ) if ( charCount == NUM00 ) { buffer . put ( ( byte ) ( NUM00 | NUM00 ) ) ; $F665 } $F115 ( position , buffer ) boolean ascii = _BOOL ; if ( charCount > NUM00 ) { for ( $F119 ( i , charCount ) ) { $F8205 ( c , value , i ) if ( c > NUM00 ) $F3468 ( ascii , _BOOL ) $F180945 ( buffer , c ) } } else { ascii = _BOOL ; } if ( ascii ) { $F54171 ( position , buffer ) buffer . put ( position - NUM00 , ( byte ) ( buffer . get ( position - NUM00 ) | NUM00 ) ) ; } else { buffer . position ( position ) ; writeLength ( charCount + NUM00 , buffer ) ; int charIndex = NUM00 ; for ( ; charIndex < charCount ; charIndex ++ ) { $F8205 ( c , value , charIndex ) if ( c > NUM00 ) $F597 $F180945 ( buffer , c ) } writeUTF8String ( value , charCount , charIndex , buffer ) ; } }
public void testBug71672Statement ( int testStep , Connection testConn , String query , int expectedUpdateCount , $F2027 expectedKeys ) throws SQLException { $F11282 ( testStmt , testConn ) if ( expectedUpdateCount < NUM00 ) { assertFalse ( testStep + NUM00 , testStmt . execute ( query , Statement . RETURN_GENERATED_KEYS ) ) ; } else { assertEquals ( testStep + NUM00 , expectedUpdateCount , testStmt . executeUpdate ( query , Statement . RETURN_GENERATED_KEYS ) ) ; } ResultSet testRS = testStmt . getGeneratedKeys ( ) ; for ( int k : expectedKeys ) { $F439015 ( assertTrue , testStep , testRS ) assertEquals ( testStep + NUM00 , k , testRS . getInt ( NUM00 ) ) ; } $F439015 ( assertFalse , testStep , testRS ) $F59 ( testRS ) $F59 ( testStmt ) }
public static PathImpl lookup ( String url ) { PathImpl pwd = getPwd ( ) ; if $F14943 ( url ) { return pwd . lookup ( url , null ) ; } else { return PWD . lookup ( url , null ) ; } }
public static XMLGregorianCalendar now $F72 $F15127 ( getXMLGregorianCalendarValue )
protected void addScalarDimension ( int i ) { for ( Dimension dimension : dimensionList ) { if ( dimension . getDimension ( ) == i ) $F932 } dimensionList . add ( new Dimension ( i ) ) ; }
public void initialize $F72 { TextureState ts = new TextureState $F72 ; ts . setEnabled ( _BOOL ) ; setRenderState ( ts ) ; for ( $F3836 ( i , lineSetList ) ) { LineSetState state = lineSetList . get ( i ) ; addLineSet ( state , _BOOL ) ; } zBufferState = new ZBufferState $F72 ; zBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; zBufferState . setEnabled ( _BOOL ) ; setRenderState ( zBufferState ) ; }
protected boolean regExpRegionMatches ( String text , int tStart , String p , int pStart , int plen ) { while ( plen -- > NUM00 ) { $F52837 ( tchar , text , tStart ) $F52837 ( pchar , p , pStart ) if ( ! this . fIgnoreWildCards ) { $F83608 ( pchar , fSingleWildCard ) } $F83608 ( pchar , tchar ) if ( this . fIgnoreCase ) { if ( Character . toUpperCase ( tchar ) == Character . toUpperCase ( pchar ) ) $F1448 if ( Character . toLowerCase ( tchar ) == Character . toLowerCase ( pchar ) ) $F1448 } return _BOOL ; } return _BOOL ; }
public static void initKeys ( KeyStore keystore , Properties props ) { if ( props . containsKey ( Configuration . WEBCALL_KAFKA_AES ) ) { $F96 key = keystore . decodeKey ( props . getProperty ( Configuration . WEBCALL_KAFKA_AES ) ) ; Preconditions . checkArgument ( ( NUM00 == key . length || NUM00 == key . length || NUM00 == key . length ) , Configuration . WEBCALL_KAFKA_AES + NUM00 ) ; keystore . setKey ( KeyStore . AES_KAFKA_WEBCALL , key ) ; aesKey = key ; } if ( props . containsKey ( Configuration . WEBCALL_KAFKA_MAC ) ) { $F96 key = keystore . decodeKey ( props . getProperty ( Configuration . WEBCALL_KAFKA_MAC ) ) ; Preconditions . checkArgument ( ( NUM00 == key . length ) , Configuration . WEBCALL_KAFKA_MAC + NUM00 ) ; keystore . setKey ( KeyStore . SIPHASH_KAFKA_WEBCALL , key ) ; siphashKey = key ; } }
public static boolean isEmpty ( StringBuilder str ) { return isNull ( str ) || $F41726 ( str ) ; }
public static Gas register ( Gas gas ) { $F1338 ( gas ) registeredGasses . add ( gas ) ; return $F6798 ( getGas , gas ) ; }
$F1 public boolean lock $F72 { try { lockPath = zk . create ( this . lockTypeFolder + CarbonCommonConstants . FILE_SEPARATOR + lockName , null , Ids . OPEN_ACL_UNSAFE , CreateMode . EPHEMERAL_SEQUENTIAL ) ; $F3803 nodes = zk . getChildren ( this . lockTypeFolder , null ) ; Collections . sort ( nodes ) ; if ( lockPath . endsWith ( nodes . get ( NUM00 ) ) ) { return _BOOL ; } else { zk . delete ( lockPath , - NUM00 ) ; return _BOOL ; } } catch ( KeeperException | InterruptedException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; return _BOOL ; } }
$F1 protected void keyTyped ( char par1 , int par2 ) { tokenBox . textboxKeyTyped ( par1 , par2 ) ; $F153042 ( par2 , actionPerformed , buttonList ) }
private static Boolean isAlphanumeric ( final String label ) { boolean status = _BOOL ; if $F35028 ( StringUtils , label ) { $F275 ( matcher , patternAlphanumeric , label ) status = matcher . matches ( ) ; } return status ; }
final static String trimURISubstring ( URL src , String sub ) { final String s = src . toExternalForm ( ) ; final int endIndex = s . lastIndexOf ( sub ) ; $F66071 ( t , s , endIndex ) return t ; }
$F1 public String globalInfo $F72 { return $F38 ; }
public static void silentCloseInputStream ( InputStream is ) { try $F6399 ( is ) $F122999 ( Log , LOG_TAG , e ) }
public boolean removeRow ( int row ) { if ( m_rows . isValidRow ( row ) ) { fireTableEvent ( row , row , TableModelEvent . ALL_COLUMNS , TableModelEvent . DELETE ) ; m_tuples . invalidate ( row ) ; m_rows . releaseRow ( row ) ; for ( Iterator cols = getColumns ( ) ; cols . hasNext ( ) ; ) { Column c = ( Column ) cols . next ( ) ; c . revertToDefault ( row ) ; } return _BOOL ; } return _BOOL ; }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
private boolean isParsableToDouble ( String i ) { return i . matches ( NUM00 ) ; }
protected $F806 initPathsFromProperties ( String rawPaths ) { $F10127 ( retPaths ) if ( rawPaths != null ) { try { $F46984 ( token , rawPaths , File ) $F17729 ( numPaths , token ) $F58180 ( retPaths , numPaths ) for ( $F119 ( i , numPaths ) ) { retPaths [ i ] = token . nextToken ( ) ; } return retPaths ; } catch ( $F104572 e ) $F302 ( e ) } return retPaths ; }
private float colorToAngle ( int color ) { $F12457 ( colors ) Color . colorToHSV ( color , colors ) ; return ( float ) Math . toRadians ( - colors [ NUM00 ] ) ; }
private void registerDefaultValidatorIds ( Application application , LinkedHashSet $F4 defaultValidatorIds ) { if ( defaultValidatorIds == null ) { $F22304 ( defaultValidatorIds ) ; if ( isBeanValidatorAvailable ( ) ) { $F4377 ( webConfig , WebConfiguration ) if ( ! webConfig . isOptionEnabled ( WebConfiguration . BooleanWebContextInitParameter . DisableDefaultBeanValidator ) ) { defaultValidatorIds . add ( BeanValidator . VALIDATOR_ID ) ; } } } for ( String validatorId : defaultValidatorIds ) { if $F6456 ( LOGGER , Level ) { LOGGER . log ( Level . FINE , MessageFormat . format ( NUM00 , validatorId ) ) ; } application . addDefaultValidatorId ( validatorId ) ; } }
protected void initializeLocation ( V v , Point2D coord ) { Point point = locations . get ( v ) ; coord . setLocation ( $F25550 ( point ) ) ; }
public static Date parseDate ( String dateStr ) { String formatString = NUM00 ; if $F1277 ( dateStr ) $F139011 ( dateStr ) if $F1277 ( dateStr ) formatString = NUM00 ; if $F1277 ( dateStr ) formatString = NUM00 ; $F13438 ( formatter , formatString ) $F18141 ( pos ) return formatter . parse ( dateStr , pos ) ; }
$F1431 private void doUnload ( MarkedProject markedProject , N4ProgressStateRecorder rec ) throws N4JSCompileErrorException { if ( createDebugOutput ) { println ( NUM00 + markedProject . project ) ; } rec . markStartUnloading ( markedProject ) ; for ( Resource res : markedProject . resources ) { rec . markUnloadingOf ( res ) ; res . unload ( ) ; } rec . markFinishedUnloading ( markedProject ) ; }
public void parseLib ( $F2100 ( dataModel ) , String fullText ) throws ParseException { Matcher m ; fullText = tmplHelper . normalizeText ( fullText ) ; m = commentPat . matcher ( fullText ) ; if $F55142 ( m ) { throw new ParseException $F580 ; } String introText = tmplHelper . stripCommentLeadingAsterix ( tmplHelper . cleanTextValue ( m . group ( NUM00 ) ) ) ; $F545 ( dataModel , introText ) Matcher introm = tmplHelper . getFirstLineMatcher ( introText ) ; if $F24133 ( introm ) { dataModel . put ( NUM00 , tmplHelper . cleanTextValue ( introm . group ( NUM00 ) ) ) ; dataModel . put ( NUM00 , tmplHelper . cleanTextValue ( introm . group ( NUM00 ) ) ) ; } String currentSectionName = NUM00 ; $F529 sectionInfo = makeObjectMap ( ) ; $F545 ( sectionInfo , currentSectionName ) $F91191 ( sectionInfo ) $F16824 ( sectionInfo ) $F16824 ( sectionInfo ) $F67614 sectionEntryMap = makeDataMap ( ) ; $F545 ( sectionInfo , sectionEntryMap ) $F67614 entryMap = makeDataMap ( ) ; $F67614 sectionMap = makeDataMap ( ) ; $F545 ( sectionMap , sectionInfo ) while $F281 ( m ) { String comment = tmplHelper . cleanTextValue ( m . group ( NUM00 ) ) ; Matcher subm ; subm = sectionPat . matcher ( comment ) ; if $F24133 ( subm ) { currentSectionName = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; sectionInfo = makeObjectMap ( ) ; $F545 ( sectionInfo , currentSectionName ) $F545 ( sectionInfo , currentSectionName ) $F16824 ( sectionInfo ) sectionInfo . put ( NUM00 , tmplHelper . cleanTextValue ( tmplHelper . stripCommentLeadingAsterix ( subm . group ( NUM00 ) ) ) ) ; sectionEntryMap = makeDataMap ( ) ; $F545 ( sectionInfo , sectionEntryMap ) sectionMap . put ( currentSectionName , sectionInfo ) ; } else { subm = entryPat . matcher ( comment ) ; if $F24133 ( subm ) { String entryTitle = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; String entryBody = tmplHelper . cleanTextValue ( subm . group ( NUM00 ) ) ; String postEntryText = fullText . substring ( m . end ( ) ) ; try { $F529 entryInfo = parseEntry ( entryTitle , entryBody , postEntryText ) ; $F545 ( entryInfo , currentSectionName ) $F28495 ( entryName , entryInfo ) if $F4251 ( entryName ) { throw new ParseException $F580 ; } if $F1710 ( entryMap , entryName ) { throw new ParseException ( NUM00 + entryName ) ; } entryMap . put ( entryName , entryInfo ) ; sectionEntryMap . put ( entryName , entryInfo ) ; } catch ( ParseException e ) { throw new ParseException ( $F6165 ( entryTitle , e ) , e ) ; } } else $F12542 } } msgHandler . logInfo ( $F10533 ( entryMap ) + sectionMap . size ( ) ) ; $F545 ( dataModel , sectionMap ) $F545 ( dataModel , entryMap ) }
public void writeFile ( ArrayList < DccLocoAddress > consistList , String fileName ) throws IOException { Element root = new Element $F580 ; Document doc = newDocument ( root , dtdLocation + NUM00 ) ; $F13404 ( m ) $F16824 ( m ) m . put ( NUM00 , xsltLocation + NUM00 ) ; ProcessingInstruction p = new ProcessingInstruction ( NUM00 , m ) ; doc . addContent ( NUM00 , p ) ; Element roster = new Element $F580 ; for ( $F2277 ( i , consistList ) ) { Consist newConsist = consistMan . getConsist ( consistList . get ( i ) ) ; roster . addContent ( consistToXml ( newConsist ) ) ; } root . addContent ( roster ) ; try { if ( ! checkFile ( fileName ) ) { $F1705 ( file , fileName ) $F4924 ( parentDir , file ) if $F1906 ( parentDir ) { if $F70667 ( parentDir ) { throw ( new IOException $F72 ) ; } } if $F380343 ( file ) { throw ( new IOException $F72 ) ; } } writeXML ( findFile ( fileName ) , doc ) ; } catch ( IOException ioe ) { $F17662 ( log , ioe ) throw ( ioe ) ; } }
public void train ( Reader aReader ) throws IOException { $F20481 ( in , aReader ) $F27015 ( line , in ) while ( line != null ) { Matcher m = WORD_PATTERN . matcher ( line . toLowerCase ( ) ) ; while $F281 ( m ) { $F45144 ( word , m ) $F101373 ( count , nWords , word ) if ( count == null ) { $F107657 ( count ) ; nWords . put ( word , count ) ; } $F5224 ( count ) } $F36243 ( line , in ) } }
private void startClient $F72 { if ( flumeClient != null && ! flumeClient . isActive ( ) ) $F39862 ( flumeClient ) if ( flumeClient == null ) { try { flumeClient = RpcClientFactory . getDefaultInstance ( flumeHostName , flumePort , maxSpanBatchSize ) ; } catch ( FlumeException e ) { LOG . warn ( $F5351 ( e ) ) ; } } }
public void vspan ( long start , long end , Paint color , String legend ) { LegendText legendText = new LegendText ( color , legend ) ; comments . add ( legendText ) ; plotElements . add ( new VSpan ( start , end , color , legendText ) ) ; }
public void onDraw ( Canvas canvas , int centerX , int centerY ) { $F24126 ( mVisible ) mArcBounds = new RectF ( centerX - mProgressRadius , centerY - mProgressRadius , centerX + mProgressRadius , centerY + mProgressRadius ) ; canvas . drawCircle ( centerX , centerY , mProgressRadius , mProgressBasePaint ) ; canvas . drawArc ( mArcBounds , - NUM00 , mProgressAngleDegrees , _BOOL , mProgressPaint ) ; if ( mProgressAngleDegrees == NUM00 && System . currentTimeMillis ( ) > mTimeToHide ) { mVisible = _BOOL ; if ( mVisibilityListener != null ) { mVisibilityListener . onHidden ( ) ; } } }
private void removeItemAtInt ( int index , boolean updateChildrenOnMenuViews ) { if ( ( index < NUM00 ) || $F6389 ( index , mItems ) ) $F665 mItems . remove ( index ) ; if ( updateChildrenOnMenuViews ) onItemsChanged ( _BOOL ) ; }
public static $F96 decode ( String s ) $F36684 ( decode , s )
public boolean check $F72 { return $F30364 ( m_File , m_Handler ) && m_File . exists ( ) ; }
public static $F27145 zScoreTest ( GeoTimeSerie gts , boolean useMedian , double d ) throws WarpScriptException { doubleCheck ( gts ) ; $F27145 $F17807 ( anomalous_ticks ) ; $F226310 ( musigma , madsigma , gts , useMedian ) double m = musigma [ NUM00 ] ; double std = musigma [ NUM00 ] ; if ( NUM00 == std ) { return anomalous_ticks ; } for ( $F168888 ( i , gts ) ) { double z = ( gts . doubleValues [ i ] - m ) / std ; if ( Math . abs ( z ) >= d ) { anomalous_ticks . add ( gts . ticks [ i ] ) ; } } return anomalous_ticks ; }
private void append ( PrintWriter pw , final String k , final String v ) { if ( v != null ) { pw . println ( k + NUM00 + v ) ; } }
default B withDefault ( String key , Object value ) { return withDefault ( $F164680 ( key , value ) ) ; }
public void testMultiplyDiffScalePosNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F168802 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
private void skipWhitespace $F72 { matcher . usePattern ( WHITESPACE ) ; if $F54321 ( matcher ) { matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } }
protected void createDynamicStyleForComponents ( final TextField tagName , final TextArea tagDesc , final String taregtTagColor ) { tagName . removeStyleName ( SPUIDefinitions . TAG_NAME ) ; tagDesc . removeStyleName ( SPUIDefinitions . TAG_DESC ) ; getTargetDynamicStyles ( taregtTagColor ) ; tagName . addStyleName ( TAG_NAME_DYNAMIC_STYLE ) ; tagDesc . addStyleName ( TAG_DESC_DYNAMIC_STYLE ) ; }
public void calculate_scores $F72 { score = NUM00 ; if $F9634 ( contents ) { API api = API . v ( ) ; Set < InfoKind > source = api . getSourceInfoKinds ( method ) ; Set < InfoKind > sink = api . getSinkInfoKinds ( method ) ; if ( is_system ( method ) ) { if ( api . isSafeMethod ( method ) ) score = NUM00 ; else if ( api . isSpecMethod ( method ) ) score = NUM00 ; else if ( api . isBannedMethod ( method ) ) score = NUM00 ; if $F5973 ( source ) score += NUM00 ; else if $F5973 ( sink ) score += NUM00 ; } $F665 } for ( CallChainInfo cci : contents ) { cci . calculate_scores ( ) ; calls += cci . calls ; syscalls += cci . syscalls ; if ( cci . score > score ) score = cci . score ; } }
public $F4203 JsonArray $F4203 createListDtoFromJson $F92641 ( json , dtoInterface ) { final $F20477 dtoProvider = getDtoProvider ( dtoInterface ) ; final List $F115413 list = gson . fromJson ( json , listTypeCache . getUnchecked ( $F111365 ) ) ; final $F5675 $F719 ( result , list ) ; for ( JsonElement e : list ) { result . add ( dtoProvider . fromJson ( e ) ) ; } return new JsonArrayImpl $F200 ( result ) ; }
public void startConsumption ( MultiThreadedBatchProcessor < T , TL > processor ) ;
public static long longForQuery ( SQLiteDatabase db , String query , $F806 selectionArgs ) { SQLiteStatement prog = db . compileStatement ( query ) ; try $F8587 ( longForQuery , prog , selectionArgs ) $F3229 ( prog ) }
public void testOneOne $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
public String toString $F72 { $F57047 ( s , ids ) return ( s ) ; }
$F1 public void remove ( String ... identifiers ) { whitelist . removeAll ( Arrays . asList ( identifiers ) ) ; }
public static $F96 checkTlsPreMasterSecretKey ( int clientVersion , int serverVersion , SecureRandom random , $F96 encoded , boolean isFailOver ) { if ( random == null ) { random = JCAUtil . getSecureRandom ( ) ; } $F12496 ( replacer ) random . nextBytes ( replacer ) ; if ( ! isFailOver && ( encoded != null ) ) { if $F11845 ( encoded ) { return replacer ; } int encodedVersion = $F257715 ( encoded ) | $F18896 ( encoded ) ; if ( clientVersion != encodedVersion ) { if ( clientVersion > NUM00 || serverVersion != encodedVersion ) { encoded = replacer ; } } return encoded ; } return replacer ; }
public Commafier ( final String initial ) $F40007 ( m_separator , DEFAULT_SEPARATOR , sb , initial )
public void write ( File file ) throws IOException { PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , NUM00 ) , _BOOL ) ; if ( fromDir != null ) { pw . println ( NUM00 + fromDir + NUM00 + fromExt ) ; } String str = null ; for ( $F2277 ( i , bList ) ) { str = ( String ) ( bList . elementAt ( i ) ) ; pw . println ( str ) ; } }
private void log ( IStatus status ) { ResourcesPlugin . log ( status ) ; }
static private StringBuilder replace ( StringBuilder input , java . util . regex . Pattern pattern , String replacement ) { java . util . regex . Matcher m = pattern . matcher ( input ) ; while $F281 ( m ) { if ( isEscapedChar ( input . toString ( ) , m . start ( ) ) ) $F1448 input . replace ( m . start ( ) , m . end ( ) , replacement ) ; m . reset ( input ) ; } return input ; }
public static MultisigAggregateModificationTransaction createMultisigModification $F72 { return new MultisigAggregateModificationTransaction ( TimeInstant . ZERO , Utils . generateRandomAccount ( ) , Collections . singletonList ( new MultisigCosignatoryModification ( MultisigModificationType . AddCosignatory , Utils . generateRandomAccount ( ) ) ) ) ; }
public static boolean isJarCacheEnabledDefault $F72 { return _isJarCacheEnabled ; }
public void test_write_flush_update $F72 { final Journal store = ( Journal ) getStore ( ) ; try { RWStrategy bufferStrategy = ( RWStrategy ) store . getBufferStrategy ( ) ; final int nbytes = NUM00 ; $F2175 ( a , nbytes ) r . nextBytes ( a ) ; final long addr = bufferStrategy . write ( ByteBuffer . wrap ( a ) ) ; assertEquals ( nbytes , store . getByteCount ( addr ) ) ; $F17621 ( store ) { $F87240 ( b , bufferStrategy , addr ) assertNotNull ( b ) ; for ( $F6268 ( i ) ) { assertEquals ( NUM00 + i , a [ i ] , b . get ( i ) ) ; } } } $F17625 ( store ) }
public static void copy ( $F2469 src , int srcOffset , $F2469 dst , int dstOffset , int len ) { int srcLimit = srcOffset + len ; while ( srcOffset < srcLimit ) { int srcIdx = srcOffset & NUM00 ; int dstIdx = dstOffset & NUM00 ; int srcRemainder = NUM00 - srcIdx ; int dstRemainder = NUM00 - dstIdx ; $F17565 ( chunkLen , Math , srcRemainder , dstRemainder ) long mask = maskBelow ( chunkLen ) < < srcIdx ; dst [ dstOffset > > NUM00 ] |= ( ( src [ srcOffset > > NUM00 ] & mask ) > > > srcIdx ) < < dstOffset ; srcOffset += chunkLen ; dstOffset += chunkLen ; } }
public static int SAVED_XERROR_HANDLER ( long display , XErrorEvent error ) { if ( saved_error_handler != NUM00 ) $F845 if $F58998 ( log , PlatformLogger ) { log . fine ( NUM00 + NUM00 + error . get_resourceid ( ) + NUM00 + NUM00 + error . get_serial ( ) + NUM00 + NUM00 + error . get_error_code ( ) + NUM00 + NUM00 + error . get_request_code ( ) + NUM00 + NUM00 + error . get_minor_code ( ) ) ; } $F1082 }
protected int inBorder ( int x , int y ) { Border b = getBorder ( ) ; $F1933 ( b , UNDEF ) Insets i = b . getBorderInsets ( this ) ; if ( x <= i . left ) { return DOCK_WEST ; } if ( x >= getWidth ( ) - i . right ) { return DOCK_EAST ; } if ( y <= i . top ) { return DOCK_NORTH ; } if ( y >= getHeight ( ) - i . bottom ) { return DOCK_SOUTH ; } return UNDEF ; }
public WallForce $F780 ( gravConst , x1 , y1 , x2 , y2 ) { params = new float [ ] { gravConst } ; minValues = new float [ ] { DEFAULT_MIN_GRAV_CONSTANT } ; maxValues = new float [ ] { DEFAULT_MAX_GRAV_CONSTANT } ; this . x1 = x1 ; this . y1 = y1 ; this . x2 = x2 ; this . y2 = y2 ; dx = x2 - x1 ; dy = y2 - y1 ; $F118175 ( r , Math , dx , dy ) if ( dx != NUM00 ) dx /= r ; if ( dy != NUM00 ) dy /= r ; }
public static void writeLn ( final OutputStream out ) throws IOException $F4050 ( out , LS_BYTES )
public static boolean isSystemApplication ( Context context ) { $F1933 ( context , _BOOL ) return isSystemApplication ( context , context . getPackageName ( ) ) ; }
public void testPosZero $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
private static void initializeReleasePlatform $F72 { String platformProperty = readConfigProperty ( PLATFORM_PROPERTIES , PLATFORM_PROPERTY_KEY ) ; if ( platformProperty == null ) $F1210 ( logInfo ) else { currentPlatform = Platform . valueOf ( platformProperty . toUpperCase ( Locale . UK ) ) ; logInfo ( NUM00 + currentPlatform ) ; } }
public static boolean isEmpty ( CharSequence str ) { if $F6036 ( str ) { return _BOOL ; } else { return _BOOL ; } }
$F1 public FSDataInputStream open ( Path path , int bufferSize ) throws IOException { String table = getTableName ( _rootPath , path ) ; String split = getSplitName ( _rootPath , path ) ; split = splitNameWithoutGzipExtension ( split ) ; return new FSDataInputStream ( new EmoSplitInputStream ( table , split ) ) ; }
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) $F166632 ( subSignature , java_lang_ClassLoader_defineClass0 , method , thisVar , returnVar , params , java_lang_ClassLoader_findBootstrapClass , java_lang_ClassLoader_findLoadedClass , java_lang_ClassLoader_getCallerClassLoader , defaultMethod ) }
public static final String extractIplIdentityHostFrimwareRev ( LocoNetMessage m ) { $F83 ( s ) s . append ( Integer . toString ( ( $F470482 ( m ) ) > > NUM00 ) ) ; $F84 ( s ) s . append ( Integer . toString ( ( $F470482 ( m ) ) ) ) ; $F92 ( s ) }
private void grow $F72 { if ( keys == null || nkeys >= keys . length ) { $F806 nk = $F113629 ( nkeys ) ; $F806 nv = $F113629 ( nkeys ) ; if ( keys != null ) $F135 ( System , keys , nk , nkeys ) if ( values != null ) $F135 ( System , values , nv , nkeys ) keys = nk ; values = nv ; } }
private $F5675 filter ( $F60962 ( collection ) ) { final $F5675 nullFreeList = new $F5676 $F72 ; if ( collection != null ) { for ( final T item : collection ) $F17651 ( item , nullFreeList ) } return nullFreeList ; }
public boolean isSystemClass ( SootClass clz ) $F298 ( allSystemClasses , clz )
private $F96 tryDecodeHostToIp ( String host ) { if $F40448 ( host ) $F4915 ( tryDecodeHostToIPv6 , host ) return tryDecodeHostToIPv4 ( host ) ; }
$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public $F27878 listAvailableNodes $F60993 ( type ) { $F207421 ( result ) for ( Node node : availableNodes ) { if ( $F207424 ( type , node ) ) $F207 ( result , node ) } return result ; }
private < T extends Draft3Resource > T lookForResource ( Draft3ResourceType type , $F20474 clazz ) { $F5675 resources = lookForResources ( type , clazz ) ; return resources != null && $F3816 ( resources ) ? resources . get ( NUM00 ) : null ; }
$F163438 ( file , readFileToString , Charset )
private boolean isLocked ( Order order ) { $F790 ( lock ) try { return $F60437 ( activeOrders , order ) ; } $F796 ( lock ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private static $F96 longToByteArray ( long l ) { $F12496 ( retVal ) for ( $F6268 ( i ) ) { $F8214 ( retVal , i , l ) l >>= NUM00 ; } return retVal ; }
public EncoderTestSuiteBuilder encode $F2236 ( expected , input ) { return encode ( NUM00 + input , expected , input ) ; }
public static boolean isFileTypeSupported ( int fileType ) { List providers = getMidiFileWriters ( ) ; for ( $F2277 ( i , providers ) ) { MidiFileWriter writer = ( MidiFileWriter ) providers . get ( i ) ; if ( writer . isFileTypeSupported ( fileType ) ) { return _BOOL ; } } return _BOOL ; }
public $F45986 ( username , addMutedUsername )
public void overrideCurrentTime ( long time ) { $F3224 ( startTime , System ) currentTime = NUM00 ; storedTime = time ; }
public static String sc ( Double score ) { $F574 ( score_str , String , score ) return score_str ; }
public static boolean validateBindAddress ( String bindAddress ) { $F72105 ( bindAddress , _BOOL ) if ( InetAddressUtil . validateHost ( bindAddress ) == null ) return _BOOL ; return _BOOL ; }
protected void fail ( String string ) { lastPrint = NUM00 ; if $F4012 ( string ) { $F7782 ( data , string ) for ( $F1139 ( i , data ) ) { char c = data [ i ] ; if ( c >= NUM00 || c < NUM00 ) { data [ i ] = ( char ) ( NUM00 + ( c & NUM00 ) ) ; string = null ; } } if ( string == null ) { $F84838 ( string , data ) } } println ( string ) ; throw new AssertionError ( string ) ; }
public TypecheckResult interpretResults ( TestConfiguration config , CompilationResult compilationResult ) { $F62418 expectedDiagnostics = readDiagnostics ( config , compilationResult ) ; return TypecheckResult . fromCompilationResults ( config , compilationResult , expectedDiagnostics ) ; }
public boolean isTrustedXACMLProvider $F19845 ( realm , entityId , trustedEntityId , role ) throws SAML2MetaException { boolean result = _BOOL ; if ( role != null ) { if ( role . equals ( SAML2Constants . PDP_ROLE ) ) { XACMLPDPConfigElement pdpConfig = getPolicyDecisionPointConfig ( realm , entityId ) ; if ( pdpConfig != null ) { result = isSameCircleOfTrust ( pdpConfig , realm , trustedEntityId ) ; } } else if ( role . equals ( SAML2Constants . PEP_ROLE ) ) { XACMLAuthzDecisionQueryConfigElement pepConfig = getPolicyEnforcementPointConfig ( realm , entityId ) ; result = isSameCircleOfTrust ( pepConfig , realm , trustedEntityId ) ; } } return result ; }
private PropertyEditor loadPropertyEditor ( Class clz ) { PropertyEditor editor = null ; try { editor = ( PropertyEditor ) clz . newInstance ( ) ; } $F1516 ( e ) return editor ; }
public Distribution ( Instances source , ClassifierSplitModel modelToUse ) throws Exception { int index ; Instance instance ; $F1986 weights ; m_perClassPerBag = new double [ modelToUse . numSubsets ( ) ] [ NUM00 ] ; m_perBag = new double [ modelToUse . numSubsets ( ) ] ; totaL = NUM00 ; m_perClass = $F90863 ( source ) ; for ( int i = NUM00 ; i < modelToUse . numSubsets ( ) ; i ++ ) { m_perClassPerBag [ i ] = $F90863 ( source ) ; } Enumeration $F90868 enu = source . enumerateInstances ( ) ; while $F1444 ( enu ) { $F1445 ( instance , enu ) index = modelToUse . whichSubset ( instance ) ; if ( index != - NUM00 ) { add ( index , instance ) ; } else { weights = modelToUse . weights ( instance ) ; addWeights ( instance , weights ) ; } } }
public void writingRequestHeaders $F72 { if ( sentRequestMillis != - NUM00 ) $F8675 $F3224 ( sentRequestMillis , System ) }
public List < DexlibAbstractInstruction > instructionsAfter ( DexlibAbstractInstruction instruction ) { $F12747 ( i , instructions , instruction ) if ( i == - NUM00 ) $F29525 ( instruction ) return instructions . subList ( i + NUM00 , instructions . size ( ) ) ; }
private Alignment fineTuneAlignment ( final Alignment firstCompute , final int xframe , final int yframe , final Point frameLocation , final Point componentLocation , final int compWidth , final int compHeight ) { switch ( firstCompute ) { case TOPLEFT : case TOPRIGHT : if ( componentLocation . x - frameLocation . x + compWidth / NUM00 > xframe / NUM00 ) { return Alignment . TOPRIGHT ; } else { return Alignment . TOPLEFT ; } case LEFTBOTTOM : case LEFTTOP : if ( componentLocation . y - frameLocation . y + compHeight / NUM00 > yframe / NUM00 ) { return Alignment . LEFTBOTTOM ; } else { return Alignment . LEFTTOP ; } case RIGHTBOTTOM : case RIGHTTOP : if ( componentLocation . y - frameLocation . y + compHeight / NUM00 > yframe / NUM00 ) { return Alignment . RIGHTBOTTOM ; } else { return Alignment . RIGHTTOP ; } case BOTTOMLEFT : case BOTTOMRIGHT : if ( componentLocation . x - frameLocation . x + compWidth / NUM00 > xframe / NUM00 ) { return Alignment . BOTTOMRIGHT ; } else { return Alignment . BOTTOMLEFT ; } $F1267 if ( realAlignment == Alignment . INNERLEFT || realAlignment == Alignment . INNERRIGHT ) { return realAlignment ; } if ( componentLocation . x - frameLocation . x > xframe + frameLocation . x - ( compWidth + componentLocation . x ) ) { return Alignment . INNERRIGHT ; } else { return Alignment . INNERLEFT ; } } }
public boolean isEmpty $F72 { return shapes == null ? _BOOL : shapes . isEmpty ( ) ; }
public static boolean isNetworkAvailable ( Context context ) { $F40395 ( cm , context , Context ) $F40397 ( netInfo , cm ) return netInfo != null && netInfo . isConnectedOrConnecting ( ) ; }
public void resetData $F72 { $F725 ( data ) $F725 ( dataNames ) dataSet . resetData ( dataNames , data , bins ) ; }
$F1 public URI uploadPackage $F72 { boolean fileExists = new File ( topologyPackageLocation ) . isFile ( ) ; if ( ! fileExists ) { $F9472 ( LOG , topologyPackageLocation ) $F1274 } $F77510 ( filePath , Paths , destTopologyFile ) File parentDirectory = filePath . getParent ( ) . toFile ( ) ; assert parentDirectory != null ; if $F1906 ( parentDirectory ) { $F22806 ( LOG ) if $F4928 ( parentDirectory ) { LOG . severe ( $F4946 ( parentDirectory ) ) ; $F1274 } } fileExists = new File $F3362 ( filePath ) . isFile ( ) ; if ( fileExists ) { LOG . fine ( $F369 ( filePath ) ) ; } LOG . fine ( $F28567 ( topologyPackageLocation , filePath ) ) ; $F77510 ( source , Paths , topologyPackageLocation ) try { CopyOption [ ] options = new CopyOption [ ] { StandardCopyOption . REPLACE_EXISTING } ; Files . copy ( source , filePath , options ) ; } catch ( IOException ex ) { LOG . info ( $F370 ( source , ex ) ) ; $F1274 } return getUri ( destTopologyFile ) ; }
public static String stripEscape ( String pattern ) { $F1275 ( pattern ) $F80469 ( stripped , pattern ) for ( $F1088 ( pos , pattern ) ) { $F1280 ( ch , pattern , pos ) if ( ch != NUM00 ) $F288 ( stripped , ch ) else if ( $F1093 ( pos , pattern ) && $F10825 ( pattern , pos ) ) { $F84 ( stripped ) pos += NUM00 ; } } $F92 ( stripped ) }
public long guest_time $F72 $F12907 ( Long , fields )
public void auditOperation ( String operation , List < ? extends TaggedLogAPIEntity > entities , $F3803 encodedRowKeys , EntityDefinition entityDefinition ) { if ( isAuditingRequired ( entityDefinition . getService ( ) ) ) { List < GenericAuditEntity > auditEntities = buildAuditEntities ( operation , entities , encodedRowKeys , entityDefinition ) ; if ( null != auditEntities && NUM00 != auditEntities . size ( ) ) { auditSupport . fireAudit ( entityDefinition . getService ( ) , auditEntities ) ; } } }
public Collection $F536800 tokenizeHTML $F72 { List $F536800 tokens = new ArrayList $F536800 $F72 ; String nestedTags = nestedTagsRegex ( NUM00 ) ; Pattern p = Pattern . compile ( $F40 + nestedTags + NUM00 , Pattern . CASE_INSENSITIVE ) ; $F1150 ( m , p , text ) int lastPos = NUM00 ; while $F281 ( m ) { if ( lastPos < m . start ( ) ) { tokens . add ( HTMLToken . text ( text . substring ( lastPos , m . start ( ) ) ) ) ; } tokens . add ( HTMLToken . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ; $F204945 ( lastPos , m ) } if $F7007 ( lastPos , text ) { tokens . add ( HTMLToken . text ( $F83851 ( text , lastPos ) ) ) ; } return tokens ; }
public void register ( String pattern , String result ) { Assert . isTrue ( $F56339 ( matchers , results ) ) ; $F1382 ( pattern ) if $F1277 ( pattern ) $F932 matchers . add ( new StringMatcher ( pattern , _BOOL , _BOOL ) ) ; results . add ( result ) ; }
$F1 public boolean onItemUse ( ItemStack par1ItemStack , EntityPlayer par2EntityPlayer , World par3World , int x , int y , int z , int par7 , float par8 , float par9 , float par10 ) { if ( ! par3World . isRemote ) { TileEntity tileEntity = par3World . getTileEntity ( x , y , z ) ; if ( tileEntity != null ) { if ( tileEntity instanceof TileLauncherPrefab ) { TileLauncherPrefab missileLauncher = ( TileLauncherPrefab ) tileEntity ; if ( missileLauncher . getFrequency ( ) > NUM00 ) { setFrequency ( missileLauncher . getFrequency ( ) , par1ItemStack ) ; par2EntityPlayer . addChatMessage ( new ChatComponentText ( Reference . CHAT_DESC + EnumColor . GREY + NUM00 + LangUtils . localize ( NUM00 ) + NUM00 + EnumColor . DARK_GREY + getFrequency ( par1ItemStack ) ) ) ; } else { par2EntityPlayer . addChatMessage ( new ChatComponentText ( Reference . CHAT_DESC + EnumColor . GREY + NUM00 + LangUtils . localize ( NUM00 ) ) ) ; } } } } return _BOOL ; }
$F29422 ( encodedPublicKey , decodedKey , Base64 , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM , e , Log , TAG )
SSLSession toSession ( $F96 data , String host , int port ) { $F5950 ( bais , data ) $F5337 ( dais , bais ) try { $F5952 ( type , dais ) if ( type != OPEN_SSL ) { log ( new AssertionError ( NUM00 + type ) ) ; $F1274 } $F5952 ( length , dais ) $F2175 ( sessionData , length ) dais . readFully ( sessionData ) ; $F5952 ( count , dais ) $F5958 certs = new X509Certificate [ count ] ; for ( $F119 ( i , count ) ) { $F5961 ( length , dais ) $F2175 ( certData , length ) dais . readFully ( certData ) ; certs [ i ] = OpenSSLX509Certificate . fromX509Der ( certData ) ; } return new OpenSSLSessionImpl ( sessionData , host , port , certs , this ) ; } catch ( IOException e ) { log ( e ) ; $F1274 } }
private static String parseDERString $F97 ( alterNameValue ) throws Throwable { try { ASN1StreamParser p = new ASN1StreamParser ( alterNameValue ) ; ASN1Encodable d = p . readObject ( ) ; ASN1Primitive der = d . toASN1Primitive ( ) ; return getStringFromObject ( der ) ; } catch ( Throwable e ) { $F45904 ( logger , e ) throw e ; } }
public AtlasMessagesAdapter addCellFactories ( AtlasCellFactory ... cellFactories ) { for ( AtlasCellFactory CellFactory : cellFactories ) { CellFactory . setStyle ( mMessageStyle ) ; mCellFactories . add ( CellFactory ) ; mViewTypeCount ++ ; CellType me = new CellType ( _BOOL , CellFactory ) ; mCellTypesByViewType . put ( mViewTypeCount , me ) ; mMyViewTypesByCell . put ( CellFactory , mViewTypeCount ) ; mViewTypeCount ++ ; CellType notMe = new CellType ( _BOOL , CellFactory ) ; mCellTypesByViewType . put ( mViewTypeCount , notMe ) ; mTheirViewTypesByCell . put ( CellFactory , mViewTypeCount ) ; } return this ; }
protected String consumeBOM ( InputStream stream , String encoding ) throws IOException { $F12496 ( b ) int count = NUM00 ; $F46282 ( stream ) if $F3057 ( encoding ) { $F3261 ( count , stream , b ) if ( count == NUM00 ) { final int b0 = b [ NUM00 ] & NUM00 ; final int b1 = b [ NUM00 ] & NUM00 ; final int b2 = b [ NUM00 ] & NUM00 ; if ( b0 != NUM00 || b1 != NUM00 || b2 != NUM00 ) $F8030 ( stream ) } else $F8030 ( stream ) } else if $F3106 ( encoding ) { $F3261 ( count , stream , b ) if ( count == NUM00 ) { final int b0 = b [ NUM00 ] & NUM00 ; final int b1 = b [ NUM00 ] & NUM00 ; if ( b0 == NUM00 && b1 == NUM00 ) $F2455 else if ( b0 == NUM00 && b1 == NUM00 ) $F2455 } $F2268 ( stream ) } return encoding ; }
public static int createWithIdGeneration ( Connection connection , String rawSqlQuery , Object ... parameters ) throws SQLException { PreparedStatement stmt = null ; ResultSet rs = null ; try { stmt = connection . prepareStatement ( rawSqlQuery , Statement . RETURN_GENERATED_KEYS ) ; for ( $F1139 ( index , parameters ) ) { JdbcUtils . bindParameter ( stmt , index + NUM00 , parameters [ index ] ) ; } $F3917 ( stmt ) rs = stmt . getGeneratedKeys ( ) ; $F24630 ( rs ) return rs . getInt ( NUM00 ) ; } finally { JdbcUtils . closeResultSet ( rs ) ; JdbcUtils . closeStatement ( stmt ) ; } }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
public static int andNot ( int $F26223 , int lena , int $F1310 , int lenb , $F2027 target ) { $F94561 ( lena ) if ( lenb == NUM00 ) { $F135 ( System , a , target , lena ) return lena ; } if ( ( lenb > > NUM00 ) >= lena ) $F16525 ( andNotBinarySearch , a , lena , b , lenb , target ) int count = NUM00 ; int i = NUM00 , j = NUM00 ; int doca = a [ i ] , docb = b [ j ] ; for ( $F589 ) { if ( doca > docb ) { if ( ++ j >= lenb ) $F597 docb = b [ j ] ; } else if ( doca < docb ) { target [ count ++ ] = doca ; if ( ++ i >= lena ) $F597 doca = a [ i ] ; } else { if ( ++ i >= lena ) $F597 doca = a [ i ] ; if ( ++ j >= lenb ) $F597 docb = b [ j ] ; } } int leftover = lena - i ; if ( leftover > NUM00 ) $F21534 ( System , a , i , target , count , leftover ) return count ; }
public boolean remove ( HttpConnection connection ) { TimeValues times = connectionToTimes . remove ( connection ) ; if ( times == null ) $F95123 ( log , _BOOL ) else { return System . currentTimeMillis ( ) <= times . timeExpires ; } }
void createButtons $F72 { if ( scrollForwardButton != null ) { tabPane . remove ( scrollForwardButton ) ; scrollForwardButton . removeActionListener ( this ) ; tabPane . remove ( scrollBackwardButton ) ; scrollBackwardButton . removeActionListener ( this ) ; } int tabPlacement = tabPane . getTabPlacement ( ) ; $F15339 ( width , UIManager ) if ( tabPlacement == TOP || tabPlacement == BOTTOM ) { scrollForwardButton = new ArrowButton ( EAST , width ) ; scrollBackwardButton = new ArrowButton ( WEST , width ) ; } else { scrollForwardButton = new ArrowButton ( SOUTH , width ) ; scrollBackwardButton = new ArrowButton ( NORTH , width ) ; } scrollForwardButton . addActionListener ( this ) ; scrollBackwardButton . addActionListener ( this ) ; tabPane . add ( scrollForwardButton ) ; tabPane . add ( scrollBackwardButton ) ; }
$F1322 ( criteria , oredCriteria )
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public static String rmSlashFromUrl ( final String url ) { return url . endsWith ( NUM00 ) ? $F4019 ( url ) : url ; }
protected void updateChartLayout $F72 { $F7600 ( chartContainer ) $F53443 ( selectedMetrics , getSelectedMetrics ) if $F3817 ( selectedMetrics ) { if $F119130 ( selectedMetrics ) { $F58107 ( chartContainer ) } else if $F119130 ( selectedMetrics ) { $F58107 ( chartContainer ) } else if $F119130 ( selectedMetrics ) { $F58107 ( chartContainer ) } else if $F119130 ( selectedMetrics ) { $F58107 ( chartContainer ) } else { chartContainer . setLayout ( new GridLayout ( ( int ) Math . ceil ( $F74216 ( selectedMetrics ) ) , NUM00 ) ) ; } GridLayout layout = ( GridLayout ) chartContainer . getLayout ( ) ; int spaces = layout . getRows ( ) * layout . getColumns ( ) ; for ( int i = NUM00 ; i < Math . max ( spaces , selectedMetrics . size ( ) ) ; i ++ ) { if $F1765 ( i , selectedMetrics ) { chartContainer . add ( createChart ( selectedMetrics . get ( i ) ) ) ; } else { chartContainer . add ( new EmptyPlot ( this ) ) ; } } } $F8797 ( chartContainer ) }
public String host ( Properties props ) { return props . getProperty ( HOST_PROPERTY_KEY , NUM00 ) ; }
void cancel $F72 { setVisible ( _BOOL ) ; }
$F1 public MemChunkHolder < VolatileMemAllocator > createChunk ( long size , boolean autoreclaim ) { MemChunkHolder < VolatileMemAllocator > ret = null ; Long addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; if ( NUM00 == addr && m_activegc ) { m_chunkcollector . waitReclaimCoolDown ( m_gctimeout ) ; addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; } if ( NUM00 != addr ) { ret = new MemChunkHolder < VolatileMemAllocator > ( this , addr , size ) ; ret . setCollector ( m_chunkcollector ) ; $F160288 ( autoreclaim , m_chunkcollector , ret ) } return ret ; }
public void waitForInvocation ( long msecWait , int numberOfNewEvents ) { $F657 ( startTime , System ) while ( _BOOL ) { if $F183121 ( System , startTime , msecWait ) { throw new RuntimeException ( NUM00 + numberOfNewEvents + NUM00 + getNewDataListFlattened ( ) . length ) ; } $F80820 events = getNewDataListFlattened ( ) ; if ( events . length >= numberOfNewEvents ) $F932 try $F31130 ( Thread ) catch ( InterruptedException e ) $F932 } }
private String versionName ( String prefix , int ver ) { return fName ( prefix ) + String . valueOf ( ver ) ; }
private void requestPermissionIfNeeded $F72 { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { int hasEnableCoarseLocationPerm = checkSelfPermission ( Manifest . permission . ACCESS_COARSE_LOCATION ) ; int hasEnableFineLocationPerm = checkSelfPermission ( Manifest . permission . ACCESS_FINE_LOCATION ) ; int hasEnableExternalWritePerm = checkSelfPermission ( Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; $F24645 ( permissionToRequest ) if ( hasEnableCoarseLocationPerm == PackageManager . PERMISSION_DENIED ) { permissionToRequest . add ( Manifest . permission . ACCESS_COARSE_LOCATION ) ; } if ( hasEnableFineLocationPerm == PackageManager . PERMISSION_DENIED ) { permissionToRequest . add ( Manifest . permission . ACCESS_FINE_LOCATION ) ; } if ( hasEnableExternalWritePerm == PackageManager . PERMISSION_DENIED ) { permissionToRequest . add ( Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; } if $F5973 ( permissionToRequest ) { requestPermissions ( $F10148 ( permissionToRequest ) , ALLOW_PERMISSIONS ) ; } else $F5795 ( initEvent ) } }
public ExtractMethodRefactoring ( ICompilationUnit unit , int selectionStart , int selectionLength ) { fCUnit = unit ; fRoot = null ; fMethodName = NUM00 ; fSelectionStart = selectionStart ; fSelectionLength = selectionLength ; fVisibility = - NUM00 ; }
$F1 public boolean done $F72 { if ( stoppingIncrements && incrementsLeft == NUM00 ) return _BOOL ; else return _BOOL ; }
public void parse $F72 throws $F34430 { int act ; symbol lhs_sym ; short handle_size , lhs_sym_num ; production_tab = production_table ( ) ; action_tab = action_table ( ) ; reduce_tab = reduce_table ( ) ; init_actions ( ) ; user_init ( ) ; cur_token = scan ( ) ; stack . push ( new symbol ( NUM00 , start_state ( ) ) ) ; tos = NUM00 ; for ( _done_parsing = _BOOL ; ! _done_parsing ; ) { act = get_action ( $F34439 ( stack ) , cur_token . sym ) ; if ( act > NUM00 ) { cur_token . parse_state = act - NUM00 ; stack . push ( cur_token ) ; tos ++ ; cur_token = scan ( ) ; } else if ( act < NUM00 ) { lhs_sym = do_action ( ( - act ) - NUM00 , this , stack , tos ) ; $F34451 ( lhs_sym_num , production_tab , act ) $F34451 ( handle_size , production_tab , act ) for ( $F119 ( i , handle_size ) ) { $F34454 ( stack ) tos -- ; } act = get_reduce ( $F34439 ( stack ) , lhs_sym_num ) ; lhs_sym . parse_state = act ; stack . push ( lhs_sym ) ; tos ++ ; } else if ( act == NUM00 ) { syntax_error ( cur_token ) ; if ( ! error_recovery ( _BOOL ) ) $F34462 ( unrecovered_syntax_error , cur_token , done_parsing ) } } }
private static void writeSet1 ( final BTree btree ) { $F973 ( log ) for ( $F6268 ( i ) ) { btree . insert ( i , i ) ; } }
private $F96 createSegmentTable ( int setupHeaderLength , List < OggPageHeader . PacketStartAndLength > extraPackets ) { $F1538 ( resultBaos ) $F96 restShouldBe ; $F96 nextPacket ; restShouldBe = createSegments ( setupHeaderLength , _BOOL ) ; try { resultBaos . write ( restShouldBe ) ; if $F3817 ( extraPackets ) { for ( OggPageHeader . PacketStartAndLength packet : extraPackets ) { nextPacket = createSegments ( packet . getLength ( ) , _BOOL ) ; resultBaos . write ( nextPacket ) ; } } } catch ( IOException ioe ) { throw new RuntimeException $F16296 ( ioe ) ; } $F11316 ( resultBaos ) }
public static int indexOfIgnoreCase $F60302 ( src , sub , startIndex , endIndex ) { $F17370 ( startIndex ) $F1749 ( srclen , src ) $F8789 ( endIndex , srclen ) $F1749 ( sublen , sub ) if ( sublen == NUM00 ) { return startIndex > srclen ? srclen : startIndex ; } $F37156 ( sub ) int total = endIndex - sublen + NUM00 ; $F12685 ( c , sub ) mainloop : for ( int i = startIndex ; i < total ; i ++ ) { if ( $F954 ( Character , src , i ) != c ) $F1448 int j = NUM00 ; int k = i + NUM00 ; while ( j < sublen ) { $F7882 ( source , Character , src , k ) if $F7883 ( sub , j , source ) { continue mainloop ; } j ++ ; k ++ ; } return i ; } $F150 }
private void addPolygonRing ( LinearRing lr , int cwLeft , int cwRight ) { $F8504 ( lr ) $F19578 coord = CoordinateArrays . removeRepeatedPoints ( lr . getCoordinates ( ) ) ; if $F8830 ( coord ) { hasTooFewPoints = _BOOL ; invalidPoint = coord [ NUM00 ] ; $F665 } int left = cwLeft ; int right = cwRight ; if ( CGAlgorithms . isCCW ( coord ) ) { left = cwRight ; right = cwLeft ; } Edge e = new Edge ( coord , new Label ( argIndex , Location . BOUNDARY , left , right ) ) ; lineEdgeMap . put ( lr , e ) ; insertEdge ( e ) ; insertPoint ( argIndex , coord [ NUM00 ] , Location . BOUNDARY ) ; }
public boolean acceptsLoadName ( String load ) { $F12418 ( _loadOption , ALL_LOADS , _BOOL ) if $F1238 ( _loadOption , INCLUDE_LOADS ) $F298 ( _loadList , load ) $F78369 ( _loadList , load ) }
public static void expandLetters ( String letters , WordRelation wordRelation ) { $F37156 ( letters ) char c ; for ( $F1088 ( i , letters ) ) { c = letters . charAt ( i ) ; if ( isDigit ( c ) ) { wordRelation . addWord ( digit2num [ c - NUM00 ] ) ; } else if $F3057 ( letters ) $F71515 ( wordRelation ) else { wordRelation . addWord ( String . valueOf ( c ) ) ; } } }
public static void writeStringToFile ( File file , String data , Charset encoding , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; IOUtils . write ( data , out , encoding ) ; $F59 ( out ) } $F18090 ( IOUtils , out ) }
$F1309 public static void subtract ( String name , double amount ) throws UserDoesNotExistException , NoLoanPermittedException { try $F141087 ( substract , name , BigDecimal , amount ) catch ( ArithmeticException e ) { logger . log ( Level . WARNING , $F141088 ( amount , name , e ) , e ) ; } }
public MnemonicCode ( InputStream wordstream , String wordListDigest ) throws $F248925 { $F524 ( br , wordstream ) $F16090 ( wordList ) ; String word ; while $F443 ( word , br ) wordList . add ( word ) ; $F59 ( br ) initializeFromWords ( wordList , wordListDigest ) ; }
public QKDialog addMenuItem ( String title , long id ) { mMenuItems . add ( title ) ; mMenuItemIds . add ( id ) ; return this ; }
public AnchorPane createFingerPrintPanel ( ArrayList < FpPanel > fingerprintPanelList ) $F13736 ( createFingerPrintPanel , fingerprintPanelList )
private static boolean isMemoryAccess ( final String value ) { $F786 ( value ) }
public void addAttribute ( AttributeInfo info ) { AttributeInfo . remove ( attributes , info . getName ( ) ) ; attributes . add ( info ) ; }
private static boolean verifyStringParam $F18289 ( str , maxLength , acceptableCharacters ) { return ! ( $F6035 ( str ) || str . length ( ) > maxLength || ! Pattern . matches ( acceptableCharacters , str ) ) ; }
private int calculateDragSensitivity $F72 { int range = MAX_DRAG_SENSITIVITY - MIN_DRAG_SENSITIVITY ; return Math . round ( ( NUM00 - getDragSensitivity ( ) ) * range + MIN_DRAG_SENSITIVITY ) ; }
public static String lowerFirstChar ( String string ) { $F1275 ( string ) if $F71860 ( string ) $F32484 ( string ) $F7542 ( sb , string ) sb . setCharAt ( NUM00 , $F85542 ( Character , sb ) ) ; $F92 ( sb ) }
public void forEachBlockPosMutableTopDown ( Predicate < BlockPos > func ) { BlockPos . MutableBlockPos blockPos = new BlockPos . MutableBlockPos $F72 ; int baseX = getMinBlockX ( ) ; int baseZ = getMinBlockZ ( ) ; int blockYMax = getMaxBlockY ( ) ; for ( $F6268 ( x ) ) { for ( $F6268 ( z ) ) { blockPos . setPos ( baseX + x , blockYMax , baseZ + z ) ; for ( $F183017 ( y ) ) { boolean cont = func . test ( blockPos ) ; blockPos . move ( EnumFacing . DOWN ) ; $F30724 ( cont ) } } } }
public String visit ( Type t , Locale locale ) { return t . accept ( this , locale ) ; }
public static final void writeMapXml ( Map val , XmlSerializer out , WriteMapCallback callback ) throws $F52182 { $F2329 ( val ) Set s = val . entrySet ( ) ; $F10531 ( i , s ) while $F2921 ( i ) { $F53089 e = ( $F53089 ) i . next ( ) ; writeValueXml ( e . getValue ( ) , $F123408 ( e ) , out , callback ) ; } }
public static void dropTable ( String table , Connection connection ) { $F2936 ( table ) $F83 ( dropTableQuery ) $F84 ( dropTableQuery ) dropTableQuery . append ( table ) ; $F973 ( LOG ) LOG . info ( dropTableQuery ) ; $F25731 ( executeStatementIfExists , dropTableQuery , connection ) }
private int freeSpace $F72 { return buffer . capacity ( ) - buffer . limit ( ) + buffer . position ( ) ; }
$F1 public $F27878 generate ( int popSize ) { $F245843 ( population ) for ( int i = NUM00 ; i < popSize ; ) { Node candidate = grow ( NUM00 ) ; if $F45040 ( candidate ) $F107337 ( population , candidate , i ) } return population ; }
public synchronized void notifyBeforeUse ( CompositeTransaction ct ) throws InvalidSessionHandleStateException { if ( closed ) throw new InvalidSessionHandleStateException $F580 ; try { TransactionContext suspended = null ; if ( ct != null ) { Iterator < TransactionContext > it = allContexts . iterator ( ) ; while ( it . hasNext ( ) && suspended == null ) { TransactionContext b = ( TransactionContext ) it . next ( ) ; if ( b . isSuspendedInTransaction ( ct ) ) { suspended = b ; } } } if ( suspended != null ) { if $F585 ( LOGGER ) LOGGER . logDebug ( this + NUM00 + ct . getTid ( ) ) ; currentContext = suspended ; currentContext . transactionResumed ( ) ; } else { try { if $F8415 ( LOGGER ) LOGGER . logTrace ( this + NUM00 + ct ) ; currentContext . checkEnlistBeforeUse ( ct ) ; } catch ( UnexpectedTransactionContextException txBoundaryPassed ) { if $F585 ( LOGGER ) LOGGER . logDebug ( this + NUM00 + ct ) ; currentContext . transactionSuspended ( ) ; currentContext = new TransactionContext ( resource , xaResource ) ; allContexts . add ( currentContext ) ; try { currentContext . checkEnlistBeforeUse ( ct ) ; } catch ( UnexpectedTransactionContextException e ) { String msg = NUM00 ; LOGGER . logError ( msg , e ) ; throw new InvalidSessionHandleStateException ( msg ) ; } } } } catch ( InvalidSessionHandleStateException e ) $F124189 ( notifySessionErrorOccurred , e ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void onActivityResult $F39172 ( requestCode , resultCode , data ) { if ( mInitializationComplete ) { mActivityDelegate . onActivityResultWithNative ( requestCode , resultCode , data ) ; } else { if ( mPendingActivityResults == null ) { mPendingActivityResults = new ArrayList < ActivityResult > $F989 ; } mPendingActivityResults . add ( new ActivityResult ( requestCode , resultCode , data ) ) ; } }
public void deleteSelection $F96672 ( nodes ) { for ( $F2277 ( i , nodes ) ) { for ( $F2290 ( j , i , nodes ) ) { if ( nodes . get ( i ) > nodes . get ( j ) ) { $F85651 ( h , nodes , i ) $F146189 ( nodes , i , j ) nodes . set ( j , h ) ; } } } if ( m_bNeedsUndoAction ) { addUndoAction ( new DeleteSelectionAction ( nodes ) ) ; } boolean bNeedsUndoAction = m_bNeedsUndoAction ; m_bNeedsUndoAction = _BOOL ; try { for ( $F5373 ( iNode , nodes ) ) $F80218 ( deleteNode , nodes , iNode ) } $F1516 ( e ) m_bNeedsUndoAction = bNeedsUndoAction ; }
protected void onCached $F72 { if $F28793 ( LogConfiguration ) { $F28795 ( logger , Level ) } uiHandler . hideMessage ( ) ; updating = _BOOL ; fireApplicationCacheEvent ( CacheEvent . onCached ) ; }
public static void showString ( String title , String content , Dimension dimension ) { JTextArea area = new JTextArea ( content ) ; area . setEditable ( _BOOL ) ; $F114437 ( scroll , area ) scroll . setPreferredSize ( dimension ) ; JOptionPane . showMessageDialog ( null , scroll , title , JOptionPane . INFORMATION_MESSAGE ) ; }
private void markCGForDeletion ( BlockConsistencyGroup consistencyGroup ) { if ( ! consistencyGroup . getInactive ( ) ) { consistencyGroup . setStorageController ( null ) ; consistencyGroup . setInactive ( _BOOL ) ; _dbClient . updateObject ( consistencyGroup ) ; } }
public LongBuffer put $F189406 ( src , srcOffset , longCount ) $F11682 ( JTranscArrays , src , srcOffset , longCount , remaining , i , put , this )
public void playTogether ( Collection $F113170 items ) { if $F8841 ( items ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
private MessageContext createMessageContext ( AxisEngine engine , HttpServletRequest req , HttpServletResponse res , Component component ) { MessageContext msgContext = new MessageContext ( engine ) ; String requestPath = getRequestPath ( req ) ; if ( isDebug ) { $F586 ( log , msgContext ) log . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_CONTENT_TYPE ) ) ; log . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_CONTENT_LOCATION ) ) ; log . debug ( NUM00 + String . valueOf ( homeDir ) ) ; $F586 ( log , requestPath ) log . debug ( NUM00 + String . valueOf ( webInfPath ) ) ; log . debug ( NUM00 + req . getPathInfo ( ) ) ; log . debug ( NUM00 + req . getHeader ( HTTPConstants . HEADER_AUTHORIZATION ) ) ; log . debug ( NUM00 + req . getRemoteAddr ( ) ) ; log . debug ( NUM00 + String . valueOf ( webInfPath ) ) ; } msgContext . setTransportName ( NUM00 ) ; msgContext . setProperty ( Constants . MC_HOME_DIR , homeDir ) ; msgContext . setProperty ( Constants . MC_RELATIVE_PATH , requestPath ) ; msgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLET , this ) ; msgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETREQUEST , req ) ; msgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETRESPONSE , res ) ; msgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETLOCATION , webInfPath ) ; msgContext . setProperty ( HTTPConstants . MC_HTTP_SERVLETPATHINFO , req . getPathInfo ( ) ) ; msgContext . setProperty ( HTTPConstants . HEADER_AUTHORIZATION , req . getHeader ( HTTPConstants . HEADER_AUTHORIZATION ) ) ; msgContext . setProperty ( lucee . runtime . net . rpc . server . Constants . COMPONENT , component ) ; msgContext . setProperty ( Constants . MC_REMOTE_ADDR , req . getRemoteAddr ( ) ) ; ServletEndpointContextImpl sec = new ServletEndpointContextImpl $F72 ; msgContext . setProperty ( Constants . MC_SERVLET_ENDPOINT_CONTEXT , sec ) ; String realpath = context . getRealPath ( requestPath ) ; if ( realpath != null ) { msgContext . setProperty ( Constants . MC_REALPATH , realpath ) ; } msgContext . setProperty ( Constants . MC_CONFIGPATH , webInfPath ) ; return msgContext ; }
$F1 public void invokeCommand ( int argLength , $F806 args , String command ) { Pattern regex = null ; if $F9634 ( args ) { regex = Pattern . compile ( args [ NUM00 ] ) ; } else if $F11845 ( args ) { throw new UsageException $F580 ; } for ( AbstractCommand cmd : CommandBus . commands ) tryRegex ( regex , cmd ) ; for ( FuzzyCommand cmd : CommandBus . parsers ) tryRegex ( regex , cmd ) ; }
public static Builder newBuilder $F72 { return new Builder $F72 ; }
protected int parseAndAddNode ( XmlResourceParser parser , HashMap < String , TagParser > tagParserMap , $F17804 screenIds ) throws $F18821 { if $F3175 ( TAG_INCLUDE , parser ) { final int resId = getAttributeResourceValue ( parser , ATTR_WORKSPACE , NUM00 ) ; if ( resId != NUM00 ) $F8587 ( parseLayout , resId , screenIds ) else $F1083 } $F725 ( mValues ) parseContainerAndScreen ( parser , mTemp ) ; final long container = mTemp [ NUM00 ] ; final long screenId = mTemp [ NUM00 ] ; mValues . put ( LauncherSettings . Favorites . CONTAINER , container ) ; mValues . put ( LauncherSettings . Favorites . SCREEN , screenId ) ; mValues . put ( LauncherSettings . Favorites . CELLX , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_X ) , mColumnCount ) ) ; mValues . put ( LauncherSettings . Favorites . CELLY , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_Y ) , mRowCount ) ) ; TagParser $F24916 ( tagParser , tagParserMap , parser ) ; if ( tagParser == null ) { if ( LOGD ) Log . d ( $F71108 ( TAG , parser ) ) ; $F1082 } long newElementId = tagParser . parseAndAdd ( parser ) ; if ( newElementId >= NUM00 ) { if ( ! screenIds . contains ( screenId ) && container == LauncherSettings . Favorites . CONTAINER_DESKTOP ) $F207 ( screenIds , screenId ) $F1082 } $F1082 }
public WordEntry addNewWord ( final String str ) { final String key = trimWord ( str ) ; WordEntry entry = words . get ( key ) ; if ( entry == null ) { entry = new WordEntry $F72 ; entry . setType ( new ExpressionType $F580 ) ; entry . setNormalized ( key ) ; words . put ( key , entry ) ; } else { logger . warn ( NUM00 + str + NUM00 + entry . getNormalized ( ) ) ; } return entry ; }
$F1 public int insert ( String elem ) { int firstIndex = ( int ) ( elem . charAt ( NUM00 ) - NUM00 ) ; int middleIndex = ( int ) ( elem . charAt ( - NUM00 + $F8196 ( elem ) ) - NUM00 ) ; int lastIndex = ( int ) ( $F7792 ( elem ) - NUM00 ) ; storage [ firstIndex * NUM00 + middleIndex * NUM00 + lastIndex ] = elem ; $F1082 }
$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { mWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; mHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; $F17565 ( minSide , Math , mWidth , mHeight ) mWidth = minSide ; mHeight = minSide ; mCurrentProgressPosition = calculateCurrentPositionFromCurrentSeconds ( mCurrentSeconds ) ; objectAnimatorProgress . setFloatValues ( mCurrentProgressPosition / mWidth , NUM00 ) ; objectAnimatorProgress . setDuration ( ( mMaxSeconds - mCurrentSeconds ) * NUM00 ) ; $F27424 ( mBitmapCoverImage , scaleCoverBitmap ) rectFEmptyProgress . set ( NUM00 , mHeight - mProgressHeight , mWidth , mHeight ) ; mDrawableBottomShadow . setBounds ( NUM00 , ( NUM00 * mHeight ) / NUM00 , mWidth , mHeight ) ; if ( startRequested ) $F21847 ( startRequested , _BOOL , start ) super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; }
protected List < Command > handleCommands ( ServerConnector serverConnector , List < Command > commands ) { List < Command > results = new ArrayList < Command > $F72 ; for ( Command command : commands ) { if $F14148 ( LOG , Level ) { $F150605 ( LOG , command ) } results . addAll ( serverConnector . receive ( command ) ) ; } return results ; }
public static void UF5 $F93381 ( x , f , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; double hj ; double N = NUM00 ; double E = NUM00 ; for ( $F9993 ( j , nx ) ) { $F94025 ( yj , x , j , Math , PI , nx ) hj = $F63533 ( yj , Math , PI ) ; $F63536 ( j , sum2 , hj , count2 , sum1 , count1 ) } hj = ( NUM00 / N + E ) * Math . abs ( Math . sin ( NUM00 * N * PI * x [ NUM00 ] ) ) ; f [ NUM00 ] = x [ NUM00 ] + hj + NUM00 * sum1 / ( double ) count1 ; f [ NUM00 ] = NUM00 - x [ NUM00 ] + hj + NUM00 * sum2 / ( double ) count2 ; }
private View fillUp ( int pos , int nextBottom ) { if ( DEBUG ) Log . i ( TAG , NUM00 + pos + NUM00 + nextBottom + M_FIRST_POSITION + mFirstPosition ) ; View selectedView = null ; $F315564 ( end , mListPadding ) while ( nextBottom > end && pos >= NUM00 ) { View temp = makeRow ( pos , nextBottom , _BOOL ) ; $F57733 ( temp , selectedView ) nextBottom = mReferenceView . getTop ( ) - mVerticalSpacing ; mFirstPosition = pos ; pos -= mNumColumns ; } if ( mStackFromBottom ) { mFirstPosition = Math . max ( NUM00 , pos + NUM00 ) ; } return selectedView ; }
private List < ValidationError > validate $F72 { List < ValidationError > errors = Lists . newArrayList ( ) ; Module module = getModule ( ) ; errors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateModule ( module ) ) ; AndroidFacet facet = null ; if ( module != null ) { facet = AndroidFacet . getInstance ( module ) ; errors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateFacet ( facet , module ) ) ; } errors . addAll ( configState . validate ( facet ) ) ; errors . addAll ( BlazeAndroidRunConfigurationValidationUtil . validateLabel ( getLabel ( ) , configuration . getProject ( ) , Kind . ANDROID_BINARY ) ) ; return errors ; }
public void removeChildJob ( Job childJob ) { if $F2200 ( childJobs , childJob ) $F5754 ( childJob ) $F12396 ( removed , childJobs , childJob ) if ( ! removed ) $F11389 }
private PointF isFlingingToDelete ( DragSource source ) { $F1275 ( mFlingToDeleteDropTarget ) if ( ! source . supportsFlingToDelete ( ) ) $F1274 $F27383 ( config , ViewConfiguration , mLauncher ) mVelocityTracker . computeCurrentVelocity ( NUM00 , config . getScaledMaximumFlingVelocity ( ) ) ; if ( mVelocityTracker . getYVelocity ( ) < mFlingToDeleteThresholdVelocity ) { PointF vel = new PointF ( mVelocityTracker . getXVelocity ( ) , mVelocityTracker . getYVelocity ( ) ) ; PointF upVec = new PointF $F261843 ; float theta = ( float ) Math . acos ( ( ( vel . x * upVec . x ) + ( vel . y * upVec . y ) ) / ( vel . length ( ) * upVec . length ( ) ) ) ; if ( theta <= Math . toRadians ( MAX_FLING_DEGREES ) ) { return vel ; } } $F1274 }
$F49286 ( value , absMin , absMax , absValue , Math )
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { $F4054 ( child ) } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
public static void runScript ( final File file , final List < Pair $F528 > bindings ) throws ScriptException , IOException { final ScriptEngine engine = manager . getEngineByExtension ( FileUtils . getFileExtension ( file ) ) ; Preconditions . checkNotNull ( engine , NUM00 , file . getAbsolutePath ( ) ) ; final String script = FileUtils . readTextfile ( file ) ; runScript ( engine , script , bindings ) ; }
public void addUGraphic ( UGraphic ug ) $F6659 ( graphics , ug )
public void apply $F72 throws IllegalStateException { try { System . setSecurityManager ( this ) ; } catch ( SecurityException e ) { $F5197 ( logger , e ) $F48926 ( e ) } }
public static Rule createAGetPostRule ( String ruleName , String ruleUrl ) throws PolicyException { $F10651 $F122365 ( actionValues ) ; $F2695 ( set ) set . add ( ALLOW_DECISION ) ; actionValues . put ( GET_ACTION , set ) ; $F21884 ( set ) set . add ( ALLOW_DECISION ) ; actionValues . put ( POST_ACTION , set ) ; return new Rule ( ruleName , IPLANETAMWEBAGENTSERVICE , ruleUrl , actionValues ) ; }
public FastArrayList $F22451 ( c ) { elementData = c . toArray ( ) ; size = elementData . length ; if ( elementData . getClass ( ) != $F22453 ) elementData = Arrays . copyOf ( elementData , size , $F22453 ) ; }
void createSceneVao $F72 { int vao = glGenVertexArrays ( ) ; int vbo = glGenBuffers ( ) ; glBindVertexArray ( vao ) ; glBindBuffer ( GL_ARRAY_BUFFER , vbo ) ; long bufferSize = $F297295 * mesh . numVertices ; long normalsOffset = NUM00 * NUM00 * mesh . numVertices ; glBufferData ( GL_ARRAY_BUFFER , bufferSize , GL_STATIC_DRAW ) ; glBufferSubData ( GL_ARRAY_BUFFER , NUM00 , mesh . positions ) ; glBufferSubData ( GL_ARRAY_BUFFER , normalsOffset , mesh . normals ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , NUM00 ) ; glEnableVertexAttribArray ( NUM00 ) ; glVertexAttribPointer ( NUM00 , NUM00 , GL_FLOAT , _BOOL , NUM00 , normalsOffset ) ; glBindBuffer ( GL_ARRAY_BUFFER , NUM00 ) ; glBindVertexArray ( NUM00 ) ; this . vaoScene = vao ; }
public $F11654 endBatch $F72 { $F11654 result = null ; if $F3817 ( operationsBatch ) $F20182 ( result , doFlush ) useBatch = _BOOL ; operationsBatch = null ; return result ; }
$F53919 ( widthSize , mode , initResourcesIfNecessary , itemsLayout , LayoutParams , MeasureSpec , width , PADDING , Math , getSuggestedMinimumWidth )
public static Collection removeInnerClassNames ( Collection col ) { $F19151 ( list ) list . addAll ( col ) ; $F10531 ( it , list ) while $F2921 ( it ) { $F2778 ( name , it ) if $F12703 ( name ) $F7042 ( it ) } return list ; }
public TrieNode find ( String word ) { return ( $F3598 ( word ) ? null : find ( word , root , NUM00 ) ) ; }
private void testOrderedIndexes $F72 throws SQLException { deleteDb ( NUM00 ) ; Connection conn = getConnection ( NUM00 ) ; $F11282 ( stat , conn ) stat . execute ( NUM00 + NUM00 ) ; $F131050 ( stat ) ResultSet rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F24630 ( rs ) assertContains ( rs . getString ( NUM00 ) , NUM00 ) ; $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F24630 ( rs ) assertContains ( rs . getString ( NUM00 ) , NUM00 ) ; $F59 ( conn ) }
public String encode ( ByteBuffer aBuffer ) { $F12490 ( buf , getBytes , aBuffer ) return encode ( buf ) ; }
public static int clearListInfo ( Delegator delegator , String shoppingListId ) throws GenericEntityException { delegator . removeByAnd ( NUM00 , UtilMisc . toMap ( NUM00 , shoppingListId ) ) ; return delegator . removeByAnd ( NUM00 , UtilMisc . toMap ( NUM00 , shoppingListId ) ) ; }
private synchronized void handleWatchdog $F72 { final int exitCode ; $F8249 ( watchdog ) $F7546 ( watchdogTimeout ) if $F931 ( isRunning ) { exitCode = OnCommandResultListener . SHELL_DIED ; Debug . log ( String . format ( NUM00 , $F65405 ( shell , Locale ) ) ) ; } else if ( watchdogCount ++ < watchdogTimeout ) $F932 else { exitCode = OnCommandResultListener . WATCHDOG_EXIT ; Debug . log ( String . format ( NUM00 , $F65405 ( shell , Locale ) ) ) ; } if ( handler != null ) { postCallback ( command , exitCode , buffer ) ; } command = null ; buffer = null ; idle = _BOOL ; $F733 ( watchdog ) watchdog = null ; kill ( ) ; }
public synchronized boolean hasService ( Class serviceClass ) { $F1149 ( serviceClass ) synchronized ( BeanContext . globalHierarchyLock ) { if $F1710 ( services , serviceClass ) return _BOOL ; BeanContextServices bcs = null ; try { bcs = ( BeanContextServices ) getBeanContext ( ) ; } catch ( ClassCastException cce ) { return _BOOL ; } return bcs == null ? _BOOL : bcs . hasService ( serviceClass ) ; } }
public boolean isPingDisabled $F72 { return ( null != healthcheck && $F1905 ( healthcheck ) ) ; }
public static String format ( Integer i ) { $F1275 ( i ) $F92 ( i ) }
$F292923 ( super )
public void dumpNodes ( Path webGraphDb , DumpType type , long topN , Path output , boolean asEff , NameType nameType , AggrType aggrType , boolean asSequenceFile ) throws Exception { $F108456 ( sdf ) $F657 ( start , System ) LOG . info ( NUM00 + sdf . format ( start ) ) ; Path nodeDb = new Path ( webGraphDb , WebGraph . NODE_DIR ) ; Configuration conf = getConf ( ) ; JobConf dumper = new NutchJob ( conf ) ; dumper . setJobName ( NUM00 + webGraphDb ) ; FileInputFormat . addInputPath ( dumper , nodeDb ) ; dumper . setInputFormat ( SequenceFileInputFormat . class ) ; if ( nameType == null ) { dumper . setMapperClass ( Sorter . class ) ; dumper . setReducerClass ( Sorter . class ) ; dumper . setMapOutputKeyClass ( FloatWritable . class ) ; dumper . setMapOutputValueClass ( Text . class ) ; } else { dumper . setMapperClass ( Dumper . class ) ; dumper . setReducerClass ( Dumper . class ) ; dumper . setMapOutputKeyClass ( Text . class ) ; dumper . setMapOutputValueClass ( FloatWritable . class ) ; } dumper . setOutputKeyClass ( Text . class ) ; dumper . setOutputValueClass ( FloatWritable . class ) ; FileOutputFormat . setOutputPath ( dumper , output ) ; if ( asSequenceFile ) { dumper . setOutputFormat ( SequenceFileOutputFormat . class ) ; } else { dumper . setOutputFormat ( TextOutputFormat . class ) ; } dumper . setNumReduceTasks ( NUM00 ) ; dumper . setBoolean ( NUM00 , type == DumpType . INLINKS ) ; dumper . setBoolean ( NUM00 , type == DumpType . OUTLINKS ) ; dumper . setBoolean ( NUM00 , type == DumpType . SCORES ) ; dumper . setBoolean ( NUM00 , nameType == NameType . HOST ) ; dumper . setBoolean ( NUM00 , nameType == NameType . DOMAIN ) ; dumper . setBoolean ( NUM00 , aggrType == AggrType . SUM ) ; dumper . setBoolean ( NUM00 , aggrType == AggrType . MAX ) ; dumper . setLong ( NUM00 , topN ) ; if ( asEff ) { dumper . set ( NUM00 , NUM00 ) ; } try { $F973 ( LOG ) JobClient . runJob ( dumper ) ; } catch ( IOException e ) { LOG . error ( StringUtils . stringifyException ( e ) ) ; throw e ; } $F657 ( end , System ) LOG . info ( $F1999 ( sdf , end ) + TimingUtil . elapsedTime ( start , end ) ) ; }
public static String convertMethodSignature $F19845 ( className , methodName , methodSig , pkgName ) { $F83 ( args ) SignatureConverter converter = new SignatureConverter ( methodSig ) ; converter . skip ( ) ; $F84 ( args ) while ( converter . getFirst ( ) != NUM00 ) { $F47101 ( args ) args . append ( shorten ( pkgName , converter . parseNext ( ) ) ) ; } converter . skip ( ) ; $F84 ( args ) $F83 ( result ) result . append ( className ) ; $F84 ( result ) result . append ( methodName ) ; $F11659 ( result , args ) $F92 ( result ) }
protected void Predicate $F72 throws $F1872 { if ( tokenIs ( NUM00 ) ) { nextToken ( ) ; PredicateExpr ( ) ; consumeExpected ( NUM00 ) ; } }
private void newUnitReceived ( GridUriDeploymentUnitDescriptor newDesc , Collection $F69669 clss ) { assert newDesc != null ; assert newDesc . getType ( ) == GridUriDeploymentUnitDescriptor . Type . FILE ; if $F1032 ( clss ) { try { addResources ( newDesc . getClassLoader ( ) , newDesc , clss . toArray ( new $F6969 $F2313 ( clss ) ) ) ; } catch ( IgniteSpiException e ) { U . warn ( log , $F6165 ( newDesc , e ) + NUM00 ) ; } } Collection $F2390 $F204 ( rmvClsLdrs ) ; synchronized ( mux ) { if ( checkMd5 && unitDeployed ( newDesc . getMd5 ( ) ) ) { if $F17747 ( log ) LT . info ( log , NUM00 + NUM00 + U . hidePassword ( newDesc . getUri ( ) ) + NUM00 + ( newDesc . getFile ( ) == null ? NUM00 : newDesc . getFile ( ) ) + NUM00 ) ; $F665 } boolean isAdded = _BOOL ; boolean ignoreNewUnit = _BOOL ; for ( ListIterator < GridUriDeploymentUnitDescriptor > iter = unitLoaders . listIterator ( ) ; iter . hasNext ( ) ; ) { GridUriDeploymentUnitDescriptor desc = iter . next ( ) ; assert ! newDesc . getClassLoader ( ) . equals ( desc . getClassLoader ( ) ) : NUM00 + newDesc ; if ( desc . getType ( ) == GridUriDeploymentUnitDescriptor . Type . FILE && newDesc . getUri ( ) . equals ( desc . getUri ( ) ) && ! newDesc . getFile ( ) . equals ( desc . getFile ( ) ) ) { $F7042 ( iter ) rmvClsLdrs . add ( desc . getClassLoader ( ) ) ; if $F87568 ( iter ) $F597 $F598 } if ( ! isAdded ) { if $F150035 ( unitComp , newDesc , desc ) { if ( checkUnitCollision ( desc , newDesc ) ) { $F7042 ( iter ) iter . add ( newDesc ) ; rmvClsLdrs . add ( desc . getClassLoader ( ) ) ; } else { iter . set ( newDesc ) ; iter . add ( desc ) ; } isAdded = _BOOL ; } else if ( checkUnitCollision ( newDesc , desc ) ) $F3468 ( ignoreNewUnit , _BOOL ) } else if ( checkUnitCollision ( newDesc , desc ) ) { $F7042 ( iter ) rmvClsLdrs . add ( desc . getClassLoader ( ) ) ; } } if ( ! ignoreNewUnit ) { if ( ! isAdded ) unitLoaders . add ( newDesc ) ; if $F585 ( log ) LT . info ( log , NUM00 + newDesc . getClassLoader ( ) + NUM00 + newDesc . getTimestamp ( ) + NUM00 + U . hidePassword ( newDesc . getUri ( ) ) + NUM00 + ( newDesc . getFile ( ) == null ? NUM00 : newDesc . getFile ( ) ) + NUM00 ) ; } } for ( ClassLoader cldLdr : rmvClsLdrs ) onUnitReleased ( cldLdr ) ; }
public static String canonicalID ( String id ) { $F1747 ( id ) int st = NUM00 ; $F1749 ( len , id ) boolean substr = _BOOL ; int c ; while ( st < len && ( $F31375 ( c , id , st ) == NUM00 || c <= NUM00 ) ) { st ++ ; substr = _BOOL ; } while ( st < len && ( ( c = id . charAt ( len - NUM00 ) ) == NUM00 || c <= NUM00 ) ) { len -- ; substr = _BOOL ; } return substr ? id . substring ( st , len ) : id ; }
private static void encodeBinary $F91888 ( bytes , startpos , count , startmode , sb ) { if ( count == NUM00 && startmode == TEXT_COMPACTION ) $F46352 ( sb , SHIFT_TO_BYTE ) else { boolean sixpack = $F91889 ( count ) ; if ( sixpack ) $F46352 ( sb , LATCH_TO_BYTE ) else $F46352 ( sb , LATCH_TO_BYTE_PADDED ) } int idx = startpos ; if ( count >= NUM00 ) { $F11577 ( chars ) $F91906 ( startpos , count , idx , t , i , bytes , chars , sb ) } $F91910 ( i , idx , startpos , count , ch , bytes , sb ) }
$F1 public void step ( MessageLogger logger ) { try { addAgent ( ) ; env . step ( ) ; } $F1516 ( e ) }
private static boolean isNonLeft ( int i0 , int i1 , int i2 , int i3 , $F1986 pts ) { double l1 , l2 , l4 , l5 , l6 , angle1 , angle2 , angle ; l1 = Math . sqrt ( Math . pow ( $F3123 ( pts , i2 , i1 ) , NUM00 ) + Math . pow ( pts [ i2 ] - pts [ i1 ] , NUM00 ) ) ; l2 = Math . sqrt ( Math . pow ( $F3123 ( pts , i3 , i2 ) , NUM00 ) + Math . pow ( pts [ i3 ] - pts [ i2 ] , NUM00 ) ) ; l4 = Math . sqrt ( Math . pow ( $F3123 ( pts , i3 , i0 ) , NUM00 ) + Math . pow ( pts [ i3 ] - pts [ i0 ] , NUM00 ) ) ; l5 = Math . sqrt ( Math . pow ( $F3123 ( pts , i1 , i0 ) , NUM00 ) + Math . pow ( pts [ i1 ] - pts [ i0 ] , NUM00 ) ) ; l6 = Math . sqrt ( Math . pow ( $F3123 ( pts , i2 , i0 ) , NUM00 ) + Math . pow ( pts [ i2 ] - pts [ i0 ] , NUM00 ) ) ; angle1 = $F3135 ( Math , l2 , l6 , l4 ) ; angle2 = $F3135 ( Math , l6 , l1 , l5 ) ; angle = ( Math . PI - angle1 ) - angle2 ; if ( angle <= NUM00 ) $F3139 ( _BOOL ) else $F3139 ( _BOOL ) }
protected void copy2DArray ( int from [ ] [ ] , int to [ ] [ ] ) { for ( $F1139 ( i , from ) ) { to [ i ] = new int [ from [ i ] . length ] ; System . arraycopy ( from [ i ] , NUM00 , to [ i ] , NUM00 , from [ i ] . length ) ; } }
public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; map . put ( k3 , v3 ) ; return map ; }
public boolean fill ( Reader reader , int pos ) throws IOException { $F83249 ( res , reader , fBuf ) if ( res == - NUM00 ) { fOffset = pos ; fLength = NUM00 ; return _BOOL ; } int charsRead = res ; while ( charsRead < BUFFER_SIZE ) { res = reader . read ( fBuf , charsRead , BUFFER_SIZE - charsRead ) ; if ( res == - NUM00 ) { fOffset = pos ; fLength = charsRead ; return _BOOL ; } charsRead += res ; } fOffset = pos ; fLength = BUFFER_SIZE ; return _BOOL ; }
public void drawInRect ( GL10 gl , CGRect rect ) { gl . glEnable ( GL_TEXTURE_2D ) ; loadTexture ( gl ) ; float vertices [ ] = { rect . origin . x , rect . origin . y , rect . origin . x + rect . size . width , rect . origin . y , rect . origin . x , rect . origin . y + rect . size . height , rect . origin . x + rect . size . width , rect . origin . y + rect . size . height } ; mVertices . put ( vertices ) ; $F16709 ( mVertices ) float coordinates [ ] = { NUM00 , _maxT , _maxS , _maxT , NUM00 , NUM00 , _maxS , NUM00 } ; mCoordinates . put ( coordinates ) ; $F16709 ( mCoordinates ) gl . glEnableClientState ( GL_VERTEX_ARRAY ) ; gl . glEnableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glBindTexture ( GL_TEXTURE_2D , _name ) ; gl . glTexParameterx ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_REPEAT ) ; gl . glTexParameterx ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_REPEAT ) ; $F126369 ( gl , GL_FLOAT , mVertices ) gl . glTexCoordPointer ( NUM00 , GL_FLOAT , NUM00 , mCoordinates ) ; gl . glDrawArrays ( GL_TRIANGLE_STRIP , NUM00 , NUM00 ) ; gl . glDisableClientState ( GL_VERTEX_ARRAY ) ; gl . glDisableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glDisable ( GL_TEXTURE_2D ) ; }
synchronized void executed ( RTEditText editor , Operation op ) { $F78304 ( undoStack , getUndoStack , editor ) $F78304 ( redoStack , getRedoStack , editor ) while $F232570 ( undoStack , op ) { $F232572 ( previousOp , undoStack ) op . merge ( previousOp ) ; } push ( op , undoStack ) ; $F725 ( redoStack ) }
$F43277 ( listener , mListeners )
public static boolean isOssBuild $F72 { boolean isOssBuild = _BOOL ; $F27462 ( buildType , System ) if ( StringUtils . isNotBlank ( buildType ) && buildType . equalsIgnoreCase ( NUM00 ) ) { isOssBuild = _BOOL ; } return isOssBuild ; }
public void invokeHookBoltExecute ( Tuple tuple , long executeLatencyNs ) { if $F6887 ( taskHooks ) { BoltExecuteInfo executeInfo = new BoltExecuteInfo ( tuple , getThisTaskId ( ) , executeLatencyNs / Constants . MILLISECONDS_TO_NANOSECONDS ) ; for ( ITaskHook taskHook : taskHooks ) { taskHook . boltExecute ( executeInfo ) ; } } }
private void validateIamRoles ( List < IamRole > iamRoles ) { $F18062 ( Assert , iamRoles ) Assert . isTrue ( $F3816 ( iamRoles ) , NUM00 ) ; for ( IamRole iamRole : iamRoles ) { $F18062 ( Assert , iamRole ) Assert . hasText ( iamRole . getIamRoleName ( ) , NUM00 ) ; } }
public static Intent buildStartInBackgroundIntent ( File script ) { final ComponentName componentName = Constants . SL4A_SERVICE_LAUNCHER_COMPONENT_NAME ; Intent $F192736 ( intent ) ; intent . setComponent ( componentName ) ; intent . setAction ( Constants . ACTION_LAUNCH_BACKGROUND_SCRIPT ) ; intent . putExtra ( Constants . EXTRA_SCRIPT_PATH , script . getAbsolutePath ( ) ) ; return intent ; }
public static $F9737 valueOf $F168406 ( obj ) { return $F58366 ( obj ) ; }
$F45923 public SpanMultiTermQueryWrapper ( Q query ) { $F31108 ( this , Objects , query ) this . rewriteMethod = selectRewriteMethod ( query ) ; }
public void writeMapEnd $F72 throws IOException $F12032 ( os )
public Shape createArrowUp $F22855 ( x , y , w , h ) { $F2268 ( path ) path . moveTo ( x , y + h ) ; path . lineTo ( x + w / NUM00 , y ) ; path . lineTo ( x + w , y + h ) ; $F2272 ( path ) return path ; }
protected void fireValueChanged $F72 { ChangeEvent evt = new ChangeEvent ( this ) ; for ( ChangeListener listener : listenerList . getListeners ( ChangeListener . class ) ) { listener . stateChanged ( evt ) ; } }
public static void streamContentToBrowser ( HttpServletResponse response , InputStream in , int length , String contentType , String fileName ) throws IOException { setResponseBrowserProxyNoCache ( response ) ; response . setContentLength ( length ) ; if ( contentType != null ) { response . setContentType ( contentType ) ; } if ( fileName != null ) { response . setHeader ( NUM00 , NUM00 + fileName ) ; } $F147972 ( out , response ) try { streamContent ( out , in , length ) ; } catch ( IOException e ) { $F59 ( out ) throw e ; } $F1206 ( out ) $F59 ( out ) }
public static ByteBuffer encode ( String string ) throws CharacterCodingException $F8587 ( encode , string , _BOOL )
public void disableRealtimeStepsNotify $F72 { checkConnection ( ) ; final List < BLEAction > $F204 ( list ) ; list . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . DISABLE_REALTIME_STEPS_NOTIFY ) ) ; queue ( list ) ; }
private static void stableStringSort ( $F806 arr , $F806 src , $F806 dst , int start , int end , int chId ) { int length = end - start ; if ( length < SIMPLE_LENGTH ) { if ( src == arr ) { for ( $F2634 ( i , start , end ) ) { String current = arr [ i ] ; String prev = arr [ i - NUM00 ] ; if $F25292 ( current , prev ) { int j = i ; do $F230915 ( arr , j , prev ) while ( j > start && current . compareTo ( prev = arr [ j - NUM00 ] ) < NUM00 ) ; arr [ j ] = current ; } } } else { int actualEnd = end - NUM00 ; dst [ start ] = src [ actualEnd -- ] ; for ( int i = start + NUM00 ; i < end ; i ++ , actualEnd -- ) { String current = src [ actualEnd ] ; String prev ; int j = i ; while ( j > start && current . compareTo ( prev = dst [ j - NUM00 ] ) < NUM00 ) $F230915 ( dst , j , prev ) dst [ j ] = current ; } } $F665 } int s ; int mid = start + length / NUM00 ; int lo = start ; int hi = end - NUM00 ; if ( length > NUM00 ) { s = length / NUM00 ; lo = medChar ( lo , lo + s , lo + s * NUM00 , src , chId ) ; mid = medChar ( mid - s , mid , mid + s , src , chId ) ; hi = medChar ( hi , hi - s , hi - s * NUM00 , src , chId ) ; } mid = medChar ( lo , mid , hi , src , chId ) ; int midVal = charAt ( src [ mid ] , chId ) ; int a , b , c ; a = b = start ; c = end - NUM00 ; int cmp ; for ( int i = start ; i < end ; i ++ ) { String el = src [ i ] ; cmp = charAt ( el , chId ) - midVal ; if ( cmp < NUM00 ) $F2319 ( src , a , el ) else if ( cmp > NUM00 ) { dst [ c ] = el ; c -- ; } else $F2319 ( dst , b , el ) } s = b - start ; if ( s > NUM00 ) { if ( arr == src ) $F69917 ( System , dst , start , arr , a , s ) else { copySwap ( dst , start , arr , a , s ) ; } if ( b >= end && midVal == - NUM00 ) $F932 stableStringSort ( arr , arr , arr == dst ? src : dst , a , a + s , chId + NUM00 ) ; } s = a - start ; if ( s > NUM00 ) { stableStringSort ( arr , src , dst , start , a , chId ) ; } c ++ ; s = end - c ; if ( s > NUM00 ) { stableStringSort ( arr , dst , src , c , end , chId ) ; } }
private static $F18547 types ( Object ... values ) { if ( values == null ) { return $F33934 ; } $F65070 ( result , values ) for ( $F1139 ( i , values ) ) { Object value = values [ i ] ; result [ i ] = value == null ? NULL . class : value . getClass ( ) ; } return result ; }
public static void unRegisterTileCodec ( int comp ) { XTIFFTileCodec cod = getTileCodec ( comp ) ; tileCodecs . remove ( cod ) ; }
public static void escape ( StrBuilder toAppend , String text , boolean escapeQuote , boolean escapeApos ) { $F2329 ( text ) for ( $F1088 ( i , text ) ) { $F1280 ( ch , text , i ) switch ( ch ) { $F2999 ( toAppend ) $F2999 ( toAppend ) $F2999 ( toAppend ) $F1262 toAppend . append ( escapeQuote ? NUM00 : ch ) ; $F597 $F1262 toAppend . append ( escapeApos ? NUM00 : ch ) ; $F597 $F3000 ( toAppend , ch ) } } }
public void destroy $F72 { $F725 ( mListeners ) mSpringSystem . deregisterSpring ( this ) ; }
$F1 public synchronized void removeInstanceListener ( InstanceListener tsl ) $F130709 ( m_instanceListeners , tsl )
private String readUntil ( $F1469 delimiter , boolean returnText ) throws $F139192 { int start = position ; StringBuilder result = null ; if ( returnText && text != null ) { $F6932 ( result ) result . append ( text ) ; } search : while ( _BOOL ) { if ( position + delimiter . length > limit ) { if ( start < position && returnText ) { $F39896 ( result ) $F14090 ( result , buffer , start , position ) } if ( ! fillBuffer ( delimiter . length ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; type = COMMENT ; $F1274 } start = position ; } for ( $F1139 ( i , delimiter ) ) { if $F219258 ( buffer , position , i , delimiter ) { position ++ ; continue search ; } } $F597 } int end = position ; position += delimiter . length ; if ( ! returnText ) $F1337 else $F139251 ( result , stringPool , buffer , start , end ) }
private void toggleFavorite $F72 { for ( String game : list . getSelectedValuesList ( ) ) { if $F105 ( favorites , game ) $F106 ( favorites , game ) else $F207 ( favorites , game ) } saveFavorites ( ) ; update ( ) ; }
private void createPartitionRegion ( List vmList , int startIndexForRegion , int endIndexForRegion , int localMaxMemory , int redundancy , boolean firstCreationFlag , boolean multipleVMFlag ) { $F10531 ( nodeIterator , vmList ) while $F2921 ( nodeIterator ) { $F90160 ( vm , nodeIterator ) vm . invoke ( createMultiplePartitionRegion ( prPrefix , startIndexForRegion , endIndexForRegion , redundancy , localMaxMemory , firstCreationFlag , multipleVMFlag ) ) ; } }
public int write ( $F96 destMac , $F96 packet , int offset , int byteCount ) { $F896 ( destMac ) $F896 ( packet ) $F11673 ( Arrays , packet , offset , byteCount ) if $F11845 ( destMac ) { throw new IllegalArgumentException $F75477 ( destMac ) ; } return sendPacket ( fd , mInterfaceName , mProtocolType , destMac , packet , offset , byteCount ) ; }
public boolean hasExtensionsWithDeps $F72 $F3387 ( extensionsWithDeps )
public synchronized void addSeries ( XYSeries series ) $F207 ( mSeries , series )
private $F2027 calculateTaskCountPerContainer $F14337 ( taskCount , prevContainerCount , currentContainerCount ) { $F2027 newTaskCountPerContainer = new int [ Math . max ( currentContainerCount , prevContainerCount ) ] ; $F9952 ( Arrays , newTaskCountPerContainer ) for ( $F119 ( i , currentContainerCount ) ) { newTaskCountPerContainer [ i ] = taskCount / currentContainerCount ; if ( taskCount % currentContainerCount > i ) { newTaskCountPerContainer [ i ] ++ ; } } return newTaskCountPerContainer ; }
$F1 public void actionPerform ( Component component ) { $F933 ( isEnabled ) if ( beforeActionPerformedHandler != null ) { if ( ! beforeActionPerformedHandler . beforeActionPerformed ( ) ) $F665 } Set selected = target . getSelected ( ) ; if $F5973 ( selected ) { if ( confirm ) { confirmAndRemove ( selected ) ; } else { remove ( selected ) ; } } }
public void testCompareToPosPos2 $F72 { $F7829 $F79258 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) }
static public void generateSeed $F97 ( result ) { instance . getSeedBytes ( result ) ; }
private double hammingDistanceNumberVector ( NumberVector o1 , NumberVector o2 ) { final int d1 = o1 . getDimensionality ( ) , d2 = o2 . getDimensionality ( ) ; int differences = NUM00 ; int d = NUM00 ; for ( ; d < d1 && d < d2 ; d ++ ) { double v1 = o1 . doubleValue ( d ) , v2 = o2 . doubleValue ( d ) ; if ( v1 != v1 || v2 != v2 ) $F1448 if ( v1 != v2 ) { ++ differences ; } } for ( ; d < d1 ; d ++ ) { $F42635 ( v1 , o1 , d ) if ( v1 != NUM00 && v1 == v1 ) { ++ differences ; } } for ( ; d < d2 ; d ++ ) { $F42635 ( v2 , o2 , d ) if ( v2 != NUM00 && v2 == v2 ) { ++ differences ; } } return differences ; }
public static Kernel createKernel ( int kernelType ) { switch ( kernelType ) { case KERNEL_RADIAL : return new KernelRadial $F72 ; case KERNEL_POLYNOMIAL : return new KernelPolynomial $F72 ; case KERNEL_NEURAL : return new KernelNeural $F72 ; $F1267 return new KernelDot $F72 ; } }
protected void checkForPendingTasks ( $F46217 tenants , Collection < ? extends DataObject > dataObjects ) { for ( URI tenant : tenants ) { checkForPendingTasks ( tenant , dataObjects ) ; } }
@ org . junit . Test public void verifyGetFloatResponse $F72 throws Exception { $F13404 ( queryParams ) String str = client . invokeAPI ( NUM00 , NUM00 , queryParams , null , $F12080 , null , NUM00 , null , $F382 ) ; assertEquals ( str , String . valueOf ( ExampleBuilder . SAMPLE_FLOAT_PROPERTY_VALUE ) ) ; }
public void writeOperationsCarFile $F72 { makeBackupFile ( defaultOperationsFilename ( ) ) ; try { if ( ! checkFile ( defaultOperationsFilename ( ) ) ) { $F70659 file = new $F70659 ( defaultOperationsFilename ( ) ) ; $F70659 parentDir = file . getParentFile ( ) ; if $F1906 ( parentDir ) { if $F70667 ( parentDir ) $F21338 ( log ) } if ( file . createNewFile ( ) ) $F981 ( log ) } writeFile ( defaultOperationsFilename ( ) ) ; } $F70676 ( log , e ) }
$F5077 ( journalWriter , writer , journalFileTmp , IO_BUFFER_SIZE , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , _BOOL )
public static double median $F10212 ( values ) { $F18832 ( len , values ) final $F1986 sortedValues = Arrays . copyOf ( values , len ) ; Arrays . sort ( sortedValues ) ; if ( len % NUM00 == NUM00 ) { return ( ( double ) sortedValues [ len / NUM00 ] + ( double ) sortedValues [ len / NUM00 - NUM00 ] ) / NUM00 ; } else { return ( double ) sortedValues [ len / NUM00 ] ; } }
private List < BlockInfo > fillSegmentIdToTableInfoMap ( $F8688 tableBlockInfos , AbsoluteTableIdentifier absoluteTableIdentifier ) { Map < String , List < BlockInfo > > map = segmentIdToBlockListMap . get ( absoluteTableIdentifier ) ; if ( null == map ) { map = new ConcurrentHashMap < String , List < BlockInfo > > $F72 ; segmentIdToBlockListMap . put ( absoluteTableIdentifier , map ) ; } BlockInfo temp = null ; List < BlockInfo > $F204 ( blockInfosNeedToLoad ) ; for ( TableBlockInfo info : tableBlockInfos ) { List < BlockInfo > tempTableBlockInfos = map . get ( info . getSegmentId ( ) ) ; if ( null == tempTableBlockInfos ) { $F9404 ( tempTableBlockInfos ) map . put ( info . getSegmentId ( ) , tempTableBlockInfos ) ; } temp = new BlockInfo ( info ) ; $F2201 ( tempTableBlockInfos , temp ) blockInfosNeedToLoad . add ( temp ) ; } return blockInfosNeedToLoad ; }
public CharBuffer put $F36827 ( str , start , end ) { $F74722 ( isReadOnly ) if ( start < NUM00 || end < start || end > str . length ( ) ) { throw new IndexOutOfBoundsException ( $F36805 ( str ) + start + NUM00 + end ) ; } if ( end - start > remaining ( ) ) { throw new BufferOverflowException $F72 ; } for ( int i = start ; i < end ; i ++ ) $F170253 ( put , str , i ) return this ; }
public List < OfferRecommendation > evaluate ( $F132403 offers ) { List < OfferRecommendation > recommendations = new ArrayList < OfferRecommendation > $F72 ; int offerResourceCount = NUM00 ; for ( Offer offer : offers ) { offerResourceCount += offer . getResourcesCount ( ) ; for ( Resource toDestroy : selectUnexpectedResources ( expectedPersistentVolumeIds , getPersistentVolumesById ( offer ) ) ) { recommendations . add ( new DestroyOfferRecommendation ( offer , toDestroy ) ) ; } } $F2199 ( destroyRecommendationCount , recommendations ) for ( Offer offer : offers ) { for ( Resource toUnreserve : selectUnexpectedResources ( expectedReservedResourceIds , getReservedResourcesById ( offer ) ) ) { recommendations . add ( new UnreserveOfferRecommendation ( offer , toUnreserve ) ) ; } } logger . info ( NUM00 , offers . size ( ) , offerResourceCount , destroyRecommendationCount , recommendations . size ( ) - destroyRecommendationCount ) ; return recommendations ; }
$F1 public int update ( ByteBuffer inBuffer , ByteBuffer outBuffer ) throws ShortBufferException { return cipher . update ( inBuffer , outBuffer ) ; }
boolean displayContextAssump ( NodeRepresentation rep , int i ) { return rep . isCreated || ( ( ! state . splitChosen ( ) ) && showContextValue ) ; }
private void unregisterMBeans $F72 { List $F50005 unregistered = new ArrayList $F50005 $F72 ; for ( ObjectName name : mbeans ) { try { mbeanserver . unregisterMBean ( name ) ; unregistered . add ( name ) ; } catch ( JMException e ) $F845 } mbeans . removeAll ( unregistered ) ; }
public static void main $F4374 ( argv ) throws $F35763 { Scanner s = new HTMLScanner $F72 ; Reader r = new InputStreamReader ( System . in , NUM00 ) ; Writer w = new OutputStreamWriter ( System . out , NUM00 ) ; PYXWriter pw = new PYXWriter ( w ) ; s . scan ( r , pw ) ; $F59 ( w ) }
private void createAmpResultStreamMethod ( JavaClass jClass , Method method , int resultOffset ) { $F20605 ( methodName , method ) $F272051 ( parameterTypes , method ) Annotation [ ] [ ] parameterAnns = method . getParameterAnnotations ( ) ; addMethod ( method ) ; CodeWriterAttribute code = createMethodHeader ( jClass , method ) ; code . setMaxLocals ( NUM00 + NUM00 * parameterTypes . length ) ; code . setMaxStack ( NUM00 + NUM00 * parameterTypes . length ) ; code . pushObjectVar ( NUM00 ) ; code . getField ( jClass . getThisClass ( ) , NUM00 , MessageFactoryAmp . class ) ; $F40997 ( argLen , parameterTypes ) code . pushObjectVar ( getLength ( parameterTypes , resultOffset ) + NUM00 ) ; long timeout = _defaultTimeout ; code . pushConstant ( timeout ) ; code . pushObjectVar ( NUM00 ) ; code . getField ( jClass . getThisClass ( ) , NUM00 , ServiceRefAmp . class ) ; code . pushObjectVar ( NUM00 ) ; code . getField ( jClass . getThisClass ( ) , fieldName ( method ) , MethodAmp . class ) ; partitionMethod ( code , parameterTypes , parameterAnns ) ; pushParameters ( code , parameterTypes , parameterAnns , NUM00 , NUM00 , argLen + NUM00 , resultOffset ) ; code . invokeInterface ( MessageFactoryAmp . class , NUM00 , $F78753 , ResultStream . class , $F41237 , ServiceRefAmp . class , MethodAmp . class , $F22453 ) ; code . addReturn ( ) ; $F59 ( code ) }
private static synchronized void endTransaction ( Connection C , boolean successful ) throws AdeException { $F1932 ( logger ) try { if ( successful ) $F19092 ( C ) else $F21746 ( C ) C . setAutoCommit ( _BOOL ) ; } catch ( Throwable t ) { surfaceThrowable ( NUM00 , t ) ; throw adeExceptionOf ( t ) ; } $F1932 ( logger ) }
public $F1986 estimateL2DistanceSquared ( Datum queryDatum ) { RealVector vector = queryDatum . metrics ( ) ; $F1993 ( estimates ) for ( $F119 ( i , k ) ) { double deltaLo = vector . getEntry ( i ) - this . boundaries [ i ] [ NUM00 ] ; double deltaHi = this . boundaries [ i ] [ NUM00 ] - vector . getEntry ( i ) ; double sqDeltaLo = deltaLo * deltaLo ; double sqDeltaHi = deltaHi * deltaHi ; if ( deltaLo < NUM00 || deltaHi < NUM00 ) { if ( sqDeltaHi < sqDeltaLo ) { estimates [ NUM00 ] += sqDeltaHi ; estimates [ NUM00 ] += sqDeltaLo ; } else { estimates [ NUM00 ] += sqDeltaLo ; estimates [ NUM00 ] += sqDeltaHi ; } } else { estimates [ NUM00 ] += Math . max ( sqDeltaHi , sqDeltaLo ) ; } } return estimates ; }
private void deserializeClass ( File file ) throws RuntimeException { try { $F4647 ( in , file ) $F67402 ( objIn , in ) $F67404 ( o , objIn ) $F59 ( in ) } catch ( ClassNotFoundException e ) { throw new RuntimeException ( NUM00 + NUM00 + file + NUM00 + NUM00 + NUM00 , e ) ; } catch ( IOException e ) { throw new RuntimeException ( NUM00 + NUM00 + file + NUM00 , e ) ; } }
public boolean calculateTaxTotal $F72 { $F22806 ( log ) DB . executeUpdateEx ( NUM00 + getC_Invoice_ID ( ) , get_TrxName ( ) ) ; m_taxes = null ; BigDecimal totalLines = Env . ZERO ; $F15277 ( taxList ) MInvoiceLine [ ] lines = getLines ( _BOOL ) ; for ( $F1139 ( i , lines ) ) { MInvoiceLine line = lines [ i ] ; if ( ! taxList . contains ( line . getC_Tax_ID ( ) ) ) { MInvoiceTax iTax = MInvoiceTax . get ( line , getPrecision ( ) , _BOOL , get_TrxName ( ) ) ; if ( iTax != null ) { iTax . setIsTaxIncluded ( isTaxIncluded ( ) ) ; if ( ! iTax . calculateTaxFromLines ( ) ) return _BOOL ; $F45240 ( iTax ) taxList . add ( line . getC_Tax_ID ( ) ) ; } } totalLines = totalLines . add ( line . getLineNetAmt ( ) ) ; } BigDecimal grandTotal = totalLines ; MInvoiceTax [ ] taxes = getTaxes ( _BOOL ) ; for ( $F1139 ( i , taxes ) ) { MInvoiceTax iTax = taxes [ i ] ; MTax tax = iTax . getTax ( ) ; if ( tax . isSummary ( ) ) { MTax [ ] cTaxes = tax . getChildTaxes ( _BOOL ) ; for ( $F1139 ( j , cTaxes ) ) { MTax cTax = cTaxes [ j ] ; BigDecimal taxAmt = cTax . calculateTax ( iTax . getTaxBaseAmt ( ) , isTaxIncluded ( ) , getPrecision ( ) ) ; MInvoiceTax newITax = new MInvoiceTax ( getCtx ( ) , NUM00 , get_TrxName ( ) ) ; newITax . setClientOrg ( this ) ; newITax . setC_Invoice_ID ( getC_Invoice_ID ( ) ) ; newITax . setC_Tax_ID ( cTax . getC_Tax_ID ( ) ) ; newITax . setPrecision ( getPrecision ( ) ) ; newITax . setIsTaxIncluded ( isTaxIncluded ( ) ) ; newITax . setTaxBaseAmt ( iTax . getTaxBaseAmt ( ) ) ; newITax . setTaxAmt ( taxAmt ) ; newITax . saveEx ( get_TrxName ( ) ) ; if $F931 ( isTaxIncluded ) $F10950 ( grandTotal , taxAmt ) } iTax . deleteEx ( _BOOL , get_TrxName ( ) ) ; } else { if $F931 ( isTaxIncluded ) grandTotal = grandTotal . add ( iTax . getTaxAmt ( ) ) ; } } setTotalLines ( totalLines ) ; setGrandTotal ( grandTotal ) ; return _BOOL ; }
private boolean canOpen $F72 { for ( final INaviProject project : m_projects ) { if ( project . isLoaded ( ) ) { return _BOOL ; } } return _BOOL ; }
public static Array listWithQuotesToArray $F1947 ( list , delimiter , quotes ) { $F7780 ( list ) $F1749 ( len , list ) int last = NUM00 ; $F7782 ( del , delimiter ) $F7782 ( quo , quotes ) char c ; char inside = NUM00 ; ArrayImpl array = new ArrayImpl $F72 ; try { for ( $F119 ( i , len ) ) { c = list . charAt ( i ) ; for ( $F1139 ( y , quo ) ) { if ( c == quo [ y ] ) { if ( c == inside ) inside = NUM00 ; else if ( inside == NUM00 ) inside = c ; $F598 } } for ( $F1139 ( y , del ) ) { if ( inside == NUM00 && c == del [ y ] ) { array . _append ( list . substring ( last , i ) ) ; last = i + NUM00 ; $F597 } } } if ( last <= len ) $F13047 ( array , list , last ) } catch ( ExpressionException e ) $F845 return array ; }
public MLOutput execute ( String dmlScriptFilePath , $F5 argsName , $F5 argsValues , String configFilePath ) throws IOException , DMLException , ParseException { $F144226 ( newNamedArgs ) if $F15256 ( argsName , argsValues ) { throw new DMLException ( $F10533 ( argsName ) + NUM00 ) ; } for ( $F2277 ( i , argsName ) ) { $F1729 ( k , argsName , i ) $F1729 ( v , argsValues , i ) newNamedArgs . put ( k , v ) ; } return execute ( dmlScriptFilePath , newNamedArgs , configFilePath ) ; }
public boolean isInMemoryDb $F72 { $F84030 ( path , MEMORY_DB_PATH ) }
private static boolean testSpecificValue $F12359 ( x , y , expectedValue , interpValue ) { logger . info ( $F3905 ( x , y , expectedValue , interpValue ) ) ; boolean specificValueInterpUseful = _BOOL ; if ( interpValue > expectedValue + NUM00 || interpValue < expectedValue - NUM00 ) specificValueInterpUseful = _BOOL ; return specificValueInterpUseful ; }
public InputSource resolveEntity ( String publicId , String systemId ) throws $F55616 { hasDTD = _BOOL ; String dtd = UtilProperties . getSplitPropertyValue ( UtilURL . fromResource ( NUM00 ) , publicId ) ; if $F35028 ( UtilValidate , dtd ) { if $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + systemId + NUM00 + dtd + NUM00 , module ) ; try { URL dtdURL = UtilURL . fromResource ( dtd ) ; if ( dtdURL == null ) { throw new GeneralException ( NUM00 + dtd ) ; } $F35900 ( dtdStream , dtdURL ) $F77995 ( inputSource , dtdStream ) inputSource . setPublicId ( publicId ) ; hasDTD = _BOOL ; if $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + dtd + NUM00 , module ) ; return inputSource ; } catch ( Exception e ) $F1824 ( Debug , e , module ) } else { $F24867 ( lastSlash , systemId ) String filename = null ; if ( lastSlash == - NUM00 ) { filename = systemId ; } else $F78003 ( filename , systemId , lastSlash ) URL resourceUrl = UtilURL . fromResource ( filename ) ; if ( resourceUrl != null ) { $F35900 ( resStream , resourceUrl ) $F77995 ( inputSource , resStream ) if $F35028 ( UtilValidate , publicId ) { inputSource . setPublicId ( publicId ) ; } hasDTD = _BOOL ; if $F2907 ( Debug ) Debug . logVerbose ( NUM00 + publicId + NUM00 + filename + NUM00 , module ) ; return inputSource ; } else { Debug . logWarning ( NUM00 + publicId + NUM00 + filename + NUM00 , module ) ; $F1274 } } return defaultResolver . resolveEntity ( publicId , systemId ) ; }
$F1 public String leaveDTD $F72 { if ( _writer == _dtdWriter ) { _line . append ( _text ) ; _text = new StringBuffer $F989 ; flushLine ( _BOOL ) ; _writer = _docWriter ; $F92 ( _dtdWriter ) } $F1274 }
private static ClassNode loadClass ( String name , Config config ) throws Exception { String filePath = config . getClassDumpPath ( ) + $F2934 ( name ) + NUM00 ; ClassReader reader = new ClassReader $F18079 ( filePath ) ; ClassNode node = new ClassNode $F72 ; reader . accept ( node , ClassReader . EXPAND_FRAMES ) ; return node ; }
public void write $F21196 ( cbuf , off , len ) throws IOException $F21537 ( internalOut , cbuf , off , len )
public void add ( final String clazz , final String subclazz , final boolean blocked ) { entries . add ( new Entry ( clazz , subclazz , blocked ) ) ; }
private synchronized void bufferChange $F72 throws ReadFailedException { ByteBuffer current = super . getByteBuffer ( ) ; if ( null != current ) { $F725 ( current ) emptyBuffers . add ( current ) ; } int tries = NUM00 ; while ( _BOOL ) { try { ByteBuffer buffer = fullBuffers . poll ( NUM00 , TimeUnit . MILLISECONDS ) ; if ( null != buffer ) { super . setByteBuffer ( buffer ) ; $F597 } else { tries ++ ; if ( readFailed || ( tries > MAX_BUFFER_POOL_TRIES ) ) { throw new ReadFailedException $F580 ; } } } catch ( InterruptedException e ) { $F84406 ( Thread ) } } }
protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { Class c = findLoadedClass ( name ) ; $F192589 ( c , findClass , name ) if ( c == null ) $F102970 ( name ) if ( resolve ) resolveClass ( c ) ; return c ; }
$F45923 public static $F65474 max ( $F65474 [ ] ar ) { Comparable ret = ar [ NUM00 ] ; for ( $F1139 ( i , ar ) ) { if ( ret . compareTo ( ar [ i ] ) < NUM00 ) { ret = ar [ i ] ; } } return ret ; }
private void initBPRMADetails ( int C_BPartner_ID ) { rmaField . removeActionListener ( this ) ; $F213890 ( rmaField ) KeyNamePair pp = new KeyNamePair ( NUM00 , NUM00 ) ; rmaField . addItem ( pp ) ; $F104317 list = loadRMAData ( C_BPartner_ID ) ; $F104320 ( knp , list , rmaField ) $F53383 ( rmaField ) rmaField . addActionListener ( this ) ; }
protected void resetOptions $F72 { m_maxStale = NUM00 ; m_searchDirection = SELECTION_FORWARD ; m_starting = null ; m_startRange = new Range $F72 ; m_classIndex = - NUM00 ; m_totalEvals = NUM00 ; m_cacheSize = NUM00 ; m_debug = _BOOL ; }
$F1 protected void tearDown $F72 throws Exception { try $F5795 ( takeScreenShot ) $F86388 ( throwable ) $F173385 ( super ) }
$F52361 ( mCategories , mValues )
private boolean itera_connect ( PlaPointInt p_from_point , PlaPointInt p_to_point ) { ArrayList $F137739 corners = angled_connection ( p_from_point , p_to_point ) ; boolean connection_succeeded = _BOOL ; for ( $F3836 ( index , corners ) ) { PlaPointInt from_corner = corners . get ( index - NUM00 ) ; PlaPointInt to_corner = corners . get ( index ) ; TimeLimit time_limit = new TimeLimit ( s_CHECK_FORCED_TRACE_TIME_MAX ) ; while $F2137 ( from_corner , to_corner ) { PlaPointInt curr_ok_point = r_board . insert_trace ( from_corner , to_corner , pen_half_width_arr [ layer_active_no ] , layer_active_no , net_nos , clearance_class , max_shove_trace_recursion_depth , max_shove_via_recursion_depth , max_spring_over_recursion_depth , itera_settings . trace_pullt_min_move , ! is_stitch_mode , time_limit ) ; if ( curr_ok_point == null ) { r_board . undo ( null ) ; return _BOOL ; } if ( curr_ok_point . equals ( from_corner ) && itera_settings . is_automatic_neckdown ( ) ) { curr_ok_point = try_neckdown_at_end ( from_corner , to_corner ) ; } if $F1238 ( curr_ok_point , from_corner ) { prev_corner = from_corner ; connection_succeeded = _BOOL ; $F597 } from_corner = curr_ok_point ; } } return connection_succeeded ; }
private $F9341 findPredecessorOfLast $F72 { for ( $F589 ) { $F154321 ( q , head ) for ( $F589 ) { $F154319 d , r ; if ( ( r = q . right ) != null ) { if ( r . indexesDeletedNode ( ) ) { q . unlink ( r ) ; $F597 } if ( r . node . next != null ) $F34544 ( q , r ) } if ( ( d = q . down ) != null ) q = d ; else return q . node ; } } }
public boolean query ( int objectToQuery , long [ ] [ ] hashFunctions ) { for ( $F2469 h : hashFunctions ) { int i = hash ( h , ( long ) objectToQuery ) ; if $F87318 ( bitSet , i ) return _BOOL ; } return _BOOL ; }
public void clear $F72 { $F101536 ( mLock , mGraphics ) postInvalidate ( ) ; }
$F28183 public static $F2193 $F25669 createSet ( V ... values ) { $F25669 set = new LinkedHashSet $F2193 $F72 ; for ( V v : values ) $F207 ( set , v ) return set ; }
$F1 void doConstrainedOutsideScores ( Grammar grammar , boolean viterbi , boolean logScores ) { $F5078 numSubStatesArray = grammar . numSubStates ; double initVal = ( logScores ) ? Double . NEGATIVE_INFINITY : NUM00 ; for ( $F141 ( diff , length ) ) { for ( int start = NUM00 ; start + diff <= length ; start ++ ) { int end = start + diff ; $F69805 ( scoresAfterUnaries , numStates ) boolean somethingChanged = _BOOL ; for ( $F119 ( cState , numStates ) ) { if ( diff > NUM00 && ! grammar . isGrammarTag [ cState ] ) $F598 if ( ! allowedStates [ start ] [ end ] [ cState ] ) $F1448 $F55251 rules = null ; if ( viterbi ) rules = grammar . getClosedViterbiUnaryRulesByChild ( cState ) ; else rules = grammar . getClosedSumUnaryRulesByChild ( cState ) ; final int nChildStates = numSubStatesArray [ cState ] ; $F18832 ( numRules , rules ) for ( $F119 ( r , numRules ) ) { UnaryRule ur = rules [ r ] ; int pState = ur . parentState ; if ( ( pState == cState ) ) $F598 if ( ! allowedStates [ start ] [ end ] [ pState ] ) $F1448 $F55256 ( scores , ur ) final int nParentStates = numSubStatesArray [ pState ] ; for ( $F119 ( cp , nChildStates ) ) { if ( scores [ cp ] == null ) $F598 if ( ! allowedSubStates [ start ] [ end ] [ cState ] [ cp ] ) $F598 for ( $F119 ( np , nParentStates ) ) { double pS = scores [ cp ] [ np ] ; $F73688 ( pS , initVal ) $F55213 ( oS , oScore , start , end , pState , np ) $F73688 ( oS , initVal ) double thisRound = ( logScores ) ? oS + pS : oS * pS ; if ( scoresAfterUnaries [ cState ] == null ) { scoresAfterUnaries [ cState ] = new double [ numSubStatesArray [ cState ] ] ; if ( viterbi ) Arrays . fill ( scoresAfterUnaries [ cState ] , initVal ) ; } if ( viterbi ) scoresAfterUnaries [ cState ] [ cp ] = Math . max ( thisRound , scoresAfterUnaries [ cState ] [ cp ] ) ; else scoresAfterUnaries [ cState ] [ cp ] += thisRound ; somethingChanged = _BOOL ; } } } } if ( somethingChanged ) { for ( $F119 ( cState , numStates ) ) { $F42658 ( thisCell , scoresAfterUnaries , cState ) $F45557 ( thisCell ) for ( $F66767 ( cp , numSubStatesArray , cState ) ) { if ( thisCell [ cp ] > initVal ) { if ( viterbi ) oScore [ start ] [ end ] [ cState ] [ cp ] = Math . max ( oScore [ start ] [ end ] [ cState ] [ cp ] , thisCell [ cp ] ) ; else oScore [ start ] [ end ] [ cState ] [ cp ] += thisCell [ cp ] ; } } } } for ( $F1139 ( pState , numSubStatesArray ) ) { if ( ! allowedStates [ start ] [ end ] [ pState ] ) $F1448 final int nParentChildStates = numSubStatesArray [ pState ] ; $F55202 ( rules , grammar , pState ) $F18832 ( numRules , rules ) for ( $F119 ( r , numRules ) ) { BinaryRule br = rules [ r ] ; int lState = br . leftChildState ; int min1 = narrowRExtent [ start ] [ lState ] ; $F327539 ( end , min1 ) int rState = br . rightChildState ; int max1 = narrowLExtent [ end ] [ rState ] ; $F327539 ( max1 , min1 ) int min = min1 ; int max = max1 ; if ( max - min > NUM00 ) { int min2 = wideLExtent [ end ] [ rState ] ; min = ( min1 > min2 ? min1 : min2 ) ; $F327539 ( max1 , min ) int max2 = wideRExtent [ start ] [ lState ] ; max = ( max1 < max2 ? max1 : max2 ) ; $F327539 ( max , min ) } $F55210 ( scores , br ) final int nLeftChildStates = numSubStatesArray [ lState ] ; final int nRightChildStates = numSubStatesArray [ rState ] ; for ( int split = min ; split <= max ; split ++ ) { if ( ! allowedStates [ start ] [ split ] [ lState ] ) $F598 if ( ! allowedStates [ split ] [ end ] [ rState ] ) $F598 $F9662 ( rightScores , nRightChildStates ) if ( viterbi ) Arrays . fill ( rightScores , initVal ) ; Arrays . fill ( scoresToAdd , initVal ) ; somethingChanged = _BOOL ; for ( $F119 ( lp , nLeftChildStates ) ) { $F55213 ( lS , iScore , start , split , lState , lp ) $F83608 ( lS , initVal ) for ( $F119 ( rp , nRightChildStates ) ) { if $F55215 ( scores , lp , rp ) $F598 $F55213 ( rS , iScore , split , end , rState , rp ) $F83608 ( rS , initVal ) for ( $F119 ( np , nParentChildStates ) ) { $F55217 ( pS , scores , lp , rp , np ) $F73688 ( pS , initVal ) $F55213 ( oS , oScore , start , end , pState , np ) $F73688 ( oS , initVal ) double thisRoundL = ( logScores ) ? pS + rS + oS : pS * rS * oS ; double thisRoundR = ( logScores ) ? pS + lS + oS : pS * lS * oS ; if ( viterbi ) { scoresToAdd [ lp ] = Math . max ( thisRoundL , scoresToAdd [ lp ] ) ; rightScores [ rp ] = Math . max ( thisRoundR , rightScores [ rp ] ) ; } else { scoresToAdd [ lp ] += thisRoundL ; rightScores [ rp ] += thisRoundR ; } somethingChanged = _BOOL ; } } } if ( ! somethingChanged ) $F598 for ( $F119 ( cp , nLeftChildStates ) ) { if ( scoresToAdd [ cp ] > initVal ) { if ( viterbi ) oScore [ start ] [ split ] [ lState ] [ cp ] = Math . max ( oScore [ start ] [ split ] [ lState ] [ cp ] , scoresToAdd [ cp ] ) ; else oScore [ start ] [ split ] [ lState ] [ cp ] += scoresToAdd [ cp ] ; } } for ( $F119 ( cp , nRightChildStates ) ) { if ( rightScores [ cp ] > initVal ) { if ( viterbi ) oScore [ split ] [ end ] [ rState ] [ cp ] = Math . max ( oScore [ split ] [ end ] [ rState ] [ cp ] , rightScores [ cp ] ) ; else oScore [ split ] [ end ] [ rState ] [ cp ] += rightScores [ cp ] ; } } } } } } } }
public void stop $F72 { timeMonIndex = NUM00 ; setException ( ) ; Iterator iter = iter ( ) ; while $F2921 ( iter ) { HttpMonItem monItem = ( HttpMonItem ) iter . next ( ) ; monItem . stop ( this ) ; } $F42855 ( stackTrace , changeDetails ) }
public void calcMinTick $F72 { if ( minData == NUM00 ) minTick = NUM00 ; else minTick = Math . floor ( minData / majorTick ) * majorTick ; }
public static void switchTiming ( String nextPhase ) $F19529 ( stopMostRecentTimer , startTiming , nextPhase )
public $F96 encode $F72 { char type = getAttributeType ( ) ; if ( ! isTypeValid ( type ) ) throw new IllegalStateException ( $F1047 ( type ) + NUM00 ) ; byte $F8033 = new byte [ HEADER_LENGTH + getDataLength ( ) ] ; $F8045 ( binValue , type ) $F8048 ( binValue , type ) $F8052 ( binValue , getDataLength ) $F8056 ( binValue , getDataLength ) binValue [ NUM00 ] = NUM00 ; $F320194 ( binValue , getFamily ) $F8052 ( binValue , getPort ) $F8056 ( binValue , getPort ) if ( getFamily ( ) == ADDRESS_FAMILY_IPV6 ) { System . arraycopy ( getAddressBytes ( ) , NUM00 , binValue , NUM00 , NUM00 ) ; } else { System . arraycopy ( getAddressBytes ( ) , NUM00 , binValue , NUM00 , NUM00 ) ; } return binValue ; }
private void doDeleteEntry ( String alias ) throws Exception { if ( keyStore . containsAlias ( alias ) == _BOOL ) { $F22029 ( form , rb ) $F22031 ( source , alias ) throw new Exception $F22032 ( form , source ) ; } keyStore . deleteEntry ( alias ) ; }
protected Integer mapThrowableFlat ( Throwable throwable ) { $F78637 throwableClass = throwable . getClass ( ) ; $F99426 ( resId , throwableToMsgIdMap , throwableClass ) if ( resId == null ) { $F78637 closestClass = null ; Set < Entry < $F78637 , Integer > > mappings = throwableToMsgIdMap . entrySet ( ) ; for ( Entry < $F78637 , Integer > mapping : mappings ) { $F78637 candidate = mapping . getKey ( ) ; if $F62123 ( candidate , throwableClass ) { if ( closestClass == null || closestClass . isAssignableFrom ( candidate ) ) { closestClass = candidate ; $F37891 ( resId , mapping ) } } } } return resId ; }
$F1 public $F987 listOptions $F72 { $F20795 ( newVector ) $F77737 ( newVector ) $F424068 ( newVector ) $F1007 ( newVector ) }
public void assertColumnType ( ResultSet rs ) throws SQLException { $F19097 ( md , rs ) int sqlType = md . getColumnType ( mdi . getPosition ( ) ) ; assertTrue ( String . format ( NUM00 , sqlType , mdi ) , isAllowedSqlType ( sqlType ) ) ; }
private void validateDnsNames ( Set dnsNameSet ) throws PolicyException { $F10531 ( dnsNames , dnsNameSet ) while $F2921 ( dnsNames ) { $F2778 ( dnsName , dnsNames ) validateDnsName ( dnsName ) ; $F9631 ( dnsList , dnsName ) } }
public static boolean isMopMethod ( String methodName ) { return $F418 ( methodName ) && $F49413 ( methodName ) ; }
protected void init $F72 { GraphicsConfigTemplate3D template = new GraphicsConfigTemplate3D $F72 ; GraphicsEnvironment env = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice device = env . getDefaultScreenDevice ( ) ; GraphicsConfiguration config = device . getBestConfiguration ( template ) ; canvas = new Canvas3D ( config ) ; canvas . setSize ( new Dimension ( DEFAULT_DIMENSION , DEFAULT_DIMENSION ) ) ; objRootBG = new BranchGroup $F72 ; objRootBG . setCapability ( Group . ALLOW_CHILDREN_EXTEND ) ; constructWorld ( objRootBG ) ; }
private < Delegated > PresenterBinder < ? super Delegated > findPresenterBinderForClass ( Class < Delegated > clazz ) throws IllegalAccessException , InstantiationException { PresenterBinder < ? super Delegated > presenterBinder ; $F20605 ( clsName , clazz ) String className = clsName + PRESENTER_BINDER_SUFFIX ; try { $F96883 ( presenterBinderClass , Class , className ) presenterBinder = ( PresenterBinder < ? super Delegated > ) presenterBinderClass . newInstance ( ) ; } catch ( ClassNotFoundException e ) $F1337 return presenterBinder ; }
$F1 final $F9341 find ( int h , Object k ) { if ( k != null ) { for ( $F9341 e = first ; e != null ; ) { int s ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { if ( e . hash == h && isEqual ( ( K ) k , e . key , myHashingStrategy ) ) { return e ; } e = e . next ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { $F35195 ( r , p ) try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; } finally { int ls ; do $F845 while ( ! U . compareAndSwapInt ( this , LOCKSTATE , ls = lockState , ls - READER ) ) ; Thread w ; if ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) { LockSupport . unpark ( w ) ; } } return p ; } } } $F1274 }
public void square $F7635 ( x , y , r ) { $F30465 ( r ) double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM00 * r ) ; double hs = factorY ( NUM00 * r ) ; if ( ws <= NUM00 && hs <= NUM00 ) pixel ( x , y ) ; else offscreen . draw ( new $F1634 ( xs - ws / NUM00 , ys - hs / NUM00 , ws , hs ) ) ; draw ( ) ; }
$F41720 ( value , absMin , absMax , absValue , Math )
private int lowerHeightMap $F14337 ( x , y , z ) { for ( -- y ; y >= NUM00 ; -- y ) { if ( getType ( x , z , y ) != NUM00 ) $F5153 } return y + NUM00 ; }
public String toString $F72 { $F8755 ( result ) for ( $F2277 ( i , intervalls ) ) result . append ( intervalls . elementAt ( i ) ) ; $F84 ( result ) $F92 ( result ) }
public void remove ( $F1113 StatusNotification notification ) { stack . remove ( notification ) ; onClose ( notification ) ; }
private JobDefinitionEntity createOrUpdateJobDefinitionEntity ( JobDefinitionEntity jobDefinitionEntity , NamespaceEntity namespaceEntity , String jobName , String description , String activitiId , $F292037 parameters , S3PropertiesLocation s3PropertiesLocation ) { JobDefinitionEntity jobDefinitionEntityLocal = jobDefinitionEntity ; if ( jobDefinitionEntityLocal == null ) { jobDefinitionEntityLocal = new JobDefinitionEntity $F72 ; } jobDefinitionEntityLocal . setName ( jobName ) ; jobDefinitionEntityLocal . setNamespace ( namespaceEntity ) ; jobDefinitionEntityLocal . setDescription ( description ) ; jobDefinitionEntityLocal . setActivitiId ( activitiId ) ; String bucketName = null ; String key = null ; if ( s3PropertiesLocation != null ) { bucketName = s3PropertiesLocation . getBucketName ( ) ; $F76754 ( key , s3PropertiesLocation ) } jobDefinitionEntityLocal . setS3BucketName ( bucketName ) ; jobDefinitionEntityLocal . setS3ObjectKey ( key ) ; List < JobDefinitionParameterEntity > $F204 ( parameterEntities ) ; if $F20899 ( CollectionUtils , parameters ) { for ( Parameter parameter : parameters ) { JobDefinitionParameterEntity parameterEntity = new JobDefinitionParameterEntity $F72 ; parameterEntities . add ( parameterEntity ) ; $F69429 ( parameterEntity , parameter ) parameterEntity . setValue ( parameter . getValue ( ) ) ; } } jobDefinitionEntityLocal . setParameters ( parameterEntities ) ; return jobDefinitionEntityLocal ; }
public void find ( int index , float weightLoss , float moveCost , ArrayList < DbEntry > itemsPlaced ) { if ( ( weightLoss >= lowestWeightLoss ) || ( ( weightLoss == lowestWeightLoss ) && ( moveCost >= lowestMoveCost ) ) ) $F932 else if $F6389 ( index , itemsToPlace ) { lowestWeightLoss = weightLoss ; lowestMoveCost = moveCost ; finalPlacedItems = deepCopy ( itemsPlaced ) ; $F665 } DbEntry me = itemsToPlace . get ( index ) ; int myX = me . cellX ; int myY = me . cellY ; ArrayList < DbEntry > itemsIncludingMe = new $F201 ( $F2958 ( itemsPlaced ) ) ; itemsIncludingMe . addAll ( itemsPlaced ) ; itemsIncludingMe . add ( me ) ; if ( me . spanX > NUM00 || me . spanY > NUM00 ) { int myW = me . spanX ; int myH = me . spanY ; for ( $F119 ( y , mTrgY ) ) { for ( $F119 ( x , mTrgX ) ) { float newMoveCost = moveCost ; if ( x != myX ) { me . cellX = x ; newMoveCost ++ ; } if ( y != myY ) { me . cellY = y ; newMoveCost ++ ; } $F65989 ( ignoreMove , newMoveCost , moveCost ) if ( isVacant ( occupied , x , y , myW , myH ) ) { markCells ( occupied , me , _BOOL ) ; find ( index + NUM00 , weightLoss , newMoveCost , itemsIncludingMe ) ; markCells ( occupied , me , _BOOL ) ; } if ( myW > me . minSpanX && isVacant ( occupied , x , y , myW - NUM00 , myH ) ) { me . spanX -- ; markCells ( occupied , me , _BOOL ) ; find ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; markCells ( occupied , me , _BOOL ) ; me . spanX ++ ; } if ( myH > me . minSpanY && isVacant ( occupied , x , y , myW , myH - NUM00 ) ) { me . spanY -- ; markCells ( occupied , me , _BOOL ) ; find ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; markCells ( occupied , me , _BOOL ) ; me . spanY ++ ; } if ( myH > me . minSpanY && myW > me . minSpanX && isVacant ( occupied , x , y , myW - NUM00 , myH - NUM00 ) ) { me . spanX -- ; me . spanY -- ; markCells ( occupied , me , _BOOL ) ; find ( index + NUM00 , weightLoss , newMoveCost + NUM00 , itemsIncludingMe ) ; markCells ( occupied , me , _BOOL ) ; me . spanX ++ ; me . spanY ++ ; } me . cellX = myX ; me . cellY = myY ; } } find ( index + NUM00 , weightLoss + me . weight , moveCost , itemsPlaced ) ; } else { int newDistance = Integer . MAX_VALUE ; int newX = Integer . MAX_VALUE , newY = Integer . MAX_VALUE ; for ( $F119 ( y , mTrgY ) ) { for ( $F119 ( x , mTrgX ) ) { if ( ! occupied [ x ] [ y ] ) { int dist = ignoreMove ? NUM00 : ( ( me . cellX - x ) * ( me . cellX - x ) + ( me . cellY - y ) * ( me . cellY - y ) ) ; if ( dist < newDistance ) { newX = x ; newY = y ; newDistance = dist ; } } } } if ( newX < mTrgX && newY < mTrgY ) { float newMoveCost = moveCost ; if ( newX != myX ) { me . cellX = newX ; newMoveCost ++ ; } if ( newY != myY ) { me . cellY = newY ; newMoveCost ++ ; } $F65989 ( ignoreMove , newMoveCost , moveCost ) markCells ( occupied , me , _BOOL ) ; find ( index + NUM00 , weightLoss , newMoveCost , itemsIncludingMe ) ; markCells ( occupied , me , _BOOL ) ; me . cellX = myX ; me . cellY = myY ; if ( index + NUM00 < itemsToPlace . size ( ) && itemsToPlace . get ( index + NUM00 ) . weight >= me . weight && ! ignoreMove ) { find ( index + NUM00 , weightLoss + me . weight , moveCost , itemsPlaced ) ; } } else { for ( $F2290 ( i , index , itemsToPlace ) ) { weightLoss += itemsToPlace . get ( i ) . weight ; } find ( itemsToPlace . size ( ) , weightLoss + me . weight , moveCost , itemsPlaced ) ; } } }
$F133772 ( RequestMethod ) $F4586 public RestWrapper insert ( $F100302 $F100303 Users users , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { String hashedPassword = DigestUtils . sha1Hex ( users . getPassword ( ) ) ; com . wipro . ats . bdre . md . dao . jpa . Users jpaUsers = new com . wipro . ats . bdre . md . dao . jpa . Users $F72 ; jpaUsers . setPassword ( hashedPassword ) ; jpaUsers . setUsername ( users . getUsername ( ) ) ; jpaUsers . setEnabled ( ( users . getEnabled ( ) == NUM00 ) ? _BOOL : _BOOL ) ; usersDAO . insert ( jpaUsers ) ; $F4608 ( restWrapper , users , RestWrapper ) LOGGER . info ( NUM00 + users . getUsername ( ) + NUM00 + principal . getName ( ) + users ) ; } $F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
public static String cappedInt ( final long val ) { if ( val >= Integer . MAX_VALUE ) { return OVER ; } else if ( val <= Integer . MIN_VALUE ) { return UNDER ; } $F23209 ( Long , val ) }
private void createFromAssets ( String myDBName , File dbfile , InputStream assetFileInputStream ) { OutputStream out = null ; try { $F22814 ( dbPath , dbfile ) dbPath = dbPath . substring ( NUM00 , $F31603 ( dbPath ) ) ; $F1705 ( dbPathFile , dbPath ) if $F1906 ( dbPathFile ) $F1907 ( dbPathFile ) $F43662 ( newDbFile , dbPath , myDBName ) $F10893 ( out , newDbFile ) $F12496 ( buf ) int len ; while $F87061 ( len , assetFileInputStream , buf ) $F11584 ( out , buf , len ) Log . v ( NUM00 , $F4929 ( newDbFile ) ) ; } catch ( IOException ex ) { Log . v ( NUM00 , $F5351 ( ex ) ) ; } finally $F25132 ( out ) }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return PERSON_PROPERTY ; $F3366 return PAGE_PROPERTY ; $F3366 return EQUIV ; $F3366 return PAGE_VIEW ; $F20809 } }
protected String internalPut ( String key , String newValue ) { synchronized ( childAndPropertyLock ) { $F1729 ( oldValue , properties , key ) if $F1256 ( oldValue , newValue ) return oldValue ; properties = properties . put ( key , newValue ) ; return oldValue ; } }
public Polyline ( PlaPointInt p_from_corner , PlaPointInt p_to_corner ) { if $F1238 ( p_from_corner , p_to_corner ) $F70401 ( classname ) lines_list = new ArrayList $F66714 $F989 ; PlaDirection dir = new PlaDirection ( p_from_corner , p_to_corner ) ; lines_list . add ( new PlaLineInt ( p_from_corner , dir . rotate_45_deg ( NUM00 ) ) ) ; lines_list . add ( new PlaLineInt ( p_from_corner , p_to_corner ) ) ; lines_list . add ( new PlaLineInt ( p_to_corner , dir . rotate_45_deg ( NUM00 ) ) ) ; corners_allocate ( corner_count ( ) ) ; precalculated_corners [ NUM00 ] = p_from_corner ; precalculated_corners [ NUM00 ] = p_to_corner ; }
protected boolean isOnSameScreenAsChildren $F72 { return _BOOL ; }
public static String formatPrice ( Double price ) { $F1747 ( price ) return formatPrice ( price . doubleValue ( ) ) ; }
static void checkLogDir $F72 { if ( System . getProperty ( NUM00 ) == null ) $F21338 ( log ) }
private static boolean isMoreAbove ( String src , int index ) { int ch ; int cc ; $F1749 ( len , src ) for ( int i = index + Character . charCount ( src . codePointAt ( index ) ) ; i < len ; i += Character . charCount ( ch ) ) { ch = src . codePointAt ( i ) ; cc = Normalizer . getCombiningClass ( ch ) ; if ( cc == COMBINING_CLASS_ABOVE ) { return _BOOL ; } else $F6482 ( cc , _BOOL ) } return _BOOL ; }
public void restoreKey ( String key ) { if $F14072 ( key ) { $F130950 ( originalKey , key , keyTestMode ) Object value = get ( key ) ; put ( originalKey , value ) ; clear ( key ) ; } }
public boolean hasUnsupportedCriticalExtension $F72 { Set extns = getCriticalExtensionOIDs ( ) ; $F1933 ( extns , _BOOL ) extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; $F3386 ( extns ) }
public static void writeInt ( DataOutput out , int v ) throws IOException { out . writeByte ( NUM00 & v ) ; out . writeByte ( $F223664 ( v ) ) ; out . writeByte ( $F223664 ( v ) ) ; out . writeByte ( $F223664 ( v ) ) ; }
public static $F173034 sortCopy ( $F173034 objects ) { int len = objects . length ; $F173034 copy = new Comparable [ len ] ; $F135 ( System , objects , copy , len ) sort ( copy ) ; return copy ; }
private Utf8Constant parseUtf8Constant ( int index ) throws IOException { int length = readShort ( ) ; $F83 ( cb ) for ( $F119 ( i , length ) ) { int ch = read ( ) ; if ( ch < NUM00 ) $F46352 ( cb , ch ) else if $F14827 ( ch ) { int ch2 = read ( ) ; i ++ ; cb . append ( ( char ) ( $F186272 ( ch , ch2 ) ) ) ; } else { int ch2 = read ( ) ; int ch3 = read ( ) ; i += NUM00 ; cb . append ( ( char ) ( $F74254 ( ch ) + $F74254 ( ch2 ) + ( ( ch3 & NUM00 ) ) ) ) ; } } return new Utf8Constant ( _class . getConstantPool ( ) , index , cb . toString ( ) ) ; }
$F1 public boolean markNextSequence $F72 throws IOException { if ( mSeqSize < mLimit && mPointerSize + mPointerEntrySize <= mLimit ) { mPointers . writeByte ( ( int ) mChecksumSeq . getValue ( ) ) ; $F2268 ( mChecksumSeq ) if ( mChecksumQual != null ) { mPointers . writeByte ( ( int ) mChecksumQual . getValue ( ) ) ; $F2268 ( mChecksumQual ) } mPointers . writeInt ( ( int ) mSeqSize ) ; mPointerSize += mPointerEntrySize ; return _BOOL ; } return _BOOL ; }
public final double sampleActiveCount $F72 $F1522 ( _activeCount )
private void preprocessData ( Map < Integer , Map < Integer , $F3807 > > knotenVonSpurNachSpurMapping , Map < Integer , $F20666 > knotenSpurLinkMapping ) { preprocessKnotenSpurLinkMapping ( knotenSpurLinkMapping ) ; cleanKnotenVonSpurNachSpurMapping ( knotenVonSpurNachSpurMapping , knotenSpurLinkMapping ) ; mergeLanesOnSameLink ( knotenVonSpurNachSpurMapping , knotenSpurLinkMapping ) ; }
$F1 public boolean mutate ( TestCase test , TestFactory factory ) { if ( Randomness . nextDouble ( ) >= Properties . P_CHANGE_PARAMETER ) return _BOOL ; if $F931 ( isStatic ) { VariableReference source = getSource ( ) ; List < VariableReference > objects = test . getObjects ( source . getType ( ) , getPosition ( ) ) ; objects . remove ( source ) ; if $F5973 ( objects ) { setSource ( Randomness . choice ( objects ) ) ; return _BOOL ; } } return _BOOL ; }
$F1 protected void drawXLabels $F31491 ( xLabels , xTextLabelLocations , canvas , paint , left , top , bottom , xPixelsPerUnit , minX , maxX ) { $F2199 ( length , xLabels ) if ( length > NUM00 ) { $F31493 ( showLabels , mRenderer ) $F31495 ( showGridY , mRenderer ) $F31497 ( showTickMarks , mRenderer ) DateFormat format = getDateFormat ( xLabels . get ( NUM00 ) , xLabels . get ( length - NUM00 ) ) ; for ( $F119 ( i , length ) ) { long label = Math . round ( xLabels . get ( i ) ) ; $F31501 ( xLabel , left , xPixelsPerUnit , label , minX ) if ( showLabels ) { $F31503 ( paint , mRenderer ) $F31510 ( showTickMarks , canvas , xLabel , bottom , mRenderer , paint ) drawText ( canvas , format . format ( new Date ( label ) ) , xLabel , $F31515 ( bottom , mRenderer ) , paint , mRenderer . getXLabelsAngle ( ) ) ; } $F31525 ( showGridY , paint , mRenderer , canvas , xLabel , bottom , top ) } } drawXTextLabels ( xTextLabelLocations , canvas , paint , _BOOL , left , top , bottom , xPixelsPerUnit , minX , maxX ) ; }
public XPath ( String exprString , SourceLocator locator , PrefixResolver prefixResolver , int type ) throws $F1872 { this ( exprString , locator , prefixResolver , type , null ) ; }
private void addMenuItem ( JPopupMenu menu , String title , MWFNode node , int AD_WF_NodeTo_ID ) { WFPopupItem item = new WFPopupItem ( title , node , AD_WF_NodeTo_ID ) ; menu . add ( item ) ; item . addActionListener ( this ) ; }
public synchronized long allocate ( int length ) { int blocks = getBlockCount ( length ) ; BlockRange x = null ; for ( BlockRange b : freeSpace ) { if ( b . blocks >= blocks ) $F3468 ( x , b ) } long pos = getPos ( x . start ) ; if ( x . blocks == blocks ) $F106 ( freeSpace , x ) else { x . start += blocks ; x . blocks -= blocks ; } return pos ; }
public JenkinsHttpClient ( URI uri , String username , String password ) { this ( uri ) ; if ( isNotBlank ( username ) ) { CredentialsProvider provider = client . getCredentialsProvider ( ) ; AuthScope scope = new AuthScope ( uri . getHost ( ) , uri . getPort ( ) , AuthScope . ANY_REALM ) ; UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ; provider . setCredentials ( scope , credentials ) ; localContext = new BasicHttpContext $F72 ; localContext . setAttribute ( NUM00 , new BasicScheme $F72 ) ; client . addRequestInterceptor ( new PreemptiveAuth $F72 , NUM00 ) ; } }
public static Set combineOCs ( Set one , Set two ) { $F34929 ( one , two ) $F34929 ( two , one ) $F19850 ( resultSet ) $F10531 ( itr1 , one ) while $F2921 ( itr1 ) { $F2778 ( value1 , itr1 ) $F9631 ( resultSet , value1 ) } $F10531 ( itr2 , two ) while $F2921 ( itr2 ) { $F2778 ( value2 , itr2 ) $F9631 ( resultSet , value2 ) } return resultSet ; }
private String wrap ( String str ) { $F7542 ( buf , str ) int len = lineLength ; while $F7007 ( len , buf ) { $F99139 ( idx , buf , len ) if ( idx != - NUM00 ) { buf . replace ( idx , idx + NUM00 , breaker ) ; len = idx + breaker . length ( ) + lineLength ; } else { buf . insert ( len , breaker ) ; len += breaker . length ( ) + lineLength ; } } $F2864 ( buf ) $F92 ( buf ) }
public EchoStateNetwork commitChanges $F72 { Network net = networkPanel . getNetwork ( ) ; Integer numIns = Utils . parseInteger ( tfInputLayerPop ) ; $F826 ( numIns ) NeuronGroup inputLayer = new NeuronGroup ( net , numIns ) ; if ( inputLayer . size ( ) > inputLayer . getGridThreshold ( ) ) { inputLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; } inputLayer . applyLayout ( ) ; NeuronGroup reservoirLayer = reservoirPanel . createLayerFromData ( ) ; if ( reservoirLayer . size ( ) > reservoirLayer . getGridThreshold ( ) ) { reservoirLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; } reservoirLayer . applyLayout ( ) ; SynapseGroup resSynapses = resToResPanel . createSynapseGroup ( reservoirLayer , reservoirLayer ) ; resSynapses . setLabel ( NUM00 ) ; NeuronGroup outputLayer = outputPanel . createLayerFromData ( ) ; outputLayer . applyLayout ( ) ; if ( outputLayer . size ( ) > outputLayer . getGridThreshold ( ) ) { outputLayer . setLayout ( new org . simbrain . network . layouts . GridLayout $F72 ) ; } EchoStateNetwork esn = new EchoStateNetwork ( net , networkPanel . getLastClickedPosition ( ) ) ; esn . setBackWeights ( allowOutToRes . isSelected ( ) ) ; esn . setDirectInOutWeights ( directInputToOutput . isSelected ( ) ) ; esn . setRecurrentOutWeights ( allowRecurrentOutputs . isSelected ( ) ) ; esn . setTimeType ( ( TimeType ) cbTimeType . getSelectedItem ( ) ) ; double maxEig = Utils . doubleParsable ( spectralRadius ) ; if $F35707 ( Double , maxEig ) $F825 esn . initializeInputLayer ( inputLayer ) ; esn . initializeReservoir ( reservoirLayer , resSynapses , maxEig ) ; esn . initializeOutput ( outputLayer ) ; SynapseGroup itr = inToResPanel . createSynapseGroup ( inputLayer , reservoirLayer ) ; itr . setLabel ( NUM00 ) ; esn . addSynapseGroup ( itr ) ; SynapseGroup rto = SynapseGroup . createSynapseGroup ( reservoirLayer , outputLayer , NUM00 ) ; rto . setLabel ( NUM00 ) ; esn . addSynapseGroup ( rto ) ; if $F31483 ( allowRecurrentOutputs ) { SynapseGroup oto = SynapseGroup . createSynapseGroup ( outputLayer , outputLayer , NUM00 ) ; oto . setLabel ( NUM00 ) ; esn . addSynapseGroup ( oto ) ; } if $F31483 ( allowOutToRes ) { SynapseGroup otr = outToResPanel . createSynapseGroup ( outputLayer , reservoirLayer ) ; otr . setLabel ( NUM00 ) ; esn . addSynapseGroup ( otr ) ; } if $F31483 ( directInputToOutput ) { SynapseGroup ito = SynapseGroup . createSynapseGroup ( inputLayer , outputLayer , NUM00 ) ; ito . setLabel ( NUM00 ) ; esn . addSynapseGroup ( ito ) ; } esn . positionLayers ( ) ; return esn ; }
public static double pdf $F7635 ( x , shape , scale ) { if ( x < NUM00 ) $F1082 if ( x == NUM00 ) { if ( shape == NUM00 ) return NUM00 / scale ; else $F1082 } if ( shape == NUM00 ) return NUM00 / x ; if ( shape == - NUM00 ) { $F41531 ( Math , x ) } final double xs = x / scale ; if ( shape == NUM00 ) { return Math . exp ( - xs ) / scale ; } final double a = Math . exp ( $F207655 ( shape , Math , xs ) - xs - GammaFunction . lnGamma ( shape ) ) ; return a / scale ; }
public void flush $F72 { synchronized ( list ) { int n = NUM00 ; long m = NUM00 ; for ( T b : list ) { if ( halt ) throw new RuntimeException $F27748 ( firstCause ) ; $F11550 ( size , b ) final long counter = b . flush ( ) ; m += counter ; if ( DEBUG ) $F8922 ( log , size , counter ) } if ( INFO ) $F8817 ( log , n , m ) } }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void logInfo ( String message ) { logger . info ( logPrefix + message ) ; }
private boolean matchAddress $F3295 ( remoteMask ) { if ( ruleType == RuleType . ALLWILDCARD ) { return _BOOL ; } $F1933 ( prefixMask , _BOOL ) $F164288 ( remoteMask , prefixMask , _BOOL ) for ( $F1139 ( i , prefixMask ) ) { if ( ! wildCard . get ( i ) && ( ruleMask [ i ] & prefixMask [ i ] ) != ( remoteMask [ i ] & prefixMask [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
public static String sign ( String signingString , PrivateKey privateKey ) throws InvalidKeyException , SignatureException { $F96 bytes = $F43004 ( signingString , StandardCharsets ) ; Signature sig ; try $F25343 ( sig , Signature , SHA256_WITH_RSA ) catch ( NoSuchAlgorithmException e ) $F78550 ( e ) sig . initSign ( privateKey ) ; sig . update ( bytes ) ; return Hex . encodeHexString ( sig . sign ( ) ) ; }
public Object invoke ( Method method , Object target , ExtensionContext extensionContext , ExtensionRegistry extensionRegistry ) { $F1431 Optional $F1432 optionalTarget = ( target instanceof Optional ? ( Optional $F1432 ) target : Optional . ofNullable ( target ) ) ; return ReflectionUtils . invokeMethod ( method , target , resolveParameters ( method , optionalTarget , extensionContext , extensionRegistry ) ) ; }
$F91084
RegisteredProject putProject ( ProjectConfig config , FolderEntry folder , boolean updated , boolean detected ) throws ServerException , ConflictException , NotFoundException { final RegisteredProject project = new RegisteredProject ( folder , config , updated , detected , this . projectTypeRegistry ) ; projects . put ( project . getPath ( ) , project ) ; return project ; }
protected void tearDown $F72 { try $F4650 ( ds , sds ) $F3957 }
$F1 public void removeListener ( final IZyNodeRealizerListener $F1011 listener ) { m_listeners . removeListener ( listener ) ; }
protected void assertResultRowCount ( int expected , ResultSet rs ) throws SQLException { int i = NUM00 ; while $F1682 ( rs ) { i ++ ; } assertEquals ( expected , i ) ; }
private boolean isModelUseful ( ContingencyMatrix cm ) { for ( int row = NUM00 ; row < cm . getNumberOfPredictions ( ) ; row ++ ) { for ( int col = NUM00 ; col < cm . getNumberOfClasses ( ) ; col ++ ) { if ( Math . abs ( cm . getLift ( row , col ) - NUM00 ) > MIN_ADVANTAGE ) { return _BOOL ; } } } return _BOOL ; }
public void scan ( ClassNode cn ) { List < ThreatResult > threats = new ArrayList < ThreatResult > $F72 ; for ( ClassHandler classHandler : classHandlers ) { ThreatResult result = classHandler . scanClass ( cn ) ; $F1140 ( result , threats ) } for ( MethodNode mn : cn . methods ) { for ( MethodHandler methodHandler : methodHandlers ) { ThreatResult result = methodHandler . scanMethod ( mn ) ; $F1140 ( result , threats ) } } if $F3817 ( threats ) { threatsByClass . put ( cn . name , threats ) ; } }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public void reset $F72 { mChannelNumber = NUM00 ; $F725 ( mActiveCalls ) $F725 ( mESNs ) $F725 ( mNeighborIDs ) $F725 ( mReceiveFrequencies ) $F725 ( mSiteIDs ) $F725 ( mTalkgroups ) $F725 ( mTransmitFrequencies ) $F725 ( mUniqueIDs ) resetState ( ) ; }
public static String newickNoLengths ( Tree tree ) { $F280 ( buffer ) newick ( tree , tree . getRoot ( ) , _BOOL , BranchLengthType . NO_BRANCH_LENGTHS , null , null , null , null , buffer ) ; $F84 ( buffer ) $F92 ( buffer ) }
$F1 public String toString $F72 { return ( $F130521 ( String , getType ) + NUM00 + getKey ( ) + NUM00 + getValue ( ) ) ; }
$F45332 $F2513 $F2512 ( MediaType ) $F21697 ( MediaType ) @ CheckPermission ( roles = { Role . SECURITY_ADMIN , Role . RESTRICTED_SECURITY_ADMIN } , blockProxies = _BOOL ) public String rotateIPsecKey $F72 { ipsecMgr . verifyIPsecOpAllowable ( ) ; String version = ipsecMgr . rotateKey ( ) ; auditMgr . recordAuditLog ( null , null , IPSEC_SERVICE_TYPE , OperationTypeEnum . UPDATE_SYSTEM_PROPERTY , System . currentTimeMillis ( ) , AuditLogManager . AUDITLOG_SUCCESS , null , NUM00 + version ) ; return version ; }
public int append ( char chunk [ ] ) throws GuacamoleException { return $F39529 ( append , chunk ) ; }
public $F96 reset $F97 ( data ) { $F5475 ( bytes ) if ( $F18896 ( data ) < NUM00 ) { bytes = new byte [ data [ NUM00 ] + NUM00 ] ; System . arraycopy ( data , NUM00 , bytes , NUM00 , data [ NUM00 ] + NUM00 ) ; } else { if ( $F18896 ( data ) > NUM00 ) { int len = data [ NUM00 ] & $F19905 ; int result = NUM00 ; for ( $F119 ( i , len ) ) { result |= $F21296 ( data , i ) < < ( NUM00 * ( len - i - NUM00 ) ) ; } bytes = new byte [ result + len + NUM00 ] ; System . arraycopy ( data , NUM00 , bytes , NUM00 , result + len + NUM00 ) ; } } return bytes ; }
public VectorClock $F72 { this ( new ArrayList < ClockEntry > $F989 , System . currentTimeMillis ( ) ) ; }
public Analyzer add ( String name , NondominatedPopulation result ) { List < NondominatedPopulation > list = data . get ( name ) ; if ( list == null ) { list = new ArrayList < NondominatedPopulation > $F72 ; data . put ( name , list ) ; } list . add ( result ) ; return this ; }
public static void assertEquals ( String msg , $F1986 expected , $F1986 observed , double tolerance ) { $F7542 ( out , msg ) if $F11279 ( expected , observed ) { $F84 ( out ) $F84 ( out ) out . append ( expected . length ) ; $F84 ( out ) out . append ( observed . length ) ; Assert . fail ( out . toString ( ) ) ; } boolean failure = _BOOL ; for ( $F1139 ( i , expected ) ) { if ( ! Precision . equalsIncludingNaN ( expected [ i ] , observed [ i ] , tolerance ) ) { failure = _BOOL ; $F84 ( out ) out . append ( i ) ; $F84 ( out ) $F84 ( out ) $F6939 ( out , expected , i ) $F84 ( out ) $F6939 ( out , observed , i ) } } if ( failure ) { Assert . fail ( out . toString ( ) ) ; } }
public void initializeAtomsForFinite ( List < Datum > data , String filename , Random random ) { $F10254 ( beta , K ) $F10254 ( dof , K ) $F10253 ( omega , K ) if ( filename != null ) { try { loc = BatchMixtureModel . initializeClustersFromFile ( filename , K ) ; if $F10255 ( loc , K ) { loc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( loc , data , K , random ) ; } } catch ( FileNotFoundException e ) { $F301 ( e ) loc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( data , K , random ) ; } } else { loc = BatchMixtureModel . gonzalezInitializeMixtureCenters ( data , K , random ) ; } $F7028 ( log , loc ) for ( int k = NUM00 ; k < this . K ; k ++ ) { beta [ k ] = baseBeta ; dof [ k ] = baseNu ; omega . add ( baseOmega ) ; } }
$F1 public void onInit ( List < ? extends IndexCommit > commits ) throws IOException { $F19233 ( commits ) log . info ( NUM00 , new CommitsLoggingInfo ( commits ) ) ; log . debug ( NUM00 , new CommitsLoggingDebug ( commits ) ) ; updateCommits ( commits ) ; }
public boolean isLoading $F72 $F23588 ( state , LOADING )
CharSequence convert ( Object value , String key ) ;
$F1 public final void sample $F72 { synchronized ( _lock ) { $F106670 ( count , _count ) long lastCount = _lastAvgCount ; _lastAvgCount = count ; $F106670 ( sum , _sum ) double lastSum = _lastAvgSum ; _lastAvgSum = sum ; if ( count == lastCount ) _value = NUM00 ; else _value = _scale * ( sum - lastSum ) / $F250385 ( count , lastCount ) ; } }
public boolean login $F72 throws LoginException { try $F5795 ( loadPasswordFile ) catch ( IOException ioe ) { LoginException le = new LoginException ( NUM00 + passwordFileDisplayName ) ; throw EnvHelp . initCause ( le , ioe ) ; } if ( userCredentials == null ) { throw new LoginException $F580 ; } if ( logger . debugOn ( ) ) { logger . debug ( NUM00 , NUM00 + passwordFileDisplayName ) ; } if ( tryFirstPass ) { try { attemptAuthentication ( _BOOL ) ; succeeded = _BOOL ; if ( logger . debugOn ( ) ) { $F77795 ( logger ) } return _BOOL ; } catch ( LoginException le ) { cleanState ( ) ; $F77795 ( logger ) } } else if ( useFirstPass ) { try { attemptAuthentication ( _BOOL ) ; succeeded = _BOOL ; if ( logger . debugOn ( ) ) { $F77795 ( logger ) } return _BOOL ; } catch ( LoginException le ) { cleanState ( ) ; $F77795 ( logger ) throw le ; } } if ( logger . debugOn ( ) ) { $F77795 ( logger ) } try { attemptAuthentication ( _BOOL ) ; succeeded = _BOOL ; if ( logger . debugOn ( ) ) { $F77795 ( logger ) } return _BOOL ; } catch ( LoginException le ) { cleanState ( ) ; $F77795 ( logger ) throw le ; } }
public Builder updateExtension ( Extension extension ) $F18637 ( extensions , extension , this )
public void processUtterance ( Utterance utterance ) throws ProcessException { if ( utterance . getRelation ( Relation . SEGMENT ) == null ) $F4639 utterance . setObject ( SampleInfo . UTT_NAME , diphoneDatabase . getSampleInfo ( ) ) ; createUnitRelation ( utterance ) ; }
public static int copy ( InputStream in , OutputStream out ) throws IOException { $F18062 ( Assert , in ) $F18062 ( Assert , out ) try { return StreamUtils . copy ( in , out ) ; } finally { $F18072 ( in ) $F18072 ( out ) } }
private String convertToAttributeName ( String localName ) $F11447 ( localName )
public ExpandedStatementBuilder reference ( String property , Object value ) { checkCanChange ( ) ; extraInfo . add ( new ReferenceInfo ( property , value ) ) ; return this ; }
@ TargetApi ( Build . VERSION_CODES . HONEYCOMB ) protected void swipeView ( View child , float deltaX , float deltaY ) { if ( isFixedView ( child ) ) { deltaX = deltaX / NUM00 ; } float deltaXAbs = Math . abs ( deltaX ) ; float fractionCovered = deltaXAbs / $F52896 ( child ) ; child . setTranslationX ( deltaX ) ; child . setAlpha ( NUM00 - fractionCovered ) ; if ( deltaX > NUM00 ) child . setRotationY ( - NUM00 * fractionCovered ) ; else child . setRotationY ( NUM00 * fractionCovered ) ; }
private void verifyIsRoot $F72 { if $F6887 ( hierarchyElements ) { throw new IllegalStateException ( NUM00 + NUM00 + hierarchy ) ; } }
$F1 public int size $F72 { $F677 ( lock , this ) $F790 ( lock ) try { return count ; } $F796 ( lock ) }
private void verifyWithSeparateSigningKey ( X509Certificate cert , PublicKey prevKey , boolean signFlag , Set < X509Certificate > stackedCerts ) throws CertPathValidatorException { String msg = NUM00 ; if ( debug != null ) { debug . println ( NUM00 + NUM00 + msg + NUM00 ) ; } if ( ( stackedCerts != null ) && stackedCerts . contains ( cert ) ) { if ( debug != null ) $F44047 ( debug ) throw new CertPathValidatorException ( NUM00 , null , null , - NUM00 , BasicReason . UNDETERMINED_REVOCATION_STATUS ) ; } if ( ! signFlag ) $F1861 ( buildToNewKey , cert , stackedCerts ) else { buildToNewKey ( cert , prevKey , stackedCerts ) ; } }
public boolean isRunning $F72 { return this . running ; }
private boolean mapPatternElemPos ( int nesting , boolean isStart , boolean isAttrName ) { if ( NUM00 == nesting ) { if ( m_patternMapSize >= m_patternMap . length ) { int patternMap [ ] = m_patternMap ; int len = m_patternMap . length ; $F15464 ( m_patternMap , m_patternMapSize ) $F135 ( System , patternMap , m_patternMap , len ) } if ( ! isStart ) { m_patternMap [ m_patternMapSize - NUM00 ] -= TARGETEXTRA ; } m_patternMap [ m_patternMapSize ] = ( m_compiler . getTokenQueueSize ( ) - ( isAttrName ? NUM00 : NUM00 ) ) + TARGETEXTRA ; m_patternMapSize ++ ; isStart = _BOOL ; } return isStart ; }
public boolean addOperationAtFirst ( Operation operation ) { if ( isRunning ) { $F397 ( operationHandlerThreadHandler , _BOOL ) return operationHandlerThreadHandler . postAtFrontOfQueue ( new AndroidOperation ( this , operation ) ) ; } else { return operationQueue . add ( new AndroidOperation ( this , operation , AndroidOperation . Type . ATFIRST , null , NUM00 ) ) ; } }
public void testShiftLeft1 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F17893 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static String toUnitbytes ( long bytes ) { if ( bytes < NUM00 ) $F1948 ( GENERAL_UNIT_KILOBYTES ) long unitValue ; String unitName ; if ( bytes < NUM00 ) { unitValue = NUM00 ; unitName = GENERAL_UNIT_KILOBYTES ; } else if ( bytes < NUM00 ) { unitValue = NUM00 ; unitName = GENERAL_UNIT_MEGABYTES ; } else if ( bytes < NUM00 ) { unitValue = NUM00 ; unitName = GENERAL_UNIT_GIGABYTES ; } else { unitValue = NUM00 ; unitName = GENERAL_UNIT_TERABYTES ; } NumberFormat numberFormat ; if ( ( double ) bytes * NUM00 / unitValue < NUM00 ) numberFormat = NUMBER_FORMAT1 ; else numberFormat = NUMBER_FORMAT0 ; try { return numberFormat . format ( ( double ) bytes / unitValue ) + NUM00 + unitName ; } catch ( ArithmeticException ae ) $F1948 ( unitName ) }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) result . addElement ( new Option ( $F40 , NUM00 , NUM00 , NUM00 ) ) ; $F9007 ( result ) $F9007 ( result ) $F9007 ( result ) $F1006 ( result ) result . addElement ( new Option ( $F40 , NUM00 , NUM00 , NUM00 ) ) ; $F9010 ( result , Collections , super ) $F1007 ( result ) }
public static String changePassword ( Connection conn , String userName , String password ) throws Exception { $F151311 ( prep , conn ) $F3916 ( prep , password ) $F3916 ( prep , userName ) $F3917 ( prep ) return password ; }
public Object remove ( Object key ) { processQueue ( ) ; return map . remove ( Key . create ( key , null ) ) ; }
protected Rectangle computePopupBounds $F2026 ( px , py , pw , ph ) { $F170001 ( toolkit , Toolkit ) Rectangle screenBounds ; GraphicsConfiguration gc = comboBox . getGraphicsConfiguration ( ) ; $F101628 ( p ) SwingUtilities . convertPointFromScreen ( p , comboBox ) ; if ( gc != null ) { Insets screenInsets = toolkit . getScreenInsets ( gc ) ; screenBounds = gc . getBounds ( ) ; screenBounds . width -= $F151527 ( screenInsets ) ; screenBounds . height -= $F151531 ( screenInsets ) ; screenBounds . x += ( p . x + screenInsets . left ) ; screenBounds . y += ( p . y + screenInsets . top ) ; } else { screenBounds = new Rectangle ( p , toolkit . getScreenSize ( ) ) ; } Rectangle rect = new Rectangle ( px , py , pw , ph ) ; if ( py + ph > $F6118 ( screenBounds ) && ph < screenBounds . height ) { rect . y = - rect . height ; } return rect ; }
public static Intent buildBackgroundShortcutIntent ( File script , Parcelable iconResource ) { Intent $F192736 ( intent ) ; intent . putExtra ( Intent . EXTRA_SHORTCUT_INTENT , buildStartInBackgroundIntent ( script ) ) ; intent . putExtra ( Intent . EXTRA_SHORTCUT_NAME , script . getName ( ) ) ; intent . putExtra ( Intent . EXTRA_SHORTCUT_ICON_RESOURCE , iconResource ) ; return intent ; }
public static boolean isShown ( final Actor actor ) { return actor != null && actor . getStage ( ) != null ; }
public static void addListener ( final DiagnosticListener listener ) $F17651 ( listener , LISTENERS )
public void shuffleTrainingSet $F72 { utils . shuffleList ( TrainingFiles ) ; }
public NTLMAuthentication ( boolean isProxy , URL url , PasswordAuthentication pw ) { super ( isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION , AuthScheme . NTLM , url , NUM00 ) ; init ( pw ) ; }
public MessageChannel createMessageChannel ( SIPRequest request , MessageProcessor mp , Hop nextHop ) throws IOException { Host targetHost = new Host $F72 ; targetHost . setHostname ( nextHop . getHost ( ) ) ; HostPort targetHostPort = new HostPort $F72 ; targetHostPort . setHost ( targetHost ) ; targetHostPort . setPort ( nextHop . getPort ( ) ) ; MessageChannel returnChannel = mp . createMessageChannel ( targetHostPort ) ; return returnChannel ; }
public static $F96 generateMac ( $F96 byteCipherText , SecretKey integrityKey ) throws $F155 { $F156 ( sha256_HMAC , Mac , HMAC_ALGORITHM ) sha256_HMAC . init ( integrityKey ) ; $F157 ( sha256_HMAC , byteCipherText ) }
public void populateEditText ( String query ) { $F9652 ( text , query ) setSearchString ( text , _BOOL ) ; dispatchStateChange ( SearchViewState . SEARCH ) ; }
public static $F96 concat $F7233 ( b1 , b2 ) { $F148496 ( out , b1 , b2 ) $F7057 ( System , b1 , out ) $F11244 ( System , b2 , out , b1 ) return out ; }
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
public static void putFloat ( String property , float val ) { SIMBRAIN_PREFERENCES . putFloat ( property , val ) ; }
public int hashCode $F72 { return Arrays . hashCode ( this . uid ) ; }
private void advanceRunState ( int targetState ) { for ( $F589 ) { $F8943 ( c , ctl ) if ( runStateAtLeast ( c , targetState ) || ctl . compareAndSet ( c , ctlOf ( targetState , workerCountOf ( c ) ) ) ) $F597 } }
public static final $F1986 copy $F10212 ( v ) $F138478 ( Arrays , v )
public void addAction ( String action ) { $F131 args = $F382 ; SimpleDateFormat sdf = new SimpleDateFormat ( context . getString ( R . string . dateFormat ) ) ; args [ NUM00 ] = $F52170 ( sdf ) ; String timestamp = context . getString ( R . string . timestamp , args ) ; history . add ( action + timestamp ) ; notifyListeners ( new PropertyChangeEvent ( this , ActivityConstants . historyProperty , null , null ) ) ; }
private FilterOperationCodes $F72 $F845
$F1 public String toString $F72 { $F280 ( text ) if ( m_trainInstances == null ) $F86 ( text ) else { $F84 ( text ) $F48750 ( m_missing_merge , text ) } $F84 ( text ) $F92 ( text ) }
public CharSequence subSequence ( int start , int end ) $F8587 ( substring , start , end )
private CreationTemplate toCreationTemplate ( AttrSet t ) { Attr nameAttr = t . getAttribute ( TEMPLATE_NAME ) ; String name = null ; if ( nameAttr != null ) $F37892 ( name , nameAttr ) Attr namingAttr = t . getAttribute ( TEMPLATE_NAMINGATTRIBUTE ) ; String namingAttribute = null ; if ( namingAttr != null ) $F37892 ( namingAttribute , namingAttr ) Attr classAttr = t . getAttribute ( TEMPLATE_JAVACLASS ) ; $F10127 ( classNames ) if ( classAttr != null ) { classNames = classAttr . getStringValues ( ) ; } AttrSet required = decodeAttr ( t . getAttribute ( TEMPLATE_REQUIRED ) , NUM00 ) ; AttrSet optional = decodeAttr ( t . getAttribute ( TEMPLATE_OPTIONAL ) , NUM00 ) ; AttrSet validated = decodeAttr ( t . getAttribute ( TEMPLATE_VALIDATED ) , NUM00 ) ; CreationTemplate template = new CreationTemplate $F72 ; $F12181 ( classes ) try { if ( classNames != null ) { for ( $F1139 ( i , classNames ) ) { Class cls = Class . forName ( classNames [ i ] ) ; classes . add ( cls ) ; } } template = new CreationTemplate ( name , required , optional , classes ) ; } catch ( ClassNotFoundException e ) { template = new CreationTemplate ( name , required , optional ) ; } if ( validated != null ) { template . setValidation ( validated ) ; } if ( namingAttribute != null ) { template . setNamingAttribute ( namingAttribute ) ; } return template ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void placeItem ( ItemStack stack , BlockPos pos , World world , boolean centreItem ) { double offset = ( centreItem ) ? NUM00 : NUM00 ; EntityItem entityitem = new EntityItem ( world , ( double ) pos . getX ( ) + offset , ( double ) pos . getY ( ) + offset , ( double ) pos . getZ ( ) + offset , stack ) ; entityitem . motionX = NUM00 ; entityitem . motionY = NUM00 ; entityitem . motionZ = NUM00 ; entityitem . setDefaultPickupDelay ( ) ; world . spawnEntityInWorld ( entityitem ) ; }
$F108235 ( f , first , n , item , last , count , notFull )
private < M extends ConfigurationClient , P > ManagedObject $F6574 createNewManagedObject ( ManagedObjectDefinition < M , ? > d , ManagedObjectPath < M , ? > p , PropertyDefinition $F89402 namingPropertyDefinition , String name , Collection $F89781 exceptions ) { PropertySet childProperties = new PropertySet $F72 ; for ( PropertyDefinition $F1011 pd : d . getAllPropertyDefinitions ( ) ) { try { createProperty ( childProperties , p , pd ) ; } catch ( PropertyException e ) { $F73441 ( exceptions , e ) } } if ( namingPropertyDefinition != null ) { P value = namingPropertyDefinition . decodeValue ( name ) ; childProperties . setPropertyValues ( namingPropertyDefinition , Collections . singleton ( value ) ) ; } return newInstance ( d , p , childProperties , _BOOL , namingPropertyDefinition ) ; }
public abstract void initializeConstraints ( Step step , Settings settings ) ;
public void testEmptyCommits $F72 throws Exception { clearIndexWithReplication ( ) ; index ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; emptyUpdate ( masterClient , NUM00 , NUM00 ) ; pullFromMasterToSlave ( ) ; rQuery ( NUM00 , NUM00 , slaveClient ) ; assertVersions ( masterClient , slaveClient ) ; emptyUpdate ( masterClient , NUM00 , NUM00 ) ; pullFromMasterToSlave ( ) ; index ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; emptyUpdate ( masterClient , NUM00 , NUM00 ) ; pullFromMasterToSlave ( ) ; rQuery ( NUM00 , NUM00 , slaveClient ) ; assertVersions ( masterClient , slaveClient ) ; index ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; emptyUpdate ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; pullFromMasterToSlave ( ) ; rQuery ( NUM00 , NUM00 , masterClient ) ; rQuery ( NUM00 , NUM00 , slaveClient ) ; index ( masterClient , NUM00 , NUM00 , NUM00 , NUM00 ) ; emptyUpdate ( masterClient , NUM00 , NUM00 ) ; pullFromMasterToSlave ( ) ; String q = NUM00 ; rQuery ( NUM00 , q , masterClient ) ; rQuery ( NUM00 , q , slaveClient ) ; assertVersions ( masterClient , slaveClient ) ; }
private $F96 decrypt ( $F96 d , int start , int end , int key , int skip ) { if ( end - start - skip < NUM00 ) { skip = NUM00 ; } $F96 o = new byte [ end - start - skip ] ; int r = key ; int ipos ; int c1 = NUM00 ; int c2 = NUM00 ; for ( ipos = start ; ipos < end ; ipos ++ ) { int c = d [ ipos ] & NUM00 ; int p = ( c ^ ( r > > NUM00 ) ) & NUM00 ; r = ( ( c + r ) * c1 + c2 ) & NUM00 ; if ( ipos - start - skip >= NUM00 ) { o [ ipos - start - skip ] = ( byte ) p ; } } return o ; }
public static void appendInstruction ( OFFlowMod . Builder fmb , OFInstruction inst ) { List < OFInstruction > newIl = new ArrayList < OFInstruction > $F72 ; List < OFInstruction > oldIl = fmb . getInstructions ( ) ; if ( oldIl != null ) { newIl . addAll ( fmb . getInstructions ( ) ) ; } for ( OFInstruction i : newIl ) { if ( i . getType ( ) == inst . getType ( ) ) $F106 ( newIl , i ) } newIl . add ( inst ) ; fmb . setInstructions ( newIl ) ; }
$F1 public final void insertAll ( DBIDs ids ) { if ( ids . isEmpty ( ) || $F10471 ( ids ) ) $F932 if ( canBulkLoad ( ) ) { List < RdKNNEntry > $F719 ( leafs , ids ) ; for ( $F134224 ( iter , ids ) ) { leafs . add ( createNewLeafEntry ( DBIDUtil . deref ( iter ) ) ) ; } bulkLoad ( leafs ) ; } else { for ( $F134224 ( iter , ids ) ) { insert ( iter ) ; } } doExtraIntegrityChecks ( ) ; }
public void testCase14 $F72 { $F15143 BigInteger aNumber = BigInteger . ONE ; BigInteger bNumber = BigInteger . ONE ; $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public abstract int compare ( String source , String target ) ;
public static $F96 asUnsignedByteArray ( BigInteger value ) { $F1208 ( bytes , value ) if $F41780 ( bytes ) $F41781 ( tmp , bytes , System ) return bytes ; }
public static boolean isSupplemental ( int c ) { return $F56314 ( c ) ; }
private final String _decodeShortUnicodeName ( int len ) throws IOException { int outPtr = NUM00 ; $F1469 outBuf = _textBuffer . emptyAndGetCurrentSegment ( ) ; int inPtr = _inputPtr ; _inputPtr += len ; final $F2027 codes = SmileConstants . sUtf8UnitLengths ; $F71887 ( inBuf , _inputBuffer ) for ( int end = inPtr + len ; inPtr < end ; ) { $F1473 ( i , inBuf , inPtr ) int code = codes [ i ] ; if ( code != NUM00 ) { switch ( code ) { $F3366 i = $F74254 ( i ) | $F44579 ( inBuf , inPtr ) ; $F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; $F597 $F3366 i = $F74254 ( i ) | $F196796 ( inBuf , inPtr ) | $F196796 ( inBuf , inPtr ) | $F44579 ( inBuf , inPtr ) ; i -= NUM00 ; outBuf [ outPtr ++ ] = ( char ) ( NUM00 | ( i > > NUM00 ) ) ; i = NUM00 | ( i & NUM00 ) ; $F597 $F1267 $F52251 ( _reportError , Integer , i ) } } $F1479 ( outBuf , outPtr , i ) } return _textBuffer . setCurrentAndReturn ( outPtr ) ; }
public void saveDeviceProfile ( $F2304 String user , $F2304 String realm , $F2304 PushDeviceSettings deviceSettings ) throws AuthLoginException { Reject . ifNull ( user , realm , deviceSettings ) ; try { devicesDao . saveDeviceProfiles ( user , realm , jsonUtils . toJsonValues ( Collections . singletonList ( deviceSettings ) ) ) ; } catch ( IOException e ) { debug . error ( NUM00 , user , realm , e ) ; throw new AuthLoginException ( e ) ; } }
public RankingImageListProvider inDays ( int days ) { mTime = Integer . toString ( days ) + NUM00 ; return this ; }
public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener )
public final void dbUnavailable ( final boolean alarmUp , final String exceptionMsg , final String dbInfo ) { if ( alarmUp == FallbackAlarmsInterface . ACTIVATED ) { $F12181 ( recipients ) MailDetailsBean mailDetails = new MailDetailsBean $F72 ; mailDetails . setSender ( NUM00 ) ; $F18793 ( recipients ) mailDetails . setToRecipients ( recipients ) ; mailDetails . setSubject ( NUM00 ) ; mailDetails . setMessage ( NUM00 + dbInfo + NUM00 + exceptionMsg ) ; mailDetails . setServer ( NUM00 ) ; SMTPMailSender mailSender = new SMTPMailSender $F72 ; try { mailSender . sendMail ( mailDetails ) ; } catch ( MailSenderException e ) { LOG . debug ( e . getMessage ( ) ) ; } } }
public static String tidyString ( String string ) { if $F11809 ( string ) { return string ; } else $F8480 ( string ) }
public Select $F4203 sortDesc ( String ... columns ) { for ( String column : columns ) { $F31982 ( mSortingOrderList , column ) } return this ; }
public String toString $F72 { $F83 ( result ) $F84 ( result ) $F167270 ( result , klazz ) $F84 ( result ) for ( $F9808 ( i , elements ) ) { $F63265 ( i , result ) $F6939 ( result , elements , i ) } $F84 ( result ) $F92 ( result ) }
public void testUlpNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal result = aNumber . ulp ( ) ; String res = NUM00 ; int resScale = NUM00 ; $F1925 ( assertEquals , res , result ) $F1928 ( assertEquals , resScale , result ) }
public LogRecord ( Level level , String msg ) { level . getClass ( ) ; this . level = level ; message = msg ; $F201038 ( sequenceNumber , globalSequenceNumber ) threadID = defaultThreadID ( ) ; $F3224 ( millis , System ) needToInferCaller = _BOOL ; }
public Matrix correlation $F72 { final Matrix corr = covariance ( ) ; final Array v = corr . diagonal ( ) ; for ( $F119 ( i , dimension_ ) ) { for ( $F119 ( j , dimension_ ) ) { if ( i == j ) { if ( v . $ [ v . _ ( i ) ] == NUM00 ) { corr . $ [ corr . _ ( i , j ) ] = NUM00 ; } else { corr . $ [ corr . _ ( i , j ) ] *= NUM00 / Math . sqrt ( v . $ [ v . _ ( i ) ] * v . $ [ v . _ ( j ) ] ) ; } } else { if ( v . $ [ v . _ ( i ) ] == NUM00 && v . $ [ v . _ ( j ) ] == NUM00 ) { corr . $ [ corr . _ ( i , j ) ] = NUM00 ; } else if ( v . $ [ v . _ ( i ) ] == NUM00 || v . $ [ v . _ ( j ) ] == NUM00 ) { corr . $ [ corr . _ ( i , j ) ] = NUM00 ; } else { corr . $ [ corr . _ ( i , j ) ] *= NUM00 / Math . sqrt ( v . $ [ v . _ ( i ) ] * v . $ [ v . _ ( j ) ] ) ; } } } } return corr ; }
$F1113 public static SaveDirectory from ( File file ) throws FileNotFoundException { File currentFile = file ; SaveDirectory result = null ; if ( currentFile == null ) $F845 else { result = createValidSaveDirectory ( currentFile ) ; $F122621 ( currentFile ) if ( result != null ) { return result ; } else if ( currentFile == null ) $F845 else { result = createValidSaveDirectory ( currentFile ) ; $F122621 ( currentFile ) if ( result != null ) { return result ; } else $F845 } } $F352240 ( file ) }
public Serializer serializer $F72 { return serializer ; }
private void addIncludedResources ( JsonApiDocument jsonApiDocument , PersistentResource rec , $F3803 requestedRelationPaths ) $F115274 ( requestedRelationPaths )
protected VideoDTO extractOneVideoFromCursor ( Cursor cursor ) { if ( videoIdCol == - NUM00 ) { videoIdCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . _ID ) ; videoTitleCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . TITLE ) ; videoDisplayNameCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DISPLAY_NAME ) ; videoDescriptionCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DESCRIPTION ) ; videoBucketIdCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . BUCKET_ID ) ; videoBucketDisplayNameCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . BUCKET_DISPLAY_NAME ) ; videoDataCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATA ) ; videoMimeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . MIME_TYPE ) ; videoResolutionCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . RESOLUTION ) ; videoSizeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . SIZE ) ; videoDateAddedCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_ADDED ) ; videoDateTakenCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_TAKEN ) ; videoDateModifyCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . DATE_MODIFIED ) ; videoLatitudeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . LATITUDE ) ; videoLongitudeCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . LONGITUDE ) ; videoAlbumCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . ALBUM ) ; videoArtistCol = cursor . getColumnIndexOrThrow ( MediaStore . Video . Media . ARTIST ) ; } VideoDTO video = new VideoDTO $F72 ; video . setId ( cursor . getLong ( videoIdCol ) ) ; video . setTitle ( cursor . getString ( videoTitleCol ) ) ; video . setDisplayName ( cursor . getString ( videoDisplayNameCol ) ) ; video . setDescription ( cursor . getString ( videoDescriptionCol ) ) ; video . setBucketId ( cursor . getString ( videoBucketIdCol ) ) ; video . setBucketDisplayName ( cursor . getString ( videoBucketDisplayNameCol ) ) ; video . setUri ( cursor . getString ( videoDataCol ) ) ; video . setMimeType ( cursor . getString ( videoMimeCol ) ) ; video . setSize ( cursor . getLong ( videoSizeCol ) ) ; video . setAddedDate ( new Date ( cursor . getLong ( videoDateAddedCol ) ) ) ; video . setTakenDate ( new Date ( cursor . getLong ( videoDateTakenCol ) ) ) ; video . setModifyDate ( new Date ( cursor . getLong ( videoDateModifyCol ) ) ) ; video . setLatitude ( cursor . getDouble ( videoLatitudeCol ) ) ; video . setLongitude ( cursor . getDouble ( videoLongitudeCol ) ) ; video . setAlbum ( cursor . getString ( videoAlbumCol ) ) ; video . setArtist ( cursor . getString ( videoArtistCol ) ) ; $F19101 ( resolution , cursor , videoResolutionCol ) if ( resolution != null ) { try { $F6542 ( res , resolution ) $F167151 ( width , Integer , res ) $F167151 ( height , Integer , res ) video . setWidth ( width ) ; video . setHeight ( height ) ; } catch ( Exception e ) { Log . w ( TAG , String . format ( NUM00 , video . getId ( ) , video . getTitle ( ) , video . getDisplayName ( ) ) , e ) ; } } return video ; }
private void shiftSegments ( int fromIdx , int offset ) { for ( Element element : elements ) { if ( element . end . left > fromIdx ) { shiftSegment ( element . start , fromIdx , offset ) ; shiftSegment ( element . end , fromIdx , offset ) ; if ( element . text != null ) { for ( Segment textSegment : element . text ) { shiftSegment ( textSegment , fromIdx , offset ) ; } } } } }
public RefUpdate . Result modifyFile ( ChangeEdit edit , String file , RawInput content ) throws AuthException , InvalidChangeOperationException , IOException { return modify ( TreeOperation . CHANGE_ENTRY , edit , file , null , content ) ; }
private void startDocument ( final boolean multiObjectMode ) throws SAXException { if ( depth == NUM00 ) { contentHandler . startDocument ( ) ; $F19814 ( multiObjectMode , depth ) } }
$F122160 ( writer )
private static ArrayList < GridCollisionJobContextWrapper > slice ( Collection < CollisionJobContext > src , int num ) { ArrayList < GridCollisionJobContextWrapper > $F204 ( slice ) ; Iterator < CollisionJobContext > iter = src . iterator ( ) ; for ( int i = NUM00 ; i < num && iter . hasNext ( ) ; i ++ ) slice . add ( new GridCollisionJobContextWrapper ( iter . next ( ) , i ) ) ; return slice ; }
protected void calculateFormatter ( float min , float max ) { float reference = NUM00 ; if ( mData == null || mData . getXValCount ( ) < NUM00 ) { reference = Math . max ( $F44398 ( Math , min , max ) ) ; } else { reference = Math . abs ( max - min ) ; } int digits = Utils . getDecimals ( reference ) ; mDefaultFormatter = new DefaultValueFormatter ( digits ) ; }
public Request add ( Request request ) { request . setRequestQueue ( this ) ; $F9231 ( mCurrentRequests , request ) request . setSequence ( getSequenceNumber ( ) ) ; request . addMarker ( NUM00 ) ; if ( ! request . shouldCache ( ) ) { mNetworkQueue . add ( request ) ; return request ; } synchronized ( mWaitingRequests ) { String cacheKey = request . getCacheKey ( ) ; if $F1710 ( mWaitingRequests , cacheKey ) { Queue < Request > stagedRequests = mWaitingRequests . get ( cacheKey ) ; if ( stagedRequests == null ) { stagedRequests = new LinkedList < Request > $F72 ; } stagedRequests . add ( request ) ; mWaitingRequests . put ( cacheKey , stagedRequests ) ; if ( VolleyLog . DEBUG ) { VolleyLog . v ( NUM00 , cacheKey ) ; } } else { $F16843 ( mWaitingRequests , cacheKey ) mCacheQueue . add ( request ) ; } return request ; } }
public String lookup ( String data ) { $F13710 it = map . getPrefixedBy ( data ) ; if $F87568 ( it ) $F1274 $F43104 ( it ) }
public static Object loadModule ( String homedir , ScriptEngine engine , String name ) throws FileNotFoundException , ScriptException { HashMap $F51855 mp = ( HashMap $F51855 ) engine . get ( NUM00 ) ; Object ret = load ( mp . get ( name ) , engine ) ; return ret ; }
$F1 public void modifyVariableId ( String nodeId , String newId ) { Map < Assignment , UtilityEstimate > utilities2 = new HashMap < Assignment , UtilityEstimate > $F72 ; for ( Assignment a : table . keySet ( ) ) { Assignment b = new Assignment $F72 ; for ( String var : a . getVariables ( ) ) { String newVar = $F1238 ( var , nodeId ) ? newId : var ; b . addPair ( newVar , a . getValue ( var ) ) ; } utilities2 . put ( b , table . get ( a ) ) ; } table = utilities2 ; }
public static $F2469 truncateI $F118948 ( v , len ) { final int zap = ( v . length * Long . SIZE ) - len ; final int zapWords = ( zap > > > LONG_LOG2_SIZE ) ; final int zapbits = zap & LONG_LOG2_MASK ; Arrays . fill ( v , v . length - zapWords , v . length , NUM00 ) ; if ( zapbits > NUM00 ) { $F362187 ( v , zapWords ) &= ( LONG_ALL_BITS > > > zapbits ) ; } return v ; }
public void test_noResourcesDoesNotWait_predeclareLocks_synchronousQueue $F72 throws Exception { $F859 ( properties ) final int ntasks = NUM00 ; final int corePoolSize = NUM00 ; final int maxPoolSize = ntasks ; properties . setProperty ( TestOptions . SYNCHRONOUS_QUEUE , NUM00 ) ; $F130259 ( properties , TestOptions , corePoolSize ) properties . setProperty ( TestOptions . MAX_POOL_SIZE , NUM00 + maxPoolSize ) ; $F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; $F130280 ( assertEquals , ntasks , Integer , result ) final int maxrunning = Integer . parseInt ( result . get ( NUM00 ) ) ; assertTrue ( NUM00 + maxrunning , corePoolSize <= maxrunning ) ; }
private void positionAtCentralDirectory $F72 throws IOException { boolean found = _BOOL ; long off = archive . length ( ) - MIN_EOCD_SIZE ; if ( off >= NUM00 ) { archive . seek ( off ) ; $F96 sig = JBZipOutputStream . EOCD_SIG ; $F7468 ( curr , archive ) while ( curr != - NUM00 ) { if ( curr == sig [ POS_0 ] ) { $F10201 ( curr , archive ) if ( curr == sig [ POS_1 ] ) { $F10201 ( curr , archive ) if ( curr == sig [ POS_2 ] ) { $F10201 ( curr , archive ) if ( curr == sig [ POS_3 ] ) $F3468 ( found , _BOOL ) } } } archive . seek ( -- off ) ; $F10201 ( curr , archive ) } } if ( ! found ) $F124916 archive . seek ( off + CFD_LOCATOR_OFFSET ) ; $F2175 ( cfdOffset , WORD ) archive . readFully ( cfdOffset ) ; currentcfdfoffset = ZipLong . getValue ( cfdOffset ) ; archive . seek ( currentcfdfoffset ) ; }
public List query ( double x1 , double x2 ) { return super . query ( new Interval ( Math . min ( x1 , x2 ) , Math . max ( x1 , x2 ) ) ) ; }
public static boolean isNull ( Object object ) { return object != null && object == NULL_CACHE . get ( object . getClass ( ) ) ; }
public static void createDestinationFolder ( String path ) { $F1705 ( fpath , path ) $F1907 ( fpath ) }
public void removeAll $F72 { log . debug ( $F10532 ( connectionToAdded ) ) ; $F725 ( connectionToAdded ) }
public float readFloat $F72 throws IOException { return primitiveTypes . readFloat ( ) ; }
public synchronized static int insertLuaState ( LuaState L ) { int i ; for ( $F12002 ( i , states ) ) { LuaState state = ( LuaState ) states . get ( i ) ; if ( state != null ) { if ( state . getCPtrPeer ( ) == L . getCPtrPeer ( ) ) return i ; } } i = getNextStateIndex ( ) ; states . set ( i , L ) ; return i ; }
public PhoneNumberValidator $F134304 ( errorMessage ) { super ( errorMessage , REGEX ) ; }
$F16587 ( fullyQualifiedName )
$F45746 ( destbytes , srcString , destOffset , srcOffset , count , i )
public Point2D convertWindowToReference ( Point2D apt ) { if ( scrollBackReferenceRect == null ) $F1274 else return new $F5047 ( $F205392 ( apt , scrollBackReferenceRect ) / scrollBackReferenceRect . getWidth ( ) , $F205394 ( apt , scrollBackReferenceRect ) / scrollBackReferenceRect . getHeight ( ) ) ; }
public void clear $F72 { $F677 ( lock , this ) $F790 ( lock ) try { for ( TenantQueue q : qs . values ( ) ) $F9096 ( q ) } $F796 ( lock ) }
public void printUsage ( PrintWriter pw , int width , String cmdLineSyntax ) { $F12710 ( argPos , cmdLineSyntax ) printWrapped ( pw , width , defaultSyntaxPrefix . length ( ) + argPos , defaultSyntaxPrefix + cmdLineSyntax ) ; }
public boolean hasNameValue ( String name ) { return $F241801 ( nameValueMap , name ) ; }
private void addNewLine $F72 { if ( addLineDialog == null ) { addLineDialog = new AddParallelLineDialog $F72 ; } addLineDialog . setChartEngine ( engine ) ; addLineDialog . showDialog ( ) ; if $F31483 ( horizontalLineRadiobutton ) $F5795 ( setHorizontalLineSelected ) else if $F31483 ( verticalLineRadiobutton ) $F5795 ( setVerticalLineSelected ) }
public final static $F4203 CompletableFuture < $F5675 > streamToCompletableFuture $F51721 ( stream ) { return CompletableFuture . completedFuture ( stream . collect ( CyclopsCollectors . toListX ( ) ) ) ; }
$F1431 public static boolean isGzipSupported ( final HttpServletRequest request ) { if ( request != null ) { final $F14937 headerNames = request . getHeaderNames ( ) ; if ( headerNames != null ) { while $F1444 ( headerNames ) { final String headerName = headerNames . nextElement ( ) ; $F66059 ( m , PATTERN_ACCEPT_ENCODING , headerName ) if $F281 ( m ) { final String headerValue = request . getHeader ( headerName ) ; $F66059 ( mValue , PATTERN_GZIP , headerValue ) $F89398 ( mValue ) } } } } return _BOOL ; }
private boolean isLanguageAllowed ( String languageKey ) { $F397 ( allowedLanguages , _BOOL ) $F297 ( allowedLanguages , languageKey ) }
public List < Boundary > populateWard ( final Long zoneId ) { List < Boundary > wardList = new LinkedList < Boundary > $F72 ; try { wardList = boundaryService . getChildBoundariesByBoundaryId ( zoneId ) ; } catch ( final Exception e ) { $F45904 ( LOGGER , e ) throw new ApplicationRuntimeException ( NUM00 , e ) ; } return wardList ; }
$F71992 ( className , cl , doFallback , providerClass , findProviderClass , instance , debugPrintln , x )
public void handleRequest ( List arguments ) { try { InstallLogger migrateLog = new InstallLogger ( STR_MIGRATE ) ; MultipleMigrateDriver driver = new MultipleMigrateDriver $F72 ; if $F2979 ( arguments ) { $F138169 ( Debug ) driver . migrate ( migrateLog ) ; } else if $F10471 ( arguments ) { $F138169 ( Debug ) driver . migrate ( migrateLog ) ; } } catch ( InstallAbortException ia ) { $F16828 ( Debug , ia ) Console . printlnRawText ( ia . getMessage ( ) ) ; } catch ( InstallException ex ) { $F16828 ( Debug , ex ) printConsoleMessage ( LOC_HR_ERR_MIGRATE , new Object [ ] { ex . getMessage ( ) } ) ; } }
$F1 public String toString $F72 { $F280 ( result ) for ( $F1139 ( i , data ) ) { result . append ( $F262485 ( i ) + data [ i ] ) ; } $F92 ( result ) }
public static SynchronizerStatus makeRunningStatus $F72 { return new SynchronizerStatus ( Status . RUNNING , $F4094 , null ) ; }
public static Iterable $F11299 applyCwd ( File cwd , Iterable $F11299 files ) { if ( files != null ) { $F14391 ( result ) for ( File f : files ) $F18351 ( result , applyCwd , cwd , f ) return result ; } else $F1337 }
private void close ( boolean force ) { if $F48405 ( closeGuard , _BOOL ) hadoop . close ( force ) ; }
MutableBigInteger divideKnuth ( MutableBigInteger b , MutableBigInteger quotient , boolean needRemainder ) { if ( b . intLen == NUM00 ) $F28078 if ( intLen == NUM00 ) { quotient . intLen = quotient . offset = NUM00 ; return needRemainder ? new MutableBigInteger $F72 : null ; } int cmp = compare ( b ) ; if ( cmp < NUM00 ) { quotient . intLen = quotient . offset = NUM00 ; return needRemainder ? new MutableBigInteger ( this ) : null ; } if ( cmp == NUM00 ) { quotient . value [ NUM00 ] = quotient . intLen = NUM00 ; quotient . offset = NUM00 ; return needRemainder ? new MutableBigInteger $F72 : null ; } $F725 ( quotient ) if ( b . intLen == NUM00 ) { int r = divideOneWord ( b . value [ b . offset ] , quotient ) ; if ( needRemainder ) { if ( r == NUM00 ) return new MutableBigInteger $F72 ; return new MutableBigInteger ( r ) ; } else $F1337 } if ( intLen >= KNUTH_POW2_THRESH_LEN ) { int trailingZeroBits = $F203679 ( Math , getLowestSetBit , b ) ; if ( trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * NUM00 ) { MutableBigInteger a = new MutableBigInteger ( this ) ; b = new MutableBigInteger ( b ) ; a . rightShift ( trailingZeroBits ) ; b . rightShift ( trailingZeroBits ) ; MutableBigInteger r = a . divideKnuth ( b , quotient ) ; r . leftShift ( trailingZeroBits ) ; return r ; } } return divideMagnitude ( b , quotient , needRemainder ) ; }
public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { $F6822 ( random ) $F13096 entry = new $F13096 $F72 ; if ( data != null ) $F6988 ( entry , data ) else { entry . data = $F13106 ( random ) ; } entry . etag = $F13111 ( String , random ) ; entry . lastModified = random . nextLong ( ) ; entry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; return entry ; }
$F1431 public void insert ( int id , Comparable $F11685 priority ) { int i ; i = ++ _n ; ElementH p = new ElementH $F72 ; while ( i > NUM00 ) { int pIdx = i / NUM00 ; ElementH eIdx = ( ElementH ) _elements [ pIdx ] ; p . id = eIdx . id ; p . priority = eIdx . priority ; if ( priority . compareTo ( ( E ) p . priority ) > NUM00 ) $F5153 ElementH ei = ( ElementH ) _elements [ i ] ; ei . id = p . id ; ei . priority = p . priority ; _pos [ p . id ] = i ; i = pIdx ; } ElementH ei = ( ElementH ) _elements [ i ] ; ei . id = id ; ei . priority = priority ; _pos [ id ] = i ; }
ExternalProblem ( Socket socket ) throws IOException { this ( socket . getInputStream ( ) , socket . getOutputStream ( ) ) ; }
private static void stopGC $F72 { gcShouldLoop = _BOOL ; $F8073 ( LOCK ) }
public final void insertElementAt ( int value , int at ) { $F11084 ( m_firstFree , m_mapSize , m_blocksize , System , m_map , newMap ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; m_firstFree ++ ; }
public static $F5466 RequestBody createGzip ( final MediaType mediaType , final String body ) { $F1538 ( gzipByteArrayOutputStream ) try { OutputStream gzipOutputStream = new GZIPOutputStream ( gzipByteArrayOutputStream ) ; $F60813 ( gzipOutputStream , body ) $F59 ( gzipOutputStream ) } $F20154 return RequestBody . create ( mediaType , gzipByteArrayOutputStream . toByteArray ( ) ) ; }
private void processTSBK ( TSBKMessage tsbk ) { broadcast ( new DecoderStateEvent ( this , Event . CONTINUATION , State . CONTROL ) ) ; if ( tsbk . getVendor ( ) == Vendor . STANDARD ) { switch ( tsbk . getOpcode ( ) ) { case ADJACENT_STATUS_BROADCAST : if ( tsbk instanceof AdjacentStatusBroadcast ) { IAdjacentSite ias = ( IAdjacentSite ) tsbk ; mNeighborMap . put ( ias . getUniqueID ( ) , ias ) ; updateSystem ( ias . getSystemID ( ) ) ; } $F597 $F20998 ( ACKNOWLEDGE_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( AUTHENTICATION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( CALL_ALERT , processTSBKPage , tsbk ) $F20998 ( DENY_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( EXTENDED_FUNCTION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( GROUP_AFFILIATION_QUERY , processTSBKQuery , tsbk ) $F20998 ( GROUP_AFFILIATION_RESPONSE , processTSBKResponse , tsbk ) case GROUP_DATA_CHANNEL_ANNOUNCEMENT : case GROUP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT : processTSBKDataChannelAnnouncement ( tsbk ) ; $F597 case GROUP_DATA_CHANNEL_GRANT : case GROUP_VOICE_CHANNEL_GRANT : case GROUP_VOICE_CHANNEL_GRANT_UPDATE : case GROUP_VOICE_CHANNEL_GRANT_UPDATE_EXPLICIT : case INDIVIDUAL_DATA_CHANNEL_GRANT : case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT : case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT_UPDATE : case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT : case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE : processTSBKChannelGrant ( tsbk ) ; $F597 case IDENTIFIER_UPDATE_NON_VUHF : case IDENTIFIER_UPDATE_VHF_UHF_BANDS : IdentifierUpdate iu = ( IdentifierUpdate ) tsbk ; if ( ! mBands . containsKey ( iu . getIdentifier ( ) ) ) { mBands . put ( iu . getIdentifier ( ) , iu ) ; } $F597 case LOCATION_REGISTRATION_RESPONSE : case UNIT_DEREGISTRATION_ACKNOWLEDGE : processTSBKResponse ( tsbk ) ; $F597 $F20998 ( MESSAGE_UPDATE , processTSBKMessage , tsbk ) case NETWORK_STATUS_BROADCAST : mNetworkStatus = ( module . decode . p25 . message . tsbk . osp . control . NetworkStatusBroadcast ) tsbk ; $F597 $F20998 ( PROTECTION_PARAMETER_UPDATE , processTSBKResponse , tsbk ) $F20998 ( QUEUED_RESPONSE , processTSBKResponse , tsbk ) $F20998 ( RADIO_UNIT_MONITOR_COMMAND , processTSBKCommand , tsbk ) case RFSS_STATUS_BROADCAST : processTSBKRFSSStatus ( ( RFSSStatusBroadcast ) tsbk ) ; $F597 $F20998 ( ROAMING_ADDRESS_COMMAND , processTSBKCommand , tsbk ) case SECONDARY_CONTROL_CHANNEL_BROADCAST : module . decode . p25 . message . tsbk . osp . control . SecondaryControlChannelBroadcast sccb = ( module . decode . p25 . message . tsbk . osp . control . SecondaryControlChannelBroadcast ) tsbk ; if ( sccb . getDownlinkFrequency1 ( ) > NUM00 ) $F207 ( mSecondaryControlChannels , sccb ) $F597 case SNDCP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT : mSNDCPDataChannel = ( SNDCPDataChannelAnnouncementExplicit ) tsbk ; $F597 $F20998 ( SNDCP_DATA_CHANNEL_GRANT , processTSBKChannelGrant , tsbk ) $F20998 ( STATUS_QUERY , processTSBKQuery , tsbk ) $F20998 ( STATUS_UPDATE , processTSBKResponse , tsbk ) case TELEPHONE_INTERCONNECT_ANSWER_REQUEST : case UNIT_TO_UNIT_ANSWER_REQUEST : processTSBKPage ( tsbk ) ; $F597 $F20998 ( UNIT_REGISTRATION_COMMAND , processTSBKCommand , tsbk ) $F20998 ( UNIT_REGISTRATION_RESPONSE , processTSBKResponse , tsbk ) $F2448 } } else if ( tsbk . getVendor ( ) == Vendor . MOTOROLA ) { processMotorolaTSBK ( ( MotorolaTSBKMessage ) tsbk ) ; } }
public XintroActivityBuilder removeFragment ( int fragmentPos ) $F120129 ( introFragmentModelList , fragmentPos , this )
$F125330 ( update )
public TreeViewerBuilder ( Composite parent , int style ) { mappings = Collections . emptyMap ( ) ; checkable = ( style & SWT . CHECK ) == SWT . CHECK ; if ( checkable ) { viewer = new CheckboxTreeViewer ( parent , style ) ; } else { viewer = new TreeViewer ( parent , style ) ; } ColumnViewerToolTipSupport . enableFor ( viewer , ToolTip . NO_RECREATE ) ; }
$F1 public void write $F24576 ( buffer , offset , count ) throws IOException { synchronized ( intThread ) { int avail = ( wroteIndex - dataEndIndex + data . length ) % data . length ; if ( avail == NUM00 ) avail = data . length ; if ( avail < count ) { $F132377 ( avail , count ) } if ( count > data . length - dataEndIndex ) { int firstPart = data . length - dataEndIndex ; int secondPart = count - firstPart ; System . arraycopy ( buffer , offset , data , dataEndIndex , firstPart ) ; System . arraycopy ( buffer , offset + firstPart , data , NUM00 , secondPart ) ; dataEndIndex = secondPart ; } else $F21534 ( System , buffer , offset , data , dataEndIndex , count ) $F8071 ( intThread ) } }
public void pause $F72 { $F8934 ( pauseLock ) try { paused = _BOOL ; } $F796 ( pauseLock ) }
public void addToConsolitatedMsg ( final String message ) { if $F22 ( consolidatedMessage ) $F2365 ( consolidatedMessage ) consolidatedMessage = consolidatedMessage + message ; }
$F192509 ( is , close , b , len , _BOOL , n , c , System , last )
public void sort ( final Comparator $F11632 comparator ) { synchronized ( mLock ) $F57005 ( Collections , mList , comparator ) notifyDataSetChanged ( ) ; }
public String cropKeepFinalCharacter ( String string , char finalChar ) { String cropped = crop ( string ) ; if ( ( null == string ) || string . equals ( cropped ) ) { return string ; } $F83314 ( cropped ) return cropped + finalChar ; }
public static boolean isDerivedAdjective ( final String word ) { if $F4012 ( word ) { if $F128455 ( word ) return _BOOL ; if $F8991 ( word ) return _BOOL ; } return _BOOL ; }
String renameFile ( String inputFilename ) { for ( Pattern searchExp : regexMappings . keySet ( ) ) { $F275 ( matcher , searchExp , inputFilename ) if $F281 ( matcher ) { String renamed = matcher . replaceFirst ( regexMappings . get ( searchExp ) ) ; return FILE_SEP_CHAR_MATCHER . trimLeadingFrom ( renamed ) ; } } throw new MoeProblem ( NUM00 + NUM00 , inputFilename ) ; }
private static int validateAdbServerPort $F20574 ( adbServerPort ) throws IllegalArgumentException { try { int port = Integer . decode ( adbServerPort ) ; if ( port <= NUM00 || port >= NUM00 ) $F825 return port ; } catch ( NumberFormatException e ) $F825 }
public static String formatElapsed ( Timestamp start ) { $F1747 ( start ) long startTime = start . getTime ( ) ; $F657 ( endTime , System ) return formatElapsed ( endTime - startTime ) ; }
$F1 public void stop $F72 { for ( Thread thread : threads ) $F36257 ( thread ) try { for ( Thread thread : threads ) $F45915 ( thread ) } $F887 }
private boolean verifyPublishedDualInetAddress ( String nodeId ) { DualInetAddress dualAddress = null ; Configuration config = queryConfiguration ( Constants . NODE_DUALINETADDR_CONFIG , nodeId ) ; if ( config != null ) { dualAddress = parseInetAddressConfig ( config ) ; } if ( ( dualAddress != null ) && dualAddress . equals ( inetAddressLookupMap . getDualInetAddress ( ) ) ) { return _BOOL ; } return _BOOL ; }
public void testRecursiveChains $F72 throws Throwable { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( addDeadEnds , _BOOL ) ) { final int val = NUM00 ; final int n = expensiveTests ? NUM00 : NUM00 ; $F70225 ( head ) $F70219 tail = head ; for ( $F119 ( i , n ) ) { if ( addDeadEnds ) m . thenApply ( tail , null ) ; tail = m . thenApply ( tail , null ) ; if ( addDeadEnds ) m . applyToEither ( tail , tail , null ) ; tail = m . applyToEither ( tail , tail , null ) ; if ( addDeadEnds ) m . thenCombine ( tail , tail , null ) ; tail = m . thenCombine ( tail , tail , null ) ; } head . complete ( val ) ; assertEquals ( val + NUM00 * n , ( int ) tail . join ( ) ) ; } }
public boolean responseIsString ( String oid ) $F298 ( stringResponses , oid )
$F35790 ( cw , desc , t , index , INTEGER , FLOAT , LONG , DOUBLE , OBJECT , data , dims , BOOLEAN , CHAR , BYTE , SHORT )
public void logFine ( String message ) { logger . fine ( logPrefix + message ) ; }
public static $F65632 createInputDialog ( final Window owner , final String title , final String label ) { final TextInputDialog dialog = new TextInputDialog $F72 ; dialog . setTitle ( title ) ; dialog . setHeaderText ( null ) ; dialog . setContentText ( label ) ; dialog . initOwner ( owner ) ; return dialog . showAndWait ( ) ; }
public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e )
private static String encode ( final String text ) throws UnsupportedEncodingException $F31978 ( URLEncoder , text )
public static String convertToRGB ( int color ) { $F21676 ( red , Integer , Color , color ) $F21676 ( green , Integer , Color , color ) $F21676 ( blue , Integer , Color , color ) $F21680 ( red ) $F21680 ( green ) $F21680 ( blue ) return NUM00 + red + green + blue ; }
private static final void appendEncodedByte ( StringBuffer buffer , byte value , $F96 state ) { if ( state [ NUM00 ] != NUM00 ) { char c = ( char ) ( $F42449 ( state ) | ( $F1047 ( value ) & NUM00 ) ) ; buffer . append ( c ) ; state [ NUM00 ] = NUM00 ; } else { state [ NUM00 ] = NUM00 ; state [ NUM00 ] = value ; } }
public SidedPlane ( double pX , double pY , double pZ , Vector v , double D ) { super ( v , D ) ; sigNum = Math . signum ( evaluate ( pX , pY , pZ ) ) ; $F47005 ( sigNum ) }
public String buildUnionQuery $F142640 ( subQueries , sortOrder , limit ) { $F20818 ( query ) int subQueryCount = subQueries . length ; String unionOperator = mDistinct ? NUM00 : NUM00 ; for ( $F119 ( i , subQueryCount ) ) { $F234280 ( i , query , unionOperator ) $F6939 ( query , subQueries , i ) } appendClause ( query , NUM00 , sortOrder ) ; appendClause ( query , NUM00 , limit ) ; $F92 ( query ) }
$F1 public String toString $F72 { $F280 ( sb ) sb . append ( clientId ) ; $F84 ( sb ) switch ( status ) { case CONNECTED : sb . append ( context . getString ( R . string . connectedto ) ) ; $F597 case DISCONNECTED : sb . append ( context . getString ( R . string . disconnected ) ) ; $F597 case NONE : sb . append ( context . getString ( R . string . no_status ) ) ; $F597 case CONNECTING : sb . append ( context . getString ( R . string . connecting ) ) ; $F597 case DISCONNECTING : sb . append ( context . getString ( R . string . disconnecting ) ) ; $F597 case ERROR : sb . append ( context . getString ( R . string . connectionError ) ) ; } $F84 ( sb ) sb . append ( host ) ; $F92 ( sb ) }
void registerCallback ( BluetoothCallback callback ) $F9232 ( mCallbacks , callback )
private void validateTableMetaDataNoRow $F8306 ( tableNamePattern , types ) throws Exception { try ( ResultSet tables = dbmd . getTables ( null , null , tableNamePattern , types ) ) { assertFalse ( String . format ( NUM00 , tableNamePattern , Arrays . toString ( types ) ) , tables . next ( ) ) ; } }
void checkClassBounds ( DiagnosticPosition pos , Type type ) { checkClassBounds ( pos , new HashMap < TypeSymbol , Type > $F72 , type ) ; }
private static String parseToken ( String pattern , $F2027 indexRef ) { $F280 ( buf ) int i = indexRef [ NUM00 ] ; $F115 ( length , pattern ) $F1280 ( c , pattern , i ) if ( $F91222 ( c ) ) { buf . append ( c ) ; while ( i + NUM00 < length ) { $F17494 ( peek , pattern , i ) if ( peek == c ) $F56682 ( buf , c , i ) else $F5153 } } else { $F84 ( buf ) boolean inLiteral = _BOOL ; for ( ; i < length ; i ++ ) { c = pattern . charAt ( i ) ; if ( c == NUM00 ) { if ( $F179049 ( i , length , pattern ) ) { i ++ ; buf . append ( c ) ; } else $F1091 ( inLiteral ) } else if ( ! inLiteral && ( $F91222 ( c ) ) ) { i -- ; $F597 } else $F288 ( buf , c ) } } indexRef [ NUM00 ] = i ; $F92 ( buf ) }
public int alloc ( final RWStore store , final int size , final IAllocationContext context ) { try { $F255788 ( size ) if ( size > m_size ) throw new IllegalArgumentException $F6486 ( m_size , size ) ; if ( m_freeBits == NUM00 ) $F322689 ( m_size ) int addr = - NUM00 ; if ( m_size <= m_store . cSmallSlot ) $F4915 ( allocFromIndex , size ) final Iterator < AllocBlock > iter = m_allocBlocks . iterator ( ) ; int count = - NUM00 ; while ( addr == - NUM00 && iter . hasNext ( ) ) { count ++ ; final AllocBlock block = iter . next ( ) ; checkBlock ( block ) ; addr = block . alloc ( m_size ) ; } if ( addr != - NUM00 ) { addr += NUM00 ; if ( -- m_freeBits == NUM00 ) { if ( s_islogTrace ) $F1932 ( log ) removeFromFreeList ( ) ; if $F3817 ( m_freeList ) { if ( s_islogDebug ) { final FixedAllocator nxt = ( FixedAllocator ) m_freeList . get ( NUM00 ) ; log . debug ( NUM00 + nxt . getSummaryStats ( ) ) ; } } } addr += ( count * NUM00 * m_bitSize ) ; final int value = - ( ( m_index < < RWStore . OFFSET_BITS ) + addr ) ; if ( m_statsBucket != null ) { m_statsBucket . allocate ( size ) ; } return value ; } else { $F83 ( sb ) $F286 ( sb , m_freeBits ) for ( AllocBlock ab : m_allocBlocks ) { sb . append ( ab . show ( ) + NUM00 ) ; } log . error ( sb ) ; $F1082 } } finally { $F32367 ( s_islogDebug , checkBits ) } }
public static NativePage createNativePageForURL ( String url , NativePage candidatePage , Tab tab , TabModelSelector tabModelSelector , Activity activity ) { return createNativePageForURL ( url , candidatePage , tab , tabModelSelector , activity , tab . isIncognito ( ) ) ; }
$F1 public void nodeDown ( long eventUID , String nodeID ) { try { $F790 ( lock ) untriedConnectors . putAll ( triedConnectors ) ; $F725 ( triedConnectors ) if $F3817 ( untriedConnectors ) { $F702 ( condition ) } } $F796 ( lock ) }
public static synchronized $F6877 allLocalMACs $F72 { $F3803 $F9187 ( macs ) ; try { Enumeration $F149690 itfs = NetworkInterface . getNetworkInterfaces ( ) ; if ( itfs != null ) { for ( NetworkInterface itf : asIterable ( itfs ) ) { $F96 hwAddr = itf . getHardwareAddress ( ) ; if $F22195 ( hwAddr ) { String mac = byteArray2HexString ( hwAddr ) ; $F24127 ( macs , mac ) } } } } catch ( SocketException ignore ) $F12523 ( Collections ) Collections . sort ( macs ) ; return macs ; }
public void removeCartItem ( int index , boolean triggerExternalOps , LocalDispatcher dispatcher ) throws CartItemModifyException { if ( isReadOnlyCart ( ) ) { throw new CartItemModifyException $F580 ; } $F61236 ( index ) if $F58405 ( cartLines , index ) $F665 ShoppingCartItem item = cartLines . remove ( index ) ; item . setQuantity ( BigDecimal . ZERO , dispatcher , this , triggerExternalOps , _BOOL , _BOOL , _BOOL ) ; }
private final void accessCheck ( T obj ) { if $F78643 ( cclass , obj ) throw accessCheckException ( obj ) ; }
protected void markFirstTime ( Element elem ) { $F20605 ( elemName , elem ) if $F3057 ( elemName ) { seenHtml = _BOOL ; } else if $F3057 ( elemName ) { seenHead = _BOOL ; } else if $F3057 ( elemName ) { if $F9634 ( buf ) { $F11577 ( newBuf ) $F603 ( newBuf , buf ) buf = newBuf ; } seenBody = _BOOL ; } }
public static String timeToString ( long period ) { period /= NUM00 ; final long milsecs = period % NUM00 ; period /= NUM00 ; final long secs = period % NUM00 ; period /= NUM00 ; final long mins = period % NUM00 ; period /= NUM00 ; final long hours = period ; return String . format ( NUM00 , hours , mins , secs , milsecs ) ; }
protected static boolean isUserDefinedProperty ( String propName ) { $F78369 ( standardPropNames , propName ) }
private boolean conditionM0 ( String value , int index ) { if ( charAt ( value , index + NUM00 ) == NUM00 ) { return _BOOL ; } return contains ( value , index - NUM00 , NUM00 , NUM00 ) && ( ( index + NUM00 ) == $F1092 ( value ) || contains ( value , index + NUM00 , NUM00 , NUM00 ) ) ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
@ Reference ( authors = NUM00 , title = NUM00 , booktitle = NUM00 , url = NUM00 ) public double computeTau ( long c , long d , double m , long wd , long bd ) { double tie = ( wd * ( wd - NUM00 ) + bd * ( bd - NUM00 ) ) > > > NUM00 ; return ( c - d ) / Math . sqrt ( ( m - tie ) * m ) ; }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) serviceID = new ServiceID ( in ) ; }
$F43277 ( listener , mListeners )
private void generateCreateEvents ( List < IgfsPath > createdPaths , boolean file ) { if ( evts . isRecordable ( EventType . EVT_IGFS_DIR_CREATED ) ) { for ( $F2665 ( i , createdPaths ) ) IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , createdPaths . get ( i ) , EventType . EVT_IGFS_DIR_CREATED ) ; } IgfsPath $F7662 ( leafPath , createdPaths ) ; if ( file ) { IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_FILE_CREATED ) ; IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_FILE_OPENED_WRITE ) ; } else IgfsUtils . sendEvents ( igfsCtx . kernalContext ( ) , leafPath , EventType . EVT_IGFS_DIR_CREATED ) ; }
public OptInTemplateClassResolver ( Set allowedClasses , List trustedTemplates ) { this . allowedClasses = allowedClasses != null ? allowedClasses : Collections . EMPTY_SET ; if ( trustedTemplates != null ) { $F266988 ( trustedTemplateNames ) $F13241 ( trustedTemplatePrefixes ) $F10531 ( it , trustedTemplates ) while $F2921 ( it ) { $F2778 ( li , it ) $F120626 ( li ) if $F8991 ( li ) { trustedTemplatePrefixes . add ( $F4019 ( li ) ) ; } else $F207 ( trustedTemplateNames , li ) } } else { trustedTemplateNames = Collections . EMPTY_SET ; trustedTemplatePrefixes = Collections . EMPTY_LIST ; } }
protected void asyncOpRelease $F72 { if ( asyncOpsSem != null ) $F33833 ( asyncOpsSem ) }
public static boolean validSystemNameConfig ( String systemName , char type ) { $F27673 ( validSystemNameFormat , systemName , type , _BOOL ) return _BOOL ; }
public void removeAll $F72 { if $F14765 ( mRecords ) { $F725 ( mRecords ) mCurrentPosition = - NUM00 ; notifyObservers ( ) ; } }
public synchronized boolean startReindexer ( String name , boolean force ) throws ReindexerAlreadyRunningException { OnlineReindexer < ? , ? , ? > reindexer = reindexers . get ( name ) ; validateReindexerNotRunning ( reindexer ) ; if ( force || ! isCurrentIndexVersionLatest ( name , reindexer ) ) { $F2346 ( reindexer ) return _BOOL ; } return _BOOL ; }
$F1 public void printStackTrace $F72 { $F301 ( super ) if ( nested != null ) $F301 ( nested ) }
private static void updateLastModified ( File destDir , String warFilePath ) { $F1705 ( warFile , warFilePath ) destDir . setLastModified ( warFile . lastModified ( ) ) ; }
public void addChild ( BaseAssemblyNode childNode ) { childNode . parentNode = this ; childNodes . add ( childNode ) ; }
protected void notifyHistoryChangedListeners $F72 { Iterator < HistoryChangedListener > iter ; HistoryChangedListener l ; $F18058 ( iter , m_HistoryChangedListeners ) while $F2921 ( iter ) { $F45366 ( l , iter ) l . historyChanged ( new HistoryChangedEvent ( this , HISTORY_NAME , getHistory ( ) ) ) ; } }
$F121106 ( putLock , this , notFull )
@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start $F72 throws IOException { synchronized ( mCameraLock ) { $F20092 ( mCamera , this ) mCamera = createCamera ( ) ; if ( $F20093 ( Build ) ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; $F20103 ( mProcessingThread , mFrameProcessor ) mFrameProcessor . setActive ( _BOOL ) ; $F2346 ( mProcessingThread ) } return this ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private TextView findTextViewByTagId ( final String tagId ) { for ( final TextView view : mTagViewMap . values ( ) ) { final Tag tag = ( Tag ) view . getTag ( ) ; if ( tagId . equals ( tag . id ) ) { return view ; } } $F1274 }
public Space prune ( Space prefix ) throws ScopeException { Space x = this ; ArrayList < Space > $F204 ( stack ) ; while $F10335 ( x , prefix ) { $F6965 ( stack , x ) $F10337 ( x ) } if ( x == null ) { throw new ScopeException $F580 ; } else { Space result = new Space ( universe , x . getDomain ( ) ) ; for ( Space space : stack ) { result = result . S ( space . getRelation ( ) ) ; } return result ; } }
default void infof $F4353 ( format , args ) $F4355 ( info , String , format , args )
public static int darker ( int color , float factor ) { int a = Color . alpha ( color ) ; int r = Color . red ( color ) ; int g = Color . green ( color ) ; int b = Color . blue ( color ) ; return Color . argb ( a , Math . max ( $F2354 ( r , factor ) , NUM00 ) , Math . max ( $F2354 ( g , factor ) , NUM00 ) , Math . max ( $F2354 ( b , factor ) , NUM00 ) ) ; }
public < FV > FV extractRawJavaFieldValue ( Object object ) throws SQLException { Object val ; if ( fieldGetMethod == null ) { try $F6045 ( val , field , object ) catch ( Exception e ) { throw SqlExceptionUtil . create ( NUM00 + this , e ) ; } } else { try { val = fieldGetMethod . invoke ( object ) ; } catch ( Exception e ) { throw SqlExceptionUtil . create ( NUM00 + fieldGetMethod + NUM00 + this , e ) ; } } $F1431 FV converted = ( FV ) val ; return converted ; }
public static void writeFile ( File file , $F96 data ) { try { $F18800 ( ra , file ) ra . write ( data ) ; $F5660 ( ra , data ) $F59 ( ra ) } catch ( IOException e ) $F72290 ( file , e ) }
public static $F1986 thresholdStringToArray ( String top , int L ) { if $F3106 ( top ) { return MLUtils . toDoubleArray ( top ) ; } else { double t [ ] = new double [ L ] ; Arrays . fill ( t , Double . parseDouble ( top ) ) ; return t ; } }
$F1 public $F806 determineColumnConstraints ( ResultProducer rp ) throws Exception $F1337
abstract $F2689 initConfigNames $F72 ;
public static int eval ( String url , String text ) throws IOException { String returnValue = null ; if $F3106 ( url ) { returnValue = doHttp ( url , text ) ; } else if $F3106 ( url ) { returnValue = doBsh ( url , text ) ; } else $F3490 try $F75349 ( Integer , returnValue ) catch ( Exception e ) $F1083 }
public DSAPrivateKey $F97 ( encoded ) throws InvalidKeyException $F19529 ( clearOldKey , decode , encoded )
$F47733 ( reader , writer , buffer , count )
private void sendBroadcastNewOperation ( Target target , RemoteOperation operation ) { Intent intent = new Intent ( ACTION_OPERATION_ADDED ) ; if ( target . mAccount != null ) { intent . putExtra ( EXTRA_ACCOUNT , target . mAccount ) ; } else { intent . putExtra ( EXTRA_SERVER_URL , target . mServerUrl ) ; } sendStickyBroadcast ( intent ) ; }
int successful $F72 $F1522 ( success )
public void monitor ( String key ) { Timer t = new Timer ( _BOOL ) ; t . schedule ( new WatchableRegistration ( key ) , NUM00 * NUM00 , NUM00 * NUM00 ) ; }
$F5077 ( journalWriter , writer , journalFileTmp , IO_BUFFER_SIZE , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , _BOOL )
protected int checkRiskAttribute $F72 { int retVal = NUM00 ; if $F6299 ( debug ) $F218635 ( debug , ADAPTIVE ) if ( riskAttributeName != null && riskAttributeValue != null ) { $F29150 ( riskAttributeValues ) riskAttributeValues = getIdentityAttributeSet ( riskAttributeName ) ; if ( riskAttributeValues != null ) { for ( String riskAttr : riskAttributeValues ) { if $F8397 ( riskAttributeValue , riskAttr ) { if $F6299 ( debug ) $F218635 ( debug , ADAPTIVE ) retVal = riskAttributeScore ; $F597 } } } } if ( ! riskAttributeInvert ) { retVal = riskAttributeScore - retVal ; } return retVal ; }
public static MethExecutorResult executeInstance ( String receiver , String selector , $F749 types , $F131 args ) { try { $F63290 ( receiverClass , Class , receiver ) Constructor init = receiverClass . getDeclaredConstructor ( $F33934 ) ; init . setAccessible ( _BOOL ) ; Object target = init . newInstance ( $F3297 ) ; Object res = null ; try { Method theMethod = getMethod ( receiverClass , selector , types ) ; res = theMethod . invoke ( target , args ) ; return new MethExecutorResult ( res ) ; } catch ( InvocationTargetException invTargEx ) { $F171619 ( targEx , invTargEx ) if ( targEx == null ) { return new MethExecutorResult ( res ) ; } else { return new MethExecutorResult ( targEx ) ; } } } $F79506 ( SystemFailure , e ) catch ( Throwable t ) { return new MethExecutorResult ( t ) ; } }
private void writeObject ( ObjectOutputStream stream ) throws IOException { $F9339 ( stream ) marshalAttributes ( attrs , stream ) ; }
$F1 synchronized public void write $F1313 ( off , len ) throws IOException { if ( b == null ) $F18044 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F32905 ( len ) c . checkWrite ( ) ; boolean isFirstRecordOfThePayload = _BOOL ; try { do { boolean holdRecord = _BOOL ; int howmuch ; if ( isFirstRecordOfThePayload && c . needToSplitPayload ( ) ) { howmuch = Math . min ( NUM00 , r . availableDataBytes ( ) ) ; if ( ( len != NUM00 ) && ( howmuch == NUM00 ) ) { holdRecord = _BOOL ; } } else { howmuch = Math . min ( len , r . availableDataBytes ( ) ) ; } if ( isFirstRecordOfThePayload && howmuch != NUM00 ) { isFirstRecordOfThePayload = _BOOL ; } if ( howmuch > NUM00 ) { r . write ( b , off , howmuch ) ; off += howmuch ; len -= howmuch ; } c . writeRecord ( r , holdRecord ) ; c . checkWrite ( ) ; } while ( len > NUM00 ) ; } catch ( Exception e ) { c . handleException ( e ) ; } }
public boolean onInterceptTouchEvent ( MotionEvent ev ) { $F1431 final boolean debug = _BOOL ; if ( debug ) { Log . d ( Launcher . TAG , NUM00 + ev + NUM00 + mDragging ) ; } acquireVelocityTrackerAndAddMovement ( ev ) ; $F19472 ( action , ev ) final $F2027 dragLayerPos = $F42981 ( getClampedDragLayerPos , ev ) ; $F178172 ( dragLayerX , dragLayerPos ) $F178172 ( dragLayerY , dragLayerPos ) switch ( action ) { case MotionEvent . ACTION_MOVE : $F597 case MotionEvent . ACTION_DOWN : mMotionDownX = dragLayerX ; mMotionDownY = dragLayerY ; mLastDropTarget = null ; $F597 case MotionEvent . ACTION_UP : $F3224 ( mLastTouchUpTime , System ) if ( mDragging ) { PointF vec = isFlingingToDelete ( mDragObject . dragSource ) ; if ( ! DeleteDropTarget . willAcceptDrop ( mDragObject . dragInfo ) ) { vec = null ; } if ( vec != null ) { dropOnFlingToDeleteTarget ( dragLayerX , dragLayerY , vec ) ; } else { drop ( dragLayerX , dragLayerY ) ; } } endDrag ( ) ; $F597 case MotionEvent . ACTION_CANCEL : cancelDrag ( ) ; $F597 } return mDragging ; }
public void test_concurrentKBCreateAndDiscovery $F72 throws Exception { $F61105 ( namespace , getName ) $F17606 ( properties , getProperties ) Journal jnl = null ; try { jnl = new Journal ( properties ) ; doConcurrentCreateAndDiscoveryTest ( jnl , namespace ) ; } finally { if ( jnl != null ) $F17623 ( jnl ) } }
private void resetDatabase ( TungstenProperties serviceProps , $F2540 ( progress ) ) throws InterruptedException { DataSourceAdministrator admin = null ; String serviceName = serviceProps . getString ( ReplicatorConf . SERVICE_NAME ) ; try { admin = new DataSourceAdministrator ( serviceProps ) ; $F97691 ( admin ) $F545 ( progress , serviceName ) boolean cleared = admin . resetAll ( ) ; if ( cleared ) $F22715 ( logger ) else $F10090 ( logger , serviceName ) } catch ( ReplicatorException e ) { logger . error ( String . format ( $F8129 ( serviceName , e ) ) , e ) ; } finally { if ( admin != null ) $F33834 ( admin ) } }
public static final void writeValueXml ( Object v , String name , XmlSerializer out ) throws $F18821 { String typeStr ; if ( v == null ) { $F18823 ( out ) $F18831 ( name , out ) $F18825 ( out ) $F665 } else if ( v instanceof String ) $F154622 ( out , name , v ) else if ( v instanceof Integer ) { typeStr = NUM00 ; } else if ( v instanceof Long ) { typeStr = NUM00 ; } else if ( v instanceof Float ) { typeStr = NUM00 ; } else if ( v instanceof Double ) { typeStr = NUM00 ; } else if ( v instanceof Boolean ) { typeStr = NUM00 ; } else if $F2456 ( v ) { writeByteArrayXml ( $F2457 ( v ) , name , out ) ; $F665 } else if $F25705 ( v ) { writeIntArrayXml ( $F25706 ( v ) , name , out ) ; $F665 } else if ( v instanceof Map ) { writeMapXml ( ( Map ) v , name , out ) ; $F665 } else if ( v instanceof List ) { writeListXml ( ( List ) v , name , out ) ; $F665 } else if ( v instanceof CharSequence ) $F154622 ( out , name , v ) else $F1666 ( v ) out . startTag ( null , typeStr ) ; $F18831 ( name , out ) out . attribute ( null , NUM00 , v . toString ( ) ) ; out . endTag ( null , typeStr ) ; }
private void initializeIdealPoint $F72 { idealPoint = new double [ problem . getNumberOfObjectives ( ) ] ; $F116979 ( Arrays , idealPoint , Double ) }
private long startWait $F72 { return System . nanoTime ( ) ; }
public static $F806 readFontNames ( final FontData fontData ) { final $F806 fontNames = $F382 ; fontNames [ NUM00 ] = null ; final BufferedReader br = new BufferedReader ( new StringReader ( new String ( fontData . getBytes ( $F34024 ( fontData ) ) ) ) ) ; String line = null ; while ( _BOOL ) { try $F63868 ( line , br ) catch ( final IOException e ) $F65913 ( LogWriter , e ) $F32472 ( line ) if $F3106 ( line ) { final int nameStart = line . indexOf ( NUM00 , NUM00 ) ; if ( nameStart != - NUM00 ) { $F57844 ( nameEnd , line , nameStart ) if ( nameEnd != - NUM00 ) { final String name = line . substring ( nameStart + NUM00 , nameEnd ) ; fontNames [ NUM00 ] = name . toLowerCase ( ) ; $F597 } } } } if ( br != null ) { try $F881 ( br ) catch ( final Exception e ) $F109312 ( LogWriter , e ) } $F2727 ( fontData ) return fontNames ; }
private void writeUnitsOfIndentation ( int i ) throws IOException { for ( ; i > NUM00 ; i -- ) $F4050 ( writer , INDENTATION_UNIT ) }
private PatternParser $F72 throws HyphenationException { $F6932 ( token ) parser = createParser ( ) ; parser . setContentHandler ( this ) ; parser . setErrorHandler ( this ) ; hyphenChar = NUM00 ; }
public static int capBetween $F14337 ( min , number , max ) { assertTrue ( min <= max ) ; return Math . min ( max , Math . max ( min , number ) ) ; }
public boolean hasExtensions $F72 $F40347 ( extensions )
public void munge ( String entityId , Collection $F12621 statements , $F6877 existingValues , $F6877 existingRefs , Change sourceChange ) { $F19233 ( statements ) MungeOperation op = new MungeOperation ( entityId , statements , existingValues , existingRefs ) ; if ( sourceChange != null ) { op . importFromChange ( sourceChange ) ; } op . munge ( ) ; existingValues . removeAll ( op . extraValidSubjects ) ; existingRefs . removeAll ( op . extraValidSubjects ) ; $F665 }
public void showPropertyDialog $F72 { if ( $F61599 ( m_Editor ) ) { if ( m_PD == null ) { int x = getLocationOnScreen ( ) . x ; int y = getLocationOnScreen ( ) . y ; if ( PropertyDialog . getParentDialog ( this ) != null ) m_PD = new PropertyDialog ( PropertyDialog . getParentDialog ( this ) , m_Editor , x , y ) ; else m_PD = new PropertyDialog ( PropertyDialog . getParentFrame ( this ) , m_Editor , x , y ) ; m_PD . setVisible ( _BOOL ) ; } else $F59564 ( m_PD , _BOOL ) m_Editor . setValue ( m_Editor . getValue ( ) ) ; } }
public Lucene60Codec ( Mode mode ) { super ( NUM00 ) ; this . storedFieldsFormat = new Lucene50StoredFieldsFormat ( Objects . requireNonNull ( mode ) ) ; }
$F10188 ( close , Util , directory )
public synchronized void remove ( String name ) { for ( $F2277 ( i , modifications ) ) { Modification mod = modifications . get ( i ) ; Attribute attr = mod . getAttribute ( ) ; if ( name . equalsIgnoreCase ( attr . getAttributeDescriptionAsString ( ) ) ) { modifications . remove ( i ) ; $F665 } } }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
private boolean quietSleep ( long ms ) { try $F7595 ( Thread , ms ) $F42359 ( _BOOL ) return _BOOL ; }
public void pushFrame ( LocalVariableMap vars , DMLProgramCounter pc ) { callStack . push ( new DMLFrame ( vars , pc ) ) ; }
public boolean isLandingPage ( URL url ) { if ( url . getQuery ( ) != null ) { return _BOOL ; } else { return landingPageSuffix ( url ) != NUM00 ; } }
protected void layoutGraphicModifiers ( DrawContext dc , AVList modifiers , OrderedSymbol osym ) $F845
public static synchronized void progress ( final String message ) { sLastProgress = message ; final PrintStream prog = getProgressStream ( ) ; if ( prog != null ) { prog . println ( now ( ) + message ) ; $F1206 ( prog ) if ( prog . checkError ( ) ) { sProgressStream = null ; } } }
private static boolean match ( CharSequence string , CharSequence pattern , int sNdx , int pNdx ) { $F1749 ( pLen , pattern ) if ( pLen == NUM00 ) { if $F4432 ( pattern ) { return _BOOL ; } } $F1749 ( sLen , string ) boolean nextIsNotWildcard = _BOOL ; while ( _BOOL ) { if ( ( sNdx >= sLen ) == _BOOL ) { while ( ( pNdx < pLen ) && $F11983 ( pattern , pNdx ) ) { pNdx ++ ; } return pNdx >= pLen ; } $F232230 ( pNdx , pLen , _BOOL ) $F1280 ( p , pattern , pNdx ) if ( nextIsNotWildcard == _BOOL ) { if ( p == NUM00 ) { pNdx ++ ; nextIsNotWildcard = _BOOL ; $F598 } if ( p == NUM00 ) { sNdx ++ ; pNdx ++ ; $F598 } if ( p == NUM00 ) { char pNext = NUM00 ; if ( pNdx + NUM00 < pLen ) { pNext = pattern . charAt ( pNdx + NUM00 ) ; } if ( pNext == NUM00 ) $F118993 ( pNdx ) int i ; pNdx ++ ; for ( i = string . length ( ) ; i >= sNdx ; i -- ) { if ( match ( string , pattern , i , pNdx ) == _BOOL ) { return _BOOL ; } } return _BOOL ; } } else { nextIsNotWildcard = _BOOL ; } if $F94215 ( p , string , sNdx ) { return _BOOL ; } sNdx ++ ; pNdx ++ ; } }
public String nextCDATA $F72 throws JSONException { char c ; int i ; $F280 ( sb ) for ( $F589 ) { c = next ( ) ; if ( end ( ) ) $F25983 ( syntaxError ) sb . append ( c ) ; $F25985 ( i , sb ) if ( $F25986 ( i , sb ) && $F10825 ( sb , i ) && $F10825 ( sb , i ) ) { sb . setLength ( i ) ; $F92 ( sb ) } } }
public void addGrammarFile ( String fileName ) $F207 ( grammarFiles , fileName )
private $F28319 rollbackDeleteMirrorDeviceMethod ( URI vplexURI , URI vplexMirrorURI ) $F79423 ( RB_DELETE_MIRROR_DEVICE_METHOD_NAME , vplexURI , vplexMirrorURI )
private String findCipherAndStrength ( $F96 supportedCiphers , $F806 tokens ) { byte s ; for ( $F1139 ( i , strength ) ) { if ( ( s = strength [ i ] ) != NUM00 ) { for ( $F1139 ( j , supportedCiphers ) ) { if ( s == supportedCiphers [ j ] && ( specifiedCipher == null || specifiedCipher . equals ( tokens [ j ] ) ) ) { switch ( s ) { $F7242 ( HIGH_STRENGTH , negotiatedStrength ) $F7242 ( MEDIUM_STRENGTH , negotiatedStrength ) $F7242 ( LOW_STRENGTH , negotiatedStrength ) } return tokens [ j ] ; } } } } $F1274 }
public static $F806 split ( String line , String delim ) { $F19151 ( list ) $F14497 ( t , line , delim ) $F44279 ( t , list ) $F10150 ( list ) }
public static String slurpFile ( File file ) throws IOException { Reader r = new FileReader ( file ) ; return slurpReader ( r ) ; }
$F1113 public List < PlayerNbt > createSingleplayerPlayerNbts $F72 { $F2980 ( Log ) return Arrays . asList ( createLevelDatPlayerNbt ( ) ) ; }
$F1 public String toString $F72 { StringBuilder result = new StringBuilder ( limit - position ) ; for ( int i = position ; i < limit ; i ++ ) $F9821 ( result , get , i ) $F92 ( result ) }
public void testEqualsUnequal1 $F72 { String a = NUM00 ; int aScale = - NUM00 ; String b = NUM00 ; int bScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F28249 ( assertFalse , aNumber , bNumber ) }
public void testCase8 $F72 { $F7829 $F10679 int aSign = - NUM00 ; int bSign = NUM00 ; $F122099 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F70256 ( assertEquals , result ) }
public GetFormKeyCmd ( String processDefinitionId , String taskDefinitionKey ) { setProcessDefinitionId ( processDefinitionId ) ; if ( $F107041 ( taskDefinitionKey ) ) { throw new ActivitiIllegalArgumentException ( NUM00 + taskDefinitionKey + NUM00 ) ; } this . taskDefinitionKey = taskDefinitionKey ; }
protected abstract StorageLevel storageLevel $F72 ;
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private void statInit $F72 { lDocumentNo . setLabelFor ( fDocumentNo ) ; $F405061 ( fDocumentNo , AdempierePLAF ) fDocumentNo . addActionListener ( this ) ; fcheckReceipt . setSelected ( _BOOL ) ; $F79692 ( fcheckReceipt ) fcheckReceipt . addActionListener ( this ) ; fcheckPayment . setSelected ( _BOOL ) ; $F79692 ( fcheckPayment ) fcheckPayment . addActionListener ( this ) ; fBankAccount_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( MPayment . Table_Name , MPayment . COLUMNNAME_C_BankAccount_ID ) , DisplayType . TableDir ) ) ; lBankAccount_ID . setLabelFor ( fBankAccount_ID ) ; $F405061 ( fBankAccount_ID , AdempierePLAF ) fBankAccount_ID . addActionListener ( this ) ; fBPartner_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( MPayment . Table_Name , MPayment . COLUMNNAME_C_BPartner_ID ) , DisplayType . Search ) ) ; lBPartner_ID . setLabelFor ( fBPartner_ID ) ; $F405061 ( fBPartner_ID , AdempierePLAF ) fBPartner_ID . addActionListener ( this ) ; lDateFrom . setLabelFor ( fDateFrom ) ; $F405061 ( fDateFrom , AdempierePLAF ) fDateFrom . setToolTipText ( $F9206 ( Msg , Env ) ) ; fDateFrom . addActionListener ( this ) ; lDateTo . setLabelFor ( fDateTo ) ; $F405061 ( fDateTo , AdempierePLAF ) fDateTo . setToolTipText ( $F9206 ( Msg , Env ) ) ; fDateTo . addActionListener ( this ) ; lAmtFrom . setLabelFor ( fAmtFrom ) ; $F405061 ( fAmtFrom , AdempierePLAF ) fAmtFrom . setToolTipText ( $F9206 ( Msg , Env ) ) ; fAmtFrom . setBorder ( fDateFrom . getBorder ( ) ) ; fAmtFrom . addActionListener ( this ) ; lAmtTo . setLabelFor ( fAmtTo ) ; $F405061 ( fAmtTo , AdempierePLAF ) fAmtTo . setToolTipText ( $F9206 ( Msg , Env ) ) ; fAmtTo . setBorder ( fDateFrom . getBorder ( ) ) ; fAmtTo . addActionListener ( this ) ; CPanel amtPanel = new CPanel $F72 ; CPanel datePanel = new CPanel $F72 ; amtPanel . setLayout ( new ALayout ( NUM00 , NUM00 , _BOOL ) ) ; $F405134 ( amtPanel , fAmtFrom ) $F103711 ( amtPanel , lAmtTo ) $F103711 ( amtPanel , fAmtTo ) datePanel . setLayout ( new ALayout ( NUM00 , NUM00 , _BOOL ) ) ; $F405134 ( datePanel , fDateFrom ) $F103711 ( datePanel , lDateTo ) $F103711 ( datePanel , fDateTo ) $F405134 ( p_criteriaGrid , lDocumentNo ) $F103711 ( p_criteriaGrid , fDocumentNo ) $F103711 ( p_criteriaGrid , lBPartner_ID ) $F103711 ( p_criteriaGrid , fBPartner_ID ) $F405134 ( p_criteriaGrid , fcheckReceipt ) $F405134 ( p_criteriaGrid , lBankAccount_ID ) p_criteriaGrid . add ( fBankAccount_ID ) ; $F103711 ( p_criteriaGrid , lDateFrom ) $F103711 ( p_criteriaGrid , datePanel ) $F405134 ( p_criteriaGrid , fcheckPayment ) $F405134 ( p_criteriaGrid , lAmtFrom ) $F103711 ( p_criteriaGrid , amtPanel ) }
$F1 public Graphics create $F72 { $F110481 ( DEBUG , m_printstream ) PostscriptGraphics psg = new PostscriptGraphics ( this ) ; return ( psg ) ; }
private void parseActions $F72 { $F8093 ( st , actions , _BOOL ) boolean comma = _BOOL ; while $F14498 ( st ) { $F8095 ( act , st ) if $F3057 ( act ) $F1448 else if ( comma ) { if $F1264 ( act ) $F3468 ( comma , _BOOL ) } else if $F21935 ( act ) { mask |= CONNECT ; } else if $F21935 ( act ) { mask |= ACCEPT ; } else if $F21935 ( act ) { mask |= DELEGATE ; } else if $F21935 ( act ) { mask |= LISTEN ; } else $F5153 comma = ! comma ; } if ( ! comma ) $F825 }
$F96 toBytes ( SSLSession session ) { if ( ! ( session instanceof OpenSSLSessionImpl ) ) $F1337 OpenSSLSessionImpl sslSession = ( OpenSSLSessionImpl ) session ; try { $F1538 ( baos ) $F1533 ( daos , baos ) daos . writeInt ( OPEN_SSL ) ; $F46943 ( data , sslSession ) $F17916 ( daos , data ) daos . write ( data ) ; $F65927 certs = session . getPeerCertificates ( ) ; $F17916 ( daos , certs ) for ( Certificate cert : certs ) { data = cert . getEncoded ( ) ; $F17916 ( daos , data ) daos . write ( data ) ; } $F11316 ( baos ) } catch ( IOException e ) { log ( e ) ; $F1274 } catch ( CertificateEncodingException e ) { log ( e ) ; $F1274 } }
$F196938 ( textCompactionData , byteCompactionData , length , result , subMode , Mode , priorToShiftMode , i , subModeCh , ch , ALPHA , LL , ML , PS , MODE_SHIFT_TO_BYTE_COMPACTION_MODE , TEXT_COMPACTION_MODE_LATCH , LOWER , AS , MIXED , PL , MIXED_CHARS , AL , PUNCT , PAL , PUNCT_CHARS , ALPHA_SHIFT , PUNCT_SHIFT )
$F35807 ( name , _BOOL )
protected void addCounters ( BasicCounters < MutableLong > target , BasicCounters < MutableLong > source ) { for ( Enum < ReaderCounterKeys > key : ReaderCounterKeys . values ( ) ) { MutableLong tcounter = target . getCounter ( key ) ; if ( tcounter == null ) { tcounter = new MutableLong $F72 ; target . setCounter ( key , tcounter ) ; } MutableLong scounter = source . getCounter ( key ) ; if ( scounter != null ) { tcounter . add ( scounter . longValue ( ) ) ; } } }
private void addCard ( SharedPreferences sharedPreferences , String key ) { String json = sharedPreferences . getString ( key , null ) ; if ( json != null ) { try { $F16933 ( jsonData , json ) if $F186819 ( jsonData , IMAGE_KEY ) { $F19101 ( image , jsonData , IMAGE_KEY ) List < ITopic > cards = getSourceTopicModel ( ) ; switch ( key ) { case POOL_KEY : cards . add ( NUM00 , Cards . pool ( image , getActivity ( ) ) ) ; removeDuplicates ( POOL_KEY , cards ) ; $F597 case VIDEO_KEY : switch ( jsonData . getString ( ID_KEY ) ) { case POOL_CAMERA_ID : mGreatShotUrl = jsonData . getString ( URL_KEY ) ; mElv . setOnGroupClickListener ( greatShotListener ) ; cards . add ( NUM00 , Cards . poolVideo ( mGreatShotUrl , getActivity ( ) ) ) ; removeDuplicates ( VIDEO_KEY , cards ) ; $F597 } $F597 case FOOD_KEY : cards . add ( NUM00 , Cards . food ( image , getActivity ( ) ) ) ; removeDuplicates ( FOOD_KEY , cards ) ; $F597 case PRINTER_3D_KEY : cards . add ( NUM00 , Cards . printer3d ( image , getActivity ( ) ) ) ; removeDuplicates ( PRINTER_3D_KEY , cards ) ; $F597 } } else if $F186819 ( jsonData , MESSAGE_KEY ) { $F19101 ( message , jsonData , MESSAGE_KEY ) List < ITopic > cards = getSourceTopicModel ( ) ; cards . add ( NUM00 , Cards . test ( message , getActivity ( ) ) ) ; } $F62331 ( UI ) } $F16830 ( e ) } }
public static List < LoggedMqttMessage > parseMessageLog ( $F20109 ( messages ) , final ProgressUpdater progress , final long current , final long max ) throws SpyException { try { final long startTime = TimeUtils . getMonotonicTime ( ) ; $F10162 ( items , messages ) final long chunkSize = items / NUM00 ; final MqttMessageLogParser parser = new MqttMessageLogParser $F72 ; final List < LoggedMqttMessage > list = new ArrayList < LoggedMqttMessage > $F72 ; long item = NUM00 ; long reportAt = NUM00 ; for ( $F119 ( i , items ) ) { $F3056 ( message , messages , i ) if ( progress != null ) { if ( progress . isCancelled ( ) ) $F11048 ( logger ) item ++ ; if ( item % NUM00 == NUM00 ) { progress . update ( current + item , max ) ; } } if ( ( i > NUM00 ) && ( i == ( chunkSize * reportAt ) ) ) { final long currentTime = TimeUtils . getMonotonicTime ( ) ; final long timeTaken = currentTime - startTime ; final long totalTimeExpected = timeTaken * items / i ; if ( timeTaken > NUM00 ) { logger . info ( NUM00 , reportAt * NUM00 , ( totalTimeExpected - timeTaken ) / NUM00 ) ; } reportAt ++ ; } try { list . add ( parser . parse ( message ) ) ; } catch ( XMLException e ) $F30203 ( logger , message , e ) } $F11057 ( logger , list ) return list ; } catch ( XMLException e ) { throw new SpyException ( NUM00 , e ) ; } }
private void recomputeSeperation ( $F28974 ( means ) , $F1986 sep ) { $F18832 ( k , means ) assert ( sep . length == k ) ; boolean issquared = ( distanceFunction instanceof SquaredEuclideanDistanceFunction ) ; $F116979 ( Arrays , sep , Double ) for ( $F119 ( i , k ) ) { $F80292 ( m1 , DoubleVector , means , i ) for ( $F119 ( j , i ) ) { double $F42644 ( d , distanceFunction , m1 , DoubleVector , means , j ) ; sep [ i ] = ( d < sep [ i ] ) ? d : sep [ i ] ; sep [ j ] = ( d < sep [ j ] ) ? d : sep [ j ] ; } } for ( $F119 ( i , k ) ) { sep [ i ] = issquared ? Math . sqrt ( sep [ i ] ) : sep [ i ] ; sep [ i ] *= NUM00 ; } }
private int transition ( int state , int symbol ) { for ( $F9958 ( i , state , transitions ) ) { if ( ( transitions [ i ] % vocabularySize ) == symbol ) { return ( transitions [ i ] / vocabularySize ) ; } } $F150 }
public synchronized CeylonConfig merge ( CeylonConfig other ) { for ( String key : other . getOptionNames ( null ) ) { $F806 values = other . getOptionValues ( key ) ; setOptionValues ( key , values ) ; } return this ; }
public static synchronized String rot13 ( String input ) { $F280 ( output ) if ( input != null ) { for ( $F1088 ( i , input ) ) { $F1280 ( inChar , input , i ) if ( ( inChar >= NUM00 ) & ( inChar <= NUM00 ) ) { inChar += NUM00 ; if ( inChar > NUM00 ) { inChar -= NUM00 ; } } if ( ( inChar >= NUM00 ) & ( inChar <= NUM00 ) ) { inChar += NUM00 ; if ( inChar > NUM00 ) { inChar -= NUM00 ; } } output . append ( inChar ) ; } } $F92 ( output ) }
private long monthRange $F72 { ValueRange startRange = chrono . range ( MONTH_OF_YEAR ) ; if ( startRange . isFixed ( ) && startRange . isIntValue ( ) ) { return startRange . getMaximum ( ) - startRange . getMinimum ( ) + NUM00 ; } $F150 }
public void animate ( MarkerWithPosition marker , LatLng from , LatLng to ) { $F790 ( lock ) mAnimationTasks . add ( new AnimationTask ( marker , from , to ) ) ; $F704 ( lock ) }
$F1 public int compareTo ( ComponentDescription o ) { int myPos = NUM00 ; int oPos = NUM00 ; if ( this instanceof LanguageComponentDescription ) { myPos = NUM00 ; } else if ( this instanceof VoiceComponentDescription ) { myPos = NUM00 ; } if ( o instanceof LanguageComponentDescription ) { oPos = NUM00 ; } else if ( o instanceof VoiceComponentDescription ) { oPos = NUM00 ; } if ( oPos - myPos != NUM00 ) { return ( oPos - myPos ) ; } return name . compareTo ( o . name ) ; }
public $F8748 testToString $F72 { return super . testToString ( ) ; }
public static $F96 escapeEasternUnicodeByteStream $F27539 ( origBytes , origString ) { $F1338 ( origBytes ) if $F9634 ( origBytes ) $F42429 int bytesLen = origBytes . length ; int bufIndex = NUM00 ; int strIndex = NUM00 ; $F39018 ( bytesOut , bytesLen ) while ( _BOOL ) { if $F11983 ( origString , strIndex ) { bytesOut . write ( origBytes [ bufIndex ++ ] ) ; } else { int loByte = origBytes [ bufIndex ] ; $F69446 ( loByte ) bytesOut . write ( loByte ) ; if ( loByte >= NUM00 ) { if $F133315 ( bufIndex , bytesLen ) { int hiByte = origBytes [ bufIndex + NUM00 ] ; $F69446 ( hiByte ) bytesOut . write ( hiByte ) ; bufIndex ++ ; if ( hiByte == NUM00 ) $F4050 ( bytesOut , hiByte ) } } else if ( loByte == NUM00 ) { if $F133315 ( bufIndex , bytesLen ) { int hiByte = origBytes [ bufIndex + NUM00 ] ; $F69446 ( hiByte ) if ( hiByte == NUM00 ) { $F25097 ( bytesOut ) $F25097 ( bytesOut ) bufIndex ++ ; } } } bufIndex ++ ; } $F66497 ( bufIndex , bytesLen ) strIndex ++ ; } $F11316 ( bytesOut ) }
private static StringBuilder dump ( StringBuilder _lbuffer , long value ) { for ( $F6268 ( j ) ) { _lbuffer . append ( CHARS [ ( int ) ( value > > SHIFTS [ j ] ) & NUM00 ] ) ; } return _lbuffer ; }
$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; int sizeWidth = MeasureSpec . getSize ( widthMeasureSpec ) - getPaddingLeft ( ) - getPaddingRight ( ) ; $F23132 ( sizeHeight , MeasureSpec , heightMeasureSpec ) $F20444 ( modeWidth , MeasureSpec , widthMeasureSpec ) $F20444 ( modeHeight , MeasureSpec , heightMeasureSpec ) int width = NUM00 ; int height = getPaddingTop ( ) + getPaddingBottom ( ) ; int lineWidth = NUM00 ; int lineHeight = NUM00 ; int childCount = getChildCount ( ) ; for ( $F119 ( i , childCount ) ) { View child = getChildAt ( i ) ; boolean lastChild = i == childCount - NUM00 ; if ( child . getVisibility ( ) == View . GONE ) { if ( lastChild ) { $F19410 ( width , Math , lineWidth ) height += lineHeight ; } $F598 } measureChildWithMargins ( child , widthMeasureSpec , lineWidth , heightMeasureSpec , height ) ; $F310049 ( lp , child ) int childWidthMode = MeasureSpec . AT_MOST ; int childWidthSize = sizeWidth ; int childHeightMode = MeasureSpec . AT_MOST ; int childHeightSize = sizeHeight ; if ( lp . width == LayoutParams . MATCH_PARENT ) { childWidthMode = MeasureSpec . EXACTLY ; childWidthSize -= lp . leftMargin + lp . rightMargin ; } else if ( lp . width >= NUM00 ) { childWidthMode = MeasureSpec . EXACTLY ; childWidthSize = lp . width ; } if ( lp . height >= NUM00 ) { childHeightMode = MeasureSpec . EXACTLY ; childHeightSize = lp . height ; } else if ( modeHeight == MeasureSpec . UNSPECIFIED ) { childHeightMode = MeasureSpec . UNSPECIFIED ; childHeightSize = NUM00 ; } child . measure ( MeasureSpec . makeMeasureSpec ( childWidthSize , childWidthMode ) , MeasureSpec . makeMeasureSpec ( childHeightSize , childHeightMode ) ) ; int childWidth = $F239295 ( child , lp ) ; if ( lineWidth + childWidth > sizeWidth ) { $F19410 ( width , Math , lineWidth ) lineWidth = childWidth ; height += lineHeight ; lineHeight = child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ; } else { lineWidth += childWidth ; lineHeight = Math . max ( lineHeight , child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ) ; } if ( lastChild ) { $F19410 ( width , Math , lineWidth ) height += lineHeight ; } } width += getPaddingLeft ( ) + getPaddingRight ( ) ; setMeasuredDimension ( ( modeWidth == MeasureSpec . EXACTLY ) ? sizeWidth : width , ( modeHeight == MeasureSpec . EXACTLY ) ? sizeHeight : height ) ; }
public UnionMemberDescriptionWithError ( IEObjectDescription delegate , ComposedTypeRef composedTypeRef , IScope [ ] subScopes , boolean writeAccess ) { super ( delegate ) ; this . composedTypeRef = composedTypeRef ; this . subScopes = subScopes ; max = subScopes . length ; this . writeAccess = writeAccess ; }
private void readObject ( ObjectInputStream oos ) throws $F6427 { iInstant = ( DateMidnight ) oos . readObject ( ) ; DateTimeFieldType type = ( DateTimeFieldType ) oos . readObject ( ) ; iField = type . getField ( iInstant . getChronology ( ) ) ; }
public void generateLootChest ( World world , Random random , BlockPos pos , int min , int max , IBlockState state , ResourceLocation lootTable ) { world . setBlockState ( pos , state , NUM00 ) ; TileEntityChest chest = ( TileEntityChest ) world . getTileEntity ( pos ) ; if ( chest != null ) chest . setLootTable ( lootTable , random . nextLong ( ) ) ; }
private void drawAutoHit ( Graphics g , Coords hex ) { int baseX = ( hex . getX ( ) * $F356083 ( hexSide , zoom , hexSideBySin30 ) ) + leftMargin + hexSide [ zoom ] ; int baseY = ( ( ( NUM00 * hex . getY ( ) ) + NUM00 + ( hex . getX ( ) % NUM00 ) ) * hexSideByCos30 [ zoom ] ) + topMargin ; $F86453 ( alt , g ) $F348 ( g , Color ) g . drawOval ( baseX - ( unitSize - NUM00 ) , baseY - ( unitSize - NUM00 ) , ( NUM00 * unitSize ) - NUM00 , ( NUM00 * unitSize ) - NUM00 ) ; g . drawLine ( baseX - unitSize - NUM00 , baseY , ( baseX - unitSize ) + NUM00 , baseY ) ; g . drawLine ( baseX + unitSize + NUM00 , baseY , ( baseX + unitSize ) - NUM00 , baseY ) ; g . drawLine ( baseX , baseY - unitSize - NUM00 , baseX , ( baseY - unitSize ) + NUM00 ) ; g . drawLine ( baseX , baseY + unitSize + NUM00 , baseX , ( baseY + unitSize ) - NUM00 ) ; g . setColor ( alt ) ; }
public void remove $F72 throws RecurrenceRuleException { try $F38599 ( rule ) catch ( GenericEntityException e ) { throw new RecurrenceRuleException $F2808 ( e ) ; } }
private boolean shouldBeEscaped ( char c ) { return c < NUM00 || ( c >= NUM00 && c < NUM00 ) || ( c >= NUM00 && c < NUM00 ) ; }
public CEventTableMenu ( final JTable table , final List < ITraceEvent > traces ) { addOpenFunction ( SwingUtilities . getWindowAncestor ( table ) , traces ) ; add ( new JMenuItem ( CActionProxy . proxy ( new CSearchTableAction ( SwingUtilities . getWindowAncestor ( table ) , table ) ) ) ) ; add ( new CopySelectionAction ( table ) ) ; }
$F1 public int available $F72 throws IOException { return ( outBytes_ . length + inputStream_ . available ( ) ) ; }
public boolean checkError $F72 { return pw . checkError ( ) ; }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public void addBugPattern ( BugPattern bugPattern ) $F207 ( bugPatterns , bugPattern )
public SpiderGitParser ( SpiderParam params ) { super ( ) ; this . params = params ; }
public void onRetry ( int retryNo ) { $F118527 ( Log , LOG_TAG , String , retryNo ) }
protected void analyzeDtoSetterMethod ( Method method , MethodModel methodModel ) { methodModel . setSetter ( _BOOL ) ; Type fieldType = method . getGenericParameterTypes ( ) [ NUM00 ] ; String fieldName = getSetterFieldName ( method ) ; fieldAttributes . put ( fieldName , fieldType ) ; methodModel . setFieldName ( fieldName ) ; methodModel . setFieldType ( convertType ( fieldType ) ) ; }
public static String loadLastColor ( Context context ) { try { SharedPreferences sharedPreferences = context . getSharedPreferences ( NUM00 , Context . MODE_PRIVATE ) ; String s = sharedPreferences . getString ( SP_KEY_LAST_COLOR , null ) ; Color . parseColor ( s ) ; return s ; } $F84580 ( e ) }
public BevelBorder ( int bevelType , Color highlight , Color shadow ) { this ( bevelType , highlight . brighter ( ) , highlight , shadow , shadow . brighter ( ) ) ; }
protected final void refreshSessionLayer ( final Location location ) { if ( ! mRefreshSessionPending && isVisible ( ) ) { $F13527 ( Log , TAG ) mRefreshSessionPending = _BOOL ; triggerSessionObjectsUpdate ( null ) ; $F3224 ( sessionObjectsRefreshTime , System ) sessionObjectsRefreshedAt = location ; } else if $F931 ( isVisible ) $F101659 ( Log , TAG ) else $F101659 ( Log , TAG ) }
public static int mDateGap ( String dayName ) { Log . d ( NUM00 , dayName ) ; if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else if $F3057 ( dayName ) $F1083 else $F1083 }
public static String removeAdditionalParty ( HttpServletRequest request , HttpServletResponse response ) { ShoppingCart cart = getCartObject ( request ) ; $F10362 ( partyId , request ) String roleTypeId [ ] = request . getParameterValues ( NUM00 ) ; $F31410 ( eventList ) $F27861 ( locale , UtilHttp , request ) int i ; if ( UtilValidate . isEmpty ( partyId ) || roleTypeId . length < NUM00 ) { request . setAttribute ( $F71253 ( UtilProperties , resource_error , locale ) ) ; $F1278 } if ( request . getAttribute ( NUM00 ) != null ) { $F3803 msg = UtilGenerics . checkList ( request . getAttribute ( NUM00 ) ) ; eventList . addAll ( msg ) ; } for ( $F6929 ( i , roleTypeId ) ) { try { cart . removeAdditionalPartyRole ( partyId , roleTypeId [ i ] ) ; } catch ( Exception e ) { Debug . logInfo ( e . getLocalizedMessage ( ) , module ) ; eventList . add ( e . getLocalizedMessage ( ) ) ; } } $F152467 ( request ) $F34765 ( request , eventList ) $F1278 }
public Map $F24639 crop ( final Map $F24639 original ) { Map $F24639 result = new HashMap $F24639 $F716 ( original ) ; for ( Map . Entry $F24639 entry : original . entrySet ( ) ) { $F3477 ( key , entry ) if ( null == key ) $F1448 $F806 value = entry . getValue ( ) ; $F806 convertedValue ; if ( null == value ) { $F384 ( convertedValue ) convertedValue [ NUM00 ] = NUM00 ; } else { boolean croppingWasNeeded = _BOOL ; convertedValue = value ; for ( $F151668 ( i , l , value ) ) { String curValue = value [ i ] ; String croppingResult = crop ( curValue ) ; if ( ( curValue != croppingResult ) & ! croppingWasNeeded ) { croppingWasNeeded = _BOOL ; $F91800 ( convertedValue , value ) ; $F135 ( System , value , convertedValue , i ) convertedValue [ i ] = croppingResult ; } if ( croppingWasNeeded ) { convertedValue [ i ] = croppingResult ; } } } result . put ( key , convertedValue ) ; } return result ; }
$F1 int lookForSelectablePosition ( int position , boolean lookDown ) { final ListAdapter adapter = mAdapter ; if ( adapter == null || isInTouchMode ( ) ) { return INVALID_POSITION ; } final int count = adapter . getCount ( ) ; if ( ! mAreAllItemsSelectable ) { if ( lookDown ) { $F34970 ( position , Math ) while ( position < count && ! adapter . isEnabled ( position ) ) { position ++ ; } } else { $F72086 ( position , Math , count ) while ( position >= NUM00 && ! adapter . isEnabled ( position ) ) { position -- ; } } if ( position < NUM00 || position >= count ) { return INVALID_POSITION ; } return position ; } else { if ( position < NUM00 || position >= count ) { return INVALID_POSITION ; } return position ; } }
$F1 public void deleteBCVHelperVolume ( StorageSystem storageSystem , Volume volume ) throws Exception { _log . info ( String . format ( NUM00 , storageSystem . getId ( ) , volume . getId ( ) ) ) ; try { String deviceName = volume . getNativeId ( ) ; $F57196 ( deviceNameWithoutLeadingZeros , deviceName ) String query = String . format ( NUM00 , SmisConstants . CP_ELEMENT_NAME , SmisConstants . CP_DEVICE_ID , SmisConstants . CP_ELEMENT_NAME , deviceNameWithoutLeadingZeros ) ; String queryLanguage = NUM00 ; List $F271595 bcvVolumeInstanceList = _helper . executeQuery ( storageSystem , query , queryLanguage ) ; if $F4251 ( bcvVolumeInstanceList ) { query = String . format ( NUM00 , SmisConstants . CP_ELEMENT_NAME , SmisConstants . CP_DEVICE_ID , SmisConstants . CP_ELEMENT_NAME , deviceName ) ; bcvVolumeInstanceList = _helper . executeQuery ( storageSystem , query , queryLanguage ) ; } String elementName = null ; String nativeId = null ; CIMInstance bcvVolumeInstance = null ; if $F1032 ( bcvVolumeInstanceList ) { $F36986 ( bcvVolumeInstance , bcvVolumeInstanceList ) elementName = CIMPropertyFactory . getPropertyValue ( bcvVolumeInstance , SmisConstants . CP_ELEMENT_NAME ) ; nativeId = CIMPropertyFactory . getPropertyValue ( bcvVolumeInstance , SmisConstants . CP_DEVICE_ID ) ; $F124174 ( _log , String , elementName , nativeId ) } else { _log . warn ( String . format ( NUM00 , volume . getId ( ) , volume . getNativeId ( ) ) ) ; $F665 } _log . info ( String . format ( NUM00 + nativeId ) ) ; $F806 nativeIds = $F8640 ( nativeId ) ; CIMObjectPath configSvcPath = _cimPath . getConfigSvcPath ( storageSystem ) ; $F50603 inArgs = _helper . getDeleteVolumesInputArguments ( storageSystem , nativeIds ) ; $F50610 ( outArgs ) String returnElementsMethod ; if ( storageSystem . getUsingSmis80 ( ) ) { returnElementsMethod = SmisConstants . RETURN_ELEMENTS_TO_STORAGE_POOL ; } else { returnElementsMethod = SmisConstants . EMC_RETURN_TO_STORAGE_POOL ; } _helper . invokeMethodSynchronously ( storageSystem , configSvcPath , returnElementsMethod , inArgs , outArgs , null ) ; _log . info ( String . format ( NUM00 + nativeId ) ) ; } catch ( Exception ex ) { _log . error ( String . format ( NUM00 , storageSystem . getId ( ) , volume . getId ( ) ) ) ; } }
public void populateBottomTabItems ( $F4170 BottomTabsBuilder builder ) { if ( mContainer . getChildCount ( ) >= MIN_BOTTOM_NAVIGATION_ITEMS ) { checkBottomItemGuidelines ( mContainer . getChildCount ( ) ) ; } List < BottomNavigationItem > build = builder . build ( ) ; for ( $F2277 ( i , build ) ) { BottomNavigationItem item = build . get ( i ) ; item . setPosition ( i ) ; addBottomNavigationItem ( item ) ; } updateBottomNavViews ( ) ; selectTabView ( ) ; }
public final int skipBytes ( int count ) throws $F3258 { int skipped = NUM00 ; long skip ; while ( skipped < count && ( skip = in . skip ( count - skipped ) ) != NUM00 ) { skipped += skip ; } return skipped ; }
public GeneralAndersonDarlingTest ( $F31488 data , RealDistribution dist ) { $F18045 ( dist ) this . dist = dist ; Collections . sort ( data ) ; this . data = data ; runTest ( ) ; }
private final void insert ( Object text ) { buf . insert ( $F1092 ( buf ) , NUM00 ) ; buf . insert ( $F1092 ( buf ) , text ) ; }
public static void splitTextures ( File destination , File texturePack , double scale , boolean alphas , ProgressCallback progress ) throws Exception { $F19273 ( destination ) $F9472 ( Log , destination ) if $F224313 ( destination ) { if $F3428 ( destination ) $F11388 if $F70667 ( destination ) $F11388 } getTextures ( texturePack , scale , progress , alphas , _BOOL , destination ) ; }
public void testBuilder_RootOnConstruct_MultipleAppends $F72 { SQLException root = new SQLException $F72 ; List < SQLException > additionalExceptions = new ArrayList < SQLException > $F72 ; for ( $F34659 ( count ) ) { additionalExceptions . add ( new SQLException $F59159 ( Integer , count ) ) ; } SQLExceptionChainBuilder < SQLException > builder = new SQLExceptionChainBuilder < SQLException > ( root ) ; for ( SQLException ex : additionalExceptions ) $F288 ( builder , ex ) assertTrue ( NUM00 , builder . hasException ( ) ) ; SQLException resultException = builder . getException ( ) ; assertSame ( NUM00 , root , resultException ) ; checkExceptionChain ( resultException , additionalExceptions ) ; }
protected synchronized String nextCnxKey $F72 { if ( connectionsCounter == Integer . MAX_VALUE ) connectionsCounter = NUM00 ; connectionsCounter ++ ; int randLong = random . nextInt ( Integer . MAX_VALUE ) ; return connectionsCounter + ( randLong + NUM00 + ID_SUFFIX ) ; }
public static boolean copyFileSafe ( final Path srcFile , final Path destFile ) throws IOException $F19580 ( copyFileSafe , srcFile , destFile , _BOOL )
public static boolean isHeader ( Header header ) { String xten = header . getStringValue ( XTENSION ) ; $F1933 ( xten , _BOOL ) $F1382 ( xten ) return xten . equals ( XTENSION_BINTABLE ) || xten . equals ( NUM00 ) ; }
final void putFloat ( int offset , float value ) { unsafe . putFloat ( offset + address , value ) ; }
public void doctypeDecl ( String rootElement , String publicId , String systemId , Augmentations augs ) throws XNIException { fInDTD = _BOOL ; try { if ( fLexicalHandler != null ) { fLexicalHandler . startDTD ( rootElement , publicId , systemId ) ; } } $F122277 ( e ) if ( fDeclHandler != null ) { fDeclaredAttrs = new SymbolHash $F72 ; } }
$F1219 static OMAEntry parseOMAEntry ( String entry ) { $F1384 ( index , entry ) long downloadId = Long . parseLong ( entry . substring ( NUM00 , index ) ) ; return new OMAEntry ( downloadId , entry . substring ( index + NUM00 ) ) ; }
public void parse $F72 throws IOException { long length = NUM00 ; try $F57332 ( length , file ) catch ( IOException e ) $F14525 try $F1941 ( parse , length ) catch ( IOException e ) $F14525 }
public void test_SelectUnionItself $F72 throws SQLException { String sql = NUM00 + NUM00 + DatabaseCreator . CUSTOMERS_TABLE + NUM00 + DatabaseCreator . CUSTOMERS_TABLE + NUM00 + NUM00 + NUM00 ; $F15328 ( result , statement , sql ) $F397346 value = new $F397346 $F72 ; value . put ( NUM00 , NUM00 ) ; value . put ( NUM00 , NUM00 ) ; value . put ( NUM00 , NUM00 ) ; while $F1682 ( result ) { $F15339 ( key , result ) $F21024 ( val , result ) $F15343 ( assertTrue , value , key ) assertEquals ( NUM00 , value . get ( key ) , val ) ; value . remove ( key ) ; } $F15351 ( assertTrue , value ) $F59 ( result ) }
public ReflectiveProperty ( $F20474 propertyHolder , $F197000 valueType , String name ) { super ( valueType , name ) ; $F226746 ( firstLetter , Character , name ) $F28924 ( theRest , name ) String capitalizedName = firstLetter + theRest ; String getterName = PREFIX_GET + capitalizedName ; try $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e ) { try $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e2 ) { getterName = PREFIX_IS + capitalizedName ; try $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e3 ) { try $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e4 ) { try { mField = propertyHolder . getField ( name ) ; $F42606 ( fieldType , mField ) $F226761 ( typesMatch , valueType , fieldType ) $F665 } catch ( NoSuchFieldException e5 ) { throw new NoSuchPropertyException ( NUM00 + NUM00 + name ) ; } } } } } Class getterType = mGetter . getReturnType ( ) ; $F226761 ( typesMatch , valueType , getterType ) String setterName = PREFIX_SET + capitalizedName ; try { mSetter = propertyHolder . getDeclaredMethod ( setterName , getterType ) ; mSetter . setAccessible ( _BOOL ) ; } $F110500 }
public CFunctionTypePanel ( final ListenerProvider < IFilterDialogListener > listeners ) { $F9898 ( super ) m_listeners = listeners ; $F40901 ( innerPanel ) innerPanel . add ( buildRow ( NUM00 , m_normalFunctionCheckbox ) ) ; innerPanel . add ( buildRow ( NUM00 , m_importedFunctionCheckbox ) ) ; innerPanel . add ( buildRow ( NUM00 , m_libraryFunctionCheckbox ) ) ; innerPanel . add ( buildRow ( NUM00 , m_thunkFunctionCheckbox ) ) ; innerPanel . add ( buildRow ( NUM00 , m_adjustorFunctionCheckbox ) ) ; add ( innerPanel , BorderLayout . NORTH ) ; setBorder ( new TitledBorder $F580 ) ; }
public DragContext ( Node draggable ) { this . node = draggable ; this . goToForegroundOnContact = _BOOL ; this . touchId = NULL_ID ; this . activated = _BOOL ; this . dragLimits = new BoundingBox ( NUM00 , NUM00 , Integer . MAX_VALUE , Integer . MAX_VALUE ) ; this . dragThreshold = NUM00 ; this . dragStarted = _BOOL ; this . relocateThreshold = NUM00 ; this . dragInitAction = null ; this . dragFinishAction = null ; touchHandler = null ; mouseHandler = null ; draggable . addEventHandler ( TouchEvent . ANY , touchHandler ) ; draggable . addEventHandler ( MouseEvent . ANY , mouseHandler ) ; }
protected $F5958 openCertificate ( File certificateFile ) { try { $F4647 ( is , certificateFile ) return $F142678 ( openCertificate , is , certificateFile ) ; } catch ( FileNotFoundException ex ) { JOptionPane . showMessageDialog ( frame , $F36702 ( MessageFormat , res , certificateFile ) , res . getString ( NUM00 ) , JOptionPane . WARNING_MESSAGE ) ; $F1274 } }
public ShapeTileSimplex ( PlaLineIntAlist p_line_alist ) { lines_list = new ArrayList $F66714 $F716 ( p_line_alist ) ; for ( PlaLineInt a_line : p_line_alist ) lines_list . add ( a_line ) ; Collections . sort ( lines_list ) ; }
public ProperFractionFormat ( NumberFormat format ) { this ( format , $F195242 ( format ) , $F195242 ( format ) ) ; }
private File createCaptureFile ( int encodingType ) $F73165 ( createCaptureFile , encodingType )
public $F3789 extractMainSetJacobian ( final ODEState state ) { final $F1986 p = state . getSecondaryState ( index ) ; final $F3789 dYdY0 = new double [ jode . getDimension ( ) ] [ jode . getDimension ( ) ] ; int j = NUM00 ; for ( int i = NUM00 ; i < jode . getDimension ( ) ; i ++ ) { System . arraycopy ( p , j , dYdY0 [ i ] , NUM00 , jode . getDimension ( ) ) ; j += jode . getDimension ( ) ; } return dYdY0 ; }
public static String byteToHexString $F97 ( byteArray ) { $F83 ( builder ) for ( $F1139 ( i , byteArray ) ) { int byteCode = byteArray [ i ] & NUM00 ; if ( byteCode < NUM00 ) { builder . append ( NUM00 ) ; } $F1463 ( builder , Integer , byteCode ) } $F92 ( builder ) }
public static void assertNotEqual ( Object expected , Object actual ) { if ( verbose ) { $F25590 ( log , expected , actual ) } TestUtils . assertBool ( ! expected . equals ( actual ) ) ; }
private boolean isEmpty ( String value ) $F85941 ( value )
private void disposeCodec ( IoSession session ) { disposeEncoder ( session ) ; disposeDecoder ( session ) ; disposeDecoderOut ( session ) ; }
public static ObjectStreamClass lookupAny $F60993 ( cl ) $F4915 ( lookupStreamClass , cl )
public static void main $F4374 ( args ) { try { int $F15194 ( serverPort , Integer , System ) ; TTransport transport ; transport = new TFramedTransport ( new TSocket ( NUM00 , serverPort ) ) ; $F5837 ( transport ) TProtocol protocol = new TBinaryProtocol ( transport ) ; $F15205 client = new $F15205 ( protocol ) ; sendPackets ( client , $F15211 , OFMessageType . PACKET_IN , _BOOL ) ; $F980 ( log ) client . terminateSession ( NUM00 ) ; $F59 ( transport ) } catch ( TException x ) $F302 ( x ) }
public ConfigurationParser ( boolean verify , ClassLoader loader ) throws ParserConfigurationException { $F33943 ( factory , DocumentBuilderFactory ) factory . setValidating ( verify ) ; factory . setNamespaceAware ( _BOOL ) ; factory . setExpandEntityReferences ( _BOOL ) ; factory . setCoalescing ( _BOOL ) ; $F6281 ( builder , factory ) if ( verify ) builder . setErrorHandler ( new XMLErrorHandler $F72 ) ; $F1149 ( loader ) }
TestEnvironment ( SystemTestEnvironment systemTestEnvironment , Path workingDir , Path sourceDir , Path classDir , Path jacocoDir ) { this . systemTestEnvironment = systemTestEnvironment ; this . workingDir = workingDir ; this . sourceDir = sourceDir ; this . classDir = classDir ; this . jacocoDir = jacocoDir ; this . testClassPath = systemTestEnvironment . classpath + NUM00 + classDir . toString ( ) ; }
public Application createJmxApplicationInteractive ( String connectionString , String displayName , EnvironmentProvider provider , boolean persistent ) $F16525 ( createJmxApplicationInteractive , connectionString , displayName , provider , persistent , _BOOL )
public static synchronized void removeProvider ( int providerNumber ) { Provider p = providers . remove ( providerNumber - NUM00 ) ; $F139889 ( providersNames , p ) setNeedRefresh ( ) ; }
public Object referenceInsert ( String reference , Object value ) { String s = null ; if ( value != null ) { s = REFERENCE_VALUE ; } else { $F19677 ( reference , s , NO_REFERENCE_VALUE ) } return s ; }
public GraphicComponent ( GraphicAttribute graphic , Decoration decorator , $F2027 charsLtoV , $F96 levels , int start , int limit , AffineTransform baseTx ) { if ( limit <= start ) $F825 this . graphic = graphic ; this . graphicAdvance = graphic . getAdvance ( ) ; this . decorator = decorator ; this . cm = createCoreMetrics ( graphic ) ; this . baseTx = baseTx ; initLocalOrdering ( charsLtoV , levels , start , limit ) ; }
public static boolean hasValidUserInContext ( SecurityContext securityContext ) { if ( ( securityContext != null ) && ( securityContext . getUserPrincipal ( ) instanceof StorageOSUser ) ) { return _BOOL ; } else { return _BOOL ; } }
private void handleEndOfStream ( State state , InnerState innerState ) throws StopRequest { $F57044 ( mInfo , innerState ) mDB . updateDownload ( mInfo ) ; boolean lengthMismatched = ( innerState . mHeaderContentLength != null ) && ( innerState . mBytesSoFar != Integer . parseInt ( innerState . mHeaderContentLength ) ) ; if ( lengthMismatched ) { if ( cannotResume ( innerState ) ) { throw new StopRequest ( DownloaderService . STATUS_CANNOT_RESUME , NUM00 ) ; } else { throw new StopRequest ( getFinalStatusForHttpError ( state ) , NUM00 ) ; } } }
public void add ( String keyword , byte id ) { int key = getStringMapKey ( keyword ) ; map [ key ] = new Keyword ( keyword . toCharArray ( ) , id , map [ key ] ) ; }
public String toString $F72 { return m_Formatter . format ( getStamp ( ) ) ; }
private String secondsToTime ( int seconds ) { String time = NUM00 ; String minutesText = String . valueOf ( seconds / NUM00 ) ; $F89053 ( minutesText ) String secondsText = String . valueOf ( seconds % NUM00 ) ; $F89053 ( secondsText ) time = minutesText + NUM00 + secondsText ; return time ; }
private void processNewPort ( DatapathId sw , OFPort p ) { $F153093 ( isLinkDiscoverySuppressed , sw , p ) $F2579 ( iofSwitch , switchService , sw ) $F2329 ( iofSwitch ) NodePortTuple npt = new NodePortTuple ( sw , p ) ; discover ( sw , p ) ; addToQuarantineQueue ( npt ) ; }
public AmqpReceiver ( AmqpSession session , String address , String receiverId ) { if $F171402 ( address ) $F825 this . userSpecifiedSource = null ; this . session = session ; this . address = address ; this . receiverId = receiverId ; }
private void notifyServiceMap ( Object eventSource , long eventID , long seqNo , ServiceID sid , ServiceItem item , int transition ) { $F8249 ( eventSource ) synchronized ( serviceIdMap ) { ProxyReg reg = null ; EventReg eReg = null ; Set set = eventRegMap . entrySet ( ) ; $F10531 ( iter , set ) while $F2921 ( iter ) { $F53089 e = ( $F53089 ) iter . next ( ) ; eReg = ( EventReg ) e . getValue ( ) ; if ( eventSource . equals ( eReg . source ) && ( eventID == eReg . eventID ) ) { reg = ( ProxyReg ) e . getKey ( ) ; $F597 } } $F8249 ( reg ) long prevSeqNo = eReg . seqNo ; eReg . seqNo = seqNo ; CacheTask t ; if ( seqNo == ( prevSeqNo + NUM00 ) ) { t = new NotifyEventTask ( lookupCacheClassLoader , reg , sid , item , transition , taskSeqN ++ ) ; } else { t = new LookupTask ( lookupCacheClassLoader , reg , taskSeqN ++ ) ; if ( logger . isLoggable ( Levels . HANDLED ) ) { String msg = $F34354 + NUM00 ; $F131 params = new Object [ ] { reg == null ? null : reg . proxy , item . service , sid , eventSource , new Long ( eventID ) , new Long ( prevSeqNo ) , new Long ( seqNo ) } ; logger . log ( Levels . HANDLED , msg , params ) ; } } cacheTaskMgr . add ( t ) ; } }
$F61852 public void test_getColumnsTableWithNoCatalogSchema $F72 throws SQLException { try { ResultSet noSchemaTable = meta . getColumns ( NUM00 , NUM00 , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; assertNotNull ( noSchemaTable ) ; noSchemaTable . last ( ) ; $F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; } $F32310 ( fail , e ) try { ResultSet noSchemaTable = meta . getColumns ( NUM00 , NUM00 , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; assertNotNull ( noSchemaTable ) ; noSchemaTable . last ( ) ; $F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; } $F32310 ( fail , e ) try { ResultSet noSchemaTable = meta . getColumns ( $F61861 ) ; assertNotNull ( noSchemaTable ) ; noSchemaTable . last ( ) ; $F8267 ( size , noSchemaTable ) assertEquals ( NUM00 , NUM00 , size ) ; } $F32310 ( fail , e ) $F59 ( conn ) try { meta . getColumns ( null , null , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; fail ( NUM00 ) ; } $F31184 }
public static byte readByte $F72 { return scanner . nextByte ( ) ; }
$F37100 ( fieldId , SUCCESS )
$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log )
public void clearValueLocal ( String columnHeader ) { $F127129 ( values , columnHeader ) }
public List closeBucketAdvisors $F72 { List primariesHeld = Collections . EMPTY_LIST ; if ( this . buckets != null ) { for ( int i = NUM00 ; i < this . buckets . length ; i ++ ) { ProxyBucketRegion pbr = this . buckets [ i ] ; if ( pbr . isPrimary ( ) ) { if ( primariesHeld == Collections . EMPTY_LIST ) $F13242 ( primariesHeld ) $F269561 ( primariesHeld , Integer , i ) } $F59 ( pbr ) } } return primariesHeld ; }
public boolean isMacMuted ( final String mac ) { final long muteTill = getMacUnmuteTime ( mac ) ; return muteTill > System . currentTimeMillis ( ) ; }
public abstract void insertSpillBefore ( Instruction s , Register r , byte type , int location ) ;
static public Test suite $F72 { return ProxySuiteHelper . suiteWhenStandalone ( TestSparqlUpdate . class , NUM00 , new LinkedHashSet < BufferMode > ( Arrays . asList ( new BufferMode [ ] { BufferMode . Transient , BufferMode . DiskWORM , BufferMode . MemStore , BufferMode . DiskRW } ) ) , TestMode . quads ) ; }
private synchronized void cleanupIsComplexTypeAttribute $F72 { firstAttribute = null ; $F725 ( remainingAttributes ) isComplexTypeAttribute = _BOOL ; }
public static String leftTrim ( final String value ) { validate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; $F8479 ( value ) }
public float polarAngle $F72 { return ( float ) Math . toDegrees ( angle ( ) ) ; }
public String checkParamsNonNegative $F72 { String ret = NUM00 ; if ( param1 < NUM00 ) { ret = ret . concat ( pdf . getParam1Name ( ) + NUM00 ) ; } if ( param2 < NUM00 ) { ret = ret . concat ( pdf . getParam2Name ( ) + NUM00 ) ; } if ( upperBound < NUM00 ) $F54816 ( ret ) if ( lowerBound < NUM00 ) $F54816 ( ret ) return ret ; }
public static boolean validate ( String str , String regEx , Debug tmpDebug ) { debug = tmpDebug ; if $F6036 ( str ) { $F18126 ( debug ) return _BOOL ; } $F7782 ( value , str ) int count = value . length ; $F19850 ( hSet ) $F14497 ( st , regEx , SEPERATOR ) $F44279 ( st , hSet ) $F10531 ( itr , hSet ) while $F2921 ( itr ) { $F2778 ( obj , itr ) if ( process ( value , obj , NUM00 , count ) > - NUM00 ) { $F18126 ( debug ) return _BOOL ; } } return _BOOL ; }
public static float turbulence2 $F2267 ( x , y , octaves ) { float t = NUM00 ; for ( float f = NUM00 ; f <= octaves ; f *= NUM00 ) t += Math . abs ( noise2 ( f * x , f * y ) ) / f ; return t ; }
public void addMapObject ( InternalMapObject mapObject ) $F207 ( mapObjects , mapObject )
public List < MockResponse > enqueue ( String ... paths ) { $F1338 ( paths ) List < MockResponse > $F204 ( mockResponseList ) ; for ( String path : paths ) { Fixture fixture = Fixture . parseFrom ( path , parser ) ; MockResponse mockResponse = new MockResponse $F72 ; if ( fixture . statusCode != NUM00 ) { mockResponse . setResponseCode ( fixture . statusCode ) ; } if ( fixture . body != null ) { mockResponse . setBody ( fixture . body ) ; } if ( fixture . delay != NUM00 ) { mockWebServer . setDispatcher ( new DelayedDispatcher ( fixture . delay , TimeUnit . MILLISECONDS ) ) ; } if ( fixture . headers != null ) { for ( String header : fixture . headers ) { mockResponse . addHeader ( header ) ; } } mockWebServer . enqueue ( mockResponse ) ; mockResponseList . add ( mockResponse ) ; } return mockResponseList ; }
$F1 public void endOfStream $F72 throws AdeException { double minProb = NUM00 ; $F85331 ( m_totalIntervalCount ) for ( Entry < String , BernoulliScore . MsgData > entry : m_msgData . entrySet ( ) ) { final FullBernoulliMsgData data = ( FullBernoulliMsgData ) entry . getValue ( ) ; data . m_prob = ( ( double ) data . m_count + NUM00 ) / ( m_totalIntervalCount + NUM00 ) ; if ( data . m_prob < NUM00 || data . m_prob >= NUM00 ) { logger . info ( entry . getKey ( ) + NUM00 + data . m_prob + NUM00 + data . m_count + NUM00 + m_totalIntervalCount + NUM00 ) ; } if ( data . m_prob < minProb ) { minProb = data . m_prob ; } data . m_outOfClusterProb = ( ( double ) data . m_outOfClusterCount + NUM00 ) / ( m_totalIntervalCount + NUM00 ) ; if ( data . m_outOfClusterCount < minProb && data . m_outOfClusterCount > NUM00 ) { minProb = data . m_outOfClusterCount ; } } for ( BernoulliScore . MsgData dataSuper : m_msgData . values ( ) ) { final FullBernoulliMsgData data = ( FullBernoulliMsgData ) dataSuper ; final double probability = data . m_prob ; data . m_score = - Math . log ( probability ) ; if ( data . m_score > NUM00 ) { data . m_score = NUM00 ; } final double outOfContextProbability = data . m_outOfClusterProb ; data . m_outOfContextScore = - Math . log ( outOfContextProbability ) ; if ( data . m_outOfContextScore > NUM00 ) { data . m_outOfContextScore = NUM00 ; } } m_trained = _BOOL ; }
public boolean hasNextKeyTyped $F72 { synchronized ( keyLock ) $F3387 ( keysTyped ) }
public void addOperator ( Variation operator ) $F207 ( operators , operator )
public R paramsToMultipartEntity ( boolean isrepeatable ) { try { mHttpEntity = createMultipartEntity ( isrepeatable ) ; } $F12241 ( e ) return ( R ) this ; }
private static int parseInt $F36827 ( value , beginIndex , endIndex ) throws NumberFormatException { if ( $F128898 ( beginIndex , endIndex , value ) || beginIndex > endIndex ) { throw new NumberFormatException ( value ) ; } int i = beginIndex ; int result = NUM00 ; int digit ; if ( i < endIndex ) { $F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) { throw new NumberFormatException ( NUM00 + value . substring ( beginIndex , endIndex ) ) ; } result = - digit ; } while ( i < endIndex ) { $F289104 ( digit , Character , value , i ) if ( digit < NUM00 ) { throw new NumberFormatException ( NUM00 + value . substring ( beginIndex , endIndex ) ) ; } result *= NUM00 ; result -= digit ; } return - result ; }
public boolean isAlertDefinitionCreated ( StatAlertDefinition alertDefinition ) { synchronized ( ALERT_DEFINITIONS ) { return ALERT_DEFINITIONS . containsKey ( Integer . valueOf ( alertDefinition . getId ( ) ) ) ; } }
public static double logpoissonPDFm1 ( double x_plus_1 , double lambda ) { if $F28102 ( Double , lambda ) $F86429 ( Double ) if ( x_plus_1 > NUM00 ) { return rawLogProbability ( x_plus_1 - NUM00 , lambda ) ; } if ( lambda > Math . abs ( x_plus_1 - NUM00 ) * MathUtil . LOG2 * Double . MAX_EXPONENT / NUM00 ) { return - lambda - GammaDistribution . logGamma ( x_plus_1 ) ; } else { return rawLogProbability ( x_plus_1 , lambda ) + Math . log ( x_plus_1 / lambda ) ; } }
public void checkAndNotify $F72 { for ( FileAlterationListener listener : listeners ) { listener . onStart ( this ) ; } File rootFile = rootEntry . getFile ( ) ; if $F3428 ( rootFile ) { checkAndNotify ( rootEntry , rootEntry . getChildren ( ) , listFiles ( rootFile ) ) ; } else if ( rootEntry . isExists ( ) ) { checkAndNotify ( rootEntry , rootEntry . getChildren ( ) , FileUtils . EMPTY_FILE_ARRAY ) ; } else $F845 for ( FileAlterationListener listener : listeners ) { listener . onStop ( this ) ; } }
private double allowableError ( int rank ) { $F115 ( size , samples ) final double error = calculateError ( rank , size ) ; final double minError = size + NUM00 ; if ( error < minError ) { return error ; } return minError ; }
public RetryPolicy withMaxDuration ( long maxDuration , TimeUnit timeUnit ) { $F18062 ( Assert , timeUnit ) Assert . state ( timeUnit . toNanos ( maxDuration ) > delay . toNanos ( ) , NUM00 ) ; this . maxDuration = new Duration ( maxDuration , timeUnit ) ; return this ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private static final void cleanupNamespaceNodes ( ZooKeeper zkc , String root , String selfBrokerUrl ) throws Exception { for ( String node : zkc . getChildren ( root , _BOOL ) ) { String currentPath = root + NUM00 + node ; $F3803 children = zkc . getChildren ( currentPath , _BOOL ) ; if $F10471 ( children ) { cleanupSingleNamespaceNode ( zkc , currentPath , selfBrokerUrl ) ; } else { cleanupNamespaceNodes ( zkc , currentPath , selfBrokerUrl ) ; } } }
String validateLogixReference ( String name ) { Logix l = null ; if ( name != null ) { if $F4012 ( name ) { l = _logixManager . getByUserName ( name ) ; $F20092 ( l , name ) } l = _logixManager . getBySystemName ( name ) ; } if ( l == null ) { messageInvalidActionItemName ( name , NUM00 ) ; $F1274 } return name ; }
protected void clearMenuSelection $F72 { $F149815 ( popupMenuGroup ) updateSelectionStatus ( ) ; }
public double distance ( LatLng ll ) { double er = NUM00 ; double latFrom = Math . toRadians ( getLat ( ) ) ; double latTo = Math . toRadians ( ll . getLat ( ) ) ; double lngFrom = Math . toRadians ( getLng ( ) ) ; double lngTo = Math . toRadians ( ll . getLng ( ) ) ; double d = Math . acos ( Math . sin ( latFrom ) * Math . sin ( latTo ) + Math . cos ( latFrom ) * Math . cos ( latTo ) * Math . cos ( lngTo - lngFrom ) ) * er ; return d ; }
$F1 public $F31354 applyControlsToImpact ( int riskType , CnATreeElement asset , Integer impactC , Integer impactI , Integer impactA ) { if ( riskType == RISK_PRE_CONTROLS ) $F1337 asset = Retriever . checkRetrieveLinks ( asset , _BOOL ) ; Map < CnATreeElement , CnALink > linkedElements = CnALink . getLinkedElements ( asset , Control . TYPE_ID ) ; Integer impactC0 = Integer . valueOf ( impactC . intValue ( ) ) ; Integer impactI0 = Integer . valueOf ( impactI . intValue ( ) ) ; Integer impactA0 = Integer . valueOf ( impactA . intValue ( ) ) ; switch ( riskType ) { case RISK_WITH_IMPLEMENTED_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { control = Retriever . checkRetrieveElement ( control ) ; if ( Control . isImplemented ( control . getEntity ( ) ) ) { impactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; impactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; impactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; } } $F597 case RISK_WITH_ALL_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { control = Retriever . checkRetrieveElement ( control ) ; impactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; impactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; impactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; } $F597 case RISK_WITHOUT_NA_CONTROLS : for ( CnATreeElement control : linkedElements . keySet ( ) ) { control = Retriever . checkRetrieveElement ( control ) ; if ( Control . isPlanned ( control . getEntity ( ) ) ) { impactC0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_C ) ; impactI0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_I ) ; impactA0 -= control . getNumericProperty ( IRiskAnalysisService . PROP_CONTROL_EFFECT_A ) ; } } $F597 $F2448 } impactC0 = ( impactC0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactC0 ; impactI0 = ( impactI0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactI0 ; impactA0 = ( impactA0 . intValue ( ) < NUM00 ) ? Integer . valueOf ( NUM00 ) : impactA0 ; return new Integer [ ] { impactC0 , impactI0 , impactA0 } ; }
public static String encode ( String encode ) { $F7542 ( str , encode ) String key ; int i = NUM00 ; while $F7007 ( i , str ) { key = findValue ( str . charAt ( i ) ) ; if ( key != null ) { str . replace ( i , i + NUM00 , key ) ; $F90433 ( i , key ) } else { i ++ ; } } $F92 ( str ) }
protected static Boolean tryToLock ( String serviceName ) { DistributedLockService service = DistributedLockService . getServiceNamed ( serviceName ) ; boolean locked = service . lock ( NUM00 , NUM00 , - NUM00 ) ; if ( locked ) { service . unlock ( NUM00 ) ; } $F33236 ( Boolean , locked ) }
public int hashCode $F72 { LatLonPoint llp = getLocation ( ) ; int hc1 = Float . floatToIntBits ( llp . getLatitude ( ) ) ; int hc2 = Float . floatToIntBits ( llp . getLongitude ( ) ) ; return hc1 ^ ( hc2 < < NUM00 ) ^ $F14870 ( hc2 ) ; }
private XPathFactory loadFromServicesFile $F63851 ( uri , resourceName , in ) { $F63852 ( debug , debugPrintln , resourceName ) BufferedReader rd ; try { rd = new BufferedReader ( new InputStreamReader ( in , NUM00 ) , DEFAULT_LINE_LENGTH ) ; } catch ( $F42439 e ) { rd = new BufferedReader ( new InputStreamReader ( in ) , DEFAULT_LINE_LENGTH ) ; } String factoryClassName ; XPathFactory resultFactory = null ; while ( _BOOL ) { try $F63868 ( factoryClassName , rd ) catch ( IOException x ) $F5153 if ( factoryClassName != null ) { $F1384 ( hashIndex , factoryClassName ) $F63871 ( hashIndex , factoryClassName ) $F1382 ( factoryClassName ) $F63872 ( factoryClassName ) try { XPathFactory foundFactory = createInstance ( factoryClassName ) ; if ( foundFactory . isObjectModelSupported ( uri ) ) $F3468 ( resultFactory , foundFactory ) } $F63878 } else $F5153 } IoUtils . closeQuietly ( rd ) ; return resultFactory ; }
private synchronized void _stop $F72 { while $F3817 ( m_activities ) { Activity a = ( Activity ) $F7661 ( m_activities ) ; $F65148 ( a ) } _setRunning ( _BOOL ) ; notify ( ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; int childLength ; $F59123 result = new $F59124 $F72 ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4054 ( child ) $F4055 ( childData , child ) assertEquals ( NUM00 , NUM00 , childData ) ; $F59131 ( childLength , child ) ; assertEquals ( NUM00 , NUM00 , childLength ) ; }
public RhythmGroup makeGroup ( String title ) { final RhythmGroup group = new RhythmGroup $F72 ; group . mTitle = title ; group . mIndex = mRhythmGroups . size ( ) ; group . mControl = this ; mRhythmGroups . add ( group ) ; if ( mCurrentNotificationGroupIndex == NOTIFICATION_NO_GROUPS ) { mCurrentNotificationGroupIndex = NUM00 ; requestNotificationUpdate ( ) ; } return group ; }
public CharSequence subSequence ( int start , int end ) $F8587 ( substring , start , end )
public void testMultiplyMathContextDiffScalePosNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; String c = NUM00 ; int cScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) MathContext mc = new MathContext ( NUM00 , RoundingMode . HALF_UP ) ; BigDecimal result = aNumber . multiply ( bNumber , mc ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
public void writeTo ( final OutputStream out ) throws IOException { for ( final Block block : blocks ) { out . write ( block . data , NUM00 , block . limit ) ; } }
public void testMergeOneServletIntoDocumentWithSameServletAndParam $F72 throws Exception { $F44 ( srcXml ) $F34646 ( srcWebXml , WebXmlIo , srcXml ) $F100786 ( mergeXml ) $F34646 ( mergeWebXml , WebXmlIo , mergeXml ) $F34648 ( merger , srcWebXml ) merger . merge ( mergeWebXml ) ; assertTrue ( WebXmlUtils . hasServlet ( srcWebXml , NUM00 ) ) ; $F3803 initParams = WebXmlUtils . getServletInitParamNames ( srcWebXml , NUM00 ) ; $F70108 ( assertEquals , initParams ) $F100793 ( assertEquals , initParams ) assertEquals ( NUM00 , WebXmlUtils . getServletInitParam ( srcWebXml , NUM00 , NUM00 ) ) ; }
public KMP ( String pat ) { this . R = NUM00 ; this . pat = pat ; $F1749 ( m , pat ) dfa = new int [ R ] [ m ] ; dfa [ pat . charAt ( NUM00 ) ] [ NUM00 ] = NUM00 ; for ( int x = NUM00 , j = NUM00 ; j < m ; j ++ ) { for ( $F119 ( c , R ) ) $F183944 ( dfa , c , j , x ) dfa [ pat . charAt ( j ) ] [ j ] = j + NUM00 ; x = dfa [ pat . charAt ( j ) ] [ x ] ; } }
private void loadConfiguration $F72 { mClientId = mConfigurationManager . getString ( PREF_CLIENT_ID , NUM00 ) ; mClientKey = mConfigurationManager . getString ( PREF_CLIENT_KEY , NUM00 ) ; $F2980 ( Timber ) }
public static void putBooleanField ( Object obj , long fieldOff , boolean val ) { UNSAFE . putBoolean ( obj , fieldOff , val ) ; }
public void sort ( $F392154 comparator ) { synchronized ( mLock ) $F57005 ( Collections , fileList , comparator ) notifyDataSetChanged ( ) ; }
public AcceptRequestInterceptor ( final String accept ) { this . accept = accept ; checkArgument ( $F27376 ( accept ) ) ; }
public void test_getLowestSetBitNeg $F72 { $F123148 int aSign = - NUM00 ; int iNumber = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) int result = aNumber . getLowestSetBit ( ) ; assertTrue ( NUM00 , result == iNumber ) ; }
private int tailingNonNewline $F36827 ( str , off , len ) { for ( $F119 ( cnt , len ) ) { final int pos = off + ( len - NUM00 ) - cnt ; if $F44927 ( str , pos , UNIX_NEWLINE ) { return cnt ; } if $F44927 ( str , pos , CARRIAGE_RETURN ) { return cnt ; } } return len ; }
$F1 public void reset $F72 { _clear ( ) ; bnodes = null ; bnodesTotalCount = NUM00 ; bnodesResolvedCount = NUM00 ; deferredStmts = null ; reifiedStmts = null ; if ( queue != null ) { final $F8318 ft = this . ft ; if ( ft != null ) { ft . cancel ( _BOOL ) ; this . ft = null ; } $F725 ( queue ) } }
public static $F96 readData ( final InputStream input ) throws IOException { $F4727 ( inputBuffer , BUFFER_LENGTH ) final ByteArrayOutputStream byteOutput = new ByteArrayOutputStream ( BUFFER_LENGTH ) ; int bytesRead ; $F29757 ( bytesRead , input , inputBuffer , byteOutput ) $F40695 ( r , byteOutput ) $F59 ( byteOutput ) return r ; }
$F29442 ( cls , makeLogTag )
$F1 public synchronized void println $F72 $F1210 ( print )
public boolean isCrash ( String testPath ) { for ( String prefix : getPrefixes ( testPath ) ) $F51680 ( mCrashList , prefix , _BOOL ) return _BOOL ; }
public AbstractSiteMap parseSiteMap ( String contentType , $F96 content , URL url ) throws UnknownFormatException , IOException { $F23375 ( mediaType , MediaType , contentType ) while ( mediaType != null && ! mediaType . equals ( MediaType . OCTET_STREAM ) ) { if $F105 ( XML_MEDIA_TYPES , mediaType ) $F8587 ( processXml , url , content ) else if $F105 ( TEXT_MEDIA_TYPES , mediaType ) $F38748 ( processText , url , content ) else if $F105 ( GZ_MEDIA_TYPES , mediaType ) $F8587 ( processGzip , url , content ) else { mediaType = MEDIA_TYPE_REGISTRY . getSupertype ( mediaType ) ; return parseSiteMap ( mediaType . toString ( ) , content , url ) ; } } throw new UnknownFormatException $F6486 ( contentType , url ) ; }
private void createDefaultManagedObject ( ManagedObjectDefinition $F5162 d , ManagedObject $F1011 child , DefaultManagedObject $F5162 dmo ) { for ( PropertyDefinition $F1011 pd : d . getAllPropertyDefinitions ( ) ) { setPropertyValues ( child , pd , dmo ) ; } try $F19092 ( child ) catch ( ManagedObjectAlreadyExistsException e ) { moaee = e ; } catch ( MissingMandatoryPropertiesException e ) { mmpe = e ; } catch ( ConcurrentModificationException e ) { cme = e ; } catch ( OperationRejectedException e ) { ore = e ; } catch ( LdapException e ) { ere = e ; } }
static String omitQuotesIfExist ( String str ) { $F1338 ( str ) if ( ( $F4432 ( str ) || $F4432 ( str ) ) && $F45145 ( str ) ) $F8994 ( str ) return str ; }
$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System )
private static boolean canCompleteNodePath ( Entity start , Entity end , ArrayList $F37552 network , int startPosition , List < ECMInfo > allECMInfo ) { Entity spotter = network . get ( startPosition ) ; ECMInfo spotterStartECM = ComputeECM . getECMEffects ( spotter , start . getPosition ( ) , spotter . getPosition ( ) , _BOOL , allECMInfo ) ; boolean isC3BDefeated = start . hasBoostedC3 ( ) && ( spotterStartECM != null ) && spotterStartECM . isAngelECM ( ) ; boolean isNovaDefeated = start . hasNovaCEWS ( ) && ( spotterStartECM != null ) && spotterStartECM . isNovaECM ( ) ; boolean isC3Defeated = ! ( start . hasBoostedC3 ( ) || start . hasNovaCEWS ( ) ) && ( spotterStartECM != null ) && spotterStartECM . isECM ( ) ; if ( isC3BDefeated || isNovaDefeated || isC3Defeated ) { return _BOOL ; } ECMInfo spotterEndECM = ComputeECM . getECMEffects ( spotter , spotter . getPosition ( ) , end . getPosition ( ) , _BOOL , allECMInfo ) ; isC3BDefeated = start . hasBoostedC3 ( ) && ( spotterEndECM != null ) && spotterEndECM . isAngelECM ( ) ; isNovaDefeated = start . hasNovaCEWS ( ) && ( spotterEndECM != null ) && spotterEndECM . isNovaECM ( ) ; isC3Defeated = ! ( start . hasBoostedC3 ( ) || start . hasNovaCEWS ( ) ) && ( spotterEndECM != null ) && spotterEndECM . isECM ( ) ; if ( ! ( isC3BDefeated || isNovaDefeated || isC3Defeated ) ) { return _BOOL ; } for ( ++ startPosition ; startPosition < network . size ( ) ; startPosition ++ ) { if ( Compute . canCompleteNodePath ( spotter , end , network , startPosition , allECMInfo ) ) { return _BOOL ; } } return _BOOL ; }
static void make72Safe ( StringBuffer line ) { $F115 ( length , line ) if ( length > NUM00 ) { int index = NUM00 ; while ( index < length - NUM00 ) { $F48459 ( line , index ) index += NUM00 ; length += NUM00 ; } } $F665 }
$F1 public int last $F72 { CharacterIterator t = getText ( ) ; t . setIndex ( t . getEndIndex ( ) ) ; return t . getIndex ( ) ; }
public static IStatus validateMethodName ( String name ) { return validateMethodName ( name , CompilerOptions . VERSION_1_3 , CompilerOptions . VERSION_1_3 ) ; }
public static void registerProtocol ( final String id , final Protocol protocol ) { $F826 ( id ) $F826 ( protocol ) PROTOCOLS . put ( id , protocol ) ; }
public byte receiveOneByte $F72 { $F13527 ( Log , TAG ) try { acquireLock ( ) ; mServerSocket . receive ( mReceivePacket ) ; Log . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; return $F94795 ( mReceivePacket ) ; } $F12241 ( e ) return Byte . MIN_VALUE ; }
public static String linkHTML ( String text ) { if $F6036 ( text ) $F2455 boolean http = $F412 ( text ) ; boolean www = $F412 ( text ) ; boolean email = $F412 ( text ) ; if ( ! http && ! www && ! email ) { return text ; } if ( $F412 ( text ) && $F412 ( text ) ) { return text ; } if ( http ) { $F275 ( matcher , httpRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { $F45144 ( url , matcher ) if ( $F412 ( url ) || $F412 ( url ) || $F412 ( url ) || $F412 ( url ) ) { url = NUM00 + url + NUM00 + url + NUM00 ; } else if ( $F412 ( url ) || $F412 ( url ) || $F412 ( url ) ) { url = NUM00 + url + NUM00 + url + NUM00 ; } else if ( $F412 ( url ) || $F412 ( url ) ) { url = NUM00 + url + NUM00 + url + NUM00 ; } else { url = NUM00 + url + NUM00 + url + NUM00 ; } matcher . appendReplacement ( sb , url ) ; } matcher . appendTail ( sb ) ; $F6947 ( text , sb ) } else if ( www ) { $F275 ( matcher , wwwRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { $F45144 ( url , matcher ) matcher . appendReplacement ( sb , NUM00 + url + NUM00 + url + NUM00 ) ; } matcher . appendTail ( sb ) ; $F6947 ( text , sb ) } if ( email ) { $F275 ( matcher , emailRegex , text ) $F280 ( sb ) while $F281 ( matcher ) { $F45144 ( address , matcher ) matcher . appendReplacement ( sb , NUM00 + address + NUM00 + address + NUM00 ) ; } matcher . appendTail ( sb ) ; $F6947 ( text , sb ) } return text ; }
public static int hash ( String key , int bitSize , String input , String hashType ) { int bitLimitedHash ; try { $F156 ( md , MessageDigest , hashType ) $F96 array = md . digest ( input . getBytes ( ) ) ; int hashInt = fromByteArray ( array ) ; bitLimitedHash = hashInt ; if ( bitSize < NUM00 ) { bitLimitedHash = ( NUM00 > > > ( NUM00 - bitSize ) ) & hashInt ; } $F8922 ( logger , hashInt , bitLimitedHash ) } catch ( NoSuchAlgorithmException e ) { $F17749 ( logger , e ) bitLimitedHash = hash ( key , bitSize , input ) ; } return bitLimitedHash ; }
private OFFactory computeInitialFactory ( Set < OFVersion > ofVersions ) { if $F4251 ( ofVersions ) $F4639 OFVersion highest = null ; for ( OFVersion v : ofVersions ) { if ( highest == null ) { highest = v ; } else if $F9032 ( v , highest ) { highest = v ; } } return OFFactories . getFactory ( highest ) ; }
private void loadJettyConfiguration ( $F5466 URL cfgUrl ) throws IgniteCheckedException { if ( cfgUrl == null ) { HttpConfiguration httpCfg = new HttpConfiguration $F72 ; httpCfg . setSecureScheme ( NUM00 ) ; httpCfg . setSecurePort ( NUM00 ) ; httpCfg . setSendServerVersion ( _BOOL ) ; httpCfg . setSendDateHeader ( _BOOL ) ; String srvPortStr = System . getProperty ( IGNITE_JETTY_PORT , NUM00 ) ; int srvPort ; try $F37473 ( srvPort , Integer , srvPortStr ) catch ( NumberFormatException ignore ) { throw new IgniteCheckedException ( NUM00 + NUM00 + srvPortStr ) ; } httpSrv = new Server ( new QueuedThreadPool $F32532 ) ; ServerConnector srvConn = new ServerConnector ( httpSrv , new HttpConnectionFactory ( httpCfg ) ) ; srvConn . setHost ( System . getProperty ( IGNITE_JETTY_HOST , NUM00 ) ) ; srvConn . setPort ( srvPort ) ; srvConn . setIdleTimeout ( NUM00 ) ; srvConn . setReuseAddress ( _BOOL ) ; httpSrv . addConnector ( srvConn ) ; httpSrv . setStopAtShutdown ( _BOOL ) ; } else { XmlConfiguration cfg ; try { cfg = new XmlConfiguration ( cfgUrl ) ; } catch ( FileNotFoundException e ) { throw new IgniteSpiException ( NUM00 + cfgUrl , e ) ; } catch ( SAXException e ) { throw new IgniteSpiException ( NUM00 + cfgUrl , e ) ; } catch ( IOException e ) { throw new IgniteSpiException ( NUM00 + cfgUrl , e ) ; } catch ( Exception e ) { throw new IgniteSpiException ( NUM00 + cfgUrl , e ) ; } try { httpSrv = ( Server ) cfg . configure ( ) ; } catch ( Exception e ) { throw new IgniteCheckedException ( NUM00 , e ) ; } } assert httpSrv != null ; httpSrv . setHandler ( jettyHnd ) ; override ( getJettyConnector ( ) ) ; }
public $F96 encodeFrame $F72 { int length = this . payload . length + frameLengthOverhead ; if ( this . payload . length > NUM00 ) { length += NUM00 ; } else if ( this . payload . length >= NUM00 ) { length += NUM00 ; } $F87627 ( buffer , ByteBuffer , length ) appendFinAndOpCode ( buffer , this . opcode , this . fin ) ; byte mask [ ] = generateMaskingKey ( ) ; appendLengthAndMask ( buffer , this . payload . length , mask ) ; for ( int i = NUM00 ; i < this . payload . length ; i ++ ) { buffer . put ( ( byte ) ( this . payload [ i ] ^= mask [ i % NUM00 ] ) ) ; } $F14257 ( buffer ) $F31057 ( buffer ) }
public static void preloadIcon ( Context context , ComponentName componentName , Bitmap icon , int dpi ) { try { $F45547 ( packageManager , context ) packageManager . getActivityIcon ( componentName ) ; $F665 } catch ( PackageManager . NameNotFoundException e ) $F845 final String key = componentName . flattenToString ( ) ; FileOutputStream resourceFile = null ; try { resourceFile = context . openFileOutput ( getResourceFilename ( componentName ) , Context . MODE_PRIVATE ) ; $F1538 ( os ) if ( icon . compress ( android . graphics . Bitmap . CompressFormat . PNG , NUM00 , os ) ) { $F1208 ( buffer , os ) $F17918 ( resourceFile , buffer ) } else { $F248237 ( Log , TAG , key ) $F665 } } catch ( FileNotFoundException e ) { Log . w ( TAG , NUM00 + key , e ) ; } catch ( IOException e ) { Log . w ( TAG , NUM00 + key , e ) ; } finally { if ( resourceFile != null ) { try $F881 ( resourceFile ) catch ( IOException e ) { Log . d ( TAG , NUM00 + key , e ) ; } } } }
public void normalize $F72 { $F83 ( sb ) for ( String v : values ) $F288 ( sb , v ) $F725 ( values ) $F40018 ( values , sb ) compacted = _BOOL ; }
public void addAttribute ( String key , String value ) $F1717 ( extraSessionAttributes , key , value )
String capitalise ( final String s ) { $F83314 ( s ) final StringBuffer s1 = new StringBuffer ( s ) ; if ( Character . isLowerCase ( s1 . charAt ( NUM00 ) ) ) { s1 . setCharAt ( NUM00 , Character . toUpperCase ( s1 . charAt ( NUM00 ) ) ) ; } for ( $F1088 ( j , s1 ) ) { if ( $F952 ( Character , s1 , j ) ) { s1 . setCharAt ( j , $F954 ( Character , s1 , j ) ) ; } } $F92 ( s1 ) }
public void recompose ( Vector recomposableElements ) throws TransformerException { int n = getIncludeCountComposed ( ) ; for ( int i = - NUM00 ; i < n ; i ++ ) { Stylesheet included = getIncludeComposed ( i ) ; int s = included . getOutputCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getOutput ( j ) ) ; } s = included . getAttributeSetCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getAttributeSet ( j ) ) ; } s = included . getDecimalFormatCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getDecimalFormat ( j ) ) ; } s = included . getKeyCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getKey ( j ) ) ; } s = included . getNamespaceAliasCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getNamespaceAlias ( j ) ) ; } s = included . getTemplateCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getTemplate ( j ) ) ; } s = included . getVariableOrParamCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getVariableOrParam ( j ) ) ; } s = included . getStripSpaceCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getStripSpace ( j ) ) ; } s = included . getPreserveSpaceCount ( ) ; for ( $F119 ( j , s ) ) { recomposableElements . addElement ( included . getPreserveSpace ( j ) ) ; } } }
private Geometry unionActual ( Geometry g0 , Geometry g1 ) { return restrictToPolygons ( g0 . union ( g1 ) ) ; }
public boolean supports ( @ MagicConstant ( flagsFromClass = Features . class ) int capability ) { IAndroidTarget target = getTarget ( ) ; if ( target != null ) { return RenderService . supportsCapability ( getModule ( ) , target , capability ) ; } return _BOOL ; }
$F1 public void transactionAborted $F72 { if $F2979 ( listeners ) $F8030 ( records ) else { $F1206 ( records ) $F22620 ( listeners ) } }
$F1 public boolean add ( E o ) { $F160092 ( o ) $F46660 ( offer , o , _BOOL ) $F8675 }
public StandardCrosshairLabelGenerator $F72 { this ( NUM00 , NumberFormat . getNumberInstance ( ) ) ; }
private URI createEthernetStoragePort ( $F2100 ( keyMap ) , StoragePort port , String name , String portInstanceID , $F42521 newPorts , $F42521 existingPorts ) throws IOException { StoragePort portinMemory = ( StoragePort ) keyMap . get ( portInstanceID ) ; if ( null == port ) { portinMemory . setPortNetworkId ( name ) ; portinMemory . setPortEndPointID ( name ) ; String portNativeGuid = NativeGUIDGenerator . generateNativeGuid ( _dbClient , portinMemory ) ; portinMemory . setNativeGuid ( portNativeGuid ) ; portinMemory . setLabel ( portNativeGuid ) ; _dbClient . createObject ( portinMemory ) ; newPorts . add ( portinMemory ) ; return portinMemory . getId ( ) ; } else { port . setPortName ( portinMemory . getPortName ( ) ) ; port . setPortSpeed ( portinMemory . getPortSpeed ( ) ) ; port . setPortEndPointID ( name ) ; port . setCompatibilityStatus ( portinMemory . getCompatibilityStatus ( ) ) ; port . setDiscoveryStatus ( portinMemory . getDiscoveryStatus ( ) ) ; port . setOperationalStatus ( portinMemory . getOperationalStatus ( ) ) ; port . setPortType ( portinMemory . getPortType ( ) ) ; _dbClient . persistObject ( port ) ; existingPorts . add ( port ) ; return port . getId ( ) ; } }
default int add ( Item stack ) { int itemsLeft = stack . count ( ) ; for ( $F50810 ( i , size ) ) { itemsLeft = add ( i , stack . withAmount ( itemsLeft ) ) ; } if ( itemsLeft != stack . count ( ) ) $F5795 ( markChanged ) return itemsLeft ; }
public void mark ( long n ) { count . addAndGet ( n ) ; m1Rate . update ( n ) ; m5Rate . update ( n ) ; m15Rate . update ( n ) ; }
public $F806 readAllLines $F72 { $F8728 ( lines ) while ( hasNextLine ( ) ) $F33452 ( lines , readLine ) $F16105 ( lines ) }
public static boolean isAbsolutePath ( String systemId ) { $F397 ( systemId , _BOOL ) $F15885 ( file , systemId ) return file . isAbsolute ( ) ; }
protected QualifiedItem [ ] parseQualifiedItems ( final VersionSpec defaultVersion , final boolean allowVersionRange , final int startIndex ) { return parseQualifiedItems ( getFreeArguments ( ) , defaultVersion , allowVersionRange , startIndex ) ; }
public void changeChangeEnabled ( ChangeEnabledState state ) throws RefactoringException { RefactoringSession session = getRefactoringSession ( state . getSessionId ( ) ) ; session . updateChangeEnabled ( state . getChangeId ( ) , state . isEnabled ( ) ) ; }
public UpdateBuilder bindUris ( String from , $F6877 uris ) $F12588 ( bindUris , from , uris )
public void populateAll $F72 throws GeneralException { for ( ServiceEcaAction ecaAction : serviceEcaRule . getEcaActionList ( ) ) { servicesCalledByThisServiceEca . add ( aif . getServiceArtifactInfo ( ecaAction . getServiceName ( ) ) ) ; UtilMisc . addToSortedSetInMap ( this , aif . allServiceEcaInfosReferringToServiceName , ecaAction . getServiceName ( ) ) ; } }
private $F2027 findNearestArea ( int pixelX , int pixelY , int minSpanX , int minSpanY , int spanX , int spanY , boolean ignoreOccupied , $F2027 result , $F2027 resultSpan ) { lazyInitTempRectStack ( ) ; $F115851 ( pixelX , mCellWidth , mWidthGap , spanX ) $F115851 ( pixelY , mCellHeight , mHeightGap , spanY ) $F115855 ( bestXY , result ) double bestDistance = Double . MAX_VALUE ; final Rect bestRect = new Rect ( - NUM00 , - NUM00 , - NUM00 , - NUM00 ) ; final $F115864 validRegions = new $F115864 $F72 ; final int countX = mCountX ; final int countY = mCountY ; if ( minSpanX <= NUM00 || minSpanY <= NUM00 || spanX <= NUM00 || spanY <= NUM00 || spanX < minSpanX || spanY < minSpanY ) { return bestXY ; } for ( $F115874 ( y , countY , minSpanY ) ) { inner : for ( $F115874 ( x , countX , minSpanX ) ) { int ySize = - NUM00 ; int xSize = - NUM00 ; if ( ignoreOccupied ) { for ( $F119 ( i , minSpanX ) ) { for ( $F119 ( j , minSpanY ) ) { if ( mOccupied [ x + i ] [ y + j ] ) $F115876 } } xSize = minSpanX ; ySize = minSpanY ; boolean incX = _BOOL ; boolean hitMaxX = xSize >= spanX ; boolean hitMaxY = ySize >= spanY ; while ( ! ( hitMaxX && hitMaxY ) ) { if ( incX && ! hitMaxX ) { for ( $F119 ( j , ySize ) ) { if ( x + xSize > countX - NUM00 || mOccupied [ x + xSize ] [ y + j ] ) { hitMaxX = _BOOL ; } } $F115888 ( hitMaxX , xSize ) } else if ( ! hitMaxY ) { for ( $F119 ( i , xSize ) ) { if ( y + ySize > countY - NUM00 || mOccupied [ x + i ] [ y + ySize ] ) { hitMaxY = _BOOL ; } } $F115888 ( hitMaxY , ySize ) } hitMaxX |= xSize >= spanX ; hitMaxY |= ySize >= spanY ; incX = ! incX ; } incX = _BOOL ; hitMaxX = xSize >= spanX ; hitMaxY = ySize >= spanY ; } $F92861 ( cellXY , mTmpPoint ) cellToCenterPoint ( x , y , cellXY ) ; Rect currentRect = mTempRectStack . pop ( ) ; currentRect . set ( x , y , x + xSize , y + ySize ) ; boolean contained = _BOOL ; for ( Rect r : validRegions ) { $F10283 ( r , currentRect , contained , _BOOL ) } validRegions . push ( currentRect ) ; double distance = Math . hypot ( cellXY [ NUM00 ] - pixelX , cellXY [ NUM00 ] - pixelY ) ; if ( ( distance <= bestDistance && ! contained ) || currentRect . contains ( bestRect ) ) { bestDistance = distance ; bestXY [ NUM00 ] = x ; bestXY [ NUM00 ] = y ; $F115913 ( resultSpan , xSize , ySize ) bestRect . set ( currentRect ) ; } } } $F115922 ( bestDistance , Double , bestXY ) recycleTempRects ( validRegions ) ; return bestXY ; }
public void validationStatesRemoved ( K key ) { hideMessage ( key ) ; validationErrorStates . remove ( key ) ; notifyUpstream ( key , Collections . < ValidationState > $F35890 ) ; }
public void killApplication ( String applicationId ) throws IOException , YarnException { $F556 ( log , applicationId ) yarnClient . killApplication ( getApplicationIDFromString ( applicationId ) ) ; }
public static String convert ( String prefix ) { $F83 ( sb ) $F2936 ( prefix ) $F6542 ( lines , prefix ) for ( String line : lines ) { $F10144 ( tokens ) $F1469 c = UnsafeString . getChars ( line ) ; int lastidx = NUM00 ; int idx = NUM00 ; while ( idx < c . length ) { while ( c [ idx ] != NUM00 && c [ idx ] != NUM00 && c [ idx ] != NUM00 ) { idx ++ ; } if ( idx != lastidx ) { tokens . add ( new String ( c , lastidx , idx - lastidx ) ) ; } idx ++ ; lastidx = idx ; } Collections . reverse ( tokens ) ; for ( String token : tokens ) $F444 ( sb , token ) } $F92 ( sb ) }
public boolean toBoolean ( Element el , String attributeName , boolean defaultValue ) { $F57219 ( value , el , attributeName ) $F397 ( value , defaultValue ) return Caster . toBooleanValue ( value , _BOOL ) ; }
public synchronized void addPanListener ( PanListener listener ) $F207 ( mPanListeners , listener )
protected void serializePreRoot $F72 throws IOException { int i ; if ( _preRoot != null ) { for ( i = NUM00 ; i < _preRoot . size ( ) ; ++ i ) { printText ( $F1766 ( _preRoot , i ) , _BOOL , _BOOL ) ; if ( _indenting ) _printer . breakLine ( ) ; } $F6050 ( _preRoot ) } }
private void createSchemaColumnEntities ( $F206544 schemaColumns , boolean isPartitionList , Collection < SchemaColumnEntity > schemaColumnEntityList , Map < String , SchemaColumnEntity > schemaColumnEntityMap , BusinessObjectFormatEntity businessObjectFormatEntity ) { if $F20899 ( CollectionUtils , schemaColumns ) { int position = NUM00 ; for ( SchemaColumn schemaColumn : schemaColumns ) { SchemaColumnEntity $F24916 ( schemaColumnEntity , schemaColumnEntityMap , schemaColumn ) ; if ( schemaColumnEntity == null ) { schemaColumnEntity = createSchemaColumnEntity ( schemaColumn , businessObjectFormatEntity ) ; schemaColumnEntityList . add ( schemaColumnEntity ) ; $F22760 ( schemaColumnEntityMap , schemaColumn , schemaColumnEntity ) } if ( isPartitionList ) { schemaColumnEntity . setPartitionLevel ( position ++ ) ; } else { schemaColumnEntity . setPosition ( position ++ ) ; } } } }
public static $F4203 String joinAnd ( final String delimiter , final String lastDelimiter , $F60962 ( objs ) ) { if $F4251 ( objs ) $F1278 final $F13085 iter = objs . iterator ( ) ; $F1121 ( buffer ) while $F2921 ( iter ) { final T obj = iter . next ( ) ; if ( notEmpty ( obj ) ) { if $F35625 ( buffer ) { buffer . append ( iter . hasNext ( ) ? delimiter : lastDelimiter ) ; } $F42779 ( buffer , Strings , obj ) } } $F92 ( buffer ) }
public static String generateNativeGuid ( DbClient dbClient , Snapshot snapshot ) throws IOException { FileShare fs = dbClient . queryObject ( FileShare . class , snapshot . getParent ( ) ) ; StorageSystem device = dbClient . queryObject ( $F41797 , fs . getStorageDevice ( ) ) ; return String . format ( NUM00 + SNAPSHOT + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , snapshot . getNativeId ( ) ) ; }
public static $F529 updateFile $F71242 ( dctx , context ) { $F67631 ( result ) try { result = updateFileMethod ( dctx , context ) ; } catch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) return result ; }
$F47733 ( reader , writer , buffer , count )
public EditSensorsDialog ( final Collection $F310647 sensors ) { super ( ) ; $F826 ( sensors ) this . sensors = sensors ; setTitle ( $F10533 ( sensors ) ) ; initComponents ( ) ; layoutComponents ( ) ; }
$F1219 synchronized void trimToSize ( int targetSize ) { int bytesToFree = Math . min ( mUsed . mNumBytes + mFree . mNumBytes - targetSize , mFree . mNumBytes ) ; $F36109 ( bytesToFree ) if $F65643 ( FLog ) { FLog . v ( TAG , NUM00 , targetSize , mUsed . mNumBytes + mFree . mNumBytes , bytesToFree ) ; } logStats ( ) ; for ( $F3836 ( i , mBuckets ) ) { $F65649 ( bytesToFree ) Bucket $F2193 bucket = mBuckets . valueAt ( i ) ; while ( bytesToFree > NUM00 ) { V value = bucket . pop ( ) ; $F32472 ( value ) free ( value ) ; bytesToFree -= bucket . mItemSize ; mFree . decrement ( bucket . mItemSize ) ; } } logStats ( ) ; if $F65643 ( FLog ) { FLog . v ( TAG , NUM00 , targetSize , mUsed . mNumBytes + mFree . mNumBytes ) ; } }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public String readToDelimiter ( char delim ) throws FormatException { $F280 ( buildretval ) char tmp ; try { while ( ( tmp = readChar ( ) ) != delim ) buildretval . append ( tmp ) ; } $F214817 catch ( FormatException fe ) { if $F1277 ( buildretval ) { throw fe ; } } $F92 ( buildretval ) }
private void addNewLineAtTop ( $F40828 recycler ) { int x = layoutStartPoint ( ) . x , bottom = getDecoratedTop ( getChildAt ( getMaxHeightLayoutPositionInLine ( NUM00 ) ) ) , y ; int height = NUM00 ; $F183286 $F19827 ( lineChildren ) ; int currentAdapterPosition = NUM00 ; int endAdapterPosition = getChildAdapterPosition ( NUM00 ) - NUM00 ; $F28883 ( rect ) boolean newline ; boolean firstItem = _BOOL ; LayoutContext layoutContext = LayoutContext . fromLayoutOptions ( flowLayoutOptions ) ; int firstItemAdapterPosition = getChildAdapterPosition ( NUM00 ) ; if ( cacheHelper . hasPreviousLineCached ( firstItemAdapterPosition ) ) { int previousLineIndex = cacheHelper . itemLineIndex ( firstItemAdapterPosition ) - NUM00 ; Line previousLine = cacheHelper . getLine ( previousLineIndex ) ; int firstNewItemAdapterPosition = cacheHelper . firstItemIndex ( previousLineIndex ) ; for ( int i = NUM00 ; i < previousLine . itemCount ; i ++ ) { View newView = recycler . getViewForPosition ( firstNewItemAdapterPosition + i ) ; addView ( newView , i ) ; lineChildren . add ( newView ) ; } height = previousLine . maxHeight ; } else { while ( currentAdapterPosition <= endAdapterPosition ) { View newChild = recycler . getViewForPosition ( currentAdapterPosition ) ; newline = calcChildLayoutRect ( newChild , x , NUM00 , height , layoutContext , rect ) ; cacheHelper . setItem ( currentAdapterPosition , new Point ( $F78956 ( rect ) ) ) ; $F43476 ( addView , newChild , lineChildren ) if ( newline && ! firstItem ) { for ( View viewToRecycle : lineChildren ) { removeAndRecycleView ( viewToRecycle , recycler ) ; } $F725 ( lineChildren ) x = advanceInSameLine ( layoutStartPoint ( ) . x , rect , layoutContext ) ; $F54171 ( height , rect ) layoutContext . currentLineItemCount = NUM00 ; } else { x = advanceInSameLine ( x , rect , layoutContext ) ; height = Math . max ( height , rect . height ( ) ) ; firstItem = _BOOL ; layoutContext . currentLineItemCount ++ ; } lineChildren . add ( newChild ) ; currentAdapterPosition ++ ; } } x = layoutStartPoint ( ) . x ; y = bottom - height ; firstItem = _BOOL ; layoutContext = LayoutContext . fromLayoutOptions ( flowLayoutOptions ) ; for ( $F2277 ( i , lineChildren ) ) { View childView = lineChildren . get ( i ) ; newline = calcChildLayoutRect ( childView , x , y , height , layoutContext , rect ) ; if ( newline && firstItem ) { int rectHeight = rect . height ( ) ; rect . top -= rectHeight ; rect . bottom -= rectHeight ; firstItem = _BOOL ; } layoutDecorated ( childView , rect . left , rect . top , rect . right , rect . bottom ) ; x = advanceInSameLine ( x , rect , layoutContext ) ; } }
$F31396 ( str , retval , ch , i , s , Integer )
default T call ( SourceSection source , T lhs , T argument1 , T argument2 ) { return call ( source , lhs , Arrays . asList ( argument ( argument1 ) , argument ( argument2 ) ) ) ; }
public boolean equalMapGenParameters ( MapSettings other ) { if ( ( boardWidth != other . getBoardWidth ( ) ) || ( boardHeight != other . getBoardHeight ( ) ) || ( mapWidth != other . getMapWidth ( ) ) || ( mapHeight != other . getMapHeight ( ) ) || ( invertNegativeTerrain != other . getInvertNegativeTerrain ( ) ) || ( hilliness != other . getHilliness ( ) ) || ( cliffs != other . getCliffs ( ) ) || ( range != other . getRange ( ) ) || ( minWaterSpots != other . getMinWaterSpots ( ) ) || ( maxWaterSpots != other . getMaxWaterSpots ( ) ) || ( minWaterSize != other . getMinWaterSize ( ) ) || ( maxWaterSize != other . getMaxWaterSize ( ) ) || ( probDeep != other . getProbDeep ( ) ) || ( minForestSpots != other . getMinForestSpots ( ) ) || ( maxForestSpots != other . getMaxForestSpots ( ) ) || ( minForestSize != other . getMinForestSize ( ) ) || ( maxForestSize != other . getMaxForestSize ( ) ) || ( probHeavy != other . getProbHeavy ( ) ) || ( minRoughSpots != other . getMinRoughSpots ( ) ) || ( maxRoughSpots != other . getMaxRoughSpots ( ) ) || ( minRoughSize != other . getMinRoughSize ( ) ) || ( maxRoughSize != other . getMaxRoughSize ( ) ) || ( minSandSpots != other . getMinSandSpots ( ) ) || ( maxSandSpots != other . getMaxSandSpots ( ) ) || ( minSandSize != other . getMinSandSize ( ) ) || ( maxSandSize != other . getMaxSandSize ( ) ) || ( minPlantedFieldSpots != other . getMinPlantedFieldSpots ( ) ) || ( maxPlantedFieldSpots != other . getMaxPlantedFieldSpots ( ) ) || ( minPlantedFieldSize != other . getMinPlantedFieldSize ( ) ) || ( maxPlantedFieldSize != other . getMaxPlantedFieldSize ( ) ) || ( minSwampSpots != other . getMinSwampSpots ( ) ) || ( maxSwampSpots != other . getMaxSwampSpots ( ) ) || ( minSwampSize != other . getMinSwampSize ( ) ) || ( maxSwampSize != other . getMaxSwampSize ( ) ) || ( minPavementSpots != other . getMinPavementSpots ( ) ) || ( maxPavementSpots != other . getMaxPavementSpots ( ) ) || ( minPavementSize != other . getMinPavementSize ( ) ) || ( maxPavementSize != other . getMaxPavementSize ( ) ) || ( minRubbleSpots != other . getMinRubbleSpots ( ) ) || ( maxRubbleSpots != other . getMaxRubbleSpots ( ) ) || ( minRubbleSize != other . getMinRubbleSize ( ) ) || ( maxRubbleSize != other . getMaxRubbleSize ( ) ) || ( minFortifiedSpots != other . getMinFortifiedSpots ( ) ) || ( maxFortifiedSpots != other . getMaxFortifiedSpots ( ) ) || ( minFortifiedSize != other . getMinFortifiedSize ( ) ) || ( maxFortifiedSize != other . getMaxFortifiedSize ( ) ) || ( minIceSpots != other . getMinIceSpots ( ) ) || ( maxIceSpots != other . getMaxIceSpots ( ) ) || ( minIceSize != other . getMinIceSize ( ) ) || ( maxIceSize != other . getMaxIceSize ( ) ) || ( probRoad != other . getProbRoad ( ) ) || ( probInvert != other . getProbInvert ( ) ) || ( probRiver != other . getProbRiver ( ) ) || ( probCrater != other . getProbCrater ( ) ) || ( minRadius != other . getMinRadius ( ) ) || ( maxRadius != other . getMaxRadius ( ) ) || ( minCraters != other . getMinCraters ( ) ) || ( maxCraters != other . getMaxCraters ( ) ) || ( ! theme . equals ( other . getTheme ( ) ) ) || ( fxMod != other . getFxMod ( ) ) || ( cityBlocks != other . getCityBlocks ( ) ) || ( cityType != other . getCityType ( ) ) || ( cityMinCF != other . getCityMinCF ( ) ) || ( cityMaxCF != other . getCityMaxCF ( ) ) || ( cityMinFloors != other . getCityMinFloors ( ) ) || ( cityMaxFloors != other . getCityMaxFloors ( ) ) || ( cityDensity != other . getCityDensity ( ) ) || ( probFlood != other . getProbFlood ( ) ) || ( probForestFire != other . getProbForestFire ( ) ) || ( probFreeze != other . getProbFreeze ( ) ) || ( probDrought != other . getProbDrought ( ) ) || ( algorithmToUse != other . getAlgorithmToUse ( ) ) || ( mountainHeightMin != other . getMountainHeightMin ( ) ) || ( mountainHeightMax != other . getMountainHeightMax ( ) ) || ( mountainPeaks != other . getMountainPeaks ( ) ) || ( mountainStyle != other . getMountainStyle ( ) ) || ( mountainWidthMin != other . getMountainWidthMin ( ) ) || ( mountainWidthMax != other . getMountainWidthMax ( ) ) || ( boardBuildings != other . getBoardBuildings ( ) ) ) { return _BOOL ; } return _BOOL ; }
private static void decodeTextSegment ( BitSource bits , StringBuilder result ) throws FormatException { boolean upperShift = _BOOL ; $F11844 ( cValues ) int shift = NUM00 ; do { $F46340 ( bits ) $F2847 ( firstByte , bits ) $F32905 ( firstByte ) $F46342 ( parseTwoBytes , firstByte , bits , cValues ) for ( $F6268 ( i ) ) { int cValue = cValues [ i ] ; switch ( shift ) { $F46351 ( cValue , shift , TEXT_BASIC_SET_CHARS , textChar , upperShift , result , _BOOL , FormatException ) $F46354 ( upperShift , result , cValue , _BOOL , shift ) $F46358 ( cValue , C40_SHIFT2_SET_CHARS , c40char , upperShift , result , _BOOL , FormatException , shift ) $F99359 ( cValue , TEXT_SHIFT3_SET_CHARS , textChar , upperShift , result , _BOOL , shift , FormatException ) $F46362 ( FormatException ) } } } while $F2892 ( bits ) ; }
public synchronized void curl ( PointF curlPos , PointF curlDir , double radius ) { if ( DRAW_CURL_POSITION ) { $F16709 ( mBufCurlPositionLines ) mBufCurlPositionLines . put ( curlPos . x ) ; mBufCurlPositionLines . put ( curlPos . y - NUM00 ) ; mBufCurlPositionLines . put ( curlPos . x ) ; mBufCurlPositionLines . put ( curlPos . y + NUM00 ) ; mBufCurlPositionLines . put ( curlPos . x - NUM00 ) ; mBufCurlPositionLines . put ( curlPos . y ) ; mBufCurlPositionLines . put ( curlPos . x + NUM00 ) ; mBufCurlPositionLines . put ( curlPos . y ) ; mBufCurlPositionLines . put ( curlPos . x ) ; mBufCurlPositionLines . put ( curlPos . y ) ; mBufCurlPositionLines . put ( curlPos . x + curlDir . x * NUM00 ) ; mBufCurlPositionLines . put ( curlPos . y + curlDir . y * NUM00 ) ; $F16709 ( mBufCurlPositionLines ) } $F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { $F16709 ( mBufTexCoords ) } double curlAngle = Math . acos ( curlDir . x ) ; curlAngle = curlDir . y > NUM00 ? - curlAngle : curlAngle ; mArrTempVertices . addAll ( mArrRotatedVertices ) ; $F725 ( mArrRotatedVertices ) for ( $F809 ( i ) ) { Vertex v = mArrTempVertices . remove ( NUM00 ) ; v . set ( mRectangle [ i ] ) ; $F16666 ( v , curlPos ) v . rotateZ ( - curlAngle ) ; int j = NUM00 ; for ( ; j < mArrRotatedVertices . size ( ) ; ++ j ) { Vertex v2 = mArrRotatedVertices . get ( j ) ; if ( v . mPosX > v2 . mPosX ) $F5153 if ( v . mPosX == v2 . mPosX && v . mPosY > v2 . mPosY ) $F5153 } mArrRotatedVertices . add ( j , v ) ; } int lines [ ] [ ] = { $F104535 , $F104535 , $F104535 , $F104535 } ; { Vertex v0 = mArrRotatedVertices . get ( NUM00 ) ; Vertex v2 = mArrRotatedVertices . get ( NUM00 ) ; Vertex v3 = mArrRotatedVertices . get ( NUM00 ) ; double dist2 = Math . sqrt ( ( v0 . mPosX - v2 . mPosX ) * ( v0 . mPosX - v2 . mPosX ) + ( v0 . mPosY - v2 . mPosY ) * ( v0 . mPosY - v2 . mPosY ) ) ; double dist3 = Math . sqrt ( ( v0 . mPosX - v3 . mPosX ) * ( v0 . mPosX - v3 . mPosX ) + ( v0 . mPosY - v3 . mPosY ) * ( v0 . mPosY - v3 . mPosY ) ) ; if ( dist2 > dist3 ) { $F293658 ( lines ) $F293658 ( lines ) } } mVerticesCountFront = mVerticesCountBack = NUM00 ; if ( DRAW_SHADOW ) { mArrTempShadowVertices . addAll ( mArrDropShadowVertices ) ; mArrTempShadowVertices . addAll ( mArrSelfShadowVertices ) ; $F725 ( mArrDropShadowVertices ) $F725 ( mArrSelfShadowVertices ) } double curlLength = Math . PI * radius ; $F725 ( mArrScanLines ) if ( mMaxCurlSplits > NUM00 ) { mArrScanLines . add ( ( double ) NUM00 ) ; } for ( $F1316 ( i , mMaxCurlSplits ) ) { mArrScanLines . add ( ( - curlLength * i ) / ( mMaxCurlSplits - NUM00 ) ) ; } mArrScanLines . add ( mArrRotatedVertices . get ( NUM00 ) . mPosX - NUM00 ) ; double scanXmax = mArrRotatedVertices . get ( NUM00 ) . mPosX + NUM00 ; for ( $F3836 ( i , mArrScanLines ) ) { $F28095 ( scanXmin , mArrScanLines , i ) for ( $F3836 ( j , mArrRotatedVertices ) ) { Vertex v = mArrRotatedVertices . get ( j ) ; if ( v . mPosX >= scanXmin && v . mPosX <= scanXmax ) { Vertex n = mArrTempVertices . remove ( NUM00 ) ; n . set ( v ) ; Array $F130408 intersections = getIntersections ( mArrRotatedVertices , lines , n . mPosX ) ; if ( $F10470 ( intersections ) && intersections . get ( NUM00 ) . mPosY > v . mPosY ) { mArrOutputVertices . addAll ( intersections ) ; mArrOutputVertices . add ( n ) ; } else if $F119130 ( intersections ) { mArrOutputVertices . add ( n ) ; mArrOutputVertices . addAll ( intersections ) ; } else { mArrTempVertices . add ( n ) ; mArrTempVertices . addAll ( intersections ) ; } } } Array $F130408 intersections = getIntersections ( mArrRotatedVertices , lines , scanXmin ) ; if $F10471 ( intersections ) { Vertex v1 = intersections . get ( NUM00 ) ; Vertex v2 = intersections . get ( NUM00 ) ; if ( v1 . mPosY < v2 . mPosY ) $F23287 ( mArrOutputVertices , v2 , v1 ) else $F21926 ( mArrOutputVertices , intersections ) } else if $F6887 ( intersections ) $F21926 ( mArrTempVertices , intersections ) while $F3817 ( mArrOutputVertices ) { Vertex v = mArrOutputVertices . remove ( NUM00 ) ; mArrTempVertices . add ( v ) ; boolean textureFront ; if ( i == NUM00 ) { textureFront = _BOOL ; mVerticesCountFront ++ ; } else if ( $F2282 ( i , mArrScanLines ) || curlLength == NUM00 ) { v . mPosX = - ( curlLength + v . mPosX ) ; v . mPosZ = NUM00 * radius ; v . mPenumbraX = - v . mPenumbraX ; textureFront = _BOOL ; mVerticesCountBack ++ ; } else { double rotY = Math . PI * ( v . mPosX / curlLength ) ; v . mPosX = radius * Math . sin ( rotY ) ; v . mPosZ = radius - $F68927 ( radius , Math , rotY ) ; v . mPenumbraX *= Math . cos ( rotY ) ; v . mColorFactor = ( float ) ( NUM00 + NUM00 * Math . sqrt ( Math . sin ( rotY ) + NUM00 ) ) ; if ( v . mPosZ >= radius ) { textureFront = _BOOL ; mVerticesCountBack ++ ; } else { textureFront = _BOOL ; mVerticesCountFront ++ ; } } if ( textureFront != mFlipTexture ) { v . mTexX *= mTextureRectFront . right ; v . mTexY *= mTextureRectFront . bottom ; v . mColor = mTexturePage . getColor ( CurlPage . SIDE_FRONT ) ; } else { v . mTexX *= mTextureRectBack . right ; v . mTexY *= mTextureRectBack . bottom ; v . mColor = mTexturePage . getColor ( CurlPage . SIDE_BACK ) ; } v . rotateZ ( curlAngle ) ; $F26898 ( v , curlPos ) addVertex ( v ) ; if ( DRAW_SHADOW && v . mPosZ > NUM00 && v . mPosZ <= radius ) { ShadowVertex sv = mArrTempShadowVertices . remove ( NUM00 ) ; sv . mPosX = v . mPosX ; sv . mPosY = v . mPosY ; sv . mPosZ = v . mPosZ ; sv . mPenumbraX = ( v . mPosZ / NUM00 ) * - curlDir . x ; sv . mPenumbraY = ( v . mPosZ / NUM00 ) * - curlDir . y ; sv . mPenumbraColor = v . mPosZ / radius ; int idx = ( $F2958 ( mArrDropShadowVertices ) ) / NUM00 ; mArrDropShadowVertices . add ( idx , sv ) ; } if ( DRAW_SHADOW && v . mPosZ > radius ) { ShadowVertex sv = mArrTempShadowVertices . remove ( NUM00 ) ; sv . mPosX = v . mPosX ; sv . mPosY = v . mPosY ; sv . mPosZ = v . mPosZ ; sv . mPenumbraX = ( ( v . mPosZ - radius ) / NUM00 ) * v . mPenumbraX ; sv . mPenumbraY = ( ( v . mPosZ - radius ) / NUM00 ) * v . mPenumbraY ; sv . mPenumbraColor = ( v . mPosZ - radius ) / ( NUM00 * radius ) ; int idx = ( $F2958 ( mArrSelfShadowVertices ) ) / NUM00 ; mArrSelfShadowVertices . add ( idx , sv ) ; } } scanXmax = scanXmin ; } $F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { $F16709 ( mBufTexCoords ) } if ( DRAW_SHADOW ) { $F16709 ( mBufShadowColors ) $F16709 ( mBufShadowVertices ) mDropShadowCount = NUM00 ; for ( $F3836 ( i , mArrDropShadowVertices ) ) { ShadowVertex sv = mArrDropShadowVertices . get ( i ) ; mBufShadowVertices . put ( ( float ) sv . mPosX ) ; mBufShadowVertices . put ( ( float ) sv . mPosY ) ; mBufShadowVertices . put ( ( float ) sv . mPosZ ) ; mBufShadowVertices . put ( ( float ) ( sv . mPosX + sv . mPenumbraX ) ) ; mBufShadowVertices . put ( ( float ) ( sv . mPosY + sv . mPenumbraY ) ) ; mBufShadowVertices . put ( ( float ) sv . mPosZ ) ; for ( $F809 ( j ) ) { double color = SHADOW_OUTER_COLOR [ j ] + $F17318 ( SHADOW_INNER_COLOR , j , SHADOW_OUTER_COLOR ) * sv . mPenumbraColor ; mBufShadowColors . put ( ( float ) color ) ; } mBufShadowColors . put ( SHADOW_OUTER_COLOR ) ; mDropShadowCount += NUM00 ; } mSelfShadowCount = NUM00 ; for ( $F3836 ( i , mArrSelfShadowVertices ) ) { ShadowVertex sv = mArrSelfShadowVertices . get ( i ) ; mBufShadowVertices . put ( ( float ) sv . mPosX ) ; mBufShadowVertices . put ( ( float ) sv . mPosY ) ; mBufShadowVertices . put ( ( float ) sv . mPosZ ) ; mBufShadowVertices . put ( ( float ) ( sv . mPosX + sv . mPenumbraX ) ) ; mBufShadowVertices . put ( ( float ) ( sv . mPosY + sv . mPenumbraY ) ) ; mBufShadowVertices . put ( ( float ) sv . mPosZ ) ; for ( $F809 ( j ) ) { double color = SHADOW_OUTER_COLOR [ j ] + $F17318 ( SHADOW_INNER_COLOR , j , SHADOW_OUTER_COLOR ) * sv . mPenumbraColor ; mBufShadowColors . put ( ( float ) color ) ; } mBufShadowColors . put ( SHADOW_OUTER_COLOR ) ; mSelfShadowCount += NUM00 ; } $F16709 ( mBufShadowColors ) $F16709 ( mBufShadowVertices ) } }
public void saveLockPassword $F123257 ( password , quality , isFallback ) { $F172325 ( hash , passwordToHash , password ) try { $F18800 ( raf , sLockPasswordFilename ) try { if ( password == null ) $F357905 ( raf ) else $F53422 ( raf , hash ) } $F48674 ( raf ) } catch ( FileNotFoundException fnfe ) { $F110901 ( LogUtil , TAG , sLockPasswordFilename ) } catch ( IOException ioe ) { $F110901 ( LogUtil , TAG , sLockPasswordFilename ) } }
public boolean checkUsernameExists ( String username ) throws DataAccessException $F118073 ( getUserInfo , username )
public Code39Reader $F72 { usingCheckDigit = _BOOL ; extendedMode = _BOOL ; }
public static String encode ( final List $F223126 path , int precision ) { long lastLat = NUM00 ; long lastLng = NUM00 ; $F3239 ( result ) $F70630 ( factor , Math , precision ) for ( final Position point : path ) { long lat = Math . round ( point . getLatitude ( ) * factor ) ; long lng = Math . round ( point . getLongitude ( ) * factor ) ; long dLat = lat - lastLat ; long dLng = lng - lastLng ; encode ( dLat , result ) ; encode ( dLng , result ) ; lastLat = lat ; lastLng = lng ; } $F92 ( result ) }
public ActivityResolveInfo ( ResolveInfo resolveInfo ) $F6988 ( this , resolveInfo )
$F1 public int compareTo ( LibPackage p_other ) { return pkg_name . compareToIgnoreCase ( p_other . pkg_name ) ; }
$F64178 ( bmap , exifOutFileName , NULL_ARGUMENT_ , s , getExifWriterStream , Bitmap , closeSilently , e )
public double entropy $F23416 ( x ) { double h = NUM00 ; int n = x . length ; $F13209 ( ln2 , Math ) int n0 = NUM00 ; for ( $F119 ( i , n ) ) { if ( x [ i ] == NUM00 ) { n0 ++ ; } } double p ; if ( n0 == NUM00 || n0 == n ) { return h ; } else { p = $F10425 ( n0 , n ) ; h = - ( p * Math . log ( p ) + ( NUM00 - p ) * Math . log ( NUM00 - p ) ) / ln2 ; } return h ; }
private $F806 addtoSelectionArgs $F41327 ( argValue , selectionArgsIn ) { $F806 selectionArgs = selectionArgsIn ; $F24645 ( selectionArgsList ) selectionArgsList . add ( argValue ) ; if ( null != selectionArgsIn ) { for ( final String arg : selectionArgsIn ) $F207 ( selectionArgsList , arg ) } selectionArgs = $F16104 ( selectionArgsList ) ; $F725 ( selectionArgsList ) selectionArgsList = null ; return selectionArgs ; }
public void put ( String sample , String attribute , Object value ) { $F24127 ( sampleOrder , sample ) $F24127 ( attributeOrder , attribute ) table . put ( sample , attribute , value ) ; }
public boolean isCompacted $F72 { return compacted ; }
protected void center $F72 { Container parent = getParent ( ) ; final Dimension size = getPreferredSize ( ) ; setBounds ( ( parent . getWidth ( ) - size . width ) / NUM00 , ( parent . getHeight ( ) - size . height ) / NUM00 , size . width , size . height ) ; }
public boolean isCardDismissible ( String tag ) $F298 ( mDismissibleCards , tag )
public void write $F233176 ( off , len ) throws IOException $F21537 ( se , cbuf , off , len )
public boolean validate ( String telephone ) { char aChar ; $F7542 ( buf , telephone ) for ( $F1088 ( aIndex , buf ) ) { aChar = buf . charAt ( aIndex ) ; if ( ! Character . isSpaceChar ( aChar ) ) { if ( ! Character . isDigit ( aChar ) && ! isValidTelephoneChars ( aChar ) ) { return _BOOL ; } } } return _BOOL ; }
public static void unpack ( $F530 object , String key , Object value ) { $F83044 ( split , key ) HashMap lobj = object ; for ( $F1139 ( cur , split ) ) { String current = split [ cur ] ; if ( ! ( lobj . containsKey ( current ) && lobj . get ( current ) instanceof HashMap ) ) { lobj . put ( current , $F532 ) ; } if $F74408 ( cur , split ) $F1717 ( lobj , current , value ) else lobj = ( HashMap ) lobj . get ( current ) ; } }
public void removeListener ( DNSListener listener ) $F106 ( _listeners , listener )
static $F2689 parseResourcePathParams ( String resourcePath ) { $F275 ( matcher , PARAM_URL_REGEX , resourcePath ) $F116112 ( patterns ) while $F281 ( matcher ) { patterns . add ( matcher . group ( NUM00 ) ) ; } return patterns ; }
$F1 public void close $F72 throws IOException { if ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { if ( handshake_started ) { alertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; try { output . write ( alertProtocol . wrap ( ) ) ; } $F18071 alertProtocol . setProcessed ( ) ; } shutdown ( ) ; closeTransportLayer ( ) ; socket_was_closed = _BOOL ; } }
public JRangeSlider ( BoundedRangeModel model , int orientation , int direction ) { super . setFocusable ( _BOOL ) ; this . model = model ; this . orientation = orientation ; this . direction = direction ; setForeground ( Color . LIGHT_GRAY ) ; this . lstnr = createListener ( ) ; model . addChangeListener ( lstnr ) ; addMouseListener ( this ) ; addMouseMotionListener ( this ) ; addKeyListener ( this ) ; }
public static boolean isAutoNew ( Properties ctx ) { $F19273 ( ctx ) String s = getContext ( ctx , NUM00 ) ; if $F85112 ( s ) return _BOOL ; return _BOOL ; }
public boolean canRead ( String path ) { try { ZipEntry entry = getZipEntry ( path ) ; return entry != null && $F4925 ( entry ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return _BOOL ; } }
public static $F2469 andI ( $F2469 v , $F2469 o , int off ) { if ( off == NUM00 ) $F8587 ( andI , v , o ) if ( off < NUM00 ) $F39976 final int shiftWords = off > > > LONG_LOG2_SIZE ; final int shiftBits = off & LONG_LOG2_MASK ; if ( shiftWords >= v . length ) { return v ; } if ( shiftBits == NUM00 ) { final int end = Math . min ( v . length , o . length + shiftWords ) ; for ( int i = shiftWords ; i < end ; i ++ ) { v [ i ] &= o [ i - shiftWords ] ; } Arrays . fill ( v , NUM00 , shiftWords , NUM00 ) ; return v ; } final int unshiftBits = Long . SIZE - shiftBits ; final int end = Math . min ( v . length , o . length + shiftWords ) - NUM00 ; Arrays . fill ( v , end + NUM00 , v . length , NUM00 ) ; for ( int i = end ; i > shiftWords ; i -- ) { final int src = i - shiftWords ; v [ i ] &= ( o [ src ] < < shiftBits ) | ( o [ src - NUM00 ] > > > unshiftBits ) ; } v [ shiftWords ] &= o [ NUM00 ] < < shiftBits ; Arrays . fill ( v , NUM00 , shiftWords , NUM00 ) ; return v ; }
$F53919 ( widthSize , mode , initResourcesIfNecessary , itemsLayout , LayoutParams , MeasureSpec , width , PADDING , Math , getSuggestedMinimumWidth )
public boolean equals ( Object p_test ) { if ( p_test instanceof URI ) { URI testURI = ( URI ) p_test ; if ( $F29474 ( m_scheme , testURI ) && $F29474 ( m_userinfo , testURI ) && $F29474 ( m_host , testURI ) && m_port == testURI . m_port && $F29474 ( m_path , testURI ) && $F29474 ( m_queryString , testURI ) && $F29474 ( m_fragment , testURI ) ) { return _BOOL ; } } return _BOOL ; }
public void testCase5 $F72 { $F15139 $F10679 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public ISAACRandom $F72 { setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ; }
public static boolean isMD5String ( final String string ) { $F1832 ( Preconditions , string ) return $F1277 ( string ) && isHexString ( string ) ; }
public synchronized void waitForSubmittedTasks $F72 throws InterruptedException { while $F15855 ( currentTaskCount ) $F5795 ( waitForSingleTask ) }
private int scanToken ( int startPos ) { int position = startPos ; while ( position < maxPosition ) { if ( ! hasSurrogates ) { $F1280 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && $F358955 ( delimiters , c ) ) $F597 position ++ ; } else { $F207694 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && isDelimiter ( c ) ) $F597 position += Character . charCount ( c ) ; } } if ( retDelims && ( startPos == position ) ) { if ( ! hasSurrogates ) { $F1280 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && $F358955 ( delimiters , c ) ) position ++ ; } else { $F207694 ( c , str , position ) if ( ( c <= maxDelimCodePoint ) && isDelimiter ( c ) ) position += Character . charCount ( c ) ; } } return position ; }
public void zoomAt $F12359 ( x , y , z , zoomValue ) { $F1986 diff = { targetXoff - x , targetYoff - y , z - targetZoff } ; double length = Math . sqrt ( $F43608 ( diff ) + $F43608 ( diff ) + $F43608 ( diff ) ) ; $F85331 ( length ) $F1986 normalized = { diff [ NUM00 ] / length , diff [ NUM00 ] / length , diff [ NUM00 ] / length } ; double percent = zoomValue / normalized [ NUM00 ] ; moveToPosition ( - ( float ) ( targetXoff + normalized [ NUM00 ] * percent ) , - ( float ) ( targetYoff + normalized [ NUM00 ] * percent ) ) ; zoomToCamera ( ( float ) ( targetZoff + normalized [ NUM00 ] * percent ) ) ; }
private static int stringToHash ( String s ) { $F1749 ( len , s ) int hash2 = NUM00 ; int hash = len ; hash <<= NUM00 ; hash += s . charAt ( NUM00 ) - NUM00 ; int j = len ; for ( int i = NUM00 ; i < NUM00 && j > NUM00 ; i ++ ) { j -- ; hash <<= NUM00 ; hash += s . charAt ( j ) - NUM00 ; hash2 <<= NUM00 ; hash2 += s . charAt ( i ) - NUM00 ; } return hash ^ hash2 ; }
public void registerDenseFeatures ( ArrayList < FeatureFunction > featureFunctions ) { for ( FeatureFunction feature : featureFunctions ) { $F5 names = feature . reportDenseFeatures ( denseFeatures . size ( ) ) ; for ( String name : names ) { DENSE_FEATURE_NAMES . add ( name ) ; $F3761 ( denseFeatures , getSparse , name ) sparseFeatures . remove ( name ) ; } } }
private void addFlag ( $F20109 ( args ) , final String argName , final boolean value ) { $F46023 ( value , args , argName ) }
public static PrivateKey load ( InputStream is ) throws IOException , CryptoException { $F96 pvk = ReadUtil . readFully ( is ) ; $F23500 ( bb , ByteBuffer , pvk ) $F31290 ( bb , ByteOrder ) long keyType = readReservedMagicKeyType ( bb ) ; long encrypted = UnsignedUtil . getInt ( bb ) ; if ( encrypted != PVK_UNENCRYPTED ) { throw new PrivateKeyEncryptedException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( encrypted ) , Long . toHexString ( PVK_UNENCRYPTED ) ) ) ; } long saltLength = UnsignedUtil . getInt ( bb ) ; if ( saltLength != UNENCRYPTED_SALT_LENGTH ) { throw new CryptoException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( saltLength ) , Long . toHexString ( UNENCRYPTED_SALT_LENGTH ) ) ) ; } long keyLength = UnsignedUtil . getInt ( bb ) ; readPrivateKeyBlobHeader ( bb , keyType ) ; $F159436 ( privateKeyBlob , bb ) bb . get ( privateKeyBlob ) ; if ( keyLength != ( privateKeyBlob . length + BLOB_HEADER_LENGTH ) ) { throw new CryptoException ( MessageFormat . format ( res . getString ( NUM00 ) , Long . toHexString ( keyLength ) , Long . toHexString ( privateKeyBlob . length + BLOB_HEADER_LENGTH ) ) ) ; } return blobToPrivateKey ( privateKeyBlob ) ; }
public static $F96 keyGenPrivate $F97 ( randomBytes ) throws NoSuchAlgorithmException , DigestException { if $F8830 ( randomBytes ) $F11389 $F5348 ( digest , MessageDigest ) digest . digest ( randomBytes , NUM00 , randomBytes . length ) ; $F96 privateKey = digest . digest ( ) ; privateKey [ NUM00 ] &= NUM00 ; privateKey [ NUM00 ] &= NUM00 ; privateKey [ NUM00 ] |= NUM00 ; return privateKey ; }
private boolean isCheckpointTableExists ( Connection conn ) { Statement st = null ; ResultSet rs = null ; try { $F2715 ( st , conn ) rs = st . executeQuery ( chkTblExistsSql ) ; return _BOOL ; } catch ( SQLException ignored ) { return _BOOL ; } finally { U . close ( rs , log ) ; U . close ( st , log ) ; } }
public FunctionTableModel $F72 { columnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; columnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; columnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; columnList . add ( Localisation . getString ( FunctionTableModel . class , NUM00 ) ) ; }
private NewCookie createWsCookie ( String cookieName , String token , boolean setMaxAge , String userAgent ) { String ieExpires = NUM00 ; int maxAge = setMaxAge ? _tokenManager . getMaxTokenLifeTimeInSecs ( ) : NewCookie . DEFAULT_MAX_AGE ; if ( setMaxAge && StringUtils . contains ( userAgent , NUM00 ) ) { ieExpires = NUM00 + getExpiredTimeGMT ( maxAge ) ; $F586 ( _log , ieExpires ) } if $F1032 ( token ) { return new NewCookie ( cookieName , token + NUM00 + ieExpires , null , null , null , maxAge , _BOOL ) ; } $F1274 }
protected void initView $F72 { p . setFakeBoldText ( _BOOL ) ; p . setAntiAlias ( _BOOL ) ; p . setTextSize ( MINI_DAY1BER_TEXT_SIZE ) ; $F5597 ( p , Style ) $F5590 ( mMonthNumPaint ) mMonthNumPaint . setFakeBoldText ( _BOOL ) ; mMonthNumPaint . setAntiAlias ( _BOOL ) ; mMonthNumPaint . setTextSize ( MINI_DAY1BER_TEXT_SIZE ) ; mMonthNumPaint . setColor ( mFocusMonthColor ) ; $F5597 ( mMonthNumPaint , Style ) $F5595 ( mMonthNumPaint , Align ) }
$F6802 ( esd , connectionAllowed )
ScheduledFutureTask ( Runnable r , V result , long ns , long period ) { super ( r , result ) ; this . time = ns ; this . period = period ; $F56332 ( this , sequencer ) }
public boolean verify ( X509Certificate cert , Provider sigProvider ) throws NoSuchAlgorithmException , CertificateExpiredException , CertificateNotYetValidException , CMSException { Time signingTime = getSigningTime ( ) ; if ( signingTime != null ) { cert . checkValidity ( signingTime . getDate ( ) ) ; } return doVerify ( cert . getPublicKey ( ) , sigProvider ) ; }
public GeoMark analyse ( final String text , final $F806 tags , final int maxlength , final String salt ) { GeoLocation loc = geocode ( text , tags , maxlength ) ; if ( loc != null ) return new GeoMark ( loc , salt ) ; return reverse_geocode ( text ) ; }
public void findAndInit ( Iterator it ) $F7686 ( it , findAndInit )
public void test_SelectOrderBy $F72 throws SQLException { String selectQuery = NUM00 + DatabaseCreator . ORDERS_TABLE + NUM00 ; $F15328 ( result , statement , selectQuery ) $F15277 ( values ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) $F203638 ( values , Integer ) int index = NUM00 ; while $F1682 ( result ) { Integer onum = result . getInt ( NUM00 ) ; assertTrue ( NUM00 , values . contains ( onum ) ) ; assertEquals ( NUM00 , index , values . indexOf ( onum ) ) ; index ++ ; } $F59 ( result ) }
private static String formatTo2Digits ( String str ) { if $F3599 ( str ) $F21679 ( str ) return str ; }
protected static String quoteSQL ( Object data , int type ) throws SQLException { $F4158 ( data ) switch ( type ) { case Types . BIT : case Types . BOOLEAN : case Types . INTEGER : case Types . BIGINT : case Types . DECIMAL : case Types . DOUBLE : case Types . FLOAT : case Types . NUMERIC : case Types . REAL : case Types . SMALLINT : case Types . TINYINT : $F92 ( data ) case Types . DATE : case Types . TIME : case Types . TIMESTAMP : case Types . LONGVARCHAR : case Types . CHAR : case Types . VARCHAR : $F17718 ( quoteString , data ) case Types . VARBINARY : case Types . LONGVARBINARY : case Types . BINARY : if ( data instanceof UUID ) { return $F369 ( data ) ; } return NUM00 + StringUtils . convertBytesToHex ( $F2457 ( data ) ) + NUM00 ; case Types . CLOB : case Types . JAVA_OBJECT : case Types . OTHER : case Types . BLOB : case Types . STRUCT : case Types . REF : case Types . NULL : case Types . ARRAY : case Types . DATALINK : case Types . DISTINCT : throw throwException ( NUM00 + type ) ; $F1267 $F1278 } }
public void addFooterView $F123554 ( v , data , isSelectable ) { $F123559 ( info ) info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mObserver != null ) { mObserver . onChanged ( ) ; } }
public static int calculateDigitCount ( long value ) { if ( value < NUM00 ) { if ( value != Long . MIN_VALUE ) { return calculateDigitCount ( - value ) + NUM00 ; } else $F1083 } return ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( value < NUM00 ? NUM00 : ( ( int ) $F159551 ( Math , value , LOG_10 ) + NUM00 ) ) ) ) ) ; }
public static Byte [ ] convertDate ( String date ) { $F70316 ( st , date ) $F8095 ( sdate , st ) $F8095 ( stime , st ) $F49888 ( st , sdate ) $F8095 ( year , st ) int iyear = NUM00 ; try $F37473 ( iyear , Integer , year ) catch ( NumberFormatException ex ) $F142113 ( debug , year ) byte yrlow = $F8046 ( iyear ) ; byte yrhigh = ( byte ) ( $F84702 ( iyear ) & NUM00 ) ; $F8095 ( month , st ) $F8095 ( day , st ) $F49888 ( st , stime ) $F8095 ( hour , st ) $F8095 ( min , st ) $F8095 ( sec , st ) Byte bz = Byte . valueOf ( $F19905 ) ; Byte byrhi = bz ; Byte byrlo = bz ; Byte bmo = bz ; Byte bdy = bz ; Byte bhr = bz ; Byte bmn = bz ; Byte bsc = bz ; try { byrhi = new Byte ( yrhigh ) ; byrlo = new Byte ( yrlow ) ; bmo = new Byte ( month ) ; bdy = new Byte ( day ) ; bhr = new Byte ( hour ) ; bmn = new Byte ( min ) ; bsc = new Byte ( sec ) ; } catch ( NumberFormatException ex ) { debug . error ( NUM00 + NUM00 + sdate + NUM00 + stime ) ; } Byte [ ] ret = new Byte $F380 ; ret [ NUM00 ] = byrhi ; ret [ NUM00 ] = byrlo ; ret [ NUM00 ] = bmo ; ret [ NUM00 ] = bdy ; ret [ NUM00 ] = bhr ; ret [ NUM00 ] = bmn ; ret [ NUM00 ] = bsc ; ret [ NUM00 ] = bz ; return ret ; }
private void parseAndAdd ( String line , BufferedReader reader ) throws IOException { try { $F17727 ( tokenizer , line ) $F8095 ( tag , tokenizer ) if $F3057 ( tag ) { $F188732 ( continuityWeight , Integer , tokenizer ) } else if $F3057 ( tag ) { $F188732 ( optimalCoupling , Integer , tokenizer ) } else if $F3057 ( tag ) { $F188732 ( extendSelections , Integer , tokenizer ) } else if $F3057 ( tag ) { $F188732 ( joinMethod , Integer , tokenizer ) } else if $F3057 ( tag ) { $F24697 ( numWeights , Integer , tokenizer ) $F3936 ( joinWeights , numWeights ) for ( $F119 ( i , numWeights ) ) { joinWeights [ i ] = Integer . parseInt ( tokenizer . nextToken ( ) ) ; } joinWeightShift = calcJoinWeightShift ( joinWeights ) ; } else if $F3057 ( tag ) { $F8095 ( name , tokenizer ) if $F3057 ( name ) { sts = new SampleSet ( tokenizer , reader ) ; } else { mcep = new SampleSet ( tokenizer , reader ) ; } } else if $F3057 ( tag ) { $F24697 ( type , Integer , tokenizer ) $F24697 ( phone , Integer , tokenizer ) $F24697 ( start , Integer , tokenizer ) $F24697 ( end , Integer , tokenizer ) $F24697 ( prev , Integer , tokenizer ) $F24697 ( next , Integer , tokenizer ) DatabaseClusterUnit unit = new DatabaseClusterUnit ( type , phone , start , end , prev , next ) ; unitList . add ( unit ) ; } else if $F3057 ( tag ) { $F8095 ( name , tokenizer ) $F24697 ( nodes , Integer , tokenizer ) CART cart = new CARTImpl ( reader , nodes ) ; cartMap . put ( name , cart ) ; $F13265 ( defaultCart , cart ) } else if $F3057 ( tag ) { $F8095 ( name , tokenizer ) $F24697 ( start , Integer , tokenizer ) $F24697 ( count , Integer , tokenizer ) UnitType unitType = new UnitType ( name , start , count ) ; unitTypesList . add ( unitType ) ; } else { throw new Error $F6486 ( tag , line ) ; } } catch ( NoSuchElementException nse ) $F220112 ( nse ) catch ( NumberFormatException nfe ) { throw new Error ( $F6165 ( line , nfe ) ) ; } }
public String byteStringNoSemicolon $F72 { $F83 ( retval ) try { while ( _BOOL ) { char next = lookAhead ( NUM00 ) ; if $F120925 ( next ) $F5153 else { consume ( NUM00 ) ; retval . append ( next ) ; } } } catch ( ParseException ex ) $F2495 ( retval ) $F92 ( retval ) }
public void testNegNegFirstLonger $F72 { $F37335 $F37339 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public static void println ( double x ) $F18992 ( out , x )
public boolean subscribeTopic ( $F4170 Context context , $F4170 $F806 newTopics ) { $F88859 ( initialized , init , context ) $F41350 ( newTopics , _BOOL ) if ( null == topics ) { $F9404 ( topics ) } for ( String topic : newTopics ) { $F16222 ( topics , topic , _BOOL ) topics . add ( topic ) ; } saveSubscibedTopics ( context ) ; Intent intent = new Intent ( context , RegistrationIntentService . class ) ; intent . setAction ( RegistrationIntentService . ACTION_SUBSCRIBE ) ; intent . putExtra ( RegistrationIntentService . EXTRA_TOPIC_LIST , newTopics ) ; context . startService ( intent ) ; return _BOOL ; }
public static String serialise ( Node node ) { try { $F2218 ( registry , DOMImplementationRegistry ) DOMImplementationLS lsImpl = ( DOMImplementationLS ) registry . getDOMImplementation ( NUM00 ) ; LSSerializer serializer = lsImpl . createLSSerializer ( ) ; return serializer . writeToString ( node ) ; } catch ( Exception e ) { $F35577 ( log , e ) $F1278 } }
public static boolean isOnSegment ( Geo a , Geo b , Geo i ) { return ( ( a . distance ( i ) < a . distance ( b ) ) && ( b . distance ( i ) < b . distance ( a ) ) ) ; }
public void addExtensionPoint ( ExtensionPoint extensionPoint ) $F207 ( fExtensionPoints , extensionPoint )
private List addNodeToList ( int startIndexForNode , int endIndexForNode ) { $F19151 ( localvmList ) for ( int i = startIndexForNode ; i < endIndexForNode ; i ++ ) $F24617 ( localvmList , vm , i ) return localvmList ; }
public void addMetaMethod ( MetaMethod method ) { if ( isInitialized ( ) ) $F1666 ( method ) final CachedClass declaringClass = method . getDeclaringClass ( ) ; addMetaMethodToIndex ( method , metaMethodIndex . getHeader ( declaringClass . getTheClass ( ) ) ) ; }
public void waitForEvent ( long timeout ) { $F686 ( thread , Thread ) Semaphore semaphore = _semaphores . get ( thread ) ; if ( semaphore == null ) { semaphore = new Semaphore ( NUM00 , _BOOL ) ; semaphore . drainPermits ( ) ; _semaphores . putIfAbsent ( thread , semaphore ) ; } semaphore = _semaphores . get ( thread ) ; try { semaphore . tryAcquire ( timeout , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException exception ) { logger . log ( Level . FINER , NUM00 , exception ) ; } }
public String stringValue $F72 { Object cv = Assert . checkNonNull ( constValue ( ) ) ; $F92 ( cv ) }
public Date parseDate ( String str ) { try $F57093 ( dateFormat , str ) catch ( $F105392 e ) $F9491 ( e ) }
default int hash32 ( String value ) $F26006 ( hash32 , value )
public Name addAll ( Name suffix ) throws InvalidNameException { return addAll ( size ( ) , suffix ) ; }
public final InputStream asInputStream $F72 throws UnknownResourceException $F2905 ( toInputStream )
private static double euclideanNorm ( double vector [ ] ) { int n = vector . length ; $F96078 ( n ) if ( n == NUM00 ) { return Math . abs ( vector [ NUM00 ] ) ; } double scale = NUM00 ; double sum = NUM00 ; for ( $F119 ( i , n ) ) { if ( vector [ i ] != NUM00 ) { double abs = Math . abs ( vector [ i ] ) ; if ( scale < abs ) { double t = scale / abs ; sum = NUM00 + sum * ( t * t ) ; scale = abs ; } else { double t = abs / scale ; sum += t * t ; } } } return scale * Math . sqrt ( sum ) ; }
public static FileDescriptor createSocket $F72 throws IOException { if ( ! isSupported ) $F5788 int fdVal = create0 ( ) ; FileDescriptor $F23044 ( fd ) ; fdAccess . set ( fd , fdVal ) ; return fd ; }
public static Grammar doTheMerges ( Grammar grammar , Lexicon lexicon , boolean [ ] [ ] [ ] mergeThesePairs , $F28974 ( mergeWeights ) ) { $F5078 numSubStatesArray = grammar . numSubStates ; $F5078 newNumSubStatesArray = grammar . numSubStates ; Grammar newGrammar = null ; while ( _BOOL ) { boolean somethingToMerge = _BOOL ; for ( $F1139 ( tag , numSubStatesArray ) ) { for ( $F66767 ( i , newNumSubStatesArray , tag ) ) { for ( $F66767 ( j , newNumSubStatesArray , tag ) ) { somethingToMerge = somethingToMerge || mergeThesePairs [ tag ] [ i ] [ j ] ; } } } $F91251 ( somethingToMerge ) boolean [ ] [ ] [ ] mergeThisIteration = new boolean [ newNumSubStatesArray . length ] [ ] [ ] ; for ( $F1139 ( tag , numSubStatesArray ) ) { mergeThisIteration [ tag ] = new boolean [ mergeThesePairs [ tag ] . length ] [ mergeThesePairs [ tag ] . length ] ; for ( $F179379 ( i , mergeThesePairs , tag ) ) { for ( $F179379 ( j , mergeThesePairs , tag ) ) { mergeThisIteration [ tag ] [ i ] [ j ] = mergeThesePairs [ tag ] [ i ] [ j ] ; } } } for ( $F1139 ( tag , numSubStatesArray ) ) { $F8748 alreadyDecidedToMerge = new boolean [ mergeThesePairs [ tag ] . length ] ; for ( $F179379 ( i , mergeThesePairs , tag ) ) { for ( $F179379 ( j , mergeThesePairs , tag ) ) { if ( alreadyDecidedToMerge [ i ] || alreadyDecidedToMerge [ j ] ) mergeThisIteration [ tag ] [ i ] [ j ] = _BOOL ; alreadyDecidedToMerge [ i ] = alreadyDecidedToMerge [ i ] || mergeThesePairs [ tag ] [ i ] [ j ] ; alreadyDecidedToMerge [ j ] = alreadyDecidedToMerge [ j ] || mergeThesePairs [ tag ] [ i ] [ j ] ; } } } for ( $F1139 ( tag , numSubStatesArray ) ) { for ( $F179379 ( i , mergeThesePairs , tag ) ) { for ( $F179379 ( j , mergeThesePairs , tag ) ) { mergeThesePairs [ tag ] [ i ] [ j ] = mergeThesePairs [ tag ] [ i ] [ j ] && ! mergeThisIteration [ tag ] [ i ] [ j ] ; } } } newGrammar = grammar . mergeStates ( mergeThisIteration , mergeWeights ) ; lexicon . mergeStates ( mergeThisIteration , mergeWeights ) ; grammar . fixMergeWeightsEtc ( mergeThesePairs , mergeWeights , mergeThisIteration ) ; grammar = newGrammar ; newNumSubStatesArray = grammar . numSubStates ; } grammar . makeCRArrays ( ) ; return grammar ; }
private static void extractFile ( ZipInputStream zipIn , String filePath ) throws IOException { BufferedOutputStream $F112784 ( bos , filePath ) ; $F2175 ( bytesIn , BUFFER_SIZE ) int read = NUM00 ; while $F96840 ( read , zipIn , bytesIn ) $F29756 ( bos , bytesIn , read ) $F59 ( bos ) }
public static final String squareToString ( int square ) { $F83 ( ret ) int x = Position . getX ( square ) ; int y = Position . getY ( square ) ; $F159538 ( ret , x ) $F159538 ( ret , y ) $F92 ( ret ) }
protected void drawVerticalItem ( Graphics2D g2 , CategoryItemRendererState state , Rectangle2D dataArea , CategoryPlot plot , CategoryAxis domainAxis , ValueAxis rangeAxis , StatisticalCategoryDataset dataset , int visibleRow , int row , int column ) { double rectX = calculateBarW0 ( plot , PlotOrientation . VERTICAL , dataArea , domainAxis , state , visibleRow , column ) ; Number meanValue = dataset . getMeanValue ( row , column ) ; $F2329 ( meanValue ) $F50466 ( value , meanValue ) double base = NUM00 ; double lclip = getLowerClip ( ) ; double uclip = getUpperClip ( ) ; if ( uclip <= NUM00 ) { if ( value >= uclip ) $F932 base = uclip ; $F78883 ( value , lclip ) } else if ( lclip <= NUM00 ) { if ( value >= uclip ) { value = uclip ; } else { $F78883 ( value , lclip ) } } else { $F152990 ( value , lclip ) base = getLowerClip ( ) ; $F33288 ( value , uclip ) } $F82906 ( yAxisLocation , plot ) $F31931 ( transY1 , rangeAxis , base , dataArea , yAxisLocation ) $F31931 ( transY2 , rangeAxis , value , dataArea , yAxisLocation ) $F59772 ( rectY , Math , transY2 , transY1 ) double rectWidth = state . getBarWidth ( ) ; $F14050 ( rectHeight , Math , transY2 , transY1 ) Rectangle2D bar = $F152596 ( rectX , rectY , rectWidth , rectHeight ) ; Paint itemPaint = getItemPaint ( row , column ) ; GradientPaintTransformer t = getGradientPaintTransformer ( ) ; if ( t != null && itemPaint instanceof GradientPaint ) { itemPaint = t . transform ( ( GradientPaint ) itemPaint , bar ) ; } g2 . setPaint ( itemPaint ) ; g2 . fill ( bar ) ; if ( isDrawBarOutline ( ) && state . getBarWidth ( ) > BAR_OUTLINE_WIDTH_THRESHOLD ) { Stroke stroke = getItemOutlineStroke ( row , column ) ; Paint paint = getItemOutlinePaint ( row , column ) ; if ( stroke != null && paint != null ) $F93649 ( g2 , stroke , paint , bar ) } Number n = dataset . getStdDevValue ( row , column ) ; if ( n != null ) { $F50466 ( valueDelta , n ) double highVal = rangeAxis . valueToJava2D ( meanValue . doubleValue ( ) + valueDelta , dataArea , yAxisLocation ) ; double lowVal = rangeAxis . valueToJava2D ( meanValue . doubleValue ( ) - valueDelta , dataArea , yAxisLocation ) ; if ( this . errorIndicatorPaint != null ) { g2 . setPaint ( this . errorIndicatorPaint ) ; } else $F98606 ( g2 , getItemOutlinePaint , row , column ) if ( this . errorIndicatorStroke != null ) { g2 . setStroke ( this . errorIndicatorStroke ) ; } else { $F98595 ( g2 , getItemOutlineStroke , row , column ) } Line2D line ; line = new $F69931 ( rectX + rectWidth / NUM00 , lowVal , rectX + rectWidth / NUM00 , highVal ) ; g2 . draw ( line ) ; line = new $F69931 ( rectX + rectWidth / NUM00 - NUM00 , highVal , rectX + rectWidth / NUM00 + NUM00 , highVal ) ; g2 . draw ( line ) ; line = new $F69931 ( rectX + rectWidth / NUM00 - NUM00 , lowVal , rectX + rectWidth / NUM00 + NUM00 , lowVal ) ; g2 . draw ( line ) ; } CategoryItemLabelGenerator generator = getItemLabelGenerator ( row , column ) ; if ( generator != null && isItemLabelVisible ( row , column ) ) $F98616 ( drawItemLabel , g2 , dataset , row , column , plot , generator , bar , value ) $F98625 ( entities , state ) $F98626 ( entities , addItemEntity , dataset , row , column , bar ) }
public static boolean hasValidCover ( IGame game , Coords pos , int elevation ) { if ( ( pos == null ) || ( elevation > NUM00 ) ) { return _BOOL ; } boolean hasMovedEntity = _BOOL ; for ( Entity e : game . getEntitiesVector ( pos ) ) { if ( e . isDone ( ) && ! ( e instanceof Infantry ) && ( e . getElevation ( ) == elevation ) ) $F3468 ( hasMovedEntity , _BOOL ) } if ( ! hasMovedEntity ) { Enumeration $F37552 wrecks = game . getWreckedEntities ( ) ; while $F1444 ( wrecks ) { Entity e = wrecks . nextElement ( ) ; if ( pos . equals ( e . getPosition ( ) ) && ! ( e instanceof Infantry ) ) { hasMovedEntity = _BOOL ; } } } return hasMovedEntity ; }
public static $F19578 computeTangentsThroughPoint ( Coordinate circleCenter , double radius , Coordinate point ) { $F19578 ret = new Coordinate $F380 ; double dx = $F27158 ( point , circleCenter ) / NUM00 ; double dy = $F27159 ( point , circleCenter ) / NUM00 ; $F25559 ( d , Math , dx , dy ) double a = ( radius * radius ) / ( NUM00 * d ) ; double x2 = circleCenter . x + ( dx * a / d ) ; double y2 = circleCenter . y + ( dy * a / d ) ; double h = Math . sqrt ( radius * radius - a * a ) ; double rx = - dy * ( h / d ) ; double ry = dx * ( h / d ) ; double xi = x2 + rx ; double yi = y2 + ry ; double xiPrime = x2 - rx ; double yiPrime = y2 - ry ; ret [ NUM00 ] = new Coordinate ( point ) ; ret [ NUM00 ] = new Coordinate ( xi , yi ) ; ret [ NUM00 ] = new Coordinate ( xiPrime , yiPrime ) ; return ret ; }
public void addGroup ( GroupConfigInterface subGroup ) $F207 ( subGroupList , subGroup )
public void startScanning ( final BeaconServiceConnection serviceConnection ) { final Cursor cursor = mDatabaseHelper . getAllRegions ( ) ; while $F12260 ( cursor ) { final UUID uuid = UUID . fromString ( cursor . getString ( NUM00 ) ) ; final int major = cursor . getInt ( NUM00 ) ; final int minor = cursor . getInt ( NUM00 ) ; final int event = cursor . getInt ( NUM00 ) ; serviceConnection . startRangingBeaconsInRegion ( BeaconsFragment . BEACON_COMPANY_ID , uuid , major , minor , this ) ; if ( event == BeaconContract . EVENT_IN_RANGE || event == BeaconContract . EVENT_OUT_OF_RANGE ) serviceConnection . startMonitoringForRegion ( BeaconsFragment . BEACON_COMPANY_ID , uuid , major , minor , this ) ; } }
public void testDivideRoundHalfDownNeg1 $F72 $F148774 ( a , aScale , b , bScale , c , resScale , aNumber , bNumber , result , BigDecimal , assertEquals )
public static boolean isHeader ( Header hdr ) { return hdr . getBooleanValue ( ZIMAGE , _BOOL ) ; }
public static InfoRegister createFolder ( User user , Integer bookId , List atts , List inter , Map documents , String entidad , boolean consolidacion ) throws ValidationException , SecurityException , BookException , SessionException , TecDocException , ParseException , AttributesException { InfoRegister result = new InfoRegister $F72 ; $F153364 ( sessionID ) try { sessionID = Login . login ( user , entidad ) ; setOfficeUserRegister ( entidad , sessionID , atts ) ; BookSession . openBook ( sessionID , bookId , entidad ) ; Integer launchDistOutRegister = RegisterServicesUtil . getInvesConfActions ( entidad ) ; RegisterServicesUtil . canCreateFolder ( sessionID , bookId , documents , user , atts , entidad , consolidacion ) ; AxSf axsfQ = BookSession . getFormFormat ( sessionID , bookId , entidad ) ; FieldFormat fieldFormat = RegisterServicesUtil . getFieldFormat ( sessionID , bookId ) ; Map translatedIds = RegisterServicesUtil . getFieldsWithSustitute ( atts , axsfQ , sessionID , bookId , entidad ) ; AxSf newAxSF = RegisterServicesUtil . initInOrOutFolder ( user , axsfQ ) ; newAxSF = RegisterServicesUtil . completeFolder ( translatedIds , axsfQ , newAxSF , user . getLocale ( ) , atts , fieldFormat , consolidacion ) ; FolderDataSession data = Register . createNewFolder ( sessionID , bookId , newAxSF , inter , documents , launchDistOutRegister , user . getLocale ( ) , entidad , consolidacion ) ; result = ConsultRegister . consultRegisterInfo ( bookId , data . getAxsfNew ( ) , data . getNewRegisterID ( ) , data . getScrofic ( ) , data . getUserName ( ) , user . getLocale ( ) ) ; } finally { BookSession . closeBook ( sessionID , bookId ) ; SecuritySession . logout ( sessionID , entidad ) ; } return result ; }
$F136015 ( fInputStream )
private void handleSubscriptionError ( AzureAllocationContext ctx , String namespace , Throwable e ) { if ( e instanceof CloudException ) { CloudException ce = ( CloudException ) e ; CloudError body = ce . getBody ( ) ; if ( body != null ) { String code = body . getCode ( ) ; if $F1238 ( MISSING_SUBSCRIPTION_CODE , code ) $F47994 ( registerSubscription , ctx , namespace ) } } handleError ( ctx , e ) ; }
public boolean hasShutdownHook ( Runnable shutdownHook ) $F298 ( hooks , shutdownHook )
$F1 public void endProcessSubTokens $F72 { if $F5973 ( skey ) { map . put ( skey , sval ) ; skey = NUM00 ; sval = NUM00 ; } }
private void heapifyDown ( $F62936 cur ) { final int stop = size > > > NUM00 ; int twopos = NUM00 ; while ( twopos < stop ) { int $F76469 ( bestchild , twopos ) ; $F62936 best = twoheap [ bestchild ] ; final int right = bestchild + NUM00 ; if ( right < size && best . compareTo ( twoheap [ right ] ) > NUM00 ) { bestchild = right ; best = twoheap [ right ] ; } if $F348512 ( cur , best ) $F5153 twoheap [ twopos ] = best ; twopos = bestchild ; } twoheap [ twopos ] = cur ; }
public void addFeature ( IFeatureVector fv ) { idxList . addAll ( Ints . asList ( fv . getIndices ( ) ) ) ; valList . addAll ( Floats . asList ( fv . getValues ( ) ) ) ; }
protected void waitForExternalStoreMount $F72 throws Exception { $F139156 ( extStorageState , Environment ) int currentWaitTime = NUM00 ; while ( ! extStorageState . equals ( Environment . MEDIA_MOUNTED ) ) { $F1594 ( Log , LOG_TAG ) currentWaitTime = timeoutWait ( currentWaitTime , DEFAULT_WAIT_POLL_TIME , DEFAULT_MAX_WAIT_TIME , NUM00 ) ; extStorageState = Environment . getExternalStorageState ( ) ; } }
public static DataDisplayTable listGlyphDimensionBounds ( Font font ) { $F64831 ( header ) $F218688 displayAlignment = { Align . Left , Align . Right } ; $F218697 ( table , Arrays , header ) $F218699 ( table , Arrays , displayAlignment ) LocaTable locaTable = FontUtils . getLocaTable ( font ) ; GlyphTable glyfTable = FontUtils . getGlyphTable ( font ) ; int xMin = Integer . MAX_VALUE ; int yMin = Integer . MAX_VALUE ; int xMax = Integer . MIN_VALUE ; int yMax = Integer . MIN_VALUE ; for ( int i = NUM00 ; i < locaTable . numGlyphs ( ) ; i ++ ) { Glyph glyph = glyfTable . glyph ( locaTable . glyphOffset ( i ) , locaTable . glyphLength ( i ) ) ; if $F62004 ( glyph , xMin ) $F57332 ( xMin , glyph ) if $F62004 ( glyph , yMin ) $F57332 ( yMin , glyph ) if $F14791 ( glyph , xMax ) $F57332 ( xMax , glyph ) if $F14791 ( glyph , yMax ) $F57332 ( yMax , glyph ) } table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , xMin ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , xMax ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , yMin ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , yMax ) } ) ) ; return table ; }
private boolean isInThumbRange ( float touchX , double normalizedThumbValue ) { return Math . abs ( touchX - normalizedToScreen ( normalizedThumbValue ) ) <= thumbHalfWidth ; }
public static $F96 str2UnicodeByteArray ( final JBBPByteOrder byteOrder , final String str ) { final $F96 result = new byte [ str . length ( ) < < NUM00 ] ; int index = NUM00 ; for ( $F1088 ( i , str ) ) { final int val = str . charAt ( i ) ; switch ( byteOrder ) { case BIG_ENDIAN : { $F157410 ( result , index , val ) $F11740 ( result , index , val ) } $F597 case LITTLE_ENDIAN : { $F11740 ( result , index , val ) $F157410 ( result , index , val ) } $F597 $F1267 throw new Error ( NUM00 + byteOrder + NUM00 ) ; } } return result ; }
private MethodDef parse_method ( StrTok st ) { String method_name = st . need_word ( ) ; st . need ( NUM00 ) ; $F22547 ( args ) $F8095 ( tok , st ) if ( tok != NUM00 ) { st . pushBack ( ) ; do { tok = st . need_word ( ) ; args . add ( tok ) ; } while ( st . nextToken ( ) == NUM00 ) ; st . pushBack ( ) ; st . need ( NUM00 ) ; } $F24901 targs = new Type $F2313 ( args ) ; for ( $F2277 ( ii , args ) ) { targs [ ii ] = BCELUtil . classname_to_type ( args . get ( ii ) ) ; } return new MethodDef ( method_name , targs ) ; }
private void writeExperiecedAndCausingPersonDelay $F72 { SortedMap < Double , Map < $F141376 , Double > > timeBin2AffectedPerson2Delay = getExperiencedPersonDelay ( NUM00 ) ; SortedMap < Double , Map < $F141376 , Double > > timeBin2CausingPerson2Delay = getCausingPersonDelay ( NUM00 ) ; if $F6887 ( timeBin2AffectedPerson2Delay ) $F11388 Map < $F141376 , Double > affectedperson2Delay = timeBin2AffectedPerson2Delay . get ( simulationEndTime ) ; Map < $F141376 , Double > causedPerson2Delay = timeBin2CausingPerson2Delay . get ( simulationEndTime ) ; BufferedWriter writer = IOUtils . getBufferedWriter ( runDir + NUM00 + pricingScenario + suffixForSoring + NUM00 ) ; try { $F3410 ( writer ) for ( $F141376 id : causedPerson2Delay . keySet ( ) ) { writer . write ( id + NUM00 + pf . getMunichUserGroupFromPersonId ( id ) + NUM00 + affectedperson2Delay . get ( id ) / NUM00 + NUM00 + causedPerson2Delay . get ( id ) / NUM00 + NUM00 ) ; } $F59 ( writer ) } catch ( Exception e ) $F1666 ( e ) }
static List < $F11300 > partition ( final int binCount , final File ... files ) { final $F5237 $F42716 ( sort , Arrays , files ) ; return binThem ( binCount , sort ) ; }
private void calcBitePoint ( int centerX , int centerY , float circleEdgeX , float circleEdgeY , double biteLine , boolean isFirstBite , boolean isRandomBite ) { double bitePercent ; if ( isFirstBite ) { biteX = ( int ) circleEdgeX ; biteY = ( int ) circleEdgeY ; } else { bitePercent = biteRadius / biteLine ; if ( isRandomBite ) { bitePercent *= bitesTakenMap . get ( biteDirection ) ; } else { bitePercent *= ( numBitesForOneDirection - numBitesForOneDirectionLeft ) ; } biteX = DrawUtils . getPointBetweenTwoPoints ( circleEdgeX , centerX , bitePercent ) ; biteY = DrawUtils . getPointBetweenTwoPoints ( circleEdgeY , centerY , bitePercent ) ; } }
private boolean zzRefill $F72 throws $F3258 { $F72981 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , zzPushbackPos ) $F72988 ( zzCurrentPos , zzBuffer , System , newBuffer ) $F7994 ( numRead , zzReader , zzBuffer , zzEndRead ) $F72989 ( numRead , _BOOL , zzEndRead ) }
private void updateBusinessObjectDefinitionEntityDescriptiveInformation ( BusinessObjectDefinitionEntity businessObjectDefinitionEntity , BusinessObjectDefinitionDescriptiveInformationUpdateRequest request ) { $F100328 ( businessObjectDefinitionEntity , request ) businessObjectDefinitionEntity . setDisplayName ( request . getDisplayName ( ) ) ; businessObjectDefinitionDao . saveAndRefresh ( businessObjectDefinitionEntity ) ; }
$F1 public void onDownloadProgress ( DownloadProgressInfo progress ) { mAverageSpeed . setText ( getString ( R . string . kilobytes_per_second , Helpers . getSpeedString ( progress . mCurrentSpeed ) ) ) ; mTimeRemaining . setText ( getString ( R . string . time_remaining , Helpers . getTimeRemaining ( progress . mTimeRemaining ) ) ) ; progress . mOverallTotal = progress . mOverallTotal ; mPB . setMax ( ( int ) ( progress . mOverallTotal > > NUM00 ) ) ; mPB . setProgress ( ( int ) ( progress . mOverallProgress > > NUM00 ) ) ; mProgressPercent . setText ( Long . toString ( progress . mOverallProgress * NUM00 / progress . mOverallTotal ) + NUM00 ) ; mProgressFraction . setText ( Helpers . getDownloadProgressString ( progress . mOverallProgress , progress . mOverallTotal ) ) ; }
static public boolean isSameDay ( Timestamp one , Timestamp two ) { $F13064 ( calOne ) if ( one != null ) $F176384 ( calOne , one ) $F13064 ( calTwo ) if ( two != null ) $F176384 ( calTwo , two ) if ( $F183169 ( calOne , Calendar , calTwo ) && $F21623 ( calOne , Calendar ) == $F21623 ( calTwo , Calendar ) && $F21625 ( calOne , Calendar ) == $F21625 ( calTwo , Calendar ) ) return _BOOL ; return _BOOL ; }
public static void updateAllForFacade ( DataStore dataStore , Iterable < Update > updates ) { updateAllForFacade ( dataStore , updates . iterator ( ) ) ; }
public ArrayFieldVector ( FieldVector $F4203 v1 , FieldVector $F4203 v2 ) throws NullArgumentException { MathUtils . checkNotNull ( v1 ) ; MathUtils . checkNotNull ( v2 ) ; field = v1 . getField ( ) ; final $F10809 v1Data = ( v1 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector $F4203 ) v1 ) . data : v1 . toArray ( ) ; final $F10809 v2Data = ( v2 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector $F4203 ) v2 ) . data : v2 . toArray ( ) ; data = MathArrays . buildArray ( field , v1Data . length + v2Data . length ) ; $F7057 ( System , v1Data , data ) $F11244 ( System , v2Data , data , v1Data ) }
public boolean equals ( Object o ) { if ( o instanceof ServiceConfigManager ) { ServiceConfigManager oscm = ( ServiceConfigManager ) o ; if ( $F142656 ( serviceName , oscm , version ) ) $F3139 ( _BOOL ) } return ( _BOOL ) ; }
public void addItemBoundsListener ( ItemBoundsListener ibl ) { if ( m_bounders == null ) m_bounders = new CopyOnWriteArrayList $F72 ; m_bounders . add ( ibl ) ; }
public static S2CellId fromFaceIJ $F14337 ( face , i , j ) { long n [ ] = { NUM00 , face < < ( POS_BITS - NUM00 ) } ; int bits = ( face & SWAP_MASK ) ; for ( int k = NUM00 ; k >= NUM00 ; -- k ) { bits = getBits ( n , i , j , k , bits ) ; } S2CellId s = new S2CellId ( ( ( $F42449 ( n ) + n [ NUM00 ] ) < < NUM00 ) + NUM00 ) ; return s ; }
public void increaseDpi $F72 { if ( this . currentDpiPos < ( this . dpiSizes . length - NUM00 ) ) { ++ this . currentDpiPos ; } }
StringVector processPREFIX_URLLIST $F17723 ( handler , uri , name , rawName , value ) throws $F2253 { $F17727 ( tokenizer , value ) $F17729 ( nStrings , tokenizer ) $F17731 ( strings , nStrings ) for ( $F119 ( i , nStrings ) ) { $F8095 ( prefix , tokenizer ) String url = handler . getNamespaceForPrefix ( prefix ) ; if ( url != null ) strings . addElement ( url ) ; else throw new $F2253 ( XSLMessages . createMessage ( XSLTErrorResources . ER_CANT_RESOLVE_NSPREFIX , $F8844 ( prefix ) ) ) ; } return strings ; }
$F1 public void write ( DataOutput out ) throws IOException { out . writeLong ( duration ) ; $F75558 ( out , getLength ) for ( $F1139 ( i , coeffs ) ) $F304625 ( out , coeffs , i ) }
private void addSharingProfiles ( Collection < SharingProfile > sharingProfiles ) throws GuacamoleException { for ( SharingProfile sharingProfile : sharingProfiles ) { String primaryConnectionIdentifier = sharingProfile . getPrimaryConnectionIdentifier ( ) ; APIConnection primaryConnection = retrievedConnections . get ( primaryConnectionIdentifier ) ; if ( primaryConnection != null ) { Collection < APISharingProfile > children = primaryConnection . getSharingProfiles ( ) ; if ( children == null ) { children = new ArrayList < APISharingProfile > $F72 ; primaryConnection . setSharingProfiles ( children ) ; } children . add ( new APISharingProfile ( sharingProfile ) ) ; } else logger . debug ( $F38 , sharingProfile . getIdentifier ( ) , primaryConnectionIdentifier ) ; } }
public void failoverCopy ( RPCopyRequestParams copyToFailoverTo ) throws RecoverPointException { String bookmarkName = copyToFailoverTo . getBookmarkName ( ) ; Date apitTime = copyToFailoverTo . getApitTime ( ) ; if ( bookmarkName != null ) $F10090 ( logger , bookmarkName ) else if ( apitTime != null ) { $F209111 ( logger , apitTime ) } else $F22715 ( logger ) RecoverPointImageManagementUtils imageManager = new RecoverPointImageManagementUtils $F72 ; imageManager . enableCopyImage ( functionalAPI , copyToFailoverTo , _BOOL ) ; }
private static void prepareLoggingSystemEnviroment $F72 { System . setProperty ( NUM00 , getLogFolder ( ) ) ; }
public StateAttribute $F97 ( octets ) { super ( octets ) ; state = new String ( octets , NUM00 , octets . length - NUM00 , Charset . forName ( NUM00 ) ) ; }
private static long calcSize $F46828 ( size , skip , limit ) { return size >= NUM00 ? Math . max ( - NUM00 , Math . min ( size - skip , limit ) ) : - NUM00 ; }
public static Collection $F64087 resolveAddresses ( AddressResolver addrRslvr , $F46406 addrs , int port ) throws IgniteSpiException { assert addrRslvr != null ; Collection $F64087 $F9626 ( extAddrs ) ; for ( String addr : addrs ) { InetSocketAddress sockAddr = new InetSocketAddress ( addr , port ) ; if ( ! sockAddr . isUnresolved ( ) ) { Collection $F64087 extAddrs0 = resolveAddress ( addrRslvr , sockAddr ) ; $F97792 ( extAddrs0 , extAddrs ) } } return extAddrs ; }
private double sampleFromGamma ( double k , double theta ) { boolean accept = _BOOL ; if ( k < NUM00 ) { double c = ( NUM00 / k ) ; double d = ( ( NUM00 - k ) * Math . pow ( k , ( k / ( NUM00 - k ) ) ) ) ; double u , v , z , e , x ; do { $F124366 ( u , rng ) $F124366 ( v , rng ) z = - Math . log ( u ) ; e = - Math . log ( v ) ; x = Math . pow ( z , c ) ; if ( ( z + e ) >= ( d + x ) ) { accept = _BOOL ; } } while ( ! accept ) ; return ( x * theta ) ; } else { double b = ( k - Math . log ( NUM00 ) ) ; double c = ( k + Math . sqrt ( NUM00 * k - NUM00 ) ) ; double lam = Math . sqrt ( NUM00 * k - NUM00 ) ; double cheng = ( NUM00 + Math . log ( NUM00 ) ) ; double u , v , x , y , z , r ; do { $F124366 ( u , rng ) $F124366 ( v , rng ) y = ( ( NUM00 / lam ) * Math . log ( v / ( NUM00 - v ) ) ) ; x = ( k * Math . exp ( y ) ) ; z = ( u * v * v ) ; r = ( b + ( c * y ) - x ) ; if ( ( r >= ( ( NUM00 * z ) - cheng ) ) || ( r >= Math . log ( z ) ) ) { accept = _BOOL ; } } while ( ! accept ) ; return ( x * theta ) ; } }
$F1 public $F987 listOptions $F72 { $F20795 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public BlocklyController build $F72 { if ( mViewFactory == null && ( mWorkspaceFragment != null || mTrashFragment != null || mToolboxFragment != null || mToolboxDrawer != null ) ) $F4639 if ( mWorkspaceHelper == null ) { mWorkspaceHelper = new WorkspaceHelper ( mContext ) ; } BlockFactory factory = new BlockFactory ( mContext , null ) ; for ( $F2277 ( i , mBlockDefResources ) ) { try { factory . addBlocks ( mBlockDefResources . get ( i ) ) ; } catch ( Throwable e ) { $F725 ( factory ) throw e ; } } for ( $F2277 ( i , mBlockDefAssets ) ) { $F1729 ( assetPath , mBlockDefAssets , i ) try { factory . addBlocks ( mAssetManager . open ( assetPath ) ) ; } catch ( IOException e ) { $F725 ( factory ) throw new IllegalStateException ( NUM00 + assetPath , e ) ; } } for ( $F2277 ( i , mBlockDefs ) ) { factory . addBlockTemplate ( mBlockDefs . get ( i ) ) ; } BlocklyController controller = new BlocklyController ( mContext , factory , mWorkspaceHelper , mViewFactory ) ; if ( mToolboxResId != NUM00 ) { controller . loadToolboxContents ( mToolboxResId ) ; } else if ( mToolboxXml != null ) { controller . loadToolboxContents ( mToolboxXml ) ; } else if ( mToolboxAssetId != null && mAssetManager != null ) { try { controller . loadToolboxContents ( mAssetManager . open ( mToolboxAssetId ) ) ; } catch ( IOException e ) $F12615 ( mToolboxAssetId , e ) } controller . setWorkspaceFragment ( mWorkspaceFragment ) ; controller . setTrashFragment ( mTrashFragment ) ; controller . setToolboxFragment ( mToolboxFragment ) ; controller . setTrashIcon ( mTrashIcon ) ; controller . setVariableCallback ( mVariableCallback ) ; return controller ; }
$F1 public void run $F72 { while $F931 ( isInterrupted ) { try { KeyHolder $F22664 ref = ( KeyHolder $F22664 ) _queue . remove ( ) ; V removed = _table . remove ( ref ) ; if ( _listener != null && removed != null ) _listener . weakEntryRemoved ( removed ) ; } catch ( InterruptedException e ) $F151805 ( interrupt ) } }
public JobDefinitionCreateRequest createJobDefinitionCreateRequest ( String namespaceCd , String jobName , String jobDescription , String activitiXml , $F292037 parameters ) { JobDefinitionCreateRequest request = new JobDefinitionCreateRequest $F72 ; request . setNamespace ( namespaceCd ) ; request . setJobName ( jobName ) ; request . setDescription ( jobDescription ) ; request . setActivitiJobXml ( activitiXml ) ; request . setParameters ( parameters ) ; return request ; }
public TabState restoreTabState ( int tabId , boolean encrypted ) { return TabState . restoreTabState ( getTabStateFile ( tabId , encrypted ) , encrypted ) ; }
public FTPClient $F72 { addListParser ( new UnixListParser $F72 ) ; addListParser ( new DOSListParser $F72 ) ; addListParser ( new EPLFListParser $F72 ) ; addListParser ( new NetWareListParser $F72 ) ; addListParser ( new MLSDListParser $F72 ) ; }
public String addExtension ( String testFileName ) $F70142 ( testFileName )
public $F4203 String makeStringValueSQ ( T value ) $F2495 ( value )
private Level descriptionToLogLevel ( String description ) { Level result = Level . OFF ; if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . OFF ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . SEVERE ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . WARNING ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . INFO ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . CONFIG ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . FINE ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . FINER ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . FINEST ; } else if ( description . equals ( s_logger . localizeMessage ( NUM00 ) ) ) { result = Level . ALL ; } return result ; }
default boolean isImmutable $F72 { return _BOOL ; }
public long renew ( String entryUid , String className , int objectType , long duration , boolean fromReplication , boolean origin , boolean isFromGateway ) throws UnknownLeaseException , InternalSpaceException { try { extendLeasePeriod ( entryUid , className , objectType , duration , fromReplication , origin , _BOOL , null , isFromGateway ) ; } catch ( UnknownLeaseException unknownLeaseException ) { if ( _cacheManager . isCacheExternalDB ( ) && objectType != ObjectTypes . NOTIFY_NULL_TEMPLATE && objectType != ObjectTypes . NOTIFY_TEMPLATE ) { if $F6456 ( _logger , Level ) { $F37847 ( _logger , Level , unknownLeaseException ) } } else throw unknownLeaseException ; } return duration ; }
public JKTagMapping $F72 $F845
public static void inRange ( final long value , final String name , final long minInclusive , final long maxInclusive ) { if ( value < minInclusive || value > maxInclusive ) { final String message = String . format ( NUM00 , name , minInclusive , maxInclusive ) ; $F29415 ( message ) } }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
public static File unzipToTempFolder ( File zipFile ) { $F20605 ( zipFilename , zipFile ) $F319260 ( tempFolderPrefix , zipFilename ) File tempFolder = createTempFolder ( tempFolderPrefix ) ; try { PUZipUtils . unzip ( zipFile , tempFolder ) ; return tempFolder ; } catch ( Exception e ) { try { FileUtils . deleteFileOrDirectory ( tempFolder ) ; } catch ( RuntimeException ex ) { logger . debug ( NUM00 + tempFolder , ex ) ; } throw new RuntimeException ( NUM00 + zipFile + NUM00 + tempFolder , e ) ; } }
public void testAscii $F72 throws Exception { String str = NUM00 ; ByteArrayInputStream $F21318 ( aa , str ) ; InputStreamReader a = new InputStreamReader ( aa , NUM00 ) ; try { $F7468 ( x , a ) assertEquals ( NUM00 , x ) ; $F11577 ( c ) $F3261 ( x , a , c ) assertEquals ( NUM00 , a . getEncoding ( ) ) ; assertEquals ( NUM00 , x ) ; assertEquals ( NUM00 , String . valueOf ( c ) ) ; } $F3229 ( a ) }
public void clear $F72 { $F725 ( m_reducedResults ) m_currentSearchIndex = NUM00 ; }
public static void createAccessorMethod ( SootMethod container , Stmt stmt ) { Body containerBody = container . getActiveBody ( ) ; soot . util . Chain containerStmts = containerBody . getUnits ( ) ; if $F2200 ( containerStmts , stmt ) $F62078 if ( stmt . containsInvokeExpr ( ) ) { createInvokeAccessor ( container , stmt ) ; } else if ( stmt instanceof AssignStmt ) { AssignStmt as = ( AssignStmt ) stmt ; FieldRef ref ; if ( as . getLeftOp ( ) instanceof FieldRef ) { ref = ( FieldRef ) as . getLeftOp ( ) ; createSetAccessor ( container , as , ref ) ; } else if ( as . getRightOp ( ) instanceof FieldRef ) { ref = ( FieldRef ) as . getRightOp ( ) ; createGetAccessor ( container , as , ref ) ; } else $F11389 } else $F11388 }
$F1 public void displayChanged $F72 $F5795 ( updateGC )
public final void pushPair ( Node v1 , Node v2 ) { if ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else { if $F11078 ( m_firstFree , m_mapSize ) { m_mapSize += m_blocksize ; Node newMap [ ] = new Node [ m_mapSize ] ; $F135 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + NUM00 ] = v2 ; m_firstFree += NUM00 ; }
$F119089 ( text , builder , index , chr , t , Integer )
final $F108030 segmentFor ( int hash ) { return segments [ ( hash > > > segmentShift ) & segmentMask ] ; }
$F1431 private void startSetTimeChanged $F72 { int hours = NUM00 ; int minutes = NUM00 ; try $F50527 ( hours , Integer , startHoursField ) catch ( Exception e ) { JOptionPane . showMessageDialog ( this , ( Bundle . getMessage ( NUM00 ) + NUM00 + e ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; $F17662 ( log , e ) $F665 } if $F61157 ( hours ) { JOptionPane . showMessageDialog ( this , $F253578 ( Bundle ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; $F665 } try $F50527 ( minutes , Integer , startMinutesField ) catch ( Exception e ) { JOptionPane . showMessageDialog ( this , ( Bundle . getMessage ( NUM00 ) + NUM00 + e ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; $F17662 ( log , e ) $F665 } if $F61157 ( minutes ) { JOptionPane . showMessageDialog ( this , $F253578 ( Bundle ) , Bundle . getMessage ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; $F665 } long mSecPerHour = NUM00 ; long mSecPerMinute = NUM00 ; $F9110 ( tem , clock ) int cHours = tem . getHours ( ) ; long cNumMSec = tem . getTime ( ) ; long nNumMSec = ( ( cNumMSec / mSecPerHour ) * mSecPerHour ) - ( cHours * mSecPerHour ) + ( hours * mSecPerHour ) + ( minutes * mSecPerMinute ) ; clock . setStartSetTime ( startSetTimeCheckBox . isSelected ( ) , new Date ( nNumMSec ) ) ; changed = _BOOL ; }
public static String serialize ( Object toSerialize ) throws Exception { $F33929 ( xstreamClass ) $F33932 ( constructor ) Object xstream ; $F33937 ( serializeArgsClasses ) $F3300 ( serializeArgs ) $F33940 ( methodSerialize ) String result ; $F33941 ( xstreamClass , Class ) constructor = xstreamClass . getConstructor ( ) ; $F33943 ( xstream , constructor ) serializeArgsClasses [ NUM00 ] = $F12222 ; serializeArgs [ NUM00 ] = toSerialize ; $F18553 ( methodSerialize , xstreamClass , serializeArgsClasses ) try { result = ( String ) methodSerialize . invoke ( xstream , serializeArgs ) ; } catch ( Exception ex ) { result = null ; } return result ; }
$F1 public void release $F72 $F33834 ( super )
public void updateAndTestCounter ( OFMessage ofm , String type ) { validateCounter ( type , NUM00 ) ; counters . updateWriteStats ( ofm ) ; counters . updateWriteStats ( ofm ) ; counters . updateReadStats ( ofm ) ; counters . updateReadStats ( ofm ) ; validateCounter ( type , NUM00 ) ; }
public static $F11685 $F57915 of $F72 $F12523 ( Collections )
protected void drawDomainCrosshair ( Graphics2D g2 , Rectangle2D dataArea , PlotOrientation orientation , int datasetIndex , Comparable rowKey , Comparable columnKey , Stroke stroke , Paint paint ) { CategoryDataset dataset = getDataset ( datasetIndex ) ; CategoryAxis axis = getDomainAxisForDataset ( datasetIndex ) ; CategoryItemRenderer renderer = getRenderer ( datasetIndex ) ; Line2D line ; if ( orientation == PlotOrientation . VERTICAL ) { double xx = renderer . getItemMiddle ( rowKey , columnKey , dataset , axis , dataArea , RectangleEdge . BOTTOM ) ; line = new $F69931 ( xx , dataArea . getMinY ( ) , xx , dataArea . getMaxY ( ) ) ; } else { double yy = renderer . getItemMiddle ( rowKey , columnKey , dataset , axis , dataArea , RectangleEdge . LEFT ) ; line = new $F69931 ( dataArea . getMinX ( ) , yy , dataArea . getMaxX ( ) , yy ) ; } g2 . setStroke ( stroke ) ; g2 . setPaint ( paint ) ; g2 . draw ( line ) ; }
$F1 public Table summary $F72 { Table table = Table . create ( NUM00 + name ( ) ) ; CategoryColumn measure = CategoryColumn . create ( NUM00 ) ; CategoryColumn value = CategoryColumn . create ( NUM00 ) ; table . addColumn ( measure ) ; table . addColumn ( value ) ; $F18793 ( measure ) value . add ( $F130521 ( String , size ) ) ; $F18793 ( measure ) value . add ( $F130521 ( String , countMissing ) ) ; $F18793 ( measure ) value . add ( $F130521 ( String , min ) ) ; $F18793 ( measure ) value . add ( $F130521 ( String , max ) ) ; return table ; }
private Object js_parseFloat $F22194 ( args ) { if $F8830 ( args ) return ScriptRuntime . NaNobj ; String s = ScriptRuntime . toString ( args [ NUM00 ] ) ; $F1749 ( len , s ) int start = NUM00 ; char c ; for ( $F589 ) { if ( start == len ) { return ScriptRuntime . NaNobj ; } c = s . charAt ( start ) ; if ( ! ScriptRuntime . isStrWhiteSpaceChar ( c ) ) $F5153 ++ start ; } int i = start ; if $F37111 ( c ) { ++ i ; if ( i == len ) { return ScriptRuntime . NaNobj ; } c = s . charAt ( i ) ; } if ( c == NUM00 ) { if ( i + NUM00 <= len && s . regionMatches ( i , NUM00 , NUM00 , NUM00 ) ) { double d ; if $F11983 ( s , start ) { d = Double . NEGATIVE_INFINITY ; } else { d = Double . POSITIVE_INFINITY ; } return ScriptRuntime . wrapNumber ( d ) ; } return ScriptRuntime . NaNobj ; } int decimal = - NUM00 ; int exponent = - NUM00 ; boolean exponentValid = _BOOL ; for ( ; i < len ; i ++ ) { switch $F31372 ( s , i ) { $F1262 if ( decimal != - NUM00 ) $F597 decimal = i ; $F598 $F1262 $F1262 if ( exponent != - NUM00 ) $F5153 else if ( i == len - NUM00 ) $F5153 exponent = i ; $F598 $F1262 $F1262 if ( exponent != i - NUM00 ) $F5153 else if ( i == len - NUM00 ) { -- i ; $F597 } $F598 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 if ( exponent != - NUM00 ) { exponentValid = _BOOL ; } $F598 $F2448 } $F597 } if ( exponent != - NUM00 && ! exponentValid ) { i = exponent ; } s = s . substring ( start , i ) ; try $F62107 ( Double , s ) catch ( NumberFormatException ex ) { return ScriptRuntime . NaNobj ; } }
public CVisibilityCriteriumPanel ( final CVisibilityCriterium criterium ) { $F9898 ( super ) visibilityCriterium = criterium ; visibilityStateBox . addActionListener ( visibilityStateBoxListener ) ; initPanel ( ) ; }
public boolean isAlterAdd $F72 $F32878 ( columnsToAdd )
private boolean processRemovedNode ( final INaviViewNode node ) { if ( node instanceof INaviCodeNode ) { final INaviCodeNode cnode = ( INaviCodeNode ) node ; try { final INaviFunction targetFunction = cnode . getParentFunction ( ) ; if $F1710 ( m_nodeCounter , targetFunction ) { final int newCounter = m_nodeCounter . get ( targetFunction ) - NUM00 ; if ( newCounter == NUM00 ) { m_nodeCounter . remove ( targetFunction ) ; final Set < CCrossReference > toDelete = new HashSet < CCrossReference > $F72 ; for ( final CCrossReference reference : m_crossReferences ) { if ( reference . getCalledFunction ( ) == targetFunction ) $F207 ( toDelete , reference ) } m_crossReferences . removeAll ( toDelete ) ; return _BOOL ; } else $F1717 ( m_nodeCounter , targetFunction , newCounter ) } } catch ( final MaybeNullException exception ) $F845 } return _BOOL ; }
public long transferTo ( long position , long count , OutputStream dst ) throws IOException { return transferTo ( position , count , Channels . newChannel ( dst ) ) ; }
public void test_isLenient $F72 { $F4377 ( df , DateFormat ) Calendar c = df . getCalendar ( ) ; if ( df . isLenient ( ) ) { try { $F305335 ( c , Calendar ) $F531204 ( c , Calendar ) } $F53525 ( fail , e ) c . setLenient ( _BOOL ) ; try { $F305335 ( c , Calendar ) $F531204 ( c , Calendar ) fail ( NUM00 ) ; } $F45786 $F53525 ( fail , e ) } else { try { $F305335 ( c , Calendar ) $F531204 ( c , Calendar ) fail ( NUM00 ) ; } $F45786 $F53525 ( fail , e ) c . setLenient ( _BOOL ) ; try { $F305335 ( c , Calendar ) $F531204 ( c , Calendar ) } $F53525 ( fail , e ) } }
private void writeIndexFile $F72 throws IOException , CarbonDataWriterException { IndexHeader indexHeader = CarbonMetadataUtil . getIndexHeader ( localCardinality , thriftColumnSchemaList ) ; List < BlockIndex > blockIndexThrift = CarbonMetadataUtil . getBlockIndexInfo ( blockIndexInfoList ) ; String fileName = storeLocation + File . separator + carbonTablePath . getCarbonIndexFileName ( carbonDataFileAttributes . getTaskId ( ) , carbonDataFileAttributes . getFactTimeStamp ( ) ) ; CarbonIndexFileWriter writer = new CarbonIndexFileWriter $F72 ; writer . openThriftWriter ( fileName ) ; writer . writeThrift ( indexHeader ) ; for ( BlockIndex blockIndex : blockIndexThrift ) { writer . writeThrift ( blockIndex ) ; } $F59 ( writer ) copyCarbonDataFileToCarbonStorePath ( fileName ) ; }
public void nackAll ( PubsubReader $F4203 reader ) throws IOException { checkState ( this . reader == null , NUM00 ) ; $F3803 batchYetToAckIds = new $F201 ( $F150109 ( Math , notYetReadIds , ACK_BATCH_SIZE ) ) ; for ( String ackId : notYetReadIds ) { batchYetToAckIds . add ( ackId ) ; if $F29395 ( batchYetToAckIds , ACK_BATCH_SIZE ) { long nowMsSinceEpoch = now ( reader ) ; reader . nackBatch ( nowMsSinceEpoch , batchYetToAckIds ) ; $F725 ( batchYetToAckIds ) } } if $F5973 ( batchYetToAckIds ) { long nowMsSinceEpoch = now ( reader ) ; reader . nackBatch ( nowMsSinceEpoch , batchYetToAckIds ) ; } }
static public void assertEquals $F109214 ( message , expected , actual ) { $F2564 ( expected , actual ) $F2565 ( expected , actual ) failNotEquals ( message , expected , actual ) ; }
public static NamingException mapErrorCode ( int errorCode , String errorMessage ) { if ( errorCode == LdapClient . LDAP_SUCCESS ) $F1274 NamingException e = null ; String message = LdapClient . getErrorMessage ( errorCode , errorMessage ) ; switch ( errorCode ) { case LdapClient . LDAP_ALIAS_DEREFERENCING_PROBLEM : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_ALIAS_PROBLEM : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_ATTRIBUTE_OR_VALUE_EXISTS : e = new AttributeInUseException ( message ) ; $F597 case LdapClient . LDAP_AUTH_METHOD_NOT_SUPPORTED : case LdapClient . LDAP_CONFIDENTIALITY_REQUIRED : case LdapClient . LDAP_STRONG_AUTH_REQUIRED : case LdapClient . LDAP_INAPPROPRIATE_AUTHENTICATION : e = new AuthenticationNotSupportedException ( message ) ; $F597 case LdapClient . LDAP_ENTRY_ALREADY_EXISTS : e = new NameAlreadyBoundException ( message ) ; $F597 case LdapClient . LDAP_INVALID_CREDENTIALS : case LdapClient . LDAP_SASL_BIND_IN_PROGRESS : e = new AuthenticationException ( message ) ; $F597 case LdapClient . LDAP_INAPPROPRIATE_MATCHING : e = new InvalidSearchFilterException ( message ) ; $F597 case LdapClient . LDAP_INSUFFICIENT_ACCESS_RIGHTS : e = new NoPermissionException ( message ) ; $F597 case LdapClient . LDAP_INVALID_ATTRIBUTE_SYNTAX : case LdapClient . LDAP_CONSTRAINT_VIOLATION : e = new InvalidAttributeValueException ( message ) ; $F597 case LdapClient . LDAP_LOOP_DETECT : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_NO_SUCH_ATTRIBUTE : e = new NoSuchAttributeException ( message ) ; $F597 case LdapClient . LDAP_NO_SUCH_OBJECT : e = new NameNotFoundException ( message ) ; $F597 case LdapClient . LDAP_OBJECT_CLASS_MODS_PROHIBITED : case LdapClient . LDAP_OBJECT_CLASS_VIOLATION : case LdapClient . LDAP_NOT_ALLOWED_ON_RDN : e = new SchemaViolationException ( message ) ; $F597 case LdapClient . LDAP_NOT_ALLOWED_ON_NON_LEAF : e = new ContextNotEmptyException ( message ) ; $F597 case LdapClient . LDAP_OPERATIONS_ERROR : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_OTHER : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_PROTOCOL_ERROR : e = new CommunicationException ( message ) ; $F597 case LdapClient . LDAP_SIZE_LIMIT_EXCEEDED : e = new SizeLimitExceededException ( message ) ; $F597 case LdapClient . LDAP_TIME_LIMIT_EXCEEDED : e = new TimeLimitExceededException ( message ) ; $F597 case LdapClient . LDAP_UNAVAILABLE_CRITICAL_EXTENSION : e = new OperationNotSupportedException ( message ) ; $F597 case LdapClient . LDAP_UNAVAILABLE : case LdapClient . LDAP_BUSY : e = new ServiceUnavailableException ( message ) ; $F597 case LdapClient . LDAP_UNDEFINED_ATTRIBUTE_TYPE : e = new InvalidAttributeIdentifierException ( message ) ; $F597 case LdapClient . LDAP_UNWILLING_TO_PERFORM : e = new OperationNotSupportedException ( message ) ; $F597 case LdapClient . LDAP_COMPARE_FALSE : case LdapClient . LDAP_COMPARE_TRUE : case LdapClient . LDAP_IS_LEAF : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_ADMIN_LIMIT_EXCEEDED : e = new LimitExceededException ( message ) ; $F597 case LdapClient . LDAP_REFERRAL : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_PARTIAL_RESULTS : e = new NamingException ( message ) ; $F597 case LdapClient . LDAP_INVALID_DN_SYNTAX : case LdapClient . LDAP_NAMING_VIOLATION : e = new InvalidNameException ( message ) ; $F597 $F1267 e = new NamingException ( message ) ; $F597 } return e ; }
public final void computeIndex $F72 { $F7254 ( indexComputed ) $F27145 cellList = new ArrayList $F72 ; $F3807 edgeList = new ArrayList $F72 ; for ( $F2010 ( i , getNumEdges ) ) { S2Point from = edgeFrom ( i ) ; S2Point to = edgeTo ( i ) ; $F17427 cover = new ArrayList $F72 ; int level = getCovering ( from , to , _BOOL , cover ) ; $F16700 ( minimumS2LevelUsed , Math , level ) for ( S2CellId cellId : cover ) { cellList . add ( cellId . id ( ) ) ; edgeList . add ( i ) ; } } cells = new long $F2313 ( cellList ) ; $F103411 ( edges , edgeList ) for ( $F1139 ( i , cells ) ) { $F15302 ( cells , i , cellList ) $F15302 ( edges , i , edgeList ) } sortIndex ( ) ; indexComputed = _BOOL ; }
public WaitForAnyListener ( int numberOfResults ) $F11707 ( this , numberOfResults )
public static Object stringToValue ( String string ) { Double d ; $F29942 ( string ) $F29944 ( string , Boolean ) $F29946 ( string , Boolean ) $F29948 ( string , JSONObject ) $F12685 ( b , string ) if ( $F19295 ( b ) || b == NUM00 || b == NUM00 || b == NUM00 ) { try { if $F29954 ( string ) $F29960 ( d , Double , string ) else { $F29962 ( myLong , string ) if ( myLong . longValue ( ) == myLong . intValue ( ) ) { $F29969 ( myLong ) } else { return myLong ; } } } $F29977 } return string ; }
public abstract void onPinSet ( String pin ) ;
public void testCase9 $F72 { $F70249 $F10679 int aSign = - NUM00 ; int bSign = - NUM00 ; $F70253 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public EntityQuery orderBy ( String ... fields ) { this . orderBy = Arrays . asList ( fields ) ; return this ; }
public void removeNodesFromPartition ( List < IGroupMemberNode > nodesToRemove ) { for ( final IGroupMemberNode nodeToRemove : nodesToRemove ) { if ( nodeToRemove != null ) { if $F40971 ( nonOptionalNonMinusNodes , nodeToRemove ) { if $F1238 ( nodeToRemove , optionalOrMinus ) { optionalOrMinus = null ; } } } } recomputeDefinitelyProduced ( ) ; }
public static void banner ( Logger logger , $F6969 clazz , String methodName , String text ) { String string = clazz . getSimpleName ( ) + NUM00 + methodName ; if ( text != null ) { string += NUM00 + text ; } $F973 ( logger ) $F973 ( logger ) $F556 ( logger , string ) $F973 ( logger ) }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) if ( resourceBundleName != null ) { try { rb = ResourceBundle . getBundle ( resourceBundleName ) ; } catch ( MissingResourceException e ) { rb = null ; } } }
private static void exit ( $F5466 String errMsg , $F5466 Options options , int exitCode ) { if ( errMsg != null ) echo ( NUM00 + errMsg ) ; String runner = System . getProperty ( IGNITE_PROG_NAME , NUM00 ) ; $F1384 ( space , runner ) runner = runner . substring ( NUM00 , space == - NUM00 ? runner . length ( ) : space ) ; if ( options != null ) { HelpFormatter formatter = new HelpFormatter $F72 ; formatter . printHelp ( runner , options ) ; } System . exit ( exitCode ) ; }
private static void replaceAltSpecialInstructions $F72 { fillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , andccrU8SimulationCode ) ) ; fillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , stilmU8SimulationCode ) ) ; fillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , orccrU8SimulationCode ) ) ; fillInstructionMap ( NUM00 , NUM00 , new FrInstruction ( InstructionFormat . D , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Instruction . FlowType . NONE , _BOOL , _BOOL , addspS10SimulationCode ) ) ; }
$F1 public boolean addSensorToRoute ( String sensorName , int mode ) { if $F29395 ( _controlSensorList , MAX_CONTROL_SENSORS ) { log . warn ( NUM00 , getSystemName ( ) ) ; } ControlSensor sensor = new ControlSensor ( sensorName ) ; $F119866 ( log , getSystemName , sensorName ) if ( ! sensor . setState ( mode ) ) { return _BOOL ; } if ( isControlSensorIncluded ( sensor ) ) { log . debug ( NUM00 , sensorName , getSystemName ( ) ) ; } else $F207 ( _controlSensorList , sensor ) return _BOOL ; }
private void eliminateBackfillStates ( int baseState ) { if ( $F118675 ( statesToBackfill , baseState ) ) { statesToBackfill . removeElement ( new Integer ( baseState ) ) ; $F5078 state = tempStateTable . elementAt ( baseState ) ; for ( $F119 ( i , numCategories ) ) { if ( state [ i ] != NUM00 ) $F11680 ( eliminateBackfillStates , state , i ) } } }
static boolean separateConvexPolygons ( $F5415 verts1 , $F5415 verts2 , Vector2 separation ) { $F18832 ( length1 , verts1 ) $F18832 ( length2 , verts2 ) for ( $F6225 ( i , length1 ) ) { final int j = ( i + NUM00 ) % length1 ; float projX = $F3123 ( verts1 , j , i ) ; float projY = verts1 [ i ] - verts1 [ j ] ; final float length = ( float ) $F25556 ( Math , projX , projY ) ; projX /= length ; projY /= length ; float min1 = Float . POSITIVE_INFINITY , max1 = Float . NEGATIVE_INFINITY ; for ( $F6225 ( k , length1 ) ) { final float dot = projX * verts1 [ k ] + projY * verts1 [ k + NUM00 ] ; $F7547 ( dot , min1 ) $F15468 ( dot , max1 ) } float min2 = Float . POSITIVE_INFINITY , max2 = Float . NEGATIVE_INFINITY ; for ( $F6225 ( k , length2 ) ) { final float dot = projX * verts2 [ k ] + projY * verts2 [ k + NUM00 ] ; $F7547 ( dot , min2 ) $F15468 ( dot , max2 ) } if ( ( max1 < min2 ) || ( max2 < min1 ) ) { if ( null != separation ) separation . set ( projY , - projX ) ; return _BOOL ; } } return _BOOL ; }
public String paymentTerm $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F179073 ( C_PaymentTerm_ID , value ) int C_Invoice_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; if ( C_PaymentTerm_ID == null || $F179074 ( C_PaymentTerm_ID ) || C_Invoice_ID == NUM00 ) $F1278 MPaymentTerm pt = new MPaymentTerm ( ctx , C_PaymentTerm_ID . intValue ( ) , null ) ; if ( $F73658 ( pt ) ) $F1278 boolean valid = pt . apply ( C_Invoice_ID ) ; mTab . setValue ( NUM00 , valid ? NUM00 : NUM00 ) ; $F1278 }
static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { int mask = NUM00 ; switch $F14870 ( typeRef ) { case TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; $F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; $F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; $F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; $F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; } if ( ( typeRef & ~ mask ) != NUM00 ) { throw new IllegalArgumentException $F184522 ( Integer , typeRef ) ; } if ( typePath != null ) { for ( $F184528 ( i , typePath ) ) { int step = typePath . getStep ( i ) ; if ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } } }
public static void transformCriteria ( Properties formProperties , InputStream xslIs , Result result ) throws SAXException , IOException , ParserConfigurationException , TransformerException { dbf . setNamespaceAware ( _BOOL ) ; $F2220 ( builder , dbf ) org . w3c . dom . Document xslDoc = builder . parse ( xslIs ) ; $F29110 ( ds , xslDoc ) Transformer transformer = null ; synchronized ( tFactory ) { transformer = tFactory . newTransformer ( ds ) ; } transformCriteria ( formProperties , transformer , result ) ; }
public static $F3510 splitAndPad $F5474 ( byteArray , blocksize ) { $F3510 $F96301 ( blocks ) ; int numBlocks = ( int ) Math . ceil ( byteArray . length / ( double ) blocksize ) ; for ( $F119 ( i , numBlocks ) ) { $F2175 ( block , blocksize ) $F26770 ( Arrays , block ) if ( i + NUM00 == numBlocks ) { int remainingBytes = byteArray . length - ( i * blocksize ) ; System . arraycopy ( byteArray , i * blocksize , block , NUM00 , remainingBytes ) ; } else { $F272701 ( System , byteArray , i , blocksize , block ) } blocks . add ( block ) ; } return blocks ; }
public void put ( E item ) throws InterruptedException { if $F972 ( done ) $F45619 ( queue , item ) }
protected void notifyComplete $F72 { final String methodName = NUM00 ; log . fine ( CLASS_NAME , methodName , NUM00 , new Object [ ] { getKey ( ) , this . response , this . exception } ) ; synchronized ( responseLock ) { if ( exception == null && pendingComplete ) { completed = _BOOL ; pendingComplete = _BOOL ; } else { pendingComplete = _BOOL ; } $F165 ( responseLock ) } $F39755 ( sentLock , sent , _BOOL ) }
private $F35152 initTable $F72 { $F35152 tab ; int sc ; while $F75438 ( tab , table ) { if $F75439 ( sc , sizeCtl ) { $F5756 ( Thread ) } else if $F75441 ( U , this , SIZECTL , sc ) { try { if $F75438 ( tab , table ) { $F75443 ( n , sc , DEFAULT_CAPACITY ) $F1431 $F35152 nt = ( $F35152 ) new Node $F5162 [ n ] ; table = tab = nt ; $F75453 ( sc , n ) } } finally { sizeCtl = sc ; } $F597 } } return tab ; }
public BufferedImage drawBarGraphWithStdDev ( String graphTitle , String xLabel , String yLabel , HashMap < ComparableLabel , $F31354 > barDataPoints , $F806 barLabels , Long stdDevHigh , Long stdDevLow , Long graphMaxValue ) { BufferedImage bi = new BufferedImage ( this . WIDTH , this . HEIGHT , BufferedImage . TYPE_INT_ARGB ) ; $F5115 ( g2d , bi ) RenderingHints renderHints = new RenderingHints ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; g2d . setRenderingHints ( renderHints ) ; drawChartAndGraphRectangles ( g2d ) ; drawBarLegend ( g2d , NUM00 , barLabels , stdDevHigh , stdDevLow ) ; drawTitleAndLabels ( g2d , graphTitle , xLabel , yLabel ) ; Collection < $F31354 > valueCollection = barDataPoints . values ( ) ; Set < ComparableLabel > dateKeySet = barDataPoints . keySet ( ) ; long maxValue = NUM00 ; for ( $F31354 intArray : valueCollection ) { for ( Integer intValue : intArray ) { $F8790 ( maxValue , intValue ) } } long yMaxMark = NUM00 ; int yLabelXOffset = NUM00 ; yMaxMark = determineYMaxMark ( maxValue , stdDevHigh , graphMaxValue ) ; drawYAxisDivisions ( g2d , yMaxMark , yLabelXOffset ) ; ArrayList < ComparableLabel > orderedDateSet = new ArrayList < ComparableLabel > $F72 ; orderedDateSet . addAll ( dateKeySet ) ; Collections . sort ( orderedDateSet ) ; drawXAxisDivisions ( g2d , orderedDateSet ) ; drawBarsOnGraph ( g2d , orderedDateSet , barDataPoints , yMaxMark ) ; if ( stdDevHigh != null ) { drawStdDevLine ( g2d , stdDevHigh , yMaxMark , this . stdDevHighColor ) ; } if ( stdDevLow != null ) { drawStdDevLine ( g2d , stdDevLow , yMaxMark , this . stdDevLowColor ) ; } return bi ; }
public synchronized boolean loadPublicKey $F72 { if ( ! has ( NUM00 ) || ! has ( NUM00 ) ) return _BOOL ; String encodedKey = getString ( NUM00 ) ; String algorithm = getString ( NUM00 ) ; PublicKey pub = IO . decodePublicKey ( encodedKey , algorithm ) ; if ( pub != null ) { public_key = pub ; key_algorithm = algorithm ; setPeerHash ( ) ; return _BOOL ; } return _BOOL ; }
private String extractProjectNameFromUri $F116884 ( uri ) { $F24867 ( indexFinishProjectName , uri ) int indexStartProjectName = uri . lastIndexOf ( NUM00 ) != - NUM00 ? $F31603 ( uri ) : ( $F31603 ( uri ) ) ; if ( indexStartProjectName != NUM00 && indexStartProjectName < indexFinishProjectName ) $F102712 ( uri , indexStartProjectName , indexFinishProjectName ) if ( indexStartProjectName != NUM00 ) $F61217 ( uri , indexStartProjectName ) $F1278 }
private void loadTextData ( DataInputStream dis ) throws IOException { for ( $F119 ( f , numFrames ) ) { times [ f ] = Float . parseFloat ( General . readWord ( dis ) ) ; General . readWord ( dis ) ; for ( $F119 ( c , numChannels ) ) { frames [ f ] [ c ] = Float . parseFloat ( General . readWord ( dis ) ) ; } } }
$F83977 ( listener , mListeners )
public static boolean isGzipContent ( String contentEncoding ) { return $F82309 ( contentEncoding ) ; }
public synchronized boolean checkSize ( final int sizeChecked ) { $F34216 ( started ) if ( sizeChecked > bufferSize ) $F322689 ( bufferSize ) if ( bufferLimit == NUM00 || buffer . writerIndex ( ) + sizeChecked > bufferLimit ) { flush ( ) ; delayFlush = _BOOL ; final int remainingInFile = bufferObserver . getRemainingBytes ( ) ; if ( sizeChecked > remainingInFile ) { return _BOOL ; } else { bufferLimit = Math . min ( remainingInFile , bufferSize ) ; return _BOOL ; } } else $F98813 ( delayFlush , _BOOL ) }
public void testCompareLessScale1 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) int result = NUM00 ; $F1960 ( assertEquals , result , aNumber , bNumber ) }
void reclaimScrapViews $F206149 ( views ) { if ( mViewTypeCount == NUM00 ) $F21926 ( views , mCurrentScrap ) else { final int viewTypeCount = mViewTypeCount ; $F158084 ( scrapViews , mScrapViews ) for ( $F1316 ( i , viewTypeCount ) ) { $F65533 ( scrapPile , scrapViews , i ) views . addAll ( scrapPile ) ; } } }
public void exit $F72 { exitCalled = _BOOL ; if ( threadMap != null ) { deleteAllThreads ( ) ; $F973 ( log ) if ( DurationStatistics . collectStatistics ) { statistics . exit ( ) ; log . info ( String . format ( NUM00 , statistics . allCycles , statistics . getDurationMillis ( ) / NUM00 ) ) ; Collections . sort ( statistics . threads ) ; for ( Statistics . ThreadStatistics threadStatistics : statistics . threads ) { double percentage = NUM00 ; if ( statistics . allCycles != NUM00 ) { percentage = ( threadStatistics . runClocks / ( double ) statistics . allCycles ) * NUM00 ; } log . info ( String . format ( NUM00 , threadStatistics . getQuotedName ( ) , threadStatistics . runClocks , percentage ) ) ; } } } }
private void formatNodeTo ( Formatter f , int level , RadixTreeNode $F4203 node ) { for ( $F119 ( i , level ) ) { f . format ( NUM00 ) ; } f . format ( NUM00 ) ; for ( $F119 ( i , level ) ) { f . format ( NUM00 ) ; } if ( node . isReal ( ) == _BOOL ) f . format ( NUM00 , node . getKey ( ) , node . getValue ( ) ) ; else f . format ( NUM00 , node . getKey ( ) ) ; for ( RadixTreeNode $F4203 child : node . getChildern ( ) ) { formatNodeTo ( f , level + NUM00 , child ) ; } }
protected void startDownload ( int blocks ) { if ( blocks > NUM00 ) log . info ( NUM00 + blocks + NUM00 + ( blocks > NUM00 ? NUM00 : NUM00 ) ) ; }
public void add $F2026 ( start , end , handler , type ) { if ( start < end ) entries . add ( new ExceptionTableEntry ( start , end , handler , type ) ) ; }
private void freeKick ( Team offense ) { if ( gameTime <= NUM00 ) $F665 else { if ( gameTime < NUM00 && ( ( gamePoss && ( awayScore - homeScore ) <= NUM00 && ( awayScore - homeScore ) > NUM00 ) || ( ! gamePoss && ( homeScore - awayScore ) <= NUM00 && ( homeScore - awayScore ) > NUM00 ) ) ) { if ( offense . getK ( NUM00 ) . ratKickFum * Math . random ( ) > NUM00 || Math . random ( ) < NUM00 ) { gameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 + offense . abbr + NUM00 ; gameYardLine = NUM00 ; gameDown = NUM00 ; gameYardsNeed = NUM00 ; } else { gameEventLog += getEventPrefix ( ) + offense . abbr + NUM00 + offense . getK ( NUM00 ) . name + NUM00 ; gamePoss = ! gamePoss ; gameYardLine = NUM00 ; gameDown = NUM00 ; gameYardsNeed = NUM00 ; } gameTime -= NUM00 + $F293740 ( Math ) ; } else { gameYardLine = ( int ) ( NUM00 - ( offense . getK ( NUM00 ) . ratKickPow + NUM00 - $F293740 ( Math ) ) ) ; if ( gameYardLine <= NUM00 ) gameYardLine = NUM00 ; gameDown = NUM00 ; gameYardsNeed = NUM00 ; gamePoss = ! gamePoss ; gameTime -= $F293740 ( Math ) ; } } }
private void processNewPort ( long sw , short p ) { $F153093 ( isLinkDiscoverySuppressed , sw , p ) $F2579 ( iofSwitch , floodlightProvider , sw ) $F8249 ( iofSwitch ) if ( autoPortFastFeature && iofSwitch . isFastPort ( p ) ) $F932 NodePortTuple npt = new NodePortTuple ( sw , p ) ; discover ( sw , p ) ; if ( ! iofSwitch . isFastPort ( p ) ) { addToQuarantineQueue ( npt ) ; } else { addToMaintenanceQueue ( npt ) ; } }
public static void put3ByteInt ( ByteBuffer buffer , int val ) { put3ByteInt ( buffer , val , buffer . order ( ) ) ; }
public static void assertNoException ( Runnable expression , String errorMessage ) { if ( verbose ) { $F25590 ( log , expression , errorMessage ) } try $F21688 ( expression ) catch ( RuntimeException failure ) { TestUtils . fail ( errorMessage ) ; } }
$F1 public int indexOf ( Object object ) $F41330 ( indexOf , object )
protected ResponseFormatType generateAcceptFormat ( String format ) throws BadApiRequestException { try { return format == null ? ResponseFormatType . JSON : ResponseFormatType . valueOf ( $F65405 ( format , Locale ) ) ; } catch ( IllegalArgumentException e ) { LOG . error ( ACCEPT_FORMAT_INVALID . logFormat ( format ) , e ) ; throw new BadApiRequestException ( ACCEPT_FORMAT_INVALID . format ( format ) ) ; } }
public SharedObject ( $F2100 ( data ) , String name , String path , boolean persistent ) { super ( ) ; this . name = name ; this . path = path ; this . persistentSO = persistent ; ownerMessage = new SharedObjectMessage ( null , name , NUM00 , persistent ) ; $F3224 ( creationTime , System ) super . setAttributes ( data ) ; }
public static String dateToString ( Date date ) { if ( date == null ) $F1337 else { DateFormat df = new SimpleDateFormat ( dateFormat ) ; df . setTimeZone ( utc ) ; $F5330 ( df , date ) } }
public static String infoFirstLastPixels ( ImageLineInt line ) { return line . imgInfo . channels == NUM00 ? String . format ( NUM00 , line . scanline [ NUM00 ] , line . scanline [ line . scanline . length - NUM00 ] ) : String . format ( NUM00 , line . scanline [ NUM00 ] , line . scanline [ NUM00 ] , line . scanline [ NUM00 ] , line . scanline [ line . scanline . length - line . imgInfo . channels ] , line . scanline [ line . scanline . length - line . imgInfo . channels + NUM00 ] , line . scanline [ line . scanline . length - line . imgInfo . channels + NUM00 ] ) ; }
private AstNode memberExprTail ( boolean allowCallSyntax , AstNode pn ) throws IOException { $F21009 ( pn , codeBug ) int pos = pn . getPosition ( ) ; int lineno ; tailLoop : for ( $F589 ) { int tt = peekToken ( ) ; switch ( tt ) { case Token . DOT : case Token . DOTDOT : lineno = ts . lineno ; pn = propertyAccess ( tt , pn ) ; pn . setLineno ( lineno ) ; $F597 case Token . DOTQUERY : consumeToken ( ) ; int opPos = ts . tokenBeg , rp = - NUM00 ; lineno = ts . lineno ; mustHaveXML ( ) ; setRequiresActivation ( ) ; AstNode filter = expr ( ) ; int end = getNodeEnd ( filter ) ; if ( mustMatchToken ( Token . RP , NUM00 ) ) { rp = ts . tokenBeg ; end = ts . tokenEnd ; } XmlDotQuery q = new XmlDotQuery ( pos , end - pos ) ; q . setLeft ( pn ) ; q . setRight ( filter ) ; q . setOperatorPosition ( opPos ) ; q . setRp ( rp - pos ) ; q . setLineno ( lineno ) ; pn = q ; $F597 case Token . LB : consumeToken ( ) ; int lb = ts . tokenBeg , rb = - NUM00 ; lineno = ts . lineno ; AstNode expr = expr ( ) ; end = getNodeEnd ( expr ) ; if ( mustMatchToken ( Token . RB , NUM00 ) ) { rb = ts . tokenBeg ; end = ts . tokenEnd ; } ElementGet g = new ElementGet ( pos , end - pos ) ; g . setTarget ( pn ) ; g . setElement ( expr ) ; g . setParens ( lb , rb ) ; g . setLineno ( lineno ) ; pn = g ; $F597 case Token . LP : if ( ! allowCallSyntax ) { break tailLoop ; } lineno = ts . lineno ; consumeToken ( ) ; checkCallRequiresActivation ( pn ) ; FunctionCall f = new FunctionCall ( pos ) ; f . setTarget ( pn ) ; f . setLineno ( lineno ) ; f . setLp ( ts . tokenBeg - pos ) ; List < AstNode > args = argumentList ( ) ; if ( args != null && args . size ( ) > ARGC_LIMIT ) reportError ( NUM00 ) ; f . setArguments ( args ) ; f . setRp ( ts . tokenBeg - pos ) ; f . setLength ( ts . tokenEnd - pos ) ; pn = f ; $F597 $F1267 break tailLoop ; } } return pn ; }
public static Iterable $F15368 elements ( NodeList nodes ) $F1337
public static int minDistance ( String word1 , String word2 ) { if $F1238 ( word1 , word2 ) $F1082 $F1749 ( m , word1 ) $F1749 ( n , word2 ) $F26352 d = new int [ m + NUM00 ] [ n + NUM00 ] ; $F293658 ( d ) for ( $F10229 ( i , m ) ) d [ i ] [ NUM00 ] = i ; for ( $F10229 ( j , n ) ) d [ NUM00 ] [ j ] = j ; for ( $F10229 ( i , m ) ) { for ( $F10229 ( j , n ) ) { d [ i ] [ j ] = Math . min ( Math . min ( d [ i ] [ j - NUM00 ] + NUM00 , d [ i - NUM00 ] [ j ] + NUM00 ) , word1 . charAt ( i - NUM00 ) == word2 . charAt ( j - NUM00 ) ? d [ i - NUM00 ] [ j - NUM00 ] : d [ i - NUM00 ] [ j - NUM00 ] + NUM00 ) ; } } return d [ m ] [ n ] ; }
public void addUrl ( String url ) { $F2689 urls = getCachedUrls ( ) ; urls . add ( url ) ; putCachedUrls ( urls ) ; updateNotification ( urls ) ; }
public void testValueOfLongMax $F72 { long longVal = Long . MAX_VALUE ; $F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 } ; $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
private void closeDatabaseConnection ( Connection connection ) { $F8249 ( connection ) try $F881 ( connection ) $F31184 connection = null ; $F665 }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case InformationModelPackage . INFORMATION_MODEL__NAME : $F6439 ( NAME_EDEFAULT , name ) case InformationModelPackage . INFORMATION_MODEL__NAMESPACE : $F6439 ( NAMESPACE_EDEFAULT , namespace ) case InformationModelPackage . INFORMATION_MODEL__VERSION : $F6439 ( VERSION_EDEFAULT , version ) case InformationModelPackage . INFORMATION_MODEL__REFERENCES : $F6441 ( references ) case InformationModelPackage . INFORMATION_MODEL__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) case InformationModelPackage . INFORMATION_MODEL__DISPLAYNAME : $F6439 ( DISPLAYNAME_EDEFAULT , displayname ) case InformationModelPackage . INFORMATION_MODEL__CATEGORY : $F6439 ( CATEGORY_EDEFAULT , category ) case InformationModelPackage . INFORMATION_MODEL__PROPERTIES : $F6441 ( properties ) } $F6444 ( super , featureID ) }
public void addUnnamedTask ( TmmTask task ) { if ( unnamedTaskExecutor == null || unnamedTaskExecutor . isShutdown ( ) ) $F20182 ( unnamedTaskExecutor , createUnnamedTaskExecutor ) task . addListener ( this ) ; task . setState ( TaskState . QUEUED ) ; unnamedTaskExecutor . execute ( task ) ; }
public Path ( final Vertex v0 , final Vertex v1 , final EdgeSample edgeSample ) { $F10057 ( v0 ) $F10057 ( v1 ) if ( v0 . sample == null ) $F10056 $F10057 ( edgeSample ) if ( edgeSample . getSample ( ) == null ) $F10056 this . vertices = new Vertex [ ] { v0 , v1 } ; this . preds = getPredicates ( vertices ) ; this . edgeSample = edgeSample ; this . sumEstRead = v0 . sample . estCard + edgeSample . estRead ; this . sumEstCard = edgeSample . estCard ; this . sumEstCost = getCost ( this . sumEstRead , this . sumEstCard ) ; }
public boolean evaluate ( Map record ) { $F16628 ( recVal , record , keyField ) return op . evaluate ( this . val , recVal ) ; }
$F31396 ( str , retval , ch , i , s , Integer )
public $F1469 toCharArray $F72 { Charset utf8 = Charset . forName ( NUM00 ) ; CharBuffer charBuffer = utf8 . decode ( ByteBuffer . wrap ( buffer , offset , length ) ) ; $F1469 chars = new char [ charBuffer . remaining ( ) ] ; charBuffer . get ( chars ) ; return chars ; }
public static $F96 chars2utf $F21196 ( src , sindex , len ) { $F171903 ( dst , len ) int len1 = chars2utf ( src , sindex , dst , NUM00 , len ) ; $F2175 ( result , len1 ) $F135 ( System , dst , result , len1 ) return result ; }
private void readReference $F72 { String sql ; if ( Env . isBaseLanguage ( $F9205 ( Env ) ) ) sql = NUM00 + NUM00 ; else sql = $F39 + Env . getAD_Language ( Env . getCtx ( ) ) + NUM00 + NUM00 ; $F8728 ( v_value ) $F8728 ( v_name ) $F8728 ( v_description ) try { $F46 ( pstmt , DB , sql ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { $F27130 ( value , rs ) $F27130 ( name , rs ) $F27130 ( description , rs ) $F12553 ( description ) v_value . add ( value ) ; v_name . add ( name ) ; v_description . add ( description ) ; } $F59 ( rs ) $F59 ( pstmt ) } $F64 ( log , Level , sql , e ) $F115 ( size , v_value ) $F58180 ( s_value , size ) $F58180 ( s_name , size ) $F58180 ( s_description , size ) for ( $F119 ( i , size ) ) { $F73934 ( s_value , i , v_value ) $F73934 ( s_name , i , v_name ) $F73934 ( s_description , i , v_description ) } }
private CarbonDictionarySortInfo createColumnSortInfo ( CarbonDictionarySortModel [ ] dictionarySortModels ) { $F2027 sortIndex ; $F2027 sortIndexInverted ; Arrays . sort ( dictionarySortModels ) ; $F14244 ( sortIndex , dictionarySortModels ) $F14244 ( sortIndexInverted , dictionarySortModels ) for ( $F1139 ( i , dictionarySortModels ) ) { CarbonDictionarySortModel dictionarySortModel = dictionarySortModels [ i ] ; sortIndex [ i ] = dictionarySortModel . getKey ( ) ; sortIndexInverted [ dictionarySortModel . getKey ( ) - NUM00 ] = i + NUM00 ; } dictionarySortModels = null ; $F3807 sortIndexList = convertToList ( sortIndex ) ; $F3807 sortIndexInvertedList = convertToList ( sortIndexInverted ) ; return new CarbonDictionarySortInfo ( sortIndexList , sortIndexInvertedList ) ; }
private IntegerPolynomial MGF $F169066 ( seed , N , minCallsR , hashSeed ) { Digest hashAlg = params . hashAlg ; int hashLen = hashAlg . getDigestSize ( ) ; $F70838 ( buf , minCallsR , hashLen ) $F96 Z = hashSeed ? calcHash ( hashAlg , seed ) : seed ; int counter = NUM00 ; while ( counter < minCallsR ) { $F6163 ( hashAlg , Z ) putInt ( hashAlg , counter ) ; $F12490 ( hash , calcHash , hashAlg ) $F41437 ( System , hash , buf , counter , hashLen ) counter ++ ; } IntegerPolynomial i = new IntegerPolynomial ( N ) ; while ( _BOOL ) { int cur = NUM00 ; for ( $F15868 ( index , buf ) ) { int O = ( int ) buf [ index ] & NUM00 ; if ( O >= NUM00 ) $F1448 for ( $F6268 ( terIdx ) ) { int rem3 = O % NUM00 ; i . coeffs [ cur ] = rem3 - NUM00 ; cur ++ ; $F3627 ( cur , N , i ) O = ( O - rem3 ) / NUM00 ; } i . coeffs [ cur ] = O - NUM00 ; cur ++ ; $F3627 ( cur , N , i ) } $F232230 ( cur , N , i ) $F6163 ( hashAlg , Z ) putInt ( hashAlg , counter ) ; $F12490 ( hash , calcHash , hashAlg ) buf = hash ; counter ++ ; } }
public static void agentmain ( String agentArgs , Instrumentation inst ) throws Exception { synchronized ( JVMAgent . class ) { if ( instance == null ) { instance = new JVMAgent ( inst ) ; $F38783 ( waitForInstance ) } } }
public void close $F72 { Handler [ ] handlerArray = m_logger . getHandlers ( ) ; for ( $F1139 ( i , handlerArray ) ) { Handler h = handlerArray [ i ] ; $F1206 ( h ) $F59 ( h ) m_logger . removeHandler ( h ) ; } }
public String toString $F72 { $F1747 ( val ) if ( val instanceof Long || val instanceof Integer ) { return Long . toString ( val . longValue ( ) ) ; } $F50466 ( d , val ) if $F28102 ( Double , d ) return ( d > NUM00 ) ? NUM00 : NUM00 ; if $F35707 ( Double , d ) $F1278 $F23209 ( Double , d ) }
public static $F3803 splitText ( String text ) { int startLine = NUM00 ; int i = NUM00 ; $F1749 ( n , text ) $F8728 ( rc ) while ( i < n ) { switch $F31372 ( text , i ) { $F1262 i ++ ; if $F52566 ( i , n , text ) { i ++ ; } $F56997 ( rc , text , startLine , i ) startLine = i ; $F597 $F1262 i ++ ; if $F52566 ( i , n , text ) { i ++ ; } $F56997 ( rc , text , startLine , i ) startLine = i ; $F597 $F1267 i ++ ; } } if $F9615 ( startLine , text ) $F71145 ( rc ) else { $F56997 ( rc , text , startLine , i ) } return rc ; }
CountryCodeSource maybeStripInternationalPrefixAndNormalize ( StringBuilder number , String possibleIddPrefix ) { if $F1277 ( number ) { return CountryCodeSource . FROM_DEFAULT_COUNTRY ; } $F1150 ( m , PLUS_CHARS_PATTERN , number ) if $F54321 ( m ) { number . delete ( NUM00 , m . end ( ) ) ; normalize ( number ) ; return CountryCodeSource . FROM1BER_WITH_PLUS_SIGN ; } Pattern iddPattern = regexCache . getPatternForRegex ( possibleIddPrefix ) ; normalize ( number ) ; return parsePrefixAsIdd ( iddPattern , number ) ? CountryCodeSource . FROM1BER_WITH_IDD : CountryCodeSource . FROM_DEFAULT_COUNTRY ; }
$F1 public void write ( int value ) { $F211632 ( digest , value ) }
public boolean isManufactured ( boolean ignoreSupplierProducts ) { $F6261 supplierProducts = null ; try { supplierProducts = product . getRelated ( NUM00 , UtilMisc . toMap ( NUM00 , NUM00 ) , UtilMisc . toList ( NUM00 ) , _BOOL ) ; } catch ( GenericEntityException gee ) { $F172017 ( Debug , module ) } supplierProducts = EntityUtil . filterByDate ( supplierProducts , UtilDateTime . nowTimestamp ( ) , NUM00 , NUM00 , _BOOL ) ; return $F3816 ( childrenNodes ) && ( ignoreSupplierProducts || UtilValidate . isEmpty ( supplierProducts ) ) ; }
private void addCodeFromField ( StringBuilder sb , Field f ) { try { sb . append ( $F43113 ( f ) + f . getInt ( KeyEvent . class ) ) ; } catch ( IllegalArgumentException e ) $F302 ( e ) $F153656 ( e ) $F84 ( sb ) }
protected boolean scrollUp ( TextView widget , Spannable buffer , int amount ) { final Layout layout = widget . getLayout ( ) ; final int top = widget . getScrollY ( ) ; int topLine = layout . getLineForVertical ( top ) ; if ( layout . getLineTop ( topLine ) == top ) { topLine -= NUM00 ; } if ( topLine >= NUM00 ) { topLine = Math . max ( topLine - amount + NUM00 , NUM00 ) ; Touch . scrollTo ( widget , layout , widget . getScrollX ( ) , layout . getLineTop ( topLine ) ) ; return _BOOL ; } return _BOOL ; }
public void load ( String filename ) { ++ numMappings ; loadClassFile ( filename ) ; }
protected void fillFaceToolBar ( JToolBar faceTB , ButtonGroup bg ) { for ( EditToolLoader loader : loaderList ) { $F806 classnames = loader . getEditableClasses ( ) ; for ( $F1139 ( i , classnames ) ) { ImageIcon icon = loader . getIcon ( classnames [ i ] ) ; JToggleButton btn = new JToggleButton ( icon , _BOOL ) ; btn . setToolTipText ( loader . getPrettyName ( classnames [ i ] ) ) ; btn . setFocusable ( _BOOL ) ; btn . setActionCommand ( classnames [ i ] ) ; btn . addActionListener ( this ) ; bg . add ( btn ) ; faceTB . add ( btn ) ; } } }
public void writeToFile ( File filename ) throws IOException { FileUtils . stringToFile ( mText . toString ( ) , filename ) ; }
protected void transformRectsTouch ( ArrayList < RectF > rects ) { for ( $F2277 ( i , rects ) ) { mMatrixTouch . mapRect ( rects . get ( i ) ) ; } }
$F1 public String toString $F72 { $F83 ( buf ) for ( NameValuePair pair : nameValuePairList ) { $F84 ( buf ) $F167270 ( buf , pair ) $F84 ( buf ) $F84 ( buf ) buf . append ( $F25312 ( getQuotedAttributeValue , pair ) ) ; $F84 ( buf ) } $F92 ( buf ) }
$F1 public final int arrayOffset $F72 $F2905 ( protectedArrayOffset )
public DOMTestDocumentBuilderFactory newInstance $F230110 ( newSettings ) throws DOMTestIncompatibleException { $F1933 ( newSettings , this ) $F230109 mergedSettings = mergeSettings ( newSettings ) ; return new BatikTestDocumentBuilderFactory ( mergedSettings ) ; }
public $F5415 valueArray $F74143 ( array ) { if ( array == null || array . length != size ( ) ) { $F189191 ( array , count ) } $F135 ( System , values , array , count ) return array ; }
public static Set < TypeVariable > methodTypeToTargets ( final AnnotatedExecutableType methodType ) { final List < AnnotatedTypeVariable > annotatedTypeVars = methodType . getTypeVariables ( ) ; final Set < TypeVariable > targets = new $F22301 $F716 ( annotatedTypeVars ) ; for ( final AnnotatedTypeVariable atv : annotatedTypeVars ) { targets . add ( atv . getUnderlyingType ( ) ) ; } return targets ; }
private void validateTableMetaDataSingleRow ( String tableNamePattern , $F806 types , Map < TableMetaData , Object > validationRules ) throws Exception { checkValidationRulesComplete ( validationRules ) ; try ( ResultSet tables = dbmd . getTables ( null , null , tableNamePattern , types ) ) { $F32625 ( assertTrue , tables ) validateRowValues ( tables , validationRules ) ; $F32625 ( assertFalse , tables ) } }
public void flush $F72 throws IOException { try { $F11584 ( _writer , _buffer , _pos ) $F1206 ( _writer ) } catch ( IOException except ) { $F22996 ( _exception , except ) throw except ; } _pos = NUM00 ; }
private JavaScriptRelationSets $F72 $F845
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private JMenu makeLogLevelMenu $F72 { return new LogLevelMenu $F72 ; }
$F1 public void close $F72 throws IOException { synchronized ( lock ) { buf = null ; $F59 ( in ) } }
public DGetAlias ( JFrame parent , String title , String alias ) { super ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; initComponents ( alias ) ; }
$F141880 ( closeable , rethrown )
public static ArrayList < Hop > deepCopyHopsDag ( ArrayList < Hop > hops ) throws HopsException { ArrayList < Hop > ret = new ArrayList < Hop > $F72 ; try { HashMap < Long , Hop > memo = new HashMap < Long , Hop > $F72 ; for ( Hop hopRoot : hops ) $F12366 ( ret , rDeepCopyHopsDag , hopRoot , memo ) } catch ( Exception ex ) { throw new HopsException ( ex ) ; } return ret ; }
public void addAll ( T ... items ) { if ( mEventDelegate != null ) mEventDelegate . addData ( items == null ? NUM00 : items . length ) ; if $F180527 ( items ) { synchronized ( mLock ) $F122380 ( Collections , mObjects , items ) } $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
private void replaceImpl ( final int startIndex , final int endIndex , final int removeLen , final String insertStr , final int insertLen ) { final int newSize = size - removeLen + insertLen ; if ( insertLen != removeLen ) { ensureCapacity ( newSize ) ; System . arraycopy ( buffer , endIndex , buffer , startIndex + insertLen , size - endIndex ) ; size = newSize ; } if ( insertLen > NUM00 ) { $F234786 ( insertStr , insertLen , buffer , startIndex ) } }
public void updateCheque_DD_Card_Deposit_Receipt ( final Map instrumentDetailsMap ) $F86383 ( updateInstrumentAndPayinSql , instrumentDetailsMap , addToBankReconcilationSQL )
public void testtestIsLast $F72 throws SQLException { assertFalse ( target . isLast ( ) ) ; target . absolute ( - NUM00 ) ; assertTrue ( target . isLast ( ) ) ; assertFalse ( emptyTarget . isLast ( ) ) ; $F7683 ( assertFalse , emptyTarget ) assertFalse ( emptyTarget . isLast ( ) ) ; try { $F59 ( target ) target . isLast ( ) ; fail ( NUM00 ) ; } $F31184 }
public final void addHelperText $F134304 ( helperText ) { ensureNotNull ( helperText , NUM00 ) ; ensureNotEmpty ( helperText , NUM00 ) ; if $F2200 ( helperTexts , helperText ) $F36131 ( helperTexts , helperText , verifyPasswordStrength ) }
void waitForLogEntry ( int index , int timeout ) throws GondolaException , InterruptedException , TimeoutException { reset ( ) ; this . index = index ; long endTs = timeout < NUM00 ? Long . MAX_VALUE : gondola . getClock ( ) . now ( ) + timeout ; $F790 ( lock ) try { while ( status == Command . STATUS_NONE && gondola . getClock ( ) . now ( ) < endTs ) { if ( timeout < NUM00 ) $F24081 ( updateCond ) else { updateCond . await ( timeout , TimeUnit . MILLISECONDS ) ; } } if ( this . index != index ) $F21338 ( logger ) } $F796 ( lock ) switch ( status ) { case Command . STATUS_NONE : status = Command . STATUS_TIMEOUT ; throw new TimeoutException $F4456 ( String , timeout , index ) ; case Command . STATUS_NOT_LEADER : assert _BOOL ; $F597 case Command . STATUS_SLAVE_MODE : throw new GondolaException ( GondolaException . Code . SLAVE_MODE , cmember . memberId ) ; case Command . STATUS_ERROR : throw new IllegalStateException ( NUM00 + index + NUM00 + errorMessage ) ; case Command . STATUS_OK : $F597 } }
public static String generateNativeGuid ( DbClient dbClient , Volume volume ) throws IOException { StorageSystem device = dbClient . queryObject ( $F41797 , volume . getStorageController ( ) ) ; return String . format ( NUM00 + VOLUME + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , volume . getNativeId ( ) ) ; }
public AgentMappings saveAgentMappings ( AgentMappings agentMappings , boolean checkEnvironments ) throws BusinessException , JAXBException , IOException { if ( checkEnvironments ) { checkEnvironments ( agentMappings ) ; } AgentMappings current ; do { $F16478 ( current , agentMappingsReference ) if ( current . getRevision ( ) != agentMappings . getRevision ( ) ) { throw new BusinessException ( NUM00 , ConfigurationInterfaceErrorCodeEnum . REVISION_CHECK_FAILED ) ; } } while $F59753 ( agentMappingsReference , current , agentMappings ) ; agentMappings . setRevision ( agentMappings . getRevision ( ) + NUM00 ) ; saveAgentMapping ( agentMappings ) ; publishAgentMappingsUpdateEvent ( ) ; return agentMappings ; }
public E push ( E object ) { addElement ( object ) ; return object ; }
protected void newCertBtnListener $F72 { NewCertificateDialogData data = new NewCertificateDialogData $F72 ; NewCertificateDialog dialog = new NewCertificateDialog ( getShell ( ) , data , NUM00 ) ; int returnCode = dialog . open ( ) ; if ( returnCode == Window . OK ) { String certPath = data . getCerFilePath ( ) ; certTxt . setText ( certPath != null ? $F2934 ( certPath ) : certPath ) ; certInfoTxt . setText ( $F47592 ( getCertInfo , certTxt ) ) ; } }
public static void generateMov ( final ITranslationEnvironment environment , final long baseOffset , final IInstruction instruction , $F7332 ( instructions ) ) throws InternalTranslationException { $F1832 ( Preconditions , environment ) $F1832 ( Preconditions , instruction ) $F1832 ( Preconditions , instructions ) long reilOffset = baseOffset ; final List < ? extends IOperandTree > operands = instruction . getOperands ( ) ; final TranslationResult loadSource = Helpers . translateOperand ( environment , reilOffset , operands . get ( NUM00 ) , _BOOL ) ; instructions . addAll ( loadSource . getInstructions ( ) ) ; $F283237 ( reilOffset , baseOffset , instructions ) final TranslationResult loadDest = Helpers . translateOperand ( environment , reilOffset , operands . get ( NUM00 ) , _BOOL ) ; instructions . addAll ( loadDest . getInstructions ( ) ) ; $F283237 ( reilOffset , baseOffset , instructions ) Helpers . writeBack ( environment , reilOffset , operands . get ( NUM00 ) , loadSource . getRegister ( ) , loadDest . getSize ( ) , loadDest . getAddress ( ) , loadDest . getType ( ) , instructions ) ; }
public void characters $F62353 ( start , length ) throws $F2253 { $F18748 ( m_shouldProcess ) XSLTElementProcessor elemProcessor = getCurrentProcessor ( ) ; XSLTElementDef def = elemProcessor . getElemDef ( ) ; if ( def . getType ( ) != XSLTElementDef . T_PCDATA ) elemProcessor = def . getProcessorFor ( null , NUM00 ) ; if ( null == elemProcessor ) { if ( ! XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) error ( XSLMessages . createMessage ( XSLTErrorResources . ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION , null ) , null ) ; } else elemProcessor . characters ( this , ch , start , length ) ; }
public boolean removeEntry ( int xIndex , int dataSetIndex ) { if $F6389 ( dataSetIndex , mDataSets ) return _BOOL ; $F6391 ( dataSet , mDataSets , dataSetIndex ) Entry e = dataSet . getEntryForXIndex ( xIndex ) ; return removeEntry ( e , dataSetIndex ) ; }
public void testBug68562 $F72 throws Exception { testBug68562BatchWithSize ( NUM00 ) ; testBug68562BatchWithSize ( NUM00 ) ; }
public Vec2 toVector ( Point2D v ) { return new Vec2 ( $F59993 ( toMeters , v ) , toMeters ( - v . getY ( ) ) ) ; }
$F1 public void terminateAnyRestoreSessions ( StorageSystem storage , BlockObject from , URI volume , TaskCompleter taskCompleter ) throws Exception { BlockObject blockObject = BlockObject . fetch ( _dbClient , volume ) ; Collection $F87269 syncObjects = null ; if ( storage . checkIfVmax3 ( ) ) { syncObjects = _helper . getSettingsDefineStatePaths ( storage , blockObject , ( BlockSnapshot ) from ) ; } else { syncObjects = getRestoredOrMixedStateSyncObjects ( storage , blockObject ) ; } for ( CIMObjectPath syncObject : syncObjects ) { resumeSnapshot ( storage , from , blockObject , syncObject , taskCompleter ) ; } }
public static $F4203 $F28904 toSet ( T obj1 , T obj2 , T obj3 , T obj4 , T obj5 , T obj6 ) { $F78907 ( theSet ) theSet . add ( obj1 ) ; theSet . add ( obj2 ) ; theSet . add ( obj3 ) ; theSet . add ( obj4 ) ; theSet . add ( obj5 ) ; theSet . add ( obj6 ) ; return theSet ; }
protected void writeGraphicCtrlExt $F72 throws IOException { $F25097 ( out ) $F25097 ( out ) $F25097 ( out ) int transp , disp ; if ( transparent == - NUM00 ) $F18712 ( transp , disp ) else $F18712 ( transp , disp ) if ( dispose >= NUM00 ) { disp = dispose & NUM00 ; } disp <<= NUM00 ; out . write ( NUM00 | disp | NUM00 | transp ) ; writeShort ( delay ) ; out . write ( transIndex ) ; $F25097 ( out ) }
public final double doOperation $F72 throws OperatorFailedException { int index ; if ( updateMap == null ) { index = MathUtils . nextInt ( parameter . getDimension ( ) ) ; } else { index = updateMap . get ( MathUtils . nextInt ( updateMapSize ) ) ; } double draw = ( NUM00 * MathUtils . nextDouble ( ) - NUM00 ) * windowSize ; double newValue = parameter . getParameterValue ( index ) + draw ; final $F62092 bounds = parameter . getBounds ( ) ; final double lower = ( lowerOperatorBound == null ? bounds . getLowerLimit ( index ) : Math . max ( bounds . getLowerLimit ( index ) , lowerOperatorBound ) ) ; final double upper = ( upperOperatorBound == null ? bounds . getUpperLimit ( index ) : Math . min ( bounds . getUpperLimit ( index ) , upperOperatorBound ) ) ; if ( condition == BoundaryCondition . reflecting ) { newValue = reflectValue ( newValue , lower , upper ) ; } else if ( condition == BoundaryCondition . absorbing && ( newValue < lower || newValue > upper ) ) $F1083 else if ( newValue < lower || newValue > upper ) $F62102 parameter . setParameterValue ( index , newValue ) ; $F1082 }
$F21572 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public $F5363 injectables $F72 $F12523 ( Collections )
private void updateEffectiveDimensions $F72 { effectiveWidth = Math . max ( NUM00 , width - leftBorder - rightBorder ) ; effectiveHeight = Math . max ( NUM00 , height - topBorder - bottomBorder ) ; }
public void addAttribute ( AttributeInfo info ) { $F92209 ( attribute ) AttributeInfo . remove ( attribute , info . getName ( ) ) ; attribute . add ( info ) ; }
public void addLine ( String text ) throws BadLocationException { if ( $F6035 ( text ) || text . equals ( NUM00 ) ) $F932 document . replace ( document . getLength ( ) , NUM00 , text ) ; }
protected void muteButtonPressed ( ActionEvent e ) { JToggleButton b = ( JToggleButton ) e . getSource ( ) ; log . debug ( NUM00 + b . isSelected ( ) ) ; firePropertyChange ( PropertyChangeID . MUTE , $F151781 ( b ) , b . isSelected ( ) ) ; }
public TwoDPoint ( String s ) { $F17727 ( st , s ) x = $F245302 ( Double , st ) ; y = $F245302 ( Double , st ) ; }
private void readObject ( final ObjectInputStream in ) throws $F6427 { $F6428 ( in ) init ( ) ; }
public static boolean isClassSupport ( String clzName ) { try { Class . forName ( clzName ) ; return _BOOL ; } $F17063 ( _BOOL ) }
public void addPopupListener ( final PopupListener listener ) $F2202 ( popupListeners , listener )
public static $F96 decode $F97 ( data ) { int len = data . length / NUM00 * NUM00 ; $F39018 ( bOut , len ) try { encoder . decode ( data , NUM00 , data . length , bOut ) ; } catch ( Exception e ) { throw new DecoderException $F11592 ( e ) ; } $F11316 ( bOut ) }
public static String buildSelectorFromAttributeTypeAndValue ( String attributeType , String attributeValue ) { $F83 ( strb ) strb . append ( OPEN_BRACKET ) ; strb . append ( attributeType ) ; strb . append ( EQUAL ) ; strb . append ( attributeValue ) ; strb . append ( CLOSE_BRACKET ) ; $F92 ( strb ) }
public static Bitmap scaleFit ( Bitmap src , int maxW , int maxH ) { float ratio = Math . min ( maxW / $F52896 ( src ) , maxH / $F52899 ( src ) ) ; int newW = $F85502 ( src , ratio ) ; int newH = $F85503 ( src , ratio ) ; return scale ( src , newW , newH ) ; }
public File ( String dirPath , String name ) { $F896 ( name ) if $F4251 ( dirPath ) { this . path = fixSlashes ( name ) ; } else if $F2979 ( name ) { this . path = fixSlashes ( dirPath ) ; } else { this . path = fixSlashes ( join ( dirPath , name ) ) ; } }
void decodeAttributeBody $F65230 ( attributeValue , offset , length ) $F65231 ( username , length , System , attributeValue , offset )
protected synchronized $F96 engineGenerateSeed ( int numBytes ) { $F96 myBytes ; if ( numBytes < NUM00 ) { throw new NegativeArraySizeException $F59159 ( Integer , numBytes ) ; } if ( numBytes == NUM00 ) { return EmptyArray . BYTE ; } if ( myRandom == null ) { myRandom = new SHA1PRNG_SecureRandomImpl $F72 ; myRandom . engineSetSeed ( getRandomBytes ( DIGEST_LENGTH ) ) ; } $F1325 ( myBytes , numBytes ) myRandom . engineNextBytes ( myBytes ) ; return myBytes ; }
public static String normalizeInet4Address ( String ip4String ) { final $F2027 octets = parseInet4Address ( ip4String ) ; $F1338 ( octets ) $F83 ( sb ) for ( $F6268 ( i ) ) $F70285 ( i , sb , octets ) $F92 ( sb ) }
public static $F2027 shuffle $F23416 ( input ) { $F3807 vals = new $F15272 ( input . length ) ; $F46150 ( i , input , vals ) Collections . shuffle ( vals , SEEDED_RANDOM ) ; $F22974 ( copy , input ) for ( $F1139 ( i , input ) ) $F15302 ( copy , i , vals ) return copy ; }
public boolean offer ( PooledConnection pooledConnection ) { acquiredConnections . remove ( pooledConnection ) ; $F8563 ( offer , queue , pooledConnection ) if ( ! offer ) $F47532 ( pooledConnection ) if $F27748 ( isTerminating ) { PooledConnection poll = queue . poll ( ) ; $F92075 ( poll ) } return offer ; }
private int parseStyleInDefaultWorkspace ( GeoServerRESTReader reader , int count , List < StyleWrapper > styleList ) { RESTStyleList geoServerStyleList = reader . getStyles ( ) ; for ( String style : geoServerStyleList . getNames ( ) ) { StyleWrapper newStyleWrapper = new StyleWrapper ( DEFAULT_WORKSPACE_NAME , style ) ; styleList . add ( newStyleWrapper ) ; if ( parentObj != null ) { parentObj . readStylesProgress ( connection , count , count ) ; } count ++ ; } return count ; }
private ClassSignature loadClassFromJigsaw ( String classname ) throws IOException { $F13264 ( method_Class_getModule , method_Module_getName ) $F6970 ( clazz ) ; final String moduleName ; try { clazz = Class . forName ( classname , _BOOL , loader ) ; final Object module = method_Class_getModule . invoke ( clazz ) ; moduleName = ( String ) method_Module_getName . invoke ( module ) ; } $F34300 return new ClassSignature ( clazz , AsmUtils . isRuntimeModule ( moduleName ) ) ; }
public void testConnectANTSensor_Cadence $F72 { if ( ! runTest ) { Log . d ( TAG , BigTestUtils . DISABLE_MESSAGE ) ; $F665 } useANTSeonsor ( ) ; assertTrue ( checkSensorsStatus_notRecording ( ) ) ; checkANTSensorsStatus ( R . id . sensor_state_cadence ) ; }
$F1 public boolean equals ( Object obj ) { $F3627 ( this , obj , _BOOL ) $F1933 ( obj , _BOOL ) $F34838 ( getClass , obj , _BOOL ) Diff other = ( Diff ) obj ; $F12734 ( operation , other , _BOOL ) $F56936 ( text , other , _BOOL ) return _BOOL ; }
public void clearAttributeSpecs $F72 { if ( m_attributeSpecs == null ) { m_attributeSpecs = new ArrayList < AttributeSpec > $F72 ; } $F725 ( m_attributeSpecs ) }
public void loadProperties ( boolean silent ) { loadPropertiesFile ( System . getProperty ( PROPERTIES_FILE , NUM00 ) , silent ) ; initializeProperties ( ) ; }
$F1 public void start $F72 { try { JournalClientEndpoint endpoint = connect ( ) ; if ( endpoint != null ) { OutputStream os ; _os = os = endpoint . startMessage ( ) ; if ( os != null ) $F12032 ( os ) } } catch ( Exception e ) { log . finer ( e . toString ( ) ) ; } }
static private int readBytes ( int $F184368 , int len , InputStream is ) throws IOException { byte $F46499 = new byte [ len ] ; if ( is . read ( buf , NUM00 , len ) < len ) $F7629 for ( $F119 ( i , len ) ) { c [ i ] = buf [ i ] & NUM00 ; } $F1082 }
public static void sort $F22194 ( array ) { if $F3305 ( array ) $F57005 ( Arrays , array , INSTANCE ) }
public static int expectedSizeOfProbabilityTable ( RandomVariable ... vars ) { int expectedSizeOfDistribution = NUM00 ; if ( null != vars ) { for ( RandomVariable rv : vars ) { if ( ! ( rv . getDomain ( ) instanceof FiniteDomain ) ) $F18931 ( rv ) FiniteDomain d = ( FiniteDomain ) rv . getDomain ( ) ; expectedSizeOfDistribution *= d . size ( ) ; } } return expectedSizeOfDistribution ; }
native private static void initialize ( String applicationId ) ;
$F107211 ( md5Model , animModel , defaultColour , invJointMatrices , calcInJointMatrices , animatedFrames , processAnimationFrames , list , md5Mesh , mesh , generateMesh , handleTexture , meshes , result )
static String encodeHighLevel ( String msg , Compaction compaction , Charset encoding ) throws WriterException { $F80469 ( sb , msg ) if ( encoding == null ) { encoding = DEFAULT_ENCODING ; } else if $F2137 ( DEFAULT_ENCODING , encoding ) { CharacterSetECI eci = CharacterSetECI . getCharacterSetECIByName ( encoding . name ( ) ) ; if ( eci != null ) { encodingECI ( eci . getValue ( ) , sb ) ; } } $F1749 ( len , msg ) int p = NUM00 ; int textSubMode = SUBMODE_ALPHA ; $F5475 ( bytes ) if ( compaction == Compaction . TEXT ) { encodeText ( msg , p , len , sb , textSubMode ) ; } else if ( compaction == Compaction . BYTE ) { bytes = msg . getBytes ( encoding ) ; encodeBinary ( bytes , p , bytes . length , BYTE_COMPACTION , sb ) ; } else if ( compaction == Compaction . NUMERIC ) { $F36813 ( sb , LATCH_TO1ERIC ) encodeNumeric ( msg , p , len , sb ) ; } else { int encodingMode = TEXT_COMPACTION ; while ( p < len ) { int n = determineConsecutiveDigitCount ( msg , p ) ; if ( n >= NUM00 ) { $F36813 ( sb , LATCH_TO1ERIC ) encodingMode = NUMERIC_COMPACTION ; textSubMode = SUBMODE_ALPHA ; encodeNumeric ( msg , p , n , sb ) ; p += n ; } else { int t = determineConsecutiveTextCount ( msg , p ) ; if ( t >= NUM00 || n == len ) { if ( encodingMode != TEXT_COMPACTION ) { $F36813 ( sb , LATCH_TO_TEXT ) encodingMode = TEXT_COMPACTION ; textSubMode = SUBMODE_ALPHA ; } textSubMode = encodeText ( msg , p , t , sb , textSubMode ) ; p += t ; } else { if ( bytes == null ) $F12169 ( bytes , msg , encoding ) int b = determineConsecutiveBinaryCount ( msg , bytes , p ) ; $F85331 ( b ) if ( b == NUM00 && encodingMode == TEXT_COMPACTION ) { encodeBinary ( bytes , p , NUM00 , TEXT_COMPACTION , sb ) ; } else { encodeBinary ( bytes , p , b , encodingMode , sb ) ; encodingMode = BYTE_COMPACTION ; textSubMode = SUBMODE_ALPHA ; } p += b ; } } } } $F92 ( sb ) }
private int readAnnotationValue ( int v , final $F1469 buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & NUM00 ) { $F1262 return v + NUM00 ; $F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; $F1262 return readAnnotationValues ( v + NUM00 , buf , _BOOL , null ) ; $F1267 return v + NUM00 ; } } switch $F44579 ( b , v ) { $F1262 $F1262 $F1262 $F1262 av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Byte ( ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == NUM00 ? Boolean . FALSE : Boolean . TRUE ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Short ( ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , new Character ( ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , readUTF8 ( v , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + NUM00 , buf ) ) ; v += NUM00 ; $F597 $F1262 av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += NUM00 ; $F597 $F1262 v = readAnnotationValues ( v + NUM00 , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; $F597 $F1262 int size = readUnsignedShort ( v ) ; v += NUM00 ; if ( size == NUM00 ) { return readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & NUM00 ) { $F1262 $F2175 ( bv , size ) for ( i = NUM00 ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , bv ) ; -- v ; $F597 $F1262 $F57515 ( zv , size ) for ( i = NUM00 ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != NUM00 ; v += NUM00 ; } av . visit ( name , zv ) ; -- v ; $F597 $F1262 $F5099 ( sv , size ) for ( i = NUM00 ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , sv ) ; -- v ; $F597 $F1262 $F18064 ( cv , size ) for ( i = NUM00 ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , cv ) ; -- v ; $F597 $F1262 $F4120 ( iv , size ) for ( i = NUM00 ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , iv ) ; -- v ; $F597 $F1262 $F12300 ( lv , size ) for ( i = NUM00 ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += NUM00 ; } av . visit ( name , lv ) ; -- v ; $F597 $F1262 $F25850 ( fv , size ) for ( i = NUM00 ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += NUM00 ; } av . visit ( name , fv ) ; -- v ; $F597 $F1262 $F9662 ( dv , size ) for ( i = NUM00 ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += NUM00 ; } av . visit ( name , dv ) ; -- v ; $F597 $F1267 v = readAnnotationValues ( v - NUM00 , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public NetworkConnectivityListener $F72 { mState = State . UNKNOWN ; }
Vector processSIMPLEPATTERNLIST $F40351 ( handler , uri , name , rawName , value , owner ) throws $F2253 { try { $F17727 ( tokenizer , value ) $F17729 ( nPatterns , tokenizer ) $F289085 ( patterns , nPatterns ) for ( $F119 ( i , nPatterns ) ) { XPath pattern = handler . createMatchPatternXPath ( tokenizer . nextToken ( ) , owner ) ; patterns . addElement ( pattern ) ; } return patterns ; } $F2262 ( te ) }
protected ASN1Sequence ( ASN1Encodable [ ] array ) { for ( $F15868 ( i , array ) ) { $F15869 ( seq , array , i ) } }
public void addCopy ( IResource copy , CopyArguments arguments ) { if ( fCopy == null ) { $F136190 ( fCopy ) $F136190 ( fCopyArguments ) } fCopy . add ( copy ) ; fCopyArguments . add ( arguments ) ; addCopyDelta ( copy , arguments ) ; }
$F1 public void write $F24576 ( buffer , offset , length ) throws IOException { while $F73749 ( mByteToSkip , mByteToCopy , mState , STATE_JPEG_DATA , length ) { $F73751 ( mByteToSkip , byteToProcess , length , offset ) if ( mByteToCopy > NUM00 ) { int byteToProcess = length > mByteToCopy ? mByteToCopy : length ; out . write ( buffer , offset , byteToProcess ) ; length -= byteToProcess ; mByteToCopy -= byteToProcess ; offset += byteToProcess ; } $F32905 ( length ) switch ( mState ) { case STATE_SOI : int byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; offset += byteRead ; length -= byteRead ; $F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73759 ( mBuffer , JpegHeader ) $F73762 ( out , mBuffer ) mState = STATE_FRAME_HEADER ; $F23501 ( mBuffer ) writeExifData ( ) ; $F597 case STATE_FRAME_HEADER : byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; offset += byteRead ; length -= byteRead ; if $F73765 ( mBuffer ) { $F73767 ( tag , mBuffer ) if ( tag == JpegHeader . EOI ) { $F73762 ( out , mBuffer ) $F23501 ( mBuffer ) } } $F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73767 ( marker , mBuffer ) if ( marker == JpegHeader . APP1 ) $F125654 ( mByteToSkip , mBuffer , mState , STATE_JPEG_DATA ) else if $F125655 ( JpegHeader , marker ) { $F73762 ( out , mBuffer ) $F73777 ( mByteToCopy , mBuffer ) } else { $F73762 ( out , mBuffer ) mState = STATE_JPEG_DATA ; } $F23501 ( mBuffer ) } } if ( length > NUM00 ) $F21537 ( out , buffer , offset , length ) }
protected $F8748 datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; int numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; $F125783 ( result ) Instances train = null ; Instances trainCopy = null ; ASSearch search = null ; ASEvaluation evaluation = null ; try { train = makeTestDataset ( NUM00 , numTrain , nominalPredictor ? getNumNominal ( ) : NUM00 , numericPredictor ? getNumNumeric ( ) : NUM00 , stringPredictor ? getNumString ( ) : NUM00 , datePredictor ? getNumDate ( ) : NUM00 , relationalPredictor ? getNumRelational ( ) : NUM00 , numClasses , classType , multiInstance ) ; if ( missingLevel > NUM00 ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } search = ASSearch . makeCopies ( getSearch ( ) , NUM00 ) [ NUM00 ] ; evaluation = ASEvaluation . makeCopies ( getEvaluator ( ) , NUM00 ) [ NUM00 ] ; trainCopy = new Instances ( train ) ; } catch ( Exception ex ) $F220112 ( ex ) try { search ( search , evaluation , trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; } catch ( Exception ex ) { println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; if ( m_Debug ) { println ( NUM00 ) ; print ( NUM00 ) ; $F5354 ( println , ex ) println ( NUM00 ) ; println ( $F369 ( trainCopy ) ) ; println ( $F369 ( train ) ) ; } } return result ; }
public void insert_trace ( Polyline p_polyline , int p_layer , int p_half_width , NetNosList p_net_no_arr , int p_clearance_class , ItemFixState p_fixed_state ) { BrdTracep new_trace = insert_trace_without_cleaning ( p_polyline , p_layer , p_half_width , p_net_no_arr , p_clearance_class , p_fixed_state ) ; $F8249 ( new_trace ) new_trace . normalize ( changed_area . get_area ( p_layer ) ) ; }
void sendTransmit ( MultiplexConnectionInfo info , byte $F46499 , int off , int len ) throws IOException { synchronized ( dataOut ) { if ( alive && ! info . closed ) try { dataOut . writeByte ( TRANSMIT ) ; dataOut . writeShort ( info . id ) ; dataOut . writeInt ( len ) ; dataOut . write ( buf , off , len ) ; $F1206 ( dataOut ) } catch ( IOException e ) { $F134796 ( multiplexLog , Log , e ) shutDown ( ) ; throw e ; } } }
public < T extends SQLException > T toFlatSQLException $F38789 ( type ) throws ClassCastException { return type . cast ( toFlatSQLException ( ) ) ; }
public void addTotalResultCountCookie ( WorkbenchRequest req , HttpServletResponse resp , int value ) { addCookie ( req , resp , NUM00 , String . valueOf ( value ) ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
abstract void startPoll ( int fd , int events ) ;
private Rectangle integerise ( Rectangle2D rect ) { int x0 = ( int ) Math . ceil ( rect . getMinX ( ) ) ; int y0 = ( int ) Math . ceil ( rect . getMinY ( ) ) ; int x1 = ( int ) Math . floor ( rect . getMaxX ( ) ) ; int y1 = ( int ) Math . floor ( rect . getMaxY ( ) ) ; return new Rectangle ( x0 , y0 , ( x1 - x0 ) , ( y1 - y0 ) ) ; }
$F1 public void mouseMoved ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
protected void validateConfig $F72 { A . notNull ( getStreamer ( ) , NUM00 ) ; A . notNull ( getIgnite ( ) , NUM00 ) ; $F18062 ( A , endpointUrl ) A . ensure ( getSingleTupleExtractor ( ) != null || getMultipleTupleExtractor ( ) != null , NUM00 ) ; $F1729 ( followParam , apiParams , SITE_USER_ID_KEY ) A . ensure ( followParam != null && followParam . matches ( NUM00 ) , NUM00 ) ; }
public $F2469 selectZero ( long rank , $F2469 dest , final int offset , final int length ) { $F116 ( length , dest ) long s = selectZero ( rank ) ; dest [ offset ] = s ; int curr = ( int ) ( s / Long . SIZE ) ; long window = ~ bits [ curr ] & - NUM00 < < s ; window &= window - NUM00 ; for ( $F119 ( i , length ) ) { while ( window == NUM00 ) window = ~ bits [ ++ curr ] ; dest [ offset + i ] = curr * Long . SIZE + Long . numberOfTrailingZeros ( window ) ; window &= window - NUM00 ; } return dest ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return NUM00 _FIELD ; $F3366 return SET_FIELD ; $F3366 return LIST_FIELD ; $F3366 return BINARY_FIELD ; $F20809 } }
public int size $F72 { synchronized ( children ) $F1652 ( children ) }
private String flattenComment ( String string ) { StringBuffer $F1289 ( buffer , string ) ; boolean skipAdjacentLineSeparator = _BOOL ; for ( $F1088 ( i , string ) ) { $F1280 ( c , string , i ) if $F37111 ( c ) { if ( ! skipAdjacentLineSeparator ) buffer . append ( Policy . bind ( NUM00 ) ) ; skipAdjacentLineSeparator = _BOOL ; } else $F40016 ( buffer , c , skipAdjacentLineSeparator , _BOOL ) } $F92 ( buffer ) }
private boolean isAccelerating ( SensorEvent event ) { float ax = event . values [ NUM00 ] ; float ay = event . values [ NUM00 ] ; float az = event . values [ NUM00 ] ; final double magnitude = $F16206 ( Math , ax , ay , az ) ; return magnitude > ACCELERATION_THRESHOLD ; }
$F1 public $F96 readByteArray ( String filePath , int length ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , length ) ; $F31057 ( byteBffer ) }
public void popDragEntry ( int index ) { if ( isIndexInBound ( index ) ) { mDraggedEntry = mDragEntries . get ( index ) ; mDraggedEntryIndex = index ; mDragEnteredEntryIndex = index ; markDropArea ( index ) ; } }
public void test_loadAndVerify_small_quadsMode $F72 throws Exception $F208250 ( resource , p , getProperties , AbstractTripleStore , doLoadAndVerifyTest )
public void addEmail ( EmailEntity email ) $F207 ( emails , email )
private static int manhattanDistance ( final int x1 , final int y1 , final int x2 , final int y2 ) { return Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public void putGrammar ( SchemaGrammar grammar ) { if ( grammar . getTargetNamespace ( ) == null ) fNoNSGrammar = grammar ; else fGrammarRegistry . put ( grammar . getTargetNamespace ( ) , grammar ) ; }
public JSONArray optJSONArray ( String key ) { Object o = opt ( key ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }
private void status $F72 { $F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) writeKeysWithPrefix ( NUM00 , NUM00 ) ; }
$F1 public void chartProgress ( ChartProgressEvent event ) $F845
void pushImportSource ( Source sourceFromURIResolver ) $F31742 ( m_importSourceStack , sourceFromURIResolver )
public static $F96 buildNalUnit $F24576 ( data , offset , length ) { $F96 nalUnit = new byte [ length + NAL_START_CODE . length ] ; $F7057 ( System , NAL_START_CODE , nalUnit ) System . arraycopy ( data , offset , nalUnit , NAL_START_CODE . length , length ) ; return nalUnit ; }
protected void doLogOobMessageOutbound ( Message message ) { if ( rpcLogger != null ) { rpcLogger . logOobMessage ( clientInfo , serverInfo , message , System . currentTimeMillis ( ) ) ; } }
$F1 public void stop $F72 { CountDownLatch latch = stopped ; Thread oldThread = thread . getAndUpdate ( null ) ; if ( oldThread != null && latch != null ) { try { latch . await ( NUM00 , TimeUnit . SECONDS ) ; } catch ( InterruptedException e ) { $F84406 ( Thread ) } } }
$F1 public $F96 encode ( BufferedImage bufferedImage ) throws IOException $F42436 ( outputStream , encode , bufferedImage )
private JsonParserException createHelpfulException ( char first , $F1469 expected , int failurePosition ) throws JsonParserException { StringBuilder errorToken = new StringBuilder ( first + ( expected == null ? NUM00 : $F626 ( expected , failurePosition ) ) ) ; while ( isAsciiLetter ( peekChar ( ) ) && $F3598 ( errorToken ) ) errorToken . append ( $F15478 ( advanceChar ) ) ; return createParseException ( null , NUM00 + errorToken + NUM00 + ( expected == null ? NUM00 : NUM00 + first + new String ( expected ) + NUM00 ) , _BOOL ) ; }
public void testConstructorBytesPositive3 $F72 { byte $F3009 = $F294877 ; byte $F3018 = $F294877 ; $F9144 ( aNumber , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public static void i $F3867 ( tag , s , args ) { if ( LOG . INFO >= LOGLEVEL ) Log . i ( tag , String . format ( s , args ) ) ; }
public void removeLifecycleListener ( LifecycleListener lifecycleListener ) $F106 ( lifecycleListeners , lifecycleListener )
private synchronized void initRegistry ( boolean force ) throws MatlabConnectionException { if ( _registry == null || force ) { try { _registry = LocalHostRMIHelper . createRegistry ( _options . getPort ( ) ) ; } catch ( Exception e ) { try { _registry = LocalHostRMIHelper . getRegistry ( _options . getPort ( ) ) ; } catch ( Exception ex ) { throw new MatlabConnectionException ( NUM00 , ex ) ; } } } }
public boolean phaseHasTurns ( IGame . Phase thisPhase ) { switch ( thisPhase ) { case PHASE_SET_ARTYAUTOHITHEXES : case PHASE_DEPLOY_MINEFIELDS : case PHASE_DEPLOYMENT : case PHASE_MOVEMENT : case PHASE_FIRING : case PHASE_PHYSICAL : case PHASE_TARGETING : case PHASE_OFFBOARD : return _BOOL ; $F1267 return _BOOL ; } }
public int read $F72 throws IOException { $F7468 ( ch1 , is ) $F7468 ( ch2 , is ) $F125151 ( ch2 ) $F61876 ( ch2 , ch1 ) }
public static boolean isUrl ( String resourceLocation ) { $F1933 ( resourceLocation , _BOOL ) $F72106 ( resourceLocation , CLASSPATH_URL_PREFIX , _BOOL ) try { new URL ( resourceLocation ) ; return _BOOL ; } catch ( MalformedURLException ex ) { return _BOOL ; } }
public static String encodeURL ( String uri ) { CharBuffer cb = CharBuffer . allocate ( ) ; for ( $F1088 ( i , uri ) ) { $F1280 ( ch , uri , i ) switch ( ch ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F84 ( cb ) $F7002 ( cb , encodeHex , ch ) $F6407 ( cb , encodeHex , ch ) $F597 $F38142 ( cb , ch ) } } return cb . close ( ) ; }
public void close $F72 throws IOException { $F7254 ( closed ) $F7254 ( queuedForCleanup ) try { if ( expected > count ) { long nskip = expected - count ; if ( nskip <= available ( ) ) { do $F845 while ( ( nskip = ( expected - count ) ) > NUM00 && skip ( $F102434 ( Math , nskip , available ) ) > NUM00 ) ; } else if ( expected <= KeepAliveStreamCleaner . MAX_DATA_REMAINING && ! hurried ) { queueForCleanup ( new KeepAliveCleanerEntry ( this , hc ) ) ; } else { hc . closeServer ( ) ; } } if ( ! closed && ! hurried && ! queuedForCleanup ) { hc . finished ( ) ; } } finally { if ( pi != null ) pi . finishTracking ( ) ; if ( ! queuedForCleanup ) { in = null ; hc = null ; closed = _BOOL ; } } }
public boolean isPublic $F72 { return $F57120 ( Modifier , _method ) ; }
private $F131 initializeCallerHierarchyRoots ( Map < String , Map < String , Set $F115413 > > callerMap ) { List < TreeElement < SourceMethodNode , SourceMethodNode > > roots = new ArrayList < TreeElement < SourceMethodNode , SourceMethodNode > > $F72 ; CallerHierarchy callerHierarchy = ( CallerHierarchy ) fInput ; SourceMethodNode rootNode = callerHierarchy . getRoot ( ) ; Set < SourceMethodNode > processedNodes = new HashSet < SourceMethodNode > $F72 ; TreeElement < SourceMethodNode , SourceMethodNode > root = initializeCallerHierarchy ( rootNode , processedNodes , callerMap ) ; return $F8844 ( root ) ; }
private $F14699 reduceWithDouglasPeuker ( $F14699 entries , double epsilon ) { if ( epsilon <= NUM00 || $F6213 ( entries ) ) { return entries ; } keep [ NUM00 ] = _BOOL ; keep [ $F2281 ( entries ) ] = _BOOL ; algorithmDouglasPeucker ( entries , epsilon , NUM00 , $F2281 ( entries ) ) ; $F86990 ( reducedEntries ) for ( $F2277 ( i , entries ) ) { if ( keep [ i ] ) { $F14726 ( curEntry , entries , i ) reducedEntries . add ( new Entry ( curEntry . getVal ( ) , curEntry . getXIndex ( ) ) ) ; } } return reducedEntries ; }
public static $F1986 computeLogAmplitudeSpectrum $F10212 ( signal ) { $F2291 ( spectrum , computeAmplitudeSpectrum , signal ) for ( $F1139 ( i , spectrum ) ) { spectrum [ i ] = Math . log ( spectrum [ i ] ) ; } return spectrum ; }
private Segment createMemorySegment ( SegmentDescriptor descriptor ) { File segmentFile = SegmentFile . createSegmentFile ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ; Buffer buffer = HeapBuffer . allocate ( Math . min ( DEFAULT_BUFFER_SIZE , descriptor . maxSegmentSize ( ) ) , Integer . MAX_VALUE ) ; descriptor . copyTo ( buffer ) ; Segment segment = new Segment ( new SegmentFile ( segmentFile ) , buffer . slice ( ) , descriptor , createIndex ( descriptor ) , new OffsetPredicate $F72 , serializer . clone ( ) , this ) ; $F7028 ( LOGGER , segment ) return segment ; }
public static void init ( final AsyncContext context ) { final SecurityContext security = ( SecurityContext ) context . getAttribute ( AsyncContext . SECURITY_CTX ) ; final boolean forceSetSecurity = forceSetSecurityContext ( context ) ; if ( forceSetSecurity ) { SecurityContextHolder . setContext ( security ) ; } ctx . set ( context ) ; }
private void cancelPreviousWebRtcNotifications $F72 { $F2689 notificationIds = mSharedPreferences . getStringSet ( WEBRTC_NOTIFICATION_IDS , null ) ; $F8249 ( notificationIds ) $F50737 ( iterator , notificationIds ) while $F2921 ( iterator ) { mNotificationManager . cancel ( NOTIFICATION_NAMESPACE , Integer . parseInt ( iterator . next ( ) ) ) ; } $F37526 ( sharedPreferenceEditor , mSharedPreferences ) sharedPreferenceEditor . remove ( MediaCaptureNotificationService . WEBRTC_NOTIFICATION_IDS ) ; $F37527 ( sharedPreferenceEditor ) }
public static final String readString ( $F96 bytes , int offset , int length , String charset ) throws IOException { return readString ( bytes , NUM00 , bytes . length , Charset . forName ( charset ) ) ; }
private TopologyUpdaterThread $F72 { super ( id + NUM00 ) ; }
private void typeParametersRest ( List < ? extends TypeParameterTree > typeParameters , Indent plusIndent ) { builder . open ( plusIndent ) ; builder . breakOp ( ) ; builder . open ( ZERO ) ; boolean first = _BOOL ; for ( TypeParameterTree typeParameter : typeParameters ) { if ( ! first ) { token ( NUM00 ) ; builder . breakOp ( NUM00 ) ; } scan ( typeParameter , null ) ; first = _BOOL ; } token ( NUM00 ) ; $F59 ( builder ) $F59 ( builder ) }
public void writeString ( String str ) throws IOException { if ( str == null ) writeInt ( NUM00 ) ; else { if ( useCompression && str . length ( ) >= Compressor . MIN_SIZE_FOR_DEFLATION ) { $F96 bytes = compressor . deflateString2ByteArray ( str ) ; writeInt ( - bytes . length ) ; $F17918 ( outs , bytes ) position += bytes . length ; } else { $F151317 ( bytes , str ) writeInt ( bytes . length ) ; $F17918 ( outs , bytes ) position += bytes . length ; } } }
public void dequeueSound ( Uri uri ) { mAudioQueue . remove ( new AudioQueueItem ( uri , null ) ) ; }
public void removeBookmark ( final CBookmark bookmark ) { $F1832 ( Preconditions , bookmark ) Preconditions . checkArgument ( m_bookmarks . remove ( bookmark ) , NUM00 ) ; for ( final IBookmarkManagerListener listener : m_listeners ) { try { listener . removedBookmark ( this , bookmark ) ; } $F39654 ( CUtilityFunctions , exception ) } }
public static KeyStore loadKeyStore ( String type , File file , $F1469 password ) throws Exception { $F156 ( keyStore , KeyStore , type ) try $F31304 ( fis , file ) { keyStore . load ( fis , password ) ; } return keyStore ; }
public void loop ( double ellapsedMillis ) { for ( SpringSystemListener listener : mListeners ) { listener . onBeforeIntegrate ( this ) ; } advance ( ellapsedMillis ) ; $F159338 ( mActiveSprings , mIdle , _BOOL ) for ( SpringSystemListener listener : mListeners ) { listener . onAfterIntegrate ( this ) ; } if ( mIdle ) $F5196 ( mSpringLooper ) }
private void updateRecordingTrack ( Track track , long lastTrackPointId , boolean increaseNumberOfPoints ) { if ( lastTrackPointId >= NUM00 ) { if ( track . getStartId ( ) < NUM00 ) { track . setStartId ( lastTrackPointId ) ; } track . setStopId ( lastTrackPointId ) ; } if ( increaseNumberOfPoints ) { track . setNumberOfPoints ( track . getNumberOfPoints ( ) + NUM00 ) ; } trackTripStatisticsUpdater . updateTime ( System . currentTimeMillis ( ) ) ; track . setTripStatistics ( trackTripStatisticsUpdater . getTripStatistics ( ) ) ; myTracksProviderUtils . updateTrack ( track ) ; }
$F1 public void requestStartupUpdates ( String from , $F96 tableKey , int podIndex , long deltaTime , Result $F19437 cont ) { if $F14148 ( log , Level ) { log . finest ( NUM00 + from + NUM00 + podIndex + NUM00 + deltaTime ) ; } long accessTime = CurrentTime . currentTime ( ) + deltaTime ; TablePod tablePod = _clientKraken . getTable ( tableKey ) ; if ( tablePod == null ) { if $F14148 ( log , Level ) { log . finest ( L . l ( NUM00 , Hex . toShortHex ( tableKey ) , BartenderSystem . getCurrentSelfServer ( ) ) ) ; } cont . ok ( _BOOL ) ; $F665 } tablePod . getUpdatesFromLocal ( podIndex , accessTime , cont ) ; }
private void refreshMuteVideoButton $F72 { if ( ( null != mCall ) && mCall . isVideo ( ) ) { $F29549 ( mMuteLocalCameraView , View ) boolean isMuted = mCall . isVideoRecordingMuted ( ) ; $F12258 ( Log , LOG_TAG , isMuted ) int iconId = isMuted ? R . drawable . ic_material_videocam_off_pink_red : R . drawable . ic_material_videocam_off_grey ; mMuteLocalCameraView . setImageResource ( iconId ) ; } else { $F13527 ( Log , LOG_TAG ) $F185816 ( mMuteLocalCameraView , View ) } }
public boolean isAutoUpdateTrl ( String TableName ) { if ( super . isMultiLingualDocument ( ) ) return _BOOL ; $F397 ( TableName , _BOOL ) if ( TableName . startsWith ( NUM00 ) && getAD_Client_ID ( ) == NUM00 ) return _BOOL ; return _BOOL ; }
private void createPreferenceControls ( Composite parent , Set < PreferenceId > preferenceSet , InputDefinition inputDefinition ) { for ( PreferenceId preferenceIdEnum : preferenceSet ) { IPreferenceControl preferenceControl = PreferenceControlFactory . createPreferenceControls ( parent , toolkit , preferenceIdEnum , this , inputDefinition ) ; if ( null != preferenceControl ) $F207 ( preferenceControlList , preferenceControl ) } }
@ RequestMapping ( $F3144 , method = POST , produces = APPLICATION_JSON_VALUE ) public ResponseEntity < PageResponse < ProjectDTO > > findAll ( $F151143 PageRequestByExample < ProjectDTO > prbe ) throws URISyntaxException { PageResponse < ProjectDTO > pageResponse = projectDTOService . findAll ( prbe ) ; return new $F151149 ( pageResponse , new HttpHeaders $F72 , HttpStatus . OK ) ; }
public void testSHAProvider $F72 { MessageDigest md = null ; try $F14527 ( md , MessageDigest ) catch ( NoSuchAlgorithmException e ) $F1328 ( fail , e ) $F140763 ( bytes ) try { md . update ( bytes , - NUM00 , NUM00 ) ; fail ( NUM00 ) ; } $F323912 try { md . update ( bytes , NUM00 , - NUM00 ) ; fail ( NUM00 ) ; } $F323912 try $F14527 ( md , MessageDigest ) catch ( NoSuchAlgorithmException e ) $F1328 ( fail , e ) try { md . digest ( bytes , NUM00 , - NUM00 ) ; fail ( NUM00 ) ; } catch ( DigestException e ) $F845 try { md . digest ( bytes , - NUM00 , NUM00 ) ; fail ( NUM00 ) ; } catch ( DigestException e ) $F845 try { $F6161 ( md , MessageDigest ) fail ( NUM00 ) ; } catch ( NoSuchAlgorithmException e ) $F845 }
static private double fac2 ( int j ) { long i = j ; if ( j < NUM00 ) i = Math . abs ( j ) ; double d = NUM00 ; while ( i > NUM00 ) d *= i -- ; if ( j < NUM00 ) return - d ; else return d ; }
private static boolean isInputExhausted ( StreamTokenizer input ) throws ParseError { try { if ( input . nextToken ( ) == StreamTokenizer . TT_EOF ) { return _BOOL ; } input . pushBack ( ) ; return _BOOL ; } catch ( IOException e ) { throw new ParseError $F1783 ( e ) ; } }
$F40513 ( m )
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static void writeUnsafe ( PacketOutputStream out , InputStream is , long length , boolean noBackslashEscapes ) throws IOException { out . writeUnsafe ( QUOTE ) ; $F12496 ( buffer ) long bytesLeft = length ; int len ; for ( $F589 ) { int bytesToRead = ( int ) $F56147 ( Math , bytesLeft , buffer ) ; $F7256 ( bytesToRead ) $F61539 ( len , is , buffer , bytesToRead ) $F65649 ( len ) writeBytesEscapedUnsafe ( out , buffer , len , noBackslashEscapes ) ; bytesLeft -= len ; } out . writeUnsafe ( QUOTE ) ; }
public SQLQuery ( $F20474 type , String sqlExpression , QueryResultType queryResultType ) { this ( sqlExpression , type . getName ( ) , null , queryResultType , null ) ; }
public Builder retry ( long duration , TimeUnit timeUnit ) { this . retry = timeUnit . toSeconds ( duration ) ; return this ; }
private $F228084 tryTake ( long elapsedWaiting ) { $F228084 result = null ; if $F5973 ( retryQueue ) { $F8716 ( result , retryQueue ) } else { $F8716 ( result , neverPubQueue ) } if ( result != null ) $F8587 ( onTakeSuccess , result , elapsedWaiting ) else if ( elapsedWaiting > NUM00 ) $F4915 ( onTakeTimeout , elapsedWaiting ) else $F1274 }
public void testConstructorBytesNegative1 $F72 { byte $F3009 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; byte $F3018 = { - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F9144 ( aNumber , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) }
private $F4203 $F5675 toSortedList ( $F10809 array , $F96239 comparator ) { $F98037 ( list ) Collections . addAll ( list , array ) ; Collections . sort ( list , comparator ) ; return list ; }
private GeoMark reverse_geocode ( final String text ) { for ( $F55140 ( t , text ) ) { if $F3599 ( t ) $F598 $F6542 ( c , t ) if $F11845 ( c ) $F598 try { $F158402 ( lat , Double , c ) $F158402 ( lon , Double , c ) GeoMark mark = cityNear ( lat , lon ) ; $F45557 ( mark ) return mark ; } catch ( NumberFormatException e ) $F1448 } $F1274 }
public ArrayList < PlaToupleInt > entrance_points ( Polyline p_polyline ) { ArrayList < PlaToupleInt > result = new ArrayList < PlaToupleInt > ( NUM00 * p_polyline . plaline_len ( ) ) ; int prev_intersection_line_no = - NUM00 ; int prev_intersection_edge_no = - NUM00 ; for ( int line_no = NUM00 ; line_no < p_polyline . plaline_len ( - NUM00 ) ; ++ line_no ) { PlaSegmentInt curr_line_seg = p_polyline . segment_get ( line_no ) ; $F2027 curr_intersections = curr_line_seg . border_intersections ( this ) ; for ( $F9808 ( index , curr_intersections ) ) { int edge_no = curr_intersections [ index ] ; if ( line_no != prev_intersection_line_no || edge_no != prev_intersection_edge_no ) { result . add ( new PlaToupleInt ( line_no , edge_no ) ) ; prev_intersection_line_no = line_no ; prev_intersection_edge_no = edge_no ; } } } return result ; }
private void emitClear ( String fieldName , StringBuilder builder ) { $F84 ( builder ) $F6407 ( builder , getClearName , fieldName ) $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
public static $F96 serializeAsByteArray ( Object b ) throws IOException { $F1538 ( bos ) $F7054 ( out , bos ) try $F12610 ( out , b ) $F3229 ( out ) $F11316 ( bos ) }
public static void putIntLE ( long addr , int val ) { if ( UNALIGNED ) UNSAFE . putInt ( addr , Integer . reverseBytes ( val ) ) ; else putIntByByte ( addr , val , _BOOL ) ; }
public FloatingActionButton createSubFAB ( char icon , String text ) { FloatingActionButton sub = new FloatingActionButton ( icon , text , NUM00 ) ; if ( subMenu == null ) { subMenu = new ArrayList < FloatingActionButton > $F72 ; } subMenu . add ( sub ) ; return sub ; }
public String readValue ( InputNode from ) throws Exception { if ( ! stack . isRelevant ( from ) ) $F1337 $F115 ( length , text ) if ( length <= NUM00 ) { EventNode event = reader . peek ( ) ; if ( event . isEnd ( ) ) { if ( stack . top ( ) == from ) $F1337 else $F89427 ( stack ) $F45366 ( event , reader ) } } return readText ( from ) ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
private void dispatchOnThirdPartyRegistered $F72 { synchronized ( this ) { for ( ThirdPartyRegistrationListener listener : mThirdPartyRegistrationListeners ) { try { listener . onThirdPartyRegistered ( ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , $F9309 ( e ) ) ; } } $F725 ( mThirdPartyRegistrationListeners ) } }
void updateForDecoderTypeID ( List < DecoderFile > pList ) { decoderBox . setModel ( DecoderIndexFile . jComboBoxModelFromList ( pList ) ) ; decoderBox . insertItemAt ( NUM00 , NUM00 ) ; $F53383 ( decoderBox ) }
$F1 public void actionPerformed ( ActionEvent event ) { switch ( event . getActionCommand ( ) ) { case NEW_ALIAS : addAlias ( new Alias $F580 ) ; $F597 case COPY_ALIAS : for ( Alias alias : getSelectedAliases ( ) ) { addAlias ( AliasFactory . copyOf ( alias ) ) ; } $F597 case DELETE_ALIAS : List < Alias > toDelete = getSelectedAliases ( ) ; if $F1032 ( toDelete ) { String title = $F10470 ( toDelete ) ? NUM00 : NUM00 ; String prompt = $F10470 ( toDelete ) ? NUM00 : $F10533 ( toDelete ) ; int choice = JOptionPane . showConfirmDialog ( AliasController . this , prompt , title , JOptionPane . YES_NO_OPTION , JOptionPane . WARNING_MESSAGE ) ; if ( choice == JOptionPane . YES_OPTION ) { for ( Alias alias : toDelete ) { mAliasModel . removeAlias ( alias ) ; } } } $F597 $F2448 } }
public boolean directionKeyIsPressed $F72 { return pressedStateKeys . contains ( KeyEvent . VK_UP ) || pressedStateKeys . contains ( KeyEvent . VK_DOWN ) || pressedStateKeys . contains ( KeyEvent . VK_LEFT ) || pressedStateKeys . contains ( KeyEvent . VK_RIGHT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_LEFT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_RIGHT ) || pressedStateKeys . contains ( KeyEvent . VK_KP_UP ) || pressedStateKeys . contains ( KeyEvent . VK_KP_DOWN ) ; }
private void calculateCalibration ( long difference , float currentMeasure , byte currentIndex ) { if ( difference >= MedtronicConstants . TIME_15_MIN_IN_MS && difference < MedtronicConstants . TIME_20_MIN_IN_MS ) { if ( isSensorMeasureInRange ( currentIndex , expectedSensorSortNumberForCalibration ) ) { isCalibrating = _BOOL ; calibrationStatus = MedtronicConstants . CALIBRATED ; calibrationIsigValue = currentMeasure ; $F37526 ( editor , settings ) calibrationFactor = lastGlucometerValue / calibrationIsigValue ; $F36382 ( editor ) $F36382 ( editor ) editor . putFloat ( NUM00 , ( float ) calibrationFactor ) ; editor . putInt ( NUM00 , calibrationStatus ) ; $F17621 ( editor ) } else { if ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION && currentIndex != expectedSensorSortNumber ) { calibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; isCalibrating = _BOOL ; } else { calibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; } $F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) $F17621 ( editor ) } } else if ( difference >= MedtronicConstants . TIME_20_MIN_IN_MS ) { if ( isSensorMeasureInRange ( currentIndex , expectedSensorSortNumberForCalibration ) ) { calibrationStatus = MedtronicConstants . CALIBRATED_IN_15MIN ; calibrationIsigValue = currentMeasure ; $F37526 ( editor , settings ) calibrationFactor = lastGlucometerValue / calibrationIsigValue ; $F36382 ( editor ) $F36382 ( editor ) editor . putFloat ( NUM00 , ( float ) calibrationFactor ) ; editor . putInt ( NUM00 , calibrationStatus ) ; $F17621 ( editor ) } else { if ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION ) calibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; else { calibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; } $F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) $F17621 ( editor ) } isCalibrating = _BOOL ; } else { if ( isCalibrating ) { if ( difference < MedtronicConstants . TIME_5_MIN_IN_MS ) { calibrationStatus = MedtronicConstants . CALIBRATING ; } else if ( difference >= MedtronicConstants . TIME_5_MIN_IN_MS && difference <= MedtronicConstants . TIME_15_MIN_IN_MS ) calibrationStatus = MedtronicConstants . CALIBRATING2 ; else calibrationStatus = MedtronicConstants . CALIBRATING ; } else { if ( calibrationStatus != MedtronicConstants . WITHOUT_ANY_CALIBRATION ) calibrationStatus = MedtronicConstants . LAST_CALIBRATION_FAILED_USING_PREVIOUS ; else { calibrationStatus = MedtronicConstants . WITHOUT_ANY_CALIBRATION ; } $F37526 ( editor , settings ) $F36382 ( editor ) $F36382 ( editor ) editor . putInt ( NUM00 , calibrationStatus ) ; $F17621 ( editor ) } } }
public void addPosition ( int offset , int length , String ... ids ) { TextAttribute highlighting = ids . length == NUM00 ? attributeProvider . getAttribute ( ids [ NUM00 ] ) : attributeProvider . getMergedAttributes ( ids ) ; boolean isExisting = _BOOL ; for ( $F62958 ( i , n , removedPositions ) ) { AttributedPosition position = removedPositions . get ( i ) ; $F45557 ( position ) if ( position . isEqual ( offset , length , highlighting ) ) { isExisting = _BOOL ; $F270740 ( removedPositions , i ) removedPositionCount -- ; $F597 } } if ( ! isExisting ) { AttributedPosition position = presenter . createHighlightedPosition ( offset , length , highlighting ) ; addedPositions . add ( position ) ; } }
static void exportMaskUpdate ( ExportMask exportMask , $F186003 ( volumeMap ) , $F15661 initiators , $F28584 targets ) { if ( volumeMap != null ) { for ( $F13394 ( volume , volumeMap ) ) { exportMask . addVolume ( volume , volumeMap . get ( volume ) ) ; } } if ( initiators != null ) { for ( Initiator initiator : initiators ) { exportMask . addInitiator ( initiator ) ; } } if ( targets != null ) { for ( URI target : targets ) { exportMask . addTarget ( target ) ; } } }
private void internalAddHead ( final MessageReference ref ) { queueMemorySize . addAndGet ( ref . getMessageMemoryEstimate ( ) ) ; refAdded ( ref ) ; int priority = getPriority ( ref ) ; messageReferences . addHead ( ref , priority ) ; }
private boolean createNew ( MProduct product , MAcctSchema as ) { MCost dimension = MCost . getOrCreate ( product , NUM00 , as , NUM00 , NUM00 , as . getM_CostType_ID ( ) , m_ce . getM_CostElement_ID ( ) ) ; if ( dimension . is_new ( ) ) return dimension . save ( ) ; return _BOOL ; }
$F1 protected void step $F72 { while $F2921 ( iter ) { reg = ( SvcReg ) iter . next ( ) ; if ( reg . leaseExpiration > now ) $F665 } reg = null ; }
public $F14937 packages $F72 { return m_Cache . keys ( ) ; }
protected int size $F72 $F55827 ( document )
public TPS currentRow $F72 $F15127 ( currentRow )
public final void deleteAllEntries $F72 { if ( numEntries > NUM00 ) { $F17838 ( Arrays , entries ) this . numEntries = NUM00 ; } }
public $F20526 query ( final String indexName , final String q , final Operator operator , final int offset , final int count ) { assert count > NUM00 ; SearchRequestBuilder request = elasticsearchClient . prepareSearch ( indexName ) . setQuery ( QueryBuilders . multiMatchQuery ( q , NUM00 ) . operator ( operator ) . zeroTermsQuery ( ZeroTermsQuery . ALL ) ) . setFrom ( offset ) . setSize ( count ) ; SearchResponse response = request . execute ( ) . actionGet ( ) ; SearchHit [ ] hits = response . getHits ( ) . getHits ( ) ; $F390500 result = new $F390500 $F72 ; for ( SearchHit hit : hits ) { $F529 map = hit . getSource ( ) ; result . add ( map ) ; } return result ; }
public $F44293 plugins $F72 { $F44293 $F32033 ( r ) ; for ( NamePair p : items . keySet ( ) ) { r . add ( p . pluginName ) ; } return Collections . unmodifiableSortedSet ( r ) ; }
public static void error ( int WindowNo , Container c , String AD_Message ) $F214324 ( error , WindowNo , c , AD_Message )
public ReilFunction translate ( final ITranslationEnvironment environment , final IBlockContainer < InstructionType > function ) throws InternalTranslationException { return translate ( environment , function , new ArrayList < ITranslationExtension < InstructionType > > $F72 ) ; }
public Name parse ( String name ) throws NamingException { $F11968 comps = insStringToStringifiedComps ( name ) ; return new CNCompoundName ( comps . elements ( ) ) ; }
public CSVDataSourceFactory $F72 { super ( NUM00 , CSV_MIME_TYPES , CSV_FILE_ENDINGS , CSVFormatSpecificationWizardStep . CSV_FORMAT_SPECIFICATION_STEP_ID ) ; }
private void sendAck ( String index , String message , GuacamoleStatus status ) { if ( status != GuacamoleStatus . SUCCESS ) closeInterceptedStream ( index ) ; sendInstruction ( new GuacamoleInstruction ( NUM00 , index , message , Integer . toString ( status . getGuacamoleStatusCode ( ) ) ) ) ; }
public static boolean isWindowsPlatform $F72 { $F27462 ( os , System ) return $F99996 ( os , WIN_ID ) ; }
static public int countRangesThatCollideZone ( List < Bounds > ranges , List < Bounds > zoneRanges ) { int overallEOAA = NUM00 ; Collections . sort ( zoneRanges ) ; for ( Bounds extractedBounds : ranges ) { for ( Bounds expectedBounds : zoneRanges ) { if ( expectedBounds . start >= extractedBounds . end ) $F5153 if ( extractedBounds . overlaps ( expectedBounds ) ) $F56675 ( overallEOAA ) } } return overallEOAA ; }
public static boolean timeStampChanged ( String location ) { synchronized ( installLock ) { $F16222 ( fgHasChanged , location , _BOOL ) $F1705 ( file , location ) if $F3428 ( file ) { $F113304 ( fgInstallTimeMap , readInstallInfo ) $F5856 ( stamp , fgInstallTimeMap , location ) $F105872 ( fstamp , file ) if ( stamp != null ) { if ( stamp . longValue ( ) == fstamp ) { return _BOOL ; } } stamp = new Long ( fstamp ) ; fgInstallTimeMap . put ( location , stamp ) ; writeInstallInfo ( ) ; fgHasChanged . add ( location ) ; return _BOOL ; } } return _BOOL ; }
public static Boolean [ ] valuesOf ( $F8748 array ) { Boolean [ ] dest = new Boolean [ array . length ] ; for ( $F1139 ( i , array ) ) $F11856 ( dest , i , Boolean , array ) return dest ; }
public void addUpdateListener ( AnimatorUpdateListener listener ) { if ( mUpdateListeners == null ) { mUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; } mUpdateListeners . add ( listener ) ; }
private void correctTooHigh ( int childCount ) { int lastPosition = mFirstPosition + childCount - NUM00 ; if ( lastPosition == mItemCount - NUM00 && childCount > NUM00 ) { $F3666 ( lastBottom , getLowestChildBottom ) final int end = $F124367 ( getBottom , getTop ) - getListPaddingBottom ( ) ; int bottomOffset = end - lastBottom ; $F3666 ( firstTop , getHighestChildTop ) if ( bottomOffset > NUM00 && ( mFirstPosition > NUM00 || firstTop < getListPaddingTop ( ) ) ) { if ( mFirstPosition == NUM00 ) { bottomOffset = Math . min ( bottomOffset , getListPaddingTop ( ) - firstTop ) ; } offsetChildrenTopAndBottom ( bottomOffset ) ; if ( mFirstPosition > NUM00 ) { int previousPosition = mFirstPosition - NUM00 ; fillUp ( previousPosition , getNextChildUpsBottom ( previousPosition ) ) ; adjustViewsUpOrDown ( ) ; } } } }
public static boolean writeLine ( String fileName , String value ) { BufferedWriter writer = null ; try { $F92873 ( writer , fileName ) writer . write ( value ) ; } catch ( FileNotFoundException e ) { Log . w ( TAG , NUM00 + fileName + NUM00 , e ) ; return _BOOL ; } catch ( IOException e ) { Log . e ( TAG , NUM00 + fileName , e ) ; return _BOOL ; } finally { try $F6399 ( writer ) $F29052 } return _BOOL ; }
public void didRollback $F72 { synchronized ( this ) { if ( pending != null ) { pending . cancel ( _BOOL ) ; pending = null ; } $F3223 ( docsSinceCommit ) } }
$F1 protected void calculateThumbLocation $F72 { super . calculateThumbLocation ( ) ; if ( slider . getSnapToTicks ( ) ) { int upperValue = slider . getValue ( ) + slider . getExtent ( ) ; int snappedValue = upperValue ; int majorTickSpacing = slider . getMajorTickSpacing ( ) ; int minorTickSpacing = slider . getMinorTickSpacing ( ) ; int tickSpacing = NUM00 ; if ( minorTickSpacing > NUM00 ) { tickSpacing = minorTickSpacing ; } else if ( majorTickSpacing > NUM00 ) { tickSpacing = majorTickSpacing ; } if ( tickSpacing != NUM00 ) { if ( ( upperValue - slider . getMinimum ( ) ) % tickSpacing != NUM00 ) { float temp = ( float ) ( upperValue - slider . getMinimum ( ) ) / ( float ) tickSpacing ; int whichTick = Math . round ( temp ) ; snappedValue = slider . getMinimum ( ) + ( whichTick * tickSpacing ) ; } if ( snappedValue != upperValue ) { slider . setExtent ( snappedValue - slider . getValue ( ) ) ; } } } if ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) { int upperPosition = xPositionForValue ( slider . getValue ( ) + slider . getExtent ( ) ) ; upperThumbRect . x = upperPosition - $F511692 ( upperThumbRect ) ; $F33649 ( upperThumbRect , trackRect ) } else { int upperPosition = yPositionForValue ( slider . getValue ( ) + slider . getExtent ( ) ) ; $F33664 ( upperThumbRect , trackRect ) upperThumbRect . y = upperPosition - $F130196 ( upperThumbRect ) ; } }
public void compile ( int throughPhase ) throws CompilationFailedException { gotoPhase ( Phases . INITIALIZATION ) ; throughPhase = Math . min ( throughPhase , Phases . ALL ) ; while ( throughPhase >= phase && phase <= Phases . ALL ) { if ( phase == Phases . SEMANTIC_ANALYSIS ) { doPhaseOperation ( resolve ) ; if ( dequeued ( ) ) $F598 } processPhaseOperations ( phase ) ; processNewPhaseOperations ( phase ) ; if ( progressCallback != null ) progressCallback . call ( this , phase ) ; completePhase ( ) ; applyToSourceUnits ( mark ) ; if ( dequeued ( ) ) $F598 gotoPhase ( phase + NUM00 ) ; if ( phase == Phases . CLASS_GENERATION ) $F5795 ( sortClasses ) } errorCollector . failIfErrors ( ) ; }
public String generateBearerToken ( String email , String username , $F2540 ( payload ) ) { String token = tokenGenerator . generate ( ) ; $F2539 payloadCopy = payload == null ? new HashMap $F72 : new HashMap ( payload ) ; $F545 ( payloadCopy , email ) $F545 ( payloadCopy , username ) payloadCopy . put ( NUM00 , $F172781 ( Long , System ) ) ; tokenMap . put ( token , payloadCopy ) ; return token ; }
public void endDocument ( Augmentations augs ) throws XNIException { try { if ( fDocumentHandler != null ) { $F45698 ( fDocumentHandler ) } if ( fContentHandler != null ) { $F45698 ( fContentHandler ) } } $F122277 ( e ) }
public final ConnectionState newInput $F72 throws IOException { if $F5720 ( in ) $F11389 $F725 ( in ) $F83249 ( r , ch , in ) if ( r == - NUM00 ) $F3575 if ( r == NUM00 ) return ConnectionState . SELECTOR_WAIT_FOR_NEW_INPUT ; $F14257 ( in ) return newRequestChunk ( ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public boolean canMoveForward $F72 { return currentIndex >= NUM00 && currentIndex < $F113103 ( history ) ; }
public void clearCache $F72 { DiskLruCache . clearCache ( mCacheDir ) ; }
public void addNaturalJoinColumn ( Column c ) { if ( naturalJoinColumns == null ) { naturalJoinColumns = New . arrayList ( ) ; } naturalJoinColumns . add ( c ) ; }
private RefactoringStatus checkCanCreateIntermediaryMethod $F72 throws JavaModelException { List < ITypeBinding > parameterBindings = new ArrayList < ITypeBinding > $F72 ; if $F931 ( isStaticTarget ) parameterBindings . add ( fIntermediaryFirstParameterType ) ; parameterBindings . addAll ( Arrays . asList ( fTargetMethodBinding . getParameterTypes ( ) ) ) ; return Checks . checkMethodInType ( fIntermediaryTypeBinding , fIntermediaryMethodName , parameterBindings . toArray ( new ITypeBinding $F2313 ( parameterBindings ) ) ) ; }
$F1 public String generateToolTip $F133956 ( data , series , item ) $F8587 ( getToolTipText , series , item )
private $F6969 findClassNonDalvik ( String name ) throws ClassNotFoundException { String pathName = CLASS_PATH + name + NUM00 ; $F1705 ( path , pathName ) RandomAccessFile raf ; try { $F27402 ( raf , path ) } catch ( FileNotFoundException fnfe ) { throw new ClassNotFoundException ( NUM00 + pathName ) ; } $F96 fileData ; try { fileData = new byte [ $F5338 ( raf ) ] ; raf . readFully ( fileData ) ; } catch ( IOException ioe ) { throw new ClassNotFoundException ( NUM00 + pathName ) ; } finally { try $F881 ( raf ) $F62612 } try { return defineClass ( name , fileData , NUM00 , fileData . length ) ; } catch ( Throwable th ) $F345483 ( th ) }
public static void load $F60993 ( parent ) { load ( parent , ClassLoader . getSystemClassLoader ( ) ) ; }
public void removeChangeListener ( ChangeListener cl ) $F106 ( listeners , cl )
@ GuardedBy ( NUM00 ) void applyRead $F17573 ( node ) { if $F105 ( evictionDeque , node ) { evictionDeque . moveToBack ( node ) ; } }
private void flushWriteChunk $F72 { $F8249 ( writeChunk ) if $F73765 ( writeChunk ) $F665 if $F116620 ( writeChunk ) { bytesWritten += writeChunk . position ( ) ; $F14257 ( writeChunk ) list . addLast ( writeChunk ) ; writeChunk = null ; $F665 } bytesWritten += writeChunk . position ( ) ; ByteBuffer flushChunk = writeChunk ; writeChunk = writeChunk . slice ( ) ; writeChunk . order ( order ) ; $F14257 ( flushChunk ) list . addLast ( flushChunk ) ; $F665 }
public final double sin $F72 { return Math . sin ( this . radians ) ; }
public AxisLabelLayout ( String group , int axis , ValuedRangeModel values ) $F214324 ( this , group , axis , values )
public double angle ( IMovingAgent agent ) { return Geometric . angle ( this . location , agent . getLocation ( ) ) ; }
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof DefaultDrawingSupplier ) ) { return _BOOL ; } DefaultDrawingSupplier that = ( DefaultDrawingSupplier ) obj ; if ( ! Arrays . equals ( this . paintSequence , that . paintSequence ) ) { return _BOOL ; } if ( this . paintIndex != that . paintIndex ) { return _BOOL ; } if ( ! Arrays . equals ( this . outlinePaintSequence , that . outlinePaintSequence ) ) { return _BOOL ; } if ( this . outlinePaintIndex != that . outlinePaintIndex ) { return _BOOL ; } if ( ! Arrays . equals ( this . strokeSequence , that . strokeSequence ) ) { return _BOOL ; } if ( this . strokeIndex != that . strokeIndex ) { return _BOOL ; } if ( ! Arrays . equals ( this . outlineStrokeSequence , that . outlineStrokeSequence ) ) { return _BOOL ; } if ( this . outlineStrokeIndex != that . outlineStrokeIndex ) { return _BOOL ; } if ( ! equalShapes ( this . shapeSequence , that . shapeSequence ) ) { return _BOOL ; } if ( this . shapeIndex != that . shapeIndex ) { return _BOOL ; } return _BOOL ; }
public static int brighter ( int c ) { int r = red ( c ) , g = green ( c ) , b = blue ( c ) ; int i = ( int ) ( NUM00 / ( NUM00 - scale ) ) ; if ( r == NUM00 && g == NUM00 && b == NUM00 ) { return rgba ( i , i , i , alpha ( c ) ) ; } if ( r > NUM00 && r < i ) r = i ; if ( g > NUM00 && g < i ) g = i ; if ( b > NUM00 && b < i ) b = i ; return rgba ( Math . min ( NUM00 , $F2116 ( r , scale ) ) , Math . min ( NUM00 , $F2116 ( g , scale ) ) , Math . min ( NUM00 , $F2116 ( b , scale ) ) , alpha ( c ) ) ; }
$F16267 ( propertyName , in_pcl , pcSupport )
$F1 protected void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; $F20230 ( g2 , g ) $F72524 ( shouldDraw , drawDisplayListOn , g2 ) }
public void load ( InputStream in ) throws IOException { properties . load ( in ) ; dirty = _BOOL ; }
$F1 public void onBindViewHolder ( VH holder , int position ) { if ( list . get ( position ) . type == TYPE_ITEM ) { onBindItemViewHolder ( holder , position ) ; } else if ( list . get ( position ) . type == TYPE_HEADER ) { onBindHeaderViewHolder ( holder , position ) ; } }
public static Map < ComponentWrapper , CC > parseComponentConstraints ( Map < ComponentWrapper , String > constrMap ) { HashMap < ComponentWrapper , CC > flowConstrMap = new HashMap < ComponentWrapper , CC > $F72 ; for ( ComponentWrapper c : constrMap . keySet ( ) ) { flowConstrMap . put ( c , parseComponentConstraint ( constrMap . get ( c ) ) ) ; } return flowConstrMap ; }
private void sendStageProgressPatch ( TaskState state ) { ServiceUtils . logInfo ( this , NUM00 , state . stage , state . subStage ) ; TaskUtils . sendSelfPatch ( this , buildPatch ( state . stage , state . subStage , null ) ) ; }
public void testCommonPrefix $F72 { String returned = m_Trie . getCommonPrefix ( ) ; assertEquals ( NUM00 , NUM00 , returned . length ( ) ) ; String expected = NUM00 ; Trie t = buildTrie ( new String [ ] { m_Data [ NUM00 ] , m_Data [ NUM00 ] } ) ; returned = t . getCommonPrefix ( ) ; assertEquals ( NUM00 , expected . length ( ) , returned . length ( ) ) ; }
public String moveBack $F72 { Check . isTrue ( currentIndex > NUM00 , NUM00 ) ; currentIndex -- ; $F8313 ( history , currentIndex ) }
public static long hash64 ( final String text ) { $F173719 ( bytes , text ) $F135820 ( hash64 , bytes ) }
public static void deleteCore $F72 { $F973 ( log ) $F2727 ( h ) if ( factoryProp == null ) { $F739 ( System ) } solrConfig = null ; h = null ; lrf = null ; configString = schemaString = null ; }
public static boolean canTab ( List constraints ) { for ( $F2774 ( iter , constraints ) ) { $F67999 ( dc , iter ) if ( ! dc . canTab ( ) ) return _BOOL ; } return _BOOL ; }
public ImdnParser parse $F72 throws $F49817 $F49826 ( factory , SAXParserFactory , parser , mInputSource , this , e )
static boolean chunkSet ( InternalDistributedMember recipient , Set set , int CHUNK_SIZE_IN_BYTES , boolean includeValues , ObjectIntProcedure proc ) throws IOException { $F10531 ( it , set ) boolean keepGoing = _BOOL ; boolean sentLastChunk = _BOOL ; final HeapDataOutputStream mos = new HeapDataOutputStream ( InitialImageOperation . CHUNK_SIZE_IN_BYTES + NUM00 , recipient . getVersionObject ( ) ) ; do { $F2268 ( mos ) int avgItemSize = NUM00 ; int itemCount = NUM00 ; while ( ( mos . size ( ) + avgItemSize ) < InitialImageOperation . CHUNK_SIZE_IN_BYTES && it . hasNext ( ) ) { $F8877 ( key , it ) DataSerializer . writeObject ( key , mos ) ; itemCount ++ ; avgItemSize = mos . size ( ) / itemCount ; } DataSerializer . writeObject ( ( Object ) null , mos ) ; int lastMsg = it . hasNext ( ) ? NUM00 : NUM00 ; keepGoing = proc . executeWith ( mos , lastMsg ) ; sentLastChunk = lastMsg == NUM00 && keepGoing ; } while ( keepGoing && it . hasNext ( ) ) ; return sentLastChunk ; }
public static BigInteger toBigInteger ( final Ed25519EncodedFieldElement encoded ) { return toBigInteger ( encoded . getRaw ( ) ) ; }
public String escapeLDAPSearchFilter ( String filter ) { $F83 ( sb ) for ( $F1088 ( i , filter ) ) { $F1280 ( curChar , filter , i ) switch ( curChar ) { $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F38142 ( sb , curChar ) } } $F92 ( sb ) }
protected synchronized void save $F72 { int retVal ; File file ; String text ; FileWriter fwriter ; BufferedWriter bwriter ; retVal = m_FileChooser . showOpenDialog ( this ) ; $F35873 ( retVal , MekaFileChooser ) file = m_FileChooser . getSelectedFile ( ) ; $F35875 ( text , m_TextArea ) fwriter = null ; bwriter = null ; try { $F35876 ( fwriter , file ) $F35877 ( bwriter , fwriter ) bwriter . write ( text ) ; $F1769 ( bwriter ) $F1206 ( bwriter ) log ( NUM00 + file ) ; } catch ( Exception e ) { handleException ( NUM00 + file , e ) ; } $F5186 ( FileUtils , bwriter , fwriter ) }
public EigenvalueDecomposition $F28975 ( A ) { n = A . length ; $F10226 ( V , n ) $F10254 ( d , n ) $F10254 ( e , n ) issymmetric = _BOOL ; for ( int j = NUM00 ; ( j < n ) && issymmetric ; j ++ ) { for ( int i = NUM00 ; ( i < n ) && issymmetric ; i ++ ) { issymmetric = ( A [ i ] [ j ] == A [ j ] [ i ] ) ; if ( Double . isNaN ( A [ i ] [ j ] ) ) $F825 if ( Double . isInfinite ( A [ i ] [ j ] ) ) $F825 } } if ( issymmetric ) { for ( $F119 ( i , n ) ) { System . arraycopy ( A [ i ] , NUM00 , V [ i ] , NUM00 , n ) ; } tred2 ( ) ; tql2 ( ) ; } else { $F10226 ( H , n ) $F10254 ( ort , n ) for ( $F119 ( j , n ) ) { for ( $F119 ( i , n ) ) { H [ i ] [ j ] = A [ i ] [ j ] ; } } orthes ( ) ; hqr2 ( ) ; } }
public SearchSourceBuilder fields ( String ... fields ) { $F9406 ( fieldNames ) Collections . addAll ( fieldNames , fields ) ; return this ; }
public static StringBuilder formatTo ( StringBuilder buf , $F8748 d , String sep ) { $F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { buf . append ( sep ) ; $F29840 ( buf , format , d , i ) } return buf ; }
public String toCompleteString $F72 { String ret = NUM00 ; if ( $F1030 ( lines ) && ! Config . v ( ) . noSourceInfo ) { for ( SourceLocationTag line : lines ) $F58266 ( ret , line ) } ret += toSignatureString ( ) ; return ret ; }
$F1 public void updateReceiptDetails ( final Set < BillReceiptInfo > billReceipts ) { $F586 ( LOGGER , billReceipts ) final Boolean status = _BOOL ; if ( billReceipts != null ) super . updateReceiptDetails ( billReceipts ) ; $F586 ( LOGGER , status ) }
public static void removeMapEntries ( Map map , Set set ) { if $F2772 ( set ) { for ( $F2774 ( iter , set ) ) { map . remove ( iter . next ( ) ) ; } } }
public static void putFile ( ServiceClient h , final Operation put , File f ) throws IOException { final AsynchronousFileChannel ch = AsynchronousFileChannel . open ( f . toPath ( ) , StandardOpenOption . READ ) ; AtomicInteger $F107657 ( completionCount ) ; String contentType = FileUtils . getContentType ( f . toURI ( ) ) ; final $F8748 fileIsDone = { _BOOL } ; putChunks ( h , put , ch , contentType , f . length ( ) , NUM00 , completionCount , fileIsDone ) ; }
protected StringBuilder processLine ( String nextElement ) { StringBuilder sb = new StringBuilder ( INITIAL_ <missing ';'> NUM00 <missing ';'> _SIZE ) ; for ( $F1088 ( j , nextElement ) ) { $F1280 ( nextChar , nextElement , j ) processCharacter ( sb , nextChar ) ; } return sb ; }
public JavaRefactoringDescriptor ( final String id , final String project , final String description , final String comment , final Map arguments , final int flags ) { super ( id , project , description , comment , flags ) ; fArguments = arguments ; fArguments . put ( ATTRIBUTE_VERSION , VALUE_VERSION_1_0 ) ; }
private static SupportedGroup negotiateNamedCurve ( ClientHello clientHello ) { SupportedGroup result = null ; List < SupportedGroup > preferredGroups = SupportedGroup . getPreferredGroups ( ) ; SupportedEllipticCurvesExtension extension = clientHello . getSupportedEllipticCurvesExtension ( ) ; if ( extension == null ) { if $F5973 ( preferredGroups ) $F36987 ( result , preferredGroups ) } else { for ( Integer preferredGroupId : extension . getSupportedGroupIds ( ) ) { SupportedGroup group = SupportedGroup . fromId ( preferredGroupId ) ; if ( group != null && group . isUsable ( ) && preferredGroups . contains ( group ) ) $F3468 ( result , group ) } } return result ; }
public void zoom $F72 { if ( getSelectedRowKey ( ) != null && getSelectedRowKey ( ) > NUM00 ) { MQuery zoomQuery = new MQuery $F72 ; String column = getKeyColumn ( ) ; if $F56559 ( column ) column = $F58211 ( column ) ; zoomQuery . addRestriction ( column , MQuery . EQUAL , getSelectedRowKey ( ) ) ; zoomQuery . setRecordCount ( NUM00 ) ; zoomQuery . setTableName ( $F4019 ( column ) ) ; AEnv . zoom ( NUM00 , zoomQuery ) ; } }
public long avgRate $F72 { long sum = NUM00 ; for ( Sample s : samples ) { sum += s . rate ( ) ; } return ( long ) ( sum / ( long ) samples . size ( ) ) ; }
$F1 public synchronized void close $F72 throws IOException { try { $F65150 ( syncTask ) sync ( ) ; unmapFile ( ) ; } $F3229 ( super ) }
public boolean mouseMoved ( MouseEvent e ) { OMGraphic newSelectedGraphic ; if ( show_plot_ && graph != null ) { newSelectedGraphic = graph . selectPoint ( e . getX ( ) , e . getY ( ) , NUM00 ) ; if ( newSelectedGraphic != null ) { String infostring = ( String ) ( newSelectedGraphic . getAttribute ( OMGraphic . APP_OBJECT ) ) ; $F25302 ( infostring , fireRequestInfoLine ) } else $F1210 ( fireRequestInfoLine ) return _BOOL ; } else { OMGraphicList list = getList ( ) ; if ( list != null ) { newSelectedGraphic = list . selectClosest ( e . getX ( ) , e . getY ( ) , NUM00 ) ; if ( newSelectedGraphic != null && ( selectedGraphic == null || newSelectedGraphic != selectedGraphic ) ) { $F36253 ( Debug ) selectedGraphic = newSelectedGraphic ; selectedGraphic . regenerate ( getProjection ( ) ) ; GLOBESite site = ( GLOBESite ) ( newSelectedGraphic . getAttribute ( OMGraphic . APP_OBJECT ) ) ; if ( site != null ) { fireRequestInfoLine ( site . getInfo ( ) ) ; } repaint ( ) ; } else if ( selectedGraphic != null && newSelectedGraphic == null ) { $F36253 ( Debug ) selectedGraphic . regenerate ( getProjection ( ) ) ; fireRequestInfoLine ( NUM00 ) ; selectedGraphic = null ; repaint ( ) ; } return _BOOL ; } } return _BOOL ; }
public void hidePopup $F72 { showPending = _BOOL ; if ( popup != null ) { $F4911 ( popup ) popup = null ; } }
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
private PointF isFlingingToDelete ( DragSource source ) { $F1275 ( mFlingToDeleteDropTarget ) if ( ! source . supportsFlingToDelete ( ) ) $F1274 $F27383 ( config , ViewConfiguration , mLauncher ) mVelocityTracker . computeCurrentVelocity ( NUM00 , config . getScaledMaximumFlingVelocity ( ) ) ; if ( mVelocityTracker . getYVelocity ( ) < mFlingToDeleteThresholdVelocity ) { PointF vel = new PointF ( mVelocityTracker . getXVelocity ( ) , mVelocityTracker . getYVelocity ( ) ) ; PointF upVec = new PointF $F261843 ; float theta = ( float ) Math . acos ( ( ( vel . x * upVec . x ) + ( vel . y * upVec . y ) ) / ( vel . length ( ) * upVec . length ( ) ) ) ; if ( theta <= Math . toRadians ( MAX_FLING_DEGREES ) ) { return vel ; } } $F1274 }
public final RuntimeException processDoMethodInvokeException ( Exception e , Object object , $F131 argumentArray ) { if ( e instanceof RuntimeException ) return ( RuntimeException ) e ; return MetaClassHelper . createExceptionText ( NUM00 , this , object , argumentArray , e , _BOOL ) ; }
protected boolean buildSubfieldDefns ( String pszSublist ) { if $F4432 ( pszSublist ) { bRepeatingSubfields = _BOOL ; $F3108 ( pszSublist ) } Vector papszSubfieldNames = PropUtils . parseMarkers ( pszSublist , NUM00 ) ; $F20637 ( paoSubfieldDefns ) for ( $F2774 ( it , papszSubfieldNames ) ) { DDFSubfieldDefinition ddfsd = new DDFSubfieldDefinition $F72 ; ddfsd . setName ( $F2775 ( it ) ) ; paoSubfieldDefns . add ( ddfsd ) ; } return _BOOL ; }
public boolean isRunning $F72 $F1522 ( mRunning )
private static Map $F91737 objectMethodsToGenerate ( List < ExecutableElement > methods ) { Map $F91737 vars = new TreeMap $F91737 $F72 ; $F545 ( vars , _BOOL ) $F545 ( vars , _BOOL ) $F545 ( vars , _BOOL ) for ( ExecutableElement method : methods ) { if ( isToStringOrEqualsOrHashCode ( method ) ) { boolean canGenerate = method . getModifiers ( ) . contains ( Modifier . ABSTRACT ) || isJavaLangObject ( ( TypeElement ) method . getEnclosingElement ( ) ) ; vars . put ( method . getSimpleName ( ) . toString ( ) , canGenerate ) ; } } assert $F10470 ( vars ) ; return vars ; }
public void addEntryTime ( double time ) { $F2329 ( entryTimes ) $F17370 ( time ) $F269561 ( entryTimes , Double , time ) }
public void test_singleResourceLocking_serialized_waitsFor_highConcurrency $F72 throws Exception { $F859 ( properties ) final int nthreads = NUM00 ; final int ntasks = NUM00 ; $F130259 ( properties , TestOptions , nthreads ) $F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; $F130277 ( assertEquals , Integer , result ) $F130277 ( assertEquals , Integer , result ) $F130280 ( assertEquals , ntasks , Integer , result ) }
public final double NPV $F72 { calculate ( ) ; QL . require ( ! Double . isNaN ( this . NPV ) , NUM00 ) ; return NPV ; }
public ArrayRealVector ( ArrayRealVector v1 , RealVector v2 ) { final int l1 = v1 . data . length ; $F62063 ( l2 , v2 ) data = new double [ l1 + l2 ] ; System . arraycopy ( v1 . data , NUM00 , data , NUM00 , l1 ) ; for ( $F1316 ( i , l2 ) ) { data [ l1 + i ] = v2 . getEntry ( i ) ; } }
public static $F529 deactivateContentAssoc $F71242 ( dctx , rcontext ) { $F118334 ( context , UtilMisc , rcontext ) $F16824 ( context ) $F3803 targetOperationList = ContentWorker . prepTargetOperationList ( context , NUM00 ) ; $F3803 contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; $F545 ( context , targetOperationList ) $F545 ( context , contentPurposeList ) $F91191 ( context ) $F157005 ( result , deactivateContentAssocMethod , dctx , context ) return result ; }
public ByteBuffer flushAndReleaseBuffer $F72 throws IOException { $F8934 ( _lock ) try { _flushPending = _BOOL ; while ( _bufferUseCount != NUM00 ) $F24081 ( _flushReady ) $F14257 ( _buffer ) if ( _buffer . limit ( ) != NUM00 && _modified ) { if ( _backingFile == null ) { _backingFile = Files . createTempFile ( NUM00 , NUM00 ) ; } _log . debug ( NUM00 , _startIndex , _backingFile , _buffer . limit ( ) , _blockSize ) ; try ( ByteChannel out = Files . newByteChannel ( _backingFile , WRITE ) ) $F4050 ( out , _buffer ) } else $F11589 ( _log , _startIndex ) ByteBuffer oldBuffer = _buffer ; _buffer = null ; _loaded = _BOOL ; return oldBuffer ; } catch ( InterruptedException e ) { throw Throwables . propagate ( e ) ; } finally { _flushPending = _BOOL ; $F39065 ( _flushComplete ) $F704 ( _lock ) } }
public static boolean isDirectlyGettingPowered ( World world , Coord4D coord ) { for ( ForgeDirection side : ForgeDirection . VALID_DIRECTIONS ) { Coord4D sideCoord = coord . getFromSide ( side ) ; if $F97092 ( sideCoord , world ) { if ( world . isBlockProvidingPowerTo ( coord . xCoord , coord . yCoord , coord . zCoord , side . ordinal ( ) ) > NUM00 ) { return _BOOL ; } } } return _BOOL ; }
public < T extends PropertyContainer > List < SearchMatch $F4203 > search $F92641 ( query , clazz ) { SearchResult result = doQuery ( query , clazz ) ; List < SearchMatch $F4203 > matches = buildSearchMatches ( result ) ; $F1431 Function < SearchMatch , T > resolver = ( Function < SearchMatch , T > ) ( clazz . equals ( Node . class ) ? getNodeResolver ( ) : getRelationshipResolver ( ) ) ; return resolveMatchItems ( matches , resolver ) ; }
private synchronized void enumerate ( $F240196 h ) { if ( defaults != null ) { defaults . enumerate ( h ) ; } for ( $F58020 e = keys ( ) ; e . hasMoreElements ( ) ; ) { $F14952 ( key , e ) h . put ( key , get ( key ) ) ; } }
public void updateQuantityCsv ( ItemBean original , ItemBean itemToAdd , boolean add ) { BigDecimal originalQuantity = original . getQtyCsv ( ) ; BigDecimal quantityToAdd = itemToAdd . getQtyCsv ( ) ; BigDecimal finalQuantity = null ; if ( ! add ) finalQuantity = originalQuantity . subtract ( quantityToAdd ) ; else finalQuantity = originalQuantity . add ( quantityToAdd ) ; original . setQtyCsv ( finalQuantity ) ; }
public static Number abs ( Number a ) { if ( isFloatingPoint ( a ) ) { return Math . abs ( a . doubleValue ( ) ) ; } else { return Math . abs ( a . longValue ( ) ) ; } }
$F43277 ( listener , mListeners )
private void sendResponse ( String status , String mime , Properties header , InputStream data ) { try { if ( status == null ) $F9283 $F147972 ( out , mySocket ) $F80496 ( pw , out ) $F147974 ( pw , status ) if ( mime != null ) $F147974 ( pw , mime ) if ( header == null || header . getProperty ( NUM00 ) == null ) pw . print ( $F52171 ( gmtFrmt ) + NUM00 ) ; if ( header != null ) { $F10529 ( e , header ) while $F1444 ( e ) { $F14952 ( key , e ) $F7601 ( value , header , key ) pw . print ( key + NUM00 + value + NUM00 ) ; } } $F21384 ( pw ) $F1206 ( pw ) if ( data != null ) { $F89380 ( pending , data ) $F12496 ( buff ) while ( pending > NUM00 ) { int read = data . read ( buff , NUM00 , ( ( pending > NUM00 ) ? NUM00 : pending ) ) ; $F137919 ( read ) $F11584 ( out , buff , read ) pending -= read ; } } $F1206 ( out ) $F59 ( out ) $F711 ( data ) } catch ( IOException ioe ) { try $F881 ( mySocket ) $F58785 } }
$F38750 ( input , encoding , toInputStream )
public User $F1947 ( id , name , email ) $F9180 ( this , id , email , name )
public static void forceDeleteOnExit ( File file ) throws IOException { if $F3444 ( file ) { deleteDirectoryOnExit ( file ) ; } else $F125403 ( file ) }
$F1431 public $F131 toArray $F72 { $F677 ( lock , this ) $F790 ( lock ) try { $F133 ( a , count ) int k = NUM00 ; for ( $F13430 p = first ; p != null ; p = p . next ) a [ k ++ ] = p . item ; return a ; } $F796 ( lock ) }
public static Asset createAssetFromBitmap ( Bitmap bitmap ) { if ( bitmap != null ) { $F99460 ( byteStream ) $F125872 ( bitmap , Bitmap , byteStream ) return Asset . createFromBytes ( byteStream . toByteArray ( ) ) ; } $F1274 }
public boolean isIPValid ( Session sess , String clientIP ) throws SSOException { boolean check = _BOOL ; try { InetAddress sessIPAddress = InetAddress . getByName ( sess . getProperty ( NUM00 ) ) ; $F123267 ( clientIPAddress , InetAddress , clientIP ) $F67935 ( sessIPAddress , clientIPAddress , check , _BOOL ) } catch ( Exception e ) { if $F6299 ( debug ) $F218635 ( debug , e ) } return check ; }
$F1431 private static void handleMethodNode ( GetStaticGraph staticUsageTree , ClassNode cn , MethodNode mn , int depth ) { InsnList instructions = mn . instructions ; Iterator < AbstractInsnNode > iterator = instructions . iterator ( ) ; while $F2921 ( iterator ) { AbstractInsnNode insn = iterator . next ( ) ; if ( insn instanceof MethodInsnNode ) { handleMethodInsnNode ( staticUsageTree , cn , mn , ( MethodInsnNode ) insn , depth + NUM00 ) ; } else if ( insn instanceof FieldInsnNode ) { handleFieldInsnNode ( staticUsageTree , cn , mn , ( FieldInsnNode ) insn , depth + NUM00 ) ; } } }
public boolean handleTouch ( MotionEvent event ) { int action = event . getAction ( ) ; if ( mRenderer != null && action == MotionEvent . ACTION_MOVE ) { if ( oldX >= NUM00 || oldY >= NUM00 ) { float newX = event . getX ( NUM00 ) ; float newY = event . getY ( NUM00 ) ; if ( event . getPointerCount ( ) > NUM00 && ( oldX2 >= NUM00 || oldY2 >= NUM00 ) && mRenderer . isZoomEnabled ( ) ) { float newX2 = event . getX ( NUM00 ) ; float newY2 = event . getY ( NUM00 ) ; $F40429 ( newDeltaX , Math , newX , newX2 ) $F40429 ( newDeltaY , Math , newY , newY2 ) $F40429 ( oldDeltaX , Math , oldX , oldX2 ) $F40429 ( oldDeltaY , Math , oldY , oldY2 ) float zoomRate = NUM00 ; float tan1 = Math . abs ( newY - oldY ) / Math . abs ( newX - oldX ) ; float tan2 = Math . abs ( newY2 - oldY2 ) / Math . abs ( newX2 - oldX2 ) ; if ( tan1 <= NUM00 && tan2 <= NUM00 ) { zoomRate = newDeltaX / oldDeltaX ; applyZoom ( zoomRate , Zoom . ZOOM_AXIS_X ) ; } else if ( tan1 >= NUM00 && tan2 >= NUM00 ) { zoomRate = newDeltaY / oldDeltaY ; applyZoom ( zoomRate , Zoom . ZOOM_AXIS_Y ) ; } else { if ( Math . abs ( newX - oldX ) >= Math . abs ( newY - oldY ) ) { zoomRate = newDeltaX / oldDeltaX ; } else { zoomRate = newDeltaY / oldDeltaY ; } applyZoom ( zoomRate , Zoom . ZOOM_AXIS_XY ) ; } oldX2 = newX2 ; oldY2 = newY2 ; } else if ( mRenderer . isPanEnabled ( ) ) { mPan . apply ( oldX , oldY , newX , newY ) ; oldX2 = NUM00 ; oldY2 = NUM00 ; } oldX = newX ; oldY = newY ; $F8798 ( graphicalView ) return _BOOL ; } } else if ( action == MotionEvent . ACTION_DOWN ) { oldX = event . getX ( NUM00 ) ; oldY = event . getY ( NUM00 ) ; if ( mRenderer != null && mRenderer . isZoomEnabled ( ) && zoomR . contains ( oldX , oldY ) ) { if ( oldX < zoomR . left + $F77595 ( zoomR ) ) { graphicalView . zoomIn ( ) ; } else if ( oldX < zoomR . left + zoomR . width ( ) * NUM00 / NUM00 ) { graphicalView . zoomOut ( ) ; } else { graphicalView . zoomReset ( ) ; } return _BOOL ; } } else if ( action == MotionEvent . ACTION_UP || action == MotionEvent . ACTION_POINTER_UP ) { oldX = NUM00 ; oldY = NUM00 ; oldX2 = NUM00 ; oldY2 = NUM00 ; if ( action == MotionEvent . ACTION_POINTER_UP ) { oldX = - NUM00 ; oldY = - NUM00 ; } } return ! mRenderer . isClickEnabled ( ) ; }
public void addParameter ( NameValuePair param ) throws IllegalArgumentException { $F1932 ( log ) $F826 ( param ) addParameter ( param . getName ( ) , param . getValue ( ) ) ; }
public static String readAsString ( InputStream is ) throws IOException { $F280 ( buf ) $F12496 ( b ) int nread = - NUM00 ; while $F42482 ( nread , is , b ) { String s = $F626 ( b , nread ) ; buf . append ( s ) ; } $F92 ( buf ) }
private void readPolicies ( XmlPullParser parser ) throws $F139192 { while ( parser . next ( ) != XmlPullParser . END_TAG ) { if ( parser . getEventType ( ) != XmlPullParser . START_TAG ) $F1448 $F20605 ( name , parser ) if $F1238 ( TAG_USER_RESTRICTION , name ) { $F85602 ( userRestriction , parser , ATTRIBUTE_NAME ) $F1140 ( userRestriction , mUserRestrictions ) } else if $F1238 ( TAG_GLOBAL_SETTING , name ) { $F85602 ( setting , parser , ATTRIBUTE_NAME ) $F85602 ( value , parser , ATTRIBUTE_VALUE ) if ( setting != null && value != null ) { mGlobalSettings . add ( new GlobalSetting ( setting , value ) ) ; } } else if $F1238 ( TAG_DISABLE_STATUS_BAR , name ) { mDisableStatusBar = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; } else if $F1238 ( TAG_DISABLE_KEYGUARD , name ) { mDisableKeyguard = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; } else if $F1238 ( TAG_DISABLE_CAMERA , name ) { mDisableCamera = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; } else if $F1238 ( TAG_DISABLE_SCREEN_CAPTURE , name ) { mDisableScreenCapture = Boolean . parseBoolean ( parser . getAttributeValue ( null , ATTRIBUTE_VALUE ) ) ; } skipCurrentTag ( parser ) ; } }
public boolean readHeader ( RandomAccessFile raf ) throws IOException { $F75240 ( id ) for ( $F6268 ( i ) ) { $F7468 ( ch , raf ) if ( ch < NUM00 ) { $F21991 ( hx , Integer , ch ) if $F3599 ( hx ) $F21679 ( hx ) return _BOOL ; } $F36813 ( id , ch ) } $F6947 ( _chunkID , id ) _size = AiffUtil . readUINT32 ( raf ) ; return _BOOL ; }
private XYPlot initializePlot $F72 { $F89138 ( jmxChart ) YIntervalSeriesCollection yintervalseriescollection = new YIntervalSeriesCollection $F72 ; yintervalseriescollection . addSeries ( jmxChart ) ; DeviationRenderer renderer = new DeviationRenderer ( _BOOL , _BOOL ) ; renderer . setBaseShapesVisible ( _BOOL ) ; renderer . setSeriesStroke ( NUM00 , new BasicStroke ( NUM00 , BasicStroke . CAP_ROUND , BasicStroke . JOIN_ROUND ) ) ; renderer . setSeriesFillPaint ( NUM00 , $F89156 ) ; renderer . setSeriesOutlineStroke ( $F89162 ) ; renderer . setSeriesShape ( NUM00 , new $F35359 $F89166 ) ; renderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator ( StandardXYToolTipGenerator . DEFAULT_TOOL_TIP_FORMAT , DateFormat . getDateTimeInstance ( ) , NumberFormat . getNumberInstance ( ) ) ) ; NumberAxis rangeAxis = plotDataSolver . getAxis ( ) ; subplot = new XYPlot ( yintervalseriescollection , null , rangeAxis , renderer ) ; subplot . setAxisOffset ( new RectangleInsets $F13777 ) ; subplot . setRangeAxisLocation ( AxisLocation . TOP_OR_LEFT ) ; subplot . setRangeCrosshairVisible ( _BOOL ) ; return subplot ; }
private boolean isFatalState ( String sqlState ) { if ( $F107041 ( sqlState ) ) { return _BOOL ; } for ( String FATAL_SQL_STATE_CLASS : FATAL_SQL_STATE_CLASSES ) $F72107 ( sqlState , FATAL_SQL_STATE_CLASS , _BOOL ) return _BOOL ; }
private void analyzeFile ( File inputFile , Optional < CommonTokenStream > optTokenStream , Optional < TopLevelContext > optTree , Formatter formatter , Severity maxSeverity , ConstructLengths constructLengths , Set < Rules > enabledRules ) throws CLIArgumentParserException { try { Printer printer = new Printer ( inputFile , maxSeverity , formatter ) ; if ( optTokenStream . isPresent ( ) && optTree . isPresent ( ) ) { CommonTokenStream tokenStream = optTokenStream . get ( ) ; TopLevelContext tree = optTree . get ( ) ; CommentExtractor commentExtractor = new CommentExtractor ( tokenStream ) ; ViolationSuppressor disableAnalysis = new ViolationSuppressor ( printer , commentExtractor . getSingleLineComments ( ) , commentExtractor . getMultilineComments ( ) ) ; disableAnalysis . analyze ( ) ; List < SwiftBaseListener > listeners = createListeners ( enabledRules , printer , tokenStream , constructLengths , commentExtractor ) ; walkParseTree ( listeners , tree ) ; try ( FileListener fileListener = new FileListener ( printer , inputFile , constructLengths , enabledRules ) ) { fileListener . verify ( ) ; } numErrors . addAndGet ( printer . getNumErrorMessages ( ) ) ; numWarnings . addAndGet ( printer . getNumWarningMessages ( ) ) ; } else { printer . setShouldPrintParseErrorMessage ( _BOOL ) ; } printersForAllFiles . add ( printer ) ; } $F52544 ( handleIOException , e ) catch ( CLIArgumentParserException e ) { handleCLIException ( e ) ; } }
$F1431 public static < ValueT > ValueT toObject ( ByteBuffer bf ) throws $F6427 { Object obj = null ; InputStream is = null ; ObjectInputStream ois = null ; try { is = new ByteBufferBackedInputStream ( bf ) ; $F14589 ( ois , is ) $F215455 ( obj , ois ) } $F85840 ( is , ois ) return ( ValueT ) obj ; }
static private void scanDeadlineQueue ( final long nowNanos , final PriorityBlockingQueue < QueryDeadline > deadlineQueue ) { final List < QueryDeadline > c = new ArrayList < QueryDeadline > ( DEADLINE_QUEUE_SCAN_SIZE ) ; deadlineQueue . drainTo ( c , DEADLINE_QUEUE_SCAN_SIZE ) ; int ndropped = NUM00 , nrunning = NUM00 ; for ( QueryDeadline x : c ) { if ( x . checkDeadline ( nowNanos ) != null ) $F107337 ( deadlineQueue , x , nrunning ) else { ndropped ++ ; } } if $F17747 ( log ) log . info ( NUM00 + DEADLINE_QUEUE_SCAN_SIZE + NUM00 + ndropped + NUM00 + nrunning + NUM00 + deadlineQueue . size ( ) ) ; }
public int compare ( File file1 , File file2 ) { return caseSensitivity . checkCompareTo ( $F66558 ( file1 , file2 ) ) ; }
$F1 public String lastString $F72 $F23210 ( Integer , lastint )
public boolean removeItemContent ( String uid ) { if $F5973 ( users ) $F8587 ( removeContent , uid , users ) else if $F5973 ( reports ) $F8587 ( removeContent , uid , reports ) else $F8587 ( removeContent , uid , resources ) }
public void close $F72 { if ( dialog != null ) { dialog . setVisible ( _BOOL ) ; $F355 ( dialog ) dialog = null ; pane = null ; myBar = null ; } }
public static void expandOrdinal ( String rawNumberString , WordRelation wordRelation ) { String numberString = Utilities . deleteChar ( rawNumberString , NUM00 ) ; expandNumber ( numberString , wordRelation ) ; Item lastItem = wordRelation . getTail ( ) ; if ( lastItem != null ) { $F85094 ( featureSet , lastItem ) $F21024 ( lastNumber , featureSet ) String ordinal = findMatchInArray ( lastNumber , digit2num , ord2num ) ; $F63621 ( ordinal , findMatchInArray , lastNumber , digit2teen , ord2teen ) $F63621 ( ordinal , findMatchInArray , lastNumber , digit2enty , ord2enty ) if $F3057 ( lastNumber ) { ordinal = NUM00 ; } else if $F3057 ( lastNumber ) { ordinal = NUM00 ; } else if $F3057 ( lastNumber ) { ordinal = NUM00 ; } if ( ordinal != null ) { wordRelation . setLastWord ( ordinal ) ; } } }
private void checkBoundedTypeParameter ( Method method ) { $F91854 ( typeParameter , getTypeParameter , method ) $F64976 ( assertEquals , typeParameter ) $F91862 ( assertEquals , method , typeParameter ) $F24901 bounds = typeParameter . getBounds ( ) ; assertLenghtOne ( bounds ) ; Type bound = bounds [ NUM00 ] ; assertEquals ( BoundedWildcardsGenericMethods . class , bound ) ; }
public void registerSensor ( Sensor s , int i ) { if ( ( i < NUM00 ) || ( i > ( inputBits [ nodeType ] - NUM00 ) ) || ( i > MAXSENSORS ) ) { log . error ( NUM00 + Integer . toString ( i + NUM00 ) ) ; $F665 } hasActiveSensors = _BOOL ; if ( sensorArray [ i ] == null ) { sensorArray [ i ] = s ; $F8790 ( lastUsedSensor , i ) } else { log . warn ( NUM00 + Integer . toString ( ( getNodeAddress ( ) * SerialSensorManager . SENSORSPERNODE ) + i + NUM00 ) ) ; } }
public boolean hasOrganisationUnits $F72 { $F200953 dimOpts = getDimensionOptions ( ORGUNIT_DIM_ID ) ; $F200953 filterOpts = getFilterOptions ( ORGUNIT_DIM_ID ) ; return $F123850 ( dimOpts , filterOpts ) ; }
protected void fixupBlocks $F97 ( bytes2 ) { $F96 bytes = bytes2 ; for ( $F2774 ( enumerator , blocks ) ) { $F2027 info = ( $F2027 ) enumerator . next ( ) ; int codeSize = info [ NUM00 ] ; int offset = info [ NUM00 ] ; $F96 sizeBytes = OutStream . sintTo2Bytes ( codeSize ) ; bytes [ offset ] = sizeBytes [ NUM00 ] ; $F76497 ( bytes , offset , sizeBytes ) } }
protected double negativeLogLikelihood $F219838 ( dataYs , probs ) { double logLikelihood = NUM00 ; for ( $F1139 ( i , dataYs ) ) { for ( $F119 ( j , m_numClasses ) ) { if ( dataYs [ i ] [ j ] == NUM00 ) { logLikelihood -= Math . log ( probs [ i ] [ j ] ) ; } } } return logLikelihood ; }
public static boolean validSystemNameConfig ( String systemName , char type , AcelaSystemConnectionMemo memo ) { if ( ! validSystemNameFormat ( systemName , type , memo . getSystemPrefix ( ) ) ) { return _BOOL ; } AcelaNode node = getNodeFromSystemName ( systemName , memo ) ; $F1933 ( node , _BOOL ) int bit = getBitFromSystemName ( systemName ) ; if $F34322 ( type ) { if $F61167 ( bit , MINOUTPUTADDRESS , MAXOUTPUTADDRESS ) { return _BOOL ; } } else if ( type == NUM00 ) { if $F61167 ( bit , MINSENSORADDRESS , MAXSENSORADDRESS ) { return _BOOL ; } } else $F24275 ( log , _BOOL ) return _BOOL ; }
public void readEncryptionObject ( final PdfObject encyptionObj , final PdfFileReader pdfFileReader ) throws PdfSecurityException { stringsEncoded = _BOOL ; isMetaDataEncypted = _BOOL ; StmFObj = null ; StrFObj = null ; isAES = _BOOL ; if ( ! isInitialised ) { isInitialised = _BOOL ; $F10089 ( SetSecurity ) } if ( SetSecurity . useBouncyCastle ) { decryptionMethods = new BouncyCastleDecryption $F72 ; } else { decryptionMethods = new JCADecryption $F72 ; } final int v = encyptionObj . getInt ( PdfDictionary . V ) ; final PdfArrayIterator filters = encyptionObj . getMixedArray ( PdfDictionary . Filter ) ; int firstValue = PdfDictionary . Standard ; if ( filters != null && filters . hasMoreTokens ( ) ) { firstValue = filters . getNextValueAsConstant ( _BOOL ) ; } if ( v == NUM00 ) { throw new PdfSecurityException $F580 ; } else if ( ( v > NUM00 ) && ( firstValue != PdfDictionary . Standard ) ) { throw new PdfSecurityException $F580 ; } final int newLength = encyptionObj . getInt ( PdfDictionary . Length ) > > NUM00 ; if ( newLength != - NUM00 ) { this . keyLength = newLength ; } rev = encyptionObj . getInt ( PdfDictionary . R ) ; P = encyptionObj . getInt ( PdfDictionary . P ) ; O = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . O ) ; U = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . U ) ; OE = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . OE ) ; UE = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . UE ) ; Perms = encyptionObj . getTextStreamValueAsByte ( PdfDictionary . Perms ) ; if ( v >= NUM00 ) { isAES = _BOOL ; String CFkey ; final PdfObject CF = encyptionObj . getDictionary ( PdfDictionary . CF ) ; if ( v == NUM00 ) { isMetaDataEncypted = encyptionObj . getBoolean ( PdfDictionary . EncryptMetadata ) ; } isAESIdentity = _BOOL ; String key = encyptionObj . getName ( PdfDictionary . StrF ) ; if ( key != null ) { isAESIdentity = key . equals ( NUM00 ) ; stringsEncoded = _BOOL ; final PdfKeyPairsIterator keyPairs = CF . getKeyPairsIterator ( ) ; while ( keyPairs . hasMorePairs ( ) ) { CFkey = keyPairs . getNextKeyAsString ( ) ; if $F1238 ( CFkey , key ) { StrFObj = PdfObjectFactory . getPDFObjectObjectFromRefOrDirect ( new EncryptionObject ( encyptionObj . getObjectRefAsString ( ) ) , pdfFileReader , keyPairs . getNextValueAsBytes ( ) , PdfDictionary . CF ) ; } keyPairs . nextPair ( ) ; } } key = encyptionObj . getName ( PdfDictionary . StmF ) ; if ( key != null ) { isAESIdentity = key . equals ( NUM00 ) ; final PdfKeyPairsIterator keyPairs = CF . getKeyPairsIterator ( ) ; while ( keyPairs . hasMorePairs ( ) ) { CFkey = keyPairs . getNextKeyAsString ( ) ; if $F1238 ( CFkey , key ) { StmFObj = PdfObjectFactory . getPDFObjectObjectFromRefOrDirect ( new EncryptionObject ( encyptionObj . getObjectRefAsString ( ) ) , pdfFileReader , keyPairs . getNextValueAsBytes ( ) , PdfDictionary . CF ) ; } keyPairs . nextPair ( ) ; } } } isEncrypted = _BOOL ; isFileViewable = _BOOL ; LogWriter . writeLog ( NUM00 ) ; if ( firstValue == PdfDictionary . Standard ) { try $F5795 ( verifyAccess ) catch ( final PdfSecurityException e ) { LogWriter . writeLog ( NUM00 + e ) ; } } else if ( certificate != null ) { isFileViewable = _BOOL ; isPasswordSupplied = _BOOL ; extractionIsAllowed = _BOOL ; passwordStatus = PDFflags . VALID_OWNER_PASSWORD ; } if ( rev == NUM00 ) { Perms = v5Decrypt ( Perms , encryptionKey ) ; isMetaDataEncypted = Perms [ NUM00 ] == NUM00 ; P = $F358766 ( Perms ) | $F257715 ( Perms ) | $F257715 ( Perms ) ; } }
public void addMember ( String playerName ) { openInvites . remove ( playerName ) ; membersAndLastSeen . put ( playerName , $F258568 ( Long , System ) ) ; $F13265 ( leader , playerName ) sendGroupChangeEvent ( ) ; }
public BubbleXYItemLabelGenerator $F72 { this ( DEFAULT_FORMAT_ <missing ';'> NUM00 , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; }
void addNodes ( $F27878 newNodes , boolean atBeginning ) { if ( atBeginning ) { if ( $F3817 ( nodes ) && nodes . get ( NUM00 ) == $F7661 ( newNodes ) ) { $F1594 ( Log , DEBUG_TAG ) if $F3817 ( newNodes ) { $F1594 ( Log , DEBUG_TAG ) $F30606 ( newNodes ) addNodes ( newNodes , atBeginning ) ; } $F665 } $F177656 ( nodes , newNodes ) } else { if ( $F3817 ( nodes ) && newNodes . get ( NUM00 ) == $F7661 ( nodes ) ) { $F1594 ( Log , DEBUG_TAG ) if $F3817 ( newNodes ) { $F1594 ( Log , DEBUG_TAG ) $F86372 ( newNodes ) addNodes ( newNodes , atBeginning ) ; } $F665 } nodes . addAll ( newNodes ) ; } }
public synchronized Boolean updateAVClientByStreamId ( String streamId , RoomClient rcm ) { try { RoomClient rclUsual = getClientByPublicSID ( rcm . getPublicSID ( ) , _BOOL ) ; if ( rclUsual != null ) { rclUsual . setBroadCastID ( rcm . getBroadCastID ( ) ) ; rclUsual . setAvsettings ( rcm . getAvsettings ( ) ) ; rclUsual . setVHeight ( rcm . getVHeight ( ) ) ; rclUsual . setVWidth ( rcm . getVWidth ( ) ) ; rclUsual . setVX ( rcm . getVX ( ) ) ; rclUsual . setVY ( rcm . getVY ( ) ) ; if ( clientList . containsKey ( rclUsual . getStreamid ( ) ) ) { clientList . put ( rclUsual . getStreamid ( ) , rclUsual ) ; } else { log . debug ( NUM00 + rclUsual . getStreamid ( ) ) ; } } updateClientByStreamId ( streamId , rcm ) ; } $F9877 ( log , err ) $F1274 }
public void addColor ( int color ) { if ( mColors == null ) $F117818 ( mColors ) mColors . add ( color ) ; }
private void clampStartingPosition $F72 { final float cX = mBounds . exactCenterX ( ) ; final float cY = mBounds . exactCenterY ( ) ; final float dX = mStartingX - cX ; final float dY = mStartingY - cY ; final float r = mTargetRadius ; if ( dX * dX + dY * dY > r * r ) { final double angle = Math . atan2 ( dY , dX ) ; mClampedStartingX = cX + ( float ) ( Math . cos ( angle ) * r ) ; mClampedStartingY = cY + ( float ) ( Math . sin ( angle ) * r ) ; } else { mClampedStartingX = mStartingX ; mClampedStartingY = mStartingY ; } }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public boolean isEmpty $F72 { if ( lastBatch != null ) { $F77773 ( lastBatch , _BOOL ) } $F18904 ( currentBatch ) }
$F1431 public DummyData ( int cols , int rows , $F65474 value ) { value . getClass ( ) ; this . cols = cols ; this . rows = rows ; this . value = value ; Class $F195402 [ ] types = new Class [ cols ] ; Arrays . fill ( types , value . getClass ( ) ) ; setColumnTypes ( types ) ; }
public Object clone $F72 throws CloneNotSupportedException { NodeVector clone = ( NodeVector ) super . clone ( ) ; if ( ( null != this . m_map ) && ( this . m_map == clone . m_map ) ) { clone . m_map = new int [ this . m_map . length ] ; System . arraycopy ( this . m_map , NUM00 , clone . m_map , NUM00 , this . m_map . length ) ; } return clone ; }
public boolean matchWithPattern ( String pattern ) { if $F4329 ( TextUtils , pattern ) $F255219 ( mCurrentPattern , mUpperCasePattern , mLowerCasePattern ) $F46019 ( TextUtils , mDisplayName , _BOOL ) if $F4329 ( TextUtils , mUpperCaseDisplayName ) { $F21936 ( mUpperCaseDisplayName , mDisplayName ) mLowerCaseDisplayName = mDisplayName . toUpperCase ( ) ; } if $F2137 ( pattern , mCurrentPattern ) { mCurrentPattern = pattern ; mUpperCasePattern = pattern . toUpperCase ( ) ; $F21936 ( mLowerCasePattern , pattern ) } return $F358955 ( mUpperCaseDisplayName , mUpperCasePattern ) || $F358955 ( mLowerCaseDisplayName , mUpperCasePattern ) ; }
public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( obj instanceof AnnotationMember ) { AnnotationMember that = ( AnnotationMember ) obj ; if ( $F43168 ( name , that , tag ) ) { if ( tag == ARRAY ) { return equalArrayValue ( that . value ) ; } else if ( tag == ERROR ) { return _BOOL ; } else $F12739 ( value , that ) } } return _BOOL ; }
public int hleJpegDecodeYCbCr ( BufferedImage bufferedImage , TPointer yCbCrBuffer , int yCbCrBufferSize , int dhtMode ) { $F2049 ( width , bufferedImage ) $F2047 ( height , bufferedImage ) int sizeY = width * height ; int sizeCb = sizeY > > NUM00 ; int addressY = yCbCrBuffer . getAddress ( ) ; int addressCb = addressY + sizeY ; int addressCr = addressCb + sizeCb ; if $F585 ( log ) { log . debug ( String . format ( NUM00 , addressY , addressCb , addressCr ) ) ; } $F4120 ( bufferCb , sizeCb ) $F4120 ( bufferCr , sizeCb ) IMemoryWriter imageWriterY = MemoryWriter . getMemoryWriter ( addressY , sizeY , NUM00 ) ; for ( $F119 ( y , height ) ) { int indexCb = ( y > > NUM00 ) * ( width > > NUM00 ) ; for ( int x = NUM00 ; x < width ; x += NUM00 , indexCb ++ ) { int argb0 = bufferedImage . getRGB ( x , y ) ; int yCbCr0 = colorARGBToYCbCr ( argb0 ) ; int argb1 = bufferedImage . getRGB ( x + NUM00 , y ) ; int yCbCr1 = colorARGBToYCbCr ( argb1 ) ; imageWriterY . writeNext ( getY ( yCbCr0 ) ) ; imageWriterY . writeNext ( getY ( yCbCr1 ) ) ; bufferCb [ indexCb ] += getCb ( yCbCr0 ) ; bufferCb [ indexCb ] += getCb ( yCbCr1 ) ; bufferCr [ indexCb ] += getCr ( yCbCr0 ) ; bufferCr [ indexCb ] += getCr ( yCbCr1 ) ; } } $F1206 ( imageWriterY ) IMemoryWriter imageWriterCb = MemoryWriter . getMemoryWriter ( addressCb , sizeCb , NUM00 ) ; IMemoryWriter imageWriterCr = MemoryWriter . getMemoryWriter ( addressCr , sizeCb , NUM00 ) ; for ( $F119 ( i , sizeCb ) ) { imageWriterCb . writeNext ( bufferCb [ i ] > > NUM00 ) ; imageWriterCr . writeNext ( bufferCr [ i ] > > NUM00 ) ; } $F1206 ( imageWriterCb ) $F1206 ( imageWriterCr ) return getWidthHeight ( width , height ) ; }
public static Range iterateZBounds ( XYZDataset dataset , boolean includeInterval ) { double minimum = Double . POSITIVE_INFINITY ; double maximum = Double . NEGATIVE_INFINITY ; $F36951 ( seriesCount , dataset ) for ( $F119 ( series , seriesCount ) ) { $F19407 ( itemCount , dataset , series ) for ( $F119 ( item , itemCount ) ) { double value = dataset . getZValue ( series , item ) ; $F19412 ( Double , value , minimum , Math , maximum ) } } if ( minimum == Double . POSITIVE_INFINITY ) $F1337 else $F19420 ( minimum , maximum ) }
public void removeViewFromFadeList ( View view ) { if ( mFadeViewList != null && view != null ) $F106 ( mFadeViewList , view ) }
void addIndifferentAlgorithm ( String algorithm ) $F207 ( indifferentAlgorithms , algorithm )
public UnionIterator ( Iterable $F22448 ... args ) $F81861 ( this , Arrays , args )
public static String mangleNativeMethod $F1947 ( owner , name , desc ) { $F83 ( sb ) $F84 ( sb ) $F6407 ( sb , mangleNativeString , owner ) $F84 ( sb ) $F6407 ( sb , mangleNativeString , name ) if ( desc != null ) { $F84 ( sb ) sb . append ( mangleNativeString ( $F129389 ( desc ) ) ) ; } $F92 ( sb ) }
public String readLine $F72 throws IOException { boolean gotCR = _BOOL , gotLF = _BOOL ; pos = NUM00 ; $F7398 ( lineBuf ) while ( ! gotLF ) { $F7468 ( c , is ) $F132643 ( c ) if ( gotCR ) { if ( c == LF ) { gotLF = _BOOL ; } else { gotCR = _BOOL ; consume ( CR ) ; consume ( c ) ; } } else { if ( c == CR ) { gotCR = _BOOL ; } else { consume ( c ) ; } } } $F58551 ( lineBuf , buf , pos ) $F22269 ( lineBuf ) }
public LobbyClient login $F72 { if ( ! m_serverProperties . isServerAvailable ( ) ) { JOptionPane . showMessageDialog ( m_parent , m_serverProperties . serverErrorMessage , NUM00 , JOptionPane . ERROR_MESSAGE ) ; $F1274 } if ( m_serverProperties . port == - NUM00 ) { if ( ClientFileSystemHelper . areWeOldExtraJar ( ) ) { JOptionPane . showMessageDialog ( m_parent , NUM00 + UrlConstants . LATEST_GAME_DOWNLOAD_WEBSITE + NUM00 + NUM00 , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } else { JOptionPane . showMessageDialog ( m_parent , NUM00 + UrlConstants . LATEST_GAME_DOWNLOAD_WEBSITE + NUM00 , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } $F1274 } return loginToServer ( ) ; }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case FunctionblockPackage . PARAM__MULTIPLICITY : return multiplicity != MULTIPLICITY_EDEFAULT ; case FunctionblockPackage . PARAM__NAME : $F6439 ( NAME_EDEFAULT , name ) case FunctionblockPackage . PARAM__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) } $F6444 ( super , featureID ) }
protected Node popNode ( Stack $F6869 stack , Class < ? extends Node > cls , String uri ) { Node top = stack . isEmpty ( ) ? null : stack . peek ( ) ; if ( top != null ) { if ( nodeMatches ( top , cls , uri ) ) { Node node = stack . pop ( ) ; poppedNodes . push ( node ) ; return node ; } else { for ( $F5373 ( i , stack ) ) { if ( nodeMatches ( stack . get ( i ) , cls , uri ) ) { Node node = stack . remove ( i ) ; poppedNodes . push ( node ) ; return node ; } } } } $F1274 }
static String pathToCookiePath ( String path ) { $F4158 ( path ) $F24867 ( lastSlash , path ) return $F1399 ( path , lastSlash ) ; }
public static $F3789 computeWeightMatrix ( int bpp ) { final int dim = bpp * bpp * bpp ; final $F3789 m = new double [ dim ] [ dim ] ; final double max = NUM00 * ( bpp - NUM00 ) ; for ( $F119 ( x , dim ) ) { final int rx = ( x / bpp ) / bpp ; final int gx = ( x / bpp ) % bpp ; final int bx = x % bpp ; for ( int y = x ; y < dim ; y ++ ) { final int ry = ( y / bpp ) / bpp ; final int gy = ( y / bpp ) % bpp ; final int by = y % bpp ; final double dr = Math . abs ( rx - ry ) ; final double dg = Math . abs ( gx - gy ) ; final double db = Math . abs ( bx - by ) ; final double val = NUM00 - ( dr + dg + db ) / max ; m [ x ] [ y ] = m [ y ] [ x ] = val ; } } return m ; }
public boolean moveEntry ( User user , Entry entry , String direction , boolean isAdmin , Errors errors ) { if ( direction == null ) { Errors . add ( errors , errorMessages . errorDirectionIsNull ( ) ) ; return _BOOL ; } if ( entry == null ) { Errors . add ( errors , errorMessages . errorEntryIsNull ( ) ) ; return _BOOL ; } if ( ! canUserModifyEntry ( user , entry , isAdmin ) ) { Errors . add ( errors , errorMessages . errorUserIsNotEntitledToMoveTheEntry ( ) ) ; return _BOOL ; } final String parentId = entry . getParentId ( ) ; String parentFirstChildId = null ; String parentLastChildId = null ; final Entry parent = getEntryById ( parentId ) ; if ( parent == null ) { Errors . add ( errors , errorMessages . errorTheEntryHadNoParentSoItCouldNotBeMoved ( ) ) ; return _BOOL ; } parentFirstChildId = parent . getFirstChildId ( ) ; parentLastChildId = parent . getLastChildId ( ) ; if $F3057 ( direction ) { final String previousId = entry . getPreviousSiblingId ( ) ; if ( previousId == null ) { Errors . add ( errors , errorMessages . errorThereIsNoEntryToMoveBefore ( ) ) ; return _BOOL ; } final Entry previous = getEntryById ( previousId ) ; final String previousPreviousId = previous . getPreviousSiblingId ( ) ; if ( previousPreviousId != null ) { final Entry previousPrevious = getEntryById ( previousPreviousId ) ; if ( previousPrevious != null ) { previousPrevious . setNextSiblingId ( entry . getId ( ) ) ; } } final String nextId = entry . getNextSiblingId ( ) ; if ( nextId != null ) { final Entry next = getEntryById ( nextId ) ; if ( next != null ) { next . setPreviousSiblingId ( previousId ) ; } } entry . setPreviousSiblingId ( previousPreviousId ) ; entry . setNextSiblingId ( previousId ) ; previous . setPreviousSiblingId ( entry . getId ( ) ) ; previous . setNextSiblingId ( nextId ) ; if ( $F18218 ( parentFirstChildId , previousId ) ) { parent . setFirstChildId ( entry . getId ( ) ) ; } if ( parentLastChildId != null && $F140091 ( parentLastChildId , entry ) ) { parent . setLastChildId ( previousId ) ; } } else if $F3057 ( direction ) { final String nextId = entry . getNextSiblingId ( ) ; if ( nextId == null ) { Errors . add ( errors , errorMessages . errorThereIsNoEntryToMoveAfter ( ) ) ; return _BOOL ; } final Entry next = getEntryById ( nextId ) ; final String nextNextId = next . getNextSiblingId ( ) ; if ( nextNextId != null ) { final Entry nextNext = getEntryById ( nextNextId ) ; if ( nextNext != null ) { nextNext . setPreviousSiblingId ( entry . getId ( ) ) ; } } final String previousId = entry . getPreviousSiblingId ( ) ; if ( previousId != null ) { final Entry previous = getEntryById ( previousId ) ; if ( previousId != null ) { previous . setNextSiblingId ( nextId ) ; } } entry . setPreviousSiblingId ( nextId ) ; entry . setNextSiblingId ( nextNextId ) ; next . setPreviousSiblingId ( previousId ) ; next . setNextSiblingId ( entry . getId ( ) ) ; if ( parentFirstChildId != null && $F140091 ( parentFirstChildId , entry ) ) { parent . setFirstChildId ( nextId ) ; } if ( $F18218 ( parentLastChildId , nextId ) ) { parent . setLastChildId ( entry . getId ( ) ) ; } } else if $F3057 ( direction ) { final String parentParentId = parent . getParentId ( ) ; if ( parentParentId == null ) { Errors . add ( errors , errorMessages . errorThereIsNoParentOfTheParent ( ) ) ; return _BOOL ; } snipOutEntry ( entry , parent , _BOOL ) ; insertEntryAfter ( entry , parent , _BOOL ) ; } else if $F3057 ( direction ) { final String previousId = entry . getPreviousSiblingId ( ) ; if ( previousId == null ) { Errors . add ( errors , errorMessages . errorThereIsNoPreviousEntryToUseAsAParent ( ) ) ; return _BOOL ; } snipOutEntry ( entry , parent , _BOOL ) ; final Entry previous = getEntryById ( previousId ) ; final String previousLastChildId = previous . getLastChildId ( ) ; if ( previousLastChildId != null ) { final Entry previousLastChild = getEntryById ( previousLastChildId ) ; previousLastChild . setNextSiblingId ( entry . getId ( ) ) ; } entry . setPreviousSiblingId ( previousLastChildId ) ; entry . setNextSiblingId ( null ) ; previous . setLastChildId ( entry . getId ( ) ) ; if ( ! previous . hasFirstChildId ( ) ) { previous . setFirstChildId ( entry . getId ( ) ) ; } previous . setLastChildId ( entry . getId ( ) ) ; entry . setParentId ( previous . getId ( ) ) ; } else { Errors . add ( errors , errorMessages . errorTheDirectionIsInvalid ( ) ) ; return _BOOL ; } return _BOOL ; }
private static boolean isGnome $F72 { return System . getenv ( NUM00 ) != null ; }
protected SizeRequirements calculateMajorAxisRequirements ( int axis , SizeRequirements r ) { SizeRequirements req = super . calculateMajorAxisRequirements ( axis , r ) ; req . maximum = Integer . MAX_VALUE ; return req ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F1006 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != $F161934 ( node , iterator ) ) { addNodeInDocOrder ( node , support ) ; } }
public Map < String , List < RevisionFile > > currentRevisionFiles $F72 ;
protected static $F7329 rorRegister $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { $F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpRsFour , environment ) $F7336 ( tmpRsFourNegative , environment ) $F7336 ( tmpRsSeven , environment ) $F7336 ( isZeroConditionFour , environment ) $F7336 ( isNotZeroConditionFour , environment ) $F7336 ( isZeroConditionSeven , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) $F7336 ( tmpVar5 , environment ) $F7336 ( tmpVar6 , environment ) $F7336 ( tmpVar7 , environment ) $F7336 ( tmpVar8 , environment ) $F7336 ( shifterCarryOutTmp1 , environment ) $F7336 ( shifterCarryOutTmp2 , environment ) $F7336 ( shifterCarryOutTmp3 , environment ) $F7336 ( shifterCarryOutTmp4 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsSeven ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpRsSeven , byteSize , isZeroConditionSeven ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , tmpRsSeven , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsFour ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpRsFour , byteSize , isZeroConditionFour ) instructions . add ( ReilHelpers . createBisz ( baseOffset ++ , byteSize , isZeroConditionFour , byteSize , isNotZeroConditionFour ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpRsFour , dWordSize , tmpRsFourNegative ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpRsFourNegative , dWordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpRsFour , dWordSize , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar2 , dWordSize , tmpVar3 ) ) ; $F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar1 , tmpVar3 , tmpVar4 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar4 , bitMaskAllBitsSet , shifterOperand ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , NUM00 , byteSize , isZeroConditionSeven , byteSize , shifterCarryOutTmp1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , minusThirtyOneSet , byteSize , tmpVar5 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , byteSize , tmpVar5 , isZeroConditionFour , shifterCarryOutTmp2 ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpRsFour , byteSize , oneSet , dWordSize , tmpVar6 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar6 , dWordSize , tmpVar7 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar7 , dWordSize , tmpVar8 ) ) ; $F7364 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar8 , byteSize , isNotZeroConditionFour , shifterCarryOutTmp3 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp1 , shifterCarryOutTmp2 , shifterCarryOutTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp3 , shifterCarryOutTmp4 , shifterCarryOut ) $F7348 ( shifterOperand , shifterCarryOut ) }
public static $F96 readFully ( InputStream in ) throws IOException { $F11452 ( readFullyNoClose , in ) }
public void endSubreport ( String subreport ) { if $F2979 ( subreport ) { $F131438 ( LOG , String , subreport ) $F665 } String topSubreport = subreports . peek ( ) ; if $F1238 ( topSubreport , subreport ) { $F34454 ( subreports ) addLogEntry ( new SubreportEndEntry ( subreport ) ) ; $F665 } $F131438 ( LOG , String , subreport ) }
public static double dnormLog $F7635 ( x , mean , sd ) { if ( sd <= NUM00 ) $F824 return - Math . log ( sd ) + dnormLog ( ( x - mean ) / sd ) ; }
public static void delete ( File f ) { delete_ ( f , _BOOL ) ; }
public BufferedHeader ( final CharArrayBuffer buffer ) throws ParseException { super ( ) ; $F826 ( buffer ) $F1384 ( colon , buffer ) if ( colon == - NUM00 ) { throw new ParseException $F3943 ( buffer ) ; } String s = buffer . substringTrimmed ( NUM00 , colon ) ; if $F1277 ( s ) { throw new ParseException $F3943 ( buffer ) ; } this . buffer = buffer ; this . name = s ; this . valuePos = colon + NUM00 ; }
public boolean extendsEntity $F60993 ( entityDefinition ) { return entityDefinition . getAnnotation ( ExtendsEntity . class ) != null ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public void parse ( InputSource input ) throws $F35763 { if ( parsing ) $F268590 setupParser ( ) ; parsing = _BOOL ; try { parser . parse ( input ) ; } finally { parsing = _BOOL ; } parsing = _BOOL ; }
private void release0 ( long ptr , long size , AtomicLong cnt ) { if ( ptr != NUM00 ) { if ( SAFE_RELEASE ) fill ( ptr , size , $F19905 ) ; GridUnsafe . freeMemory ( ptr ) ; cnt . addAndGet ( - size ) ; if ( lsnr != null ) lsnr . onEvent ( RELEASE ) ; } }
public void addServices ( List < ServiceDefinition > services ) throws Exception { ensurePathExists ( ) ; $F2689 remainingDescriptors = new $F9623 ( dataManager . getChildren ( ZK_SERVICE_DEFINITION_PATH ) ) ; for ( ServiceDefinition service : services ) { LOG . debug ( String . format ( NUM00 , service . serviceId ) ) ; String path = getServiceDefinitionPath ( service . serviceId ) ; try { Stat before = dataManager . checkExists ( path ) ; dataManager . putData ( path , service ) ; Stat after = dataManager . checkExists ( path ) ; nodeUpdated ( path , before , after ) ; remainingDescriptors . remove ( service . serviceId ) ; } catch ( Exception e ) { LOG . error ( String . format ( NUM00 , service . serviceId , path ) , e ) ; throw e ; } } for ( String descriptorName : remainingDescriptors ) { $F102990 ( LOG , String , descriptorName ) dataManager . removeNode ( ZK_SERVICE_DEFINITION_PATH + NUM00 + descriptorName ) ; } }
protected void readProps $F72 { int count ; Properties props ; int i ; String itemStr ; T item ; m_IgnoreChanges = _BOOL ; props = loadProps ( ) ; count = Integer . parseInt ( props . getProperty ( expand ( getCountKey ( ) ) , NUM00 ) ) ; $F725 ( m_RecentItems ) for ( $F157662 ( i , count ) ) { itemStr = props . getProperty ( getItemPrefix ( ) + i , NUM00 ) ; if $F4012 ( itemStr ) { item = fromString ( itemStr ) ; if ( check ( item ) ) addRecentItem ( item ) ; } } m_IgnoreChanges = _BOOL ; }
public FormIndex stepIndexOut ( FormIndex index ) { if $F93782 ( index ) $F1337 else { return new FormIndex ( stepIndexOut ( index . getNextLevel ( ) ) , index ) ; } }
protected double kernelHelperLP ( int n , $F1469 s , int endIndexS , $F1469 t , int endIndexT , int remainingMatchLength ) { if ( n == NUM00 ) $F4915 ( getReturnValue , n ) if ( Math . min ( endIndexS + NUM00 , endIndexT + NUM00 ) < n ) { ; return getReturnValue ( n ) ; } if ( remainingMatchLength < NUM00 * n ) $F4915 ( getReturnValue , n ) int adr = NUM00 ; if ( m_useRecursionCache ) { adr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength ; if ( cachekh2K [ adr % maxCache ] == adr + NUM00 ) { return cachekh2 [ adr % maxCache ] ; } } int rml = NUM00 ; double result = NUM00 ; for ( int iS = ( endIndexS - remainingMatchLength ) ; iS <= endIndexS ; iS ++ ) { result *= m_lambda ; result += kernelHelper2LP ( n , s , iS , t , endIndexT , rml ++ ) ; } if ( m_useRecursionCache && endIndexS >= NUM00 && endIndexT >= NUM00 && n >= NUM00 ) { cachekhK [ adr % maxCache ] = adr + NUM00 ; cachekh [ adr % maxCache ] = result ; } return result ; }
$F1 protected synchronized void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int width = NUM00 ; $F136573 ( MeasureSpec , widthMeasureSpec , width ) $F2047 ( height , thumbImage ) $F136578 ( MeasureSpec , heightMeasureSpec , height , Math ) setMeasuredDimension ( width , height ) ; }
public void start $F72 { calculatePositionArray ( ) ; setPreferredSize ( calculatePreferredSize ( ) ) ; offset = getWidth ( ) ; timer = new Timer ( interval , this ) ; $F2346 ( timer ) }
public static void writePlainFile $F84589 ( filePath , content ) throws IOException { $F4649 ( fileOuputStream , filePath ) fileOuputStream . write ( content ) ; $F59 ( fileOuputStream ) }
public void transform ( AffineTransform at ) { $F83345 ( clip ) $F83345 ( clip ) $F83345 ( clip ) $F83345 ( clip ) at . transform ( clip , NUM00 , clip , NUM00 , NUM00 ) ; double xmin = clip [ NUM00 ] , ymin = clip [ NUM00 ] ; double xmax = clip [ NUM00 ] , ymax = clip [ NUM00 ] ; for ( $F5151 ( i ) ) { if ( clip [ i ] < xmin ) xmin = clip [ i ] ; if ( clip [ i ] > xmax ) xmax = clip [ i ] ; if ( clip [ i + NUM00 ] < ymin ) ymin = clip [ i + NUM00 ] ; if ( clip [ i + NUM00 ] > ymax ) ymax = clip [ i + NUM00 ] ; } clip [ NUM00 ] = xmin ; clip [ NUM00 ] = ymin ; clip [ NUM00 ] = xmax ; clip [ NUM00 ] = ymax ; }
$F1431 public boolean isPortableFilename ( String filename ) { return ( filename . startsWith ( PROGRAM ) || filename . startsWith ( HOME ) || filename . startsWith ( PREFERENCES ) || filename . startsWith ( SCRIPTS ) || filename . startsWith ( PROFILE ) || filename . startsWith ( SETTINGS ) || filename . startsWith ( FILE ) || filename . startsWith ( RESOURCE ) ) ; }
void configureBasicAuth ( HttpServerRequest serverRequest , HttpClientRequest httpClientRequest ) { final String authorization = serverRequest . getParam ( NUM00 ) ; if ( authorization != null ) { httpClientRequest . putHeader ( HttpHeaders . AUTHORIZATION , authorization ) ; } }
public void rejectedExecution ( Runnable r , ThreadPoolExecutor e ) { if $F210917 ( e ) $F21688 ( r ) }
public boolean nodeChange ( CatalogTreeNode node , String name ) { CatalogTreeNode cNode = getCorrespondingNode ( node ) ; cNode . setLeaves ( node . getLeaves ( ) ) ; AbstractCatalogTree tree = ( AbstractCatalogTree ) getCorespondingModel ( node ) ; cNode . setUserObject ( name ) ; node . setUserObject ( name ) ; tree . nodeChanged ( cNode ) ; _model . nodeChanged ( node ) ; updatePanel ( ) ; ImageIndexEditor . indexChanged ( _BOOL ) ; updatePanel ( ) ; return _BOOL ; }
public static Enumeration all $F72 $F10806 ( _all )
public boolean waitUntilEmpty ( long timeout ) throws InterruptedException { if ( ! notifyLock . tryLock ( timeout , TimeUnit . MILLISECONDS ) ) { return _BOOL ; } try { return pending . isEmpty ( ) || notifyCondition . await ( timeout , TimeUnit . MILLISECONDS ) ; } $F796 ( notifyLock ) }
public static Set < JavaClassAndMethod > resolveMethodCallTargets ( ReferenceType receiverType , InvokeInstruction invokeInstruction , ConstantPoolGen cpg ) throws ClassNotFoundException $F33971 ( resolveMethodCallTargets , receiverType , invokeInstruction , cpg , _BOOL )
private String safe ( String src ) { $F280 ( sb ) for ( $F1088 ( i , src ) ) { $F1280 ( c , src , i ) if $F152867 ( c ) $F288 ( sb , c ) else { sb . append ( $F129237 ( c ) ) ; } } $F92 ( sb ) }
public Algorithm ( Element el ) { $F321395 ( requiredKey , el ) $F321395 ( jceName , el ) $F321395 ( algorithmClass , el ) if $F186046 ( el ) { keyLength = Integer . parseInt ( el . getAttribute ( NUM00 ) ) ; } else { keyLength = NUM00 ; } }
protected abstract boolean isSSLSocket $F72 ;
private Run consumeRun ( int offset ) { $F1280 ( ch , fText , offset ) $F115 ( length , fText ) Run run = getRun ( ch ) ; while ( run . consume ( ch ) && offset < length - NUM00 ) { offset ++ ; ch = fText . charAt ( offset ) ; } return run ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public static String formatForUI ( Calendar today , Calendar date ) { if ( $F183169 ( today , Calendar , date ) ) { if ( $F183172 ( today , Calendar ) == $F183172 ( date , Calendar ) ) $F2455 return currentYearDateFormat ( date . getTimeInMillis ( ) ) ; } else { return format ( date . getTimeInMillis ( ) ) ; } }
public OutputStreamWriter ( OutputStream out , CharsetEncoder enc ) { super ( out ) ; $F1149 ( enc ) se = StreamEncoder . forOutputStreamWriter ( out , this , enc ) ; }
public synchronized void free ( long pos , int length ) { int start = getBlock ( pos ) ; int blocks = getBlockCount ( length ) ; BlockRange x = new BlockRange ( start , blocks ) ; BlockRange next = freeSpace . ceiling ( x ) ; if ( next == null ) { throw DataUtils . newIllegalStateException ( DataUtils . ERROR_INTERNAL , NUM00 ) ; } BlockRange prev = freeSpace . lower ( x ) ; if ( prev != null ) { if ( prev . start + prev . blocks == start ) { prev . blocks += blocks ; if ( prev . start + prev . blocks == next . start ) { prev . blocks += next . blocks ; freeSpace . remove ( next ) ; } $F665 } } if ( start + blocks == next . start ) { next . start -= blocks ; next . blocks += blocks ; $F665 } freeSpace . add ( x ) ; }
private static void decodeHanziSegment $F11771 ( bits , result , count ) throws FormatException { $F11774 ( count , bits , FormatException ) $F11778 ( buffer , count ) int offset = NUM00 ; $F11794 ( count , twoBytes , bits , assembledTwoBytes , buffer , offset ) try $F11799 ( result , buffer , StringUtils ) catch ( UnsupportedEncodingException ignored ) $F2172 ( FormatException ) }
public URI csrfToken $F72 { URIBuilder builder = apiBuilder ( ) ; builder . setParameter ( NUM00 , NUM00 ) ; builder . setParameter ( NUM00 , NUM00 ) ; builder . setParameter ( NUM00 , NUM00 ) ; return build ( builder ) ; }
$F52843 ( packed , map , i , j , count , value )
public DistributedLogMultiStreamWriter build $F72 { Preconditions . checkArgument ( $F45081 ( _streams ) , NUM00 ) ; $F1832 ( Preconditions , _client ) $F1832 ( Preconditions , _codec ) Preconditions . checkArgument ( _firstSpeculativeTimeoutMs > NUM00 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > NUM00 && _maxSpeculativeTimeoutMs < _requestTimeoutMs , NUM00 ) ; return new DistributedLogMultiStreamWriter ( _streams , _client , Math . min ( _bufferSize , MAX_LOGRECORDSET_SIZE ) , _flushIntervalMs , _requestTimeoutMs , _firstSpeculativeTimeoutMs , _maxSpeculativeTimeoutMs , _speculativeBackoffMultiplier , _codec , _ticker , _executorService ) ; }
private void writeChars ( int number , char c ) throws IOException { for ( ; number > NUM00 ; number -- ) $F4050 ( writer , c ) }
$F1 public void error ( String msg , Throwable t ) { if $F68674 ( logger , Level ) { log ( SELF , Level . SEVERE , msg , t ) ; } }
public int exit_signal $F72 $F22645 ( Integer , fields )
public Command $F72 { msgQueue = new LinkedList $F46060 $F72 ; $F725 ( msgQueue ) }
public synchronized int indexOf ( V item ) $F194077 ( items , item )
protected void createNode ( DefaultMutableTreeNode top , String title , String info , String content , int lineCount ) { DefaultMutableTreeNode threadInfo = null ; threadInfo = new DefaultMutableTreeNode ( new ThreadInfo ( title , info , content , lineCount , getThreadTokens ( title ) ) ) ; top . add ( threadInfo ) ; }
public Peer clone $F72 { Peer clone = new Peer ( network . clone ( ) , address ) ; return clone ; }
public static String generateNativeGuid $F1947 ( deviceType , serialNumber , fileShareNativeId ) { return String . format ( NUM00 + FILESYSTEM + NUM00 , _deviceTypeMap . get ( deviceType ) , serialNumber , fileShareNativeId ) ; }
public StrBuilder ensureCapacity ( final int capacity ) { if ( capacity > buffer . length ) { $F5040 ( old , buffer ) buffer = new char [ capacity * NUM00 ] ; $F135 ( System , old , buffer , size ) } return this ; }
private void onStartTrackingTouch $F72 { mIsDragging = _BOOL ; }
private static void createSuperForwarder ( ClassNode targetNode , MethodNode forwarder , final $F215163 genericsSpec ) { List $F330824 interfaces = new ArrayList $F330824 ( Traits . collectAllInterfacesReverseOrder ( targetNode , new LinkedHashSet $F330824 $F72 ) ) ; $F20605 ( name , forwarder ) Parameter [ ] forwarderParameters = forwarder . getParameters ( ) ; LinkedHashSet $F330824 traits = new LinkedHashSet $F330824 $F72 ; $F103749 superForwarders = new LinkedList < MethodNode > $F72 ; for ( ClassNode node : interfaces ) { if ( Traits . isTrait ( node ) ) { MethodNode method = node . getDeclaredMethod ( name , forwarderParameters ) ; if ( method != null ) $F30090 ( traits , node , superForwarders , method ) } } for ( MethodNode superForwarder : superForwarders ) { doCreateSuperForwarder ( targetNode , superForwarder , traits . toArray ( new ClassNode $F2313 ( traits ) ) , genericsSpec ) ; } }
public void testCase15 $F72 { $F3013 $F3017 $F15143 int aSign = - NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public boolean isVirtualPoolAccessible ( VirtualPool resource ) { return _permissionsHelper . tenantHasUsageACL ( $F81891 ( URI , _user ) , resource ) ; }
public void testTimedInvokeAllNullTimeUnit $F72 throws Throwable { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; $F25247 ( l ) $F25251 ( l ) try { e . invokeAll ( l , MEDIUM_DELAY_MS , null ) ; shouldThrow ( ) ; } $F83403 } $F14364 ( cleaner ) }
private static boolean intersectsOneOf ( final Rectangle2D r , final Collection < ? extends Shape > shapes ) { $F4975 ( shapes , _BOOL ) for ( final Shape item : shapes ) { if $F82382 ( item , r ) { return _BOOL ; } } return _BOOL ; }
private void expectedByte ( int position , int count ) throws UTFDataFormatException { throw new UTFDataFormatException ( Localizer . getMessage ( $F1855 ( Integer , position , count ) ) ) ; }
private $F3803 checkConfigList ( Configuration config , String name ) { String peerIPs = config . getConfig ( name ) ; $F8728 ( peers ) if ( peerIPs != null ) { for ( String ip : StringUtils . split ( peerIPs , NUM00 ) ) $F207 ( peers , ip ) } return peers ; }
public final ByteBuffer encode ( CharBuffer in ) throws CharacterCodingException { int length = ( int ) ( in . remaining ( ) * averageBytesPerChar ) ; $F87627 ( out , ByteBuffer , length ) reset ( ) ; while ( state != FLUSHED ) { CoderResult result = encode ( in , out , _BOOL ) ; if ( result == CoderResult . OVERFLOW ) { out = allocateMore ( out ) ; $F598 } else { checkCoderResult ( result ) ; } result = flush ( out ) ; if ( result == CoderResult . OVERFLOW ) $F8576 ( out , allocateMore ) else { checkCoderResult ( result ) ; } } $F14257 ( out ) return out ; }
private void loadExternal $F72 { $F2697 ( properties ) try { properties . loadFromXML ( new FileInputStream ( PROPERTIES_PATH ) ) ; for ( $F49930 ( key , properties ) ) { $F98826 ( externalSupport , key , properties ) } } catch ( IOException ignore ) $F845 }
public static URI parseURI ( String nuri , URI baseuri ) throws URISyntaxException { $F1384 ( colonLocation , nuri ) int fragmentLocation = getFragmentLocation ( nuri ) ; if ( colonLocation == - NUM00 || colonLocation > fragmentLocation ) { if ( baseuri == null ) throw new URISyntaxException ( NUM00 + nuri + NUM00 + NUM00 , nuri ) ; } $F11991 ( protocol , nuri , colonLocation ) if $F3057 ( protocol ) $F19580 ( parseURN , nuri , colonLocation , fragmentLocation ) else if $F3057 ( protocol ) { return new URI ( nuri ) ; } else if $F3057 ( protocol ) { return new URI ( nuri ) ; } else if $F3057 ( protocol ) { return new URI ( nuri ) ; } else $F19580 ( parseGeneralURI , nuri , colonLocation , fragmentLocation ) }
protected void updateUs $F72 { try { setText ( m_Editor . getAsText ( ) ) ; } $F59734 }
public File makeDirty $F72 throws IOException { File f = File . createTempFile ( NUM00 , NUM00 , repositoryLocation . getParentFile ( ) ) ; $F2824 ( fw , f ) fw . write ( $F128293 ( System ) ) ; $F1206 ( fw ) $F59 ( fw ) return f ; }
private static boolean isASCIISuperset ( String encoding ) throws Exception { String chkS = NUM00 + NUM00 ; $F96 chkB = {} ; $F45669 ( b , chkS , encoding ) return Arrays . equals ( b , chkB ) ; }
public static BigDecimal allocated ( int p_C_Payment_ID , int p_C_Currency_ID ) throws SQLException { BigDecimal PayAmt = null ; int C_Charge_ID = NUM00 ; $F68101 ( sql ) $F3915 ( pstmt , Adempiere , sql ) $F47 ( pstmt , p_C_Payment_ID ) $F49 ( rs , pstmt ) if $F1682 ( rs ) { PayAmt = rs . getBigDecimal ( NUM00 ) ; $F55 ( C_Charge_ID , rs ) } $F59 ( rs ) $F59 ( pstmt ) $F19679 ( C_Charge_ID , PayAmt ) int C_ConversionType_ID = NUM00 ; BigDecimal allocatedAmt = getAllocatedAmt ( p_C_Payment_ID , p_C_Currency_ID , C_ConversionType_ID ) ; return Currency . round ( allocatedAmt , p_C_Currency_ID , null ) ; }
public static ByteBuffer processOutboundPackage ( ByteBuffer roData , int exchangeId , boolean connectionOk ) { $F23501 ( roData ) if ( BuildConfig . DEBUG ) { XposedBridge . log ( NUM00 + Integer . toString ( roData . remaining ( ) ) ) ; } try { synchronized ( sync ) $F845 } catch ( Throwable e ) { XposedBridge . log ( e ) ; } $F1274 }
public void initialize $F72 { if $F27748 ( isClosed ) { $F973 ( logger ) ActorConfig . createAndGetActorSystem ( ) ; $F10089 ( httpClientStore ) $F10089 ( tcpSshPingResourceStore ) ParallelTaskManager . getInstance ( ) ; isClosed . set ( _BOOL ) ; $F973 ( logger ) } else $F981 ( logger ) }
$F1113 private static TextRange processSpaces ( $F1113 Helper helper , $F1113 TextRange range , int tabWidth ) { CharSequence indent = helper . getCurrentLineIndent ( ) ; int start = Math . max ( NUM00 , range . getStartOffset ( ) - helper . getCurrentLineStartOffset ( ) ) ; int end = Math . min ( indent . length ( ) , range . getEndOffset ( ) - helper . getCurrentLineStartOffset ( ) ) ; int tabsNumber = NUM00 ; int indentOffset = end ; for ( int i = start ; i < end ; i ++ ) { $F1280 ( c , indent , i ) if ( c == NUM00 ) { tabsNumber ++ ; } else if ( c != NUM00 ) $F3468 ( indentOffset , i ) } if ( tabsNumber > NUM00 ) { helper . replace ( start , indentOffset , StringUtil . repeat ( NUM00 , indentOffset - start - tabsNumber + tabsNumber * tabWidth ) ) ; return TextRange . create ( range . getStartOffset ( ) , range . getEndOffset ( ) - tabsNumber + tabsNumber * tabWidth ) ; } else { return range ; } }
public void removeAlarm ( final Alarm ALARM ) { if $F105 ( alarms , ALARM ) alarms . remove ( ALARM ) ; }
public int read $F72 throws $F3258 { synchronized ( lock ) { char charArray [ ] = $F11574 ; if ( read ( charArray , NUM00 , NUM00 ) != - NUM00 ) $F3262 ( charArray ) $F150 } }
protected void checkParameters $F72 { if ( parameters != null ) { for ( $F12534 ( i , size , parameters ) ) { Parameter param = parameters . get ( i ) ; param . checkSet ( ) ; } } }
private static Properties createProperties1 ( String conflation ) { $F2697 ( props ) $F9266 ( props , DELTA_PROPAGATION ) $F9266 ( props , MCAST_PORT ) $F9266 ( props , LOCATORS ) props . setProperty ( CONFLATE_EVENTS , conflation ) ; return props ; }
public static void CF3 $F50490 ( x , f , c , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double prod1 = NUM00 ; double prod2 = NUM00 ; double yj ; double pj ; double N = NUM00 ; double a = NUM00 ; for ( $F9993 ( j , nx ) ) { $F94025 ( yj , x , j , Math , PI , nx ) pj = Math . cos ( NUM00 * yj * PI / Math . sqrt ( j + NUM00 ) ) ; if ( j % NUM00 == NUM00 ) $F115995 ( sum2 , yj , prod2 , pj , count2 ) else $F115995 ( sum1 , yj , prod1 , pj , count1 ) } f [ NUM00 ] = x [ NUM00 ] + $F116001 ( sum1 , prod1 , count1 ) ; f [ NUM00 ] = NUM00 - $F43608 ( x ) + $F116001 ( sum2 , prod2 , count2 ) ; c [ NUM00 ] = f [ NUM00 ] + $F43608 ( f ) - a * Math . sin ( N * PI * ( $F43608 ( f ) - f [ NUM00 ] + NUM00 ) ) - NUM00 ; }
public static void closeSilently ( ResultSet rs ) $F31188 ( rs )
public static void execute ( PoolImpl pool , Function function , Object args , MemberMappedArgument memberMappedArg , boolean allServers , byte hasResult , boolean isFnSerializationReqd , $F806 groups ) { List servers = null ; AbstractOp op = new ExecuteFunctionNoAckOpImpl ( function , args , memberMappedArg , hasResult , isFnSerializationReqd , groups , allServers ) ; try { if ( allServers && groups . length == NUM00 ) { if $F585 ( logger ) { logger . debug ( $F5352 ( op ) + pool ) ; } servers = pool . getCurrentServers ( ) ; $F10531 ( i , servers ) while $F2921 ( i ) { pool . executeOn ( ( ServerLocation ) i . next ( ) , op ) ; } } else { if $F585 ( logger ) { logger . debug ( $F5352 ( op ) + pool + NUM00 + Arrays . toString ( groups ) + NUM00 + allServers ) ; } pool . execute ( op , NUM00 ) ; } } catch ( Exception ex ) { if $F585 ( logger ) { logger . debug ( $F5352 ( op ) + pool , ex ) ; } if ( ex . getMessage ( ) != null ) throw new FunctionException $F2808 ( ex ) ; else throw new FunctionException ( NUM00 , ex ) ; } }
public static Script createMultiSigInputScript ( TransactionSignature ... signatures ) $F28185 ( createMultiSigInputScript , Arrays , signatures )
Object proxyIfReturnTypeIsJdbcInterface ( $F6969 returnType , Object toProxy ) { if ( toProxy != null ) { if ( Util . isJdbcInterface ( returnType ) ) { $F20850 ( toProxyClass , toProxy ) return Proxy . newProxyInstance ( toProxyClass . getClassLoader ( ) , Util . getImplementedInterfaces ( toProxyClass ) , getNewJdbcInterfaceProxy ( toProxy ) ) ; } } return toProxy ; }
public final void empty $F72 { synchronized ( buffer ) $F5122 ( buffer , bufferMap ) }
public void testModeratelyComplexTemplating $F72 throws Exception { HtmlPage page = getPage ( NUM00 ) ; String text = page . asText ( ) ; $F196452 ( assertTrue , text ) }
private ValueRange rangeByWeek ( TemporalAccessor temporal , TemporalField field ) { int dow = localizedDayOfWeek ( temporal ) ; int offset = startOfWeekOffset ( temporal . get ( field ) , dow ) ; ValueRange fieldRange = temporal . range ( field ) ; return ValueRange . of ( computeWeek ( offset , ( int ) fieldRange . getMinimum ( ) ) , computeWeek ( offset , ( int ) fieldRange . getMaximum ( ) ) ) ; }
public Object apply ( Object in ) { if ( in instanceof HasWord ) { HasWord w = ( HasWord ) in ; String str = w . word ( ) ; String outStr = americanize ( str , capitalizeTimex ) ; if $F2137 ( outStr , str ) { w . setWord ( outStr ) ; } return w ; } else { $F71197 ( str , in ) return americanize ( str , capitalizeTimex ) ; } }
public void addWayRef ( MapWay way , int nodeIdx ) { if ( ways == null ) ways = new ArrayList < WayRef > $F989 ; if ( ways . isEmpty ( ) || ways . get ( NUM00 ) != way ) ways . add ( new DefaultWayRef ( way , ( short ) nodeIdx ) ) ; }
public double doCrossValidation ( $F35808 data , int dataSize ) throws $F38232 { stats = new OneVariableStats $F72 ; log . info ( NUM00 + ( $F4094 ) ) ; $F9472 ( log , numFolds ) $F98026 splits = splitData ( data , dataSize ) ; $F973 ( log ) ExecutorService executor = Executors . newFixedThreadPool ( numThreads ) ; List < FutureTask $F12404 > $F204 ( folds ) ; for ( $F119 ( i , numFolds ) ) { $F98037 ( trainingSet ) for ( $F119 ( j , numFolds ) ) { if ( j != i ) $F103980 ( trainingSet , splits , j ) } $F5675 testSet = splits . get ( i ) ; FutureTask $F12404 fold = createFoldTask ( trainingSet , testSet , i ) ; executor . execute ( fold ) ; folds . add ( fold ) ; } $F733 ( executor ) executor . awaitTermination ( timeoutSeconds , TimeUnit . SECONDS ) ; for ( FutureTask $F12404 fold : folds ) { $F2659 ( stats , fold ) } log . info ( NUM00 + ( $F4094 ) ) ; return stats . mean ( ) ; }
public EntireTextBuilder addBackground ( @ ColorInt int bgColor , int start , int end ) { BackgroundHolder backgroundHolder = new BackgroundHolder ( bgColor , start , end ) ; mBackgrounds . add ( backgroundHolder ) ; return this ; }
$F15683 ( listener , changingListeners )
public boolean matches ( String filename ) { $F397 ( exts , _BOOL ) $F24867 ( j , filename ) if ( j == - NUM00 || j == filename . length ( ) ) return _BOOL ; $F36289 ( suffix , filename , j ) $F297 ( exts , suffix ) }
public Rectangle [ ] computeGaps $F72 { ArrayList < Rectangle > $F204 ( ret ) ; $F47146 ( gap ) for ( $F1139 ( i , mRectList ) ) { Rectangle rectangleA = mRectList [ i ] ; for ( $F169942 ( j , i , mRectList ) ) { Rectangle rectangleB = mRectList [ j ] ; boolean viable = calculateGap ( rectangleA , rectangleB , gap ) ; if ( viable ) { for ( $F1139 ( k , mRectList ) ) { if ( k != j && k != i ) { if ( gap . intersects ( mRectList [ k ] ) ) $F3468 ( viable , _BOOL ) } } } if ( viable ) { ret . add ( new Rectangle ( gap ) ) ; } } } return ret . toArray ( new Rectangle $F2313 ( ret ) ) ; }
public synchronized MethodCountSet collectHotMethods ( int optLevel , double threshold ) { $F32367 ( DEBUG , validityCheck ) ArrayList < HotMethodRecompilationEvent > collect = new ArrayList < HotMethodRecompilationEvent > $F72 ; collectHotOptMethodsInternal ( NUM00 , collect , hotnessToCounts ( threshold ) , optLevel ) ; $F2199 ( numHotMethods , collect ) $F9662 ( numCounts , numHotMethods ) CompiledMethod [ ] hotMethods = new CompiledMethod [ numHotMethods ] ; for ( $F119 ( i , numHotMethods ) ) { HotMethodEvent event = collect . get ( i ) ; hotMethods [ i ] = event . getCompiledMethod ( ) ; numCounts [ i ] = event . getNumSamples ( ) ; } return new MethodCountSet ( hotMethods , numCounts ) ; }
public synchronized void addBan ( long duration , String reason , String id ) { addLine ( new BanMessage ( System . currentTimeMillis ( ) , duration , reason , id ) ) ; }
private void writeHeader $F72 throws OpenStegoException { DCTDataHeader header = null ; try { header = new DCTDataHeader ( this . dataLength , this . fileName , this . config ) ; if ( ( ( header . getHeaderSize ( ) + this . dataLength ) * NUM00 ) > ( this . imgWidth * this . imgHeight / ( DCT . NJPEG * DCT . NJPEG ) ) ) { throw new OpenStegoException ( null , DctLSBPlugin . NAMESPACE , DctLSBErrors . IMAGE_SIZE_INSUFFICIENT ) ; } this . coord = new Coordinates ( ( header . getHeaderSize ( ) + this . dataLength ) * NUM00 ) ; write ( header . getHeaderData ( ) ) ; } catch ( IOException ioEx ) { throw new OpenStegoException ( ioEx ) ; } }
public int decrementSubscriberCount $F72 { if ( isAvailable ( ) ) { return jmdnsSubscriberCount . decrementAndGet ( ) ; } $F1082 }
public static boolean addShapelessEnchantingRecipe ( ItemStack aResult , Enchantment [ ] aEnchantmentsAdded , $F2027 aEnchantmentLevelsAdded , $F131 aRecipe ) { return addShapelessCraftingRecipe ( aResult , aEnchantmentsAdded , aEnchantmentLevelsAdded , _BOOL , _BOOL , _BOOL , _BOOL , aRecipe ) ; }
public void start $F72 throws TomcatException { $F21009 ( cat , init ) $F2346 ( cat ) }
$F20296 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
$F183298 ( view , cache )
private boolean imageOutline ( DefaultMutableTreeNode node ) { boolean isOutline = _BOOL ; if ( node != null ) { DefaultMutableTreeNode parentNode = ( DefaultMutableTreeNode ) node . getParent ( ) ; if ( parentNode != null ) { if ( parentNode . getUserObject ( ) instanceof RasterSymbolizer ) { isOutline = _BOOL ; } } } return isOutline ; }
private short addEntry ( Entry entry ) { pool . add ( entry ) ; if $F14765 ( pool ) $F825 return ( short ) pool . size ( ) ; }
private boolean loadNextPage $F72 { result = pageable . getPage ( query , skip , pageSize ) ; index = NUM00 ; $F34929 ( result , _BOOL ) return _BOOL ; }
public boolean contains ( Node s ) { runTo ( - NUM00 ) ; $F161848 ( m_map , _BOOL ) for ( $F119 ( i , m_firstFree ) ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( s ) ) return _BOOL ; } return _BOOL ; }
public void close $F72 throws IOException { if ( ! closed ) { if ( usesDefaultInflater ) $F87417 ( inf ) $F59 ( in ) closed = _BOOL ; } }
public FieldAnalysisRequest addFieldType ( String fieldTypeName ) { $F130568 ( fieldTypes ) fieldTypes . add ( fieldTypeName ) ; return this ; }
public static BigFraction parseEditRate ( String editRate ) { editRate = editRate . contains ( NUM00 ) ? rFrameRateToEditRate ( editRate ) : editRate ; $F6542 ( parts , editRate ) try { if $F9634 ( parts ) { return new BigFraction ( $F12905 ( Long , parts ) , $F12905 ( Long , parts ) ) ; } else if $F9634 ( parts ) { return new BigFraction ( $F12905 ( Long , parts ) ) ; } } catch ( NumberFormatException e ) { throw new ConversionHelperException ( NUM00 , e ) ; } throw new ConversionHelperException $F580 ; }
public FST $F4203 finish $F72 throws IOException { final UnCompiledNode $F4203 root = frontier [ NUM00 ] ; freezeTail ( NUM00 ) ; if ( root . inputCount < minSuffixCount1 || root . inputCount < minSuffixCount2 || root . numArcs == NUM00 ) { if ( fst . emptyOutput == null ) $F1337 else if ( minSuffixCount1 > NUM00 || minSuffixCount2 > NUM00 ) $F1337 } else { if ( minSuffixCount2 != NUM00 ) { compileAllTargets ( root , lastInput . length ( ) ) ; } } fst . finish ( compileNode ( root , lastInput . length ( ) ) . node ) ; if ( doPackFST ) { return fst . pack ( this , NUM00 , Math . max ( NUM00 , ( int ) ( getNodeCount ( ) / NUM00 ) ) , acceptableOverheadRatio ) ; } else { return fst ; } }
public void onConfiguration ( ContactsOps . View view , boolean firstTimeIn ) { mContactsView = $F164361 ( view ) ; if ( firstTimeIn ) { initializeAccount ( ) ; mCursorAdapter = new SimpleCursorAdapter ( view . getApplicationContext ( ) , R . layout . list_layout , null , sColumnsToDisplay , sColumnResIds , NUM00 ) ; } }
public static final int randomUnsetBit ( Random r , BitSet bits , final int max ) { if ( bits . cardinality ( ) == max + NUM00 ) $F7629 final int candidate = TestUtil . nextInt ( r , NUM00 , max ) ; if $F73204 ( bits , candidate ) { final int lo = bits . previousClearBit ( candidate ) ; final int hi = bits . nextClearBit ( candidate ) ; if ( lo < NUM00 && max < hi ) { fail ( NUM00 + bits . cardinality ( ) + NUM00 + bits . size ( ) ) ; } else if ( lo < NUM00 ) { return hi ; } else $F88060 ( max , hi , lo ) return ( ( candidate - lo ) < ( hi - candidate ) ) ? lo : hi ; } return candidate ; }
$F1 public void flush $F72 throws IOException { synchronized ( lock ) $F29882 ( out ) }
public double std $F72 { if ( min == max || num == NUM00 ) $F1083 double m = mean ( ) ; return Math . sqrt ( sigmax2 / num - m * m ) ; }
public boolean containsInstruction ( InstructionHandle handle ) { Iterator < InstructionHandle > i = instructionIterator ( ) ; while $F2921 ( i ) { if ( i . next ( ) == handle ) { return _BOOL ; } } return _BOOL ; }
public static String sendFedexRequest ( String xmlString , Delegator delegator , String shipmentGatewayConfigId , String resource , Locale locale ) throws FedexConnectException { String url = getShipmentGatewayConfigValue ( delegator , shipmentGatewayConfigId , NUM00 , resource , NUM00 ) ; if $F4329 ( UtilValidate , url ) { throw new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; } if $F48318 ( xmlString ) { throw new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; } $F1382 ( url ) String timeOutStr = getShipmentGatewayConfigValue ( delegator , shipmentGatewayConfigId , NUM00 , resource , NUM00 , NUM00 ) ; int timeout = NUM00 ; try $F37473 ( timeout , Integer , timeOutStr ) catch ( NumberFormatException e ) { Debug . logError ( e , NUM00 + timeOutStr + NUM00 + timeout ) ; } if $F2907 ( Debug ) { $F36357 ( Debug , url , module ) $F36357 ( Debug , xmlString , module ) } HttpClient http = new HttpClient ( url ) ; http . setTimeout ( timeout * NUM00 ) ; String response = null ; try { response = http . post ( xmlString ) ; } catch ( HttpClientException e ) { $F48322 ( Debug , e , module ) throw new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , UtilMisc . toMap ( $F22435 ( e ) ) , locale ) ) ; } if ( response == null ) { throw new FedexConnectException ( UtilProperties . getMessage ( resourceError , NUM00 , locale ) ) ; } if $F2907 ( Debug ) { $F36357 ( Debug , response , module ) } return response ; }
public String trimToSize ( String str , int maxStringLength ) { $F1275 ( str ) if $F62924 ( str , maxStringLength ) { $F7542 ( sb , str ) sb . setLength ( maxStringLength ) ; $F6947 ( str , sb ) } return str ; }
public Subject login ( String username , String password ) { if ( StringUtils . isBlank ( username ) || StringUtils . isBlank ( password ) ) $F1274 $F2697 ( credentials ) credentials . setProperty ( ResourceConstants . USER_NAME , username ) ; credentials . setProperty ( ResourceConstants . PASSWORD , password ) ; return login ( credentials ) ; }
@ Timed @ ExceptionMetered $F2513 @ GET @ Produces ( APPLICATION_JSON ) public Iterable < SanitizedSecret > secretListingV2 ( @ Auth AutomationClient automationClient , @ QueryParam ( NUM00 ) Integer idx , @ QueryParam ( NUM00 ) Integer num , @ DefaultValue ( NUM00 ) @ QueryParam ( NUM00 ) boolean newestFirst ) { if ( idx != null && num != null ) { if ( idx < NUM00 || num < NUM00 ) { throw new BadRequestException $F580 ; } return secretController . getSecretsBatched ( idx , num , newestFirst ) ; } return secretController . getSanitizedSecrets ( null , null ) ; }
public void deselect ( Iterable $F2305 positions ) { $F116323 ( entries , positions ) while $F2921 ( entries ) { deselect ( entries . next ( ) , entries ) ; } }
public static String map2OID ( String algName ) { checkCacheVersion ( ) ; String result = alg2OidMap . get ( $F184776 ( algName , Locale ) ) ; $F21525 ( result ) AlgNameMapperSource s = source ; if ( s != null ) { return s . mapNameToOid ( algName ) ; } $F1274 }
public PushHistory ( int maxHistoryLength , JSONObject json ) { this . maxHistoryLength = maxHistoryLength ; this . entries = new PriorityQueue $F14698 ( maxHistoryLength + NUM00 ) ; this . pushIds = new $F2690 ( maxHistoryLength + NUM00 ) ; this . lastTime = null ; if ( json != null ) { JSONObject jsonHistory = json . optJSONObject ( NUM00 ) ; if ( jsonHistory != null ) { $F13710 it = jsonHistory . keys ( ) ; while $F2921 ( it ) { $F2778 ( pushId , it ) String timestamp = jsonHistory . optString ( pushId , null ) ; if ( pushId != null && timestamp != null ) { tryInsertPush ( pushId , timestamp ) ; } } } setLastReceivedTimestamp ( json . optString ( NUM00 , null ) ) ; } }
private void endList ( boolean orderedList ) { if $F5973 ( mParagraphStyles ) { AccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; ParagraphType type = style . getType ( ) ; if ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { int indent = style . getRelativeIndent ( ) ; if ( indent > NUM00 ) { style . setRelativeIndent ( indent - NUM00 ) ; style . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; } else $F89427 ( mParagraphStyles ) } else { $F34454 ( mParagraphStyles ) endList ( orderedList ) ; } } }
private boolean processKeyUp ( int keyCode ) { if ( keyCode == KeyEvent . KEYCODE_ESCAPE || keyCode == KeyEvent . KEYCODE_BACK ) $F27427 ( dismiss , _BOOL ) else if ( keyCode == KeyEvent . KEYCODE_TAB ) { if ( mInKbMode ) { $F121010 ( isTypedTimeFullyLegal , finishKbMode , _BOOL ) return _BOOL ; } } else if ( keyCode == KeyEvent . KEYCODE_ENTER ) { if ( mInKbMode ) { $F1485 ( isTypedTimeFullyLegal , _BOOL ) finishKbMode ( _BOOL ) ; } if ( mCallback != null ) { mCallback . onTimeSet ( mTimePicker , mTimePicker . getHours ( ) , mTimePicker . getMinutes ( ) ) ; } dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_DEL ) { if ( mInKbMode ) { if $F5973 ( mTypedTimes ) { int deleted = deleteLastTypedKey ( ) ; String deletedKeyStr ; $F218511 ( deleted , getAmOrPmKeyCode , AM , deletedKeyStr , mAmText , PM , mPmText , String , getValFromKeyCode ) Utils . tryAccessibilityAnnounce ( mTimePicker , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; updateDisplay ( _BOOL ) ; } } } else $F218536 ( keyCode , KeyEvent , mIs24HourMode , getAmOrPmKeyCode , AM , PM , mInKbMode , mTimePicker , Log , TAG , _BOOL , mTypedTimes , tryStartingKbMode , addKeyIfLegal , updateDisplay ) return _BOOL ; }
public boolean isNaturalJoinColumn ( Column c ) { $F28807 ( naturalJoinColumns , c ) }
public int read $F24576 ( b , off , len ) throws IOException { ensureOpen ( ) ; if ( b == null ) $F895 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F14826 ( len ) int cnt = NUM00 ; while ( len > NUM00 && ! def . finished ( ) ) { int n ; if ( def . needsInput ( ) ) { $F81136 ( n , in , buf ) if ( n < NUM00 ) { $F1571 ( def ) } else if ( n > NUM00 ) { $F81138 ( def , buf , n ) } } n = def . deflate ( b , off , len ) ; cnt += n ; off += n ; len -= n ; } if ( cnt == NUM00 && def . finished ( ) ) { reachEOF = _BOOL ; cnt = - NUM00 ; } return cnt ; }
$F1 public void passivate $F72 { cleanupUserTransaction ( ) ; super . passivate ( ) ; }
public Builder delay ( long duration , TimeUnit timeUnit ) { this . delay = timeUnit . toSeconds ( duration ) ; return this ; }
private boolean contains ( int part ) $F298 ( parts , part )
int keyCount ( Class clazz ) { Map map = get ( clazz ) ; $F2199 ( count , map ) if $F1710 ( map , CONSTRUCTORS_KEY ) count -- ; if $F1710 ( map , GENERIC_GET_KEY ) count -- ; if $F1710 ( map , ARGTYPES_KEY ) count -- ; return count ; }
public Mp4StcoBox ( Mp4BoxHeader header , ByteBuffer originalDataBuffer , int adjustment ) { this . header = header ; this . dataBuffer = originalDataBuffer . slice ( ) ; dataBuffer . position ( dataBuffer . position ( ) + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH ) ; this . noOfOffSets = Utils . getIntBE ( dataBuffer , dataBuffer . position ( ) , ( dataBuffer . position ( ) + NO_OF_OFFSETS_LENGTH - NUM00 ) ) ; $F8349 ( dataBuffer , NO_OF_OFFSETS_LENGTH ) for ( $F119 ( i , noOfOffSets ) ) { int offset = Utils . getIntBE ( dataBuffer , dataBuffer . position ( ) , ( dataBuffer . position ( ) + NO_OF_OFFSETS_LENGTH - NUM00 ) ) ; offset = offset + adjustment ; dataBuffer . put ( Utils . getSizeBEInt32 ( offset ) ) ; } }
public static void createOPUSDirectories ( Config config ) { $F973 ( log ) UrbanSimParameterConfigModuleV3 module = M4UConfigUtils . getUrbanSimParameterConfigAndPossiblyConvert ( config ) ; File tempFile = new File ( module . getOpusHome ( ) ) ; $F1907 ( tempFile ) tempFile = new File ( module . getMATSim4Opus ( ) ) ; $F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusOutput ( ) ) ; $F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusTemp ( ) ) ; $F1907 ( tempFile ) tempFile = new File ( module . getMATSim4OpusConfig ( ) ) ; $F1907 ( tempFile ) $F973 ( log ) }
public static String lcfirst ( String input ) $F13736 ( withFirst , input )
void compress $F32395 ( page , old ) { $F30974 array = data ; if ( page >= array . length ) $F932 $F96 d = array [ page ] ; if ( d != old ) $F932 synchronized ( LZF ) { int len = LZF . compress ( d , BLOCK_SIZE , BUFFER , NUM00 ) ; if ( len <= BLOCK_SIZE ) { $F1325 ( d , len ) $F135 ( System , BUFFER , d , len ) $F96 o = array [ page ] ; if ( o != old ) $F932 array [ page ] = d ; } } }
public HadoopProcessDescriptor localProcessDescriptor $F72 { return locProcDesc ; }
private Pair $F91737 describeRain ( Calendar calendar , int temperatureMod ) { int month = $F21623 ( calendar , Calendar ) ; month = NUM00 * Math . abs ( month - NUM00 ) ; int hour = $F13065 ( calendar , Calendar ) ; hour = Math . abs ( ( hour + NUM00 ) % NUM00 - NUM00 ) / NUM00 ; int temp = temperature . getValue ( ) - hour - month + ( temperatureMod * NUM00 ) ; $F8922 ( LOGGER , temp , temperatureMod ) if ( temp <= - NUM00 ) { return new Pair $F91737 ( NUM00 , Boolean . FALSE ) ; } return new Pair $F91737 ( NUM00 , temp >= - NUM00 && thunder . getDescription ( NUM00 ) != null ) ; }
$F1219 @ CalledByNativeUnchecked ( NUM00 ) public void addChild ( BookmarkNode child ) $F207 ( mChildren , child )
public void testGetMinCRL $F72 { $F40920 ( selector ) assertNull ( NUM00 , selector . getMinCRL ( ) ) ; $F88961 ( minCRL ) selector . setMinCRLNumber ( minCRL ) ; assertTrue ( NUM00 , minCRL . equals ( selector . getMinCRL ( ) ) ) ; }
public void testWhenComplete_exceptionalCompletion $F72 { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( createIncomplete , _BOOL ) ) { $F127413 ( a ) $F181556 ( ex ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex ) ; final $F70219 g = m . whenComplete ( f , null ) ; if ( createIncomplete ) f . completeExceptionally ( ex ) ; checkCompletedWithWrappedException ( g , ex ) ; checkCompletedExceptionally ( f , ex ) ; $F127421 ( assertEquals , a ) } }
$F1 public String read ( String pattern ) { return read ( Pattern . compile ( pattern , Pattern . DOTALL | Pattern . MULTILINE ) ) ; }
protected void addSubKeysAndAggregator ( $F2689 values , $F2689 keysOfCompositeAggregator , $F2689 subKeys , String aggregatorName , Map < $F2689 , Integer > keysToCombinationId ) { if ( keysOfCompositeAggregator == null || subKeys == null || keysOfCompositeAggregator . isEmpty ( ) || subKeys . isEmpty ( ) ) $F825 $F2689 allKeys = Sets . newHashSet ( ) ; allKeys . addAll ( keysOfCompositeAggregator ) ; allKeys . addAll ( subKeys ) ; if ( allKeys . size ( ) != $F11365 ( keysOfCompositeAggregator , subKeys ) ) { throw new IllegalArgumentException ( $F370 ( keysOfCompositeAggregator , subKeys ) ) ; } $F99426 ( combinationId , keysToCombinationId , allKeys ) if ( combinationId == null ) { if ( dimensionsDescriptorIDToKeys . add ( new Fields ( allKeys ) ) ) $F114853 ( combinationId , dimensionsDescriptorIDToKeys ) else $F5754 ( allKeys ) keysToCombinationId . put ( allKeys , combinationId ) ; addValueToAggregatorToCombination ( values , allKeys , aggregatorName ) ; } else { $F42356 ( incrementalAggregatorNames ) boolean isOTFAggregator = _BOOL ; if ( ! isIncrementalAggregator ( aggregatorName ) ) { incrementalAggregatorNames = getOTFDependedIncrementalAggregatorNames ( aggregatorName ) ; isOTFAggregator = _BOOL ; } else { incrementalAggregatorNames = Sets . newHashSet ( ) ; incrementalAggregatorNames . add ( aggregatorName ) ; } $F10651 newValueToIncrementalAggregators = Maps . newHashMap ( ) ; $F10651 newValueToOTFAggregators = Maps . newHashMap ( ) ; for ( String value : values ) { newValueToIncrementalAggregators . put ( value , incrementalAggregatorNames ) ; if ( isOTFAggregator ) { newValueToOTFAggregators . put ( value , Sets . newHashSet ( aggregatorName ) ) ; } } int ddid = combinationId * customTimeBucketsCombination . size ( ) ; for ( int index = NUM00 ; index < customTimeBucketsCombination . size ( ) ; ++ index , ++ ddid ) { $F13395 ( mergeMaps , dimensionsDescriptorIDToValueToAggregator , ddid , newValueToIncrementalAggregators ) $F13395 ( mergeMaps , dimensionsDescriptorIDToValueToOTFAggregator , ddid , newValueToOTFAggregators ) } } }
protected boolean _findCanonicalLabelling ( boolean tmpPreviouslyEqualToMin ) { boolean foundNewMinimum = _BOOL ; IntArrayList underlyingVertexPosThatExtendTmp = getUnderlyingVertexPosThatExtendTmp ( ) ; IntCursor underlyingVertexPosThatExtendTmpCursor = underlyingVertexPosThatExtendTmp . cursor ( ) ; while ( underlyingVertexPosThatExtendTmpCursor . moveNext ( ) ) { int underlyingVertexPosToAdd = underlyingVertexPosThatExtendTmpCursor . elem ( ) ; int newTmpVertexPos = addTmpVertex ( underlyingVertexPosToAdd ) ; int newTmpVertexLabel = underlyingPosToLabel . getUnchecked ( underlyingVertexPosToAdd ) ; IntSet neighbourUnderlyingPositions = underlyingAdjacencyList . get ( underlyingVertexPosToAdd ) ; IntCursor neighbourUnderlyingPositionsCursor = neighbourUnderlyingPositions . cursor ( ) ; PatternEdgeArrayList edgesToAdd = createPatternEdgeArrayList ( ) ; while ( neighbourUnderlyingPositionsCursor . moveNext ( ) ) { int neighbourUnderlyingPos = neighbourUnderlyingPositionsCursor . elem ( ) ; $F85651 ( neighbourTmpPos , tmpLabelling , neighbourUnderlyingPos ) if ( neighbourTmpPos == - NUM00 ) $F1448 addCandidatePatternEdges ( edgesToAdd , neighbourUnderlyingPos , neighbourTmpPos , underlyingVertexPosToAdd , newTmpVertexPos ) ; } if ( $F3816 ( edgesToAdd ) || newTmpVertexPos == NUM00 ) { $F112999 ( edgesToAdd ) boolean promisingTmpPattern = _BOOL ; boolean equalToMinTmpPattern = tmpPreviouslyEqualToMin ; if ( foundMinimum ) { int comparisonResult ; if ( newTmpVertexPos > NUM00 ) { PatternEdgeArrayList minEquivalentEdges = minEdges . get ( newTmpVertexPos ) ; comparisonResult = edgesToAdd . compareTo ( minEquivalentEdges ) ; } else { $F85651 ( minFirstUnderlyingVertexPos , minInverseLabelling , newTmpVertexPos ) int minFirstUnderylingVertexLabel = underlyingPosToLabel . getUnchecked ( minFirstUnderlyingVertexPos ) ; comparisonResult = Integer . compare ( newTmpVertexLabel , minFirstUnderylingVertexLabel ) ; } equalToMinTmpPattern = equalToMinTmpPattern && comparisonResult == NUM00 ; if ( tmpPreviouslyEqualToMin && ! equalToMinTmpPattern ) { $F158341 ( comparisonResult , promisingTmpPattern , _BOOL ) } } if ( promisingTmpPattern ) { addTmpEdges ( edgesToAdd ) ; if ( tmpLabelling . size ( ) == getNumberOfVertices ( ) ) { if ( ! equalToMinTmpPattern || ! foundMinimum ) { copyTmpToMin ( ) ; foundNewMinimum = _BOOL ; $F725 ( vertexPositionEquivalences ) } IntIntCursor tmpLabellingCursor = tmpLabelling . cursor ( ) ; while ( tmpLabellingCursor . moveNext ( ) ) { int underlyingPos = tmpLabellingCursor . key ( ) ; int tmpEquivalentPos = tmpLabellingCursor . value ( ) ; $F85651 ( underlyingPosAccordingToMin , minInverseLabelling , tmpEquivalentPos ) vertexPositionEquivalences . addEquivalence ( underlyingPos , underlyingPosAccordingToMin ) ; } } else { boolean foundNewMinimumInChild = _findCanonicalLabelling ( equalToMinTmpPattern ) ; if ( foundNewMinimumInChild ) { tmpPreviouslyEqualToMin = _BOOL ; foundNewMinimum = _BOOL ; } } removeLastTmpEdges ( ) ; } else { edgesToAdd . reclaim ( ) ; } } removeLastTmpVertex ( ) ; } underlyingVertexPosThatExtendTmp . reclaim ( ) ; return foundNewMinimum ; }
private String constructISCSINamesQuery ( String systemId , List < HostStorageDomain > hsdList , String model ) { $F535 ( attributeMap ) StorageArray array = new StorageArray ( systemId ) ; Add addOp = new Add ( HDSConstants . ISCSI_NAME_FOR_HSD_TARGET ) ; attributeMap . put ( HDSConstants . STORAGEARRAY , array ) ; attributeMap . put ( HDSConstants . ADD , addOp ) ; attributeMap . put ( HDSConstants . MODEL , model ) ; attributeMap . put ( HDSConstants . HOSTGROUP_LIST , hsdList ) ; String addWWNQuery = InputXMLGenerationClient . getInputXMLString ( HDSConstants . BATCH_ADD_WWN_TO_HSD_OP , attributeMap , HDSConstants . HITACHI_INPUT_XML_CONTEXT_FILE , HDSConstants . HITACHI_SMOOKS_CONFIG_FILE ) ; return addWWNQuery ; }
public static void tryClaim ( Publication publication , BufferFiller fillBuffer , int length , int timeout , TimeUnit timeUnit ) { if $F43263 ( publication ) { throw new NotConnectedException $F72 ; } final BufferClaim bufferClaim = bufferClaims . get ( ) ; $F132947 ( start , System ) do { $F132947 ( current , System ) if ( ( current - start ) > timeUnit . toNanos ( timeout ) ) { throw new TimedOutException $F72 ; } final long offer = publication . tryClaim ( length , bufferClaim ) ; if ( offer >= NUM00 ) { try { final MutableDirectBuffer buffer = bufferClaim . buffer ( ) ; $F11550 ( offset , bufferClaim ) fillBuffer . fill ( offset , buffer ) ; $F597 } finally $F19092 ( bufferClaim ) } else if ( Publication . NOT_CONNECTED == offer ) { throw new NotConnectedException $F72 ; } } while ( _BOOL ) ; }
Builder addLenient ( String line ) { $F129840 ( index , line ) if ( index != - NUM00 ) { return addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; } else if $F3106 ( line ) { return addLenient ( NUM00 , line . substring ( NUM00 ) ) ; } else $F195829 ( addLenient , line ) }
protected boolean tableExists ( Table t ) throws SQLException { String sql = NUM00 + ( t . isTemporary ( ) ? NUM00 : ( NUM00 + t . getSchema ( ) + NUM00 ) ) + NUM00 + ( t . isTemporary ( ) ? ( t . getSchema ( ) + NUM00 ) : NUM00 ) + t . getName ( ) + NUM00 ; $F11282 ( stmt , dbConn ) try { $F15328 ( rs , stmt , sql ) $F43104 ( rs ) } finally $F31188 ( stmt ) }
private void readUnlockedThread $F72 { final long thisThreadId = Thread . currentThread ( ) . getId ( ) ; $F38778 ( entry , threadLockMap , thisThreadId ) assert entry != null ; if ( $F179074 ( entry ) ) $F106 ( threadLockMap , thisThreadId ) else { threadLockMap . put ( thisThreadId , entry . intValue ( ) - NUM00 ) ; } }
boolean isSingleWindowStandardOffset $F72 { return windowEnd . equals ( LocalDateTime . MAX ) && timeDefinition == TimeDefinition . WALL && fixedSavingAmountSecs == null && lastRuleList . isEmpty ( ) && ruleList . isEmpty ( ) ; }
public void add ( Character ok ) { add ( ok . charValue ( ) ) ; }
private $F28319 deleteVolumesMethod ( URI systemURI , $F28584 volumeURIs ) $F28323 ( systemURI , volumeURIs )
public boolean remove ( AccessibleState state ) { if ( states == null ) { return _BOOL ; } else { return states . removeElement ( state ) ; } }
public void testRadix10Pos $F72 $F214959 ( value , radix , aNumber , result , assertTrue )
public void outputExampleXML ( PrintWriter writer , AttributeRule rule ) { writer . print ( $F2990 ( rule ) ) ; if ( rule . hasExample ( ) ) { writer . print ( rule . getExample ( ) ) ; } else { outputAttributeValue ( writer , rule . getAttributeClass ( ) ) ; } $F21384 ( writer ) }
private void beforeValue $F72 throws JSONException { $F19233 ( stack ) Scope context = peek ( ) ; if ( context == Scope . EMPTY_ARRAY ) { replaceTop ( Scope . NONEMPTY_ARRAY ) ; newline ( ) ; } else if ( context == Scope . NONEMPTY_ARRAY ) { $F84 ( out ) newline ( ) ; } else if ( context == Scope . DANGLING_KEY ) { out . append ( indent == null ? NUM00 : NUM00 ) ; replaceTop ( Scope . NONEMPTY_OBJECT ) ; } else if ( context != Scope . NULL ) $F19954 }
public static double calculateJulianDate ( GregorianCalendar cal ) { $F91762 ( year , cal , Calendar ) int month = $F21623 ( cal , Calendar ) ; $F187609 ( day , cal , Calendar ) month ++ ; if $F61413 ( month ) { year -= NUM00 ; month += NUM00 ; } int A = year / NUM00 ; int B = ( int ) ( NUM00 - A + ( A / NUM00 ) ) ; int C = ( int ) ( NUM00 * ( float ) year ) ; int D = ( int ) ( NUM00 * ( float ) ( month + NUM00 ) ) ; double julianDate = ( double ) ( B + C + D + day ) + NUM00 ; return julianDate ; }
public boolean isUploadInProgress $F72 $F1522 ( mUploadStarted )
private int indexOf ( int tabId ) $F194077 ( mTabIdList , tabId )
public NdefMessage ( NdefRecord record , NdefRecord ... records ) { $F1149 ( record ) for ( NdefRecord r : records ) { $F896 ( r ) } mRecords = new NdefRecord [ NUM00 + records . length ] ; mRecords [ NUM00 ] = record ; $F7057 ( System , records , mRecords ) }
private int findCheckpointPosition $F23416 ( cids ) { $F33287 ( checkpointPeriod ) if $F9634 ( cids ) $F26853 int firstCID = cids [ NUM00 ] ; if ( ( firstCID + NUM00 ) % checkpointPeriod == NUM00 ) $F8587 ( cidPosition , cids , firstCID ) else { int nextCkpIndex = ( ( ( firstCID / checkpointPeriod ) + NUM00 ) * checkpointPeriod ) - NUM00 ; if ( nextCkpIndex <= $F8528 ( cids ) ) $F8587 ( cidPosition , cids , nextCkpIndex ) } $F150 }
private boolean readNextLine $F72 throws IOException { if $F1444 ( headerLines ) { try { pos = NUM00 ; String line = ( headerLines . nextElement ( ) + LINE_SEPERATOR ) ; if ( ! headerLines . hasMoreElements ( ) ) { line += LINE_SEPERATOR ; } $F103791 ( currLine , line ) return _BOOL ; } catch ( UnsupportedEncodingException e ) $F14525 } else { return _BOOL ; } }
private boolean pause $F72 { try { U . await ( pauseLatch , REMAP_PAUSE , MILLISECONDS ) ; return _BOOL ; } catch ( IgniteInterruptedCheckedException e ) $F9278 ( onDone , e , _BOOL ) }
public static InputStream toInputStream ( final CharSequence input ) { return IOUtils . toInputStream ( input , Charset . defaultCharset ( ) ) ; }
private static ITLRestRep createInitiatorTargetRefRep ( ExportGroup exportGroup , BlockObject blockObject , String hlu , Initiator initiator , StoragePort port , FCZoneReference fcZoneReference ) { ITLRestRep rep = new ITLRestRep $F72 ; rep . setHlu ( Integer . parseInt ( hlu ) ) ; ITLRestRep . ITLBlockObjectRestRep blockObjectRestRep = new ITLRestRep . ITLBlockObjectRestRep $F72 ; $F29332 ( blockObjectRestRep , blockObject ) blockObjectRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( blockObject ) ) ) ; blockObjectRestRep . setWwn ( getBlockObjectFormattedWWN ( blockObject ) ) ; rep . setBlockObject ( blockObjectRestRep ) ; ITLRestRep . ITLInitiatorRestRep initiatorRestRep = new ITLRestRep . ITLInitiatorRestRep $F72 ; $F29332 ( initiatorRestRep , initiator ) initiatorRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( initiator ) ) ) ; initiatorRestRep . setPort ( initiator . getInitiatorPort ( ) ) ; rep . setInitiator ( initiatorRestRep ) ; ITLRestRep . ITLStoragePortRestRep storagePortRestRep = new ITLRestRep . ITLStoragePortRestRep $F72 ; if ( port != null ) { $F29332 ( storagePortRestRep , port ) storagePortRestRep . setLink ( new RestLinkRep ( NUM00 , RestLinkFactory . newLink ( port ) ) ) ; storagePortRestRep . setPort ( port . getPortNetworkId ( ) ) ; if ( port . getIpAddress ( ) != null ) { storagePortRestRep . setIpAddress ( port . getIpAddress ( ) ) ; storagePortRestRep . setTcpPort ( String . valueOf ( port . getTcpPortNumber ( ) ) ) ; } } rep . setStoragePort ( storagePortRestRep ) ; rep . setExport ( toNamedRelatedResource ( exportGroup , exportGroup . getLabel ( ) ) ) ; if ( fcZoneReference != null ) { rep . setSanZoneName ( fcZoneReference . getZoneName ( ) ) ; } return rep ; }
public void write ( final int c ) throws IOException { if ( m_writer != null ) m_writer . write ( c ) ; if ( count >= buf_length ) flushBuffer ( ) ; if ( c < NUM00 ) { $F260231 ( buf , count , c ) } else if ( c < NUM00 ) { $F264145 ( buf , count , c ) $F264148 ( buf , count , c ) } else { $F264145 ( buf , count , c ) $F264152 ( buf , count , c ) $F264148 ( buf , count , c ) } }
private static List < COperandTree > convert ( final INaviModule module , final List < Operand > operands ) { final List < COperandTree > convertedOperands = new ArrayList < COperandTree > $F72 ; for ( final Operand operand : operands ) { convertedOperands . add ( module . createOperand ( convert ( module , operand . getRootNode ( ) , null ) ) ) ; } return convertedOperands ; }
public static String xmlEscape ( String s ) { $F83 ( sb ) for ( $F1088 ( i , s ) ) { $F1280 ( ch , s , i ) switch ( ch ) { $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F151814 $F3000 ( sb , ch ) } } $F92 ( sb ) }
$F145605 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
$F1219 public Bitmap ensureNormalizedIcon ( Bitmap icon , String origin ) { if ( icon == null || icon . getWidth ( ) == NUM00 ) { if ( mIconGenerator == null ) { int cornerRadiusPx = Math . min ( mLargeIconWidthPx , mLargeIconHeightPx ) / NUM00 ; mIconGenerator = new RoundedIconGenerator ( mLargeIconWidthPx , mLargeIconHeightPx , cornerRadiusPx , NOTIFICATION_ICON_BG_COLOR , NOTIFICATION_TEXT_SIZE_DP * mDensity ) ; } return mIconGenerator . generateIconForUrl ( origin , _BOOL ) ; } if ( icon . getWidth ( ) > mLargeIconWidthPx || icon . getHeight ( ) > mLargeIconHeightPx ) { return icon . createScaledBitmap ( icon , mLargeIconWidthPx , mLargeIconHeightPx , _BOOL ) ; } return icon ; }
protected $F8748 canHandleZeroTraining $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F317241 ( numTrain , numClasses , missingLevel ) boolean predictorMissing = _BOOL , classMissing = _BOOL ; return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; }
public SQLQuery ( String typeName , String sqlExpression ) { this ( sqlExpression , typeName , null , DEFAULT_QUERY_RESULT_TYPE , null ) ; }
private static void checkOffset $F41200 ( value , offset , expected ) throws IndexOutOfBoundsException { $F1280 ( found , value , offset ) if ( found != expected ) { throw new IndexOutOfBoundsException $F6486 ( expected , found ) ; } }
public boolean isInNet $F1947 ( host , pattern , mask ) { host = dnsResolve ( host ) ; $F32021 ( host , _BOOL ) long lhost = parseIpAddressToLong ( host ) ; long lpattern = parseIpAddressToLong ( pattern ) ; long lmask = parseIpAddressToLong ( mask ) ; return ( lhost & lmask ) == lpattern ; }
protected static $F7329 rrxRegister ( final long offset , final ITranslationEnvironment environment , $F7332 ( instructions ) , final String registerNodeValue ) { $F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , byteSize , NUM00 , wordSize , thirtyOneSet , dWordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue , byteSize , NUM00 + oneSet , dWordSize , tmpVar2 ) ) ; $F43825 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar3 , bitMaskAllBitsSet , shifterOperand ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue , byteSize , String . valueOf ( NUM00 ) , byteSize , shifterCarryOut ) ) ; $F7348 ( shifterOperand , shifterCarryOut ) }
public int enumerate ( Thread [ ] threads ) $F8587 ( enumerate , threads , _BOOL )
public void findAndUndo ( Object someObj ) { if ( someObj instanceof LayerHandler ) { $F22806 ( logger ) if ( getLayerHandler ( ) == ( LayerHandler ) someObj ) $F82623 ( setLayerHandler ) } if ( controls != null && someObj != this ) { controls . findAndUndo ( someObj ) ; } if ( someObj instanceof Layer ) { paneLookUp . remove ( ( Layer ) someObj ) ; } }
public void start $F72 { log . info ( NUM00 , this . name , this . frequencyInSecs ) ; stopped = _BOOL ; $F24440 ( drHealthMonitorThread , this ) drHealthMonitorThread . setName ( this . name ) ; $F2346 ( drHealthMonitorThread ) }
public void connect ( String eventSourceUrl ) throws IOException { LOG . entering ( CLASS_NAME , NUM00 , eventSourceUrl ) ; if ( stream != null ) { $F18143 ( LOG ) $F824 } stream = new SseEventStream ( eventSourceUrl ) ; stream . setListener ( eventStreamListener ) ; $F2410 ( stream ) }
private static String methodName ( $F157772 final String method ) { return GitSSHHandler . HANDLER_NAME + NUM00 + method ; }
public DataRow removeDataRow ( int index ) $F20067 ( dataList , index )
public void put ( Object key , Object value ) { int bucket = ( key . hashCode ( ) & NUM00 ) % fTableSize ; Entry entry = search ( key , bucket ) ; if ( entry != null ) $F6988 ( entry , value ) else { entry = new Entry ( key , value , fBuckets [ bucket ] ) ; fBuckets [ bucket ] = entry ; fNum ++ ; } }
public void valueChanged ( ListSelectionEvent e ) { $F2329 ( _table ) $F3768 ( row , _table ) $F15998 ( log , row ) if ( row >= NUM00 ) { _addButton . setEnabled ( _BOOL ) ; $F51105 ( _addButton ) if $F85112 ( _type ) { makeIconMap ( _pickListModel . getBeanAt ( row ) ) ; clearIconPanel ( ) ; doIconPanel ( ) ; } } else { _addButton . setEnabled ( _BOOL ) ; $F335680 ( _addButton , Bundle ) } validate ( ) ; }
private int processPollFds $F72 throws IOException { if ( pollFds . get ( NUM00 ) . revents == POLLIN ) { $F12496 ( buffer ) while ( IoBridge . read ( wakeupIn , buffer , NUM00 , NUM00 ) > NUM00 ) $F845 } int readyKeyCount = NUM00 ; for ( $F3836 ( i , pollFds ) ) { StructPollfd pollFd = pollFds . get ( i ) ; if ( pollFd . revents == NUM00 ) $F1448 if ( pollFd . fd == null ) $F5153 SelectionKeyImpl key = ( SelectionKeyImpl ) pollFd . userData ; pollFd . fd = null ; pollFd . userData = null ; int ops = key . interestOpsNoCheck ( ) ; int selectedOps = NUM00 ; if ( ( pollFd . revents & POLLHUP ) != NUM00 ) { selectedOps |= ops ; } if ( ( pollFd . revents & POLLIN ) != NUM00 ) { selectedOps |= ops & ( OP_ACCEPT | OP_READ ) ; } if ( ( pollFd . revents & POLLOUT ) != NUM00 ) { if $F104255 ( key ) { selectedOps |= ops & OP_WRITE ; } else { selectedOps |= ops & OP_CONNECT ; } } if ( selectedOps != NUM00 ) { boolean wasSelected = mutableSelectedKeys . contains ( key ) ; if ( wasSelected && key . readyOps ( ) != selectedOps ) { key . setReadyOps ( key . readyOps ( ) | selectedOps ) ; ++ readyKeyCount ; } else if ( ! wasSelected ) { key . setReadyOps ( selectedOps ) ; mutableSelectedKeys . add ( key ) ; ++ readyKeyCount ; } } } return readyKeyCount ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public static boolean isIntermediateTable ( String tableName , SQLiteDatabase db ) { if $F20899 ( TextUtils , tableName ) { if $F11809 ( tableName ) { Cursor cursor = null ; try { cursor = db . query ( Const . TableSchema . TABLE_NAME , null , null , null , null , null , null ) ; if $F17816 ( cursor ) { do { String tableNameDB = cursor . getString ( cursor . getColumnIndexOrThrow ( Const . TableSchema . COLUMN_NAME ) ) ; if $F8397 ( tableName , tableNameDB ) { int tableType = cursor . getInt ( cursor . getColumnIndexOrThrow ( Const . TableSchema . COLUMN_TYPE ) ) ; if ( tableType == Const . TableSchema . INTERMEDIATE_JOIN_TABLE ) { return _BOOL ; } $F597 } } while $F12260 ( cursor ) ; } } $F1516 ( e ) $F14364 ( cursor ) } } return _BOOL ; }
public static void initialize ( File helpDir ) throws HelpException { if ( helpDir . isDirectory ( ) && helpDir . exists ( ) ) HelpManager . helpDir = helpDir ; else throw new HelpException ( $F4929 ( helpDir ) , null ) ; }
public RealMatrix create $F72 { RealMatrix rotation = newIdentityMatrix ( ) ; for ( Plane plane : planes ) { double theta = plane . getTheta ( ) ; if $F35707 ( Double , theta ) $F1448 rotation = rotation . multiply ( newRotationMatrix ( plane . getFirstAxis ( ) , plane . getSecondAxis ( ) , theta ) ) ; } return rotation ; }
public static String toUpperCase ( String str ) { return $F65405 ( str , Locale ) ; }
protected static void init $F72 { String notificationfactoryClassName = null ; try $F10616 ( notificationfactoryClassName , System , NOTIFICATION_FACTORY_NAME ) catch ( SecurityException e ) $F9491 ( e ) if ( notificationfactoryClassName != null ) { $F33929 ( nfc ) try { nfc = Class . forName ( notificationfactoryClassName ) ; factory = ( INotificationManagerFactory ) nfc . newInstance ( ) ; } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) $F9491 ( e ) } else { factory = new SyslogNotificationFactory $F72 ; } }
public boolean isDeclaredEntity ( String entityName ) { Entity entity = ( Entity ) fEntities . get ( entityName ) ; return entity != null ; }
private void openContextMenu ( MouseEvent e ) { if $F264788 ( e ) { selectClicked ( e , _BOOL ) ; List < RemovedListItem > selectedItems = list . getSelectedValuesList ( ) ; List < StreamInfo > $F204 ( selected ) ; for ( RemovedListItem item : selectedItems ) { selected . add ( item . getStreamInfo ( ) ) ; } StreamInfosContextMenu m = new StreamInfosContextMenu ( selected , _BOOL ) ; for ( ContextMenuListener cml : contextMenuListeners ) { m . addContextMenuListener ( cml ) ; } $F255135 ( m , list , e ) } }
private boolean put ( boolean isRoot , Vector names , int len , Object value ) { if ( len == NUM00 ) { if ( isRoot ) { $F203568 ( rootValue , _BOOL ) rootValue = value ; } else { $F203568 ( otherValue , _BOOL ) otherValue = value ; } return _BOOL ; } else { Object name = names . elementAt ( len - NUM00 ) ; ContextMap nestedMap = ( ContextMap ) nameTable . get ( name ) ; if ( nestedMap == null ) { nestedMap = new ContextMap $F72 ; nameTable . put ( name , nestedMap ) ; } return nestedMap . put ( isRoot , names , len - NUM00 , value ) ; } }
static String encodeHighLevel ( String msg , Compaction compaction ) throws WriterException { $F5475 ( bytes ) $F80469 ( sb , msg ) $F1749 ( len , msg ) int p = NUM00 ; int textSubMode = SUBMODE_ALPHA ; if ( compaction == Compaction . TEXT ) { encodeText ( msg , p , len , sb , textSubMode ) ; } else if ( compaction == Compaction . BYTE ) { bytes = getBytesForMessage ( msg ) ; encodeBinary ( bytes , p , bytes . length , BYTE_COMPACTION , sb ) ; } else if ( compaction == Compaction . NUMERIC ) { $F36813 ( sb , LATCH_TO1ERIC ) encodeNumeric ( msg , p , len , sb ) ; } else { int encodingMode = TEXT_COMPACTION ; while ( p < len ) { int n = determineConsecutiveDigitCount ( msg , p ) ; if ( n >= NUM00 ) { $F36813 ( sb , LATCH_TO1ERIC ) encodingMode = NUMERIC_COMPACTION ; textSubMode = SUBMODE_ALPHA ; encodeNumeric ( msg , p , n , sb ) ; p += n ; } else { int t = determineConsecutiveTextCount ( msg , p ) ; if ( t >= NUM00 || n == len ) { if ( encodingMode != TEXT_COMPACTION ) { $F36813 ( sb , LATCH_TO_TEXT ) encodingMode = TEXT_COMPACTION ; textSubMode = SUBMODE_ALPHA ; } textSubMode = encodeText ( msg , p , t , sb , textSubMode ) ; p += t ; } else { $F5178 ( bytes , getBytesForMessage , msg ) int b = determineConsecutiveBinaryCount ( msg , bytes , p ) ; $F85331 ( b ) if ( b == NUM00 && encodingMode == TEXT_COMPACTION ) { encodeBinary ( bytes , p , NUM00 , TEXT_COMPACTION , sb ) ; } else { encodeBinary ( bytes , p , b , encodingMode , sb ) ; encodingMode = BYTE_COMPACTION ; textSubMode = SUBMODE_ALPHA ; } p += b ; } } } } $F92 ( sb ) }
protected void queue ( final Path file ) throws InterruptedException { if ( null != base && file . startsWith ( base ) ) { queue . put ( file . subpath ( base . getNameCount ( ) , file . getNameCount ( ) ) ) ; } else $F45619 ( queue , file ) }
public InputStream openPath $F72 throws IOException { Path $F166744 ( filePath , Paths , path ) ; if $F97092 ( Files , filePath ) { $F10635 ( logger , filePath ) return Files . newInputStream ( filePath ) ; } URL resourceUrl = Resources . getResource ( path ( ) ) ; $F10635 ( logger , resourceUrl ) return resourceUrl . openStream ( ) ; }
public static String replaceCharacters ( final ConversionMethod conversionMethod , final String input , final int fromCharacter , final int toCharacter , final String wrap ) { String convertedText = input ; for ( int i = fromCharacter ; i <= toCharacter ; i ++ ) { final String characterToReplace = new String ( Character . toChars ( i ) ) ; if ( wrap != null ) { convertedText = convertedText . replace ( characterToReplace , wrap + convertText ( conversionMethod , characterToReplace ) + wrap ) ; } else { convertedText = convertedText . replace ( characterToReplace , convertText ( conversionMethod , characterToReplace ) ) ; } } return convertedText ; }
public static $F96 hmac_sha1 $F7233 ( keyBytes , text ) throws $F155 { Mac hmacSha1 ; try $F14527 ( hmacSha1 , Mac ) catch ( final NoSuchAlgorithmException nsae ) $F14527 ( hmacSha1 , Mac ) final SecretKeySpec macKey = new SecretKeySpec ( keyBytes , NUM00 ) ; hmacSha1 . init ( macKey ) ; $F157 ( hmacSha1 , text ) }
public static $F96 readBytesAndClose ( InputStream in , int length ) throws IOException { try { if ( length <= NUM00 ) $F7984 ( length , Integer ) int block = Math . min ( Constants . IO_BUFFER_SIZE , length ) ; $F39018 ( out , block ) copy ( in , out , length ) ; $F11316 ( out ) } $F101911 ( DbException , e ) $F3229 ( in ) }
public IdentValue asIdentValue $F72 { if ( ! identIsSet ) { _identVal = IdentValue . getByIdentString ( cssPrimitiveValue . getCssText ( ) ) ; identIsSet = _BOOL ; } return _identVal ; }
public final TestSuite build $F72 { rootSuite = new TestSuite ( getSuiteName ( ) ) ; currentClassname = null ; try { for ( TestMethod test : testGrouping . getTests ( ) ) { if ( satisfiesAllPredicates ( test ) ) { addTest ( test ) ; } } if $F3817 ( testCases ) { for ( TestCase testCase : testCases ) { if ( satisfiesAllPredicates ( new TestMethod ( testCase ) ) ) { addTest ( testCase ) ; } } } } catch ( Exception exception ) { Log . i ( NUM00 , NUM00 , exception ) ; TestSuite suite = new TestSuite ( getSuiteName ( ) ) ; suite . addTest ( new FailedToCreateTests ( exception ) ) ; return suite ; } return rootSuite ; }
public javax . naming . Binding next $F72 throws NamingException { if ( more && counter >= _bindingList . value . length ) $F5795 ( getMore ) if ( more && counter < _bindingList . value . length ) { org . omg . CosNaming . Binding bndg = _bindingList . value [ counter ] ; counter ++ ; return mapBinding ( bndg ) ; } else $F6747 }
protected < T extends ASTNode > T moveNode ( T oldNode , ASTRewrite rewrite ) { T movedNode ; if ( ASTNodes . isExistingNode ( oldNode ) ) movedNode = ASTNodes . createMoveTarget ( rewrite , oldNode ) ; else movedNode = ASTNodes . copySubtree ( rewrite . getAST ( ) , oldNode ) ; return movedNode ; }
$F122843 $F32043 public void shouldBeFasterWhenRunningProcessingInParallel $F72 throws Exception { testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; $F42358 ( begin , System ) victim . setParallelProcessing ( _BOOL ) ; testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; $F42358 ( endSerial , System ) victim . setParallelProcessing ( _BOOL ) ; testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet ( ) ; $F42358 ( endParallel , System ) final long serial = endSerial - begin ; final long parallel = endParallel - endSerial ; $F10635 ( LOG , serial ) $F10635 ( LOG , parallel ) assertTrue ( String . format ( NUM00 , serial , parallel ) , serial > parallel ) ; }
public static TetradMatrix incompleteCholeskyGramMatrix ( List < Kernel > kernels , DataSet dataset , $F27878 nodes , double precision ) { $F41760 ( precision ) $F193446 ( m , dataset ) TetradMatrix G = new TetradMatrix ( m , m ) ; $F9662 ( Dadv , m ) $F4120 ( p , m ) for ( $F119 ( i , m ) ) { Dadv [ i ] = evaluate ( kernels , dataset , nodes , i , i ) ; p [ i ] = i ; } int cols = m ; for ( $F119 ( k , m ) ) { double best = Dadv [ k ] ; int bestInd = k ; for ( int j = ( k + NUM00 ) ; j < m ; j ++ ) { if ( Dadv [ j ] > best / NUM00 ) { best = Dadv [ j ] ; bestInd = j ; } } if ( best < precision ) { cols = k - NUM00 ; $F597 } int pk = p [ k ] ; p [ k ] = p [ bestInd ] ; p [ bestInd ] = pk ; double dk = Dadv [ k ] ; Dadv [ k ] = Dadv [ bestInd ] ; Dadv [ bestInd ] = dk ; for ( $F119 ( j , k ) ) { double gk = G . get ( k , j ) ; G . set ( k , j , G . get ( bestInd , j ) ) ; G . set ( bestInd , j , gk ) ; } double diag = Math . sqrt ( Dadv [ k ] ) ; G . set ( k , k , diag ) ; for ( int j = ( k + NUM00 ) ; j < m ; j ++ ) { double s = NUM00 ; for ( $F119 ( i , k ) ) { s += G . get ( j , i ) * G . get ( k , i ) ; } G . set ( j , k , ( evaluate ( kernels , dataset , nodes , p [ j ] , p [ k ] ) - s ) / diag ) ; } for ( int j = ( k + NUM00 ) ; j < m ; j ++ ) { Dadv [ j ] -= Math . pow ( G . get ( j , k ) , NUM00 ) ; } Dadv [ k ] = NUM00 ; } TetradMatrix Gm = new TetradMatrix ( m , cols ) ; for ( $F119 ( i , m ) ) { for ( $F119 ( j , cols ) ) { Gm . set ( i , j , G . get ( i , j ) ) ; } } return Gm ; }
FormatSpecifierParser ( String format ) { this . format = format ; this . length = format . length ( ) ; }
public void addConsumerType ( AttributeType type ) $F2202 ( consumerTypes , type )
public final void printVerboseMessage ( final LocalizableMessage msg ) { if ( isVerbose ( ) ) { out . println ( wrap ( msg ) ) ; } }
private static void orderMatches ( List $F30094 typeMatches , String paramName ) { if ( typeMatches != null ) Collections . sort ( typeMatches , new MatchComparator ( paramName ) ) ; }
$F44293 typesToImport $F72 { $F44298 ( typesToImport ) for ( Map . Entry < String , Spelling > entry : imports . entrySet ( ) ) { if ( entry . getValue ( ) . importIt ) $F44306 ( typesToImport , entry ) } return typesToImport ; }
$F1 public boolean isScraped $F72 { if ( ! scraped ) { if ( $F1030 ( plot ) && ! ( year . isEmpty ( ) || year . equals ( NUM00 ) ) && ! $F45555 ( genres ) && ! $F45555 ( actors ) ) { return _BOOL ; } } return scraped ; }
public NoiseTagLdaModel ( InputStream in ) throws IOException { GZIPInputStream zipin = new GZIPInputStream ( in ) ; $F31064 ( bin , zipin ) $F5337 ( datain , bin ) $F5961 ( numTopics , datain ) $F5952 ( numWords , datain ) $F216839 ( alpha , datain ) $F216839 ( beta , datain ) $F29712 ( locked , datain ) $F3936 ( wnz , numTopics ) $F9952 ( Arrays , wnz ) for ( $F119 ( i , numWords ) ) { $F1540 ( word , datain ) $F4120 ( count , numTopics ) for ( $F119 ( j , numTopics ) ) { $F114160 ( count , j , datain ) wnz [ j ] += count [ j ] ; nw += count [ j ] ; } nwz . put ( word , count ) ; } $F15464 ( tnz , numTopics ) $F9952 ( Arrays , tnz ) $F5952 ( numTags , datain ) $F216839 ( eta , datain ) for ( $F119 ( i , numTags ) ) { $F1540 ( word , datain ) $F65716 ( count , numTopics ) for ( $F10229 ( j , numTopics ) ) { $F114160 ( count , j , datain ) tnz [ j ] += count [ j ] ; nt += count [ j ] ; } ntz . put ( word , count ) ; } noise = numTopics ; }
$F65791 ( api , Opcodes , visibleTypeAnnotations , invisibleTypeAnnotations , f , fields , m , methods )
public static String RTFEnc ( String s ) { $F1749 ( ln , s ) int firstEscIdx = - NUM00 ; int lastEscIdx = NUM00 ; int plusOutLn = NUM00 ; for ( $F119 ( i , ln ) ) { $F1280 ( c , s , i ) if $F58237 ( c ) { if ( firstEscIdx == - NUM00 ) { firstEscIdx = i ; } lastEscIdx = i ; plusOutLn ++ ; } } if ( firstEscIdx == - NUM00 ) { return s ; } else { $F1469 esced = new char [ ln + plusOutLn ] ; if ( firstEscIdx != NUM00 ) { $F16116 ( s , firstEscIdx , esced ) } int dst = firstEscIdx ; for ( int i = firstEscIdx ; i <= lastEscIdx ; i ++ ) { $F1280 ( c , s , i ) if $F58237 ( c ) { esced [ dst ++ ] = NUM00 ; } esced [ dst ++ ] = c ; } if ( lastEscIdx != ln - NUM00 ) { s . getChars ( lastEscIdx + NUM00 , ln , esced , dst ) ; } $F33236 ( String , esced ) } }
public String toString $F105266 { return Integer . toString ( ( int ) bytes ) ; }
public InetNetwork ( InetAddress inetAddress , int subnetBits ) { _inetAddress = inetAddress ; _address = inetAddress . getAddress ( ) ; if ( subnetBits < NUM00 ) subnetBits = NUM00 * _address . length ; _subnetBits = subnetBits ; _subnetByte = subnetBits / NUM00 ; _subnetMask = ~ ( ( NUM00 < < ( NUM00 - subnetBits % NUM00 ) ) - NUM00 ) & NUM00 ; }
public boolean equalArrayValue ( Object otherValue ) { if ( value instanceof $F131 && otherValue instanceof $F131 ) { return Arrays . equals ( $F2486 ( value ) , $F2486 ( otherValue ) ) ; } $F121108 ( type , value ) if ( type != otherValue . getClass ( ) ) { return _BOOL ; } if ( type == $F144048 ) { return Arrays . equals ( $F25706 ( value ) , $F25706 ( otherValue ) ) ; } else if ( type == $F144055 ) { return Arrays . equals ( $F2457 ( value ) , $F2457 ( otherValue ) ) ; } else if ( type == $F5078 . class ) { return Arrays . equals ( $F41262 ( value ) , $F41262 ( otherValue ) ) ; } else if ( type == $F2469 . class ) { return Arrays . equals ( $F2471 ( value ) , $F2471 ( otherValue ) ) ; } else if ( type == $F1469 . class ) { return Arrays . equals ( $F114168 ( value ) , $F114168 ( otherValue ) ) ; } else if ( type == $F144083 ) { return Arrays . equals ( $F41256 ( value ) , $F41256 ( otherValue ) ) ; } else if ( type == $F5415 . class ) { return Arrays . equals ( $F41250 ( value ) , $F41250 ( otherValue ) ) ; } else if $F45497 ( type ) { return Arrays . equals ( $F41244 ( value ) , $F41244 ( otherValue ) ) ; } return _BOOL ; }
$F1 public HierarchyWrapperOperation createSubOperation $F72 { return new ToStringOperation ( builder , baseIndent ) ; }
$F192509 ( is , close , b , len , _BOOL , n , c , System , last )
protected final boolean execute $F72 throws AdeException { logger . info ( NUM00 + m_requestType . name ( ) ) ; $F42358 ( start , System ) $F30559 ( success , doControlLogic ) $F39033 ( total , System , start ) logger . info ( m_requestType . name ( ) + ( success ? NUM00 : NUM00 ) + NUM00 + millisecondsToHumanTime ( total ) ) ; return success ; }
public abstract JsonValue sync $F72 throws SynchronizationException ;
private boolean validConsist $F72 { int cN = $F47592 ( validConsist , consistTextField ) ; if ( cN == - NUM00 ) { $F50529 ( consistStatus , rb ) JOptionPane . showMessageDialog ( this , rb . getString ( NUM00 ) , rb . getString ( NUM00 ) , JOptionPane . ERROR_MESSAGE ) ; return _BOOL ; } return _BOOL ; }
private void activity $F72 { connectionCheckedCount = NUM00 ; }
public static ScheduleSpec computeValues $F22194 ( args ) throws ScheduleParameterException { if ( args . length <= NUM00 || args . length >= NUM00 ) { throw new ScheduleParameterException $F75477 ( args ) ; } EnumMap < ScheduleUnit , SortedSet $F2305 > unitMap = new EnumMap < ScheduleUnit , SortedSet $F2305 > ( ScheduleUnit . class ) ; Object minutes = args [ NUM00 ] ; Object hours = args [ NUM00 ] ; Object daysOfMonth = args [ NUM00 ] ; Object months = args [ NUM00 ] ; Object daysOfWeek = args [ NUM00 ] ; unitMap . put ( ScheduleUnit . MINUTES , computeValues ( minutes , ScheduleUnit . MINUTES ) ) ; unitMap . put ( ScheduleUnit . HOURS , computeValues ( hours , ScheduleUnit . HOURS ) ) ; SortedSet $F2305 resultMonths = computeValues ( months , ScheduleUnit . MONTHS ) ; if ( daysOfWeek instanceof CronParameter && daysOfMonth instanceof CronParameter ) { throw new ScheduleParameterException $F580 ; } if ( resultMonths != null && $F10470 ( resultMonths ) && ( resultMonths . first ( ) instanceof Integer ) ) { CronParameter parameter = null ; if ( daysOfMonth instanceof CronParameter ) { parameter = ( ( CronParameter ) daysOfMonth ) ; } else if ( daysOfWeek instanceof CronParameter ) { parameter = ( ( CronParameter ) daysOfWeek ) ; } if ( parameter != null ) { parameter . setMonth ( resultMonths . first ( ) ) ; } } SortedSet $F2305 resultDaysOfWeek = computeValues ( daysOfWeek , ScheduleUnit . DAYS_OF_WEEK ) ; SortedSet $F2305 resultDaysOfMonth = computeValues ( daysOfMonth , ScheduleUnit . DAYS_OF_MONTH ) ; if ( resultDaysOfWeek != null && $F10470 ( resultDaysOfWeek ) && ( resultDaysOfWeek . first ( ) instanceof Integer ) ) { if ( resultDaysOfWeek . first ( ) > NUM00 ) { if ( resultDaysOfMonth != null ) { throw new ScheduleParameterException $F580 ; } resultDaysOfMonth = resultDaysOfWeek ; resultDaysOfWeek = null ; } } if ( resultDaysOfMonth != null && $F10470 ( resultDaysOfMonth ) && ( resultDaysOfMonth . first ( ) instanceof Integer ) ) { if ( resultDaysOfWeek != null ) { throw new ScheduleParameterException $F580 ; } } unitMap . put ( ScheduleUnit . DAYS_OF_WEEK , resultDaysOfWeek ) ; unitMap . put ( ScheduleUnit . DAYS_OF_MONTH , resultDaysOfMonth ) ; unitMap . put ( ScheduleUnit . MONTHS , resultMonths ) ; if $F3305 ( args ) { unitMap . put ( ScheduleUnit . SECONDS , computeValues ( args [ NUM00 ] , ScheduleUnit . SECONDS ) ) ; } String timezone = null ; if $F3305 ( args ) { if ( ! ( args [ NUM00 ] instanceof WildcardParameter ) ) { if ( ! ( args [ NUM00 ] instanceof String ) ) { throw new ScheduleParameterException ( NUM00 + args [ NUM00 ] + NUM00 ) ; } timezone = ( String ) args [ NUM00 ] ; } } CronParameter optionalDayOfMonthOp = getOptionalSpecialOp ( daysOfMonth ) ; CronParameter optionalDayOfWeekOp = getOptionalSpecialOp ( daysOfWeek ) ; return new ScheduleSpec ( unitMap , timezone , optionalDayOfMonthOp , optionalDayOfWeekOp ) ; }
public void remove ( int position ) { mData . remove ( position ) ; notifyItemRemoved ( position + getHeaderLayoutCount ( ) ) ; }
public AsyncBufferedOutputStream ( OutputStream out , int bufSize , int maxBuffers ) { super ( out ) ; buffers = new ConcurrentLinkedDeque $F200 $F72 ; $F1325 ( buf , bufSize ) $F2346 ( flusherThread ) }
public boolean startlistContains ( String x ) { $F397 ( startwords , _BOOL ) $F297 ( startwords , x ) }
private void closeMediaInfo $F72 { $F39863 ( mediaInfo ) miSnapshot = null ; }
public void addHeader ( final Header header ) $F207 ( headers , header )
private void readVersion ( InputNode node , Object source , Label label ) throws Exception { Object value = readInstance ( node , source , label ) ; $F42606 ( expect , type ) if ( value != null ) { Version version = context . getVersion ( expect ) ; Double actual = version . revision ( ) ; if $F2137 ( value , revision ) { revision . compare ( actual , value ) ; } } }
protected Ignite startGridWithIgfs ( String gridName , String igfsName , IgfsMode mode , $F5466 IgfsSecondaryFileSystem secondaryFs , $F5466 IgfsIpcEndpointConfiguration restCfg ) throws Exception { FileSystemConfiguration igfsCfg = new FileSystemConfiguration $F72 ; igfsCfg . setDataCacheName ( NUM00 ) ; igfsCfg . setMetaCacheName ( NUM00 ) ; igfsCfg . setName ( igfsName ) ; igfsCfg . setBlockSize ( IGFS_BLOCK_SIZE ) ; igfsCfg . setDefaultMode ( mode ) ; igfsCfg . setIpcEndpointConfiguration ( restCfg ) ; igfsCfg . setSecondaryFileSystem ( secondaryFs ) ; igfsCfg . setPrefetchBlocks ( PREFETCH_BLOCKS ) ; igfsCfg . setSequentialReadsBeforePrefetch ( SEQ_READS_BEFORE_PREFETCH ) ; CacheConfiguration dataCacheCfg = defaultCacheConfiguration ( ) ; $F87453 ( dataCacheCfg ) dataCacheCfg . setCacheMode ( PARTITIONED ) ; dataCacheCfg . setNearConfiguration ( null ) ; dataCacheCfg . setWriteSynchronizationMode ( CacheWriteSynchronizationMode . FULL_SYNC ) ; dataCacheCfg . setAffinityMapper ( new IgfsGroupDataBlocksKeyMapper $F989 ) ; dataCacheCfg . setBackups ( NUM00 ) ; dataCacheCfg . setAtomicityMode ( TRANSACTIONAL ) ; dataCacheCfg . setOffHeapMaxMemory ( NUM00 ) ; CacheConfiguration metaCacheCfg = defaultCacheConfiguration ( ) ; $F87453 ( metaCacheCfg ) metaCacheCfg . setCacheMode ( REPLICATED ) ; metaCacheCfg . setWriteSynchronizationMode ( CacheWriteSynchronizationMode . FULL_SYNC ) ; metaCacheCfg . setAtomicityMode ( TRANSACTIONAL ) ; IgniteConfiguration cfg = new IgniteConfiguration $F72 ; cfg . setGridName ( gridName ) ; TcpDiscoverySpi discoSpi = new TcpDiscoverySpi $F72 ; discoSpi . setIpFinder ( new TcpDiscoveryVmIpFinder ( _BOOL ) ) ; cfg . setDiscoverySpi ( discoSpi ) ; cfg . setCacheConfiguration ( dataCacheCfg , metaCacheCfg ) ; cfg . setFileSystemConfiguration ( igfsCfg ) ; cfg . setLocalHost ( NUM00 ) ; cfg . setConnectorConfiguration ( null ) ; return G . start ( cfg ) ; }
TypeSimplifier ( Types typeUtils , String packageName , $F134539 types , TypeMirror base ) { this . typeUtils = typeUtils ; $F134539 typesPlusBase = new TypeMirrorSet ( types ) ; $F1140 ( base , typesPlusBase ) $F134545 ( referenced , referencedClassTypes , typeUtils , typesPlusBase ) $F134545 ( defined , nonPrivateDeclaredTypes , typeUtils , base ) this . imports = findImports ( typeUtils , packageName , referenced , defined ) ; }
private $F23384 removeFailed ( $F23384 statistics ) { $F23384 $F204 ( result ) ; for ( Statistics statistic : statistics ) { if ( statistic . getSucceeded ( ) ) result . add ( statistic ) ; } return result ; }
public void addAssociatedGefahr ( GefaehrdungsUmsetzung gefaehrdung ) $F2202 ( associatedGefaehrdungen , gefaehrdung )
public static $F96 packByteBufferIntoSingleByteArray ( $F30903 byteBufferArr ) { if ( null == byteBufferArr || byteBufferArr . length == NUM00 ) $F1337 int noOfCol = byteBufferArr . length ; short toDetermineLengthOfByteArr = NUM00 ; short offsetLen = ( short ) ( noOfCol * NUM00 + toDetermineLengthOfByteArr ) ; int totalBytes = calculateTotalBytes ( byteBufferArr ) + offsetLen ; $F87627 ( buffer , ByteBuffer , totalBytes ) buffer . putShort ( ( short ) ( totalBytes - toDetermineLengthOfByteArr ) ) ; buffer . putShort ( offsetLen ) ; for ( $F21583 ( index , byteBufferArr ) ) { ByteBuffer individualCol = byteBufferArr [ index ] ; $F85980 ( noOfBytes , individualCol ) buffer . putShort ( $F15066 ( offsetLen , noOfBytes ) ) ; offsetLen += noOfBytes ; $F23501 ( individualCol ) } for ( $F1139 ( index , byteBufferArr ) ) { ByteBuffer individualCol = byteBufferArr [ index ] ; buffer . put ( individualCol . array ( ) ) ; } $F23501 ( buffer ) $F31057 ( buffer ) }
public void connect ( SocketAddress endpoint , int timeout ) throws IOException { $F19273 ( endpoint ) $F30465 ( timeout ) if ( isClosed ( ) ) throw new SocketException $F580 ; if ( ! oldImpl && isConnected ( ) ) throw new SocketException $F580 ; if ( ! ( endpoint instanceof InetSocketAddress ) ) $F824 InetSocketAddress epoint = ( InetSocketAddress ) endpoint ; InetAddress addr = epoint . getAddress ( ) ; $F287270 ( port , epoint ) checkAddress ( addr , NUM00 ) ; $F8108 ( security , System ) if ( security != null ) { if ( epoint . isUnresolved ( ) ) security . checkConnect ( epoint . getHostName ( ) , port ) ; else security . checkConnect ( addr . getHostAddress ( ) , port ) ; } $F88859 ( created , createImpl , _BOOL ) if ( ! oldImpl ) impl . connect ( epoint , timeout ) ; else if ( timeout == NUM00 ) { if ( epoint . isUnresolved ( ) ) impl . connect ( addr . getHostName ( ) , port ) ; else impl . connect ( addr , port ) ; } else $F5788 connected = _BOOL ; bound = _BOOL ; }
private Pair < HashStepType , HashChainType > fetchHashStep ( String uri , HashChainType currentChain ) throws Exception { $F1384 ( hashIndex , uri ) if ( hashIndex < NUM00 ) { throw new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; } $F11991 ( baseUri , uri , hashIndex ) $F36289 ( fragment , uri , hashIndex ) if $F2979 ( fragment ) { throw new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; } HashChainType hashChain ; if $F2979 ( baseUri ) { hashChain = currentChain ; } else { hashChain = getHashChain ( baseUri ) ; } for ( HashStepType step : hashChain . getHashStep ( ) ) { if ( $F140091 ( fragment , step ) ) { return new ImmutablePair $F200 ( step , hashChain ) ; } } throw new CodedException ( X_MALFORMED_HASH_CHAIN , NUM00 , uri ) ; }
$F1431 public static boolean loadByCurrentClassloader ( String clsName ) { if $F3106 ( clsName ) return _BOOL ; if $F3106 ( clsName ) { if $F100843 ( clsName ) return _BOOL ; } return _BOOL ; }
public void decrementTargetsCountAll $F72 { final long decrementAndGet = targetsCountAll . decrementAndGet ( ) ; if ( decrementAndGet < NUM00 ) $F21827 ( targetsCountAll ) }
private void addNotAvailableBusinessObjectDataStatuses ( List < BusinessObjectDataStatus > notAvailableStatuses , List < StorageUnitEntity > storageUnitEntities , Set < BusinessObjectDataEntity > archivedBusinessObjectDataEntities ) { for ( StorageUnitEntity storageUnitEntity : storageUnitEntities ) $F18351 ( notAvailableStatuses , createNotAvailableBusinessObjectDataStatus , storageUnitEntity , archivedBusinessObjectDataEntities ) }
private List < JdbcStatement > createDefaultQueryJdbcStatements $F72 { List < JdbcStatement > $F204 ( jdbcStatements ) ; { JdbcStatement jdbcStatement = new JdbcStatement $F72 ; jdbcStatement . setType ( JdbcStatementType . QUERY ) ; jdbcStatement . setSql ( MockJdbcOperations . CASE_1_SQL ) ; jdbcStatements . add ( jdbcStatement ) ; } return jdbcStatements ; }
private void testMemorySpatialIndex $F72 throws SQLException { deleteDb ( NUM00 ) ; Connection conn = getConnection ( URL ) ; $F11282 ( stat , conn ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) $F131050 ( stat ) ResultSet rs ; rs = stat . executeQuery ( $F38 ) ; $F7683 ( assertFalse , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F24630 ( rs ) if ( config . mvStore ) { assertContains ( rs . getString ( NUM00 ) , NUM00 ) ; } stat . executeQuery ( NUM00 + NUM00 ) ; stat . executeQuery ( NUM00 + NUM00 ) ; rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F7683 ( assertTrue , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F7683 ( assertTrue , rs ) rs = stat . executeQuery ( NUM00 + NUM00 ) ; $F7683 ( assertFalse , rs ) $F131050 ( stat ) $F59 ( conn ) deleteDb ( NUM00 ) ; }
public static boolean isValid ( Date expirationDate ) { $F6357 ( currentDate ) $F94422 ( formattedDate , dateFormat , currentDate ) currentDate = convertDate ( formattedDate ) ; boolean isExpired = currentDate . after ( expirationDate ) ; $F20729 ( isEqual , currentDate , expirationDate ) if ( isExpired == _BOOL || isEqual == _BOOL ) { return _BOOL ; } return _BOOL ; }
public long contentLength $F72 { long size ; try { size = Long . parseLong ( request . getHeader ( FileUpload . CONTENT_LENGTH ) ) ; } catch ( NumberFormatException e ) { size = request . getContentLength ( ) ; } return size ; }
$F108235 ( f , first , n , item , last , count , notFull )
public void testZeroPos $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
public CheckBox addListener ( Listener listener ) { if $F122854 ( listener , listeners ) $F207 ( listeners , listener ) return this ; }
$F1431 public $F131 toArray $F72 { $F677 ( lock , this ) $F790 ( lock ) try { $F133 ( a , count ) int k = NUM00 ; for ( $F13430 p = first ; p != null ; p = p . next ) a [ k ++ ] = p . item ; return a ; } $F796 ( lock ) }
private void takePicture $F72 { $F13527 ( Log , TAG ) lockFocus ( ) ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private static $F26352 parse ( String members ) { $F6518 ( theRanges ) $F63276 ( n , members ) int i = NUM00 ; int state = NUM00 ; int lb = NUM00 ; int ub = NUM00 ; char c ; int digit ; while ( i < n ) { $F47698 ( c , members , i ) switch ( state ) { $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { lb = digit ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { lb = NUM00 * lb + digit ; state = NUM00 ; } else if $F37111 ( c ) { state = NUM00 ; } else if ( c == NUM00 ) { accumulate ( theRanges , lb , lb ) ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if $F37111 ( c ) { state = NUM00 ; } else if ( c == NUM00 ) { accumulate ( theRanges , lb , lb ) ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { ub = digit ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { ub = NUM00 * ub + digit ; state = NUM00 ; } else if ( c == NUM00 ) { accumulate ( theRanges , lb , ub ) ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( c == NUM00 ) { accumulate ( theRanges , lb , ub ) ; state = NUM00 ; } else $F26853 $F597 $F3366 if $F104645 ( Character , c ) { state = NUM00 ; } else if ( ( digit = Character . digit ( c , NUM00 ) ) != - NUM00 ) { lb = digit ; state = NUM00 ; } else $F26853 $F597 } } switch ( state ) { $F56826 $F3366 $F3366 accumulate ( theRanges , lb , lb ) ; $F597 $F3366 $F3366 accumulate ( theRanges , lb , ub ) ; $F597 $F3366 $F3366 $F10056 } return canonicalArrayForm ( theRanges ) ; }
public static String showDialog ( final Component component , final String title , final Object message , final String ... buttons ) { return showDialog ( JOptionPane . getFrameForComponent ( component ) , title , message , JOptionPane . PLAIN_MESSAGE , buttons ) ; }
public static void encode ( InputStream in , Writer out ) throws IOException { int column = NUM00 ; while ( _BOOL ) { $F7468 ( byte1 , in ) $F7468 ( byte2 , in ) $F7468 ( byte3 , in ) $F44858 ( byte1 ) if ( column >= NUM00 ) { column = NUM00 ; $F3410 ( out ) } out . write ( charset [ byte1 > > NUM00 ] ) ; int index = ( byte1 & NUM00 ) < < NUM00 ; if ( byte2 < NUM00 ) { out . write ( charset [ index ] ) ; out . write ( paddingChar ) ; out . write ( paddingChar ) ; $F665 } index += byte2 > > NUM00 ; out . write ( charset [ index ] ) ; $F3252 ( index , byte2 ) if ( byte3 < NUM00 ) { out . write ( charset [ index ] ) ; out . write ( paddingChar ) ; $F665 } index += byte3 > > NUM00 ; out . write ( charset [ index ] ) ; $F56823 ( out , charset , byte3 ) column += NUM00 ; } }
public static String canonicalID ( String id ) { $F1747 ( id ) int st = NUM00 ; $F1749 ( len , id ) boolean substr = _BOOL ; int c ; while ( st < len && ( $F31375 ( c , id , st ) == NUM00 || c <= NUM00 ) ) { st ++ ; substr = _BOOL ; } while ( st < len && ( ( c = id . charAt ( len - NUM00 ) ) == NUM00 || c <= NUM00 ) ) { len -- ; substr = _BOOL ; } return substr ? id . substring ( st , len ) : id ; }
protected void sendMessage ( String handler , $F11654 arguments ) { ownerMessage . addEvent ( Type . CLIENT_SEND_MESSAGE , handler , arguments ) ; syncEvents . add ( new SharedObjectEvent ( Type . CLIENT_SEND_MESSAGE , handler , arguments ) ) ; $F5224 ( sendStats ) }
public void taskNow ( final Runnable r , boolean async ) { if ( async ) { async ( r ) ; } else $F21689 ( r ) }
public void reset $F72 { $F2268 ( cur ) $F2268 ( line ) inuse = _BOOL ; $F4910 ( word ) }
protected void engineSetMode ( String mode ) throws NoSuchAlgorithmException { if ( ( mode != null ) && $F14072 ( mode ) ) { throw new NoSuchAlgorithmException ( NUM00 + mode ) ; } }
$F25079 ( deltaY , mPtrIndicator , DEBUG , PtrCLog , LOG_TAG , String , to , PtrIndicator , change , updatePos )
public static $F15367 childElementList ( DocumentFragment fragment ) { $F1275 ( fragment ) $F15375 ( elements ) $F15376 ( node , fragment ) if ( node != null ) { do { if $F61358 ( node , Node ) $F15383 ( childElement , node , elements ) } while $F15388 ( node ) ; } return elements ; }
$F31353 ( method , thisVar , returnVar , subSignature , java_lang_reflect_Field_set , params , java_lang_reflect_Field_get , defaultMethod )
public FloatArray resize ( FloatArray array , long size ) { if ( array instanceof BigFloatArray ) { return resizeInPlace ( ( BigFloatArray ) array , size ) ; } else { AbstractArray arr = ( AbstractArray ) array ; final FloatArray newArray = newFloatArray ( size , arr . clearOnResize ) ; for ( long i = NUM00 , end = Math . min ( size , array . size ( ) ) ; i < end ; ++ i ) $F221909 ( newArray , i , array ) $F59 ( arr ) return newArray ; } }
$F1 public boolean domainMatch ( final String host , String domain ) { $F12418 ( host , domain , _BOOL ) $F48788 ( domain ) return host . endsWith ( domain ) || host . equals ( domain . substring ( NUM00 ) ) ; }
public boolean isDirty ( String key ) $F298 ( dirtyKeys , key )
final public void println ( float v ) { Writer out = this . out ; $F8249 ( out ) $F2544 ( s , String , v ) try { $F170077 ( out , s ) $F17918 ( out , _newline ) } $F53427 ( log , Level , e ) }
public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } $F62612 } return size ; }
public double logDensityForInstance ( Instance instance ) throws Exception { $F2291 ( a , logJointDensitiesForInstance , instance ) double max = a [ Utils . maxIndex ( a ) ] ; double sum = NUM00 ; for ( $F1139 ( i , a ) ) { sum += Math . exp ( a [ i ] - max ) ; } return max + Math . log ( sum ) ; }
public void testWhenComplete_sourceFailedActionFailed $F72 { for ( $F2703 ( createIncomplete , _BOOL ) ) for ( $F40424 ( m , ExecutionMode ) ) { $F127413 ( a ) $F181556 ( ex1 ) $F181556 ( ex2 ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex1 ) ; final $F70219 g = m . whenComplete ( f , null ) ; if ( createIncomplete ) f . completeExceptionally ( ex1 ) ; checkCompletedWithWrappedException ( g , ex1 ) ; checkCompletedExceptionally ( f , ex1 ) ; $F127421 ( assertEquals , a ) } }
public static Angle greatCircleDistance ( LatLon p1 , LatLon p2 ) { if $F54923 ( p1 , p2 ) $F825 $F3545 ( lat1 , p1 ) $F3549 ( lon1 , p1 ) $F3545 ( lat2 , p2 ) $F3549 ( lon2 , p2 ) if ( lat1 == lat2 && lon1 == lon2 ) return Angle . ZERO ; double a = Math . sin ( ( lat2 - lat1 ) / NUM00 ) ; double b = Math . sin ( ( lon2 - lon1 ) / NUM00 ) ; double c = a * a + + Math . cos ( lat1 ) * Math . cos ( lat2 ) * b * b ; double distanceRadians = NUM00 * Math . asin ( Math . sqrt ( c ) ) ; return Double . isNaN ( distanceRadians ) ? Angle . ZERO : Angle . fromRadians ( distanceRadians ) ; }
public int indexOf ( $F9738 ( subString ) , int start ) { $F17370 ( start ) int subCount = subString . count ; int _count = count ; if ( subCount > NUM00 ) { if ( subCount + start > _count ) $F7629 $F1469 target = subString . value ; int subOffset = subString . offset ; char firstChar = target [ subOffset ] ; int end = subOffset + subCount ; while ( _BOOL ) { int i = indexOf ( firstChar , start ) ; if ( i == - NUM00 || subCount + i > _count ) $F7629 int o1 = offset + i , o2 = subOffset ; $F1469 _value = value ; while ( ++ o2 < end && _value [ ++ o1 ] == target [ o2 ] ) $F845 $F3627 ( o2 , end , i ) start = i + NUM00 ; } } return start < _count ? start : _count ; }
$F1 public Query rewrite ( IndexReader reader ) throws IOException { if $F9634 ( disjuncts ) $F3262 ( disjuncts ) boolean actuallyRewritten = _BOOL ; List < Query > $F204 ( rewrittenDisjuncts ) ; for ( Query sub : disjuncts ) { Query rewrittenSub = sub . rewrite ( reader ) ; actuallyRewritten |= rewrittenSub != sub ; rewrittenDisjuncts . add ( rewrittenSub ) ; } if ( actuallyRewritten ) { return new DisjunctionMaxQuery ( rewrittenDisjuncts , tieBreakerMultiplier ) ; } return super . rewrite ( reader ) ; }
public static String valueOf ( long value ) $F23210 ( Long , value )
public static $F4203 boolean areSetsIdentical ( final $F28904 set1 , final $F28904 set2 ) { if ( set1 == set2 ) return _BOOL ; if ( CollectionUtil . size ( set1 ) != CollectionUtil . size ( set2 ) ) return _BOOL ; if $F4329 ( CollectionUtil , set1 ) return _BOOL ; for ( final T t : set1 ) if $F2200 ( set2 , t ) return _BOOL ; return _BOOL ; }
$F1 public int compareTo ( Value o ) { $F93077 ( hashCode , o ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private static void addOptions ( $F20109 ( cmd ) , Map < CheckerProp , Object > props ) { for ( $F40424 ( cp , CheckerProp ) ) { cmd . addAll ( cp . getCmdLine ( props ) ) ; } }
public boolean obsolete $F72 { $F11844 ( stamp ) boolean undeployed = usage . get ( stamp ) ; return undeployed && stamp [ NUM00 ] == NUM00 ; }
$F10188 ( close , Util , directory )
boolean popNamespace ( String prefix ) { $F72106 ( prefix , XML_PREFIX , _BOOL ) Stack stack ; if $F2108 ( stack , getPrefixStack , prefix ) { $F34454 ( stack ) return _BOOL ; } return _BOOL ; }
public void redoLastAction $F72 { try { if ( undoManager . canRedo ( ) ) undoManager . redo ( ) ; } catch ( CannotRedoException cre ) $F302 ( cre ) }
protected void continueWrite $F72 { $F35060 ( log ) Iterator < VariableValue > i = variables . iterator ( ) ; while $F2921 ( i ) { VariableValue v = i . next ( ) ; if ( v . isToWrite ( ) && ( ! writingChanges || v . isChanged ( ) ) ) { amWriting = _BOOL ; setBusy ( _BOOL ) ; log . debug ( NUM00 + v . label ( ) + NUM00 + writingChanges ) ; if ( writingChanges ) { v . writeChanges ( ) ; } else { v . writeAll ( ) ; } $F980 ( log ) $F665 } } amWriting = _BOOL ; super . setState ( STORED ) ; setBusy ( _BOOL ) ; $F980 ( log ) }
private void startGame ( GameLaunchMessage gameLaunchMessage , Faction faction , RatingMode ratingMode , Integer localRelayPort ) { if ( isRunning ( ) ) $F100849 ( logger ) stopSearchRanked1v1 ( ) ; $F3803 args = fixMalformedArgs ( gameLaunchMessage . getArgs ( ) ) ; try { localRelayServer . getPort ( ) ; process = forgedAllianceService . startGame ( gameLaunchMessage . getUid ( ) , gameLaunchMessage . getMod ( ) , faction , args , ratingMode , localRelayPort , rehostRequested ) ; setGameRunning ( _BOOL ) ; this . ratingMode = ratingMode ; spawnTerminationListener ( process ) ; } catch ( IOException e ) { $F18942 ( logger , e ) notificationService . addNotification ( new ImmediateNotification ( i18n . get ( NUM00 ) , i18n . get ( NUM00 ) , Severity . ERROR , e , Arrays . asList ( new ReportAction ( i18n , reportingService , e ) , new DismissAction ( i18n ) ) ) ) ; } }
public void addLine ( String line ) { $F129840 ( index , line ) if ( index != - NUM00 ) { addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; } else if $F3106 ( line ) { addLenient ( NUM00 , line . substring ( NUM00 ) ) ; } else $F1941 ( addLenient , line ) }
private synchronized void addEntries ( Hashtable entries ) $F96492 ( entryDirectory , entries )
$F100301 ( RequestMethod ) $F4586 public RestWrapper updateOneRecord ( $F100302 $F100303 GeneralConfig generalConfig , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; $F100315 ( bindingResult , bindingResultError ) try { if ( generalConfig . getRequired ( ) <= NUM00 ) { com . wipro . ats . bdre . md . dao . jpa . GeneralConfig jpaGeneralConfigUpdate = new com . wipro . ats . bdre . md . dao . jpa . GeneralConfig $F72 ; GeneralConfigId jpaGeneralConfigId = new GeneralConfigId $F72 ; jpaGeneralConfigId . setConfigGroup ( generalConfig . getConfigGroup ( ) ) ; jpaGeneralConfigId . setGcKey ( generalConfig . getKey ( ) ) ; jpaGeneralConfigUpdate . setId ( jpaGeneralConfigId ) ; jpaGeneralConfigUpdate . setDefaultVal ( generalConfig . getDefaultVal ( ) ) ; $F100328 ( jpaGeneralConfigUpdate , generalConfig ) jpaGeneralConfigUpdate . setEnabled ( generalConfig . isEnabled ( ) ) ; jpaGeneralConfigUpdate . setGcValue ( generalConfig . getValue ( ) ) ; if ( generalConfig . getRequired ( ) == NUM00 ) jpaGeneralConfigUpdate . setRequired ( _BOOL ) ; else jpaGeneralConfigUpdate . setRequired ( _BOOL ) ; jpaGeneralConfigUpdate . setType ( generalConfig . getType ( ) ) ; LOGGER . info ( generalConfig ) ; generalConfigDAO . update ( jpaGeneralConfigUpdate ) ; $F4608 ( restWrapper , generalConfig , RestWrapper ) LOGGER . info ( NUM00 + jpaGeneralConfigId . getGcKey ( ) + NUM00 + jpaGeneralConfigId . getConfigGroup ( ) + NUM00 + principal . getName ( ) ) ; } else { $F9464 ( LOGGER ) restWrapper = new RestWrapper ( NUM00 , RestWrapper . ERROR ) ; } } $F100376 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
public static void loadProject ( final JTree tree , final INaviProject project ) { $F1832 ( Preconditions , tree ) $F1832 ( Preconditions , project ) loadProjectThreaded ( SwingUtilities . getWindowAncestor ( tree ) , project , tree ) ; }
public Enumeration listOptions $F72 { $F153203 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public static DataPolicy fromOrdinal ( byte ordinal ) $F269670 ( VALUES , ordinal )
public static boolean isInstalled ( PackageManager packageManager , String packageName ) { List < PackageInfo > packs = packageManager . getInstalledPackages ( NUM00 ) ; for ( $F2277 ( i , packs ) ) { if ( TextUtils . equals ( packs . get ( i ) . packageName , packageName ) ) return _BOOL ; } return _BOOL ; }
public void addSetAttribute ( final SetAttribute setAttribute ) $F207 ( setAttributes , setAttribute )
static String applyTemplate ( final String template , $F87266 ( map ) ) { configuration = getConfiguration ( ) ; try ( ByteArrayOutputStream outputStream = $F1535 ; Writer writer = new OutputStreamWriter ( outputStream ) ) { Template configurationTemplate = configuration . getTemplate ( template ) ; configurationTemplate . process ( map , writer ) ; $F92 ( outputStream ) } $F51077 ( e ) }
final void putShort ( int offset , short value ) { unsafe . putShort ( offset + address , value ) ; }
public static Clob toClob ( Object value ) throws PageException { if ( value instanceof Clob ) return ( Clob ) value ; else if ( value instanceof $F1469 ) return toClob ( new String ( $F114168 ( value ) ) ) ; else if ( value instanceof Reader ) { $F29429 ( sw ) try { IOUtil . copy ( ( Reader ) value , sw , _BOOL , _BOOL ) ; } catch ( IOException e ) { throw ExpressionException . newInstance ( e ) ; } $F17718 ( toClob , sw ) } return toClob ( Caster . toString ( value ) ) ; }
private JFreeChart createHistogramChart ( ExampleSet exampleSet ) { JFreeChart chart = ChartFactory . createHistogram ( null , null , null , createHistogramDataset ( exampleSet ) , PlotOrientation . VERTICAL , _BOOL , _BOOL , _BOOL ) ; AbstractAttributeStatisticsModel . setDefaultChartFonts ( chart ) ; chart . setBackgroundPaint ( null ) ; chart . setBackgroundImageAlpha ( NUM00 ) ; XYPlot plot = ( XYPlot ) chart . getPlot ( ) ; plot . setRangeGridlinesVisible ( _BOOL ) ; plot . setDomainGridlinesVisible ( _BOOL ) ; plot . setOutlineVisible ( _BOOL ) ; plot . setRangeZeroBaselineVisible ( _BOOL ) ; plot . setDomainZeroBaselineVisible ( _BOOL ) ; plot . setBackgroundPaint ( COLOR_INVISIBLE ) ; plot . setBackgroundImageAlpha ( NUM00 ) ; XYBarRenderer renderer = ( XYBarRenderer ) plot . getRenderer ( ) ; renderer . setSeriesPaint ( NUM00 , AttributeGuiTools . getColorForValueType ( Ontology . NUMERICAL ) ) ; renderer . setBarPainter ( new StandardXYBarPainter $F72 ) ; renderer . setDrawBarOutline ( _BOOL ) ; renderer . setShadowVisible ( _BOOL ) ; return chart ; }
$F17124 save $F72 { ListBuffer $F12993 $F53349 ( buf ) ; for ( Type t : undetvars ) { UndetVar uv = ( UndetVar ) t ; UndetVar uv2 = new UndetVar ( ( TypeVar ) uv . qtype , types ) ; for ( $F40424 ( ib , InferenceBound ) ) { for ( Type b : uv . getBounds ( ib ) ) { uv2 . addBound ( ib , b , types ) ; } } uv2 . inst = uv . inst ; buf . add ( uv2 ) ; } return buf . toList ( ) ; }
public int executeProcess $F72 { $F73562 ( processStrings , tokenizeString , execCommand ) $F42501 ( processStrings , tokenizeString , script ) $F102990 ( logger , MessageFormat , processStrings ) final ProcessBuilder processBuilder = new ProcessBuilder ( processStrings ) ; if ( workingDirectory != null ) { final Path dir = Paths . get ( workingDirectory ) ; if ( Files . notExists ( dir ) ) { try { Files . createDirectories ( dir ) ; } catch ( IOException e ) { $F37855 ( logger , workingDirectory ) $F150 } } else if ( ! Files . isDirectory ( dir ) ) { logger . warning ( workingDirectory + NUM00 ) ; $F150 } final File directory = dir . toFile ( ) ; processBuilder . directory ( directory ) ; } processBuilder . redirectErrorStream ( _BOOL ) ; Integer exitValue ; try { $F973 ( logger ) final Process process = processBuilder . start ( ) ; sendInputStringToProcess ( process ) ; handleProcessOutput ( process ) ; try { exitValue = process . waitFor ( ) ; } catch ( InterruptedException e ) { $F18143 ( logger ) $F17623 ( process ) exitValue = - NUM00 ; } $F9472 ( logger , exitValue ) } catch ( IOException e ) { logger . log ( SEVERE , NUM00 , e . getCause ( ) ) ; exitValue = - NUM00 ; } return exitValue ; }
$F20329 ( desc , start , checkDesc , _BOOL )
protected Rectangle applyMargins ( Rectangle rect , $F5415 margins , boolean reverse ) { if ( isPositioned ( ) ) return rect ; return rect . < Rectangle > applyMargins ( margins [ NUM00 ] , margins [ NUM00 ] , margins [ NUM00 ] , margins [ NUM00 ] , reverse ) ; }
private void resetAttempts $F72 { for ( final PoliticalActionAttachment paa : PoliticalActionAttachment . getPoliticalActionAttachments ( m_player ) ) { paa . resetAttempts ( getBridge ( ) ) ; } }
public static Number minus ( Character left , Character right ) $F209729 ( minus , Integer , left , right )
public void findAndInit ( Object someObj ) { if ( someObj instanceof MouseDelegator ) { $F36253 ( Debug ) setMouseDelegator ( ( MouseDelegator ) someObj ) ; } }
public static int toInt ( final String value ) $F75349 ( Integer , value )
protected Object evaluateLeftLessRight ( List elements , String lvalue , String rvalue ) { List array ; if ( elements instanceof $F11420 ) { array = new $F11420 $F72 ; } else $F13242 ( array ) for ( $F2774 ( e , elements ) ) { $F8877 ( o , e ) if ( o instanceof StructuredContent ) { if ( ( o = evaluateLeftLessRight ( ( StructuredContent ) o , lvalue , rvalue ) ) != null ) $F207 ( array , o ) } } if $F10471 ( array ) { return ( StructuredContent ) array . get ( NUM00 ) ; } return array ; }
static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { int mask = NUM00 ; switch $F14870 ( typeRef ) { case TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; $F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; $F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; $F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; $F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; } if ( ( typeRef & ~ mask ) != NUM00 ) { throw new IllegalArgumentException $F184522 ( Integer , typeRef ) ; } if ( typePath != null ) { for ( $F184528 ( i , typePath ) ) { int step = typePath . getStep ( i ) ; if ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } } }
public void removeCatchable ( CatchablePokemon pokemon ) { if $F3817 ( cachedCatchable ) $F106 ( cachedCatchable , pokemon ) }
$F1431 $F1 protected void fillBuffer $F72 { int oldP = p ; $F2199 ( index , tokens ) Token t = tokenSource . nextToken ( ) ; while ( t != null && t . getType ( ) != CharStream . EOF ) { $F20997 ( type , t ) if ( type == InternalN4JSLexer . Solidus || type == InternalN4JSLexer . SolidusEqualsSign || type == InternalN4JSLexer . RightCurlyBracket ) { t . setTokenIndex ( index ) ; tokens . add ( t ) ; index ++ ; $F597 } boolean discard = _BOOL ; if ( channelOverrideMap != null ) { Integer channelI = ( Integer ) $F126975 ( channelOverrideMap , Integer , type ) ; if ( channelI != null ) { t . setChannel ( channelI . intValue ( ) ) ; } } if ( discardSet != null && discardSet . contains ( Integer . valueOf ( type ) ) ) { discard = _BOOL ; } else if ( discardOffChannelTokens && t . getChannel ( ) != this . channel ) { discard = _BOOL ; } if ( ! discard ) { t . setTokenIndex ( index ) ; tokens . add ( t ) ; index ++ ; } $F39710 ( t , tokenSource ) } p = oldP == - NUM00 ? NUM00 : oldP ; p = skipOffTokenChannels ( p ) ; }
char caseFold ( char c ) { if ( alternateCasing ) { if ( c == NUM00 ) $F2455 else if ( c == NUM00 ) $F2455 else { return Character . toLowerCase ( c ) ; } } else { return Character . toLowerCase ( c ) ; } }
public void writeCountsComparisonList $F2236 ( filename , format ) { if ( format . compareToIgnoreCase ( NUM00 ) == NUM00 ) { CountSimComparisonKMLWriter kmlWriter = new CountSimComparisonKMLWriter ( countsComparisonList , this . network , TransformationFactory . getCoordinateTransformation ( this . coordinateSystem , TransformationFactory . WGS84 ) ) ; kmlWriter . writeFile ( filename ) ; } else if ( format . compareToIgnoreCase ( NUM00 ) == NUM00 ) { CountSimComparisonTableWriter writer = new CountSimComparisonTableWriter ( countsComparisonList , Locale . US ) ; writer . writeFile ( filename ) ; } else $F825 ComparisonErrorStatsCalculator errorStats = new ComparisonErrorStatsCalculator ( countsComparisonList ) ; $F1993 ( hours ) for ( $F6268 ( i ) ) { hours [ i - NUM00 ] = i ; } DoubleArrayTableWriter tableWriter = new DoubleArrayTableWriter $F72 ; tableWriter . addColumn ( hours ) ; tableWriter . addColumn ( errorStats . getMeanRelError ( ) ) ; tableWriter . writeFile ( filename + NUM00 ) ; }
public void testSubtractMathContextDiffScalePosNeg $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; String c = NUM00 ; int cScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) MathContext mc = new MathContext ( NUM00 , RoundingMode . DOWN ) ; BigDecimal result = aNumber . subtract ( bNumber , mc ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
public void putGrammar ( DTDGrammar grammar ) { XMLDTDDescription desc = ( XMLDTDDescription ) grammar . getGrammarDescription ( ) ; fGrammars . put ( desc , grammar ) ; }
public ServiceCall < TranslationResult > translate ( final String text , final Language source , final Language target ) { return translate ( Collections . singletonList ( text ) , source , target ) ; }
$F1 public int execute ( final FormObject form , final int type , final String code , final int eventType , final char keyPressed ) { int messageCode ; final String js = code ; final $F806 args = JSFunction . convertToArray ( js ) ; $F244765 ( command , args ) if $F3106 ( command ) { messageCode = handleAFCommands ( form , command , js , args , eventType , keyPressed ) ; } else { executeFunctions ( js , form , acro ) ; messageCode = ActionHandler . VALUESCHANGED ; } if ( type == PdfDictionary . F ) { calcualteEvent ( ) ; messageCode = ActionHandler . VALUESCHANGED ; } return messageCode ; }
private Object readResolve $F72 { synchronized ( levels ) { for ( Level level : levels ) { if ( value != level . value ) $F1448 if $F45204 ( name , level ) $F1448 if ( Objects . equal ( resourceBundleName , level . resourceBundleName ) ) { return level ; } } levels . add ( this ) ; return this ; } }
private static void repeat ( String pattern , int count , Appendable out ) throws IOException { while $F11984 ( count , pattern ) { out . append ( pattern ) ; count -= pattern . length ( ) ; } if ( count > NUM00 ) { $F58551 ( out , pattern , count ) } }
private void cleanUp ( Reference $F1011 reference ) throws ShutDown { Method finalizeReferentMethod = getFinalizeReferentMethod ( ) ; do { $F725 ( reference ) if ( reference == frqReference ) { throw new ShutDown $F72 ; } try $F173188 ( finalizeReferentMethod , reference ) catch ( Throwable t ) $F55754 ( logger , Level , t ) } while $F22655 ( reference , queue ) ; }
$F32357 ( Class , _BOOL )
public $F147000 Queue . Item run2 ( $F2304 String replacementMainScript , $F2304 $F2539 replacementLoadedScripts ) { List < Action > actions = new ArrayList < Action > $F72 ; CpsFlowExecution execution = getExecution ( ) ; $F1338 ( execution ) actions . add ( new ReplayFlowFactoryAction ( replacementMainScript , replacementLoadedScripts , execution . isSandbox ( ) ) ) ; actions . add ( new CauseAction ( new Cause . UserIdCause $F72 , new ReplayCause ( run ) ) ) ; for ( Class < ? extends Action > c : COPIED_ACTIONS ) { actions . addAll ( run . getActions ( c ) ) ; } return ParameterizedJobMixIn . scheduleBuild2 ( run . getParent ( ) , NUM00 , actions . toArray ( new Action $F2313 ( actions ) ) ) ; }
public static SecretKeys keys ( String keysStr ) throws InvalidKeyException { $F6542 ( keysArr , keysStr ) if $F11845 ( keysArr ) $F825 else { $F134490 ( confidentialityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( confidentialityKey , AES_KEY_LENGTH_BITS ) $F134490 ( integrityKey , Base64 , keysArr , BASE64_FLAGS ) $F134496 ( integrityKey , HMAC_KEY_LENGTH_BITS ) SecretKeys secretKeys = new SecretKeys $F72 ; SecretKeySpec secretKeySpec = new SecretKeySpec $F72 ; secretKeySpec . generate ( confidentialityKey , NUM00 , confidentialityKey . length , CIPHER ) ; SecretKeySpec secretKeySpec1 = new SecretKeySpec $F72 ; secretKeySpec1 . generate ( integrityKey , HMAC_ALGORITHM ) ; secretKeys . setConfidentialityKey ( secretKeySpec ) ; secretKeys . setIntegrityKey ( secretKeySpec1 ) ; return secretKeys ; } }
public Path [ ] chooseStartingPaths ( final int nedges , final Path [ ] paths ) { final $F77502 tmp = new LinkedList $F72371 $F72 ; Arrays . sort ( paths , NUM00 , paths . length , EstimatedCardinalityComparator . INSTANCE ) ; for ( int i = NUM00 ; i < paths . length && i < nedges ; i ++ ) $F24617 ( tmp , paths , i ) return tmp . toArray ( new Path $F2313 ( tmp ) ) ; }
private void safeBottomView $F72 { Status status = getOpenStatus ( ) ; ViewGroup bottom = getBottomView ( ) ; if ( status == Status . Close ) $F141296 ( bottom , INVISIBLE ) else $F141296 ( bottom , VISIBLE ) }
public static int uniform ( int n ) { if ( n <= NUM00 ) $F824 return random . nextInt ( n ) ; }
private void viewDelta ( final Item item ) { final DeltaFragment fragment = DeltaFragment . newInstance ( item ) ; navigateToFragment ( fragment ) ; }
public Message ( String type , double value ) { if $F2200 ( VALID_TYPES , type ) { throw new IllegalArgumentException ( type + NUM00 + NUM00 ) ; } this . type = type ; this . value = value ; }
public void addAll ( final CasualtyList casualtyList ) { m_damaged . addAll ( casualtyList . getDamaged ( ) ) ; m_killed . addAll ( casualtyList . getKilled ( ) ) ; }
public static String importResultSet ( ResultSet source , Database db , String name , ImportFilter filter , boolean useExistingTable ) throws SQLException , IOException { $F19097 ( md , source ) name = TableBuilder . escapeIdentifier ( name ) ; Table table = null ; if ( ! useExistingTable || ( ( table = db . getTable ( name ) ) == null ) ) { List < ColumnBuilder > columns = toColumns ( md ) ; table = createUniqueTable ( db , name , columns , md , filter ) ; } $F60674 rows = new ArrayList $F60673 ( COPY_TABLE_BATCH_SIZE ) ; $F16742 ( numColumns , md ) while $F1682 ( source ) { $F133 ( row , numColumns ) for ( $F1139 ( i , row ) ) { row [ i ] = source . getObject ( i + NUM00 ) ; } row = filter . filterRow ( row ) ; $F4322 ( row ) rows . add ( row ) ; if $F36323 ( rows , COPY_TABLE_BATCH_SIZE ) { table . addRows ( rows ) ; $F725 ( rows ) } } if $F3817 ( rows ) { table . addRows ( rows ) ; } return table . getName ( ) ; }
$F1 public long skip ( long n ) throws IOException { long remaining = n ; final $F1469 ch = new char [ fBuffer . length ] ; do { int length = ch . length < remaining ? ch . length : ( int ) remaining ; int count = read ( ch , NUM00 , length ) ; if ( count > NUM00 ) { remaining -= count ; } else $F5153 } while ( remaining > NUM00 ) ; long skipped = n - remaining ; return skipped ; }
public static $F2469 hashToLongs ( double datum , long seed ) { double d = $F176019 ( datum ) ; $F2469 data = { Double . doubleToLongBits ( d ) } ; return hash ( data , seed ) ; }
private boolean allowUploadCrashDump $F72 { if ( isCellularExperimentEnabled ( ) ) return isUsageAndCrashReportingEnabled ( ) ; if ( isMobileNetworkCapable ( ) ) { String option = mSharedPreferences . getString ( PREF_CRASH_DUMP_UPLOAD , mCrashDumpNeverUpload ) ; return option . equals ( mCrashDumpAlwaysUpload ) || ( option . equals ( mCrashDumpWifiOnlyUpload ) && isWiFiOrEthernetNetwork ( ) ) ; } return mSharedPreferences . getBoolean ( PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR , _BOOL ) ; }
private $F2027 joinMap $F22564 ( a , b ) { $F1933 ( a , b ) $F1933 ( b , a ) $F2027 result = new int $F12348 ( a , b ) ; $F7057 ( System , a , result ) $F11244 ( System , b , result , a ) return result ; }
private void readObject ( ObjectInputStream in ) throws $F125668 { $F6428 ( in ) $F18058 ( iter , col ) }
public LabelSet ( int indices [ ] , boolean sort ) { this . indices = indices ; if ( sort == _BOOL ) Arrays . sort ( this . indices ) ; }
public void diffEquals $F72 { $F69807 ( col ) for ( $F1139 ( i , A ) ) { col = new double [ A [ i ] . length - NUM00 ] ; for ( $F179379 ( j , A , i ) ) col [ j - NUM00 ] = Math . abs ( A [ i ] [ j ] - A [ i ] [ j - NUM00 ] ) ; A [ i ] = col ; } n -- ; }
private static void printStackTraceElement ( StackTraceElement trace , PrintWriter out , ClassLoader loader ) { try { LineMap map = getScriptLineMap ( trace . getClassName ( ) , loader ) ; if ( map != null ) { LineMap . Line line = map . getLine ( trace . getLineNumber ( ) ) ; if ( line != null ) { out . print ( trace . getClassName ( ) + NUM00 + trace . getMethodName ( ) ) ; out . print ( NUM00 + line . getSourceFilename ( ) + NUM00 ) ; out . println ( line . getSourceLine ( trace . getLineNumber ( ) ) + NUM00 ) ; $F665 } } } $F115820 out . println ( trace ) ; }
$F196938 ( textCompactionData , byteCompactionData , length , result , subMode , Mode , priorToShiftMode , i , subModeCh , ch , ALPHA , LL , ML , PS , MODE_SHIFT_TO_BYTE_COMPACTION_MODE , TEXT_COMPACTION_MODE_LATCH , LOWER , AS , MIXED , PL , MIXED_CHARS , AL , PUNCT , PAL , PUNCT_CHARS , ALPHA_SHIFT , PUNCT_SHIFT )
public void readInformationObject ( final PdfObject infoObj , final ObjectDecoder objectDecoder ) { try { objectDecoder . checkResolved ( infoObj ) ; } catch ( final Exception e ) $F65913 ( LogWriter , e ) String newValue ; int id ; $F96 data ; final int count = PdfFileInformation . information_field_IDs . length ; for ( $F119 ( i , count ) ) { id = PdfFileInformation . information_field_IDs [ i ] ; if ( id == PdfDictionary . Trapped ) { newValue = infoObj . getName ( id ) ; $F23170 ( newValue ) } else { data = infoObj . getTextStreamValueAsByte ( id ) ; if ( data == null ) { newValue = NUM00 ; } else { newValue = StringUtils . getTextString ( data , _BOOL ) ; } } setFieldValue ( i , newValue ) ; } }
private void cmd_calculateDifference $F72 { BigDecimal previousValue , actualValue ; Timestamp today = TimeUtil . getDay ( System . currentTimeMillis ( ) ) ; MCash cash = MCash . get ( p_pos . getCtx ( ) , p_pos . getC_CashBook_ID ( ) , today , null ) ; v_previousBalance . setValue ( cash . getEndingBalance ( ) ) ; previousValue = cash . getEndingBalance ( ) ; actualValue = ( BigDecimal ) v_ActualBalance . getValue ( ) ; v_difference . setValue ( actualValue . subtract ( previousValue ) ) ; }
public boolean testAllocation $F72 { boolean change = _BOOL ; if ( isProcessed ( ) ) { BigDecimal alloc = getAllocatedAmt ( ) ; $F307246 ( alloc , Env ) BigDecimal total = getGrandTotal ( ) ; if $F931 ( isSOTrx ) $F201387 ( total ) if ( isCreditMemo ( ) ) $F201387 ( total ) boolean test = total . compareTo ( alloc ) == NUM00 ; change = test != isPaid ( ) ; if ( change ) setIsPaid ( test ) ; log . fine ( NUM00 + test + NUM00 + alloc + NUM00 + total + NUM00 ) ; } return change ; }
private void requestForUpload ( OCFile file ) { FileUploader . UploadRequester requester = new FileUploader . UploadRequester $F72 ; requester . uploadUpdate ( mContext , mAccount , file , FileUploader . LOCAL_BEHAVIOUR_MOVE , _BOOL ) ; mTransferWasRequested = _BOOL ; }
protected void decodeImageData $F72 { int NullCode = - NUM00 ; int npix = iw * ih ; int available , clear , code_mask , code_size , end_of_information , in_code , old_code , bits , code , count , i , datum , data_size , first , top , bi , pi ; if ( ( pixels == null ) || ( pixels . length < npix ) ) $F75474 ( pixels , npix ) if ( prefix == null ) $F69027 ( prefix , MaxStackSize ) if ( suffix == null ) $F1325 ( suffix , MaxStackSize ) if ( pixelStack == null ) $F83281 ( pixelStack , MaxStackSize ) ; data_size = read ( ) ; clear = NUM00 < < data_size ; end_of_information = clear + NUM00 ; available = clear + NUM00 ; old_code = NullCode ; code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; for ( code = NUM00 ; code < clear ; code ++ ) { prefix [ code ] = NUM00 ; $F78924 ( suffix , code ) } datum = bits = count = first = top = pi = bi = NUM00 ; for ( i = NUM00 ; i < npix ; ) { if ( top == NUM00 ) { if ( bits < code_size ) { if ( count == NUM00 ) { count = readBlock ( ) ; $F137919 ( count ) bi = NUM00 ; } datum += ( ( ( int ) block [ bi ] ) & NUM00 ) < < bits ; bits += NUM00 ; bi ++ ; count -- ; $F598 } code = datum & code_mask ; datum >>= code_size ; bits -= code_size ; if ( ( code > available ) || ( code == end_of_information ) ) $F597 if ( code == clear ) { code_size = data_size + NUM00 ; $F143890 ( code_mask , code_size ) ; available = clear + NUM00 ; old_code = NullCode ; $F598 } if ( old_code == NullCode ) { pixelStack [ top ++ ] = suffix [ code ] ; old_code = code ; first = code ; $F598 } in_code = code ; if ( code == available ) { $F11740 ( pixelStack , top , first ) code = old_code ; } while ( code > clear ) { pixelStack [ top ++ ] = suffix [ code ] ; code = prefix [ code ] ; } first = ( ( int ) suffix [ code ] ) & NUM00 ; $F612 ( available , MaxStackSize ) $F11740 ( pixelStack , top , first ) prefix [ available ] = ( short ) old_code ; $F8214 ( suffix , available , first ) available ++ ; if ( $F84469 ( available , code_mask ) && ( available < MaxStackSize ) ) { code_size ++ ; code_mask += available ; } old_code = in_code ; } top -- ; pixels [ pi ++ ] = pixelStack [ top ] ; i ++ ; } for ( i = pi ; i < npix ; i ++ ) $F5629 ( pixels , i ) }
void refreshCustomMasterList $F72 { if $F6036 ( customMasterCountries ) { customMasterCountriesList = null ; } else { List < Country > $F204 ( localCountryList ) ; for ( $F55140 ( nameCode , customMasterCountries ) ) { Country country = Country . getCountryForNameCodeFromLibraryMasterList ( customLanguage , nameCode ) ; if ( country != null ) { if ( ! isAlreadyInList ( country , localCountryList ) ) $F207 ( localCountryList , country ) } } if $F10471 ( localCountryList ) { customMasterCountriesList = null ; } else { customMasterCountriesList = localCountryList ; } } if ( customMasterCountriesList != null ) { for ( Country country : customMasterCountriesList ) { country . log ( ) ; } } else $F845 }
protected boolean isDtoGetter ( Method method ) { if ( method . isAnnotationPresent ( DelegateTo . class ) ) { return _BOOL ; } $F20605 ( methodName , method ) if ( $F418 ( methodName ) && $F36180 ( method ) == NUM00 ) { if $F53956 ( methodName ) { return method . getReturnType ( ) == $F61970 || method . getReturnType ( ) == $F41254 ; } return $F20 ( methodName ) ; } return _BOOL ; }
protected void handleParseConversionException ( Exception e ) throws SAXException { if ( e instanceof RuntimeException ) $F219952 ( e ) ParseConversionEvent pce = new ParseConversionEventImpl ( ValidationEvent . ERROR , e . getMessage ( ) , new ValidationEventLocatorImpl ( context . getLocator ( ) ) , e ) ; context . handleEvent ( pce , _BOOL ) ; }
private static $F1469 yy_unpack_cmap ( String packed ) { $F11577 ( map ) int i = NUM00 ; int j = NUM00 ; while ( i < NUM00 ) { $F52835 ( count , packed , i ) $F52837 ( value , packed , i ) do map [ j ++ ] = value ; while ( -- count > NUM00 ) ; } return map ; }
public StatusBar ( boolean showMemory ) { $F9898 ( super ) add ( createInfoPanel ( ) , BorderLayout . WEST ) ; if ( showMemory ) { add ( createMemoryStatus ( ) , BorderLayout . CENTER ) ; JPanel iconPanel = new JPanel ( new BorderLayout $F72 ) ; iconPanel . add ( new JLabel ( new AngledLinesWindowsCornerIcon $F72 ) , BorderLayout . SOUTH ) ; add ( iconPanel , BorderLayout . EAST ) ; } else { setBackground ( Color . WHITE ) ; } }
public void execute ( final Runnable task ) { String name = metadata . get ( Metadata . RESOURCE_NAME_KEY ) ; if ( name != null ) $F21679 ( name ) else { name = NUM00 ; } final Thread thread = new Thread ( task , name ) ; thread . setDaemon ( _BOOL ) ; $F2346 ( thread ) }
static int stringSize ( String string ) { int size = NUM00 ; if ( string != null ) { size += HEADERS + NUM00 * NUM00 ; size += HEADERS + NUM00 * string . length ( ) ; } return size ; }
public static GraphRequest newPostOpenGraphObjectRequest ( AccessToken accessToken , JSONObject openGraphObject , Callback callback ) { if ( openGraphObject == null ) { throw new FacebookException $F580 ; } if ( Utility . isNullOrEmpty ( openGraphObject . optString ( NUM00 ) ) ) { throw new FacebookException $F580 ; } if ( Utility . isNullOrEmpty ( openGraphObject . optString ( NUM00 ) ) ) { throw new FacebookException $F580 ; } String path = String . format ( MY_OBJECTS_FORMAT , openGraphObject . optString ( NUM00 ) ) ; $F53033 ( bundle ) bundle . putString ( OBJECT_PARAM , openGraphObject . toString ( ) ) ; return new GraphRequest ( accessToken , path , bundle , HttpMethod . POST , callback ) ; }
public void addGraph ( Graph g ) $F207 ( graphs , g )
protected void addToQuarantineQueue ( NodePortTuple npt ) $F116364 ( quarantineQueue , npt , _BOOL )
private MrcMessage loadChars $F72 throws $F3258 { int nchars ; $F12496 ( rcvBuffer ) $F3261 ( nchars , inpipe , rcvBuffer ) MrcMessage msg = new MrcMessage ( nchars ) ; for ( $F119 ( i , nchars ) ) { msg . setElement ( i , rcvBuffer [ i ] & NUM00 ) ; } return msg ; }
$F1431 $F1 protected Money handleTransactionThatIsALateRepaymentOfInstallment ( final LoanRepaymentScheduleInstallment currentInstallment , final List < LoanRepaymentScheduleInstallment > installments , final LoanTransaction loanTransaction , final Money transactionAmountUnprocessed , List < LoanTransactionToRepaymentScheduleMapping > transactionMappings ) $F33971 ( handleTransactionThatIsOnTimePaymentOfInstallment , currentInstallment , loanTransaction , transactionAmountUnprocessed , transactionMappings )
protected void fireTupleEvent ( Table t , int start , int end , int type ) { if $F8841 ( m_tupleListeners ) { $F131 lstnrs = m_tupleListeners . getArray ( ) ; $F416167 tuples = new Tuple [ end - start + NUM00 ] ; for ( int i = NUM00 , r = start ; r <= end ; ++ r , ++ i ) { tuples [ i ] = t . getTuple ( r ) ; } for ( $F9808 ( i , lstnrs ) ) { TupleSetListener tsl = ( TupleSetListener ) lstnrs [ i ] ; if ( type == EventConstants . INSERT ) { tsl . tupleSetChanged ( this , tuples , EMPTY_ARRAY ) ; } else { tsl . tupleSetChanged ( this , EMPTY_ARRAY , tuples ) ; } } } }
public String buildQuery ( $F806 projectionIn , String selection , String groupBy , String having , String sortOrder , String limit ) { $F91090 ( projection , computeProjection , projectionIn ) $F83 ( where ) boolean hasBaseWhereClause = $F21 ( mWhereClause ) ; if ( hasBaseWhereClause ) { $F11659 ( where , mWhereClause ) $F84 ( where ) } if $F22 ( selection ) { $F12290 ( hasBaseWhereClause , where ) $F84 ( where ) where . append ( selection ) ; $F84 ( where ) } return buildQueryString ( mDistinct , mTables , projection , where . toString ( ) , groupBy , having , sortOrder , limit ) ; }
public static boolean isExceptionTime ( Calendar scheduleTime , ScheduleInfo scheduleInfo ) throws Exception { if ( scheduleInfo . getDateExceptions ( ) != null ) { for ( String dateException : scheduleInfo . getDateExceptions ( ) ) { DateFormat formatter = new SimpleDateFormat ( ScheduleInfo . FULL_DAYTIME_FORMAT ) ; Date date = formatter . parse ( scheduleInfo . getStartDate ( ) ) ; $F25274 ( exceptionTime , Calendar , TimeZone ) exceptionTime . setTime ( date ) ; if $F1238 ( exceptionTime , scheduleTime ) { $F279664 ( log , scheduleTime ) return _BOOL ; } } } return _BOOL ; }
protected void initPort $F72 { String portParam = getInitParameter ( NUM00 ) ; setPort ( ( portParam == null ) ? DEFAULT_PORT : Integer . parseInt ( portParam ) ) ; if ( isDebug ( ) ) { log ( NUM00 + getPort ( ) ) ; } }
public JPEGQTable $F23416 ( table ) { $F826 ( table ) $F231344 ( table ) $F42716 ( qTable , Arrays , table ) ; }
public VNXeNfsShare findSnapNfsShare $F1947 ( snapId , shareName , softwareVersion ) { StringBuilder queryFilter = new StringBuilder ( VNXeConstants . NAME_FILTER ) ; if ( ! VNXeUtils . isHigherVersion ( softwareVersion , VNXeConstants . VNXE_BASE_SOFT_VER ) ) { queryFilter . append ( shareName ) ; queryFilter . append ( VNXeConstants . AND ) ; queryFilter . append ( VNXeConstants . SNAP_FILTER ) ; queryFilter . append ( snapId ) ; } else { $F286 ( queryFilter , shareName ) queryFilter . append ( VNXeConstants . AND ) ; queryFilter . append ( VNXeConstants . SNAP_FILTER_V31 ) ; $F286 ( queryFilter , snapId ) } $F31458 ( setFilter , queryFilter ) VNXeNfsShare result = null ; List < VNXeNfsShare > shareList = getDataForObjects ( VNXeNfsShare . class ) ; if $F1032 ( shareList ) { $F36986 ( result , shareList ) $F21153 ( _logger , snapId , shareName ) } else $F146673 ( _logger , snapId , shareName ) return result ; }
$F1 public final int read $F72 throws IOException { ByteBuffer bb = waitForAvailableData ( ) ; return $F96314 ( bb ) ; }
protected TokenPosition ( TokenPosition other ) { Objects . requireNonNull ( other ) ; this . line = other . line ; this . column = other . column ; this . offset = other . offset ; }
private JComponent createDetailPanel ( Throwable error ) { StackTraceList stl = new StackTraceList ( error ) ; JScrollPane detailPane = new ExtendedJScrollPane ( stl ) ; detailPane . setPreferredSize ( new Dimension ( getWidth ( ) , NUM00 ) ) ; $F55355 ( detailPane ) return detailPane ; }
abstract boolean containsKey ( T container , String key ) ;
private JMXConnector connect ( String host , int port ) { try { if ( ! isNodeAvailable ( host ) ) { $F10635 ( log , host ) $F4638 } $F39971 ( log , host , port ) String connectorAddress = String . format ( serviceUrl , host , port ) ; JMXServiceURL jmxUrl = new JMXServiceURL ( connectorAddress ) ; return JMXConnectorFactory . connect ( jmxUrl ) ; } catch ( MalformedURLException e ) { log . error ( String . format ( NUM00 , host , port ) , e ) ; $F4638 } catch ( IOException e ) { log . error ( String . format ( NUM00 , host , port ) , e ) ; $F1154 ( host ) } }
public TagHandler processObjectValue ( Object value ) throws JspException { if ( value instanceof AttributeDefinition ) { return processTypedAttribute ( ( AttributeDefinition ) value ) ; } else if ( value instanceof ComponentDefinition ) { return processDefinition ( ( ComponentDefinition ) value ) ; } $F17718 ( processAsDefinitionOrURL , value ) }
public $F3807 emit ( String streamId , Tuple anchor , $F6689 tuple ) { return emit ( streamId , Arrays . asList ( anchor ) , tuple ) ; }
private synchronized void writeToOutputStream ( int oneByte ) { $F7254 ( mClosed ) try { mOutputStream . write ( oneByte ) ; reportDecodedSizeIfApplicable ( ) ; } $F52544 ( handleIOExceptionWritingToStream , e ) }
public int difference ( String s1 , String s2 ) throws EncoderException { return SoundexUtils . difference ( this , s1 , s2 ) ; }
public static Enumeration all $F72 $F10806 ( _all )
protected List < ModelEntity > makeEntityModelToUseList $F72 throws GenericEntityException { $F6261 entitySyncIncludes = entitySync . getRelated ( NUM00 , null , null , _BOOL ) ; $F6261 entitySyncGroupIncludes = entitySync . getRelated ( NUM00 , null , null , _BOOL ) ; entitySyncIncludes . addAll ( entitySyncGroupIncludes ) ; List < ModelEntity > entityModelToUseList = EntityGroupUtil . getModelEntitiesFromRecords ( entitySyncIncludes , delegator , _BOOL ) ; if $F206576 ( Debug ) Debug . logInfo ( $F28496 ( entitySync ) + NUM00 + entityModelToUseList . size ( ) + NUM00 , module ) ; return entityModelToUseList ; }
private static String lz ( int num ) $F23891 ( String , num )
public void onChildIdleBegin $F72 $F16878 ( _idleCount )
private StartupMode checkStartupMode ( Configuration config ) throws IOException { StartupMode bootMode = checkStartupModeOnDisk ( config ) ; $F21525 ( bootMode ) if ( checkConfigBool ( config , Constants . STARTUPMODE_RESTORE_REINIT ) ) { _log . info ( NUM00 , Constants . STARTUPMODE_RESTORE_REINIT ) ; GeodbRestoreMode mode = new GeodbRestoreMode ( config ) ; mode . setCoordinator ( _coordinator ) ; mode . setSchemaUtil ( _schemaUtil ) ; mode . setDbDir ( dbDir ) ; return mode ; } if ( checkConfigBool ( config , Constants . REINIT_DB ) ) { _log . info ( NUM00 , Constants . REINIT_DB ) ; DbReinitMode mode = new DbReinitMode ( config ) ; mode . setCoordinator ( _coordinator ) ; mode . setSchemaUtil ( _schemaUtil ) ; mode . setDbDir ( dbDir ) ; return mode ; } $F3803 obsoletePeers = checkConfigList ( config , Constants . OBSOLETE_CASSANDRA_PEERS ) ; if $F5973 ( obsoletePeers ) { ObsoletePeersCleanupMode mode = new ObsoletePeersCleanupMode ( config ) ; mode . setCoordinator ( _coordinator ) ; mode . setSchemaUtil ( _schemaUtil ) ; mode . setObsoletePeers ( obsoletePeers ) ; return mode ; } else { NormalMode mode = new NormalMode ( config ) ; mode . setCoordinator ( _coordinator ) ; mode . setSchemaUtil ( _schemaUtil ) ; return mode ; } }
private void writeObject $F9338 ( s ) throws $F3258 { $F790 ( lock ) try { q = new $F363756 ( Math . max ( size , NUM00 ) , comparator ) ; q . addAll ( this ) ; $F9339 ( s ) } finally { q = null ; $F704 ( lock ) } }
private void run $F72 { try { $F686 ( current , Thread ) $F12496 ( buf ) for ( int len = in . read ( buf ) ; len != - NUM00 ; len = in . read ( buf ) ) { $F11584 ( buffer , buf , len ) if ( current != thread ) $F5153 } $F1206 ( buffer ) $F59 ( buffer ) } catch ( IOException e ) $F14108 ( log , e ) }
protected boolean shardAvailable ( $F5466 IndexShard shard ) { return shard != null && shard . canIndex ( ) && CAN_UPDATE_INDEX_BUFFER_STATES . contains ( shard . state ( ) ) ; }
synchronized void updateAuthConfigGlobals ( ServiceSchemaManager scm ) throws SMSException { ServiceSchema schema = scm . getOrganizationSchema ( ) ; schema = schema . getSubSchema ( NUM00 ) ; schema = schema . getSubSchema ( NUM00 ) ; Map attrs = schema . getAttributeDefaults ( ) ; if ( attrs != null ) { defaultServiceSuccessURLSet = ( Set ) attrs . get ( ISAuthConstants . LOGIN_SUCCESS_URL ) ; defaultServiceFailureURLSet = ( Set ) attrs . get ( ISAuthConstants . LOGIN_FAILURE_URL ) ; } if $F6299 ( debug ) { $F18127 ( debug , defaultServiceSuccessURLSet ) $F18127 ( debug , defaultServiceFailureURLSet ) } }
public void increment $F72 { $F5224 ( count ) rateWindow . incrementForTimestamp ( timerGetter . now ( ) ) ; }
long totalMemory $F72 ;
$F1 public int preceding ( int offset ) { CharacterIterator text = getText ( ) ; checkOffset ( offset , text ) ; text . setIndex ( offset ) ; return previous ( ) ; }
public void log ( String event , String message ) { boolean eventActive = isEventActive ( event ) ; if ( ( this . logging && eventActive && $F1030 ( writers ) ) ) { try { for ( Writer writer : writers . values ( ) ) { writer . write ( message ) ; $F3410 ( writer ) $F1206 ( writer ) } } $F12241 ( e ) } }
public int write ( final ByteBuffer byteBuffer ) throws IOException { ensureOpen ( ) ; $F11550 ( remaining , byteBuffer ) if ( inspectable < buffer . length ) { final int toBuffer = Math . min ( buffer . length - inspectable , remaining ) ; byteBuffer . get ( buffer , inspectable , toBuffer ) ; inspectable += toBuffer ; } if $F5720 ( byteBuffer ) { fileChannel . position ( writePosition ) ; writePosition += fileChannel . write ( byteBuffer ) ; } return remaining ; }
public void copyInto $F95906 ( strOffset , bytes , arrayOffset , len ) { System . arraycopy ( m_bytes , m_offset + strOffset , bytes , arrayOffset , len ) ; }
public static String repeatString ( String pattern , int repeats ) { StringBuilder buffer = new StringBuilder ( pattern . length ( ) * repeats ) ; $F48485 ( i , repeats , buffer , pattern ) $F22269 ( buffer ) }
private boolean isMusicPlayer $F72 { return playerSetting != null && playerSetting . equalsIgnoreCase ( NUM00 ) ; }
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
public final static VersionInfo [ ] loadVersionInfo ( $F806 pckgs , ClassLoader clsldr ) { $F826 ( pckgs ) ArrayList vil = new ArrayList ( pckgs . length ) ; for ( $F1139 ( i , pckgs ) ) { VersionInfo vi = loadVersionInfo ( pckgs [ i ] , clsldr ) ; $F67023 ( vi , vil ) } return ( VersionInfo [ ] ) vil . toArray ( new VersionInfo $F2313 ( vil ) ) ; }
public static Collection < ContentStream > toContentStreams $F2236 ( str , contentType ) { $F1275 ( str ) ArrayList < ContentStream > $F9187 ( streams ) ; ContentStreamBase ccc = new ContentStreamBase . StringStream ( str ) ; ccc . setContentType ( contentType ) ; streams . add ( ccc ) ; return streams ; }
void writeRepeatedSqrt ( DD xdd ) { int count = NUM00 ; while ( xdd . doubleValue ( ) > NUM00 ) { count ++ ; $F50466 ( x , xdd ) DD xSqrt = xdd . sqrt ( ) ; $F1822 ( s , xSqrt ) $F23375 ( xSqrt2 , DD , s ) DD xx = xSqrt2 . multiply ( xSqrt2 ) ; double err = Math . abs ( xx . doubleValue ( ) - x ) ; xdd = xSqrt ; DD distFrom1DD = xSqrt . subtract ( DD . valueOf ( NUM00 ) ) ; $F50466 ( distFrom1 , distFrom1DD ) if $F20932 ( Math , distFrom1 ) $F597 } }
$F1 public String format ( DateTimeFormatter formatter ) { $F10578 ( Objects , formatter ) $F5330 ( formatter , this ) }
$F18164 ( msgs , seenXids , m , xid , assertTrue , assertFalse )
public static boolean hasExtension ( String extension ) $F123773 ( extension , _BOOL , extensionToMimeTypeMap )
private float applyFriction ( float velocity , float simulationRate ) { if ( isZero ( velocity ) ) { velocity = NUM00 ; } else if ( velocity > NUM00 ) { velocity = Math . max ( NUM00 , velocity - ( FRICTION * simulationRate ) ) ; } else { velocity = Math . min ( NUM00 , velocity + ( FRICTION * simulationRate ) ) ; } return velocity ; }
static Boolean realIsJUnit4Test ( Class scriptClass , GroovyClassLoader loader ) { boolean isTest = _BOOL ; try { try { $F198604 ( runWithAnnotationClass , loader ) Annotation annotation = scriptClass . getAnnotation ( runWithAnnotationClass ) ; if ( annotation != null ) { isTest = _BOOL ; } else { $F198604 ( testAnnotationClass , loader ) $F23596 methods = scriptClass . getMethods ( ) ; for ( $F1139 ( i , methods ) ) { Method method = methods [ i ] ; annotation = method . getAnnotation ( testAnnotationClass ) ; if ( annotation != null ) $F3468 ( isTest , _BOOL ) } } } $F230185 } $F115820 return isTest ? Boolean . TRUE : Boolean . FALSE ; }
private Dimension layoutSize ( Container target , boolean preferred ) { synchronized $F201886 ( target ) { $F138386 ( targetWidth , target ) if ( targetWidth == NUM00 ) $F7984 ( targetWidth , Integer ) int hgap = getHgap ( ) ; int vgap = getVgap ( ) ; $F3970 ( insets , target ) int horizontalInsetsAndGap = $F30395 ( insets ) + ( hgap * NUM00 ) ; int maxWidth = targetWidth - horizontalInsetsAndGap ; $F32537 ( dim ) int rowWidth = NUM00 ; int rowHeight = NUM00 ; $F60281 ( nmembers , target ) for ( $F119 ( i , nmembers ) ) { $F201892 ( m , target , i ) if $F201893 ( m ) { Dimension d = preferred ? m . getPreferredSize ( ) : m . getMinimumSize ( ) ; if ( rowWidth + d . width > maxWidth ) { addRow ( dim , rowWidth , rowHeight ) ; rowWidth = NUM00 ; rowHeight = NUM00 ; } if ( rowWidth != NUM00 ) { rowWidth += hgap ; } rowWidth += d . width ; $F201902 ( rowHeight , Math , d ) } } addRow ( dim , rowWidth , rowHeight ) ; dim . width += horizontalInsetsAndGap ; dim . height += $F30391 ( insets ) + vgap * NUM00 ; Container scrollPane = SwingUtilities . getAncestorOfClass ( JScrollPane . class , target ) ; if ( scrollPane != null ) { dim . width -= ( hgap + NUM00 ) ; } return dim ; } }
private static void parseExpression ( final Reader reader , final boolean writingString , final StringBuilder templateExpressions ) throws IOException { $F48750 ( writingString , templateExpressions ) $F84 ( templateExpressions ) while ( _BOOL ) { $F7468 ( c , reader ) $F167039 ( c ) if ( c == NUM00 ) { $F10201 ( c , reader ) if ( c == NUM00 ) $F597 $F84 ( templateExpressions ) } $F36813 ( templateExpressions , c ) } $F84 ( templateExpressions ) }
$F6672 ( filename , separatorAdd , prefix , getPrefixLength , index , indexOfLastSeparator , endIndex )
protected void reduceParseTree ( CompilationUnitDeclaration unit ) { TypeDeclaration [ ] types = unit . types ; for ( $F151668 ( i , l , types ) ) purgeMethodStatements ( types [ i ] , _BOOL ) ; }
$F95779 ( out , remaining , count , buf , buffers , c , Math )
public static long findRevision ( $F20109 ( output ) , final Pattern pattern ) { long revision = - NUM00 ; for ( final String line : output ) { $F37142 ( matcher , pattern , line ) if $F281 ( matcher ) { revision = $F53832 ( Long , matcher ) ; $F597 } } return revision ; }
protected int chooseHighWaterMark ( int capacity , double maxLoad ) { return Math . min ( capacity - NUM00 , $F2354 ( capacity , maxLoad ) ) ; }
private AccessGrant createAccessGrant $F3501 ( params ) { AccessGrant accessGrant = new AccessGrant $F72 ; if $F139289 ( params ) { $F170151 ( accessToken , params ) Integer expires = null ; if $F139289 ( params ) { expires = Integer . valueOf ( params . get ( NUM00 ) ) ; } accessGrant . setKey ( accessToken ) ; $F34765 ( accessGrant , expires ) } accessGrant . setProviderId ( mProviderName . toString ( ) ) ; return accessGrant ; }
protected final boolean _loadToHaveAtLeast ( int minAvailable ) throws IOException { $F1933 ( _inputStream , _BOOL ) int amount = _inputEnd - _inputPtr ; if ( amount > NUM00 && _inputPtr > NUM00 ) { _currInputProcessed += _inputPtr ; _currInputRowStart -= _inputPtr ; $F51886 ( System , _inputBuffer , _inputPtr , amount ) _inputEnd = amount ; } else { _inputEnd = NUM00 ; } _inputPtr = NUM00 ; while ( _inputEnd < minAvailable ) { $F7994 ( count , _inputStream , _inputBuffer , _inputEnd ) if ( count < NUM00 ) { _closeInput ( ) ; if ( count == NUM00 ) $F5244 ( amount ) return _BOOL ; } _inputEnd += count ; } return _BOOL ; }
public double logPdf ( double x ) { return Math . log ( pdf ( x ) ) ; }
private void selectFile ( int titleMsg , int buttonMsg , String settingsName , String defaultDir , int dialog , int result ) { setAutoMode ( AutoMode . OFF ) ; String action = NUM00 ; Intent i = new Intent ( action ) ; String currentFile = settings . getString ( settingsName , NUM00 ) ; String sep = File . separator ; if $F2200 ( currentFile , sep ) currentFile = Environment . getExternalStorageDirectory ( ) + sep + defaultDir + sep + currentFile ; i . setData ( Uri . fromFile ( new File ( currentFile ) ) ) ; i . putExtra ( NUM00 , getString ( titleMsg ) ) ; i . putExtra ( NUM00 , getString ( buttonMsg ) ) ; try { startActivityForResult ( i , result ) ; } catch ( ActivityNotFoundException e ) $F86383 ( removeDialog , dialog , showDialog ) }
private static void encodeBinary $F91888 ( bytes , startpos , count , startmode , sb ) { if ( count == NUM00 && startmode == TEXT_COMPACTION ) $F46352 ( sb , SHIFT_TO_BYTE ) else { boolean sixpack = $F91889 ( count ) ; if ( sixpack ) $F46352 ( sb , LATCH_TO_BYTE ) else $F46352 ( sb , LATCH_TO_BYTE_PADDED ) } int idx = startpos ; if ( count >= NUM00 ) { $F11577 ( chars ) $F91906 ( startpos , count , idx , t , i , bytes , chars , sb ) } $F91910 ( i , idx , startpos , count , ch , bytes , sb ) }
public String timerString ( int level , String message ) { $F83 ( retStringBuf ) $F103815 ( i , level , retStringBuf ) $F84 ( retStringBuf ) String timeSinceStartStr = $F130521 ( String , timeSinceStart ) ; $F86403 ( retStringBuf , timeSinceStartStr ) String timeSinceLastStr = $F130521 ( String , timeSinceLast ) ; retStringBuf . append ( timeSinceLastStr ) ; $F84 ( retStringBuf ) int spacecount = NUM00 + ( NUM00 * level ) - retStringBuf . length ( ) ; $F103815 ( i , spacecount , retStringBuf ) retStringBuf . append ( message ) ; $F3224 ( lastMessageTime , System ) $F1822 ( retString , retStringBuf ) if ( log && Debug . timingOn ( ) ) Debug . logTiming ( retString , module ) ; return retString ; }
public static int recompileWithOpt ( NormalMethod method ) { if ( VM . BuildForOptCompiler ) { CompilationPlan plan = new CompilationPlan ( method , ( OptimizationPlanElement [ ] ) optimizationPlan , null , ( OptOptions ) options ) ; return recompileWithOpt ( plan ) ; } else { if ( VM . VerifyAssertions ) VM . _assert ( VM . NOT_REACHED ) ; $F150 } }
public String findMatch ( Pattern pattern , String text ) $F331052 ( findMatch , pattern , text )
private void addHit ( String cname , $F6969 c ) { if ( len == names . length ) { final int $F76469 ( nl , len ) ; $F8003 ( names , Arrays , nl ) $F8003 ( clazzes , Arrays , nl ) } names [ len ] = cname ; clazzes [ len ] = c ; ++ len ; }
private Object queryCommandValue ( final String commandIdentifier ) { $F18062 ( Check , commandIdentifier ) $F3239 ( cmd ) $F84 ( cmd ) cmd . append ( commandIdentifier ) ; $F84 ( cmd ) return browser . evaluate ( cmd . toString ( ) ) ; }
public void line ( double x , double y ) { Line line = new Line ( x , y ) ; $F45132 ( x , minX ) $F45132 ( y , minY ) $F12283 ( x , maxX ) $F12283 ( y , maxY ) elements . add ( line ) ; }
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
$F1 public List < $F81733 > cluster ( $F60962 ( points ) ) throws NullArgumentException { MathUtils . checkNotNull ( points ) ; final List < $F81733 > clusters = new ArrayList < $F81733 > $F72 ; final Map < Clusterable , PointStatus > visited = new HashMap < Clusterable , PointStatus > $F72 ; for ( final T point : points ) { if $F26935 ( visited , point ) $F1448 final $F5675 neighbors = getNeighbors ( point , points ) ; if $F29395 ( neighbors , minPts ) { final $F81733 cluster = new $F81733 $F72 ; clusters . add ( expandCluster ( cluster , point , neighbors , points , visited ) ) ; } else { visited . put ( point , PointStatus . NOISE ) ; } } return clusters ; }
public void testGetVersion25 $F72 throws Exception { String xml = WEBAPP_25_HEADER + NUM00 ; $F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) assertEquals ( WebXmlVersion . V2_5 , webXml . getVersion ( ) ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private static void mat4_util_inplace_rotate ( $F5415 inOutMatrix , float eulerRadiansX , float eulerRadiansY , float eulerRadiansZ ) { float cos_rx = $F148722 ( Math , eulerRadiansX ) ; float cos_ry = $F148722 ( Math , eulerRadiansY ) ; float cos_rz = $F148722 ( Math , eulerRadiansZ ) ; float sin_rx = $F148723 ( Math , eulerRadiansX ) ; float sin_ry = $F148723 ( Math , eulerRadiansY ) ; float sin_rz = $F148723 ( Math , eulerRadiansZ ) ; float b00 = cos_rz * cos_ry ; float b10 = sin_rz * cos_ry ; float b20 = - sin_ry ; float b30 = NUM00 ; float b01 = - sin_rz * cos_rx + cos_rz * sin_ry * sin_rx ; float b11 = cos_rz * cos_rx + sin_rz * sin_ry * sin_rx ; float b21 = cos_ry * sin_rx ; float b31 = NUM00 ; float b02 = sin_rz * sin_rx + cos_rz * sin_ry * cos_rx ; float b12 = - cos_rz * sin_rx + sin_rz * sin_ry * cos_rx ; float b22 = cos_ry * cos_rx ; float b32 = NUM00 ; float b03 = NUM00 ; float b13 = NUM00 ; float b23 = NUM00 ; float b33 = NUM00 ; float a00 = inOutMatrix [ NUM00 ] ; float a10 = inOutMatrix [ NUM00 ] ; float a20 = inOutMatrix [ NUM00 ] ; float a30 = inOutMatrix [ NUM00 ] ; float a01 = inOutMatrix [ NUM00 ] ; float a11 = inOutMatrix [ NUM00 ] ; float a21 = inOutMatrix [ NUM00 ] ; float a31 = inOutMatrix [ NUM00 ] ; float a02 = inOutMatrix [ NUM00 ] ; float a12 = inOutMatrix [ NUM00 ] ; float a22 = inOutMatrix [ NUM00 ] ; float a32 = inOutMatrix [ NUM00 ] ; float a03 = inOutMatrix [ NUM00 ] ; float a13 = inOutMatrix [ NUM00 ] ; float a23 = inOutMatrix [ NUM00 ] ; float a33 = inOutMatrix [ NUM00 ] ; inOutMatrix [ NUM00 ] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30 ; inOutMatrix [ NUM00 ] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30 ; inOutMatrix [ NUM00 ] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30 ; inOutMatrix [ NUM00 ] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30 ; inOutMatrix [ NUM00 ] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31 ; inOutMatrix [ NUM00 ] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31 ; inOutMatrix [ NUM00 ] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31 ; inOutMatrix [ NUM00 ] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31 ; inOutMatrix [ NUM00 ] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32 ; inOutMatrix [ NUM00 ] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32 ; inOutMatrix [ NUM00 ] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32 ; inOutMatrix [ NUM00 ] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32 ; inOutMatrix [ NUM00 ] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33 ; inOutMatrix [ NUM00 ] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33 ; inOutMatrix [ NUM00 ] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33 ; inOutMatrix [ NUM00 ] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33 ; }
$F1 public void mousePressed ( MouseEvent evt ) { int pos = ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) ? evt . getX ( ) : evt . getY ( ) ; int loc = getLocationForValue ( getSnappedValue ( evt ) ) ; this . offset = ( loc < NUM00 ) ? NUM00 : pos - loc ; }
private String printDFormat ( final long x ) $F21034 ( printDFormat , Long , x )
public void write ( int ch ) throws IOException { OutputStream os = getOutputStream ( ) ; $F3410 ( os ) $F25097 ( os ) $F25097 ( os ) os . write ( ch ) ; }
public static $F50398 ServiceLoader $F50398 loadInstalled ( $F50400 service ) { $F50403 ( cl , ClassLoader ) if ( cl != null ) { while $F50405 ( cl ) $F10338 ( cl ) } return ServiceLoader . load ( service , cl ) ; }
private static Iterator < Operand > iterateReturnValues ( IR ir ) { ArrayList < Operand > returnValues = new ArrayList < Operand > $F72 ; for ( $F12039 e = ir . forwardInstrEnumerator ( ) ; e . hasMoreElements ( ) ; ) { $F12043 ( s , e ) if $F86920 ( Return , s ) { returnValues . add ( Return . getVal ( s ) ) ; } } $F16047 ( returnValues ) }
public static Pattern glob2Pattern ( String ... globs ) { $F1121 ( regex ) boolean needOr = _BOOL ; for ( String glob : globs ) { $F12290 ( needOr , regex ) $F51283 ( i , len , glob ) ; while ( i < len ) { $F52837 ( c , glob , i ) switch ( c ) { $F1262 if $F52566 ( i , len , glob ) $F312159 ( regex , i ) else $F86 ( regex ) $F597 $F2999 ( regex ) $F1267 if ( isRegexMeta ( c ) ) $F86 ( regex ) regex . append ( c ) ; } } needOr = _BOOL ; } return Pattern . compile ( $F89373 ( regex ) ) ; }
public static boolean containsTraceExplorerModuleConflict ( String rootModuleName ) { String rootModuleFileName = rootModuleName ; if ( ! rootModuleName . endsWith ( ResourceHelper . TLA_EXTENSION ) ) { rootModuleFileName = ResourceHelper . getModuleFileName ( rootModuleName ) ; } $F3803 extendedModuleNames = ToolboxHandle . getExtendedModules ( rootModuleFileName ) ; $F13712 ( it , extendedModuleNames ) while $F2921 ( it ) { $F13714 ( moduleName , it ) $F12418 ( moduleName , TE_FILE_TLA , _BOOL ) } return _BOOL ; }
public void testFlipBitNegativeInside2 $F72 { $F17888 int aSign = - NUM00 ; int number = NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private String buildFullMessage ( String msg , Object arg0 , Object arg1 , Object arg2 , $F131 argArray ) { StringBuilder sb = null ; int lastIndex = NUM00 ; int argC = NUM00 ; while ( _BOOL ) { int argIndex = msg . indexOf ( ARG_ <missing ';'> NUM00 , lastIndex ) ; $F76065 ( argIndex ) if ( sb == null ) { sb = new StringBuilder $F989 ; } sb . append ( msg , lastIndex , argIndex ) ; lastIndex = argIndex + ARG_ <missing ';'> NUM00 _LENGTH ; if ( argArray == null ) { if ( argC == NUM00 ) { appendArg ( sb , arg0 ) ; } else if ( argC == NUM00 ) { appendArg ( sb , arg1 ) ; } else if ( argC == NUM00 ) { appendArg ( sb , arg2 ) ; } else $F845 } else if ( argC < argArray . length ) { appendArg ( sb , argArray [ argC ] ) ; } else $F845 argC ++ ; } if ( sb == null ) { return msg ; } else { sb . append ( $F180345 ( msg , lastIndex ) ) ; $F92 ( sb ) } }
protected void removeFromParentInfo ( Openable child ) { Openable parent = ( Openable ) child . getParent ( ) ; if $F73305 ( parent ) { try { OpenableElementInfo info = ( OpenableElementInfo ) parent . getElementInfo ( ) ; info . removeChild ( child ) ; } catch ( JavaModelException e ) $F845 } }
$F27745 ( mUpdateListeners )
public static String encodeString ( String s ) { return new String ( encode ( s . getBytes ( ) ) ) ; }
public void executePlan ( TaskCompleter completer , String successMessage , WorkflowCallbackHandler callbackHandler , $F131 callbackHandlerArgs , WorkflowRollbackHandler rollbackHandler , $F131 rollbackHandlerArgs ) throws WorkflowException { this . _callbackHandler = callbackHandler ; if ( callbackHandlerArgs != null ) { this . _callbackHandlerArgs = callbackHandlerArgs . clone ( ) ; } this . _rollbackHandler = rollbackHandler ; if ( rollbackHandlerArgs != null ) { this . _rollbackHandlerArgs = rollbackHandlerArgs . clone ( ) ; } this . _taskCompleter = completer ; this . _successMessage = successMessage ; _service . executePlan ( this ) ; }
private OSInfo $F72 $F845
public boolean isMutable $F72 { return mutable ; }
public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; ldapLogin ( ) ; String serviceName = getStringOptionValue ( IArgument . SERVICE_NAME ) ; String subConfigName = getStringOptionValue ( IArgument . SUB_CONFIGURATION_NAME ) ; String realmName = getStringOptionValue ( IArgument . REALM_NAME ) ; if $F38892 ( realmName ) { deleteSubConfigToRoot ( serviceName , subConfigName ) ; } else { deleteSubConfigFromRealm ( realmName , serviceName , subConfigName ) ; } }
public void enforceContext ( Resource ... contexts ) { OpenRDFUtil . verifyContextNotNull ( contexts ) ; $F17879 ( this , Arrays , contexts ) }
protected void runUpload ( Integer numOfThreads , $F140617 ( attributes ) , Boolean createNewVersion , Boolean force ) throws Exception { runUpload ( numOfThreads , attributes , createNewVersion , force , null , null ) ; }
public final Collection $F44984 components $F72 { return new $F9623 $F6680 ( components ) ; }
protected $F8748 canPredict $F70738 ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) { print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = getNumInstances ( ) , numClasses = NUM00 , missingLevel = NUM00 ; boolean predictorMissing = _BOOL , classMissing = _BOOL ; return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; }
public void test_historyIndexDisabled $F72 throws SailException { $F17606 ( properties , getProperties ) properties . setProperty ( com . bigdata . rdf . store . AbstractTripleStore . Options . HISTORY_SERVICE , NUM00 ) ; final BigdataSail sail = getSail ( properties ) ; try { $F21883 ( sail ) final BigdataSailConnection conn = sail . getConnection ( ) ; try { final IIndex ndx = getHistoryIndex ( conn . getTripleStore ( ) ) ; assertNull ( ndx ) ; $F19121 ( conn ) } $F3229 ( conn ) } finally { sail . __tearDownUnitTest ( ) ; } }
$F172853 ( collapse , _BOOL )
public int numInstances $F72 $F1652 ( m_Instances )
$F1 public void startDocument ( XMLLocator locator , String encoding , NamespaceContext namespaceContext , Augmentations augs ) throws XNIException { fNamespaceContext = namespaceContext ; try { if ( fDocumentHandler != null ) { if ( locator != null ) { fDocumentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . startDocument ( ) ; } } if ( fContentHandler != null ) { if ( locator != null ) { fContentHandler . setDocumentLocator ( new LocatorProxy ( locator ) ) ; } if ( fContentHandler != null ) { fContentHandler . startDocument ( ) ; } } } $F122277 ( e ) }
public static double parseNumberPercentWithSeparateRange ( FXGNode node , String value , String name , double minNumber , double maxNumber , double minPercent , double maxPercent , double defaultValue ) { if ( $F35624 ( value ) && $F25771 ( value ) ) { $F13881 ( doubleValue , value ) try $F12218 ( parseDouble , node , doubleValue , name , minPercent , maxPercent , defaultValue ) catch ( FXGException e ) { throw new FXGException ( node . getStartLine ( ) , node . getStartColumn ( ) , NUM00 , name , value ) ; } } else $F12218 ( parseDouble , node , value , name , minNumber , maxNumber , defaultValue ) }
private void checkDownloadCanProceed $F72 throws StopRequestException { if ( clock . intervalLessThan ( Clock . Interval . ONE_SECOND ) ) $F932 clock . startInterval ( ) ; checkIsPausedOrCanceled ( ) ; checkClientRules ( ) ; }
private void calculateColor ( int coord ) { coord = coord - mBarPointerHaloRadius ; if ( coord < NUM00 ) { coord = NUM00 ; } else $F8789 ( coord , mBarLength ) mColor = Color . HSVToColor ( Math . round ( mPosToOpacFactor * coord ) , mHSVColor ) ; if ( Color . alpha ( mColor ) > NUM00 ) { mColor = Color . HSVToColor ( mHSVColor ) ; } else if ( Color . alpha ( mColor ) < NUM00 ) { mColor = Color . TRANSPARENT ; } }
private void deleteEvent ( EventRegKeyExpiration regExpiration , EventReg reg ) { listeners . dec ( ) ; synchronized ( reg ) { $F205252 tmpls = reg . tmpl . attributeSetTemplates ; if ( tmpls != null ) { for ( $F45516 ( i , tmpls ) ) { EntryClass eclass = tmpls [ i ] . eclass ; eclass . setNumTemplates ( eclass . getNumTemplates ( ) - NUM00 ) ; } } Long id = reg . eventID ; eventByID . remove ( id ) ; if ( regExpiration != null ) $F106 ( eventByTime , regExpiration ) else { eventByTime . remove ( new EventRegKeyExpiration ( reg , reg . leaseExpiration ) ) ; } if ( reg . tmpl . serviceID != null ) { Object val = subEventByService . get ( reg . tmpl . serviceID ) ; if ( val == reg ) { subEventByService . remove ( reg . tmpl . serviceID ) ; } else { $F131 array = ( EventReg [ ] ) val ; array = arrayDel ( array , indexOf ( array , reg ) ) ; if $F9634 ( array ) val = array [ NUM00 ] ; else val = array ; subEventByService . put ( reg . tmpl . serviceID , val ) ; } } else $F106 ( subEventByID , id ) computeMaxLeases ( ) ; } }
public String gtidSet $F72 { return this . gtidSet != null ? this . gtidSet : null ; }
public static Peer createMapPeer ( Map map ) throws MessageException { if ( ! map . containsKey ( PORT ) || ! map . containsKey ( ADDRESS ) ) throw new MessageException $F580 ; int port = ( int ) ( long ) map . get ( PORT ) ; $F123 ( address , map , ADDRESS ) String peerId = null ; if $F1710 ( map , PEER_ID ) $F18988 ( peerId , map , PEER_ID ) return new Peer ( peerId , new InetSocketAddress ( address , port ) ) ; }
private static int countGapsDashDotStar ( String sequence ) { int count = NUM00 ; for ( $F1088 ( i , sequence ) ) { $F8205 ( a , sequence , i ) if $F58237 ( a ) count ++ ; } return count ; }
private boolean testPassword $F72 throws PdfSecurityException { int count = NUM00 ; $F10317 ( rawValue ) $F96 keyValue ; for ( $F6268 ( i ) ) { rawValue [ i ] = ( byte ) Integer . parseInt ( pad [ i ] , NUM00 ) ; } $F96 encrypted = ObjectCloneFactory . cloneArray ( rawValue ) ; if ( rev == NUM00 ) { encryptionKey = calculateKey ( O , P , ID ) ; encrypted = decrypt ( encrypted , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; } else if ( rev >= NUM00 ) { int keyLength = this . keyLength ; count = NUM00 ; encryptionKey = calculateKey ( O , P , ID ) ; final $F96 originalKey = ObjectCloneFactory . cloneArray ( encryptionKey ) ; MessageDigest md = null ; try $F14527 ( md , MessageDigest ) catch ( final Exception e ) $F109312 ( LogWriter , e ) md . update ( encrypted ) ; keyValue = md . digest ( ID ) ; keyValue = decrypt ( keyValue , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; $F4727 ( nextKey , keyLength ) for ( $F34659 ( i ) ) { for ( $F119 ( j , keyLength ) ) { nextKey [ j ] = ( byte ) ( originalKey [ j ] ^ i ) ; } encryptionKey = nextKey ; keyValue = decrypt ( keyValue , NUM00 , _BOOL , null , _BOOL , _BOOL ) ; } encryptionKey = originalKey ; $F46945 ( encrypted ) $F10319 ( System , keyValue , encrypted ) $F10319 ( System , rawValue , encrypted ) } return compareKeys ( U , encrypted , count ) ; }
public static void putDoubleField ( Object obj , long fieldOff , double val ) { UNSAFE . putDouble ( obj , fieldOff , val ) ; }
$F47733 ( reader , writer , buffer , count )
public String toOIDString $F72 { if ( sOID == null ) { sOID = NUM00 + toString ( ) ; } return sOID ; }
public void emitDirect ( int taskId , String streamId , Tuple anchor , $F6689 tuple ) { emitDirect ( taskId , streamId , Arrays . asList ( anchor ) , tuple ) ; }
protected void loadValue ( String sValue ) { $F1382 ( sValue ) try { int r = $F608 ( Integer , sValue ) ; int g = $F608 ( Integer , sValue ) ; int b = $F608 ( Integer , sValue ) ; value = new Color ( r , g , b ) ; } catch ( NumberFormatException nfe ) $F5795 ( revertToDefault ) catch ( StringIndexOutOfBoundsException sioobe ) $F5795 ( revertToDefault ) }
public void schemaChanged ( String serviceName , String version ) $F5795 ( updateStatus )
private static int byteCompaction ( int mode , $F2027 codewords , int codeIndex , StringBuilder result ) { if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = NUM00 ; long value = NUM00 ; $F11577 ( decodedData ) $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = NUM00 * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = ( char ) ( value % NUM00 ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } if ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { $F3356 ( result , byteCompactedCodewords , i ) } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = NUM00 ; long value = NUM00 ; boolean end = _BOOL ; while $F38554 ( codeIndex , codewords , end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = NUM00 * value + code ; } else { if $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { $F11577 ( decodedData ) for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = $F27723 ( value ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } return codeIndex ; }
public int addAndGet ( T obj , int delta ) { for ( $F589 ) { int current = get ( obj ) ; int next = current + delta ; $F158832 ( compareAndSet , obj , current , next ) } }
public KCResponse serve ( String uri , String method , Properties header , Properties parms , Properties files ) $F33971 ( serveFile , uri , header , myRootDir , _BOOL )
protected void fillMemData ( Object data , $F2027 posits , int length , Object output , int outputOffset , int dim ) { if $F2485 ( data ) { $F32760 ( xo , data ) fillMemData ( xo [ posits [ dim ] ] , posits , length , output , outputOffset , dim + NUM00 ) ; } else { int startFrom = posits [ dim ] ; int startTo = outputOffset ; int copyLength = length ; if ( posits [ dim ] < NUM00 ) { startFrom -= posits [ dim ] ; startTo -= posits [ dim ] ; copyLength += posits [ dim ] ; } if ( posits [ dim ] + length > this . dims [ dim ] ) { copyLength -= posits [ dim ] + length - this . dims [ dim ] ; } System . arraycopy ( data , startFrom , output , startTo , copyLength ) ; } }
public $F65632 startAsyncJob ( String jobType ) { try { final JobRunnable jobRunnable = findJobRunnable ( jobType ) ; JobInfo jobInfo = createJobInfo ( jobType ) ; repository . markJobAsRunningIfPossible ( jobInfo , mutexJobTypesFor ( jobType ) ) ; repository . createOrUpdate ( jobInfo ) ; return Optional . of ( startAsync ( metered ( jobRunnable ) , jobInfo . getJobId ( ) ) ) ; } catch ( JobBlockedException e ) { LOG . info ( e . getMessage ( ) ) ; $F21169 ( Optional ) } }
public boolean isLegalReplacement $F97 ( replacement ) { if ( decoder == null ) { decoder = charset . newDecoder ( ) ; decoder . onMalformedInput ( CodingErrorAction . REPORT ) ; decoder . onUnmappableCharacter ( CodingErrorAction . REPORT ) ; } $F23500 ( in , ByteBuffer , replacement ) CharBuffer out = CharBuffer . allocate ( ( int ) ( replacement . length * decoder . maxCharsPerByte ( ) ) ) ; CoderResult result = decoder . decode ( in , out , _BOOL ) ; return ! result . isError ( ) ; }
public static void adaptTable ( ConstraintTableLayout table ) { $F2049 ( width , table ) $F2047 ( height , table ) ConstraintWidget . DimensionBehaviour horizontalBehaviour = table . getHorizontalDimensionBehaviour ( ) ; ConstraintWidget . DimensionBehaviour verticalBehaviour = table . getVerticalDimensionBehaviour ( ) ; table . setHorizontalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; table . setVerticalDimensionBehaviour ( ConstraintWidget . DimensionBehaviour . WRAP_CONTENT ) ; table . layout ( ) ; table . layout ( ) ; table . setMinWidth ( table . getWidth ( ) ) ; table . setMinHeight ( table . getHeight ( ) ) ; table . computeGuidelinesPercentPositions ( ) ; table . setHorizontalDimensionBehaviour ( horizontalBehaviour ) ; table . setVerticalDimensionBehaviour ( verticalBehaviour ) ; table . setWidth ( width < table . getMinWidth ( ) ? table . getMinWidth ( ) : width ) ; table . setHeight ( height < table . getMinHeight ( ) ? table . getMinHeight ( ) : height ) ; table . layout ( ) ; }
public static < V , C extends Collection $F42625 > C addAll ( C c , V ... vals ) { Collections . addAll ( c , vals ) ; return c ; }
public static void addStrut ( JComponent b , int layout , int size ) { $F61236 ( size ) b . add ( getAxis ( b , layout ) == BoxLayout . X_AXIS ? Box . createHorizontalStrut ( size ) : Box . createVerticalStrut ( size ) ) ; }
public void elementType $F21324 ( name , model , memberOf , flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
public int arrayIndexScale ( Class clazz ) { if $F101443 ( clazz ) $F825 return arrayIndexScale0 ( clazz ) ; }
public static StringPool readStringPool ( ByteBuffer buffer , StringPoolHeader stringPoolHeader ) { long beginPos = buffer . position ( ) ; $F2469 offsets = new long [ ( int ) stringPoolHeader . getStringCount ( ) ] ; if ( stringPoolHeader . getStringCount ( ) > NUM00 ) { for ( int idx = NUM00 ; idx < stringPoolHeader . getStringCount ( ) ; idx ++ ) { offsets [ idx ] = Buffers . readUInt ( buffer ) ; } } boolean utf8 = ( stringPoolHeader . getFlags ( ) & StringPoolHeader . UTF8_FLAG ) != NUM00 ; long stringPos = beginPos + stringPoolHeader . getStringsStart ( ) - stringPoolHeader . getHeaderSize ( ) ; buffer . position ( ( int ) stringPos ) ; StringPoolEntry [ ] entries = new StringPoolEntry [ offsets . length ] ; for ( $F1139 ( i , offsets ) ) { entries [ i ] = new StringPoolEntry ( i , stringPos + offsets [ i ] ) ; } String lastStr = null ; long lastOffset = - NUM00 ; StringPool stringPool = new StringPool ( ( int ) stringPoolHeader . getStringCount ( ) ) ; for ( StringPoolEntry entry : entries ) { if ( entry . offset == lastOffset ) { stringPool . set ( entry . index , lastStr ) ; $F598 } buffer . position ( ( int ) entry . offset ) ; lastOffset = entry . offset ; String str = ParseUtils . readString ( buffer , utf8 ) ; lastStr = str ; stringPool . set ( entry . index , str ) ; } buffer . position ( ( int ) ( beginPos + stringPoolHeader . getBodySize ( ) ) ) ; return stringPool ; }
public String strRep $F72 { return $F3905 ( rankTeamPollScore , abbr , wins , losses ) ; }
$F1 public String toString $F72 { if ( eIsProxy ( ) ) $F92 ( super ) StringBuffer result = $F80120 ( super ) ; $F84 ( result ) result . append ( kind ) ; $F84 ( result ) $F92 ( result ) }
$F2208 ( sourceList , entryList , isEmpty , sourceCount , entry )
private void recordRPOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; $F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; _log . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; recordBourneRPEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; switch ( opType ) { case START_RP_LINK : case STOP_RP_LINK : case PAUSE_RP_LINK : case RESUME_RP_LINK : case FAILOVER_RP_LINK : case FAILOVER_CANCEL_RP_LINK : case CHANGE_RP_IMAGE_ACCESS_MODE : case SWAP_RP_VOLUME : AuditBlockUtil . auditBlock ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 $F37651 ( _log ) } } catch ( Exception e ) { _log . error ( $F89018 ( opType , e ) ) ; } }
void autoClosingClipOpened ( AutoClosingClip clip ) { if ( Printer . debug ) $F980 ( Printer ) int index = NUM00 ; synchronized ( autoClosingClips ) { index = getAutoClosingClipIndex ( clip ) ; if ( index == - NUM00 ) { if ( Printer . debug ) $F586 ( Printer , clip ) autoClosingClips . add ( new ClipInfo ( clip ) ) ; } } if ( index == - NUM00 ) { $F59357 ( this , notifyAll ) } if ( Printer . debug ) $F25390 ( Printer , autoClosingClips ) }
public boolean implies ( Permission permission ) { if ( ! ( permission instanceof ExecOptionPermission ) ) return _BOOL ; ExecOptionPermission p = ( ExecOptionPermission ) permission ; if ( all_allowed ) return _BOOL ; $F20605 ( pname , p ) Permission x = permissions . get ( pname ) ; if ( x != null ) return x . implies ( permission ) ; int last , offset ; $F25985 ( offset , pname ) while ( ( last = pname . lastIndexOf ( NUM00 , offset ) ) != - NUM00 ) { pname = $F1399 ( pname , last ) + NUM00 ; x = permissions . get ( pname ) ; if ( x != null ) { return x . implies ( permission ) ; } offset = last - NUM00 ; } $F32928 ( pname , p ) $F25985 ( offset , pname ) while ( ( last = pname . lastIndexOf ( NUM00 , offset ) ) != - NUM00 ) { pname = $F1399 ( pname , last ) + NUM00 ; x = permissions . get ( pname ) ; if ( x != null ) { return x . implies ( permission ) ; } offset = last - NUM00 ; } return _BOOL ; }
public void addTailArg ( String arg ) $F207 ( _tailArgs , arg )
private static $F96 save ( Bitmap src , Bitmap . CompressFormat format , int quality ) { ByteArrayOutputStream outputStream = null ; try { $F1659 ( outputStream ) src . compress ( format , quality , outputStream ) ; $F11316 ( outputStream ) } finally { $F296786 ( outputStream , e1 ) } }
public boolean isExternal ( Resource input ) $F298 ( externalResources , input )
protected final void writeD ( ByteBuffer buf , int value ) { buf . putInt ( value ) ; }
$F1 public AbstractScannedResult scanBlocklet ( BlocksChunkHolder blocksChunkHolder ) throws QueryExecutionException { try { fillScannedResult ( blocksChunkHolder ) ; } catch ( FilterUnsupportedException e ) { throw new QueryExecutionException $F1783 ( e ) ; } return scannedResult ; }
public List < ShoppingCartItem > items $F72 { List < ShoppingCartItem > result = FastList . newInstance ( ) ; result . addAll ( cartLines ) ; return result ; }
MutableBigInteger ( BigInteger b ) { intLen = b . mag . length ; value = Arrays . copyOf ( b . mag , intLen ) ; }
public boolean isHttp11 $F72 { $F72433 ( mVersion , HTTP11 , _BOOL ) return _BOOL ; }
private int readNext ( boolean charstring ) { num = ( int ) ( data [ pos ++ ] ) & NUM00 ; if ( num == NUM00 && ! charstring ) { readFNum ( ) ; return type = FLT ; } else if ( num == NUM00 ) { num = ( ( ( int ) data [ pos ] ) < < NUM00 ) + ( ( ( int ) data [ pos + NUM00 ] ) & NUM00 ) ; pos += NUM00 ; return type = NUM ; } else if ( num == NUM00 && ! charstring ) { num = ( ( ( int ) data [ pos ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) ) ; pos += NUM00 ; return type = NUM ; } else if ( num == NUM00 ) { num = NUM00 + ( ( int ) ( data [ pos ++ ] ) & NUM00 ) ; return type = CMD ; } else if ( num < NUM00 ) { return type = CMD ; } else if ( num < NUM00 ) { num -= NUM00 ; return type = NUM ; } else if ( num < NUM00 ) { num = ( num - NUM00 ) * NUM00 + ( ( ( int ) data [ pos ++ ] ) & NUM00 ) + NUM00 ; return type = NUM ; } else if ( num < NUM00 ) { num = - ( num - NUM00 ) * NUM00 - ( ( ( int ) data [ pos ++ ] ) & NUM00 ) - NUM00 ; return type = NUM ; } else if ( ! charstring ) { printData ( ) ; $F11388 } else { fnum = ( ( ( ( int ) data [ pos ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) < < NUM00 ) | ( ( ( int ) data [ pos + NUM00 ] & NUM00 ) ) ) / NUM00 ; pos += NUM00 ; return type = FLT ; } }
protected void deleteIcon $F72 { $F2329 ( _selectedIcon ) if ( _iconMap . remove ( _selectedIcon . getName ( ) ) != null ) { removeIconFamiliesPanel ( ) ; addIconsToPanel ( _iconMap ) ; deleteIconButton . setEnabled ( _BOOL ) ; validate ( ) ; } }
public boolean equals ( Object obj ) { $F397 ( obj , _BOOL ) if ( this == obj ) return _BOOL ; $F9904 ( getClass , obj , _BOOL ) ChoiceFormat other = ( ChoiceFormat ) obj ; return ( $F3629 ( Arrays , choiceLimits , other ) && $F3629 ( Arrays , choiceFormats , other ) ) ; }
private static File createReserveDiskCacheDir ( Context context ) { File cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; $F109797 ( individualDir , cacheDir ) $F202511 ( individualDir , cacheDir ) return cacheDir ; }
public static Date updated ( Date self , Map < Object , Integer > updates ) { $F4377 ( cal , Calendar ) cal . setTime ( self ) ; set ( cal , updates ) ; $F11894 ( cal ) }
public boolean displayTopic ( String name ) { String topic = null ; if ( name == null ) topic = DEFAULT + FILE_TYPE ; else topic = name . toLowerCase ( ) + FILE_TYPE ; $F4453 ( helpFile , helpDir , topic ) return display ( helpFile ) ; }
private void dashToWords ( String tokenVal ) { $F1384 ( index , tokenVal ) $F11991 ( aaa , tokenVal , index ) $F76054 ( bbb , tokenVal , index ) if ( matches ( digitsPattern , aaa ) && matches ( digitsPattern , bbb ) ) { $F85094 ( featureSet , tokenItem ) $F282478 ( featureSet , aaa ) tokenToWords ( aaa ) ; $F71514 ( wordRelation ) $F282478 ( featureSet , bbb ) tokenToWords ( bbb ) ; featureSet . setString ( NUM00 , NUM00 ) ; } else { tokenToWords ( aaa ) ; tokenToWords ( bbb ) ; } }
public static int numberOfTrailingZerosSigned $F101011 ( v ) { for ( $F26577 ( p ) ) { if ( p == v . length ) $F7629 if ( v [ p ] != NUM00 ) { return Long . numberOfTrailingZeros ( v [ p ] ) + p * Long . SIZE ; } } }
public static void applyWMRule ( Collection < MWMInOutBound > lines , String boundType ) { for ( MWMInOutBound line : lines ) { for ( MWMDefinition definition : MWMDefinition . getAll ( line . getCtx ( ) , line . get_TrxName ( ) ) ) { WMRuleEngine . validateDefinition ( line , definition , boundType ) ; } } }
public static float readFloat ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return ( float ) jsonArray . getDouble ( index ) ; } $F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) float value = NUM00 ; if $F3653 ( jsonArray , index ) { value = ( float ) jsonArray . getDouble ( index ) ; } return value ; }
public void flush $F72 throws IOException { flushBits ( ) ; $F1206 ( out ) }
public final Flux $F4203 onErrorResumeWith ( Predicate < $F3204 > predicate , Function < $F3204 , ? extends $F40798 > fallback ) { $F10578 ( Objects , predicate ) return onErrorResumeWith ( null ) ; }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F1000 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) }
public $F32043 final void testSetUsersNegative $F72 { Role role = new Role ( TEST_ROLE ) ; thrown . expect ( $F85137 ) ; role . setUsers ( null ) ; }
private $F2689 findResourceNames $F1947 ( path , prefix , suffix ) throws IOException { $F2689 resourceNames = findResourceNamesFromFileSystem ( path , new File ( path ) ) ; return filterResourceNames ( resourceNames , prefix , suffix ) ; }
public boolean add ( K key , V item ) { $F25669 values = map . get ( key ) ; if ( values == null ) { values = ( sorted ? new TreeSet $F2193 $F72 : new HashSet $F2193 $F72 ) ; map . put ( key , values ) ; } $F397 ( item , _BOOL ) $F20805 ( values , item ) }
public void addECM ( ECMInfo info ) $F207 ( ecmEffects , info )
protected void loadImage ( String filePath , OMGraphicList ret ) { $F1705 ( file , filePath ) if $F1892 ( file ) { $F1894 ( files , file ) for ( $F1139 ( i , files ) ) { loadImage ( filePath + NUM00 + files [ i ] , ret ) ; } } else { fireStatusUpdate ( LayerStatusEvent . START_WORKING ) ; try { URL fileURL = PropUtils . getResourceOrFileOrURL ( filePath ) ; if ( fileURL != null ) { if ( imageReaderLoaders != null ) { ImageTile imageTile = null ; for ( ImageReaderLoader idl : imageReaderLoaders ) { if ( idl . isLoadable ( filePath ) ) { ImageReader id = idl . getImageReader ( fileURL ) ; ImageTile tmpImageTile = id . getImageTile ( imageCache ) ; if ( imageTile == null ) { imageTile = tmpImageTile ; } else if ( tmpImageTile != null && imageTile instanceof ErrImageTile ) { imageTile = tmpImageTile ; } if ( imageTile != null && ! ( imageTile instanceof ErrImageTile ) ) $F5153 } } if ( imageTile != null ) { addImageToLists ( imageTile , ret , fileURL ) ; } } else { logger . warning ( NUM00 + getName ( ) + NUM00 ) ; } } else $F37856 ( logger , filePath ) } catch ( MalformedURLException murle ) $F845 } }
$F1 protected final boolean writeData ( ByteBuffer data ) { synchronized ( guard ) { GsServerPacket packet = sendMsgQueue . pollFirst ( ) ; $F1933 ( packet , _BOOL ) packet . write ( this , data ) ; return _BOOL ; } }
public static ExportMask createExportMask ( DbClient dbClient , ExportGroup exportGroup , URI sdUri , String maskName ) throws DatabaseException { ExportMask exportMask = new ExportMask $F72 ; exportMask . setId ( URIUtil . createId ( ExportMask . class ) ) ; exportMask . setMaskName ( maskName ) ; exportMask . setStorageDevice ( sdUri ) ; dbClient . createObject ( exportMask ) ; exportGroup . addExportMask ( exportMask . getId ( ) ) ; dbClient . updateObject ( exportGroup ) ; return exportMask ; }
public LogEntry ( String timestamp , String contents ) $F20755 ( this , timestamp , contents )
$F87136 ( data , imageView , bitmapWorkerTask , getBitmapWorkerTask , bitmapData , _BOOL , BuildConfig , Log , TAG )
void replacePolicyInResourceTree ( Policy oldPolicy , Policy newPolicy ) throws PolicyException , SSOException $F19517 ( removePolicyFromResourceTree , oldPolicy , addPolicyToResourceTree , newPolicy )
private Shape [ ] createHorizontalBlock ( double x0 , double width , double y0 , double y1 , boolean inverted ) { Shape [ ] result = new Shape $F380 ; $F152056 ( p00 , y0 , x0 ) Point2D p01 = new $F5047 ( y0 , x0 + width ) ; Point2D p02 = new $F5047 ( p01 . getX ( ) + getXOffset ( ) , p01 . getY ( ) - getYOffset ( ) ) ; Point2D p03 = new $F5047 ( p00 . getX ( ) + getXOffset ( ) , p00 . getY ( ) - getYOffset ( ) ) ; $F152056 ( p0 , y1 , x0 ) Point2D p1 = new $F5047 ( y1 , x0 + width ) ; Point2D p2 = new $F5047 ( p1 . getX ( ) + getXOffset ( ) , p1 . getY ( ) - getYOffset ( ) ) ; Point2D p3 = new $F5047 ( p0 . getX ( ) + getXOffset ( ) , p0 . getY ( ) - getYOffset ( ) ) ; $F13609 ( bottom ) $F76134 ( bottom , p1 ) $F76138 ( bottom , p01 ) $F76138 ( bottom , p02 ) $F76138 ( bottom , p2 ) $F2272 ( bottom ) $F13609 ( top ) $F76134 ( top , p0 ) $F76138 ( top , p00 ) $F76138 ( top , p03 ) $F76138 ( top , p3 ) $F2272 ( top ) $F13609 ( back ) $F76134 ( back , p2 ) $F76138 ( back , p02 ) $F76138 ( back , p03 ) $F76138 ( back , p3 ) $F2272 ( back ) $F13609 ( front ) $F76134 ( front , p0 ) $F76138 ( front , p1 ) $F76138 ( front , p01 ) $F76138 ( front , p00 ) $F2272 ( front ) $F13609 ( left ) $F76134 ( left , p0 ) $F76138 ( left , p1 ) $F76138 ( left , p2 ) $F76138 ( left , p3 ) $F2272 ( left ) $F13609 ( right ) $F76134 ( right , p00 ) $F76138 ( right , p01 ) $F76138 ( right , p02 ) $F76138 ( right , p03 ) $F2272 ( right ) result [ NUM00 ] = bottom ; result [ NUM00 ] = back ; if ( inverted ) { result [ NUM00 ] = right ; result [ NUM00 ] = left ; } else { result [ NUM00 ] = left ; result [ NUM00 ] = right ; } result [ NUM00 ] = top ; result [ NUM00 ] = front ; return result ; }
public OIDCTokens acquireTokensBySecurID ( String username , String passcode , SecurIDRetriever securIdRetriever , TokenSpec tokenSpec ) throws OIDCClientException , OIDCServerException , TokenValidationException , SSLConnectionException { Validate . notEmpty ( username , NUM00 ) ; Validate . notEmpty ( passcode , NUM00 ) ; $F18062 ( Validate , securIdRetriever ) $F18062 ( Validate , tokenSpec ) HttpResponse httpResponse = OIDCClientUtils . handleSecurIDMultiLeggedGrant ( username , passcode , securIdRetriever , tokenSpec , getTokenEndpointURI ( ) , this . clientId , this . holderOfKeyConfig , this . keyStore ) ; return OIDCClientUtils . parseTokenResponse ( httpResponse , this . providerPublicKey , this . issuer , this . clientId , this . clockToleranceInSeconds ) ; }
public void loadNested ( Environment env ) $F127556 ( loadNested , env )
private JSONArray requestAllFileSystems $F72 throws IOException , JSONException { $F19928 ( ret ) for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
private Promise < ActionResponse , ResourceException > internalHandleAction ( String tokenId , Context context , ActionRequest request ) { final String action = request . getAction ( ) ; final ActionHandler actionHandler = actionHandlers . get ( action ) ; if ( actionHandler != null ) { return actionHandler . handle ( tokenId , context , request ) ; } else { $F574 ( message , String , action ) NotSupportedException e = new NotSupportedException ( message ) ; if $F6299 ( LOGGER ) { LOGGER . message ( NUM00 + message , e ) ; } return e . asPromise ( ) ; } }
public int compareTo ( Object obj ) { int diff = - NUM00 ; if ( obj instanceof ParserNotice ) { ParserNotice p2 = ( ParserNotice ) obj ; diff = level - p2 . getLevel ( ) ; if ( diff == NUM00 ) { diff = line - p2 . getLine ( ) ; if ( diff == NUM00 ) { diff = message . compareTo ( p2 . getMessage ( ) ) ; } } } return diff ; }
$F1 $F1431 public $F40262 doHighlighting ( DocList docs , Query query , SolrQueryRequest req , $F806 defaultFields ) throws IOException { SolrParams params = req . getParams ( ) ; if ( ! isHighlightingEnabled ( params ) ) $F1274 SolrIndexSearcher searcher = req . getSearcher ( ) ; IndexSchema schema = searcher . getSchema ( ) ; NamedList fragments = new SimpleOrderedMap $F72 ; $F806 fieldNames = getHighlightFields ( query , req , defaultFields ) ; $F13750 ( fset ) { $F42002 ( f , fieldNames , fset ) SchemaField keyField = schema . getUniqueKeyField ( ) ; if ( null != keyField ) $F29790 ( fset , keyField ) } FastVectorHighlighter fvh = new FastVectorHighlighter ( params . getBool ( HighlightParams . USE_PHRASE_HIGHLIGHTER , _BOOL ) , params . getBool ( HighlightParams . FIELD_MATCH , _BOOL ) ) ; fvh . setPhraseLimit ( params . getInt ( HighlightParams . PHRASE_LIMIT , SolrHighlighter . DEFAULT_PHRASE_LIMIT ) ) ; FieldQuery fieldQuery = fvh . getFieldQuery ( query , searcher . getIndexReader ( ) ) ; DocIterator iterator = docs . iterator ( ) ; for ( $F2277 ( i , docs ) ) { int docId = iterator . nextDoc ( ) ; Document doc = searcher . doc ( docId , fset ) ; NamedList docSummaries = new SimpleOrderedMap $F72 ; for ( String fieldName : fieldNames ) { $F1382 ( fieldName ) if ( useFastVectorHighlighter ( params , schema , fieldName ) ) doHighlightingByFastVectorHighlighter ( fvh , fieldQuery , req , docSummaries , docId , doc , fieldName ) ; else doHighlightingByHighlighter ( query , req , docSummaries , docId , doc , fieldName ) ; } String printId = schema . printableUniqueKey ( doc ) ; fragments . add ( printId == null ? null : printId , docSummaries ) ; } return fragments ; }
protected abstract Map < Integer , FilterOperationDelegateInvoker > doGetInvokerLookup $F72 ;
private IBindingSet aggregate ( final Iterable < IBindingSet > solutions ) { final IBindingSet aggregates = new ContextBindingSet ( context , new ListBindingSet $F72 ) ; if ( groupBy != null ) { final IBindingSet aSolution = solutions . iterator ( ) . next ( ) ; for ( IValueExpression $F1011 expr : groupBy ) { if ( expr instanceof $F169385 ) { final $F169385 var = ( $F169385 ) expr ; $F149932 ( varValue , var , aSolution ) final Constant $F1011 val ; if ( varValue == null ) { val = Constant . errorValue ( ) ; } else { val = new Constant ( varValue . getClass ( ) . cast ( varValue ) ) ; } ; aggregates . set ( var , val ) ; } else if ( expr instanceof IBind $F1011 ) { final IBind $F1011 bindExpr = ( IBind $F1011 ) expr ; final Constant $F1011 val ; $F149932 ( exprValue , bindExpr , aSolution ) if ( exprValue == null ) { val = Constant . errorValue ( ) ; } else { val = new Constant ( exprValue . getClass ( ) . cast ( exprValue ) ) ; } final $F169385 ovar = ( ( IBind $F1011 ) expr ) . getVar ( ) ; aggregates . set ( ovar , val ) ; } } } { final boolean nestedAggregates = groupByState . isNestedAggregates ( ) ; final Iterator < Map . Entry < IAggregate $F1011 , $F169385 > > itr = rewrite . getAggExpr ( ) . entrySet ( ) . iterator ( ) ; while $F2921 ( itr ) { final Map . Entry < IAggregate $F1011 , $F169385 > e = itr . next ( ) ; doAggregate ( e . getKey ( ) , e . getValue ( ) , nestedAggregates , aggregates , solutions , stats ) ; } if $F8415 ( log ) $F49408 ( log , aggregates ) } for ( IValueExpression $F1011 expr : rewrite . getSelect2 ( ) ) { try { expr . get ( aggregates ) ; } catch ( SparqlTypeErrorException ex ) { TypeErrorLog . handleTypeError ( ex , expr , stats ) ; $F598 } catch ( IllegalArgumentException ex ) { TypeErrorLog . handleTypeError ( ex , expr , stats ) ; $F598 } } { final boolean drop ; final IConstraint [ ] having2 = rewrite . getHaving2 ( ) ; if ( having2 != null && ! BOpUtility . isConsistent ( having2 , aggregates ) ) { drop = _BOOL ; } else { drop = _BOOL ; } if $F17747 ( log ) log . info ( ( drop ? NUM00 : NUM00 ) + NUM00 + aggregates ) ; $F5972 ( drop ) } final IBindingSet out ; if ( groupBy == null ) { assert ! aggregates . containsErrorValues ( ) ; out = aggregates . copy ( groupByState . getSelectVars ( ) . toArray ( new IVariable $F380 ) ) ; } else { out = aggregates . copyMinusErrors ( groupByState . getSelectVars ( ) . toArray ( new IVariable $F380 ) ) ; } return out ; }
public static void deleteCollection ( String host , String collection ) throws Exception { String deleteCollectionTemplate = NUM00 ; String deleteCollectionCommand = String . format ( deleteCollectionTemplate , host , DEFAULT_SOLR_PORT , collection ) ; executeSolrCommand ( deleteCollectionCommand ) ; }
private Iterable < FragmentConstructor > createConstructors $F72 { return Collections . unmodifiableList ( Arrays . asList ( new BiomeDataConstructor ( Resolution . QUARTER ) , new EndIslandsConstructor $F72 , new ImageConstructor ( Resolution . QUARTER , LayerIds . BACKGROUND ) , new ImageConstructor ( Resolution . CHUNK , LayerIds . SLIME ) ) ) ; }
public static $F4203 int copy ( $F95121 ( from ) , int first , int last , $F5675 to ) { int i = first ; for ( ; i < last ; i ++ ) $F62006 ( to , from , i ) return i ; }
$F5466 public static HKey psiKey ( $F1113 PsiMethod psiMethod , $F1113 Direction direction , $F1113 MessageDigest md ) { final PsiClass psiClass = PsiTreeUtil . getParentOfType ( psiMethod , PsiClass . class , _BOOL ) ; $F1338 ( psiClass ) $F33012 ( classDigest , psiClassDigest , psiClass , md ) $F1338 ( classDigest ) $F33012 ( sigDigest , methodDigest , psiMethod , md ) $F1338 ( sigDigest ) $F2175 ( digest , HASH_SIZE ) $F135 ( System , classDigest , digest , CLASS_HASH_SIZE ) $F6483 ( System , sigDigest , digest , CLASS_HASH_SIZE , SIGNATURE_HASH_SIZE ) return new HKey ( digest , mkDirectionKey ( direction ) , _BOOL ) ; }
public static boolean isSdCardMounted $F72 { $F139156 ( status , Environment ) if $F139157 ( status , Environment ) return _BOOL ; return _BOOL ; }
private void parseResource ( final Element resourceElement , final Collection $F25924 resources ) { final String tagName = resourceElement . getTagName ( ) ; final String uri = resourceElement . getTextContent ( ) ; if $F1238 ( TAG_GROUP_REF , tagName ) $F42502 ( resources , getResourcesForGroup , uri ) if ( getResourceType ( resourceElement ) != null ) { final Resource resource = createResource ( resourceElement ) ; $F7028 ( LOG , resource ) resources . add ( resource ) ; } }
$F1 public void licenceFile ( String textToShow , File licenceFile ) throws CancelException { try { $F197755 ( content , licenceFile ) $F24475 ( writer ) IOUtils . copy ( content , writer , NUM00 ) ; $F59 ( content ) $F10665 ( licence , textToShow , writer ) } catch ( IOException e ) { throw new ScriptFailureException ( NUM00 , e ) ; } }
public int meanAllocation $F72 { $F94561 ( m_slotAllocations ) return $F2116 ( m_sizeAllocations , m_slotAllocations ) ; }
public void testTimeZones $F72 throws Exception { $F13404 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) $F16824 ( tzMap ) for ( $F3465 ( key , tzMap ) ) { assertEquals ( NUM00 + key + NUM00 , tzMap . get ( key ) , TimeUtil . getCanonicalTimezone ( key , null ) ) ; } for ( String tz : TimeZone . getAvailableIDs ( ) ) { String canonicalTZ ; try { canonicalTZ = TimeUtil . getCanonicalTimezone ( tz , null ) ; } catch ( SQLException e ) { canonicalTZ = null ; } assertNotNull ( NUM00 + tz + NUM00 , canonicalTZ ) ; } }
$F1 public String toString $F72 { return MessageFormat . format ( $F38 , getLDAPFilter ( ) , StringUtils . join ( requestedAttributes , NUM00 ) ) ; }
public static void convolveAndTranspose ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha , boolean premultiply , boolean unpremultiply , int edgeAction ) { $F5415 matrix = kernel . getKernelData ( null ) ; $F2049 ( cols , kernel ) int cols2 = cols / NUM00 ; for ( $F119 ( y , height ) ) { int index = y ; int ioffset = y * width ; for ( $F119 ( x , width ) ) { float r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; int moffset = cols2 ; for ( $F142929 ( col , cols2 ) ) { float f = matrix [ moffset + col ] ; if ( f != NUM00 ) { int ix = x + col ; if ( ix < NUM00 ) { if ( edgeAction == CLAMP_EDGES ) ix = NUM00 ; else if ( edgeAction == WRAP_EDGES ) ix = ( x + width ) % width ; } else if ( ix >= width ) { if ( edgeAction == CLAMP_EDGES ) ix = width - NUM00 ; else if ( edgeAction == WRAP_EDGES ) ix = ( x + width ) % width ; } int rgb = inPixels [ ioffset + ix ] ; $F52249 ( pa , rgb ) $F52249 ( pr , rgb ) $F52249 ( pg , rgb ) int pb = rgb & NUM00 ; if ( premultiply ) { float a255 = pa * $F52906 ; pr *= a255 ; pg *= a255 ; pb *= a255 ; } a += f * pa ; r += f * pr ; g += f * pg ; b += f * pb ; } } if ( unpremultiply && a != NUM00 && a != NUM00 ) { float f = NUM00 / a ; r *= f ; g *= f ; b *= f ; } int ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; $F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ index ] = $F38048 ( ia , ir , ig , ib ) ; index += height ; } } }
public void testCase6 $F72 { $F7829 byte $F3014 = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public void animateProgressFill ( int animateTo ) { mAnimationHandler . removeMessages ( NUM00 ) ; if ( animateTo > mMax || animateTo < NUM00 ) $F84174 ( String , animateTo , mMax ) mAnimationHandler . setAnimateTo ( animateTo ) ; mAnimationHandler . sendEmptyMessage ( NUM00 ) ; invalidate ( ) ; }
static boolean isRegistered ( ObjectName objectName ) { Set $F50005 registeredObjectNames = mBeanServer . queryNames ( objectName , null ) ; $F3386 ( registeredObjectNames ) }
public $F4203 PushableLazyFutureStream $F4203 futureStream ( final LazyReact s ) { final $F48532 q = createQueue ( ) ; return new PushableLazyFutureStream $F4203 ( q , s . fromStream ( q . stream ( ) ) ) ; }
public $F96 convertHexStringToBinary ( String hexString ) throws IllegalArgumentException { $F115 ( length , hexString ) if ( length % NUM00 != NUM00 ) $F20855 ( length , hexString ) $F96 binary = new byte [ length / NUM00 ] ; for ( $F6225 ( i , length ) ) { $F1280 ( highBitsChar , hexString , i ) $F17494 ( lowBitsChar , hexString , i ) int highBits = hexCharToInt ( highBitsChar , hexString ) < < NUM00 ; int lowBits = hexCharToInt ( lowBitsChar , hexString ) ; binary [ i / NUM00 ] = ( byte ) ( highBits + lowBits ) ; } return binary ; }
public void writeField ( final String name , final short value ) throws $F3258 $F261761 ( writeField , name , Short , value )
public static ResultSet select ( Connection conn , String sql ) throws SQLException { Statement stat = conn . createStatement ( ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; return stat . executeQuery ( sql ) ; }
public static void writeSetOfLongs ( Set set , boolean hasLongIDs , DataOutput out ) throws IOException { if ( set == null ) { $F150188 ( out ) } else { $F27636 ( out , set ) out . writeBoolean ( hasLongIDs ) ; for ( $F2774 ( it , set ) ) { Long l = ( Long ) it . next ( ) ; if ( hasLongIDs ) { out . writeLong ( l . longValue ( ) ) ; } else { out . writeInt ( ( int ) l . longValue ( ) ) ; } } } }
private void restoreWidget ( Key key , $F96 buffer , int dataSize ) throws IOException { if ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; Widget widget = unpackProto ( new Widget $F72 , buffer , dataSize ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + widget . provider ) ; if ( widget . icon . data != null ) { Bitmap icon = BitmapFactory . decodeByteArray ( widget . icon . data , NUM00 , widget . icon . data . length ) ; if ( icon == null ) { Log . w ( TAG , NUM00 + key . name ) ; } else { mIconCache . preloadIcon ( ComponentName . unflattenFromString ( widget . provider ) , icon , widget . icon . dpi , widget . label , mUserSerial , mIdp ) ; } } widgetSizes . add ( widget . provider + NUM00 + NUM00 + NUM00 + NUM00 ) ; }
$F26560 ( requestMethod , responseCode , Request , HttpStatus )
public void considerRegionXRegion ( GeoRegion r , GeoRegion region ) { GeoArray rBoundary = r . getPoints ( ) ; Geo rPoint = rBoundary . get ( NUM00 , new Geo $F72 ) ; GeoArray regionBoundary = region . getPoints ( ) ; Geo regionPoint = regionBoundary . get ( NUM00 , new Geo $F72 ) ; if ( Intersection . isPointInPolygon ( rPoint , regionBoundary ) || Intersection . isPointInPolygon ( regionPoint , rBoundary ) ) { collector . collect ( r , region ) ; } else { for ( GeoPath . SegmentIterator pit = r . segmentIterator ( ) ; pit . hasNext ( ) ; ) { GeoSegment seg = pit . nextSegment ( ) ; if ( filter . preConsider ( seg , region ) && considerSegmentXRegion ( seg , region ) ) { collector . collect ( seg , region ) ; $F665 } } } }
private XPathFactory loadFromServicesFile $F63851 ( uri , resourceName , in ) { $F63852 ( debug , debugPrintln , resourceName ) BufferedReader rd ; try { rd = new BufferedReader ( new InputStreamReader ( in , NUM00 ) , DEFAULT_LINE_LENGTH ) ; } catch ( $F42439 e ) { rd = new BufferedReader ( new InputStreamReader ( in ) , DEFAULT_LINE_LENGTH ) ; } String factoryClassName ; XPathFactory resultFactory = null ; while ( _BOOL ) { try $F63868 ( factoryClassName , rd ) catch ( IOException x ) $F5153 if ( factoryClassName != null ) { $F1384 ( hashIndex , factoryClassName ) $F63871 ( hashIndex , factoryClassName ) $F1382 ( factoryClassName ) $F63872 ( factoryClassName ) try { XPathFactory foundFactory = createInstance ( factoryClassName ) ; if ( foundFactory . isObjectModelSupported ( uri ) ) $F3468 ( resultFactory , foundFactory ) } $F63878 } else $F5153 } IoUtils . closeQuietly ( rd ) ; return resultFactory ; }
private char foldCase ( char ch ) { if ( ch < NUM00 ) { if $F27695 ( ch ) { return $F27698 ( ch ) ; } return ch ; } return $F170663 ( Character , ch ) ; }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= NUM00 || h <= NUM00 ) { throw new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new ByteBandedRaster ( sm , $F69159 ) ; }
$F156045 ( msg , x , super , this )
@ TargetApi ( VERSION_CODES . LOLLIPOP ) public static void reveal ( final View view , int cx , int cy ) { if $F931 ( hasLollipop ) { $F29549 ( view , View ) $F665 } int finalRadius = Math . max ( $F13695 ( view ) ) ; Animator animator = ViewAnimationUtils . createCircularReveal ( view , cx , cy , NUM00 , finalRadius ) ; $F29549 ( view , View ) $F2346 ( animator ) }
public TopNMetric ( TopNMetricType type , String previousStop , SortDirection order ) { this ( type , previousStop ) ; if ( order == SortDirection . ASC ) { this . type = TopNMetricType . INVERTED ; this . nested = Optional . of ( new TopNMetric ( type , previousStop ) ) ; this . previousStop = Optional . empty ( ) ; } }
public void removeSupportedOptions $F32029 ( unmatchedProcessorOptions ) $F111938 ( unmatchedProcessorOptions , supportedOptionNames )
protected void subscribe $F72 { if ( sampleClientSub == null ) { try { sampleClientSub = new SampleAsyncCallback ( url , clientIdSub , cleanSession , quietMode , userName , password ) ; } catch ( MqttException e ) $F302 ( e ) } if ( sampleClientSub != null ) { String topic = NUM00 ; int qos = NUM00 ; try { sampleClientSub . subscribe ( topic , qos ) ; } $F86388 ( e ) } }
private boolean shouldCrop ( int width , int height ) { int pixelError = NUM00 ; pixelError += Math . round ( Math . max ( width , height ) / NUM00 ) ; return ( mMaxResultImageSizeX > NUM00 && mMaxResultImageSizeY > NUM00 ) || Math . abs ( mCropRect . left - mCurrentImageRect . left ) > pixelError || Math . abs ( mCropRect . top - mCurrentImageRect . top ) > pixelError || Math . abs ( mCropRect . bottom - mCurrentImageRect . bottom ) > pixelError || Math . abs ( mCropRect . right - mCurrentImageRect . right ) > pixelError ; }
public boolean exists $F72 $F4915 ( doAccess , F_OK )
$F1309 public boolean isFillBelowLine $F72 $F32878 ( mFillBelowLine )
public ShapeTileBox bounding_box $F72 { $F60730 ( bounding_box ) PlaPointFloat start_corner = start_point_approx ( ) ; PlaPointFloat end_corner = end_point_approx ( ) ; double llx = Math . min ( start_corner . v_x , end_corner . v_x ) ; double lly = Math . min ( start_corner . v_y , end_corner . v_y ) ; double urx = Math . max ( start_corner . v_x , end_corner . v_x ) ; double ury = Math . max ( start_corner . v_y , end_corner . v_y ) ; PlaPointInt lower_left = new PlaPointInt ( Math . floor ( llx ) , Math . floor ( lly ) ) ; PlaPointInt upper_right = new PlaPointInt ( Math . ceil ( urx ) , Math . ceil ( ury ) ) ; bounding_box = new ShapeTileBox ( lower_left , upper_right ) ; return bounding_box ; }
public boolean isValidAttachmentPoint ( DatapathId switchDPID , OFPort switchPort ) { if ( topology . isAttachmentPointPort ( switchDPID , switchPort ) == _BOOL ) return _BOOL ; if ( suppressAPs . contains ( new SwitchPort ( switchDPID , switchPort ) ) ) return _BOOL ; return _BOOL ; }
public void testClasspathWar $F72 throws Exception $F123330 ( url , System , expected , PingUtils , logger )
protected abstract boolean isNullable $F72 ;
public vec3 normalize $F72 { $F375891 ( x , this ) $F375891 ( y , this ) $F375891 ( z , this ) float s = NUM00 / $F16207 ( Math , x , y , z ) ; this . m [ NUM00 ] = x * s ; this . m [ NUM00 ] = y * s ; this . m [ NUM00 ] = z * s ; return this ; }
$F1 public P readPage ( int pageID ) { try { countRead ( ) ; long offset = ( ( long ) ( header . getReservedPages ( ) + pageID ) ) * ( long ) pageSize ; $F2175 ( buffer , pageSize ) file . seek ( offset ) ; file . read ( buffer ) ; return byteArrayToPage ( buffer ) ; } catch ( IOException e ) { throw new RuntimeException ( NUM00 + pageID + NUM00 , e ) ; } }
public void addActionListener ( ActionListener listener ) { forwardProjectionButton . addActionListener ( listener ) ; backProjectionButton . addActionListener ( listener ) ; }
void writeDataToFileLocked ( RandomAccessFile file , boolean addMayo , boolean addTomato , int whichFilling ) throws IOException { $F4910 ( file ) file . writeInt ( whichFilling ) ; file . writeBoolean ( addMayo ) ; file . writeBoolean ( addTomato ) ; Log . v ( TAG , NUM00 + addMayo + NUM00 + addTomato + NUM00 + whichFilling ) ; }
static $F24901 mapKeyAndValueTypes ( Type context , $F6969 contextRawType ) { if ( context == Properties . class ) return new Type [ ] { $F10062 , $F10062 } ; Type mapType = getSupertype ( context , contextRawType , $F64671 ) ; if ( mapType instanceof ParameterizedType ) { ParameterizedType mapParameterizedType = ( ParameterizedType ) mapType ; return mapParameterizedType . getActualTypeArguments ( ) ; } return new Type [ ] { $F12222 , $F12222 } ; }
static AggregatedHttpMessage of ( HttpHeaders headers , HttpData content , HttpHeaders trailingHeaders ) { return of ( Collections . emptyList ( ) , headers , content , trailingHeaders ) ; }
public static boolean isLetter ( char c ) { return Character . isLetter ( c ) ; }
protected List $F68180 createChildList $F72 { Branch branch = getXmlBranch ( ) ; int size = branch . nodeCount ( ) ; List $F68180 childList = new ArrayList $F68180 ( size ) ; for ( $F119 ( i , size ) ) { Node node = branch . node ( i ) ; if ( node instanceof CharacterData ) { $F45667 ( text , node ) $F4322 ( text ) $F1382 ( text ) if $F71860 ( text ) $F1448 } $F3761 ( childList , createChildTreeNode , node ) } return childList ; }
public $F120453 mayAliases ( Value v , Unit u ) { $F120453 res = new HashSet $F120452 $F72 ; Set < $F120453 > flow = getFlowBefore ( u ) ; for ( $F120453 set : flow ) { if $F105 ( set , v ) res . addAll ( set ) ; } return res ; }
$F5466 private static String read ( $F4170 SocketChannel socket , $F4170 $F96 buffer ) throws IOException { ByteBuffer buf = ByteBuffer . wrap ( buffer , NUM00 , buffer . length ) ; while ( buf . position ( ) != buf . limit ( ) ) { int count ; count = socket . read ( buf ) ; $F28956 ( count ) } try { return new String ( buffer , NUM00 , buf . position ( ) , AdbHelper . DEFAULT_ENCODING ) ; } catch ( UnsupportedEncodingException e ) $F1337 }
public static DateTimeUnit createLocalDateUnitInstance ( Date date , org . hisp . dhis . calendar . Calendar calendar ) { return calendar . fromIso ( DateTimeUnit . fromJdkDate ( date ) ) ; }
public static boolean equal ( double a , double b ) { return $F39297 ( Math , a , b , EPSILON ) ; }
$F1 public void addClassAnnotation $F21196 ( buffer , offset , length ) { String annType = new String ( buffer , offset , length ) ; if $F105 ( _annTypes , annType ) { addClass ( _className ) ; } }
public Process exec ( $F806 taintedCommand , $F806 taintedEnvironment , File workingDirectory , boolean redirectErrorStream ) throws IOException { $F896 ( taintedCommand ) if $F9634 ( taintedCommand ) $F10547 $F806 command = taintedCommand . clone ( ) ; $F806 environment = taintedEnvironment != null ? taintedEnvironment . clone ( ) : null ; for ( $F1139 ( i , command ) ) { if ( command [ i ] == null ) { throw new NullPointerException ( NUM00 + i + NUM00 ) ; } } if ( environment != null ) { for ( $F1139 ( i , environment ) ) { if ( environment [ i ] == null ) { throw new NullPointerException ( NUM00 + i + NUM00 ) ; } } } FileDescriptor $F23044 ( in ) ; FileDescriptor $F23044 ( out ) ; FileDescriptor $F23044 ( err ) ; String workingPath = ( workingDirectory == null ) ? null : workingDirectory . getPath ( ) ; synchronized ( processReferences ) { int pid ; try { pid = exec ( command , environment , workingPath , in , out , err , redirectErrorStream ) ; } catch ( IOException e ) { IOException wrapper = new IOException ( NUM00 + NUM00 + Arrays . toString ( command ) + NUM00 + workingDirectory + NUM00 + Arrays . toString ( environment ) ) ; wrapper . initCause ( e ) ; throw wrapper ; } ProcessImpl process = new ProcessImpl ( pid , in , out , err ) ; ProcessReference processReference = new ProcessReference ( process , referenceQueue ) ; processReferences . put ( pid , processReference ) ; $F165 ( processReferences ) return process ; } }
static PathPart makeAbsolute ( PathPart oldPart ) { $F1431 boolean encodedCached = oldPart . encoded != NOT_CACHED ; String oldPath = encodedCached ? oldPart . encoded : oldPart . decoded ; if ( $F6035 ( oldPath ) || oldPath . startsWith ( NUM00 ) ) { return oldPart ; } String newEncoded = encodedCached ? NUM00 + oldPart . encoded : NOT_CACHED ; $F1431 boolean decodedCached = oldPart . decoded != NOT_CACHED ; String newDecoded = decodedCached ? NUM00 + oldPart . decoded : NOT_CACHED ; return new PathPart ( newEncoded , newDecoded ) ; }
public static $F2027 splitGt ( String gt ) { $F22998 ( gtlen , gt ) if ( gtlen == NUM00 ) { return new int [ ] { $F95813 ( alleleId , gt ) } ; } else { $F11844 ( result ) int ploid = NUM00 ; int allelestart = NUM00 ; for ( $F119 ( i , gtlen ) ) { $F1090 ( c , gt , i ) if ( c == PHASED_SEPARATOR || c == UNPHASED_SEPARATOR ) { if ( ploid == result . length ) { result = $F30258 ( Arrays , result ) ; } result [ ploid ++ ] = alleleId ( gt , allelestart , i - allelestart ) ; allelestart = i + NUM00 ; } } if ( allelestart < gtlen ) { if ( ploid == result . length ) { result = $F30258 ( Arrays , result ) ; } result [ ploid ++ ] = alleleId ( gt , allelestart , gtlen - allelestart ) ; } if ( ploid < result . length ) { $F8003 ( result , Arrays , ploid ) } if ( ploid == NUM00 ) { $F58968 ( gt ) } return result ; } }
public void testBug18041 $F72 throws Exception { if $F57555 ( versionMeetsMinimum ) { createTable ( NUM00 , NUM00 ) ; $F2697 ( props ) $F2699 ( props ) $F2699 ( props ) Connection truncConn = null ; PreparedStatement stm = null ; try { truncConn = getConnectionWithProps ( props ) ; $F57556 ( stm , truncConn ) $F270830 ( stm ) $F252944 ( stm ) $F3917 ( stm ) fail ( NUM00 ) ; } catch ( DataTruncation truncEx ) $F845 $F14364 ( truncConn ) } }
public void deleteKernel ( String name ) { Kernel kernel = getKernelByName ( name ) ; if ( kernel != null ) { $F355 ( kernel ) $F10192 ( oldSize , Integer , _kernelHashTable ) _kernelHashTable . remove ( name ) ; $F10197 ( setDirtyAndFirePropertyChange , KERNEL_LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer , _kernelHashTable ) } }
protected boolean shouldStop $F72 { return isPaused ( ) || isKilled ( ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public Builder addTokenFilter $F5805 ( name , params ) throws IOException { $F10578 ( Objects , name ) tokenFilters . add ( applyResourceLoader ( TokenFilterFactory . forName ( name , applyDefaultParams ( params ) ) ) ) ; componentsAdded = _BOOL ; return this ; }
public StyledToolTipUI ( Style style ) { this . style = style ; border = BorderFactory . createLineBorder ( style . getShadowColor ( ) ) ; }
public final void addElements ( Object value , int numberOfElements ) { if ( ( m_firstFree + numberOfElements ) >= m_mapSize ) { m_mapSize += ( m_blocksize + numberOfElements ) ; $F45481 ( m_mapSize ) $F10236 ( System , m_map , newMap , m_firstFree ) m_map = newMap ; } $F45484 ( i , numberOfElements , m_map , m_firstFree , value ) }
public void actionPerformed ( ActionEvent e ) { super . actionPerformed ( e ) ; $F35563 ( cmd , e ) if ( cmd == showMapsCommand ) { JCheckBox mapCheck = ( JCheckBox ) e . getSource ( ) ; viewAttributes . showMaps = mapCheck . isSelected ( ) ; repaint ( ) ; } else if ( cmd == showInfoCommand ) { JCheckBox infoCheck = ( JCheckBox ) e . getSource ( ) ; boolean showInfo = infoCheck . isSelected ( ) ; viewAttributes . showInfo = showInfo ; showSubframes ( showInfo ) ; doPrepare ( ) ; } else if ( cmd == lockSeriesCommand ) { JCheckBox lockCheck = ( JCheckBox ) e . getSource ( ) ; boolean locked = lockCheck . isSelected ( ) ; if ( locked ) { List < RpfCoverageBox > coverageBoxes = getCoverageBoxes ( ) ; String seriesName ; if $F4251 ( coverageBoxes ) { seriesName = RpfViewAttributes . ANY ; } else { seriesName = coverageBoxes . get ( NUM00 ) . chartCode ; } if ( seriesName == null ) { seriesName = RpfViewAttributes . ANY ; fireRequestMessage ( NUM00 + getName ( ) + NUM00 ) ; } lockCheck . setText ( lockedButtonTitle + NUM00 + seriesName ) ; viewAttributes . chartSeries = seriesName ; } else { lockCheck . setText ( unlockedButtonTitle ) ; viewAttributes . chartSeries = RpfViewAttributes . ANY ; } } else if ( cmd == showCoverageCommand ) { if ( coverage != null ) { JCheckBox coverageCheck = ( JCheckBox ) e . getSource ( ) ; coverage . setInUse ( coverageCheck . isSelected ( ) ) ; doPrepare ( ) ; } } else $F5795 ( doPrepare ) }
$F1 public void run $F72 { if ( mDelay > NUM00 ) { try $F7595 ( Thread , mDelay ) catch ( InterruptedException e ) { LogImpl . w ( TAG , getName ( ) + NUM00 + e . getMessage ( ) ) ; } } if ( mParentTask != null ) { synchronized ( this ) { try $F5795 ( wait ) catch ( InterruptedException e ) { LogImpl . w ( TAG , getName ( ) + NUM00 + e . getMessage ( ) ) ; } } } mStatus = Status . STATUS_EXECUTING ; $F657 ( startTime , System ) start ( ) ; $F657 ( endTime , System ) LogImpl . i ( TAG , getName ( ) + NUM00 + ( endTime - startTime ) ) ; if ( mDoneSignal != null ) $F94601 ( mDoneSignal ) if ( mChildTask != null ) { $F8073 ( mChildTask ) } mStatus = Status . STATUS_DONE ; }
public boolean has ( final String name ) { return $F241801 ( contents , name ) ; }
public void stop $F72 { isAlive . set ( _BOOL ) ; for ( KafkaConsumer < $F96 , $F96 > c : consumers . values ( ) ) { $F164395 ( c ) } $F5832 ( kafkaConsumerExecutor ) $F725 ( holdingBuffer ) IOUtils . closeQuietly ( this ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public String consumeElementSelector $F72 { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( $F7288 ) ) ) pos ++ ; $F6669 ( queue , start , pos ) }
$F1431 public LongMap ( int initialCapacity , float loadFactor ) { $F81428 ( initialCapacity ) if ( initialCapacity > $F152871 ) $F11416 ( initialCapacity ) capacity = nextPowerOfTwo ( initialCapacity ) ; $F255788 ( loadFactor ) this . loadFactor = loadFactor ; $F53239 ( threshold , capacity , loadFactor ) mask = capacity - NUM00 ; hashShift = NUM00 - Long . numberOfTrailingZeros ( capacity ) ; stashCapacity = Math . max ( NUM00 , ( int ) Math . ceil ( Math . log ( capacity ) ) * NUM00 ) ; pushIterations = Math . max ( Math . min ( capacity , NUM00 ) , $F86010 ( Math , capacity ) / NUM00 ) ; keyTable = new long [ capacity + stashCapacity ] ; valueTable = ( $F25667 ) new Object [ keyTable . length ] ; }
public void endAttributes $F72 throws SAXException { String uri = getCurrentElementUri ( ) ; String local = getCurrentElementLocal ( ) ; $F118492 ( prefix , nsContext , uri ) _assert ( prefix != null ) ; String qname ; if $F35625 ( prefix ) qname = prefix + NUM00 + local ; else qname = local ; nsContext . iterateDeclaredPrefixes ( startPrefixCallback ) ; writer . startElement ( uri , local , qname , attributes ) ; $F725 ( attributes ) $F4910 ( textBuf ) }
private String abbreviateScript ( String script ) { $F1338 ( script ) if $F71860 ( script ) { return script ; } return NUM00 + $F606 ( script ) ; }
public static void expandID ( String numberString , WordRelation wordRelation , Item tokenItem ) { $F1749 ( numberDigits , numberString ) if ( ( numberDigits == NUM00 ) && $F4432 ( numberString ) && $F4432 ( numberString ) ) { if $F4432 ( numberString ) { expandNumber ( numberString , wordRelation , tokenItem ) ; } else { expandNumber ( $F606 ( numberString ) , wordRelation , tokenItem ) ; $F56208 ( wordRelation , tokenItem ) } } else if ( ( numberDigits == NUM00 ) && $F4432 ( numberString ) ) { $F56208 ( wordRelation , tokenItem ) expandDigits ( $F606 ( numberString ) , wordRelation , tokenItem ) ; } else if ( ( numberDigits == NUM00 && $F4431 ( numberString ) ) || numberDigits < NUM00 ) { expandNumber ( numberString , wordRelation , tokenItem ) ; } else if ( numberDigits % NUM00 == NUM00 ) { $F63127 ( firstDigit , digit2num , numberString ) wordRelation . addWord ( tokenItem , firstDigit ) ; expandID ( numberString . substring ( NUM00 , numberDigits ) , wordRelation , tokenItem ) ; } else { expandNumber ( $F606 ( numberString ) , wordRelation , tokenItem ) ; expandID ( numberString . substring ( NUM00 , numberDigits ) , wordRelation , tokenItem ) ; } }
private static void unregisterMbeansFromPropsFile ( MBeanServer mBeanServer ) throws Exception { JamonPropertiesLoader loader = new JamonPropertiesLoader $F72 ; $F3803 jamonJmxBeanProperties = loader . getMxBeans ( ) ; $F13712 ( iter , jamonJmxBeanProperties ) while $F2921 ( iter ) { $F13714 ( beanInfo , iter ) MonitorMXBean mXbean = MonitorMXBeanFactory . create ( beanInfo ) ; mBeanServer . unregisterMBean ( MonitorMXBeanFactory . getObjectName ( mXbean ) ) ; MonitorMXBean mXbeanDelta = MonitorMXBeanFactory . createDelta ( beanInfo ) ; mBeanServer . unregisterMBean ( MonitorMXBeanFactory . getDeltaObjectName ( mXbeanDelta ) ) ; } }
Source popImportSource $F72 { return ( Source ) m_importSourceStack . pop ( ) ; }
public static Date zeroTimeDate ( Date date ) { final GregorianCalendar $F13062 ( gregorianCalendar ) ; gregorianCalendar . setTime ( date ) ; $F118880 ( gregorianCalendar , Calendar ) $F118882 ( gregorianCalendar , Calendar ) $F118884 ( gregorianCalendar , Calendar ) $F104560 ( gregorianCalendar , Calendar ) $F11894 ( gregorianCalendar ) }
public static final void writeMapXml ( Map val , String name , XmlSerializer out ) throws $F18821 { $F18827 ( val , out ) Set s = val . entrySet ( ) ; $F10531 ( i , s ) $F18823 ( out ) $F18831 ( name , out ) while $F2921 ( i ) { $F53089 e = ( $F53089 ) i . next ( ) ; writeValueXml ( e . getValue ( ) , $F123408 ( e ) , out ) ; } $F18825 ( out ) }
protected void export $F72 { int retVal ; File file ; AbstractFileSaver saver ; if ( m_FileChooser == null ) m_FileChooser = GUIHelper . newConverterFileChooser ( ) ; retVal = m_FileChooser . showSaveDialog ( this ) ; $F35873 ( retVal , ConverterFileChooser ) file = m_FileChooser . getSelectedFile ( ) ; saver = m_FileChooser . getSaver ( ) ; try { saver . setInstances ( m_DataPanel . getInstances ( ) ) ; saver . writeBatch ( ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( this , NUM00 + file + NUM00 + Utils . throwableToString ( e ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } }
public void sort ( int i ) { Arrays . sort ( vector [ i ] , NUM00 , sizes . get ( i ) ) ; }
private void createMapWhenNeeded $F72 { $F7254 ( isMapInitialized ) if ( resourceBundle != null ) { $F23720 ( set , resourceBundle ) topLevelMap = new $F530 $F716 ( set ) ; for ( String key : set ) { Object value = resourceBundle . getObject ( key ) ; topLevelMap . put ( key , value ) ; } } else { topLevelMap = new $F530 $F989 ; } $F545 ( topLevelMap , resourceBundle ) isMapInitialized = _BOOL ; }
public static VectorClock increment ( VectorClock clock , int ... nodes ) { for ( int n : nodes ) clock = clock . incremented ( ( short ) n , System . currentTimeMillis ( ) ) ; return clock ; }
$F1 public String toString $F72 { $F68665 ( set ) }
void createHeapPhiInstruction ( BasicBlock bb , $F211924 H ) { Instruction s = makePhiInstruction ( H , bb ) ; $F241341 heapPhis = heapPhi . get ( bb ) ; if ( heapPhis == null ) { heapPhis = new $F241341 $F989 ; heapPhi . put ( bb , heapPhis ) ; } heapPhis . add ( s ) ; registerInstruction ( s , bb ) ; }
protected void printTime ( String s ) { $F108456 ( dateFormat ) println ( dateFormat . format ( new $F22273 $F72 ) + NUM00 + s ) ; }
public static int determineSampleSize ( ImageRequest imageRequest , EncodedImage encodedImage ) { if ( ! EncodedImage . isMetaDataAvailable ( encodedImage ) ) { return DEFAULT_SAMPLE_SIZE ; } float ratio = determineDownsampleRatio ( imageRequest , encodedImage ) ; int sampleSize ; if ( encodedImage . getImageFormat ( ) == ImageFormat . JPEG ) { sampleSize = ratioToSampleSizeJPEG ( ratio ) ; } else { sampleSize = ratioToSampleSize ( ratio ) ; } int maxDimension = Math . max ( encodedImage . getHeight ( ) , encodedImage . getWidth ( ) ) ; while ( maxDimension / sampleSize > MAX_BITMAP_SIZE ) { if ( encodedImage . getImageFormat ( ) == ImageFormat . JPEG ) { sampleSize *= NUM00 ; } else { sampleSize ++ ; } } return sampleSize ; }
public Skeleton ( PrintWriter out ) $F6988 ( this , out )
public void disconnect $F72 { if ( conn != null ) { try $F881 ( conn ) catch ( SQLException e ) $F23016 ( logger , e ) } try $F5795 ( closeBinlog ) $F60644 ( logger , e ) }
$F1 public int read $F24576 ( b , off , len ) throws IOException { $F24020 ( n , in , b , off , len ) if ( n == - NUM00 ) $F5795 ( throwIfFalseEOF ) else { bytesRead += n ; } return n ; }
$F1 public Generator $F80240 construct $F4374 ( args ) { return new IntegerGenerator ( $F63082 ( Integer , args ) , $F63082 ( Integer , args ) ) ; }
public SpatialStrategy ( SpatialContext ctx , String fieldName ) { $F19273 ( ctx ) this . ctx = ctx ; if $F6036 ( fieldName ) $F824 this . fieldName = fieldName ; }
public void dispose $F72 { $F263153 ( keys ) $F355 ( super ) }
public boolean isFixedDisk ( String letter ) { if $F35625 ( letter ) $F11416 ( letter ) $F226746 ( drive , Character , letter ) if $F19298 ( drive ) $F11416 ( drive ) return getDriveType ( drive + NUM00 ) == NUM00 ; }
$F25079 ( deltaY , mPtrIndicator , DEBUG , PtrCLog , LOG_TAG , String , to , PtrIndicator , change , updatePos )
private $F131 compile ( String path ) { $F19151 ( list ) if ( path == null ) $F340590 ( list ) $F17727 ( tok , path ) while $F14498 ( tok ) { $F8095 ( token , tok ) $F156 ( op , OpEnum , token ) if ( op == null ) $F35098 ( path ) list . add ( op ) ; if ( op == OpEnum . RELATION ) { list . add ( tok . nextToken ( ) ) ; } } $F3537 ( list ) }
private void splitChunk ( final MemoryChunk chunk , final long address ) { $F173719 ( oldData , chunk ) final $F96 newData1 = new byte [ ( int ) ( address - chunk . getAddress ( ) ) ] ; final $F96 newData2 = new byte [ ( chunk . getLength ( ) - newData1 . length ) ] ; $F5634 ( System , oldData , newData1 ) System . arraycopy ( oldData , oldData . length - newData2 . length , newData2 , NUM00 , newData2 . length ) ; final MemoryChunk newChunk1 = new MemoryChunk ( chunk . getAddress ( ) , newData1 ) ; final MemoryChunk newChunk2 = new MemoryChunk ( ( chunk . getAddress ( ) + chunk . getLength ( ) ) - newData2 . length , newData2 ) ; removeChunk ( chunk ) ; insertChunk ( newChunk1 ) ; insertChunk ( newChunk2 ) ; }
public boolean isDirty $F72 { return dirty ; }
private Vector showTextFixedWidth ( String text , int align ) { $F6518 ( comps ) if ( $F158251 ( text ) ) { return comps ; } int spaceW = width - x ; Vector words = getWords ( text , align , _BOOL ) ; if $F3817 ( words ) { int w = NUM00 ; String wordStr = NUM00 ; if ( ( CSSParser . isWhiteSpace ( text . charAt ( NUM00 ) ) ) && ( curLine . getComponentCount ( ) != NUM00 ) ) { wordStr = NUM00 ; } while $F1765 ( w , words ) { $F124180 ( nextWord , words , w ) String space = NUM00 ; if ( $F1264 ( wordStr ) && $F1264 ( wordStr ) ) { space = NUM00 ; } if ( font . stringWidth ( wordStr + space + nextWord ) > spaceW - NUM00 ) { comps . addElement ( addString ( wordStr , align ) ) ; newLineIfNotEmpty ( align ) ; spaceW = width - x ; wordStr = nextWord ; } else { wordStr += space + nextWord ; } w ++ ; } if ( CSSParser . isWhiteSpace ( $F7792 ( text ) ) ) { wordStr += NUM00 ; } comps . addElement ( addString ( wordStr , align ) ) ; } return comps ; }
private void calculateSlotUsage $F72 { numEntries = NUM00 ; for ( int i = NUM00 ; i < table . table . length ; i ++ ) { LinkedList $F2193 list = ( LinkedList $F2193 ) table . table [ i ] ; if ( list != null ) { $F41045 ( numEntries , list ) intHashTable [ i ] += list . size ( ) ; } } }
public Insert defaultValues $F72 { defaultValues = _BOOL ; $F725 ( columns ) $F725 ( valuesToInsert ) query = null ; invalidateCompileCache ( ) ; return this ; }
public CFilenameFormatter ( final File directory ) { Preconditions . checkArgument ( directory . exists ( ) , NUM00 ) ; m_directory = directory ; }
public T pop $F72 { return list . removeLast ( ) ; }
$F29442 ( cls , makeLogTag )
public Timestamp recalculateEstimatedCompletionDate ( Long priority , Timestamp startDate ) { if ( exist ( ) ) { getProductionRunRoutingTasks ( ) ; $F21009 ( quantity , getQuantity ) Timestamp endDate = null ; for ( Iterator $F6260 iter = productionRunRoutingTasks . iterator ( ) ; iter . hasNext ( ) ; ) { GenericValue routingTask = iter . next ( ) ; if ( priority . compareTo ( routingTask . getLong ( NUM00 ) ) <= NUM00 ) { long totalTime = ProductionRun . getEstimatedTaskTime ( routingTask , quantity , dispatcher ) ; endDate = TechDataServices . addForward ( TechDataServices . getTechDataCalendar ( routingTask ) , startDate , totalTime ) ; $F113827 ( routingTask , startDate ) $F113827 ( routingTask , endDate ) startDate = endDate ; } } return endDate ; } else $F1337 }
protected ShoppingCartItem $F72 $F845
public static String nodeListToString ( List < ? extends Node > list ) { $F280 ( buf ) $F84 ( buf ) if $F3817 ( list ) { buf . append ( NUM00 + $F189709 ( domToString , list ) + NUM00 ) ; for ( $F3836 ( i , list ) ) { buf . append ( NUM00 + i + NUM00 + $F189709 ( domToString , list ) + NUM00 ) ; } $F84 ( buf ) } $F84 ( buf ) $F92 ( buf ) }
protected Element adapt ( Element source , $F369480 ( sourceMeta ) , String kind ) { $F369491 adaptorKey = sourceMeta . adapt ( kind ) ; if ( adaptorKey != null ) { try $F8587 ( adapt , adaptorKey , source ) catch ( ContentCreationException e ) { LOGGER . log ( Level . SEVERE , $F29695 ( source ) + adaptorKey . getElementType ( ) , e ) ; } } return source ; }
public String convertAliasToNumber ( String aliasName ) { if ( $F49413 ( aliasName ) && AliasDatabase . containsAlias ( aliasName ) ) { $F806 res = AliasDatabase . getAlias ( aliasName ) ; return res [ NUM00 ] ; } return aliasName ; }
public Attr ( String name , $F5466 Format format ) { this . name = name ; if ( format != null ) { formats = Collections . singletonList ( format ) ; } }
static StreamTokenizer makeTokenizer ( String tagValue ) { StreamTokenizer tokenizer = new StreamTokenizer $F33896 ( tagValue ) ; $F61733 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F33902 ( tokenizer ) $F70966 ( tokenizer ) $F70966 ( tokenizer ) tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . whitespaceChars ( NUM00 , NUM00 ) ; tokenizer . eolIsSignificant ( _BOOL ) ; return tokenizer ; }
private void sendRequest $F72 { $F89756 ( i , tabPane ) String prompt = rb . getString ( NUM00 + i + NUM00 ) ; $F197555 ( log , prompt , i ) if ( source == null ) { $F9464 ( log ) $F5191 ( timer ) $F665 } source . sendBytes ( prompt . getBytes ( ) ) ; }
public void remove ( Predicate filter ) { for ( IntIterator ii = rows ( filter ) ; ii . hasNext ( ) ; ) removeRow ( ii . nextInt ( ) ) ; }
private void calculateTrimArea ( Rect bounds ) { float size = Math . min ( bounds . height ( ) , bounds . width ( ) ) ; float yOffset = ( bounds . height ( ) - size ) / NUM00 ; float xOffset = ( bounds . width ( ) - size ) / NUM00 ; float padding = mPadding + ( bounds . height ( ) - NUM00 * mPadding ) * NUM00 / NUM00 ; mInternalBounds . set ( bounds . left + padding + xOffset , bounds . top + padding + yOffset , bounds . right - padding - xOffset , bounds . bottom - padding - yOffset ) ; mCenter = mInternalBounds . centerX ( ) ; mSize = mInternalBounds . width ( ) ; mPlayTipOffset = NUM00 / NUM00 * mSize ; mPlayBaseOffset = NUM00 * mSize ; setTransitionState ( NUM00 , NUM00 ) ; }
protected void initInstances ( Operation post , ServiceDocument ... states ) { initInstances ( post , _BOOL , _BOOL , states ) ; }
protected Instance mergeInstances ( Instance source , Instance dest ) { Instances outputFormat = outputFormatPeek ( ) ; $F1986 vals = new double [ outputFormat . numAttributes ( ) ] ; for ( $F1139 ( i , vals ) ) { if ( ( i != outputFormat . classIndex ( ) ) && ( m_SelectedCols . isInRange ( i ) ) ) { if ( ( source != null ) && ! source . isMissing ( i ) && ! dest . isMissing ( i ) ) { vals [ i ] = dest . value ( i ) - source . value ( i ) ; } else { vals [ i ] = Utils . missingValue ( ) ; } } else $F221560 ( vals , i , dest ) } Instance inst = null ; if ( dest instanceof SparseInstance ) { inst = new SparseInstance ( dest . weight ( ) , vals ) ; } else { $F221573 ( inst , dest , vals ) } inst . setDataset ( dest . dataset ( ) ) ; return inst ; }
public SourceCallChainBuilder ( int timeout , boolean process_callbacks ) $F20755 ( this , timeout , process_callbacks )
public synchronized float recoveredBytesPercent $F72 { long total = NUM00 ; long recovered = NUM00 ; for ( $F90432 ( file , fileDetails ) ) { if ( file . reused ( ) == _BOOL ) { $F90433 ( total , file ) recovered += file . recovered ( ) ; } } if ( total == NUM00 && $F10470 ( fileDetails ) ) $F1083 if ( total == recovered ) $F1083 else { return NUM00 * recovered / total ; } }
public < E extends T > EventBinder $F11685 on $F72 { return new EventBinder $F200 $F95683 ( Optional ) ; }
private boolean isValueSupported ( Object value ) { for ( $F1139 ( i , values ) ) $F55055 ( value , values , i , _BOOL ) return _BOOL ; }
public static BitSet fromByteArray $F97 ( bytes ) { $F219748 ( bits ) for ( int i = NUM00 ; i < bytes . length * NUM00 ; i ++ ) { if ( ( bytes [ bytes . length - i / NUM00 - NUM00 ] & ( NUM00 < < ( i % NUM00 ) ) ) > NUM00 ) $F24242 ( bits , i ) } return bits ; }
public RepeatTime createRepeatTime ( int repeatInterval , int activeDuration , $F2027 offsets ) { RepeatField repeatTimeField = new RepeatField $F72 ; try { repeatTimeField . setRepeatInterval ( repeatInterval ) ; repeatTimeField . setActiveDuration ( activeDuration ) ; repeatTimeField . setOffsetArray ( offsets ) ; } $F18284 ( s ) return repeatTimeField ; }
public void remove ( int i ) { if ( ( i >= array . length ) || ( i < NUM00 ) ) throw new ArrayIndexOutOfBoundsException ( NUM00 + i + NUM00 + array . length ) ; $F12334 newArray = new NSObject $F12500 ( array ) ; $F135 ( System , array , newArray , i ) $F86533 ( System , array , i , newArray ) array = newArray ; }
private Time parseTime ( String timeString ) throws ParseException { $F22273 parsedDate = TimeField . parse ( timeString ) ; $F1275 ( parsedDate ) return new Time $F16810 ( parsedDate ) ; }
public synchronized void deleteObservers $F72 $F9096 ( observers )
private void decrementCopyFieldTargetCount ( SchemaField dest ) { $F99426 ( count , copyFieldTargetCounts , dest ) assert count != null ; if ( count <= NUM00 ) $F106 ( copyFieldTargetCounts , dest ) else { copyFieldTargetCounts . put ( dest , count - NUM00 ) ; } }
public synchronized int updatePurchase ( String orderId , String productId , PurchaseState purchaseState , long purchaseTime , String developerPayload ) { insertOrder ( orderId , productId , purchaseState , purchaseTime , developerPayload ) ; Cursor cursor = mDb . query ( PURCHASE_HISTORY_TABLE_NAME , HISTORY_COLUMNS , HISTORY_PRODUCT_ID_COL + NUM00 , $F8640 ( productId ) , null , null , null , null ) ; $F1084 ( cursor ) int quantity = NUM00 ; try { while $F12260 ( cursor ) { $F24632 ( stateIndex , cursor ) $F2544 ( state , PurchaseState , stateIndex ) if ( state == PurchaseState . PURCHASED || state == PurchaseState . REFUNDED ) { quantity += NUM00 ; } } updatePurchasedItem ( productId , quantity ) ; } $F14364 ( cursor ) return quantity ; }
public static Calendar fromUnixTime ( long unixTime , TimeUnit timeUnit ) { Calendar calendar = getCalendarInstance ( ) ; calendar . setTimeZone ( TimeZone . getDefault ( ) ) ; long millis = timeUnit . toMillis ( unixTime ) ; calendar . setTimeInMillis ( millis ) ; return calendar ; }
public boolean isLayoutIdInRecord ( int layoutId ) { $F28807 ( mLayoutIds , layoutId ) }
private void open_board_design_action $F72 { DesignFile design_file = open_dialog ( stat , main_options . design_dir_name ) ; if ( design_file == null ) { stat . userPrintln ( resources . getString ( NUM00 ) ) ; $F665 } String message = $F241237 ( resources ) + design_file . get_name ( ) ; stat . userPrintln ( message ) ; BoardFrame board_frame = new BoardFrame ( design_file , stat ) ; ImportDesign d_import = new ImportDesign ( board_frame ) ; $F1699 ( d_import ) }
public static String retrieveDisplayName ( String id , boolean daylight , int style , Locale locale ) { $F31405 ( names , retrieveDisplayNamesImpl , id , locale ) if ( Objects . nonNull ( names ) ) { return names [ ( daylight ? NUM00 : NUM00 ) - style ] ; } else $F1337 }
protected Query newFuzzyQuery ( Term term , float minimumSimilarity , int prefixLength ) { String text = term . text ( ) ; int numEdits = FuzzyQuery . floatToEdits ( minimumSimilarity , text . codePointCount ( $F34024 ( text ) ) ) ; return new FuzzyQuery ( term , numEdits , prefixLength ) ; }
$F1 public void playVideo ( Uri uri , String title ) { CameraActivity activity = mActivity . get ( ) ; if ( activity != null ) { CameraUtil . playVideo ( activity , uri , title ) ; } }
public void copyFrom ( Path other ) { grow ( other . length - NUM00 ) ; System . arraycopy ( other . blockIdList , NUM00 , this . blockIdList , NUM00 , other . length ) ; this . length = other . length ; this . cachedHashCode = other . cachedHashCode ; }
void recoverMessages $F72 throws RollbackFailedException { if ( m_isQueue ) { if $F6456 ( _logger , Level ) { $F105262 ( _logger , Level ) } $F725 ( unackedMessages ) $F21685 ( isAutoAck , rollbackLocalTransaction ) } else { if $F6456 ( _logger , Level ) { $F105262 ( _logger , Level ) } unackedMessages . addAll ( recoverMessages ) ; LinkedList < MessageQueueElement > temp = unackedMessages ; $F725 ( recoverMessages ) unackedMessages = recoverMessages ; recoverMessages = temp ; } }
private void maybeSampleSyncParams $F72 { long playbackPositionUs = audioTrackUtil . getPlaybackHeadPositionUs ( ) ; $F32905 ( playbackPositionUs ) long $F11380 ( systemClockUs , System ) ; if ( systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US ) { playheadOffsets [ nextPlayheadOffsetIndex ] = playbackPositionUs - systemClockUs ; $F271125 ( nextPlayheadOffsetIndex , MAX_PLAYHEAD_OFFSET_COUNT ) if ( playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT ) { playheadOffsetCount ++ ; } lastPlayheadSampleTimeUs = systemClockUs ; smoothedPlayheadOffsetUs = NUM00 ; for ( $F119 ( i , playheadOffsetCount ) ) { smoothedPlayheadOffsetUs += playheadOffsets [ i ] / playheadOffsetCount ; } } if ( ! isPassthrough ( ) && systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US ) { audioTimestampSet = audioTrackUtil . updateTimestamp ( ) ; if ( audioTimestampSet ) { long audioTimestampUs = audioTrackUtil . getTimestampNanoTime ( ) / NUM00 ; long audioTimestampFramePosition = audioTrackUtil . getTimestampFramePosition ( ) ; if ( audioTimestampUs < resumeSystemTimeUs ) { audioTimestampSet = _BOOL ; } else if $F19505 ( Math , audioTimestampUs , systemClockUs , MAX_AUDIO_TIMESTAMP_OFFSET_US ) { String message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; if ( failOnSpuriousAudioTimestamp ) { throw new InvalidAudioTrackTimestampException ( message ) ; } Log . w ( TAG , message ) ; audioTimestampSet = _BOOL ; } else if ( Math . abs ( framesToDurationUs ( audioTimestampFramePosition ) - playbackPositionUs ) > MAX_AUDIO_TIMESTAMP_OFFSET_US ) { String message = NUM00 + audioTimestampFramePosition + NUM00 + audioTimestampUs + NUM00 + systemClockUs + NUM00 + playbackPositionUs ; if ( failOnSpuriousAudioTimestamp ) { throw new InvalidAudioTrackTimestampException ( message ) ; } Log . w ( TAG , message ) ; audioTimestampSet = _BOOL ; } } if ( getLatencyMethod != null ) { try { latencyUs = ( Integer ) $F99198 ( getLatencyMethod , audioTrack ) * NUM00 - framesToDurationUs ( bytesToFrames ( bufferSize ) ) ; $F89002 ( latencyUs , Math ) if ( latencyUs > MAX_LATENCY_US ) { $F248237 ( Log , TAG , latencyUs ) latencyUs = NUM00 ; } } catch ( Exception e ) { getLatencyMethod = null ; } } lastTimestampSampleTimeUs = systemClockUs ; } }
private Map < Key , Array > store ( Class clazz ) { $F23596 methods = clazz . getMethods ( ) ; Map < Key , Array > methodsMap = new ConcurrentHashMap < Key , Array > $F72 ; for ( $F1139 ( i , methods ) ) $F218373 ( storeMethod , methods , i , methodsMap ) map . put ( clazz , methodsMap ) ; return methodsMap ; }
private void readCentralDir $F72 throws IOException { long scanOffset = raf . length ( ) - ENDHDR ; if ( scanOffset < NUM00 ) { throw new ZipException ( $F36804 ( raf ) ) ; } $F927 ( raf ) final int headerMagic = $F247584 ( Integer , raf ) ; if ( headerMagic != LOCSIG ) $F124916 long stopOffset = scanOffset - NUM00 ; $F17370 ( stopOffset ) while ( _BOOL ) { raf . seek ( scanOffset ) ; if ( $F247584 ( Integer , raf ) == ENDSIG ) $F5153 scanOffset -- ; if ( scanOffset < stopOffset ) $F124916 } $F96 $F41018 ( eocd , ENDHDR ) ; raf . readFully ( eocd ) ; BufferIterator it = HeapBufferIterator . iterator ( eocd , NUM00 , eocd . length , ByteOrder . LITTLE_ENDIAN ) ; $F247605 ( diskNumber , it ) $F247605 ( diskWithCentralDir , it ) $F247605 ( numEntries , it ) $F247605 ( totalNumEntries , it ) $F71184 ( it ) long centralDirOffset = ( $F247606 ( it ) ) & NUM00 ; $F247605 ( commentLength , it ) if ( numEntries != totalNumEntries || diskNumber != NUM00 || diskWithCentralDir != NUM00 ) $F124916 if ( commentLength > NUM00 ) { $F2175 ( commentBytes , commentLength ) raf . readFully ( commentBytes ) ; comment = new String ( commentBytes , NUM00 , commentBytes . length , StandardCharsets . UTF_8 ) ; } RAFStream rafStream = new RAFStream ( raf , centralDirOffset ) ; BufferedInputStream bufferedStream = $F247623 ( rafStream ) ; $F2175 ( hdrBuf , CENHDR ) for ( $F1316 ( i , numEntries ) ) { ZipEntry newEntry = new ZipEntry ( hdrBuf , bufferedStream ) ; if ( newEntry . localHeaderRelOffset >= centralDirOffset ) $F124916 $F20605 ( entryName , newEntry ) if ( entries . put ( entryName , newEntry ) != null ) { throw new ZipException ( NUM00 + entryName ) ; } } }
protected int readFully ( InputStream in , byte $F76061 , int offset , int len ) throws IOException { for ( $F119 ( i , len ) ) { $F7468 ( q , in ) if ( q == - NUM00 ) return ( ( i == NUM00 ) ? - NUM00 : i ) ; buffer [ i + offset ] = ( byte ) q ; } return len ; }
private long renewServiceLeaseDo ( ServiceID serviceID , Uuid leaseID , long renewDuration ) throws UnknownLeaseException { $F657 ( now , System ) long renewExpiration = renewServiceLeaseInt ( serviceID , leaseID , renewDuration , now ) ; addLogRecord ( new ServiceLeaseRenewedLogObj ( serviceID , leaseID , renewExpiration ) ) ; return renewExpiration - now ; }
public BlockSwapper ( World world , EntityPlayer player , ItemStack truncator , BlockPos origCoords , int range , boolean leaves ) { this . world = world ; this . player = player ; this . truncator = truncator ; this . origin = origCoords ; this . range = range ; this . treatLeavesSpecial = leaves ; this . candidateQueue = new PriorityQueue $F200 $F72 ; this . completedCoords = new $F9623 $F72 ; candidateQueue . offer ( new SwapCandidate ( this . origin , this . range ) ) ; }
public static $F806 toStringArray ( $F14937 enumeration ) { $F1338 ( enumeration ) $F3803 list = Collections . list ( enumeration ) ; $F14862 ( list ) }
public boolean overlapSave ( SphereCluster other ) { double minDist = Math . sqrt ( NUM00 ) * ( getRadius ( ) + other . getRadius ( ) ) ; double diff = getCenterDistance ( other ) - minDist ; return diff > NUM00 ; }
@ PUT $F21697 ( MediaType ) $F2513 $F2512 ( MediaType ) @ CheckPermission ( roles = { Role . SYSTEM_ADMIN , Role . RESTRICTED_SYSTEM_ADMIN } ) public FileVirtualPoolRestRep updateFileVirtualPoolWithAssignedPools ( $F2515 ( id ) , VirtualPoolPoolUpdateParam param ) { VirtualPool vPool = updateVirtualPoolWithAssignedStoragePools ( id , param ) ; return toFileVirtualPool ( vPool , VirtualPool . getFileRemoteProtectionSettings ( vPool , _dbClient ) ) ; }
public static $F212479 toSqlDate $F14337 ( month , day , year ) { $F22273 newDate = toDate ( month , day , year , NUM00 , NUM00 , NUM00 ) ; if ( newDate != null ) { return new $F212479 $F16810 ( newDate ) ; } else $F1337 }
public Object readDefaultListModel ( Element node ) throws Exception { DefaultListModel model ; $F384979 ( children ) Element child ; int i ; int index ; int currIndex ; if ( DEBUG ) { trace ( $F219728 , node . getAttribute ( ATT_NAME ) ) ; } m_CurrentNode = node ; children = XMLDocument . getChildTags ( node ) ; model = $F215229 ; $F63959 ( index , children ) for ( $F12002 ( i , children ) ) { child = children . get ( i ) ; currIndex = Integer . parseInt ( child . getAttribute ( ATT_NAME ) ) ; $F12283 ( currIndex , index ) } model . setSize ( index + NUM00 ) ; for ( $F12002 ( i , children ) ) { child = children . get ( i ) ; model . set ( Integer . parseInt ( child . getAttribute ( ATT_NAME ) ) , invokeReadFromXML ( child ) ) ; } return model ; }
private boolean resultsIdentical ( String namedCurve , BigInteger badX , BigInteger badY , BigInteger secret , int iter ) throws InvalidAlgorithmParameterException , NoSuchAlgorithmException , InvalidKeySpecException , InvalidKeyException { for ( $F119 ( i , iter ) ) { secret = secret . add ( BigInteger . ONE ) ; BigInteger resultCustom = computeSecretWithCustomAlgorithm ( namedCurve , badX , badY , secret ) ; BigInteger resultSun = computeSecretWithSunAlgorithm ( namedCurve , badX , badY , secret ) ; if $F10335 ( resultSun , resultCustom ) { return _BOOL ; } } return _BOOL ; }
public void enableLayers ( boolean enable ) { TextureState textureState = ( TextureState ) getLocalRenderState ( RenderState . StateType . Texture ) ; textureState . setEnabled ( enable ) ; markDirty ( DirtyType . RenderState ) ; }
protected void starveRandomly ( int limit ) { while $F60125 ( population , limit ) { int removePos = Randomness . nextInt ( ) % population . size ( ) ; population . remove ( removePos ) ; } }
public void saveParam $F72 throws Exception { Enumeration < AbstractParamPanel > en = tablePanel . elements ( ) ; AbstractParamPanel panel = null ; while $F1444 ( en ) { $F1445 ( panel , en ) panel . saveParam ( paramObject ) ; } }
$F1431 public static LocalStreamingContainer waitForActivation ( StramLocalCluster localCluster , PTOperator operator ) throws InterruptedException { LocalStreamingContainer container ; $F657 ( startMillis , System ) while ( System . currentTimeMillis ( ) < ( startMillis + DEFAULT_TIMEOUT_MILLIS ) ) { if ( operator . getState ( ) == PTOperator . State . ACTIVE ) { if ( ( container = localCluster . getContainer ( operator ) ) != null ) { return container ; } } LOG . debug ( NUM00 , new Object [ ] { operator , operator . getState ( ) , operator . getContainer ( ) } ) ; $F9470 ( Thread ) } Assert . fail ( NUM00 + operator ) ; $F1274 }
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
protected String toExternalForm ( URL url ) $F8587 ( toExternalForm , url , _BOOL )
public ResultSet executeQuery ( String query ) throws $F135592 { if ( connection != null ) { $F11282 ( st , connection ) return st . executeQuery ( query ) ; } $F135596 }
private void rejectAccessAndTerminateProcess ( RadiusResponse response , ContextHolder holder ) { response . setResponsePacket ( new AccessReject $F72 ) ; response . setUniversalId ( holder . getUniversalId ( ) ) ; terminateAuthnProcess ( holder ) ; }
public ScVolume createViewVolume ( String name , String instanceId ) throws StorageCenterAPIException { $F7028 ( LOG , instanceId ) String errorMessage = NUM00 ; Parameters $F108428 ( params ) ; $F269710 ( params , name ) params . add ( NUM00 , NOTES_ "STRING" ) ; try { RestResult result = restClient . post ( String . format ( NUM00 , instanceId ) , params . toJson ( ) ) ; if ( checkResults ( result ) ) { return gson . fromJson ( result . getResult ( ) , ScVolume . class ) ; } } catch ( Exception e ) { $F269729 ( errorMessage , String , e ) LOG . warn ( errorMessage ) ; } if $F1277 ( errorMessage ) { $F86910 ( errorMessage , String , name , instanceId ) } $F269734 ( errorMessage ) }
$F1 public boolean contains ( Object object ) { return indexOf ( object , NUM00 ) != - NUM00 ; }
public void sync $F72 throws StorageFault { final String methodName = NUM00 ; log . debug ( methodName + NUM00 ) ; try { $F454866 ( log , methodName ) _syncManager . syncAll ( ) ; } catch ( SOSFailure e ) { $F69255 ( log , methodName , e ) throw FaultUtil . StorageFault ( e ) ; } log . debug ( methodName + NUM00 ) ; }
private void addMenuItem ( JPopupMenu menu , String title , MWFNodeNext line ) { WFPopupItem item = new WFPopupItem ( title , line ) ; menu . add ( item ) ; item . addActionListener ( this ) ; }
public static Matcher $F143607 binds ( String name , $F6969 value ) { return new BindsMatcher $F1432 ( name , instanceOf ( value ) ) ; }
private void testAdd $F72 throws Exception { $F973 ( LOG ) long msgCount = messageMapper . countMessagesInMailbox ( MBOXES . get ( NUM00 ) ) ; LOG . info ( msgCount + NUM00 + MESSAGE_NO . size ( ) ) ; $F28711 ( assertEquals , MESSAGE_NO , msgCount ) ; }
public void cancelTaskNoException ( Task task ) { try { cancelTask ( task ) ; } catch ( Exception e ) $F21338 ( _log ) }
public boolean isLayoutIdInRecord ( int layoutId ) { $F28807 ( mLayoutIds , layoutId ) }
public String toString $F72 $F31632 ( toIndentedString )
public int read $F1313 ( off , len ) throws IOException , LogException { if ( length < len ) badRead ( len ) ; len = in . read ( b , off , len ) ; length -= len ; return len ; }
public static void migrateFrom6To7 ( SQLiteDatabase db ) { String selectQuery = NUM00 + DatabaseHelper . TABLE_GRIDITEMRELATIONS ; Cursor c = db . rawQuery ( selectQuery , null ) ; if $F17816 ( c ) { do { try { int gridItemid = c . getInt ( c . getColumnIndex ( DatabaseHelper . KEY_ID ) ) ; int pluginId = c . getInt ( c . getColumnIndex ( DatabaseHelper . KEY_GRIDITEMRELATIONS_PLUGIN ) ) ; String pluginpageUrlQuery = NUM00 + DatabaseHelper . KEY_MUNINPLUGINS_PLUGINPAGEURL + NUM00 + DatabaseHelper . TABLE_MUNINPLUGINS + NUM00 + DatabaseHelper . KEY_ID + NUM00 + pluginId ; Cursor c2 = db . rawQuery ( pluginpageUrlQuery , null ) ; if $F17816 ( c2 ) { String pluginpageUrl = c2 . getString ( c2 . getColumnIndex ( DatabaseHelper . KEY_MUNINPLUGINS_PLUGINPAGEURL ) ) ; $F20904 ( values ) values . put ( DatabaseHelper . KEY_GRIDITEMRELATIONS_PLUGINPAGEURL , pluginpageUrl ) ; db . update ( DatabaseHelper . TABLE_GRIDITEMRELATIONS , values , DatabaseHelper . KEY_ID + NUM00 , $F51969 ( String , gridItemid ) ) ; } $F59 ( c2 ) } $F1516 ( ex ) } while $F12260 ( c ) ; } $F59 ( c ) }
public static InputStream cropImage ( InputStream inputStream , int imageWidth , int imageHeight , int outWidth , int outHeight ) throws IllegalArgumentException { $F826 ( inputStream ) if ( imageWidth <= NUM00 || imageHeight <= NUM00 ) { throw new IllegalArgumentException ( String . format ( NUM00 + NUM00 , imageWidth , imageHeight ) ) ; } if ( outWidth <= NUM00 || outHeight <= NUM00 ) { throw new IllegalArgumentException ( String . format ( NUM00 + NUM00 , imageWidth , outHeight ) ) ; } int scaleDownSampleSize = Math . min ( imageWidth / outWidth , imageHeight / outHeight ) ; if ( scaleDownSampleSize > NUM00 ) { imageWidth /= scaleDownSampleSize ; imageHeight /= scaleDownSampleSize ; } else { $F5773 ( ratio , outWidth , outHeight ) if ( imageWidth < imageHeight * ratio ) { outWidth = imageWidth ; $F2118 ( outHeight , outWidth , ratio ) } else { outHeight = imageHeight ; $F53239 ( outWidth , outHeight , ratio ) } } $F30400 ( left , imageWidth , outWidth ) $F30400 ( top , imageHeight , outHeight ) InputStream compressed = null ; try { $F56530 ( options ) if ( scaleDownSampleSize > NUM00 ) { options . inSampleSize = scaleDownSampleSize ; } Bitmap bitmap = BitmapFactory . decodeStream ( inputStream , null , options ) ; $F1338 ( bitmap ) Bitmap cropped = Bitmap . createBitmap ( bitmap , left , top , outWidth , outHeight ) ; $F121388 ( tmpOut ) if ( cropped . compress ( Bitmap . CompressFormat . PNG , DEFAULT_IMG_QUALITY , tmpOut ) ) { $F1208 ( outByteArray , tmpOut ) $F14570 ( compressed , outByteArray ) } } catch ( Exception e ) $F23816 ( Log , TAG , e ) return compressed ; }
$F1 public void datasetChanged ( DatasetChangeEvent event ) $F5795 ( fireDatasetChanged )
public void drawingComplete ( OMGraphic omg , OMAction action ) { if $F31483 ( timerButton ) $F173702 ( timer ) if ( omg instanceof OMPoint ) { OMPoint p = ( OMPoint ) omg ; GLPoint mp = new GLPoint ( p . getLat ( ) , p . getLon ( ) , p . getRadius ( ) , _BOOL ) ; mp . setName ( NUM00 + ( pointCount ++ ) ) ; mp . setStationary ( _BOOL ) ; mp . showPalette ( ) ; $F20063 ( points , mp ) manageGraphics ( ) ; } else if ( omg instanceof OMPoly ) { OMPoly poly = ( OMPoly ) omg ; PathGLPoint pmp = new PathGLPoint ( poly , NUM00 , _BOOL ) ; pmp . setName ( NUM00 + ( pointCount ++ ) ) ; pmp . showPalette ( ) ; $F20063 ( points , pmp ) manageGraphics ( ) ; } addNodeButton . setEnabled ( _BOOL ) ; addPathButton . setEnabled ( _BOOL ) ; }
$F76441 ( key , cacheKey , mDigest , MessageDigest , bytesToHexString , String )
static int firstIllegalCharacter ( String source ) { for ( $F1088 ( i , source ) ) { if ( isLegal ( source . charAt ( i ) ) == _BOOL ) { return i ; } } $F150 }
$F20813 ( fieldId , COOKIE , USER_ID )
public Charset charset $F72 { return charset != null ? Charset . forName ( charset ) : null ; }
public DriverTask deleteVolumeMirror ( VolumeMirror mirror ) { $F10635 ( LOG , mirror ) $F423222 ( task ) try { StorageCenterAPI api = connectionManager . getConnection ( mirror . getStorageSystemId ( ) ) ; ScCopyMirrorMigrate cmm = api . getMirror ( mirror . getNativeId ( ) ) ; api . deleteMirror ( cmm . instanceId ) ; api . deleteVolume ( cmm . destinationVolume . instanceId ) ; task . setStatus ( TaskStatus . READY ) ; } catch ( $F193202 dex ) { String error = String . format ( NUM00 , mirror . getNativeId ( ) , dex ) ; LOG . error ( error ) ; task . setFailed ( error ) ; } return task ; }
public void testConnect_BlockNoServer $F72 throws IOException $F9099 ( connectWithoutServer , disconnectAfterConnected )
public ByteArrayDataProvider $F97 ( bytes ) { $F17879 ( this , Arrays , bytes ) }
public static String generateNativeGuidForPhysicalNAS ( String systemNativeGuid , String pNasName ) { return String . format ( NUM00 + PHYSICAL_NAS + NUM00 , systemNativeGuid , pNasName ) ; }
private void expire $F72 { if ( m_expire != NUM00 && m_timeExp < System . currentTimeMillis ( ) ) $F5795 ( reset ) }
private static int determineConsecutiveBinaryCount ( String msg , int startpos , Charset encoding ) throws WriterException { final CharsetEncoder encoder = encoding . newEncoder ( ) ; $F1749 ( len , msg ) int idx = startpos ; while ( idx < len ) { $F1280 ( ch , msg , idx ) int numericCount = NUM00 ; while ( numericCount < NUM00 && isDigit ( ch ) ) { numericCount ++ ; int i = idx + numericCount ; $F66497 ( i , len ) ch = msg . charAt ( i ) ; } if ( numericCount >= NUM00 ) { return idx - startpos ; } ch = msg . charAt ( idx ) ; if ( ! encoder . canEncode ( ch ) ) { throw new WriterException ( NUM00 + ch + NUM00 + ( int ) ch + NUM00 ) ; } idx ++ ; } return idx - startpos ; }
$F43277 ( listener , mListeners )
private boolean apply ( GridClientPredicate $F36647 [ ] p , N n ) { if ( p != null ) { for ( GridClientPredicate < ? super N > r : p ) { if ( r != null && ! r . apply ( n ) ) return _BOOL ; } } return _BOOL ; }
public boolean hasName ( final String name ) { for ( final String n : names ) $F72434 ( n , name , _BOOL ) return _BOOL ; }
static MethodHandle makeSpreadArguments ( MethodHandle target , $F6969 spreadArgType , int spreadArgPos , int spreadArgCount ) { MethodType targetType = target . type ( ) ; for ( $F119 ( i , spreadArgCount ) ) { $F6969 arg = VerifyType . spreadArgElementType ( spreadArgType , i ) ; if ( arg == null ) arg = $F12222 ; targetType = targetType . changeParameterType ( spreadArgPos + i , arg ) ; } target = target . asType ( targetType ) ; MethodType srcType = targetType . replaceParameterTypes ( spreadArgPos , spreadArgPos + spreadArgCount , spreadArgType ) ; MethodType lambdaType = srcType . invokerType ( ) ; Name [ ] names = arguments ( spreadArgCount + NUM00 , lambdaType ) ; int nameCursor = lambdaType . parameterCount ( ) ; $F2027 indexes = new int [ targetType . parameterCount ( ) ] ; for ( int i = NUM00 , argIndex = NUM00 ; i < targetType . parameterCount ( ) + NUM00 ; i ++ , argIndex ++ ) { $F6969 src = lambdaType . parameterType ( i ) ; if ( i == spreadArgPos ) { MethodHandle aload = MethodHandles . arrayElementGetter ( spreadArgType ) ; Name array = names [ argIndex ] ; names [ nameCursor ++ ] = new Name ( Lazy . NF_checkSpreadArgument , array , spreadArgCount ) ; for ( $F259650 ( j , spreadArgCount , i ) ) { indexes [ i ] = nameCursor ; names [ nameCursor ++ ] = new Name ( aload , array , j ) ; } } else if ( i < indexes . length ) { indexes [ i ] = argIndex ; } } assert $F74408 ( nameCursor , names ) ; Name [ ] targetArgs = new Name [ targetType . parameterCount ( ) ] ; for ( int i = NUM00 ; i < targetType . parameterCount ( ) ; i ++ ) { int idx = indexes [ i ] ; targetArgs [ i ] = names [ idx ] ; } $F8528 ( names ) = new Name ( target , $F2486 ( targetArgs ) ) ; LambdaForm form = new LambdaForm ( NUM00 , lambdaType . parameterCount ( ) , names ) ; return SimpleMethodHandle . make ( srcType , form ) ; }
public void dup2X2 $F72 { mv . visitInsn ( Opcodes . DUP2_X2 ) ; }
$F1 public boolean contains ( Object key ) { if ( key == null ) return _map . _nullValue != null ; K1 [ ] keys = _map . _keys ; for ( $F26259 ( i , keys ) ) { K1 testKey = keys [ i ] ; $F9506 ( key , testKey , _BOOL ) } return _BOOL ; }
public Expression compile ( int opPos ) throws TransformerException { int op = getOp ( opPos ) ; Expression expr = null ; switch ( op ) { case OpCodes . OP_XPATH : expr = compile ( opPos + NUM00 ) ; $F597 case OpCodes . OP_OR : expr = or ( opPos ) ; $F597 case OpCodes . OP_AND : expr = and ( opPos ) ; $F597 case OpCodes . OP_NOTEQUALS : expr = notequals ( opPos ) ; $F597 case OpCodes . OP_EQUALS : expr = equals ( opPos ) ; $F597 case OpCodes . OP_LTE : expr = lte ( opPos ) ; $F597 case OpCodes . OP_LT : expr = lt ( opPos ) ; $F597 case OpCodes . OP_GTE : expr = gte ( opPos ) ; $F597 case OpCodes . OP_GT : expr = gt ( opPos ) ; $F597 case OpCodes . OP_PLUS : expr = plus ( opPos ) ; $F597 case OpCodes . OP_MINUS : expr = minus ( opPos ) ; $F597 case OpCodes . OP_MULT : expr = mult ( opPos ) ; $F597 case OpCodes . OP_DIV : expr = div ( opPos ) ; $F597 case OpCodes . OP_MOD : expr = mod ( opPos ) ; $F597 case OpCodes . OP_NEG : expr = neg ( opPos ) ; $F597 case $F423881 OP_ NUM00 : expr = string ( opPos ) ; $F597 case $F423881 OP_BOOL : expr = bool ( opPos ) ; $F597 case $F423881 OP1BER : expr = number ( opPos ) ; $F597 case $F423881 OP_UNION : expr = union ( opPos ) ; $F597 case $F423881 OP_LITERAL : expr = literal ( opPos ) ; $F597 case $F423881 OP_VARIABLE : expr = variable ( opPos ) ; $F597 case $F423881 OP_GROUP : expr = group ( opPos ) ; $F597 case $F423881 OP1BERLIT : expr = numberlit ( opPos ) ; $F597 case $F423881 OP_ARGUMENT : expr = arg ( opPos ) ; $F597 case $F423881 OP_EXTFUNCTION : expr = compileExtension ( opPos ) ; $F597 case $F423881 OP_FUNCTION : expr = compileFunction ( opPos ) ; $F597 case $F423881 OP_LOCATIONPATH : expr = locationPath ( opPos ) ; $F597 case $F423881 OP_PREDICATE : expr = null ; $F597 case $F423881 OP_MATCHPATTERN : expr = matchPattern ( opPos + NUM00 ) ; $F597 case $F423881 OP_LOCATIONPATHPATTERN : expr = locationPathPattern ( opPos ) ; $F597 case $F423881 OP_QUO : error ( XPATHErrorResources . ER_UNKNOWN_OPCODE , new Object $F21902 ) ; $F597 default : error ( XPATHErrorResources . ER_UNKNOWN_OPCODE , new Object [ ] { Integer . toString ( getOp ( opPos ) ) } ) ; } return expr ;
public static void replaceValue ( ExampleSet exampleSet , Attribute attribute , String oldValue , String newValue ) { if ( ! attribute . isNominal ( ) ) $F11389 NominalMapping mapping = attribute . getMapping ( ) ; if $F3057 ( oldValue ) { for ( Example example : exampleSet ) { if ( Double . isNaN ( example . getValue ( attribute ) ) ) { example . setValue ( attribute , mapping . mapString ( newValue ) ) ; } } } else { int oldIndex = mapping . getIndex ( oldValue ) ; if ( oldIndex < NUM00 ) $F11389 if $F3057 ( newValue ) { for ( Example example : exampleSet ) { int index = mapping . getIndex ( example . getValueAsString ( attribute ) ) ; if ( index == oldIndex ) { example . setValue ( attribute , Double . NaN ) ; } } $F665 } int newIndex = mapping . getIndex ( newValue ) ; if ( newIndex >= NUM00 ) { for ( Example example : exampleSet ) { int index = mapping . getIndex ( example . getValueAsString ( attribute ) ) ; if ( index == oldIndex ) { example . setValue ( attribute , newIndex ) ; } } } else { mapping . setMapping ( newValue , oldIndex ) ; } } }
protected void encode ( ByteSequencesWriter writer , ByteArrayDataOutput output , $F96 buffer , BytesRef spare , BytesRef payload , Set $F123079 contexts , long weight ) throws IOException { int requiredLength = spare . length + NUM00 + ( ( hasPayloads ) ? NUM00 + payload . length : NUM00 ) ; if ( hasContexts ) { for ( BytesRef ctx : contexts ) { requiredLength += NUM00 + ctx . length ; } requiredLength += NUM00 ; } if ( requiredLength >= buffer . length ) { $F71720 ( buffer , ArrayUtil , requiredLength ) } output . reset ( buffer ) ; output . writeBytes ( spare . bytes , spare . offset , spare . length ) ; if ( hasContexts ) { for ( BytesRef ctx : contexts ) { output . writeBytes ( ctx . bytes , ctx . offset , ctx . length ) ; output . writeShort ( ( short ) ctx . length ) ; } output . writeShort ( ( short ) contexts . size ( ) ) ; } if ( hasPayloads ) { output . writeBytes ( payload . bytes , payload . offset , payload . length ) ; output . writeShort ( ( short ) payload . length ) ; } output . writeLong ( weight ) ; writer . write ( buffer , NUM00 , output . getPosition ( ) ) ; }
public void printEntryDetails ( Writer w ) { int linesadded = - NUM00 ; String title ; try { HardcopyWriter ww = ( HardcopyWriter ) w ; int textSpace = ww . getCharactersPerLine ( ) - indentWidth - NUM00 ; title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _id , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _id , title , textSpace ) + linesadded ; } title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _fileName != null ? _fileName : NUM00 , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _fileName != null ? _fileName : NUM00 , title , textSpace ) + linesadded ; } if ( ! $F2979 ( _roadName ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _roadName , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _roadName , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _roadNumber ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _roadNumber , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _roadNumber , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _mfg ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _mfg , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _mfg , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _owner ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _owner , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _owner , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _model ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _model , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _model , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _dccAddress ) ) { $F105801 ( w , newLine ) String s = NUM00 + _dccAddress ; $F170077 ( w , s ) linesadded ++ ; } if ( ! $F2979 ( _comment ) ) { for ( int i = NUM00 ; i < ( blanks - linesadded ) ; i ++ ) { $F105801 ( w , newLine ) } if ( blanks != NUM00 ) { blanks = NUM00 ; } title = NUM00 ; linesadded = writeWrappedComment ( w , _comment , title , textSpace ) + linesadded ; } if ( ! $F2979 ( _decoderModel ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _decoderModel , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _decoderModel , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _decoderFamily ) ) { title = NUM00 ; if ( ( textSpaceWithIcon != NUM00 ) && ( linesadded < blanks ) ) { linesadded = writeWrappedComment ( w , _decoderFamily , title , textSpaceWithIcon ) + linesadded ; } else { linesadded = writeWrappedComment ( w , _decoderFamily , title , textSpace ) + linesadded ; } } if ( ! $F2979 ( _decoderComment ) ) { for ( int i = NUM00 ; i < ( blanks - linesadded ) ; i ++ ) { $F105801 ( w , newLine ) } if ( blanks != NUM00 ) { blanks = NUM00 ; } title = NUM00 ; linesadded = writeWrappedComment ( w , _decoderComment , title , textSpace ) + linesadded ; } $F105801 ( w , newLine ) for ( int i = - NUM00 ; i < ( blanks - linesadded ) ; i ++ ) { $F105801 ( w , newLine ) } } catch ( IOException e ) $F17663 ( log , e ) }
private int skipQuotedString ( String str , int pos ) { $F1749 ( n , str ) pos += NUM00 ; while ( pos < n ) { if $F11983 ( str , pos ) { if ( $F179049 ( pos , n , str ) ) { pos += NUM00 ; $F598 } return pos + NUM00 ; } pos += NUM00 ; } return n ; }
private static void addNewSegment ( LinkedList < DNASegment > segments , Event event , HashMap < Integer , DNAStrand > strands , int firstJulianDay , int minStart , int minMinutes ) { if ( event . startDay > event . endDay ) { Log . wtf ( TAG , $F368 ( event ) ) ; } if ( event . startDay != event . endDay ) { Event lhs = new Event $F72 ; lhs . color = event . color ; lhs . startDay = event . startDay ; lhs . startTime = event . startTime ; lhs . endDay = lhs . startDay ; lhs . endTime = DAY_IN_MINUTES - NUM00 ; while ( lhs . startDay != event . endDay ) { addNewSegment ( segments , lhs , strands , firstJulianDay , minStart , minMinutes ) ; lhs . startDay ++ ; lhs . endDay = lhs . startDay ; lhs . startTime = NUM00 ; minStart = NUM00 ; } lhs . endTime = event . endTime ; event = lhs ; } DNASegment segment = new DNASegment $F72 ; int dayOffset = ( event . startDay - firstJulianDay ) * DAY_IN_MINUTES ; int endOfDay = dayOffset + DAY_IN_MINUTES - NUM00 ; segment . startMinute = Math . max ( dayOffset + event . startTime , minStart ) ; int minEnd = Math . min ( segment . startMinute + minMinutes , endOfDay ) ; segment . endMinute = Math . max ( dayOffset + event . endTime , minEnd ) ; if ( segment . endMinute > endOfDay ) { segment . endMinute = endOfDay ; } segment . color = event . color ; segment . day = event . startDay ; segments . add ( segment ) ; DNAStrand strand = getOrCreateStrand ( strands , segment . color ) ; strand . count ++ ; }
private DatagramPacket [ ] encodeMulticastRequest ( final MulticastRequest req ) throws IOException { final Discovery disco = getDiscovery ( multicastRequestConstraints . chooseProtocolVersion ( ) ) ; $F102316 ( packets ) EncodeIterator ei = disco . encodeMulticastRequest ( req , multicastRequestConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastRequestConstraints . getUnfulfilledConstraints ( ) ) ; while $F2921 ( ei ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , NUM00 , e ) ; } } if $F2979 ( packets ) { throw new DiscoveryProtocolException $F580 ; } return ( DatagramPacket [ ] ) packets . toArray ( new DatagramPacket $F2313 ( packets ) ) ; }
public FeatureTypeConstraintModel ( FeatureTypeConstraintModelUpdateInterface parent ) { this . parentObj = parent ; $F220523 ( columnList , Localisation ) $F220523 ( columnList , Localisation ) }
protected void deleteDb ( String name ) $F359906 ( deleteDb , getBaseDir , name )
public void removeAtRange ( int index , int size ) { final int end = Math . min ( mSize , index + size ) ; for ( int i = index ; i < end ; i ++ ) { removeAt ( i ) ; } }
private void pullEvent $F72 { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getFilteredPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; $F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; $F597 } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; itemDimension = getFooterSize ( ) ; $F597 case GOOGLE_STYLE : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; itemDimension = getGoogleStyleViewSize ( ) ; $F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / mFriction ) ; itemDimension = getHeaderSize ( ) ; $F597 } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; $F597 case GOOGLE_STYLE : mGoogleStyleViewLayout . onPull ( scale ) ; mGoogleStyleProgressLayout . onPull ( scale ) ; $F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; $F597 } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
public StatMonitorHandler $F72 $F845
public void addElements $F10212 ( values ) { final $F1986 tempArray = new double [ numElements + values . length + NUM00 ] ; $F21535 ( System , internalArray , startIndex , tempArray , numElements ) $F41363 ( System , values , tempArray , numElements ) internalArray = tempArray ; startIndex = NUM00 ; numElements += values . length ; }
public void registerUnregisteredNamespaces $F72 { for ( $F2277 ( i , m_unregisteredExtensions ) ) { $F123 ( ns , m_unregisteredExtensions , i ) ExtensionNamespaceSupport extNsSpt = defineJavaNamespace ( ns ) ; $F67023 ( extNsSpt , m_extensions ) } }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F1006 ( result ) $F1000 ( result ) $F9007 ( result ) $F9010 ( result , Collections , super ) $F1007 ( result ) }
public $F42106 addSourceVolumeSnapshots $F72 { $F28584 blockSnapshots = Lists . newArrayList ( ) ; $F42106 $F8690 ( snapshotsMap ) ; for ( URI volumeId : uris ( volumeIds ) ) { $F141871 ( snapshots , getSnapshots , volumeId ) blockSnapshots . addAll ( snapshots ) ; snapshotsMap . put ( volumeId , snapshots ) ; } if $F5973 ( blockSnapshots ) { BlockStorageUtils . addVolumesToConsistencyGroup ( consistencyGroup , blockSnapshots ) ; } return snapshotsMap ; }
public static void logInitiator ( Initiator initiator , NetworkLite network ) { String networkName = ( network != null ? network . getLabel ( ) : NUM00 ) ; _log . info ( String . format ( NUM00 , initiator . getInitiatorPort ( ) , initiator . getHostName ( ) , networkName ) ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static final Criterion and ( Criterion one , Criterion two ) { final List < Criterion > criteria = new ArrayList < Criterion > $F72 ; criteria . add ( one ) ; criteria . add ( two ) ; return new ConjunctionCriterion ( Conjunction . AND , criteria ) ; }
public CCMenuItem ( Object rec , String cb ) { targetCallback = rec ; selector = cb ; setAnchorPoint ( CGPoint . make ( NUM00 , NUM00 ) ) ; invocation = null ; if ( rec != null && cb != null ) { $F20850 ( cls , rec ) try { invocation = cls . getMethod ( cb , $F12222 ) ; } catch ( SecurityException e ) $F302 ( e ) catch ( NoSuchMethodException e ) $F302 ( e ) } isEnabled_ = _BOOL ; isSelected_ = _BOOL ; }
public void addChildElement ( XMLElement child , boolean addAfterNewLine ) throws Exception { addChildElementAt ( child , - NUM00 , addAfterNewLine ) ; }
public void editText ( VisualItem item , String attribute , Rectangle r ) { $F8801 ( m_editing , stopEditing ) $F19101 ( txt , item , attribute ) m_editItem = item ; m_editAttribute = attribute ; Color tc = ColorLib . getColor ( item . getTextColor ( ) ) ; Color fc = ColorLib . getColor ( item . getFillColor ( ) ) ; m_editor . setForeground ( tc ) ; m_editor . setBackground ( fc ) ; editText ( txt , r ) ; }
public static Column column ( final String id , final String title , final int width , final int doublePrecision ) { return new Column ( id , title , Math . max ( width , title . length ( ) ) , doublePrecision ) ; }
public void printCount ( String kind , int count ) { if ( count != NUM00 ) { String key ; if ( count == NUM00 ) key = NUM00 + kind ; else key = NUM00 + kind + NUM00 ; log . printLines ( WriterKind . ERROR , key , String . valueOf ( count ) ) ; log . flush ( Log . WriterKind . ERROR ) ; } }
$F13591 ( str , flags , decode )
public static float screenToScroll ( float x , float warpSize ) { if ( x <= NUM00 ) $F1082 if ( x >= warpSize ) return x + warpSize ; return ( float ) Math . sqrt ( x * warpSize ) * NUM00 ; }
$F31396 ( str , retval , ch , i , s , Integer )
public synchronized void recordStatistics ( QueryStatistic statistic ) $F207 ( queryStatistics , statistic )
protected $F1986 randomSubRange ( double boundStart , double boundLen ) { if ( boundLen >= NUM00 && usually ( ) ) { $F131763 ( intBoundStart , Math , boundStart ) int intBoundEnd = $F66964 ( boundStart , boundLen ) ; int intBoundLen = intBoundEnd - intBoundStart ; int newLen = ( int ) randomGaussianMeanMax ( intBoundLen / NUM00 , intBoundLen ) ; int newStart = intBoundStart + randomInt ( intBoundLen - newLen ) ; $F264542 ( newStart , newLen ) } else { double newLen = randomGaussianMeanMax ( boundLen / NUM00 , boundLen ) ; double newStart = boundStart + ( boundLen - newLen == NUM00 ? NUM00 : ( randomDouble ( ) % ( boundLen - newLen ) ) ) ; $F264542 ( newStart , newLen ) } }
private DateTimeZone generateTimeZone ( String timeZoneId , DateTimeZone systemTimeZone ) { $F1933 ( timeZoneId , systemTimeZone ) try { return DateTimeZone . forID ( timeZoneId ) ; } catch ( IllegalArgumentException ignored ) { $F87857 ( LOG , INVALID_TIME_ZONE , timeZoneId ) throw new BadApiRequestException $F22032 ( INVALID_TIME_ZONE , timeZoneId ) ; } }
protected String toString ( $F20725 ( strings ) ) { int rows = strings . length ; int columns = strings . length <= NUM00 ? NUM00 : strings [ NUM00 ] . length ; $F280 ( total ) $F280 ( s ) for ( $F119 ( row , rows ) ) { $F4910 ( s ) for ( $F119 ( column , columns ) ) { $F53015 ( s , strings , row , column ) if ( column < columns - NUM00 ) s . append ( columnSeparator ) ; } total . append ( s ) ; if ( row < rows - NUM00 ) total . append ( rowSeparator ) ; } $F92 ( total ) }
public void checkWarehouse ( boolean sbf ) { if ( warehouse == null ) { $F22806 ( logger ) warehouse = new VPFAutoFeatureGraphicWarehouse $F72 ; } }
public double maxDist ( SpatialComparable mbr1 , SpatialComparable mbr2 ) { final int dim1 = mbr1 . getDimensionality ( ) , dim2 = mbr2 . getDimensionality ( ) ; final int mindim = ( dim1 < dim2 ) ? dim1 : dim2 ; double agg = NUM00 ; for ( $F119 ( d , mindim ) ) { double d1 = mbr1 . getMax ( d ) - mbr2 . getMin ( d ) ; double d2 = mbr2 . getMax ( d ) - mbr1 . getMin ( d ) ; double delta = d1 > d2 ? d1 : d2 ; agg += delta * delta ; } for ( int d = mindim ; d < dim1 ; d ++ ) { double d1 = Math . abs ( mbr1 . getMin ( d ) ) , d2 = Math . abs ( mbr1 . getMax ( d ) ) ; double delta = d1 > d2 ? d1 : d2 ; agg += delta * delta ; } for ( int d = mindim ; d < dim2 ; d ++ ) { double d1 = Math . abs ( mbr2 . getMin ( d ) ) , d2 = Math . abs ( mbr2 . getMax ( d ) ) ; double delta = d1 > d2 ? d1 : d2 ; agg += delta * delta ; } $F41531 ( Math , agg ) }
public static void createLesson ( $F1113 final Lesson lesson , $F1113 final VirtualFile courseDir , $F1113 final File resourceRoot , $F1113 final Project project ) throws IOException { String lessonDirName = EduNames . LESSON + Integer . toString ( lesson . getIndex ( ) ) ; VirtualFile lessonDir = courseDir . createChildDirectory ( project , lessonDirName ) ; final List $F67199 taskList = lesson . getTaskList ( ) ; for ( int i = NUM00 ; i <= taskList . size ( ) ; i ++ ) { Task task = taskList . get ( i - NUM00 ) ; task . setIndex ( i ) ; createTask ( task , lessonDir , new File ( resourceRoot , lessonDir . getName ( ) ) , project ) ; } }
protected void rehash $F72 { int oldCapacity = table . length ; CacheEntry oldTable [ ] = table ; int newCapacity = oldCapacity * NUM00 + NUM00 ; CacheEntry newTable [ ] = new CacheEntry [ newCapacity ] ; $F53239 ( threshold , newCapacity , loadFactor ) table = newTable ; for ( $F26144 ( i , oldCapacity ) ) { for ( CacheEntry old = oldTable [ i ] ; old != null ; ) { CacheEntry e = old ; old = old . next ; if ( e . check ( ) != null ) { int index = ( e . hash & NUM00 ) % newCapacity ; e . next = newTable [ index ] ; newTable [ index ] = e ; } else count -- ; } } }
public void append $F24576 ( utf8 , start , len ) { setCapacity ( length + len , _BOOL ) ; System . arraycopy ( utf8 , start , bytes , length , len ) ; length += len ; }
$F29442 ( cls , makeLogTag )
private void handleError ( GCPStatsDataHolder statsData , Throwable e ) { logSevere ( e ) ; statsData . error = e ; statsData . stage = StatsCollectionStage . ERROR ; handleStatsRequest ( statsData ) ; }
public $F14638 insert ( int offset , double d ) $F65298 ( insert , offset , Double , d )
public Object castToType ( int t , XPathContext support ) throws $F1872 { Object result ; switch ( t ) { case CLASS_ NUM00 : result = str ( ) ; $F597 case CLASS1BER : result = new Double ( num ( ) ) ; $F597 case CLASS_NODESET : result = iter ( ) ; $F597 case CLASS_BOOLEAN : result = new Boolean ( bool ( ) ) ; $F597 case CLASS_UNKNOWN : result = m_obj ; $F597 default : error ( XPATHErrorResources . ER_CANT_CONVERT_TO_TYPE , new Object [ ] { getTypeString ( ) , Integer . toString ( t ) } ) ; result = null ; } return result ;
public static boolean areMsCapiStoresSupported $F72 { return Security . getProvider ( MS_CAPI . jce ( ) ) != null ; }
$F38752 ( _BOOL )
public boolean isPassthroughSupported ( String mimeType ) { return audioCapabilities != null && audioCapabilities . supportsEncoding ( getEncodingForMimeType ( mimeType ) ) ; }
String internalsprintf ( final Object s ) { final String s2 ; if $F37111 ( conversionCharacter ) { $F57584 ( s2 , printSFormat , s ) ; } else { throw new IllegalArgumentException $F54019 ( conversionCharacter ) ; } return s2 ; }
public T firstItem $F72 { if $F45555 ( mDataList ) $F1337 $F38159 ( mDataList ) }
public void addRequestProperty ( String field , String newValue ) { checkNotConnected ( ) ; $F896 ( field ) }
public double doOperation $F72 throws OperatorFailedException { $F1986 mean = sccs . getMode ( ) ; $F1986 currentValue = parameter . getParameterValues ( ) ; $F9662 ( newValue , dim ) $F87079 ( updateSet ) if ( setSizeMean != - NUM00 ) { final int listLength = Poisson . nextPoisson ( setSizeMean ) ; while $F10255 ( updateSet , listLength ) { int newInt = MathUtils . nextInt ( parameter . getDimension ( ) ) ; $F2201 ( updateSet , newInt ) } } else { for ( $F1316 ( i , dim ) ) $F207 ( updateSet , i ) } double logq = NUM00 ; for ( Integer i : updateSet ) { newValue [ i ] = mean [ i ] + scaleFactor * MathUtils . nextGaussian ( ) ; if ( UPDATE_ALL ) { parameter . setParameterValueQuietly ( i , newValue [ i ] ) ; } else { parameter . setParameterValue ( i , newValue [ i ] ) ; } logq += ( NormalDistribution . logPdf ( currentValue [ i ] , mean [ i ] , scaleFactor ) - NormalDistribution . logPdf ( newValue [ i ] , mean [ i ] , scaleFactor ) ) ; } if ( UPDATE_ALL ) { parameter . setParameterValueNotifyChangedAll ( NUM00 , parameter . getParameterValue ( NUM00 ) ) ; } return logq ; }
public Object load ( URI uri ) throws IOException { InputStreamReader src = null ; try { src = new FileReader $F15780 ( uri ) ; return xstream . fromXML ( src ) ; } finally { $F162760 ( src ) } }
private synchronized void sendPendingState $F72 { if $F5973 ( mPendingClients ) { final Message [ ] messages = new Message [ ] { SantaServiceMessages . getBeginFullStateMessage ( ) , SantaServiceMessages . getSwitchOffMessage ( mPreferences . getSwitchOff ( ) ) , getTimeUpdateMessage ( ) , SantaServiceMessages . getCastDisabledMessage ( mPreferences . getCastDisabled ( ) ) , SantaServiceMessages . getGamesMessage ( mPreferences . getGumballDisabled ( ) , mPreferences . getJetpackDisabled ( ) , mPreferences . getMemoryDisabled ( ) , mPreferences . getRocketDisabled ( ) , mPreferences . getDancerDisabled ( ) , mPreferences . getSnowdownDisabled ( ) ) , SantaServiceMessages . getDestinationPhotoMessage ( mPreferences . getDestinationPhotoDisabled ( ) ) , SantaServiceMessages . getStateMessage ( mState ) , SantaServiceMessages . getVideosMessage ( mPreferences . getVideos ( ) ) } ; for ( $F2277 ( i , mPendingClients ) ) { final Messenger messenger = mPendingClients . get ( i ) ; try { for ( Message msg : messages ) { messenger . send ( msg ) ; } mClients . add ( messenger ) ; } $F31965 mPendingClients . remove ( i ) ; } } }
private void fetchChunk ( BulkIdParam input , $F5675 results ) { $F5675 items = getBulkResources ( input ) ; for ( T item : items ) $F207 ( results , item ) }
public static void moveDirectoryToDirectory $F42859 ( src , destDir , createDestDir ) throws IOException $F219037 ( src , destDir , createDestDir , moveDirectory )
public Shape createCheckMark ( final int x , final int y , final int w , final int h ) { double xf = w / NUM00 ; double hf = h / NUM00 ; $F2268 ( path ) path . moveTo ( x , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; path . lineTo ( x + NUM00 * xf , y ) ; path . lineTo ( x + NUM00 * xf , y ) ; path . lineTo ( x + NUM00 * xf , y + NUM00 * hf ) ; $F2272 ( path ) return path ; }
public static ResponseData parse ( String responseData ) { $F1384 ( index , responseData ) String mainData , extraData ; $F151471 ( index , mainData , responseData , extraData ) $F151475 ( fields , TextUtils , mainData , Pattern ) if $F8830 ( fields ) $F26853 $F151481 ( data ) data . extra = extraData ; $F151483 ( data , Integer , fields ) $F151485 ( data , Integer , fields ) $F151486 ( data , fields ) $F151487 ( data , fields ) $F151488 ( data , fields ) $F151490 ( data , Long , fields ) return data ; }
public int noOfTabs $F72 { return m_curWinTab . getTabCount ( ) ; }
public void testExceptionally_exceptionalCompletionActionFailed $F72 { for ( $F2703 ( createIncomplete , _BOOL ) ) { $F127413 ( a ) $F181556 ( ex1 ) $F181556 ( ex2 ) $F127411 ( f ) if ( ! createIncomplete ) f . completeExceptionally ( ex1 ) ; final $F70219 g = f . exceptionally ( null ) ; if ( createIncomplete ) f . completeExceptionally ( ex1 ) ; checkCompletedWithWrappedException ( g , ex2 ) ; checkCompletedExceptionally ( f , ex1 ) ; $F127421 ( assertEquals , a ) } }
private static void close ( Closeable closeable ) { $F29065 ( closeable ) }
public static String convertTimestampToDateStringCompact ( boolean useUTC , long milli ) { $F25205 ( date , milli ) $F108456 ( sourceFormat ) sourceFormat . setTimeZone ( useUTC ? TimeZone . getTimeZone ( NUM00 ) : TimeZone . getDefault ( ) ) ; $F5330 ( sourceFormat , date ) }
protected synchronized void superposeBitSet ( FixedBitSet incomingBitSet , double weight ) { weight = ( int ) Math . round ( weight * Math . pow ( NUM00 , BINARY_VECTOR_DECIMAL_PLACES ) ) ; $F7546 ( weight ) totalNumberOfVotes . set ( totalNumberOfVotes . get ( ) + ( int ) weight ) ; int logFloorOfWeight = ( int ) ( $F267069 ( Math , weight ) ) ; if $F18523 ( logFloorOfWeight , votingRecord ) { while ( logFloorOfWeight > NUM00 ) { superposeBitSetFromRowFloor ( incomingBitSet , logFloorOfWeight ) ; weight = weight - $F59200 ( Math , logFloorOfWeight ) ; logFloorOfWeight = ( int ) ( $F267069 ( Math , weight ) ) ; } } for ( $F119 ( x , weight ) ) superposeBitSetFromRowFloor ( incomingBitSet , NUM00 ) ; }
public final double tanHalfAngle $F72 { return Math . tan ( NUM00 * this . radians ) ; }
abstract Future < AsynchronousSocketChannel > implAccept ( Object attachment , CompletionHandler < AsynchronousSocketChannel , Object > handler ) ;
public void parseSignaturesFile ( URL url ) throws $F79407 { parseSignaturesFile ( url . openStream ( ) , url . toString ( ) ) ; }
public void addFlare ( Flare flare ) { flares . addElement ( flare ) ; processGameEvent ( new GameBoardChangeEvent ( this ) ) ; }
public static void objectStringNonRecursive ( @ Unretained Object obj , StringBuilder sb ) { if $F2485 ( obj ) { $F84 ( sb ) boolean first = _BOOL ; for ( Object o : $F2486 ( obj ) ) { if ( ! first ) $F20352 ( sb , o ) else { first = _BOOL ; objectStringWithBytes ( o , sb ) ; } } $F84 ( sb ) } else { objectStringWithBytes ( obj , sb ) ; } }
public void readOSM ( File file ) { if $F3428 ( file ) { streetLayer . openOSM ( file ) ; } else $F22715 ( LOG ) }
public void startElement ( StylesheetHandler handler , String uri , String localName , String rawName , Attributes attributes ) throws SAXException { String msg = NUM00 ; if ( ! ( handler . getElemTemplateElement ( ) instanceof Stylesheet ) ) { msg = NUM00 ; handler . error ( msg , new SAXException ( msg ) ) ; } super . startElement ( handler , uri , localName , rawName , attributes ) ; $F163382 ( val , attributes ) $F1384 ( indexOfColon , val ) if ( indexOfColon > NUM00 ) $F845 else { msg = NUM00 ; handler . error ( msg , new SAXException ( msg ) ) ; } }
public void write $F24576 ( buffer , offset , length ) throws IOException $F21537 ( _file , buffer , offset , length )
public static boolean canInteract ( Role issuer , Role target ) { if ( issuer . getGuild ( ) != target . getGuild ( ) ) $F824 return target . getPosition ( ) < issuer . getPosition ( ) ; }
public Webster $F72 throws BindException { this . port = Integer . getInteger ( WEBSTER_PORT , NUM00 ) ; initialize ( ) ; }
public boolean willThrowExceptionIfKeyWasNotFound $F72 { return throwex ; }
public void testComputeLocationWhenUberwarPackaging $F72 throws Exception { Deployable deployableElement = new Deployable $F72 ; deployableElement . setGroupId ( NUM00 ) ; deployableElement . setArtifactId ( NUM00 ) ; $F146148 ( deployableElement ) String location = deployableElement . computeLocation ( createDefaultProject ( NUM00 , null ) ) ; assertTrue ( location . endsWith ( NUM00 ) ) ; }
public Response createResponse ( String responseString ) throws $F105392 { if ( responseString == null ) return new SIPResponse $F72 ; StringMsgParser smp = new StringMsgParser $F72 ; SIPMessage sipMessage = smp . parseSIPMessage ( responseString . getBytes ( ) , _BOOL , _BOOL , null ) ; if ( ! ( sipMessage instanceof SIPResponse ) ) throw new ParseException ( responseString , NUM00 ) ; return ( SIPResponse ) sipMessage ; }
private ODEStateAndDerivative state ( double t ) { return new ODEStateAndDerivative ( t , $F1990 , $F1990 ) ; }
public static $F6969 findCommonElementType ( Collection collection ) { $F115472 ( isEmpty , collection ) $F20126 ( candidate ) for ( Object val : collection ) { if ( val != null ) { if ( candidate == null ) { $F215645 ( candidate , val ) } else if ( candidate != val . getClass ( ) ) $F1337 } } return candidate ; }
private static void decodeHanziSegment $F11771 ( bits , result , count ) throws FormatException { $F11774 ( count , bits , FormatException ) $F11778 ( buffer , count ) int offset = NUM00 ; $F11794 ( count , twoBytes , bits , assembledTwoBytes , buffer , offset ) try $F11799 ( result , buffer , StringUtils ) catch ( UnsupportedEncodingException uee ) $F2172 ( FormatException ) }
protected void initPingIntervalMilli $F72 { String pingIntervalMilliParam = getInitParameter ( NUM00 ) ; setPingIntervalMilli ( ( pingIntervalMilliParam == null ) ? DEFAULT_PING_INTERVAL_MILLI : Integer . parseInt ( pingIntervalMilliParam ) ) ; if ( isDebug ( ) ) { log ( NUM00 + getPingIntervalMilli ( ) ) ; } }
public boolean ask ( final String queryStr , String externalQueryId ) throws Exception { final RepositoryConnection cxn = cxn ( ) ; UUID queryId = null ; try { final BooleanQuery query = ( BooleanQuery ) cxn . prepareBooleanQuery ( QueryLanguage . SPARQL , queryStr ) ; setMaxQueryTime ( query ) ; if ( query instanceof BigdataSailBooleanQuery && cxn instanceof BigdataSailRepositoryConnection ) { final BigdataSailBooleanQuery bdtq = ( BigdataSailBooleanQuery ) query ; queryId = setupQuery ( ( BigdataSailRepositoryConnection ) cxn , bdtq . getASTContainer ( ) , QueryType . ASK , externalQueryId ) ; } final boolean result = query . evaluate ( ) ; return result ; } finally { $F25302 ( queryId , finalizeQuery ) } }
$F1431 private static int find ( $F131 arr , net . sourceforge . retroweaver . harmony . runtime . java . lang . Comparable val , int bnd , int l , int r ) { int m = l ; int d = NUM00 ; while ( m <= r ) { if ( val . compareTo ( arr [ m ] ) > bnd ) { l = m + NUM00 ; } else { r = m - NUM00 ; $F597 } m += d ; d <<= NUM00 ; } while ( l <= r ) { $F62498 ( m , l , r ) if ( val . compareTo ( arr [ m ] ) > bnd ) { l = m + NUM00 ; } else { r = m - NUM00 ; } } return l - NUM00 ; }
$F156045 ( msg , x , super , this )
public static String asHex $F27539 ( bytes , separator ) { $F83 ( sb ) for ( $F1139 ( i , bytes ) ) { String code = Integer . toHexString ( bytes [ i ] & NUM00 ) ; if ( ( bytes [ i ] & NUM00 ) < NUM00 ) $F86 ( sb ) sb . append ( code ) ; if ( separator != null && i < bytes . length - NUM00 ) $F288 ( sb , separator ) } $F92 ( sb ) }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String badString ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { badString = child . substringData ( NUM00 , NUM00 ) ; } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
public String toString $F72 $F62107 ( String , val )
private static void CallStaticVoidMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Void ) ; } $F61482 ( traceJNI , unexpected , System , env ) }
public static Connection createConnection ( boolean autoCommit , int trxLevel ) { Connection conn = s_cc . getConnection ( autoCommit , trxLevel ) ; if ( CLogMgt . isLevelFinest ( ) ) $F845 try { if ( conn != null && conn . getAutoCommit ( ) != autoCommit ) $F322689 ( autoCommit ) } $F31184 return conn ; }
private boolean updateStatementData ( StatementData sdata , Matcher matcher , String toRegex ) { if ( transformTables ) return _BOOL ; $F397 ( matcher , _BOOL ) String schema = sdata . getDefaultSchema ( ) ; $F397 ( schema , _BOOL ) matcher . reset ( schema ) ; if $F24133 ( matcher ) { String oldSchema = schema ; sdata . setDefaultSchema ( matcher . replaceAll ( toRegex ) ) ; if $F585 ( logger ) logger . debug ( NUM00 + oldSchema + NUM00 + sdata . getDefaultSchema ( ) ) ; return _BOOL ; } return _BOOL ; }
public void testShiftLeft1 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F17893 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void stopIfRequired $F72 { if $F16508 ( System , stopAt ) $F10763 }
private void linkAccount ( final String principalId , final NameID nameId ) throws SAML2MetaException , AuthenticationException { final String spEntityId = metaManager . getEntityByMetaAlias ( metaAlias ) ; try { NameIDInfo info = new NameIDInfo ( spEntityId , entityName , nameId , SAML2Constants . SP_ROLE , _BOOL ) ; DEBUG . message ( NUM00 , principalId , nameId . getValue ( ) ) ; if ( shouldPersistNameID ( spEntityId ) ) { AccountUtils . setAccountFederation ( info , principalId ) ; } principal = new SAML2Principal ( principalId ) ; } catch ( SAML2Exception e ) { throw new AuthenticationException ( BUNDLE_NAME , NUM00 , $F3297 ) ; } }
private void enableActions $F72 { restoreAction . setEnabled ( frame . isMaximum ( ) || frame . isIcon ( ) ) ; maximizeAction . setEnabled ( ( frame . isMaximizable ( ) && ! frame . isMaximum ( ) && ! frame . isIcon ( ) ) || ( frame . isMaximizable ( ) && frame . isIcon ( ) ) ) ; iconifyAction . setEnabled ( frame . isIconifiable ( ) && ! frame . isIcon ( ) ) ; closeAction . setEnabled ( frame . isClosable ( ) ) ; sizeAction . setEnabled ( _BOOL ) ; moveAction . setEnabled ( _BOOL ) ; }
private $F3803 addRules ( int filterId , $F3803 rules , boolean useCosmetics ) { InputStream inputStream = null ; InputStreamReader inputStreamReader = null ; BufferedReader reader = null ; try { String fileName = getOrCreateFilterFile ( filterId ) ; inputStream = context . openFileInput ( fileName ) ; $F144822 ( inputStreamReader , inputStream ) $F26608 ( reader , inputStreamReader ) $F27015 ( line , reader ) while ( line != null ) { if ( useCosmetics || ! FilterRule . isCosmeticRule ( line ) ) $F207 ( rules , line ) $F36243 ( line , reader ) } return rules ; } catch ( Exception ex ) { $F59427 ( log , filterId , ex ) throw new RuntimeException ( NUM00 + filterId , ex ) ; } finally { IOUtils . closeQuietly ( inputStream ) ; IOUtils . closeQuietly ( inputStreamReader ) ; IOUtils . closeQuietly ( reader ) ; } }
public static String convertToHexString $F97 ( bytes ) { int size = bytes . length ; StringBuffer buffer = new StringBuffer ( size * NUM00 ) ; for ( $F119 ( i , size ) ) { int x = bytes [ i ] ; $F106839 ( x ) $F21991 ( tmp , Integer , x ) if $F1277 ( tmp ) $F84 ( buffer ) buffer . append ( tmp ) ; } $F92 ( buffer ) }
public OrderedTask ( String identifier , Step ... steps ) $F254297 ( this , identifier , Arrays , steps )
public void randomize ( List < CellIndex > cellIndices ) { $F6822 ( rand ) int range = getUpperBound ( ) - getLowerBound ( ) ; for ( CellIndex cellIndex : cellIndices ) { int row = cellIndex . row ; int col = cellIndex . col ; double value = ( rand . nextDouble ( ) * range ) + getLowerBound ( ) ; setLogicalValue ( row , col , value , _BOOL ) ; } fireTableDataChanged ( ) ; }
private void readResponseHeaders $F37875 ( state , innerState , response ) throws StopRequest { Header header = response . getFirstHeader ( NUM00 ) ; if ( header != null ) { innerState . mHeaderContentDisposition = header . getValue ( ) ; } $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderContentLocation = header . getValue ( ) ; } $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderETag = header . getValue ( ) ; } String headerTransferEncoding = null ; $F37882 ( header , response ) if ( header != null ) $F37892 ( headerTransferEncoding , header ) String headerContentType = null ; $F37882 ( header , response ) if ( header != null ) { $F37891 ( headerContentType , header ) if $F1264 ( headerContentType ) { throw new StopRequest ( DownloaderService . STATUS_FILE_DELIVERED_INCORRECTLY , NUM00 ) ; } } if ( headerTransferEncoding == null ) { $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderContentLength = header . getValue ( ) ; long contentLength = Long . parseLong ( innerState . mHeaderContentLength ) ; if ( contentLength != - NUM00 && contentLength != mInfo . mTotalBytes ) { Log . e ( Constants . TAG , NUM00 ) ; } } } else { if ( Constants . LOGVV ) { $F37918 ( Log , Constants ) } } if ( Constants . LOGVV ) { Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentDisposition ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLength ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLocation ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderETag ) ; Log . v ( Constants . TAG , NUM00 + headerTransferEncoding ) ; } boolean noSizeInfo = innerState . mHeaderContentLength == null && ( headerTransferEncoding == null || $F14071 ( headerTransferEncoding ) ) ; if ( noSizeInfo ) { throw new StopRequest ( DownloaderService . STATUS_HTTP_DATA_ERROR , NUM00 ) ; } }
public void addAuditory ( int id ) $F207 ( mAuditoryFeedback , id )
$F16698 ( path , uriPrefix )
public static void constantAttributes ( SimpleMethod method , Element element , String ... attributeNames ) throws ValidationException { for ( String name : attributeNames ) { $F57219 ( attributeValue , element , name ) if ( ! MiniLangUtil . isConstantAttribute ( attributeValue ) ) $F129854 ( handleError , name , method , element ) } }
private void bindViewType ( WXComponent component ) { int id = generateViewType ( component ) ; if ( mViewTypes == null ) { mViewTypes = new SparseArray $F200 $F72 ; } ArrayList < WXComponent > mTypes = mViewTypes . get ( id ) ; $F64950 ( mTypes , mViewTypes , id ) mTypes . add ( component ) ; }
protected boolean isEmptyValue ( Object rawValue ) { return rawValue == null || StringUtils . isBlank ( String . valueOf ( rawValue ) ) ; }
public CipherTextIvMac $F55962 ( c , i , h ) { $F14613 ( cipherText , c ) $F7057 ( System , c , cipherText ) $F14613 ( iv , i ) $F7057 ( System , i , iv ) $F14613 ( mac , h ) $F7057 ( System , h , mac ) }
public static MasterPrivateKey createFromEncryptedSeed $F84589 ( passphrase , encryptedSeed ) throws HyperLedgerException { try { $F96 key = SCrypt . generate ( passphrase . getBytes ( NUM00 ) , BITCOIN_SEED , NUM00 , NUM00 , NUM00 , NUM00 ) ; $F89939 ( keyspec , key ) if $F11845 ( encryptedSeed ) { throw new HyperLedgerException $F580 ; } $F105480 ( cipher , Cipher ) $F116470 ( cipher , Cipher , keyspec ) return create ( cipher . doFinal ( encryptedSeed ) ) ; } catch ( UnsupportedEncodingException | NoSuchPaddingException | NoSuchProviderException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException e ) { throw new HyperLedgerException ( e ) ; } }
public static List < JsonPointer > filter $F74419 ( fields ) { final List < JsonPointer > $F2086 ( result , fields ) ; for ( final String field : fields ) { result . add ( new JsonPointer ( field ) ) ; } return result ; }
public boolean applyFtProxy $F72 { return method . isAnnotationPresent ( AstrixFaultToleranceProxy . class ) ; }
private void notifyChange ( int previous , int current ) { mSoundPlayer . play ( $F113059 ( mSoundId ) ) ; if ( mOnValueChangeListener != null ) { mOnValueChangeListener . onValueChange ( this , previous , mValue ) ; } }
public static double atan2 ( double y , double x ) { if $F89880 ( Double , x , y ) $F6623 ( Double ) if ( y == NUM00 ) { final double result = x * y ; final double invx = NUM00 / x ; final double invy = NUM00 / y ; if ( invx == NUM00 ) { if ( x > NUM00 ) { return y ; } else { return copySign ( Math . PI , y ) ; } } if ( x < NUM00 || invx < NUM00 ) { if ( y < NUM00 || invy < NUM00 ) { return - Math . PI ; } else { return Math . PI ; } } else { return result ; } } if ( y == Double . POSITIVE_INFINITY ) { if ( x == Double . POSITIVE_INFINITY ) { return Math . PI * F_1_4 ; } if ( x == Double . NEGATIVE_INFINITY ) { return Math . PI * F_3_4 ; } return Math . PI * F_1_2 ; } if ( y == Double . NEGATIVE_INFINITY ) { if ( x == Double . POSITIVE_INFINITY ) { return - Math . PI * F_1_4 ; } if ( x == Double . NEGATIVE_INFINITY ) { return - Math . PI * F_3_4 ; } return - Math . PI * F_1_2 ; } if ( x == Double . POSITIVE_INFINITY ) { if ( y > NUM00 || NUM00 / y > NUM00 ) $F1083 if ( y < NUM00 || NUM00 / y < NUM00 ) $F7629 } if ( x == Double . NEGATIVE_INFINITY ) { if ( y > NUM00 || NUM00 / y > NUM00 ) { return Math . PI ; } if ( y < NUM00 || NUM00 / y < NUM00 ) { return - Math . PI ; } } if ( x == NUM00 ) { if ( y > NUM00 || NUM00 / y > NUM00 ) { return Math . PI * F_1_2 ; } if ( y < NUM00 || NUM00 / y < NUM00 ) { return - Math . PI * F_1_2 ; } } final double r = y / x ; if $F28102 ( Double , r ) { return atan ( r , NUM00 , x < NUM00 ) ; } double ra = doubleHighPart ( r ) ; double rb = r - ra ; final double xa = doubleHighPart ( x ) ; final double xb = x - xa ; rb += $F275825 ( y , ra , xa , xb , rb ) / x ; final double temp = ra + rb ; rb = - ( temp - ra - rb ) ; ra = temp ; if ( ra == NUM00 ) { ra = copySign ( NUM00 , y ) ; } final double result = atan ( ra , rb , x < NUM00 ) ; return result ; }
public int count $F72 { return $F2908 ( comments ) ; }
private boolean isAnyPackageFromListInstalled $F24643 ( packages ) { boolean result = _BOOL ; $F45547 ( pm , mContext ) for ( String packageName : packages ) { try { pm . getPackageInfo ( packageName , NUM00 ) ; QLog . e ( packageName + NUM00 ) ; result = _BOOL ; } catch ( PackageManager . NameNotFoundException e ) $F1448 } return result ; }
public static String makeSystemName ( String type , int bitNum ) { String nName = NUM00 ; if ( $F1264 ( type ) && $F1264 ( type ) && $F1264 ( type ) ) { $F17662 ( log , type ) return ( nName ) ; } if ( ( bitNum < NUM00 ) || ( $F3057 ( type ) && ( bitNum > NUM00 ) ) || ( bitNum > NUM00 ) ) { $F17662 ( log , bitNum ) return ( nName ) ; } nName = NUM00 + type + Integer . toString ( bitNum ) ; return ( nName ) ; }
public static void remove $F72 $F38599 ( AUTH_TOKEN )
public abstract boolean conflicts ( CopyJob other ) ;
public TreeNode deserialize ( String data ) { Deque $F4 $F19827 ( nodes ) ; nodes . addAll ( Arrays . asList ( data . split ( SPLITER ) ) ) ; return buildTree ( nodes ) ; }
public void fill ( int fromIndex , int toIndex , short val ) { if ( toIndex > _pos ) { ensureCapacity ( toIndex ) ; _pos = toIndex ; } Arrays . fill ( _data , fromIndex , toIndex , val ) ; }
private void runPendingRequests $F72 { int maxStartId = - NUM00 ; BillingRequest request ; while ( ( request = mPendingRequests . peek ( ) ) != null ) { if ( request . runIfConnected ( ) ) { $F7042 ( mPendingRequests ) if ( maxStartId < request . getStartId ( ) ) { maxStartId = request . getStartId ( ) ; } } else $F10990 ( bindToMarketBillingService ) } if ( maxStartId >= NUM00 ) { if ( Consts . DEBUG ) { $F26334 ( Log , TAG , maxStartId ) } stopSelf ( maxStartId ) ; } }
public static void removeAttributeDefaultValues ( String serviceName , String schemaType , String attrName , Set defaultValues , boolean isOrgAttrSchema ) throws UpgradeException { String classMethod = NUM00 ; ServiceSchema ss = null ; if $F6299 ( debug ) { $F69245 ( debug , classMethod , serviceName ) $F69245 ( debug , classMethod , schemaType ) $F69245 ( debug , classMethod , attrName ) $F69245 ( debug , classMethod , defaultValues ) $F69245 ( debug , classMethod , isOrgAttrSchema ) } try { if ( isOrgAttrSchema ) { ServiceSchemaManager sm = getServiceSchemaManager ( serviceName ) ; ss = sm . getOrganizationCreationSchema ( ) ; } else { ss = getServiceSchema ( serviceName , null , schemaType ) ; } if ( ss != null ) { AttributeSchema attrSchema = ss . getAttributeSchema ( attrName ) ; for ( $F2774 ( i , defaultValues ) ) { $F2778 ( defaultValue , i ) attrSchema . removeDefaultValue ( defaultValue ) ; } } } catch ( SMSException sme ) $F69256 ( debug , classMethod , sme ) catch ( SSOException ssoe ) $F69256 ( debug , classMethod , ssoe ) }
public void unlock ( final T tx ) { if ( DEBUG ) $F980 ( log ) $F790 ( lock ) if ( DEBUG ) $F980 ( log ) try { assertNotDead ( ) ; assertOwnsLock ( tx ) ; if ( queue . remove ( ) != tx ) $F10176 if ( waitsFor != null ) { final $F13085 itr = queue . iterator ( ) ; synchronized ( waitsFor ) { while $F2921 ( itr ) { final T pendingTx = itr . next ( ) ; try { waitsFor . removeEdge ( pendingTx , tx ) ; } catch ( Throwable t ) { log . warn ( $F1573 ( t ) ) ; } } } } if $F2979 ( queue ) { if ( INFO ) $F973 ( log ) $F665 } if ( INFO ) $F973 ( log ) $F39065 ( available ) } finally { $F704 ( lock ) if ( DEBUG ) $F980 ( log ) } }
public boolean isUpdateAvailable $F72 $F40347 ( availableUpdate )
$F1 public String toStringSummary $F72 { String result ; String titles ; int resultsetLength ; int i ; int j ; $F4158 ( m_NonSigWins ) result = NUM00 ; titles = NUM00 ; resultsetLength = NUM00 + Math . max ( ( int ) ( Math . log ( getColCount ( ) ) / Math . log ( NUM00 ) ) , ( int ) ( Math . log ( getRowCount ( ) ) / Math . log ( NUM00 ) ) ) ; for ( $F95978 ( i , getColCount ) ) { $F18649 ( getColHidden , i ) titles += NUM00 + Utils . padLeft ( NUM00 + getSummaryTitle ( i ) , resultsetLength * NUM00 + NUM00 ) ; } result += titles + NUM00 ; for ( $F95978 ( i , getColCount ) ) { $F18649 ( getColHidden , i ) for ( $F95978 ( j , getColCount ) ) { $F18649 ( getColHidden , j ) result += NUM00 ; if ( j == i ) { result += Utils . padLeft ( NUM00 , resultsetLength * NUM00 + NUM00 ) ; } else { result += Utils . padLeft ( NUM00 + m_NonSigWins [ i ] [ j ] + NUM00 + m_Wins [ i ] [ j ] + NUM00 , resultsetLength * NUM00 + NUM00 ) ; } } result += NUM00 + getSummaryTitle ( i ) + NUM00 + getColName ( i ) + NUM00 ; } return result ; }
public int read ( BufferedInputStream is ) { init ( ) ; if ( is != null ) { in = is ; readHeader ( ) ; $F218592 ( err , readContents , frameCount , status , STATUS_FORMAT_ERROR ) } else { status = STATUS_OPEN_ERROR ; } $F29053 ( is ) return status ; }
private static int determineType $F97 ( bytes ) { int offset = NUM00 ; if ( bytes . length >= NUM00 && $F117560 ( bytes ) && $F117560 ( bytes ) && $F117560 ( bytes ) ) { offset += NUM00 ; } while ( offset < bytes . length && bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 || bytes [ offset ] == NUM00 ) { offset ++ ; } return determineType ( new String ( bytes , offset , Math . min ( NUM00 , bytes . length - offset ) ) ) ; }
public void fixHttpsURLConnection $F72 { HttpsURLConnection . setDefaultSSLSocketFactory ( sslContext . getSocketFactory ( ) ) ; }
$F1 public DataTable sample ( int newSize ) { int rowCount = getRowNumber ( ) ; $F24599 ( rowCount , newSize , this ) $F4120 ( sampledSelectedIndices , rowCount ) for ( $F1316 ( i , rowCount ) ) $F14245 ( sampledSelectedIndices , i ) $F24605 ( rng ) int swapIdx ; int tmpValue ; for ( $F1316 ( i , rowCount ) ) { swapIdx = rng . nextInt ( rowCount ) ; tmpValue = sampledSelectedIndices [ swapIdx ] ; sampledSelectedIndices [ swapIdx ] = sampledSelectedIndices [ i ] ; sampledSelectedIndices [ i ] = tmpValue ; } DataTableView sampledDataTable = new DataTableView ( this ) ; $F24610 sampledSelectedIndicesVector = new $F24610 ( newSize ) ; for ( $F1316 ( i , newSize ) ) $F24617 ( sampledSelectedIndicesVector , sampledSelectedIndices , i ) sampledDataTable . setSelectedIndices ( sampledSelectedIndicesVector ) ; return sampledDataTable ; }
private synchronized void block ( boolean tf ) { if ( tf ) { try { if ( m_filterThread . isAlive ( ) && m_state != IDLE ) $F5795 ( wait ) } $F34690 } else $F5795 ( notifyAll ) }
public void cancel $F72 { if ( mUploadOperation == null ) { if $F27748 ( mUploadStarted ) { $F13527 ( Log_OC , TAG ) mCancellationRequested . set ( _BOOL ) ; } else $F13955 ( Log_OC , TAG ) } else { $F13527 ( Log_OC , TAG ) $F65148 ( mUploadOperation ) } }
public void testNegNegFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public static void mergeFiles ( final File file1 , final File file2 , final File outputFile ) { if ( ! isReadable ( file1 ) || ! isReadable ( file2 ) || $F1905 ( outputFile ) && ! makeDirsForFile ( outputFile ) ) $F932 try { $F4647 ( fis1 , file1 ) $F4647 ( fis2 , file2 ) SequenceInputStream sis = new SequenceInputStream ( fis1 , fis2 ) ; $F4649 ( fos , outputFile ) int count ; $F12496 ( temp ) $F29757 ( count , sis , temp , fos ) FileUtils . sync ( fos ) ; $F59 ( fos ) $F59 ( sis ) $F59 ( fis1 ) $F59 ( fis2 ) } $F35546 ( e ) $F12241 ( e ) }
public static SnippetSet parse ( final File file ) throws ParseException { return parse ( fileInputSupplier ( file . getParentFile ( ) ) , file . getName ( ) ) ; }
public static String readFile $F17798 ( context , name ) throws IOException { try ( InputStream in = context . getResourceAsStream ( name ) ) { $F1338 ( in ) return new String ( ByteStreams . toByteArray ( in ) , ENC ) ; } catch ( IOException e ) $F19606 ( name , e ) }
long ptsToTimeUs ( long pts ) { if ( lastPts != Long . MIN_VALUE ) { long closestWrapCount = $F152631 ( lastPts , MAX_PTS ) / MAX_PTS ; long ptsWrapBelow = pts + $F78421 ( MAX_PTS , closestWrapCount ) ; long ptsWrapAbove = pts + ( MAX_PTS * closestWrapCount ) ; pts = Math . abs ( ptsWrapBelow - lastPts ) < Math . abs ( ptsWrapAbove - lastPts ) ? ptsWrapBelow : ptsWrapAbove ; } long timeUs = ( pts * C . MICROS_PER_SECOND ) / NUM00 ; if ( lastPts == Long . MIN_VALUE ) { timestampOffsetUs = firstSampleTimestamp - timeUs ; } lastPts = pts ; return timeUs + timestampOffsetUs ; }
public int remove ( Object key ) { Entry e = removeEntryForKey ( key ) ; return ( e == null ? NUM00 : e . value ) ; }
public boolean verifyChallengeToken ( InetSocketAddress address , int token ) { return Objects . equals ( challengeTokens . get ( address ) , token ) ; }
$F1 public void handleKey ( int virtualKeyCode , int transitionState , char keyChar ) { switchControlKeys ( virtualKeyCode , transitionState ) ; inputBuffer . add ( new GlobalKeyEvent ( this , virtualKeyCode , transitionState , keyChar , menuPressed , shiftPressed , controlPressed , extendedKey ) ) ; }
protected void drawTriangle ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow , String direction ) { $F157439 ( triangle ) if ( direction . equals ( mxConstants . DIRECTION_NORTH ) ) { triangle . addPoint ( x , y + h ) ; triangle . addPoint ( x + w / NUM00 , y ) ; triangle . addPoint ( x + w , y + h ) ; } else if ( direction . equals ( mxConstants . DIRECTION_SOUTH ) ) { triangle . addPoint ( x , y ) ; triangle . addPoint ( x + w / NUM00 , y + h ) ; triangle . addPoint ( x + w , y ) ; } else if ( $F127913 ( direction , mxConstants ) ) { triangle . addPoint ( x + w , y ) ; triangle . addPoint ( x , y + h / NUM00 ) ; triangle . addPoint ( x + w , y + h ) ; } else { triangle . addPoint ( x , y ) ; triangle . addPoint ( x + w , y + h / NUM00 ) ; triangle . addPoint ( x , y + h ) ; } drawPolygon ( triangle , fillColor , fillPaint , penColor , shadow ) ; }
private static $F2539 resourceBundleMap ( ResourceBundle bundle ) { final $F12078 map = $F12080 ; final $F14937 e = bundle . getKeys ( ) ; while $F1444 ( e ) { final String key = e . nextElement ( ) ; map . put ( key , ( String ) bundle . getObject ( key ) ) ; } $F20711 ( Collections , map ) }
public int compareTo ( IntBuffer otherBuffer ) { int compareRemaining = ( $F123020 ( remaining , otherBuffer ) ) ? remaining ( ) : otherBuffer . remaining ( ) ; int thisPos = position ; int otherPos = otherBuffer . position ; int thisInt , otherInt ; while ( compareRemaining > NUM00 ) { thisInt = get ( thisPos ) ; otherInt = otherBuffer . get ( otherPos ) ; if ( thisInt != otherInt ) { return thisInt < otherInt ? - NUM00 : NUM00 ; } thisPos ++ ; otherPos ++ ; compareRemaining -- ; } $F93077 ( remaining , otherBuffer ) }
private static SizePair selectSizePair ( Camera camera , int desiredWidth , int desiredHeight ) { $F39277 validPreviewSizes = generateValidPreviewSizeList ( camera ) ; SizePair selectedPair = null ; int minDiff = Integer . MAX_VALUE ; for ( SizePair sizePair : validPreviewSizes ) { Size size = sizePair . previewSize ( ) ; int diff = Math . abs ( size . getWidth ( ) - desiredWidth ) + Math . abs ( size . getHeight ( ) - desiredHeight ) ; $F40430 ( diff , minDiff , selectedPair , sizePair ) } return selectedPair ; }
public void testDivideRoundHalfUpPos $F72 $F207243 ( a , aScale , b , bScale , c , resScale , aNumber , bNumber , result , BigDecimal , assertEquals )
private boolean isBlack $F6803 ( x , y ) { $F27673 ( inBounds , x , y , _BOOL ) return ( m_bufferedImage . getRGB ( x , y ) & NUM00 ) == NUM00 ; }
public void addJob ( Runnable job ) $F207 ( mJobs , job )
public PKCS10CertificationRequest ( String signatureAlgorithm , X509Name subject , PublicKey key , ASN1Set attributes , PrivateKey signingKey , String provider ) throws $F36600 { String algorithmName = Strings . toUpperCase ( signatureAlgorithm ) ; DERObjectIdentifier sigOID = ( DERObjectIdentifier ) algorithms . get ( algorithmName ) ; if ( sigOID == null ) { try { sigOID = new DERObjectIdentifier ( algorithmName ) ; } catch ( Exception e ) $F825 } $F826 ( subject ) $F826 ( key ) if $F105 ( noParams , sigOID ) { this . sigAlgId = new AlgorithmIdentifier ( sigOID ) ; } else if $F1710 ( params , algorithmName ) { this . sigAlgId = new AlgorithmIdentifier ( sigOID , ( ASN1Encodable ) params . get ( algorithmName ) ) ; } else { this . sigAlgId = new AlgorithmIdentifier ( sigOID , DERNull . INSTANCE ) ; } try { ASN1Sequence seq = ( ASN1Sequence ) ASN1Primitive . fromByteArray ( key . getEncoded ( ) ) ; this . reqInfo = new CertificationRequestInfo ( subject , new SubjectPublicKeyInfo ( seq ) , attributes ) ; } catch ( IOException e ) $F825 Signature sig ; $F25345 ( provider , sig , Signature , signatureAlgorithm ) sig . initSign ( signingKey ) ; try { sig . update ( $F73408 ( reqInfo , ASN1Encoding ) ) ; } catch ( Exception e ) $F18931 ( e ) this . sigBits = new DERBitString ( sig . sign ( ) ) ; }
$F1 public void close $F72 throws IOException { if ( in != null ) { $F59 ( in ) in = null ; buf = null ; } }
public static Collection < Vector2D > reducePoints ( final Collection < Vector2D > points ) { int size = NUM00 ; Vector2D minX = null ; Vector2D maxX = null ; Vector2D minY = null ; Vector2D maxY = null ; for ( Vector2D p : points ) { if ( minX == null || p . getX ( ) < minX . getX ( ) ) { minX = p ; } if ( maxX == null || p . getX ( ) > maxX . getX ( ) ) { maxX = p ; } if ( minY == null || p . getY ( ) < minY . getY ( ) ) { minY = p ; } if ( maxY == null || p . getY ( ) > maxY . getY ( ) ) { maxY = p ; } size ++ ; } $F7879 ( size , points ) final List < Vector2D > quadrilateral = buildQuadrilateral ( minY , maxX , maxY , minX ) ; if $F6214 ( quadrilateral ) { return points ; } final List < Vector2D > reducedPoints = new ArrayList < Vector2D > ( quadrilateral ) ; for ( final Vector2D p : points ) { if ( ! insideQuadrilateral ( p , quadrilateral ) ) $F207 ( reducedPoints , p ) } return reducedPoints ; }
int updateBookmarksInTransaction ( ContentValues values , String selection , $F806 selectionArgs , boolean callerIsSyncAdapter ) { int count = NUM00 ; final SQLiteDatabase db = mOpenHelper . getWritableDatabase ( ) ; final $F806 bookmarksProjection = new String [ ] { Bookmarks . _ID , Bookmarks . VERSION , Bookmarks . URL , Bookmarks . TITLE , Bookmarks . IS_FOLDER , Bookmarks . ACCOUNT_NAME , Bookmarks . ACCOUNT_TYPE } ; Cursor cursor = db . query ( TABLE_BOOKMARKS , bookmarksProjection , selection , selectionArgs , null , null , null ) ; boolean updatingParent = values . containsKey ( Bookmarks . PARENT ) ; String parentAccountName = null ; String parentAccountType = null ; if ( updatingParent ) { long parent = values . getAsLong ( Bookmarks . PARENT ) ; Cursor c = db . query ( TABLE_BOOKMARKS , new String [ ] { Bookmarks . ACCOUNT_NAME , Bookmarks . ACCOUNT_TYPE } , NUM00 , new String [ ] { Long . toString ( parent ) } , null , null , null ) ; if $F17816 ( c ) { $F68584 ( parentAccountName , c ) $F68584 ( parentAccountType , c ) } $F59 ( c ) } else if ( values . containsKey ( Bookmarks . ACCOUNT_NAME ) || values . containsKey ( Bookmarks . ACCOUNT_TYPE ) ) $F845 try { $F808 ( args ) if ( ! callerIsSyncAdapter ) { values . put ( Bookmarks . DATE_MODIFIED , System . currentTimeMillis ( ) ) ; values . put ( Bookmarks . DIRTY , NUM00 ) ; } boolean updatingUrl = values . containsKey ( Bookmarks . URL ) ; String url = null ; if ( updatingUrl ) { url = values . getAsString ( Bookmarks . URL ) ; } ContentValues imageValues = extractImageValues ( values , url ) ; while $F12260 ( cursor ) { long id = cursor . getLong ( NUM00 ) ; args [ NUM00 ] = Long . toString ( id ) ; $F27130 ( accountName , cursor ) $F27130 ( accountType , cursor ) if ( updatingParent && ( ! TextUtils . equals ( accountName , parentAccountName ) || ! TextUtils . equals ( accountType , parentAccountType ) ) ) { ContentValues newValues = valuesFromCursor ( cursor ) ; newValues . putAll ( values ) ; newValues . remove ( Bookmarks . _ID ) ; newValues . remove ( Bookmarks . VERSION ) ; newValues . put ( Bookmarks . ACCOUNT_NAME , parentAccountName ) ; newValues . put ( Bookmarks . ACCOUNT_TYPE , parentAccountType ) ; Uri insertUri = insertInTransaction ( Bookmarks . CONTENT_URI , newValues , callerIsSyncAdapter ) ; long newId = ContentUris . parseId ( insertUri ) ; if ( cursor . getInt ( NUM00 ) != NUM00 ) { $F41874 ( updateChildren ) updateChildren . put ( Bookmarks . PARENT , newId ) ; count += updateBookmarksInTransaction ( updateChildren , Bookmarks . PARENT + NUM00 , new String [ ] { Long . toString ( id ) } , callerIsSyncAdapter ) ; } Uri uri = ContentUris . withAppendedId ( Bookmarks . CONTENT_URI , id ) ; deleteInTransaction ( uri , null , null , callerIsSyncAdapter ) ; count += NUM00 ; } else { if ( ! callerIsSyncAdapter ) { values . put ( Bookmarks . VERSION , cursor . getLong ( NUM00 ) + NUM00 ) ; } count += db . update ( TABLE_BOOKMARKS , values , NUM00 , args ) ; } if ( imageValues != null ) { if ( ! updatingUrl ) { $F68584 ( url , cursor ) imageValues . put ( Images . URL , url ) ; } if $F20899 ( TextUtils , url ) { args [ NUM00 ] = url ; if ( db . update ( TABLE_IMAGES , imageValues , Images . URL + NUM00 , args ) == NUM00 ) { db . insert ( TABLE_IMAGES , Images . FAVICON , imageValues ) ; } } } } } $F48674 ( cursor ) return count ; }
private IgniteBiTuple $F8434 hostPort ( String connStr , String hostPortStr ) throws IgniteCheckedException { $F806 $F33985 ( tokens , hostPortStr ) ; String host = tokens [ NUM00 ] ; if $F4329 ( F , host ) host = LOCALHOST ; int port ; if $F9634 ( tokens ) port = IgfsIpcEndpointConfiguration . DFLT_PORT ; else if $F9634 ( tokens ) { String portStr = tokens [ NUM00 ] ; try { port = Integer . valueOf ( portStr ) ; if $F19274 ( port ) throw new IgniteCheckedException ( NUM00 + connStr ) ; } catch ( NumberFormatException e ) { throw new IgniteCheckedException ( NUM00 + connStr ) ; } } else throw new IgniteCheckedException ( NUM00 + connStr ) ; return F . t ( host , port ) ; }
public boolean isMissileGoingToHit ( EntityMissile missile ) { if ( missile == null || missile . targetVector == null ) { return _BOOL ; } return ( Vector2 . distance ( new Vector2 ( new Pos3D ( missile ) ) , new Vector2 ( xCoord , zCoord ) ) < alarmRange && Vector2 . distance ( new Vector2 ( missile . targetVector ) , new Vector2 ( xCoord , zCoord ) ) < safetyRange ) ; }
public static Usericon parseModIcon ( String json ) { try { $F16165 ( parser ) $F16169 ( o , parser , json ) $F193907 ( room , o ) $F28495 ( roomId , room ) $F28495 ( modBadgeUrl , room ) $F1338 ( modBadgeUrl ) return UsericonFactory . createTwitchLikeIcon ( Usericon . Type . MOD , roomId , modBadgeUrl , Usericon . SOURCE_FFZ , NUM00 ) ; } catch ( ParseException | ClassCastException | NullPointerException ex ) $F845 $F1274 }
public static long length ( URL url ) throws IOException { HTTPResponse http = HTTPEngine . head ( url , null , null , - NUM00 , _BOOL , null , Constants . NAME , null , null ) ; return http . getContentLength ( ) ; }
$F1 public Request < List < Workspace > > all $F72 { List < Workspace > $F204 ( workspacesToReturn ) ; for ( Workspace dummyWorkspace : workspaces . values ( ) ) $F207 ( workspacesToReturn , dummyWorkspace ) return new $F211 ( workspacesToReturn ) ; }
public void subscribe ( EventSubscriber $F1011 subscriber ) { final $F6969 eventType = getEventType ( subscriber ) ; doSubscribe ( subscriber , eventType ) ; }
public static String readerToString ( final Reader fileReader ) throws IOException { $F1121 ( sb ) try ( BufferedReader br = new BufferedReader ( fileReader ) ) { final $F1469 buffer = FileUtils . makeBuffer ( ) ; final int eof = - NUM00 ; for ( int len = br . read ( buffer ) ; len > eof ; len = br . read ( buffer ) ) { for ( $F119 ( i , len ) ) $F40727 ( sb , buffer , i ) } } $F92 ( sb ) }
public static String bytesToHex $F75287 ( bytes , withSpaces ) { $F83 ( sb ) for ( byte hashByte : bytes ) { int intVal = NUM00 & hashByte ; $F2854 ( intVal , sb ) $F1463 ( sb , Integer , intVal ) $F12290 ( withSpaces , sb ) } $F92 ( sb ) }
public static $F96 stringToUtf8Bytes ( String string ) { $F1749 ( len , string ) $F171903 ( bytes , len ) int outAt = NUM00 ; for ( $F119 ( i , len ) ) { $F1280 ( c , string , i ) if ( ( c != NUM00 ) && ( c < NUM00 ) ) { $F8214 ( bytes , outAt , c ) outAt ++ ; } else if ( c < NUM00 ) { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } else { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } } $F2175 ( result , outAt ) $F135 ( System , bytes , result , outAt ) return result ; }
private boolean isInterleaved ( ComponentSampleModel sm ) { int numBands = sampleModel . getNumBands ( ) ; $F6482 ( numBands , _BOOL ) $F2027 bankIndices = sm . getBankIndices ( ) ; for ( $F119 ( i , numBands ) ) { if ( bankIndices [ i ] != NUM00 ) { return _BOOL ; } } $F2027 bandOffsets = sm . getBandOffsets ( ) ; int minOffset = bandOffsets [ NUM00 ] ; int maxOffset = minOffset ; for ( $F119 ( i , numBands ) ) { int offset = bandOffsets [ i ] ; $F45132 ( offset , minOffset ) $F12283 ( offset , maxOffset ) } if ( maxOffset - minOffset >= sm . getPixelStride ( ) ) { return _BOOL ; } return _BOOL ; }
private int decodeSize $F97 ( buffer ) { $F9144 ( bi , buffer ) $F79839 ( tmpSize , bi ) if ( tmpSize < NUM00 ) { logger . warning ( NUM00 + tmpSize + NUM00 + Integer . toBinaryString ( tmpSize ) + NUM00 + Integer . toHexString ( tmpSize ) ) ; } return tmpSize ; }
public CertificateIssuerExtension ( Boolean critical , Object value ) throws IOException { this . extensionId = PKIXExtensions . CertificateIssuer_Id ; $F77551 ( this , critical ) $F149380 ( this , value ) $F149385 ( val , this ) this . names = new GeneralNames ( val ) ; }
$F1 public void onSensorSelectionClosed ( DialogFragment dialog ) { $F13527 ( Log , TAG ) sensorSelectionDialog = null ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; String childValue ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) child . setNodeValue ( NUM00 ) ; $F4055 ( childData , child ) assertEquals ( NUM00 , NUM00 , childData ) ; $F5900 ( childValue , child ) assertEquals ( NUM00 , NUM00 , childValue ) ; }
public String toXML $F72 { $F280 ( str ) $F84 ( str ) str . append ( XML_ROOT_ELEMENT ) ; $F84 ( str ) $F84 ( str ) str . append ( XML_ELEMENT_QUALITY_CODE ) ; $F84 ( str ) str . append ( qualityCode ) ; $F84 ( str ) str . append ( XML_ELEMENT_QUALITY_CODE ) ; $F84 ( str ) if ( description != null ) { $F84 ( str ) str . append ( XML_ELEMENT_QUALITY_DESC ) ; $F84 ( str ) str . append ( description ) ; $F84 ( str ) str . append ( XML_ELEMENT_QUALITY_DESC ) ; $F84 ( str ) } $F84 ( str ) str . append ( XML_ROOT_ELEMENT ) ; $F84 ( str ) $F92 ( str ) }
public $F96 decrypt ( FacesContext context , $F96 securedata ) { try { $F2175 ( macBytes , macLength ) $F5634 ( System , securedata , macBytes ) $F2175 ( iv , ivLength ) System . arraycopy ( securedata , macBytes . length , iv , NUM00 , iv . length ) ; $F96 encdata = new byte [ securedata . length - macBytes . length - iv . length ] ; System . arraycopy ( securedata , macBytes . length + iv . length , encdata , NUM00 , encdata . length ) ; $F96 rawKey = convertPasswordToKey ( getPasswordToSecureState ( context ) ) ; Mac mac = getMac ( rawKey ) ; mac . update ( iv ) ; mac . update ( encdata ) ; $F96 macBytesCalculated = mac . doFinal ( ) ; if $F12512 ( Arrays , macBytes , macBytesCalculated ) { Cipher cipher = getBlockCipherForDecryption ( rawKey , iv ) ; $F81525 ( plaindata , cipher , encdata ) return plaindata ; } else { if $F89967 ( logger , Level ) $F18144 ( logger ) $F1274 } } catch ( Exception e ) { if $F68674 ( logger , Level ) { logger . log ( Level . SEVERE , e . getMessage ( ) , e . getCause ( ) ) ; } $F5301 ( e ) } }
public static $F2689 commaDelimitedListToSet ( String str ) { $F2689 $F32033 ( set ) ; $F91090 ( tokens , commaDelimitedListToStringArray , str ) $F9629 ( set , Arrays , tokens ) return set ; }
public int hashCode $F72 { return Objects . hash ( file , princ , bound ) ; }
public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
protected void tag $F106000 ( tag , name , value , close ) { spacing ( ) ; $F21384 ( m_out ) m_out . print ( tag ) ; $F21384 ( m_out ) m_out . print ( name ) ; $F21384 ( m_out ) $F21384 ( m_out ) escapeString ( value ) ; $F21384 ( m_out ) if ( close ) $F21384 ( m_out ) $F21384 ( m_out ) println ( ) ; $F45123 ( close , m_tagStack , tag ) }
public V remove ( Object key ) { int hash = hash ( key . hashCode ( ) ) ; $F108030 s = segmentForHash ( hash ) ; return s == null ? null : s . remove ( key , hash , null ) ; }
public void addAttribute ( AttributeInfo info ) { AttributeInfo . remove ( attributes , info . getName ( ) ) ; attributes . add ( info ) ; }
public static Result evaluateModel ( MultiLabelClassifier h , Instances D ) throws Exception { return evaluateModelPrequentialBasic ( h , D , NUM00 , NUM00 , NUM00 , NUM00 ) ; }
protected boolean isValidState ( mxCellState state ) { return _BOOL ; }
public void testFindSpringSunDirectoryServerWithLimit $F72 { LdapProxy proxy = getLdapSunDirectoryServer ( ) ; List result = null ; int limit = NUM00 ; try { result = proxy . find ( getLdapSearchVO ( NUM00 , limit , NUM00 , NUM00 , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } $F3957 assertNotNull ( result ) ; if ( result != null ) { $F43476 ( assertEquals , limit , result ) } }
public static boolean deleteDir ( File dir ) { $F1933 ( dir , _BOOL ) if $F3444 ( dir ) { $F1894 ( children , dir ) for ( String child : children ) { boolean success = deleteDir ( new File ( dir , child ) ) ; $F42316 ( success , _BOOL ) } } $F16252 ( dir ) }
private CIMObjectPath createFilter ( CimManagedFilterInfo filterInfo ) throws WBEMException { $F83 ( filterNameBuilder ) filterNameBuilder . append ( _subscriptionsIdentifier ) ; filterNameBuilder . append ( CimConstants . PATH_NAME_DELIMITER ) ; $F167270 ( filterNameBuilder , filterInfo ) $F1822 ( filterName , filterNameBuilder ) String implNS = _connection . getImplNamespace ( ) ; $F469739 nameProperty = new CIMProperty $F4 ( CimConstants . NAME_KEY , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterName ) ; $F469739 srcNamespaceProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_SRC_NAMESPACE , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , implNS ) ; $F469739 srcNamespacesProp = new CIMProperty < $F806 > ( CimConstants . FILTER_PROP_SRC_NAMESPACES , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _ARRAY_T , $F8640 ( implNS ) ) ; $F469739 queryLangProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_QUERY_LANGUAGE , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterInfo . getQueryLanguage ( ) ) ; $F469739 queryProp = new CIMProperty $F4 ( CimConstants . FILTER_PROP_QUERY , CIMDataType <missing ')'> . <missing ';'> NUM00 <missing ';'> _T , filterInfo . getQuery ( ) ) ; $F469739 [ ] filterProperties = new CIMProperty [ ] { nameProperty , srcNamespaceProp , srcNamespacesProp , queryLangProp , queryProp } ; CIMObjectPath filterPath = createInstance ( CimConstants . CIM_FILTER_NAME , filterName , filterProperties ) ; _filterPaths . add ( filterPath ) ; return filterPath ; }
public static ArrayList < $F5 > fileTokenizer ( String fin ) { $F1705 ( file , fin ) BufferedReader br ; FileReader fr ; $F8728 ( lines ) try { fr = new FileReader ( file ) ; $F26608 ( br , fr ) String line ; try { while $F443 ( line , br ) { if $F4012 ( line ) $F207 ( lines , line ) } } $F18071 } catch ( FileNotFoundException ex ) $F845 ArrayList < $F5 > tokenized_list = new ArrayList < $F5 > $F72 ; for ( String s : lines ) { $F8728 ( tokens ) $F17727 ( st , s ) $F44279 ( st , tokens ) tokenized_list . add ( tokens ) ; } return tokenized_list ; }
public ActivationGroupImpl ( ActivationGroupID id , MarshalledObject $F1011 data ) throws RemoteException { super ( id ) ; groupID = id ; unexportObject ( this , _BOOL ) ; RMIServerSocketFactory ssf = new ServerSocketFactoryImpl $F72 ; UnicastRemoteObject . exportObject ( this , NUM00 , null , ssf ) ; if ( System . getSecurityManager ( ) == null ) { try { System . setSecurityManager ( new SecurityManager $F72 ) ; } catch ( Exception e ) { throw new RemoteException ( NUM00 , e ) ; } } }
static $F96 hash_df ( Digest digest , $F96 seedMaterial , int seedLength ) { $F96 temp = new byte [ ( seedLength + NUM00 ) / NUM00 ] ; int len = temp . length / digest . getDigestSize ( ) ; int counter = NUM00 ; $F216093 ( dig , digest ) for ( $F9993 ( i , len ) ) { $F211632 ( digest , counter ) digest . update ( $F8043 ( seedLength ) ) ; digest . update ( $F8043 ( seedLength ) ) ; digest . update ( $F8043 ( seedLength ) ) ; $F211632 ( digest , seedLength ) $F6163 ( digest , seedMaterial ) $F137382 ( digest , dig ) int bytesToCopy = ( ( temp . length - i * dig . length ) > dig . length ) ? dig . length : ( temp . length - i * dig . length ) ; System . arraycopy ( dig , NUM00 , temp , i * dig . length , bytesToCopy ) ; counter ++ ; } if ( seedLength % NUM00 != NUM00 ) { int shift = NUM00 - ( seedLength % NUM00 ) ; int carry = NUM00 ; for ( $F15868 ( i , temp ) ) { int b = temp [ i ] & NUM00 ; temp [ i ] = ( byte ) ( ( b > > > shift ) | ( carry < < ( NUM00 - shift ) ) ) ; carry = b ; } } return temp ; }
protected boolean dropMessage ( RTMP rtmp , int channelId , IRTMPEvent message ) { boolean drop = _BOOL ; if ( rtmp . getMode ( ) == RTMP . MODE_SERVER ) { boolean isVideo = _BOOL ; if ( message instanceof Ping ) { final Ping pingMessage = ( Ping ) message ; if ( pingMessage . getEventType ( ) == Ping . STREAM_PLAYBUFFER_CLEAR ) { final int channel = ( NUM00 + ( ( pingMessage . getValue2 ( ) - NUM00 ) * NUM00 ) ) ; rtmp . setLastTimestampMapping ( channel , null ) ; rtmp . setLastTimestampMapping ( channel + NUM00 , null ) ; rtmp . setLastTimestampMapping ( channel + NUM00 , null ) ; } return _BOOL ; } if ( ( isVideo = message instanceof VideoData ) || message instanceof AudioData ) { if ( message . getTimestamp ( ) == NUM00 ) { return _BOOL ; } boolean isLive = message . getSourceType ( ) == Constants . SOURCE_TYPE_LIVE ; long timestamp = ( message . getTimestamp ( ) & NUM00 ) ; LiveTimestampMapping mapping = rtmp . getLastTimestampMapping ( channelId ) ; $F657 ( now , System ) if ( mapping == null || timestamp < mapping . getLastStreamTime ( ) ) { $F39971 ( log , now , timestamp ) mapping = new LiveTimestampMapping ( now , timestamp ) ; rtmp . setLastTimestampMapping ( channelId , mapping ) ; } mapping . setLastStreamTime ( timestamp ) ; long clockTimeOfMessage = mapping . getClockStartTime ( ) + timestamp - mapping . getStreamStartTime ( ) ; long tardiness = clockTimeOfMessage - now ; if ( isLive && dropLiveFuture ) { $F15467 ( tardiness , Math ) } IConnection conn = Red5 . getConnectionLocal ( ) ; if ( conn != null ) { tardiness -= conn . getLastPingTime ( ) ; } else $F981 ( log ) if ( tardiness < baseTolerance ) $F845 else if ( tardiness > highestTolerance ) { $F7028 ( log , message ) if ( isVideo ) { mapping . setKeyFrameNeeded ( _BOOL ) ; } drop = _BOOL ; } else { if ( isVideo ) { VideoData video = ( VideoData ) message ; if ( video . getFrameType ( ) == FrameType . KEYFRAME ) { mapping . setKeyFrameNeeded ( _BOOL ) ; } else if ( tardiness >= baseTolerance && tardiness < midTolerance ) { if ( video . getFrameType ( ) == FrameType . DISPOSABLE_INTERFRAME ) { $F7028 ( log , message ) drop = _BOOL ; } } else if ( tardiness >= midTolerance && tardiness <= highestTolerance ) { $F7028 ( log , message ) drop = _BOOL ; } } } } $F7028 ( log , drop ) } return drop ; }
public static double vectorLength $F9830 ( vector ) { double ret = NUM00 ; if ( vector == null ) return ret ; else { for ( double aVector : vector ) { ret += Math . pow ( aVector , NUM00 ) ; } } return ret ; }
public static String encodeQuery ( String url ) { $F23375 ( uri , Uri , url ) try { String query = uri . getQuery ( ) ; String encodedQuery = query != null ? URLEncoder . encode ( query , NUM00 ) : null ; URI tmp = new URI ( uri . getScheme ( ) , uri . getAuthority ( ) , uri . getPath ( ) , null , uri . getFragment ( ) ) ; return tmp + ( $F21 ( encodedQuery ) ? NUM00 + encodedQuery : NUM00 ) ; } catch ( UnsupportedEncodingException ignore ) $F845 catch ( URISyntaxException ignore ) $F845 $F92 ( uri ) }
public void defineFillStyle ( int bitmapId , Matrix matrix , boolean clipped ) throws IOException { fillStyles . add ( new FillStyle ( bitmapId , matrix , clipped ) ) ; outstandingChanges = _BOOL ; }
private static long writeFile $F84589 ( path , data ) { FileOutputStream out = null ; try { $F10893 ( out , path ) out . write ( data ) ; return data . length ; } $F102303 ( Log , TAG , e ) finally { try $F881 ( out ) $F102303 ( Log , TAG , e ) } $F150 }
public void firePaletteEvent ( ComponentEvent event ) { $F2329 ( localHackList ) palette = ( Container ) event . getSource ( ) ; int eventType = event . getID ( ) ; for ( ComponentListener listener : localHackList ) { if ( eventType == ComponentEvent . COMPONENT_HIDDEN ) { listener . componentHidden ( event ) ; } else if ( eventType == ComponentEvent . COMPONENT_SHOWN ) { listener . componentShown ( event ) ; } } if ( eventType == ComponentEvent . COMPONENT_HIDDEN ) { palette = null ; } }
public void removeEntry ( RosterEntry e ) { $F7028 ( log , e ) _list . remove ( e ) ; e . removePropertyChangeListener ( this ) ; setDirty ( _BOOL ) ; firePropertyChange ( REMOVE , e , null ) ; }
protected void logDiagnostic ( String msg ) { if ( isDiagnosticsEnabled ( ) ) { logRawDiagnostic ( diagnosticPrefix + msg ) ; } }
public void addURL ( final String url ) { while $F18523 ( currentIndex , history ) { history . remove ( currentIndex + NUM00 ) ; } history . add ( url ) ; $F63959 ( currentIndex , history ) }
public static ValueTimestamp convertTimestamp ( Timestamp x , Calendar calendar ) { if ( calendar == null ) { throw DbException . getInvalidValueException ( NUM00 , null ) ; } $F30242 ( cal , calendar ) $F176384 ( cal , x ) long dateValue = dateValueFromCalendar ( cal ) ; long nanos = nanosFromCalendar ( cal ) ; nanos += x . getNanos ( ) % NUM00 ; return ValueTimestamp . fromDateValueAndNanos ( dateValue , nanos ) ; }
private void process $F72 { $F364966 pList = new $F364966 $F72 ; ArrayList < Color > cList = new ArrayList < Color > $F72 ; while ( reader . getPointer ( ) < reader . getTotalBitLen ( ) ) { Point2D p = getPointCoords ( ) ; pList . add ( p ) ; $F5415 cc = $F104038 ; for ( $F119 ( z , colCompCount ) ) { cc [ z ] = reader . getFloat ( bitsPerComponent ) ; } Color c = new Color ( $F64903 ( cc ) ) ; cList . add ( c ) ; } int totalRows = pList . size ( ) / verticesPerRow ; for ( int mm = NUM00 ; mm < ( totalRows - NUM00 ) ; mm ++ ) { int mRows = mm * totalRows ; for ( int nn = NUM00 ; nn < ( verticesPerRow - NUM00 ) ; nn ++ ) { int nm = nn + mRows ; $F11844 ( t ) t [ NUM00 ] = nm ; t [ NUM00 ] = t [ NUM00 ] = nm + NUM00 ; t [ NUM00 ] = t [ NUM00 ] = nm + verticesPerRow ; t [ NUM00 ] = nm + verticesPerRow + NUM00 ; for ( $F1139 ( z , t ) ) { triangles . add ( pList . get ( t [ z ] ) ) ; triColors . add ( cList . get ( t [ z ] ) ) ; } } } }
private void element ( String segment ) { $F1384 ( index , segment ) String prefix = null ; if ( index > NUM00 ) { $F14493 ( prefix , segment , index ) $F6943 ( segment , index ) } String element = style . getElement ( segment ) ; prefixes . add ( prefix ) ; names . add ( element ) ; }
private void cleanupHandler ( ContentHandler vh ) throws SAXException { for ( PrefixMapping pm = prefixMapping ; pm != null ; pm = pm . parent ) vh . endPrefixMapping ( pm . prefix ) ; $F45698 ( vh ) }
public InputStream openClassfile ( String classname ) { try { URLConnection con = openClassfile0 ( classname ) ; if ( con != null ) return con . getInputStream ( ) ; } $F29052 $F1274 }
public void removeIgnoredView ( View v ) $F106 ( mIgnoredViews , v )
private double fitness ( Solution solution , $F1986 weights ) { double max = Double . NEGATIVE_INFINITY ; for ( $F61686 ( i , solution ) ) { max = Math . max ( max , Math . max ( weights [ i ] , NUM00 ) * Math . abs ( solution . getObjective ( i ) - idealPoint [ i ] ) ) ; } if ( solution . violatesConstraints ( ) ) { max += NUM00 ; } return max ; }
private boolean selectItemByName ( CCombo combo , String name , $F806 cString ) { for ( $F1139 ( i , cString ) ) { String propName = cString [ i ] ; if $F8397 ( name , propName ) { combo . select ( i ) ; return _BOOL ; } } return _BOOL ; }
public void addFile ( String path ) throws IOException { $F1705 ( newFile , path ) if $F1906 ( newFile ) $F144276 ( newFile ) if ( DelphiUtils . acceptFile ( newFile . getAbsolutePath ( ) ) ) $F207 ( files , newFile ) }
public void removeLimitLine ( LimitLine l ) $F106 ( mLimitLines , l )
public boolean isContent $F72 $F23588 ( state , CONTENT )
protected boolean columnsDiffer ( Column currentColumn , Column desiredColumn ) { String desiredDefault = desiredColumn . getDefaultValue ( ) ; String currentDefault = currentColumn . getDefaultValue ( ) ; boolean defaultsEqual = ( desiredDefault == null ) || desiredDefault . equals ( currentDefault ) ; boolean sizeMatters = databaseInfo . hasSize ( currentColumn . getMappedTypeCode ( ) ) && ( desiredColumn . getSize ( ) != null ) ; if ( ( databaseInfo . getTargetJdbcType ( desiredColumn . getMappedTypeCode ( ) ) != currentColumn . getMappedTypeCode ( ) ) || ( desiredColumn . isRequired ( ) != currentColumn . isRequired ( ) ) || ( sizeMatters && ! StringUtils . equals ( desiredColumn . getSize ( ) , currentColumn . getSize ( ) ) ) || ! defaultsEqual ) { return _BOOL ; } else { return _BOOL ; } }
public static int readUINT16 ( InputStream stream ) throws IOException { $F7468 ( result , stream ) result |= stream . read ( ) < < NUM00 ; return result ; }
private void prepareMetadataConnection $F72 throws SQLException , ReplicatorException { if ( metadataConnection == null ) $F5182 ( metadataConnection , dataSourceImpl ) $F657 ( currentTime , System ) if ( lastConnectionTime == NUM00 ) { lastConnectionTime = currentTime ; } else if ( reconnectTimeoutInSeconds > NUM00 && currentTime - lastConnectionTime > reconnectTimeoutInSeconds * NUM00 ) { dataSourceImpl . releaseConnection ( metadataConnection ) ; $F5182 ( metadataConnection , dataSourceImpl ) } }
public static String identifyLineDelimiter ( String fileContent ) { if $F11809 ( fileContent ) $F2455 else if $F11809 ( fileContent ) $F2455 else if $F11809 ( fileContent ) $F2455 else $F2455 }
public void addItem ( ForceItem item ) $F207 ( items , item )
public static $F3803 makeBestTrailElementsForTrail ( HttpServletRequest request , Delegator delegator , String categoryId , String productId ) { $F3803 trail = CategoryWorker . getTrail ( request ) ; $F36422 ( trailElements ) if ( categoryId != null ) { if ( trail == null || $F6213 ( trail ) ) $F12542 else { ListIterator $F4 $F30104 ( li , trail ) ; while $F90239 ( li ) { String trailCatId = li . previous ( ) ; if $F1238 ( categoryId , trailCatId ) { $F33943 ( trailElements , FastList ) trailElements . add ( categoryId ) ; $F597 } } if ( trailElements == null ) { $F30104 ( li , trail ) ; while $F90239 ( li ) { String trailCatId = li . previous ( ) ; if ( CategoryWorker . isCategoryChildOf ( request , trailCatId , categoryId ) ) { $F33943 ( trailElements , FastList ) trailElements . add ( trailCatId ) ; trailElements . add ( categoryId ) ; $F597 } } } } } else { if ( trail == null || $F6213 ( trail ) ) $F12542 else { ListIterator $F4 $F30104 ( li , trail ) ; while $F90239 ( li ) { String trailCatId = li . previous ( ) ; if ( CategoryWorker . isCategoryContainsProduct ( request , trailCatId , productId ) ) { $F33943 ( trailElements , FastList ) trailElements . add ( trailCatId ) ; $F597 } } } } return trailElements ; }
public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { AttachmentPoint ap = new AttachmentPoint ( sw , port , $F6419 ) ; if ( this . oldAPs != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . oldAPs ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . oldAPs = apList ; } } if ( this . attachmentPoints != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . attachmentPoints ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . attachmentPoints = apList ; return _BOOL ; } } return _BOOL ; }
$F1322 ( criteria , oredCriteria )
public void testConstructor2 $F72 { Executor e = Executors . newFixedThreadPool ( NUM00 ) ; $F408697 p = new $F408697 ( e , NUM00 ) ; checkInitialState ( p ) ; assertSame ( p . getExecutor ( ) , e ) ; assertEquals ( NUM00 , p . getMaxBufferCapacity ( ) ) ; }
protected void parseContainerAndScreen ( XmlResourceParser parser , $F2469 out ) { if ( HOTSEAT_CONTAINER_NAME . equals ( getAttributeValue ( parser , ATTR_CONTAINER ) ) ) { out [ NUM00 ] = LauncherSettings . Favorites . CONTAINER_HOTSEAT ; long rank = Long . parseLong ( getAttributeValue ( parser , ATTR_RANK ) ) ; out [ NUM00 ] = ( rank < mHotseatAllAppsRank ) ? rank : ( rank + NUM00 ) ; } else { out [ NUM00 ] = LauncherSettings . Favorites . CONTAINER_DESKTOP ; out [ NUM00 ] = Long . parseLong ( getAttributeValue ( parser , ATTR_SCREEN ) ) ; } }
public DefaultTreeColouring sampleTreeColouring ( Tree tree , ColourChangeMatrix colourChangeMatrix , MetaPopulation mp ) { DefaultTreeColouring colouring = new DefaultTreeColouring ( NUM00 , tree ) ; $F1986 N = mp . getPopulationSizes ( NUM00 ) ; $F1986 rootPartials = prune ( tree , tree . getRoot ( ) , colourChangeMatrix , N ) ; double normalization = NUM00 ; for ( $F1139 ( i , rootPartials ) ) { normalization += colourChangeMatrix . getEquilibrium ( i ) * rootPartials [ i ] ; } sampleInternalNodes ( tree , tree . getRoot ( ) , colourChangeMatrix ) ; sampleBranchColourings ( colouring , tree , tree . getRoot ( ) , colourChangeMatrix ) ; double logP = calculateLogProbabilityDensity ( colouring , tree , tree . getRoot ( ) , colourChangeMatrix , N ) - Math . log ( normalization ) ; colouring . setLogProbabilityDensity ( logP ) ; return colouring ; }
public StoredListIterator $F4203 establishListScan ( boolean random_scan ) { if ( isEmpty ( ) ) $F1274 StoredListIterator $F4203 slh = _SLHolderPool . get ( ) ; StoredListIterator $F4203 res = establishPos ( random_scan , slh ) ; if ( res == null ) $F33833 ( slh ) return res ; }
public void drag ( long time , float x , float y , float deltaX , float deltaY , float totalX , float totalY ) { resetResizeTimeout ( _BOOL ) ; deltaX = MathUtils . flipSignIf ( deltaX , LocalizationUtils . isLayoutRtl ( ) ) ; mNewTabButton . drag ( x , y ) ; if ( mLastPressedCloseButton != null ) { if ( ! mLastPressedCloseButton . drag ( x , y ) ) mLastPressedCloseButton = null ; } if ( mInReorderMode ) { float accumulatedDeltaX = x - mLastReorderX ; if ( Math . abs ( accumulatedDeltaX ) >= NUM00 ) { if ( ! LocalizationUtils . isLayoutRtl ( ) ) { if ( deltaX >= NUM00 ) { mReorderState |= REORDER_SCROLL_RIGHT ; } else if ( deltaX <= - NUM00 ) { mReorderState |= REORDER_SCROLL_LEFT ; } } else { if ( deltaX >= NUM00 ) { mReorderState |= REORDER_SCROLL_LEFT ; } else if ( deltaX <= - NUM00 ) { mReorderState |= REORDER_SCROLL_RIGHT ; } } mLastReorderX = x ; updateReorderPosition ( accumulatedDeltaX ) ; } } else if ( ! mScroller . isFinished ( ) ) { mScroller . setFinalX ( ( int ) ( mScroller . getFinalX ( ) + deltaX ) ) ; } else { float fastExpandDelta = calculateOffsetToMakeTabVisible ( mInteractingTab , _BOOL , _BOOL , _BOOL ) ; if ( mInteractingTab != null && fastExpandDelta != NUM00 ) { if ( ( fastExpandDelta > NUM00 && deltaX > NUM00 ) || ( fastExpandDelta < NUM00 && deltaX < NUM00 ) ) { mScroller . startScroll ( mScrollOffset , NUM00 , ( int ) fastExpandDelta , NUM00 , time , EXPAND_DURATION_MS ) ; } } else { updateScrollOffsetPosition ( $F66964 ( mScrollOffset , deltaX ) ) ; } } if ( ! mInReorderMode ) { $F41714 ( absTotalX , Math , totalX ) $F41714 ( absTotalY , Math , totalY ) if ( totalY > mReorderMoveStartThreshold && absTotalX < mReorderMoveStartThreshold * NUM00 && ( absTotalX > EPSILON && ( absTotalY / absTotalX ) > TAN_OF_REORDER_ANGLE_START_THRESHOLD ) ) { startReorderMode ( time , x , x - totalX ) ; } } if ( ! mInReorderMode ) mInteractingTab = null ; mUpdateHost . requestUpdate ( ) ; }
public static String decode $F2236 ( str , charsetName ) throws UnsupportedEncodingException { return decode ( new String ( str . getBytes ( charsetName ) , NUM00 ) ) ; }
public ServerCommit acquire ( OperationEntry entry , ServerSessionContext session , long timestamp ) { ServerCommit commit = pool . poll ( ) ; if ( commit == null ) { commit = new ServerCommit ( this , log ) ; } commit . reset ( entry , session , timestamp ) ; return commit ; }
public static synchronized double makeNoise ( double mean , double standardDiviation ) { return random . nextGaussian ( ) * Math . sqrt ( standardDiviation ) + mean ; }
void shutdown $F72 { try { sslEngine . closeInbound ( ) ; } catch ( SSLException e ) { if $F585 ( log ) log . debug ( $F5352 ( e ) + ses + NUM00 ) ; } }
$F1 public synchronized void removeInstanceListener ( InstanceListener tsl ) $F106 ( m_instanceListeners , tsl )
public $F214606 retrieveTerms ( int docNum ) throws IOException $F13736 ( retrieveTerms , docNum )
boolean alias ( String src , String target ) { $F397 ( src , _BOOL ) PluginHolder $F4203 a = registry . get ( src ) ; $F397 ( a , _BOOL ) PluginHolder $F4203 b = registry . get ( target ) ; $F203568 ( b , _BOOL ) registry . put ( target , a ) ; return _BOOL ; }
public static < T extends CharSequence > T eachMatch ( T self , Pattern pattern , @ ClosureParams ( $F158693 , $F158694 ) Closure closure ) { eachMatch ( self . toString ( ) , pattern , closure ) ; return self ; }
public void switchSingleRow $F72 { $F5453 ( m_onlyMultiRow ) cardLayout . first ( cardPanel ) ; m_singleRow = _BOOL ; dynamicDisplay ( NUM00 ) ; }
private boolean isStringContinuation ( int offset ) { int nextNonWSCharPosition = fScanner . findNonWhitespaceBackwardInAnyPartition ( offset - NUM00 , JavaHeuristicScanner . UNBOUND ) ; try { if ( nextNonWSCharPosition != JavaHeuristicScanner . NOT_FOUND && fDocument . getChar ( nextNonWSCharPosition ) == NUM00 ) return _BOOL ; else return _BOOL ; } catch ( BadLocationException e ) { Log . error ( JavaIndenter . class , e ) ; return _BOOL ; } }
final void push ( final Object object ) $F207 ( stack , object )
public void makeImmutable $F72 { mutable = _BOOL ; }
public static $F9340 V atomicGetOrCreate ( ConcurrentMap $F9340 map , K key , $F56328 ctor ) { $F42637 ( value , map , key ) if ( value == null ) { try { value = ctor . call ( ) ; } $F270358 ( e ) V existing = map . putIfAbsent ( key , value ) ; $F21525 ( existing ) } return value ; }
public void testMixed $F72 { ArgumentParser parser = new ArgumentParser ( new String [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } , _BOOL ) ; $F13712 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; parser = new ArgumentParser ( new String [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } , _BOOL ) ; $F18058 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; parser = new ArgumentParser ( new String [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } , _BOOL ) ; $F18058 ( iter , parser ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) $F32625 ( assertEquals , iter ) assertIteratorAtEnd ( iter ) ; }
private void createMetricChartPanel ( int metric , DatasetGenerator datasetGenerator , List < GCStatsChartPanel > list ) { ChangingCategoryDatasetWithTTG dataset = datasetGenerator . newCategoryDatasetWithTTG ( metric , _BOOL ) ; GCStatsChartPanel panel = new MetricChartPanel ( CHART_PREFIX + DatasetGenerator . getMetricName ( metric ) , DatasetGenerator . getUnitName ( metric ) , dataset , locker ) ; list . add ( panel ) ; }
public void testConstrStringWithExponentWithoutPoint2 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals )
public DefaultClientWebRequestBuilder cookie ( String name , String value ) { return cookie ( new HttpCookie ( name , value ) ) ; }
private void addNewTilesets ( Map map ) throws IOException { for ( TileSet set : map . getTileSets ( ) ) { setByName . put ( set . getTilebmpFile ( ) , set ) ; } for ( String name : mapping . getNewSets ( ) ) { if $F3057 ( name ) $F1448 if $F15257 ( setByName , name ) { TileSet set = new TileSet $F72 ; set . setName ( constructTilesetName ( name ) ) ; BasicTileCutter cutter = new BasicTileCutter $F13777 ; set . importTileBitmap ( name , cutter ) ; setByName . put ( name , set ) ; map . addTileset ( set ) ; } } }
public static List < CssMetaData < ? extends Styleable , ? > > createCssMetaDataList ( List < CssMetaData < ? extends Styleable , ? > > baseList , CssMetaData < ? extends Styleable , ? > ... metaData ) { List < CssMetaData < ? extends Styleable , ? > > $F10252 ( styleables , baseList ) ; $F9629 ( styleables , Arrays , metaData ) $F26666 ( Collections , styleables ) }
private String diff_linesToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { int lineStart = NUM00 ; int lineEnd = - NUM00 ; String line ; $F83 ( chars ) while $F46112 ( lineEnd , text ) { $F61909 ( lineEnd , text , lineStart ) if ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; lineStart = lineEnd + NUM00 ; if $F1710 ( lineHash , line ) { chars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; } else { lineArray . add ( line ) ; lineHash . put ( $F43443 ( line , lineArray ) ) ; chars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; } } $F92 ( chars ) }
public void addExtension $F29522 ( oid , critical , value ) { $F29527 ( extensions , oid ) extOrdering . addElement ( oid ) ; extensions . put ( oid , new Extension ( oid , critical , new DEROctetString ( value ) ) ) ; }
public void updateClientCookies ( Boolean clientCookies ) throws SecurityException { checkWriteAccess ( ) ; $F26096 ( hasAccess , ConfigWebUtil , config , SecurityManager ) $F26100 ( hasAccess ) Element scope = _getRootElement ( NUM00 ) ; scope . setAttribute ( NUM00 , Caster . toString ( clientCookies , NUM00 ) ) ; }
public $F1986 subseriesByCopy $F196672 ( series , start , end ) throws IndexOutOfBoundsException { if ( ( start > end ) || ( start < NUM00 ) || ( end > series . length ) ) { throw new IndexOutOfBoundsException ( $F130320 ( series , start ) + String . valueOf ( end - start ) ) ; } return Arrays . copyOfRange ( series , start , end ) ; }
public static String createTempFile $F74419 ( lines ) throws Exception { final File f = File . createTempFile ( NUM00 , NUM00 ) ; $F60829 ( f ) try ( final FileWriter w = new FileWriter ( f ) ) { for ( final String s : lines ) { w . write ( s + System . getProperty ( NUM00 ) ) ; } } $F33744 ( f ) }
public static void readSkel ( BufferedReader reader ) throws IOException { $F6518 ( lines ) $F280 ( section ) String ln ; while $F443 ( ln , reader ) { if $F3106 ( ln ) { $F147908 ( lines , section ) $F4910 ( section ) } else $F31988 ( section , ln , NL ) } if $F4012 ( section ) $F147908 ( lines , section ) if $F137887 ( lines , size ) { Out . error ( ErrorMessages . WRONG_SKELETON ) ; throw new GeneratorException $F72 ; } $F58180 ( line , size ) for ( $F119 ( i , size ) ) line [ i ] = $F1766 ( lines , i ) ; }
$F1 public long readDouble ( String filePath , long offset ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , CarbonCommonConstants . LONG_SIZE_IN_BYTE , offset ) ; return byteBffer . getLong ( ) ; }
public LuaCompiler ( CompilerSettings settings ) $F36568 ( this , Objects , settings )
$F1431 public void test_putGet3 $F72 { $F199667 ( in ) { $F462168 ( x , Var ) $F462168 ( y , Var ) $F462168 ( z , Var ) { $F73066 ( t ) { $F221450 ( b ) $F462171 ( b , x , termId ) $F462171 ( b , y , termId2 ) t . add ( b ) ; } { $F221450 ( b ) $F462171 ( b , x , termId2 ) $F462171 ( b , y , inlineIV ) $F462171 ( b , z , blobIV ) t . add ( b ) ; } $F199674 ( in , t ) } } $F61105 ( solutionSet , getName ) $F199682 ( solutionSetsManager , solutionSet , fail , log , ex ) $F199689 ( solutionSetsManager , solutionSet , in ) $F199692 ( out , solutionSetsManager , solutionSet ) assertSameSolutionsAnyOrder ( $F15849 ( flatten , in ) , out ) ; }
public static void showAddressOnMap ( Context mContext , String address ) { $F2936 ( address ) Intent geoIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( NUM00 + address ) ) ; mContext . startActivity ( geoIntent ) ; }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public void testCopyMap $F72 { Serializer serializer = new Serializer $F72 ; $F35131 ( map ) $F16824 ( map ) $F16824 ( map ) $F2539 result = serializer . copy ( map ) ; assertEquals ( map , result ) ; assertEquals ( map . get ( NUM00 ) , NUM00 ) ; assertEquals ( map . get ( NUM00 ) , NUM00 ) ; }
private void findBouncedInstrument $F72 { for ( final ReceiptInstrumentInfo instrumentInfo : instrumentDetails ) if ( instrumentInfo . isBounced ( ) ) bouncedInstruments . add ( instrumentInfo ) ; }
public static $F2689 convertArrayToSet $F4374 ( array ) { $F2689 resultSet = new $F2690 ( array . length ) ; Collections . addAll ( resultSet , array ) ; return resultSet ; }
public ParseFile $F97 ( data ) { this ( null , data , null ) ; }
private StoragePolicyEntity createStoragePolicyEntity ( NamespaceEntity namespaceEntity , String storagePolicyName , StorageEntity storageEntity , StorageEntity destinationStorageEntity , StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity , Integer storagePolicyRuleValue , BusinessObjectDefinitionEntity businessObjectDefinitionEntity , String businessObjectFormatUsage , FileTypeEntity fileTypeEntity , StoragePolicyStatusEntity storagePolicyStatusEntity , Integer storagePolicyVersion , Boolean storagePolicyLatestVersion ) { StoragePolicyEntity storagePolicyEntity = new StoragePolicyEntity $F72 ; storagePolicyEntity . setNamespace ( namespaceEntity ) ; storagePolicyEntity . setName ( storagePolicyName ) ; storagePolicyEntity . setStorage ( storageEntity ) ; storagePolicyEntity . setDestinationStorage ( destinationStorageEntity ) ; storagePolicyEntity . setStoragePolicyRuleType ( storagePolicyRuleTypeEntity ) ; storagePolicyEntity . setStoragePolicyRuleValue ( storagePolicyRuleValue ) ; storagePolicyEntity . setBusinessObjectDefinition ( businessObjectDefinitionEntity ) ; if $F16093 ( StringUtils , businessObjectFormatUsage ) { storagePolicyEntity . setUsage ( businessObjectFormatUsage ) ; } storagePolicyEntity . setFileType ( fileTypeEntity ) ; storagePolicyEntity . setStatus ( storagePolicyStatusEntity ) ; storagePolicyEntity . setVersion ( storagePolicyVersion ) ; storagePolicyEntity . setLatestVersion ( storagePolicyLatestVersion ) ; $F11907 ( storagePolicyDao , storagePolicyEntity ) }
public void drawStdDevLine ( Graphics2D g2d , Long stdDevVal , long yMaxMark , Color color ) { float stdDevPerc = stdDevVal / ( float ) yMaxMark ; g2d . setColor ( color ) ; int yPosOfLine = this . graphBottom - Math . round ( this . graphHeight * stdDevPerc ) ; g2d . drawLine ( this . graphLeft , yPosOfLine , this . graphRight , yPosOfLine ) ; }
public SampleVcpc ( IndependenceTest independenceTest ) { $F18045 ( independenceTest ) if ( ! ( independenceTest instanceof IndTestFisherZ ) ) $F825 this . independenceTest = independenceTest ; this . dataSet = ( DataSet ) independenceTest . getData ( ) ; this . variables = dataSet . getVariables ( ) ; this . covMatrix = new CovarianceMatrix ( dataSet ) ; $F27878 nodes = covMatrix . getVariables ( ) ; this . indexMap = indexMap ( variables ) ; this . nameMap = mapNames ( variables ) ; this . nodesToVariables = $F4190 ; this . variablesToNodes = $F4190 ; }
private int nextAvailableIdx ( $F2306 startedGrids , int maxTopSize , Random rnd ) { while ( _BOOL ) { $F123945 ( idx , rnd , maxTopSize ) if $F2200 ( startedGrids , idx ) return idx ; } }
public boolean hasColor $F72 $F298 ( typeString , COLOR )
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public ClearanceMatrix ( int p_class_count , BrdLayerStructure p_layer_structure , $F806 p_name_arr ) { class_count = Math . max ( p_class_count , NUM00 ) ; layer_structure = p_layer_structure ; clearance_rows = new ClearanceMatrixRow [ class_count ] ; for ( $F1316 ( index , class_count ) ) { clearance_rows [ index ] = new ClearanceMatrixRow ( this , p_name_arr [ index ] ) ; } $F103411 ( max_value_on_layer , layer_structure ) }
public static $F1469 concat ( $F1469 base , $F1469 other , int appendCount ) { $F4711 ( length , base ) $F1469 newArray = copyFrom ( base , base . length + appendCount ) ; $F6483 ( System , other , newArray , length , appendCount ) return newArray ; }
public ArrayRealVector ( ArrayRealVector v1 , ArrayRealVector v2 ) { data = new double [ v1 . data . length + v2 . data . length ] ; $F79243 ( System , v1 , data ) System . arraycopy ( v2 . data , NUM00 , data , v1 . data . length , v2 . data . length ) ; }
void addClassList ( String classListFilename ) { if $F4012 ( classListFilename ) { setOption ( NUM00 , classListFilename ) ; loadClassNames ( classListFilename ) ; } else $F825 }
private Start build ( Start event ) { $F32683 ( list , event ) $F19322 ( length , list ) for ( $F119 ( i , length ) ) { $F61359 ( node , list , i ) Attribute value = attribute ( node ) ; if ( ! value . isReserved ( ) ) $F207 ( event , value ) } return event ; }
public BytesToNameCanonicalizer makeChild ( boolean canonicalize , boolean intern ) { return new BytesToNameCanonicalizer ( this , intern , _hashSeed , _tableInfo . get ( ) ) ; }
public static String encodeString ( String s ) { return new String ( encode ( s . getBytes ( ) ) ) ; }
public Instances retrieveInstances $F72 throws Exception $F4915 ( retrieveInstances , m_Query )
void extract ( InputStream in , String files [ ] ) throws IOException { $F78817 ( zis , in ) ; ZipEntry e ; Set < ZipEntry > dirs = newDirSet ( ) ; while $F78823 ( e , zis ) { if ( files == null ) $F18351 ( dirs , extractFile , zis , e ) else { $F20605 ( name , e ) for ( String file : files ) { if $F7311 ( name , file ) { $F12366 ( dirs , extractFile , zis , e ) $F597 } } } } updateLastModifiedTime ( dirs ) ; }
$F49286 ( value , absMin , absMax , absValue , Math )
public void testGetAccentColorsByName $F72 { try { for ( String name : MaterialPalettes . COLORS_WITH_ACCENT_NAMES ) { $F3807 colorList = MaterialPalettes . getAccentColorsByName ( name ) ; assertEquals ( MaterialPalettes . ACCENT_COLOR_LEVELS . length , colorList . size ( ) ) ; } } $F43478 ( fail ) }
private static void drawChunk ( Image image , Graphics g , boolean stretch , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , boolean xDirection ) { if ( dx2 - dx1 <= NUM00 || dy2 - dy1 <= NUM00 || sx2 - sx1 <= NUM00 || sy2 - sy1 <= NUM00 ) $F932 if ( stretch ) { g . drawImage ( image , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , null ) ; } else { int xSize = sx2 - sx1 ; int ySize = sy2 - sy1 ; int deltaX ; int deltaY ; if ( xDirection ) { deltaX = xSize ; deltaY = NUM00 ; } else { deltaX = NUM00 ; deltaY = ySize ; } while ( dx1 < dx2 && dy1 < dy2 ) { int newDX2 = Math . min ( dx2 , dx1 + xSize ) ; int newDY2 = Math . min ( dy2 , dy1 + ySize ) ; g . drawImage ( image , dx1 , dy1 , newDX2 , newDY2 , sx1 , sy1 , sx1 + newDX2 - dx1 , sy1 + newDY2 - dy1 , null ) ; dx1 += deltaX ; dy1 += deltaY ; } } }
private void initSign $F72 { $F2268 ( messDigestTrees ) GMSSPrivateKeyParameters gmssPrivateKey = ( GMSSPrivateKeyParameters ) key ; if ( gmssPrivateKey . isUsed ( ) ) $F4639 if ( gmssPrivateKey . getIndex ( NUM00 ) >= gmssPrivateKey . getNumLeafs ( NUM00 ) ) $F4639 this . gmssPS = gmssPrivateKey . getParameters ( ) ; this . numLayer = gmssPS . getNumOfLayers ( ) ; $F96 seed = gmssPrivateKey . getCurrentSeeds ( ) [ numLayer - NUM00 ] ; $F2175 ( OTSSeed , mdLength ) $F2175 ( dummy , mdLength ) $F135 ( System , seed , dummy , mdLength ) OTSSeed = gmssRandom . nextSeed ( dummy ) ; this . ots = new WinternitzOTSignature ( OTSSeed , digestProvider . get ( ) , gmssPS . getWinternitzParameter ( ) [ numLayer - NUM00 ] ) ; byte [ ] [ ] [ ] helpCurrentAuthPaths = gmssPrivateKey . getCurrentAuthPaths ( ) ; currentAuthPaths = new byte [ numLayer ] [ ] [ ] ; for ( $F119 ( j , numLayer ) ) { currentAuthPaths [ j ] = new byte [ helpCurrentAuthPaths [ j ] . length ] [ mdLength ] ; for ( $F179379 ( i , helpCurrentAuthPaths , j ) ) { System . arraycopy ( helpCurrentAuthPaths [ j ] [ i ] , NUM00 , currentAuthPaths [ j ] [ i ] , NUM00 , mdLength ) ; } } $F3936 ( index , numLayer ) System . arraycopy ( gmssPrivateKey . getIndex ( ) , NUM00 , index , NUM00 , numLayer ) ; $F96 helpSubtreeRootSig ; subtreeRootSig = new byte [ numLayer - NUM00 ] [ ] ; for ( $F4864 ( i , numLayer ) ) { helpSubtreeRootSig = gmssPrivateKey . getSubtreeRootSig ( i ) ; subtreeRootSig [ i ] = $F3027 ( helpSubtreeRootSig ) ; System . arraycopy ( helpSubtreeRootSig , NUM00 , subtreeRootSig [ i ] , NUM00 , helpSubtreeRootSig . length ) ; } gmssPrivateKey . markUsed ( ) ; }
$F117302 ( bits , result , i , edifactValue , bitsLeft )
public void write $F24576 ( b , offset , length ) throws IOException $F21537 ( out , b , offset , length )
public SampleSet ( DataInputStream is ) throws IOException { int numSamples ; sampleInfo = new SampleInfo ( is ) ; $F5961 ( numSamples , is ) this . samples = new Sample [ numSamples ] ; for ( $F119 ( i , numSamples ) ) { samples [ i ] = Sample . loadBinary ( is ) ; } }
public void close $F72 { running = _BOOL ; $F8073 ( histData ) }
public SQLiteDatabaseConfiguration ( String path , @ SQLiteDatabase . OpenFlags int openFlags ) { $F826 ( path ) this . path = path ; label = stripPathForLogs ( path ) ; this . openFlags = openFlags ; maxSqlCacheSize = NUM00 ; $F39044 ( locale , Locale ) }
private void printProperties ( Properties properties ) throws IOException { $F29429 ( stringBuffer ) BufferedReader reader = null ; $F145993 ( properties , stringBuffer ) try { reader = new BufferedReader ( $F86540 ( stringBuffer ) ) ; $F224956 ( reader ) String line = null ; while $F443 ( line , reader ) { $F21384 ( writer ) writer . println ( line ) ; } } $F14364 ( reader ) }
public static $F4203 Range $F4203 valueOf $F92641 ( s , clazz ) { $F12685 ( lbm , s ) if $F22868 ( lbm ) $F29415 ( s ) $F185195 ( ubm , s ) if $F22868 ( ubm ) $F29415 ( s ) BoundType lbt = lbm == NUM00 ? BoundType . CLOSED : BoundType . OPEN ; BoundType ubt = ubm == NUM00 ? BoundType . CLOSED : BoundType . OPEN ; $F8993 ( s ) $F6542 ( parts , s ) String lbs = parts [ NUM00 ] ; String ubs = parts [ NUM00 ] ; T lowerBound = lbs . equals ( NUM00 ) ? null : boundValue ( lbs , clazz ) ; T upperBound = ubs . equals ( NUM00 ) ? null : boundValue ( ubs , clazz ) ; return range ( lowerBound , lbt , upperBound , ubt ) ; }
public static DoubleVector dchisq ( double x , DoubleVector ncp ) { $F2199 ( n , ncp ) DoubleVector d = new DoubleVector ( n ) ; $F96817 ( xh , Math , x ) double mean ; for ( $F119 ( i , n ) ) { mean = Math . sqrt ( ncp . get ( i ) ) ; if ( ncp . get ( i ) == NUM00 ) $F73072 ( d , i , dchisq , x ) else d . set ( i , ( dnorm ( xh - mean ) + dnorm ( - xh - mean ) ) / ( NUM00 * xh ) ) ; } return d ; }
$F43832 ( listener , propertyChangeSupport )
public void removeAllBaudRateQueryCallbacks $F72 $F9096 ( baudRateQueryCallbacks )
public void add ( AbstractOption option ) { $F28711 ( add , options , option ) ; }
private void loadVerticesAndRelatives $F72 { List < CnATreeElement > elementList = new LinkedList < CnATreeElement > $F72 ; for ( IGraphElementLoader loader : getLoaderList ( ) ) { loader . setCnaTreeElementDao ( getCnaTreeElementDao ( ) ) ; elementList . addAll ( loader . loadElements ( ) ) ; } for ( CnATreeElement element : elementList ) { graph . addVertex ( element ) ; if $F585 ( LOG ) { LOG . debug ( NUM00 + element . getTitle ( ) ) ; } uuidMap . put ( element . getUuid ( ) , element ) ; } for ( CnATreeElement parent : elementList ) { Set < CnATreeElement > children = parent . getChildren ( ) ; for ( CnATreeElement child : children ) { createParentChildEdge ( parent , child ) ; } } }
private boolean hasNonSpecialAttribute $F34102 ( keys ) { for ( String attr : keys ) { if $F14943 ( attr ) { return _BOOL ; } } return _BOOL ; }
public static final void shuffle ( $F1986 a , int start , int len , Random r ) { for ( $F266235 ( i , start , len ) ) { double t = a [ i ] ; $F123945 ( j , r , i ) a [ i ] = a [ j ] ; a [ j ] = t ; } }
public boolean isParityCorrect ( $F31427 ( shards ) , int firstByte , int byteCount , $F96 tempBuffer ) { checkBuffersAndSizes ( shards , firstByte , byteCount ) ; if ( tempBuffer . length < firstByte + byteCount ) $F825 $F57503 ( toCheck , parityShardCount ) $F21535 ( System , shards , dataShardCount , toCheck , parityShardCount ) return codingLoop . checkSomeShards ( parityRows , shards , dataShardCount , toCheck , parityShardCount , firstByte , byteCount , tempBuffer ) ; }
public static void writeStream ( InputStream in , File file ) throws IOException { $F4649 ( out , file ) try { transfer ( in , out ) ; } finally { try $F29882 ( out ) $F3229 ( out ) } }
private static native long createEntityParser ( long parentPointer , String context ) ;
public void firePropertyChange ( String propertyName , byte oldValue , byte newValue ) { $F24157 ( changeSupport , oldValue , newValue ) firePropertyChange ( propertyName , Byte . valueOf ( oldValue ) , Byte . valueOf ( newValue ) ) ; }
private int adjustOffsetForUnitTests ( int offset ) { if ( System . getProperty ( NUM00 ) == null ) return offset ; else $F1082 }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public static boolean isAix $F72 $F144200 ( osName )
private double testFit ( $F1986 x , $F1986 test , Distribution dist ) throws ArithmeticException { for ( $F1139 ( i , test ) ) { test [ i ] = dist . cdf ( x [ i ] ) ; if ( test [ i ] > NUM00 ) $F5629 ( test , i ) if ( test [ i ] < NUM00 ) $F5629 ( test , i ) if $F1998 ( Double , test , i ) { throw new ArithmeticException $F3943 ( dist ) ; } } Arrays . sort ( test ) ; return KolmogorovSmirnovTest . simpleTest ( test ) ; }
public boolean supportsSQL $F72 { return _BOOL ; }
private static Boolean isValidIPV4 ( final String ipAddress ) { boolean status = _BOOL ; if $F35028 ( StringUtils , ipAddress ) { status = InetAddressUtils . isIPv4Address ( ipAddress ) ; } return status ; }
private int decryptBlockWithIV $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) if ( count == NUM00 ) { for ( $F119 ( n , blockSize ) ) { FR [ n ] = in [ inOff + n ] ; } $F59455 ( cipher , FR , FRE ) count += blockSize ; $F1082 } else if ( count == blockSize ) { $F21535 ( System , in , inOff , tmp , blockSize ) System . arraycopy ( FR , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; FR [ blockSize - NUM00 ] = tmp [ NUM00 ] ; FR [ blockSize - NUM00 ] = tmp [ NUM00 ] ; $F59455 ( cipher , FR , FRE ) for ( $F4864 ( n , blockSize ) ) { out [ outOff + n ] = encryptByte ( tmp [ n + NUM00 ] , n ) ; } System . arraycopy ( tmp , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; count += NUM00 ; return blockSize - NUM00 ; } else if ( count >= blockSize + NUM00 ) { $F21535 ( System , in , inOff , tmp , blockSize ) out [ outOff + NUM00 ] = encryptByte ( tmp [ NUM00 ] , blockSize - NUM00 ) ; out [ outOff + NUM00 ] = encryptByte ( tmp [ NUM00 ] , blockSize - NUM00 ) ; System . arraycopy ( tmp , NUM00 , FR , blockSize - NUM00 , NUM00 ) ; $F59455 ( cipher , FR , FRE ) for ( $F4864 ( n , blockSize ) ) { out [ outOff + n + NUM00 ] = encryptByte ( tmp [ n + NUM00 ] , n ) ; } System . arraycopy ( tmp , NUM00 , FR , NUM00 , blockSize - NUM00 ) ; } return blockSize ; }
public static PTABridge v $F72 { return v ; }
public void registerCacheUpdatePeriodChangeListener ( final PropertyChangeListener listener ) $F207 ( cacheUpdatePeriodListeners , listener )
public void makeImmutable $F72 $F845
public void testNullStoredField $F72 throws Exception { Directory dir = newDirectory ( ) ; Analyzer analyzer = new MockAnalyzer ( random ( ) ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( analyzer ) ) ; $F10888 ( doc ) iw . addDocument ( doc ) ; expectThrows ( $F85137 , null ) ; assertNull ( iw . getTragicException ( ) ) ; $F59 ( iw ) DirectoryReader r = DirectoryReader . open ( dir ) ; assertEquals ( NUM00 , r . numDocs ( ) ) ; $F59 ( r ) $F59 ( dir ) }
public void addUpdateListener ( AnimatorUpdateListener listener ) { if ( mUpdateListeners == null ) { mUpdateListeners = new ArrayList < AnimatorUpdateListener > $F72 ; } mUpdateListeners . add ( listener ) ; }
public String encode $F72 { $F280 ( sb ) encode ( sb ) ; $F92 ( sb ) }
public static Document readDocument ( String fileName ) throws $F55616 { DocumentBuilder docBuilder ; Document result = null ; $F2218 ( docBuilderFactory , DocumentBuilderFactory ) docBuilderFactory . setIgnoringElementContentWhitespace ( _BOOL ) ; try { $F6281 ( docBuilder , docBuilderFactory ) } catch ( ParserConfigurationException e ) $F62406 ( e ) $F1705 ( sourceFile , fileName ) result = docBuilder . parse ( sourceFile ) ; return result ; }
$F1 public $F1986 analyse $F9830 ( aFrame ) { if ( aFrame . length != frameLength ) throw new IllegalArgumentException ( NUM00 + frameLength + NUM00 + aFrame . length ) ; $F9662 ( real , fftSize ) $F9662 ( imag , fftSize ) $F7057 ( System , aFrame , real ) FFT . transform ( real , imag , _BOOL ) ; MathUtils . toPolarCoordinates ( real , imag ) ; real = MathUtils . log ( real ) ; $F9952 ( Arrays , imag ) double b = NUM00 ; $F113182 ( bIndex , b , frequencyResolution ) $F1986 invReal ; $F1986 invImag ; if ( invFftSize == fftSize ) { invReal = real ; invImag = imag ; } else { $F10254 ( invReal , invFftSize ) $F10236 ( System , real , invReal , bIndex ) $F10254 ( invImag , invFftSize ) } for ( int i = bIndex + NUM00 ; i < invFftSize / NUM00 ; i ++ ) $F346295 ( invReal , i , bIndex ) for ( $F264992 ( i , invFftSize ) ) { invReal [ invFftSize - i - NUM00 ] = invReal [ i ] ; } FFT . transform ( invReal , invImag , _BOOL ) ; return invReal ; }
public SearchSourceBuilder scriptField ( String name , Script script ) { $F9406 ( scriptFields ) scriptFields . add ( new ScriptField ( name , script ) ) ; return this ; }
public void fixedAspectResizeInner ( RectF newInner ) { Matrix m = getRotMatrix ( ) ; Matrix m0 = getInverseRotMatrix ( ) ; float aspectW = inner . width ( ) ; float aspectH = inner . height ( ) ; float aspRatio = aspectW / aspectH ; $F282780 ( corners , CropMath , outer ) m . mapPoints ( corners ) ; $F282780 ( oldInnerCorners , CropMath , inner ) $F282780 ( newInnerCorners , CropMath , newInner ) int fixed = - NUM00 ; if ( inner . top == newInner . top ) { if ( inner . left == newInner . left ) fixed = NUM00 ; else if ( inner . right == newInner . right ) fixed = NUM00 ; } else if ( inner . bottom == newInner . bottom ) { if ( inner . right == newInner . right ) fixed = NUM00 ; else if ( inner . left == newInner . left ) fixed = NUM00 ; } if ( fixed == - NUM00 ) $F665 float widthSoFar = newInner . width ( ) ; int moved = - NUM00 ; for ( $F24429 ( i , newInnerCorners ) ) { $F5415 c = { newInnerCorners [ i ] , newInnerCorners [ i + NUM00 ] } ; $F5415 c0 = Arrays . copyOf ( c , NUM00 ) ; m0 . mapPoints ( c0 ) ; if ( ! CropMath . inclusiveContains ( $F156480 ( outer , c0 ) ) ) { moved = i ; $F73688 ( moved , fixed ) $F5415 l2 = CropMath . closestSide ( c , corners ) ; $F5415 l1 = { newInnerCorners [ i ] , newInnerCorners [ i + NUM00 ] , oldInnerCorners [ i ] , oldInnerCorners [ i + NUM00 ] } ; $F5415 p = GeometryMathUtils . lineIntersect ( l1 , l2 ) ; if ( p == null ) { $F155572 ( p ) p [ NUM00 ] = oldInnerCorners [ i ] ; p [ NUM00 ] = oldInnerCorners [ i + NUM00 ] ; } float fixed_x = oldInnerCorners [ fixed ] ; float fixed_y = oldInnerCorners [ fixed + NUM00 ] ; float newWidth = Math . abs ( fixed_x - p [ NUM00 ] ) ; float newHeight = Math . abs ( fixed_y - p [ NUM00 ] ) ; newWidth = Math . max ( newWidth , aspRatio * newHeight ) ; $F7547 ( newWidth , widthSoFar ) } } float heightSoFar = widthSoFar / aspRatio ; RectF ret = new RectF ( inner ) ; if ( fixed == NUM00 ) { $F68813 ( ret , widthSoFar ) ret . bottom = ret . top + heightSoFar ; } else if ( fixed == NUM00 ) { ret . left = ret . right - widthSoFar ; ret . bottom = ret . top + heightSoFar ; } else if ( fixed == NUM00 ) { ret . left = ret . right - widthSoFar ; ret . top = ret . bottom - heightSoFar ; } else if ( fixed == NUM00 ) { $F68813 ( ret , widthSoFar ) ret . top = ret . bottom - heightSoFar ; } $F282780 ( retCorners , CropMath , ret ) m0 . mapPoints ( retCorners ) ; innerRotated = retCorners ; reconstrain ( ) ; }
public static $F4203 T withObjectStreams ( Socket socket , @ ClosureParams ( value = SimpleType . class , $F158694 ) $F158697 closure ) throws IOException { $F517 ( input , socket ) $F147972 ( output , socket ) $F7054 ( oos , output ) $F67402 ( ois , input ) try { T result = closure . call ( $F40356 ( ois , oos ) ) ; InputStream temp1 = ois ; ois = null ; $F59 ( temp1 ) temp1 = input ; input = null ; $F59 ( temp1 ) OutputStream temp2 = oos ; oos = null ; $F59 ( temp2 ) temp2 = output ; output = null ; $F59 ( temp2 ) return result ; } finally { closeWithWarning ( ois ) ; closeWithWarning ( input ) ; closeWithWarning ( oos ) ; closeWithWarning ( output ) ; } }
public JFileDataStoreChooser ( Shell parent , int style , final $F806 extensions ) { this ( parent , style , associations ( Arrays . asList ( extensions ) ) ) ; }
private void adjustAlignment ( int align , int curAlign ) { if ( ( ! FIXED_WIDTH ) && ( align != curAlign ) ) { if ( curLine . getComponentCount ( ) == NUM00 ) { curLine . setLayout ( new FlowLayout ( curAlign ) ) ; } } }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
public void removeListener ( TrackingListener listener ) $F106 ( listeners , listener )
void createImpl ( boolean stream ) throws SocketException { $F21009 ( impl , setImpl ) try { impl . create ( stream ) ; created = _BOOL ; } catch ( IOException e ) { throw new SocketException $F1783 ( e ) ; } }
$F29611 ( remaining , count , EMPTY_BYTE_ARRAY , pos , buf , buffers , c , Math , System , newbuf )
public boolean shExpMatch ( String str , String shexp ) { $F17727 ( tokenizer , shexp ) int startPos = NUM00 ; while $F14498 ( tokenizer ) { $F8095 ( token , tokenizer ) $F204924 ( temp , str , token , startPos ) if ( startPos == NUM00 && $F14942 ( shexp ) && temp != NUM00 ) { return _BOOL ; } if ( ! tokenizer . hasMoreTokens ( ) && $F2363 ( shexp ) && ! str . endsWith ( token ) ) { return _BOOL ; } if ( temp == - NUM00 ) { return _BOOL ; } else { $F46880 ( startPos , temp , token ) } } return _BOOL ; }
public char peek $F72 { return isEmpty ( ) ? NUM00 : queue . charAt ( pos ) ; }
private $F806 parentKey ( String name , int idx ) { $F6542 ( parts , name ) if ( idx > parts . length ) $F1274 String parent = NUM00 ; String key = null ; if ( idx < parts . length ) key = parts [ idx ] ; for ( $F119 ( i , idx ) ) { parent = $F20 ( parent ) ? parent + NUM00 + parts [ i ] : parts [ i ] ; } $F162567 ( parent , key ) }
public DiphoneUnitDatabase ( URL url , boolean isBinary ) throws IOException { if ( ! useIndexing || useCache ) { $F170950 ( diphoneMap ) } $F83713 ( is , Utilities , url ) $F57584 ( indexName , getIndexName , url ) ; if ( isBinary ) { loadBinary ( is ) ; } else { loadText ( is ) ; } $F59 ( is ) sampleInfo = new SampleInfo ( sampleRate , numChannels , residualFold , lpcMin , lpcRange , NUM00 ) ; }
public static List < NotificationDto > transformToDto ( List < Notification > notifications ) { $F3758 ( notifications , Status ) List < NotificationDto > result = new ArrayList < NotificationDto > $F72 ; for ( Notification notification : notifications ) $F3762 ( result , transformToDto , notification ) return result ; }
public void writeTo ( final PacketOutputStream os ) { os . write ( ParameterWriter . QUOTE ) ; os . write ( dateToByte ( ) ) ; ParameterWriter . formatMicroseconds ( os , ts . getNanos ( ) / NUM00 , fractionalSeconds ) ; os . write ( ParameterWriter . QUOTE ) ; }
public long skip ( long n ) throws IOException , LogException { if ( length < n ) badRead ( ( int ) n ) ; n = in . skip ( n ) ; length -= ( int ) n ; return n ; }
public DriverTask discoverStorageProvider ( StorageProvider storageProvider , List $F464271 storageSystems ) { $F423222 ( task ) try { LOG . info ( NUM00 , storageProvider . getProviderHost ( ) , storageProvider . getPortNumber ( ) , storageProvider . getUsername ( ) ) ; StorageCenterAPI api = connectionManager . getConnection ( storageProvider . getProviderHost ( ) , storageProvider . getPortNumber ( ) , storageProvider . getUsername ( ) , storageProvider . getPassword ( ) , _BOOL ) ; LOG . info ( NUM00 , storageProvider . getProviderHost ( ) , storageProvider . getUsername ( ) ) ; storageProvider . setAccessStatus ( AccessStatus . READ_WRITE ) ; storageProvider . setManufacturer ( NUM00 ) ; storageProvider . setProviderVersion ( driverVersion ) ; storageProvider . setIsSupportedVersion ( _BOOL ) ; EmDataCollector em = api . getDSMInfo ( ) ; if ( em != null ) { LOG . info ( NUM00 , em . type , em . version , em . javaVersion ) ; storageProvider . setProviderVersion ( em . version ) ; } StorageCenter [ ] scs = api . getStorageCenterInfo ( ) ; for ( StorageCenter sc : scs ) { StorageSystem storageSystem = util . getStorageSystemFromStorageCenter ( api , sc , null ) ; storageSystem . setSystemType ( driverName ) ; storageSystems . add ( storageSystem ) ; } task . setStatus ( DriverTask . TaskStatus . READY ) ; } catch ( Exception e ) { $F574 ( msg , String , e ) LOG . error ( msg ) ; task . setFailed ( msg ) ; } return task ; }
public void zoomIn $F72 $F82623 ( zoomIn )
public void removeResponseCodeListener ( ActionListener a ) $F130709 ( responseCodeListeners , a )
public InputFieldDialog $F2236 ( CAPTION_KEY , LABEL_KEY ) { String caption = I18n . tr ( CAPTION_KEY ) ; Frame frame = GUIMediator . getAppFrame ( ) ; _dialog = new JDialog ( frame , caption , _BOOL ) ; $F267778 ( _dialog ) LabeledComponent component = new LabeledComponent ( LABEL_KEY , TEXT_FIELD , LabeledComponent . LEFT_GLUE ) ; $F806 buttonLabelKeys = { I18n . tr ( NUM00 ) , I18n . tr ( NUM00 ) } ; $F806 buttonLabelTips = { I18n . tr ( NUM00 ) , I18n . tr ( NUM00 ) } ; ActionListener [ ] buttonListeners = { new OKListener $F72 , new CancelListener $F72 } ; ButtonRow buttons = new ButtonRow ( buttonLabelKeys , buttonLabelTips , buttonListeners , ButtonRow . X_AXIS , ButtonRow . LEFT_GLUE ) ; $F320994 ( contentPane , _dialog ) BoxPanel componentPanel = new BoxPanel ( BoxPanel . Y_AXIS ) ; componentPanel . add ( Box . createVerticalGlue ( ) ) ; componentPanel . add ( component . getComponent ( ) ) ; componentPanel . add ( Box . createVerticalGlue ( ) ) ; MAIN_PANEL . add ( componentPanel ) ; MAIN_PANEL . add ( Box . createVerticalGlue ( ) ) ; MAIN_PANEL . add ( buttons ) ; contentPane . add ( MAIN_PANEL ) ; }
public EntityLoadInfo create ( Entity entity ) $F13736 ( create , entity )
public Float ( Point2D pt2D ) { setLatLon ( pt2D . getY ( ) , pt2D . getX ( ) , _BOOL ) ; }
public final static boolean isPotentialZipArchive ( String name ) { $F24867 ( lastDot , name ) $F101463 ( lastDot , _BOOL ) if ( name . lastIndexOf ( File . separatorChar ) > lastDot ) return _BOOL ; $F115 ( length , name ) int extensionLength = length - lastDot - NUM00 ; if $F9615 ( extensionLength , EXTENSION_java ) { for ( $F18298 ( i , extensionLength ) ) { if ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_java . charAt ( i ) ) $F5153 $F6482 ( i , _BOOL ) } } if $F9615 ( extensionLength , EXTENSION_class ) { for ( $F18298 ( i , extensionLength ) ) { if ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_class . charAt ( i ) ) { return _BOOL ; } } return _BOOL ; } return _BOOL ; }
public void open $F72 throws IOException { $F125428 ( connection ) connection . setSoTimeout ( timeout ) ; }
$F30491 ( key , value , bitmapSize , getBitmapSize )
default void forEachRemaining ( IntConsumer action ) { Objects . requireNonNull ( action ) ; while ( hasNext ( ) ) $F114302 ( action , nextInt ) }
private boolean isCI $F72 { return Objects . equals ( System . getenv ( NUM00 ) , NUM00 ) ; }
public DockNode ( Node contents , String title ) $F16625 ( this , contents , title )
public void test2033092 $F72 { RelativeDateFormat rdf = new RelativeDateFormat $F72 ; rdf . setShowZeroDays ( _BOOL ) ; rdf . setShowZeroHours ( _BOOL ) ; rdf . setMinuteSuffix ( NUM00 ) ; rdf . setHourSuffix ( NUM00 ) ; rdf . setSecondSuffix ( NUM00 ) ; $F125026 ( hoursFormatter ) $F34862 ( hoursFormatter ) hoursFormatter . setMaximumIntegerDigits ( NUM00 ) ; $F196677 ( hoursFormatter ) rdf . setHourFormatter ( hoursFormatter ) ; $F125026 ( minsFormatter ) $F34862 ( minsFormatter ) minsFormatter . setMaximumIntegerDigits ( NUM00 ) ; $F196677 ( minsFormatter ) rdf . setMinuteFormatter ( minsFormatter ) ; $F125026 ( secondsFormatter ) $F34862 ( secondsFormatter ) secondsFormatter . setMaximumIntegerDigits ( NUM00 ) ; $F196677 ( secondsFormatter ) rdf . setSecondFormatter ( secondsFormatter ) ; String s = rdf . format ( new Date ( $F138998 + NUM00 ) ) ; assertEquals ( NUM00 , s ) ; }
$F27671 ( in , buffer , result )
public static long parseId ( Uri contentUri ) { String last = contentUri . getLastPathSegment ( ) ; return last == null ? - NUM00 : Long . parseLong ( last ) ; }
public void disableVM ( String hostname , long durationMillis ) throws IllegalStateException { $F8817 ( logger , hostname , durationMillis ) assignableVMs . disableUntil ( hostname , System . currentTimeMillis ( ) + durationMillis ) ; }
protected final void endOfInput $F72 throws IOException { if ( cacheRequest != null ) $F881 ( cacheBody ) httpEngine . release ( _BOOL ) ; }
public int left $F72 { return data . length ( ) - pos ; }
public FeatureSet combine ( final FeatureSet other ) { final Set < Feature > enabled = new $F9623 ( this . enabled ) ; $F27392 ( enabled , other ) final Set < Feature > disabled = new $F9623 ( this . disabled ) ; $F27392 ( disabled , other ) return new FeatureSet ( enabled , disabled ) ; }
public void removeInterval ( final BatchWriter writer , final TemporalInterval interval , final Statement statement ) throws MutationsRejectedException { final Text cf = new Text ( StatementSerializer . writeContext ( statement ) ) ; final Text cqBegin = new Text ( KeyParts . CQ_BEGIN ) ; final Text cqEnd = new Text ( KeyParts . CQ_END ) ; Text keyText = new Text ( interval . getAsKeyBeginning ( ) ) ; KeyParts . appendUniqueness ( statement , keyText ) ; Mutation m = new Mutation ( keyText ) ; m . putDelete ( cf , cqBegin ) ; writer . addMutation ( m ) ; keyText = new Text ( interval . getAsKeyEnd ( ) ) ; KeyParts . appendUniqueness ( statement , keyText ) ; m = new Mutation ( keyText ) ; m . putDelete ( cf , cqEnd ) ; writer . addMutation ( m ) ; }
public static final String removeDataFolderPath ( String fullPath ) { $F63896 ( sdCard , Environment ) String dataFolderPath = $F3884 ( sdCard ) + MainApp . getDataFolder ( ) + NUM00 ; if ( fullPath . indexOf ( dataFolderPath ) == NUM00 ) { $F158275 ( fullPath , dataFolderPath ) } return fullPath ; }
protected Character isWFXMLChar ( String chardata ) { Character refInvalidChar ; if ( chardata == null || $F1277 ( chardata ) ) $F1337 $F7782 ( dataarray , chardata ) int datalength = dataarray . length ; if ( fIsXMLVersion11 ) { int i = NUM00 ; while ( i < datalength ) { if ( XML11Char . isXML11Invalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } else { int i = NUM00 ; while ( i < datalength ) { if ( XMLChar . isInvalid ( dataarray [ i ++ ] ) ) { char ch = dataarray [ i - NUM00 ] ; $F121844 ( XMLChar , ch , i , datalength , ch2 , dataarray ) refInvalidChar = new Character ( ch ) ; return refInvalidChar ; } } } $F1274 }
default CompletableFuture < Optional $F23350 > matchAsync ( final Executor executor , final T value ) $F19292 ( CompletableFuture , executor )
public static void main $F4374 ( args ) throws FormatException { $F10089 ( Debug ) if $F9634 ( args ) { $F18535 ( Debug ) $F5194 ( System ) } for ( $F1139 ( argsi , args ) ) { rootpath = args [ argsi ] ; LibrarySelectionTable lst = new LibrarySelectionTable ( rootpath ) ; if $F22503 ( Debug ) { $F32925 ( Debug , rootpath ) Debug . output ( NUM00 + lst . getDatabaseName ( ) ) ; } println ( NUM00 ) ; println ( NUM00 + rootpath ) ; println ( NUM00 + lst . getDatabaseDescription ( ) ) ; $F3803 libraries = lst . getLibraryNames ( ) ; if $F22503 ( Debug ) { print ( NUM00 ) ; for ( String libraryName : libraries ) $F28986 ( print , libraryName ) println ( ) ; println ( ) ; } for ( String libraryName : libraries ) { String prefix = lst . getDatabaseName ( ) + NUM00 + libraryName ; println ( NUM00 + prefix ) ; printLibrary ( prefix , lst . getCAT ( libraryName ) ) ; println ( ) ; } } }
private static String wildcardToRegex ( String pattern ) { return NUM00 + StringUtils . replaceEach ( escapeRegexp ( pattern ) , $F78037 , $F78037 ) + NUM00 ; }
protected void clearCache $F72 { $F263153 ( _cache ) }
public String sqlAD_getCustomEntityTypes $F1947 ( vendorName , catalogName , schemaName ) { String tableName = NUM00 ; $F8728 ( columnNames ) $F18793 ( columnNames ) $F8728 ( aliasNames ) $F18793 ( aliasNames ) $F8728 ( conditions ) $F18793 ( conditions ) $F8728 ( sortColumns ) $F18793 ( sortColumns ) return sql_select ( vendorName , catalogName , schemaName , tableName , null , columnNames , aliasNames , conditions , sortColumns , _BOOL ) ; }
public void paintComponent ( Graphics g ) { int x = PADDING ; int y = PADDING ; g . drawImage ( picture , x , y , scaleW , scaleH , null ) ; x += scaleW + PADDING ; g . drawImage ( picture , x , y , x + scaleW , y + scaleH , NUM00 , NUM00 , picture . getWidth ( ) , picture . getHeight ( ) , null ) ; x += scaleW + PADDING ; $F317 ( g2d , g ) g2d . translate ( x , y ) ; g2d . scale ( SCALE_FACTOR , SCALE_FACTOR ) ; $F37616 ( g2d , picture ) $F355 ( g2d ) x += scaleW + PADDING ; g2d = ( Graphics2D ) g . create ( ) ; $F34721 ( at ) at . translate ( x , y ) ; at . scale ( SCALE_FACTOR , SCALE_FACTOR ) ; g2d . drawImage ( picture , at , null ) ; $F355 ( g2d ) x += scaleW + PADDING ; Image scaledImg = picture . getScaledInstance ( scaleW , scaleH , Image . SCALE_DEFAULT ) ; $F108383 ( g , scaledImg , x , y ) }
$F60268 ( idType )
private static void backupAudioConfig $F72 { if ( null != mRestoreAudioConfigTimer ) { $F65148 ( mRestoreAudioConfigTimer ) mRestoreAudioConfigTimer = null ; mRestoreAudioConfigTimerMask = null ; } else if ( null == mAudioMode ) { AudioManager audioManager = getAudioManager ( ) ; mAudioMode = audioManager . getMode ( ) ; mIsSpeakerOn = audioManager . isSpeakerphoneOn ( ) ; } }
public static String buildImdnDeliveryReport ( String msgId , ImdnDocument . DeliveryStatus status , long timestamp ) { String method ; switch ( status ) { $F7242 ( DISPLAYED , method ) $F7242 ( DELIVERED , method ) $F1267 method = NUM00 ; $F597 } return NUM00 + UTF8_STR + NUM00 + CRLF + NUM00 + CRLF + NUM00 + msgId + NUM00 + CRLF + NUM00 + DateUtils . encodeDate ( timestamp ) + NUM00 + CRLF + NUM00 + method + NUM00 + status + NUM00 + method + NUM00 + CRLF + NUM00 ; }
private SpeedrunsLiveRequest $F72 { super ( URL ) ; }
public static Bitmap decodeResourceWithBackouts ( Resources res , $F56525 options , int id ) { boolean noBitmap = _BOOL ; int num_tries = NUM00 ; if ( options . inSampleSize < NUM00 ) { options . inSampleSize = NUM00 ; } Bitmap bmap = null ; while ( noBitmap ) { try { bmap = BitmapFactory . decodeResource ( res , id , options ) ; noBitmap = _BOOL ; } catch ( java . lang . OutOfMemoryError e ) { if ( ++ num_tries >= BITMAP_LOAD_BACKOUT_ATTEMPTS ) { throw e ; } bmap = null ; $F58463 ( System ) options . inSampleSize *= NUM00 ; } } return bmap ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public void readDataFile ( String content ) throws DataFileException { if $F41728 ( content ) $F4638 $F153016 ( bis , content ) readDataFile ( bis , null ) ; }
public static String readUTF ( DataInput in ) throws IOException { return DataInputStream . readUTF ( in ) ; }
protected Object lazilyLoadDesktopProperty ( String name ) { if $F3106 ( name ) $F4915 ( lazilyLoadGTKIcon , name ) return super . lazilyLoadDesktopProperty ( name ) ; }
public OAuthRsaSha1Signer ( String privateKeyString ) throws OAuthException { if ( privateKeyString == null ) { throw new OAuthException $F580 ; } else if $F1277 ( privateKeyString ) { throw new OAuthException $F580 ; } try { setPrivateKey ( RsaSha1PrivateKeyHelper . getPrivateKey ( privateKeyString ) ) ; } catch ( Base64DecoderException e ) { throw new OAuthException ( NUM00 , e ) ; } catch ( NoSuchAlgorithmException e ) { throw new OAuthException ( NUM00 , e ) ; } catch ( InvalidKeySpecException e ) { throw new OAuthException ( NUM00 , e ) ; } }
private Map < String , Volume > groupVolumesByReplicationGroup ( $F47942 volumeList ) { Map < String , Volume > repGroupToVolumeMap = new HashMap < String , Volume > $F72 ; for ( Volume volume : volumeList ) { String repGroupName = volume . getReplicationGroupInstance ( ) ; if ( volume . isVPlexVolume ( _dbClient ) ) { Volume backedVol = VPlexUtil . getVPLEXBackendVolume ( volume , _BOOL , _dbClient ) ; if ( backedVol != null ) { repGroupName = backedVol . getReplicationGroupInstance ( ) ; } } repGroupToVolumeMap . put ( repGroupName , volume ) ; } return repGroupToVolumeMap ; }
public DefaultFileFilter ( String extension , String description ) { $F21936 ( ext , extension ) desc = description ; }
public void appendCell ( boolean value ) $F45719 ( appendCell , String , value )
public String name $F72 $F16566 ( System )
protected void addURL ( URL url ) { try { originalUrls . add ( url ) ; $F3761 ( searchList , createSearchURL , url ) } $F54215 }
public void initStructure $F72 throws Exception { int nAttribute = NUM00 ; for ( $F180066 ( iOrder , m_Instances ) ) { if $F55630 ( nAttribute , m_Instances ) { nAttribute ++ ; } } m_ParentSets = new ParentSet [ m_Instances . numAttributes ( ) ] ; for ( $F180066 ( iAttribute , m_Instances ) ) { m_ParentSets [ iAttribute ] = new ParentSet ( m_Instances . numAttributes ( ) ) ; } }
$F1 public synchronized $F159508 disconnect $F72 { $F70223 ( closeFuture ) ; if $F5973 ( consumers ) { $F22620 ( consumers ) if ( havePendingRead && cursor . cancelPendingReadRequest ( ) ) { havePendingRead = _BOOL ; } } else { closeFuture . complete ( null ) ; } return closeFuture ; }
$F41325 ( in , result , _BOOL , c , length )
$F41325 ( in , result , _BOOL , c , length )
protected boolean IPIsBroadcast ( int IPAddress ) { int inv_subnet_mask = ~ this . subnet_mask ; return $F128757 ( IPAddress , inv_subnet_mask ) ; }
public void addCellAppearancesToWorkList ( DF_LatticeCell cell ) { for ( Enumeration < DF_Equation > e = getEquations ( ) ; e . hasMoreElements ( ) ; ) { DF_Equation eq = e . nextElement ( ) ; if ( eq . hasCell ( cell ) ) { addToWorkList ( eq ) ; } } }
public void remove ( ConstraintWidget widget ) { Element toUnselect = null ; for ( Element selection : mSelectedWidgets ) { if ( selection . widget == widget ) $F3468 ( toUnselect , selection ) } $F231860 ( toUnselect , mSelectedWidgets ) selectionHasChanged ( ) ; }
public static long hexStringToLong ( final String hexString ) { $F1832 ( Preconditions , hexString ) Preconditions . checkArgument ( isHexString ( hexString ) , String . format ( NUM00 , hexString ) ) ; if ( $F1277 ( hexString ) && ( hexString . charAt ( NUM00 ) >= NUM00 ) ) { final String strAddr1 = $F4019 ( hexString ) ; final String strAddr2 = $F39706 ( hexString ) ; return ( Long . parseLong ( strAddr1 , NUM00 ) < < NUM00 ) + Long . parseLong ( strAddr2 , NUM00 ) ; } return Long . parseLong ( hexString , NUM00 ) ; }
public static boolean containsFile ( $F1113 SourceProvider provider , $F1113 File file ) { $F92258 srcDirectories = getAllSourceFolders ( provider ) ; if ( filesEqual ( provider . getManifestFile ( ) , file ) ) { return _BOOL ; } for ( File container : srcDirectories ) { $F4924 ( parent , container ) if ( parent != null && parent . isDirectory ( ) && filesEqual ( parent , file ) ) { return _BOOL ; } if $F1906 ( container ) $F1448 if ( isAncestor ( container , file , _BOOL ) ) { return _BOOL ; } } return _BOOL ; }
public static String checkNotEmpty ( String string , Object errorMessage ) { if ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && TextUtils . isEmpty ( string ) ) { throw new IllegalArgumentException $F45942 ( String , errorMessage ) ; } return string ; }
void runPostSearch ( int cntItems ) ;
private SSLEngineResult unwrap $F72 throws SSLException { if ( appBuffer == null ) { appBuffer = IoBuffer . allocate ( inNetBuffer . remaining ( ) ) ; } else { appBuffer . expand ( inNetBuffer . remaining ( ) ) ; } SSLEngineResult res ; Status status = null ; HandshakeStatus handshakeStatus = null ; do { res = sslEngine . unwrap ( inNetBuffer . buf ( ) , appBuffer . buf ( ) ) ; status = res . getStatus ( ) ; $F346875 ( handshakeStatus , res ) if ( status == SSLEngineResult . Status . BUFFER_OVERFLOW ) { appBuffer . capacity ( $F238996 ( appBuffer ) ) ; $F239000 ( appBuffer ) $F598 } } while ( ( ( status == SSLEngineResult . Status . OK ) || ( status == SSLEngineResult . Status . BUFFER_OVERFLOW ) ) && ( ( handshakeStatus == SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING ) || ( handshakeStatus == SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) ) ) ; return res ; }
public Certificate requestCertificate $F97 ( csr ) throws AcmeException $F59662 ( requestCertificate , csr )
public void clear $F72 $F13478 ( mStrings , notifyDataSetChanged )
$F22330 private static GridUriDeploymentFileProcessorResult processWithDescriptorFile ( GridUriDeploymentSpringDocument doc , File file , String uri , IgniteLogger log ) throws IgniteSpiException { ClassLoader clsLdr = GridUriDeploymentClassLoaderFactory . create ( U . gridClassLoader ( ) , file , log ) ; List < Class < ? extends ComputeTask $F5162 > > tasks = doc . getTasks ( clsLdr ) ; List < Class < ? extends ComputeTask $F5162 > > validTasks = null ; if $F20899 ( F , tasks ) { $F9404 ( validTasks ) for ( Class < ? extends ComputeTask $F5162 > task : tasks ) { if ( ! isAllowedTaskClass ( task ) ) { U . warn ( log , NUM00 + NUM00 + task + NUM00 ) ; } else { if $F585 ( log ) $F74568 ( log , task ) validTasks . add ( task ) ; } } } GridUriDeploymentFileProcessorResult res = new GridUriDeploymentFileProcessorResult $F72 ; res . setFile ( file ) ; res . setClassLoader ( clsLdr ) ; if $F20899 ( F , validTasks ) res . setTaskClasses ( validTasks ) ; else if $F585 ( log ) log . debug ( $F62869 ( file ) + U . hidePassword ( uri ) + NUM00 ) ; return res ; }
private $F9883 boolean testSelections ( JClass jc , T dobj ) { List < JSelection > list = jc . getSelections ( ) ; for ( JSelection js : list ) { if ( testSelection ( jc , js , dobj ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
public void truncate $F72 { calculateIdealPoint ( ) ; translateByIdealPoint ( ) ; List < $F41138 > members = associateToReferencePoint ( this ) ; clear ( ) ; for ( $F2277 ( i , members ) ) { $F41138 associations = members . get ( i ) ; if $F3817 ( associations ) { add ( select ( associations , i ) ) ; } } }
protected void onDownloading $F72 { if $F28793 ( LogConfiguration ) { logger . log ( Level . INFO , messages . downloadingResources ( ) ) ; } updating = _BOOL ; fireApplicationCacheEvent ( CacheEvent . onDownloading ) ; }
protected synchronized void addTransitionListener ( Hashtable < TxState , Hashtable < TxState , Set < EventListener > > > listeners , EventListener lstnr , TxState from , TxState to ) { Hashtable < TxState , Set < EventListener > > lstnrs = listeners . get ( from ) ; if ( lstnrs == null ) lstnrs = new Hashtable < TxState , Set < EventListener > > $F72 ; Set < EventListener > tolstnrs = lstnrs . get ( to ) ; if ( tolstnrs == null ) tolstnrs = new HashSet < EventListener > $F72 ; $F24127 ( tolstnrs , lstnr ) lstnrs . put ( to , tolstnrs ) ; listeners . put ( from , lstnrs ) ; }
public boolean hasExclusion $F72 { return $F123850 ( mExcludedClasses , mExcludedTests ) ; }
private int ensureBaselineOnGrid $F72 { float baseline = getBaseline ( ) ; float gridAlign = baseline % FOUR_DIP ; if ( gridAlign != NUM00 ) { extraTopPadding = ( int ) ( FOUR_DIP - Math . ceil ( gridAlign ) ) ; } return extraTopPadding ; }
$F1 public void compute $F72 { Spliterator < P_IN > rs = spliterator , ls ; long sizeEstimate = rs . estimateSize ( ) ; long sizeThreshold = getTargetSize ( sizeEstimate ) ; boolean forkRight = _BOOL ; $F1431 K task = ( K ) this ; AtomicReference $F23350 sr = sharedResult ; R result ; while ( $F17862 ( result , sr ) == null ) { if ( task . taskCanceled ( ) ) { result = task . getEmptyResult ( ) ; $F597 } if ( sizeEstimate <= sizeThreshold || ( ls = rs . trySplit ( ) ) == null ) { result = task . doLeaf ( ) ; $F597 } K leftChild , rightChild , taskToFork ; task . leftChild = leftChild = task . makeChild ( ls ) ; task . rightChild = rightChild = task . makeChild ( rs ) ; task . setPendingCount ( NUM00 ) ; if ( forkRight ) { forkRight = _BOOL ; rs = ls ; task = leftChild ; taskToFork = rightChild ; } else { forkRight = _BOOL ; task = rightChild ; taskToFork = leftChild ; } taskToFork . fork ( ) ; sizeEstimate = rs . estimateSize ( ) ; } task . setLocalResult ( result ) ; task . tryComplete ( ) ; }
public static $F529 createContentAssoc $F71242 ( dctx , rcontext ) { $F118334 ( context , UtilMisc , rcontext ) $F16824 ( context ) $F3803 targetOperationList = ContentWorker . prepTargetOperationList ( context , NUM00 ) ; $F3803 contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; $F545 ( context , targetOperationList ) $F545 ( context , contentPurposeList ) $F91191 ( context ) $F67631 ( result ) try { result = createContentAssocMethod ( dctx , context ) ; } catch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) catch ( GenericEntityException e2 ) $F34760 ( ServiceUtil , e2 ) catch ( Exception e3 ) $F34760 ( ServiceUtil , e3 ) return result ; }
public String formatWithLocale ( Locale locale , String ... args ) { return String . format ( locale , this . content , $F2486 ( args ) ) ; }
private static < T extends AbstractBlockBase $F4203 > T addPathToLinearScanOrder ( T block , $F5675 order , PriorityQueue $F4203 worklist , BitSet visitedBlocks ) { block . setLinearScanNumber ( order . size ( ) ) ; order . add ( block ) ; T mostLikelySuccessor = findAndMarkMostLikelySuccessor ( block , visitedBlocks ) ; enqueueSuccessors ( block , worklist , visitedBlocks ) ; if ( mostLikelySuccessor != null ) { if ( ! mostLikelySuccessor . isLoopHeader ( ) && mostLikelySuccessor . getPredecessorCount ( ) > NUM00 ) { double unscheduledSum = NUM00 ; for ( T pred : mostLikelySuccessor . getPredecessors ( ) ) { if ( pred . getLinearScanNumber ( ) == - NUM00 ) { unscheduledSum += pred . probability ( ) ; } } if ( unscheduledSum > block . probability ( ) / PENALTY_VERSUS_UNSCHEDULED ) { visitedBlocks . clear ( mostLikelySuccessor . getId ( ) ) ; $F1274 } } return mostLikelySuccessor ; } $F1274 }
private static Dimension createThumbDimension ( final BufferedImage image , final int maxWidth , final int maxHeight ) { Dimension dimension = new Dimension $F72 ; if ( image . getWidth ( ) >= image . getHeight ( ) ) { if ( image . getWidth ( ) >= maxWidth ) { dimension . width = maxWidth ; dimension . height = Math . round ( ( ( float ) maxWidth / image . getWidth ( ) ) * image . getHeight ( ) ) ; } else { $F130165 ( dimension , image ) dimension . width = image . getWidth ( ) ; } } else { if ( image . getHeight ( ) >= maxHeight ) { dimension . height = maxHeight ; dimension . width = Math . round ( ( ( ( float ) maxHeight / image . getHeight ( ) ) * image . getWidth ( ) ) ) ; } else { $F130165 ( dimension , image ) dimension . width = image . getWidth ( ) ; } } return dimension ; }
private boolean hasCurrentAccountChanged $F72 { Account account = AccountUtils . getCurrentOwnCloudAccount ( this ) ; if ( account == null ) { return _BOOL ; } else { return ! mOriginalCurrentAccount . equals ( account . name ) ; } }
public int nextClearBit ( int index ) { int i = index > > NUM00 ; $F80680 ( i , wlen ) int subIndex = index & NUM00 ; long word = ~ bits . get ( i ) > > subIndex ; if ( word != NUM00 ) { return ( i < < NUM00 ) + subIndex + Long . numberOfTrailingZeros ( word ) ; } while ( ++ i < wlen ) { word = ~ bits . get ( i ) ; if ( word != NUM00 ) { return ( i < < NUM00 ) + Long . numberOfTrailingZeros ( word ) ; } } $F150 }
private static synchronized void appendMessage ( Context c , final String msg ) { if $F1277 ( msg ) $F665 String out = msg ; boolean timestamp = PrefStore . isTimestamp ( c ) ; int maxLines = PrefStore . getMaxLines ( c ) ; $F2199 ( protocolSize , protocol ) if ( protocolSize > NUM00 && lastChar != NUM00 ) { $F18938 ( protocol , protocolSize ) out = lastLine + out ; } $F7793 ( lastChar , out ) ; $F6542 ( lines , out ) for ( $F151668 ( i , l , lines ) ) { lastLine = lines [ i ] ; if ( timestamp ) protocol . add ( getTimeStamp ( ) + lastLine ) ; else protocol . add ( lastLine ) ; if ( protocolSize + i >= maxLines ) $F243398 ( protocol ) } show ( ) ; if ( PrefStore . isLogger ( c ) ) write ( c , msg ) ; }
public $F131 importCells ( $F131 cells , double dx , double dy , Object target , Point location ) { if ( target == null && cells . length == NUM00 && location != null ) { target = getCellAt ( $F25550 ( location ) ) ; if ( target instanceof mxICell && cells [ NUM00 ] instanceof mxICell ) { mxICell targetCell = ( mxICell ) target ; mxICell dropCell = ( mxICell ) cells [ NUM00 ] ; if ( targetCell . isVertex ( ) == dropCell . isVertex ( ) || targetCell . isEdge ( ) == dropCell . isEdge ( ) ) { mxIGraphModel model = graph . getModel ( ) ; model . setStyle ( target , model . getStyle ( cells [ NUM00 ] ) ) ; graph . setSelectionCell ( target ) ; $F1274 } } } return super . importCells ( cells , dx , dy , target , location ) ; }
private void cancelSearch $F72 { entrantToSearch = null ; }
public void onPrepared ( MediaPlayer player ) { mState = State . PLAYING ; updateNotification ( String . format ( getString ( R . string . media_state_playing ) , mFile . getFileName ( ) ) ) ; if ( mMediaController != null ) $F7728 ( mMediaController , _BOOL ) player . seekTo ( mStartPosition ) ; configAndStartMediaPlayer ( ) ; $F14406 ( mPlayOnPrepared , processPauseRequest ) if ( mMediaController != null ) { mMediaController . updatePausePlay ( ) ; } }
public static ResultSet polar2Cartesian ( Double r , Double alpha ) { SimpleResultSet rs = new SimpleResultSet $F72 ; rs . addColumn ( NUM00 , Types . DOUBLE , NUM00 , NUM00 ) ; rs . addColumn ( NUM00 , Types . DOUBLE , NUM00 , NUM00 ) ; if ( r != null && alpha != null ) { double x = r . doubleValue ( ) * Math . cos ( alpha . doubleValue ( ) ) ; double y = r . doubleValue ( ) * Math . sin ( alpha . doubleValue ( ) ) ; rs . addRow ( x , y ) ; } return rs ; }
$F183298 ( view , cache )
public void threadFail ( String reason ) { try { fail ( reason ) ; } catch ( AssertionFailedError t ) { threadRecordFailure ( t ) ; throw t ; } }
$F1 public void connectionLost ( Throwable cause ) { onDisconnect ( _BOOL ) ; }
private boolean isTypedTimeFullyLegal $F72 { if ( mIs24HourMode ) { $F2027 values = getEnteredTime ( null ) ; return ( values [ NUM00 ] >= NUM00 && values [ NUM00 ] >= NUM00 && values [ NUM00 ] < NUM00 && values [ NUM00 ] >= NUM00 && values [ NUM00 ] < NUM00 ) ; } else { return ( mTypedTimes . contains ( getAmOrPmKeyCode ( AM ) ) || mTypedTimes . contains ( getAmOrPmKeyCode ( PM ) ) ) ; } }
public synchronized void clearAnnotations $F72 $F5122 ( mAnnotations , mStringXY )
public Table sample ( double proportion ) { int tableCount = ( int ) Math . round ( rowCount ( ) * proportion ) ; $F290678 ( table1Selection ) $F2027 selectedRecords = generateUniformBitmap ( tableCount , rowCount ( ) ) ; for ( int selectedRecord : selectedRecords ) $F207 ( table1Selection , selectedRecord ) return selectWhere ( table1Selection ) ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public static MessageDigest newDigest $F72 { try { return MessageDigest . getInstance ( NUM00 ) ; } $F29414 ( e ) }
public Container addChildAt ( int location , $F4170 DisplayObject DisplayObject ) { if ( mFps != DEFAULT_FPS ) { DisplayObject . setUp ( mFps ) ; } mDisplayList . add ( location , DisplayObject ) ; return this ; }
private void add ( DimensionIndex index ) { flatten . add ( index ) ; lookup . put ( index . getAxis ( ) , index ) ; }
public static RecipePetals registerPetalRecipe ( ItemStack output , Object ... inputs ) { Preconditions . checkArgument ( inputs . length <= NUM00 ) ; RecipePetals recipe = new RecipePetals ( output , inputs ) ; petalRecipes . add ( recipe ) ; return recipe ; }
private void buildFirstLine ( LinePath path , Rect r ) { $F2027 range = new int [ ] { - r . left , - r . top , r . right , r . bottom } ; int max = - NUM00 ; int maxId = NUM00 ; for ( $F6268 ( i ) ) { $F43613 ( range , i , max , maxId ) } switch ( maxId ) { $F3366 path . setEndPoint ( r . left , Utils . nextInt ( r . height ( ) ) + r . top ) ; $F597 $F3366 path . setEndPoint ( Utils . nextInt ( r . width ( ) ) + r . left , r . top ) ; $F597 $F3366 path . setEndPoint ( r . right , Utils . nextInt ( r . height ( ) ) + r . top ) ; $F597 $F3366 path . setEndPoint ( Utils . nextInt ( r . width ( ) ) + r . left , r . bottom ) ; $F597 } path . lineToEnd ( ) ; }
$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension )
public void testValueOfDoubleNeg $F72 { double a = - NUM00 ; $F2544 ( result , BigDecimal , a ) String res = NUM00 ; int resScale = NUM00 ; $F1925 ( assertEquals , res , result ) $F1928 ( assertEquals , resScale , result ) }
public void testHugeTerm $F72 throws IOException { $F83 ( sb ) for ( $F6268 ( i ) ) $F86 ( sb ) $F1822 ( input , sb ) char token [ ] = $F11574 ; $F21017 ( Arrays , token ) $F605 ( expectedToken , token ) String expected [ ] = { expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken , expectedToken } ; assertAnalyzesTo ( sentence , input , expected ) ; }
private $F806 combineResultsFromMultipleReads $F159246 ( buffer , lastRead ) { $F806 t = new String $F12348 ( buffer , lastRead ) ; $F7057 ( System , buffer , t ) $F11244 ( System , lastRead , t , buffer ) return t ; }
public double calcDistance $F30455 ( x , y ) { double distanceX ; double distanceY ; if ( this . minX <= x && x <= this . maxX ) { distanceX = NUM00 ; } else { distanceX = Math . min ( Math . abs ( this . minX - x ) , Math . abs ( this . maxX - x ) ) ; } if ( this . minY <= y && y <= this . maxY ) { distanceY = NUM00 ; } else { distanceY = Math . min ( Math . abs ( this . minY - y ) , Math . abs ( this . maxY - y ) ) ; } $F126355 ( Math , distanceX , distanceY ) }
$F1 public MatchesType marshal ( Set < Match > matches ) { Set < RPSBlastMatch > rpsBlastMatches = new LinkedHashSet < RPSBlastMatch > $F72 ; Set < Hmmer2Match > hmmer2Matches = new LinkedHashSet < Hmmer2Match > $F72 ; Set < Hmmer3Match > hmmer3Matches = new LinkedHashSet < Hmmer3Match > $F72 ; Set < SuperFamilyHmmer3Match > superFamilyHmmer3Matches = new LinkedHashSet < SuperFamilyHmmer3Match > $F72 ; Set < FingerPrintsMatch > fingerPrintsMatches = new LinkedHashSet < FingerPrintsMatch > $F72 ; Set < BlastProDomMatch > proDomMatches = new LinkedHashSet < BlastProDomMatch > $F72 ; Set < PatternScanMatch > patternScanMatches = new LinkedHashSet < PatternScanMatch > $F72 ; Set < ProfileScanMatch > profileScanMatches = new LinkedHashSet < ProfileScanMatch > $F72 ; Set < PhobiusMatch > phobiusMatches = new LinkedHashSet < PhobiusMatch > $F72 ; Set < CoilsMatch > coilsMatches = new LinkedHashSet < CoilsMatch > $F72 ; Set < PantherMatch > pantherMatches = new LinkedHashSet < PantherMatch > $F72 ; Set < SignalPMatch > signalPMatches = new LinkedHashSet < SignalPMatch > $F72 ; Set < TMHMMMatch > tmhmmPMatches = new LinkedHashSet < TMHMMMatch > $F72 ; for ( Match m : matches ) { if ( m instanceof RPSBlastMatch ) { rpsBlastMatches . add ( ( RPSBlastMatch ) m ) ; } else if ( m instanceof Hmmer2Match ) { hmmer2Matches . add ( ( Hmmer2Match ) m ) ; } else if ( m instanceof Hmmer3Match ) { hmmer3Matches . add ( ( Hmmer3Match ) m ) ; } else if ( m instanceof SuperFamilyHmmer3Match ) { superFamilyHmmer3Matches . add ( ( SuperFamilyHmmer3Match ) m ) ; } else if ( m instanceof FingerPrintsMatch ) { fingerPrintsMatches . add ( ( FingerPrintsMatch ) m ) ; } else if ( m instanceof BlastProDomMatch ) { proDomMatches . add ( ( BlastProDomMatch ) m ) ; } else if ( m instanceof PatternScanMatch ) { patternScanMatches . add ( ( PatternScanMatch ) m ) ; } else if ( m instanceof ProfileScanMatch ) { profileScanMatches . add ( ( ProfileScanMatch ) m ) ; } else if ( m instanceof PhobiusMatch ) { phobiusMatches . add ( ( PhobiusMatch ) m ) ; } else if ( m instanceof CoilsMatch ) { coilsMatches . add ( ( CoilsMatch ) m ) ; } else if ( m instanceof PantherMatch ) { pantherMatches . add ( ( PantherMatch ) m ) ; } else if ( m instanceof SignalPMatch ) { signalPMatches . add ( ( SignalPMatch ) m ) ; } else if ( m instanceof TMHMMMatch ) { tmhmmPMatches . add ( ( TMHMMMatch ) m ) ; } else $F18931 ( m ) } return new MatchesType ( rpsBlastMatches , hmmer2Matches , hmmer3Matches , superFamilyHmmer3Matches , fingerPrintsMatches , proDomMatches , patternScanMatches , profileScanMatches , phobiusMatches , coilsMatches , pantherMatches , signalPMatches , tmhmmPMatches ) ; }
public synchronized void ensureCapacity ( int minimumCapacity ) { if ( elementData . length < minimumCapacity ) { int next = ( capacityIncrement <= NUM00 ? elementData . length : capacityIncrement ) + elementData . length ; grow ( minimumCapacity > next ? minimumCapacity : next ) ; } }
public static void reverse $F49171 ( buffer , start , len ) { $F61236 ( len ) int end = ( start + len ) - NUM00 ; char frontHigh = buffer [ start ] ; char endLow = buffer [ end ] ; boolean allowFrontSur = _BOOL , allowEndSur = _BOOL ; final int mid = start + ( len > > NUM00 ) ; for ( int i = start ; i < mid ; ++ i , -- end ) { final char frontLow = buffer [ i + NUM00 ] ; final char endHigh = buffer [ end - NUM00 ] ; final boolean surAtFront = allowFrontSur && Character . isSurrogatePair ( frontHigh , frontLow ) ; if ( surAtFront && ( len < NUM00 ) ) $F932 final boolean surAtEnd = allowEndSur && Character . isSurrogatePair ( endHigh , endLow ) ; allowFrontSur = allowEndSur = _BOOL ; if ( surAtFront == surAtEnd ) { if ( surAtFront ) { buffer [ end ] = frontLow ; buffer [ -- end ] = frontHigh ; buffer [ i ] = endHigh ; buffer [ ++ i ] = endLow ; frontHigh = buffer [ i + NUM00 ] ; endLow = buffer [ end - NUM00 ] ; } else { buffer [ end ] = frontHigh ; buffer [ i ] = endLow ; frontHigh = frontLow ; endLow = endHigh ; } } else { if ( surAtFront ) { buffer [ end ] = frontLow ; buffer [ i ] = endLow ; endLow = endHigh ; allowFrontSur = _BOOL ; } else { buffer [ end ] = frontHigh ; buffer [ i ] = endHigh ; frontHigh = frontLow ; allowEndSur = _BOOL ; } } } if ( ( len & NUM00 ) == NUM00 && ! ( allowFrontSur && allowEndSur ) ) { buffer [ end ] = allowFrontSur ? endLow : frontHigh ; } }
$F1 public String toString $F72 $F66013 ( String , ledgerId , entryId )
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public void trigger ( Date time ) $F106 ( taskList , time )
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
Cipher ( CipherSpi cipherSpi , String transformation ) { this . spi = cipherSpi ; this . transformation = transformation ; this . cryptoPerm = CryptoAllPermission . INSTANCE ; this . lock = null ; }
public void testFlipBitPositiveOutside1 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
private void writeObject ( ObjectOutputStream aOutputStream ) throws IOException $F113012 ( aOutputStream )
$F1 public boolean isPanelEnabled $F72 { return multiOptionGroupEnabled ; }
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
public static String toUnixNewline ( String input ) $F11447 ( input )
private void outputIndentation $F72 { for ( $F119 ( i , m_indent ) ) $F91838 ( m_out , m_basicIndent ) }
protected Bucket $F4203 createBucket ( long bucketKey ) { return new Bucket $F4203 ( bucketKey ) ; }
public AbstractSiteMap parseSiteMap ( $F96 content , URL url ) throws UnknownFormatException , IOException { $F1338 ( url ) String filename = FilenameUtils . getName ( url . getPath ( ) ) ; String contentType = TIKA . detect ( content , filename ) ; return parseSiteMap ( contentType , content , url ) ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public ApplicationMetaData ( final Deserializer deserializer ) { this . appName = deserializer . readString ( NUM00 ) ; this . version = deserializer . readString ( NUM00 ) ; this . certificateSigner = deserializer . readOptionalString ( NUM00 ) ; this . startTime = TimeInstant . readFrom ( deserializer , NUM00 ) ; this . currentTime = TimeInstant . readFrom ( deserializer , NUM00 ) ; this . timeProvider = null ; }
public static ConstraintsParameters loadPolicyData ( InputStream policyDataStream ) { if ( policyDataStream != null ) $F4915 ( load , policyDataStream ) if $F2772 ( defaultPolicyConstraintsLocation ) $F4915 ( load , defaultPolicyConstraintsLocation ) $F1274 }
public static void close ( OutputStream out ) { try $F6399 ( out ) catch ( IOException ioE ) $F845 }
$F1 public boolean isCellEditable ( int row , int col ) { if ( isConnectedToDataSource ) { if ( col != FIELD_COLUMN_ID ) { return _BOOL ; } else { return _BOOL ; } } else { return _BOOL ; } }
$F298952 ( type , supportedTypes , super )
private void saveSortedPomFile ( final String sortedXml ) { fileUtil . savePomFile ( sortedXml ) ; $F36580 ( log , pomFile ) }
private void appendStatements ( PolicyType policy , String prefix ) { $F373359 appendStatements = newStatements ( policy , prefix ) ; for ( Statement statement : appendStatements ) { appendStatement ( statement ) ; } }
private void validateTOTPParameters $F72 throws AuthLoginException { $F83 ( errorMessages ) if $F4329 ( StringUtils , loginTimeAttrName ) $F86 ( errorMessages ) if ( clockDriftCheckEnabled && StringUtils . isEmpty ( observedClockDriftAttrName ) ) $F86 ( errorMessages ) if ( totpTimeStep <= NUM00 ) $F287 ( errorMessages , totpTimeStep ) if ( totpStepsInWindow < NUM00 ) $F11031 ( errorMessages , totpStepsInWindow ) if $F4012 ( errorMessages ) { $F103457 ( debug , errorMessages ) $F12117 ( amAuthOATH ) } }
public static String removeUriFragment ( String url ) { $F26918 ( url ) $F6542 ( arr , url ) if $F9634 ( arr ) $F3262 ( arr ) else { return url ; } }
public static void writeReceiptsToFiles ( $F4358 ( printedReceipts ) , String prefix , File baseDir ) { try { int index = NUM00 ; for ( $F96 printedReceipt : printedReceipts ) { $F5950 ( bIn , printedReceipt ) File receiptFile = new File ( baseDir , prefix + NUM00 + index + NUM00 ) ; BufferedOutputStream $F112784 ( bufferedOutputStream , receiptFile ) ; IOUtils . copy ( bIn , bufferedOutputStream ) ; $F59 ( bufferedOutputStream ) index ++ ; } } $F12241 ( e ) }
public synchronized void renderDataForProjection ( Projection proj , java . awt . Graphics g ) { fireStatusUpdate ( LayerStatusEvent . FINISH_WORKING ) ; if ( proj == null ) $F23406 ( logger ) else { setTargetIndex ( proj . getScale ( ) ) ; Layer layer = getAppropriateLayer ( ) ; layer . renderDataForProjection ( proj , g ) ; } }
public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { $F26831 ( jpegStream , exifOutStream , NULL_ARGUMENT_ ) OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; $F1206 ( s ) }
private ContainerPanel createContainerPanel $F72 { ContainerPanel containerPanel = new ContainerPanel $F72 ; containerPanel . setAnimated ( _BOOL ) ; $F167982 ( containerPanel ) character = new Character $F72 ; containerPanel . addRepaintable ( character ) ; inventory = new SlotWindow ( $F109655 ) ; inventory . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; inventory . setCloseable ( _BOOL ) ; containerPanel . addRepaintable ( inventory ) ; keyring = new KeyRing $F72 ; keyring . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; containerPanel . addRepaintable ( keyring ) ; userContext . addFeatureChangeListener ( keyring ) ; spells = new Spells $F72 ; spells . setAcceptedTypes ( EntityMap . getClass ( $F244022 ) ) ; containerPanel . addRepaintable ( spells ) ; userContext . addFeatureChangeListener ( spells ) ; return containerPanel ; }
public void copyFromGeometry3D ( Geometry3D geom ) { this . mNumIndices = geom . getNumIndices ( ) ; this . mNumVertices = geom . getNumVertices ( ) ; this . mVertexBufferInfo = geom . getVertexBufferInfo ( ) ; this . mIndexBufferInfo = geom . getIndexBufferInfo ( ) ; this . mTexCoordBufferInfo = geom . getTexCoordBufferInfo ( ) ; this . mOnlyShortBufferSupported = geom . areOnlyShortBuffersSupported ( ) ; if ( mColors == null ) this . mColorBufferInfo = geom . getColorBufferInfo ( ) ; this . mNormalBufferInfo = geom . getNormalBufferInfo ( ) ; this . mOriginalGeometry = geom ; this . mHasNormals = geom . hasNormals ( ) ; this . mHasTextureCoordinates = geom . hasTextureCoordinates ( ) ; }
$F43832 ( pcl , m_pcSupport )
public static Intent implicit2ExplicitIntent ( Context context , Intent implicitIntent ) { $F45547 ( pm , context ) $F45549 resolveInfo = pm . queryIntentServices ( implicitIntent , NUM00 ) ; if ( resolveInfo == null || $F6886 ( resolveInfo ) ) $F1337 ResolveInfo serviceInfo = resolveInfo . get ( NUM00 ) ; String packageName = serviceInfo . serviceInfo . packageName ; String className = serviceInfo . serviceInfo . name ; ComponentName component = new ComponentName ( packageName , className ) ; Intent explicitIntent = new Intent ( implicitIntent ) ; explicitIntent . setComponent ( component ) ; return explicitIntent ; }
private synchronized void garbageCollectPeer ( Peer peer ) { $F586 ( log , peer ) mCurrentPeers . remove ( peer ) ; }
public void reset $F72 { synchronized ( this ) { $F725 ( queue ) setBridgeMode ( - NUM00 ) ; } }
@ PostConstruct public void initApplication $F72 throws IOException { if ( env . getActiveProfiles ( ) . length == NUM00 ) $F10911 ( log ) else { log . info ( NUM00 , Arrays . toString ( env . getActiveProfiles ( ) ) ) ; } }
private void indent $F72 $F91838 ( out , currentIndention )
private void computeImplicitForwardDependencesUse ( Register r , DepGraphNode destNode ) { DepGraphNode sourceNode = getDepGraphNode ( r ) ; if ( sourceNode != null ) { for ( Enumeration < Register > e = GenericPhysicalDefUse . enumerate ( GenericPhysicalDefUse . getMaskTSPDefs ( ) , ir ) ; e . hasMoreElements ( ) ; ) { Register r2 = e . nextElement ( ) ; if ( r == r2 ) { sourceNode . insertOutEdge ( destNode , REG_MAY_DEF ) ; $F665 } } sourceNode . insertOutEdge ( destNode , REG_TRUE ) ; } }
public String description $F72 { synchronized ( this ) { if ( messages == null ) { messages = ResourceBundle . getBundle ( NUM00 ) ; } } return messages . getString ( NUM00 ) ; }
Set findRemovableAciList ( Set aciList ) throws $F52710 { $F19850 ( resultSet ) $F1933 ( aciList , resultSet ) $F10531 ( iter , aciList ) while $F2921 ( iter ) { $F2778 ( aci , iter ) Set objs = dsServices . search ( token , AMStoreConnection . getAMSdkBaseDN ( ) , NUM00 + AMSearchFilterManager . getGlobalSearchFilter ( AMObject . GROUP ) + NUM00 + aci + NUM00 , AMConstants . SCOPE_SUB ) ; if $F6214 ( objs ) $F207 ( resultSet , aci ) } return resultSet ; }
protected final void unregisterDataSource ( DataSource removed ) { $F12632 ( unregisterDataSources , Collections , removed ) }
public String dump $F97 ( der ) throws $F31549 { try { ASN1Primitive derObject = ASN1Primitive . fromByteArray ( der ) ; if ( derObject . getEncoded ( ) . length < der . length ) { throw new Asn1Exception $F16961 ( res ) ; } return dump ( derObject ) ; } catch ( IOException ex ) { throw new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; } }
private static void assertChangeEvents ( $F101180 earlyEvents , $F101180 lateEvents , $F101180 anytimeEvents , $F101180 actualEvents ) { String inputDesc = String . format ( NUM00 + NUM00 , earlyEvents . toString ( ) , lateEvents . toString ( ) , anytimeEvents . toString ( ) , actualEvents . toString ( ) ) ; $F101193 ( early , earlyEvents ) $F101193 ( late , lateEvents ) $F101193 ( any , anytimeEvents ) $F101197 ( ev , early , assertFalse , late , any ) $F101197 ( ev , late , assertFalse , early , any ) $F101197 ( ev , any , assertFalse , early , late ) for ( PortChangeEvent a : actualEvents ) { if $F16914 ( early , a ) $F1448 if $F16914 ( any , a ) $F1448 if $F16914 ( late , a ) { if $F5973 ( early ) { fail ( a + NUM00 + NUM00 + inputDesc ) ; } else $F1448 } fail ( a + NUM00 + inputDesc ) ; } $F101205 ( early , fail , inputDesc ) $F101205 ( late , fail , inputDesc ) $F101205 ( any , fail , inputDesc ) }
public static Class needClass ( String property ) throws NoSuchPropertyException { String value = needProperty ( property ) ; Class c = null ; try { c = Class . forName ( value ) ; } catch ( ClassNotFoundException e ) { throw new NoSuchPropertyException $F6486 ( value , property ) ; } return c ; }
DependencySpec createModuleDependency ( ArtifactResult i , boolean forceExport ) { if ( JDK_MODULE_NAMES . contains ( i . name ( ) ) ) return JDK_DEPENDENCY ; final ModuleIdentifier mi = createModuleIdentifier ( i ) ; final boolean export = forceExport || ( i . importType ( ) == ImportType . EXPORT ) ; return DependencySpec . createModuleDependencySpec ( PathFilters . getMetaInfSubdirectoriesWithoutMetaInfFilter ( ) , ( export ? PathFilters . acceptAll ( ) : PathFilters . rejectAll ( ) ) , this , mi , i . importType ( ) == ImportType . OPTIONAL ) ; }
public void appendNodes ( NodeSet nodes ) { $F2199 ( nNodes , nodes ) if ( null == m_map ) { m_mapSize = nNodes + m_blocksize ; m_map = new Node [ m_mapSize ] ; } else if ( ( m_firstFree + nNodes ) >= m_mapSize ) { m_mapSize += ( nNodes + m_blocksize ) ; Node newMap [ ] = new Node [ m_mapSize ] ; System . arraycopy ( m_map , NUM00 , newMap , NUM00 , m_firstFree + nNodes ) ; m_map = newMap ; } $F197780 ( System , nodes , m_map , m_firstFree , nNodes ) m_firstFree += nNodes ; }
public void makeImmutable $F72 { $F4246 ( isMutable , _BOOL ) }
private int readEpoch ( File epochFile ) { int epoch = - NUM00 ; if $F1906 ( epochFile ) { return epoch ; } try { Scanner scanner = new Scanner ( epochFile ) ; epoch = scanner . nextInt ( ) ; log . debug ( $F42278 ( epoch , epochFile ) ) ; } catch ( IOException e ) { log . error ( $F224279 ( epochFile , e ) ) ; } return epoch ; }
private int fastMatch ( String sha1 ) { $F99426 ( idx , _indexes , sha1 ) if ( idx == null ) $F150 else $F10182 ( idx ) }
$F1322 ( criteria , oredCriteria )
public static void format $F4353 ( format , args ) { if $F931 ( isDisabled ) $F4355 ( print , String , format , args ) }
public void concatenate ( SIPObjectList otherList ) { super . concatenate ( otherList ) ; }
$F1 $F1230 protected void persist ( Collection < RawProtein $F588333 > filteredProteins , Map < String , Signature > modelIdToSignatureMap , Map < String , Protein > proteinIdToProteinMap ) { for ( RawProtein $F588333 rawProtein : filteredProteins ) { Protein protein = proteinIdToProteinMap . get ( rawProtein . getProteinIdentifier ( ) ) ; if ( protein == null ) { throw new IllegalStateException ( NUM00 + NUM00 + rawProtein . getProteinIdentifier ( ) + NUM00 ) ; } Set < FingerPrintsMatch . FingerPrintsLocation > locations = null ; String currentSignatureAc = null ; Signature currentSignature = null ; PrintsRawMatch lastRawMatch = null ; final TreeSet $F588333 sortedMatches = new TreeSet $F588333 ( PRINTS_RAW_MATCH_COMPARATOR ) ; sortedMatches . addAll ( rawProtein . getMatches ( ) ) ; FingerPrintsMatch match = null ; for ( PrintsRawMatch rawMatch : sortedMatches ) { $F4322 ( rawMatch ) if ( currentSignatureAc == null || ! currentSignatureAc . equals ( rawMatch . getModelId ( ) ) ) { if ( currentSignatureAc != null ) { if ( match != null ) { entityManager . persist ( match ) ; } match = new FingerPrintsMatch ( currentSignature , lastRawMatch . getEvalue ( ) , lastRawMatch . getGraphscan ( ) , locations ) ; protein . addMatch ( match ) ; } locations = new HashSet < FingerPrintsMatch . FingerPrintsLocation > $F72 ; currentSignatureAc = rawMatch . getModelId ( ) ; currentSignature = modelIdToSignatureMap . get ( currentSignatureAc ) ; if ( currentSignature == null ) $F322689 ( currentSignatureAc ) } locations . add ( new FingerPrintsMatch . FingerPrintsLocation ( rawMatch . getLocationStart ( ) , boundedLocationEnd ( protein , rawMatch ) , rawMatch . getPvalue ( ) , rawMatch . getScore ( ) , rawMatch . getMotifNumber ( ) ) ) ; lastRawMatch = rawMatch ; } if ( lastRawMatch != null ) { match = new FingerPrintsMatch ( currentSignature , lastRawMatch . getEvalue ( ) , lastRawMatch . getGraphscan ( ) , locations ) ; protein . addMatch ( match ) ; entityManager . persist ( match ) ; } } }
public Builder withKeyStorePassword ( String trustStorePassword ) { properties . setProperty ( NettyOptions . SSL_KEY_STORE_PASSWORD , Assert . notNull ( trustStorePassword , NUM00 ) ) ; return this ; }
public static String suffix ( String string , String suffix ) { if ( string . endsWith ( suffix ) == _BOOL ) { string += suffix ; } return string ; }
public Point2D ( double x , double y ) { if ( Double . isInfinite ( x ) || Double . isInfinite ( y ) ) $F824 if $F89880 ( Double , x , y ) $F824 if ( x == NUM00 ) this . x = NUM00 ; else this . x = x ; if ( y == NUM00 ) this . y = NUM00 ; else this . y = y ; }
public static void serverFailed ( String serviceName ) { if $F7311 ( serviceName , validRemoteURL ) { serverFailed = _BOOL ; } else $F106 ( remoteStubs , serviceName ) }
public RequestHandler ( PokemonGo api , OkHttpClient client ) { this . api = api ; this . client = client ; apiEndpoint = ApiSettings . API_ENDPOINT ; $F40963 ( asyncHttpThread , this ) ; asyncHttpThread . setDaemon ( _BOOL ) ; $F2346 ( asyncHttpThread ) }
public String toString $F72 { String s = NUM00 ; Enumeration names = getAttributeNames ( ) ; while $F1444 ( names ) { $F20039 ( key , names ) Object value = getAttribute ( key ) ; if ( value instanceof AttributeSet ) { s = s + key + NUM00 ; } else { s = s + key + NUM00 + value + NUM00 ; } } return s ; }
public VNXeCommandResult removeLunsFromConsistencyGroup $F13322 ( cgId , luns ) { LunGroupModifyParam param = new LunGroupModifyParam $F72 ; List $F42136 lunRemoves = new ArrayList $F42136 $F72 ; for ( String lunId : luns ) { VNXeBase lun = new VNXeBase ( lunId ) ; LunAddParam lunAdd = new LunAddParam $F72 ; lunAdd . setLun ( lun ) ; lunRemoves . add ( lunAdd ) ; } param . setLunRemove ( lunRemoves ) ; ConsistencyGroupRequests req = new ConsistencyGroupRequests ( _khClient ) ; return req . modifyConsistencyGroupSync ( cgId , param ) ; }
private static boolean notInstanceAvailable $F72 { if ( sInstance == null ) { if $F38402 ( sTrainingTaskFuture ) { try { $F16478 ( sInstance , sTrainingTaskFuture ) return _BOOL ; } catch ( InterruptedException | ExecutionException e ) $F37158 ( e , _BOOL ) } else { return _BOOL ; } } return _BOOL ; }
public void readData ( DataInput din ) throws IOException { $F89921 ( status , din ) $F89921 ( events , din ) }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public void remove ( String identifier , ActiveConnectionRecord record ) { synchronized ( records ) { Set < ActiveConnectionRecord > connections = records . get ( identifier ) ; $F83951 ( connections ) connections . remove ( record ) ; if $F2979 ( connections ) records . remove ( identifier ) ; } }
private String buildMetroProintPlacementStatusString $F72 { $F280 ( placementStatusBuf ) if ( placementStatus != null ) { $F46034 ( placementStatusBuf , String ) $F42779 ( placementStatusBuf , placementStatus , dbClient ) } if ( secondaryPlacementStatus != null ) { $F46034 ( placementStatusBuf , String ) $F42779 ( placementStatusBuf , secondaryPlacementStatus , dbClient ) } $F92 ( placementStatusBuf ) }
private boolean hasSequence ( Subgraph graph ) { int oddDegreeCount = NUM00 ; for ( Iterator i = graph . nodeIterator ( ) ; i . hasNext ( ) ; ) { $F67766 ( node , i ) if ( node . getDegree ( ) % NUM00 == NUM00 ) oddDegreeCount ++ ; } return oddDegreeCount <= NUM00 ; }
public void ensureAdditionalCapacity ( final int size ) { final int newCount = visible . position ( ) + size ; if ( newCount > visible . capacity ( ) ) { final ByteBuffer newByteBuffer = ByteBuffer . allocate ( Math . max ( $F238996 ( visible ) , newCount ) ) ; $F14257 ( visible ) visible = newByteBuffer . put ( visible ) ; } }
public void forceReload ( File file ) $F207 ( fFilesToReoad , file )
private static long longMultiplyPowerTen ( long val , int n ) { if ( val == NUM00 || n <= NUM00 ) return val ; $F2469 tab = LONG_TEN_POWERS_TABLE ; $F2469 bounds = THRESHOLDS_TABLE ; if ( n < tab . length && n < bounds . length ) { long tenpower = tab [ n ] ; $F116 ( val , tenpower ) if ( Math . abs ( val ) <= bounds [ n ] ) return val * tenpower ; } return INFLATED ; }
public static int wildCompare ( String searchIn , String searchForWildcard ) { if $F54923 ( searchIn , searchForWildcard ) { return WILD_COMPARE_NO_MATCH ; } $F91442 ( searchForWildcard , WILD_COMPARE_MATCH_WITH_WILD ) int result = WILD_COMPARE_NO_MATCH ; char wildcardMany = NUM00 ; char wildcardOne = NUM00 ; char wildcardEscape = NUM00 ; int searchForPos = NUM00 ; $F1749 ( searchForEnd , searchForWildcard ) int searchInPos = NUM00 ; $F1749 ( searchInEnd , searchIn ) while ( searchForPos != searchForEnd ) { $F1280 ( wildstrChar , searchForWildcard , searchForPos ) while ( $F7883 ( searchForWildcard , searchForPos , wildcardMany ) && ( wildstrChar != wildcardOne ) ) { if ( $F44927 ( searchForWildcard , searchForPos , wildcardEscape ) && ( ( searchForPos + NUM00 ) != searchForEnd ) ) { searchForPos ++ ; } if ( ( searchInPos == searchInEnd ) || ( Character . toUpperCase ( searchForWildcard . charAt ( searchForPos ++ ) ) != Character . toUpperCase ( searchIn . charAt ( searchInPos ++ ) ) ) ) { return WILD_COMPARE_MATCH_WITH_WILD ; } if ( searchForPos == searchForEnd ) { return ( ( searchInPos != searchInEnd ) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD ) ; } result = WILD_COMPARE_MATCH_WITH_WILD ; } if $F44927 ( searchForWildcard , searchForPos , wildcardOne ) { do { if ( searchInPos == searchInEnd ) $F3139 ( result ) searchInPos ++ ; } while ( ( ++ searchForPos < searchForEnd ) && $F44927 ( searchForWildcard , searchForPos , wildcardOne ) ) ; $F15290 ( searchForPos , searchForEnd ) } if $F44927 ( searchForWildcard , searchForPos , wildcardMany ) { char cmp ; searchForPos ++ ; for ( ; searchForPos != searchForEnd ; searchForPos ++ ) { if $F44927 ( searchForWildcard , searchForPos , wildcardMany ) $F1448 if $F44927 ( searchForWildcard , searchForPos , wildcardOne ) { if ( searchInPos == searchInEnd ) $F3139 ( WILD_COMPARE_NO_MATCH ) searchInPos ++ ; $F598 } $F597 } $F3627 ( searchForPos , searchForEnd , WILD_COMPARE_MATCH_NO_WILD ) $F3627 ( searchInPos , searchInEnd , WILD_COMPARE_NO_MATCH ) if ( ( $F31375 ( cmp , searchForWildcard , searchForPos ) == wildcardEscape ) && ( ( searchForPos + NUM00 ) != searchForEnd ) ) { $F373845 ( cmp , searchForWildcard , searchForPos ) } searchForPos ++ ; do { while ( ( searchInPos != searchInEnd ) && ( $F29169 ( Character , searchIn , searchInPos ) != Character . toUpperCase ( cmp ) ) ) { searchInPos ++ ; } if ( searchInPos ++ == searchInEnd ) { return WILD_COMPARE_NO_MATCH ; } { int tmp = wildCompare ( searchIn , searchForWildcard ) ; if ( tmp <= NUM00 ) $F3139 ( tmp ) } } while ( ( searchInPos != searchInEnd ) && ( searchForWildcard . charAt ( NUM00 ) != wildcardMany ) ) ; return WILD_COMPARE_NO_MATCH ; } } return ( ( searchInPos != searchInEnd ) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD ) ; }
boolean compareMethods ( $F5466 Method a , $F5466 Method b ) { if ( ( a == null ) != ( b == null ) ) { return _BOOL ; } if ( a != null && b != null ) { $F3067 ( a , b , _BOOL ) } return _BOOL ; }
public Object remove ( String markername ) $F20067 ( prefixLibrarian , markername )
String formatLastModified ( String fileName ) { synchronized ( dateFormat ) { return dateFormat . format ( new Date ( FileUtils . lastModified ( fileName ) ) ) ; } }
public TrueTypeFont ( String platname , Object nativeNames , int fIndex , boolean javaRasterizer , boolean useFilePool ) throws FontFormatException { super ( platname , nativeNames ) ; useJavaRasterizer = javaRasterizer ; fontRank = Font2D . TTF_RANK ; try { verify ( useFilePool ) ; init ( fIndex ) ; $F14406 ( useFilePool , close ) } catch ( Throwable t ) { close ( ) ; if ( t instanceof FontFormatException ) { throw ( FontFormatException ) t ; } else { throw new FontFormatException $F580 ; } } Disposer . addObjectRecord ( this , disposerRecord ) ; }
public void calcMinMax $F72 { $F8249 ( mDataSets ) mYMax = - Float . MAX_VALUE ; mYMin = Float . MAX_VALUE ; mXMax = - Float . MAX_VALUE ; mXMin = Float . MAX_VALUE ; for ( $F12534 ( i , size , mDataSets ) ) { $F6391 ( set , mDataSets , i ) calcMinMax ( set ) ; } mLeftAxisMax = - Float . MAX_VALUE ; mLeftAxisMin = Float . MAX_VALUE ; mRightAxisMax = - Float . MAX_VALUE ; mRightAxisMin = Float . MAX_VALUE ; T firstLeft = getFirstLeft ( mDataSets ) ; if ( firstLeft != null ) { $F546052 ( mLeftAxisMax , firstLeft ) $F546053 ( mLeftAxisMin , firstLeft ) for ( $F2277 ( i , mDataSets ) ) { $F6391 ( dataSet , mDataSets , i ) if $F259981 ( dataSet , AxisDependency ) { if ( dataSet . getYMin ( ) < mLeftAxisMin ) $F546053 ( mLeftAxisMin , dataSet ) if ( dataSet . getYMax ( ) > mLeftAxisMax ) $F546052 ( mLeftAxisMax , dataSet ) } } } T firstRight = getFirstRight ( mDataSets ) ; if ( firstRight != null ) { $F546052 ( mRightAxisMax , firstRight ) $F546053 ( mRightAxisMin , firstRight ) for ( $F2277 ( i , mDataSets ) ) { $F6391 ( dataSet , mDataSets , i ) if ( dataSet . getAxisDependency ( ) == AxisDependency . RIGHT ) { if ( dataSet . getYMin ( ) < mRightAxisMin ) $F546053 ( mRightAxisMin , dataSet ) if ( dataSet . getYMax ( ) > mRightAxisMax ) $F546052 ( mRightAxisMax , dataSet ) } } } }
public LogarithmicAxis ( String label ) $F34462 ( super , label , setupNumberFmtObj )
protected final boolean has_cycle_recu ( $F155343 p_visited_items , BrdItem p_search_item , BrdItem p_come_from_item , boolean p_ignore_areas ) { if ( p_ignore_areas && ( this instanceof BrdAreaConduction ) ) return _BOOL ; $F129519 contact_list = get_normal_contacts ( ) ; $F397 ( contact_list , _BOOL ) for ( BrdItem curr_contact : contact_list ) { $F73688 ( curr_contact , p_come_from_item ) if ( curr_contact == p_search_item ) return _BOOL ; if $F73676 ( p_visited_items , curr_contact ) $F598 if ( curr_contact . has_cycle_recu ( p_visited_items , p_search_item , this , p_ignore_areas ) ) return _BOOL ; } return _BOOL ; }
public static boolean isCallingClassReflectionAvailable $F72 { return _BOOL ; }
$F1 public void addTableModelListener ( TableModelListener l ) $F207 ( m_Listeners , l )
public Process exec ( $F806 taintedCommand , $F806 taintedEnvironment , File workingDirectory , boolean redirectErrorStream ) throws IOException { $F896 ( taintedCommand ) if $F9634 ( taintedCommand ) $F10547 $F806 command = taintedCommand . clone ( ) ; $F806 environment = taintedEnvironment != null ? taintedEnvironment . clone ( ) : null ; for ( $F1139 ( i , command ) ) { if ( command [ i ] == null ) { throw new NullPointerException ( NUM00 + i + NUM00 ) ; } } if ( environment != null ) { for ( $F1139 ( i , environment ) ) { if ( environment [ i ] == null ) { throw new NullPointerException ( NUM00 + i + NUM00 ) ; } } } FileDescriptor $F23044 ( in ) ; FileDescriptor $F23044 ( out ) ; FileDescriptor $F23044 ( err ) ; String workingPath = ( workingDirectory == null ) ? null : workingDirectory . getPath ( ) ; synchronized ( processReferences ) { int pid ; try { pid = exec ( command , environment , workingPath , in , out , err , redirectErrorStream ) ; } catch ( IOException e ) { IOException wrapper = new IOException ( NUM00 + NUM00 + Arrays . toString ( command ) + NUM00 + workingDirectory + NUM00 + Arrays . toString ( environment ) ) ; wrapper . initCause ( e ) ; throw wrapper ; } ProcessImpl process = new ProcessImpl ( pid , in , out , err ) ; ProcessReference processReference = new ProcessReference ( process , referenceQueue ) ; processReferences . put ( pid , processReference ) ; $F165 ( processReferences ) return process ; } }
private static $F806 formGrams ( String text , int ng ) { $F1749 ( len , text ) $F806 res = new String [ len - ng + NUM00 ] ; for ( int i = NUM00 ; i < len - ng + NUM00 ; i ++ ) { res [ i ] = text . substring ( i , i + ng ) ; } return res ; }
public void loadSettingsFromJson $F72 { synchronized ( LOCK ) { loadSettingsFromJson ( defaultFile ) ; for ( String fileName : files ) { loadSettingsFromJson ( fileName ) ; } } }
public void testFlush $F72 throws Exception { $F1191 ( data ) $F1196 ( tos ) CipherOutputStream cos = new CipherOutputStream ( tos ) $F845 ; cos . write ( data ) ; $F1206 ( cos ) $F1208 ( result , tos ) $F1211 ( Arrays , result , data , fail ) }
public void loadTrainIcons $F72 { for ( Train train : getTrainsByIdList ( ) ) { train . loadTrainIcon ( ) ; } }
public final String translate ( final CharSequence input ) { $F1338 ( input ) try { final StringWriter $F9487 ( writer , input ) ; translate ( input , writer ) ; $F92 ( writer ) } $F9492 ( ioe ) }
public void insertReverseSorted ( final int idx , final double distance ) { int i = NUM00 ; for ( ListNode temp : m_List ) { if ( temp . distance < distance ) $F5153 i ++ ; } m_List . add ( i , new ListNode ( idx , distance ) ) ; }
public double normalDistance ( final double x , final double y , final double z , final Membership ... bounds ) { final double dist = evaluate ( x , y , z ) ; final double perpX = x - dist * this . x ; final double perpY = y - dist * this . y ; final double perpZ = z - dist * this . z ; if ( ! meetsAllBounds ( perpX , perpY , perpZ , bounds ) ) $F90685 ( Double ) $F12286 ( Math , dist ) }
public void testBAandBCbrokerNetworkWithSelectorsSendFirst $F72 throws Exception { bridgeBrokers ( NUM00 , NUM00 , _BOOL , NUM00 , _BOOL ) ; bridgeBrokers ( NUM00 , NUM00 , _BOOL , NUM00 , _BOOL ) ; startAllBrokers ( ) ; waitForBridgeFormation ( ) ; Destination dest = createDestination ( NUM00 , _BOOL ) ; $F530 $F8690 ( props ) ; $F16824 ( props ) sendMessages ( NUM00 , dest , MESSAGE_COUNT , props ) ; $F725 ( props ) $F16824 ( props ) sendMessages ( NUM00 , dest , MESSAGE_COUNT , props ) ; MessageConsumer clientA = createConsumer ( NUM00 , dest , NUM00 ) ; MessageConsumer clientC = createConsumer ( NUM00 , dest , NUM00 ) ; $F9470 ( Thread ) MessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; MessageIdList msgsC = getConsumerMessages ( NUM00 , clientC ) ; $F165310 ( assertEquals , MESSAGE_COUNT , msgsA ) $F165310 ( assertEquals , MESSAGE_COUNT , msgsC ) }
private void generateVectorDrawableResult ( VectorDrawable vector , String nextVectorName , boolean isLast , boolean isFirst ) throws IOException { CustomLogger . logError ( NUM00 + vector . getFileName ( ) + NUM00 + isLast ) ; if ( ! vectorAlreadyDefined . contains ( vector . getFileName ( ) ) ) { currentVectorFileName = vector . getFileName ( ) ; CustomLogger . logError ( NUM00 + currentVectorFileName ) ; $F57201 ( vectorFile , drawableFolder , currentVectorFileName ) BufferedWriter vectorBW = createIt ( vectorFile ) ; CustomLogger . log ( $F4929 ( vectorFile ) ) ; generateVectorDrawable ( vector , vectorBW , isLast ) ; vectorAlreadyDefined . add ( vector . getFileName ( ) ) ; $F1206 ( vectorBW ) $F59 ( vectorBW ) } if ( ! isLast ) { File animatedVectorFile = new File ( drawableFolder , animatedVector . replace ( NUM00 , currentVectorFileName ) ) ; BufferedWriter animatedVectorBW = createIt ( animatedVectorFile ) ; CustomLogger . log ( $F4929 ( animatedVectorFile ) ) ; CustomLogger . logError ( $F62869 ( animatedVectorFile ) + nextVectorName ) ; generateAnimatedVector ( vector , animatedVectorBW , nextVectorName , _BOOL ) ; generateAnimatorSet ( vector , _BOOL ) ; $F1206 ( animatedVectorBW ) $F59 ( animatedVectorBW ) } if ( ! isLast ) { File animatedVectorFile = new File ( drawableFolder , animatedVector . replace ( NUM00 , currentVectorFileName + reverse ) ) ; BufferedWriter animatedVectorBW = createIt ( animatedVectorFile ) ; CustomLogger . log ( $F4929 ( animatedVectorFile ) ) ; CustomLogger . logError ( $F62869 ( animatedVectorFile ) + nextVectorName ) ; generateAnimatedVector ( vector , animatedVectorBW , nextVectorName , _BOOL ) ; generateAnimatorSet ( vector , _BOOL ) ; $F1206 ( animatedVectorBW ) $F59 ( animatedVectorBW ) } }
public void access $F72 $F22067 ( lastAccessedTime , System )
public void writeToObject ( Object object ) { try { Method method = BeanUtils . getWriteMethod ( object . getClass ( ) , getName ( ) , getType ( ) ) ; if ( method != null ) { method . invoke ( object , new Object $F57620 ( getValue ) ) ; } } $F12237 ( e ) }
private HttpURLConnection doHTTPPostRequest ( String location , String clientSessionId , $F2540 ( metadata ) , String postBody ) throws CommunicationException { OutputStreamWriter writer = null ; try { $F9518 ( url , location ) $F7963 ( connection , url ) $F2407 ( connection ) connection . addRequestProperty ( NUM00 , NUM00 ) ; if ( clientSessionId != null ) { connection . addRequestProperty ( HTTP_HEADER_SESSION_ID , NUM00 + clientSessionId ) ; } if ( metadata != null ) { connection . addRequestProperty ( HTTP_HEADER_METADATA , GcUtil . getBase64EncodedMetadata ( metadata ) ) ; } if ( Constants . ENABLE_REQUEST_LOGGING ) { logRequest ( connection , postBody ) ; } connection . setDoOutput ( _BOOL ) ; writer = new OutputStreamWriter ( connection . getOutputStream ( ) , NUM00 ) ; writer . write ( postBody ) ; $F1206 ( writer ) if ( connection . getResponseCode ( ) != NUM00 ) { throw new CommunicationException ( $F7974 ( connection ) ) ; } return connection ; } catch ( MalformedURLException e ) { $F110901 ( Log , TAG , location ) throw new CommunicationException ( NUM00 + location ) ; } catch ( IOException e ) { $F56767 ( Log , TAG , e ) throw new CommunicationException $F11592 ( e ) ; } finally { if ( writer != null ) { try $F881 ( writer ) catch ( IOException e ) { Log . i ( $F56761 ( TAG , e ) ) ; } } } }
void ioMessage ( Throwable ex ) { log . printLines ( PrefixKind . JAVAC , NUM00 ) ; $F94360 ( ex , log , WriterKind ) }
ObjectAnimator animateBoundScroll $F72 { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != NUM00 ) $F16625 ( animateScroll , curScroll , newScroll ) return mScrollAnimator ; }
$F139813 ( doc , elementList , nameNode , child , substring , load , _BOOL , assertEquals )
public static $F252768 nodeIds ( $F5466 Collection < ? extends ClusterNode > nodes ) { if $F4251 ( nodes ) $F12522 ( Collections ) return F . viewReadOnly ( nodes , node2id ( ) ) ; }
public static InputStream toInputStream ( final CharSequence input , final Charset encoding ) { return IOUtils . toInputStream ( input . toString ( ) , encoding ) ; }
public static boolean matchesXMLString ( $F1469 buf , int off , int end , String str ) { $F1749 ( len , str ) if ( len != end - off ) return _BOOL ; for ( int i = NUM00 ; i < len ; off += NUM00 , i ++ ) { if ( buf [ off ] != str . charAt ( i ) ) return _BOOL ; } return _BOOL ; }
public double r $F72 { $F126355 ( Math , x , y ) }
public void sign ( KeyPair keypair ) throws IOException { if $F2979 ( namelist ) $F4639 $F826 ( keypair ) try { GeneralName [ ] gns = new GeneralName $F2313 ( namelist ) ; for ( $F2277 ( ix , namelist ) ) { gns [ ix ] = new GeneralName ( GeneralName . dNSName , namelist . get ( ix ) ) ; } GeneralNames subjectAltName = new GeneralNames ( gns ) ; PKCS10CertificationRequestBuilder p10Builder = new JcaPKCS10CertificationRequestBuilder ( namebuilder . build ( ) , keypair . getPublic ( ) ) ; ExtensionsGenerator extensionsGenerator = new ExtensionsGenerator $F72 ; extensionsGenerator . addExtension ( Extension . subjectAlternativeName , _BOOL , subjectAltName ) ; p10Builder . addAttribute ( PKCSObjectIdentifiers . pkcs_9_at_extensionRequest , extensionsGenerator . generate ( ) ) ; PrivateKey pk = keypair . getPrivate ( ) ; JcaContentSignerBuilder csBuilder = new JcaContentSignerBuilder ( pk instanceof ECKey ? EC_SIGNATURE_ALG : SIGNATURE_ALG ) ; ContentSigner signer = csBuilder . build ( pk ) ; csr = p10Builder . build ( signer ) ; } catch ( OperatorCreationException ex ) $F19592 ( ex ) }
void removeEmptyRows ( final List list ) { for ( final Iterator < ReceiptDetailInfo > detail = list . iterator ( ) ; detail . hasNext ( ) ; ) if ( detail . next ( ) == null ) $F7042 ( detail ) }
private void add ( String text , Text textNode ) { $F1749 ( startIndex , builder ) builder . append ( text ) ; $F1749 ( endIndex , builder ) textRuns . add ( new TextRun ( textNode , startIndex , endIndex ) ) ; }
public DNetscapeBaseUrl ( JDialog parent ) $F15427 ( super , parent , setTitle , res , initComponents )
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) init ( getName ( ) ) ; }
public void appendRow ( RowSpec rowSpec ) { checkNotNull ( rowSpec , NUM00 ) ; rowSpecs . add ( rowSpec ) ; }
public static $F4203 ReactiveSeq $F4203 fromPublisher ( final $F40798 publisher ) { Objects . requireNonNull ( publisher ) ; final SeqSubscriber $F4203 sub = SeqSubscriber . subscriber ( ) ; publisher . subscribe ( sub ) ; return sub . stream ( ) ; }
public void multiplyAllValuesBy ( final double multiplyBy , final int RoundType ) { for ( final T t : keySet ( ) ) { $F28095 ( val , m_values , t ) switch ( RoundType ) { $F3366 val = Math . floor ( val * multiplyBy ) ; $F597 $F3366 val = Math . round ( val * multiplyBy ) ; $F597 $F3366 val = Math . ceil ( val * multiplyBy ) ; $F597 $F1267 val = val * multiplyBy ; $F597 } put ( t , ( int ) val ) ; } }
public void onTabsAllClosing ( long time , boolean incognito ) $F845
public final $F39461 await ( Duration timeout ) { if $F22360 ( cdl ) { return this ; } try { if ( ! cdl . await ( timeout . toMillis ( ) , TimeUnit . MILLISECONDS ) ) $F184395 return this ; } catch ( InterruptedException ex ) $F25083 ( ex ) }
protected void paintContentBorderBottomEdge ( Graphics g , int tabPlacement , int selectedIndex , int x , int y , int w , int h ) { boolean leftToRight = CompiereUtils . isLeftToRight ( tabPane ) ; int bottom = y + h - NUM00 ; int right = x + w - NUM00 ; Rectangle selRect = selectedIndex < NUM00 ? null : getTabBounds ( selectedIndex , calcRect ) ; g . setColor ( shadow ) ; if ( tabPlacement != BOTTOM || selectedIndex < NUM00 || ( selRect . x < x || selRect . x > x + w ) ) { g . setColor ( darkShadow ) ; g . drawLine ( x , y + h - NUM00 , x + w - NUM00 , y + h - NUM00 ) ; } else { boolean lastInRun = isLastInRun ( selectedIndex ) ; g . setColor ( darkShadow ) ; if ( leftToRight || lastInRun ) g . drawLine ( x , bottom , selRect . x , bottom ) ; else g . drawLine ( x , bottom , selRect . x - NUM00 , bottom ) ; if ( $F6108 ( selRect ) < x + w - NUM00 ) { if ( leftToRight && ! lastInRun ) g . drawLine ( $F6108 ( selRect ) , bottom , right , bottom ) ; else g . drawLine ( $F6108 ( selRect ) - NUM00 , bottom , right , bottom ) ; } } }
public static void upto ( double self , Number to , $F50462 ( closure ) ) { $F50466 ( to1 , to ) if ( self <= to1 ) { for ( double i = self ; i <= to1 ; i ++ ) $F50467 ( closure , i ) } else $F50472 ( to , self ) }
public void save ( String type , List < ElasticSearchDoc > docs ) { if $F1032 ( docs ) { List < List < ElasticSearchDoc > > partitionedDocs = Lists . partition ( docs , NUM00 ) ; $F22620 ( partitionedDocs ) } }
public void error ( SourceLocator srcLctr , String msg ) throws TransformerException { error ( srcLctr , null , null , msg , null ) ; }
void removeListener ( String listenerID ) { if ( listenerObjects != null ) { synchronized ( listenerObjects ) { listenerObjects . remove ( listenerID ) ; if $F2979 ( listenerObjects ) $F5795 ( deregisterListener ) } $F21954 ( debug , serviceName , listenerID ) } }
$F1309 public void registerCredentials ( UserCredential authentication ) { wallet . put ( authentication . getURL ( ) , authentication ) ; }
public void testDatabaseDriverPropertiesUserAndPasswordPropertyOverrideDSUserAndPassword $F72 { String driverPropertyString = NUM00 ; $F2697 ( props ) props . setProperty ( DatasourcePropertySet . USERNAME , NUM00 ) ; props . setProperty ( DatasourcePropertySet . PASSWORD , NUM00 ) ; props . setProperty ( DatasourcePropertySet . CONNECTION_PROPERTIES , driverPropertyString ) ; DataSource ds = dataSourceConverter . fromProperties ( props ) ; assertEquals ( NUM00 , ds . getUsername ( ) ) ; assertEquals ( NUM00 , ds . getPassword ( ) ) ; }
public boolean isAGCEnabled $F72 $F1522 ( mAGCEnabled )
protected $F28830 splitIntoAllophones ( String phoneString ) { $F28830 $F31408 ( phoneList ) ; for ( $F1088 ( i , phoneString ) ) { String name = null ; for ( $F183017 ( j ) ) { if ( i + j <= phoneString . length ( ) ) { $F25024 ( candidate , phoneString , i , j ) if ( getAllophone ( candidate ) != null ) { name = candidate ; i += j - NUM00 ; $F597 } } } $F1140 ( name , phoneList ) } return phoneList ; }
protected void addToMaintenanceQueue ( NodePortTuple npt ) $F116364 ( maintenanceQueue , npt , _BOOL )
private boolean execute ( boolean readResponse ) throws IOException { try { httpEngine . sendRequest ( ) ; $F177970 ( readResponse , httpEngine ) return _BOOL ; } catch ( IOException e ) { if ( handleFailure ( e ) ) { return _BOOL ; } else { throw e ; } } }
public BigdataSail ( final Properties properties ) { this ( properties . getProperty ( Options . NAMESPACE , Options . DEFAULT_NAMESPACE ) , new Journal ( properties ) ) ; closeOnShutdown = _BOOL ; if $F931 ( exists ) { try { create ( properties ) ; } catch ( InterruptedException | ExecutionException e ) $F9491 ( e ) } }
public float convert $F72 { return Float . intBitsToFloat ( ( int ) bytes ) ; }
protected int addNode ( Node node , int parentIndex , int previousSibling , int forceNodeType ) { $F2199 ( nodeIndex , m_nodes ) if ( m_dtmIdent . size ( ) == ( nodeIndex > > > DTMManager . IDENT_DTM_NODE_BITS ) ) { try { if ( m_mgr == null ) throw new ClassCastException $F72 ; DTMManagerDefault mgrD = ( DTMManagerDefault ) m_mgr ; int id = mgrD . getFirstFreeDTMID ( ) ; mgrD . addDTM ( this , id , nodeIndex ) ; m_dtmIdent . addElement ( id < < DTMManager . IDENT_DTM_NODE_BITS ) ; } catch ( ClassCastException e ) { error ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_NO_DTMIDS_AVAIL , null ) ) ; } } m_size ++ ; int type ; if ( NULL == forceNodeType ) type = node . getNodeType ( ) ; else type = forceNodeType ; if ( Node . ATTRIBUTE_NODE == type ) { $F48115 ( name , node ) if $F26612 ( name ) { type = DTM . NAMESPACE_NODE ; } } m_nodes . addElement ( node ) ; m_firstch . setElementAt ( NOTPROCESSED , nodeIndex ) ; m_nextsib . setElementAt ( NOTPROCESSED , nodeIndex ) ; m_prevsib . setElementAt ( previousSibling , nodeIndex ) ; m_parent . setElementAt ( parentIndex , nodeIndex ) ; if ( DTM . NULL != parentIndex && type != DTM . ATTRIBUTE_NODE && type != DTM . NAMESPACE_NODE ) { if ( NOTPROCESSED == m_firstch . elementAt ( parentIndex ) ) m_firstch . setElementAt ( nodeIndex , parentIndex ) ; } String nsURI = node . getNamespaceURI ( ) ; String localName = ( type == Node . PROCESSING_INSTRUCTION_NODE ) ? node . getNodeName ( ) : node . getLocalName ( ) ; if ( ( ( type == Node . ELEMENT_NODE ) || ( type == Node . ATTRIBUTE_NODE ) ) && null == localName ) $F89257 ( localName , node ) ExpandedNameTable exnt = m_expandedNameTable ; if ( node . getLocalName ( ) == null && ( type == Node . ELEMENT_NODE || type == Node . ATTRIBUTE_NODE ) ) $F845 int expandedNameID = ( null != localName ) ? exnt . getExpandedTypeID ( nsURI , localName , type ) : exnt . getExpandedTypeID ( type ) ; m_exptype . setElementAt ( expandedNameID , nodeIndex ) ; indexNode ( expandedNameID , nodeIndex ) ; if ( DTM . NULL != previousSibling ) m_nextsib . setElementAt ( nodeIndex , previousSibling ) ; if ( type == DTM . NAMESPACE_NODE ) declareNamespaceInContext ( parentIndex , nodeIndex ) ; return nodeIndex ; }
public FileProcessController ( final FileControllerParameters arguments , final int pid ) { this ( arguments , pid , Long . getLong ( STATUS_TIMEOUT_PROPERTY , NUM00 * NUM00 ) , TimeUnit . MILLISECONDS ) ; }
public void testAddCertificate2 $F72 throws Exception { $F63182 ( i ) $F259912 ( pk1 ) $F63198 ( c1 , pk1 ) i . addCertificate ( c1 ) ; assertSame ( c1 , i . certificates ( ) [ NUM00 ] ) ; $F259918 ( assertSame , pk1 , i ) }
$F31396 ( str , retval , ch , i , s , Integer )
protected Set < $F8318 > send ( String channelId , Object message ) { Collection $F263492 sessions = ( channelId != null ) ? socketSessions . get ( channelId ) : null ; if $F1032 ( sessions ) { Set < $F8318 > results = new $F9623 $F716 ( sessions ) ; $F102426 ( json , Json , message ) for ( Session session : sessions ) { if $F23014 ( session ) { send ( session , json , results ) ; } } return results ; } return emptySet ( ) ; }
public Object attribute ( Object key ) { return ( attributes != null ) ? attributes . get ( key ) : null ; }
public Response doPut ( String url ) $F13736 ( doPut , url )
private static $F7329 offsetRRX $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { $F7336 ( address , environment ) $F7336 ( index , environment ) $F7336 ( tmpVar , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , bt , NUM00 , wd , String . valueOf ( NUM00 ) , dw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , bt , $F43818 ( String ) , dw , tmpVar2 ) ) ; $F43825 ( instructions , ReilHelpers , baseOffset , dw , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar3 , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) }
public void unregisterDropControllers $F72 $F9096 ( dropControllerList )
private static long CallStaticLongMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { Object returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Long ) ; return Reflection . unwrapLong ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
public static String createLink ( String uri , String label ) { $F150391 ( uri , label ) }
$F1654 ( segments )
public void addOperand ( int startTick , int endTick , String text , Lifeline constraintLifeline ) throws SequenceDiagramCheckedException { if ( $F10470 ( operands ) && this . startTick != startTick ) $F825 operands . add ( new Operand ( startTick , endTick , text , constraintLifeline ) ) ; }
public static Number asin ( Number a ) { return Math . asin ( a . doubleValue ( ) ) ; }
private void createAndAttachEvent ( long ov ) throws WindowsException { long hEvent = CreateEvent ( _BOOL , _BOOL ) ; UNSAFE . putAddress ( ov + OFFSETOF_HEVENT , hEvent ) ; }
public String toString $F72 { $F280 ( result ) $F84 ( result ) $F2199 ( s1 , sizes ) for ( $F1316 ( i , s1 ) ) { $F85651 ( s2 , sizes , i ) $F84 ( result ) for ( $F1316 ( j , s2 ) ) { $F53015 ( result , vector , i , j ) if ( j + NUM00 < s2 ) $F84 ( result ) } $F84 ( result ) if ( i + NUM00 < s1 ) $F84 ( result ) } $F84 ( result ) $F92 ( result ) }
$F1 public int compareTo ( String o ) { int result ; int major ; int minor ; int revision ; int pnt ; $F11844 ( maj ) $F11844 ( min ) $F11844 ( rev ) $F11844 ( point ) parseVersion ( o , maj , min , rev , point ) ; major = maj [ NUM00 ] ; minor = min [ NUM00 ] ; revision = rev [ NUM00 ] ; pnt = point [ NUM00 ] ; if ( MAJOR < major ) $F44867 ( result ) else if ( MAJOR == major ) { if ( MINOR < minor ) $F44867 ( result ) else if ( MINOR == minor ) { if ( REVISION < revision ) $F44867 ( result ) else if ( REVISION == revision ) { if ( POINT < pnt ) $F44867 ( result ) else if ( POINT == pnt ) { result = NUM00 ; } else { result = NUM00 ; } } else { result = NUM00 ; } } else { result = NUM00 ; } } else { result = NUM00 ; } return result ; }
private void generateIntegrityKeyPair ( boolean clientMode ) throws UnsupportedEncodingException , IOException , NoSuchAlgorithmException { $F45669 ( cimagic , CLIENT_INT_MAGIC , encoding ) $F45669 ( simagic , SVR_INT_MAGIC , encoding ) $F5348 ( md5 , MessageDigest ) $F148496 ( keyBuffer , H_A1 , cimagic ) $F7057 ( System , H_A1 , keyBuffer ) $F11244 ( System , cimagic , keyBuffer , H_A1 ) md5 . update ( keyBuffer ) ; $F294889 ( Kic , md5 ) $F11244 ( System , simagic , keyBuffer , H_A1 ) md5 . update ( keyBuffer ) ; $F294889 ( Kis , md5 ) if $F70311 ( logger , Level ) { traceOutput ( DI_CLASS_NAME , NUM00 , NUM00 , Kic ) ; traceOutput ( DI_CLASS_NAME , NUM00 , NUM00 , Kis ) ; } if ( clientMode ) { myKi = Kic ; peerKi = Kis ; } else { myKi = Kis ; peerKi = Kic ; } }
public static boolean isLocalFileUri ( Uri uri ) $F67552 ( scheme , getSchemeOrNull , uri , LOCAL_FILE_SCHEME )
CompletableFuture < WriteResponse > write ( List < WriteValue > writeValues ) ;
$F188545 ( sourceList , entry , _BOOL )
public static boolean validSystemNameConfig ( String systemName , char type ) { $F27673 ( validSystemNameFormat , systemName , type , _BOOL ) int bit = getBitFromSystemName ( systemName ) ; if $F34322 ( type ) { if ( ( bit <= NUM00 ) || ( bit > OutputBits . getNumOutputBits ( ) ) ) { return _BOOL ; } } else if ( type == NUM00 ) { if ( ( bit <= NUM00 ) || ( bit > InputBits . getNumInputBits ( ) ) ) { return _BOOL ; } } else $F24275 ( log , _BOOL ) return _BOOL ; }
public boolean mouseMoved ( MouseEvent e ) { EsriGraphicList list = getEsriGraphicList ( ) ; boolean ret = _BOOL ; if ( list != null ) { OMGraphic omg = list . findClosest ( e . getX ( ) , e . getY ( ) , NUM00 ) ; if ( omg != null ) { int index ; Integer I = ( ( Integer ) omg . getAttribute ( SHAPE_INDEX_ATTRIBUTE ) ) ; if ( I != null ) $F276383 ( index , I ) else { index = list . indexOf ( omg ) ; } if ( parentLayer == null ) { Component comp = getComponent ( ) ; if ( comp instanceof Layer ) { parentLayer = ( Layer ) comp ; } } if ( parentLayer != null ) { parentLayer . fireRequestToolTip ( getDescription ( index ) ) ; } ret = _BOOL ; } else if ( parentLayer != null ) { parentLayer . fireHideToolTip ( ) ; } } return ret ; }
$F4486 ( type , outputStack , n , outputStackTop , t , Math , System , top , owner )
public void createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting ( String namespace , $F3803 notificationEventTypes , String businessObjectDefinitionNamespace , String businessObjectDefinitionName , $F3803 fileTypes , $F3803 storageNames , $F3803 businessObjectDataStatuses , List < JobAction > jobActions ) { NamespaceEntity namespaceEntity = namespaceDao . getNamespaceByCd ( namespace ) ; if ( namespaceEntity == null ) { namespaceDaoTestHelper . createNamespaceEntity ( namespace ) ; } if $F20899 ( CollectionUtils , notificationEventTypes ) { for ( String notificationEventType : notificationEventTypes ) { NotificationEventTypeEntity notificationEventTypeEntity = notificationEventTypeDao . getNotificationEventTypeByCode ( notificationEventType ) ; if ( notificationEventTypeEntity == null ) { notificationRegistrationDaoTestHelper . createNotificationEventTypeEntity ( notificationEventType ) ; } } } BusinessObjectDefinitionEntity businessObjectDefinitionEntity = businessObjectDefinitionDao . getBusinessObjectDefinitionByKey ( new BusinessObjectDefinitionKey ( businessObjectDefinitionNamespace , businessObjectDefinitionName ) ) ; if ( businessObjectDefinitionEntity == null ) { businessObjectDefinitionDaoTestHelper . createBusinessObjectDefinitionEntity ( businessObjectDefinitionNamespace , businessObjectDefinitionName , AbstractServiceTest . DATA_PROVIDER_NAME , AbstractServiceTest . BDEF_DESCRIPTION ) ; } if $F20899 ( CollectionUtils , fileTypes ) { for ( String businessObjectFormatFileType : fileTypes ) { fileTypeDaoTestHelper . createFileTypeEntity ( businessObjectFormatFileType ) ; } } if $F20899 ( CollectionUtils , storageNames ) { for ( String storageName : storageNames ) { storageDaoTestHelper . createStorageEntity ( storageName , StoragePlatformEntity . S3 ) ; } } if $F20899 ( CollectionUtils , businessObjectDataStatuses ) { for ( String businessObjectDataStatus : businessObjectDataStatuses ) { BusinessObjectDataStatusEntity businessObjectDataStatusEntity = businessObjectDataStatusDao . getBusinessObjectDataStatusByCode ( businessObjectDataStatus ) ; if ( businessObjectDataStatusEntity == null ) { businessObjectDataStatusDaoTestHelper . createBusinessObjectDataStatusEntity ( businessObjectDataStatus ) ; } } } if $F20899 ( CollectionUtils , jobActions ) { for ( JobAction jobAction : jobActions ) { jobDefinitionDaoTestHelper . createJobDefinitionEntity ( jobAction . getNamespace ( ) , jobAction . getJobName ( ) , String . format ( NUM00 , jobAction . getNamespace ( ) , jobAction . getJobName ( ) ) , String . format ( NUM00 , jobAction . getNamespace ( ) , jobAction . getJobName ( ) , AbstractServiceTest . ACTIVITI_ID ) ) ; } } }
public boolean postData ( InputStream data , Long length , OutputStream output , String type , URL url ) { if ( mockMode ) return _BOOL ; boolean success = _BOOL ; $F22996 ( type , DEFAULT_CONTENT_TYPE ) HttpURLConnection urlc = null ; try { try { $F23802 ( urlc , url ) try { $F2407 ( urlc ) } catch ( ProtocolException e ) $F1328 ( fatal , e ) urlc . setDoOutput ( _BOOL ) ; urlc . setDoInput ( _BOOL ) ; urlc . setUseCaches ( _BOOL ) ; urlc . setAllowUserInteraction ( _BOOL ) ; $F197920 ( urlc , type ) basicAuth ( urlc ) ; if ( null != length ) { urlc . setFixedLengthStreamingMode ( length ) ; } else { urlc . setChunkedStreamingMode ( - NUM00 ) ; } $F2410 ( urlc ) } catch ( IOException e ) { fatal ( NUM00 + solrUrl + NUM00 + e ) ; success = _BOOL ; } $F139686 ( fatal , e ) try ( final OutputStream out = urlc . getOutputStream ( ) ) { pipe ( data , out ) ; } catch ( IOException e ) $F1328 ( fatal , e ) try { success &= checkResponseCode ( urlc ) ; try ( final InputStream in = urlc . getInputStream ( ) ) { pipe ( in , output ) ; } } catch ( IOException e ) { warn ( NUM00 + e ) ; success = _BOOL ; } catch ( GeneralSecurityException e ) $F1210 ( fatal ) } finally { if ( urlc != null ) $F8074 ( urlc ) } return success ; }
public FormatException ( String s , Throwable rootCause ) { super ( s + NUM00 + rootCause . getLocalizedMessage ( ) ) ; this . rootCause = rootCause ; }
private Pair < BigDecimal , BigDecimal > fillPayment ( final CustomerOrder order , final CustomerOrderDelivery delivery , final Payment payment , final boolean singlePay , final BigDecimal runningTotal , final BigDecimal runningTotalTax , final boolean lastDelivery ) { if ( payment . getTransactionReferenceId ( ) == null ) { payment . setTransactionReferenceId ( delivery . getDeliveryNum ( ) ) ; } payment . setOrderShipment ( singlePay ? order . getOrdernum ( ) : delivery . getDeliveryNum ( ) ) ; fillPaymentItems ( delivery , payment ) ; fillPaymentShipment ( order , delivery , payment ) ; return fillPaymentAmount ( order , delivery , payment , singlePay , runningTotal , runningTotalTax , lastDelivery ) ; }
public static double angle ( NumberVector v1 , NumberVector v2 , NumberVector o ) { final int dim1 = v1 . getDimensionality ( ) , dim2 = v2 . getDimensionality ( ) , dimo = o . getDimensionality ( ) ; final int mindim = ( dim1 <= dim2 ) ? dim1 : dim2 ; $F72638 ( cross , l1 , l2 ) for ( $F119 ( k , mindim ) ) { final double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; final double r1 = v1 . doubleValue ( k ) - ok ; final double r2 = v2 . doubleValue ( k ) - ok ; cross += r1 * r2 ; l1 += r1 * r1 ; l2 += r2 * r2 ; } for ( int k = mindim ; k < dim1 ; k ++ ) { final double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; final double r1 = v1 . doubleValue ( k ) - ok ; l1 += r1 * r1 ; } for ( int k = mindim ; k < dim2 ; k ++ ) { final double ok = k < dimo ? o . doubleValue ( k ) : NUM00 ; final double r2 = v2 . doubleValue ( k ) - ok ; l2 += r2 * r2 ; } final double a = ( cross == NUM00 ) ? NUM00 : ( l1 == NUM00 || l2 == NUM00 ) ? NUM00 : Math . sqrt ( ( cross / l1 ) * ( cross / l2 ) ) ; return ( a < NUM00 ) ? a : NUM00 ; }
void materialize $F72 { $F44858 ( cachefill ) double min = Double . MAX_VALUE , max = Double . MIN_VALUE ; for ( $F119 ( i , cachefill ) ) { $F37717 ( min , Math , cachec , i ) $F37717 ( max , Math , cachec , i ) } LinearScale scale = new LinearScale ( min , max ) ; min = scale . getMin ( ) ; $F268954 ( max , scale ) this . base = min ; this . max = max ; this . binsize = ( max - min ) / this . destsize ; this . data = new float [ this . destsize < < NUM00 ] ; size = destsize ; final int end = cachefill ; cachefill = - NUM00 ; for ( $F119 ( i , end ) ) $F66563 ( increment , cachec , i , cachev ) cachec = null ; cachev = null ; }
public boolean buildHostPart ( Appendable buffer , String url , Boolean useSSL ) throws WebAppConfigurationException , IOException $F33971 ( buildHostPart , buffer , url , useSSL , _BOOL )
public static $F4203 $F5675 shiftElementsToEnd ( $F95121 ( source ) , final int count ) { final $F5676 $F719 ( rVal , source ) ; for ( $F161865 ( i , count , source ) ) $F62006 ( rVal , source , i ) for ( $F119 ( i , count ) ) $F62006 ( rVal , source , i ) if $F15256 ( source , rVal ) { throw new IllegalStateException $F80632 ( count , source , rVal ) ; } return rVal ; }
private boolean isLeafPage ( ByteBuffer buffer ) throws IOException { byte pageType = buffer . get ( NUM00 ) ; if ( pageType == PageTypes . INDEX_LEAF ) { return _BOOL ; } else if ( pageType == PageTypes . INDEX_NODE ) { return _BOOL ; } throw new IOException ( withErrorContext ( NUM00 + pageType ) ) ; }
public void addJsLibFiles ( File ... files ) $F50757 ( jsLibFiles , Arrays , files )
public void testWriteOffset $F72 { int len = NUM00 ; int dataLen = NUM00 ; $F12490 ( srcData , getWData , dataLen ) $F2175 ( data , dataLen ) int nOffset = NUM00 ; ByteFifoBuffer instance = new ByteFifoBuffer ( len ) ; int result = instance . writeOffset ( srcData , dataLen , nOffset ) ; int readCount = instance . readOffset ( data , NUM00 , dataLen , nOffset ) ; assertEquals ( result , readCount ) ; assertArrayEquals ( srcData , data ) ; $F171903 ( halfFilled , dataLen ) System . arraycopy ( srcData , NUM00 , halfFilled , dataLen , dataLen ) ; $F171903 ( halfFilledRead , dataLen ) instance . readOffset ( halfFilledRead , dataLen , dataLen , nOffset ) ; assertArrayEquals ( halfFilled , halfFilledRead ) ; instance = new ByteFifoBuffer ( len ) ; instance . write ( srcData , dataLen ) ; instance . write ( srcData , dataLen / NUM00 ) ; instance . read ( data , dataLen ) ; instance . writeOffset ( srcData , dataLen , NUM00 ) ; instance = new ByteFifoBuffer $F989 ; instance . writeOffset ( getWData ( NUM00 ) , NUM00 , NUM00 ) ; }
private void initPropertiesIfNecessary $F72 { if ( timer == null ) { $F170001 ( t , Toolkit ) Integer prop ; prop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; timer = new Timer ( prop == null ? NUM00 : prop . intValue ( ) , this ) ; prop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; timer . setInitialDelay ( prop == null ? NUM00 : prop . intValue ( ) ) ; prop = ( Integer ) t . getDesktopProperty ( NUM00 ) ; if ( prop != null ) $F276383 ( hysteresis , prop ) } }
public EObject loadModel ( String filename , String cwd ) { URI fileURI = normalizeURI ( URI . createURI ( filename ) ) ; URI cwdURI = normalizeURI ( URI . createURI ( cwd ) ) ; return loadModel ( fileURI , cwdURI ) ; }
static boolean pathIsWindows ( String path ) { if $F22 ( path ) { return ( $F22878 ( Character , path ) && $F4431 ( path ) ) || $F418 ( path ) ; } return _BOOL ; }
public static boolean isTestServer $F72 { return System . getProperty ( TestServerOnly . TEST_SERVER_PROPERTY ) != null ; }
$F1431 private $F4203 String generateTestFile ( String filename , $F5675 elems , AvroCoder $F4203 coder , String codec ) throws IOException { File tmpFile = tmpFolder . newFile ( filename ) ; $F1822 ( path , tmpFile ) $F4649 ( os , tmpFile ) DatumWriter $F4203 datumWriter = coder . createDatumWriter ( ) ; try ( DataFileWriter $F4203 writer = new DataFileWriter $F200 ( datumWriter ) ) { writer . setCodec ( CodecFactory . fromString ( codec ) ) ; writer . create ( coder . getSchema ( ) , os ) ; for ( T elem : elems ) $F288 ( writer , elem ) } return path ; }
public void notifyReturned ( NotifyContext notifyContext , ITemplateHolder template ) { $F8249 ( notifyContext ) if ( _filterManager . _isFilter [ FilterOperationCodes . AFTER_NOTIFY_TRIGGER ] ) { $F3300 ( entries ) entries [ NUM00 ] = notifyContext . getEntry ( ) ; entries [ NUM00 ] = template ; try { _filterManager . invokeFilters ( FilterOperationCodes . AFTER_NOTIFY_TRIGGER , null , entries ) ; } catch ( Exception e ) { if $F6456 ( _logger , Level ) $F37847 ( _logger , Level , e ) } } decreaseCounter ( notifyContext ) ; }
public static String normalizeSlashes ( String path ) $F8480 ( path )
protected Point2D correct ( Point2D anchor , Rectangle2D bounds ) { $F6928 ( anchor ) $F313534 ( x , anchor , y ) double x1 = bounds . getMinX ( ) , y1 = bounds . getMinY ( ) ; double x2 = bounds . getMaxX ( ) , y2 = bounds . getMaxY ( ) ; x = ( x < x1 ? x1 : ( x > x2 ? x2 : x ) ) ; y = ( y < y1 ? y1 : ( y > y2 ? y2 : y ) ) ; m_tmp . setLocation ( x , y ) ; return m_tmp ; }
private String saveParameters ( Set userSession , String userID , boolean isSOAPInitiated , boolean isIDPInitiated , String protocol , String realm , String idpEntityID , String spEntityID , String relayState , String singleLogoutRequestXML , String singleLogoutResponseXML , int currentStatus ) { String tmpRelayState = SAML2Utils . generateIDWithServerID ( ) ; relayStateMap . put ( tmpRelayState , relayState ) ; if $F6299 ( debug ) { debug . message ( $F263731 ( userID , userSession , relayState ) + tmpRelayState + NUM00 + isSOAPInitiated + NUM00 + isIDPInitiated + NUM00 + protocol + NUM00 + realm + NUM00 + idpEntityID + NUM00 + spEntityID + NUM00 + currentStatus + NUM00 + singleLogoutRequestXML + NUM00 + singleLogoutResponseXML ) ; } $F114625 ( userSession , userSessionMap , tmpRelayState ) $F114625 ( userID , userIDMap , tmpRelayState ) if ( isSOAPInitiated ) { isSOAPInitiatedMap . put ( tmpRelayState , Boolean . TRUE ) ; } else { isSOAPInitiatedMap . put ( tmpRelayState , Boolean . FALSE ) ; } if ( isIDPInitiated ) { isIDPInitiatedMap . put ( tmpRelayState , Boolean . TRUE ) ; } else { isIDPInitiatedMap . put ( tmpRelayState , Boolean . FALSE ) ; } if ( protocol != null ) { origProtocolMap . put ( tmpRelayState , protocol ) ; $F2199 ( listSize , protocolList ) List list = new ArrayList ( listSize - NUM00 ) ; for ( $F119 ( i , listSize ) ) { $F123 ( proto , protocolList , i ) if $F2137 ( proto , protocol ) $F207 ( list , proto ) } protocolListMap . put ( tmpRelayState , list ) ; } $F114625 ( realm , realmMap , tmpRelayState ) $F114625 ( idpEntityID , idpEntityIDMap , tmpRelayState ) $F114625 ( spEntityID , spEntityIDMap , tmpRelayState ) $F114625 ( singleLogoutRequestXML , sloRequestXMLMap , tmpRelayState ) $F114625 ( singleLogoutResponseXML , sloResponseXMLMap , tmpRelayState ) $F117910 ( currentStatusMap , tmpRelayState , currentStatus ) return tmpRelayState ; }
private void nextPacket $F72 throws IOException { int off = NUM00 ; int remaining = NUM00 ; do { $F24020 ( count , baseStream , header , off , remaining ) if ( count <= NUM00 ) { throw new EOFException ( NUM00 + ( NUM00 - remaining ) + NUM00 + NUM00 ) ; } remaining -= count ; off += count ; } while ( remaining > NUM00 ) ; int compressedLength = $F18896 ( header ) + $F257715 ( header ) + $F257715 ( header ) ; lastPacketSeq = header [ NUM00 ] & NUM00 ; int decompressedLength = $F18896 ( header ) + $F257715 ( header ) + $F257715 ( header ) ; if ( decompressedLength != NUM00 ) { doDecompress = _BOOL ; remainingBytes += decompressedLength ; $F2175 ( compressedBuffer , compressedLength ) $F2175 ( decompressedBuffer , decompressedLength ) off = NUM00 ; remaining = compressedBuffer . length ; do { $F24020 ( count , baseStream , compressedBuffer , off , remaining ) if ( count <= NUM00 ) { throw new EOFException ( NUM00 + ( NUM00 - remaining ) + NUM00 + NUM00 ) ; } remaining -= count ; off += count ; } while ( remaining > NUM00 ) ; Inflater inflater = new Inflater $F72 ; inflater . setInput ( compressedBuffer ) ; try { int actualUncompressBytes = inflater . inflate ( decompressedBuffer ) ; if ( actualUncompressBytes != decompressedLength ) { $F132377 ( actualUncompressBytes , decompressedLength ) } } catch ( DataFormatException dfe ) $F5615 ( dfe ) $F87417 ( inflater ) $F14570 ( decompressedByteStream , decompressedBuffer ) } else { doDecompress = _BOOL ; remainingBytes += compressedLength ; decompressedByteStream = null ; } logger . trace ( NUM00 + lastPacketSeq + NUM00 + remainingBytes ) ; }
protected boolean loadField ( DDFRecord record , String tagName , int fieldIndex ) { if $F4257 ( fields , tagName ) { DDFField ddf = record . findField ( tagName , fieldIndex ) ; if ( ddf != null ) { fields . put ( tagName , ddf ) ; ddf . toString ( ) ; return _BOOL ; } } return _BOOL ; }
public HttpRequest ( final CharSequence url , final String method ) throws HttpRequestException { try { this . url = new URL $F3362 ( url ) ; } catch ( MalformedURLException e ) { throw new HttpRequestException ( e ) ; } this . requestMethod = method ; }
private boolean isError ( IProblem problem , Type type ) { return _BOOL ; }
private static void addProcessParameters ( int AD_PInstance_ID , $F2100 ( params ) , String trxName ) { final String sql = NUM00 + NUM00 + X_AD_PInstance_Para . COLUMNNAME_ParameterName + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_String + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_String_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Number + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Number_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Date + NUM00 + X_AD_PInstance_Para . COLUMNNAME_P_Date_To + NUM00 + X_AD_PInstance_Para . COLUMNNAME_Info + NUM00 + X_AD_PInstance_Para . COLUMNNAME_Info_To + NUM00 + X_AD_PInstance_Para . Table_Name + NUM00 + X_AD_PInstance_Para . COLUMNNAME_AD_PInstance_ID + NUM00 ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { pstmt = DB . prepareStatement ( sql , ResultSet . TYPE_FORWARD_ONLY , ResultSet . CONCUR_READ_ONLY , trxName ) ; $F47 ( pstmt , AD_PInstance_ID ) $F47578 ( rs , pstmt ) while $F1682 ( rs ) { $F27130 ( name , rs ) $F27130 ( pStr , rs ) $F27130 ( pStrTo , rs ) $F307245 ( pNum , rs ) $F307245 ( pNumTo , rs ) Timestamp pDate = rs . getTimestamp ( NUM00 ) ; Timestamp pDateTo = rs . getTimestamp ( NUM00 ) ; if ( pStr != null ) { if ( pStrTo != null ) { params . put ( name + NUM00 , pStr ) ; params . put ( name + NUM00 , pStrTo ) ; } else $F1717 ( params , name , pStr ) } else if ( pDate != null ) { if ( pDateTo != null ) { params . put ( name + NUM00 , pDate ) ; params . put ( name + NUM00 , pDateTo ) ; } else $F1717 ( params , name , pDate ) } else if ( pNum != null ) { if ( pNumTo != null ) { params . put ( name + NUM00 , pNum ) ; params . put ( name + NUM00 , pNumTo ) ; } else $F1717 ( params , name , pNum ) } $F27130 ( info , rs ) $F27130 ( infoTo , rs ) params . put ( name + NUM00 , $F134738 ( info ) ) ; params . put ( name + NUM00 , $F134738 ( infoTo ) ) ; } } $F112772 ( e , sql ) $F47585 ( DB , rs , pstmt ) }
$F45923 public RecordSetPage ( Input input ) { Deserializer deserizalizer = new Deserializer $F72 ; Map mapResult = deserizalizer . deserialize ( input , $F64671 ) ; cursor = ( Integer ) mapResult . get ( NUM00 ) ; data = ( List < $F6689 > ) mapResult . get ( NUM00 ) ; }
public $F65632 endpoint $F72 { $F65633 ( Optional , endpointArg ) }
public void testCollisions $F72 throws Exception { Map < Integer , Set $F252767 > $F8690 ( map ) ; $F252768 $F22304 ( nodes ) ; while $F6214 ( nodes ) { $F116795 ( uuid , UUID ) $F115 ( hashCode , uuid ) Set $F252767 set = map . get ( hashCode ) ; if ( set == null ) map . put ( hashCode , $F22304 ( set ) ) ; set . add ( uuid ) ; if $F3817 ( set ) nodes . addAll ( set ) ; } $F725 ( map ) GridClientConsistentHash $F252767 hash = new GridClientConsistentHash $F200 $F72 ; hash . addNodes ( nodes , REPLICAS ) ; boolean fail = _BOOL ; for ( UUID exp : nodes ) { UUID act = hash . node ( NUM00 , Arrays . asList ( exp ) ) ; if $F1238 ( exp , act ) $F25590 ( info , exp , act ) else { $F25590 ( info , exp , act ) fail = _BOOL ; } } if ( fail ) fail ( NUM00 + nodes ) ; }
void sendMessageToHandlerWithControllerReset $F18149 ( messages ) throws Exception { sendMessageToHandlerNoControllerReset ( messages ) ; }
public boolean isRedeployMode $F72 { return scenario . equals ( PropertyConstants . REDEPLOY_MODE ) ? _BOOL : _BOOL ; }
public static RSAPrivateKey loadFromKeyStore ( URL keystoreUrl , String password ) throws IOException , NoSuchAlgorithmException , CertificateException , KeyStoreException , UnrecoverableKeyException { $F7028 ( logger , keystoreUrl ) $F5858 ( connection , keystoreUrl ) $F517 ( is , connection ) try { if $F585 ( logger ) logger . debug ( NUM00 , Arrays . toString ( Security . getProviders ( ) ) ) ; KeyStore keyStore ; try { try { keyStore = KeyStore . getInstance ( NUM00 , NUM00 ) ; } catch ( NoSuchProviderException e ) { keyStore = KeyStore . getInstance ( NUM00 , CryptoUtil . getSecurityProviderName ( KeyStore . class ) ) ; } } catch ( NoSuchProviderException e ) $F14527 ( keyStore , KeyStore ) logger . debug ( NUM00 , keyStore . getProvider ( ) ) ; keyStore . load ( is , password == null ? null : password . toCharArray ( ) ) ; $F14937 aliases = keyStore . aliases ( ) ; Key key = null ; while $F1444 ( aliases ) { $F14952 ( a , aliases ) key = keyStore . getKey ( a , password == null ? null : password . toCharArray ( ) ) ; } return ( RSAPrivateKey ) key ; } $F3229 ( is ) }
$F1 public double confSmallM ( double totalExampleWeight , double delta ) { double term = Math . log ( NUM00 / delta ) / ( NUM00 * totalExampleWeight ) ; return Math . sqrt ( term ) + Math . pow ( term , NUM00 ) + Math . pow ( term , NUM00 ) ; }
public static $F4203 boolean contains ( $F13085 iterator , T element ) { if ( iterator != null ) { while $F2921 ( iterator ) { $F11644 ( candidate , iterator ) if ( ObjectUtils . nullSafeEquals ( candidate , element ) ) return _BOOL ; } } return _BOOL ; }
public void testConstructor6 $F72 { $F86231 ( ints , SIZE ) for ( $F1316 ( i , SIZE ) ) ints [ i ] = new Integer ( i ) ; LinkedBlockingQueue q = new LinkedBlockingQueue $F6 ( Arrays , ints ) ; for ( $F1316 ( i , SIZE ) ) assertEquals ( ints [ i ] , q . poll ( ) ) ; }
$F1 public void drawDomainGridline ( Graphics2D g2 , CategoryPlot plot , Rectangle2D dataArea , double value ) { Line2D line = null ; $F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) $F75728 ( line , dataArea , value ) else if ( orientation == PlotOrientation . VERTICAL ) $F75721 ( line , value , dataArea ) Paint paint = plot . getDomainGridlinePaint ( ) ; if ( paint == null ) { paint = CategoryPlot . DEFAULT_GRIDLINE_PAINT ; } g2 . setPaint ( paint ) ; Stroke stroke = plot . getDomainGridlineStroke ( ) ; if ( stroke == null ) { stroke = CategoryPlot . DEFAULT_GRIDLINE_STROKE ; } g2 . setStroke ( stroke ) ; g2 . draw ( line ) ; }
public void addPreBuiltClassifier ( Classifier c ) $F207 ( m_preBuiltClassifiers , c )
$F1 public InsnList generate $F72 { return merge ( generatedInstructions . toArray ( ) ) ; }
public static void putJavaVariablesIntoEngine ( final ScriptEngine engine , $F87266 ( variables ) ) { final Bindings bindings = new SimpleBindings $F72 ; for ( $F3465 ( key , variables ) ) $F103853 ( bindings , key , variables ) engine . setBindings ( bindings , ScriptContext . ENGINE_SCOPE ) ; }
private Point2D calculateLabelPoint ( Line2D line , RectangleAnchor anchor , double deltaX , double deltaY ) { double x , y ; boolean left = ( anchor == RectangleAnchor . BOTTOM_LEFT || anchor == RectangleAnchor . LEFT || anchor == RectangleAnchor . TOP_LEFT ) ; boolean right = ( anchor == RectangleAnchor . BOTTOM_RIGHT || anchor == RectangleAnchor . RIGHT || anchor == RectangleAnchor . TOP_RIGHT ) ; boolean top = ( anchor == RectangleAnchor . TOP_LEFT || anchor == RectangleAnchor . TOP || anchor == RectangleAnchor . TOP_RIGHT ) ; boolean bottom = ( anchor == RectangleAnchor . BOTTOM_LEFT || anchor == RectangleAnchor . BOTTOM || anchor == RectangleAnchor . BOTTOM_RIGHT ) ; $F5112 ( rect , line ) if ( line . getX1 ( ) == line . getX2 ( ) ) { x = line . getX1 ( ) ; y = ( line . getY1 ( ) + line . getY2 ( ) ) / NUM00 ; if ( left ) { x = x - deltaX ; } if ( right ) { x = x + deltaX ; } if ( top ) { y = Math . min ( line . getY1 ( ) , line . getY2 ( ) ) + deltaY ; } if ( bottom ) { y = Math . max ( line . getY1 ( ) , line . getY2 ( ) ) - deltaY ; } } else { x = ( line . getX1 ( ) + line . getX2 ( ) ) / NUM00 ; y = line . getY1 ( ) ; if ( left ) { x = Math . min ( line . getX1 ( ) , line . getX2 ( ) ) + deltaX ; } if ( right ) { x = Math . max ( line . getX1 ( ) , line . getX2 ( ) ) - deltaX ; } if ( top ) { y = y - deltaY ; } if ( bottom ) { y = y + deltaY ; } } return $F152053 ( x , y ) ; }
public void fling $F118169 ( startX , startY , velocityX , velocityY , minX , maxX , minY , maxY ) { if ( mFlywheel && ! mFinished ) { float oldVel = getCurrVelocity ( ) ; $F118172 ( dx , mFinalX , mStartX ) $F118172 ( dy , mFinalY , mStartY ) $F150219 ( hyp , Math , dx , dy ) float ndx = dx / hyp ; float ndy = dy / hyp ; float oldVelocityX = ndx * oldVel ; float oldVelocityY = ndy * oldVel ; $F118179 ( Math , velocityX , oldVelocityX , velocityY , oldVelocityY ) } mMode = FLING_MODE ; mFinished = _BOOL ; $F150219 ( velocity , Math , velocityX , velocityY ) mVelocity = velocity ; mDuration = getSplineFlingDuration ( velocity ) ; $F118190 ( mStartTime , AnimationUtils ) mStartX = startX ; mStartY = startY ; $F118191 ( coeffX , velocity , velocityX ) $F118191 ( coeffY , velocity , velocityY ) double totalDistance = getSplineFlingDistance ( velocity ) ; mDistance = ( int ) ( totalDistance * Math . signum ( velocity ) ) ; mMinX = minX ; mMaxX = maxX ; mMinY = minY ; mMaxY = maxY ; $F150228 ( mFinalX , startX , Math , totalDistance , coeffX ) $F16700 ( mFinalX , Math , mMaxX ) $F19410 ( mFinalX , Math , mMinX ) $F150228 ( mFinalY , startY , Math , totalDistance , coeffY ) $F16700 ( mFinalY , Math , mMaxY ) $F19410 ( mFinalY , Math , mMinY ) }
public void deleteWithMissing ( Attribute att ) { deleteWithMissing ( att . index ( ) ) ; }
protected void sprint ( String a ) { if ( a == null ) { stringRepresentation += getIndentation ( ) ; stringRepresentation += NUM00 ; $F665 } if ( $F87841 ( a ) || $F87841 ( a ) ) { indentation -- ; } stringRepresentation += getIndentation ( ) ; stringRepresentation += a ; stringRepresentation += NUM00 ; if ( $F87841 ( a ) || $F87841 ( a ) ) { indentation ++ ; } }
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) $F18045 ( semIms ) }
private static Pair $F76740 load ( ByteArray a , InputStream stream , long memoryOffset , long count , CommonIndex positions , CRC32 checksum , ByteArray checksums , PrereadHashFunction hf , boolean checksumsLoaded , long currentSeq ) throws IOException { long tmpCurrentSeq = currentSeq ; final $F96 buffer = new byte [ NUM00 * NUM00 ] ; long totalRead = NUM00 ; int bytesRead ; long pos = memoryOffset ; while ( totalRead < count && ( bytesRead = stream . read ( buffer , NUM00 , ( int ) Math . min ( count - totalRead , buffer . length ) ) ) != - NUM00 ) { a . set ( pos , buffer , bytesRead ) ; pos += bytesRead ; int j = NUM00 ; while ( j < bytesRead ) { if ( positions . get ( tmpCurrentSeq + NUM00 ) == positions . get ( tmpCurrentSeq ) ) { hf . irvineHash ( NUM00 ) ; tmpCurrentSeq ++ ; $F598 } final int len = ( int ) ( positions . get ( tmpCurrentSeq + NUM00 ) - ( memoryOffset + totalRead + j ) ) ; if ( j + len <= bytesRead ) { checksum . update ( buffer , j , len ) ; hf . irvineHash ( buffer , j , len ) ; hf . irvineHash ( positions . get ( tmpCurrentSeq + NUM00 ) - positions . get ( tmpCurrentSeq ) ) ; if ( checksumsLoaded ) { if ( ( byte ) checksum . getValue ( ) != checksums . get ( tmpCurrentSeq ) ) { throw new CorruptSdfException ( NUM00 + tmpCurrentSeq + NUM00 ) ; } } else { checksums . set ( tmpCurrentSeq , ( byte ) checksum . getValue ( ) ) ; } tmpCurrentSeq ++ ; $F2268 ( checksum ) } else { hf . irvineHash ( buffer , j , bytesRead - j ) ; checksum . update ( buffer , j , bytesRead - j ) ; } j += len ; } totalRead += bytesRead ; } $F83164 ( totalRead , tmpCurrentSeq ) }
public static $F212479 toSqlDate $F1947 ( monthStr , dayStr , yearStr ) { $F22273 newDate = toDate ( monthStr , dayStr , yearStr , NUM00 , NUM00 , NUM00 ) ; if ( newDate != null ) { return new $F212479 $F16810 ( newDate ) ; } else $F1337 }
$F43277 ( listener , mListeners )
protected void savePNGImage ( String filename , BufferedImage image ) throws IOException { $F1705 ( file , filename ) $F107416 ( ImageIO , image , file ) }
public void unsetPermission ( String name ) { permissions . remove ( name . toLowerCase ( java . util . Locale . ENGLISH ) ) ; permissible . recalculatePermissions ( ) ; }
public void beforeInsert ( int index , byte element ) { $F8871 ( index , size ) ensureCapacity ( size + NUM00 ) ; $F27096 ( System , elements , index , size ) elements [ index ] = element ; size ++ ; }
public OMGraphicList readCachedGraphics ( URL url ) throws $F3258 { $F254545 ( Debug ) $F138819 ( omgraphics ) if ( url != null ) { omgraphics . readGraphics ( url ) ; } return omgraphics ; }
$F1653 ( noxItems )
public $F2193 Future $F2193 invoke ( String method , String path , $F6253 ( arguments ) , ResultHandler $F2193 resultHandler ) { $F99586 ( method ) $F99586 ( path ) $F99586 ( arguments ) return executorService . submit ( new InvocationCallback $F200 ( method , path , arguments , resultHandler ) ) ; }
$F1 public String replacePath ( String inputURI ) { if ( inputURI . contains ( TemporaryDirectoryManager . DIRECTORY_TEMPLATE ) ) { return inputURI . replace ( TemporaryDirectoryManager . DIRECTORY_TEMPLATE , TEMPLATE_DIRECTORY_NAME ) ; } return inputURI ; }
$F1 public void create $F72 { assertWritable ( ) ; final String name = getNamespace ( ) + NUM00 + NAME_SEARCH ; final IIndexManager indexManager = getIndexManager ( ) ; $F17606 ( p , getProperties ) final IndexMetadata indexMetadata = new IndexMetadata ( indexManager , p , name , UUID . randomUUID ( ) , IndexTypeEnum . BTree ) ; final IKeyBuilderFactory keyBuilderFactory ; { final Properties tmp = new Properties ( p ) ; tmp . setProperty ( KeyBuilder . Options . STRENGTH , p . getProperty ( Options . INDEXER_COLLATOR_STRENGTH , Options . DEFAULT_INDEXER_COLLATOR_STRENGTH ) ) ; keyBuilderFactory = new DefaultKeyBuilderFactory ( tmp ) ; } final boolean fieldsEnabled = Boolean . parseBoolean ( p . getProperty ( Options . FIELDS_ENABLED , Options . DEFAULT_FIELDS_ENABLED ) ) ; if $F17747 ( log ) log . info ( Options . FIELDS_ENABLED + NUM00 + fieldsEnabled ) ; indexMetadata . setTupleSerializer ( new FullTextIndexTupleSerializer $F2193 ( keyBuilderFactory , DefaultTupleSerializer . getDefaultLeafKeysCoder ( ) , EmptyRabaValueCoder . INSTANCE , fieldsEnabled ) ) ; indexManager . registerIndex ( indexMetadata ) ; $F38209 ( log , name ) }
public static PGPPublicKey mergeSignatures ( PGPPublicKey targetKey , PGPPublicKey sourceKey ) throws PGPException { if ( ! Objects . deepEquals ( targetKey . getFingerprint ( ) , sourceKey . getFingerprint ( ) ) ) $F825 return copySignatures ( targetKey , sourceKey ) ; }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
public void drawBackground ( Graphics g ) { g . fillRect ( $F73489 ( getWidth , getHeight ) ) ; }
public static double info ( int counts [ ] ) { int total = NUM00 ; double x = NUM00 ; for ( $F1139 ( j , counts ) ) { x -= xlogx ( counts [ j ] ) ; total += counts [ j ] ; } return x + xlogx ( total ) ; }
public ComputeJobFailoverException ( Throwable cause ) $F51022 ( this , cause )
public boolean hasNewerVersion $F72 { return latestStable . compareTo ( currentVersion ) > NUM00 ; }
$F1 public String format ( DateTimeFormatter formatter ) { $F10578 ( Objects , formatter ) $F5330 ( formatter , this ) }
$F1 public void readNBT ( NBTTagCompound compound ) { super . readNBT ( compound ) ; if ( compound . hasKey ( NUM00 ) ) { this . exhaustionTimer = compound . getInteger ( NUM00 ) ; } if ( ! compound . hasKey ( NUM00 ) ) { setFoodLevel ( getFoodLevel ( ) * NUM00 ) ; setSaturation ( NUM00 ) ; } if $F44803 ( getFoodLevel ) setFoodLevel ( NUM00 ) ; if $F44803 ( getSaturationLevel ) setSaturation ( NUM00 ) ; }
private static boolean verifyXML ( String fileName ) { $F2237 ( sf , SchemaFactory , W3C_XML_SCHEMA ) Source xsdFile = new StreamSource $F15780 ( XSD_FILE_PATH ) ; Source xmlFile = new StreamSource $F15780 ( fileName ) ; boolean validXML = _BOOL ; try { Schema schema = sf . newSchema ( xsdFile ) ; Validator validator = schema . newValidator ( ) ; try { validator . validate ( xmlFile ) ; validXML = _BOOL ; } $F12241 ( e ) if ( ! validXML ) { new IOException $F580 ; } } catch ( SAXException e ) $F302 ( e ) return validXML ; }
$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math )
private static void dualPivotQuicksort $F24576 ( a , left , right ) { int sixth = ( right - left + NUM00 ) / NUM00 ; int e1 = left + sixth ; int e5 = right - sixth ; $F41176 ( e3 , left , right ) int e4 = e3 + sixth ; int e2 = e3 - sixth ; byte ae1 = a [ e1 ] , ae2 = a [ e2 ] , ae3 = a [ e3 ] , ae4 = a [ e4 ] , ae5 = a [ e5 ] ; if ( ae1 > ae2 ) { byte t = ae1 ; ae1 = ae2 ; ae2 = t ; } if ( ae4 > ae5 ) { byte t = ae4 ; ae4 = ae5 ; ae5 = t ; } if ( ae1 > ae3 ) { byte t = ae1 ; ae1 = ae3 ; ae3 = t ; } if ( ae2 > ae3 ) { byte t = ae2 ; ae2 = ae3 ; ae3 = t ; } if ( ae1 > ae4 ) { byte t = ae1 ; ae1 = ae4 ; ae4 = t ; } if ( ae3 > ae4 ) { byte t = ae3 ; ae3 = ae4 ; ae4 = t ; } if ( ae2 > ae5 ) { byte t = ae2 ; ae2 = ae5 ; ae5 = t ; } if ( ae2 > ae3 ) { byte t = ae2 ; ae2 = ae3 ; ae3 = t ; } if ( ae4 > ae5 ) { byte t = ae4 ; ae4 = ae5 ; ae5 = t ; } a [ e1 ] = ae1 ; a [ e3 ] = ae3 ; a [ e5 ] = ae5 ; byte pivot1 = ae2 ; a [ e2 ] = a [ left ] ; byte pivot2 = ae4 ; a [ e4 ] = a [ right ] ; int less = left + NUM00 ; int great = right - NUM00 ; boolean pivotsDiffer = ( pivot1 != pivot2 ) ; if ( pivotsDiffer ) { outer : for ( int k = less ; k <= great ; k ++ ) { byte ak = a [ k ] ; if ( ak < pivot1 ) $F346265 ( k , less , a , ak ) else if ( ak > pivot2 ) { while ( a [ great ] > pivot2 ) $F346268 ( great , k ) if ( a [ great ] < pivot1 ) $F346270 ( a , k , less , great , ak ) else { a [ k ] = a [ great ] ; a [ great -- ] = ak ; } } } } else { for ( int k = less ; k <= great ; k ++ ) { byte ak = a [ k ] ; $F83608 ( ak , pivot1 ) if ( ak < pivot1 ) $F346265 ( k , less , a , ak ) else { while ( a [ great ] > pivot1 ) { great -- ; } if ( a [ great ] < pivot1 ) $F346270 ( a , k , less , great , ak ) else { a [ k ] = pivot1 ; a [ great -- ] = ak ; } } } } $F346289 ( a , left , less ) a [ less - NUM00 ] = pivot1 ; a [ right ] = a [ great + NUM00 ] ; a [ great + NUM00 ] = pivot2 ; doSort ( a , left , less - NUM00 ) ; doSort ( a , great + NUM00 , right ) ; $F24126 ( pivotsDiffer ) if ( less < e1 && great > e5 ) { while ( a [ less ] == pivot1 ) { less ++ ; } while ( a [ great ] == pivot2 ) { great -- ; } outer : for ( int k = less ; k <= great ; k ++ ) { byte ak = a [ k ] ; if ( ak == pivot2 ) { while ( a [ great ] == pivot2 ) $F346268 ( great , k ) if ( a [ great ] == pivot1 ) $F346294 ( a , k , less , pivot1 ) else $F346295 ( a , k , great ) a [ great -- ] = pivot2 ; } else if ( ak == pivot1 ) $F346294 ( a , k , less , pivot1 ) } } doSort ( a , less , great ) ; }
$F5466 public N node ( $F5466 Object key , $F5466 Collection $F36647 inc ) $F25228 ( node , key , inc )
public void increment $F72 $F26160 ( counter )
public DefaultDeploymentCache $F72 { this . cache = Collections . synchronizedMap ( new HashMap $F94549 $F72 ) ; }
private int findInsertionPoint ( SortedListEntry entry ) { $F2199 ( insertionPoint , sortedModel ) if ( sortOrder != SortOrder . UNORDERED ) { insertionPoint = Collections . binarySearch ( ( List ) sortedModel , entry ) ; if ( insertionPoint < NUM00 ) { insertionPoint = - ( insertionPoint + NUM00 ) ; } } return insertionPoint ; }
private boolean haveShownMessageBefore ( UpdateMessage msg ) { if ( ! msg . isShownOnce ( ) ) return _BOOL ; loadSeenMessages ( ) ; if ( _seenMessages == null || $F10470 ( _seenMessages ) || ! _seenMessages . contains ( msg ) ) { if ( _seenMessages == null ) $F9627 ( _seenMessages ) _seenMessages . add ( msg ) ; saveSeenMessages ( ) ; return _BOOL ; } return _BOOL ; }
public void dataSourceAdded ( int index ) $F9099 ( update , updateCoordinateProjectionComboBoxes )
public boolean fieldIsStatic $F72 { return $F48022 ( Modifier , field ) ; }
void newEquation ( DF_LatticeCell lhs , DF_Operator operator , DF_LatticeCell op1 , DF_LatticeCell op2 , DF_LatticeCell op3 ) { DF_Equation eq = new DF_Equation ( lhs , operator , op1 , op2 , op3 ) ; equations . addGraphNode ( eq ) ; equations . addGraphNode ( lhs ) ; equations . addGraphNode ( op1 ) ; equations . addGraphNode ( op2 ) ; equations . addGraphNode ( op3 ) ; newEquations . add ( eq ) ; op1 . addUse ( eq ) ; op2 . addUse ( eq ) ; op3 . addUse ( eq ) ; lhs . addDef ( eq ) ; if ( EAGER && eq . evaluate ( ) ) changedCell ( lhs ) ; }
$F1 public void stop $F72 { if $F48405 ( stopping , _BOOL ) { $F130378 ( log , cacheName ) wakeUp ( ) ; boolean graceful = _BOOL ; for ( GridWorker worker : flushThreads ) graceful &= U . join ( worker , log ) ; if ( ! graceful ) $F18143 ( log ) } }
private $F101261 andStoragePortSets ( $F101261 a , $F101261 b ) { $F101261 result = new HashSet $F42520 $F72 ; for ( StoragePort port : a ) $F45100 ( b , port , result ) return result ; }
public static void addAttributeToSchema ( String serviceName , String subSchemaName , String schemaType , Node attributeSchemaNode , SSOToken adminToken ) throws UpgradeException { ServiceSchema ss = getServiceSchema ( serviceName , subSchemaName , schemaType , adminToken ) ; addAttributeToSchema ( ss , attributeSchemaNode ) ; }
public int next ( int current ) { for ( int i = current + NUM00 ; i < ( arguments != null ? arguments . size ( ) : NUM00 ) ; i ++ ) { if ( getArgument ( i ) instanceof MathContainer ) { return i ; } } throw new ArrayIndexOutOfBoundsException $F580 ; }
$F1 public boolean supportsAuthentication $F72 { $F144577 ( DEBUG ) return _BOOL ; }
protected void reorderAppDeploymentsAfterConfigurationVersion ( Element domain ) { $F15369 appDeployments = xmlTool . selectElementsMatchingXPath ( NUM00 , domain ) ; for ( Element appDeployment : appDeployments ) { domain . removeChild ( appDeployment ) ; } Element configurationVersion = xmlTool . selectElementMatchingXPath ( NUM00 , domain ) ; Node before = null ; $F9040 ( children , domain ) for ( $F85554 ( i , children ) ) { if ( configurationVersion . equals ( children . item ( i ) ) && i < children . getLength ( ) - NUM00 ) { before = children . item ( i + NUM00 ) ; } } if ( before != null ) { for ( Element appDeployment : appDeployments ) { domain . insertBefore ( appDeployment , before ) ; } } else { for ( Element appDeployment : appDeployments ) $F205551 ( domain , appDeployment ) } }
public URI $F1947 ( scheme , schemeSpecificPart , fragment ) throws URISyntaxException { $F83 ( uri ) $F43191 ( scheme , uri ) $F189367 ( schemeSpecificPart , ALL_LEGAL_ENCODER , uri ) $F189369 ( fragment , uri , ALL_LEGAL_ENCODER ) $F25731 ( parseURI , uri , _BOOL ) }
static FacetMethod selectFacetMethod ( SchemaField field , FacetMethod method , Integer mincount ) { FieldType type = field . getType ( ) ; if ( method == null ) { if ( type instanceof BoolField && ( field . indexed ( ) == _BOOL || field . hasDocValues ( ) == _BOOL ) ) { method = FacetMethod . ENUM ; } else if ( type . getNumericType ( ) != null && ! field . multiValued ( ) ) { method = FacetMethod . FCS ; } else { method = FacetMethod . FC ; } } if ( method == FacetMethod . FC && type . getNumericType ( ) != null && ! field . multiValued ( ) ) { method = FacetMethod . FCS ; } if ( method == FacetMethod . UIF && ! field . hasDocValues ( ) && mincount == NUM00 ) { method = field . multiValued ( ) ? FacetMethod . FC : FacetMethod . FCS ; } if ( method == FacetMethod . ENUM && TrieField . getMainValuePrefix ( type ) != null ) { method = field . multiValued ( ) ? FacetMethod . FC : FacetMethod . FCS ; } final boolean multiToken = field . multiValued ( ) || type . multiValuedFieldCache ( ) ; if ( method == FacetMethod . FCS && multiToken ) { method = FacetMethod . FC ; } return method ; }
public void onTabsAllClosing ( long time , boolean incognito ) $F845
public List < $F530 > clearOverallChat $F72 { try { List < $F530 > myChatList = myChats . get ( overallChatRoomName ) ; myChatList = new LinkedList < $F530 > $F72 ; myChats . put ( overallChatRoomName , myChatList ) ; $F20666 newMessage = new $F397346 $F72 ; newMessage . put ( NUM00 , NUM00 ) ; scopeApplicationAdapter . sendMessageToMembers ( newMessage ) ; return myChatList ; } catch ( Exception err ) $F236732 ( log , err ) }
public DbSchemaChanger beginChange $F72 throws Exception { backupFile = File . createTempFile ( NUM00 , NUM00 ) ; log . info ( NUM00 , classFile . getAbsolutePath ( ) , backupFile . getAbsolutePath ( ) ) ; copyFile ( classFile , backupFile ) ; cc . defrost ( ) ; return this ; }
void animateChallengeTo ( int y , int velocity ) { $F2329 ( mChallengeView ) cancelTransitionsInProgress ( ) ; mChallengeInteractiveInternal = _BOOL ; mChallengeView . setLayerType ( LAYER_TYPE_HARDWARE , null ) ; final int sy = mChallengeView . getBottom ( ) ; final int dy = y - sy ; if ( dy == NUM00 ) $F10990 ( completeChallengeScroll ) setScrollState ( SCROLL_STATE_SETTLING ) ; $F43590 ( childHeight , mChallengeView ) final int halfHeight = childHeight / NUM00 ; final float distanceRatio = Math . min ( NUM00 , NUM00 * Math . abs ( dy ) / childHeight ) ; final float distance = halfHeight + halfHeight * distanceInfluenceForSnapDuration ( distanceRatio ) ; int duration = NUM00 ; $F15467 ( velocity , Math ) if ( velocity > NUM00 ) { duration = NUM00 * Math . round ( NUM00 * Math . abs ( distance / velocity ) ) ; } else { final float childDelta = ( float ) Math . abs ( dy ) / childHeight ; duration = ( int ) $F106873 ( childDelta ) ; } $F16700 ( duration , Math , MAX_SETTLE_DURATION ) mScroller . startScroll ( NUM00 , sy , NUM00 , dy , duration ) ; postInvalidateOnAnimation ( ) ; }
public JcaX509v3CertificateBuilder ( X500Principal issuer , BigInteger serial , Date notBefore , Date notAfter , X500Principal subject , PublicKey publicKey ) { super ( X500Name . getInstance ( issuer . getEncoded ( ) ) , serial , notBefore , notAfter , X500Name . getInstance ( subject . getEncoded ( ) ) , SubjectPublicKeyInfo . getInstance ( publicKey . getEncoded ( ) ) ) ; }
private void writeGUIDValue ( ByteBuffer buffer , Object value ) throws IOException { Matcher m = GUID_PATTERN . matcher ( toCharSequence ( value ) ) ; if $F1152 ( m ) { throw new IOException ( withErrorContext ( NUM00 + value ) ) ; } ByteBuffer origBuffer = null ; $F5475 ( tmpBuf ) if ( buffer . order ( ) != ByteOrder . BIG_ENDIAN ) { origBuffer = buffer ; $F46945 ( tmpBuf ) buffer = ByteBuffer . wrap ( tmpBuf ) ; } ByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; ByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; ByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; ByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; ByteUtil . writeHexString ( buffer , m . group ( NUM00 ) ) ; if ( tmpBuf != null ) { ByteUtil . swap4Bytes ( tmpBuf , NUM00 ) ; ByteUtil . swap2Bytes ( tmpBuf , NUM00 ) ; ByteUtil . swap2Bytes ( tmpBuf , NUM00 ) ; origBuffer . put ( tmpBuf ) ; } }
public NeuronGroup ( final Network net , final $F372817 neurons ) { super ( net ) ; neuronList = new ArrayList $F257385 $F716 ( neurons ) ; for ( Neuron neuron : neurons ) { addNeuron ( neuron ) ; } neuronList = new CopyOnWriteArrayList $F257385 ( neuronList ) ; updateRule = getNeuronType ( ) ; resetSubsamplingIndices ( ) ; }
@ LogMessageDoc ( $F85045 , $F100217 , explanation = NUM00 , recommendation = LogMessageDoc . REPORT_CONTROLLER_BUG ) public $F116141 applyUpdates $F72 { $F116141 appliedUpdates = new ArrayList < LDUpdate > $F72 ; LDUpdate update = null ; while ( ldUpdates . peek ( ) != null ) { try $F116149 ( update , ldUpdates ) $F9877 ( log , e ) $F57901 ( log , update ) switch ( update . getOperation ( ) ) { case LINK_UPDATED : addOrUpdateLink ( update . getSrc ( ) , update . getSrcPort ( ) , update . getDst ( ) , update . getDstPort ( ) , update . getType ( ) ) ; $F597 case LINK_REMOVED : removeLink ( update . getSrc ( ) , update . getSrcPort ( ) , update . getDst ( ) , update . getDstPort ( ) ) ; $F597 $F116162 ( SWITCH_UPDATED , addOrUpdateSwitch , update ) $F116162 ( SWITCH_REMOVED , removeSwitch , update ) $F116166 ( TUNNEL_PORT_ADDED , addTunnelPort , update ) $F116166 ( TUNNEL_PORT_REMOVED , removeTunnelPort , update ) case PORT_UP : case PORT_DOWN : $F597 } appliedUpdates . add ( update ) ; } return ( Collections . unmodifiableList ( appliedUpdates ) ) ; }
boolean isEmpty $F72 { return mDescription . isEmpty ( ) && mTypes . isEmpty ( ) ; }
public Star ( int points , float rotation , float insideness ) { float x = NUM00 ; float y = NUM00 ; float radius = NUM00 ; points = points < NUM00 ? NUM00 : points ; rotation = rotation + ( float ) ( Math . PI / NUM00 ) ; boolean flat = insideness >= NUM00 ; setControlPointSize ( flat ? points : NUM00 * points ) ; final float pi2 = NUM00 * ( float ) Math . PI ; float insideRadius = radius * insideness ; $F13616 pt ; for ( $F1316 ( p , points ) ) { double vertex = p ; double angle = vertex * pi2 / points + rotation ; pt = new $F13616 ( ( float ) ( x + Math . cos ( angle ) * radius ) , ( float ) ( y + Math . sin ( angle ) * radius ) ) ; pushPoint ( pt ) ; if ( ! flat ) { double angle2 = ( vertex + NUM00 ) * pi2 / points + rotation ; pt = new $F13616 ( ( float ) ( x + Math . cos ( angle2 ) * insideRadius ) , ( float ) ( y + Math . sin ( angle2 ) * insideRadius ) ) ; pushPoint ( pt ) ; } } }
private static boolean isStatic ( Method m ) { $F23165 ( mods , m ) return ( mods & Modifier . STATIC ) != NUM00 ; }
public synchronized boolean tryLock $F72 { try { lock = file . tryLock ( ) ; return lock != null ; } $F7474 ( _BOOL ) }
$F1 public void nodeDown ( Topology topology , long eventUID , String nodeID ) { if $F1238 ( targetServerID , nodeID ) { decideOnAction ( topology ) ; } }
public boolean isValid $F72 { return _BOOL ; }
private void rolloverLogTask $F72 { try $F150060 ( _isInit , flush ) catch ( Exception e ) $F173189 ( log , Level , e ) _isRollingOver = _BOOL ; try { $F18748 ( _isInit ) Path savedPath = null ; $F80733 ( now , CurrentTime ) long lastPeriodEnd = _nextPeriodEnd ; _nextPeriodEnd = nextRolloverTime ( now ) ; Path path = getPath ( ) ; synchronized ( _logLock ) { flushTempStream ( ) ; long length = Files . size ( path ) ; if ( lastPeriodEnd <= now && lastPeriodEnd > NUM00 ) { closeLogStream ( ) ; savedPath = getSavedPath ( lastPeriodEnd - NUM00 ) ; } else if ( path != null && getRolloverSize ( ) <= length ) { closeLogStream ( ) ; savedPath = getSavedPath ( now ) ; } } $F25302 ( savedPath , movePathToArchive ) } $F12241 ( e ) finally { $F21848 ( _logLock , _isRollingOver , _BOOL , flushTempStream ) _rolloverListener . requeue ( _rolloverAlarm ) ; } }
$F1 public void onUpdateScrollbar ( int dy ) { List < AlphabeticalAppsList . AdapterItem > items = mApps . getAdapterItems ( ) ; if ( items . isEmpty ( ) || mNumAppsPerRow == NUM00 ) $F64499 ( mScrollbar ) int rowCount = mApps . getNumAppRows ( ) ; getCurScrollState ( mScrollPosState , - NUM00 ) ; if ( mScrollPosState . rowIndex < NUM00 ) $F64499 ( mScrollbar ) int availableScrollBarHeight = getAvailableScrollBarHeight ( ) ; int availableScrollHeight = getAvailableScrollHeight ( mApps . getNumAppRows ( ) ) ; if ( availableScrollHeight <= NUM00 ) $F64499 ( mScrollbar ) int scrollY = getScrollTop ( mScrollPosState ) ; int scrollBarY = mBackgroundPadding . top + ( int ) ( $F59190 ( scrollY , availableScrollHeight ) * availableScrollBarHeight ) ; if ( mScrollbar . isThumbDetached ( ) ) { int scrollBarX ; if ( Utilities . isRtl ( getResources ( ) ) ) $F9553 ( scrollBarX , mBackgroundPadding ) else { scrollBarX = getWidth ( ) - mBackgroundPadding . right - mScrollbar . getThumbWidth ( ) ; } if ( mScrollbar . isDraggingThumb ( ) ) { mScrollbar . setThumbOffset ( scrollBarX , ( int ) mScrollbar . getLastTouchY ( ) ) ; } else { int thumbScrollY = mScrollbar . getThumbOffset ( ) . y ; int diffScrollY = scrollBarY - thumbScrollY ; if ( diffScrollY * dy > NUM00 ) { if ( dy < NUM00 ) { int offset = ( int ) ( ( dy * thumbScrollY ) / ( float ) scrollBarY ) ; thumbScrollY += Math . max ( offset , diffScrollY ) ; } else { int offset = ( int ) ( ( dy * ( availableScrollBarHeight - thumbScrollY ) ) / $F64550 ( availableScrollBarHeight , scrollBarY ) ) ; thumbScrollY += Math . min ( offset , diffScrollY ) ; } thumbScrollY = Math . max ( NUM00 , Math . min ( availableScrollBarHeight , thumbScrollY ) ) ; mScrollbar . setThumbOffset ( scrollBarX , thumbScrollY ) ; if ( scrollBarY == thumbScrollY ) { mScrollbar . reattachThumbToScroll ( ) ; } } else { mScrollbar . setThumbOffset ( scrollBarX , thumbScrollY ) ; } } } else { synchronizeScrollBarThumbOffsetToViewScroll ( mScrollPosState , rowCount ) ; } }
private void emitListAdd $F6406 ( method , fieldName , builder ) { $F84 ( builder ) $F6407 ( builder , getListAdderName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
public boolean onScrollChanged ( int scrollY ) { boolean isPullingDownNow = scrollY < lastScrollY ; latestPullingDown . offer ( isPullingDownNow ) ; if $F60125 ( latestPullingDown , PULLING_DOWN_TIME_MAX ) { $F56193 ( latestPullingDown ) } lastScrollY = scrollY ; return getPullingDownTime ( ) >= PULLING_DOWN_TIME_THRESHOLD ; }
@ ExceptionHandler ( ConstraintViolationException . class ) @ ResponseStatus ( value = HttpStatus . BAD_REQUEST ) public $F529 handleConstraintViolationException ( ConstraintViolationException ex ) { Collection < FieldError > errors = FieldError . getErrors ( ex . getConstraintViolations ( ) ) ; log . warn ( $F368 ( errors ) ) ; return LemonUtil . mapOf ( NUM00 , NUM00 , NUM00 , errors ) ; }
$F1 public void readExternal ( ObjectInput in ) throws IOException { b = new double [ in . readInt ( ) ] ; for ( $F1139 ( p , b ) ) { b [ p ] = in . readDouble ( ) ; } }
private synchronized void addTracker ( String path , Object marker , FileDeleteStrategy deleteStrategy ) { $F4640 ( exitWhenFinished ) if ( reaper == null ) { reaper = new Reaper $F72 ; $F2346 ( reaper ) } trackers . add ( new Tracker ( path , deleteStrategy , marker , q ) ) ; }
List < Issue > errors $F72 { return errors ; }
public AudioWife addOnCompletionListener ( OnCompletionListener listener ) { $F6965 ( mCompletionListeners , listener ) return this ; }
public void addVolumeToConsistencyGroup ( String instanceId , String cgID ) throws StorageCenterAPIException { RestResult rr = restClient . get ( String . format ( NUM00 , instanceId ) ) ; if ( ! checkResults ( rr ) ) { throw new StorageCenterAPIException ( String . format ( NUM00 , rr . getErrorMsg ( ) ) ) ; } ScVolumeConfiguration volConfig = gson . fromJson ( rr . getResult ( ) , ScVolumeConfiguration . class ) ; $F24645 ( profiles ) for ( ScObject profile : volConfig . replayProfileList ) { if ( ! cgID . equals ( profile . instanceId ) ) { profiles . add ( profile . instanceId ) ; } } profiles . add ( cgID ) ; Parameters $F108428 ( params ) ; params . add ( NUM00 , $F16104 ( profiles ) ) ; rr = restClient . put ( String . format ( NUM00 , instanceId ) , params . toJson ( ) ) ; if ( ! checkResults ( rr ) ) { throw new StorageCenterAPIException ( String . format ( NUM00 , rr . getErrorMsg ( ) ) ) ; } }
public static boolean isImplementsInterface ( Class clazz , Class interfaceClass ) { if ( ! $F97786 ( interfaceClass ) ) $F825 boolean resultThisClass = recursiveIsImplementsInterface ( clazz , interfaceClass ) ; $F9303 ( resultThisClass , _BOOL ) return recursiveSuperclassImplementsInterface ( clazz , interfaceClass ) ; }
private static String replaceChars ( String str ) { $F1350 ( buf , str ) $F115 ( length , buf ) for ( $F119 ( i , length ) ) { $F1280 ( currentChar , buf , i ) if ( currentChar == NUM00 ) { $F1351 ( buf , i ) buf . insert ( i + NUM00 , NUM00 ) ; length = length + NUM00 ; i = i + NUM00 ; } else if ( currentChar == NUM00 ) $F1355 ( buf , i ) } $F92 ( buf ) }
private void addBinding ( final String key , final Object value ) $F1717 ( m_bindings , key , value )
public static < T extends Enum $F4203 > T forKey ( String key , Map $F94549 mapping , $F20474 enumeration ) { $F6391 ( t , mapping , key ) $F21525 ( t ) throw new IllegalArgumentException ( $F370 ( enumeration , key ) ) ; }
private ExchangeRate directLookup ( final Currency source , final Currency target , final Date date ) { if ( System . getProperty ( NUM00 ) == null ) $F5788 ExchangeRate rate = null ; QL . require ( ( ( rate = fetch ( source , target , date ) ) != null ) , NUM00 ) ; return rate ; }
protected static int findNextNewLineChar ( CharSequence s , int start ) { for ( $F68483 ( i , start , s ) ) { if $F11983 ( s , i ) { return i ; } } $F150 }
public SkypeBuilder withChat ( String id ) { if $F14943 ( id ) $F824 if ( password != null ) $F824 this . chatId = id ; return this ; }
public static int compareTo ( Object left , Object right ) $F19580 ( compareToWithEqualityCheck , left , right , _BOOL )
public static X509CRLImpl toImpl ( X509CRL crl ) throws CRLException { if ( crl instanceof X509CRLImpl ) { return ( X509CRLImpl ) crl ; } else { return X509Factory . intern ( crl ) ; } }
public final void test_ROUNDTRIP_GetKeySpecKeyProvider02 $F72 { boolean performed = _BOOL ; for ( $F1139 ( i , algName ) ) { for ( $F1139 ( l , provider ) ) { if ( provider [ l ] == null ) $F1448 TestDataGenerator g ; try { g = new TestDataGenerator ( algName [ i ] [ NUM00 ] , algName [ i ] [ NUM00 ] , privateKeyInfoDamaged , provider [ l ] ) ; } catch ( TestDataGenerator . AllowedFailure allowedFailure ) $F1448 try { EncryptedPrivateKeyInfo epki ; $F71324 ( g , epki , algName , i ) try { epki . getKeySpec ( $F71326 ( g ) , provider [ l ] ) ; $F71332 ( fail , algName , i ) } $F32328 performed = _BOOL ; } $F71336 } } assertTrue ( NUM00 , performed ) ; }
public final synchronized void closeAll $F72 { if ( onCloseAll ( ) ) $F13518 ( Log , TAG ) $F114083 ids = new $F114083 $F72 ; for ( int id : getExistingIds ( ) ) $F207 ( ids , id ) for ( int id : ids ) { close ( id ) ; } }
private static Pair < Character , Integer > normalizeCodepoint ( String origString_ , Charset encoding_ , int offset_ ) { char normalizedChar = NUM00 ; boolean isOk = _BOOL ; final int codepoint = origString_ . codePointAt ( offset_ ) ; if ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { if ( codepoint < NUM00 ) isOk = _BOOL ; } else if ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { if ( codepoint < NUM00 ) isOk = _BOOL ; } else if ( encoding_ . equals ( Charset . forName ( NUM00 ) ) ) { if ( codepoint < NUM00 ) isOk = _BOOL ; } if ( isOk ) { normalizedChar = ( char ) codepoint ; } else { isOk = _BOOL ; final int type = Character . getType ( codepoint ) ; if ( type == Character . CURRENCY_SYMBOL ) normalizedChar = NUM00 ; else if ( type == Character . DASH_PUNCTUATION ) normalizedChar = NUM00 ; else if ( type == Character . FINAL_QUOTE_PUNCTUATION ) { normalizedChar = NUM00 ; } else if ( type == Character . INITIAL_QUOTE_PUNCTUATION ) { normalizedChar = NUM00 ; } else if ( type == Character . END_PUNCTUATION ) normalizedChar = NUM00 ; else if ( type == Character . DASH_PUNCTUATION ) normalizedChar = NUM00 ; else if ( type == Character . OTHER_LETTER ) normalizedChar = NUM00 ; else if ( type == Character . OTHER1BER ) normalizedChar = NUM00 ; else if ( type == Character . OTHER_PUNCTUATION ) normalizedChar = NUM00 ; else if ( type == Character . OTHER_SYMBOL ) normalizedChar = NUM00 ; else isOk = _BOOL ; } Character newChar = null ; if ( isOk ) newChar = normalizedChar ; $F83164 ( newChar , codepoint ) }
public void testPosNegFirstShorter $F72 { $F50446 $F92469 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
private boolean startRandomGame $F72 { AbstractLaunch [ ] pins = mCardAdapter . getLaunchers ( ) ; List < AbstractLaunch > games = new ArrayList < AbstractLaunch > ( pins . length ) ; for ( AbstractLaunch pin : pins ) { if ( pin . isGame ( ) ) { if ( pin . mState == AbstractLaunch . STATE_READY ) $F207 ( games , pin ) } } if $F3817 ( games ) { $F6822 ( r ) $F59615 ( index , r , games ) AbstractLaunch game = games . get ( index ) ; Log . d ( TAG , String . format ( NUM00 , game . mContentDescription ) ) ; game . onClick ( game . getClickTarget ( ) ) ; MeasurementManager . recordCustomEvent ( mMeasurement , getString ( R . string . analytics_event_category_launch ) , getString ( R . string . analytics_launch_action_voice ) , game . mContentDescription ) ; AnalyticsManager . sendEvent ( R . string . analytics_event_category_launch , R . string . analytics_launch_action_voice , game . mContentDescription ) ; return _BOOL ; } else { return _BOOL ; } }
public void initDiskCache $F72 { synchronized ( mDiskCacheLock ) { if $F103532 ( mDiskLruCache ) { File diskCacheDir = mCacheParams . diskCacheDir ; if ( mCacheParams . diskCacheEnabled && diskCacheDir != null ) { $F1909 ( diskCacheDir ) if ( getUsableSpace ( diskCacheDir ) > mCacheParams . diskCacheSize ) { try { mDiskLruCache = DiskLruCache . open ( diskCacheDir , NUM00 , NUM00 , mCacheParams . diskCacheSize ) ; $F29031 ( BuildConfig , Log , TAG ) } catch ( final IOException e ) { mCacheParams . diskCacheDir = null ; $F23815 ( Log , TAG , e ) } } } } mDiskCacheStarting = _BOOL ; $F165 ( mDiskCacheLock ) } }
boolean isRegisteredPermission ( Permission permission ) ;
public static int compare ( String id1 , String id2 ) { int result = - NUM00 ; String seed1 = IdGenerator . getSeedFromId ( id1 ) ; String seed2 = IdGenerator . getSeedFromId ( id2 ) ; if ( seed1 != null && seed2 != null ) { result = seed1 . compareTo ( seed2 ) ; if ( result == NUM00 ) { long count1 = IdGenerator . getSequenceFromId ( id1 ) ; long count2 = IdGenerator . getSequenceFromId ( id2 ) ; $F443511 ( result , count1 , count2 ) } } return result ; }
public static Element addChildElementNSElement ( Element element , String childElementName , Document document , String nameSpaceUrl ) { Element newElement = document . createElementNS ( nameSpaceUrl , childElementName ) ; element . appendChild ( newElement ) ; return element ; }
public VNXeCommandResult modifyConsistencyGroupSync ( String id , LunGroupModifyParam param ) { $F7542 ( urlBld , URL_MODIFY1 ) urlBld . append ( id ) ; urlBld . append ( URL_MODIFY2 ) ; $F6947 ( _url , urlBld ) return postRequestSync ( param ) ; }
protected Query finishQuery ( $F220945 in , boolean allTermsRequired ) { $F17464 ( in ) }
public long sum $F72 { long sum = NUM00 ; for ( AtomicLong value : map . values ( ) ) { sum = sum + value . get ( ) ; } return sum ; }
public void testNegPosFirstShorter $F72 { $F50446 $F92469 int aSign = - NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public static String extractFullStackTrace ( Throwable e ) { $F29429 ( stringWriter ) $F80496 ( printWriter , stringWriter ) e . printStackTrace ( printWriter ) ; $F92 ( stringWriter ) }
public EmptyTileFactory ( TileFactoryInfo info ) { super ( info ) ; int tileSize = info . getTileSize ( info . getMinimumZoomLevel ( ) ) ; emptyTile = new BufferedImage ( tileSize , tileSize , BufferedImage . TYPE_INT_ARGB ) ; $F5115 ( g , emptyTile ) $F34716 ( g , RenderingHints ) g . setColor ( Color . GRAY ) ; g . fillRect ( NUM00 , NUM00 , tileSize , tileSize ) ; g . setColor ( Color . WHITE ) ; g . drawOval ( NUM00 , NUM00 , tileSize - NUM00 , tileSize - NUM00 ) ; g . fillOval ( $F4026 ) ; g . fillOval ( tileSize - NUM00 , NUM00 , NUM00 , NUM00 ) ; g . fillOval ( tileSize / NUM00 - NUM00 , tileSize / NUM00 - NUM00 , NUM00 , NUM00 ) ; $F355 ( g ) }
$F27241 ( tag , msg , args , sLevel , LEVEL_INFO , String , Log )
public void close $F72 throws IOException { $F59 ( guard ) RandomAccessFile localRaf = raf ; if ( localRaf != null ) { synchronized ( localRaf ) { raf = null ; $F59 ( localRaf ) } if ( fileToDeleteOnClose != null ) $F187939 ( fileToDeleteOnClose ) } }
public boolean matchWithRegEx ( String aRegEx ) { $F46019 ( TextUtils , aRegEx , _BOOL ) boolean matched = _BOOL ; if $F20899 ( TextUtils , mDisplayName ) { matched = mDisplayName . matches ( aRegEx ) ; } if ( ! matched ) { for ( String email : mEmails ) { matched |= email . matches ( aRegEx ) ; } } return matched ; }
public String stemString ( String str ) { $F280 ( result ) int start = - NUM00 ; for ( $F1088 ( j , str ) ) { $F1280 ( c , str , j ) if $F255966 ( Character , c ) { if ( start == - NUM00 ) { start = j ; } } else if ( c == NUM00 ) { if ( start == - NUM00 ) $F288 ( result , c ) } else { if ( start != - NUM00 ) { result . append ( stem ( str . substring ( start , j ) ) ) ; start = - NUM00 ; } result . append ( c ) ; } } if ( start != - NUM00 ) { result . append ( stem ( $F83851 ( str , start ) ) ) ; } $F92 ( result ) }
public static $F3807 parseNumericList ( String string ) { $F63609 ( list ) $F26605 ( ranges , Pattern ) $F1150 ( m , ranges , string ) while $F281 ( m ) { String range = m . group ( NUM00 ) ; string = string . replace ( range , NUM00 ) ; parseNumericRange ( range , list ) ; } $F6542 ( numbers , string ) for ( $F9808 ( i , numbers ) ) { String number = numbers [ i ] ; if $F5973 ( number ) { $F269561 ( list , Integer , number ) } } Collections . sort ( list ) ; return list ; }
protected void savePassCodeAndExit $F72 { Intent $F192736 ( resultIntent ) ; resultIntent . putExtra ( KEY_PASSCODE , $F2065 ( mPassCodeDigits ) + mPassCodeDigits [ NUM00 ] + mPassCodeDigits [ NUM00 ] ) ; setResult ( RESULT_OK , resultIntent ) ; finish ( ) ; }
public static void readFully ( FileChannel file , long pos , ByteBuffer dst ) { try { do { int len = file . read ( dst , pos ) ; $F5148 ( len ) pos += len ; } while $F45853 ( dst ) ; $F23501 ( dst ) } catch ( IOException e ) { long size ; try $F57332 ( size , file ) catch ( IOException e2 ) $F44867 ( size ) throw newIllegalStateException ( ERROR_READING_FAILED , NUM00 + NUM00 , file , size , dst . remaining ( ) , pos , e ) ; } }
private static void sparseFullRepresentationTest ( final ISchemaVersion schemaVersion ) throws IOException { final Writer output = openOutput ( schemaVersion , NUM00 , TestType . UNION ) ; $F23769 ( emptyHLL1 , newHLL , HLLType ) $F23769 ( emptyHLL2 , newHLL , HLLType ) cumulativeUnionLine ( output , emptyHLL1 , emptyHLL2 , schemaVersion ) ; final HLL fullHLL = newHLL ( HLLType . FULL ) ; fullHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; final HLL sparseHLL = newHLL ( HLLType . SPARSE ) ; sparseHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; output . write ( stringCardinality ( fullHLL ) + NUM00 + toByteA ( fullHLL , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; $F1206 ( output ) final HLL fullHLL2 = newHLL ( HLLType . FULL ) ; fullHLL2 . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; sparseHLL . addRaw ( constructHLLValue ( LOG2M , NUM00 , NUM00 ) ) ; output . write ( stringCardinality ( fullHLL2 ) + NUM00 + toByteA ( fullHLL2 , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; $F1206 ( output ) final HLL fullHLL3 = newHLL ( HLLType . FULL ) ; for ( int i = NUM00 ; i < ( SPARSE_THRESHOLD + NUM00 ) ; i ++ ) { fullHLL3 . addRaw ( constructHLLValue ( LOG2M , i , NUM00 ) ) ; sparseHLL . addRaw ( constructHLLValue ( LOG2M , i , NUM00 ) ) ; } output . write ( stringCardinality ( fullHLL3 ) + NUM00 + toByteA ( fullHLL3 , schemaVersion ) + NUM00 + stringCardinality ( sparseHLL ) + NUM00 + toByteA ( sparseHLL , schemaVersion ) + NUM00 ) ; $F1206 ( output ) }
public void triggerCycle $F72 { $F790 ( lock ) triggerCount ++ ; contextsParked = NUM00 ; lock . broadcast ( ) ; $F704 ( lock ) }
protected boolean heapifyDownComparator ( final int ipos , Object cur ) { int pos = ipos ; final int half = size > > > NUM00 ; while ( pos < half ) { int min = pos ; Object best = cur ; final int $F76469 ( lchild , pos ) ; Object left = queue [ lchild ] ; if $F230914 ( comparator , best , left ) { min = lchild ; best = left ; } final int rchild = lchild + NUM00 ; if ( rchild < size ) { Object right = queue [ rchild ] ; if $F230914 ( comparator , best , right ) { min = rchild ; best = right ; } } $F15290 ( min , pos ) queue [ pos ] = best ; pos = min ; } queue [ pos ] = cur ; return ( pos != ipos ) ; }
public static boolean isString ( String str ) { return ( $F40448 ( str ) || $F40448 ( str ) ) && $F20 ( str ) ; }
static public boolean hasPhoto ( Tweet tweet ) $F118073 ( getPhotoEntity , tweet )
public void testCase19 $F72 { $F3013 $F3021 int aSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ZERO ; $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static StringBuilder formatTo ( StringBuilder buf , $F2469 d , String sep ) { $F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { buf . append ( sep ) ; $F6939 ( buf , d , i ) } return buf ; }
public static $F4203 int upperBound ( $F95121 ( valueList ) , int fromIdx , int toIdx , final Comparable $F4203 value ) { int len = toIdx - fromIdx + ( toIdx > fromIdx ? NUM00 : NUM00 ) ; int from = fromIdx ; int half ; int middle ; while ( len > NUM00 ) { half = len > > NUM00 ; middle = from ; middle = middle + half ; if ( value . compareTo ( valueList . get ( middle ) ) == - NUM00 ) { len = half ; } else { from = middle ; from ++ ; len = len - half - NUM00 ; } } return from ; }
$F1654 ( data )
public static synchronized void registerAdditionalHyphenationFileDirectory ( String directory ) $F23232 ( additionalHyphenationFileDirectories , directory )
private void insertNewDriveFiles $F72 throws IOException { Cursor cursor = null ; try { cursor = myTracksProviderUtils . getTrackCursor ( SyncUtils . NO_DRIVE_ID_TRACKS_QUERY , null , null ) ; long recordingTrackId = PreferencesUtils . getLong ( context , R . string . recording_track_id_key ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { do { Track track = myTracksProviderUtils . createTrack ( cursor ) ; if ( track . getId ( ) == recordingTrackId ) $F1448 SyncUtils . insertDriveFile ( drive , folderId , context , myTracksProviderUtils , track , _BOOL , _BOOL ) ; } while $F12260 ( cursor ) ; } } $F14364 ( cursor ) }
public void testHandle_normalCompletion $F72 { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( createIncomplete , _BOOL ) ) for ( $F127409 ( v1 ) ) { $F127411 ( f ) $F127413 ( a ) if ( ! createIncomplete ) $F181557 ( assertTrue , f , v1 ) final $F70219 g = m . handle ( f , null ) ; if ( createIncomplete ) $F181557 ( assertTrue , f , v1 ) checkCompletedNormally ( g , inc ( v1 ) ) ; checkCompletedNormally ( f , v1 ) ; $F127421 ( assertEquals , a ) } }
private static String unescape ( String s ) { int len = s . length ( ) , base = NUM00 , idx ; String escapes = NUM00 ; String chars = NUM00 ; StringBuffer sbuf = null ; while ( $F64354 ( idx , s , base ) != - NUM00 ) { if ( sbuf != null ) $F13037 ( sbuf , s , base , idx ) if ( idx + NUM00 == len ) $F597 $F17494 ( c , s , idx ) $F12747 ( cidx , escapes , c ) if ( cidx == - NUM00 ) $F20352 ( sbuf , c ) else { if ( sbuf == null ) sbuf = new StringBuffer $F175778 ( s , base , idx ) ; $F4137 ( sbuf , chars , cidx ) } base = idx + NUM00 ; } if ( sbuf != null && base < len ) $F13047 ( sbuf , s , base ) return ( $F75266 ( sbuf , s ) ) ; }
public static void put ( String dbgToken ) { dbgTable . put ( dbgToken , Boolean . TRUE ) ; }
public boolean removeDataSet ( T d ) { $F397 ( d , _BOOL ) $F12396 ( removed , mDataSets , d ) if ( removed ) { mYValCount -= d . getEntryCount ( ) ; mYValueSum -= d . getYValueSum ( ) ; calcMinMax ( mDataSets ) ; } return removed ; }
public long reservedStore $F72 { return m_size * m_totalSlots ; }
public Transfer writeString ( String s ) throws IOException { if ( s == null ) { $F150188 ( out ) } else { $F1749 ( len , s ) out . writeInt ( len ) ; for ( $F119 ( i , len ) ) { out . writeChar ( s . charAt ( i ) ) ; } } return this ; }
private void fillInsideDraw $F159951 ( g , x , y , w , h ) { $F339 ( g , Color ) g . drawRect ( x , y , w , h ) ; g . setColor ( Color . LIGHT_GRAY ) ; g . fillRect ( x + NUM00 , y + NUM00 , w - NUM00 , h - NUM00 ) ; }
public DrawerBuilder addStickyDrawerItems ( $F4170 IDrawerItem ... stickyDrawerItems ) { if ( this . mStickyDrawerItems == null ) { this . mStickyDrawerItems = $F203 ; } Collections . addAll ( this . mStickyDrawerItems , stickyDrawerItems ) ; return this ; }
public void appendToBuffer ( StringBuilder buf ) { Iterator $F103896 iter = polygons . iterator ( ) ; while $F2921 ( iter ) { Polygon poly = iter . next ( ) ; poly . appendToBuffer ( buf ) ; if $F2921 ( iter ) $F86 ( buf ) } }
public void addFunction ( FunctionInterface activeFunction ) $F207 ( functions , activeFunction )
$F127810 ( charset , Charset )
public $F9883 Joiner join ( $F20474 clazz , String alias ) { if $F5973 ( jClasses ) { throw new JoinerException $F580 ; } JClass jc = new JClass ( clazz , alias , jClasses . size ( ) ) ; jClasses . add ( jc ) ; lastJClass = jc ; aliasMap . put ( alias , jc ) ; return this ; }
$F69921 ( b , off , len , length , data , enlarge , System , this )
public static void showProgressBar ( int status , int i ) { if ( mRootView != null ) { ProgressBar pb = ( ProgressBar ) mRootView . findViewById ( R . id . progress_slice ) ; TextView tv = ( TextView ) mRootView . findViewById ( R . id . viewer_text_progress_slice ) ; TextView tve = ( TextView ) mRootView . findViewById ( R . id . viewer_text_estimated_time ) ; TextView tve_title = ( TextView ) mRootView . findViewById ( R . id . viewer_estimated_time_textview ) ; if ( mSlicingHandler . getLastReference ( ) != null ) { $F29549 ( tve_title , View ) $F29549 ( pb , View ) switch ( status ) { case StateUtils . SLICER_HIDE : if ( i < NUM00 ) { tv . setText ( R . string . error ) ; } else { tv . setText ( R . string . viewer_text_downloaded ) ; } $F185816 ( pb , View ) $F597 case StateUtils . SLICER_UPLOAD : String uploadText = mContext . getString ( R . string . viewer_text_uploading ) ; if ( i == NUM00 ) pb . setIndeterminate ( _BOOL ) ; else { pb . setProgress ( i ) ; pb . setIndeterminate ( _BOOL ) ; uploadText += NUM00 + i + NUM00 ; } tv . setText ( uploadText ) ; tve . setText ( null ) ; $F597 case StateUtils . SLICER_SLICE : String slicingText = mContext . getString ( R . string . viewer_text_slicing ) ; if ( i == NUM00 ) { pb . setIndeterminate ( _BOOL ) ; } else if ( i == NUM00 ) { pb . setIndeterminate ( _BOOL ) ; pb . setProgress ( NUM00 ) ; slicingText += NUM00 + mContext . getString ( R . string . viewer_text_done ) ; } else { pb . setProgress ( i ) ; pb . setIndeterminate ( _BOOL ) ; slicingText += NUM00 + i + NUM00 ; } tv . setText ( slicingText ) ; tve . setText ( null ) ; $F5217 ( mRootView ) $F597 case StateUtils . SLICER_DOWNLOAD : if ( i > NUM00 ) { tve . setText ( OctoprintConnection . ConvertSecondToHHMMString ( String . valueOf ( i ) ) ) ; } tv . setText ( R . string . viewer_text_downloading ) ; pb . setIndeterminate ( _BOOL ) ; $F597 $F2448 } } else { $F185816 ( pb , View ) $F185816 ( tve_title , View ) tv . setText ( null ) ; tve . setText ( null ) ; $F5217 ( mRootView ) } } }
public LaunchOption ( Version version , Authenticator authenticator , MinecraftDirectory minecraftDir ) { Objects . requireNonNull ( version ) ; Objects . requireNonNull ( authenticator ) ; Objects . requireNonNull ( minecraftDir ) ; this . version = version ; this . authenticator = authenticator ; this . minecraftDirectory = minecraftDir ; this . runtimeDirectory = minecraftDir ; this . javaEnvironment = JavaEnvironment . current ( ) ; }
protected boolean isStoppable $F72 { return ( isRunning ( ) && getLocator ( ) != null ) ; }
public void load ( String fileName ) throws Exception { if ( $F2363 ( fileName ) && $F2363 ( fileName ) ) { throw new Exception $F3487 ; } if $F8991 ( fileName ) { loadBinary ( fileName ) ; } else if $F8991 ( fileName ) { loadXML ( fileName ) ; } }
public Bindings addOptComponent ( String property , Class clazz , JToggleButton c , boolean enabledByDefault ) { Binding b = new OptComponentBinding ( this , property , clazz , c , enabledByDefault ) ; if $F1710 ( _optComponents , property ) { throw new BindingException $F16961 ( Messages ) ; } _optComponents . put ( property , b ) ; return this ; }
public static boolean copyFile ( File file , File copy ) { if ( file == null || copy == null ) $F894 if ( $F48789 ( file ) || copy . isDirectory ( ) ) $F824 FileInputStream fis = null ; FileOutputStream fos = null ; try { $F5335 ( fis , file ) $F10893 ( fos , copy ) int bytes ; $F2175 ( packet , COPY_PACKET_SIZE ) while ( ( bytes = fis . read ( packet , NUM00 , COPY_PACKET_SIZE ) ) != - NUM00 ) $F11584 ( fos , packet , bytes ) return _BOOL ; } catch ( Exception e ) $F51339 ( LOGGER , Level , e , _BOOL ) finally { try $F1823 ( fos ) $F427956 ( LOGGER , Level , e ) try $F1823 ( fis ) $F427956 ( LOGGER , Level , e ) } }
public static $F96 encryptMySQLPassword $F84589 ( password , seed ) { if $F3581 ( password ) $F42429 MessageDigest digest = null ; try $F14527 ( digest , MessageDigest ) catch ( NoSuchAlgorithmException e ) { $F5197 ( logger , e ) return $F10314 ; } $F96 stage1_hash = digest . digest ( password . getBytes ( ) ) ; $F2268 ( digest ) $F96 sha1_stage1 = digest . digest ( stage1_hash ) ; $F2268 ( digest ) digest . update ( seed ) ; digest . update ( sha1_stage1 ) ; $F96 finalSha1 = digest . digest ( ) ; $F82619 ( token , finalSha1 ) for ( $F1139 ( i , finalSha1 ) ) { token [ i ] = ( byte ) ( stage1_hash [ i ] ^ finalSha1 [ i ] ) ; } return token ; }
protected void addUrl ( URL url ) { if $F105 ( urls , url ) { $F556 ( LOGGER , url ) $F665 } urls . add ( url ) ; $F556 ( LOGGER , url ) }
private $F2027 defineNumeric ( Random random ) { $F2027 num = new int [ getNumAttributes ( ) ] ; for ( $F1139 ( i , num ) ) { num [ i ] = Attribute . NOMINAL ; } int numNum = NUM00 ; for ( int i = NUM00 ; ( numNum < getNumNumeric ( ) ) && ( i < getNumAttributes ( ) * NUM00 ) ; i ++ ) { int maybeNext = ( int ) ( random . nextDouble ( ) * num . length ) ; if ( num [ maybeNext ] != Attribute . NUMERIC ) { num [ maybeNext ] = Attribute . NUMERIC ; numNum ++ ; } } return num ; }
public static boolean isFavoriteStation ( Context context , int iStation ) $F19580 ( isStationExist , context , iStation , STATION_TYPE_FAVORITE )
protected void paintCaption ( Graphics g , Rectangle rect ) { String s = getTargetLabel ( ) ; $F59924 ( s ) g . setFont ( getTargetFont ( ) ) ; $F319 ( fm , g ) String str = getTargetLabel ( ) ; int width = fm . stringWidth ( str ) ; int textx = rect . x + ( rect . width - width ) / NUM00 ; int texty = rect . y + CAPTION_MARGIN_TOP + fm . getAscent ( ) ; int sepy = $F6118 ( rect ) - CAPTION_SEPARATOR_HEIGHT / NUM00 ; g . setColor ( isTargetEnabled ( ) ? getForegroundColor ( ) : getDisabledColor ( ) ) ; g . drawString ( s , textx , texty ) ; draw3DRect ( g , rect . x , sepy , rect . width , NUM00 , _BOOL ) ; }
$F45572 ( context , intent , pm , handlers , PackageManager , _BOOL , resolveInfo , filter , Log , TAG )
public void putFloat ( float x ) { bb . putFloat ( space -= NUM00 , x ) ; }
final void putInt ( int offset , int value ) { unsafe . putInt ( offset + address , value ) ; }
private static boolean isUnreservedCharacter ( char p_char ) { return ( isAlphanum ( p_char ) || $F36740 ( MARK_CHARACTERS , p_char ) ) ; }
public static InetSocketAddress parseSocketAddress ( String addr ) { $F35105 ( parts , addr , COLON ) Preconditions . checkArgument ( parts . length == NUM00 ) ; String hostname = parts [ NUM00 ] ; $F167151 ( port , Integer , parts ) return new InetSocketAddress ( hostname , port ) ; }
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( approximation ) ; }
public $F131 toArray $F72 { $F48385 ( items , this ) $F677 ( lock , this ) $F790 ( lock ) try { $F4711 ( count , this ) $F133 ( a , count ) int n = items . length - takeIndex ; if ( count <= n ) { $F21535 ( System , items , takeIndex , a , count ) } else { $F21535 ( System , items , takeIndex , a , n ) System . arraycopy ( items , NUM00 , a , n , count - n ) ; } return a ; } $F796 ( lock ) }
public void messageArrived ( MqttPublish sendMessage ) { final String methodName = NUM00 ; if ( mqttCallback != null || $F3816 ( callbacks ) ) { synchronized ( spaceAvailable ) { while ( running && ! quiescing && messageQueue . size ( ) >= INBOUND_QUEUE_SIZE ) { try { $F9270 ( log , CLASS_NAME , methodName ) spaceAvailable . wait ( NUM00 ) ; } $F34690 } } if ( ! quiescing ) { messageQueue . addElement ( sendMessage ) ; synchronized ( workAvailable ) { $F9270 ( log , CLASS_NAME , methodName ) $F165 ( workAvailable ) } } } }
private void findHome $F72 { $F27462 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home == null ) $F109927 ( home , System ) if ( home != null ) manifestPath = $F157313 ( home , File ) + manifestFileName ; else manifestPath = manifestFileName ; }
public static final $F2027 toIntArray ( String $F32798 ) { int u [ ] = $F14242 ( s ) ; for ( $F1139 ( j , s ) ) { $F191709 ( u , j , Integer , s ) } return u ; }
private $F3803 checkAllColumnsInCube ( CubeInstance cube , TableDesc table , Map < String , HiveTableMeta . HiveTableColumnMeta > fieldsMap ) { Set < ColumnDesc > usedColumns = Sets . newHashSet ( ) ; for ( TblColRef col : cube . getAllColumns ( ) ) { usedColumns . add ( col . getColumnDesc ( ) ) ; } $F295581 ( violateColumns , Lists ) for ( ColumnDesc column : table . getColumns ( ) ) { if $F105 ( usedColumns , column ) { HiveTableMeta . HiveTableColumnMeta $F24916 ( field , fieldsMap , column ) ; if ( field == null || ! isColumnCompatible ( column , field ) ) $F29791 ( violateColumns , column ) } } return violateColumns ; }
public static String makeUnifiedLineFeeds ( String query ) { if $F8908 ( query ) { return query ; } $F80469 ( result , query ) for ( $F1088 ( i , query ) ) { $F1280 ( c , query , i ) $F92331 ( c ) result . append ( c ) ; } $F92 ( result ) }
private void reflectMemberVariablesInLeftButton $F72 { final boolean lastPageReached = ( viewPager . getCurrentItem ( ) + NUM00 ) == pages . size ( ) ; final boolean buttonShouldBeInvisible = ( lastPageReached && disableLeftButtonOnLastPage ) || leftButtonDisabled ; final boolean buttonIsCurrentlyInvisible = leftButton . getVisibility ( ) == View . INVISIBLE ; final boolean shouldUpdateButton = buttonShouldBeInvisible != buttonIsCurrentlyInvisible ; if ( shouldUpdateButton ) { final Animator buttonAnimator = buttonShouldBeInvisible ? buttonAnimatorFactory . newLeftButtonDisappearAnimator ( leftButton ) : buttonAnimatorFactory . newLeftButtonAppearAnimator ( leftButton ) ; $F270375 ( buttonShouldBeInvisible , disableButton , buttonAnimator , leftButton , enableButton ) } }
public static void registerSemiDisposableBlock ( String oreDictName ) $F207 ( semiDisposableBlocks , oreDictName )
public boolean acceptsTypeName ( String type ) $F298 ( _typeList , type )
public void deleteAsync $F110257 ( id , responseCallback ) throws IOException { deleteObjectAsync ( id , responseCallback ) ; }
private boolean continueAfterAcceptFailure ( Throwable t ) { RMIFailureHandler fh = RMISocketFactory . getFailureHandler ( ) ; if ( fh != null ) { return fh . failure ( t instanceof Exception ? ( Exception ) t : new InvocationTargetException ( t ) ) ; } else $F27427 ( throttleLoopOnException , _BOOL ) }
private static void processPackage ( String tbName , Packages pkg ) { String classNamePrefix = StringUtil . parseHumpName ( tbName , _BOOL , isHumpModelClass ) ; pkg . setDao ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageDao ) ? NUM00 : NUM00 ) + packageDao ) ; pkg . setDaoName ( classNamePrefix + daoSuffix ) ; pkg . setModel ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageModel ) ? NUM00 : NUM00 ) + packageModel ) ; pkg . setModelName ( classNamePrefix + modelSuffix ) ; pkg . setMapperXml ( packagePrefix + ( StringUtil . isEmpty ( packagePrefix ) || StringUtil . isEmpty ( packageMapperXml ) ? NUM00 : NUM00 ) + packageMapperXml ) ; pkg . setMapperXmlName ( classNamePrefix + mapperXmlSuffix ) ; pkg . setModelNameLowerFirst ( StringUtil . lowerFirst ( pkg . getModelName ( ) ) ) ; }
public void addOnCentralPositionChangedListener ( OnCentralPositionChangedListener listener ) $F207 ( mOnCentralPositionChangedListeners , listener )
public boolean addCall $F19845 ( sourceClass , sourceMethod , targetClass , targetMethod ) { CallGraphEntry from = new CallGraphEntry ( targetClass , targetMethod ) ; CallGraphEntry to = new CallGraphEntry ( sourceClass , sourceMethod ) ; if $F1238 ( sourceClass , className ) cutNodes . add ( to ) ; if ( ! graph . containsEdge ( from , to ) ) { graph . addEdge ( from , to ) ; callGraphClasses . add ( $F2897 ( targetClass ) ) ; return _BOOL ; } return _BOOL ; }
private static void doThreadDump ( final HttpServletRequest req , final HttpServletResponse resp ) throws IOException { resp . setStatus ( HTTP_OK ) ; resp . addHeader ( NUM00 , NUM00 ) ; resp . setContentType ( MIME_TEXT_PLAIN ) ; final PrintWriter w = resp . getWriter ( ) ; try { BigdataStatics . threadDump ( w ) ; $F1206 ( w ) } catch ( Throwable t ) { launderThrowable ( t , resp , NUM00 ) ; } $F3229 ( w ) }
public static boolean isValidNmtoken ( String nmtoken ) { $F11550 ( length , nmtoken ) $F6482 ( length , _BOOL ) for ( $F1316 ( i , length ) ) { $F1280 ( ch , nmtoken , i ) $F38676 ( isName , ch , _BOOL ) } return _BOOL ; }
public MMRoll ( MMRandom rng ) { super ( NUM00 , NUM00 ) ; this . total = rng . randomInt ( this . faces ) + this . min ; all . addElement ( this . total ) ; }
public void handleButton3Request ( RequestInvocationEvent event ) throws ModelControlException $F5795 ( returnToHomePage )
static $F4203 UnixStream $F4203 unixify $F51721 ( stream ) { $F10578 ( Objects , stream ) return new UnixStreamImpl $F200 ( stream ) ; }
$F1309 public MediaFile ( File f ) { this ( f . toPath ( ) , null ) ; }
public static KeyStore load ( File keyStoreFile , Password password , KeyStoreType keyStoreType ) throws CryptoException , FileNotFoundException { if ( ! keyStoreType . isFileBased ( ) ) { throw new CryptoException ( $F103511 ( MessageFormat , res , keyStoreType ) ) ; } $F4647 ( fis , keyStoreFile ) KeyStore keyStore = getKeyStoreInstance ( keyStoreType ) ; try { keyStore . load ( fis , password . toCharArray ( ) ) ; } catch ( CertificateException ex ) { throw new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; } catch ( NoSuchAlgorithmException ex ) { throw new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; } catch ( FileNotFoundException ex ) { throw ex ; } catch ( IOException ex ) { throw new KeyStoreLoadException ( $F36702 ( MessageFormat , res , keyStoreType ) , ex , keyStoreType ) ; } $F18090 ( IOUtils , fis ) return keyStore ; }
public static String addToCartBulk ( HttpServletRequest request , HttpServletResponse response ) { $F10362 ( categoryId , request ) ShoppingCart cart = getCartObject ( request ) ; $F15914 ( delegator , request ) $F15918 ( dispatcher , request ) ShoppingCartHelper cartHelper = new ShoppingCartHelper ( delegator , dispatcher , cart ) ; String controlDirective ; $F15921 ( result ) $F529 paramMap = UtilHttp . getParameterMap ( request ) ; String catalogId = CatalogWorker . getCurrentCatalogId ( request ) ; result = cartHelper . addToCartBulk ( catalogId , categoryId , paramMap ) ; controlDirective = processResult ( result , request ) ; if $F1238 ( controlDirective , ERROR ) $F2455 else $F2455 }
public void dumpLog ( String containerId , File logFile ) throws DockerException , InterruptedException { LogStream errorStream = null ; FileChannel fileChannel = null ; FileOutputStream fileOutputStream = null ; try { $F142821 ( logFile ) $F88727 ( logFile ) $F10893 ( fileOutputStream , logFile ) $F42861 ( fileChannel , fileOutputStream ) errorStream = dockerClient . logs ( containerId , LogsParam . stderr ( ) ) ; while $F2921 ( errorStream ) { LogMessage message = errorStream . next ( ) ; ByteBuffer buffer = message . content ( ) ; fileChannel . write ( buffer ) ; } } catch ( FileNotFoundException e ) { throw new DockerException ( NUM00 + logFile + NUM00 ) ; } catch ( IOException e ) { throw new DockerException ( e ) ; } finally { $F2727 ( errorStream ) if ( fileChannel != null ) { try $F881 ( fileChannel ) $F5199 ( logger , e ) } if ( fileOutputStream != null ) { try $F881 ( fileOutputStream ) $F5199 ( logger , e ) } } }
public static final void warning ( String message , Throwable e ) { if ( message == null && e != null ) { $F5976 ( message , e ) } logExpensive ( Level . WARNING , message , e ) ; }
public static IndexedImage pack $F74721 ( rgb , width , height ) { int arrayLength = width * height ; $F11844 ( tempPalette ) int paletteLocation = NUM00 ; for ( $F119 ( iter , arrayLength ) ) { int current = rgb [ iter ] ; if ( ! contains ( tempPalette , paletteLocation , current ) ) { if ( paletteLocation > NUM00 ) $F1337 tempPalette [ paletteLocation ] = current ; paletteLocation ++ ; } } if ( paletteLocation != tempPalette . length ) { $F4120 ( newArray , paletteLocation ) $F135 ( System , tempPalette , newArray , paletteLocation ) tempPalette = newArray ; } IndexedImage i = new IndexedImage ( width , height , tempPalette , rgb ) ; return i ; }
public void addHint ( Component hintComponent , Component destinationComponent , String position ) { hintComponent . putClientProperty ( POS , position ) ; hintComponent . putClientProperty ( DEST , destinationComponent ) ; vec . addElement ( hintComponent ) ; }
public static int convertSRGBtoLinearRGB ( int color ) { float input , output ; input = color / NUM00 ; if ( input <= NUM00 ) { output = input / NUM00 ; } else { output = ( float ) Math . pow ( ( input + NUM00 ) / NUM00 , NUM00 ) ; } return Math . round ( output * NUM00 ) ; }
public void vetoableChange ( PropertyChangeEvent evt ) throws PropertyVetoException { $F17749 ( log , evt ) throw new PropertyVetoException ( NUM00 , evt ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public void finish $F72 throws SQLException { $F11282 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) $F2715 ( statement , connection ) $F131050 ( statement ) $F59 ( statement ) }
$F1 public boolean contains ( Object object ) { return indexOf ( object , NUM00 ) != - NUM00 ; }
public void put ( E item ) throws InterruptedException { if $F972 ( done ) $F45619 ( queue , item ) }
public AuthorizationCode ( String code , String resourceOwnerId , String clientId , String redirectUri , $F2689 scope , String claims , long expiryTime , String nonce , String realm , String authModules , String acr , String ssoTokenId , String codeChallenge , String codeChallengeMethod , String authGrantId , String auditId ) { super ( $F532 ) ; setStringProperty ( ID , code ) ; setStringProperty ( USERNAME , resourceOwnerId ) ; setStringProperty ( CLIENT_ID , clientId ) ; setStringProperty ( REDIRECT_URI , redirectUri ) ; $F141086 ( setStringProperty , EXPIRE_TIME , String , expiryTime ) put ( SCOPE , newList ( scope ) ) ; setStringProperty ( TOKEN_TYPE , NUM00 ) ; setStringProperty ( TOKEN_NAME , OAUTH_CODE_TYPE ) ; setStringProperty ( NONCE , nonce ) ; setStringProperty ( AUTH_MODULES , authModules ) ; setStringProperty ( ACR , acr ) ; setStringProperty ( CODE_CHALLENGE , codeChallenge ) ; setStringProperty ( CODE_CHALLENGE_METHOD , codeChallengeMethod ) ; setStringProperty ( AUTH_GRANT_ID , authGrantId ) ; setStringProperty ( REALM , $F4250 ( realm ) ? NUM00 : realm ) ; setStringProperty ( SSO_TOKEN_ID , ssoTokenId ) ; put ( CLAIMS , CollectionUtils . asList ( claims ) ) ; setStringProperty ( AUDIT_TRACKING_ID , auditId ) ; }
$F1 public Object draw ( Graphics2D g2 , Rectangle2D area , Object params ) { draw ( g2 , area ) ; $F1274 }
public void testSetBitPositiveInside3 $F72 $F105940 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals )
public boolean isRowVisible ( int row ) { if ( row != - NUM00 ) { Rectangle cellRect = getCellRect ( row , NUM00 , _BOOL ) ; Rectangle visibleRect = getVisibleRect ( ) ; return visibleRect . intersects ( cellRect ) ; } else return _BOOL ; }
public void signalEvent $F72 { Collection < Semaphore > semaphores = _semaphores . values ( ) ; for ( Semaphore semaphore : semaphores ) { $F33833 ( semaphore ) semaphores . remove ( semaphore ) ; } }
public static int fileInTimeRange ( File f , Date start , Date end ) { long time = getFileTime ( f ) ; if ( start != null && time < start . getTime ( ) ) $F7629 if ( end != null && time > end . getTime ( ) ) $F1083 $F1082 }
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
public Object extFunction ( String ns , String funcName , Vector argVec , Object methodKey , ExpressionContext exprContext ) throws $F1872 { Object result = null ; if ( null != ns ) { $F308395 ( extNS , m_extensionFunctionNamespaces , ns ) if ( null != extNS ) { try { result = extNS . callFunction ( funcName , argVec , methodKey , exprContext ) ; } catch ( $F1872 e ) { throw e ; } catch ( Exception e ) { throw new $F1872 ( e ) ; } } else { throw new XPathProcessorException ( XSLMessages . createMessage ( XSLTErrorResources . ER_EXTENSION_FUNC_UNKNOWN , $F40356 ( ns , funcName ) ) ) ; } } return result ; }
private synchronized void block ( boolean tf ) { if ( tf ) { try { if ( m_buildThread . isAlive ( ) && m_state != IDLE ) $F5795 ( wait ) } $F34690 } else $F5795 ( notifyAll ) }
public $F25925 onClass $F72 { $F25925 $F9626 ( targets ) ; for ( OwlClass c : qcClasses ) { targets . add ( c . getURI ( ) ) ; } return targets ; }
public static int indexOfChars $F68141 ( str , chars , fromIndex ) { $F22998 ( len , str ) for ( int pos = fromIndex ; pos < len ; pos ++ ) { if ( $F100167 ( chars , str , pos ) ) { return pos ; } } $F150 }
private synchronized void notifyZoomListeners ( ZoomEvent e ) { for ( ZoomListener listener : mZoomListeners ) { listener . zoomApplied ( e ) ; } }
public static String buildStringFromLines ( String ... lines ) { int numChars = lines . length ; for ( String line : lines ) $F90434 ( numChars , line ) $F7542 ( builder , numChars ) for ( String line : lines ) $F444 ( builder , line ) $F92 ( builder ) }
public void init $F72 { $F2329 ( mContext ) if $F2979 ( mName ) { mName = mContext . getPackageName ( ) ; } if ( mMode == INVALID_VALUE || ( mMode != MODE_PRIVATE && mMode != MODE_WORLD_READABLE && mMode != MODE_WORLD_WRITEABLE ) ) { mMode = MODE_PRIVATE ; } mSharedPreferences = mContext . getSharedPreferences ( mName , mMode ) ; }
$F1 public void mergeAndOutputTransformationMetadata ( Iterator < DistinctValue > values , String outputDir , int colID , FileSystem fs , TfUtils agents ) throws IOException { double min = Double . MAX_VALUE ; $F259094 ( max , Double ) int nbins = NUM00 ; DistinctValue val = new DistinctValue $F72 ; String w = null ; double d ; while $F2921 ( values ) { $F2268 ( val ) $F45366 ( val , values ) w = val . getWord ( ) ; if $F7311 ( w , MIN_PREFIX ) { d = UtilFunctions . parseToDouble ( $F8182 ( w , MIN_PREFIX ) ) ; $F7547 ( d , min ) } else if $F7311 ( w , MAX_PREFIX ) { d = UtilFunctions . parseToDouble ( $F8182 ( w , MAX_PREFIX ) ) ; $F15468 ( d , max ) } else if $F7311 ( w , NBINS_PREFIX ) { nbins = ( int ) UtilFunctions . parseToLong ( $F8182 ( w , NBINS_PREFIX ) ) ; } else $F1665 ( w ) } double binwidth = ( max - min ) / nbins ; writeTfMtd ( colID , Double . toString ( min ) , Double . toString ( max ) , Double . toString ( binwidth ) , Integer . toString ( nbins ) , outputDir , fs , agents ) ; }
static SQLWarning convertShowWarningsToSQLWarnings ( Connection connection ) throws SQLException { return convertShowWarningsToSQLWarnings ( connection , NUM00 , _BOOL ) ; }
public boolean hasEmptyRow $F72 { $F19795 ( m_dataVector , _BOOL ) $F3803 $F7662 ( dataRow , m_dataVector ) ; for ( String s : dataRow ) { if $F35625 ( s ) { return _BOOL ; } } return _BOOL ; }
$F29611 ( remaining , count , EMPTY_BYTE_ARRAY , pos , buf , buffers , c , Math , System , newbuf )
public Node selectSingleNode ( Node contextNode , String str , Node namespaceNode ) throws TransformerException { NodeIterator nl = selectNodeIterator ( contextNode , str , namespaceNode ) ; return nl . nextNode ( ) ; }
private static String javaScriptEscapeHelper ( String s , boolean escapeToAscii ) { StringBuilder sb = new StringBuilder ( $F9483 ( s ) / NUM00 ) ; for ( $F1088 ( i , s ) ) { $F1280 ( c , s , i ) switch ( c ) { $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F1262 appendHexJavaScriptRepresentation ( sb , c ) ; $F597 $F1262 $F1262 boolean isUnsafe = _BOOL ; for ( String tag : UNSAFE_TAGS ) { if ( s . regionMatches ( _BOOL , i + NUM00 , tag , NUM00 , tag . length ( ) ) ) $F3468 ( isUnsafe , _BOOL ) } if ( isUnsafe ) { appendHexJavaScriptRepresentation ( sb , c ) ; } else $F288 ( sb , c ) $F597 $F1262 if $F350335 ( sb ) $F86 ( sb ) sb . append ( c ) ; $F597 $F2999 ( sb ) $F2999 ( sb ) $F1267 if ( c >= NUM00 && escapeToAscii ) { appendHexJavaScriptRepresentation ( sb , c ) ; } else $F288 ( sb , c ) } } $F92 ( sb ) }
public synchronized void add ( String category , double value ) $F30090 ( mCategories , category , mValues , value )
public final void walkGraph ( Hashtable semNodesTable ) { $F16747 ( uid , myUID ) $F36819 ( semNodesTable , uid ) semNodesTable . put ( uid , this ) ; if ( assumeExpr != null ) { assumeExpr . walkGraph ( semNodesTable ) ; } ; }
private List < ValueComboBoxDataGroup > populateSymbolList $F60993 ( panelDetails ) { List < ValueComboBoxDataGroup > combinedSymbolList = new ArrayList < ValueComboBoxDataGroup > $F72 ; for ( FieldState panel : symbolTypeFieldList ) { panel . populateSymbolList ( panelDetails , combinedSymbolList ) ; } return combinedSymbolList ; }
$F1 public int hashCode $F72 { long value = NUM00 ; value += NUM00 * value + Double . doubleToLongBits ( Math . abs ( x ) ) ; value += NUM00 * value + Double . doubleToLongBits ( Math . abs ( y ) ) ; $F73161 ( value ) }
public void disconnect $F72 $F8075 ( socket )
protected void initComponentDefaults ( UIDefaults table ) { super . initComponentDefaults ( table ) ; Color c = table . getColor ( NUM00 ) ; $F545 ( table , c ) $F545 ( table , c ) }
public int indexOfColumnName ( String columnName ) { return columnNameList . indexOf ( columnName . toLowerCase ( ) ) ; }
public boolean clear ( T expect , boolean allowReset ) { $F8934 ( sync ) try { $F35938 ( expect , value , _BOOL ) ValueState prev = state ; clear ( allowReset ) ; return prev == ValueState . SET ; } $F796 ( sync ) }
public void copyStream ( InputStream is ) throws IOException { super . setContentEncoding ( null ) ; $F1538 ( baos ) while ( _BOOL ) { $F7468 ( b , is ) if ( b == - NUM00 ) { $F3031 ( content , baos ) $F59 ( is ) $F665 } } }
public void test_readResolve $F72 { MockAttributedCharacterIteratorAttribute mac1 = new MockAttributedCharacterIteratorAttribute $F580 ; try { mac1 . readResolve ( ) ; fail ( NUM00 ) ; } catch ( InvalidObjectException e ) $F845 ObjectOutputStream out = null ; ObjectInputStream in = null ; try { $F1538 ( bytes ) $F111162 ( out , bytes ) $F128895 attr1 , attr2 ; attr1 = AttributedCharacterIterator . Attribute . LANGUAGE ; out . writeObject ( attr1 ) ; in = new ObjectInputStream ( new ByteArrayInputStream $F87573 ( bytes ) ) ; try { attr2 = ( $F128895 ) in . readObject ( ) ; assertSame ( NUM00 , attr1 , attr2 ) ; } catch ( IllegalArgumentException e ) $F1328 ( fail , e ) } catch ( IOException e ) $F1328 ( fail , e ) catch ( ClassNotFoundException e ) $F1328 ( fail , e ) finally { try $F21231 ( out , in ) $F29052 } }
public void interrupt $F72 { $F221512 ( t , threadVar ) $F36258 ( t ) $F725 ( threadVar ) }
public final boolean isSecure ( Socket sock ) throws IllegalArgumentException { $F826 ( sock ) if ( sock . getClass ( ) != $F43259 ) $F825 $F43264 ( sock ) return _BOOL ; }
protected boolean checkList ( String currentVal , String tokenValue ) { if ( currentVal == null || tokenValue == null ) $F895 if ( $F132005 ( currentVal ) ) $F825 boolean negation = currentVal . startsWith ( NUM00 ) ; String listName = $F58211 ( currentVal ) ; $F16628 ( listObj , listMap , listName ) $F397 ( listObj , _BOOL ) boolean contains ; if ( listObj instanceof Set ) { $F2689 set = ( Set ) listObj ; contains = set . contains ( tokenValue ) ; } else $F18931 ( listObj ) return ! ( contains && negation || ! contains && ! negation ) ; }
public static synchronized void addNativeLibraryDependencies $F71933 ( name , dependencyNames ) { $F64948 ( list , libraryDependencies , name ) if ( list == null ) { libraryDependencies . put ( name , $F8726 ( list ) ) ; } for ( String dependencyName : dependencyNames ) $F2202 ( list , dependencyName ) }
$F1 protected boolean hasOverflow ( FlatRStarTreeNode node ) { if ( node . isLeaf ( ) ) { return node . getNumEntries ( ) == leafCapacity ; } else if ( node . getNumEntries ( ) == node . getCapacity ( ) ) { node . increaseEntries ( ) ; } return _BOOL ; }
public void processVolumeExpansion ( StorageSystem storageSystem , URI storagePoolURI , URI volumeId , $F50603 outArgs ) throws Exception { StringBuilder logMsgBuilder = new StringBuilder ( String . format ( NUM00 ) ) ; CimConnection connection = _cimConnection . getConnection ( storageSystem ) ; WBEMClient client = connection . getCimClient ( ) ; StoragePool storagePool = _dbClient . queryObject ( StoragePool . class , storagePoolURI ) ; StringMap reservationMap = storagePool . getReservedCapacityMap ( ) ; reservationMap . remove ( volumeId . toString ( ) ) ; updateStoragePoolCapacity ( client , storagePool ) ; _dbClient . persistObject ( storagePool ) ; $F8544 ( volume , _dbClient , volumeId ) CIMObjectPath volumePath = ( CIMObjectPath ) _cimPath . getFromOutputArgs ( outArgs , IBMSmisConstants . CP_THE_ELEMENT ) ; boolean isSuccess = _BOOL ; if ( volumePath != null ) { CIMInstance volumeInstance = client . getInstance ( volumePath , _BOOL , _BOOL , null ) ; if ( volumeInstance != null ) { isSuccess = _BOOL ; volume . setProvisionedCapacity ( getProvisionedCapacityInformation ( volumeInstance ) ) ; volume . setAllocatedCapacity ( getAllocatedCapacityInformation ( client , volumeInstance ) ) ; _dbClient . persistObject ( volume ) ; logMsgBuilder . append ( String . format ( NUM00 , volume . getCapacity ( ) , volume . getProvisionedCapacity ( ) , volume . getAllocatedCapacity ( ) ) ) ; } } if ( ! isSuccess ) { UnsignedInteger32 returnCoede = ( UnsignedInteger32 ) _cimPath . getFromOutputArgs ( outArgs , IBMSmisConstants . CP_RETURN_CODE ) ; $F84 ( logMsgBuilder ) logMsgBuilder . append ( String . format ( NUM00 , volume . getId ( ) , returnCoede . toString ( ) ) ) ; } $F17749 ( _log , logMsgBuilder ) }
void updateFromNativeNode ( Node node , boolean fromScratch ) throws IIOInvalidTreeException { $F32683 ( attrs , node ) if ( $F72501 ( attrs ) ) { int value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; majorVersion = ( value != - NUM00 ) ? value : majorVersion ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; minorVersion = ( value != - NUM00 ) ? value : minorVersion ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; resUnits = ( value != - NUM00 ) ? value : resUnits ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; Xdensity = ( value != - NUM00 ) ? value : Xdensity ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; Ydensity = ( value != - NUM00 ) ? value : Ydensity ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; thumbWidth = ( value != - NUM00 ) ? value : thumbWidth ; value = getAttributeValue ( node , attrs , NUM00 , NUM00 , NUM00 , _BOOL ) ; thumbHeight = ( value != - NUM00 ) ? value : thumbHeight ; } if $F49521 ( node ) { $F9040 ( children , node ) $F19322 ( count , children ) if ( count > NUM00 ) { throw new IIOInvalidTreeException ( NUM00 , node ) ; } for ( $F119 ( i , count ) ) { $F61359 ( child , children , i ) $F48115 ( name , child ) if $F3057 ( name ) { if ( $F5973 ( extSegments ) && fromScratch ) { throw new IIOInvalidTreeException ( NUM00 , node ) ; } $F9040 ( exts , child ) $F19322 ( extCount , exts ) for ( $F119 ( j , extCount ) ) { $F61359 ( ext , exts , j ) extSegments . add ( new JFIFExtensionMarkerSegment ( ext ) ) ; } } if $F3057 ( name ) { if ( ( iccSegment != null ) && fromScratch ) { throw new IIOInvalidTreeException ( NUM00 , node ) ; } iccSegment = new ICCMarkerSegment ( child ) ; } } } }
private void addBestTestSuite ( File newlyGeneratedTestSuite ) { String testName = extractClassName ( tmpTests , newlyGeneratedTestSuite ) ; String path = testName . replace ( NUM00 , File . separator ) + NUM00 ; File file = new File ( getBestTestFolder ( ) + File . separator + path ) ; $F1900 ( file ) try { FileUtils . copyFile ( newlyGeneratedTestSuite , file ) ; } catch ( IOException e ) $F36592 ( logger , e ) }
$F1 public void createConnectionFactory ( String name , boolean ha , boolean useDiscovery , int cfType , String connectors , String bindings ) throws Exception { createConnectionFactory ( name , ha , useDiscovery , cfType , toArray ( connectors ) , toArray ( bindings ) ) ; }
protected Object evaluateSingle ( List elements , String expr ) { List array ; if ( elements instanceof $F11420 ) { array = new $F11420 $F72 ; } else $F13242 ( array ) for ( $F2774 ( e , elements ) ) { $F8877 ( o , e ) if ( o instanceof StructuredContent ) { if ( ( o = evaluateSingle ( ( StructuredContent ) o , expr ) ) != null ) $F207 ( array , o ) } } if $F10471 ( array ) { return ( StructuredContent ) array . get ( NUM00 ) ; } return array ; }
protected void onClose $F72 $F845
private int doScale ( int number , double factor ) { return ( int ) StrictMath . round ( number * factor ) ; }
private int parseMessageId $F4741 ( b , off ) throws ParseException { final int messageIdLen = Constants . MESSAGE_ID_LEN ; final int len = b . length - off ; if ( len >= messageIdLen ) { messageId_ = Arrays . copyOfRange ( b , off , off + messageIdLen ) ; return messageIdLen ; } else { throw new ParseException $F580 ; } }
static void generateCharacterClass ( String theTemplateFileName , String theOutputFileName ) throws $F27136 { $F51387 ( in , theTemplateFileName ) PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( theOutputFileName ) ) ) ; out . println ( commentStart + NUM00 + new $F22273 $F72 + commentEnd ) ; $F1749 ( marklen , commandMarker ) LOOP : while ( _BOOL ) { try { $F27015 ( line , in ) if ( line == null ) break LOOP ; int pos = NUM00 ; int depth = NUM00 ; while ( $F150770 ( pos , line , commandMarker ) >= NUM00 ) { int newpos = pos + marklen ; char ch = NUM00 ; SCAN : while ( newpos < line . length ( ) && ( Character . isJavaIdentifierStart ( ch = line . charAt ( newpos ) ) || ch == NUM00 || ( ch == NUM00 && depth > NUM00 ) ) ) { ++ newpos ; if ( ch == NUM00 ) { ++ depth ; } else if ( ch == NUM00 ) { -- depth ; if ( depth == NUM00 ) break SCAN ; } } String replacement = replaceCommand ( line . substring ( pos + marklen , newpos ) ) ; line = line . substring ( NUM00 , pos ) + replacement + line . substring ( newpos ) ; $F90433 ( pos , replacement ) } out . println ( line ) ; } catch ( IOException e ) { break LOOP ; } } $F59 ( in ) $F59 ( out ) }
public static String combineExtensions $F68855 ( extensions ) { $F18062 ( Check , extensions ) $F3239 ( ret ) for ( $F1139 ( i , extensions ) ) $F70285 ( i , ret , extensions ) $F92 ( ret ) }
public static void initializeProperties ( String file ) throws MissingResourceException { $F2697 ( props ) ResourceBundle bundle = ResourceBundle . getBundle ( file ) ; for ( $F3465 ( key , bundle ) ) { props . put ( key , bundle . getString ( key ) ) ; } initializeProperties ( props , _BOOL , _BOOL ) ; }
$F108235 ( f , first , n , item , last , count , notFull )
private String tweakNativeLaunchUri ( String uri , boolean forDebugging , LaunchInfo launchInfo ) throws IOException , FileNotFoundException { if ( launchInfo . isHttpOrAbout ( ) ) { boolean modify = ( getPreference ( PREF_URI_MODIFICATION ) != NUM00 ) ; if ( modify && forDebugging && ! launchInfo . isAbout ( ) ) { uri = URLHelper . escapeSpace ( uri ) ; URLHelper urlHelper = new URLHelper ( uri ) ; $F2539 params = urlHelper . getParameterMap ( ) ; $F16824 ( params ) urlHelper . setParameterMap ( params ) ; uri = urlHelper . getURL ( ) ; } } else { File f = null ; if $F3106 ( uri ) { try { f = new File ( new URI ( uri ) ) ; } catch ( URISyntaxException e ) { IOException ioe = new IOException $F1783 ( e ) ; ioe . initCause ( e ) ; throw ioe ; } } else $F94463 ( f , uri ) if $F102275 ( f ) $F48783 ( uri , f ) else { throw new FileNotFoundException ( uri ) ; } } return uri ; }
public void addListener ( final Listener listener ) $F207 ( listeners , listener )
public $F5675 queryAsList $F72 { QuantumFluxCursor $F4203 cursor = queryAsCursor ( ) ; try { $F5675 resultList = new $F201 $F90762 ( cursor ) ; while $F12260 ( cursor ) { resultList . add ( cursor . inflate ( ) ) ; } return resultList ; } $F48674 ( cursor ) }
$F1 public void profile $F72 $F5795 ( recordStats )
public static void touch ( File file ) throws IOException { if $F1906 ( file ) { OutputStream out = openOutputStream ( file ) ; IOUtils . closeQuietly ( out ) ; } boolean success = $F266936 ( file , System ) ; $F252414 ( success , file ) }
$F18907 ( extOrdering )
public static $F96 ivCipherConcat $F7233 ( iv , cipherText ) { $F148496 ( combined , iv , cipherText ) $F7057 ( System , iv , combined ) $F11244 ( System , cipherText , combined , iv ) return combined ; }
public static final void saveInstanceIdentifier ( String confPath , String instanceIdentifier ) throws Exception { Path file = Paths . get ( confPath , INSTANCE_IDENTIFIER_FILE ) ; $F55609 ( log , file ) AtomicSave . execute ( file . toString ( ) , NUM00 , $F43004 ( instanceIdentifier , StandardCharsets ) ) ; }
Part ( String contents , String property ) throws Exception { this . contents = NUM00 + contents ; this . property = property ; simplify ( ) ; }
public static boolean isSame ( Object s1 , Object s2 ) { if ( s1 == s2 ) return _BOOL ; if ( X . isEmpty ( s1 ) && X . isEmpty ( s2 ) ) return _BOOL ; if ( s1 != null ) $F23588 ( s1 , s2 ) return _BOOL ; }
public static double standardDeviation ( double variance ) { $F41531 ( Math , variance ) }
public static int frequencyToMIDINote ( double aFrequency ) { double r = NUM00 ; double ref = NUM00 ; int supinf = NUM00 ; int i = NUM00 ; double hautnb = NUM00 ; double ref1 = NUM00 ; double ref2 = NUM00 ; double flag = NUM00 ; int nmidi = NUM00 ; while ( aFrequency < ref ) { ref = Math . floor ( NUM00 * ref / r ) / NUM00 ; i = i + NUM00 ; supinf = - NUM00 ; flag = NUM00 ; ref1 = ref ; } while ( aFrequency > ref ) { ref = Math . floor ( NUM00 * ref * r ) / NUM00 ; i = i - NUM00 ; supinf = NUM00 ; ref2 = ref ; } if ( Math . abs ( aFrequency - ref1 ) < Math . abs ( aFrequency - ref2 ) ) { supinf = - NUM00 ; i = i + NUM00 ; } else { if ( flag == NUM00 ) supinf = - NUM00 ; } if ( ref1 == NUM00 ) { ref1 = Math . floor ( NUM00 * ref / r ) / NUM00 ; if ( Math . abs ( aFrequency - ref1 ) < Math . abs ( aFrequency - ref2 ) ) { i = i + NUM00 ; supinf = NUM00 ; } } $F15467 ( i , Math ) while ( i -- != NUM00 ) { if ( ( hautnb == NUM00 && supinf == - NUM00 ) || ( hautnb == NUM00 && supinf == NUM00 ) ) { if ( supinf == NUM00 ) hautnb = NUM00 ; if ( supinf == - NUM00 ) hautnb = NUM00 ; } hautnb = hautnb + supinf ; nmidi = nmidi + supinf ; } return nmidi ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public void recordGCVersions ( RegionVersionVector $F4203 other ) { assert other . memberToGCVersion != null : NUM00 ; recordGCVersion ( other . myId , other . localGCVersion . get ( ) ) ; for ( Map . Entry < T , Long > entry : other . memberToGCVersion . entrySet ( ) ) { recordGCVersion ( entry . getKey ( ) , entry . getValue ( ) . longValue ( ) ) ; } }
boolean waitForState ( Processor p , int state ) { synchronized ( waitSync ) { try { while ( p . getState ( ) < state && stateTransitionOK ) $F18604 ( waitSync ) } $F3957 } return stateTransitionOK ; }
private static boolean extractFile $F75578 ( c , rootAsset , path ) { AssetManager assetManager = c . getAssets ( ) ; InputStream in = null ; OutputStream out = null ; try { in = assetManager . open ( rootAsset + path ) ; String fullPath = PrefStore . getEnvDir ( c ) + path ; $F10893 ( out , fullPath ) $F12496 ( buffer ) int read ; while $F96840 ( read , in , buffer ) $F29756 ( out , buffer , read ) $F1206 ( out ) } $F132878 ( e , _BOOL ) $F15722 ( close , in , out ) return _BOOL ; }
protected int never $F72 { synchronized ( sleepLock ) { while ( running ) { try { sleepLock . wait ( $F264 ) ; } catch ( InterruptedException e ) $F1448 } $F1082 } }
public boolean verify ( X509Certificate cert , Provider sigProvider ) throws NoSuchAlgorithmException , CertificateExpiredException , CertificateNotYetValidException , CMSException { Time signingTime = getSigningTime ( ) ; if ( signingTime != null ) { cert . checkValidity ( signingTime . getDate ( ) ) ; } return doVerify ( cert . getPublicKey ( ) , sigProvider ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return MESSAGE_TYPE ; $F3366 return REQUEST_INFO ; $F3366 return RESPONSE_INFO ; $F3366 return TRACE_INFO ; $F3366 return GLOBAL_CONTEXT ; $F3366 return LOCAL_CONTEXT ; $F3366 return HEARTBEAT_INFO ; $F20809 } }
protected void loadHistory ( boolean set ) { BufferedInputStream str ; File file ; int width ; int height ; try { file = new File ( getHistoryFilename ( ) ) ; if $F3428 ( file ) { str = new BufferedInputStream ( new FileInputStream ( getHistoryFilename ( ) ) ) ; m_History . load ( str ) ; } } $F1516 ( e ) if ( set ) { m_ConnectionPanel . setHistory ( stringToModel ( m_History . getProperty ( ConnectionPanel . HISTORY_NAME , NUM00 ) ) ) ; m_QueryPanel . setHistory ( stringToModel ( m_History . getProperty ( QueryPanel . HISTORY_NAME , NUM00 ) ) ) ; m_QueryPanel . setMaxRows ( Integer . parseInt ( m_History . getProperty ( QueryPanel . MAX_ROWS , NUM00 ) ) ) ; width = Integer . parseInt ( m_History . getProperty ( WIDTH , NUM00 ) ) ; height = Integer . parseInt ( m_History . getProperty ( HEIGHT , NUM00 ) ) ; if ( ( width != NUM00 ) && ( height != NUM00 ) ) { setPreferredSize ( new Dimension ( width , height ) ) ; } } }
private void updatePanelForExpansion ( float percentage ) { updatePromoVisibility ( NUM00 ) ; float baseBaseY = MathUtils . interpolate ( NUM00 , getBasePageTargetY ( ) , percentage ) ; mBasePageY = baseBaseY ; float brightness = MathUtils . interpolate ( BASE_PAGE_BRIGHTNESS_STATE_PEEKED , BASE_PAGE_BRIGHTNESS_STATE_EXPANDED , percentage ) ; mBasePageBrightness = brightness ; float searchBarHeight = Math . round ( MathUtils . interpolate ( mSearchBarHeightPeeking , getSearchBarHeightExpanded ( ) , percentage ) ) ; mSearchBarHeight = searchBarHeight ; mSearchBarTextOpacity = NUM00 ; mIsSearchBarBorderVisible = _BOOL ; mSearchBarBorderY = searchBarHeight - SEARCH_BAR_BORDER_HEIGHT_DP + NUM00 ; mSearchIconOpacity = SEARCH_ICON_OPACITY_STATE_EXPANDED ; mArrowIconOpacity = ARROW_ICON_OPACITY_STATE_EXPANDED ; mArrowIconRotation = Math . round ( MathUtils . interpolate ( ARROW_ICON_ROTATION_STATE_PEEKED , ARROW_ICON_ROTATION_STATE_EXPANDED , percentage ) ) ; mCloseIconOpacity = CLOSE_ICON_OPACITY_STATE_EXPANDED ; float peekedHeight = getPanelHeightFromState ( PanelState . PEEKED ) ; float threshold = PROGRESS_BAR_VISIBILITY_THRESHOLD_DP / mPxToDp ; float diff = Math . min ( mHeight - peekedHeight , threshold ) ; float progressBarOpacity = MathUtils . interpolate ( NUM00 , NUM00 , diff / threshold ) ; mProgressBarOpacity = progressBarOpacity ; mProgressBarY = searchBarHeight - PROGRESS_BAR_HEIGHT_DP + NUM00 ; updateSearchBarShadow ( ) ; }
protected $F8748 updateableClusterer $F72 { $F125783 ( result ) print ( NUM00 ) ; if ( m_Clusterer instanceof UpdateableClusterer ) $F125784 ( println , result , _BOOL ) else $F125784 ( println , result , _BOOL ) return result ; }
$F30491 ( key , value , bitmapSize , getBitmapSize )
public void addField ( MappedMember mm ) $F207 ( fields , mm )
public static List $F11034 readAndConvertMessageLog ( final File selectedFile ) throws SpyException { final $F3803 lines = FileUtils . readFileAsLines ( selectedFile ) ; logger . info ( NUM00 , lines . size ( ) , selectedFile . getAbsoluteFile ( ) ) ; return processMessageLog ( parseMessageLog ( lines , null , NUM00 , NUM00 ) , null , NUM00 , NUM00 ) ; }
void readStream ( InputStream is ) throws Exception { String line ; $F6357 ( start ) $F58550 ( reader , is ) while ( ( line = reader . readLine ( ) ) != null && ! mStop ) { mResults . append ( line ) ; mResults . append ( Tools . LineSep ) ; $F6357 ( end ) if ( ( $F265 ( end , start ) ) / NUM00 > NUM00 || $F20 ( mResults ) ) { start = end ; $F24867 ( last , mResults ) if ( last != - NUM00 ) { XmppMsg msg = new XmppMsg ( _font ) ; msg . append ( $F1399 ( mResults , last ) ) ; mCmdBase . send ( mShellId , msg ) ; $F4910 ( mResults ) } } } }
$F35807 ( name , _BOOL )
public void removeParentRelation ( long osmId ) { if ( parentRelations != null ) { $F87774 tempRelList = new $F87774 ( parentRelations ) ; for ( Relation r : tempRelList ) { if ( osmId == r . getOsmId ( ) ) parentRelations . remove ( r ) ; } } }
public final void test_ROUNDTRIP_GetKeySpecCipher01 $F72 { boolean performed = _BOOL ; for ( $F1139 ( i , algName ) ) { try { $F75160 ( g , algName , i , privateKeyInfo ) EncryptedPrivateKeyInfo epki ; $F71324 ( g , epki , algName , i ) try { PKCS8EncodedKeySpec eks = epki . getKeySpec ( g . c ( ) ) ; if ( ! $F75165 ( Arrays , privateKeyInfo , eks ) ) { $F71332 ( fail , algName , i ) } } catch ( InvalidKeySpecException e ) { fail ( algName [ i ] [ NUM00 ] + NUM00 + algName [ i ] [ NUM00 ] + e + NUM00 ) ; } performed = _BOOL ; } $F75179 catch ( NoSuchAlgorithmException allowed ) $F845 } assertTrue ( NUM00 , performed ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
void insert ( V val , K key ) { $F215316 list = map . get ( val ) ; if ( list == null ) { list = new $F215316 $F989 ; map . put ( cloneValue ( val ) , list ) ; } list . add ( key ) ; }
public ServerSocket createServerSocket ( int nport , int backlog ) throws IOException $F25228 ( createServerSocket , nport , backlog )
public static $F15272 convertStringArrayToIntegerArray $F24643 ( arrayList ) { $F63609 ( integers ) for ( String str : arrayList ) { $F269561 ( integers , Integer , str ) } return integers ; }
$F1 public void unwrapSSLv2 $F97 ( bytes ) $F5795 ( unexpectedMessage )
public static String buildSelectorFromClass ( String classValue ) { $F83 ( strb ) strb . append ( CLASS_SELECTOR_PREFIX ) ; strb . append ( classValue ) ; $F92 ( strb ) }
public void ensureCapacity ( int minimumCapacity ) { if ( minimumCapacity > value . length ) { int ourMin = value . length * NUM00 + NUM00 ; enlargeBuffer ( Math . max ( ourMin , minimumCapacity ) ) ; } }
public String poolFooterStatements $F72 { $F83 ( sb ) for ( String footerStatement : footerStatements ) $F7227 ( sb , footerStatement ) $F725 ( footerStatements ) $F92 ( sb ) }
private void handleNodeQueue ( SerialMessage incomingMessage ) { if ( currentStage == ZWaveNodeInitStage . DONE ) $F932 logger . debug ( NUM00 , node . getNodeId ( ) , msgQueue . size ( ) ) ; if $F105 ( msgQueue , incomingMessage ) { msgQueue . remove ( incomingMessage ) ; logger . debug ( NUM00 , node . getNodeId ( ) , msgQueue . size ( ) ) ; freeToSend = _BOOL ; advanceNodeStage ( incomingMessage . getMessageClass ( ) ) ; } else if ( msgQueue . isEmpty ( ) && currentStage == ZWaveNodeInitStage . SECURITY_REPORT ) { logger . debug ( NUM00 , node . getNodeId ( ) ) ; advanceNodeStage ( incomingMessage . getMessageClass ( ) ) ; } }
public static $F142035 matches ( final String regexp ) { $F10578 ( Objects , regexp ) $F1274 }
public boolean hasSet ( String name ) $F69736 ( m_map , name )
$F1322 ( criteria , oredCriteria )
public void clearParsers $F72 { $F5191 ( timer ) clearParserNoticeHighlights ( ) ; $F725 ( parsers ) textArea . fireParserNoticesChange ( ) ; }
protected PropertyDefinition ( AbstractManagedObjectDefinition $F5162 d , $F20474 theClass , String propertyName , EnumSet < PropertyOption > options , AdministratorAction adminAction , DefaultBehaviorProvider $F4203 defaultBehavior ) { Reject . ifNull ( d , theClass , propertyName , options , adminAction , defaultBehavior ) ; this . definition = d ; this . theClass = theClass ; this . propertyName = propertyName ; this . options = EnumSet . copyOf ( options ) ; this . adminAction = adminAction ; this . defaultBehavior = defaultBehavior ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F48525 ( n , d , scale , i , sb , j , rGen , points )
public DateTimeParseException ( String message , CharSequence parsedData , int errorIndex , Throwable cause ) { super ( message , cause ) ; this . parsedString = parsedData . toString ( ) ; this . errorIndex = errorIndex ; }
public ConfigureXmlAttributeCountDialog_NB ( XmlAttributeCount xmlAttributeCount ) { this . xmlAttributeCount = xmlAttributeCount ; initComponents ( ) ; final IterateModel numberOfTagsIterator = xmlAttributeCount . getNumberOfAttributesIterator ( ) ; configureIterateModel_NB2 . setStartAt ( String . valueOf ( numberOfTagsIterator . getStartAt ( ) ) ) ; configureIterateModel_NB2 . setStopAt ( String . valueOf ( numberOfTagsIterator . getStopAt ( ) ) ) ; configureIterateModel_NB2 . setIncrement ( String . valueOf ( numberOfTagsIterator . getIncrement ( ) ) ) ; configureIterateModel_NB2 . setIterateStrategie ( numberOfTagsIterator . getIterateStrategie ( ) ) ; $F3803 names = Arrays . asList ( xmlAttributeCount . getNames ( ) ) ; configureStringList_NB1 . setStringList ( names ) ; }
$F178575 ( expression , errorMessage , String )
public void onMenuDismissed $F72 { mReloadMenuItem = null ; }
public static Thread consumeProcessOutputStream ( Process self , OutputStream output ) { Thread thread = new Thread ( new ByteDumper ( self . getInputStream ( ) , output ) ) ; $F2346 ( thread ) return thread ; }
public static Angle greatCircleAzimuth ( LatLon p1 , LatLon p2 ) { if $F54923 ( p1 , p2 ) $F825 $F3545 ( lat1 , p1 ) $F3549 ( lon1 , p1 ) $F3545 ( lat2 , p2 ) $F3549 ( lon2 , p2 ) if ( lat1 == lat2 && lon1 == lon2 ) return Angle . ZERO ; if ( lon1 == lon2 ) return lat1 > lat2 ? Angle . POS180 : Angle . ZERO ; double y = Math . cos ( lat2 ) * Math . sin ( lon2 - lon1 ) ; double x = Math . cos ( lat1 ) * Math . sin ( lat2 ) - Math . sin ( lat1 ) * Math . cos ( lat2 ) * Math . cos ( lon2 - lon1 ) ; $F3567 ( azimuthRadians , Math , y , x ) return Double . isNaN ( azimuthRadians ) ? Angle . ZERO : Angle . fromRadians ( azimuthRadians ) ; }
$F10188 ( close , Util , directory )
public void addAllTagsOf ( Host h ) { List < Tag > tags = h . getTags ( ) ; $F8504 ( tags ) if ( mTagList == null ) { mTagList = new ArrayList < Tag > $F716 ( tags ) ; } mTagList . addAll ( tags ) ; }
public static boolean isNumbersWithPunctuation ( String token ) { boolean hasDigit = _BOOL ; $F1749 ( len , token ) for ( $F1316 ( i , len ) ) { $F1280 ( c , token , i ) hasDigit = hasDigit || Character . isDigit ( c ) ; if ( ! ( Character . isDigit ( c ) || Characters . isPunctuation ( c ) ) ) { return _BOOL ; } } return hasDigit ; }
private boolean isPaintLineSeperators ( JComponent c ) { boolean paintLines = c instanceof JTextArea ; $F27462 ( globalOverride , System ) if $F22 ( globalOverride ) $F59984 ( paintLines , Boolean , globalOverride ) Boolean overrideProperty = ( Boolean ) c . getClientProperty ( NUM00 ) ; $F57733 ( overrideProperty , paintLines ) return paintLines ; }
public static Db open ( DataSource ds ) { try { return new Db ( ds . getConnection ( ) ) ; } $F44917 ( convert , e ) }
$F1 public void basicPutPart3 ( EntryEventImpl event , RegionEntry entry , boolean isInitialized , long lastModified , boolean invokeCallbacks , boolean ifNew , boolean ifOld , Object expectedOldValue , boolean requireOldValue ) { distributeUpdate ( event , lastModified , _BOOL , _BOOL , null , _BOOL ) ; super . basicPutPart3 ( event , entry , isInitialized , lastModified , invokeCallbacks , ifNew , ifOld , expectedOldValue , requireOldValue ) ; }
public LanguageRange ( String range ) { this . range = range . split ( NUM00 ) ; full = range ; }
protected void removeContainer $F72 throws Throwable { $F2329 ( containerId ) sendDeleteContainerRequest ( ) ; waitForPropertyValue ( provisioningTaskLink , MockTaskState . class , NUM00 , TaskState . TaskStage . FINISHED ) ; if $F931 ( isMockTarget ) $F31130 ( Thread ) verifyContainerDoesNotExist ( containerId ) ; }
$F1654 ( list )
public TransformerHandler newTransformerHandler ( Templates templates ) throws TransformerConfigurationException { try { TransformerImpl transformer = ( TransformerImpl ) templates . newTransformer ( ) ; transformer . setURIResolver ( m_uriResolver ) ; TransformerHandler th = ( TransformerHandler ) transformer . getInputContentHandler ( _BOOL ) ; return th ; } catch ( TransformerConfigurationException ex ) { if ( m_errorListener != null ) { try { m_errorListener . fatalError ( ex ) ; $F1274 } catch ( TransformerConfigurationException ex1 ) { throw ex1 ; } catch ( TransformerException ex1 ) { throw new TransformerConfigurationException ( ex1 ) ; } } throw ex ; } }
public void addField ( FieldRef fref ) $F207 ( mFieldRefs , fref )
public String render ( ValueExpr theExpr ) throws Exception { reset ( ) ; theExpr . visit ( this ) ; $F92 ( mBuffer ) }
public void add ( final Vector2D [ ] bLoop ) throws MathIllegalArgumentException { add ( new NestedLoops ( bLoop , tolerance ) ) ; }
$F1113 public static $F4203 $F5675 asList ( $F5466 final $F7922 expression , $F1113 final $F20474 elementClass ) { if $F21545 ( expression ) $F12523 ( Collections ) final $F5675 result = new $F5676 $F72 ; for ( final Object element : expression ) { final T toAdd = as ( element , elementClass ) ; $F1140 ( toAdd , result ) } return result ; }
$F41325 ( in , result , _BOOL , c , length )
private void startNewTransition $F72 { $F933 ( hasBounds ) mCurrentTrans = mTransGen . generateNextTransition ( mDrawableRect , mViewportRect ) ; mElapsedTime = NUM00 ; $F3224 ( mLastFrameTime , System ) fireTransitionStart ( mCurrentTrans ) ; }
$F1 protected void makeFinished $F72 { $F96 verify_data ; if $F181997 ( serverHello ) { $F46945 ( verify_data ) computerVerifyDataTLS ( NUM00 , verify_data ) ; } else { $F46945 ( verify_data ) computerVerifyDataSSLv3 ( SSLv3Constants . client , verify_data ) ; } clientFinished = new Finished ( verify_data ) ; send ( clientFinished ) ; if ( isResuming ) { $F182009 ( session , System ) status = FINISHED ; } else { if $F181997 ( serverHello ) $F1210 ( computerReferenceVerifyDataTLS ) else { computerReferenceVerifyDataSSLv3 ( SSLv3Constants . server ) ; } status = NEED_UNWRAP ; } }
public static File removeExtension ( File file ) { $F22814 ( absolutePath , file ) if $F3578 ( absolutePath ) { return new File ( $F129389 ( absolutePath ) ) ; } else { return file ; } }
public void update $F72 { if ( bgIsOpaque ) { int w = Math . max ( getSize ( ) . width , minWidth ) ; int h = Math . max ( getSize ( ) . height , minHeight ) ; offScr = createImage ( w , h ) ; $F8249 ( offScr ) $F27516 ( g , offScr ) drawInto ( g ) ; repaint ( ) ; $F355 ( g ) } else $F5795 ( repaint ) }
public static final int readInt ( InputStream is ) throws IOException { return ( ( ( NUM00 & is . read ( ) ) < < NUM00 ) | ( NUM00 & is . read ( ) ) ) ; }
private void saveDynamicActions ( FacesContext context , StateContext stateContext , $F2100 ( stateMap ) ) { if $F14148 ( LOGGER , Level ) { $F47560 ( LOGGER ) } List < ComponentStruct > actions = stateContext . getDynamicActions ( ) ; HashMap < String , UIComponent > componentMap = stateContext . getDynamicComponents ( ) ; if ( actions != null ) { $F6689 $F719 ( savedActions , actions ) ; for ( ComponentStruct action : actions ) { UIComponent component = componentMap . get ( action . clientId ) ; if ( component == null && context . isProjectStage ( ProjectStage . Development ) ) { LOGGER . log ( Level . WARNING , NUM00 , action . clientId ) ; } if ( component != null ) { savedActions . add ( action . saveState ( context ) ) ; } } stateMap . put ( DYNAMIC_ACTIONS , savedActions ) ; } }
private Instance generateExample ( Instances format , Random randomG , SubspaceClusterDefinition cl , String cName ) { boolean makeInteger = cl . isInteger ( ) ; int num = - NUM00 ; Instance example = null ; int numAtts = m_NumAttributes ; if ( getClassFlag ( ) ) { numAtts ++ ; } example = new DenseInstance ( numAtts ) ; example . setDataset ( format ) ; $F8748 attributes = cl . getAttributes ( ) ; $F1986 minValue = cl . getMinValue ( ) ; $F1986 maxValue = cl . getMaxValue ( ) ; double value ; int clusterI = - NUM00 ; for ( $F119 ( i , m_NumAttributes ) ) { if ( attributes [ i ] ) { clusterI ++ ; num ++ ; if $F41536 ( isBoolean , i , isNominal ) { if ( minValue [ clusterI ] == maxValue [ clusterI ] ) { value = minValue [ clusterI ] ; } else { int numValues = ( int ) ( maxValue [ clusterI ] - minValue [ clusterI ] + NUM00 ) ; value = randomG . nextInt ( numValues ) ; value += minValue [ clusterI ] ; } } else { value = randomG . nextDouble ( ) * $F17318 ( maxValue , num , minValue ) + minValue [ num ] ; if ( makeInteger ) { $F142988 ( value , Math ) } } example . setValue ( i , value ) ; } else { example . setMissing ( i ) ; } } if ( getClassFlag ( ) ) { example . setClassValue ( cName ) ; } return example ; }
$F1 public long skip ( long n ) { $F20450 ( n ) if $F11984 ( idx , charSequence ) $F7629 int dest = ( int ) Math . min ( charSequence . length ( ) , idx + n ) ; int count = dest - idx ; idx = dest ; return count ; }
$F1 public void clear $F72 { if ( elementCount > NUM00 ) { elementCount = NUM00 ; $F17838 ( Arrays , elementData ) modCount ++ ; while ( referenceQueue . poll ( ) != null ) $F845 } }
public DefaultConsolePanel $F72 { setLayout ( new BorderLayout $F32532 ) ; textPane = new JTextArea $F72 ; textPane . setRows ( NUM00 ) ; textPane . setEditable ( _BOOL ) ; $F114437 ( jp , textPane ) add ( jp , BorderLayout . CENTER ) ; }
public void push $F72 { $F722 ( level ) cloned = _BOOL ; }
private static void loadPluginsFromClassLoader ( ClassLoader classLoader ) { ServiceLoader < GDSFactoryPlugin > pluginLoader = ServiceLoader . load ( GDSFactoryPlugin . class , classLoader ) ; for ( GDSFactoryPlugin plugin : pluginLoader ) { registerPlugin ( plugin ) ; } }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public String redo $F72 { if $F931 ( canRedo ) $F2455 m_nCurrentEditAction ++ ; UndoAction undoAction = m_undoStack . get ( m_nCurrentEditAction ) ; m_bNeedsUndoAction = _BOOL ; undoAction . redo ( ) ; m_bNeedsUndoAction = _BOOL ; return undoAction . getRedoMsg ( ) ; }
$F663 ( currTime , System , elapsed , startTime , ZOOM_TIME , Math , interpolator )
$F31780 ( value , builder , this )
$F1 public InetSocketAddress ipLocal $F72 { SocketChannel s = _channel ; if ( s != null ) { try { return ( InetSocketAddress ) s . getLocalAddress ( ) ; } $F12153 ( e ) } else $F1337 }
$F2304 private static NodeDisk findNodeDisk ( String diskId , List < NodeDisk > nodeDisks , String nodeName ) throws IOException { NodeDisk selected = null ; for ( NodeDisk nodeDisk : nodeDisks ) { if ( diskId . equals ( nodeDisk . getDiskRefId ( ) ) ) $F3468 ( selected , nodeDisk ) } if ( selected == null ) { String message = format ( NUM00 , nodeName , diskId ) ; throw new AbortException ( message ) ; } if ( selected . getNodeMountPoint ( ) == null ) { String message = format ( NUM00 , nodeName , diskId ) ; throw new AbortException ( message ) ; } return selected ; }
private int stripMultipartHeaders $F5474 ( b , offset ) { int i = NUM00 ; for ( i = offset ; i < b . length ; i ++ ) { if ( b [ i ] == NUM00 && b [ ++ i ] == NUM00 && b [ ++ i ] == NUM00 && b [ ++ i ] == NUM00 ) $F597 } return i + NUM00 ; }
void seek ( int position ) throws IOException { mDexFile . seek ( position ) ; }
$F1 public $F100709 columns $F72 { return columnList ; }
public static void writeFloat ( DataOutputStream dos , boolean isBigEndian , float val ) throws IOException { if ( ! isBigEndian ) { writeLittleEndianFloat ( dos , val ) ; } else { dos . writeFloat ( val ) ; } }
public void testFlipBitPositiveInside1 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static void main $F4374 ( args ) { $F4375 ( Log ) try { int num_user = NUM00 ; $F4377 ( calendar , Calendar ) boolean trace_flag = _BOOL ; CloudSim . init ( num_user , calendar , trace_flag ) ; $F15317 ( datacenter0 , createDatacenter ) DatacenterBroker broker = createBroker ( ) ; $F4379 ( brokerId , broker ) $F4385 ( vmlist ) int vmid = NUM00 ; int mips = NUM00 ; long size = NUM00 ; int ram = NUM00 ; long bw = NUM00 ; int pesNumber = NUM00 ; String vmm = NUM00 ; $F4394 ( vm1 , vmid , brokerId , mips , pesNumber , ram , bw , size , vmm ) vmid ++ ; Vm vm2 = new Vm ( vmid , brokerId , mips * NUM00 , pesNumber , ram , bw , size , vmm , new CloudletSchedulerTimeShared $F72 ) ; vmlist . add ( vm1 ) ; vmlist . add ( vm2 ) ; broker . submitVmList ( vmlist ) ; $F4400 ( cloudletList ) int id = NUM00 ; long length = NUM00 ; long fileSize = NUM00 ; long outputSize = NUM00 ; $F4405 ( utilizationModel ) $F4410 ( cloudlet1 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet1 . setUserId ( brokerId ) ; id ++ ; $F4410 ( cloudlet2 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet2 . setUserId ( brokerId ) ; cloudletList . add ( cloudlet1 ) ; cloudletList . add ( cloudlet2 ) ; broker . submitCloudletList ( cloudletList ) ; $F4413 ( broker , cloudlet1 , vm1 ) $F4413 ( broker , cloudlet2 , vm2 ) $F4417 ( CloudSim ) $F4420 ( newList , broker ) $F4421 ( CloudSim ) printCloudletList ( newList ) ; $F4375 ( Log ) } $F4424 ( e , Log ) }
public static Instruction _osrHelper ( Instruction barrier , GenerationContext gc ) { Instruction inst = OsrPoint . create ( YIELDPOINT_OSR , null , NUM00 ) ; gc . saveOSRBarrierForInst ( barrier , inst ) ; return inst ; }
protected void initializeState ( S current ) { InitializationUtils . initialize ( current ) ; if ( current . documentExpirationTimeMicros <= NUM00 ) { current . documentExpirationTimeMicros = ServiceUtils . computeExpirationTime ( ServiceUtils . DEFAULT_DOC_EXPIRATION_TIME_MICROS ) ; } }
$F1431 public InputStream fetchVolumeStats ( final Argument argument , $F87266 ( keyMap ) , int index ) throws VNXFilePluginException { $F973 ( _logger ) InputStream iStream = null ; List < QueryStats > statList = new ArrayList < QueryStats > $F72 ; try { $F2689 movers = ( $F2689 ) keyMap . get ( VNXFileConstants . MOVERLIST ) ; if $F45081 ( movers ) { for ( String moverID : movers ) { QueryStats queryStats = new QueryStats $F72 ; VolumeStatsSetQueryParams params = new VolumeStatsSetQueryParams $F72 ; params . setStatsSet ( VolumeStatsSetType . ALL ) ; params . setMover ( moverID ) ; queryStats . setVolumeStats ( params ) ; statList . add ( queryStats ) ; } iStream = _vnxFileInputRequestBuilder . getMultiRequestQueryStatsPacket ( statList ) ; } else $F21338 ( _logger ) } catch ( JAXBException jaxbException ) { throw new VNXFilePluginException $F73374 ( jaxbException ) ; } return iStream ; }
private static boolean isDirectory ( URL url ) { $F323682 ( file , url ) return $F350335 ( file ) ; }
$F1 public final String readUTF $F72 throws IOException { return dis . readUTF ( ) ; }
$F5466 public static NetworkParameters fromID ( String id ) { if $F1238 ( id , ID_MAINNET ) $F1522 ( MainNetParams ) else if $F1238 ( id , ID_TESTNET ) $F1522 ( TestNet3Params ) else if $F1238 ( id , ID_UNITTESTNET ) $F1522 ( UnitTestParams ) else $F1337 }
final synchronized void releaseSocket $F72 { running = _BOOL ; $F7589 ( sender ) $F725 ( outboundMessages ) $F39863 ( socket ) maximumTransmissionUnit = NUM00 ; }
public boolean addPart ( PduPart part ) { $F160092 ( part ) putPartToMaps ( part ) ; $F20805 ( mParts , part ) }
public String codeOwner ( List < CodeOwner > codeOwners ) { long currentUnix = $F165576 ( System ) ; double best = NUM00 ; String owner = NUM00 ; for ( CodeOwner codeOwner : codeOwners ) { double age = ( currentUnix - codeOwner . getMostRecentUnixCommitTimestamp ( ) ) / NUM00 / NUM00 ; double calc = codeOwner . getNoLines ( ) / Math . pow ( ( age ) , NUM00 ) ; if ( calc > best ) { best = calc ; $F32928 ( owner , codeOwner ) } } return owner ; }
private ArrayList < CellRecord > processNeighbors ( final CellRecord serving , final PositionRecord cellPos ) { final ArrayList < CellRecord > $F204 ( neighbors ) ; final ArrayList < NeighboringCellInfo > neighboringCellInfos = ( ArrayList < NeighboringCellInfo > ) mTelephonyManager . getNeighboringCellInfo ( ) ; if ( serving == null ) $F31008 ( Log , TAG , neighbors ) if ( neighboringCellInfos == null ) { $F1594 ( Log , TAG ) return neighbors ; } for ( final NeighboringCellInfo ci : neighboringCellInfos ) { final boolean skip = ! isValidNeigbor ( ci ) ; if ( ! skip ) { final CellRecord neighbor = new CellRecord ( mSessionId ) ; neighbor . setOpenBmapTimestamp ( cellPos . getOpenBmapTimestamp ( ) ) ; neighbor . setBeginPosition ( cellPos ) ; neighbor . setEndPosition ( cellPos ) ; neighbor . setIsServing ( _BOOL ) ; neighbor . setIsNeighbor ( _BOOL ) ; neighbor . setMnc ( serving . getMnc ( ) ) ; neighbor . setMcc ( serving . getMcc ( ) ) ; neighbor . setOperator ( serving . getOperator ( ) ) ; neighbor . setOperatorName ( serving . getOperatorName ( ) ) ; final int networkType = ci . getNetworkType ( ) ; neighbor . setNetworkType ( networkType ) ; if ( networkType == TelephonyManager . NETWORK_TYPE_GPRS || networkType == TelephonyManager . NETWORK_TYPE_EDGE ) { neighbor . setIsCdma ( _BOOL ) ; neighbor . setLogicalCellId ( ci . getCid ( ) ) ; neighbor . setArea ( ci . getLac ( ) ) ; neighbor . setStrengthdBm ( - NUM00 + NUM00 * ci . getRssi ( ) ) ; neighbor . setStrengthAsu ( ci . getRssi ( ) ) ; } else if ( networkType == TelephonyManager . NETWORK_TYPE_UMTS || networkType == TelephonyManager . NETWORK_TYPE_HSDPA || networkType == TelephonyManager . NETWORK_TYPE_HSUPA || networkType == TelephonyManager . NETWORK_TYPE_HSPA ) { neighbor . setIsCdma ( _BOOL ) ; neighbor . setPsc ( ci . getPsc ( ) ) ; neighbor . setStrengthdBm ( ci . getRssi ( ) ) ; final int asu = ( int ) Math . round ( ( ci . getRssi ( ) + NUM00 ) / NUM00 ) ; neighbor . setStrengthAsu ( asu ) ; } else if ( networkType == TelephonyManager . NETWORK_TYPE_CDMA ) { neighbor . setIsCdma ( _BOOL ) ; } neighbors . add ( neighbor ) ; } } return neighbors ; }
public Map read ( SSOToken token , String objName ) throws $F16995 { $F20313 ( objName ) $F7876 ( objKey , objName ) Map attrMap = null ; mRWLock . readRequest ( ) ; try { $F7601 ( filepath , mNameMap , objKey ) if ( filepath == null ) { if $F6299 ( mDebug ) $F235771 ( mDebug , objName ) } else { $F1705 ( filehandle , filepath ) Properties props = null ; try { props = loadProperties ( filehandle , objName ) ; } catch ( ServiceNotFoundException e ) $F845 if ( props != null ) { $F195097 ( attrMap ) ; $F80571 ( keys , props ) ; while $F1444 ( keys ) { $F14952 ( key , keys ) $F7601 ( vals , props , key ) if $F23754 ( vals ) { attrMap . put ( key , toValSet ( key , vals ) ) ; } } } } } finally { mRWLock . readDone ( ) ; } return attrMap ; }
public static double parseDouble ( String s ) { $F1382 ( s ) $F115 ( length , s ) if ( length == NUM00 ) $F79286 ( invalidReal , s , _BOOL ) char last = s . charAt ( length - NUM00 ) ; if $F37111 ( last ) $F8587 ( parseName , s , _BOOL ) StringExponentPair info = initialParse ( s , length , _BOOL ) ; if ( info . infinity || info . zero ) { return info . specialValue ( ) ; } double result = parseDblImpl ( info . s , ( int ) info . e ) ; if ( Double . doubleToLongBits ( result ) == NUM00 ) $F79286 ( invalidReal , s , _BOOL ) return info . negative ? - result : result ; }
public byte readByte $F72 throws IOException { $F1544 ( v , dataInput ) offset += NUM00 ; available -= NUM00 ; return v ; }
$F194408 ( n , d , i , sb , j , rGen , points )
private String verifyRestoreCode ( String restoreCode , String code ) { $F4158 ( code ) $F4158 ( restoreCode ) boolean validCode = passwordManager . matches ( code , restoreCode ) ; return validCode ? null : NUM00 + code + NUM00 + restoreCode + NUM00 ; }
public static void appendPaddedInteger ( StringBuffer buf , long value , int size ) { $F29204 ( intValue , value ) if ( intValue == value ) { appendPaddedInteger ( buf , intValue , size ) ; } else if ( size <= NUM00 ) { $F42779 ( buf , Long , value ) } else { if ( value < NUM00 ) { $F84 ( buf ) if ( value != Long . MIN_VALUE ) $F52810 ( value ) else { for ( ; size > NUM00 ; size -- ) $F86 ( buf ) $F84 ( buf ) $F665 } } int digits = ( int ) $F159551 ( Math , value , LOG_10 ) + NUM00 ; for ( ; size > digits ; size -- ) $F86 ( buf ) $F42779 ( buf , Long , value ) } }
$F1 public void flush $F72 { if $F5973 ( queue ) { List < AlertStreamEvent > $F204 ( events ) ; queue . drainTo ( events ) ; $F22620 ( events ) $F11057 ( LOG , events ) } lastFlushTime . set ( System . currentTimeMillis ( ) ) ; }
$F1 public void addUndoPoint $F72 { File tempFile ; ObjectOutputStream oos ; $F933 ( isUndoEnabled ) if $F89491 ( getInstances ) { try { tempFile = File . createTempFile ( NUM00 , null ) ; $F60829 ( tempFile ) oos = $F20341 ( tempFile ) ; oos . writeObject ( getInstances ( ) ) ; $F1206 ( oos ) $F59 ( oos ) m_UndoList . add ( tempFile ) ; } $F1516 ( e ) } }
public final void addChildNode ( RowRegexExprNode childNode ) $F207 ( childNodes , childNode )
private $F3803 makeList $F74419 ( strings ) { $F67013 ( result ) $F42002 ( string , strings , result ) return result ; }
protected boolean isLevelEnabled ( int logLevel ) { return ( logLevel >= currentLogLevel ) ; }
public int numberOfShardsWithState ( ShardRoutingState ... states ) { int count = NUM00 ; for ( ShardRouting shardEntry : this ) { for ( ShardRoutingState state : states ) { if ( shardEntry . state ( ) == state ) { count ++ ; } } } return count ; }
$F1 public void notifyCommit ( final long commitTime ) { $F790 ( lock ) try { updateReleaseTimeForBareCommit ( commitTime ) ; } $F796 ( lock ) }
public static int showYesNoCancelQuestion ( final Component parent , final String msg ) { return JOptionPane . showConfirmDialog ( isIconified ( parent ) ? null : parent , msg , System . getProperty ( DEFAULT_WINDOW_TITLE_PROPERTY ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE ) ; }
public static String quantityplnounCreature $F66432 ( quantity , noun ) { if $F3057 ( noun ) { final String end = plnounCreature ( quantity , noun ) ; return Integer . toString ( quantity ) + NUM00 + end ; } return quantityplnoun ( quantity , noun ) ; }
static int copyBytes ( OutputStream os , InputStream is , $F96 ioBuffer , int maxSize ) throws IOException { int totalSize = NUM00 ; while ( totalSize < maxSize ) { int rc = is . read ( ioBuffer , NUM00 , Math . min ( maxSize - totalSize , ioBuffer . length ) ) ; $F76065 ( rc ) $F11584 ( os , ioBuffer , rc ) totalSize += rc ; } return totalSize ; }
public int doFinal $F5474 ( out , outOff ) throws DataLengthException , IllegalStateException , InvalidCipherTextException { try { int resultLen = NUM00 ; if ( outOff + bufOff > out . length ) { throw new OutputLengthException $F580 ; } if ( bufOff != NUM00 ) { if ( ! partialBlockOkay ) $F58352 $F58355 ( cipher , buf ) resultLen = bufOff ; bufOff = NUM00 ; $F6483 ( System , buf , out , outOff , resultLen ) } return resultLen ; } $F49978 ( reset ) }
void composeMessage ( final Mail mail , final String textContent , final String htmlContent , final $F48568 attachments , $F20109 ( mailTemplateChain ) , final String shopCode , final String locale , final String templateName ) throws MessagingException , ClassNotFoundException , IOException { if ( textContent == null || htmlContent == null ) { if ( textContent != null ) { mail . setTextVersion ( textContent ) ; } if ( htmlContent != null ) { mail . setHtmlVersion ( htmlContent ) ; inlineResources ( mail , htmlContent , mailTemplateChain , shopCode , locale , templateName ) ; addAttachments ( mail , attachments ) ; } } else { mail . setTextVersion ( textContent ) ; mail . setHtmlVersion ( htmlContent ) ; inlineResources ( mail , htmlContent , mailTemplateChain , shopCode , locale , templateName ) ; addAttachments ( mail , attachments ) ; } }
private void handleLaunchMessageEvent ( MessageEvent messageEvent ) { DataMap dataMap = DataMap . fromByteArray ( messageEvent . getData ( ) ) ; boolean relaunchIfRunning = dataMap . getBoolean ( KEY_START_ACTIVITY_RELAUNCH , _BOOL ) ; DataMap bundleData = dataMap . getDataMap ( KEY_START_ACTIVITY_BUNDLE ) ; $F19101 ( activityName , dataMap , KEY_START_ACTIVITY_NAME ) Bundle bundle = null ; if ( bundleData != null ) { bundle = bundleData . toBundle ( ) ; } if ( activityName == null ) { for ( WearConsumer consumer : mWearConsumers ) { consumer . onWearableApplicationLaunchRequestReceived ( bundle , relaunchIfRunning ) ; } } else { try { if $F20899 ( TextUtils , activityName ) { $F96883 ( targetActivity , Class , activityName ) Intent intent = new Intent ( mContext , targetActivity ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; if ( bundle != null ) { intent . putExtras ( bundle ) ; } if ( ! mAppForeground || relaunchIfRunning ) { mContext . startActivity ( intent ) ; } } else $F13955 ( Log , TAG ) } catch ( ClassNotFoundException e ) $F17555 ( Log , TAG , e ) } }
$F1 public void close $F72 throws IOException { closed = _BOOL ; $F87417 ( def ) $F59 ( in ) }
public static String escapeColonInString ( String str ) { if ( str != null ) { if $F48846 ( str ) { $F2899 ( str ) } } return str ; }
protected void tearDown $F72 throws Exception { File file ; $F24661 ( file , m_ExportFilenameData ) $F81294 ( file ) m_ExportFilenameData = null ; $F173385 ( super ) }
private static SAXParserFactory createSAXParserFactory $F72 { try { $F2218 ( factory , SAXParserFactory ) try { SAXParserFactory secureFactory = SecureGenericXMLFactory . getSAXParserFactory ( factory ) ; secureFactory . newSAXParser ( ) ; factory = secureFactory ; } catch ( ParserConfigurationException e ) $F845 factory . setNamespaceAware ( _BOOL ) ; return factory ; } catch ( SAXException e ) $F54146 ( e ) }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
public static void saveAsXML ( NSObject root , File out ) throws IOException { $F4924 ( parent , out ) if $F15930 ( parent ) $F14525 $F4649 ( fous , out ) saveAsXML ( root , fous ) ; $F59 ( fous ) }
public static boolean containsChroot ( String zkHost ) $F132975 ( zkHost )
public final void lazySet ( int newValue ) { unsafe . putOrderedInt ( this , valueOffset , newValue ) ; }
public Feature ( String line , Map cpStr2Int , Map lbStr2Int , Map fmap ) { $F17727 ( strTok , line ) $F17729 ( len , strTok ) $F8095 ( strIdStr , strTok ) $F24697 ( idx , Integer , strTok ) float val = NUM00 ; double wgt = $F254241 ( Double , strTok ) ; $F17727 ( strIdTok , strIdStr ) $F8095 ( prefix , strIdTok ) if ( prefix . compareToIgnoreCase ( NUM00 ) == NUM00 ) { Integer yInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; Integer ypInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; if ( yInt != null && ypInt != null ) { eFeature1Init ( yInt . intValue ( ) , ypInt . intValue ( ) ) ; } } else if ( prefix . compareToIgnoreCase ( NUM00 ) == NUM00 ) { Integer yInt = ( Integer ) lbStr2Int . get ( strIdTok . nextToken ( ) ) ; Integer cpInt = ( Integer ) cpStr2Int . get ( strIdTok . nextToken ( ) ) ; if ( yInt != null && cpInt != null ) { sFeature1Init ( yInt . intValue ( ) , cpInt . intValue ( ) ) ; } } this . idx = idx ; this . val = val ; this . wgt = wgt ; strId2IdxAdd ( fmap ) ; }
public static int patchFast ( InputStream oldInputStream , InputStream diffInputStream , File newFile ) throws IOException { $F1933 ( oldInputStream , RETURN_OLD_FILE_ERR ) $F1933 ( newFile , RETURN_NEW_FILE_ERR ) $F1933 ( diffInputStream , RETURN_DIFF_FILE_ERR ) $F96 oldBytes = BSUtil . inputStreamToByte ( oldInputStream ) ; $F96 diffBytes = BSUtil . inputStreamToByte ( diffInputStream ) ; $F96 newBytes = patchFast ( oldBytes , oldBytes . length , diffBytes , diffBytes . length , NUM00 ) ; $F12015 ( newOutputStream , newFile ) $F40754 ( newOutputStream , newBytes ) return RETURN_SUCCESS ; }
public static $F96 readFullyNoClose ( InputStream in ) throws IOException { $F1538 ( bytes ) $F12496 ( buffer ) int count ; $F29757 ( count , in , buffer , bytes ) $F11316 ( bytes ) }
public ContentStorage ( ContentStorageBO contentStorageBO , List < GenericPackage > genericPackageList , List < EssenceContainerData > essenceContainerDataList ) { this . contentStorageBO = contentStorageBO ; this . genericPackageList = Collections . unmodifiableList ( genericPackageList ) ; this . essenceContainerDataList = Collections . unmodifiableList ( essenceContainerDataList ) ; }
public static String decode $F97 ( utf8 ) throws CharacterCodingException { return decode ( ByteBuffer . wrap ( utf8 ) , _BOOL ) ; }
public ScaleIOVolume queryVolume ( String volId ) throws Exception { ClientResponse response = get ( URI . create ( ScaleIOConstants . getVolumeURI ( volId ) ) ) ; return getResponseObject ( ScaleIOVolume . class , response ) ; }
public void removeEventListener ( SIPDialogEventListener oldListener ) $F106 ( eventListeners , oldListener )
protected static Object primitiveArrayPut ( Object self , int idx , Object newValue ) { Array . set ( self , normaliseIndex ( idx , Array . getLength ( self ) ) , newValue ) ; return newValue ; }
public void toAxisAngle ( Vector4f output ) { if $F44803 ( getW ) $F5795 ( normalise ) float angle = NUM00 * ( float ) Math . toDegrees ( Math . acos ( getW ( ) ) ) ; float x ; float y ; float z ; float s = ( float ) Math . sqrt ( NUM00 - getW ( ) * getW ( ) ) ; if ( s < NUM00 ) $F7306 ( x , points , y , z ) else { x = points [ NUM00 ] / s ; y = points [ NUM00 ] / s ; z = points [ NUM00 ] / s ; } output . points [ NUM00 ] = x ; output . points [ NUM00 ] = y ; output . points [ NUM00 ] = z ; output . points [ NUM00 ] = angle ; }
$F202347 ( mRootDirectory , VolleyLog , files , file , fis , entry , CacheHeader , putEntry )
private QNameMap < BindingExpression > processBindingAttributes ( Node node ) { QNameMap < BindingExpression > attributeBindings = null ; for ( Iterator < QName > i = node . getAttributeNames ( ) ; i != null && i . hasNext ( ) ; ) { QName qname = i . next ( ) ; String value = ( String ) node . getAttributeValue ( qname ) ; BindingExpression be = textParser . parseBindingExpression ( value , node . beginLine ) ; if ( be != null ) { if ( attributeBindings == null ) { attributeBindings = new QNameMap < BindingExpression > $F72 ; } attributeBindings . put ( qname , be ) ; $F7042 ( i ) } } return attributeBindings ; }
public void load ( String fileName ) throws IOException { BufferedReader bfr = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileName ) , NUM00 ) ) ; if ( bList == null ) bList = new Vector ( DEFAULT_INCREMENT , DEFAULT_INCREMENT ) ; $F27015 ( line , bfr ) if $F12703 ( line ) { $F3108 ( line ) $F808 ( parts ) parts = $F289440 ( line ) ; fromDir = parts [ NUM00 ] ; fromExt = parts [ NUM00 ] ; } else if ( ! $F11809 ( line ) ) add ( line ) ; while $F443 ( line , bfr ) { if ( ! $F11809 ( line ) ) add ( line ) ; } }
private void verifyRegisterDefs ( String where ) { DefUse . computeDU ( this ) ; for ( Register r = regpool . getFirstSymbolicRegister ( ) ; r != null ; r = r . getNext ( ) ) { if ( r . isPhysical ( ) ) $F598 if ( r . useList != null ) { if ( r . defList == null ) { printInstructions ( ) ; verror ( where , NUM00 + r + NUM00 ) ; } } } }
$F1431 public static PartListing parseListParts ( InputStream responseBody ) throws ResponseParseException { try { Element root = getXmlRootElement ( responseBody ) ; PartListing partListing = new PartListing $F72 ; partListing . setBucketName ( root . getChildText ( NUM00 ) ) ; partListing . setKey ( root . getChildText ( NUM00 ) ) ; partListing . setUploadId ( root . getChildText ( NUM00 ) ) ; partListing . setStorageClass ( root . getChildText ( NUM00 ) ) ; partListing . setMaxParts ( Integer . valueOf ( root . getChildText ( NUM00 ) ) ) ; partListing . setTruncated ( Boolean . valueOf ( root . getChildText ( NUM00 ) ) ) ; if $F105855 ( root ) { $F454660 ( partNumberMarker , root ) if ( ! isNullOrEmpty ( partNumberMarker ) ) { partListing . setPartNumberMarker ( Integer . valueOf ( partNumberMarker ) ) ; } } if $F105855 ( root ) { $F454660 ( nextPartNumberMarker , root ) if ( ! isNullOrEmpty ( nextPartNumberMarker ) ) { partListing . setNextPartNumberMarker ( Integer . valueOf ( nextPartNumberMarker ) ) ; } } $F196412 ( partElems , root ) for ( Element elem : partElems ) { PartSummary ps = new PartSummary $F72 ; ps . setPartNumber ( Integer . valueOf ( elem . getChildText ( NUM00 ) ) ) ; ps . setLastModified ( DateUtil . parseIso8601Date ( elem . getChildText ( NUM00 ) ) ) ; ps . setETag ( trimQuotes ( elem . getChildText ( NUM00 ) ) ) ; ps . setSize ( Integer . valueOf ( elem . getChildText ( NUM00 ) ) ) ; partListing . addPart ( ps ) ; } return partListing ; } $F105866 ( e ) }
private static void findSnap ( Collection < ConstraintWidget > widgets , ConstraintWidget widget , SnapCandidate candidate , boolean checkHorizontal ) { ArrayList < ConstraintAnchor > anchorsSource = widget . getAnchors ( ) ; for ( ConstraintWidget w : widgets ) { $F83608 ( w , widget ) ArrayList < ConstraintAnchor > anchorsTarget = w . getAnchors ( ) ; for ( ConstraintAnchor as : anchorsSource ) { if ( checkHorizontal && as . isVerticalAnchor ( ) ) $F1448 else if ( ! checkHorizontal && ! as . isVerticalAnchor ( ) ) $F1448 for ( ConstraintAnchor at : anchorsTarget ) { snapCheck ( as , at , candidate , CONNECTION_SLOPE ) ; } } } }
protected String padString $F123257 ( s , length , left ) { String result ; int i ; result = s ; for ( i = s . length ( ) ; i < length ; i ++ ) { if ( left ) $F21679 ( result ) else $F2365 ( result ) } if ( ( length > NUM00 ) && $F14791 ( result , length ) ) $F45800 ( result , length ) return result ; }
public static < C extends $F65474 > List < Range $F37574 > remove ( Range $F37574 self , Range $F37574 other ) { if ( other == null || ! self . isConnected ( other ) ) { return Collections . singletonList ( self ) ; } Range $F37574 share = self . intersection ( other ) ; if $F2979 ( share ) { return Collections . singletonList ( self ) ; } List < Range $F37574 > ret = Lists . newArrayList ( ) ; if ( ! self . hasLowerBound ( ) ) { if ( share . hasLowerBound ( ) ) { if ( share . lowerBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . lessThan ( share . lowerEndpoint ( ) ) ) ; } else { ret . add ( Range . atMost ( share . lowerEndpoint ( ) ) ) ; } } } else { if ( self . lowerEndpoint ( ) != share . lowerEndpoint ( ) ) { if ( self . lowerBoundType ( ) == BoundType . CLOSED ) { if ( share . lowerBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . closedOpen ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; } else { ret . add ( Range . closed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; } } else { if ( share . lowerBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . open ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; } else { ret . add ( Range . openClosed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; } } } else { if ( self . lowerBoundType ( ) == BoundType . CLOSED && share . lowerBoundType ( ) == BoundType . OPEN ) { ret . add ( Range . closed ( self . lowerEndpoint ( ) , share . lowerEndpoint ( ) ) ) ; } } } if ( ! self . hasUpperBound ( ) ) { if ( share . hasUpperBound ( ) ) { if ( share . upperBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . greaterThan ( share . upperEndpoint ( ) ) ) ; } else { ret . add ( Range . atLeast ( share . upperEndpoint ( ) ) ) ; } } } else { if ( self . upperEndpoint ( ) != share . upperEndpoint ( ) ) { if ( self . upperBoundType ( ) == BoundType . CLOSED ) { if ( share . upperBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . openClosed ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; } else { ret . add ( Range . closed ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; } } else { if ( share . upperBoundType ( ) == BoundType . CLOSED ) { ret . add ( Range . open ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; } else { ret . add ( Range . closedOpen ( share . upperEndpoint ( ) , self . upperEndpoint ( ) ) ) ; } } } else { if ( self . upperBoundType ( ) == BoundType . CLOSED && share . upperBoundType ( ) == BoundType . OPEN ) { ret . add ( Range . closed ( self . upperEndpoint ( ) , share . upperEndpoint ( ) ) ) ; } } } return ret ; }
void recomposeKeys ( KeyDeclaration keyDecl ) $F6659 ( m_keyDecls , keyDecl )
public $F4203 JsonArray $F4203 createListDtoFromJson ( Reader json , $F20474 dtoInterface ) throws IOException { final $F20477 dtoProvider = getDtoProvider ( dtoInterface ) ; final List $F115413 list ; try { list = gson . fromJson ( json , listTypeCache . get ( $F111365 ) ) ; } catch ( JsonSyntaxException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof IOException ) $F204796 ( cause ) throw e ; } final $F5675 $F719 ( result , list ) ; for ( JsonElement e : list ) { result . add ( dtoProvider . fromJson ( e ) ) ; } return new JsonArrayImpl $F200 ( result ) ; }
private View fillFromTop ( int nextTop ) { mFirstPosition = Math . min ( mFirstPosition , - NUM00 ) ; $F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) return fillDown ( mFirstPosition , nextTop ) ; }
public void connectionOpen $F72 { $F790 ( lock ) try { $F973 ( log ) connectionOpen = _BOOL ; } $F796 ( lock ) }
public static float rotateY $F780 ( pX , pY , cX , cY , angleInDegrees ) { $F9291 ( angle , Math , angleInDegrees ) return ( float ) ( Math . sin ( angle ) * ( pX - cX ) + Math . cos ( angle ) * ( pY - cY ) + cY ) ; }
public void list ( PrintStream out ) { properties . list ( out ) ; }
protected LayerPane findSelectedPane $F72 { for ( LayerPane pane : getPanes ( ) ) { if $F31483 ( pane ) { return pane ; } } $F1274 }
private final void scaleNoiseArray ( final int seaLevel ) { for ( $F119 ( x , X_SECTIONS ) ) { for ( $F119 ( z , Z_SECTIONS ) ) { for ( $F119 ( y , Y_SECTIONS ) ) { this . rawDensity [ x ] [ y ] [ z ] *= MAX_ELEV ; this . rawDensity [ x ] [ y ] [ z ] += seaLevel ; } } } }
public $F131 toArray $F72 { $F91915 ( al ) $F91919 ( p , first , succ , item , al ) $F3537 ( al ) }
public MicroservicesRunner ( int ... ports ) { configureTransport ( ports ) ; }
public static boolean deleteContents ( File directory ) { $F5459 ( files , directory ) boolean success = _BOOL ; if ( files != null ) { for ( File file : files ) { success &= deleteRecursively ( file ) ; } } return success ; }
private void handleResponse ( AvsResponse response ) { mEventManager . post ( new CommandEvent ( CommandEvent . TYPE_COMMAND_SEARCHING , KEYWORD_ALEXA ) ) ; if ( response != null ) { for ( $F5373 ( i , response ) ) { if ( response . get ( i ) instanceof AvsReplaceAllItem || response . get ( i ) instanceof AvsReplaceEnqueuedItem ) { $F725 ( mAvsQueue ) response . remove ( i ) ; } } Timber . i ( $F2310 ( response ) ) ; mAvsQueue . addAll ( response ) ; } checkQueue ( ) ; }
void mergesort ( Vector a , Vector b , int l , int r , XPathContext support ) throws TransformerException { if $F117366 ( r , l ) { $F62159 ( m , r , l ) mergesort ( a , b , l , m , support ) ; mergesort ( a , b , m + NUM00 , r , support ) ; int i , j , k ; for ( i = m ; i >= l ; i -- ) { if $F6389 ( i , b ) b . insertElementAt ( a . elementAt ( i ) , i ) ; else b . setElementAt ( a . elementAt ( i ) , i ) ; } i = l ; for ( j = ( m + NUM00 ) ; j <= r ; j ++ ) { if ( r + m + NUM00 - j >= b . size ( ) ) b . insertElementAt ( a . elementAt ( j ) , r + m + NUM00 - j ) ; else b . setElementAt ( a . elementAt ( j ) , r + m + NUM00 - j ) ; } j = r ; int compVal ; for ( k = l ; k <= r ; k ++ ) { if ( i == j ) compVal = - NUM00 ; else compVal = compare ( $F82324 ( b , i ) , $F82324 ( b , j ) , NUM00 , support ) ; if ( compVal < NUM00 ) { a . setElementAt ( b . elementAt ( i ) , k ) ; i ++ ; } else if ( compVal > NUM00 ) { a . setElementAt ( b . elementAt ( j ) , k ) ; j -- ; } } } }
public static $F3803 toList ( CharSequence self ) { $F1822 ( s , self ) $F1749 ( size , s ) $F3803 $F71141 ( answer , size ) ; for ( $F119 ( i , size ) ) { answer . add ( $F10818 ( s , i ) ) ; } return answer ; }
void appendArrayGenericType ( StringBuilder sb , $F24901 types ) { if $F3305 ( types ) $F70234 ( appendGenericType , sb , types , i ) }
public static int decode_residual ( H264Context h , GetBitContext gb , $F5078 block_base , int block_offset , int n , $F2027 scantable_base , int scantable_offset , $F2469 qmul_base , int qmul_offset , int max_coeff ) { final $F2027 coeff_token_table_index = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F11844 ( level ) int zeros_left , coeff_token , total_coeff , i , trailing_ones , run_before ; if ( n >= H264Context . CHROMA_DC_BLOCK_INDEX ) { coeff_token = gb . get_vlc2 ( chroma_dc_coeff_token_vlc . table_base , chroma_dc_coeff_token_vlc . table_offset , H264Context . CHROMA_DC_COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; total_coeff = coeff_token > > NUM00 ; } else { if ( n == H264Context . LUMA_DC_BLOCK_INDEX ) { total_coeff = pred_non_zero_count ( h , NUM00 ) ; coeff_token = gb . get_vlc2 ( coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_base , coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_offset , H264Context . COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; total_coeff = coeff_token > > NUM00 ; } else { total_coeff = pred_non_zero_count ( h , n ) ; coeff_token = gb . get_vlc2 ( coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_base , coeff_token_vlc [ coeff_token_table_index [ total_coeff ] ] . table_offset , H264Context . COEFF_TOKEN_VLC_BITS , NUM00 , NUM00 ) ; total_coeff = coeff_token > > NUM00 ; } } h . non_zero_count_cache [ H264Context . scan8 [ n ] ] = total_coeff ; $F94561 ( total_coeff ) $F81007 ( total_coeff , max_coeff ) trailing_ones = coeff_token & NUM00 ; i = ( int ) gb . show_bits ( NUM00 ) ; gb . skip_bits ( trailing_ones ) ; level [ NUM00 ] = NUM00 - $F84702 ( i ) ; level [ NUM00 ] = NUM00 - ( ( i & NUM00 ) ) ; level [ NUM00 ] = NUM00 - $F74254 ( i ) ; if ( trailing_ones < total_coeff ) { int mask , prefix ; int suffix_length = ( ( total_coeff > NUM00 ) ? NUM00 : NUM00 ) & ( ( trailing_ones < NUM00 ) ? NUM00 : NUM00 ) ; int bitsi = ( int ) gb . show_bits ( LEVEL_TAB_BITS ) ; int level_code = cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ; gb . skip_bits ( cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ) ; if ( level_code >= NUM00 ) { prefix = level_code - NUM00 ; if ( prefix == LEVEL_TAB_BITS ) prefix += get_level_prefix ( gb ) ; if ( prefix < NUM00 ) { if ( suffix_length != NUM00 ) level_code = ( int ) ( ( prefix < < NUM00 ) + gb . get_bits1 ( NUM00 ) ) ; else level_code = prefix ; } else if ( prefix == NUM00 ) { if ( suffix_length != NUM00 ) level_code = ( int ) ( ( prefix < < NUM00 ) + gb . get_bits1 ( NUM00 ) ) ; else level_code = ( int ) ( prefix + gb . get_bits ( NUM00 , NUM00 ) ) ; } else { level_code = NUM00 + ( int ) ( gb . get_bits ( prefix - NUM00 , NUM00 ) ) ; if ( prefix >= NUM00 ) { if ( prefix > NUM00 + NUM00 ) $F7629 level_code += ( NUM00 < < ( prefix - NUM00 ) ) - NUM00 ; } } if ( trailing_ones < NUM00 ) level_code += NUM00 ; suffix_length = NUM00 ; mask = - ( level_code & NUM00 ) ; level [ trailing_ones ] = ( ( ( NUM00 + level_code ) > > NUM00 ) ^ mask ) - mask ; } else { level_code += ( ( level_code > > NUM00 ) | NUM00 ) & - ( ( trailing_ones < NUM00 ) ? NUM00 : NUM00 ) ; suffix_length = NUM00 + ( ( ( NUM00 & ( level_code + NUM00 ) ) > NUM00 ) ? NUM00 : NUM00 ) ; level [ trailing_ones ] = level_code ; } for ( i = trailing_ones + NUM00 ; i < total_coeff ; i ++ ) { final $F2027 suffix_limit = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , Integer . MAX_VALUE } ; bitsi = ( int ) gb . show_bits ( LEVEL_TAB_BITS ) ; level_code = cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ; gb . skip_bits ( cavlc_level_tab [ suffix_length ] [ bitsi ] [ NUM00 ] ) ; if ( level_code >= NUM00 ) { prefix = level_code - NUM00 ; if ( prefix == LEVEL_TAB_BITS ) { prefix += get_level_prefix ( gb ) ; } if ( prefix < NUM00 ) { level_code = ( int ) ( ( prefix < < suffix_length ) + gb . get_bits ( suffix_length , NUM00 ) ) ; } else { level_code = ( int ) ( ( NUM00 < < suffix_length ) + gb . get_bits ( prefix - NUM00 , NUM00 ) ) ; if ( prefix >= NUM00 ) level_code += ( NUM00 < < ( prefix - NUM00 ) ) - NUM00 ; } mask = - ( level_code & NUM00 ) ; level_code = ( ( ( NUM00 + level_code ) > > NUM00 ) ^ mask ) - mask ; } level [ i ] = level_code ; suffix_length += ( ( ( NUM00 & ( suffix_limit [ suffix_length ] + level_code ) ) > ( NUM00 * suffix_limit [ suffix_length ] ) ) ? NUM00 : NUM00 ) ; } } if ( total_coeff == max_coeff ) zeros_left = NUM00 ; else { if ( n >= H264Context . CHROMA_DC_BLOCK_INDEX ) { zeros_left = gb . get_vlc2 ( chroma_dc_total_zeros_vlc [ total_coeff - NUM00 ] . table_base , chroma_dc_total_zeros_vlc [ total_coeff - NUM00 ] . table_offset , H264Context . CHROMA_DC_TOTAL_ZEROS_VLC_BITS , NUM00 , NUM00 ) ; } else { zeros_left = gb . get_vlc2 ( total_zeros_vlc [ total_coeff - NUM00 ] . table_base , total_zeros_vlc [ total_coeff - NUM00 ] . table_offset , H264Context . TOTAL_ZEROS_VLC_BITS , NUM00 , NUM00 ) ; } } scantable_offset += zeros_left + total_coeff - NUM00 ; if ( scantable_offset < NUM00 ) { $F2027 new_scantable_base = new int [ scantable_base . length + ( - scantable_offset ) ] ; System . arraycopy ( scantable_base , NUM00 , new_scantable_base , - scantable_offset , scantable_base . length ) ; scantable_base = new_scantable_base ; scantable_offset = NUM00 ; } if ( n >= H264Context . LUMA_DC_BLOCK_INDEX ) { block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ NUM00 ] ; for ( i = NUM00 ; i < total_coeff && zeros_left > NUM00 ; i ++ ) { if ( zeros_left < NUM00 ) { run_before = gb . get_vlc2 ( run_vlc [ zeros_left - NUM00 ] . table_base , run_vlc [ zeros_left - NUM00 ] . table_offset , H264Context . RUN_VLC_BITS , NUM00 , NUM00 ) ; } else { run_before = gb . get_vlc2 ( run7_vlc . table_base , run7_vlc . table_offset , H264Context . RUN7_VLC_BITS , NUM00 , NUM00 ) ; } zeros_left -= run_before ; scantable_offset -= NUM00 + run_before ; block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ i ] ; } for ( ; i < total_coeff ; i ++ ) { scantable_offset -- ; block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) level [ i ] ; } } else { block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ NUM00 ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; for ( i = NUM00 ; i < total_coeff && zeros_left > NUM00 ; i ++ ) { if ( zeros_left < NUM00 ) { run_before = gb . get_vlc2 ( run_vlc [ zeros_left - NUM00 ] . table_base , run_vlc [ zeros_left - NUM00 ] . table_offset , H264Context . RUN_VLC_BITS , NUM00 , NUM00 ) ; } else { run_before = gb . get_vlc2 ( run7_vlc . table_base , run7_vlc . table_offset , H264Context . RUN7_VLC_BITS , NUM00 , NUM00 ) ; } zeros_left -= run_before ; scantable_offset -= ( NUM00 + run_before ) ; block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ i ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; } for ( ; i < total_coeff ; i ++ ) { scantable_offset -- ; block_base [ block_offset + scantable_base [ scantable_offset ] ] = ( short ) ( ( level [ i ] * qmul_base [ qmul_offset + scantable_base [ scantable_offset ] ] + NUM00 ) > > NUM00 ) ; } } $F33287 ( zeros_left ) $F1082 }
public void checkReinitFile ( final boolean needReinit ) throws IOException { File bootModeFile = new File ( rootDir , Constants . STARTUPMODE ) ; if ( ! needReinit ) { $F973 ( log ) $F142821 ( bootModeFile ) $F665 } if $F1906 ( bootModeFile ) { setDbStartupModeAsRestoreReinit ( rootDir ) ; } chown ( bootModeFile , BackupConstants . STORAGEOS_USER , BackupConstants . STORAGEOS_GROUP ) ; log . info ( $F20268 ( bootModeFile ) ) ; }
$F41720 ( value , absMin , absMax , absValue , Math )
public void readDOT ( Reader input ) { DotParser dp = new DotParser ( input , m_nodes , m_edges ) ; graphID = dp . parse ( ) ; setAppropriateNodeSize ( ) ; if ( m_le != null ) { m_le . setNodeSize ( paddedNodeWidth , nodeHeight ) ; jBtLayout . setEnabled ( _BOOL ) ; layoutGraph ( ) ; } }
private void notifyAllEntity $F72 { Log . printConcatLine ( $F19211 ( super ) ) ; signalShutdown ( resList ) ; signalShutdown ( gisList ) ; $F725 ( resList ) $F725 ( gisList ) }
protected Response calcDefaultSMTPResponse ( HookResult result ) { if ( result != null ) { int rCode = result . getResult ( ) ; String smtpRetCode = result . getSmtpRetCode ( ) ; String smtpDesc = result . getSmtpDescription ( ) ; if ( ( rCode & HookReturnCode . DENY ) == HookReturnCode . DENY ) { if ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . AUTH_FAILED ; $F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; if ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { response . setEndSession ( _BOOL ) ; } return response ; } else if ( ( rCode & HookReturnCode . DENYSOFT ) == HookReturnCode . DENYSOFT ) { if ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . LOCAL_ERROR ; $F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; if ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { response . setEndSession ( _BOOL ) ; } return response ; } else if ( ( rCode & HookReturnCode . OK ) == HookReturnCode . OK ) { if ( smtpRetCode == null ) smtpRetCode = SMTPRetCode . AUTH_OK ; $F12553 ( smtpDesc ) SMTPResponse response = new SMTPResponse ( smtpRetCode , smtpDesc ) ; if ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { response . setEndSession ( _BOOL ) ; } return response ; } else if ( ( rCode & HookReturnCode . DISCONNECT ) == HookReturnCode . DISCONNECT ) { SMTPResponse response = new SMTPResponse $F580 ; response . setEndSession ( _BOOL ) ; return response ; } else $F1337 } else $F1337 }
public synchronized boolean hasAlerts $F72 { $F1933 ( alerts , _BOOL ) $F3386 ( alerts ) }
public void testCompareToPosPos1 $F72 { $F67214 $F10679 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
protected Collection $F81224 replacePolyAll ( Collection $F81224 annos ) { $F200702 ( returnAnnos , AnnotationUtils ) for ( AnnotationMirror top : getTopAnnotations ( ) ) { AnnotationMirror annotationInHierarchy = findAnnotationInHierarchy ( annos , top ) ; $F1140 ( annotationInHierarchy , returnAnnos ) } return returnAnnos ; }
public synchronized void resetInputs $F72 throws IOException { source . printStatistics ( NUM00 ) ; setConfig ( config , source ) ; source . resetInputs ( ) ; $F3223 ( numDocsCreated ) resetLeftovers ( ) ; }
public void removeMatchingCoupling ( Coupling $F1011 toRemove ) { for ( Coupling $F1011 coupling : getCouplings ( ) ) { boolean consumersMatch = attributesMatch ( coupling . getConsumer ( ) , toRemove . getConsumer ( ) ) ; boolean producersMatch = attributesMatch ( coupling . getProducer ( ) , toRemove . getProducer ( ) ) ; if ( consumersMatch && producersMatch ) { removeCoupling ( coupling ) ; } } }
public String toShortString $F72 { $F83 ( sb ) $F13324 ( xRoadInstance , sb ) for ( String part : getFieldsForStringFormat ( ) ) { if ( part != null ) $F47102 ( sb , part ) } $F92 ( sb ) }
private boolean checkPattern $F72 { $F1933 ( pattern , _BOOL ) char leftSeparator = getLeftSeparator ( ) ; char rightSeparator = getRightSeparator ( ) ; Stack $F31735 separatorStack = new Stack $F31735 $F72 ; for ( $F1088 ( i , pattern ) ) { $F1280 ( cur , pattern , i ) if ( cur == leftSeparator ) $F31742 ( separatorStack , cur ) else if ( cur == rightSeparator ) { if ( $F1030 ( separatorStack ) && ( separatorStack . pop ( ) == leftSeparator ) ) $F1448 else { return _BOOL ; } } } $F18904 ( separatorStack ) }
public static SQLiteDatabase openOrCreateDatabase ( File file , CursorFactory factory ) { return $F140756 ( openOrCreateDatabase , file , factory ) ; }
public String toString $F105266 { return Integer . toString ( ( int ) bytes ) ; }
private void clampStartingPosition $F72 { final float cX = mBounds . exactCenterX ( ) ; final float cY = mBounds . exactCenterY ( ) ; final float dX = mStartingX - cX ; final float dY = mStartingY - cY ; final float r = mTargetRadius ; if ( dX * dX + dY * dY > r * r ) { final double angle = Math . atan2 ( dY , dX ) ; mClampedStartingX = cX + ( float ) ( Math . cos ( angle ) * r ) ; mClampedStartingY = cY + ( float ) ( Math . sin ( angle ) * r ) ; } else { mClampedStartingX = mStartingX ; mClampedStartingY = mStartingY ; } }
public Wildcard ( String pattern , int regexpOptions ) { this . regexpOptions = regexpOptions ; regexp = Pattern . compile ( wildcardToRegex ( pattern ) , regexpOptions ) ; shortcut = extractShortcut ( pattern ) ; }
$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty )
private String local_number $F72 throws ParseException { $F280 ( s ) $F10954 ( debug , dbg_enter ) try { int lc = NUM00 ; while ( lexer . hasMoreChars ( ) ) { char la = lexer . lookAhead ( NUM00 ) ; if ( la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || Lexer . isHexDigit ( la ) ) { lexer . consume ( NUM00 ) ; s . append ( la ) ; lc ++ ; } else if ( lc > NUM00 ) $F597 else throw createParseException ( NUM00 + la ) ; } $F92 ( s ) } finally { $F10954 ( debug , dbg_leave ) } }
private static void appendDefaultValue ( StringBuilder sb , FieldType fieldType , Object defaultValue ) { if ( fieldType . isEscapedDefaultValue ( ) ) { $F10665 ( appendEscapedWord , sb , defaultValue ) } else $F288 ( sb , defaultValue ) }
public MetadataBlockDataPicture ( ByteBuffer rawdata ) throws IOException , InvalidFrameException { initFromByteBuffer ( rawdata ) ; }
public void previous $F72 { if $F9774 ( current ) $F932 m_currentSearchIndex -- ; m_isBeforeFirst = _BOOL ; m_isAfterLast = _BOOL ; if ( m_currentSearchIndex < NUM00 ) { $F63959 ( m_currentSearchIndex , m_reducedResults ) m_isBeforeFirst = _BOOL ; } }
public void testZeroOne $F72 { $F45030 $F45033 int aSign = NUM00 ; int bSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F5466 public static Method findMethod ( Class c , String name , Object ... params ) { $F749 paramTypes = getParamTypes ( params ) ; Method method = null ; try { method = c . getDeclaredMethod ( name , paramTypes ) ; } catch ( NoSuchMethodException e ) { try { method = c . getMethod ( name , paramTypes ) ; } catch ( NoSuchMethodException e1 ) $F845 } if ( method != null ) method . setAccessible ( _BOOL ) ; return method ; }
public void testPosZero $F72 { $F50446 $F45033 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public boolean closeAllSessions $F72 { while ( existsSession ( ) ) { SessionEditor sessionEditor = getFrontmostSessionEditor ( ) ; SessionEditorWorkbench workbench = sessionEditor . getSessionWorkbench ( ) ; SessionWrapper wrapper = workbench . getSessionWrapper ( ) ; if ( ! wrapper . isSessionChanged ( ) ) { closeFrontmostSession ( ) ; $F598 } $F20605 ( name , sessionEditor ) int ret = JOptionPane . showConfirmDialog ( JOptionUtils . centeringComp ( ) , NUM00 + name + NUM00 , NUM00 , JOptionPane . YES_NO_CANCEL_OPTION ) ; if ( ret == JOptionPane . NO_OPTION ) { closeFrontmostSession ( ) ; $F598 } else if ( ret == JOptionPane . CANCEL_OPTION ) { return _BOOL ; } SaveSessionAsAction action = new SaveSessionAsAction $F72 ; action . actionPerformed ( new ActionEvent ( this , ActionEvent . ACTION_PERFORMED , NUM00 ) ) ; if ( ! action . isSaved ( ) ) { int ret2 = JOptionPane . showConfirmDialog ( JOptionUtils . centeringComp ( ) , NUM00 , NUM00 , JOptionPane . OK_CANCEL_OPTION ) ; if ( ret2 == JOptionPane . CANCEL_OPTION ) { return _BOOL ; } } closeFrontmostSession ( ) ; } return _BOOL ; }
private void removeNonVisibleViews ( final int offset ) { int childCount = getChildCount ( ) ; if ( mLastItemPosition != mAdapter . getCount ( ) - NUM00 && childCount > NUM00 ) { View firstChild = getChildAt ( NUM00 ) ; while ( firstChild != null && getChildBottom ( firstChild ) + offset < NUM00 ) { removeViewInLayout ( firstChild ) ; childCount -- ; mCachedItemViews . addLast ( firstChild ) ; mFirstItemPosition ++ ; mListTopOffset += getChildHeight ( firstChild ) ; if ( childCount > NUM00 ) { firstChild = getChildAt ( NUM00 ) ; } else { firstChild = null ; } } } if ( mFirstItemPosition != NUM00 && childCount > NUM00 ) { View lastChild = getChildAt ( childCount - NUM00 ) ; while ( lastChild != null && getChildTop ( lastChild ) + offset > getHeight ( ) ) { removeViewInLayout ( lastChild ) ; childCount -- ; mCachedItemViews . addLast ( lastChild ) ; mLastItemPosition -- ; if ( childCount > NUM00 ) { lastChild = getChildAt ( childCount - NUM00 ) ; } else { lastChild = null ; } } } }
public $F118223 addMessage ( int index , MType message ) { $F18045 ( message ) ensureMutableMessageList ( ) ; messages . add ( index , message ) ; if ( builders != null ) { $F103711 ( builders , index ) } onChanged ( ) ; incrementModCounts ( ) ; return this ; }
void unlock ( Table t ) $F106 ( locks , t )
public void onExceededDatabaseQuota ( String url , String databaseIdentifier , long currentQuota , long estimatedSize , long totalUsedQuota , WebStorage . QuotaUpdater quotaUpdater ) { if ( LOGV_ENABLED ) { Log . v ( LOGTAG , $F3905 ( url , databaseIdentifier , currentQuota , totalUsedQuota ) ) ; } long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize ; if ( totalUnusedQuota <= NUM00 ) { if ( totalUsedQuota > NUM00 ) $F5795 ( scheduleOutOfSpaceNotification ) quotaUpdater . updateQuota ( currentQuota ) ; if ( LOGV_ENABLED ) $F101659 ( Log , LOGTAG ) $F665 } long newOriginQuota = currentQuota ; if ( newOriginQuota == NUM00 ) { if ( totalUnusedQuota >= estimatedSize ) { newOriginQuota = estimatedSize ; } else { if ( LOGV_ENABLED ) { Log . v ( LOGTAG , $F38 + estimatedSize + NUM00 + totalUnusedQuota ) ; } newOriginQuota = NUM00 ; } } else { long quotaIncrease = estimatedSize == NUM00 ? Math . min ( QUOTA_INCREASE_STEP , totalUnusedQuota ) : estimatedSize ; newOriginQuota += quotaIncrease ; $F109946 ( quotaIncrease , totalUnusedQuota , newOriginQuota , currentQuota ) } quotaUpdater . updateQuota ( newOriginQuota ) ; if ( LOGV_ENABLED ) { $F162 ( Log , LOGTAG , newOriginQuota ) } }
protected String toValString ( Set vals ) { $F83 ( sb ) boolean first = _BOOL ; for ( $F2774 ( i , vals ) ) { $F2778 ( val , i ) val = encodeVal ( val ) ; $F87 ( first , _BOOL , sb ) sb . append ( val ) ; } $F92 ( sb ) }
private String printOFormat ( short x ) { String sx = null ; if ( x == Short . MIN_VALUE ) sx = NUM00 ; else if ( x < NUM00 ) { String t = Integer . toString ( ( ~ ( - x - NUM00 ) ) ^ Short . MIN_VALUE , NUM00 ) ; switch $F45530 ( t ) { $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) $F21995 ( sx , t ) } } else $F161523 ( sx , Integer , x ) return printOFormat ( sx ) ; }
public static JSONArray readJSONArray ( final JSONArray jsonArray , final int index , final boolean required , final boolean notNull ) throws JSONException { if ( required ) { return jsonArray . getJSONArray ( index ) ; } $F3652 ( notNull , jsonArray , index , String , Locale , NULL_VALUE_FORMAT_ARRAY ) JSONArray value = null ; if $F3653 ( jsonArray , index ) { value = jsonArray . getJSONArray ( index ) ; } return value ; }
private static Bitmap resizePhoto ( Bitmap realImage , float maxImageSize , boolean filter ) { float ratio = Math . min ( ( float ) maxImageSize / realImage . getWidth ( ) , ( float ) maxImageSize / realImage . getHeight ( ) ) ; int width = Math . round ( ( float ) ratio * realImage . getWidth ( ) ) ; int height = Math . round ( ( float ) ratio * realImage . getHeight ( ) ) ; Bitmap newBitmap = Bitmap . createScaledBitmap ( realImage , width , height , filter ) ; return newBitmap ; }
private Element createKeyValue $F72 throws Exception { Element keyValueEle = null ; PrivateKey key = idmClient . getTenantPrivateKey ( tenantName ) ; if ( key != null ) { RSAPrivateKey rsaKey = ( RSAPrivateKey ) key ; Element rsaKeyEle = createRSAKeyValue ( rsaKey ) ; if ( rsaKeyEle != null ) { keyValueEle = doc . createElement ( SAMLNames . DS_KEYVALUE ) ; keyValueEle . appendChild ( rsaKeyEle ) ; } } return keyValueEle ; }
static protected void expandElement ( Element el , $F15369 list ) { list . addAll ( el . getChildren ( NUM00 ) ) ; $F15369 children = el . getChildren ( ) ; for ( $F2277 ( i , children ) ) { $F13395 ( expandElement , children , i , list ) } }
static void load $F72 $F845
public static String dump $F233349 ( map ) { $F83 ( stringBuilder ) for ( $F22336 ( entry , map ) ) { $F79971 ( stringBuilder , entry ) $F84 ( stringBuilder ) $F79973 ( stringBuilder , entry ) } $F92 ( stringBuilder ) }
public void changedUpdate ( DocumentEvent e ) $F845
private void mergeCollapse $F72 { while ( stackSize > NUM00 ) { int n = stackSize - NUM00 ; if ( n > NUM00 && runLen [ n - NUM00 ] <= runLen [ n ] + runLen [ n + NUM00 ] ) { if ( runLen [ n - NUM00 ] < runLen [ n + NUM00 ] ) n -- ; mergeAt ( n ) ; } else if ( runLen [ n ] <= runLen [ n + NUM00 ] ) { mergeAt ( n ) ; } else $F5153 } }
private File findFile ( File directory , String name ) throws FileNotFoundException { $F4453 ( file , directory , name ) if $F3428 ( file ) { return file ; } for ( String child : directory . list ( ) ) { if $F8397 ( child , name ) { return new File ( directory , child ) ; } } $F352240 ( file ) }
public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { if ( ! rewriteExif ( filename , tags ) ) { ExifData tempData = mData ; mData = new ExifData ( DEFAULT_BYTE_ORDER ) ; FileInputStream is = null ; ByteArrayOutputStream bytes = null ; try { $F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; $F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; setTags ( tags ) ; writeExif ( imageBytes , filename ) ; } $F27615 ( closeSilently , is , e ) finally { $F59 ( is ) mData = tempData ; } } }
$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty )
protected void removeFromMaps ( String clientType ) { Client client = ( Client ) clientTypeMap . get ( clientType ) ; externalClientData . remove ( clientType ) ; $F147127 ( map , internalClientData , clientType ) if ( map == null ) { removeFromClientMap ( clientType , client ) ; } else { handleParentChange ( clientType , map ) ; } unloadClient ( clientType ) ; }
public String serialize ( Object object ) throws ConverterException { deep = NUM00 ; $F83 ( sb ) _serialize ( object , sb , $F22202 ) ; $F92 ( sb ) }
private void endList ( boolean orderedList ) { if $F5973 ( mParagraphStyles ) { AccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; ParagraphType type = style . getType ( ) ; if ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { int indent = style . getRelativeIndent ( ) ; if ( indent > NUM00 ) { style . setRelativeIndent ( indent - NUM00 ) ; style . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; } else $F89427 ( mParagraphStyles ) } else { $F34454 ( mParagraphStyles ) endList ( orderedList ) ; } } }
private void displayVerbose ( ConsoleApplication app , String categoryName , String typeName , Tag tag , $F2689 propertyNames ) { LocalizableMessage c1 = buildLine ( NUM00 , MAX_LINE_WIDTH ) ; LocalizableMessage c2 = buildLine ( NUM00 , MAX_LINE_WIDTH ) ; boolean isFirstManagedObject = _BOOL ; for ( $F3465 ( category , categoryMap ) ) { if $F10335 ( categoryName , category ) $F1448 Map < String , AbstractManagedObjectDefinition $F5162 > subTypes = categoryMap . get ( category ) ; for ( $F3465 ( type , subTypes ) ) { if $F10335 ( typeName , type ) $F1448 AbstractManagedObjectDefinition $F5162 mod = subTypes . get ( type ) ; if ( cannotDisplay ( app , mod , tag ) ) $F1448 boolean isFirstProperty = _BOOL ; Set < PropertyDefinition $F1011 > pds = getPropertyDefinitions ( mod ) ; for ( PropertyDefinition $F1011 pd : pds ) { if ( cannotDisplay ( app , pd , propertyNames ) ) $F1448 if ( isFirstProperty ) { if ( ! isFirstManagedObject ) { $F21416 ( app ) app . println ( c1 ) ; $F21416 ( app ) } else { isFirstManagedObject = _BOOL ; } app . println ( INFO_DSCFG_HELP_HEADING_COMPONENT . get ( mod . getUserFriendlyName ( ) ) ) ; $F21416 ( app ) app . println ( mod . getSynopsis ( ) ) ; if ( mod . getDescription ( ) != null ) { $F21416 ( app ) app . println ( mod . getDescription ( ) ) ; } } $F21416 ( app ) app . println ( c2 ) ; $F21416 ( app ) displayVerboseSingleProperty ( app , mod , pd . getName ( ) ) ; isFirstProperty = _BOOL ; } } } }
private static $F4203 void findUniqueGoals ( Map < TestCase , $F28904 > testToGoals ) { Map < TestCase , $F28904 > $F161023 ( goalMapCopy ) ; for ( Map . Entry < TestCase , $F28904 > entry : testToGoals . entrySet ( ) ) { $F28904 goalSet = new LinkedHashSet $F4203 $F100917 ( entry ) ; for ( Map . Entry < TestCase , $F28904 > otherEntry : testToGoals . entrySet ( ) ) { $F73688 ( entry , otherEntry ) goalSet . removeAll ( otherEntry . getValue ( ) ) ; } $F15251 ( goalMapCopy , entry , goalSet ) } $F725 ( testToGoals ) testToGoals . putAll ( goalMapCopy ) ; }
private static String formHead $F1947 ( hair , face , neck ) { return String . join ( NUM00 , hair , face , neck ) ; }
public void terminate $F72 { $F725 ( listeners ) $F72716 ( lookupDisc ) $F72716 ( locatorDisc ) if ( dynamicLocatorDisc != null ) $F72716 ( dynamicLocatorDisc ) }
public void start $F72 $F22067 ( start , System )
$F5466 public static String extractProtocol $F116884 ( url ) { int index = url . indexOf ( URLUtil . SCHEME_SEPARATOR ) ; $F94834 ( index ) $F35298 ( url , index ) }
protected void loadBuffer $F72 { int resIdx = minuteSpacing / NUM00 ; $F127073 ( resIdx ) String fileName = path + etopoFileNames [ resIdx ] ; dataBuffer = null ; try { BinaryBufferedFile binFile = new BinaryBufferedFile ( fileName ) ; binFile . byteOrder ( _BOOL ) ; bufferWidth = etopoWidths [ resIdx ] ; bufferHeight = etopoHeights [ resIdx ] ; int spacer = NUM00 ; switch ( minuteSpacing ) { $F3312 spacer = NUM00 + this . spacer ; $F597 $F3312 spacer = NUM00 + this . spacer ; $F597 $F1267 spacer = NUM00 + this . spacer ; } dataBuffer = new short [ ( bufferWidth + spacer ) * bufferHeight ] ; for ( int i = NUM00 ; i < bufferWidth * bufferHeight ; i ++ ) dataBuffer [ i ] = binFile . readShort ( ) ; $F59 ( binFile ) bufferWidth += spacer ; } catch ( FileNotFoundException e ) $F142113 ( Debug , fileName ) catch ( IOException e ) { $F103457 ( Debug , e ) } catch ( FormatException e ) { $F103457 ( Debug , e ) } }
protected VersionTag fetchRemoteVersionTag ( Object key ) { VersionTag tag = null ; assert this . dataPolicy != DataPolicy . REPLICATE ; TransactionId txId = cache . getCacheTransactionManager ( ) . suspend ( ) ; try { boolean retry = _BOOL ; InternalDistributedMember member = getRandomReplicate ( ) ; while ( retry ) { try { $F32472 ( member ) FetchVersionResponse response = RemoteFetchVersionMessage . send ( member , this , key ) ; tag = response . waitForResponse ( ) ; retry = _BOOL ; } catch ( RemoteOperationException e ) { member = getRandomReplicate ( ) ; if ( member != null ) { $F70998 ( logger , member ) } } } } finally { if ( txId != null ) { cache . getCacheTransactionManager ( ) . resume ( txId ) ; } } return tag ; }
public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { if ( oldChild == null || oldChild . getParentNode ( ) != this ) $F1274 ElemTemplateElement newChildElem = ( ( ElemTemplateElement ) newChild ) ; ElemTemplateElement oldChildElem = ( ( ElemTemplateElement ) oldChild ) ; ElemTemplateElement prev = ( ElemTemplateElement ) oldChildElem . getPreviousSibling ( ) ; if ( null != prev ) prev . m_nextSibling = newChildElem ; if ( m_firstChild == oldChildElem ) m_firstChild = newChildElem ; newChildElem . m_parentNode = this ; oldChildElem . m_parentNode = null ; newChildElem . m_nextSibling = oldChildElem . m_nextSibling ; oldChildElem . m_nextSibling = null ; return newChildElem ; }
public void paintDirty $F72 { int size = NUM00 ; synchronized ( displayLock ) { size = paintQueueFill ; Animation [ ] array = paintQueue ; paintQueue = paintQueueTemp ; paintQueueTemp = array ; paintQueueFill = NUM00 ; } if ( size > NUM00 ) { Graphics wrapper = getCodenameOneGraphics ( ) ; int dwidth = getDisplayWidth ( ) ; int dheight = getDisplayHeight ( ) ; int topX = dwidth ; int topY = dheight ; int bottomX = NUM00 ; int bottomY = NUM00 ; for ( $F119 ( iter , size ) ) { Animation ani = paintQueueTemp [ iter ] ; $F4322 ( ani ) paintQueueTemp [ iter ] = null ; wrapper . translate ( - wrapper . getTranslateX ( ) , - wrapper . getTranslateY ( ) ) ; wrapper . setClip ( NUM00 , NUM00 , dwidth , dheight ) ; if ( ani instanceof Component ) { Component cmp = ( Component ) ani ; Rectangle dirty = cmp . getDirtyRegion ( ) ; if ( dirty != null ) { Dimension d = dirty . getSize ( ) ; wrapper . setClip ( dirty . getX ( ) , dirty . getY ( ) , d . getWidth ( ) , d . getHeight ( ) ) ; cmp . setDirtyRegion ( null ) ; } cmp . paintComponent ( wrapper ) ; getPaintableBounds ( cmp , paintDirtyTmpRect ) ; $F121945 ( cmpAbsX , paintDirtyTmpRect ) $F106734 ( topX , Math , cmpAbsX ) bottomX = Math . max ( cmpAbsX + paintDirtyTmpRect . getWidth ( ) , bottomX ) ; $F55855 ( cmpAbsY , paintDirtyTmpRect ) $F106734 ( topY , Math , cmpAbsY ) bottomY = Math . max ( cmpAbsY + paintDirtyTmpRect . getHeight ( ) , bottomY ) ; } else { bottomX = dwidth ; bottomY = dheight ; topX = NUM00 ; topY = NUM00 ; ani . paint ( wrapper ) ; } } paintOverlay ( wrapper ) ; flushGraphics ( topX , topY , bottomX - topX , bottomY - topY ) ; } }
public static FSize calcTextSize ( Paint paint , String demoText ) { $F28883 ( r ) $F77589 ( paint , demoText , r ) return new FSize ( $F78956 ( r ) ) ; }
private boolean parseDelimiters ( DelimiterProcessor delimiterProcessor , char delimiterChar ) { DelimiterData res = scanDelimiters ( delimiterProcessor , delimiterChar ) ; $F1933 ( res , _BOOL ) int numDelims = res . count ; int startIndex = index ; index += numDelims ; Text node = appendText ( input , startIndex , index ) ; lastDelimiter = new Delimiter ( node , delimiterChar , res . canOpen , res . canClose , lastDelimiter ) ; lastDelimiter . numDelims = numDelims ; if ( lastDelimiter . previous != null ) { lastDelimiter . previous . next = lastDelimiter ; } return _BOOL ; }
private void clearMoney $F72 $F13478 ( money , updateMoney )
private void multiTouchController $F72 { if ( DEBUG ) Log . i ( NUM00 , NUM00 + mMode + NUM00 + mCurrPt . getNumTouchPoints ( ) + NUM00 + mCurrPt . isDown ( ) + mCurrPt . isMultiTouch ( ) ) ; switch ( mMode ) { case MODE_NOTHING : if ( DEBUG ) $F16229 ( Log ) if ( mCurrPt . isDown ( ) ) { selectedObject = objectCanvas . getDraggableObjectAtPoint ( mCurrPt ) ; if ( selectedObject != null ) { mMode = MODE_DRAG ; objectCanvas . selectObject ( selectedObject , mCurrPt ) ; anchorAtThisPositionAndScale ( ) ; mSettleStartTime = mSettleEndTime = mCurrPt . getEventTime ( ) ; } } $F597 case MODE_DRAG : if ( DEBUG ) $F16229 ( Log ) if ( ! mCurrPt . isDown ( ) ) { mMode = MODE_NOTHING ; objectCanvas . selectObject ( ( selectedObject = null ) , mCurrPt ) ; } else if ( mCurrPt . isMultiTouch ( ) ) { mMode = MODE_PINCH ; anchorAtThisPositionAndScale ( ) ; mSettleStartTime = mCurrPt . getEventTime ( ) ; mSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; } else { if ( mCurrPt . getEventTime ( ) < mSettleEndTime ) $F5795 ( anchorAtThisPositionAndScale ) else $F5795 ( performDragOrPinch ) } $F597 case MODE_PINCH : if ( DEBUG ) $F16229 ( Log ) if ( ! mCurrPt . isMultiTouch ( ) || ! mCurrPt . isDown ( ) ) { if ( ! mCurrPt . isDown ( ) ) { mMode = MODE_NOTHING ; objectCanvas . selectObject ( ( selectedObject = null ) , mCurrPt ) ; } else { mMode = MODE_DRAG ; anchorAtThisPositionAndScale ( ) ; mSettleStartTime = mCurrPt . getEventTime ( ) ; mSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; } } else { if ( $F51813 ( Math , mCurrPt , mPrevPt ) > MAX_MULTITOUCH_POS_JUMP_SIZE || $F51815 ( Math , mCurrPt , mPrevPt ) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math . abs ( mCurrPt . getMultiTouchWidth ( ) - mPrevPt . getMultiTouchWidth ( ) ) * NUM00 > MAX_MULTITOUCH_DIM_JUMP_SIZE || Math . abs ( mCurrPt . getMultiTouchHeight ( ) - mPrevPt . getMultiTouchHeight ( ) ) * NUM00 > MAX_MULTITOUCH_DIM_JUMP_SIZE ) { anchorAtThisPositionAndScale ( ) ; mSettleStartTime = mCurrPt . getEventTime ( ) ; mSettleEndTime = mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL ; } else if ( mCurrPt . eventTime < mSettleEndTime ) $F5795 ( anchorAtThisPositionAndScale ) else $F5795 ( performDragOrPinch ) } $F597 } if ( DEBUG ) Log . i ( NUM00 , NUM00 + mMode + NUM00 + mCurrPt . getNumTouchPoints ( ) + NUM00 + mCurrPt . isDown ( ) + mCurrPt . isMultiTouch ( ) ) ; }
public void exec $F4374 ( args ) throws Throwable { URLClassLoader urlClassLoader = new URLClassLoader ( classPath . toArray ( new URL $F2313 ( classPath ) ) ) ; $F6969 cls = urlClassLoader . loadClass ( mainClass ) ; Method method = cls . getDeclaredMethod ( NUM00 , $F18548 ) ; method . setAccessible ( _BOOL ) ; try { method . invoke ( null , $F8844 ( args ) ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } }
$F44168 ( uri , encoding , toString , Charsets )
void rollbackLocalTransaction $F72 throws RollbackFailedException { $F2329 ( _tx ) try { if $F14148 ( _logger , Level ) { _logger . log ( Level . FINEST , NUM00 + _tx ) ; } $F29036 ( _tx ) } catch ( Exception e ) { if $F68674 ( _logger , Level ) $F68681 ( _logger , Level , _tx , e ) throw new RollbackFailedException ( e ) ; } }
public void write ( char $F184368 , int off , int len ) { if ( ( off < NUM00 ) || ( off > c . length ) || ( len < NUM00 ) || ( ( off + len ) > c . length ) || ( ( off + len ) < NUM00 ) ) $F81129 else $F32905 ( len ) synchronized ( lock ) { int newcount = count + len ; $F90660 ( newcount , buf , Arrays , Math ) System . arraycopy ( c , off , buf , count , len ) ; count = newcount ; } }
private void writeJarPostResource ( StringBuilder sb , String path ) { $F286 ( sb , JAR_RESOURCE_SET ) sb . append ( $F2934 ( path ) ) ; }
public static String normalize ( String value ) { $F6928 ( value ) $F1382 ( value ) if $F8908 ( value ) return value ; boolean space = _BOOL ; $F1749 ( len , value ) $F1350 ( b , len ) for ( $F119 ( i , len ) ) { $F1280 ( v , value , i ) if ( v == NUM00 ) { $F162296 ( space , b , v ) space = _BOOL ; } else $F40016 ( b , v , space , _BOOL ) } $F92 ( b ) }
protected static void appendDecorations ( int basePos , String sourceCode , CreateSimpleLexer langHandler , $F6689 out ) { $F896 ( sourceCode ) Job job = new Job $F72 ; job . setSourceCode ( sourceCode ) ; job . setBasePos ( basePos ) ; langHandler . decorate ( job ) ; out . addAll ( job . getDecorations ( ) ) ; }
protected CarbonDictionaryColumnMetaChunk readLastChunkFromDictionaryMetadataFile ( DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier ) throws IOException { DictionaryService dictService = CarbonCommonFactory . getDictionaryService ( ) ; CarbonDictionaryMetadataReader columnMetadataReaderImpl = dictService . getDictionaryMetadataReader ( dictionaryColumnUniqueIdentifier . getCarbonTableIdentifier ( ) , dictionaryColumnUniqueIdentifier . getColumnIdentifier ( ) , carbonStorePath ) ; CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk = null ; try { carbonDictionaryColumnMetaChunk = columnMetadataReaderImpl . readLastEntryOfDictionaryMetaChunk ( ) ; } $F3229 ( columnMetadataReaderImpl ) return carbonDictionaryColumnMetaChunk ; }
public static ExternalAppId determineExternalIntentSource ( String packageName , Intent intent ) { String appId = IntentUtils . safeGetStringExtra ( intent , Browser . EXTRA_APPLICATION_ID ) ; ExternalAppId externalId = ExternalAppId . OTHER ; if ( appId == null ) { String url = getUrlFromIntent ( intent ) ; if $F99996 ( url , TWITTER_LINK_PREFIX ) { externalId = ExternalAppId . TWITTER ; } else if $F99996 ( url , FACEBOOK_LINK_PREFIX ) { externalId = ExternalAppId . FACEBOOK ; } else if $F99996 ( url , NEWS_LINK_PREFIX ) { externalId = ExternalAppId . NEWS ; } } else { if $F1238 ( appId , PACKAGE_PLUS ) { externalId = ExternalAppId . PLUS ; } else if $F1238 ( appId , PACKAGE_GMAIL ) { externalId = ExternalAppId . GMAIL ; } else if $F1238 ( appId , PACKAGE_HANGOUTS ) { externalId = ExternalAppId . HANGOUTS ; } else if $F1238 ( appId , PACKAGE_MESSENGER ) { externalId = ExternalAppId . MESSENGER ; } else if $F1238 ( appId , PACKAGE_LINE ) { externalId = ExternalAppId . LINE ; } else if $F1238 ( appId , PACKAGE_WHATSAPP ) { externalId = ExternalAppId . WHATSAPP ; } else if $F1238 ( appId , PACKAGE_GSA ) { externalId = ExternalAppId . GSA ; } else if $F1238 ( appId , packageName ) { externalId = ExternalAppId . CHROME ; } } return externalId ; }
protected TableHDU ( Header hdr , T td ) { super ( hdr , td ) ; }
public void pushStylesheet ( Stylesheet s ) { if $F10471 ( m_stylesheets ) m_stylesheetRoot = ( StylesheetRoot ) s ; m_stylesheets . push ( s ) ; }
public boolean isBlank ( final CharSequence cs ) { int strLen ; if ( cs == null || ( strLen = cs . length ( ) ) == NUM00 ) { return _BOOL ; } for ( $F119 ( i , strLen ) ) { if $F11994 ( Character , cs , i ) { return _BOOL ; } } return _BOOL ; }
public void stop $F72 throws $F3 { $F7589 ( thread ) $F164395 ( selector ) }
private Document parse ( final String data , DocumentBuilder docBuilder ) { $F13264 ( docBuilder , data ) Document document = null ; try { $F20818 ( buf ) if $F14943 ( data ) $F288 ( buf , BEGIN_PART ) buf . append ( data ) ; if $F43141 ( data , END_PART ) $F288 ( buf , END_PART ) InputSource inputSource = new InputSource ( $F86540 ( buf ) ) ; document = docBuilder . parse ( inputSource ) ; } catch ( Exception e ) { LOGGER . warn ( $F5351 ( e ) ) ; } return document ; }
private XNetReply loadChars ( java . io . BufferedReader istream ) throws $F3258 { String s = NUM00 ; $F36243 ( s , istream ) $F15998 ( log , s ) if ( s == null ) $F1337 else { return new XNetReply ( s ) ; } }
public synchronized void removeConnectionManager ( final HttpConnectionManager connectionManager ) { $F4640 ( shutdown ) connectionManagers . remove ( connectionManager ) ; }
private boolean addState ( long stateNumber ) { if ( firstState < NUM00 ) { firstState = stateNumber ; } else if ( stepSize < NUM00 ) { $F443511 ( stepSize , stateNumber , firstState ) } else { $F82462 ( step , stateNumber , lastState ) $F35938 ( step , stepSize , _BOOL ) } lastState = stateNumber ; return _BOOL ; }
public void reset $F72 { adler = NUM00 ; }
public static boolean isLibraryResourceRoot ( $F5466 VirtualFile res ) { if ( res != null ) { VirtualFile aar = res . getParent ( ) ; if ( aar != null ) { VirtualFile exploded = aar . getParent ( ) ; if ( exploded != null ) { $F20605 ( name , exploded ) if $F22081 ( name , EXPLODED_BUNDLES , EXPLODED_AAR ) { return _BOOL ; } } } } return _BOOL ; }
public void failEngine ( String reason , $F5466 Throwable failure ) { if $F39091 ( failEngineLock ) { store . incRef ( ) ; try { try $F47196 ( closeNoLock , reason ) finally { if ( failedEngine != null ) { $F39971 ( logger , reason , failure ) $F665 } $F66731 ( logger , failure , reason ) failedEngine = ( failure != null ) ? failure : new IllegalStateException ( reason ) ; if ( Lucene . isCorruptionException ( failure ) ) { try { store . markStoreCorrupted ( new IOException ( NUM00 + reason + NUM00 , ExceptionsHelper . unwrapCorruption ( failure ) ) ) ; } $F60644 ( logger , e ) } failedEngineListener . onFailedEngine ( shardId , reason , failure ) ; } } catch ( Throwable t ) $F23016 ( logger , t ) finally { store . decRef ( ) ; } } else $F79594 ( logger , reason , failure ) }
$F40513 ( values )
$F1 default CompletableFuture < OptionalInt > maxInt ( final ToIntFunction $F11632 fn ) $F257945 ( CompletableFuture , getExec )
private void addVNXFileStorageSystemIntoCache ( String storageSystemURI , DistributedQueueItemProcessedCallback callBack ) { if $F35028 ( StringUtils , storageSystemURI ) $F1717 ( VNXFILE_CACHE , storageSystemURI , callBack ) }
void resetToPreferredSizes ( int availableSize ) { $F2027 testSizes = getPreferredSizes ( ) ; int totalSize = NUM00 ; for ( $F6268 ( counter ) ) { if ( testSizes [ counter ] != - NUM00 ) { totalSize += testSizes [ counter ] ; } } if ( totalSize > availableSize ) { testSizes = getMinimumSizes ( ) ; totalSize = NUM00 ; for ( $F6268 ( counter ) ) { if ( testSizes [ counter ] != - NUM00 ) { totalSize += testSizes [ counter ] ; } } } setSizes ( testSizes ) ; distributeSpace ( availableSize - totalSize , _BOOL ) ; }
$F1 public $F96 decode $F97 ( data ) throws Exception { if ( data [ NUM00 ] == NUM00 && data [ NUM00 ] == NUM00 && data [ NUM00 ] == NUM00 ) { return data ; } int bufSize = NUM00 ; FastByteArrayOutputStream bos = null ; boolean failed = _BOOL ; $F18832 ( orgSize , data ) if ( data != null ) { while ( failed ) { final Inflater inf = new Inflater $F72 ; inf . setInput ( data ) ; $F18832 ( size , data ) bos = new FastByteArrayOutputStream ( size ) ; $F45132 ( size , bufSize ) $F4727 ( buf , bufSize ) int count ; try { while $F197883 ( inf ) { count = inf . inflate ( buf ) ; $F11584 ( bos , buf , count ) if ( inf . getRemaining ( ) == NUM00 ) $F5153 } failed = _BOOL ; } catch ( final Exception ee ) { LogWriter . writeLog ( NUM00 + ee ) ; failed = _BOOL ; hasError = _BOOL ; if ( data . length == orgSize && data . length > NUM00 ) { failed = _BOOL ; } else if $F3305 ( data ) { final $F96 newData = new byte $F12500 ( data ) ; $F12508 ( System , data , newData ) data = newData ; } else { failed = _BOOL ; } } } $F3031 ( data , bos ) return applyPredictor ( predictor , data , colors , bitsPerComponent , columns ) ; } return data ; }
public boolean isProcessing $F72 $F1522 ( mRunning )
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
private static InputStreamReader decompressWith7Zip ( final String archivePath ) throws ConfigurationException { PATH_PROGRAM_7ZIP = ( String ) config . getConfigParameter ( ConfigurationKeys . PATH_PROGRAM_7ZIP ) ; if ( PATH_PROGRAM_7ZIP == null ) { throw ErrorFactory . createConfigurationException ( ErrorKeys . CONFIGURATION_PARAMETER_UNDEFINED ) ; } try { $F43316 ( runtime , Runtime ) Process p = runtime . exec ( PATH_PROGRAM_7ZIP + NUM00 + archivePath + NUM00 ) ; return new InputStreamReader ( p . getInputStream ( ) , WIKIPEDIA_ENCODING ) ; } $F12237 ( e ) }
public void makeImmutable $F72 { $F4246 ( isMutable , _BOOL ) }
private final Object arenaExchange $F200458 ( item , timed , ns ) { $F46551 a = arena ; $F200460 ( p , participant ) for ( int i = p . index ; ; ) { int b , m , c ; long j ; Node q = ( Node ) U . getObjectVolatile ( a , j = ( i < < ASHIFT ) + ABASE ) ; if ( q != null && U . compareAndSwapObject ( a , j , q , null ) ) $F200465 ( v , q , item , w , U ) else if ( i <= ( m = ( b = bound ) & MMASK ) && q == null ) { p . item = item ; if $F200476 ( U , a , j , p ) { long end = ( timed && m == NUM00 ) ? System . nanoTime ( ) + ns : NUM00 ; $F686 ( t , Thread ) for ( int h = p . hash , spins = SPINS ; ; ) { Object v = p . match ; if ( v != null ) { $F200524 ( U , p , MATCH ) p . item = null ; p . hash = h ; return v ; } else if ( spins > NUM00 ) $F200502 ( h , SPINS , t , spins , Thread ) else if ( U . getObjectVolatile ( a , j ) != p ) spins = SPINS ; else if ( $F147861 ( t ) && m == NUM00 && $F200507 ( timed , ns , end , System ) ) { U . putObject ( t , BLOCKER , this ) ; p . parked = t ; if ( U . getObjectVolatile ( a , j ) == p ) U . park ( _BOOL , ns ) ; p . parked = null ; $F200511 ( U , t , BLOCKER ) } else if ( U . getObjectVolatile ( a , j ) == p && U . compareAndSwapObject ( a , j , p , null ) ) { if ( m != NUM00 ) U . compareAndSwapInt ( this , BOUND , b , b + SEQ - NUM00 ) ; p . item = null ; p . hash = h ; i = p . index >>>= NUM00 ; if $F2754 ( Thread ) $F1274 if ( timed && m == NUM00 && ns <= NUM00 ) return TIMED_OUT ; $F597 } } } else p . item = null ; } else { if ( p . bound != b ) { p . bound = b ; p . collides = NUM00 ; i = ( i != m || m == NUM00 ) ? m : m - NUM00 ; } else if ( ( c = p . collides ) < m || m == FULL || ! U . compareAndSwapInt ( this , BOUND , b , b + SEQ + NUM00 ) ) { p . collides = c + NUM00 ; i = ( i == NUM00 ) ? m : i - NUM00 ; } else i = m + NUM00 ; p . index = i ; } } }
public void send ( String data ) throws IOException { DatagramPacket dp = new DatagramPacket ( data . getBytes ( ) , data . length ( ) , multicastGroup ) ; datagramSocket . send ( dp ) ; }
private void removeStaleRangeReferences $F72 { removeStaleReferences ( rangeReferenceQueue , ranges ) ; }
private boolean isExported ( URI id , $F28584 exportedVolumes ) $F298 ( exportedVolumes , id )
private String fixMonitorLinks ( String fixString , String dumpName ) { if $F56559 ( fixString ) { fixString = fixString . replaceAll ( NUM00 , NUM00 + dumpName + NUM00 ) ; } return ( fixString ) ; }
protected static TestDimensionConfig buildStandardDimensionConfig ( TestApiDimensionName dimensionName ) { return new TestDimensionConfig ( dimensionName , dimensionName . asName ( ) , getDefaultKeyValueStore ( dimensionName ) , getDefaultSearchProvider ( ) , getDefaultFields ( ) , getDefaultFields ( ) ) ; }
public String toString $F72 { $F8755 ( sb ) if ( type != SET_CONSTRAINTS ) { sb . append ( type == AS_IS ? NUM00 : NUM00 ) ; } sb . append ( loader ) ; $F84 ( sb ) for ( $F1139 ( i , contextElements ) ) $F70285 ( i , sb , contextElements ) if ( principals == null ) $F86 ( sb ) else { $F84 ( sb ) for ( $F1139 ( i , principals ) ) $F70285 ( i , sb , principals ) $F84 ( sb ) } for ( $F1139 ( i , permissions ) ) $F70285 ( i , sb , permissions ) $F84 ( sb ) $F92 ( sb ) }
public synchronized void cacheReposts $F27146 ( newRepostIds ) { TreeSet $F17803 $F32033 ( reposts ) ; reposts . addAll ( Longs . asList ( repostCache . get ( ) ) ) ; reposts . addAll ( newRepostIds ) ; repostCache . set ( Longs . toArray ( reposts ) ) ; }
$F60342 ( mSmallestWidthDp , mInPortrait )
protected final $F6969 defineClass ( String className , $F96 classRep , int offset , int length ) throws ClassFormatError { return defineClass ( className , classRep , offset , length , null ) ; }
$F213785 ( buf , tags , mod , this , t , e )
private void writeNewlineOnDebug ( XMLStreamWriter out ) throws XMLStreamException { if $F88618 ( LOG ) { out . writeCharacters ( NUM00 ) ; } }
public RequestHandle put ( String url , ResponseHandlerInterface responseHandler ) { return put ( null , url , null , responseHandler ) ; }
public Discretize ( Element discretize , FieldMetaInfo . Optype opType , $F53625 fieldDefs ) throws Exception { super ( opType , fieldDefs ) ; $F321395 ( m_fieldName , discretize ) $F321395 ( m_mapMissingTo , discretize ) if $F22 ( m_mapMissingTo ) { m_mapMissingDefined = _BOOL ; } $F321395 ( m_defaultValue , discretize ) if $F22 ( m_defaultValue ) { m_defaultValueDefined = _BOOL ; } $F315146 ( dbL , discretize ) for ( $F85554 ( i , dbL ) ) { $F61359 ( dbN , dbL , i ) if $F61358 ( dbN , Node ) { $F6721 ( dbE , dbN ) DiscretizeBin db = new DiscretizeBin ( dbE , m_opType ) ; m_bins . add ( db ) ; } } $F60488 ( fieldDefs , setUpField ) }
private static String quadTree ( final MapTile aTile ) { $F83 ( quadKey ) for ( int i = aTile . zoomLevel ; i > NUM00 ; i -- ) { int digit = NUM00 ; int mask = NUM00 < < ( i - NUM00 ) ; if ( ( aTile . x & mask ) != NUM00 ) digit += NUM00 ; if ( ( aTile . y & mask ) != NUM00 ) digit += NUM00 ; quadKey . append ( digit ) ; } $F92 ( quadKey ) }
public static $F2027 concatAllInt ( $F2027 ... arrays ) { int totalLength = NUM00 ; $F18832 ( subArrayCount , arrays ) $F189285 ( i , subArrayCount , totalLength , arrays ) $F2027 $F189287 ( result , Arrays , arrays , totalLength ) ; $F26358 ( offset , arrays ) $F189290 ( i , subArrayCount , System , arrays , result , offset ) return result ; }
public static double log1p ( double value ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . log1p ( value ) : Math . log1p ( value ) ; } if ( _BOOL ) { if ( value == Double . POSITIVE_INFINITY ) $F90685 ( Double ) double valuePlusOne = NUM00 + value ; if ( valuePlusOne == NUM00 ) { return value ; } else { return FastMath . log ( valuePlusOne ) * ( value / ( valuePlusOne - NUM00 ) ) ; } } if ( value > - NUM00 ) { if ( value == Double . POSITIVE_INFINITY ) $F90685 ( Double ) double valuePlusOne = NUM00 + value ; if ( valuePlusOne == NUM00 ) { return value ; } else if $F20932 ( Math , value ) { double z = value / ( value + NUM00 ) ; double z2 = z * z ; return z * ( NUM00 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 + z2 * ( $F52906 ) ) ) ) ) ) ; } int valuePlusOneBitsHi = ( int ) ( Double . doubleToRawLongBits ( valuePlusOne ) > > NUM00 ) & NUM00 ; int valuePlusOneExp = ( valuePlusOneBitsHi > > NUM00 ) - MAX_DOUBLE_EXPONENT ; int xIndex = ( ( valuePlusOneBitsHi < < NUM00 ) > > > ( NUM00 - LOG_BITS ) ) ; double z = ( valuePlusOne * twoPowTab [ - valuePlusOneExp - MIN_DOUBLE_EXPONENT ] ) * logXInvTab [ xIndex ] - NUM00 ; z *= ( NUM00 - z * ( $F52906 - z * $F52906 ) ) ; return valuePlusOneExp * LOG_2 + logXLogTab [ xIndex ] + ( z + ( value - ( valuePlusOne - NUM00 ) ) / valuePlusOne ) ; } else if ( value == - NUM00 ) $F86429 ( Double ) else $F6623 ( Double ) }
public static $F2469 ones ( int bits ) { $F2469 v = new long [ ( ( bits - NUM00 ) > > > LONG_LOG2_SIZE ) + NUM00 ] ; final int fillWords = bits > > > LONG_LOG2_SIZE ; final int fillBits = bits & LONG_LOG2_MASK ; Arrays . fill ( v , NUM00 , fillWords , LONG_ALL_BITS ) ; if ( fillWords < v . length ) { $F8528 ( v ) = $F76927 ( fillBits ) ; } return v ; }
private boolean checkCurrentKeyAge $F72 throws NumberFormatException { long currentTokenKeyTS = Long . parseLong ( _cachedTokenKeysBundle . getCurrentKeyEntry ( ) ) ; $F657 ( now , System ) long diff = now - currentTokenKeyTS ; $F232230 ( diff , _keyRotationIntervalInMsecs , _BOOL ) return _BOOL ; }
public final void pushContextNodeList ( DTMIterator nl ) $F31742 ( m_contextNodeLists , nl )
public void note ( Element e , String msg ) { messager . printMessage ( Diagnostic . Kind . NOTE , msg , e ) ; }
public static PublicKey generatePublicKey ( String encodedPublicKey ) { try $F118377 ( decodedKey , Base64 , encodedPublicKey , keyFactory , KeyFactory , KEY_FACTORY_ALGORITHM ) $F29414 ( e ) $F29417 ( Log , TAG , e ) }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F9010 ( result , Collections , super ) $F1000 ( result ) $F1007 ( result ) }
public TrustSource add ( File trustedCAPemFile ) { $F826 ( trustedCAPemFile ) String pemFileContents ; try { pemFileContents = Files . toString ( trustedCAPemFile , Charset . forName ( NUM00 ) ) ; } catch ( IOException e ) { throw new UncheckedIOException $F27414 ( trustedCAPemFile , e ) ; } return add ( pemFileContents ) ; }
StringVector process "STRING" LIST $F17723 ( handler , uri , name , rawName , value ) { $F17727 ( tokenizer , value ) $F17729 ( nStrings , tokenizer ) $F17731 ( strings , nStrings ) for ( $F119 ( i , nStrings ) ) { strings . addElement ( tokenizer . nextToken ( ) ) ; } return strings ; }
private String checkforRegex ( String aRegexFragment ) { $F1121 ( result ) final StringCharacterIterator iterator = new StringCharacterIterator ( aRegexFragment ) ; $F118352 ( character , iterator ) while ( character != CharacterIterator . DONE ) { if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else if ( character == NUM00 ) $F86 ( result ) else $F118355 ( character , result ) $F45366 ( character , iterator ) } $F92 ( result ) }
protected void drawValueLabel ( DrawingContext context , Slice slice , double radius , Row row , int rowIndex ) { $F65474 value = slice . end - slice . start ; Format format = getValueFormat ( ) ; if ( ( format == null ) && ( value instanceof Number ) ) { $F90333 ( format , NumberFormat ) } String text = ( format != null ) ? format . format ( value ) : value . toString ( ) ; ColorMapper colors = getValueColor ( ) ; Paint paint = colors . get ( rowIndex ) ; Font font = getValueFont ( ) ; double fontSize = font . getSize2D ( ) ; Location location = getValueLocation ( ) ; double alignX = getValueAlignmentX ( ) ; double alignY = getValueAlignmentY ( ) ; double rotation = getValueRotation ( ) ; double distance = getValueDistance ( ) ; if ( MathUtils . isCalculatable ( distance ) ) { distance *= fontSize ; } else { distance = NUM00 ; } double radiusRelOuter = getOuterRadius ( ) ; double radiusRelInner = getInnerRadius ( ) ; double radiusOuter = radius * radiusRelOuter ; double radiusInner = radius * radiusRelInner ; double distanceV = distance ; double labelPosV ; if ( location == Location . NORTH ) { labelPosV = radiusOuter + distanceV ; } else if ( location == Location . SOUTH ) { labelPosV = Math . max ( radiusInner - distanceV , NUM00 ) ; } else { double sliceHeight = radiusOuter - radiusInner ; if ( NUM00 * distance >= sliceHeight ) $F18712 ( alignY , distanceV ) labelPosV = radiusInner + distanceV + alignY * ( sliceHeight - NUM00 * distanceV ) ; } double sum = plot . getSum ( row . getSource ( ) ) ; $F32905 ( sum ) double sliceStartRel = slice . start / sum ; double sliceEndRel = slice . end / sum ; double circumference = NUM00 * labelPosV * Math . PI ; double distanceRelH = distance / circumference ; double sliceWidthRel = sliceEndRel - sliceStartRel ; if ( NUM00 * distanceRelH >= sliceWidthRel ) $F18712 ( alignX , distanceRelH ) double labelPosRelH = sliceStartRel + distanceRelH + alignX * ( sliceWidthRel - NUM00 * distanceRelH ) ; double start = plot . getStart ( ) ; double angleStart = Math . toRadians ( - start ) ; double direction = NUM00 ; if ( ! plot . isClockwise ( ) ) $F44867 ( direction ) double angle = angleStart + direction * labelPosRelH * NUM00 * Math . PI ; $F54226 ( dirX , Math , angle ) $F33859 ( dirY , Math , angle ) Label label = new Label ( text ) ; label . setAlignmentX ( NUM00 - NUM00 * dirX - NUM00 ) ; label . setAlignmentY ( NUM00 * dirY + NUM00 ) ; label . setRotation ( rotation ) ; label . setColor ( paint ) ; label . setFont ( font ) ; Dimension2D sizeLabel = label . getPreferredSize ( ) ; double anchorX = NUM00 ; double anchorY = NUM00 ; if ( location == Location . NORTH || location == Location . SOUTH ) { anchorX = dirX * sizeLabel . getWidth ( ) / NUM00 ; anchorY = dirY * sizeLabel . getHeight ( ) / NUM00 ; if ( location == Location . SOUTH ) { anchorX = - anchorX ; anchorY = - anchorY ; } } double x = labelPosV * dirX + anchorX - $F77576 ( sizeLabel ) ; double y = labelPosV * dirY + anchorY - $F63370 ( sizeLabel ) ; $F324 ( w , sizeLabel ) $F322 ( h , sizeLabel ) label . setBounds ( x , y , w , h ) ; label . draw ( context ) ; }
public static void downto ( Float self , Number to , $F50462 ( closure ) ) { float to1 = to . floatValue ( ) ; if ( self >= to1 ) { for ( float i = self ; i >= to1 ; i -- ) $F50467 ( closure , i ) } else $F50472 ( to , self ) }
public static AttributeDescription objectClass $F72 { return OBJECT_CLASS ; }
public void addKeyValueComment ( String keyName , String value ) { int keyIndex ; if ( ( keyIndex = findKeyCommentIndex ( keyName ) ) < NUM00 ) { keyValComments . add ( NUM00 + keyName + NUM00 + value + NUM00 ) ; $F665 } $F28293 ( log , keyName ) keyValComments . set ( keyIndex , NUM00 + keyName + NUM00 + value + NUM00 ) ; }
private String isInputChecked ( String dataSet , String value ) { if $F1256 ( dataSet , value ) $F2455 $F1278 }
public final void popSubContextList $F72 $F89427 ( m_axesIteratorStack )
private DriverTask createDriverTask ( String taskType ) { String taskID = String . format ( NUM00 , HP3PARConstants . DRIVER_NAME , taskType , UUID . randomUUID ( ) ) ; DriverTask task = new HP3PARDriverTask ( taskID ) ; return task ; }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = $F48364 ( data ) ; writeStringToFile ( file , str , encoding , append ) ; }
public void store ( Element cat , $F3803 trees ) { CatalogTreeManager manager = InstanceManager . getDefault ( jmri . CatalogTreeManager . class ) ; $F106626 ( cat ) $F13712 ( iter , trees ) while $F2921 ( iter ) { $F13714 ( sname , iter ) if ( sname == null ) { $F9464 ( log ) $F598 } $F15998 ( log , sname ) if ( sname . charAt ( NUM00 ) != CatalogTree . XML ) $F1448 CatalogTree ct = manager . getBySystemName ( sname ) ; Element elem = new Element $F580 ; $F34765 ( elem , sname ) String uname = ct . getUserName ( ) ; if ( uname != null ) $F300453 ( elem , uname ) storeNode ( elem , ct . getRoot ( ) ) ; $F15998 ( log , sname ) cat . addContent ( elem ) ; } }
public boolean isEnabled $F72 { return enabled ; }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public static boolean loadTexture ( int glId , int file ) { InputStream is = Resource . getResInputStream ( file ) ; Bitmap bitmap = null ; try { $F56530 ( opts ) opts . inScaled = _BOOL ; bitmap = BitmapFactory . decodeStream ( is , null , opts ) ; } catch ( Exception e ) { Log . e ( TAG , NUM00 + file , e ) ; return _BOOL ; } finally { try $F881 ( is ) $F102303 ( Log , TAG , e ) } return loadTexture ( glId , bitmap ) ; }
public static int roll1D100 $F72 { return $F6823 ( rand ) ; }
public ZipfianGenerator ( long min , long max , double _zipfianconstant , double _zetan ) { items = max - min + NUM00 ; base = min ; zipfianconstant = _zipfianconstant ; theta = zipfianconstant ; zeta2theta = zeta ( NUM00 , theta ) ; alpha = NUM00 / ( NUM00 - theta ) ; zetan = _zetan ; countforzeta = items ; eta = ( NUM00 - Math . pow ( NUM00 / items , NUM00 - theta ) ) / ( NUM00 - zeta2theta / zetan ) ; nextInt ( ) ; }
public void removeRole ( RoleEntity role ) $F106 ( roles , role )
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; }
private Map processEvent ( MatchResult result ) { $F28017 ( map ) for ( int i = NUM00 ; i < result . groupCount ( ) + NUM00 ; i ++ ) { Object key = matchingKeywords . get ( i - NUM00 ) ; Object value = result . group ( i ) ; map . put ( key , value ) ; } return map ; }
public void addExtension ( String ext ) $F9632 ( exts , ext )
private void displaySimple ( PrintStream output ) { $F8438 ( output ) for ( $F119 ( j , P ) ) { $F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { a0 [ i ] = A [ i ] ; a1 [ i ] = C_A [ i ] [ j ] ; a2 [ i ] = B [ i ] ; } double value = computeFirstOrder ( a0 , a1 , a2 , N ) ; output . print ( value < NUM00 ? NUM00 : value ) ; if ( j < P - NUM00 ) $F21410 ( output ) } $F21416 ( output ) $F8438 ( output ) for ( $F119 ( j , P ) ) { $F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { a0 [ i ] = A [ i ] ; a1 [ i ] = C_A [ i ] [ j ] ; a2 [ i ] = B [ i ] ; } double value = computeTotalOrder ( a0 , a1 , a2 , N ) ; output . print ( value < NUM00 ? NUM00 : value ) ; if ( j < P - NUM00 ) $F21410 ( output ) } $F21416 ( output ) }
public boolean equals ( Object o ) { if ( o == this ) return _BOOL ; if ( ! ( o instanceof MBeanAttributeInfo ) ) return _BOOL ; MBeanAttributeInfo p = ( MBeanAttributeInfo ) o ; return ( $F460245 ( Objects , p , getName ) && $F460245 ( Objects , p , getType ) && $F460245 ( Objects , p , getDescription ) && $F460245 ( Objects , p , getDescriptor ) && $F168407 ( p , isReadable ) && $F168407 ( p , isWritable ) && $F168407 ( p , isIs ) ) ; }
protected boolean handleDirectory ( File directory , $F806 contentNames ) throws SecurityException { boolean continueWandering = _BOOL ; for ( String child : contentNames ) { boolean keepGoing = handleEntry ( new File ( $F98442 ( directory , File ) , child ) ) ; if ( ! keepGoing ) { continueWandering = exhaustiveSearch ; $F30724 ( continueWandering ) } } return continueWandering ; }
int size $F72 $F114498 ( Integer , set )
public boolean hasNext $F72 { return iterator . hasNext ( ) ; }
public static double vectorDistance ( $F1986 vec1 , $F1986 vec2 , double power , double oneOverPower ) { double result = NUM00 ; if ( power == NUM00 ) { for ( $F1139 ( i , vec1 ) ) { result += vec1 [ i ] - vec2 [ i ] == NUM00 ? NUM00 : NUM00 ; } } else if ( power == NUM00 ) { for ( $F1139 ( i , vec1 ) ) { result += Math . abs ( vec1 [ i ] - vec2 [ i ] ) ; } } else if ( power == NUM00 ) { result = Math . sqrt ( distSquaredCartesian ( vec1 , vec2 ) ) ; } else if ( power == Integer . MAX_VALUE || Double . isInfinite ( power ) ) { for ( $F1139 ( i , vec1 ) ) { result = Math . max ( result , Math . max ( vec1 [ i ] , vec2 [ i ] ) ) ; } } else { for ( $F1139 ( i , vec1 ) ) { result += Math . pow ( vec1 [ i ] - vec2 [ i ] , power ) ; } result = Math . pow ( result , oneOverPower ) ; } return result ; }
public static String formatNumber ( final long number ) { long divided = number ; $F3239 ( sb ) while ( divided > NUM00 ) { long rest = divided % NUM00 ; sb . insert ( NUM00 , NUM00 + String . format ( NUM00 , rest ) ) ; divided = divided / NUM00 ; } long rest = divided % NUM00 ; $F34005 ( sb , rest ) $F92 ( sb ) }
private boolean isSubsumed ( String selector , $F46406 others ) { for ( String other : others ) $F19884 ( subsumes , other , selector , _BOOL ) return _BOOL ; }
private void displayValues $F72 { log ( NUM00 , Project . MSG_INFO ) ; log ( NUM00 + this . spec ) ; log ( NUM00 + getSpecAbsolutePath ( ) ) ; log ( NUM00 + getSerializedSpecAbsolutePath ( ) ) ; log ( NUM00 + this . specdir ) ; log ( NUM00 + this . cup2srcdir ) ; log ( NUM00 + this . classpath ) ; log ( NUM00 + this . algorithm ) ; log ( NUM00 + this . verbose ) ; log ( NUM00 + this . parsetable ) ; log ( NUM00 ) ; }
$F183298 ( view , cache )
private boolean checkTouchingMinTarget ( int index , MotionEvent event ) { if ( isTouchingMinTarget ( index , event ) ) { lastTouchedMin = _BOOL ; isTouchingMinTarget . add ( event . getPointerId ( index ) ) ; if $F28174 ( minAnimator ) { minAnimator = getMinTargetAnimator ( _BOOL ) ; $F2346 ( minAnimator ) } return _BOOL ; } return _BOOL ; }
public boolean isCanceled $F72 { $F397 ( pane , _BOOL ) $F21137 ( v , pane ) return ( ( v != null ) && $F9634 ( cancelOption ) && $F151557 ( v , cancelOption ) ) ; }
public int availableProcessors $F72 { return RVMThread . availableProcessors ; }
public void updateDebug ( Boolean debug , Boolean database , Boolean exception , Boolean tracing , Boolean dump , Boolean timer , Boolean implicitAccess , Boolean queryUsage ) throws SecurityException { checkWriteAccess ( ) ; boolean hasAccess = ConfigWebUtil . hasAccess ( config , SecurityManager . TYPE_DEBUGGING ) ; $F26100 ( hasAccess ) Element debugging = _getRootElement ( NUM00 ) ; if ( debug != null ) debugging . setAttribute ( NUM00 , Caster . toString ( debug . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( database != null ) debugging . setAttribute ( NUM00 , Caster . toString ( database . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( exception != null ) debugging . setAttribute ( NUM00 , Caster . toString ( exception . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( tracing != null ) debugging . setAttribute ( NUM00 , Caster . toString ( tracing . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( dump != null ) debugging . setAttribute ( NUM00 , Caster . toString ( dump . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( timer != null ) debugging . setAttribute ( NUM00 , Caster . toString ( timer . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( implicitAccess != null ) debugging . setAttribute ( NUM00 , Caster . toString ( implicitAccess . booleanValue ( ) ) ) ; else $F152467 ( debugging ) if ( queryUsage != null ) debugging . setAttribute ( NUM00 , Caster . toString ( queryUsage . booleanValue ( ) ) ) ; else $F152467 ( debugging ) }
public final static void debug ( String s ) { if ( DEBUG ) $F7957 ( debug , s ) }
public static final void writeLongArrayXml ( $F2469 val , String name , XmlSerializer out ) throws $F18821 $F18841 ( val , out , name , N , Integer , i , Long )
public static $F46012 $F5675 filterByOr ( $F5675 values , List < ? extends EntityCondition > exprs ) { $F1275 ( values ) $F46019 ( UtilValidate , exprs , values ) $F11916 ( result ) for ( T value : values ) { boolean include = _BOOL ; for ( EntityCondition condition : exprs ) { include = condition . entityMatches ( value ) ; $F46020 ( include ) } $F46023 ( include , result , value ) } return result ; }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
$F1 public RES next ( REQ req ) { writeTraceLog ( req , middlewareName ) ; if $F167956 ( predicate , req ) { RES res = middleware . handle ( req , next ) ; writeTraceLog ( res , middlewareName ) ; return res ; } else if ( next != null ) { RES res = ( RES ) next . next ( req ) ; writeTraceLog ( res , middlewareName ) ; return res ; } else $F1337 }
protected void read ( long offset , $F96 b ) throws IOException { rafile . seek ( offset ) ; if ( rafile . read ( b ) != b . length ) { throw new IOException ( NUM00 + getPath ( ) ) ; } }
public void run $F72 { final FetcherInfo info = FetcherInfo . getFetcherInfo ( ) ; try $F5795 ( fetchloop ) $F1516 ( e ) finally { synchronized ( info . waitList ) { $F686 ( me , Thread ) for ( int i = NUM00 ; i < info . fetchers . length ; i ++ ) { if ( info . fetchers [ i ] == me ) { info . fetchers [ i ] = null ; info . numFetchers -- ; } } } } }
public CtClass makeAnnotation ( String name ) throws RuntimeException { try { CtClass cc = makeInterface ( name , get ( NUM00 ) ) ; cc . setModifiers ( cc . getModifiers ( ) | Modifier . ANNOTATION ) ; return cc ; } catch ( NotFoundException e ) { throw new RuntimeException $F2808 ( e ) ; } }
public void testNegateMathContextNegative $F72 { String a = NUM00 ; int aScale = NUM00 ; int precision = NUM00 ; RoundingMode rm = RoundingMode . CEILING ; $F9512 ( mc , precision , rm ) String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . negate ( mc ) ; $F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) }
public void add ( Node node ) $F207 ( availableNodes , node )
public void write ( OutputStream out ) throws IOException { $F1533 ( dataOut , out ) dataOut . writeShort ( $F2958 ( pool ) ) ; for ( Entry e : pool ) $F4050 ( e , dataOut ) }
protected ForeignKeyConstraint buildForeignKeyConstraint ( $F3803 fkFieldNames , $F3803 pkFieldNames , TableDefinition targetTable , DatabasePlatform platform ) { assert $F3816 ( fkFieldNames ) && $F56339 ( fkFieldNames , pkFieldNames ) ; ForeignKeyConstraint fkConstraint = new ForeignKeyConstraint $F72 ; for ( $F2277 ( i , fkFieldNames ) ) { fkConstraint . getSourceFields ( ) . add ( fkFieldNames . get ( i ) ) ; fkConstraint . getTargetFields ( ) . add ( pkFieldNames . get ( i ) ) ; } fkConstraint . setTargetTable ( targetTable . getFullName ( ) ) ; $F13410 ( fkFieldName , fkFieldNames ) String name = buildForeignKeyConstraintName ( this . getName ( ) , fkFieldName , platform . getMaxForeignKeyNameSize ( ) , platform ) ; fkConstraint . setName ( name ) ; return fkConstraint ; }
public static boolean isRewritableBatch ( String queryString , boolean noBackslashEscapes ) { LexState state = LexState . Normal ; char lastChar = NUM00 ; boolean singleQuotes = _BOOL ; boolean endingSemicolon = _BOOL ; $F7782 ( query , queryString ) int queryLength = query . length ; for ( $F119 ( i , queryLength ) ) { if ( state == LexState . Escape ) state = LexState . String ; char car = query [ i ] ; switch ( car ) { $F1262 if ( state == LexState . Normal && lastChar == NUM00 ) state = LexState . SlashStarComment ; $F597 $F1262 if ( state == LexState . SlashStarComment && lastChar == NUM00 ) { state = LexState . Normal ; } else if ( state == LexState . Normal && lastChar == NUM00 ) { state = LexState . EOLComment ; } $F597 $F1262 if ( state == LexState . Normal ) state = LexState . EOLComment ; $F597 $F1262 if ( state == LexState . Normal && lastChar == NUM00 ) { state = LexState . EOLComment ; } $F597 $F1262 if ( state == LexState . Normal ) { endingSemicolon = _BOOL ; } $F597 $F1262 if ( state == LexState . EOLComment ) { state = LexState . Normal ; } $F597 $F1262 if ( state == LexState . Normal ) { state = LexState . String ; singleQuotes = _BOOL ; } else if ( state == LexState . String && ! singleQuotes ) { state = LexState . Normal ; } $F597 $F1262 if ( state == LexState . Normal ) { state = LexState . String ; singleQuotes = _BOOL ; } else if ( state == LexState . String && singleQuotes ) { state = LexState . Normal ; } $F597 $F1262 $F30711 ( noBackslashEscapes ) if ( state == LexState . String ) state = LexState . Escape ; $F597 $F1262 if ( state == LexState . Backtick ) { state = LexState . Normal ; } else if ( state == LexState . Normal ) { state = LexState . Backtick ; } $F597 $F1267 if ( state == LexState . Normal && endingSemicolon && ( ( byte ) car >= NUM00 ) ) { endingSemicolon = _BOOL ; } $F597 } lastChar = car ; } return state != LexState . EOLComment && ! endingSemicolon ; }
private boolean zzRefill $F72 throws $F3258 { $F72981 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , zzPushbackPos ) $F72988 ( zzCurrentPos , zzBuffer , System , newBuffer ) $F7994 ( numRead , zzReader , zzBuffer , zzEndRead ) $F72989 ( numRead , _BOOL , zzEndRead ) }
public ServerBuilder ( Config config ) { Objects . requireNonNull ( config ) ; _config = config ; }
private static LDAPFilter createSubstringFilter ( SubstringFilter sf ) throws LDAPException , IOException { $F6689 anyo = sf . getAny ( ) ; ArrayList < ByteString > $F719 ( subAnyElements , anyo ) ; for ( Object o : anyo ) { subAnyElements . add ( ByteStringUtility . convertValue ( o ) ) ; } if ( sf . getInitial ( ) == null && subAnyElements . isEmpty ( ) && sf . getFinal ( ) == null ) { LocalizableMessage message = ERR_LDAP_FILTER_DECODE_NULL . get ( ) ; throw new LDAPException ( LDAPResultCode . PROTOCOL_ERROR , message ) ; } return LDAPFilter . createSubstringFilter ( sf . getName ( ) , sf . getInitial ( ) == null ? null : ByteStringUtility . convertValue ( sf . getInitial ( ) ) , subAnyElements , sf . getFinal ( ) == null ? null : ByteStringUtility . convertValue ( sf . getFinal ( ) ) ) ; }
public void testCompareNegNeg2 $F72 { $F7829 $F79258 int aSign = - NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
$F1 protected void onSizeChanged $F2026 ( w , h , oldw , oldh ) { if ( readySent ) { $F256591 ( setScaleAndCenter , getScale , getCenter ) } }
protected void disown ( AbstractNode child ) throws IllegalStateException { ensureParentage ( child ) ; child . parent = null ; }
public String qName2String ( QName qName , boolean writeNS ) { String prefix = null ; $F101311 ( namespaceURI , qName ) String localPart = qName . getLocalPart ( ) ; if $F22 ( localPart ) { $F1384 ( index , localPart ) if ( index != - NUM00 ) { $F14493 ( prefix , localPart , index ) if ( $F20 ( prefix ) && $F1263 ( prefix ) ) { registerPrefixForURI ( prefix , namespaceURI ) ; $F6943 ( localPart , index ) } else { prefix = null ; } } localPart = getLastLocalPart ( localPart ) ; } if $F1277 ( namespaceURI ) { if ( writeNS ) { String defaultNS = nsStack . getNamespaceURI ( NUM00 ) ; if $F22 ( defaultNS ) { registerPrefixForURI ( NUM00 , NUM00 ) ; } } } else { prefix = getPrefixForURI ( namespaceURI , qName . getPreferredPrefix ( ) ) ; } if $F38892 ( prefix ) return localPart ; return prefix + NUM00 + localPart ; }
public JSONException ( Throwable cause ) { $F3270 ( super , cause ) this . cause = cause ; }
$F1 public void close $F72 throws XMLStreamException { $F37599 ( log , Level ) $F59 ( stream ) }
public void testDivideRoundHalfUpNeg2 $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int resScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_UP ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) }
$F1 public String readLine $F72 throws IOException { if ( this . pointer >= this . data . length - NUM00 ) $F1337 else { $F1121 ( buf ) int c ; while $F61411 ( c , read ) { if $F61413 ( c ) { if ( ( $F37713 ( peek ) || $F37713 ( peek ) ) && ( peek ( ) != c ) ) $F5795 ( read ) $F597 } $F36813 ( buf , c ) } $F92 ( buf ) } }
protected static Map attrSetToMap ( AttrSet attrSet , boolean fetchByteValues ) { Map attributesMap = new AMHashMap ( fetchByteValues ) ; $F1933 ( attrSet , attributesMap ) $F2199 ( attrSetSize , attrSet ) if ( ! fetchByteValues ) { for ( $F119 ( i , attrSetSize ) ) { Attr attr = attrSet . elementAt ( i ) ; String values [ ] = attr . getStringValues ( ) ; attributesMap . put ( attr . getName ( ) , stringArrayToSet ( values ) ) ; } } else { for ( $F119 ( i , attrSetSize ) ) { Attr attr = attrSet . elementAt ( i ) ; attributesMap . put ( attr . getName ( ) , attr . getByteValues ( ) ) ; } } return attributesMap ; }
public void testGetMinCRL $F72 { $F40920 ( selector ) assertNull ( NUM00 , selector . getMinCRL ( ) ) ; $F88961 ( minCRL ) selector . setMinCRLNumber ( minCRL ) ; assertTrue ( NUM00 , minCRL . equals ( selector . getMinCRL ( ) ) ) ; }
public $F11685 E parseResponseData ( GDataRequest req , $F48880 resultType ) throws IOException , ServiceException { InputProperties inputProperties = new ClientInputProperties ( req , resultType ) ; return parseResponseData ( req . getParseSource ( ) , inputProperties , resultType ) ; }
public void addRtpStreamListener ( RtpStreamListener rtpStreamListener ) { mRtpStreamListener = rtpStreamListener ; }
public synchronized $F96 toByteArray $F72 { int remaining = count ; $F6482 ( remaining , EMPTY_BYTE_ARRAY ) $F2175 ( newbuf , remaining ) int pos = NUM00 ; for ( $F96 buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; $F6483 ( System , buf , newbuf , pos , c ) pos += c ; remaining -= c ; $F7256 ( remaining ) } return newbuf ; }
public void addVolumesToConsistencyGroup $F13322 ( cgName , virtualVolumeNames ) throws VPlexApiException { $F10635 ( s_logger , _baseURI ) _cgMgr . addVolumesToConsistencyGroup ( cgName , virtualVolumeNames ) ; }
public void testConstructorSignBytesPositive6 $F72 { byte $F3009 = { NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } ; int aSign = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public static boolean looksLikeAFontStyle ( String val ) { return FONT_STYLES . indexOf ( val ) >= NUM00 ; }
public static void dumpCursor ( ICursor cursor , int maxColumnWidth ) { $F4000 ( builder ) dumpCursor ( cursor , maxColumnWidth , builder ) ; Logger . d ( Logger . LOG_TAG , builder . toString ( ) ) ; }
static int computeValidLevels ( long bitPattern ) $F114498 ( Long , bitPattern )
public static void runUnderLock ( ReentrantLock lock , Runnable runnable ) { $F790 ( lock ) try $F21688 ( runnable ) $F796 ( lock ) }
private static boolean dateByMonth ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = _BOOL ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { $F16690 ( bld , yearElement ) if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendMonthOfYear ( NUM00 ) ; appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( NUM00 ) ; } else { $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; reducedPrec = _BOOL ; } } else { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { checkNotStrictISO ( fields , strictISO ) ; $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; } else { reducedPrec = _BOOL ; } } } else if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { $F188366 ( bld ) $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( NUM00 ) ; } else { reducedPrec = _BOOL ; } } else if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { $F188366 ( bld ) $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; } return reducedPrec ; }
$F1 public int insert ( String elem ) { int firstIndex = ( int ) ( elem . charAt ( NUM00 ) - NUM00 ) ; int lastIndex = ( int ) ( $F7792 ( elem ) - NUM00 ) ; storage [ firstIndex * NUM00 + lastIndex ] = elem ; $F1082 }
public void clearMovementData $F72 { pathSprites = new ArrayList < StepSprite > $F72 ; movementTarget = null ; checkFoVHexImageCacheClear ( ) ; repaint ( ) ; refreshMoveVectors ( ) ; }
public void threadRecordFailure ( Throwable t ) { threadFailure . compareAndSet ( null , t ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
protected Boolean replayCompletion ( Participant participant ) throws IllegalStateException { if $F2200 ( replayStack_ , participant ) $F31742 ( replayStack_ , participant ) return committed_ ; }
$F188545 ( sourceList , entry , _BOOL )
public void testDecoder7 $F72 { boolean res ; String originalAppIdName = mAppIdName ; int originalContentTypeValue = mContentTypeValue ; $F6822 ( rd ) for ( $F1139 ( i , OMA_CONTENT_TYPE_NAMES ) ) { mContentTypeName = OMA_CONTENT_TYPE_NAMES [ i ] ; $F57834 ( pdu , createPDU ) $F57836 ( pduDecoder , pdu ) res = pduDecoder . decodeContentType ( mWspContentTypeStart ) ; assertTrue ( res ) ; Log . d ( LOG_TAG , NUM00 + mContentTypeName + NUM00 + pduDecoder . getValueString ( ) + NUM00 ) ; assertTrue ( mContentTypeName . equals ( pduDecoder . getValueString ( ) ) ) ; } mAppIdName = originalAppIdName ; mContentTypeValue = originalContentTypeValue ; }
public void shutdownNow $F72 { shutdown = _BOOL ; final $F44535 f = engineFuture . get ( ) ; if ( f != null ) { $F38209 ( log , this ) f . cancel ( _BOOL ) ; } final ExecutorService s = engineService . get ( ) ; if ( s != null ) { $F38209 ( log , this ) $F5832 ( s ) } final HttpClient cm = clientConnectionManagerRef . get ( ) ; if ( cm != null ) { $F38209 ( log , this ) try $F5196 ( cm ) $F9877 ( log , e ) } for ( AbstractRunningQuery q : runningQueries . values ( ) ) $F11437 ( q , _BOOL ) $F725 ( priorityQueue ) $F725 ( deadlineQueue ) $F49400 ( engineFuture ) $F49400 ( engineService ) $F49400 ( clientConnectionManagerRef ) }
static public void addNotificationListener ( JMXConnector jmxConnector , $F6969 mbeanClass , NotificationListener notificationListener ) throws InstanceNotFoundException , Exception { MBeanServerConnection mbsc = jmxConnector . getMBeanServerConnection ( ) ; ObjectName objectName = generateMBeanObjectName ( mbeanClass ) ; mbsc . addNotificationListener ( objectName , notificationListener , null , null ) ; }
protected String toHTML ( String s ) { String result ; result = s ; $F2899 ( result ) $F2899 ( result ) $F2899 ( result ) $F2899 ( result ) $F2899 ( result ) return result ; }
$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog )
protected void normalizeScores $F72 { double hub_ssum = NUM00 ; double auth_ssum = NUM00 ; for ( V v : graph . getVertices ( ) ) { double hub_val = getOutputValue ( v ) . hub ; double auth_val = getOutputValue ( v ) . authority ; hub_ssum += ( hub_val * hub_val ) ; auth_ssum += ( auth_val * auth_val ) ; } $F84202 ( hub_ssum , Math ) $F84202 ( auth_ssum , Math ) for ( V v : graph . getVertices ( ) ) { HITS . Scores values = getOutputValue ( v ) ; setOutputValue ( v , new HITS . Scores ( values . hub / hub_ssum , values . authority / auth_ssum ) ) ; } }
public static int absoluteMax $F23416 ( intArray ) { int max = Integer . MIN_VALUE ; for ( $F1139 ( i , intArray ) ) { if ( Math . abs ( intArray [ i ] ) > max && intArray [ i ] != NUM00 ) { max = intArray [ i ] ; } } return max == Integer . MIN_VALUE ? NUM00 : max ; }
private boolean doAcquireNanos ( long arg , long nanosTimeout ) throws InterruptedException $F160333 ( nanosTimeout , _BOOL , deadline , System , node , addWaiter , Node , failed , p , head , tryAcquire , arg , setHead , shouldParkAfterFailedAcquire , spinForTimeoutThreshold , LockSupport , this , Thread , cancelAcquire )
boolean hasMinFeatureCount ( String feature ) { $F116 ( minFeatureCount , _BOOL ) $F86394 ( ids , clippedFeatureIndex , feature ) $F397 ( ids , _BOOL ) return ids . size ( ) >= minFeatureCount ; }
void mutate $F72 { do { int iBit ; do { iBit = m_random . nextInt ( m_nNodes * m_nNodes ) ; } while ( isSquare ( iBit ) ) ; m_bits [ iBit ] = ! m_bits [ iBit ] ; } while ( hasCycles ( ) ) ; calcScore ( ) ; }
public void put ( E e ) throws InterruptedException { checkNotNull ( e ) ; $F677 ( lock , this ) $F678 ( lock ) try { while ( count == items . length ) $F681 ( notFull ) enqueue ( e ) ; } $F796 ( lock ) }
private void deleteComments ( SpanManager sm ) { int start = NUM00 ; while ( ( start = sm . indexOf ( NUM00 , start ) ) != - NUM00 ) { int end = sm . indexOf ( NUM00 , start + NUM00 ) + NUM00 ; if ( end == - NUM00 + NUM00 ) $F12713 ( end , sm ) try { if ( lineSeparator . equals ( sm . substring ( start - lineSeparator . length ( ) , start ) ) && lineSeparator . equals ( $F147460 ( sm , end , lineSeparator ) ) ) $F90434 ( end , lineSeparator ) } $F323912 sm . delete ( start , end ) ; } }
DateTimeParseContext ( DateTimeFormatter formatter ) { super ( ) ; this . formatter = formatter ; parsed . add ( new Parsed $F72 ) ; }
public static boolean isNetworkTypeCellular ( String networkType ) { $F786 ( networkType ) }
private void defineInternalFrameCloseButtons ( UIDefaults d ) { String p = NUM00 ; String c = PAINTER_PREFIX + NUM00 ; $F70531 ( d , p ) d . put ( p + NUM00 , new TitlePaneCloseButtonWindowNotFocusedState $F72 ) ; $F13782 ( d , p ) $F82506 ( d , p , c , TitlePaneCloseButtonPainter ) $F13870 ( d , p , c , TitlePaneCloseButtonPainter ) $F266570 ( d , p , c , TitlePaneCloseButtonPainter ) $F91159 ( d , p , c , TitlePaneCloseButtonPainter ) d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneCloseButtonPainter . Which . BACKGROUND_ENABLED_WINDOWNOTFOCUSED ) ) ; $F266570 ( d , p , c , TitlePaneCloseButtonPainter ) d . put ( p + NUM00 , new LazyPainter ( c , TitlePaneCloseButtonPainter . Which . BACKGROUND_PRESSED_WINDOWNOTFOCUSED ) ) ; $F13824 ( d , p ) }
private void modify ( StoragePort port , String portNetworkId ) { port . setPortNetworkId ( portNetworkId ) ; dbClient . persistObject ( port ) ; modifiedStoragePortsList . add ( port ) ; }
public boolean is ( String word ) { return $F101864 ( m_Words , word ) ; }
public static final String removeMultipleSpacesAndReturns ( final String data ) { $F94214 ( all_data , data ) int i = NUM00 ; while $F7007 ( i , all_data ) { if ( ( $F11983 ( all_data , i ) && $F198486 ( all_data , i ) ) || ( ( all_data . charAt ( i ) == Character . LINE_SEPARATOR ) && ( all_data . charAt ( i - NUM00 ) == Character . LINE_SEPARATOR ) ) ) $F117880 ( all_data , i ) else { i ++ ; } } $F92 ( all_data ) }
public void removeListener ( ConnectableDeviceListener listener ) $F106 ( listeners , listener )
protected boolean readAttributes ( DataInputStream d , int attributes_count , attribute_info [ ] ai ) throws IOException { attribute_info a = null ; int i ; int j ; long len ; String s ; for ( i = NUM00 ; i < attributes_count ; i ++ ) { $F89921 ( j , d ) len = d . readInt ( ) & NUM00 ; s = ( ( CONSTANT_Utf8_info ) ( constant_pool [ j ] ) ) . convert ( ) ; if ( s . compareTo ( attribute_info . SourceFile ) == NUM00 ) { SourceFile_attribute sa = new SourceFile_attribute $F72 ; sa . sourcefile_index = d . readUnsignedShort ( ) ; a = ( attribute_info ) sa ; } else if ( s . compareTo ( attribute_info . ConstantValue ) == NUM00 ) { ConstantValue_attribute ca = new ConstantValue_attribute $F72 ; ca . constantvalue_index = d . readUnsignedShort ( ) ; a = ( attribute_info ) ca ; } else if ( s . compareTo ( attribute_info . Code ) == NUM00 ) { Code_attribute ca = new Code_attribute $F72 ; ca . max_stack = d . readUnsignedShort ( ) ; ca . max_locals = d . readUnsignedShort ( ) ; ca . code_length = d . readInt ( ) & NUM00 ; ca . code = new byte [ ( int ) ca . code_length ] ; d . read ( ca . code ) ; ca . exception_table_length = d . readUnsignedShort ( ) ; ca . exception_table = new exception_table_entry [ ca . exception_table_length ] ; int k ; exception_table_entry e ; for ( k = NUM00 ; k < ca . exception_table_length ; k ++ ) { e = new exception_table_entry $F72 ; e . start_pc = d . readUnsignedShort ( ) ; e . end_pc = d . readUnsignedShort ( ) ; e . handler_pc = d . readUnsignedShort ( ) ; e . catch_type = d . readUnsignedShort ( ) ; ca . exception_table [ k ] = e ; } ca . attributes_count = d . readUnsignedShort ( ) ; ca . attributes = new attribute_info [ ca . attributes_count ] ; readAttributes ( d , ca . attributes_count , ca . attributes ) ; a = ( attribute_info ) ca ; } else if ( s . compareTo ( attribute_info . Exceptions ) == NUM00 ) { Exception_attribute ea = new Exception_attribute $F72 ; ea . number_of_exceptions = d . readUnsignedShort ( ) ; if ( ea . number_of_exceptions > NUM00 ) { int k ; ea . exception_index_table = new int [ ea . number_of_exceptions ] ; for ( k = NUM00 ; k < ea . number_of_exceptions ; k ++ ) ea . exception_index_table [ k ] = d . readUnsignedShort ( ) ; } a = ( attribute_info ) ea ; } else if ( s . compareTo ( attribute_info . LineNumberTable ) == NUM00 ) { LineNumberTable_attribute la = new LineNumberTable_attribute $F72 ; la . line_number_table_length = d . readUnsignedShort ( ) ; int k ; line_number_table_entry e ; la . line_number_table = new line_number_table_entry [ la . line_number_table_length ] ; for ( k = NUM00 ; k < la . line_number_table_length ; k ++ ) { e = new line_number_table_entry $F72 ; e . start_pc = d . readUnsignedShort ( ) ; e . line_number = d . readUnsignedShort ( ) ; la . line_number_table [ k ] = e ; } a = ( attribute_info ) la ; } else if ( s . compareTo ( attribute_info . LocalVariableTable ) == NUM00 ) { LocalVariableTable_attribute la = new LocalVariableTable_attribute $F72 ; la . local_variable_table_length = d . readUnsignedShort ( ) ; int k ; local_variable_table_entry e ; la . local_variable_table = new local_variable_table_entry [ la . local_variable_table_length ] ; for ( k = NUM00 ; k < la . local_variable_table_length ; k ++ ) { e = new local_variable_table_entry $F72 ; e . start_pc = d . readUnsignedShort ( ) ; e . length = d . readUnsignedShort ( ) ; e . name_index = d . readUnsignedShort ( ) ; e . descriptor_index = d . readUnsignedShort ( ) ; e . index = d . readUnsignedShort ( ) ; la . local_variable_table [ k ] = e ; } a = ( attribute_info ) la ; } else if ( s . compareTo ( attribute_info . LocalVariableTypeTable ) == NUM00 ) { LocalVariableTypeTable_attribute la = new LocalVariableTypeTable_attribute $F72 ; la . local_variable_type_table_length = d . readUnsignedShort ( ) ; int k ; local_variable_type_table_entry e ; la . local_variable_type_table = new local_variable_type_table_entry [ la . local_variable_type_table_length ] ; for ( k = NUM00 ; k < la . local_variable_type_table_length ; k ++ ) { e = new local_variable_type_table_entry $F72 ; e . start_pc = d . readUnsignedShort ( ) ; e . length = d . readUnsignedShort ( ) ; e . name_index = d . readUnsignedShort ( ) ; e . signature_index = d . readUnsignedShort ( ) ; e . index = d . readUnsignedShort ( ) ; la . local_variable_type_table [ k ] = e ; } a = ( attribute_info ) la ; } else if ( s . compareTo ( attribute_info . Synthetic ) == NUM00 ) { Synthetic_attribute ia = new Synthetic_attribute $F72 ; a = ( attribute_info ) ia ; } else if ( s . compareTo ( attribute_info . Signature ) == NUM00 ) { Signature_attribute ia = new Signature_attribute $F72 ; ia . signature_index = d . readUnsignedShort ( ) ; a = ( attribute_info ) ia ; } else if ( s . compareTo ( attribute_info . Deprecated ) == NUM00 ) { Deprecated_attribute da = new Deprecated_attribute $F72 ; a = ( attribute_info ) da ; } else if ( s . compareTo ( attribute_info . EnclosingMethod ) == NUM00 ) { EnclosingMethod_attribute ea = new EnclosingMethod_attribute $F72 ; ea . class_index = d . readUnsignedShort ( ) ; ea . method_index = d . readUnsignedShort ( ) ; a = ( attribute_info ) ea ; } else if ( s . compareTo ( attribute_info . InnerClasses ) == NUM00 ) { InnerClasses_attribute ia = new InnerClasses_attribute $F72 ; ia . inner_classes_length = d . readUnsignedShort ( ) ; ia . inner_classes = new inner_class_entry [ ia . inner_classes_length ] ; for ( int k = NUM00 ; k < ia . inner_classes_length ; k ++ ) { inner_class_entry e = new inner_class_entry $F72 ; e . inner_class_index = d . readUnsignedShort ( ) ; e . outer_class_index = d . readUnsignedShort ( ) ; e . name_index = d . readUnsignedShort ( ) ; e . access_flags = d . readUnsignedShort ( ) ; ia . inner_classes [ k ] = e ; } a = ( attribute_info ) ia ; } else if ( s . compareTo ( attribute_info . RuntimeVisibleAnnotations ) == NUM00 ) { RuntimeVisibleAnnotations_attribute ra = new RuntimeVisibleAnnotations_attribute $F72 ; ra . number_of_annotations = d . readUnsignedShort ( ) ; ra . annotations = new annotation [ ra . number_of_annotations ] ; for ( int k = NUM00 ; k < ra . number_of_annotations ; k ++ ) { annotation annot = new annotation $F72 ; annot . type_index = d . readUnsignedShort ( ) ; annot . num_element_value_pairs = d . readUnsignedShort ( ) ; annot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; ra . annotations [ k ] = annot ; } a = ( attribute_info ) ra ; } else if ( s . compareTo ( attribute_info . RuntimeInvisibleAnnotations ) == NUM00 ) { RuntimeInvisibleAnnotations_attribute ra = new RuntimeInvisibleAnnotations_attribute $F72 ; ra . number_of_annotations = d . readUnsignedShort ( ) ; ra . annotations = new annotation [ ra . number_of_annotations ] ; for ( int k = NUM00 ; k < ra . number_of_annotations ; k ++ ) { annotation annot = new annotation $F72 ; annot . type_index = d . readUnsignedShort ( ) ; annot . num_element_value_pairs = d . readUnsignedShort ( ) ; annot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; ra . annotations [ k ] = annot ; } a = ( attribute_info ) ra ; } else if ( s . compareTo ( attribute_info . RuntimeVisibleParameterAnnotations ) == NUM00 ) { RuntimeVisibleParameterAnnotations_attribute ra = new RuntimeVisibleParameterAnnotations_attribute $F72 ; ra . num_parameters = d . readUnsignedByte ( ) ; ra . parameter_annotations = new parameter_annotation [ ra . num_parameters ] ; for ( int x = NUM00 ; x < ra . num_parameters ; x ++ ) { parameter_annotation pAnnot = new parameter_annotation $F72 ; pAnnot . num_annotations = d . readUnsignedShort ( ) ; pAnnot . annotations = new annotation [ pAnnot . num_annotations ] ; for ( int k = NUM00 ; k < pAnnot . num_annotations ; k ++ ) { annotation annot = new annotation $F72 ; annot . type_index = d . readUnsignedShort ( ) ; annot . num_element_value_pairs = d . readUnsignedShort ( ) ; annot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; pAnnot . annotations [ k ] = annot ; } ra . parameter_annotations [ x ] = pAnnot ; } a = ( attribute_info ) ra ; } else if ( s . compareTo ( attribute_info . RuntimeInvisibleParameterAnnotations ) == NUM00 ) { RuntimeInvisibleParameterAnnotations_attribute ra = new RuntimeInvisibleParameterAnnotations_attribute $F72 ; ra . num_parameters = d . readUnsignedByte ( ) ; ra . parameter_annotations = new parameter_annotation [ ra . num_parameters ] ; for ( int x = NUM00 ; x < ra . num_parameters ; x ++ ) { parameter_annotation pAnnot = new parameter_annotation $F72 ; pAnnot . num_annotations = d . readUnsignedShort ( ) ; pAnnot . annotations = new annotation [ pAnnot . num_annotations ] ; for ( int k = NUM00 ; k < pAnnot . num_annotations ; k ++ ) { annotation annot = new annotation $F72 ; annot . type_index = d . readUnsignedShort ( ) ; annot . num_element_value_pairs = d . readUnsignedShort ( ) ; annot . element_value_pairs = readElementValues ( annot . num_element_value_pairs , d , _BOOL , NUM00 ) ; pAnnot . annotations [ k ] = annot ; } ra . parameter_annotations [ x ] = pAnnot ; } a = ( attribute_info ) ra ; } else if ( s . compareTo ( attribute_info . AnnotationDefault ) == NUM00 ) { AnnotationDefault_attribute da = new AnnotationDefault_attribute $F72 ; element_value [ ] result = readElementValues ( NUM00 , d , _BOOL , NUM00 ) ; da . default_value = result [ NUM00 ] ; a = ( attribute_info ) da ; } else if ( s . equals ( attribute_info . BootstrapMethods ) ) { BootstrapMethods_attribute bsma = new BootstrapMethods_attribute $F72 ; $F27319 ( count , d ) bsma . method_handles = new short [ count ] ; bsma . arg_indices = new short [ count ] [ ] ; for ( $F119 ( num , count ) ) { short index = ( short ) d . readUnsignedShort ( ) ; bsma . method_handles [ num ] = index ; $F27319 ( argCount , d ) bsma . arg_indices [ num ] = new short [ argCount ] ; for ( $F119 ( numArg , argCount ) ) { short indexArg = ( short ) d . readUnsignedShort ( ) ; bsma . arg_indices [ num ] [ numArg ] = indexArg ; } } assert bootstrap_methods_attribute == null : NUM00 ; a = bootstrap_methods_attribute = bsma ; } else { Generic_attribute ga = new Generic_attribute $F72 ; if ( len > NUM00 ) { ga . info = new byte [ ( int ) len ] ; d . read ( ga . info ) ; } a = ( attribute_info ) ga ; } a . attribute_name = j ; a . attribute_length = len ; ai [ i ] = a ; } return _BOOL ; }
private void notifiyDownloadState $F72 { synchronized ( mDownloadMonitor ) { $F27746 ( Log , LOG_TAG ) $F8071 ( mDownloadMonitor ) } }
private PKIXBuilderParameters CreatePKIXBuilderParameters ( X509Certificate endCert ) throws CertificatePathBuildingException { X509CertSelector targetConstraints = new X509CertSelector $F72 ; targetConstraints . setCertificate ( endCert ) ; PKIXBuilderParameters params ; try { params = new PKIXBuilderParameters ( trustStore , targetConstraints ) ; params . setRevocationEnabled ( _BOOL ) ; } catch ( KeyStoreException e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } catch ( InvalidAlgorithmParameterException e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } catch ( Throwable e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } $F5363 certCollection = new $F3523 $F72 ; addCertificateCandidates ( endCert , certCollection ) ; if $F5973 ( certCollection ) { try { CertStore certStore = CertStore . getInstance ( NUM00 , new CollectionCertStoreParameters ( certCollection ) ) ; params . addCertStore ( certStore ) ; } catch ( InvalidAlgorithmParameterException e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } catch ( NoSuchAlgorithmException e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } } else $F981 ( logger ) return params ; }
public synchronized void addSeries ( XYSeries series ) $F207 ( mSeries , series )
public static String valueOf ( long value ) $F23210 ( Long , value )
public void printStackTrace $F72 { Throwable t ; StringWriter writer ; $F24473 ( writer ) ; t = $F219728 ; $F19083 ( t ) $F24477 ( t , writer ) $F31458 ( println , writer ) }
protected int effectiveBandSize $F6803 ( dim1 , dim2 ) { if ( bandSize == Double . POSITIVE_INFINITY ) { return ( dim1 > dim2 ) ? dim1 : dim2 ; } if ( bandSize >= NUM00 ) $F23220 ( bandSize ) return ( int ) Math . ceil ( ( dim1 >= dim2 ? dim1 : dim2 ) * bandSize ) ; }
private final Object arenaExchange $F200458 ( item , timed , ns ) { $F46551 a = arena ; $F200460 ( p , participant ) for ( int i = p . index ; ; ) { int b , m , c ; long j ; Node q = ( Node ) U . getObjectVolatile ( a , j = ( i < < ASHIFT ) + ABASE ) ; if ( q != null && U . compareAndSwapObject ( a , j , q , null ) ) $F200465 ( v , q , item , w , U ) else if ( i <= ( m = ( b = bound ) & MMASK ) && q == null ) { p . item = item ; if $F200476 ( U , a , j , p ) { long end = ( timed && m == NUM00 ) ? System . nanoTime ( ) + ns : NUM00 ; $F686 ( t , Thread ) for ( int h = p . hash , spins = SPINS ; ; ) { Object v = p . match ; if ( v != null ) { $F200524 ( U , p , MATCH ) p . item = null ; p . hash = h ; return v ; } else if ( spins > NUM00 ) $F200502 ( h , SPINS , t , spins , Thread ) else if ( U . getObjectVolatile ( a , j ) != p ) spins = SPINS ; else if ( $F147861 ( t ) && m == NUM00 && $F200507 ( timed , ns , end , System ) ) { U . putObject ( t , BLOCKER , this ) ; p . parked = t ; if ( U . getObjectVolatile ( a , j ) == p ) U . park ( _BOOL , ns ) ; p . parked = null ; $F200511 ( U , t , BLOCKER ) } else if ( U . getObjectVolatile ( a , j ) == p && U . compareAndSwapObject ( a , j , p , null ) ) { if ( m != NUM00 ) U . compareAndSwapInt ( this , BOUND , b , b + SEQ - NUM00 ) ; p . item = null ; p . hash = h ; i = p . index >>>= NUM00 ; if $F2754 ( Thread ) $F1274 if ( timed && m == NUM00 && ns <= NUM00 ) return TIMED_OUT ; $F597 } } } else p . item = null ; } else { if ( p . bound != b ) { p . bound = b ; p . collides = NUM00 ; i = ( i != m || m == NUM00 ) ? m : m - NUM00 ; } else if ( ( c = p . collides ) < m || m == FULL || ! U . compareAndSwapInt ( this , BOUND , b , b + SEQ + NUM00 ) ) { p . collides = c + NUM00 ; i = ( i == NUM00 ) ? m : i - NUM00 ; } else i = m + NUM00 ; p . index = i ; } } }
public static int encodeLongitudeCeil ( double longitude ) { GeoUtils . checkLongitude ( longitude ) ; if ( longitude == NUM00 ) { longitude = Math . nextDown ( longitude ) ; } return ( int ) Math . ceil ( longitude / LON_DECODE ) ; }
private $F16501 diff_lineMode $F9179 ( text1 , text2 , deadline ) { LinesToCharsResult b = diff_linesToChars ( text1 , text2 ) ; text1 = b . chars1 ; text2 = b . chars2 ; $F3803 linearray = b . lineArray ; $F40337 ( diffs , diff_main , text1 , text2 , _BOOL , deadline ) diff_charsToLines ( diffs , linearray ) ; diff_cleanupSemantic ( diffs ) ; $F340181 ( diffs , Operation ) int count_delete = NUM00 ; int count_insert = NUM00 ; String text_delete = NUM00 ; String text_insert = NUM00 ; $F340184 ( pointer , diffs ) $F340186 ( thisDiff , pointer ) while ( thisDiff != null ) { switch ( thisDiff . operation ) { $F357861 ( INSERT , count_insert , text_insert , thisDiff ) $F357861 ( DELETE , count_delete , text_delete , thisDiff ) case EQUAL : if ( count_delete >= NUM00 && count_insert >= NUM00 ) { $F45359 ( pointer ) for ( $F41842 ( j , count_delete , count_insert ) ) { $F45359 ( pointer ) $F7042 ( pointer ) } for ( Diff newDiff : diff_main ( text_delete , text_insert , _BOOL , deadline ) ) $F207 ( pointer , newDiff ) } count_insert = NUM00 ; count_delete = NUM00 ; text_delete = NUM00 ; text_insert = NUM00 ; $F597 } $F335731 ( thisDiff , pointer ) } diffs . removeLast ( ) ; return diffs ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return ID ; $F3366 return CREATE_TIME ; $F3366 return UPDATE_TIME ; $F3366 return OPERATION ; $F3366 return STATUS ; $F3366 return SRC_PATH ; $F3366 return SRC_CLUSTER ; $F3366 return SRC_DB ; $F3366 return SRC_TABLE ; $F3366 return SRC_PARTITIONS ; $F3366 return SRC_MODIFIED_TIME ; $F3366 return RENAME_TO_DB ; $F3366 return RENAME_TO_TABLE ; $F3366 return RENAME_TO_PATH ; $F3366 return EXTRAS ; $F3366 return WAITING_ON_JOBS ; $F20809 } }
public JSONBuffer appendKeyHash ( Object key ) { if ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) $F19954 addQuotedString ( key ) ; $F84 ( buffer ) $F84 ( buffer ) stack . push ( Operand . HASH ) ; return this ; }
static ReplayPromise $F8317 anyReplay ( final Duration timeout , final Promise $F1011 ... promises ) { return anyReplay ( timeout , System . currentTimeMillis ( ) , promises ) ; }
public static PolicyService sendPLLRequest ( URL policyServiceUrl , PolicyRequest preq ) throws SendRequestException , PolicyException { String lbcookie = null ; try { lbcookie = getLBCookie ( preq ) ; } catch ( Exception e ) { throw new SendRequestException ( e ) ; } PolicyService policyService = new PolicyService $F72 ; policyService . setMethodID ( PolicyService . POLICY_REQUEST_ID ) ; policyService . setPolicyRequest ( preq ) ; String xmlString = policyService . toXMLString ( ) ; Request request = new Request ( xmlString ) ; RequestSet requestSet = new RequestSet ( PolicyService . POLICY_SERVICE ) ; requestSet . addRequest ( request ) ; $F323452 ( debug , policyServiceUrl , xmlString ) Vector responses = PLLClient . send ( policyServiceUrl , lbcookie , requestSet ) ; Response response = ( Response ) responses . elementAt ( NUM00 ) ; PolicyService ps = PolicyService . parseXML ( response . getContent ( ) ) ; if $F6299 ( debug ) { debug . message ( NUM00 + NUM00 + ps . toXMLString ( ) ) ; } return ps ; }
public static URI createId ( Class < ? extends DataObject > clazz ) { return newId ( clazz , getLocation ( clazz ) ) ; }
public static double log2 ( double x ) { return Math . log ( x ) * ONE_BY_LOG2 ; }
$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math )
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public void insertElementAt ( Node value , int at ) { $F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) if ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else if $F11078 ( m_firstFree , m_mapSize ) $F132458 ( m_mapSize , m_blocksize , System , m_map , newMap , m_firstFree ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; m_firstFree ++ ; }
public Result regress ( DiscreteVariable x , $F27878 regressors ) { if ( ! binary ( x ) ) $F825 for ( Node node : regressors ) { if ( ! ( node instanceof ContinuousVariable || binary ( node ) ) ) $F825 } $F3789 _regressors = new double [ regressors . size ( ) ] [ getRows ( ) . length ] ; for ( $F2277 ( j , regressors ) ) { int col = dataSet . getColumn ( regressors . get ( j ) ) ; $F42658 ( dataCol , dataCols , col ) for ( int i = NUM00 ; i < getRows ( ) . length ; i ++ ) { _regressors [ j ] [ i ] = dataCol [ getRows ( ) [ i ] ] ; } } $F2027 target = new int [ getRows ( ) . length ] ; int col = dataSet . getColumn ( dataSet . getVariable ( x . getName ( ) ) ) ; for ( int i = NUM00 ; i < getRows ( ) . length ; i ++ ) { target [ i ] = dataSet . getInt ( getRows ( ) [ i ] , col ) ; } $F24645 ( regressorNames ) for ( Node node : regressors ) $F29791 ( regressorNames , node ) return regress ( target , x . getName ( ) , _regressors , regressorNames ) ; }
void copyFile ( String source , String target ) ;
static public List < $F246175 > tokenizeFile ( String filename , boolean doNIST ) { List < $F246175 > $F204 ( sequences ) ; LineNumberReader reader = IOTools . getReaderFromFile ( filename ) ; try { for ( $F26610 ( line , reader ) ) { if ( doNIST ) line = NISTTokenizer . tokenize ( line ) ; sequences . add ( IStrings . tokenize ( line ) ) ; } $F59 ( reader ) } $F12241 ( e ) return sequences ; }
public Statement like ( String expr ) { $F84 ( statement ) appendEscapedSQLString ( statement , expr ) ; return this ; }
public static KdbxHeader readKdbxHeader ( KdbxHeader kdbxHeader , InputStream inputStream ) throws IOException { MessageDigest digest = Encryption . getMessageDigestInstance ( ) ; DigestInputStream digestInputStream = new DigestInputStream ( inputStream , digest ) ; LittleEndianDataInputStream ledis = new LittleEndianDataInputStream ( digestInputStream ) ; if ( ! verifyMagicNumber ( ledis ) ) $F4639 if ( ! verifyFileVersion ( ledis ) ) $F4639 byte headerType ; while ( ( headerType = ledis . readByte ( ) ) != HeaderType . END ) { switch ( headerType ) { case HeaderType . COMMENT : getByteArray ( ledis ) ; $F597 case HeaderType . CIPHER_ID : kdbxHeader . setCipherUuid ( getByteArray ( ledis ) ) ; $F597 case HeaderType . COMPRESSION_FLAGS : kdbxHeader . setCompressionFlags ( getInt ( ledis ) ) ; $F597 case HeaderType . MASTER_SEED : kdbxHeader . setMasterSeed ( getByteArray ( ledis ) ) ; $F597 case HeaderType . TRANSFORM_SEED : kdbxHeader . setTransformSeed ( getByteArray ( ledis ) ) ; $F597 case HeaderType . TRANSFORM_ROUNDS : kdbxHeader . setTransformRounds ( getLong ( ledis ) ) ; $F597 case HeaderType . ENCRYPTION_IV : kdbxHeader . setEncryptionIv ( getByteArray ( ledis ) ) ; $F597 case HeaderType . PROTECTED_STREAM_KEY : kdbxHeader . setProtectedStreamKey ( getByteArray ( ledis ) ) ; $F597 case HeaderType . STREAM_START_BYTES : kdbxHeader . setStreamStartBytes ( getByteArray ( ledis ) ) ; $F597 case HeaderType . INNER_RANDOM_STREAM_ID : kdbxHeader . setInnerRandomStreamId ( getInt ( ledis ) ) ; $F597 $F1267 $F4638 } } getByteArray ( ledis ) ; kdbxHeader . setHeaderHash ( digest . digest ( ) ) ; return kdbxHeader ; }
public static $F96 copyToByteArray ( InputStream in ) throws IOException { $F39018 ( out , BUFFER_SIZE ) copy ( in , out ) ; $F11316 ( out ) }
public boolean isEnumConstant $F72 { return ( getModifiers ( ) & Modifier . ENUM ) != NUM00 ; }
public boolean containsAny ( Collection < Taxon > taxa ) { for ( Taxon taxon : taxa ) $F51680 ( taxa , taxon , _BOOL ) return _BOOL ; }
$F1431 public synchronized T dequeueTask $F72 throws InterruptedException { while $F2979 ( _data ) { if ( ! _closedInput ) wait ( ) ; else $F38791 ( NO_MORE_TASKS ) } T t = _data . removeFirst ( ) ; notify ( ) ; return t ; }
$F1 public void readExternal ( ObjectInput in ) throws $F6427 { super . readExternal ( in ) ; this . facetName = in . readUTF ( ) ; }
private boolean stringToBoolean ( String condition ) { boolean result = _BOOL ; if $F22 ( condition ) { $F28921 ( s , condition ) if ( s . equalsIgnoreCase ( NUM00 ) || s . equals ( NUM00 ) || s . equalsIgnoreCase ( NUM00 ) ) result = _BOOL ; } return result ; }
public static void writeUINT32 ( long number , OutputStream out ) throws IOException { $F6853 ( number ) $F12496 ( toWrite ) for ( int i = NUM00 ; i <= NUM00 ; i += NUM00 ) { toWrite [ i / NUM00 ] = ( byte ) ( ( number > > i ) & NUM00 ) ; } out . write ( toWrite ) ; }
public RemoteMetaDataImpl ( Schema schema ) throws RemoteException { this . schema = schema ; fields . addAll ( schema . fields ( ) ) ; }
private void checkServerResponseCode ( HttpURLConnection urlConnection ) throws RequestFailureException { try { if ( urlConnection . getResponseCode ( ) != NUM00 ) { throw new RequestFailureException ( $F7974 ( urlConnection ) + NUM00 ) ; } } catch ( IOException e ) $F49482 ( e ) }
public void addSwitchWithOptionalExtraPart $F1947 ( option , optionExtraPartSynopsis , description ) { optionList . add ( option ) ; optionExtraPartSynopsisMap . put ( option , optionExtraPartSynopsis ) ; optionDescriptionMap . put ( option , description ) ; int length = $F71221 ( option , optionExtraPartSynopsis ) + NUM00 ; $F12283 ( length , maxWidth ) }
public static Object detectLinuxDefaultFileBrowser $F4673 ( fileBrowsers ) { $F8728 ( command ) $F18793 ( command ) $F18793 ( command ) $F18793 ( command ) $F18793 ( command ) if ( fileBrowsers == null ) { fileBrowsers = $F532 ; $F16824 ( fileBrowsers ) } return Utils . isExpectedCommandOutput ( command , fileBrowsers ) ; }
public void updated $F72 { currentColor = HtmlColors . decode ( getSettingValue ( ) ) ; secondaryColor = HtmlColors . decode ( baseColor ) ; Color foregroundColor ; Color backgroundColor ; if ( type == FOREGROUND ) { foregroundColor = currentColor ; backgroundColor = secondaryColor ; } else { foregroundColor = secondaryColor ; backgroundColor = currentColor ; } preview . setForeground ( foregroundColor ) ; preview . setBackground ( backgroundColor ) ; }
public Collection < ? extends ImmutableClassType > removeInstrumentationPoints ( final Collection < ? extends ImmutableType > types ) { return removeInstrumentationPoints ( types , Collections . < IInstrumentationApplier > singleton ( RemoveAllInstrumentationApplier . getInstance ( ) ) ) ; }
private Record createRecord ( RecordProperties recordProperties ) throws RecordException { String debugDirectory ; if ( isRecording ( ) ) { debugDirectory = previousDebugDirectory ; } else { debugDirectory = SystemPropertiesManager . get ( DebugConstants . CONFIG_DEBUG_DIRECTORY ) ; } String recordDirectory = debugDirectory + File . separator + RecordConstants . RECORD_FOLDER_NAME + File . separator + recordProperties . getIssueID ( ) + File . separator + recordProperties . getReferenceID ( ) ; Record record = new Record ( recordProperties , recordDirectory ) ; try { createFolder ( record . getFolderPath ( ) ) ; PrintWriter printWriterInfo = getPrintWriterForFile ( record , RecordConstants . INFO_FILE_NAME ) ; JsonValue info = recordReport . infoReport ( record ) ; try { JSONObject json = new JSONObject $F3362 ( info ) ; printWriterInfo . println ( json . toString ( NUM00 ) ) ; } catch ( JSONException e ) { debug . warning ( NUM00 , info , e ) ; printWriterInfo . println ( info ) ; } $F1206 ( printWriterInfo ) return record ; } catch ( IOException e ) { $F59427 ( debug , recordProperties , e ) throw new RecordException ( NUM00 + recordProperties . getIssueID ( ) + NUM00 , e ) ; } }
public static LaggedEdge serializableInstance $F72 { return new LaggedEdge ( NUM00 , LaggedFactor . serializableInstance ( ) ) ; }
public final void dispatchCharactersEvents ( int nodeHandle , ContentHandler ch , boolean normalize ) throws SAXException { int identity = makeNodeIdentity ( nodeHandle ) ; if ( identity == DTM . NULL ) $F665 int type = _type2 ( identity ) ; if ( type == DTM . ELEMENT_NODE || type == DTM . DOCUMENT_NODE ) { int startNode = identity ; identity = _firstch2 ( identity ) ; if ( DTM . NULL != identity ) { int offset = - NUM00 ; int length = NUM00 ; do { type = _exptype2 ( identity ) ; if $F117450 ( type , DTM ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= NUM00 ) { if ( - NUM00 == offset ) { offset = dataIndex > > > TEXT_LENGTH_BITS ; } length += dataIndex & TEXT_LENGTH_MAX ; } else { if ( - NUM00 == offset ) { offset = m_data . elementAt ( - dataIndex ) ; } length += m_data . elementAt ( - dataIndex + NUM00 ) ; } } identity ++ ; } while ( _parent2 ( identity ) >= startNode ) ; if ( length > NUM00 ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , offset , length ) ; else m_chars . sendSAXcharacters ( ch , offset , length ) ; } } } else if ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= NUM00 ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; else m_chars . sendSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; } else { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; else m_chars . sendSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + NUM00 ) ) ; } } else { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex < NUM00 ) { dataIndex = - dataIndex ; dataIndex = m_data . elementAt ( dataIndex + NUM00 ) ; } $F124180 ( str , m_values , dataIndex ) if ( normalize ) FastStringBuffer . sendNormalizedSAXcharacters ( str . toCharArray ( ) , NUM00 , str . length ( ) , ch ) ; else ch . characters ( $F62204 ( str ) ) ; } }
$F49286 ( value , absMin , absMax , absValue , Math )
private static int lengthOfMimeNames ( String val ) { $F1384 ( len , val ) if ( len < NUM00 ) $F3935 ( len , val ) return len ; }
private char readEscapeCharacter $F72 throws JSONException { $F52837 ( escaped , in , pos ) switch ( escaped ) { $F1262 if ( pos + NUM00 > in . length ( ) ) $F25983 ( syntaxError ) $F10821 ( hex , in , pos ) pos += NUM00 ; $F121531 ( Integer , hex ) $F12596 $F12596 $F12596 $F12596 $F12596 $F1262 $F1262 $F1262 $F1267 return escaped ; } }
public static boolean isSha1String ( final String string ) { $F1832 ( Preconditions , string ) return $F1277 ( string ) && isHexString ( string ) ; }
public boolean isWatched $F72 { return watched ; }
public void addDateChangeListener ( DateChangeListener listener ) $F207 ( dateChangeListeners , listener )
public static String stripFileProtocol ( String uriString ) { $F3110 ( uriString ) return uriString ; }
public void replaceTemplate ( ElemTemplate v , int i ) throws TransformerException { if ( null == m_templates ) $F38324 replaceChild ( v , ( ElemTemplateElement ) m_templates . elementAt ( i ) ) ; m_templates . setElementAt ( v , i ) ; v . setStylesheet ( this ) ; }
public RotatedProblem ( Problem problem , RealMatrix rotation ) { super ( ) ; this . problem = problem ; this . rotation = rotation ; Solution solution = problem . newSolution ( ) ; center = new double [ getNumberOfVariables ( ) ] ; lowerBounds = new double [ getNumberOfVariables ( ) ] ; upperBounds = new double [ getNumberOfVariables ( ) ] ; for ( $F50810 ( i , getNumberOfVariables ) ) { RealVariable variable = ( RealVariable ) solution . getVariable ( i ) ; center [ i ] = ( variable . getLowerBound ( ) + variable . getUpperBound ( ) ) / NUM00 ; lowerBounds [ i ] = Math . sqrt ( NUM00 ) * ( variable . getLowerBound ( ) - center [ i ] ) ; upperBounds [ i ] = Math . sqrt ( NUM00 ) * ( variable . getUpperBound ( ) - center [ i ] ) ; } }
public static $F96 decode ( String data ) { int len = $F8196 ( data ) * NUM00 ; $F39018 ( bOut , len ) try { encoder . decode ( data , bOut ) ; } catch ( Exception e ) { throw new DecoderException $F11592 ( e ) ; } $F11316 ( bOut ) }
public void characters $F62353 ( start , length ) throws SAXException $F92922 ( m_curValue , ch , start , length )
public boolean regenerate ( Projection proj ) { boolean ret = super . regenerate ( proj ) ; if ( proj != null && ! ret ) { ret = generate ( proj ) ; } return ret ; }
$F1 public $F96 unwrap $F41456 ( incoming , offset , len ) throws LdapException { $F4727 ( copy , len ) $F21535 ( System , incoming , offset , copy , len ) return copy ; }
private int sequentialForwardSelection ( String dataFile , $F806 features , int indVarColNumber , int X [ ] , int Y [ ] , double J [ ] , int rowIni , int rowEnd ) { double sig [ ] = new double [ Y . length ] ; int sigIndex [ ] = $F14242 ( Y ) ; double corXplusy [ ] = new double [ Y . length ] ; double corX ; if $F3305 ( X ) { Regression reg = new Regression $F72 ; reg . multipleLinearRegression ( dataFile , indVarColNumber , X , features , interceptTerm , rowIni , rowEnd ) ; corX = reg . getCorrelation ( ) ; } else corX = NUM00 ; for ( $F1139 ( i , Y ) ) { corXplusy [ i ] = correlationOfNewFeature ( dataFile , features , indVarColNumber , X , Y [ i ] , rowIni , rowEnd ) ; sig [ i ] = corXplusy [ i ] - corX ; sigIndex [ i ] = Y [ i ] ; } int minSig = MathUtils . getMinIndex ( sig ) ; J [ NUM00 ] = corXplusy [ minSig ] ; J [ NUM00 ] = corX ; int maxSig = MathUtils . getMaxIndex ( sig ) ; J [ NUM00 ] = corXplusy [ maxSig ] ; return sigIndex [ maxSig ] ; }
private static $F96 codesToBytes ( String codes , boolean required ) { if $F1277 ( codes ) { $F4640 ( required ) $F1274 } if ( ( $F47012 ( codes ) ) != NUM00 ) $F21679 ( codes ) $F19710 ( bytes , codes ) for ( $F9808 ( i , bytes ) ) { int charIdx = i * NUM00 ; bytes [ i ] = ( byte ) ( $F138426 ( Integer , codes , charIdx ) ) ; } return bytes ; }
public DragEntry dragSelectedEntry $F72 { try { KeyStoreHistory history = getActiveKeyStoreHistory ( ) ; $F1338 ( history ) KeyStoreState currentState = history . getCurrentState ( ) ; KeyStore keyStore = currentState . getKeyStore ( ) ; String alias = getSelectedEntryAlias ( ) ; $F1338 ( alias ) if ( KeyStoreUtil . isKeyEntry ( alias , keyStore ) ) { JOptionPane . showMessageDialog ( frame , res . getString ( NUM00 ) , KSE . getApplicationName ( ) , JOptionPane . WARNING_MESSAGE ) ; $F1274 } if ( KeyStoreUtil . isKeyPairEntry ( alias , keyStore ) ) { Password password = currentState . getEntryPassword ( alias ) ; KeyStoreType type = KeyStoreType . resolveJce ( keyStore . getType ( ) ) ; if ( password == null && type . hasEntryPasswords ( ) ) { JOptionPane . showMessageDialog ( frame , res . getString ( NUM00 ) , KSE . getApplicationName ( ) , JOptionPane . WARNING_MESSAGE ) ; $F1274 } PrivateKey privateKey = ( PrivateKey ) keyStore . getKey ( alias , password . toCharArray ( ) ) ; $F65927 certificateChain = keyStore . getCertificateChain ( alias ) ; return new DragKeyPairEntry ( alias , privateKey , password , certificateChain ) ; } else { Certificate trustedCertificate = keyStore . getCertificate ( alias ) ; return new DragTrustedCertificateEntry ( alias , trustedCertificate ) ; } } catch ( Exception ex ) { DError . displayError ( frame , ex ) ; $F1274 } }
public void insert ( T object , int index ) { synchronized ( mLock ) { if ( mOriginalValues != null ) $F42308 ( mOriginalValues , index , object ) else $F42308 ( mObjects , index , object ) } $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
public static Document createDocument ( boolean isSecureProcessing ) { try { $F2218 ( dfactory , DocumentBuilderFactory ) dfactory . setNamespaceAware ( _BOOL ) ; $F2220 ( docBuilder , dfactory ) $F218971 ( outNode , docBuilder ) return outNode ; } catch ( ParserConfigurationException pce ) { throw new RuntimeException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_CREATEDOCUMENT_NOT_SUPPORTED , null ) ) ; } }
public double reduce ( String numericColumnName , NumericReduceFunction function ) { Column column = column ( numericColumnName ) ; return function . reduce ( column . toDoubleArray ( ) ) ; }
public void testSetBitNegativeOutside1 $F72 $F117925 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals )
static public String formatUInt8Char ( byte b ) { String ch = new String ( new byte [ ] { b } ) ; $F2899 ( ch ) return formatUInt8 ( b ) + NUM00 + ch ; }
public static final $F79542 removeIllegal ( Position pos , $F79542 moveList ) { $F79542 ret = new $F79542 $F72 ; UndoInfo ui = new UndoInfo $F72 ; $F2199 ( mlSize , moveList ) for ( $F119 ( mi , mlSize ) ) { Move m = moveList . get ( mi ) ; pos . makeMove ( m , ui ) ; pos . setWhiteMove ( ! pos . whiteMove ) ; if ( ! inCheck ( pos ) ) ret . add ( m ) ; pos . setWhiteMove ( ! pos . whiteMove ) ; pos . unMakeMove ( m , ui ) ; } return ret ; }
public static int applyMaskPenaltyRule4 ( ByteMatrix matrix ) { int numDarkCells = NUM00 ; $F30974 array = matrix . getArray ( ) ; $F2049 ( width , matrix ) $F2047 ( height , matrix ) for ( $F1316 ( y , height ) ) { for ( $F1316 ( x , width ) ) { if ( array [ y ] [ x ] == NUM00 ) { numDarkCells += NUM00 ; } } } int numTotalCells = matrix . getHeight ( ) * matrix . getWidth ( ) ; $F67468 ( darkRatio , numDarkCells , numTotalCells ) return Math . abs ( ( int ) ( darkRatio * NUM00 - NUM00 ) ) / NUM00 * NUM00 ; }
private void checkState $F72 { $F4640 ( diagramRetrieved ) }
static Hashtable convertToHash ( Map m ) { $F20036 ( retHash ) $F304893 ( s , m ) $F10531 ( iter , s ) while $F2921 ( iter ) { $F2778 ( key , iter ) $F125374 ( val , m , key ) $F39715 ( retHash , key , setToString , val ) } return retHash ; }
public void actionPerformed ( ActionEvent evt ) $F845
public boolean equal_at_start ( PlaPointInt p_point ) { $F397 ( p_point , _BOOL ) PlaPoint first = corner_first ( ) ; $F1964 ( first , p_point ) }
public void forEachBlockDepthFirst ( boolean reverse , SsaBasicBlock . Visitor v ) { BitSet visited = new BitSet $F716 ( blocks ) ; Stack < SsaBasicBlock > stack = new Stack < SsaBasicBlock > $F72 ; SsaBasicBlock rootBlock = reverse ? getExitBlock ( ) : getEntryBlock ( ) ; $F2329 ( rootBlock ) $F722 ( stack ) stack . add ( rootBlock ) ; while $F3817 ( stack ) { SsaBasicBlock cur = stack . pop ( ) ; SsaBasicBlock parent = stack . pop ( ) ; if ( ! visited . get ( cur . getIndex ( ) ) ) { BitSet children = reverse ? cur . getPredecessors ( ) : cur . getSuccessors ( ) ; for ( $F304395 ( i , children ) ; i >= NUM00 ; $F304396 ( i , children ) ) { stack . add ( cur ) ; $F18208 ( stack , blocks , i ) } visited . set ( cur . getIndex ( ) ) ; v . visitBlock ( cur , parent ) ; } } }
protected void fillPath $F72 $F18992 ( mPSStream , mFillOpStr )
$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System )
public boolean isLastWindow ( AccessibilityWindowInfo baseWindow , int windowType ) { int index = getWindowIndex ( baseWindow ) ; $F3627 ( index , WRONG_INDEX , _BOOL ) $F2199 ( count , mWindows ) for ( $F2634 ( i , index , count ) ) { AccessibilityWindowInfo window = mWindows . get ( i ) ; if ( window != null && window . getType ( ) == windowType ) { return _BOOL ; } } return _BOOL ; }
public void passPgSessionMapEx ( ViewBean other ) { Map attributes = getPageSessionAttributes ( ) ; for ( $F2774 ( i , retainPageSessionsBtwTabs ) ) { $F2778 ( key , i ) other . setPageSessionAttribute ( key , ( Serializable ) attributes . get ( key ) ) ; } other . setPageSessionAttribute ( getTrackingTabIDName ( ) , ( Serializable ) attributes . get ( getTrackingTabIDName ( ) ) ) ; }
public long time $F72 { return heartbeatTime ; }
public boolean hitClip $F2026 ( x , y , width , height ) { return g . hitClip ( x , y , width , height ) ; }
public static CloseWatcher pollUnclosed $F72 { $F145042 q = queue ; $F1338 ( q ) while ( _BOOL ) { CloseWatcher cw = ( CloseWatcher ) q . poll ( ) ; $F1338 ( cw ) $F4578 ( refs , cw ) if ( cw . closeable != null ) { return cw ; } } }
private static boolean appendOdexesToClassPath ( Context cxt , File dexDir , $F806 names ) { $F22814 ( strDexDir , dexDir ) $F8728 ( jarPaths ) for ( $F1139 ( i , names ) ) { String jarPath = strDexDir + NUM00 + names [ i ] ; $F1705 ( f , jarPath ) if $F7110 ( f ) $F207 ( jarPaths , jarPath ) } $F5442 ( jarsOfDex , jarPaths ) jarPaths . toArray ( jarsOfDex ) ; PathClassLoader pcl = ( PathClassLoader ) cxt . getClassLoader ( ) ; try { if ( Build . VERSION . SDK_INT < SDK_INT_ICS ) { FrameworkHack . appendDexListImplUnderICS ( jarsOfDex , pcl , dexDir ) ; } else { boolean kitkatPlus = Build . VERSION . SDK_INT >= SDK_INT_KITKAT ; boolean marshmallowPlus = Build . VERSION . SDK_INT >= SDK_INT_MARSHMALLOW ; $F14386 jarFiles = DexDex . strings2Files ( jarsOfDex ) ; FrameworkHack . appendDexListImplICS ( jarFiles , pcl , dexDir , kitkatPlus , marshmallowPlus ) ; } $F42002 ( jarName , names , theAppended ) if ( debug ) { $F12258 ( Log , TAG , pcl ) $F12258 ( Log , TAG , theAppended ) } } $F12237 ( ex ) return _BOOL ; }
$F1 public final int readInt $F72 throws IOException { $F52634 ( dis , work ) return ( work [ NUM00 ] ) < < NUM00 | $F169749 ( work ) | $F169749 ( work ) | $F18896 ( work ) ; }
private void assertSerializeAndDesDateTime ( String dateTimeString ) throws RyaTypeResolverException $F47309 ( assertSerializeAndDesDateTime , dateTimeString )
$F125330 ( isHardMode )
protected String doIt $F72 throws Exception { setup ( ) ; for ( MWarehouse warehouse : warehouses ) for ( MCostType costType : costTypes ) for ( MCostElement costElement : costElements ) for ( int productId : products ) generateInventoryValue ( productId , costType . getM_CostType_ID ( ) , costElement . getM_CostElement_ID ( ) , warehouse . getM_Warehouse_ID ( ) ) ; $F180903 ( pstmt ) commitEx ( ) ; DB . close ( pstmt ) ; DB . executeUpdate ( NUM00 + DB . TO_DATE ( p_DateValue ) + NUM00 , getAD_PInstance_ID ( ) , get_TrxName ( ) ) ; return NUM00 + count ; }
public void run $F72 { setup ( ) ; $F973 ( log ) for ( TaskStorageManager taskStorageManager : taskStorageManagers ) { $F10089 ( taskStorageManager ) taskStorageManager . stopStores ( ) ; $F101275 ( log , taskStorageManager ) } $F209111 ( log , storeBaseDir ) }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public static $F2027 shuffle $F23416 ( input ) { $F3807 vals = new $F15272 ( input . length ) ; $F46150 ( i , input , vals ) Collections . shuffle ( vals , SEEDED_RANDOM ) ; $F22974 ( copy , input ) for ( $F1139 ( i , input ) ) $F15302 ( copy , i , vals ) return copy ; }
public void read ( int i ) { VariableValue v = rowVector . elementAt ( i ) ; v . readAll ( ) ; }
protected $F240647 transformExpressions ( List < ? extends Expression > expressions , ExpressionTransformer transformer ) { $F240647 list = new ArrayList $F185096 $F716 ( expressions ) ; for ( Expression expr : expressions ) { list . add ( transformer . transform ( expr ) ) ; } return list ; }
public String prefixForward ( int length ) { final String prefix = prefix ( length ) ; this . pointer += length ; this . index += length ; this . column += length ; return prefix ; }
private boolean canAddTask $F72 { return tCur == null ; }
public void flush $F72 throws IOException { $F165012 ( printWriter ) $F165012 ( gzipOutputStream ) }
public int start $F72 { started . compareAndSet ( _BOOL , _BOOL ) ; $F2346 ( server ) return server . getServerPort ( ) ; }
public static double angle ( Tuple3d a , Tuple3d b ) { $F25547 ( dx , b , a ) $F25549 ( dy , b , a ) double angle = NUM00 ; if ( dx == NUM00 ) { if ( dy == NUM00 ) angle = NUM00 ; else if ( dy > NUM00 ) angle = Math . PI / NUM00 ; else angle = ( Math . PI * NUM00 ) / NUM00 ; } else if ( dy == NUM00 ) { if ( dx > NUM00 ) angle = NUM00 ; else angle = Math . PI ; } else { if ( dx < NUM00 ) angle = Math . atan ( dy / dx ) + Math . PI ; else if ( dy < NUM00 ) angle = Math . atan ( dy / dx ) + ( NUM00 * Math . PI ) ; else angle = Math . atan ( dy / dx ) ; } return angle ; }
public void addStringToTable ( $F96 oldString , byte newString ) { int length = oldString . length ; $F130978 ( str , length ) $F135 ( System , oldString , str , length ) str [ length ] = newString ; stringTable [ tableIndex ++ ] = str ; if ( tableIndex == NUM00 ) { bitsToGet = NUM00 ; } else if ( tableIndex == NUM00 ) { bitsToGet = NUM00 ; } else $F78418 ( tableIndex , bitsToGet ) }
public static boolean identical ( URI first , URI second ) { if $F57241 ( first , second ) $F23588 ( first , second ) return _BOOL ; }
default < ST > Xor < ST , T > toXor ( final ST secondary ) { final $F19288 o = toOptional ( ) ; return o . isPresent ( ) ? Xor . primary ( o . get ( ) ) : Xor . secondary ( secondary ) ; }
public void processInvite ( RequestEvent requestEvent , ServerTransaction serverTransaction ) { $F38109 ( sipProvider , requestEvent ) $F38111 ( request , requestEvent ) $F556 ( logger , request ) timer . schedule ( new DelayedInviteResponsesTask ( requestEvent , sipProvider ) , NUM00 ) ; }
$F156045 ( msg , x , super , this )
protected Instances dataFromXML ( Instances header ) throws Exception { Instances result ; Element node ; $F384979 ( list ) list = getChildTags ( m_Document . getDocumentElement ( ) , TAG_BODY ) ; $F36986 ( node , list ) list = getChildTags ( node , TAG_INSTANCES ) ; $F36986 ( node , list ) result = createInstances ( header , node ) ; return result ; }
private static String prependIfMissing ( final String str , final CharSequence prefix , final boolean ignoreCase , final CharSequence ... prefixes ) { if ( str == null || isEmpty ( prefix ) || startsWith ( str , prefix , ignoreCase ) ) { return str ; } if $F22195 ( prefixes ) { for ( final CharSequence p : prefixes ) { if ( startsWith ( str , p , ignoreCase ) ) { return str ; } } } return prefix . toString ( ) + str ; }
protected CacheDistributionAdvisor createDistributionAdvisor ( InternalRegionArguments internalRegionArgs ) { return CacheDistributionAdvisor . createCacheDistributionAdvisor ( this ) ; }
public $F131 toArray $F72 { $F91915 ( al ) $F91919 ( p , first , succ , item , al ) $F3537 ( al ) }
public void addMouseListener ( GlobalMouseListener listener ) $F207 ( listeners , listener )
private Vector1D finiteOrNullPoint ( final double x ) { return Double . isInfinite ( x ) ? null : new Vector1D ( x ) ; }
public void loadPDF ( final File input ) { $F2329 ( input ) scale = NUM00 ; $F24536 ( PDFfile , input ) fileLoc . setText ( PDFfile ) ; openFile ( input , null , _BOOL ) ; }
public CharBuffer append ( Object obj ) $F35308 ( append , String , obj )
public void testIntbyInt1 $F72 { byte $F3009 = $F104038 ; byte $F3014 = $F104038 ; int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public abstract void initializeConstraints ( Step step , Settings settings ) ;
private static void checkFileValidation ( File file ) { $F1149 ( file ) if $F1906 ( file ) { throw new IllegalArgumentException ( $F25926 ( file ) ) ; } file . canRead ( ) ; }
public < ResultT > Set < ResultT > toSet ( Converter < ResultT > converter ) { try { if ( isEmpty ( cursor ) ) $F29020 ( Collections ) return populate ( converter , new HashSet < ResultT > $F90762 ( cursor ) ) ; } $F49978 ( close ) }
public static Builder newBuilder $F72 { return new Builder $F72 ; }
public static void stashDisableAssertionArg ( String arg ) { if $F3581 ( arg ) { assertionsEnabled = _BOOL ; } else { $F10128 ( disabledAssertionStrings , arg ) } }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
public Iterator < Stream > memberIterator $F72 $F16048 ( memberSet )
private void cleanMapping $F72 { $F15277 ( toRemove ) $F115 ( size , mListMapping ) for ( $F1316 ( i , size ) ) { if ( mListMapping . keyAt ( i ) == mListMapping . valueAt ( i ) ) { toRemove . add ( mListMapping . keyAt ( i ) ) ; } } $F54171 ( size , toRemove ) for ( $F1316 ( i , size ) ) { mListMapping . delete ( toRemove . get ( i ) ) ; } }
public static String timeUntil ( final int seconds , final boolean forceSeconds ) { $F1121 ( sbuf ) timeUntil ( sbuf , seconds , forceSeconds ) ; $F92 ( sbuf ) }
public void remove ( T item ) { if $F16914 ( set , item ) { fireContentsChanged ( this , NUM00 , getSize ( ) - NUM00 ) ; } }
public static void append ( File file , Reader reader , String charset ) throws IOException { append ( file , reader , charset , _BOOL ) ; }
void parseIgnoredSection $F72 throws IOException { int depth = NUM00 ; in . replace ++ ; while ( _BOOL ) { switch ( ch ) { $F1262 if ( $F7614 ( ch , in ) == NUM00 ) { if ( $F7614 ( ch , in ) == NUM00 ) { $F10201 ( ch , in ) depth ++ ; } } $F597 $F1262 if ( $F7614 ( ch , in ) == NUM00 ) { if ( $F7614 ( ch , in ) == NUM00 ) { $F10201 ( ch , in ) if ( -- depth == NUM00 ) { in . replace -- ; $F665 } } } $F597 $F52533 error ( NUM00 ) ; in . replace -- ; $F665 $F1267 $F10201 ( ch , in ) $F597 } } }
private synchronized int readRecordLength $F72 throws IOException { if ( in . getPos ( ) >= end ) $F7629 $F5952 ( length , in ) if ( sync != null && length == SYNC_ESCAPE ) { in . readFully ( syncCheck ) ; if $F1209 ( Arrays , sync , syncCheck ) $F14525 syncSeen = _BOOL ; if ( in . getPos ( ) >= end ) $F7629 $F5961 ( length , in ) } else { syncSeen = _BOOL ; } return length ; }
public void addSlide ( $F4170 Fragment fragment ) { fragments . add ( fragment ) ; if ( isWizardMode ) { $F4173 ( setOffScreenPageLimit , fragments ) } $F4176 ( mPagerAdapter ) }
public DefaultIntervalCategoryDataset ( $F173034 seriesKeys , $F173034 categoryKeys , Number [ ] [ ] starts , Number [ ] [ ] ends ) { this . startData = starts ; this . endData = ends ; if ( starts != null && ends != null ) { String baseName = NUM00 ; ResourceBundle resources = ResourceBundleWrapper . getBundle ( baseName ) ; int seriesCount = starts . length ; if ( seriesCount != ends . length ) { $F68104 ( errMsg ) $F29415 ( errMsg ) } if ( seriesCount > NUM00 ) { if ( seriesKeys != null ) { if ( seriesKeys . length != seriesCount ) $F11813 this . seriesKeys = seriesKeys ; } else { String prefix = $F241237 ( resources ) ; this . seriesKeys = generateKeys ( seriesCount , prefix ) ; } $F26358 ( categoryCount , starts ) if ( categoryCount != ends [ NUM00 ] . length ) { $F68104 ( errMsg ) $F29415 ( errMsg ) } if ( categoryKeys != null ) { if ( categoryKeys . length != categoryCount ) $F11813 this . categoryKeys = categoryKeys ; } else { String prefix = $F241237 ( resources ) ; this . categoryKeys = generateKeys ( categoryCount , prefix ) ; } } else { this . seriesKeys = new Comparable $F380 ; this . categoryKeys = new Comparable $F380 ; } } }
public void translate ( double dx , double dy ) { if $F931 ( isRelative ) { x += dx ; y += dy ; } if ( sourcePoint != null ) { sourcePoint . setX ( sourcePoint . getX ( ) + dx ) ; sourcePoint . setY ( sourcePoint . getY ( ) + dy ) ; } if ( targetPoint != null ) { targetPoint . setX ( targetPoint . getX ( ) + dx ) ; targetPoint . setY ( targetPoint . getY ( ) + dy ) ; } if ( TRANSLATE_CONTROL_POINTS && points != null ) { $F2199 ( count , points ) for ( $F119 ( i , count ) ) { mxPoint pt = ( mxPoint ) points . get ( i ) ; pt . setX ( pt . getX ( ) + dx ) ; pt . setY ( pt . getY ( ) + dy ) ; } } }
public abstract void fill ( ByteBuffer buffer , long id ) ;
private String anonymizePassword ( String password ) { $F4158 ( password ) $F83 ( sb ) for ( $F1088 ( i , password ) ) $F86 ( sb ) $F92 ( sb ) }
public final void write $F3295 ( data ) $F45619 ( byteBuffer , data )
public RRDatabase ( File file ) throws IOException { $F32928 ( name , file ) rrdFile = new RRDFile ( file ) ; header = new Header ( rrdFile ) ; nameindex = new HashMap $F8434 ( header . dsCount ) ; dataSources = new ArrayList < DataSource > ( header . dsCount ) ; for ( int i = NUM00 ; i < header . dsCount ; i ++ ) { DataSource ds = new DataSource ( rrdFile ) ; $F22760 ( nameindex , ds , i ) dataSources . add ( ds ) ; } archives = new ArrayList < Archive > ( header . rraCount ) ; for ( int i = NUM00 ; i < header . rraCount ; i ++ ) { Archive archive = new Archive ( this ) ; archives . add ( archive ) ; } long last_up = ( long ) rrdFile . readLong ( ) * NUM00 ; if ( header . getVersionAsInt ( ) >= Constants . VERSION_WITH_LAST_UPDATE_SEC ) { $F58758 ( last_up_usec , rrdFile ) last_up += last_up_usec / NUM00 ; } lastUpdate = new Date ( last_up ) ; for ( int i = NUM00 ; i < header . dsCount ; i ++ ) { DataSource ds = dataSources . get ( i ) ; ds . loadPDPStatusBlock ( rrdFile ) ; } for ( int i = NUM00 ; i < header . rraCount ; i ++ ) { Archive archive = archives . get ( i ) ; archive . loadCDPStatusBlocks ( rrdFile , header . dsCount ) ; } for ( int i = NUM00 ; i < header . rraCount ; i ++ ) { Archive archive = archives . get ( i ) ; archive . loadCurrentRow ( rrdFile ) ; } for ( int i = NUM00 ; i < header . rraCount ; i ++ ) { Archive archive = archives . get ( i ) ; archive . loadData ( rrdFile , header . dsCount ) ; } }
$F136015 ( inputStream )
public Address malloc ( int size , int howmany ) { int result = nextReservableAddress ; nextReservableAddress += size * howmany ; if ( nextReservableAddress > ( MEMSIZE + memAddressStart ) ) { addressOutOfRange = _BOOL ; $F1274 } return new Address ( Op . MEM , size , result ) ; }
public static String maskLeft $F41200 ( s , len , mask_ch ) { $F18806 ( len , s ) len = $F90553 ( Math , len , s ) ; $F83 ( sb ) $F48485 ( i , len , sb , mask_ch ) $F13047 ( sb , s , len ) $F92 ( sb ) }
public static double pdf $F12359 ( x , mu , sigma , skew ) { x = ( x - mu ) / sigma ; if $F33322 ( Math , skew ) { x = - Math . log ( NUM00 - skew * x ) / skew ; } return MathUtil . SQRTHALF * Math . exp ( - NUM00 * x * x ) / sigma / ( NUM00 - skew * x ) ; }
public Composer to ( long animDuration , float x , float y , int alpha , float scaleX , float scaleY , float rotation , Ease ease ) { mTweenParameterList . add ( new TweenParameter ( x , y , alpha , scaleX , scaleY , rotation , animDuration , ease ) ) ; return this ; }
$F1 public String toString $F72 { $F20818 ( buffer ) try { print ( buffer ) ; } $F7078 ( e ) $F92 ( buffer ) }
$F1 public MemChunkHolder < BigDataMemAllocator > createChunk ( long size , boolean autoreclaim ) { MemChunkHolder < BigDataMemAllocator > ret = null ; Long addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; if ( NUM00 == addr && m_activegc ) { forceGC ( ) ; addr = m_vmasvc . allocate ( m_nid , size , _BOOL ) ; } if ( NUM00 != addr ) { ret = new MemChunkHolder < BigDataMemAllocator > ( this , addr , size ) ; ret . setCollector ( m_chunkcollector ) ; $F160288 ( autoreclaim , m_chunkcollector , ret ) } return ret ; }
protected void drawLabel ( Canvas canvas , String labelText , DefaultRenderer renderer , $F141966 prevLabelsBounds , int centerX , int centerY , float shortRadius , float longRadius , float currentAngle , float angle , int left , int right , int color , Paint paint , boolean line , boolean display ) { if ( renderer . isShowLabels ( ) || display ) { paint . setColor ( color ) ; double rAngle = Math . toRadians ( NUM00 - ( currentAngle + angle / NUM00 ) ) ; $F33859 ( sinValue , Math , rAngle ) $F54226 ( cosValue , Math , rAngle ) $F175108 ( x1 , Math , centerX , shortRadius , sinValue ) $F175108 ( y1 , Math , centerY , shortRadius , cosValue ) $F175108 ( x2 , Math , centerX , longRadius , sinValue ) $F175108 ( y2 , Math , centerY , longRadius , cosValue ) float size = renderer . getLabelsTextSize ( ) ; float extra = Math . max ( size / NUM00 , NUM00 ) ; $F175116 ( paint , Align ) if ( x1 > x2 ) { extra = - extra ; paint . setTextAlign ( Align . RIGHT ) ; } float xLabel = x2 + extra ; float yLabel = y2 ; float width = right - xLabel ; if ( x1 > x2 ) { width = xLabel - left ; } labelText = getFitText ( labelText , width , paint ) ; float widthLabel = paint . measureText ( labelText ) ; boolean okBounds = _BOOL ; while ( ! okBounds && line ) { boolean intersects = _BOOL ; $F2199 ( length , prevLabelsBounds ) for ( int j = NUM00 ; j < length && ! intersects ; j ++ ) { RectF prevLabelBounds = prevLabelsBounds . get ( j ) ; if ( prevLabelBounds . intersects ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) { intersects = _BOOL ; yLabel = Math . max ( yLabel , prevLabelBounds . bottom ) ; } } okBounds = ! intersects ; } if ( line ) { y2 = ( int ) ( yLabel - size / NUM00 ) ; canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; canvas . drawLine ( x2 , y2 , x2 + extra , y2 , paint ) ; } else { $F5595 ( paint , Align ) } canvas . drawText ( labelText , xLabel , yLabel , paint ) ; if ( line ) { prevLabelsBounds . add ( new RectF ( xLabel , yLabel , xLabel + widthLabel , yLabel + size ) ) ; } } }
$F31880 ( position , offset , offsetPixels , mDecorChildCount , scrollX , getScrollX , paddingLeft , getPaddingLeft , paddingRight , getPaddingRight , width , getWidth , childCount , getChildCount , i , child , getChildAt , lp , hgrav , Gravity , childLeft , Math , childOffset , mOnPageChangeListener , mInternalPageChangeListener , mPageTransformer , transformPos , getClientWidth , mCalledSuper , _BOOL )
public void DrawSemivariogramSurface ( double Radius , boolean AnIsotropic ) { $F3789 data = new double [ NUM00 ] [ BinSurface . length * BinSurface [ NUM00 ] . length ] ; int n = NUM00 ; double max = Double . MIN_VALUE ; for ( $F1139 ( i , BinSurface ) ) { for ( $F179379 ( j , BinSurface , i ) ) { data [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . GridHorDistance ; data [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . GridVerDistance ; if ( ( Math . pow ( data [ NUM00 ] [ n ] , NUM00 ) + Math . pow ( data [ NUM00 ] [ n ] , NUM00 ) ) <= Radius * Radius && ! Double . isNaN ( BinSurface [ i ] [ j ] . Value ) ) { data [ NUM00 ] [ n ] = BinSurface [ i ] [ j ] . Value ; if ( max < data [ NUM00 ] [ n ] ) { max = data [ NUM00 ] [ n ] ; } } else { data [ NUM00 ] [ n ] = - NUM00 ; } n ++ ; } } DefaultXYZDataset dataset = new DefaultXYZDataset $F72 ; dataset . addSeries ( NUM00 , data ) ; NumberAxis xAxis = new NumberAxis $F72 ; xAxis . setStandardTickUnits ( NumberAxis . createIntegerTickUnits ( ) ) ; xAxis . setLowerMargin ( NUM00 ) ; xAxis . setUpperMargin ( NUM00 ) ; NumberAxis yAxis = new NumberAxis $F72 ; yAxis . setStandardTickUnits ( NumberAxis . createIntegerTickUnits ( ) ) ; yAxis . setLowerMargin ( NUM00 ) ; yAxis . setUpperMargin ( NUM00 ) ; XYBlockRenderer renderer = new XYBlockRenderer $F72 ; renderer . setBlockWidth ( LagSize ) ; renderer . setBlockHeight ( LagSize ) ; renderer . setBlockAnchor ( RectangleAnchor . CENTER ) ; LookupPaintScale paintScale = new LookupPaintScale ( NUM00 , max , Color . white ) ; double colorRange = max / NUM00 ; paintScale . add ( NUM00 , Color . blue ) ; paintScale . add ( NUM00 * colorRange , Color . green ) ; paintScale . add ( NUM00 * colorRange , Color . cyan ) ; paintScale . add ( NUM00 * colorRange , Color . yellow ) ; paintScale . add ( NUM00 * colorRange , Color . ORANGE ) ; paintScale . add ( NUM00 * colorRange , Color . red ) ; renderer . setPaintScale ( paintScale ) ; XYPlot plot = new XYPlot ( dataset , xAxis , yAxis , renderer ) ; plot . setBackgroundPaint ( Color . lightGray ) ; plot . setDomainGridlinesVisible ( _BOOL ) ; plot . setRangeGridlinePaint ( Color . white ) ; if ( AnIsotropic ) { CombinedRangeXYPlot combinedrangexyplot = new CombinedRangeXYPlot $F72 ; $F38363 ( seriesT1 ) XYSeriesCollection AngleCollct = new XYSeriesCollection $F72 ; double bw = BandWidth ; double r = bw / Math . sin ( Tolerance ) ; if ( r > Radius ) { bw = Radius * Math . sin ( Tolerance ) ; r = Radius ; } seriesT1 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ; if ( ( double ) Math . round ( Math . sin ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { if ( ( double ) Math . round ( Math . cos ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { double a = ( NUM00 + $F264497 ( Math , Angle ) ) ; double b = NUM00 * bw / Math . sin ( Angle ) * $F264497 ( Math , Angle ) ; double c = $F264497 ( Math , Angle ) * Math . pow ( bw / Math . sin ( Angle ) , NUM00 ) - Math . pow ( Radius , NUM00 ) ; double x1 = ( - b + Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; double y1 = Math . tan ( Angle ) * ( x1 + bw / Math . sin ( Angle ) ) ; double x2 = ( - b - Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; double y2 = Math . tan ( Angle ) * ( x2 + bw / Math . sin ( Angle ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x2 , y2 ) } else { double x1 = - bw * Math . sin ( Angle ) ; double y1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; double y2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x1 , y2 ) } } else { double y1 = bw * Math . cos ( Angle ) ; double x1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; double x2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT1 , x1 , y1 ) else $F42308 ( seriesT1 , x2 , y1 ) } AngleCollct . addSeries ( seriesT1 ) ; $F38363 ( seriesT2 ) seriesT2 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ; $F38365 ( seriesT2 ) AngleCollct . addSeries ( seriesT2 ) ; $F38363 ( seriesT3 ) seriesT3 . add ( Radius * Math . cos ( Angle ) , Radius * Math . sin ( Angle ) ) ; $F38365 ( seriesT3 ) AngleCollct . addSeries ( seriesT3 ) ; $F38363 ( seriesT4 ) seriesT4 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ; $F38365 ( seriesT4 ) AngleCollct . addSeries ( seriesT4 ) ; $F38363 ( seriesT5 ) seriesT5 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ; if ( ( double ) Math . round ( Math . sin ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { if ( ( double ) Math . round ( Math . cos ( Angle ) * NUM00 ) / NUM00 != NUM00 ) { double a = ( NUM00 + $F264497 ( Math , Angle ) ) ; double b = - NUM00 * bw / Math . sin ( Angle ) * $F264497 ( Math , Angle ) ; double c = $F264497 ( Math , Angle ) * Math . pow ( bw / Math . sin ( Angle ) , NUM00 ) - Math . pow ( Radius , NUM00 ) ; double x1 = ( - b + Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; double y1 = Math . tan ( Angle ) * ( x1 - bw / Math . sin ( Angle ) ) ; double x2 = ( - b - Math . sqrt ( Math . pow ( b , NUM00 ) - NUM00 * a * c ) ) / ( NUM00 * a ) ; double y2 = Math . tan ( Angle ) * ( x2 - bw / Math . sin ( Angle ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x2 , y2 ) } else { double x1 = bw * Math . sin ( Angle ) ; double y1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; double y2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( x1 , NUM00 ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y2 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x1 , y2 ) } } else { double y1 = - bw * Math . cos ( Angle ) ; double x1 = Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; double x2 = - Math . sqrt ( Math . pow ( Radius , NUM00 ) - Math . pow ( y1 , NUM00 ) ) ; double d1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x1 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; double d2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x2 ) , NUM00 ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y1 ) , NUM00 ) ) ) ; if ( d1 < d2 ) $F42308 ( seriesT5 , x1 , y1 ) else $F42308 ( seriesT5 , x2 , y1 ) } AngleCollct . addSeries ( seriesT5 ) ; plot . setDataset ( NUM00 , AngleCollct ) ; XYLineAndShapeRenderer lineshapRend = new XYLineAndShapeRenderer ( _BOOL , _BOOL ) ; for ( int i = NUM00 ; i < AngleCollct . getSeriesCount ( ) ; i ++ ) { lineshapRend . setSeriesPaint ( i , Color . BLACK ) ; } plot . setRenderer ( NUM00 , lineshapRend ) ; combinedrangexyplot . add ( plot ) ; } plot . setDatasetRenderingOrder ( DatasetRenderingOrder . FORWARD ) ; JFreeChart chart = new JFreeChart ( NUM00 , plot ) ; chart . removeLegend ( ) ; chart . setBackgroundPaint ( Color . white ) ; ChartFrame frame = new ChartFrame ( NUM00 , chart ) ; $F30070 ( frame ) frame . setVisible ( _BOOL ) ; }
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
public Single < TAccessToken > grantNewAccessToken ( OAuth2Grant < TAccessToken > grant ) { return grantNewAccessToken ( grant , Calendar . getInstance ( ) ) ; }
public static Number floor ( Number a ) { if ( isFloatingPoint ( a ) ) { return Math . floor ( a . doubleValue ( ) ) ; } else $F13598 ( a ) }
private void readDefsElement ( IXMLElement elem ) throws IOException { for ( IXMLElement child : elem . getChildren ( ) ) { Figure childFigure = readElement ( child ) ; } }
$F5466 private static ActivityWrapper findLauncherActivityForDevice ( $F1113 List < ActivityWrapper > launchableActivities , $F1113 IDevice device ) { if ( device . supportsFeature ( IDevice . HardwareFeature . TV ) ) $F4915 ( findLeanbackLauncher , launchableActivities ) $F1274 }
public boolean isQueryRunning ( final BoundEntity song ) { synchronized ( mRunningQueries ) $F298 ( mRunningQueries , song ) }
$F148243 ( checkNotClosed , trimToSize , trimToFileCount , journalWriter )
$F56555 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser )
private Map < String , ExtensionFileFilter > addExtensions ( JFileChooser chooser ) { Map < String , ExtensionFileFilter > filters = new HashMap < String , ExtensionFileFilter > $F72 ; for ( $F19318 ( entry , exts ) ) { ExtensionFileFilter filter = new ExtensionFileFilter ( $F15245 ( entry ) ) ; $F15251 ( filters , entry , filter ) chooser . addChoosableFileFilter ( filter ) ; } return filters ; }
public static String withNodeInfo ( AccessibilityNodeInfo nodeInfo ) { $F1338 ( nodeInfo ) return String . format ( NUM00 , nodeInfo . getText ( ) , nodeInfo . getContentDescription ( ) ) ; }
static int allParametersAndArgumentsMatchWithDefaultParams ( Parameter [ ] params , ClassNode [ ] args ) { int dist = NUM00 ; ClassNode ptype = null ; for ( int i = NUM00 , j = NUM00 ; i < params . length ; i ++ ) { Parameter param = params [ i ] ; ClassNode paramType = param . getType ( ) ; ClassNode arg = j >= args . length ? null : args [ j ] ; if ( arg == null || ! isAssignableTo ( arg , paramType ) ) { if ( ! param . hasInitialExpression ( ) && $F87129 ( ptype , paramType ) ) $F7629 ptype = null ; } else { j ++ ; if $F2137 ( paramType , arg ) dist += getDistance ( arg , paramType ) ; if ( param . hasInitialExpression ( ) ) { ptype = arg ; } else { ptype = null ; } } } return dist ; }
private void expect ( char expectedSymbol ) throws ParseException { if ( ! accept ( expectedSymbol ) ) throw new ParseException ( NUM00 + expectedSymbol + NUM00 + ( char ) data [ index ] + NUM00 , index ) ; }
public static $F96 stringToUtf8Bytes ( String string ) { $F1749 ( len , string ) $F171903 ( bytes , len ) int outAt = NUM00 ; for ( $F119 ( i , len ) ) { $F1280 ( c , string , i ) if ( ( c != NUM00 ) && ( c < NUM00 ) ) { $F8214 ( bytes , outAt , c ) outAt ++ ; } else if ( c < NUM00 ) { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } else { bytes [ outAt ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F476832 ( c ) ; bytes [ outAt + NUM00 ] = $F287679 ( c ) ; outAt += NUM00 ; } } $F2175 ( result , outAt ) $F135 ( System , bytes , result , outAt ) return result ; }
public abstract void initParameters ( $F2027 aCircuitData , IRedstoneCircuitBlock aRedstoneCircuitBlock ) ;
public Contentlet executeSafeFirst $F72 { List < Contentlet > result = executeSafe ( ) ; if $F3817 ( result ) $F38160 ( result ) $F1274 }
$F84990 ( lock , this , f , first , n , last , count , notFull )
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
private static $F7465 ( msg , startpos , count , len , idx , ch , isDigit )
public static boolean isFileExist ( String filePath , FileType fileType , boolean performFileCheck ) throws IOException { $F2936 ( filePath ) switch ( fileType ) { case HDFS : case VIEWFS : $F424 ( path , filePath ) $F2937 ( fs , path , configuration ) if ( performFileCheck ) { return fs . exists ( path ) && fs . isFile ( path ) ; } else { return fs . exists ( path ) ; } case LOCAL : $F1267 $F1705 ( defaultFile , filePath ) if ( performFileCheck ) { return $F2945 ( defaultFile ) ; } else $F2949 ( defaultFile ) } }
private DoubleFactor pointwiseProduct ( List < DoubleFactor > factors ) { if $F2979 ( factors ) { DoubleFactor factor = new DoubleFactor $F72 ; factor . addEntry ( new Assignment $F72 , NUM00 , NUM00 ) ; return factor ; } else if $F10471 ( factors ) $F38160 ( factors ) DoubleFactor factor = factors . get ( NUM00 ) ; $F86372 ( factors ) for ( DoubleFactor f : factors ) { DoubleFactor tempFactor = new DoubleFactor $F72 ; $F2689 sharedVars = new $F2690 ( f . getVariables ( ) ) ; sharedVars . retainAll ( factor . getVariables ( ) ) ; for ( Assignment a : f . getValues ( ) ) { $F1986 entry = f . getEntry ( a ) ; double prob = entry [ NUM00 ] ; double util = entry [ NUM00 ] ; for ( Assignment b : factor . getValues ( ) ) { if ( b . consistentWith ( a , sharedVars ) ) { $F1986 entry2 = factor . getEntry ( b ) ; double prob2 = entry2 [ NUM00 ] ; double util2 = entry2 [ NUM00 ] ; double product = prob * prob2 ; double sum = util + util2 ; tempFactor . addEntry ( new Assignment ( a , b ) , product , sum ) ; } } } factor = tempFactor ; } return factor ; }
public ClassPath $F72 { $F27462 ( syscp , System ) $F27462 ( envcp , System ) $F12553 ( envcp ) String cp = syscp + File . pathSeparator + envcp ; init ( cp ) ; }
protected static boolean uninstallAddOnExtension ( AddOn addOn , Extension extension , AddOnUninstallationProgressCallback callback ) { boolean uninstalledWithoutErrors = _BOOL ; if $F34496 ( extension ) { String extUiName = extension . getUIName ( ) ; if ( extension . canUnload ( ) ) { $F74568 ( logger , extension ) try { extension . unload ( ) ; ExtensionFactory . unloadAddOnExtension ( extension ) ; } catch ( Exception e ) { logger . error ( $F2990 ( extension ) + addOn . getId ( ) + NUM00 , e ) ; uninstalledWithoutErrors = _BOOL ; } } else { $F74568 ( logger , extension ) uninstalledWithoutErrors = _BOOL ; } callback . extensionRemoved ( extUiName ) ; } addOn . removeLoadedExtension ( extension ) ; return uninstalledWithoutErrors ; }
private static String pickRandomStatsFields $F4374 ( fieldNames ) { String fieldName ; do { fieldName = fieldNames [ TestUtil . nextInt ( random ( ) , NUM00 , fieldNames . length - NUM00 ) ] ; } while $F128455 ( fieldName ) ; return fieldName ; }
$F1 public synchronized void doDeleteChild ( BaseSolrResource endpoint , String childId ) { String key = getIgnoreCase ( ) ? $F131081 ( childId , Locale ) : childId ; if $F2200 ( managedWords , key ) throw new SolrException ( ErrorCode . NOT_FOUND , String . format ( Locale . ROOT , NUM00 , childId , getResourceId ( ) ) ) ; managedWords . remove ( key ) ; storeManagedData ( managedWords ) ; $F10635 ( log , key ) }
public static final String writeTime ( double seconds , final String timeformat , final char separator ) { if ( seconds < NUM00 ) { if ( seconds == UNDEFINED_TIME ) $F1278 return NUM00 + writeTime ( Math . abs ( seconds ) , timeformat , separator ) ; } $F113182 ( day , seconds , MIDNIGHT ) seconds %= MIDNIGHT ; if $F1238 ( TIMEFORMAT_EEESSSS , timeformat ) return Week . getDayName ( day ) + NUM00 + Long . toString ( ( long ) ( seconds ) ) ; double s = seconds ; long h = ( long ) ( s / NUM00 ) ; s = s % NUM00 ; $F55078 ( m , s ) s = s % NUM00 ; $F20818 ( str ) if ( h < timeElements . length ) { $F170335 ( str , timeElements , h ) } else { $F42779 ( str , Long , h ) } str . append ( separator ) ; $F6939 ( str , timeElements , m ) if $F1238 ( TIMEFORMAT_EEEHHMM , timeformat ) { return Week . getDayName ( day ) + NUM00 + str . toString ( ) ; } if $F1238 ( TIMEFORMAT_EEEHHMMSS , timeformat ) { str . append ( separator ) ; $F170335 ( str , timeElements , s ) return Week . getDayName ( day ) + NUM00 + str . toString ( ) ; } if $F1238 ( TIMEFORMAT_HHMMSSDOTSS , timeformat ) { str . append ( separator ) ; $F2854 ( s , str ) str . append ( s ) ; return Week . getDayName ( day ) + NUM00 + str . toString ( ) ; } $F29525 ( timeformat ) }
public DExportPrivateKeyType ( JFrame parent ) { $F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) initComponents ( ) ; }
public static IPoint [ ] copyOf ( IPoint [ ] original , int newLength ) { IPoint [ ] copy = new IPoint [ newLength ] ; $F69174 ( System , original , copy , Math , newLength ) return copy ; }
public void writeFooter $F72 { $F8438 ( ps ) $F8438 ( ps ) $F8438 ( ps ) }
protected void saveObject ( Object object ) { $F113304 ( m_FileChooser , createFileChooser ) int returnVal = m_FileChooser . showSaveDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { $F89774 ( sFile , m_FileChooser ) try { ObjectOutputStream oo = $F20341 ( sFile ) ; oo . writeObject ( object ) ; $F59 ( oo ) } catch ( Exception ex ) { JOptionPane . showMessageDialog ( this , $F89105 ( sFile , ex ) , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } } }
$F1 public void write ( DataOutput out ) throws IOException { if ( USE_HADOOP_TEXT ) Text . writeString ( out , term ) ; else out . writeUTF ( term ) ; WritableUtils . writeVInt ( out , splitno ) ; WritableUtils . writeVInt ( out , flushno ) ; }
public static String stripNonDigits ( String str ) { $F76170 ( result , str ) for ( $F2998 ( candidate , str ) ) { if $F119844 ( Character , candidate ) $F288 ( result , candidate ) } $F92 ( result ) }
protected Collection < CommunicationSummaryStatistics > doGetCommunicationSummaryStatistics ( String tenantId , Criteria criteria ) { String index = client . getIndex ( tenantId ) ; Map < String , CommunicationSummaryStatistics > $F8690 ( stats ) ; if ( ! criteria . transactionWide ( ) ) { Criteria txnWideCriteria = criteria . deriveTransactionWide ( ) ; buildCommunicationSummaryStatistics ( stats , index , txnWideCriteria , _BOOL ) ; } buildCommunicationSummaryStatistics ( stats , index , criteria , _BOOL ) ; $F214800 ( stats ) }
public void removeContent ( String variableId ) { if ( ! paused ) { curState . removeFromState ( variableId ) ; update ( ) ; } else $F10090 ( log , variableId ) }
public void addCommandListener ( ActionListener l ) { if ( globalCommandListeners == null ) { globalCommandListeners = new EventDispatcher $F72 ; } globalCommandListeners . addListener ( l ) ; }
public static void completeBackgroundTasks ( long timeoutMillis ) { boolean fifoEmpty = _BOOL ; boolean asyncThreadsCompleted = _BOOL ; $F52855 ( absTimeout , System , timeoutMillis ) while $F139818 ( System , absTimeout ) { synchronized ( fifo ) { fifoEmpty = $F10470 ( fifo ) ; } synchronized ( JGoogleAnalyticsTracker . class ) { asyncThreadsCompleted = asyncThreadsRunning == NUM00 ; } if ( fifoEmpty && asyncThreadsCompleted ) $F597 try $F31130 ( Thread ) catch ( InterruptedException e ) $F5153 } }
private synchronized void writeObject $F9338 ( s ) throws IOException { $F21009 ( actions , getActions ) $F9339 ( s ) }
public static final $F96 decode ( BufferedReader reader ) throws IOException , Base64DecodingException { $F5475 ( retBytes ) UnsyncByteArrayOutputStream baos = null ; try { baos = new UnsyncByteArrayOutputStream $F72 ; String line ; while ( null != ( line = reader . readLine ( ) ) ) { $F12490 ( bytes , decode , line ) baos . write ( bytes ) ; } $F3031 ( retBytes , baos ) } $F3229 ( baos ) return retBytes ; }
public boolean isDefinedInEnv $F72 { if ( envVars == null || paramNames . length == NUM00 ) { return _BOOL ; } for ( String var : envVars ) { if ( System . getenv ( var ) == null ) { return _BOOL ; } } return _BOOL ; }
public void apply ( Animator animator , float currValue , float endValue , float velocity ) { apply ( animator , currValue , endValue , velocity , Math . abs ( endValue - currValue ) ) ; }
public void addNotice ( ParserNotice notice ) $F207 ( notices , notice )
$F1 public String toString $F72 { int len = sessionId . length ; StringBuffer s = new StringBuffer ( NUM00 + NUM00 * len ) ; $F84 ( s ) for ( $F119 ( i , len ) ) { s . append ( NUM00 & sessionId [ i ] ) ; if ( i != ( len - NUM00 ) ) $F84 ( s ) } $F84 ( s ) $F92 ( s ) }
public EventBinder $F11685 after ( String name ) $F18637 ( after , name , this )
public Point2D forward ( Point2D llp , Point2D pt ) { return forward ( llp . getY ( ) , llp . getX ( ) , pt , _BOOL ) ; }
private static int maxNumArcsForDedupByte ( int currentNumDedupBytes ) { int maxArcs = NUM00 + ( NUM00 * currentNumDedupBytes ) ; if ( currentNumDedupBytes > NUM00 ) { maxArcs *= currentNumDedupBytes ; } return Math . min ( maxArcs , NUM00 ) ; }
public JobCreateRequest createJobCreateRequest ( String namespaceCd , String jobName ) { $F292037 $F204 ( parameters ) ; Parameter parameter = new Parameter ( AbstractServiceTest . ATTRIBUTE_NAME_2_MIXED_CASE , AbstractServiceTest . ATTRIBUTE_VALUE_2 ) ; parameters . add ( parameter ) ; parameter = new Parameter $F22361 ; parameters . add ( parameter ) ; return createJobCreateRequest ( namespaceCd , jobName , parameters ) ; }
private void load $F72 throws RepositoryException , RDFParseException , IOException { final RepositoryConnection conn = repository . getConnection ( ) ; String ttlString = MODEL_TTL ; $F217487 ( stringInput , ttlString ) conn . add ( stringInput , NUM00 , RDFFormat . TURTLE , new Resource $F10277 ) ; ttlString = BUCKET_TTL ; stringInput = $F107841 ( ttlString ) ; conn . add ( stringInput , NUM00 , RDFFormat . TURTLE , new Resource $F10277 ) ; $F17621 ( conn ) $F59 ( conn ) }
public boolean isTaxIncluded $F72 { if ( m_M_PriceList_ID == NUM00 ) { m_M_PriceList_ID = DB . getSQLValue ( get_TrxName ( ) , NUM00 , getC_Order_ID ( ) ) ; } MPriceList pl = MPriceList . get ( getCtx ( ) , m_M_PriceList_ID , get_TrxName ( ) ) ; return pl . isTaxIncluded ( ) ; }
protected WebResource createRequest ( String uriPath ) { ensureInitialization ( ) ; return clientRequestHelper . createRequest ( client , serviceURI , URI . create ( uriPath ) ) ; }
$F35402 ( context , cameraManager )
public void nextTable $F72 throws SQLException { if $F2921 ( tables ) { $F45366 ( currentTable , tables ) openRows ( ) ; } }
public DDistinguishedNameChooser ( JFrame parent , String title , X500Name distinguishedName , boolean editable ) { super ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . distinguishedName = distinguishedName ; this . editable = editable ; initComponents ( ) ; }
public static boolean deleteFile ( String filePathAndName ) { if $F21545 ( filePathAndName ) { return _BOOL ; } boolean isSuccessfulDelete = _BOOL ; try { $F1705 ( fileToDelete , filePathAndName ) $F7111 ( isSuccessfulDelete , fileToDelete ) } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) isSuccessfulDelete = _BOOL ; } return isSuccessfulDelete ; }
public TungstenPropertiesIO ( File path ) { this ( new JavaFileIO $F72 , new FilePath $F89450 ( path ) ) ; }
private void computeTabOffsetHelper ( RectF stackRect ) { final boolean portrait = mCurrentMode == Orientation . PORTRAIT ; final float parentWidth = stackRect . width ( ) ; final float parentHeight = stackRect . height ( ) ; $F39760 ( overscrollPercent , computeOverscrollPercent ) final float scrollOffset = MathUtils . clamp ( mScrollOffset , getMinScroll ( _BOOL ) , getMaxScroll ( _BOOL ) ) ; final float stackScale = getStackScale ( stackRect ) ; int stackedCount = NUM00 ; float minStackedPosition = NUM00 ; for ( $F9808 ( i , mStackTabs ) ) { assert mStackTabs [ i ] != null ; StackTab stackTab = mStackTabs [ i ] ; LayoutTab layoutTab = stackTab . getLayoutTab ( ) ; final float stackScrollOffset = stackTab . isDying ( ) ? mScrollOffsetForDyingTabs : scrollOffset ; float screenScrollOffset = approxScreen ( stackTab , stackScrollOffset ) ; $F28619 ( screenScrollOffset , Math , minStackedPosition ) if ( stackedCount < MAX1BER_OF_STACKED_TABS_TOP ) { final float tiltXcos = ( float ) Math . cos ( Math . toRadians ( layoutTab . getTiltX ( ) ) ) ; final float tiltYcos = ( float ) Math . cos ( Math . toRadians ( layoutTab . getTiltY ( ) ) ) ; float collapse = Math . min ( $F44398 ( Math , tiltXcos , tiltYcos ) ) ; collapse *= layoutTab . getAlpha ( ) ; minStackedPosition += StackTab . sStackedTabVisibleSize * collapse ; } stackedCount += stackTab . isDying ( ) ? NUM00 : NUM00 ; if ( overscrollPercent < NUM00 ) { screenScrollOffset += ( overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG ) * screenScrollOffset ; $F34970 ( screenScrollOffset , Math ) } float xIn = ( parentWidth - layoutTab . getScaledContentWidth ( ) ) / NUM00 ; float yIn = ( parentHeight - layoutTab . getScaledContentHeight ( ) ) / NUM00 ; final float horizontalPadding = ( parentWidth - layoutTab . getOriginalContentWidth ( ) * StackAnimation . SCALE_AMOUNT * stackScale ) / NUM00 ; final float verticalPadding = ( parentHeight - layoutTab . getOriginalContentHeight ( ) * StackAnimation . SCALE_AMOUNT * stackScale ) / NUM00 ; if ( portrait ) { yIn += STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding ; yIn += screenScrollOffset ; } else { if ( LocalizationUtils . isLayoutRtl ( ) ) { xIn -= STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding ; xIn -= screenScrollOffset ; } else { xIn += STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding ; xIn += screenScrollOffset ; } yIn += STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding ; } layoutTab . setX ( xIn ) ; layoutTab . setY ( yIn ) ; } stackedCount = NUM00 ; float maxStackedPosition = portrait ? mLayout . getHeightMinusTopControls ( ) : mLayout . getWidth ( ) ; for ( $F26259 ( i , mStackTabs ) ) { assert mStackTabs [ i ] != null ; StackTab stackTab = mStackTabs [ i ] ; LayoutTab layoutTab = stackTab . getLayoutTab ( ) ; if ( stackTab . isDying ( ) ) $F598 float pos ; if ( portrait ) { $F130222 ( pos , layoutTab ) layoutTab . setY ( Math . min ( pos , maxStackedPosition ) ) ; } else if ( LocalizationUtils . isLayoutRtl ( ) ) { float posOffset = mLayout . getWidth ( ) - layoutTab . getOriginalContentWidth ( ) * StackAnimation . SCALE_AMOUNT * stackScale ; pos = $F174576 ( layoutTab ) + posOffset ; layoutTab . setX ( - Math . min ( pos , maxStackedPosition ) + posOffset ) ; } else { $F25145 ( pos , layoutTab ) layoutTab . setX ( Math . min ( pos , maxStackedPosition ) ) ; } if ( pos >= maxStackedPosition && stackedCount < MAX1BER_OF_STACKED_TABS_BOTTOM ) { maxStackedPosition -= StackTab . sStackedTabVisibleSize ; stackedCount ++ ; } } $F39760 ( discardRange , getDiscardRange ) for ( $F9808 ( i , mStackTabs ) ) { assert mStackTabs [ i ] != null ; StackTab stackTab = mStackTabs [ i ] ; LayoutTab layoutTab = stackTab . getLayoutTab ( ) ; final float xIn = layoutTab . getX ( ) + stackTab . getXInStackOffset ( ) ; final float yIn = layoutTab . getY ( ) + stackTab . getYInStackOffset ( ) ; final float xOut = stackTab . getXOutOfStack ( ) ; final float yOut = stackTab . getYOutOfStack ( ) ; float x = MathUtils . interpolate ( xOut , xIn , stackTab . getXInStackInfluence ( ) ) ; float y = MathUtils . interpolate ( yOut , yIn , stackTab . getYInStackInfluence ( ) ) ; if ( stackTab . getDiscardAmount ( ) != NUM00 ) { float discard = stackTab . getDiscardAmount ( ) ; boolean fromClick = stackTab . getDiscardFromClick ( ) ; float scale = computeDiscardScale ( discard , discardRange , fromClick ) ; float deltaX = stackTab . getDiscardOriginX ( ) - stackTab . getLayoutTab ( ) . getOriginalContentWidth ( ) / NUM00 ; float deltaY = stackTab . getDiscardOriginY ( ) - stackTab . getLayoutTab ( ) . getOriginalContentHeight ( ) / NUM00 ; float discardOffset = fromClick ? NUM00 : discard ; if ( portrait ) { x += discardOffset + deltaX * ( NUM00 - scale ) ; y += deltaY * ( NUM00 - scale ) ; } else { x += deltaX * ( NUM00 - scale ) ; y += discardOffset + deltaY * ( NUM00 - scale ) ; } } layoutTab . setX ( stackRect . left + x ) ; layoutTab . setY ( stackRect . top + y ) ; } }
$F1 public int compareTo ( final TimeInstant rhs ) { return Integer . compare ( this . time , rhs . time ) ; }
private boolean writeToCharacteristic ( BluetoothGattCharacteristic charc , $F96 data ) { charc . setValue ( data ) ; boolean result = mGattClient . writeCharacteristic ( charc ) ; if ( result ) { Log . d ( TAG , NUM00 + charc . getUuid ( ) + NUM00 + Arrays . toString ( data ) ) ; } else { Log . e ( TAG , NUM00 + charc . getUuid ( ) + NUM00 + Arrays . toString ( data ) ) ; } return result ; }
public static void composeThroughMask ( Raster src , WritableRaster dst , Raster sel ) { int x = src . getMinX ( ) ; int y = src . getMinY ( ) ; $F2049 ( w , src ) $F2047 ( h , src ) int srcRGB [ ] = null ; int selRGB [ ] = null ; int dstRGB [ ] = null ; for ( $F119 ( i , h ) ) { srcRGB = src . getPixels ( x , y , w , NUM00 , srcRGB ) ; selRGB = sel . getPixels ( x , y , w , NUM00 , selRGB ) ; dstRGB = dst . getPixels ( x , y , w , NUM00 , dstRGB ) ; int k = x ; for ( $F119 ( j , w ) ) { int sr = srcRGB [ k ] ; int dir = dstRGB [ k ] ; int sg = srcRGB [ k + NUM00 ] ; int dig = dstRGB [ k + NUM00 ] ; int sb = srcRGB [ k + NUM00 ] ; int dib = dstRGB [ k + NUM00 ] ; int sa = srcRGB [ k + NUM00 ] ; int dia = dstRGB [ k + NUM00 ] ; float a = selRGB [ k + NUM00 ] / NUM00 ; float ac = NUM00 - a ; dstRGB [ k ] = $F226385 ( a , sr , ac , dir ) ; dstRGB [ k + NUM00 ] = $F226385 ( a , sg , ac , dig ) ; dstRGB [ k + NUM00 ] = $F226385 ( a , sb , ac , dib ) ; dstRGB [ k + NUM00 ] = $F226385 ( a , sa , ac , dia ) ; k += NUM00 ; } dst . setPixels ( x , y , w , NUM00 , dstRGB ) ; y ++ ; } }
public char skipTo ( char to ) { char c ; int index = this . myIndex ; do { c = next ( ) ; if ( c == NUM00 ) { this . myIndex = index ; return c ; } } while ( c != to ) ; back ( ) ; return c ; }
public int checkVersionSize ( final SoftwareVersion version ) { URL imageUrl = getImageURL ( version ) ; HttpURLConnection urlConnection = invokeRequest ( imageUrl ) ; return urlConnection . getContentLength ( ) ; }
private static DateTimeFormatter createFormatterForStyle ( String style ) { if ( style == null || $F35624 ( style ) ) $F18931 ( style ) int dateStyle = $F95813 ( selectStyle , style ) ; int timeStyle = $F95813 ( selectStyle , style ) ; if ( dateStyle == NONE && timeStyle == NONE ) $F825 return createFormatterForStyleIndex ( dateStyle , timeStyle ) ; }
public boolean ackNextChunkId ( String id ) { if ( state . isTerminated ( ) ) return _BOOL ; else if $F1238 ( id , chunkid ) { return _BOOL ; } else { if ( ! allowOtherChunksInBetween ( id ) ) { if $F38577 ( state ) { if $F931 ( isTerminated ) terminate ( ) ; return _BOOL ; } else { throw new PngjInputException $F6486 ( id , chunkid ) ; } } else return _BOOL ; } }
$F46189 ( task , initExecutorsIfNeed , taskExecutorForCachedImages )
private TopDocs combine ( TopDocs in , TopDocs resorted , QueryRescoreContext ctx ) { System . arraycopy ( resorted . scoreDocs , NUM00 , in . scoreDocs , NUM00 , resorted . scoreDocs . length ) ; if ( in . scoreDocs . length > resorted . scoreDocs . length ) { for ( int i = resorted . scoreDocs . length ; i < in . scoreDocs . length ; i ++ ) { in . scoreDocs [ i ] . score *= ctx . queryWeight ( ) ; } Arrays . sort ( in . scoreDocs , SCORE_DOC_COMPARATOR ) ; } return in ; }
public void testPosPosSameLength $F72 { $F53390 $F37339 int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F45034 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
$F98646 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , mScaleType , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser )
$F1 public void pause ( boolean toPause ) { isPaused = toPause ; }
public static String replaceAll $F1947 ( original , oldSubstring , newSubstring ) $F33971 ( replace , original , oldSubstring , newSubstring , _BOOL )
public long add ( final AddOp add ) throws Exception { return add ( add , UUID . randomUUID ( ) ) ; }
protected boolean isSmall $F72 { return this . scale * this . textSizeInMeters < this . pixelSizeInMeters ; }
public $F96 decompress ( DataInput is ) { $F1538 ( baos ) try { while ( _BOOL ) { $F1544 ( b , is ) $F167039 ( b ) baos . write ( b ) ; } } catch ( EOFException ex ) $F845 $F12153 ( ex ) $F77744 ( decompress , baos ) }
public int borrowSpareRegister ( int category ) { int result = spareRegisterBase + borrowedSpareRegisters ; borrowedSpareRegisters += category ; registerCount = Math . max ( registerCount , result + category ) ; return result ; }
public void True ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException $F45942 ( String , errorMessage ) ; } }
private void processFields ( final Object component , final Context context , final ContextDestroyer contextDestroyer ) { $F20850 ( componentClass , component ) while ( componentClass != null && ! componentClass . equals ( $F12222 ) ) { final $F16271 fields = ClassReflection . getDeclaredFields ( componentClass ) ; if $F22195 ( fields ) { processFields ( component , fields , context , contextDestroyer ) ; } $F7852 ( componentClass ) } }
public static String replaceAll $F1947 ( input , regularExpression , replacement ) { return input . replaceAll ( regularExpression , replacement ) ; }
void requestNotificationUpdate $F72 { if ( mCurrentNotificationGroupIndex != NOTIFICATION_OFF ) { RhythmNotificationService . showNotification ( mContext , mNotificationId ) ; } }
public static int countLowerCase ( final String text ) { int count = NUM00 ; for ( final char chr : text . toCharArray ( ) ) { if ( Character . isLowerCase ( chr ) ) { count ++ ; } } return count ; }
public void assignService ( String serviceName , Map attributes ) throws $F51027 { IdServices idServices = IdServicesFactory . getDataStoreServices ( ) ; Set OCs = getServiceOCs ( token , serviceName ) ; SchemaType stype ; $F28017 ( tMap ) tMap . put ( serviceName , OCs ) ; Set assignedServices = idServices . getAssignedServices ( token , type , name , tMap , orgName , univDN ) ; if $F105 ( assignedServices , serviceName ) { Object $F1868 = { serviceName , type . getName ( ) } ; throw new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . SERVICE_ALREADY_ASSIGNED , args ) ; } try { ServiceSchemaManager ssm = new ServiceSchemaManager ( serviceName , token ) ; ServiceSchema ss = ssm . getSchema ( type . getName ( ) ) ; if ( ss != null ) { Set cosPriority = ( attributes != null ) ? ( Set ) attributes . remove ( COS_PRIORITY ) : null ; attributes = ss . validateAndInheritDefaults ( attributes , orgName , _BOOL ) ; $F114625 ( cosPriority , attributes , COS_PRIORITY ) attributes = AMCommonUtils . removeEmptyValues ( attributes ) ; stype = ss . getServiceType ( ) ; } else { ss = ssm . getSchema ( SchemaType . DYNAMIC ) ; if ( ss == null ) { Object $F1868 = { serviceName } ; throw new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . UNABLE_GET_SERVICE_SCHEMA , args ) ; } if ( attributes == null ) { try { attributes = getServiceConfig ( token , serviceName , SchemaType . DYNAMIC ) ; } catch ( SMSException smsex ) { Object $F1868 = { serviceName , type . getName ( ) } ; throw new IdRepoException ( IdRepoBundle . BUNDLE_NAME , NUM00 , args ) ; } } else { attributes = ss . validateAndInheritDefaults ( attributes , orgName , _BOOL ) ; } attributes = AMCommonUtils . removeEmptyValues ( attributes ) ; stype = SchemaType . DYNAMIC ; } attributes = AMCrypt . encryptPasswords ( attributes , ss ) ; } catch ( SMSException smse ) { $F22031 ( args , serviceName ) throw new IdRepoException ( IdRepoBundle . BUNDLE_NAME , IdRepoErrorCode . SERVICE_NOT_ASSIGNED , args ) ; } $F545 ( attributes , OCs ) idServices . assignService ( token , type , name , serviceName , stype , attributes , orgName , univDN ) ; }
$F1 protected void createButtonsForButtonBar ( final Composite parent ) { for ( final Iterator it = buttonDescriptions . iterator ( ) ; it . hasNext ( ) ; ) { final ButtonDescription buttonDescription = ( ButtonDescription ) it . next ( ) ; createButton ( parent , buttonDescription . buttonId , buttonDescription . buttonLabel , buttonDescription . isDefault ) ; } if ( includeDefaultButtons ) { super . createButtonsForButtonBar ( parent ) ; } hookAfterButtonsCreated ( ) ; }
private boolean checkFileModifications $F72 throws Exception { $F105872 ( destFileTime , destFile ) if ( sourceFile . lastModified ( ) > destFileTime ) $F95125 ( logger , _BOOL ) Properties metadata = restoreFileModifications ( metaDataFile ) ; $F1933 ( metadata , _BOOL ) $F2218 ( parserFactory , SAXParserFactory ) $F49819 ( parser , parserFactory ) TimeCheckerHandler handler = new TimeCheckerHandler ( baseDir , metadata ) ; parser . parse ( sourceFile , handler ) ; return handler . isModified ( ) ; }
public static Number mul ( Number a , Number b ) { if $F71585 ( isFloatingPoint , a , b ) { return a . doubleValue ( ) * b . doubleValue ( ) ; } else { return a . longValue ( ) * b . longValue ( ) ; } }
private final int findWidestAxis $F72 { int widest = NUM00 ; double width = ( maxLimit [ NUM00 ] - minLimit [ NUM00 ] ) * getAxisWeightHint ( NUM00 ) ; if $F35707 ( Double , width ) { width = NUM00 ; } for ( $F119 ( i , dimensions ) ) { double nwidth = $F17318 ( maxLimit , i , minLimit ) * getAxisWeightHint ( i ) ; if $F35707 ( Double , nwidth ) { nwidth = NUM00 ; } $F214188 ( nwidth , width , widest , i ) } return widest ; }
public void addSortKey ( int column , Comparator $F4 comparator ) $F30090 ( sortKeys , column , sortComparators , comparator )
public static String tagSwap $F5805 ( content , tagSwapMap ) { for ( $F19318 ( entry , tagSwapMap ) ) { content = content . replace ( $F15245 ( entry ) ) ; } return content ; }
public static RunStats delegateGetBucketForIntegers ( int buckets ) throws Exception { $F62712 ( startTime , System ) PrimaryIndexBucketGeneratorImpl ibg = new PrimaryIndexBucketGeneratorImpl ( FieldDataType . INTEGER , buckets ) ; PrimaryIndexBucketLocatorImpl locator = new PrimaryIndexBucketLocatorImpl ( null , null , null , ibg . generateBuckets ( ) , null , null , null , null , null ) ; $F980 ( logger ) $F62728 ( hm ) $F62733 ( stats ) for ( int inputInt = - NUM00 ; inputInt < NUM00 ; inputInt ++ ) { Long bucketId = locator . getBucket ( inputInt , FieldDataType . INTEGER ) ; calculate ( hm , stats , bucketId , inputInt ) ; } $F62747 ( runTime , System , startTime ) RunStats runStats = new RunStats ( NUM00 , FieldDataType . INTEGER , runTime , stats , hm ) ; $F62755 ( logger , runStats ) return runStats ; }
public static long countSubstr ( final String value , final String subStr , final boolean caseSensitive , boolean allowOverlapping ) { validate ( value , NULL_ <missing ';'> NUM00 <missing ';'> $F38386 NULL_ NUM00 <missing ';'> $F38387 ; return countSubstr ( caseSensitive ? value : value . toLowerCase ( ) , caseSensitive ? subStr : subStr . toLowerCase ( ) , allowOverlapping , NUM00 ) ; }
private void dropIndex ( String indexName ) throws OracleException { PreparedStatement stmt = null ; if ( indexName == null ) throw SODAUtils . makeException ( SODAMessage . EX_ARG_CANNOT_BE_NULL , NUM00 ) ; indexName = CollectionDescriptor . stringToIdentifier ( indexName ) ; String sqltext = dropIndexDDL ( indexName ) ; try { metrics . startTiming ( ) ; stmt = conn . prepareStatement ( sqltext ) ; $F1699 ( stmt ) if $F68263 ( OracleLog ) $F556 ( log , indexName ) $F59 ( stmt ) stmt = null ; metrics . recordDDL ( ) ; } catch ( SQLException e ) { int errcode = e . getErrorCode ( ) ; if $F14485 ( errcode , ORA_SQL_OBJECT_NOT_EXISTS , ORA_SQL_INDEX_NOT_EXISTS ) { if $F68263 ( OracleLog ) $F145157 ( log , e ) } else { if $F68263 ( OracleLog ) $F145157 ( log , e ) throw SODAUtils . makeExceptionWithSQLText ( e , sqltext ) ; } } finally { for ( String message : SODAUtils . closeCursor ( stmt , null ) ) { if $F68263 ( OracleLog ) log . severe ( message ) ; } } }
void unlaunch $F72 { if ( server != null ) { server . die ( ) ; server = null ; } frame . setVisible ( _BOOL ) ; client = null ; $F58463 ( System ) System . runFinalization ( ) ; }
private boolean isOutsideDocElem $F72 { return ( null == m_docFrag ) && $F10470 ( m_elemStack ) && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; }
public int postFiles ( $F5237 files , int startIndexInArgs , OutputStream out , String type ) { reset ( ) ; int filesPosted = NUM00 ; for ( File srcFile : files ) { if ( srcFile . isDirectory ( ) && srcFile . canRead ( ) ) { filesPosted += postDirectory ( srcFile , out , type ) ; } else if ( srcFile . isFile ( ) && srcFile . canRead ( ) ) { filesPosted += postFiles ( new File [ ] { srcFile } , out , type ) ; } else { $F4924 ( parent , srcFile ) if ( parent == null ) $F263964 ( parent ) $F20605 ( fileGlob , srcFile ) GlobFileFilter ff = new GlobFileFilter ( fileGlob , _BOOL ) ; $F5237 fileList = parent . listFiles ( ff ) ; if $F12414 ( fileList ) { warn ( NUM00 + srcFile ) ; $F598 } filesPosted += postFiles ( fileList , out , type ) ; } } return filesPosted ; }
private static String unicode2html ( final String text , final boolean amp , final boolean html ) { $F1275 ( text ) final StringBuilder sb = new StringBuilder ( $F9483 ( text ) / NUM00 ) ; int textpos = NUM00 ; String r ; char c ; while $F7007 ( textpos , text ) { c = text . charAt ( textpos ) ; if ( amp && c == AMP_UNICODE ) { sb . append ( AMP_HTML ) ; textpos ++ ; $F598 } if ( $F86155 ( r , UNICODE2HTML4XML , c ) != null ) { sb . append ( r ) ; textpos ++ ; $F598 } if ( html && $F86155 ( r , UNICODE2HTML4HTML , c ) != null ) { sb . append ( r ) ; textpos ++ ; $F598 } sb . append ( c ) ; textpos ++ ; } $F92 ( sb ) }
public String addPlaylist ( String playlistName ) { $F20904 ( mInserts ) mInserts . put ( MediaStore . Audio . Playlists . NAME , playlistName ) ; mInserts . put ( MediaStore . Audio . Playlists . DATE_ADDED , System . currentTimeMillis ( ) ) ; mInserts . put ( MediaStore . Audio . Playlists . DATE_MODIFIED , System . currentTimeMillis ( ) ) ; Uri uri = mContentResolver . insert ( MediaStore . Audio . Playlists . EXTERNAL_CONTENT_URI , mInserts ) ; if ( uri == null ) $F1337 else { String ref = PREFIX_PLAYLIST + getPlaylistUniqueName ( Long . toString ( ContentUris . parseId ( uri ) ) ) ; Playlist pl = new Playlist ( ref ) ; pl . setName ( playlistName ) ; pl . setIsLoaded ( _BOOL ) ; mPlaylists . put ( ref , pl ) ; mCallback . playlistUpdated ( pl ) ; return ref ; } }
public static JSONArray readJSONArray $F3641 ( jsonObject , key , required , notNull ) throws JSONException { if ( required ) { return jsonObject . getJSONArray ( key ) ; } $F3652 ( notNull , jsonObject , key , String , Locale , NULL_VALUE_FORMAT_OBJECT ) JSONArray value = null ; if $F3653 ( jsonObject , key ) { value = jsonObject . getJSONArray ( key ) ; } return value ; }
default int copyTo ( $F1113 $F96 bytes ) throws BufferUnderflowException { int len = ( int ) Math . min ( bytes . length , readRemaining ( ) ) ; for ( $F119 ( i , len ) ) bytes [ i ] = readByte ( start ( ) + i ) ; return len ; }
private static $F5415 randomPoints ( Random random , int wavesCount , float width , float shiftCoef ) { float shift ; $F5415 points = new float [ wavesCount + NUM00 ] ; for ( $F1139 ( i , points ) ) { if ( i == NUM00 ) { points [ i ] = - NUM00 ; } else if $F74408 ( i , points ) $F5629 ( points , i ) else { shift = random . nextFloat ( ) * shiftCoef * width ; shift *= random . nextBoolean ( ) ? NUM00 : - NUM00 ; points [ i ] = - NUM00 + i * width + shift ; } } return points ; }
private void addCharacters ( final Map < String , RPObject > characters ) { for ( Entry < String , RPObject > character : characters . entrySet ( ) ) { JButton button = createCharacterButton ( $F15245 ( character ) ) ; characterPanel . add ( button ) ; } }
public void runTest $F72 throws Throwable { Document doc ; NodeList genderList ; Node genderNode ; CharacterData entText ; EntityReference entReference ; $F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entReference = doc . createEntityReference ( NUM00 ) ; assertNotNull ( NUM00 , entReference ) ; $F241 ( entText , entReference ) assertNotNull ( NUM00 , entText ) ; { boolean success = _BOOL ; try { entText . insertData ( NUM00 , NUM00 ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; } assertTrue ( NUM00 , success ) ; } }
$F1 public void unbindView ( VH holder ) $F845
public static boolean isPresent ( Rule rule ) { $F1933 ( rule , _BOOL ) return ( ! isNotSet ( rule . getMinScaleDenominator ( ) ) || ! isNotSet ( rule . getMaxScaleDenominator ( ) ) ) ; }
public long startcode $F72 $F12907 ( Long , fields )
public static void consumeProcessOutput ( Process self ) { consumeProcessOutput ( self , ( OutputStream ) null , ( OutputStream ) null ) ; }
public static void registerDefaultResolvers $F72 { List < KeyResolver > keyResolverList = new ArrayList < KeyResolver > $F72 ; keyResolverList . add ( new KeyResolver ( new RSAKeyValueResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new DSAKeyValueResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new X509CertificateResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new X509SKIResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new RetrievalMethodResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new X509SubjectNameResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new X509IssuerSerialResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new DEREncodedKeyValueResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new KeyInfoReferenceResolver $F72 ) ) ; keyResolverList . add ( new KeyResolver ( new X509DigestResolver $F72 ) ) ; resolverVector . addAll ( keyResolverList ) ; }
public static final void delete ( String fileName ) { $F1705 ( file , fileName ) if $F7119 ( file ) $F5198 ( log , file ) $F43662 ( metadataFile , fileName , METADATA_SUFFIX ) if $F7119 ( metadataFile ) $F5198 ( log , metadataFile ) $F4924 ( directory , file ) if $F3444 ( directory ) $F19636 ( directory ) }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension )
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof TimePeriodValuesCollection ) ) { return _BOOL ; } TimePeriodValuesCollection that = ( TimePeriodValuesCollection ) obj ; if ( this . domainIsPointsInTime != that . domainIsPointsInTime ) { return _BOOL ; } if ( this . xPosition != that . xPosition ) { return _BOOL ; } if ( ! ObjectUtilities . equal ( this . data , that . data ) ) { return _BOOL ; } return _BOOL ; }
public void print ( JTextPane pane ) $F34462 ( setDocument , pane , printDialog )
private boolean ensureScrollWheelAdjusted $F72 { int deltaY = mInitialScrollOffset - mCurrentScrollOffset ; if ( deltaY != NUM00 ) { mPreviousScrollerY = NUM00 ; if $F41056 ( Math , deltaY , mSelectorElementHeight ) { deltaY += ( deltaY > NUM00 ) ? - mSelectorElementHeight : mSelectorElementHeight ; } mAdjustScroller . startScroll ( NUM00 , NUM00 , NUM00 , deltaY , SELECTOR_ADJUSTMENT_DURATION_MILLIS ) ; invalidate ( ) ; return _BOOL ; } return _BOOL ; }
private String sortXml ( final String originalXml ) { String errorMsg = NUM00 ; xmlProcessingInstructionParser . scanForIgnoredSections ( originalXml ) ; String xml = xmlProcessingInstructionParser . replaceIgnoredSections ( ) ; insertXmlInXmlProcessor ( xml , errorMsg ) ; xmlProcessor . sortXml ( ) ; try ( ByteArrayOutputStream sortedXmlOutputStream = xmlProcessor . getSortedXml ( ) ) { $F4074 ( sortedXml , sortedXmlOutputStream , encoding ) if ( xmlProcessingInstructionParser . existsIgnoredSections ( ) ) { sortedXml = xmlProcessingInstructionParser . revertIgnoredSections ( sortedXml ) ; } return sortedXml ; } catch ( IOException e ) { throw new FailureException ( errorMsg + xml , e ) ; } }
void waitForDictionaryLoading $F72 { while ( mUpdatingDictionary ) { $F36705 ( Thread ) } }
private void publishData $F84589 ( path , data ) { try { if $F22195 ( data ) { $F5950 ( bii , data ) $F67402 ( ois , bii ) $F67404 ( dataObj , ois ) ZooKeeperDataWrapper wrapper = ( ZooKeeperDataWrapper ) ( dataObj ) ; JetstreamMessage tm = ( JetstreamMessage ) wrapper . getOrginalData ( ) ; String trackerKey = createKey ( path , wrapper ) ; m_changeTracker . put ( trackerKey , wrapper . getTimestamp ( ) ) ; try { LOGGER . warn ( NUM00 + path + NUM00 + trackerKey + NUM00 + wrapper . getTimestamp ( ) ) ; m_transportListener . postMessage ( tm , m_queueStats ) ; } catch ( Throwable mse ) { $F280 ( buf ) $F84 ( buf ) buf . append ( mse . getLocalizedMessage ( ) ) ; LOGGER . error ( NUM00 + path + buf . toString ( ) , mse ) ; } $F72375 ( m_totalMsgsRcvd ) $F72375 ( m_msgsRcvdPerSec ) } } catch ( ClassNotFoundException e ) $F30203 ( LOGGER , path , e ) catch ( IOException e ) $F30203 ( LOGGER , path , e ) }
static public long nextAddr ( Random r , WormAddressManager am ) { if ( r . nextInt ( NUM00 ) < NUM00 ) $F1082 return nextNonZeroAddr ( r , am ) ; }
public void undoableEditHappened ( mxUndoableEdit undoableEdit ) { if ( enabled ) { if ( undoableEdit . getTransparent ( ) ) $F845 else if ( ! undoableEdit . getUndoable ( ) ) $F5795 ( notUndoableEditHappened ) else if ( collection ) { collected . add ( undoableEdit ) ; fireEvent ( new mxEventObject ( mxEvent . ADD , NUM00 , undoableEdit ) ) ; } else { collected . add ( undoableEdit ) ; addEventList ( ) ; fireEvent ( new mxEventObject ( mxEvent . ADD , NUM00 , undoableEdit ) ) ; } } }
public File ( File dir , String name ) { this ( dir == null ? null : dir . getPath ( ) , name ) ; }
public void removeDragListener ( DragListener l ) $F106 ( mListeners , l )
private HighTideValues findHighTide ( JSONObject responseObject ) throws JSONException , ParseException { $F49149 ( predictions , responseObject ) JSONObject lastPrediction = null , firstHighTide = null , secondHighTide = null , lowTide = null ; boolean firstTideDone = _BOOL ; for ( $F1088 ( i , predictions ) ) { JSONObject prediction = ( JSONObject ) predictions . get ( i ) ; if ( lastPrediction == null ) $F34544 ( lastPrediction , prediction ) if ( isTideIncreasing ( lastPrediction , prediction ) ) { if ( ! firstTideDone ) { firstHighTide = prediction ; } else { secondHighTide = prediction ; } } else { if ( ! firstTideDone && firstHighTide != null ) { firstTideDone = _BOOL ; } else $F111836 ( secondHighTide ) $F65989 ( firstTideDone , lowTide , prediction ) } lastPrediction = prediction ; } $F121432 ( dateFormat ) return new HighTideValues ( AlexaDateUtil . getFormattedTime ( dateFormat . parse ( firstHighTide . getString ( NUM00 ) ) ) , getFormattedHeight ( firstHighTide . getString ( NUM00 ) ) , AlexaDateUtil . getFormattedTime ( dateFormat . parse ( lowTide . getString ( NUM00 ) ) ) , getFormattedHeight ( lowTide . getString ( NUM00 ) ) , AlexaDateUtil . getFormattedTime ( dateFormat . parse ( secondHighTide . getString ( NUM00 ) ) ) , getFormattedHeight ( secondHighTide . getString ( NUM00 ) ) ) ; }
public static boolean isIpAddress ( String ipAddress ) { $F1150 ( m1 , validIPV4Pattern , ipAddress ) $F266906 ( m1 , _BOOL ) $F1150 ( m2 , validIPV6Pattern , ipAddress ) $F36689 ( m2 ) }
$F1 public synchronized void removeTrainingSetListener ( TrainingSetListener tsl ) $F130709 ( m_trainingListeners , tsl )
public void renameAttributeValue ( Attribute att , String val , String name ) { int v = att . indexOfValue ( val ) ; if ( v == - NUM00 ) $F87843 ( val ) renameAttributeValue ( att . index ( ) , v , name ) ; }
private static void s_uacmean ( SparseBlock a , $F1986 c , int m , int n , KahanObject kbuff , Mean kmean , int rl , int ru ) { Arrays . fill ( c , n , n * NUM00 , ru - rl ) ; if ( a . isContiguous ( ) ) { countDisAgg ( a . values ( rl ) , c , a . indexes ( rl ) , a . pos ( rl ) , n , ( int ) a . size ( rl , ru ) ) ; } else { for ( int i = rl ; i < ru ; i ++ ) { if $F20899 ( a , i ) countDisAgg ( a . values ( i ) , c , a . indexes ( i ) , a . pos ( i ) , n , a . size ( i ) ) ; } } if ( a . isContiguous ( ) ) { meanAgg ( a . values ( rl ) , c , a . indexes ( rl ) , a . pos ( rl ) , ( int ) a . size ( rl , ru ) , n , kbuff , kmean ) ; } else { for ( int i = rl ; i < ru ; i ++ ) { if $F20899 ( a , i ) meanAgg ( a . values ( i ) , c , a . indexes ( i ) , a . pos ( i ) , a . size ( i ) , n , kbuff , kmean ) ; } } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public boolean isPdfAttachment $F72 { if $F9774 ( getPO ) return _BOOL ; return m_po . isPdfAttachment ( ) ; }
private int nameToIndex ( String parameterName ) throws SQLException { parameterMetadata . readMetadataFromDbIfRequired ( ) ; for ( int i = NUM00 ; i <= parameterMetadata . getParameterCount ( ) ; i ++ ) { $F150661 ( name , parameterMetadata , i ) if $F45007 ( name , parameterName ) { return i ; } } $F132231 ( parameterName ) }
public void sort ( Comparator < ? super SubRange > comparator ) $F57005 ( Collections , data , comparator )
private void add ( $F27766 map , String key , Object value ) { $F20764 v = getList ( map , key ) ; if ( v == null ) { $F15051 ( v ) $F134205 ( map , key , v ) } $F2201 ( v , value ) }
public void test_singleResourceLocking_serialized_waitsFor_highConcurrency_taskTimeout $F72 throws Exception { $F859 ( properties ) final int nthreads = NUM00 ; final int ntasks = NUM00 ; $F130259 ( properties , TestOptions , nthreads ) $F130261 ( properties , TestOptions , ntasks ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) properties . setProperty ( TestOptions . TASK_TIMEOUT , NUM00 ) ; $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) final Result result = doComparisonTest ( properties ) ; $F130277 ( assertEquals , Integer , result ) $F130277 ( assertEquals , Integer , result ) final int ncancel = Integer . parseInt ( result . get ( NUM00 ) ) ; assertTrue ( NUM00 , ncancel > NUM00 ) ; }
private void blackmanHarris3s ( int size ) { int start = ( windowFunction . length - size ) / NUM00 ; int stop = ( windowFunction . length + size ) / NUM00 ; double scale = NUM00 / ( double ) size / NUM00 ; for ( int i = NUM00 ; start < stop ; start ++ , i ++ ) windowFunction [ i ] = scale * ( NUM00 - NUM00 * Math . cos ( twoPI * i / size ) + NUM00 * Math . cos ( NUM00 * twoPI * i / size ) ) ; }
private WeekFields ( DayOfWeek firstDayOfWeek , int minimalDaysInFirstWeek ) { $F10578 ( Objects , firstDayOfWeek ) $F102540 ( minimalDaysInFirstWeek ) this . firstDayOfWeek = firstDayOfWeek ; this . minimalDays = minimalDaysInFirstWeek ; }
private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { $F166720 ( fromX , from ) $F166722 ( fromY , from ) $F166720 ( toX , to ) $F166722 ( toY , to ) $F226920 ( steep , Math , toY , fromY , toX , fromX ) $F226922 ( steep , temp , fromX , fromY , toX , toY ) $F11871 ( dx , Math , toX , fromX ) $F11871 ( dy , Math , toY , fromY ) int error = - dx > > NUM00 ; $F211050 ( ystep , fromY , toY ) $F211050 ( xstep , fromX , toX ) int transitions = NUM00 ; $F226926 ( inBlack , image , steep , fromY , fromX ) $F226931 ( x , fromX , y , fromY , toX , xstep , isBlack , image , steep , inBlack , transitions , error , dy , toY , ystep , dx ) $F226932 ( from , to , transitions ) }
private void placeGroups $F72 { startRow ( ) ; placeChild ( mCloseButton , Gravity . END ) ; placeGroup ( mMainGroup ) ; int customGroupWidth = NUM00 ; if ( mCustomGroup != null ) { updateCustomGroupForRow ( ROW_MAIN ) ; customGroupWidth = getWidthWithMargins ( mCustomGroup ) ; } int buttonGroupWidth = NUM00 ; if ( mButtonGroup != null ) { updateButtonGroupForRow ( ROW_MAIN ) ; buttonGroupWidth = getWidthWithMargins ( mButtonGroup ) ; } boolean customGroupOnMainRow = customGroupWidth <= availableWidth ( ) ; boolean buttonGroupOnMainRow = customGroupWidth + buttonGroupWidth <= availableWidth ( ) ; if ( mCustomGroup != null ) { if ( customGroupOnMainRow ) { mCustomGroup . gravity = ( mButtonGroup != null && buttonGroupOnMainRow ) ? Gravity . START : Gravity . END ; } else $F19529 ( startRow , updateCustomGroupForRow , ROW_OTHER ) placeGroup ( mCustomGroup ) ; } if ( mButtonGroup != null ) { if ( ! buttonGroupOnMainRow ) { startRow ( ) ; updateButtonGroupForRow ( ROW_OTHER ) ; if ( mCustomGroup == null && mMessageTextView != null ) { $F310049 ( lp , mMessageTextView ) int messageBottom = lp . top + mMessageTextView . getMeasuredHeight ( ) ; mTop = Math . max ( mTop , messageBottom + NUM00 * mMargin ) ; } } placeGroup ( mButtonGroup ) ; if ( mCustomButton != null && ! buttonGroupOnMainRow ) { $F310049 ( primaryButtonLP , mPrimaryButton ) $F310049 ( customButtonLP , mCustomButton ) $F310049 ( messageLP , mMessageView ) if ( customButtonLP . start >= messageLP . start ) { customButtonLP . start = messageLP . start ; } else { customButtonLP . start = mMargin ; } if ( ! mButtonGroup . isStacked ) { customButtonLP . top = primaryButtonLP . top + ( mPrimaryButton . getMeasuredHeight ( ) - mCustomButton . getMeasuredHeight ( ) ) / NUM00 ; } } } startRow ( ) ; if ( buttonGroupOnMainRow ) { int layoutHeight = mBottom ; for ( $F50810 ( i , getChildCount ) ) { View child = getChildAt ( i ) ; int extraSpace = layoutHeight - child . getMeasuredHeight ( ) ; $F310049 ( lp , child ) lp . top = extraSpace / NUM00 ; } } }
static HeapDoublesSketch copy ( DoublesSketch sketch ) { HeapDoublesSketch qsCopy ; qsCopy = HeapDoublesSketch . newInstance ( sketch . getK ( ) ) ; qsCopy . n_ = sketch . getN ( ) ; qsCopy . minValue_ = sketch . getMinValue ( ) ; qsCopy . maxValue_ = sketch . getMaxValue ( ) ; qsCopy . combinedBufferItemCapacity_ = sketch . getCombinedBufferItemCapacity ( ) ; qsCopy . baseBufferCount_ = sketch . getBaseBufferCount ( ) ; qsCopy . bitPattern_ = sketch . getBitPattern ( ) ; $F1986 combBuf = sketch . getCombinedBuffer ( ) ; qsCopy . combinedBuffer_ = $F17877 ( Arrays , combBuf ) ; return qsCopy ; }
public List < VerificationOK > verify ( List < VerificationOK > result ) throws IOException , GeneralSecurityException { $F21432 ( result ) while ( pkcs7 != null ) { $F138067 ( result , verifySignature ) } return result ; }
public SchemaField ( String name , FieldType type ) { this ( name , type , type . properties , null ) ; }
private void createDaySlot ( ArrayList < MAssignmentSlot > list , MAssignmentSlot ma ) { Timestamp start = ma . getStartTime ( ) ; $F13064 ( calStart ) calStart . setTime ( start ) ; $F118880 ( calStart , Calendar ) $F118882 ( calStart , Calendar ) $F118884 ( calStart , Calendar ) $F104560 ( calStart , Calendar ) Timestamp end = ma . getEndTime ( ) ; $F13064 ( calEnd ) calEnd . setTime ( end ) ; $F118880 ( calEnd , Calendar ) $F118882 ( calEnd , Calendar ) $F118884 ( calEnd , Calendar ) $F104560 ( calEnd , Calendar ) while $F83893 ( calStart , calEnd ) { $F214575 ( xStart , calStart ) $F107166 ( calStart , Calendar ) $F214575 ( xEnd , calStart ) MAssignmentSlot myMa = new MAssignmentSlot ( xStart , xEnd , ma . getName ( ) , ma . getDescription ( ) , ma . getStatus ( ) ) ; list . add ( myMa ) ; } }
public boolean isAttachment ( String fileName ) $F121470 ( fileName , ENTRY_ATTACHMENT )
void subtractFlakes ( int quantity ) { for ( $F1316 ( i , quantity ) ) { int index = numFlakes - i - NUM00 ; flakes . remove ( index ) ; } setNumFlakes ( numFlakes - quantity ) ; }
public Optimized ( int n , int s , int t , Iterator < EdgeInfo > edges ) { super ( n , s , t ) ; $F3936 ( queue , n ) QUEUE_SIZE = n ; capacity = new int [ n ] [ n ] ; flow = new int [ n ] [ n ] ; $F3936 ( previous , n ) $F3936 ( visited , n ) while $F2921 ( edges ) { EdgeInfo ei = edges . next ( ) ; capacity [ ei . start ] [ ei . end ] = ei . capacity ; } }
public void put ( Buffer buffer ) { if ( buffer . getLength ( ) <= NUM00 ) $F932 $F96 currentRtpPacketData = ( ( $F96 ) buffer . getData ( ) ) ; H264RtpHeaders h264RtpHeaders = new H264RtpHeaders ( currentRtpPacketData ) ; if ( h264RtpHeaders . getFUI_F ( ) ) $F932 if ( reassembledData == null ) { timeStamp = buffer . getTimeStamp ( ) ; format = buffer . getFormat ( ) ; seqNumber = buffer . getSequenceNumber ( ) ; reassembledDataNALHeader = h264RtpHeaders . getNALHeader ( ) ; reassembledData = new byte [ JavaPacketizer . H264_MAX_RTP_PKTS ] [ H264_FRAME_PACKET_SIZE ] ; reassembledDataSize = new int [ JavaPacketizer . H264_MAX_RTP_PKTS ] ; reassembledDataHasStart = _BOOL ; reassembledDataHasEnd = _BOOL ; } int posSeq = ( int ) ( buffer . getSequenceNumber ( ) & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK ) ; int payloadStartPosition = h264RtpHeaders . getHeaderSize ( ) ; int payloadLength = buffer . getLength ( ) - h264RtpHeaders . getHeaderSize ( ) ; if ( h264RtpHeaders . getFUI_TYPE ( ) == H264RtpHeaders . AVC_NALTYPE_FUA ) { reassembledDataHasStart |= ( h264RtpHeaders . getFUH_S ( ) ) ; reassembledDataHasEnd |= ( h264RtpHeaders . getFUH_E ( ) ) ; reassembledDataPosSeqStart = ( ( h264RtpHeaders . getFUH_S ( ) ) ? posSeq : reassembledDataPosSeqStart ) ; reassembledDataPosSeqEnd = ( ( h264RtpHeaders . getFUH_E ( ) ) ? posSeq : reassembledDataPosSeqEnd ) ; } reassembledDataSize [ posSeq ] = payloadLength ; reassembledDataFullSize += payloadLength ; System . arraycopy ( currentRtpPacketData , payloadStartPosition , reassembledData [ posSeq ] , NUM00 , payloadLength ) ; videoOrientation = buffer . getVideoOrientation ( ) ; }
public static $F529 badExpireEvenProcessor $F71242 ( dctx , context ) { $F108907 ( creditCard , context ) $F21024 ( expireDate , creditCard ) String lastNumberStr = $F39706 ( expireDate ) ; $F27213 ( lastNumber , Integer , lastNumberStr ) if ( lastNumber % NUM00 == NUM00 ) $F8587 ( alwaysBadExpireProcessor , dctx , context ) else $F8587 ( alwaysApproveProcessor , dctx , context ) }
public ExpressionType negate $F72 { if ( isNegated ( ) ) { return new ExpressionType ( typeString . replace ( SUFFIX_NEGATED , NUM00 ) ) ; } else { return new ExpressionType ( typeString + SUFFIX_NEGATED ) ; } }
protected void updatePathGreyness ( TreePath ancestor ) { boolean value = isPathCheckBox ( ancestor ) ; $F260968 ( ancestorNode , ancestor ) if ( ! isPathCheckBox ( ancestor ) ) $F14411 ( addToCheckBoxPathsSet , ancestor ) }
protected $F5 useTokenizer ( String s ) throws Exception { $F806 tokens ; $F5 result ; int i ; tokens = Tokenizer . tokenize ( m_Tokenizer , $F8640 ( s ) ) ; $F30598 ( result ) for ( $F6929 ( i , tokens ) ) $F24617 ( result , tokens , i ) return result ; }
public DOMStorableInputOutputFormat ( DOMFactory factory , String description , String fileExtension , String mimeType ) { this . factory = factory ; this . description = description ; this . fileExtension = fileExtension ; this . mimeType = mimeType ; try { this . dataFlavor = new DataFlavor ( mimeType ) ; } catch ( ClassNotFoundException ex ) { InternalError error = new InternalError ( NUM00 + mimeType ) ; error . initCause ( ex ) ; throw error ; } }
default TypeParameterDeclaration asTypeParameter $F72 { throw new UnsupportedOperationException $F10797 ( String , this ) ; }
public void addColumn ( String header ) { if ( getModel ( ) instanceof DefaultTableModel ) { DefaultTableModel model = ( DefaultTableModel ) getModel ( ) ; model . addColumn ( Util . cleanAmp ( header ) ) ; } else $F824 }
public void addMoveScript ( String pathname ) { _moveScripts . add ( pathname ) ; setDirtyAndFirePropertyChange ( NUM00 , pathname , null ) ; }
private void checkAndAddResizeHandler $F72 { Component parent = getParent ( ) ; if ( parent != null && resizable && resizeHandler == null ) { resizeHandler = new ResizeHandler $F72 ; parent . addComponentListener ( resizeHandler ) ; } }
static public void useXalanXPathSupport $F72 throws Exception { $F32352 ( Class ) Class c = Class . forName ( NUM00 ) ; $F37039 ( STATIC_LOCK , xpathSupportClass , c ) $F35060 ( LOG ) }
public int numberOfOwningShards $F72 { int count = NUM00 ; for ( ShardRouting shardEntry : this ) { if ( shardEntry . state ( ) != ShardRoutingState . RELOCATING ) { count ++ ; } } return count ; }
public String convertBinaryToHexString $F97 ( bytes ) { $F28148 ( builder , bytes ) for ( byte b : bytes ) { $F52249 ( highBitsInt , b ) int lowBitsInt = b & NUM00 ; $F6939 ( builder , HEX_CHARS , highBitsInt ) $F6939 ( builder , HEX_CHARS , lowBitsInt ) } $F92 ( builder ) }
protected static void writeHeader ( XMLWriter writer ) { XmlWriterUtil . writeCommentLineBreak ( writer ) ; XmlWriterUtil . writeComment ( writer , NUM00 ) ; $F121432 ( dateFormat ) XmlWriterUtil . writeComment ( writer , NUM00 + dateFormat . format ( new Date $F30 ( System ) ) ) ; XmlWriterUtil . writeComment ( writer , NUM00 ) ; XmlWriterUtil . writeComment ( writer , NUM00 ) ; XmlWriterUtil . writeCommentLineBreak ( writer ) ; XmlWriterUtil . writeLineBreak ( writer ) ; }
protected void close $F72 { try $F21231 ( to , from ) $F29052 if ( process != null ) $F17623 ( process ) process = null ; to = null ; from = null ; errorLogger = null ; }
public void clearParseIssues $F72 $F9096 ( parseIssues )
public int validate ( GraphicsConfiguration gc ) { int returnCode = VolatileImage . IMAGE_OK ; boolean lostSurfaceTmp = lostSurface ; lostSurface = _BOOL ; if ( isAccelerationEnabled ( ) ) { if ( ! isConfigValid ( gc ) ) { returnCode = VolatileImage . IMAGE_INCOMPATIBLE ; } else if ( sdAccel == null ) { sdAccel = initAcceleratedSurface ( ) ; if ( sdAccel != null ) { sdCurrent = sdAccel ; sdBackup = null ; returnCode = VolatileImage . IMAGE_RESTORED ; } else $F20182 ( sdCurrent , getBackupSurface ) } else if ( sdAccel . isSurfaceLost ( ) ) { try { restoreAcceleratedSurface ( ) ; sdCurrent = sdAccel ; sdAccel . setSurfaceLost ( _BOOL ) ; sdBackup = null ; returnCode = VolatileImage . IMAGE_RESTORED ; } catch ( sun . java2d . InvalidPipeException e ) $F20182 ( sdCurrent , getBackupSurface ) } else if ( lostSurfaceTmp ) { returnCode = VolatileImage . IMAGE_RESTORED ; } } else if ( sdAccel != null ) { sdCurrent = getBackupSurface ( ) ; sdAccel = null ; returnCode = VolatileImage . IMAGE_RESTORED ; } if ( ( returnCode != VolatileImage . IMAGE_INCOMPATIBLE ) && ( sdCurrent != sdPrevious ) ) { sdPrevious = sdCurrent ; returnCode = VolatileImage . IMAGE_RESTORED ; } if ( returnCode == VolatileImage . IMAGE_RESTORED ) $F5795 ( initContents ) return returnCode ; }
private static String unsignedToString ( final int value ) { if ( value >= NUM00 ) $F23210 ( Integer , value ) else { return Long . toString ( ( ( long ) value ) & NUM00 ) ; } }
public ConnectionManager ( ConnectionManagerConfiguration configuration ) throws Exception { _configuration = configuration ; if ( _configuration == null ) { throw new ConnectionManagerException $F580 ; } }
$F1431 public Pids $F72 $F57005 ( Arrays , PIDs , pidComparator )
public void handleHeaderColumnReleased ( Point p ) { TABLE . setPressedColumnIndex ( - NUM00 ) ; JTableHeader th = TABLE . getTableHeader ( ) ; int col = th . columnAtPoint ( p ) ; if ( col != - NUM00 ) th . repaint ( th . getHeaderRect ( col ) ) ; }
public void createDevices ( $F1113 List < Device > devices ) { $F933 ( initIfNecessary ) for ( Device device : devices ) { $F134526 ( deviceIdBase , device ) String deviceNameBase = device . getDisplayName ( ) ; int i = NUM00 ; while ( isUserDevice ( device ) ) { String id = String . format ( Locale . getDefault ( ) , NUM00 , deviceIdBase , i ) ; String name = String . format ( Locale . getDefault ( ) , NUM00 , deviceNameBase , i ) ; device = cloneDeviceWithNewIdAndName ( device , id , name ) ; } ourDeviceManager . addUserDevice ( device ) ; } ourDeviceManager . saveUserDevices ( ) ; }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= NUM00 || h <= NUM00 ) { throw new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new ShortBandedRaster ( sm , $F69159 ) ; }
public void write ( PrintWriter writer ) { for ( $F119 ( i , count ) ) { writer . println ( keys [ i ] + NUM00 + values [ i ] ) ; } $F1206 ( writer ) }
@ WorkerThread public synchronized int stopRecord $F72 { if ( mRecorder == null ) $F340596 ( mState , STATE_IDLE ) int length = - NUM00 ; switch ( mState ) { case STATE_RECORDING : try { Thread . sleep ( STOP_AUDIO_RECORD_DELAY_MILLIS ) ; $F5191 ( mRecorder ) length = ( int ) ( $F32708 ( System , mSampleStart ) ) ; } catch ( RuntimeException e ) { Log . w ( $F56761 ( TAG , e ) ) ; } catch ( InterruptedException e ) { Log . w ( $F56761 ( TAG , e ) ) ; } case STATE_PREPARED : case STATE_IDLE : $F1267 try $F8030 ( mRecorder ) catch ( RuntimeException e ) { Log . w ( $F56761 ( TAG , e ) ) ; } $F33833 ( mRecorder ) mRecorder = null ; mState = STATE_IDLE ; $F597 } return length ; }
public XMLParser ( final Class classToBeBound , final $F806 schemas ) throws XMLException $F2248 ( jc , JAXBContext , classToBeBound , marshaller , XMLSchemaUtils , schemas , unmarshaller , e )
private void abort ( Throwable t ) { throwable = t ; }
public static UserImpl signup ( Map $F24639 parameters , String ip , List < SignupError > errors ) { log . entering ( NUM00 , NUM00 ) ; String email = getFirst ( parameters , NUM00 ) ; String displayName = getFirst ( parameters , NUM00 ) ; String photoUrl = getFirst ( parameters , NUM00 ) ; String password = getFirst ( parameters , NUM00 ) ; String confirm = getFirst ( parameters , NUM00 ) ; if ( Strings . isNullOrEmpty ( email ) || ! EmailValidator . isValid ( email ) ) { errors . add ( SignupError . INVALID_EMAIL ) ; } if $F4964 ( Strings , displayName ) { errors . add ( SignupError . EMPTY_DISPLAY_NAME ) ; } if $F4964 ( Strings , password ) { errors . add ( SignupError . INVALID_PASSWORD ) ; } else if $F2137 ( password , confirm ) { errors . add ( SignupError . CONFIRM_MISMATCH ) ; } else if $F3599 ( password ) { errors . add ( SignupError . INVALID_PASSWORD ) ; } PersistenceManager pm = pmf . getPersistenceManager ( ) ; try { UserRecord record = findUserByEmail ( pm , email ) ; if ( record != null ) { errors . add ( SignupError . EMAIL_REGISTERED ) ; } else if $F2979 ( errors ) { $F35577 ( log , email ) record = new UserRecord $F72 ; record . setEmail ( email ) ; record . setDisplayName ( displayName ) ; record . setPhotoUrl ( photoUrl ) ; record . setPassword ( password ) ; record . setTosAccepted ( _BOOL ) ; record . setLastBigChangeTime ( System . currentTimeMillis ( ) ) ; pm . makePersistent ( record ) ; UserImpl user = createUserByRecord ( record ) ; return user ; } } $F3229 ( pm ) log . exiting ( NUM00 , NUM00 ) ; $F1274 }
$F1 public final String readNullTerminatedAsciiString $F72 { $F1538 ( baos ) byte b ; while ( _BOOL ) { b = readByte ( ) ; $F7256 ( b ) baos . write ( b ) ; } $F1208 ( buf , baos ) $F91540 ( chrBuf , buf ) for ( $F1139 ( x , buf ) ) { chrBuf [ x ] = ( char ) buf [ x ] ; } $F33236 ( String , chrBuf ) }
private void thresholdBlur ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha ) { $F5415 matrix = kernel . getKernelData ( null ) ; $F2049 ( cols , kernel ) int cols2 = cols / NUM00 ; for ( $F119 ( y , height ) ) { int ioffset = y * width ; int outIndex = y ; for ( $F119 ( x , width ) ) { float r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; int moffset = cols2 ; int rgb1 = inPixels [ ioffset + x ] ; $F52249 ( a1 , rgb1 ) $F52249 ( r1 , rgb1 ) $F52249 ( g1 , rgb1 ) int b1 = rgb1 & NUM00 ; float af = NUM00 , rf = NUM00 , gf = NUM00 , bf = NUM00 ; for ( $F142929 ( col , cols2 ) ) { float f = matrix [ moffset + col ] ; if ( f != NUM00 ) { int ix = x + col ; if ( ! ( NUM00 <= ix && ix < width ) ) ix = x ; int rgb2 = inPixels [ ioffset + ix ] ; $F52249 ( a2 , rgb2 ) $F52249 ( r2 , rgb2 ) $F52249 ( g2 , rgb2 ) int b2 = rgb2 & NUM00 ; int d ; d = a1 - a2 ; if ( d >= - threshold && d <= threshold ) { a += f * a2 ; af += f ; } d = r1 - r2 ; if ( d >= - threshold && d <= threshold ) { r += f * r2 ; rf += f ; } d = g1 - g2 ; if ( d >= - threshold && d <= threshold ) { g += f * g2 ; gf += f ; } d = b1 - b2 ; if ( d >= - threshold && d <= threshold ) { b += f * b2 ; bf += f ; } } } a = af == NUM00 ? a1 : a / af ; r = rf == NUM00 ? r1 : r / rf ; g = gf == NUM00 ? g1 : g / gf ; b = bf == NUM00 ? b1 : b / bf ; int ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; $F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ outIndex ] = $F38048 ( ia , ir , ig , ib ) ; outIndex += height ; } } }
void closeSilently ( ServerSocket socket ) $F87767 ( socket )
public ExpressionParserBuilder withProcess ( Process process ) $F5584 ( this , process )
void addAssociatedComponentAt ( int index , Component cmp ) { if ( comps == null ) { $F20637 ( comps ) } comps . insertElementAt ( cmp , index ) ; }
private static $F96 readClass ( final InputStream is ) throws IOException { $F31068 ( is ) $F143466 ( b , is ) int len = NUM00 ; while ( _BOOL ) { $F7994 ( n , is , b , len ) if ( n == - NUM00 ) { if ( len < b . length ) { $F2175 ( c , len ) $F135 ( System , b , c , len ) b = c ; } return b ; } len += n ; if ( len == b . length ) { $F7468 ( last , is ) $F7879 ( last , b ) $F64222 ( c , b ) $F135 ( System , b , c , len ) $F11740 ( c , len , last ) b = c ; } } }
static String stringFromPacket ( DatagramPacket packet ) { return new String ( packet . getData ( ) , NUM00 , packet . getLength ( ) ) ; }
private String readAttributeName ( boolean returnLowerCase ) { skipWhitespace ( ) ; int c = find ( ATTRIBUTE_NAME_TERMINATORS ) ; String forSubstring = returnLowerCase ? inputLowerCase : input ; String result = pos < c ? forSubstring . substring ( pos , c ) : null ; pos = c ; return result ; }
public boolean contains ( final Entity entity ) { $F1933 ( entity , _BOOL ) final IRPZone entityZone = entity . getZone ( ) ; return zone . equals ( entityZone ) && zone . has ( entity . getID ( ) ) && shape . contains ( $F5048 ( entity ) ) ; }
protected void checkOffscreenImage ( Dimension d ) { if ( doubleBuffered ) { if ( offscreen == null || offscreen . getWidth ( ) != d . width || offscreen . getHeight ( ) != d . height ) { offscreen = new BufferedImage ( d . width , d . height , BufferedImage . TYPE_INT_ARGB ) ; $F76571 ( offscreenG2d , offscreen ) } } }
public void clear $F72 { $F101536 ( mLock , mGraphics ) postInvalidate ( ) ; }
public void testSetObject_int_Object_int $F72 throws SQLException { PreparedStatement ps = null ; try { String query = NUM00 ; ps = conn . prepareStatement ( query ) ; Statement st = null ; try { ps . setObject ( NUM00 , Integer . MAX_VALUE , Types . INTEGER ) ; $F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + Integer . MAX_VALUE ) ; $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( NUM00 , NUM00 , Types . CHAR ) ; $F1699 ( ps ) $F2715 ( st , conn ) $F131050 ( st ) $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; ps . setObject ( NUM00 , $F38005 , Types . DECIMAL ) ; $F1699 ( ps ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; Date $F40924 ( d ) ; try { ps . setObject ( NUM00 , d , Types . DATE ) ; $F1699 ( ps ) $F2715 ( st , conn ) st . execute ( NUM00 + d . getTime ( ) + NUM00 ) ; $F19095 ( rs , st ) assertEquals ( NUM00 , getCount ( rs ) ) ; } $F137812 ( st ) query = NUM00 ; ps = conn . prepareStatement ( query ) ; try { ps . setObject ( NUM00 , NUM00 , Types . BLOB ) ; $F1699 ( ps ) } $F137812 ( st ) } $F137812 ( ps ) try { ps . setObject ( NUM00 , Integer . MAX_VALUE , Types . INTEGER ) ; fail ( NUM00 ) ; } $F31184 }
public void warning $F146212 ( e ) throws $F2253 { $F105671 ( formattedMsg , e ) SAXSourceLocator locator = getLocator ( ) ; $F1875 ( handler , m_stylesheetProcessor ) try { handler . warning ( new TransformerException ( formattedMsg , locator ) ) ; } $F2262 ( te ) }
public static boolean checkChrootPath ( String zkHost , boolean create ) throws $F80658 { $F38676 ( containsChroot , zkHost , _BOOL ) $F973 ( log ) String chrootPath = zkHost . substring ( zkHost . indexOf ( NUM00 ) , zkHost . length ( ) ) ; SolrZkClient tmpClient = new SolrZkClient ( $F31599 ( zkHost ) , NUM00 * NUM00 ) ; boolean exists = tmpClient . exists ( chrootPath , _BOOL ) ; if ( ! exists && create ) { tmpClient . makePath ( chrootPath , _BOOL , _BOOL ) ; exists = _BOOL ; } $F59 ( tmpClient ) return exists ; }
public void addJob ( Runnable job ) $F207 ( mJobs , job )
public void addXValue ( String xVal ) { mXValAverageLength = ( mXValAverageLength + xVal . length ( ) ) / NUM00 ; mXVals . add ( xVal ) ; }
$F60342 ( mSmallestWidthDp , mInPortrait )
public long timeSinceStart $F72 { $F657 ( currentTime , System ) return currentTime - startTime ; }
public void fillRectRadialGradient ( Object graphics , int startColor , int endColor , int x , int y , int width , int height , float relativeX , float relativeY , float relativeSize ) { int centerX = ( int ) ( width * ( NUM00 - relativeX ) ) ; int centerY = ( int ) ( height * ( NUM00 - relativeY ) ) ; int size = ( int ) ( Math . min ( width , height ) * relativeSize ) ; int x2 = ( int ) ( width / NUM00 - ( size * relativeX ) ) ; int y2 = ( int ) ( height / NUM00 - ( size * relativeY ) ) ; boolean aa = isAntiAliased ( graphics ) ; setAntiAliased ( graphics , _BOOL ) ; if ( cacheRadialGradients ( ) ) { Object r = findCachedGradient ( radialGradientCache , startColor , endColor , x , y , width , height , _BOOL , centerX , centerY , size ) ; if ( r != null ) { drawImage ( graphics , r , x , y ) ; } else { r = createMutableImage ( width , height , NUM00 ) ; Object imageGraphics = getNativeGraphics ( r ) ; setColor ( imageGraphics , endColor ) ; fillRect ( imageGraphics , NUM00 , NUM00 , width , height ) ; fillRadialGradientImpl ( imageGraphics , startColor , endColor , x2 , y2 , size , size , NUM00 , NUM00 ) ; drawImage ( graphics , r , x , y ) ; $F155382 ( radialGradientCache ) storeCachedGradient ( r , radialGradientCache , startColor , endColor , x , y , _BOOL , centerX , centerY , size ) ; } } else { setColor ( graphics , endColor ) ; fillRect ( graphics , x , y , width , height ) ; fillRadialGradientImpl ( graphics , startColor , endColor , x + x2 , y + y2 , size , size , NUM00 , NUM00 ) ; } $F308 ( aa , setAntiAliased , graphics , _BOOL ) }
public Formatter format ( Locale l , String format , Object ... args ) { ensureOpen ( ) ; int last = - NUM00 ; int lasto = - NUM00 ; FormatString [ ] fsa = parse ( format ) ; for ( $F1139 ( i , fsa ) ) { FormatString fs = fsa [ i ] ; $F115 ( index , fs ) try { switch ( index ) { $F52533 fs . print ( null , l ) ; $F597 $F52533 if ( last < NUM00 || ( args != null && last > args . length - NUM00 ) ) throw new MissingFormatArgumentException $F3362 ( fs ) ; fs . print ( ( args == null ? null : args [ last ] ) , l ) ; $F597 $F3366 lasto ++ ; last = lasto ; if ( args != null && lasto > args . length - NUM00 ) throw new MissingFormatArgumentException $F3362 ( fs ) ; fs . print ( ( args == null ? null : args [ lasto ] ) , l ) ; $F597 $F1267 last = index - NUM00 ; if ( args != null && last > args . length - NUM00 ) throw new MissingFormatArgumentException $F3362 ( fs ) ; fs . print ( ( args == null ? null : args [ last ] ) , l ) ; $F597 } } catch ( IOException x ) { lastException = x ; } } return this ; }
public void testWriteReadEmpty $F72 throws Exception { $F121388 ( out ) $F7054 ( os , out ) os . writeObject ( empty ) ; $F164856 ( is , out ) ClusterPolicy copy = ( ClusterPolicy ) is . readObject ( ) ; $F59 ( is ) $F59 ( os ) $F318717 ( assertTrue , helper , empty , copy ) }
DOMStringListImpl $F4374 ( params ) { $F20637 ( fStrings ) if ( params != null ) { $F68861 ( i , params , fStrings ) } }
public Instant watermarkHold $F72 { long min = Long . MAX_VALUE ; for ( Instant hold : watermarkHolds . values ( ) ) { min = Math . min ( min , hold . getMillis ( ) ) ; } return new Instant ( min ) ; }
$F1 public final boolean isCapPresent ( int cap ) { return ( ( oglCaps . getCaps ( ) & cap ) != NUM00 ) ; }
public static $F4203 MenuResult $F4203 again $F72 { return new MenuResult $F200 ( Type . AGAIN , $F59440 ( Collections ) ) ; }
$F1431 public V put ( K key , V value ) { final int hash = key . hashCode ( ) ; int index = indexOf ( key , hash ) ; if ( index >= NUM00 ) { index = $F50054 ( index ) ; final V old = ( V ) mArray [ index ] ; mArray [ index ] = value ; return old ; } index = ~ index ; if ( mSize >= mHashes . length ) { final int n = mSize >= ( BASE_SIZE * NUM00 ) ? $F107995 ( mSize ) : ( mSize >= BASE_SIZE ? ( BASE_SIZE * NUM00 ) : BASE_SIZE ) ; $F92861 ( ohashes , mHashes ) $F108000 ( oarray , mArray ) allocArrays ( n ) ; if $F3305 ( mHashes ) { $F7057 ( System , ohashes , mHashes ) $F7057 ( System , oarray , mArray ) } freeArrays ( ohashes , oarray , mSize ) ; } if ( index < mSize ) { $F27096 ( System , mHashes , index , mSize ) System . arraycopy ( mArray , index < < NUM00 , mArray , $F33569 ( index ) , ( mSize - index ) < < NUM00 ) ; } mHashes [ index ] = hash ; mArray [ index < < NUM00 ] = key ; $F107987 ( mArray , index ) = value ; mSize ++ ; $F1274 }
public Long addNewUser ( String SID , String username , String userpass , String lastname , String firstname , String email , String additionalname , String street , String zip , String fax , long states_id , String town , long language_id , String baseURL ) throws AxisFault { try { Long users_id = sessionManagement . checkSession ( SID ) ; Long user_level = userManagement . getUserLevelByID ( users_id ) ; if ( authLevelManagement . checkWebServiceLevel ( user_level ) ) { Configuration conf = cfgManagement . getConfKey ( NUM00 , NUM00 ) ; String jName_timeZone = NUM00 ; if ( conf != null ) { jName_timeZone = conf . getConf_value ( ) ; } Long user_id = userManagement . registerUser ( username , userpass , lastname , firstname , email , $F4094 , street , additionalname , fax , zip , states_id , town , language_id , NUM00 , baseURL , _BOOL , jName_timeZone ) ; if ( user_id == null || user_id < NUM00 ) { return user_id ; } Users user = userManagement . getUserById ( user_id ) ; user . setStatus ( NUM00 ) ; user . setUpdatetime ( $F4094 ) ; userManagement . updateUser ( user ) ; return user_id ; } else { $F337950 } } catch ( Exception err ) { $F5197 ( log , err ) throw new AxisFault $F1783 ( err ) ; } }
public static void interpreterOnly ( Runnable runnable ) $F21688 ( runnable )
public DAddExtensionType ( JDialog parent , X509Extension extensions ) { $F36748 ( super , parent , Dialog ) $F15426 ( setTitle , res ) this . extensions = extensions ; initComponents ( ) ; }
private int hash ( GraphicsConfiguration config , int w , int h , Object ... args ) { int hash ; hash = ( config != null ? config . hashCode ( ) : NUM00 ) ; hash = NUM00 * hash + w ; hash = NUM00 * hash + h ; hash = NUM00 * hash + Arrays . deepHashCode ( args ) ; return hash ; }
$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System )
protected void paintText ( Graphics g , AbstractButton b , Rectangle textRect , String text ) { paintText ( g , ( JComponent ) b , textRect , text ) ; }
public static boolean usesSecondOperand ( final Integer mnemonic ) { return ! mnemonic . equals ( ReilHelpers . _OPCODE_NOP ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_BISZ ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_STR ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_STM ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_LDM ) && ! mnemonic . equals ( ReilHelpers . _OPCODE_JCC ) ; }
public RhythmGroup addOverlay ( RhythmOverlay overlay ) { mOverlays . add ( overlay ) ; if ( mCurrentOverlayIndex == NO_OVERLAY ) $F73598 ( selectOverlay ) return this ; }
public $F1469 toCharArray $F72 { $F18064 ( buffer , count ) $F21535 ( System , value , offset , buffer , count ) return buffer ; }
private $F5237 filterFiles ( final $F5237 toFilter , final String fileName ) { if ( fileName != null && toFilter != null ) { $F15885 ( fileAsFilter , fileName ) for ( File file : toFilter ) { if $F79396 ( file , fileAsFilter ) { return new File [ ] { fileAsFilter } ; } } return new File $F380 ; } return toFilter ; }
public Fp ( ECCurve curve , ECFieldElement x , ECFieldElement y ) { this ( curve , x , y , _BOOL ) ; }
private void pullEvent $F72 { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; $F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; $F597 } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; $F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; $F597 } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; $F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; $F597 } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) || ( mState == State . RESET && itemDimension < Math . abs ( newScrollValue ) ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
private File writePrivateKeyFile $F72 throws GitException { $F140034 ( keyDirectory , rootFolder , host ) $F1909 ( keyDirectory ) $F140034 ( keyFile , keyDirectory , DEFAULT_KEY_NAME ) try $F64338 ( fos , keyFile ) $F4050 ( fos , sshKey ) catch ( IOException e ) { $F5197 ( LOG , e ) throw new GitException $F580 ; } protectPrivateKeyFile ( keyFile ) ; return keyFile ; }
protected boolean drawLeftBorder $F6065 ( c , g , x , y , width , height ) { if ( super . drawLeftBorder ( c , g , x , y , width , height ) && frame . isResizable ( ) ) { $F109754 ( g , getFrameHighlight ) int topY = y + CORNER_SIZE ; g . drawLine ( x , topY , x + NUM00 , topY ) ; int bottomY = height - CORNER_SIZE ; g . drawLine ( x + NUM00 , bottomY , x + NUM00 , bottomY ) ; $F109754 ( g , getFrameShadow ) g . drawLine ( x + NUM00 , topY - NUM00 , x + NUM00 , topY - NUM00 ) ; g . drawLine ( x + NUM00 , bottomY - NUM00 , x + NUM00 , bottomY - NUM00 ) ; return _BOOL ; } return _BOOL ; }
public static boolean isFileReadable ( String fileName ) { $F15885 ( file , fileName ) return $F302235 ( file ) ; }
public static String hintingSize ( Font font ) { int instrSize = NUM00 ; LocaTable locaTable = FontUtils . getLocaTable ( font ) ; GlyphTable glyfTable = FontUtils . getGlyphTable ( font ) ; for ( int i = NUM00 ; i < locaTable . numGlyphs ( ) ; i ++ ) { Glyph glyph = glyfTable . glyph ( locaTable . glyphOffset ( i ) , locaTable . glyphLength ( i ) ) ; instrSize += glyph . instructionSize ( ) ; } double percentage = instrSize * NUM00 / glyfTable . headerLength ( ) ; return String . format ( NUM00 , instrSize , twoDecimalPlaces . format ( percentage ) ) ; }
public static void premain ( String agentArgs , Instrumentation inst ) { instrumentation = inst ; $F973 ( LOGGER ) checkForCorrectSetup ( ) ; try { $F1431 InspectItClassLoader classLoader = new InspectItClassLoader ( new URL $F380 ) ; $F6969 agentClazz = classLoader . loadClass ( INSPECTIT_AGENT ) ; $F43121 constructor = agentClazz . getConstructor ( File . class ) ; Object realAgent = constructor . newInstance ( getInspectItAgentJarFileLocation ( ) ) ; Agent . agent = ( IAgent ) realAgent ; preloadClasses ( ) ; $F973 ( LOGGER ) analyzeAlreadyLoadedClasses ( ) ; inst . addTransformer ( new JavaAgent $F72 ) ; } catch ( Exception e ) { LOGGER . severe ( NUM00 ) ; $F301 ( e ) } }
private static float systemPropertyValue ( String name ) { $F7601 ( floatString , System , name ) if ( floatString == null ) return Float . NaN ; try { return Float . parseFloat ( floatString ) ; } catch ( NumberFormatException ex ) $F84174 ( String , name , floatString ) }
@ ZapApiIgnore public boolean isConfirmRemoveProxyExcludedDomain $F72 { return this . confirmRemoveProxyExcludeDomain ; }
public FloatColumn ( int nrows , int capacity , float defaultValue ) { super ( $F41248 , new Float ( defaultValue ) ) ; $F49020 ( capacity , nrows ) $F189191 ( m_values , capacity ) Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
private boolean addLocalKey ( KeyCacheObject key , AffinityTopologyVersion topVer , $F52042 distributedKeys ) throws IgniteCheckedException { GridDistributedCacheEntry entry = cctx . colocated ( ) . entryExx ( key , topVer , _BOOL ) ; assert ! entry . detached ( ) ; if ( ! cctx . isAll ( entry , filter ) ) { $F51620 ( log , entry ) onComplete ( _BOOL , _BOOL ) ; return _BOOL ; } GridCacheMvccCandidate cand = addEntry ( entry ) ; if ( cand != null && ! cand . reentry ( ) ) distributedKeys . add ( key ) ; return inTx ( ) && cand == null ; }
public static boolean isSupplemental ( int c ) { return $F56314 ( c ) ; }
public void testRadix10Neg $F72 $F214959 ( value , radix , aNumber , result , assertTrue )
public synchronized int readInTestFromSUT $F72 { if $F2979 ( remoteBuffer ) $F7629 return remoteBuffer . poll ( ) & NUM00 ; }
public SpatialIndex ( String shpFilename ) throws IOException { this . shpFileName = shpFilename ; if $F6456 ( logger , Level ) { $F29117 ( logger , shpFilename ) } }
public int invokeCompiler $F72 { $F53443 ( args , getExecArguments ) for ( $F2277 ( i , args ) ) { $F1729 ( arg , args , i ) if $F3106 ( arg ) { $F28924 ( fileName , arg ) args . remove ( i ) ; outputArgumentsToFile ( fileName , args ) ; $F597 } } return ExecUtil . execute ( $F10148 ( args ) , System . out , System . err ) ; }
static double fourNeighborsIDW ( SpatialGrid sg , double xCoord , double yCoord , double exp ) { double xDif = ( xCoord - sg . getXmin ( ) ) % sg . getResolution ( ) ; double yDif = ( yCoord - sg . getYmin ( ) ) % sg . getResolution ( ) ; if ( xDif == NUM00 && yDif == NUM00 ) { return sg . getValue ( xCoord , yCoord ) ; } double x1 = xCoord - xDif ; double x2 = x1 + sg . getResolution ( ) ; double y1 = yCoord - yDif ; double y2 = y1 + sg . getResolution ( ) ; double d11 = Math . pow ( distance ( x1 , y1 , xCoord , yCoord ) , exp ) ; double d12 = Math . pow ( distance ( x1 , y2 , xCoord , yCoord ) , exp ) ; double d21 = Math . pow ( distance ( x2 , y1 , xCoord , yCoord ) , exp ) ; double d22 = Math . pow ( distance ( x2 , y2 , xCoord , yCoord ) , exp ) ; if ( xCoord == sg . getXmax ( ) ) { return ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x1 , y2 ) / d12 ) / ( NUM00 / d11 + NUM00 / d12 ) ; } if ( yCoord == sg . getYmax ( ) ) { return ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x2 , y1 ) / d21 ) / ( NUM00 / d11 + NUM00 / d21 ) ; } return ( sg . getValue ( x1 , y1 ) / d11 + sg . getValue ( x1 , y2 ) / d12 + sg . getValue ( x2 , y1 ) / d21 + sg . getValue ( x2 , y2 ) / d22 ) / ( NUM00 / d11 + NUM00 / d12 + NUM00 / d21 + NUM00 / d22 ) ; }
protected void preUpdateMenu $F72 $F845
public PojoValueField ( PropertyDescriptor desc ) { super ( desc ) ; }
public UrlFilterRule ( String ruleText ) { super ( ruleText ) ; String urlRuleText = ruleText ; if ( StringUtils . startsWith ( urlRuleText , MASK_WHITE_LIST ) ) { $F11255 ( urlRuleText , MASK_WHITE_LIST ) whiteListRule = _BOOL ; } int optionsIndex = StringUtils . lastIndexOf ( urlRuleText , OPTIONS_DELIMITER ) ; if ( optionsIndex > - NUM00 ) $F45800 ( urlRuleText , optionsIndex ) urlRuleText = toPunycode ( urlRuleText ) ; boolean regexRule = urlRuleText . startsWith ( MASK_REGEX_RULE ) && urlRuleText . endsWith ( MASK_REGEX_RULE ) ; if ( ! regexRule ) { shortcut = findShortcut ( urlRuleText ) ; } }
protected static $F7329 lsrRegister $F7334 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 ) { $F7336 ( shifterOperand , environment ) $F7336 ( shifterCarryOut , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar11 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) $F7336 ( tmpVar4 , environment ) $F7336 ( tmpVar5 , environment ) $F7336 ( tmpVar6 , environment ) $F7336 ( tmpVar7 , environment ) $F7336 ( isZeroCondition , environment ) $F7336 ( shifterCarryOutTmp1 , environment ) $F7336 ( shifterCarryOutTmp2 , environment ) $F7336 ( shifterCarryOutTmp3 , environment ) $F7336 ( shifterCarryOutTmp4 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dWordSize , registerNodeValue2 , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar1 , dWordSize , tmpVar11 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar11 , dWordSize , tmpVar2 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar2 , bitMaskAllBitsSet , shifterOperand ) $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar11 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , byteSize , isZeroCondition , byteSize , NUM00 , byteSize , shifterCarryOutTmp1 ) ) ; instructions . add ( ReilHelpers . createXor ( baseOffset ++ , dWordSize , tmpVar11 , wordSize , String . valueOf ( NUM00 ) , dWordSize , tmpVar3 ) ) ; $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar3 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , thirtyOneSet , byteSize , tmpVar4 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , byteSize , isZeroCondition , tmpVar4 , shifterCarryOutTmp2 ) $F7341 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar11 , notThirtyOneSet , tmpVar5 ) $F453896 ( instructions , ReilHelpers , baseOffset , dWordSize , tmpVar5 , byteSize , isZeroCondition ) instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , tmpVar11 , dWordSize , oneSet , dWordSize , tmpVar6 ) ) ; instructions . add ( ReilHelpers . createSub ( baseOffset ++ , dWordSize , zeroSet , dWordSize , tmpVar6 , dWordSize , tmpVar6 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dWordSize , registerNodeValue1 , dWordSize , tmpVar6 , byteSize , tmpVar7 ) ) ; $F7341 ( instructions , ReilHelpers , baseOffset , byteSize , isZeroCondition , tmpVar7 , shifterCarryOutTmp3 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp1 , shifterCarryOutTmp2 , shifterCarryOutTmp4 ) $F43825 ( instructions , ReilHelpers , baseOffset , byteSize , shifterCarryOutTmp3 , shifterCarryOutTmp4 , shifterCarryOut ) $F7348 ( shifterOperand , shifterCarryOut ) }
public static boolean isDrmConvertNeeded ( String mimetype ) $F23588 ( MIMETYPE_DRM_MESSAGE , mimetype )
public static String pad $F41200 ( original , length , padChar ) { if ( original . length ( ) >= length ) return original ; $F7542 ( sb , original ) while $F62004 ( sb , length ) $F288 ( sb , padChar ) $F92 ( sb ) }
public void propertyChange ( PropertyChangeEvent evt ) { String propName = evt . getPropertyName ( ) ; if ( propName == MapBean . CursorProperty ) { fallbackMapBeanCursor = ( ( Cursor ) evt . getNewValue ( ) ) ; } else { if ( propName == MouseDelegator . ActiveModeProperty ) { MapMouseMode mmm = ( MapMouseMode ) evt . getNewValue ( ) ; setResetCursor ( mmm . getModeCursor ( ) ) ; } else if ( propName == MapBean . LayersProperty ) { resetForLayers ( ( $F62515 ) evt . getNewValue ( ) , ( $F62515 ) evt . getOldValue ( ) ) ; } else if ( propName != MapBean . ProjectionProperty ) $F932 setAllLabels ( fudgeString ) ; } initToolTip ( ) ; }
private void checkForNight ( final ZonedDateTime TIME ) { int hour = TIME . getHour ( ) ; int minute = TIME . getMinute ( ) ; if ( NUM00 <= hour && minute >= NUM00 && hour <= NUM00 && minute <= NUM00 || NUM00 <= hour && minute <= NUM00 && hour <= NUM00 && minute <= NUM00 ) { $F140642 ( isNightMode ) setNightMode ( _BOOL ) ; } else { $F15308 ( isNightMode ) setNightMode ( _BOOL ) ; } }
$F1 public int calculateOffsetY $F72 { return - ( int ) ( Math . sin ( this . angle ) * this . distance ) - this . shadowSize ; }
private $F1986 concatenateSamples ( final $F1986 x , final $F1986 y ) { final $F1986 z = new double $F12348 ( x , y ) ; $F7057 ( System , x , z ) $F11244 ( System , y , z , x ) return z ; }
$F1 public void drawSeries $F36949 ( canvas , paint , points , renderer , yAxisValue , seriesIndex , startIndex ) { $F14782 ( paint , renderer ) final float stroke = paint . getStrokeWidth ( ) ; if ( renderer . isFillPoints ( ) ) { $F5597 ( paint , Style ) } else { $F373222 ( paint , renderer ) $F41630 ( paint , Style ) } $F2199 ( length , points ) PointStyle ps = renderer . getPointStyle ( ) ; if ( ps == PointStyle . X ) { $F373222 ( paint , renderer ) $F373230 ( i , length , drawX , canvas , paint , points ) } else { if ( ps == PointStyle . CIRCLE ) { $F373230 ( i , length , drawCircle , canvas , paint , points ) } else { if ( ps == PointStyle . TRIANGLE ) { $F12457 ( path ) for ( $F6225 ( i , length ) ) { $F373240 ( drawTriangle , canvas , paint , path , points , i ) } } else { if ( ps == PointStyle . SQUARE ) { $F373230 ( i , length , drawSquare , canvas , paint , points ) } else { if ( ps == PointStyle . DIAMOND ) { $F12457 ( path ) for ( $F6225 ( i , length ) ) { $F373240 ( drawDiamond , canvas , paint , path , points , i ) } } else { if ( ps == PointStyle . POINT ) { for ( $F6225 ( i , length ) ) { canvas . drawPoint ( points . get ( i ) , points . get ( i + NUM00 ) , paint ) ; } } } } } } } paint . setStrokeWidth ( stroke ) ; }
public final void pushSubContextList ( SubContextList iter ) $F31742 ( m_axesIteratorStack , iter )
public String handleWord ( String aWord ) { $F1150 ( m , conditionPattern , aWord ) if ( m != null && m . matches ( ) ) { if ( type . equals ( AffixType . PREFIX ) ) $F4915 ( handlePrefix , aWord ) else if ( type . equals ( AffixType . SUFFIX ) ) $F4915 ( handleSuffix , aWord ) } $F1274 }
public static void round ( Calendar c , String unit ) { $F99426 ( uu , CALENDAR_UNITS , unit ) if ( null == uu ) $F18931 ( unit ) $F79839 ( u , uu ) switch ( u ) { case Calendar . YEAR : c . clear ( Calendar . MONTH ) ; case Calendar . MONTH : c . clear ( Calendar . DAY_OF_MONTH ) ; c . clear ( Calendar . DAY_OF_WEEK ) ; c . clear ( Calendar . DAY_OF_WEEK_IN_MONTH ) ; c . clear ( Calendar . DAY_OF_YEAR ) ; c . clear ( Calendar . WEEK_OF_MONTH ) ; c . clear ( Calendar . WEEK_OF_YEAR ) ; case Calendar . DATE : c . clear ( Calendar . HOUR_OF_DAY ) ; c . clear ( Calendar . HOUR ) ; c . clear ( Calendar . AM_PM ) ; case Calendar . HOUR_OF_DAY : c . clear ( Calendar . MINUTE ) ; case Calendar . MINUTE : c . clear ( Calendar . SECOND ) ; case Calendar . SECOND : $F36882 ( c , Calendar ) $F597 $F1267 throw new IllegalStateException ( NUM00 + u + NUM00 + unit ) ; } }
private static final $F1469 growBuffer $F21196 ( dest , index , size ) { $F18064 ( copy , size ) $F263472 ( index , System , dest , copy ) return copy ; }
public boolean sync $F72 { $F1933 ( ulog , _BOOL ) log . info ( msg ( ) + NUM00 + replicas + NUM00 + nUpdates ) ; if ( ! ( ulog . getState ( ) == UpdateLog . State . ACTIVE || ulog . getState ( ) == UpdateLog . State . REPLAYING ) ) { log . error ( msg ( ) + NUM00 + ulog ) ; } if ( debug ) { if ( startingVersions != null ) { log . debug ( msg ( ) + NUM00 + startingVersions . size ( ) + NUM00 + startingVersions ) ; } } for ( String replica : replicas ) { requestVersions ( replica ) ; } recentUpdates = ulog . getRecentUpdates ( ) ; try { ourUpdates = recentUpdates . getVersions ( nUpdates ) ; } $F3229 ( recentUpdates ) Collections . sort ( ourUpdates , absComparator ) ; if ( startingVersions != null ) { if $F10471 ( startingVersions ) $F95123 ( log , _BOOL ) Collections . sort ( startingVersions , absComparator ) ; ourLowThreshold = percentile ( startingVersions , NUM00 ) ; ourHighThreshold = percentile ( startingVersions , NUM00 ) ; long smallestNewUpdate = Math . abs ( $F7661 ( ourUpdates ) ) ; if ( Math . abs ( startingVersions . get ( NUM00 ) ) < smallestNewUpdate ) { log . warn ( msg ( ) + NUM00 ) ; return _BOOL ; } $F27145 $F10252 ( newList , ourUpdates ) ; for ( Long ver : startingVersions ) { if $F7637 ( Math , ver , smallestNewUpdate ) $F207 ( newList , ver ) } ourUpdates = newList ; } else { if $F3817 ( ourUpdates ) { ourLowThreshold = percentile ( ourUpdates , NUM00 ) ; ourHighThreshold = percentile ( ourUpdates , NUM00 ) ; } else { log . info ( msg ( ) + NUM00 ) ; return _BOOL ; } } $F28907 ( ourUpdateSet , ourUpdates ) ; $F28907 ( requestedUpdateSet , ourUpdates ) ; for ( $F589 ) { ShardResponse srsp = shardHandler . takeCompletedOrError ( ) ; $F12576 ( srsp ) boolean success = handleResponse ( srsp ) ; if ( ! success ) { log . info ( msg ( ) + NUM00 ) ; shardHandler . cancelAll ( ) ; return _BOOL ; } } log . info ( msg ( ) + NUM00 ) ; return _BOOL ; }
public static String stripFileProtocol ( String uriString ) { $F3110 ( uriString ) return uriString ; }
private void contentSpecTree ( int contentSpecIndex , XMLContentSpec contentSpec , ChildrenList children ) { getContentSpec ( contentSpecIndex , contentSpec ) ; if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL || ( contentSpec . type & NUM00 ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( children . length == children . qname . length ) { QName [ ] newQName = new QName $F10562 ( children ) ; System . arraycopy ( children . qname , NUM00 , newQName , NUM00 , children . length ) ; children . qname = newQName ; $F2027 newType = new int $F10562 ( children ) ; System . arraycopy ( children . type , NUM00 , newType , NUM00 , children . length ) ; children . type = newType ; } children . qname [ children . length ] = new QName ( null , $F99630 ( contentSpec ) , $F99630 ( contentSpec ) , ( String ) contentSpec . otherValue ) ; children . type [ children . length ] = contentSpec . type ; children . length ++ ; $F665 } final int leftNode = contentSpec . value != null ? ( ( $F2027 ) ( contentSpec . value ) ) [ NUM00 ] : - NUM00 ; int rightNode = - NUM00 ; if ( contentSpec . otherValue != null ) rightNode = ( ( $F2027 ) ( contentSpec . otherValue ) ) [ NUM00 ] ; else $F665 if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_CHOICE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_SEQ ) { contentSpecTree ( leftNode , contentSpec , children ) ; contentSpecTree ( rightNode , contentSpec , children ) ; $F665 } if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) $F55644 ( contentSpecTree , leftNode , contentSpec , children ) throw new RuntimeException ( NUM00 + contentSpec . type ) ; }
protected JTextField createEditorComponent $F72 { JTextField editor = new BorderlessTextField $F163565 ; $F55355 ( editor ) return editor ; }
private void addArg ( String key , Object value ) { $F155382 ( requestArguments ) $F5768 ( value , key ) $F72524 ( post , setWriteRequest , _BOOL ) requestArguments . put ( key , value ) ; }
public static $F1986 readFileColumn $F36827 ( filename , columnIdx , sizeLimit ) throws $F35763 { $F77510 ( path , Paths , filename ) if ( ! $F97092 ( Files , path ) ) $F268590 BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( filename ) , NUM00 ) ) ; return readTS ( br , columnIdx , sizeLimit ) ; }
private void startReader ( ConnectionTable connTable ) { Assert . assertTrue ( ! this . isRunning ) ; stopped = _BOOL ; this . isRunning = _BOOL ; connTable . executeCommand ( this ) ; }
public static boolean isCompactionRequiredForTable ( String metaFolderPath ) { String minorCompactionStatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . minorCompactionRequiredFile ; String majorCompactionStatusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . majorCompactionRequiredFile ; try { if ( FileFactory . isFileExist ( minorCompactionStatusFile , FileFactory . getFileType ( minorCompactionStatusFile ) ) || FileFactory . isFileExist ( majorCompactionStatusFile , FileFactory . getFileType ( majorCompactionStatusFile ) ) ) { return _BOOL ; } } catch ( IOException e ) $F50614 ( LOGGER , e ) return _BOOL ; }
BigInteger copy $F72 { prepareJavaRepresentation ( ) ; $F4120 ( copyDigits , numberLength ) $F135 ( System , digits , copyDigits , numberLength ) return new BigInteger ( sign , numberLength , copyDigits ) ; }
public void addExcludedClass ( String className ) $F207 ( mExcludedClasses , className )
public BundleMessageSource ( Locale locale ) { _messages = ResourceBundle . getBundle ( BASE_NAME , locale ) ; }
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
private void createEditPanel $F72 { $F26681 ( editPanel ) add ( editPanel , BorderLayout . CENTER ) ; CardLayout cardlayout = new CardLayout $F72 ; editPanel . setLayout ( cardlayout ) ; if ( colourRampMap != null ) { for ( ColourRampPanelInterface data : colourRampMap . keySet ( ) ) { data . setParent ( this ) ; String key = data . getTitle ( ) ; editPanel . add ( data . getPanel ( ) , key ) ; } } }
public static long atol ( String s ) { int i = NUM00 ; while ( i < s . length ( ) && $F1750 ( Character , s , i ) ) i ++ ; if $F61616 ( i , s ) { if ( $F6991 ( i , s ) && ( $F10825 ( s , i ) || $F10825 ( s , i ) ) ) return parseLong ( s . substring ( i + NUM00 ) , NUM00 ) ; else return parseLong ( s , NUM00 ) ; } else return parseLong ( s , NUM00 ) ; }
public Object eval ( Reader reader , ScriptEngine engine ) throws ScriptException { return engine . eval ( reader ) ; }
$F38750 ( input , encoding , toInputStream )
public void classForName ( SootMethod container , Stmt forNameInvokeStmt ) { $F2689 classNames = reflectionInfo . classForNameClassNames ( container ) ; if $F4251 ( classNames ) { registerGuard ( container , forNameInvokeStmt , NUM00 ) ; } else { for ( String clsName : classNames ) { constantForName ( clsName , container , forNameInvokeStmt ) ; } } }
private AbstractRenderer createRenderer ( JTabbedPane tabbedPane ) { return hasEmbeddedTabs ( ) ? AbstractRenderer . createEmbeddedRenderer ( tabbedPane ) : AbstractRenderer . createRenderer ( tabPane ) ; }
public void readMap ( InputStream inputStream , MapBuilder builder ) { try { parseMap ( inputStream , builder ) ; if ( builder . nodeRefsWithoutDefsAdded ( ) ) $F18143 ( LOG ) } catch ( SAXParseException e ) { throw new OsmRuntimeException ( NUM00 + NUM00 + e . getPublicId ( ) + NUM00 + e . getSystemId ( ) + NUM00 + e . getLineNumber ( ) + NUM00 + e . getColumnNumber ( ) + NUM00 , e ) ; } catch ( SAXException e ) { throw new OsmRuntimeException ( NUM00 , e ) ; } catch ( IOException e ) { throw new OsmRuntimeException ( NUM00 , e ) ; } finally { if ( inputStream != null ) { try $F881 ( inputStream ) catch ( IOException e ) $F55754 ( LOG , Level , e ) } } }
private void processComment $F72 { templateReader . nextCharacter ( ) ; if ( templateReader . startsWith ( syntax . getDocumentTypeOpening ( ) ) ) $F10990 ( processSchemaComment ) else $F51521 ( nestedComments , processNestedComment ) while ( templateReader . hasNextCharacter ( ) ) { final char commentCharacter = templateReader . nextCharacter ( ) ; if ( isCommentClosingMarker ( commentCharacter ) && templateReader . hasNextCharacter ( ) && templateReader . peekCharacter ( ) == syntax . getTagClosing ( ) ) { templateReader . nextCharacter ( ) ; $F597 } } }
private void emitPermutationsAppCache ( TreeLogger logger , LinkerContext context , ArtifactSet artifacts , String startScreenId , OfflineScreen offlineScreen ) throws UnableToCompleteException { for ( EmittedArtifact emitted : artifacts . find ( EmittedArtifact . class ) ) { if ( emitted . getVisibility ( ) == Visibility . Private ) $F1448 String pathName = emitted . getPartialPath ( ) ; if ( acceptCachedResource ( pathName ) ) { $F432422 ( allArtifacts , pathName , cachedArtifacts ) } } Set < ArtifactsGroup > keySet = artifactsByGroup . keySet ( ) ; for ( ArtifactsGroup group : keySet ) { $F48768 ( set , artifactsByGroup , group ) set . addAll ( cachedArtifacts ) ; artifacts . add ( createCacheManifest ( context , logger , set , group . getGroupId ( ) , startScreenId , offlineScreen ) ) ; artifacts . add ( createCacheManifestLoader ( context , logger , group . getGroupId ( ) , startScreenId ) ) ; } }
public final boolean isRegistered $F72 { return $F132005 ( canonicalName ) ; }
public License $F2236 ( filename , text ) { $F896 ( filename ) $F27731 ( filename ) this . filename = filename ; $F896 ( text ) $F27731 ( text ) this . text = text ; }
protected static void processExplorerProps ( File propsFile ) { try { $F2697 ( expProps ) BufferedInputStream $F20277 ( bi , propsFile ) ; expProps . load ( bi ) ; $F59 ( bi ) bi = null ; $F113927 keys = expProps . keySet ( ) ; $F91960 keysI = keys . iterator ( ) ; while $F2921 ( keysI ) { $F2778 ( key , keysI ) if $F2364 ( key ) { String existingVal = ExplorerDefaults . get ( key , NUM00 ) ; if $F4012 ( existingVal ) { String replacePolicy = expProps . getProperty ( key + NUM00 ) ; if $F22 ( replacePolicy ) { if $F21935 ( replacePolicy ) { $F7601 ( newVal , expProps , key ) ExplorerDefaults . set ( key , newVal ) ; } else { $F7601 ( newVal , expProps , key ) if $F283026 ( existingVal , newVal ) { newVal = existingVal + NUM00 + newVal ; ExplorerDefaults . set ( key , newVal ) ; } } } else { $F7601 ( newVal , expProps , key ) if $F283026 ( existingVal , newVal ) { newVal = existingVal + NUM00 + newVal ; ExplorerDefaults . set ( key , newVal ) ; } } } else { $F7601 ( newVal , expProps , key ) ExplorerDefaults . set ( key , newVal ) ; } } } } $F15720 }
long calculateMidEntry ( long loVal , long hiVal , final double dfp , long loEntry , long hiEntry ) { final double dhi = ( double ) hiEntry ; final double dlo = ( double ) loEntry ; final double dhiVal = ( double ) hiVal ; final double dloVal = ( double ) loVal ; long midEntry = loEntry + ( long ) ( ( dhi - dlo ) * ( dfp - dloVal ) / ( dhiVal - dloVal ) ) ; if ( midEntry == hiEntry ) { midEntry -- ; } return midEntry ; }
$F1431 protected int hashFields ( int hash , Map < FieldDescriptor , Object > map ) { for ( Map . Entry < FieldDescriptor , Object > entry : map . entrySet ( ) ) { FieldDescriptor field = entry . getKey ( ) ; $F21137 ( value , entry ) hash = ( NUM00 * hash ) + field . getNumber ( ) ; if ( field . getType ( ) != FieldDescriptor . Type . ENUM ) { hash = ( NUM00 * hash ) + value . hashCode ( ) ; } else if $F102310 ( field ) { List < ? extends EnumLite > list = ( List < ? extends EnumLite > ) value ; hash = ( NUM00 * hash ) + hashEnumList ( list ) ; } else { hash = ( NUM00 * hash ) + hashEnum ( ( EnumLite ) value ) ; } } return hash ; }
public DashboardServiceHelper $F72 { attributesRequireUpdate . add ( DASHBOARD_CLASS_NAME ) ; attributesRequireUpdate . add ( DASHBOARD_NAME ) ; attributesRequireUpdate . add ( DASHBOARD_DISPLAY_NAME ) ; attributesRequireUpdate . add ( DASHBOARD_ICON ) ; attributesRequireUpdate . add ( DASHBOARD_LOGIN ) ; attributesRequireUpdate . add ( ICF_IDENTIFIER ) ; attributes . addAll ( attributesRequireUpdate ) ; }
public static String javaUtilRegexEscape ( String s ) { if $F8908 ( s ) $F34654 ( s ) $F83 ( sb ) for ( $F1088 ( i , s ) ) { $F84 ( sb ) $F4137 ( sb , s , i ) } $F92 ( sb ) }
public void forgetFfmpegPath $F72 $F1717 ( settings , SETTINGS_FFMPEG_PATH , FFMPEG_PATH_UNSET )
$F1 public void printWarning ( final String message ) { printWarning ( message , preferenceStore . getBoolean ( UIPreferenceConstants . CONSOLE_SHOW_ON_NEW_WARNING ) ) ; }
public static String revertNewLines ( String string ) { int index ; $F280 ( newStringBuffer ) while $F48458 ( index , string ) { $F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } newStringBuffer . append ( string ) ; $F6947 ( string , newStringBuffer ) $F7398 ( newStringBuffer ) while $F48458 ( index , string ) { $F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } newStringBuffer . append ( string ) ; $F92 ( newStringBuffer ) }
public void pathValuesToPixel ( $F77502 paths ) $F155016 ( i , paths , pathValueToPixel )
$F1 public void onInsertComplete ( int taskId , Object cookie , long insertRowId ) { if ( taskId == AppConstants . QueryTokens . INSERT_WALLPOST && insertRowId != - NUM00 ) { $F26334 ( Logger , TAG , insertRowId ) } }
protected void parseList ( $F5 list , String text ) { $F725 ( list ) $F17727 ( st , text ) while $F1444 ( st ) { $F14952 ( line , st ) $F28871 ( list , line ) } }
protected $F27878 splitAssignments ( Node node ) { if ( node instanceof AssignmentNode ) { $F245843 ( result ) AssignmentNode a = ( AssignmentNode ) node ; result . add ( a . getTarget ( ) ) ; result . addAll ( splitAssignments ( a . getExpression ( ) ) ) ; return result ; } else { return Collections . singletonList ( node ) ; } }
public Tree $F4 extractBestMaxRuleParse ( int start , int end , $F3803 sentence ) { return extractBestMaxRuleParse1 ( start , end , NUM00 , sentence ) ; }
public static double normalize $F7635 ( val , min , max ) { if ( max < min ) $F824 return $F25154 ( val , min , max ) ; }
private static boolean containsOnlyTransientAndStaticFields ( $F221457 fields ) { boolean containsNormalField = _BOOL ; for ( Field field : fields ) { if ( ! Modifier . isTransient ( field . getModifiers ( ) ) && ! $F48022 ( Modifier , field ) ) { containsNormalField = _BOOL ; } } return ! containsNormalField ; }
$F1 public void appendIndexMapTo ( Appendable out , String name , List < SourceMapSection > sections ) throws IOException { $F84 ( out ) appendFirstField ( out , NUM00 , NUM00 ) ; appendField ( out , NUM00 , escapeString ( name ) ) ; appendFieldStart ( out , NUM00 ) ; $F84 ( out ) boolean first = _BOOL ; for ( SourceMapSection section : sections ) { $F87 ( first , _BOOL , out ) $F84 ( out ) appendFirstField ( out , NUM00 , offsetValue ( section . getLine ( ) , section . getColumn ( ) ) ) ; if ( section . getSectionType ( ) == SourceMapSection . SectionType . URL ) { appendField ( out , NUM00 , escapeString ( section . getSectionValue ( ) ) ) ; } else if ( section . getSectionType ( ) == SourceMapSection . SectionType . MAP ) { appendField ( out , NUM00 , section . getSectionValue ( ) ) ; } else $F14525 $F84 ( out ) } $F84 ( out ) appendFieldEnd ( out ) ; $F84 ( out ) }
public Builder addPart ( Part part ) { $F1149 ( part ) parts . add ( part ) ; return this ; }
protected void notifyGone ( L locator ) { synchronized ( this ) { if ( ! staleLocators . add ( locator . getPartitionId ( ) ) ) $F1328 ( fail , locator ) } }
$F1 public void addVetoableChangeListener ( String name , VetoableChangeListener vcl ) { m_bcSupport . addVetoableChangeListener ( name , vcl ) ; }
public String buildUser $F72 $F16566 ( properties )
private void updateIdleExpireTime ( long now ) { _threadIdleExpireTime . set ( now + _idleTimeout ) ; }
protected CtClass createCtClass ( String classname , boolean useCache ) { if $F4432 ( classname ) classname = Descriptor . toClassName ( classname ) ; if $F8991 ( classname ) { $F172220 ( base , classname ) if ( ( ! useCache || getCached ( base ) == null ) && find ( base ) == null ) $F1274 else return new CtArray ( classname , this ) ; } else if ( find ( classname ) == null ) $F1274 else return new CtClassType ( classname , this ) ; }
$F1230 public long createVoucherFromBill ( final int billId ) throws ApplicationRuntimeException { try { String voucherStatus = null ; final List vStatusList = appConfigValuesService . getConfigValuesByModuleAndKey ( NUM00 , NUM00 ) ; if ( $F1030 ( vStatusList ) && $F10470 ( vStatusList ) ) { final AppConfigValues appVal = ( AppConfigValues ) vStatusList . get ( NUM00 ) ; $F37891 ( voucherStatus , appVal ) } else throw new ApplicationRuntimeException ( NUM00 + MISSINGMSG ) ; final long vh = createVoucher . createVoucherFromBill ( billId , voucherStatus , null , null ) ; return vh ; } catch ( final Exception e ) { $F16391 ( LOGGER , e ) throw new ApplicationRuntimeException $F1783 ( e ) ; } }
public static float compareEquivalance ( Bitmap bitmap1 , Bitmap bitmap2 ) { if ( bitmap1 == null || bitmap2 == null || bitmap1 . getWidth ( ) != bitmap2 . getWidth ( ) || bitmap1 . getHeight ( ) != bitmap2 . getHeight ( ) ) $F1083 ByteBuffer buffer1 = ByteBuffer . allocate ( bitmap1 . getHeight ( ) * bitmap1 . getRowBytes ( ) ) ; bitmap1 . copyPixelsToBuffer ( buffer1 ) ; ByteBuffer buffer2 = ByteBuffer . allocate ( bitmap2 . getHeight ( ) * bitmap2 . getRowBytes ( ) ) ; bitmap2 . copyPixelsToBuffer ( buffer2 ) ; $F152855 ( array1 , buffer1 ) $F152855 ( array2 , buffer2 ) int len = array1 . length ; int count = NUM00 ; for ( $F119 ( i , len ) ) { if ( array1 [ i ] == array2 [ i ] ) { count ++ ; } } return ( ( float ) ( count ) ) / len ; }
public void handleTblCharsetAliasHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) G11NCharsetAliasEditViewBean vb = ( G11NCharsetAliasEditViewBean ) getViewBean ( G11NCharsetAliasEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . populateValues ( ( String ) getDisplayFieldValue ( NUM00 ) ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
public BooleanGlassGeneIm ( BooleanGlassGenePm genePm , Parameters parameters ) { try { this . genePm = genePm ; this . glassFunction = new BooleanGlassFunction ( genePm . getLagGraph ( ) ) ; this . initializer = new BasalInitializer ( glassFunction , NUM00 , NUM00 ) ; this . history = new GeneHistory ( initializer , glassFunction ) ; this . simulator = new MeasurementSimulatorParams ( parameters ) ; } $F1516 ( e ) }
protected List < ITEM_TYPE > selectFoldTrainItems ( List < ITEM_TYPE > items , int nFolds , int fold ) { List < ITEM_TYPE > trainItems = new ArrayList < ITEM_TYPE > $F72 ; for ( $F3836 ( i , items ) ) { if ( i % nFolds != fold ) $F62006 ( trainItems , items , i ) } return trainItems ; }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
protected void rehash ( int newCapacity ) { int oldCapacity = _set . length ; K oldKeys [ ] = ( $F26136 ) _set ; short oldVals [ ] = _values ; $F21451 ( _set , newCapacity ) Arrays . fill ( _set , FREE ) ; $F69027 ( _values , newCapacity ) for ( $F26144 ( i , oldCapacity ) ) { if ( oldKeys [ i ] != FREE && oldKeys [ i ] != REMOVED ) { K o = oldKeys [ i ] ; int index = insertionIndex ( o ) ; if ( index < NUM00 ) { throwObjectContractViolation ( _set [ ( - index - NUM00 ) ] , o ) ; } _set [ index ] = o ; _values [ index ] = oldVals [ i ] ; } } }
protected void addAttributes ( Element element , Attributes attributes ) { boolean noNamespaceAttributes = _BOOL ; if ( element instanceof AbstractElement ) { AbstractElement baseElement = ( AbstractElement ) element ; baseElement . setAttributes ( attributes , namespaceStack , noNamespaceAttributes ) ; } else { $F19322 ( size , attributes ) for ( $F119 ( i , size ) ) { String attributeQName = attributes . getQName ( i ) ; if ( noNamespaceAttributes || $F14942 ( attributeQName ) ) { String attributeURI = attributes . getURI ( i ) ; String attributeLocalName = attributes . getLocalName ( i ) ; $F62203 ( attributeValue , attributes , i ) QName qName = namespaceStack . getAttributeQName ( attributeURI , attributeLocalName , attributeQName ) ; element . addAttribute ( qName , attributeValue ) ; } } } }
public static $F4203 boolean remove ( $F9884 collection , T element ) { $F1933 ( element , _BOOL ) $F46019 ( CollectionUtils , collection , _BOOL ) $F13237 ( collection , element ) }
private static void persistUpdatedVpoolList ( List $F161827 updatedVpoolList , DbClient dbClient ) { if $F5973 ( updatedVpoolList ) { dbClient . updateAndReindexObject ( updatedVpoolList ) ; } }
void composeTemplates ( ElemTemplateElement templ ) throws TransformerException { templ . compose ( this ) ; for ( ElemTemplateElement child = templ . getFirstChildElem ( ) ; child != null ; child = child . getNextSiblingElem ( ) ) { composeTemplates ( child ) ; } templ . endCompose ( this ) ; }
public static boolean classExists ( String className ) { try { return Class . forName ( className ) != null ; } $F17063 ( _BOOL ) }
public static void createTopLevelClassesXML $F22381 ( outputDir , templatesPath , lenient ) throws CompilerException { try { AsDocHelper asDocHelp = new AsDocHelper ( outputDir + NUM00 , outputDir + NUM00 , outputDir , outputDir + NUM00 + File . separator + NUM00 ) ; asDocHelp . createTopLevelClasses ( lenient ) ; } catch ( Throwable t ) { $F301 ( t ) CompilerMessage c = new CouldNotCreate ( $F10629 ( t ) ) ; ThreadLocalToolkit . log ( c ) ; throw c ; } }
void drawShape ( Graphics g , CSS . Value type , int ax , int ay , int aw , int ah , float align ) { int gap = isLeftToRight ? - ( bulletgap + NUM00 ) : ( aw + bulletgap ) ; int x = ax + gap ; int y = Math . max ( ay , ay + $F2354 ( align , ah ) - NUM00 ) ; if ( type == CSS . Value . SQUARE ) { g . drawRect ( x , y , NUM00 , NUM00 ) ; } else if ( type == CSS . Value . CIRCLE ) { g . drawOval ( x , y , NUM00 , NUM00 ) ; } else { g . fillOval ( x , y , NUM00 , NUM00 ) ; } }
public static void restore ( final Context context ) { $F111887 ( prefs , PreferenceManager , context ) if ( LongTermOrbits . isSupported ( ) && prefs . getBoolean ( KEY_LOCATION_TOGGLE , _BOOL ) ) { saveDownloadDataWifiOnlyPref ( context ) ; AlarmManager am = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; Intent intent = new Intent ( context , LtoService . class ) ; PendingIntent pi = PendingIntent . getService ( context , NUM00 , intent , PendingIntent . FLAG_UPDATE_CURRENT | PendingIntent . FLAG_ONE_SHOT ) ; long nextLtoDownload = System . currentTimeMillis ( ) + ( $F264 ) ; am . set ( AlarmManager . RTC , nextLtoDownload , pi ) ; } }
private void generateFile ( int wordCnt ) throws Exception { Random rnd = new Random $F30 ( System ) ; try ( OutputStreamWriter writer = new OutputStreamWriter $F228925 ( igfs , FILE , _BOOL ) ) { int cnt = NUM00 ; while ( cnt < wordCnt ) { String word = $F342958 ( DICTIONARY , rnd ) ; $F5299 ( writer , word ) cnt ++ ; } } }
public void polygon $F6762 ( x , y ) { int n = x . length ; $F13609 ( path ) path . moveTo ( ( float ) scaleX ( x [ NUM00 ] ) , ( float ) scaleY ( y [ NUM00 ] ) ) ; for ( $F119 ( i , n ) ) path . lineTo ( ( float ) scaleX ( x [ i ] ) , ( float ) scaleY ( y [ i ] ) ) ; $F2272 ( path ) offscreen . draw ( path ) ; draw ( ) ; }
public void forceRewriteExif ( String filename , $F198017 tags ) throws $F27136 { if ( ! rewriteExif ( filename , tags ) ) { ExifData tempData = mData ; mData = new ExifData ( DEFAULT_BYTE_ORDER ) ; FileInputStream is = null ; ByteArrayOutputStream bytes = null ; try { $F5335 ( is , filename ) $F1659 ( bytes ) doExifStreamIO ( is , bytes ) ; $F1208 ( imageBytes , bytes ) readExif ( imageBytes ) ; setTags ( tags ) ; writeExif ( imageBytes , filename ) ; } $F27615 ( closeSilently , is , e ) finally { $F59 ( is ) mData = tempData ; } } }
public void append ( int key , E value ) { $F49491 ( mSize , key , mKeys , put , value ) $F143594 ( mGarbage , mSize , mKeys , gc ) int pos = mSize ; if ( pos >= mKeys . length ) { $F49493 ( n , ContainerHelpers , pos ) $F4120 ( nkeys , n ) $F133 ( nvalues , n ) $F7057 ( System , mKeys , nkeys ) $F7057 ( System , mValues , nvalues ) mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + NUM00 ; }
public void testNegateNegative $F72 { String a = NUM00 ; int aScale = NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( cNumber , c , cScale ) assertEquals ( NUM00 , cNumber , aNumber . negate ( ) ) ; }
public List < SearchResult > searchByObjectName ( String name ) { List < SearchResult > $F204 ( all ) ; for ( Layer layer : layers ) { if ( isLayerVisible ( layer ) ) { all . addAll ( layer . searchByObjectName ( name ) ) ; } } Log . d ( TAG , $F26062 ( all , name ) ) ; return all ; }
private void clearMessages $F72 $F9096 ( messages )
public Searcher $F72 throws IOException { searcher = new IndexSearcher ( DirectoryReader . open ( FSDirectory . open ( Paths . get ( INDEX_DIR ) ) ) ) ; parser = new QueryParser ( CONTENT_FIELD , new StandardAnalyzer $F72 ) ; }
public void clearTextEdits $F72 $F9096 ( fEdits )
public static void main $F4374 ( args ) { Frame frame = new PacketTool $F72 ; $F30070 ( frame ) $F267779 ( frame ) frame . setVisible ( _BOOL ) ; }
private void createToolBar $F72 { toolBar = new JToolBar $F580 ; if ( listener . runningAsJConsolePlugin || listener . runningAsVisualVMPlugin ) { toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; toolBar . setFloatable ( _BOOL ) ; } else { toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; closeToolBarButton = createToolBarButton ( NUM00 , NUM00 ) ; closeToolBarButton . setEnabled ( _BOOL ) ; toolBar . add ( closeToolBarButton ) ; } $F55657 ( toolBar ) toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; $F55657 ( toolBar ) expandButton = createToolBarButton ( NUM00 , NUM00 ) ; expandButton . setEnabled ( _BOOL ) ; toolBar . add ( expandButton ) ; collapseButton = createToolBarButton ( NUM00 , NUM00 ) ; collapseButton . setEnabled ( _BOOL ) ; toolBar . add ( collapseButton ) ; $F55657 ( toolBar ) findLRThreadsButton = createToolBarButton ( NUM00 , NUM00 ) ; findLRThreadsButton . setEnabled ( _BOOL ) ; toolBar . add ( findLRThreadsButton ) ; toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; toolBar . add ( createToolBarButton ( NUM00 , NUM00 ) ) ; $F55657 ( toolBar ) }
public static Map attrSetToMap ( AttrSet attrSet , boolean fetchByteValues ) { Map attributesMap = new AMHashMap ( fetchByteValues ) ; $F1933 ( attrSet , attributesMap ) $F2199 ( attrSetSize , attrSet ) if ( ! fetchByteValues ) { for ( $F119 ( i , attrSetSize ) ) { Attr attr = attrSet . elementAt ( i ) ; String values [ ] = attr . getStringValues ( ) ; attributesMap . put ( attr . getName ( ) , stringArrayToSet ( values ) ) ; } } else { for ( $F119 ( i , attrSetSize ) ) { Attr attr = attrSet . elementAt ( i ) ; attributesMap . put ( attr . getName ( ) , attr . getByteValues ( ) ) ; } } return attributesMap ; }
public final $F13710 schemesIterator $F72 $F64709 ( mDataSchemes )
$F1 public void close $F72 throws IOException { try $F881 ( out ) $F105993 ( lockFile ) }
public static void reinitRecompiler $F72 { _rewriter . set ( new ProgramRewriter ( _BOOL , _BOOL ) ) ; }
default Value remove ( Optional < ? extends CharSequence > name ) { return name . isPresent ( ) ? $F47063 ( remove , name ) : null ; }
private String nextToInternal ( String excluded ) { int start = pos ; for ( $F93943 ( pos , in ) ) { $F1280 ( c , in , pos ) if ( c == NUM00 || c == NUM00 || $F36740 ( excluded , c ) ) $F102712 ( in , start , pos ) } $F32744 ( in , start ) }
AcceptTcp ( PortTcp port , ServerSocketBar serverSocket ) { Objects . requireNonNull ( port ) ; Objects . requireNonNull ( serverSocket ) ; _port = port ; _serverSocket = serverSocket ; }
private static void updateGrabbedCursor ( Cursor cur ) { XBaseWindow target = XAwtState . getGrabWindow ( ) ; if ( target instanceof XWindowPeer ) { XWindowPeer grabber = ( XWindowPeer ) target ; grabber . pSetCursor ( cur ) ; } }
protected void parseURI ( String uriString ) throws URISyntaxException { String s = uriString ; $F12747 ( index , s , FRAGMENT_SEPARATOR ) if ( index != - NUM00 ) { setFragment ( s . substring ( index + NUM00 ) , _BOOL ) ; $F45799 ( s , index ) } index = s . indexOf ( SCHEME_SEPARATOR ) ; if ( index != - NUM00 ) { $F11991 ( scheme , s , index ) if ( isValidScheme ( scheme ) ) { setScheme ( scheme ) ; $F6943 ( s , index ) } } parseSchemeSpecificPart ( s , _BOOL ) ; }
$F1 public boolean equals ( Object obj ) { if ( ( obj instanceof KeepAliveKey ) == _BOOL ) return _BOOL ; KeepAliveKey kae = ( KeepAliveKey ) obj ; return $F12737 ( host , kae ) && ( port == kae . port ) && $F12737 ( protocol , kae ) && this . obj == kae . obj ; }
protected static void appendLongStringType ( StringBuilder sb ) $F86 ( sb )
public void testConnectHeadset $F72 { int iterations = BluetoothTestRunner . sConnectHeadsetIterations ; $F32905 ( iterations ) BluetoothAdapter adapter = BluetoothAdapter . getDefaultAdapter ( ) ; BluetoothDevice device = adapter . getRemoteDevice ( BluetoothTestRunner . sDeviceAddress ) ; mTestUtils . disable ( adapter ) ; mTestUtils . enable ( adapter ) ; mTestUtils . unpair ( adapter , device ) ; mTestUtils . pair ( adapter , device , BluetoothTestRunner . sDevicePairPasskey , BluetoothTestRunner . sDevicePairPin ) ; mTestUtils . disconnectProfile ( adapter , device , BluetoothProfile . HEADSET , null ) ; for ( $F119 ( i , iterations ) ) { mTestUtils . writeOutput ( $F37978 ( i ) + iterations ) ; mTestUtils . connectProfile ( adapter , device , BluetoothProfile . HEADSET , String . format ( NUM00 , device ) ) ; mTestUtils . disconnectProfile ( adapter , device , BluetoothProfile . HEADSET , String . format ( NUM00 , device ) ) ; } mTestUtils . unpair ( adapter , device ) ; mTestUtils . disable ( adapter ) ; }
public static boolean isNA $F28786 ( NAstrings , w ) { $F397 ( NAstrings , _BOOL ) for ( String na : NAstrings ) { $F9506 ( w , na , _BOOL ) } return _BOOL ; }
private $F1986 evaluateProbability $F9830 ( data ) { $F1986 prob = new double [ m_NumClasses ] , v = new double [ m_NumClasses ] ; for ( $F4864 ( j , m_NumClasses ) ) { for ( $F9993 ( k , m_NumPredictors ) ) { v [ j ] += m_Par [ k ] [ j ] * data [ k ] ; } } v [ m_NumClasses - NUM00 ] = NUM00 ; for ( $F119 ( m , m_NumClasses ) ) { double sum = NUM00 ; for ( $F4864 ( n , m_NumClasses ) ) { sum += Math . exp ( v [ n ] - v [ m ] ) ; } prob [ m ] = NUM00 / ( sum + Math . exp ( - v [ m ] ) ) ; } return prob ; }
public static final HashMap readMapXml ( InputStream in ) throws $F18821 { $F58707 ( parser , Xml ) $F58708 ( parser , in ) return ( HashMap ) $F176917 ( readValueXml , parser ) ; }
protected void modifyOMGraphicForEditRender $F72 $F845
int nextNode ( String sStr , int i ) { int nBraces = NUM00 ; $F1280 ( c , sStr , i ) do { i ++ ; if $F7007 ( i , sStr ) { c = sStr . charAt ( i ) ; if ( c == NUM00 ) { while ( i < sStr . length ( ) && sStr . charAt ( i ) != NUM00 ) { i ++ ; } i ++ ; if $F7007 ( i , sStr ) $F7458 ( c , sStr , i ) } switch ( c ) { $F188943 ( nBraces ) $F1262 nBraces -- ; $F597 $F2448 } } } while ( i < sStr . length ( ) && ( nBraces > NUM00 || ( c != NUM00 && c != NUM00 && c != NUM00 ) ) ) ; if ( i >= sStr . length ( ) || nBraces < NUM00 ) $F7629 else if $F11983 ( sStr , i ) { i ++ ; if $F11983 ( sStr , i ) { while ( i < sStr . length ( ) && sStr . charAt ( i ) != NUM00 ) { i ++ ; } i ++ ; if $F11984 ( i , sStr ) $F7629 } if $F11983 ( sStr , i ) { i ++ ; c = sStr . charAt ( i ) ; while ( i < sStr . length ( ) && ( c == NUM00 || Character . isDigit ( c ) ) ) { i ++ ; if $F7007 ( i , sStr ) $F7458 ( c , sStr , i ) } } } return i ; }
public boolean selectNode ( D nodeData , SignalEvent event ) { if $F2979 ( selectedNodes ) { insertAndSelectNode ( nodeData , NUM00 , _BOOL ) ; return _BOOL ; } if ( ! hasSameParent ( selectedNodes . get ( NUM00 ) , nodeData ) ) { if ( ! this . multilevelSelection || event . getShiftKey ( ) ) $F4915 ( selectSingleNode , nodeData ) } if ( event == null || event . getCommandKey ( ) ) $F9278 ( ctrlSelect , nodeData , _BOOL ) else { if ( event . getShiftKey ( ) ) $F4915 ( shiftSelect , nodeData ) } return selectSingleNode ( nodeData ) ; }
$F1 public $F2027 sequenceLengths $F161613 ( start , end ) throws IOException { final int entrySize = mIndex . getVersion ( ) >= IndexFile . PER_SEQUENCE_CHECKSUM_VERSION ? ( mIndex . hasQuality ( ) ? NUM00 : NUM00 ) : NUM00 ; final long internalStart = start + mStart ; final long internalEnd = end + mStart ; final $F2027 ret = new int [ $F15690 ( internalEnd , internalStart ) ] ; if $F9634 ( ret ) { return ret ; } if ( mIndex . getMaxLength ( ) == mIndex . getMinLength ( ) ) { Arrays . fill ( ret , ( int ) mIndex . getMaxLength ( ) ) ; return ret ; } final $F96 buffer = new byte [ entrySize * NUM00 ] ; final DataFileIndex dataIndex = mSequenceManager . sequenceIndex ( ) ; final $F2469 numSequences = new long [ dataIndex . numberEntries ( ) ] ; int startFileNo = - NUM00 ; int endFileNo = - NUM00 ; for ( $F1139 ( i , numSequences ) ) { if ( i > NUM00 ) { numSequences [ i ] = numSequences [ i - NUM00 ] + dataIndex . numberSequences ( i ) ; } else { numSequences [ NUM00 ] = dataIndex . numberSequences ( NUM00 ) ; } if ( internalStart < numSequences [ i ] ) { if ( startFileNo == - NUM00 ) { startFileNo = i ; } if ( internalEnd < numSequences [ i ] ) $F3468 ( endFileNo , i ) } } final long startLower = startFileNo == NUM00 ? NUM00 : numSequences [ startFileNo - NUM00 ] ; final long endLower = endFileNo < NUM00 ? NUM00 : numSequences [ endFileNo - NUM00 ] ; int seqNo = NUM00 ; for ( int i = startFileNo ; ( endFileNo == - NUM00 || i <= endFileNo ) && i < numSequences . length ; i ++ ) { try ( RandomAccessFile raf = new RandomAccessFile ( SdfFileUtils . sequencePointerFile ( mDirectory , i ) , NUM00 ) ) { final long pos ; if ( i == startFileNo ) { pos = ( internalStart - startLower ) * entrySize ; raf . seek ( pos ) ; } else { pos = NUM00 ; } final long endPos = endFileNo == i ? ( internalEnd - endLower ) * entrySize : raf . length ( ) ; seqNo = sequenceLengthsHelper ( raf , buffer , ret , seqNo , pos , endPos , entrySize ) ; if ( endFileNo != i && seqNo > NUM00 ) { final long fileLength = dataIndex . dataSize ( i ) ; ret [ seqNo - NUM00 ] = ret [ seqNo - NUM00 ] - ( int ) fileLength ; } else { if ( seqNo != ret . length ) { throw new CorruptSdfException ( NUM00 + ret . length + NUM00 + seqNo ) ; } $F61262 ( raf ) ret [ seqNo - NUM00 ] -= raf . readInt ( ) ; } } } $F8528 ( ret ) = NUM00 - $F8528 ( ret ) ; return ret ; }
public Observable < DriveId > createFile ( DriveFolder folder , File file , String title ) { return createFile ( folder , file , title , MimeTypeMap . getFileExtensionFromUrl ( file . getPath ( ) ) ) ; }
public static String extractCollectionFromPath ( String path ) { String extractedCollectionName = null ; String pathModified = removeFromEndOfString ( path , SLASH ) ; $F6542 ( pathSegments , pathModified ) if $F3305 ( pathSegments ) { $F79270 ( extractedCollectionName , pathSegments ) ; } return extractedCollectionName ; }
$F22713 ( newVector , Collections , super )
public boolean isPrivate $F72 { return $F80000 ( Modifier , _field ) ; }
public static final long longEncode ( final String hash ) { $F22867 ( level , hash ) long b ; long l = NUM00 ; for ( $F2998 ( c , hash ) ) { b = ( long ) ( BASE_32_ <missing ';'> NUM00 . indexOf ( c ) ) ; l |= ( b < < ( level -- * NUM00 ) ) ; } return ( l < < NUM00 ) | hash . length ( ) ; }
$F1 public void onSuccess ( T result ) { try { $F7028 ( LOGGER , result ) queue . put ( result ) ; } $F45916 ( LOGGER , e ) }
public void handleTblProviderResourceIdMapperButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SMDiscoveryProviderResourceIdMapperAddViewBean vb = ( SMDiscoveryProviderResourceIdMapperAddViewBean ) getViewBean ( SMDiscoveryProviderResourceIdMapperAddViewBean . class ) ; removePageSessionAttribute ( SMDiscoveryProviderResourceIdMapperAddViewBean . PROPERTY_ATTRIBUTE ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
public COpenOriginalFunction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { super ( $F21900 ( String , function ) ) ; m_parent = parent ; m_container = container ; m_function = function ; }
public int read $F21196 ( buffer , offset , length ) throws IOException { $F2175 ( bytes , length ) $F65003 ( count , _file , bytes , length ) for ( $F119 ( i , count ) ) { buffer [ offset + i ] = ( char ) bytes [ i ] ; } return count ; }
public boolean equals ( Object o ) { if ( ! ( o instanceof Vector2f ) ) { return _BOOL ; } $F3627 ( this , o , _BOOL ) Vector2f comp = ( Vector2f ) o ; $F315406 ( Float , x , comp , _BOOL ) $F315406 ( Float , y , comp , _BOOL ) return _BOOL ; }
$F1 protected EClass findInstantiableCompatible ( EClass eType ) { if ( ! isInstantiatableSubType ( eType , eType ) ) { throw new IllegalStateException $F45942 ( String , eType ) ; } return eType ; }
private int measureWidth ( int measureSpec ) { int result = NUM00 ; $F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT ; $F23140 ( specMode , MeasureSpec , result , Math , specSize ) } return result ; }
public void restoreTopology ( Iterable < TcpDiscoveryNode > nodes , long topVer ) { assert ! F . isEmpty ( nodes ) ; assert topVer > NUM00 ; rwLock . writeLock ( ) . lock ( ) ; try { locNode . internalOrder ( topVer ) ; clear ( ) ; boolean firstAdd = _BOOL ; for ( TcpDiscoveryNode node : nodes ) { if ( nodesMap . containsKey ( node . id ( ) ) ) $F598 nodesMap . put ( node . id ( ) , node ) ; if ( firstAdd ) { this . nodes = new $F2611 ( this . nodes ) ; firstAdd = _BOOL ; } node . lastUpdateTime ( U . currentTimeMillis ( ) ) ; this . nodes . add ( node ) ; } nodeOrder = topVer ; initializeMinimumVersion ( ) ; } finally { rwLock . writeLock ( ) . unlock ( ) ; } }
final protected void startOp ( final IStartOpMessage msg ) { if ( ! controller ) throw new UnsupportedOperationException ( ERR_NOT_CONTROLLER ) ; $F10057 ( msg ) if ( ! queryId . equals ( msg . getQueryId ( ) ) ) $F10056 $F790 ( lock ) try { if $F8415 ( log ) log . trace ( msg . toString ( ) ) ; if $F38577 ( future ) $F11388 runState . startOp ( msg ) ; } catch ( TimeoutException ex ) { halt ( ex ) ; } $F796 ( lock ) }
public Flux < IN > drain $F72 $F21170 ( Flux )
int traverseConsistencyCheck ( TextEditProcessor processor , Document document , List < List < TextEdit > > sourceEdits ) { int result = NUM00 ; if ( fChildren != null ) { for ( $F5373 ( i , fChildren ) ) { TextEdit child = ( TextEdit ) fChildren . get ( i ) ; result = Math . max ( result , child . traverseConsistencyCheck ( processor , document , sourceEdits ) ) ; } } if ( processor . considerEdit ( this ) ) { performConsistencyCheck ( processor , document ) ; } return result ; }
public Minute ( Date time , TimeZone zone ) $F118649 ( this , time , zone , Locale )
private Plan buildPlan1 $F72 { Plan plan = PopulationUtils . createPlan ( ) ; Activity a = PopulationUtils . createActivityFromCoord ( NUM00 , CoordUtils . createCoord ( NUM00 , NUM00 ) ) ; a . setEndTime ( Time . parseTime ( NUM00 ) ) ; plan . addActivity ( a ) ; plan . addLeg ( PopulationUtils . createLeg ( NUM00 ) ) ; double travelTime = Time . parseTime ( NUM00 ) ; double distance = Math . round ( ( travelTime * ChainChopper . AVERAGE_SPEED ) / ChainChopper . CROWFLY_FACTOR ) ; Activity b = PopulationUtils . createActivityFromCoord ( NUM00 , CoordUtils . createCoord ( distance , NUM00 ) ) ; plan . addActivity ( b ) ; return plan ; }
protected void encodeAtom ( OutputStream outStream , $F97523 , int offset , int len ) throws IOException { byte a , b = NUM00 , c = NUM00 ; int c1 , c2 , c3 , c4 ; a = data [ offset ] ; if ( len > NUM00 ) { b = data [ offset + NUM00 ] ; } if ( len > NUM00 ) { c = data [ offset + NUM00 ] ; } c1 = $F56812 ( a ) ; c2 = $F11885 ( a ) | $F97528 ( b ) ; c3 = $F11885 ( b ) | $F97528 ( c ) ; c4 = c & NUM00 ; $F5299 ( outStream , c1 ) $F5299 ( outStream , c2 ) $F5299 ( outStream , c3 ) $F5299 ( outStream , c4 ) $F665 }
public void test_unwrap_ByteBuffer_ByteBuffer_05 $F72 { String host = NUM00 ; int port = NUM00 ; $F30909 ( bbs , ByteBuffer ) $F30909 ( bbd , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { SSLEngineResult res = sse . unwrap ( bbs , bbd ) ; $F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } $F17395 ( fail , e ) }
private int adjustAlpha ( int color , float factor ) { int alpha = Math . round ( Color . alpha ( color ) * factor ) ; $F59912 ( red , Color , color ) $F59912 ( green , Color , color ) $F59912 ( blue , Color , color ) return Color . argb ( alpha , red , green , blue ) ; }
private void initializeRatioSlider $F72 { ratioSlider . setMajorTickSpacing ( NUM00 ) ; ratioSlider . setMinorTickSpacing ( NUM00 ) ; ratioSlider . setPaintTicks ( _BOOL ) ; Hashtable < Integer , JLabel > labelTable = new Hashtable < Integer , JLabel > $F72 ; labelTable . put ( $F13791 , $F34046 ) ; labelTable . put ( $F13791 , $F34046 ) ; labelTable . put ( $F13791 , $F34046 ) ; labelTable . put ( $F13791 , $F34046 ) ; labelTable . put ( $F13791 , $F34046 ) ; ratioSlider . setLabelTable ( labelTable ) ; ratioSlider . setPaintLabels ( _BOOL ) ; }
private static void initializeSettings ( Settings . Builder output , Settings input , boolean loadDefaults ) { output . put ( input ) ; if ( useSystemProperties ( input ) ) { if ( loadDefaults ) { for ( String prefix : PROPERTY_DEFAULTS_PREFIXES ) { output . putProperties ( prefix , System . getProperties ( ) ) ; } } for ( String prefix : PROPERTY_PREFIXES ) { output . putProperties ( prefix , System . getProperties ( ) , PROPERTY_DEFAULTS_PREFIXES ) ; } } output . replacePropertyPlaceholders ( ) ; }
$F1 public void drawOval $F2026 ( x , y , width , height ) { setStateToLocal ( ) ; m_printstream . println ( $F206172 ( xTransform , xScale , x , yTransform , yScale , y ) + xScale ( width ) + NUM00 + yScale ( height ) + NUM00 ) ; }
public String toString ( int indentFactor ) throws JSONException $F41330 ( toString , indentFactor )
private void validateSQLFields $F72 { boolean flag = controller . isEnableSQLDatabaseOutput ( ) ; enableSQLDatabaseConnection . setSelected ( flag ) ; sqlHostLabel . setEnabled ( flag ) ; sqlHostField . setEnabled ( flag ) ; sqlDatabaseLabel . setEnabled ( flag ) ; sqlDatabaseField . setEnabled ( flag ) ; sqlUserLabel . setEnabled ( flag ) ; sqlUserField . setEnabled ( flag ) ; sqlPasswordLabel . setEnabled ( flag ) ; sqlPasswordField . setEnabled ( flag ) ; enableZipEncodingCheckBox . setEnabled ( flag ) ; }
public void readFromObject ( Object object ) { try { Method method = BeanUtils . getReadMethod ( object . getClass ( ) , getName ( ) ) ; if ( method != null ) { Object value = method . invoke ( object , null ) ; initializeValue ( value ) ; if ( value != null ) { for ( $F2774 ( iter , subProperties ) ) { Property subProperty = ( Property ) iter . next ( ) ; subProperty . readFromObject ( value ) ; } } } } $F12237 ( e ) }
private boolean internalOfferTask ( AFrameTask task ) { synchronized ( mFrameTaskQueue ) { return mFrameTaskQueue . offer ( task ) ; } }
$F281033 ( name , publicId , systemId )
public static String toString ( ByteBuffer bb ) { $F96 bytes = new byte [ bb . getInt ( ) ] ; String s = NUM00 ; try { if $F35028 ( ArrayUtils , bytes ) { bb . get ( bytes ) ; s = new String ( bytes , UTF8 ) ; } } catch ( Exception e ) { throw new RuntimeException ( NUM00 + NUM00 , e ) ; } return s ; }
public static boolean validImage ( Image image ) { return ( image != null && image . getWidth ( null ) > NUM00 && image . getHeight ( null ) > NUM00 ) ; }
protected void ping ( InetAddress address ) throws Exception { Socket socket = null ; int ping = NUM00 ; for ( $F589 ) { if ( isDebug ( ) ) { log ( $F230231 ( ping , getMaxPings , address ) + NUM00 + getPort ( ) ) ; } try { socket = new Socket ( address , getPort ( ) ) ; $F597 } catch ( ConnectException ce ) { log ( $F90567 ( ping , getMaxPings ) + ce . toString ( ) + NUM00 + address + NUM00 + getPort ( ) ) ; ping ++ ; if ( ping <= getMaxPings ( ) ) { log ( NUM00 + getPingIntervalMilli ( ) + NUM00 ) ; Thread . sleep ( getPingIntervalMilli ( ) ) ; } else $F5153 } } if ( socket == null ) { throw new ConnectException $F29591 ( getMaxPings ) ; } try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( socket . getInputStream ( ) , NUM00 ) ) ; PrintWriter writer = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( socket . getOutputStream ( ) ) ) , _BOOL ) ; log ( NUM00 + address + NUM00 ) ; $F8438 ( writer ) $F1206 ( writer ) boolean pongReceived = _BOOL ; for ( $F589 ) { $F27015 ( answer , reader ) if ( answer != null ) { $F1382 ( answer ) log ( NUM00 + answer + NUM00 ) ; $F1382 ( answer ) $F19677 ( answer , pongReceived , _BOOL ) } else $F5153 } $F59 ( reader ) $F59 ( writer ) if ( ! pongReceived ) { throw new ConnectException $F580 ; } } $F3229 ( socket ) }
private ImageSize computeSizeToFit ( float maxSide ) { if ( NUM00 == maxSide ) { return new ImageSize $F32532 ; } ImageSize resized = new ImageSize ( this ) ; if ( ( this . mWidth > maxSide ) || ( this . mHeight > maxSide ) ) { double ratioX = maxSide / this . mWidth ; double ratioY = maxSide / this . mHeight ; $F59772 ( scale , Math , ratioX , ratioY ) scale = NUM00 / Integer . highestOneBit ( ( int ) Math . floor ( NUM00 / scale ) ) ; resized . mWidth = ( int ) ( Math . floor ( resized . mWidth * scale / NUM00 ) * NUM00 ) ; resized . mHeight = ( int ) ( Math . floor ( resized . mHeight * scale / NUM00 ) * NUM00 ) ; } return resized ; }
public static $F114477 embeddedSelectorToPartitions ( String selector , String type , DataPartitioner partitioner ) throws PIRException { $F114477 parts ; int partitionBits = partitioner . getBits ( type ) ; if ( partitionBits > NUM00 ) { int hashedSelector = KeyedHash . hash ( NUM00 , NUM00 , selector , NUM00 ) ; parts = partitioner . toPartitions ( hashedSelector , PrimitiveTypePartitioner . INT ) ; } else { parts = partitioner . toPartitions ( selector , type ) ; } return parts ; }
public static double stddevp $F196672 ( a , lo , hi ) { return Math . sqrt ( varp ( a , lo , hi ) ) ; }
public void maybeLookAheadScripts $F72 $F845
public Java2TypeScriptTranslator ( TranspilationHandler logHandler , JSweetContext context , JCCompilationUnit compilationUnit , boolean preserveSourceLineNumbers ) { super ( logHandler , context , compilationUnit , new Java2TypeScriptAdapter ( context ) , preserveSourceLineNumbers ) ; }
$F1 protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int count = getChildCount ( ) ; mLeftWidth = NUM00 ; mRightWidth = NUM00 ; int maxHeight = NUM00 ; int maxWidth = NUM00 ; int childState = NUM00 ; for ( $F119 ( i , count ) ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) != GONE ) { measureChildWithMargins ( child , widthMeasureSpec , NUM00 , heightMeasureSpec , NUM00 ) ; $F3670 ( lp , child ) if ( lp . position == LayoutParams . POSITION_LEFT ) { mLeftWidth += Math . max ( maxWidth , $F239295 ( child , lp ) ) ; } else if ( lp . position == LayoutParams . POSITION_RIGHT ) { mRightWidth += Math . max ( maxWidth , $F239295 ( child , lp ) ) ; } else { maxWidth = Math . max ( maxWidth , $F239295 ( child , lp ) ) ; } maxHeight = Math . max ( maxHeight , child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ) ; childState = combineMeasuredStates ( childState , child . getMeasuredState ( ) ) ; } } maxWidth += mLeftWidth + mRightWidth ; $F53909 ( maxHeight , Math , getSuggestedMinimumHeight ) $F53909 ( maxWidth , Math , getSuggestedMinimumWidth ) setMeasuredDimension ( resolveSizeAndState ( maxWidth , widthMeasureSpec , childState ) , resolveSizeAndState ( maxHeight , heightMeasureSpec , childState < < MEASURED_HEIGHT_STATE_SHIFT ) ) ; }
protected int exec ( String command , StringList args ) { try { print ( command ) ; StringList cmd = new StringList $F72 ; cmd = cmd . plus ( command ) ; if ( args != null ) { for ( String a : args ) $F1328 ( print , a ) cmd . addAll ( args ) ; } println ( NUM00 ) ; ProcessBuilder pb = new ProcessBuilder $F72 ; pb . command ( cmd . array ( ) ) ; pb . redirectErrorStream ( _BOOL ) ; $F111135 ( p , pb ) copyInThread ( p . getInputStream ( ) , quiet ? null : sysOut ) ; $F84402 ( p ) return p . exitValue ( ) ; } $F12237 ( e ) }
$F122843 $F32043 public void testGatewaySenderEventListenerInvocationWithoutLocator $F72 { int mPort = AvailablePortHelper . getRandomAvailablePortForDUnitSite ( ) ; $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) $F188761 ( vm4 ) $F188761 ( vm5 ) startSenderInVMs ( NUM00 , vm4 , vm5 ) ; $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm6 ) $F188761 ( vm7 ) final Map keyValues = new HashMap $F72 ; for ( $F6268 ( i ) ) $F48801 ( keyValues , i ) $F188761 ( vm4 ) $F188761 ( vm4 ) $F188761 ( vm5 ) $F188761 ( vm4 ) $F188761 ( vm5 ) fail ( NUM00 ) ; }
protected ApplicationUser buildUser ( $F2540 ( headerMap ) , boolean includeRoles ) { $F980 ( LOGGER ) $F2539 headerNames = getHeaderNames ( ) ; ApplicationUser applicationUser = createNewApplicationUser ( ) ; $F124892 ( buildUserId , applicationUser , headerMap , headerNames , HTTP_HEADER_USER_ID ) $F124892 ( buildFirstName , applicationUser , headerMap , headerNames , HTTP_HEADER_FIRST_NAME ) $F124892 ( buildLastName , applicationUser , headerMap , headerNames , HTTP_HEADER_LAST_NAME ) $F124892 ( buildEmail , applicationUser , headerMap , headerNames , HTTP_HEADER_EMAIL ) buildSessionId ( applicationUser , headerMap , HTTP_HEADER_SESSION_ID ) ; $F124892 ( buildSessionInitTime , applicationUser , headerMap , headerNames , HTTP_HEADER_SESSION_INIT_TIME ) userNamespaceAuthorizationHelper . buildNamespaceAuthorizations ( applicationUser ) ; if ( includeRoles ) { $F124892 ( buildRoles , applicationUser , headerMap , headerNames , HTTP_HEADER_ROLES ) } $F586 ( LOGGER , applicationUser ) return applicationUser ; }
@ Interruptible public static void harnessEnd $F72 { Stats . stopAll ( ) ; insideHarness = _BOOL ; }
private Cluster < SubspaceModel > runFastDOC ( Database database , $F42616 relation , ArrayModifiableDBIDs S , int d , int n , int m , int r ) { $F2469 D = null ; DBIDVar dV = DBIDUtil . newVar ( ) ; FiniteProgress iprogress = LOG . isVerbose ( ) ? new FiniteProgress ( NUM00 , m * n , LOG ) : null ; Random random = rnd . getSingleThreadedRandom ( ) ; DBIDArrayIter iter = S . iter ( ) ; outer : for ( $F1316 ( i , n ) ) { iter . seek ( random . nextInt ( S . size ( ) ) ) ; for ( $F1316 ( j , m ) ) { DBIDs randomSet = DBIDUtil . randomSample ( S , r , random ) ; $F2469 nD = BitsUtil . zero ( d ) ; for ( $F1316 ( k , d ) ) { if ( dimensionIsRelevant ( k , relation , randomSet ) ) { BitsUtil . setI ( nD , k ) ; } } if ( D == null || BitsUtil . cardinality ( nD ) > BitsUtil . cardinality ( D ) ) { D = nD ; dV . set ( iter ) ; if ( BitsUtil . cardinality ( D ) >= d_zero ) { if ( iprogress != null ) { iprogress . setProcessed ( iprogress . getTotal ( ) , LOG ) ; } $F59811 } } LOG . incrementProcessed ( iprogress ) ; } } LOG . ensureCompleted ( iprogress ) ; if ( D == null || BitsUtil . cardinality ( D ) == NUM00 ) $F1337 SubspaceMaximumDistanceFunction df = new SubspaceMaximumDistanceFunction ( D ) ; DistanceQuery $F2193 dq = database . getDistanceQuery ( relation , df ) ; RangeQuery $F2193 rq = database . getRangeQuery ( dq , DatabaseQuery . HINT_SINGLE ) ; DBIDs C = DBIDUtil . intersection ( S , rq . getRangeForDBID ( dV , w ) ) ; return $F3817 ( C ) ? makeCluster ( relation , C , D ) : null ; }
public RaceGUI ( String appName ) { $F30051 ( UIManager , Boolean ) JFrame f = new JFrame ( appName ) ; $F30055 ( f , JFrame ) $F30057 ( f ) track = new TrackView $F72 ; $F30063 ( f , track , BorderLayout ) controlPanel = new RaceControlPanel $F72 ; $F30069 ( f , controlPanel , BorderLayout ) $F30070 ( f ) f . setVisible ( _BOOL ) ; }
public static $F46406 toHexStrings ( Iterable < ByteArray > arrays ) { $F8728 ( ret ) for ( ByteArray array : arrays ) ret . add ( HexString . toHexString ( array . get ( ) ) ) ; return ret ; }
public static List < GeoTimeSerie > partitionAndApply ( Object function , WarpScriptStack stack , Macro validator , $F6877 bylabels , List < GeoTimeSerie > ... series ) throws WarpScriptException { Map < $F2539 , List < GeoTimeSerie > > unflattened = partitionAndApplyUnflattened ( function , stack , validator , bylabels , series ) ; List < GeoTimeSerie > results = new ArrayList < GeoTimeSerie > $F72 ; for ( List < GeoTimeSerie > l : unflattened . values ( ) ) $F21926 ( results , l ) return results ; }
final WorkQueue registerWorker ( ForkJoinWorkerThread wt ) { Thread . UncaughtExceptionHandler handler ; $F17861 ws ; int s , ps ; wt . setDaemon ( _BOOL ) ; if $F200462 ( handler , ueh ) wt . setUncaughtExceptionHandler ( handler ) ; do $F845 while ( ! U . compareAndSwapInt ( this , INDEXSEED , s = indexSeed , s += SEED_INCREMENT ) || s == NUM00 ) ; WorkQueue w = new WorkQueue ( this , wt , config > > > NUM00 , s ) ; if ( ( ( ps = plock ) & PL_LOCK ) != NUM00 || ! U . compareAndSwapInt ( this , PLOCK , ps , ps += PL_LOCK ) ) ps = acquirePlock ( ) ; int nps = ( ps & SHUTDOWN ) | ( ( ps + PL_LOCK ) & ~ SHUTDOWN ) ; try { if $F200462 ( ws , workQueues ) { int n = ws . length , m = n - NUM00 ; int r = ( s < < NUM00 ) | NUM00 ; if ( ws [ r &= m ] != null ) { int probes = NUM00 ; int step = ( n <= NUM00 ) ? NUM00 : ( $F14870 ( n ) & EVENMASK ) + NUM00 ; while ( ws [ r = ( r + step ) & m ] != null ) { if ( ++ probes >= n ) { workQueues = ws = Arrays . copyOf ( ws , n <<= NUM00 ) ; m = n - NUM00 ; probes = NUM00 ; } } } w . eventCount = w . poolIndex = r ; ws [ r ] = w ; } } finally { if $F302447 ( U , this , PLOCK , ps , nps ) releasePlock ( nps ) ; } wt . setName ( workerNamePrefix . concat ( Integer . toString ( w . poolIndex ) ) ) ; return w ; }
public void clear $F72 $F13478 ( documents , fireMRUListChanged )
public boolean isDirectlyControlDependentOn ( BasicBlock insBlock , Branch b ) { Set < ControlFlowEdge > incomming = incomingEdgesOf ( insBlock ) ; if $F10471 ( incomming ) { for ( ControlFlowEdge e : incomming ) { if ( ! e . hasControlDependency ( ) && ! e . isExceptionEdge ( ) ) { return isDirectlyControlDependentOn ( getEdgeSource ( e ) , b ) ; } } } boolean isRootDependent = isRootDependent ( insBlock ) ; $F397 ( b , isRootDependent ) if ( isRootDependent && b != null ) return _BOOL ; for ( ControlFlowEdge e : incomming ) { Branch current = e . getBranchInstruction ( ) ; if ( e . isExceptionEdge ( ) ) { if ( current != null ) $F4638 else $F598 } $F45557 ( current ) $F9506 ( current , b , _BOOL ) } return _BOOL ; }
final boolean tryReadLock $F72 { $F686 ( current , Thread ) for ( $F589 ) { int c = getState ( ) ; if ( exclusiveCount ( c ) != NUM00 && getExclusiveOwnerThread ( ) != current ) return _BOOL ; int r = sharedCount ( c ) ; $F266914 ( r , MAX_COUNT ) if ( compareAndSetState ( c , c + SHARED_UNIT ) ) { if ( r == NUM00 ) { firstReader = current ; firstReaderHoldCount = NUM00 ; } else if ( firstReader == current ) { firstReaderHoldCount ++ ; } else { HoldCounter rh = cachedHoldCounter ; if $F69886 ( rh , current ) cachedHoldCounter = rh = readHolds . get ( ) ; else $F69900 ( rh , readHolds ) rh . count ++ ; } return _BOOL ; } } }
public static String replace ( String text , String oldsub , String newsub , boolean caseInsensitive , boolean firstOnly ) { StringBuilder buf ; int tln ; $F1749 ( oln , oldsub ) if ( oln == NUM00 ) { $F1749 ( nln , newsub ) if ( nln == NUM00 ) { return text ; } else { if ( firstOnly ) { return newsub + text ; } else { $F3935 ( tln , text ) buf = new StringBuilder ( tln + ( tln + NUM00 ) * nln ) ; buf . append ( newsub ) ; for ( $F119 ( i , tln ) ) { $F4137 ( buf , text , i ) buf . append ( newsub ) ; } $F92 ( buf ) } } } else { oldsub = caseInsensitive ? oldsub . toLowerCase ( ) : oldsub ; String input = caseInsensitive ? text . toLowerCase ( ) : text ; $F12747 ( e , input , oldsub ) $F5881 ( e , text ) int b = NUM00 ; $F3935 ( tln , text ) buf = new StringBuilder ( tln + Math . max ( newsub . length ( ) - oln , NUM00 ) * NUM00 ) ; do { $F13037 ( buf , text , b , e ) buf . append ( newsub ) ; b = e + oln ; e = input . indexOf ( oldsub , b ) ; } while ( e != - NUM00 && ! firstOnly ) ; $F13047 ( buf , text , b ) $F92 ( buf ) } }
public void serializeFormDef ( FormDef fd , String filepath ) { String hash = FileUtils . getMd5Hash ( new File ( filepath ) ) ; File formDef = new File ( Collect . CACHE_PATH + File . separator + hash + NUM00 ) ; if $F1906 ( formDef ) { FileOutputStream fos ; try { $F10893 ( fos , formDef ) $F1533 ( dos , fos ) fd . writeExternal ( dos ) ; $F1206 ( dos ) $F59 ( dos ) } $F35546 ( e ) $F12241 ( e ) } }
private void paintRoute ( Graphics2D graphics , JXMapViewer viewer , PlottableEntity entity ) { Set < Plottable > plottables = entity . getPlottables ( ) ; if $F3817 ( plottables ) { $F339 ( graphics , Color ) graphics . setStroke ( new BasicStroke $F989 ) ; drawRoute ( plottables , graphics , viewer ) ; $F14782 ( graphics , entity ) graphics . setStroke ( new BasicStroke $F989 ) ; drawRoute ( plottables , graphics , viewer ) ; } }
private boolean installReply ( String alias , InputStream in ) throws Exception { $F13265 ( alias , keyAlias ) Pair < Key , $F1469 > objs = recoverKey ( alias , storePass , keyPass ) ; PrivateKey privKey = ( PrivateKey ) objs . fst ; if ( keyPass == null ) { keyPass = objs . snd ; } Certificate userCert = keyStore . getCertificate ( alias ) ; if ( userCert == null ) { $F22029 ( form , rb ) $F22031 ( source , alias ) throw new Exception $F22032 ( form , source ) ; } Collection < ? extends Certificate > c = cf . generateCertificates ( in ) ; if $F2979 ( c ) $F65933 ( rb ) $F65927 replyCerts = c . toArray ( new Certificate $F2313 ( c ) ) ; $F65927 newChain ; if $F9634 ( replyCerts ) { newChain = establishCertChain ( userCert , replyCerts [ NUM00 ] ) ; } else { newChain = validateReply ( alias , userCert , replyCerts ) ; } if ( newChain != null ) { keyStore . setKeyEntry ( alias , privKey , ( keyPass != null ) ? keyPass : storePass , newChain ) ; return _BOOL ; } else { return _BOOL ; } }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . AGGREGATOR__NAME : $F6439 ( NAME_EDEFAULT , name ) case EipPackage . AGGREGATOR__TO_CHANNELS : $F6441 ( toChannels ) case EipPackage . AGGREGATOR__FROM_CHANNELS : $F6441 ( fromChannels ) case EipPackage . AGGREGATOR__PART : return part != PART_EDEFAULT ; case EipPackage . AGGREGATOR__STRATEGY : $F6439 ( STRATEGY_EDEFAULT , strategy ) case EipPackage . AGGREGATOR__EXPRESSION : $F6439 ( EXPRESSION_EDEFAULT , expression ) } $F6444 ( super , featureID ) }
public synchronized void mouseWheel ( int wheelAmt ) { peer . mouseWheel ( wheelAmt ) ; afterEvent ( ) ; }
$F1 public int length $F72 { return data . length / ( format . getFrameSize ( ) * NUM00 ) ; }
public void validate ( Set setData ) throws ValidationException { for ( $F2774 ( iter , setData ) ) { performValidation ( $F2775 ( iter ) ) ; } }
public static void deleteDirectory ( final File dir , boolean checkForLinks ) { if $F7110 ( dir ) $F85588 ( dir ) else if ( checkForLinks && isLink ( dir ) ) $F85588 ( dir ) if $F3428 ( dir ) { IOUtils . deleteDir ( dir , checkForLinks ) ; } else $F85588 ( dir ) }
private static Marshaller createMarshaller ( JAXBContext jaxbContext , String schemaPath ) throws SAXException , JAXBException { Schema schema = XmlParser . getSchema ( $F8640 ( schemaPath ) ) ; $F142433 ( jaxbMarshaller , jaxbContext ) jaxbMarshaller . setSchema ( schema ) ; jaxbMarshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , _BOOL ) ; jaxbMarshaller . setProperty ( Marshaller . JAXB_ENCODING , NUM00 ) ; return jaxbMarshaller ; }
public static GeneralPath cardinalSpline ( $F8138 , float slack , boolean closed ) { $F13609 ( path ) $F6222 ( path , pts ) return cardinalSpline ( path , pts , slack , closed , NUM00 , NUM00 ) ; }
public static String makeMethodSafe ( final String S ) { String name = makeHTMLNameSafe ( S ) ; $F2936 ( name ) return name ; }
public Builder addListenUrl ( String url ) { if ( UrlUtil . isUrl ( url ) ) { if ( mListenUrls == null ) { $F21884 ( mListenUrls ) } mListenUrls . add ( url ) ; } return this ; }
$F25545 ( i , count , buf , newbuf , mPool , System )
public void remove ( Production production ) $F106 ( productions , production )
private void writeDelay $F72 { try $F31130 ( Thread ) catch ( InterruptedException e ) $F1210 ( fail ) }
public static void main $F4374 ( argv ) { ArgParser ap = new ArgParser $F580 ; ap . add ( NUM00 , NUM00 , NUM00 ) ; if $F8830 ( argv ) { ap . bail ( NUM00 , _BOOL ) ; } ap . parse ( argv ) ; $F806 files = ap . getArgValues ( NUM00 ) ; if ( files != null && files [ NUM00 ] != null ) { String shp = files [ NUM00 ] ; String dbf = null ; try { dbf = shp . substring ( NUM00 , $F31603 ( shp ) ) + PARAM_DBF ; DbfTableModel model = DbfTableModel . getDbfTableModel ( PropUtils . getResourceOrFileOrURL ( dbf ) ) ; EsriGraphicList list = EsriGraphicList . getEsriGraphicList ( PropUtils . getResourceOrFileOrURL ( shp ) , null , null ) ; logger . info ( list . getDescription ( ) ) ; EsriShapeExport ese = new EsriShapeExport ( list , model , null ) ; ese . export ( ) ; } catch ( MalformedURLException murle ) { logger . warning ( $F5351 ( murle ) ) ; } catch ( NullPointerException npe ) $F18144 ( logger ) catch ( Exception exception ) { logger . warning ( $F5351 ( exception ) ) ; $F301 ( exception ) } } else { ap . bail ( NUM00 , _BOOL ) ; } $F5194 ( System ) }
public PartialHull ( IPoint first , IPoint second ) $F23287 ( points , first , second )
public void testMaxGreater $F72 { $F67214 $F117220 int aSign = NUM00 ; int bSign = NUM00 ; $F67522 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F127615 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F67528 ( assertTrue , result ) }
public static SortedSet < Interval > findFullAvailabilityGaps ( Set < Interval > availableIntervals , Set < Interval > neededIntervals ) { Comparator < Interval > intervalStartComparator = new IntervalStartComparator $F72 ; SortedSet < Interval > sortedAvailableIntervals = new $F2611 ( intervalStartComparator ) ; sortedAvailableIntervals . addAll ( availableIntervals ) ; SortedSet < Interval > sortedNeededIntervals = new $F2611 ( intervalStartComparator ) ; sortedNeededIntervals . addAll ( neededIntervals ) ; Iterator < Interval > availableIntervalsIterator = sortedAvailableIntervals . iterator ( ) ; if $F87568 ( availableIntervalsIterator ) { return sortedNeededIntervals ; } Interval available = availableIntervalsIterator . next ( ) ; SortedSet < Interval > missingIntervals = new $F2611 ( intervalStartComparator ) ; for ( Interval needed : sortedNeededIntervals ) { while ( ! canDetermineAvailability ( available , needed ) && availableIntervalsIterator . hasNext ( ) ) $F235549 ( available , availableIntervalsIterator ) $F36399 ( available , needed ) missingIntervals . add ( needed ) ; } return missingIntervals ; }
public static $F3803 split ( String str , String delim ) { $F36422 ( splitList ) StringTokenizer st = null ; $F397 ( str , splitList ) if ( delim != null ) st = new StringTokenizer ( str , delim ) ; else st = new StringTokenizer ( str ) ; if ( st != null && st . hasMoreTokens ( ) ) { $F36428 ( splitList ) $F226965 ( st , splitList ) } return splitList ; }
public void writeExif ( String jpegFileName , String exifOutFileName ) throws $F27136 { $F26831 ( jpegFileName , exifOutFileName , NULL_ARGUMENT_ ) InputStream is = null ; $F5335 ( is , jpegFileName ) writeExif ( is , exifOutFileName ) ; $F59 ( is ) }
public boolean isGenClass ( SootClass clz ) { return $F40656 ( genClasses , clz ) ; }
public boolean hasExtraStillImage $F72 { return isApng ( ) && ! firsIdatApngFrame ; }
private void readResponseHeaders $F37875 ( state , innerState , response ) throws StopRequest { Header header = response . getFirstHeader ( NUM00 ) ; if ( header != null ) { innerState . mHeaderContentDisposition = header . getValue ( ) ; } $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderContentLocation = header . getValue ( ) ; } $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderETag = header . getValue ( ) ; } String headerTransferEncoding = null ; $F37882 ( header , response ) if ( header != null ) $F37892 ( headerTransferEncoding , header ) String headerContentType = null ; $F37882 ( header , response ) if ( header != null ) { $F37891 ( headerContentType , header ) if $F1264 ( headerContentType ) { throw new StopRequest ( DownloaderService . STATUS_FILE_DELIVERED_INCORRECTLY , NUM00 ) ; } } if ( headerTransferEncoding == null ) { $F37882 ( header , response ) if ( header != null ) { innerState . mHeaderContentLength = header . getValue ( ) ; long contentLength = Long . parseLong ( innerState . mHeaderContentLength ) ; if ( contentLength != - NUM00 && contentLength != mInfo . mTotalBytes ) { Log . e ( Constants . TAG , NUM00 ) ; } } } else { if ( Constants . LOGVV ) { $F37918 ( Log , Constants ) } } if ( Constants . LOGVV ) { Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentDisposition ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLength ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderContentLocation ) ; Log . v ( Constants . TAG , NUM00 + innerState . mHeaderETag ) ; Log . v ( Constants . TAG , NUM00 + headerTransferEncoding ) ; } boolean noSizeInfo = innerState . mHeaderContentLength == null && ( headerTransferEncoding == null || $F14071 ( headerTransferEncoding ) ) ; if ( noSizeInfo ) { throw new StopRequest ( DownloaderService . STATUS_HTTP_DATA_ERROR , NUM00 ) ; } }
public void removeChangeListener ( final PTPropertyChangeListener listener ) $F106 ( changeListeners , listener )
public static ResultSet optimizeInJoinSelect $F72 { SimpleResultSet rs = new SimpleResultSet $F72 ; rs . addColumn ( NUM00 , Types . INTEGER , NUM00 , NUM00 ) ; rs . addRow ( NUM00 ) ; return rs ; }
public PartitionSubstitutionModel parsePAUPBlock ( BeautiOptions options , List < CharSet > charSets ) throws ImportException , IOException { PartitionSubstitutionModel model = new PartitionSubstitutionModel ( options , NUM00 ) ; readTopLevelBlock ( options , model , charSets ) ; return model ; }
private void zEventToggleTimeMenuButtonMousePressed ( MouseEvent e ) $F5795 ( togglePopup )
private void addLine ( GridField field , VEditor editor , boolean mandatory ) { $F35577 ( log , field ) JLabel label = VEditorFactory . getLabel ( field ) ; label . setLabelFor ( ( Component ) editor ) ; editor . setReadWrite ( _BOOL ) ; editor . setMandatory ( mandatory ) ; field . addPropertyChangeListener ( editor ) ; if ( m_newRow ) { m_gbc . gridy = m_line ++ ; m_gbc . gridx = NUM00 ; } else m_gbc . gridx = NUM00 ; m_gbc . insets = m_labelInsets ; $F45961 ( m_gbc , GridBagConstraints ) m_gbc . weightx = NUM00 ; parameterPanel . add ( label , m_gbc ) ; if ( m_newRow ) m_gbc . gridx = NUM00 ; else m_gbc . gridx = NUM00 ; m_gbc . insets = m_fieldInsets ; $F45961 ( m_gbc , GridBagConstraints ) m_gbc . weightx = NUM00 ; parameterPanel . add ( ( Component ) editor , m_gbc ) ; m_newRow = ! m_newRow ; }
protected Object lazilyLoadDesktopProperty ( String name ) $F1337
@ edu . umd . cs . findbugs . annotations . SuppressWarnings ( $F3144 , justification = NUM00 ) public void initRecoveredVersion ( T member , RegionVersionHolder $F4203 v , boolean latestOplog ) { RegionVersionHolder $F4203 recovered = v . clone ( ) ; if ( member == null || member . equals ( myId ) ) { synchronized ( localExceptions ) { if ( latestOplog || $F76101 ( localVersion ) ) { localExceptions = recovered ; if ( logger . isTraceEnabled ( LogMarker . RVV ) ) { logger . trace ( LogMarker . RVV , NUM00 , recovered . version ) ; } localVersion . set ( recovered . version ) ; } } } else { $F5856 ( gcVersion , memberToGCVersion , member ) synchronized ( memberToVersion ) { RegionVersionHolder $F4203 oldVersion = memberToVersion . get ( member ) ; if ( latestOplog || oldVersion == null || oldVersion . version == NUM00 ) { if ( gcVersion != null ) { recovered . removeExceptionsOlderThan ( gcVersion ) ; } memberToVersion . put ( member , recovered ) ; } } } }
protected void notifyClickListenersAboutClick ( int item ) { if $F3817 ( clickingListeners ) { for ( OnWheelClickedListener listener : clickingListeners ) { listener . onItemClicked ( this , item ) ; } } else $F24285 ( setCurrentItem , item , _BOOL ) }
$F1 public synchronized void disconnectionNotification ( String eventName , Object source ) { $F6689 listenees = m_listenees . get ( eventName ) ; if ( listenees != null ) { listenees . remove ( source ) ; if $F10471 ( listenees ) $F106 ( m_listenees , eventName ) } if $F87842 ( eventName ) $F5795 ( stop ) }
public void testConstructorSignBytesZeroNull1 $F72 { byte $F3009 = $F845 ; int aSign = - NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
private String replaceIllegalChar ( String data , char ch , String replacement ) { int idx = NUM00 ; StringBuilder buffer = new StringBuilder $F9484 ( data ) ; while ( ( data != null ) && $F105153 ( idx , data , ch ) != - NUM00 ) { $F6937 ( buffer , data , idx ) buffer . append ( replacement ) ; $F6943 ( data , idx ) } if $F23754 ( data ) $F288 ( buffer , data ) $F92 ( buffer ) }
protected static final void adjustModuleName ( DebugModule d ) { d . name = adjustModuleName ( d . name ) ; }
public org . dom4j . Attribute createAttribute ( Element elem , Attribute attr ) { return factory . createAttribute ( elem , $F6798 ( createQName , attr ) , attr . getValue ( ) ) ; }
public LogEntry $F72 { $F201038 ( index , ENTRY_INDEX ) $F3224 ( time , System ) }
public void testBitLengthPositive3 $F72 { byte $F3009 = $F157839 ; int aSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F6961 ( assertEquals , aNumber ) }
public boolean isSignatureValid $F72 { return ECKey . verify ( Utils . doubleDigest ( content ) , signature , params . getAlertSigningKey ( ) ) ; }
private void validateCreateInformation ( Date startTime , String taskName ) { $F18062 ( Assert , startTime ) if ( taskName != null && taskName . length ( ) > this . maxTaskNameSize ) { throw new IllegalArgumentException ( NUM00 + this . maxTaskNameSize + NUM00 ) ; } }
private static Object increment ( final Object object , final Number amount , final JsonPointer field ) throws BadRequestException { if ( object instanceof Long ) { return ( ( Long ) object ) + amount . longValue ( ) ; } else if ( object instanceof Integer ) { return ( ( Integer ) object ) + amount . intValue ( ) ; } else if ( object instanceof Float ) { return ( ( Float ) object ) + amount . floatValue ( ) ; } else if ( object instanceof Double ) { return ( ( Double ) object ) + amount . doubleValue ( ) ; } else { throw new BadRequestException ( NUM00 + field + NUM00 ) ; } }
public static LinkedHashSet $F37552 findEntites ( LinkedHashSet $F37552 matches , HashSet $F37552 checked , Entity entity , Predicate predicate ) { if $F73676 ( checked , entity ) { return matches ; } if $F44202 ( predicate , entity ) $F207 ( matches , entity ) for ( RefNode refNode : entity . getChildren ( RefNode . class ) ) { Entity e = refNode . getReference ( ) ; if ( e != null ) { findEntites ( matches , checked , e , predicate ) ; } } for ( ToManyNode toManyNode : entity . getChildren ( ToManyNode . class ) ) { for ( Entity e : toManyNode . getList ( ) ) { if ( e != null ) { findEntites ( matches , checked , e , predicate ) ; } } } return matches ; }
protected OMGeometry createMGRSRectangle ( MGRSPoint mgrsBasePoint , double voffset , double hoffset , double interval , Ellipsoid ellipsoid ) { $F1993 ( llpoints ) double easting = mgrsBasePoint . easting + hoffset ; double northing = mgrsBasePoint . northing + voffset ; int zone_number = mgrsBasePoint . zone_number ; char zone_letter = mgrsBasePoint . zone_letter ; $F99967 ( llp1 ) llp1 = MGRSPoint . MGRStoLL ( ellipsoid , northing , easting , zone_number , zone_letter , llp1 ) ; llpoints [ NUM00 ] = llp1 . getY ( ) ; llpoints [ NUM00 ] = llp1 . getX ( ) ; llpoints [ NUM00 ] = llp1 . getY ( ) ; llpoints [ NUM00 ] = llp1 . getX ( ) ; MGRSPoint . MGRStoLL ( ellipsoid , northing , easting + interval , zone_number , zone_letter , llp1 ) ; llpoints [ NUM00 ] = llp1 . getY ( ) ; llpoints [ NUM00 ] = llp1 . getX ( ) ; MGRSPoint . MGRStoLL ( ellipsoid , northing + interval , easting + interval , zone_number , zone_letter , llp1 ) ; llpoints [ NUM00 ] = llp1 . getY ( ) ; llpoints [ NUM00 ] = llp1 . getX ( ) ; MGRSPoint . MGRStoLL ( ellipsoid , northing + interval , easting , zone_number , zone_letter , llp1 ) ; llpoints [ NUM00 ] = llp1 . getY ( ) ; llpoints [ NUM00 ] = llp1 . getX ( ) ; MGRSPoint mgrs = new MGRSPoint ( northing , easting , zone_number , zone_letter ) ; mgrs . resolve ( mgrsBasePoint . getAccuracy ( ) ) ; String mgrsString = mgrs . getMGRS ( ) ; if $F22503 ( Debug ) Debug . output ( NUM00 + mgrsString + NUM00 + mgrs . getAccuracy ( ) ) ; PolygonGeometry poly = new PolygonGeometry . LL ( llpoints , OMGraphic . DECIMAL_DEGREES , ( interval <= NUM00 ? OMGraphic . LINETYPE_STRAIGHT : OMGraphic . LINETYPE_GREATCIRCLE ) ) ; poly . putAttribute ( OMGraphic . APP_OBJECT , mgrsString ) ; return poly ; }
$F284893 ( toXMLString , _BOOL )
public void addMemoryPressureListener ( MemoryPressureListener listener ) $F207 ( mListeners , listener )
private void resetForOT $F72 { if ( bottomOT && homeScore == awayScore ) { gameYardLine = NUM00 ; gameYardsNeed = NUM00 ; gameDown = NUM00 ; numOT ++ ; if $F91889 ( numOT ) gamePoss = _BOOL ; else gamePoss = _BOOL ; gameTime = - NUM00 ; bottomOT = _BOOL ; } else if ( ! bottomOT ) { gamePoss = ! gamePoss ; gameYardLine = NUM00 ; gameYardsNeed = NUM00 ; gameDown = NUM00 ; gameTime = - NUM00 ; bottomOT = _BOOL ; } else { playingOT = _BOOL ; } }
public synchronized void startPolling $F72 { m_scheduler . scheduleAtFixedRate ( m_notificationPoller , NUM00 , NUM00 , TimeUnit . MILLISECONDS ) ; }
private void dropProxy ( ProxyReg reg ) { synchronized ( caches ) { $F10531 ( iter , caches ) while $F2921 ( iter ) { LookupCacheImpl cache = ( LookupCacheImpl ) iter . next ( ) ; cache . removeProxyReg ( reg ) ; } } }
public void testUpdate4 $F72 { int newValue1 = - NUM00 ; int newValue2 = - NUM00 ; String updateQuery = $F103214 ( DatabaseCreator , newValue1 ) + newValue2 + NUM00 ; try { $F32305 ( num , statement , updateQuery ) int expectedUpdated = NUM00 ; assertEquals ( NUM00 , expectedUpdated , num ) ; $F32306 ( selectQuery , DatabaseCreator ) $F15328 ( result , statement , selectQuery ) while $F1682 ( result ) { $F15339 ( id , result ) } $F59 ( result ) } $F32310 ( fail , e ) }
public long toLong $F72 $F13598 ( m_value )
public static void moveToDirectory $F42859 ( src , destDir , createDestDir ) throws IOException { $F896 ( src ) $F896 ( destDir ) $F130782 ( src ) if $F3444 ( src ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else { moveFileToDirectory ( src , destDir , createDestDir ) ; } }
public static int copyAndCloseBoth ( Reader input , Writer output ) throws IOException { try $F8587 ( copyAndCloseOutput , input , output ) $F3229 ( input ) }
protected void writeHeader $F72 throws IOException { $F1325 ( header , SHAPE_FILE_HEADER_LENGTH ) writeBEInt ( header , NUM00 , SHAPE_FILE_CODE ) ; writeBEInt ( header , NUM00 , NUM00 ) ; writeLEInt ( header , NUM00 , SHAPE_FILE_VERSION ) ; writeLEInt ( header , NUM00 , SHAPE_TYPE_NULL ) ; writeLEDouble ( header , NUM00 , NUM00 ) ; writeLEDouble ( header , NUM00 , NUM00 ) ; writeLEDouble ( header , NUM00 , NUM00 ) ; writeLEDouble ( header , NUM00 , NUM00 ) ; $F927 ( raf ) $F11584 ( raf , header , SHAPE_FILE_HEADER_LENGTH ) }
public String hashKeyForDisk ( String key ) { String cacheKey ; try { $F10310 ( mDigest , MessageDigest ) $F31951 ( mDigest , key ) cacheKey = bytesToHexString ( mDigest . digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { cacheKey = String . valueOf ( key . hashCode ( ) ) ; } return cacheKey ; }
private Favorite packFavorite ( Cursor c ) { Favorite favorite = new Favorite $F72 ; favorite . id = c . getLong ( ID_INDEX ) ; favorite . screen = c . getInt ( SCREEN_INDEX ) ; favorite . container = c . getInt ( CONTAINER_INDEX ) ; favorite . cellX = c . getInt ( CELLX_INDEX ) ; favorite . cellY = c . getInt ( CELLY_INDEX ) ; favorite . spanX = c . getInt ( SPANX_INDEX ) ; favorite . spanY = c . getInt ( SPANY_INDEX ) ; favorite . iconType = c . getInt ( ICON_TYPE_INDEX ) ; if ( favorite . iconType == Favorites . ICON_TYPE_RESOURCE ) { $F19101 ( iconPackage , c , ICON_PACKAGE_INDEX ) if $F20899 ( TextUtils , iconPackage ) $F6988 ( favorite , iconPackage ) $F19101 ( iconResource , c , ICON_RESOURCE_INDEX ) if $F20899 ( TextUtils , iconResource ) $F6988 ( favorite , iconResource ) } if ( favorite . iconType == Favorites . ICON_TYPE_BITMAP ) { $F96 blob = c . getBlob ( ICON_INDEX ) ; if $F22195 ( blob ) { favorite . icon = blob ; } } $F19101 ( title , c , TITLE_INDEX ) if $F20899 ( TextUtils , title ) $F6988 ( favorite , title ) $F19101 ( intentDescription , c , INTENT_INDEX ) if $F20899 ( TextUtils , intentDescription ) { try { Intent intent = Intent . parseUri ( intentDescription , NUM00 ) ; intent . removeExtra ( ItemInfo . EXTRA_PROFILE ) ; favorite . intent = intent . toUri ( NUM00 ) ; } catch ( URISyntaxException e ) $F17555 ( Log , TAG , e ) } favorite . itemType = c . getInt ( ITEM_TYPE_INDEX ) ; if ( favorite . itemType == Favorites . ITEM_TYPE_APPWIDGET ) { favorite . appWidgetId = c . getInt ( APPWIDGET_ID_INDEX ) ; $F19101 ( appWidgetProvider , c , APPWIDGET_PROVIDER_INDEX ) if $F20899 ( TextUtils , appWidgetProvider ) $F6988 ( favorite , appWidgetProvider ) } return favorite ; }
public static void unregister ( SPINThreadFunctions old ) { if ( old != null ) $F24242 ( localFunctions , old ) else $F38599 ( localFunctions ) }
public static boolean loadProperties ( Properties properties , InputStream propsIn ) { try { properties . load ( propsIn ) ; return _BOOL ; } catch ( $F3258 e ) { if $F6456 ( logger , Level ) $F18144 ( logger ) return _BOOL ; } }
public Complex sin $F72 { return new Complex ( Math . sin ( re ) * Math . cosh ( im ) , Math . cos ( re ) * Math . sinh ( im ) ) ; }
@ OnClick ( R . id . dismiss_button ) public void onDismissClick ( View view ) { if ( SystemClock . elapsedRealtime ( ) - mLastClickTime < NUM00 ) $F932 $F41468 ( mLastClickTime , SystemClock ) dismissOffer ( getAdapterPosition ( ) ) ; if ( snackbar != null ) { snackbar . dismiss ( ) ; } }
public Table findTable ( String name ) $F8587 ( findTable , name , _BOOL )
$F113898 ( buf , s , i , c , Integer )
public void draw ( final Graphics g , final int height , final int width ) { int constantDim ; int changingDim ; if ( orientation == X_AXIS ) { changingDim = width ; constantDim = height ; } else { changingDim = height ; constantDim = width ; } int dimStep ; if ( fixedSteps ) { dimStep = changingDim / STEPS ; } else { dimStep = NUM00 ; STEPS = changingDim / dimStep ; } float red = _redT ; float green = _greenT ; float blue = _blueT ; int offset = NUM00 ; for ( $F119 ( i , STEPS ) ) { Color c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ; g . setColor ( c ) ; drawRect ( g , offset , constantDim , dimStep ) ; offset += dimStep ; float value = shader . getValue ( $F65168 ( i , STEPS ) ) ; red = _redT + ( _redB - _redT ) * value ; green = _greenT + ( _greenB - _greenT ) * value ; blue = _blueT + ( _blueB - _blueT ) * value ; } Color c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ; g . setColor ( c ) ; drawRect ( g , offset , constantDim , changingDim - offset ) ; }
public static $F1986 convexHull ( $F1986 pts , int len , $F5415 angles , $F2027 idx , $F2027 stack ) { int plen = len / NUM00 - NUM00 ; $F6853 ( len ) if ( angles . length < plen || idx . length < plen || stack . length < len / NUM00 ) $F825 int i0 = NUM00 ; for ( $F6225 ( i , len ) ) { if ( pts [ i + NUM00 ] < pts [ i0 + NUM00 ] ) { i0 = i ; } else if ( pts [ i + NUM00 ] == pts [ i0 + NUM00 ] ) { i0 = ( pts [ i ] < pts [ i0 ] ? i : i0 ) ; } } for ( int i = NUM00 , j = NUM00 ; i < len ; i += NUM00 ) { $F73688 ( i , i0 ) angles [ j ] = ( float ) Math . atan2 ( $F3123 ( pts , i , i0 ) , pts [ i ] - pts [ i0 ] ) ; idx [ j ++ ] = i ; } ArrayLib . sort ( angles , idx , plen ) ; float angle = angles [ NUM00 ] ; int ti = NUM00 , tj = idx [ NUM00 ] ; for ( $F119 ( i , plen ) ) { int j = idx [ i ] ; if ( angle == angles [ i ] ) { double x1 = pts [ tj ] - pts [ i0 ] ; double y1 = $F3123 ( pts , tj , i0 ) ; double x2 = pts [ j ] - pts [ i0 ] ; double y2 = $F3123 ( pts , j , i0 ) ; double d1 = x1 * x1 + y1 * y1 ; double d2 = x2 * x2 + y2 * y2 ; if ( d1 >= d2 ) { idx [ i ] = - NUM00 ; } else { idx [ ti ] = - NUM00 ; angle = angles [ i ] ; ti = i ; tj = j ; } } else { angle = angles [ i ] ; ti = i ; tj = j ; } } int sp = NUM00 ; stack [ sp ++ ] = i0 ; int j = NUM00 ; for ( int k = NUM00 ; k < NUM00 ; j ++ ) { if ( idx [ j ] != - NUM00 ) { stack [ sp ++ ] = idx [ j ] ; k ++ ; } } for ( ; j < plen ; j ++ ) { if $F13071 ( idx , j ) $F598 while ( isNonLeft ( i0 , stack [ sp - NUM00 ] , stack [ sp - NUM00 ] , idx [ j ] , pts ) ) { sp -- ; } stack [ sp ++ ] = idx [ j ] ; } $F1986 hull = new double [ NUM00 * sp ] ; for ( $F119 ( i , sp ) ) { hull [ NUM00 * i ] = pts [ stack [ i ] ] ; hull [ NUM00 * i + NUM00 ] = pts [ stack [ i ] + NUM00 ] ; } return hull ; }
private void sendMessages $F72 { List < MurmurMessage > messages = getMessages ( NUM00 ) ; MurmurMessage exchangeInfoMessage = new MurmurMessage ( NUM00 , Integer . toString ( messages . size ( ) ) , NUM00 ) ; if ( lengthValueWrite ( out , exchangeInfoMessage . toJSON ( MurmurApplication . getContext ( ) , NUM00 , NUM00 ) ) ) { for ( MurmurMessage message : messages ) { List < MurmurMessage > $F204 ( packet ) ; packet . add ( message ) ; CleartextMessages messagesMessage = new CleartextMessages ( ( ArrayList < MurmurMessage > ) packet ) ; lengthValueWrite ( out , messagesMessage . toJson ( MurmurApplication . getContext ( ) ) ) ; } } }
protected void init ( String str ) { $F1749 ( len , str ) $F104602 ( text , len ) $F104602 ( lcText , len ) for ( $F119 ( i , len ) ) { $F1280 ( c , str , i ) text [ i ] = c ; if $F58237 ( c ) $F114344 ( lcText , i ) else lcText [ i ] = $F19297 ( c ) ? c : Character . toLowerCase ( c ) ; } }
private void updateAttrs ( SvcReg reg , EntryRep entry , $F131 values ) { EntryClass eclass = entry . eclass ; for ( $F45516 ( fldidx , values ) ) { Object oval = entry . fields [ fldidx ] ; Object nval = values [ fldidx ] ; if $F10335 ( nval , oval ) { eclass = getDefiningClass ( eclass , fldidx ) ; HashMap map = addAttr ( reg , eclass , fldidx , nval ) ; entry . fields [ fldidx ] = nval ; if ( hasAttr ( reg , eclass , fldidx , oval ) ) $F598 $F73534 ( regs , map , oval ) regs . remove ( regs . indexOf ( reg ) ) ; if $F2979 ( regs ) map . remove ( oval ) ; } } }
public void finalizeNetworkConstruction $F72 { Set < MotifLink > keySet = nodeSetsDepartingFromLink . keySet ( ) ; nodesWithLink = new HashMap < MotifLink , $F93424 > $F716 ( keySet ) ; for ( MotifLink motifLink : keySet ) { $F6870 nodes = nodeSetsDepartingFromLink . get ( motifLink ) ; $F93424 n = new $F93424 ( nodes ) ; Collections . sort ( n ) ; nodesWithLink . put ( motifLink , n ) ; } nodeSetsDepartingFromLink = null ; }
public Collection < AISValidationFailure > failures $F72 { return Collections . unmodifiableCollection ( failureList ) ; }
public static GetInactiveImagesResponse checkGetInactiveImagesResponse ( GetInactiveImagesResponse response ) throws RpcException { $F10635 ( logger , response ) switch $F52729 ( response ) { case OK : $F597 $F52738 ( SYSTEM_ERROR , response ) case DATASTORE_NOT_FOUND : throw new DatastoreNotFoundException $F52730 ( response ) ; case OPERATION_IN_PROGRESS : throw new OperationInProgressException $F52730 ( response ) ; $F52745 ( String , response ) } return response ; }
public void runTest $F72 throws Throwable { Document doc ; Element root ; NodeList elementList ; Node firstChild ; NodeList textList ; CharacterData textNode ; String data ; $F236 ( doc , load , _BOOL ) $F103340 ( root , doc ) $F5896 ( root ) $F237 ( elementList , root ) $F238 ( firstChild , elementList ) textList = firstChild . getChildNodes ( ) ; textNode = ( CharacterData ) textList . item ( NUM00 ) ; $F4055 ( data , textNode ) assertEquals ( NUM00 , NUM00 , data ) ; }
public double semiDeviation $F72 { return $F86242 ( Math , semiVariance ) ; }
private void checkPostsDisplayOnRecyclerView ( List < Post > postsToCheck , int position ) { int columnCount = NUM00 ; int size = postsToCheck . size ( ) + position ; int pos = NUM00 ; for ( int i = position ; i < size ; i ++ ) { checkItemAtPosition ( i , postsToCheck . get ( pos ) ) ; if ( ( ( i + NUM00 ) % columnCount ) == NUM00 ) { int nextRowStart = i + columnCount ; int nextRowEnd = nextRowStart - columnCount + NUM00 ; for ( int n = nextRowStart ; n >= nextRowEnd ; n -- ) { checkItemAtPosition ( n , postsToCheck . get ( n - position ) ) ; } i = i + columnCount ; } pos ++ ; } }
private void addDependentClassesToWorklist ( GVCongruenceClass c ) { for ( ValueGraphVertex v : c ) { for ( $F245865 e = v . inNodes ( ) ; e . hasMoreElements ( ) ; ) { ValueGraphVertex in = ( ValueGraphVertex ) e . nextElement ( ) ; int vn = in . getValueNumber ( ) ; GVCongruenceClass x = B . get ( vn ) ; workList . push ( x ) ; } } }
public synchronized JSONObject toJSONObject $F72 { $F60661 ( res ) res . putAll ( this ) ; return res ; }
private Shape createEllipseInternal $F2026 ( x , y , w , h ) { ellipse . setFrame ( x , y , w , h ) ; return ellipse ; }
public static String write ( StringBuilder sb , String ... strings ) { for ( String string : strings ) sb . append ( string ) ; $F92 ( sb ) }
public ImportFolderValidation validate ( final String path ) { $F18062 ( Check , path ) if ( validationCache == null ) { $F12775 ( validationCache ) } else { if $F1710 ( validationCache , path ) { return ( ImportFolderValidation ) validationCache . get ( path ) ; } } final ImportFolderValidation validation = computeValidation ( path ) ; validationCache . put ( path , validation ) ; return validation ; }
private static $F96 hmac_sha ( String crypto , $F96 keyBytes , $F96 text ) { try { Mac hmac ; hmac = Mac . getInstance ( crypto ) ; $F89939 ( macKey , keyBytes ) hmac . init ( macKey ) ; $F157 ( hmac , text ) } catch ( GeneralSecurityException gse ) { throw new UndeclaredThrowableException ( gse ) ; } }
public static String fetchCgName ( String clusterCgName ) { String cgName = null ; if $F1032 ( clusterCgName ) { $F35105 ( tmp , clusterCgName , SPLITTER ) cgName = tmp [ NUM00 ] ; } return cgName ; }
public void test_chooseServerAlias $F72 { init ( SERVER ) ; assertNull ( manager . chooseServerAlias ( null , null , $F12829 ) ) ; assertNull ( manager . chooseServerAlias ( NUM00 , null , $F12829 ) ) ; String res = manager . chooseServerAlias ( TYPE_RSA , null , null ) ; assertNotNull ( res ) ; assertEquals ( NUM00 , res . toLowerCase ( ) ) ; res = manager . chooseServerAlias ( TYPE_RSA , null , $F12829 ) ; assertNotNull ( res ) ; assertEquals ( NUM00 , res . toLowerCase ( ) ) ; }
public void add ( int index , Entity entity ) { if $F105 ( entities , entity ) $F322689 ( entity ) if ( entity . getEntityType ( ) != entityType ) { throw new IllegalStateException ( NUM00 + entity . getEntityType ( ) + NUM00 + getParent ( ) + NUM00 + getName ( ) ) ; } if ( entity . isClearlyNotInDatabase ( ) ) $F207 ( newEntities , entity ) entities . add ( index , entity ) ; }
public static ControlTagCacheObject createTestEquipmentAlive $F72 { ControlTagCacheObject cacheObject = new ControlTagCacheObject ( $F130579 , NUM00 , NUM00 , DataTagConstants . MODE_TEST ) ; $F271284 ( cacheObject ) cacheObject . setLogged ( _BOOL ) ; cacheObject . setUnit ( NUM00 ) ; cacheObject . setDipAddress ( NUM00 ) ; cacheObject . setJapcAddress ( NUM00 ) ; cacheObject . setValue ( new Long $F30 ( System ) ) ; cacheObject . setValueDescription ( NUM00 ) ; cacheObject . setSimulated ( _BOOL ) ; cacheObject . setMinValue ( Long . MIN_VALUE ) ; cacheObject . setMaxValue ( Long . MAX_VALUE ) ; cacheObject . setValueDictionary ( new DataTagValueDictionary $F72 ) ; cacheObject . setAddress ( new DataTagAddress $F72 ) ; cacheObject . setDataTagQuality ( createValidQuality ( ) ) ; cacheObject . setCacheTimestamp ( $F32 ( System ) ) ; cacheObject . setDaqTimestamp ( $F32 ( System ) ) ; cacheObject . setSourceTimestamp ( $F32 ( System ) ) ; return cacheObject ; }
public DistributedLogConfiguration $F72 { super ( ) ; addConfiguration ( new SystemConfiguration $F72 ) ; }
public static double sampleStandardDeviation ( int size , double sampleVariance ) { double s , Cn ; int n = size ; s = Math . sqrt ( sampleVariance ) ; if ( n > NUM00 ) { Cn = NUM00 + NUM00 / ( NUM00 * ( n - NUM00 ) ) ; } else { Cn = Math . sqrt ( ( n - NUM00 ) * NUM00 ) * Gamma . gamma ( ( n - NUM00 ) * NUM00 ) / Gamma . gamma ( n * NUM00 ) ; } return Cn * s ; }
void normalize $F72 throws IOException { $F1749 ( end , chars ) $F32905 ( end ) int pos = NUM00 ; int codepoint = Character . codePointAt ( chars , NUM00 ) ; boolean escaped = _BOOL ; for ( int i = NUM00 ; i < end ; ) { $F59912 ( charCount , Character , codepoint ) int i2 = i + charCount ; int nextCodepoint = i2 < end ? Character . codePointAt ( chars , i2 ) : - NUM00 ; if ( escaped ) { escaped = _BOOL ; if ( escapeOneCodepoint ( pos , i - NUM00 , codepoint , nextCodepoint ) ) { pos = i2 ; } } else if ( codepoint == NUM00 ) { escaped = _BOOL ; } else if ( escapeOneCodepoint ( pos , i , codepoint , nextCodepoint ) ) { pos = i2 ; } i = i2 ; codepoint = nextCodepoint ; } out . append ( chars , pos , end ) ; }
protected void rebuildListModel $F72 { DefaultListModel dlm = ( DefaultListModel ) getListModel ( ) ; OMGraphicList list = getList ( ) ; $F10498 ( selectedIndicies ) if ( list != null ) { if $F22195 ( selectedTiles ) { $F14244 ( selectedIndicies , selectedTiles ) } int tileCount = NUM00 ; int selectedIndex = NUM00 ; if ( selectedIndicies != null ) { for ( OMGraphic omg : list ) { ImageTile imageTile = ( ImageTile ) omg ; if ( imageTile . isSelected ( ) && selectedIndex < selectedIndicies . length ) $F52339 ( selectedIndicies , selectedIndex , tileCount ) tileCount ++ ; } } $F725 ( dlm ) for ( OMGraphic omg : list ) { tileCount ++ ; dlm . addElement ( omg ) ; } } if ( resultsList != null ) { if ( selectedIndicies != null ) { resultsList . setSelectedIndices ( selectedIndicies ) ; } $F8798 ( resultsList ) } }
public void tick $F72 $F73598 ( tick )
public Result send ( Email email , boolean ... sync ) { return service . send ( email , boolToInt ( _BOOL , sync ) ) ; }
private $F59542 ( isPopulating )
public void processAttributes ( java . io . Writer writer , int nAttrs ) throws $F35763 { String encoding = getEncoding ( ) ; for ( $F119 ( i , nAttrs ) ) { final String name = m_attributes . getQName ( i ) ; final String value = m_attributes . getValue ( i ) ; $F3410 ( writer ) writer . write ( name ) ; $F3410 ( writer ) writeAttrString ( writer , value , encoding ) ; $F3410 ( writer ) } }
public int processor $F72 $F22645 ( Integer , fields )
public void addNativeChildAt ( ReactShadowNode child , int nativeIndex ) { Assertions . assertCondition ( ! mIsLayoutOnly ) ; Assertions . assertCondition ( ! child . mIsLayoutOnly ) ; $F216949 ( mNativeChildren ) mNativeChildren . add ( nativeIndex , child ) ; child . mNativeParent = this ; }
public boolean containsKey ( final Object eKey ) $F298 ( _elementOrder , eKey )
private void handleExitMessage ( final Component component , final long nativeCtxt ) { postDropTargetEvent ( component , NUM00 , NUM00 , DnDConstants . ACTION_NONE , DnDConstants . ACTION_NONE , null , nativeCtxt , SunDropTargetEvent . MOUSE_EXITED , SunDropTargetContextPeer . DISPATCH_SYNC ) ; }
public void addParameterAnnotations ( CstMethodRef method , AnnotationsList list ) { if ( parameterAnnotations == null ) { parameterAnnotations = new ArrayList < ParameterAnnotationStruct > $F72 ; } parameterAnnotations . add ( new ParameterAnnotationStruct ( method , list ) ) ; }
public static String unhtmlSingleQuotes ( final String str ) $F8480 ( str )
public void addInputMethodListener ( InputMethodListener l ) { m_textArea . addInputMethodListener ( l ) ; }
public void initRawSwap ( $F17427 cellIds ) { this . cellIds = new $F17427 ( cellIds ) ; $F725 ( cellIds ) }
protected void encryptFinal $F72 throws IOException { $F14257 ( inBuffer ) $F725 ( outBuffer ) try { cipher . doFinal ( inBuffer , outBuffer ) ; } catch ( ShortBufferException e ) $F5615 ( e ) catch ( IllegalBlockSizeException e ) $F5615 ( e ) catch ( BadPaddingException e ) $F5615 ( e ) $F725 ( inBuffer ) $F14257 ( outBuffer ) while $F5720 ( outBuffer ) $F4050 ( output , outBuffer ) }
private static boolean spanWillOverlap ( Spannable spanText , URLSpan [ ] spanList , int start , int end ) { $F3627 ( start , end , _BOOL ) for ( URLSpan span : spanList ) { int existingStart = spanText . getSpanStart ( span ) ; int existingEnd = spanText . getSpanEnd ( span ) ; if ( ( start >= existingStart && start < existingEnd ) || end > existingStart && end <= existingEnd ) { if ( Log . isLoggable ( TAG , Log . VERBOSE ) ) { CharSequence seq = spanText . subSequence ( start , end ) ; Log . v ( TAG , NUM00 + seq + NUM00 ) ; } return _BOOL ; } } return _BOOL ; }
private HashMap < Integer , Trie > buildLookupTable ( final Map < Integer , List < Trie > > childTries ) { HashMap < Integer , Trie > $F72141 ( lookup , childTries ) ; for ( int id : childTries . keySet ( ) ) { final List < Trie > tries = childTries . get ( id ) ; if $F10471 ( tries ) { lookup . put ( id , tries . get ( NUM00 ) ) ; } else { lookup . put ( id , new SliceAggregatingTrie ( tries ) ) ; } } return lookup ; }
public void addMarker ( int x , int z , Color color ) { MapMarker marker = new MapMarker $F72 ; marker . x = x ; marker . z = z ; marker . color = color ; markers . add ( marker ) ; }
private void commitDiscard ( long time , boolean allowDiscard ) { $F8249 ( mDiscardingTab ) assert mStackTabs != null ; StackTab discarded = mDiscardingTab ; if ( Math . abs ( discarded . getDiscardAmount ( ) ) / getDiscardRange ( ) > DISCARD_COMMIT_THRESHOLD && allowDiscard ) { mLayout . uiRequestingCloseTab ( time , discarded . getId ( ) ) ; RecordUserAction . record ( NUM00 ) ; RecordUserAction . record ( NUM00 ) ; } else { startAnimation ( time , OverviewAnimationType . UNDISCARD ) ; } mDiscardingTab = null ; requestUpdate ( ) ; }
public $F6689 buildJavaMethodParameters ( AssetOptionsContext context , $F2540 ( availableAssets ) , AssetOptionsMethodInfo assetMethod ) { final $F6689 javaMethodParameters = Lists . newArrayList ( ) ; javaMethodParameters . add ( context ) ; for ( String parentAssetName : assetMethod . assetDependencies ) { $F1729 ( parentAssetValue , availableAssets , parentAssetName ) $F2199 ( index , javaMethodParameters ) Object value = assetMethod . convertParameter ( index , parentAssetValue ) ; javaMethodParameters . add ( value ) ; } return javaMethodParameters ; }
private static ImageView pickGraphic ( RestartableService startStoppable ) { final boolean running = startStoppable . isRunning ( ) ; final ImageView icon = running ? new ImageView ( stopImage ) : new ImageView ( startImage ) ; if ( ! running ) { final FadeTransition ft = new FadeTransition ( Duration . millis ( NUM00 ) , icon ) ; ft . setToValue ( NUM00 ) ; ft . setCycleCount ( Transition . INDEFINITE ) ; ft . setAutoReverse ( _BOOL ) ; $F6193 ( ft ) } icon . setFitHeight ( DPIUtility . MINI_ICON_SIZE ) ; icon . setFitWidth ( DPIUtility . MINI_ICON_SIZE ) ; return icon ; }
$F45263 ( filename , extension , _BOOL , indexOfExtension , fileExt , getExtension )
public void createCashBasedJournalEntriesAndReversalsForSavingsCharges ( final Office office , final String currencyCode , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited , final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited , final Long savingsProductId , final Long paymentTypeId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal totalAmount , final Boolean isReversal , final List < ChargePaymentDTO > chargePaymentDTOs ) { if $F6887 ( chargePaymentDTOs ) { throw new PlatformDataIntegrityException $F6600 ; } ChargePaymentDTO chargePaymentDTO = chargePaymentDTOs . get ( NUM00 ) ; final GLAccount chargeSpecificAccount = getLinkedGLAccountForSavingsCharges ( savingsProductId , accountTypeToBeCredited . getValue ( ) , chargePaymentDTO . getChargeId ( ) ) ; final GLAccount savingsControlAccount = getLinkedGLAccountForSavingsProduct ( savingsProductId , accountTypeToBeDebited . getValue ( ) , paymentTypeId ) ; if ( isReversal ) { createDebitJournalEntryForSavings ( office , currencyCode , chargeSpecificAccount , loanId , transactionId , transactionDate , totalAmount ) ; createCreditJournalEntryForSavings ( office , currencyCode , savingsControlAccount , loanId , transactionId , transactionDate , totalAmount ) ; } else { createDebitJournalEntryForSavings ( office , currencyCode , savingsControlAccount , loanId , transactionId , transactionDate , totalAmount ) ; createCreditJournalEntryForSavings ( office , currencyCode , chargeSpecificAccount , loanId , transactionId , transactionDate , totalAmount ) ; } }
public void addAll ( JsonArray array ) { $F27392 ( elements , array ) }
public double nextDouble ( double k ) { double u , v , w , c , z ; $F61934 ( k ) if ( k_set != k ) { tau = NUM00 + Math . sqrt ( NUM00 + NUM00 * k * k ) ; rho = ( tau - Math . sqrt ( NUM00 * tau ) ) / ( NUM00 * k ) ; r = ( NUM00 + rho * rho ) / ( NUM00 * rho ) ; k_set = k ; } do { $F76340 ( u , randomGenerator ) $F76340 ( v , randomGenerator ) z = Math . cos ( Math . PI * u ) ; w = ( NUM00 + r * z ) / ( r + z ) ; c = k * ( r - w ) ; } while ( ( c * ( NUM00 - c ) < v ) && ( Math . log ( c / v ) + NUM00 < c ) ) ; return ( randomGenerator . raw ( ) > NUM00 ) ? Math . acos ( w ) : - Math . acos ( w ) ; }
public void testListOptions $F72 { if ( m_OptionTester . getOptionHandler ( ) != null ) { if $F43642 ( m_OptionTester ) $F1210 ( fail ) } }
$F1 final public void mouseReleased ( MouseEvent e ) { if ( isComponentPressedDown ) { mouseLiberalClick ( e ) ; $F657 ( now , System ) long timeBetweenUnusedClicks = now - lastUnusedLiberalSingleClickTimeStamp ; if ( timeBetweenUnusedClicks <= slowestDoubleClickMilliseconds ) { mouseLiberalDoubleClick ( e ) ; lastUnusedLiberalSingleClickTimeStamp = NUM00 ; } else $F22067 ( lastUnusedLiberalSingleClickTimeStamp , System ) } isComponentPressedDown = _BOOL ; mouseRelease ( e ) ; }
public static ModificationType valueOf ( final int intValue ) { ModificationType result = null ; if ( NUM00 <= intValue && intValue < ELEMENTS . length ) { result = ELEMENTS [ intValue ] ; } if ( result == null ) { result = new ModificationType ( intValue , NUM00 + intValue + NUM00 , Enum . UNKNOWN ) ; } return result ; }
$F1 public void fillHeader ( Header hdr ) { try { Standard . context ( AsciiTable . class ) ; hdr . setXtension ( NUM00 ) ; hdr . setBitpix ( BasicHDU . BITPIX_BYTE ) ; hdr . setNaxes ( NUM00 ) ; hdr . setNaxis ( NUM00 , this . rowLen ) ; hdr . setNaxis ( NUM00 , this . nRows ) ; Cursor < String , HeaderCard > iter = hdr . iterator ( ) ; iter . setKey ( NAXIS2 . key ( ) ) ; $F24630 ( iter ) iter . add ( new HeaderCard ( PCOUNT . key ( ) , NUM00 , PCOUNT . comment ( ) ) ) ; iter . add ( new HeaderCard ( GCOUNT . key ( ) , NUM00 , GCOUNT . comment ( ) ) ) ; iter . add ( new HeaderCard ( TFIELDS . key ( ) , this . nFields , TFIELDS . comment ( ) ) ) ; for ( int i = NUM00 ; i < this . nFields ; i += NUM00 ) { addColInfo ( i , iter ) ; } } catch ( HeaderCardException e ) { LOG . log ( Level . SEVERE , $F5351 ( e ) , e ) ; } finally { Standard . context ( null ) ; } }
private boolean searchEndMatch ( final String itemName ) { for ( Map . Entry < String , Sentence > e : parsedNames . entrySet ( ) ) { Sentence parsed = e . getValue ( ) ; if ( itemName . endsWith ( parsed . getOriginalText ( ) ) || itemName . endsWith ( parsed . getNormalized ( ) ) ) { $F76754 ( name , e ) return _BOOL ; } } return _BOOL ; }
private static byte expectedNorm ( final DefaultSimilarity sim , final int length , final float boost ) { return ( byte ) sim . encodeNormValue ( boost / ( ( float ) Math . sqrt ( length ) ) ) ; }
public void testCompareToEqualNeg $F72 { $F67214 $F79258 int aSign = - NUM00 ; int bSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
$F1 public ShapeTileSimplex enlarge ( double p_offset ) { $F116 ( p_offset , this ) ShapeTileSimplex offset_simplex = offset ( p_offset ) ; ShapeTileOctagon bounding_oct = bounding_octagon ( ) ; if ( bounding_oct . is_NaN ( ) ) return ShapeTileSimplex . EMPTY ; ShapeTileOctagon offset_oct = bounding_oct . offset ( p_offset ) ; return offset_simplex . intersection ( offset_oct . to_Simplex ( ) ) ; }
V remove ( Object key , int hash , Object value ) { lock ( ) ; try { int c = cnt - NUM00 ; HE $F9340 [ ] tab = table ; $F33769 ( index , hash , tab ) HE $F9340 first = tab [ index ] ; HE $F9340 e = first ; while ( e != null && ( e . hash != hash || ! key . equals ( e . k ) ) ) e = e . next ; V oldValue = null ; if ( e != null ) { V v = e . v ; if ( value == null || value . equals ( v ) ) { oldValue = v ; ++ modCnt ; HE $F9340 newFirst = e . next ; for ( HE $F9340 p = first ; p != e ; p = p . next ) newFirst = new HE $F9340 ( p . k , p . hash , newFirst , p . v ) ; tab [ index ] = newFirst ; cnt = c ; } } return oldValue ; } $F49978 ( unlock ) }
public static TreePath pathTillOfKind ( final TreePath path , final Tree . Kind kind ) { return pathTillOfKind ( path , EnumSet . of ( kind ) ) ; }
public BigDecimal readF2Dot14 ( int index ) $F59421
$F1654 ( set )
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public void addRenderingHints $F233349 ( hints ) { mGraphics . addRenderingHints ( hints ) ; }
private void createNewFieldsArray $F72 { for ( $F1139 ( i , personFieldsOld ) ) { personFieldsNew [ i ] = personFieldsOld [ i ] + NUM00 ; } }
public void removeAllRelations $F72 { for ( BNode inputNode : new LinkedList $F280831 $F6680 ( inputNodes ) ) { $F13536 ( removeInputNode , inputNode ) ; } for ( BNode outputNode : new LinkedList $F280831 $F6680 ( outputNodes ) ) { $F13536 ( removeOutputNode , outputNode ) ; } }
private void addExposedTypes $F140796 ( clazz , cause ) { $F47073 ( pruned , clazz ) boolean alreadyDone = done ( clazz ) ; visit ( clazz ) ; recordExposure ( clazz , cause ) ; if ( alreadyDone || pruned ( clazz ) ) $F932 TypeToken $F1011 token = TypeToken . of ( clazz ) ; for ( TypeToken $F1011 superType : token . getTypes ( ) ) { if $F2137 ( superType , token ) { $F39971 ( logger , superType , clazz ) addExposedTypes ( superType , clazz ) ; } } for ( Class innerClass : clazz . getDeclaredClasses ( ) ) { if ( exposed ( innerClass . getModifiers ( ) ) ) { $F39971 ( logger , innerClass , clazz ) addExposedTypes ( innerClass , clazz ) ; } } for ( $F128325 ( field , clazz ) ) { if ( exposed ( field . getModifiers ( ) ) ) { $F39971 ( logger , field , clazz ) addExposedTypes ( field , clazz ) ; } } for ( Invokable invokable : getExposedInvokables ( token ) ) { $F39971 ( logger , invokable , clazz ) addExposedTypes ( invokable , clazz ) ; } }
public void storeLogs ( File folder ) { $F22814 ( path , folder ) mLoggerFolder = new LogThis ( path ) ; }
$F1 public Object clone $F72 { return new LocationPath ( this ) ; }
private Assignment recursiveBackTrackingSearch ( CSP csp , Assignment assignment ) { Assignment result = null ; if ( assignment . isComplete ( csp . getVariables ( ) ) ) { result = assignment ; } else { Variable var = selectUnassignedVariable ( assignment , csp ) ; for ( Object value : orderDomainValues ( var , assignment , csp ) ) { assignment . setAssignment ( var , value ) ; fireStateChanged ( assignment , csp ) ; if ( assignment . isConsistent ( csp . getConstraints ( var ) ) ) { DomainRestoreInfo info = inference ( var , assignment , csp ) ; if $F5973 ( info ) fireStateChanged ( csp ) ; if ( ! info . isEmptyDomainFound ( ) ) { result = recursiveBackTrackingSearch ( csp , assignment ) ; if ( result != null ) $F597 } info . restoreDomains ( csp ) ; } assignment . removeAssignment ( var ) ; } } return result ; }
private static JSONObject createFileTransferError ( int errorCode , String source , String target , String body , Integer httpStatus ) { JSONObject error = null ; try { error = new JSONObject $F72 ; $F545 ( error , errorCode ) $F545 ( error , source ) $F545 ( error , target ) $F70196 ( body , error ) $F70196 ( httpStatus , error ) } catch ( JSONException e ) { Log . e ( $F65849 ( LOG_TAG , e ) ) ; } return error ; }
public ArrayList $F120452 keys $F72 { ArrayList $F120452 list = New . arrayList ( size ) ; for ( Value k : keys ) { if ( k != null && k != ValueNull . DELETED ) $F207 ( list , k ) } return list ; }
private void close $F72 { $F7254 ( closed ) closed = _BOOL ; try $F881 ( resultSet ) catch ( final SQLException e ) $F98543 ( logger , e ) try $F6399 ( statement ) catch ( final SQLException e ) $F98543 ( logger , e ) }
public DeliveryThread ( TOMLayer tomLayer , ServiceReplica receiver , Recoverable recoverer , ServerViewController controller ) { super ( NUM00 ) ; this . decided = new LinkedBlockingQueue $F200 $F72 ; this . tomLayer = tomLayer ; this . receiver = receiver ; this . recoverer = recoverer ; this . controller = controller ; }
protected void addButtonListener $F72 { ApplicationInsightsAddDialog dialog = new ApplicationInsightsAddDialog ( getShell ( ) ) ; $F5837 ( dialog ) $F17015 ( tableViewer ) }
public $F2027 toArray $F72 $F141537 ( result , size , System , array )
public Block obtainBlock ( String prototypeName , $F5466 String uuid ) { Block block ; if ( uuid != null ) { WeakReference $F40167 ref = mBlockRefs . get ( uuid ) ; if ( ref != null ) { $F16478 ( block , ref ) if ( block != null ) $F29526 ( uuid ) } } if $F15257 ( mBlockTemplates , prototypeName ) { Log . w ( TAG , NUM00 + prototypeName + NUM00 ) ; $F1274 } Block . Builder builder = new Block . Builder $F73204 ( mBlockTemplates , prototypeName ) ; if ( uuid != null ) { builder . setUuid ( uuid ) ; } block = builder . build ( ) ; mBlockRefs . put ( block . getId ( ) , new WeakReference $F40167 ( block ) ) ; return block ; }
public SmsConsoleServiceConfig $F72 { Document doc = parseDocument ( CONFIG_FILENAME ) ; configServices ( doc ) ; hiddenServices = Collections . unmodifiableSet ( services . get ( HIDDEN_SERVICES ) ) ; }
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
private static String convertToQuotedString ( String s ) { $F25770 ( s ) if $F25773 ( s ) { return s ; } return NUM00 + s + NUM00 ; }
public PatternObserverExpr ( String namespace , String name , Expression [ ] parameters ) { super ( namespace , name , Arrays . asList ( parameters ) ) ; }
public static String convertStringToHexString ( String data ) $F26006 ( conventBytesToHexString , data )
public boolean isTransient $F72 { return Modifier . isTransient ( getAccessFlags ( ) ) ; }
public boolean isForHTTPBasic $F72 { return ( negoValue != null ) ? negoValue . equalsIgnoreCase ( HTTP_HTTPBASIC ) : _BOOL ; }
private String indent ( int level ) { final String s = NUM00 ; if ( level == NUM00 ) $F1278 StringBuilder sb = new StringBuilder ( level * s . length ( ) ) ; $F48485 ( i , level , sb , s ) $F92 ( s ) }
public static String cut ( String line , IntPredicate testFunction ) { String s = NUM00 ; int pos = SubParser . locate ( line , testFunction ) ; if ( pos != - NUM00 ) $F14494 ( s , line , pos ) return s ; }
public void addListener ( UpdateManagerListener listener ) $F207 ( listeners , listener )
$F1 public void run $F72 { List $F213599 dequeuedSpans = new ArrayList $F213599 ( maxSpanBatchSize ) ; long errorCount = NUM00 ; while ( running . get ( ) || $F3816 ( queue ) ) { Span firstSpan = null ; try { firstSpan = queue . poll ( NUM00 , TimeUnit . SECONDS ) ; if ( firstSpan != null ) { dequeuedSpans . add ( firstSpan ) ; queue . drainTo ( dequeuedSpans , maxSpanBatchSize - NUM00 ) ; } } $F109995 startClient ( ) ; if $F2979 ( dequeuedSpans ) $F1448 try { List $F137768 events = new ArrayList $F137768 $F716 ( dequeuedSpans ) ; for ( Span span : dequeuedSpans ) { $F13404 ( headers ) $F108920 ( headers , span ) headers . put ( NUM00 , span . getTracerId ( ) ) ; headers . put ( NUM00 , span . getDescription ( ) ) ; String body = span . toJson ( ) ; Event evt = EventBuilder . withBody ( body , Charset . forName ( NUM00 ) , headers ) ; events . add ( evt ) ; } flumeClient . appendBatch ( events ) ; $F725 ( dequeuedSpans ) errorCount = NUM00 ; } catch ( Exception e ) { errorCount += NUM00 ; if ( errorCount < MAX_ERRORS ) { try $F21926 ( queue , dequeuedSpans ) catch ( IllegalStateException ex ) { LOG . error ( $F10533 ( dequeuedSpans ) ) ; } } closeClient ( ) ; try $F31130 ( Thread ) catch ( InterruptedException e1 ) $F845 } } closeClient ( ) ; }
public void cancelAuthentication $F72 { synchronized ( syncLock ) { authenticating = _BOOL ; $F65148 ( timer ) $F358253 ( timer ) } }
private void checkValidInterval ( Duration pollingInterval , int retries , long timeSleptMillis ) { long highSum = NUM00 ; long lowSum = NUM00 ; for ( $F119 ( i , retries ) ) { double currentInterval = pollingInterval . getMillis ( ) * Math . pow ( DataflowPipelineJob . DEFAULT_BACKOFF_EXPONENT , i ) ; double randomOffset = NUM00 * currentInterval ; highSum += Math . round ( currentInterval + randomOffset ) ; lowSum += Math . round ( currentInterval - randomOffset ) ; } assertThat ( timeSleptMillis , allOf ( greaterThanOrEqualTo ( lowSum ) , lessThanOrEqualTo ( highSum ) ) ) ; }
public void write $F36827 ( str , off , len ) throws IOException { $F3576 ( _outputStream ) final int off_plus_len = off + len ; for ( int i = off ; i < off_plus_len ; ) { $F52837 ( c , str , i ) if ( c < NUM00 ) { $F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } else { write ( c ) ; } } }
public CommitRecordIndex ( IRawStore store , Checkpoint checkpoint , IndexMetadata metadata , boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; this . ser = new Entry . EntrySerializer $F72 ; }
protected String encodeBody $F72 { return Long . toString ( this . sequenceNumber ) ; }
$F26776 ( container , mContainers )
private void checkSize ( final int i ) { if ( i >= max_size ) { final int old_size = max_size ; max_size += increment_size ; if ( max_size <= i ) { max_size = i + increment_size + NUM00 ; } final Rectangle [ ] temp = items ; items = new Rectangle [ max_size ] ; $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; } }
public static $F1986 genPulseFromFourierMag $F280936 ( mag , f0 ) { int numHarm = mag . length ; int currentF0 = $F62069 ( Math , f0 ) ; int T ; if ( currentF0 < NUM00 ) T = NUM00 ; else T = NUM00 ; int T2 = NUM00 * T ; $F9662 ( pulse , T ) $F9662 ( real , T2 ) $F9662 ( imag , T2 ) real [ NUM00 ] = real [ T ] = NUM00 ; for ( $F9993 ( i , numHarm ) ) { real [ i ] = real [ T - i ] = real [ T + i ] = real [ T2 - i ] = mag [ i - NUM00 ] ; imag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T2 - i ] = NUM00 ; } for ( int i = ( numHarm + NUM00 ) ; i < ( T - numHarm ) ; i ++ ) { real [ i ] = real [ T - i ] = real [ T + i ] = real [ T2 - i ] = NUM00 ; imag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T2 - i ] = NUM00 ; } FFT . transform ( real , imag , _BOOL ) ; $F96817 ( sqrt_f0 , Math , currentF0 ) for ( $F119 ( i , T ) ) pulse [ i ] = real [ ( i - numHarm ) % T ] * sqrt_f0 ; return pulse ; }
public double volume $F72 { if ( cachedVolume < NUM00 ) { cachedVolume = NUM00 ; IHypercube cube = this . region ; int nd = cube . dimensionality ( ) ; for ( $F9993 ( d , nd ) ) { double right = cube . getRight ( d ) ; double left = cube . getLeft ( d ) ; if $F28102 ( Double , right ) { right = + NUM00 ; } if $F28102 ( Double , left ) $F44867 ( left ) if ( left == - NUM00 && right == + NUM00 ) $F845 else { cachedVolume *= ( right - left ) ; } } } return cachedVolume ; }
static String _targetSoFile ( String libName , int version ) { Context context = mContext ; if ( null == context ) $F2455 String path = NUM00 + context . getPackageName ( ) + NUM00 ; File f = context . getFilesDir ( ) ; if ( f != null ) { path = f . getPath ( ) ; } return path + NUM00 + libName + NUM00 + version + NUM00 ; }
$F1 public $F117572 ( stopMonitoring , _BOOL )
$F1 public Object compute ( $F390500 rows ) throws Exception { if $F3057 ( column ) $F1652 ( rows ) long count = NUM00 ; for ( $F46397 ( row , rows ) ) { if ( row . containsKey ( column ) && $F26935 ( row , column ) ) { count ++ ; } } return count ; }
private Property [ ] parseProperties ( final String contents ) { $F7299 ( parts , contents ) final List $F43833 resultsAsList = new ArrayList $F43833 $F72 ; for ( String part : parts ) { try { if ( ! StringUtils . isEmpty ( part . trim ( ) ) ) { resultsAsList . add ( new Property ( part ) ) ; } } catch ( final Exception e ) { LOG . warn ( $F1573 ( e ) ) ; } } return resultsAsList . toArray ( new Property $F2313 ( resultsAsList ) ) ; }
public void requestSecondsUntilAccountExpiration $F72 { operations . add ( PasswordPolicyStateOperationType . GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION ) ; }
public final boolean equalsIgnoreCase ( String a ) { $F1749 ( len , a ) if ( _length != len ) return _BOOL ; int offset = _offset ; $F1469 buffer = _buffer ; for ( $F119 ( i , len ) ) { char ca = buffer [ offset + i ] ; $F1280 ( cb , a , i ) if ( ca == cb ) $F845 else if ( Character . toLowerCase ( ca ) != Character . toLowerCase ( cb ) ) return _BOOL ; } return _BOOL ; }
public static $F2027 checkObjectStart ( PdfTokenizer lineTokenizer ) { try { $F927 ( lineTokenizer ) if ( ! lineTokenizer . nextToken ( ) || lineTokenizer . getTokenType ( ) != TokenType . Number ) $F1274 int num = lineTokenizer . getIntValue ( ) ; if ( ! lineTokenizer . nextToken ( ) || lineTokenizer . getTokenType ( ) != TokenType . Number ) $F1274 int gen = lineTokenizer . getIntValue ( ) ; if ( ! lineTokenizer . nextToken ( ) ) $F1274 if ( ! Arrays . equals ( Obj , lineTokenizer . getByteContent ( ) ) ) $F1274 return $F10511 ( num , gen ) ; } catch ( Exception ioe ) $F845 $F1274 }
private Object singleElement ( int row , int col ) { Object res = null ; if ( this . isNull == null || ! this . isNull [ row * this . nFields + col ] ) { res = ArrayFuncs . newInstance ( this . types [ col ] , NUM00 ) ; System . arraycopy ( this . data [ col ] , row , res , NUM00 , NUM00 ) ; } return res ; }
private char convertToChar ( String kurzname ) { char result = KEIN_SIEGEL ; if $F1032 ( kurzname ) { if $F4012 ( kurzname ) { result = kurzname . toCharArray ( ) [ NUM00 ] ; } else { result = kurzname . toCharArray ( ) [ NUM00 ] ; } } return result ; }
public NodeSetDTM ( NodeIterator iterator , XPathContext xctxt ) { super ( ) ; Node node ; m_manager = xctxt . getDTMManager ( ) ; while ( null != $F161934 ( node , iterator ) ) { int handle = xctxt . getDTMHandleFromNode ( node ) ; addNodeInDocOrder ( handle , xctxt ) ; } }
public static Vec meanVector ( DataSet dataSet ) { DenseVector dv = new DenseVector ( dataSet . getNumNumericalVars ( ) ) ; meanVector ( dv , dataSet ) ; return dv ; }
private void makeCacheDirectory $F72 { $F1705 ( cacheDir , CACHE_DIRECTORY ) $F27235 ( cacheDir ) }
public void inputKeyevent ( int value ) { executeCommandQuietly ( adbCommand ( NUM00 , NUM00 , NUM00 , NUM00 + value ) ) ; try $F31130 ( Thread ) $F45916 ( log , e ) }
public static void passMockSleep $F72 $F1614 ( mockSleepQueue , _BOOL )
private static File createReserveDiskCacheDir ( Context context ) { File cacheDir = StorageUtils . getCacheDirectory ( context , _BOOL ) ; $F109797 ( individualDir , cacheDir ) $F202511 ( individualDir , cacheDir ) return cacheDir ; }
JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { Scope context = peek ( ) ; if ( context != nonempty && context != empty ) $F19954 $F30606 ( stack ) $F83461 ( context , nonempty , newline ) out . append ( closeBracket ) ; return this ; }
private QueryBuilder buildSort $F72 { QueryBuilder builder = new QueryBuilder $F72 ; $F13712 ( sortIterator , mSortingOrderList ) while $F2921 ( sortIterator ) { $F45691 ( builder , sortIterator ) if $F2921 ( sortIterator ) $F84 ( builder ) } return builder ; }
public void init ( int mode , $F96 key , $F96 iv ) { context = OpenSslNative . init ( context , mode , algorithm , padding , key , iv ) ; }
private String diff_wordsToCharsMunge ( String text , $F3803 lineArray , $F59936 ( lineHash ) ) { int lineStart = NUM00 ; int lineEnd = - NUM00 ; String line ; $F83 ( chars ) while $F46112 ( lineEnd , text ) { String patternStr = NUM00 ; $F55449 ( pattern , Pattern , patternStr ) $F275 ( matcher , pattern , text ) matcher . region ( lineStart , text . length ( ) ) ; if $F281 ( matcher ) { $F444278 ( lineEnd , matcher ) } else lineEnd = - NUM00 ; if ( lineEnd == - NUM00 ) $F32479 ( lineEnd , text ) line = text . substring ( lineStart , lineEnd + NUM00 ) ; lineStart = lineEnd + NUM00 ; if $F1710 ( lineHash , line ) { chars . append ( String . valueOf ( ( char ) $F113095 ( lineHash , line ) ) ) ; } else { lineArray . add ( line ) ; lineHash . put ( $F43443 ( line , lineArray ) ) ; chars . append ( String . valueOf ( ( char ) $F113103 ( lineArray ) ) ) ; } } $F92 ( chars ) }
private void replaceTop ( Scope topOfStack ) $F233310 ( stack , topOfStack )
public boolean hasNext $F72 { return index < desc . length ( ) ; }
public void registerSessionThread ( SessionThread newSession ) { synchronized ( this ) { List < SessionThread > toBeRemoved = new ArrayList < SessionThread > $F72 ; for ( SessionThread sessionThread : sessionThreads ) { if ( ! sessionThread . isAlive ( ) ) { $F13527 ( Log , TAG ) try { $F14454 ( sessionThread ) $F13527 ( Log , TAG ) toBeRemoved . add ( sessionThread ) ; sessionThread . closeSocket ( ) ; } catch ( InterruptedException e ) $F13573 ( Log , TAG ) } } for ( SessionThread removeThread : toBeRemoved ) $F106 ( sessionThreads , removeThread ) sessionThreads . add ( newSession ) ; } $F13527 ( Log , TAG ) }
protected IObjectInfo $F4203 store_impl ( Segment $F4203 segment , ObjectInfo $F4203 oi ) { if ( _invalid ) $F1274 $F5224 ( _size ) segment . incrementSize ( ) ; ObjectInfo $F4203 tail = segment . getTail ( ) ; tail . setForwardRef ( oi ) ; oi . setBackwardRef ( tail ) ; segment . setTail ( oi ) ; return oi ; }
public TeXFormula $F72 { parser = new TeXParser ( NUM00 , this , _BOOL ) ; }
public static void grayToBinary ( BinaryVariable variable ) { int n = variable . getNumberOfBits ( ) ; BitSet gray = variable . getBitSet ( ) ; variable . set ( n - NUM00 , gray . get ( n - NUM00 ) ) ; for ( $F18298 ( i , n ) ) { variable . set ( i , variable . get ( i + NUM00 ) ^ gray . get ( i ) ) ; } }
private void updateTags ( Movie movie ) { $F3803 $F10252 ( availableTags , tagsObservable ) ; for ( String tagInMovie : new $F201 ( movie . getTags ( ) ) ) { boolean tagFound = _BOOL ; for ( String tag : availableTags ) $F42256 ( tagInMovie , tag , tagFound , _BOOL ) $F42258 ( tagFound , addTag , tagInMovie ) } }
protected void removeNextProtocolMessages ( List < ProtocolMessage > protocolMessages , int fromIndex ) { for ( int i = $F2281 ( protocolMessages ) ; i >= fromIndex ; i -- ) $F106 ( protocolMessages , i ) }
public static double sigmoid ( double x ) { return NUM00 / ( NUM00 + Math . pow ( Math . E , - x ) ) ; }
public void testRadix36Neg $F72 $F214959 ( value , radix , aNumber , result , assertTrue )
public UCIBestMove stop $F72 { if $F931 ( isConnected ) $F4639 $F35060 ( LOG ) UCIBestMove result = null ; synchronized ( stopSynch ) { if $F931 ( isProcessingGo ) { result = lastBestMove ; lastBestMove = null ; } else { long totalSleepTime = NUM00 ; send ( NUM00 ) ; while ( goRunnable != null && totalSleepTime < NUM00 ) { try { $F9470 ( Thread ) totalSleepTime += NUM00 ; } $F109995 } result = lastBestMove ; lastBestMove = null ; } } return result ; }
$F1 public boolean supportsDataDefinitionAndDataManipulationTransactions $F72 $F601083 ( debugCodeCall , _BOOL )
public static void removeJavaNoOpLogger ( Collection < Handler > rmvHnds ) { Logger log = Logger . getLogger ( NUM00 ) ; for ( Handler h : log . getHandlers ( ) ) log . removeHandler ( h ) ; if $F20899 ( F , rmvHnds ) { for ( Handler h : rmvHnds ) log . addHandler ( h ) ; } }
$F103232 ( curFirst , pager , PAGE_SIZE , calPageSize , newPage , removeViewAt , afterPlatformListGot )
private int binarySearch ( final int start , final int end , final SizeTester sizeTester , final RectF availableSpace ) { int lastBest = start ; int low = start ; int high = end - NUM00 ; int middle ; while ( low <= high ) { middle = low + high > > > NUM00 ; final int midValCmp = sizeTester . onTestSize ( middle , availableSpace ) ; if ( midValCmp < NUM00 ) { lastBest = low ; low = middle + NUM00 ; } else if ( midValCmp > NUM00 ) { high = middle - NUM00 ; lastBest = high ; } else return middle ; } return lastBest ; }
protected boolean isValidDomain ( String domain ) { $F1150 ( ipDomainMatcher , IP_DOMAIN_PATTERN , domain ) if $F24133 ( ipDomainMatcher ) { $F4377 ( inetAddressValidator , InetAddressValidator ) return inetAddressValidator . isValid ( ipDomainMatcher . group ( NUM00 ) ) ; } $F156 ( domainValidator , DomainValidator , allowLocal ) return domainValidator . isValid ( domain ) || domainValidator . isValidTld ( domain ) ; }
public void tableSwitch ( final $F2027 keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( $F9808 ( i , keys ) ) { if $F15531 ( keys , i ) $F825 } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if $F3305 ( keys ) { int len = keys . length ; int min = keys [ NUM00 ] ; int max = keys [ len - NUM00 ] ; int range = max - min + NUM00 ; if ( useTable ) { $F15537 ( labels , range ) Arrays . fill ( labels , def ) ; for ( $F1316 ( i , len ) ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( $F1316 ( i , range ) ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { $F15537 ( labels , len ) for ( $F1316 ( i , len ) ) $F15546 ( labels , i , newLabel ) mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( $F1316 ( i , len ) ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
public void testRemainderKnuthMultiDigitsByOneDigit $F72 { byte $F3009 = { NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } ; $F88888 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void testTimedInvokeAny4 $F72 throws Throwable { $F25236 ( e ) PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; $F25238 ( startTime , System ) $F25247 ( l ) l . add ( new NPETask $F72 ) ; try { e . invokeAny ( l , LONG_DELAY_MS , MILLISECONDS ) ; shouldThrow ( ) ; } catch ( ExecutionException success ) { assertTrue ( success . getCause ( ) instanceof NullPointerException ) ; } assertTrue ( millisElapsedSince ( startTime ) < LONG_DELAY_MS ) ; } $F14364 ( cleaner ) }
private void parse ( File dir ) { $F5237 xmlFiles = dir . listFiles ( new XmlFilter $F72 ) ; $F5460 ( xmlFile , xmlFiles , parseTestFromXml ) }
public boolean hasNext ( int index ) { for ( $F1139 ( p , mask ) ) { if ( mask [ p ] ) { if ( index <= lastElementIndex [ p ] ) { return _BOOL ; } } } return _BOOL ; }
public static boolean isExternalStorageAvailable $F72 { $F139156 ( state , Environment ) if $F139157 ( state , Environment ) { return _BOOL ; } else { return _BOOL ; } }
public TarEntry $F97 ( headerBuf ) $F19529 ( this , parseTarHeader , headerBuf )
public static void unregisterMbeans ( MBeanServer mBeanServer ) { try { mBeanServer . unregisterMBean ( Log4jMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( ExceptionMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( ExceptionDeltaMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( Log4jDeltaMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( JamonMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( HttpStatusMXBeanImp . getObjectName ( ) ) ; mBeanServer . unregisterMBean ( HttpStatusDeltaMXBeanImp . getObjectName ( ) ) ; unregisterGcMXBean ( mBeanServer ) ; unregisterMbeansFromPropsFile ( mBeanServer ) ; } $F12237 ( e ) }
public static DeterministicKey createMasterPrivateKey $F97 ( seed ) throws HDDerivationException { checkArgument ( seed . length > NUM00 , NUM00 ) ; $F96 i = HDUtils . hmacSha512 ( MASTER_HMAC_SHA512 , seed ) ; checkState ( i . length == NUM00 , i . length ) ; $F96 il = Arrays . copyOfRange ( i , NUM00 , NUM00 ) ; $F96 ir = Arrays . copyOfRange ( i , NUM00 , NUM00 ) ; $F26770 ( Arrays , i ) DeterministicKey masterPrivKey = createMasterPrivKeyFromBytes ( il , ir ) ; $F26770 ( Arrays , il ) $F26770 ( Arrays , ir ) return masterPrivKey ; }
public boolean isNANPACountry ( String regionCode ) $F298 ( nanpaRegions , regionCode )
public void parse ( InputStream in ) throws $F35763 { try { _xmlReader . setInput ( in ) ; parseAll ( ) ; } catch ( XMLStreamException e ) { if ( e . getNestedException ( ) instanceof IOException ) throw ( IOException ) e . getNestedException ( ) ; throw new SAXException $F1783 ( e ) ; } $F171343 ( _xmlReader ) }
$F1 public void printStackTrace ( PrintStream ps ) { super . printStackTrace ( ps ) ; if ( nested != null ) nested . printStackTrace ( ps ) ; }
public AMPassword $F53421 ( pw ) { int i ; int length = pw . length ; cleared = _BOOL ; $F104602 ( password , length ) $F135 ( System , pw , password , length ) }
public void reset $F72 { firstStep = _BOOL ; N3 = NUM00 ; N4 = NUM00 ; $F7057 ( System , IV , ofbV ) byteCount = NUM00 ; $F2268 ( cipher ) }
private static img createControlButtonImage $F22381 ( name , js_command , enabled ) { StringBuffer imgName = new StringBuffer ( NUM00 + name ) ; $F28366 ( enabled , imgName ) $F84 ( imgName ) img img = new img ( MobileEnv . getImageDirectory ( imgName . toString ( ) ) , name ) ; if ( enabled ) img . setAlt ( Msg . getMsg ( AD_Language , name ) ) ; $F243713 ( img ) if ( $F21 ( js_command ) && enabled ) { img . setOnClick ( NUM00 + FORM_NAME + NUM00 + M_Command + NUM00 + name + NUM00 + js_command ) ; } return img ; }
public $F806 toArray $F72 throws Exception { return Utils . splitOptions ( toCommandLine ( ) ) ; }
public static Set < EvalFactoryNode > recursiveGetChildNodes ( EvalFactoryNode currentNode , EvalNodeUtilFactoryFilter filter ) { Set < EvalFactoryNode > result = new LinkedHashSet < EvalFactoryNode > $F72 ; if ( filter . consider ( currentNode ) ) $F207 ( result , currentNode ) recursiveGetChildNodes ( result , currentNode , filter ) ; return result ; }
void dispose $F72 { if ( popup != null ) $F22542 ( popup ) popup = null ; }
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) $F932 if ( value instanceof String ) { checkInternalName ( ( String ) value , NUM00 ) ; $F665 } if ( ! ( value instanceof Label ) ) $F18931 ( value ) else { usedLabels . add ( ( Label ) value ) ; } }
$F1 public void endPrefixMapping ( String str ) throws SAXException $F845
$F1 public void parse ( final Cookie cookie , final String value ) throws MalformedCookieException { $F826 ( cookie ) if ( value == null ) $F160209 int age = - NUM00 ; try $F37473 ( age , Integer , value ) catch ( final NumberFormatException e ) $F44867 ( age ) if ( age < NUM00 ) $F160209 cookie . setExpiryDate ( new Date ( System . currentTimeMillis ( ) + age * NUM00 ) ) ; }
public VariableConfigResource ( String configuration , TextResource baseResource ) { this ( baseResource ) ; for ( $F55140 ( configurationLine , configuration ) ) { $F6542 ( configSplit , configurationLine ) addConfig ( configSplit [ NUM00 ] , configSplit [ NUM00 ] ) ; } }
private static String readFile ( String fileName ) { String classMethod = NUM00 ; $F83 ( fileData ) String fileString = NUM00 ; try { $F51387 ( reader , fileName ) $F11577 ( buf ) int numRead = NUM00 ; while $F18067 ( numRead , reader , buf ) { String readData = String . valueOf ( buf , NUM00 , numRead ) ; fileData . append ( readData ) ; $F11575 ( buf ) ; } $F59 ( reader ) $F6947 ( fileString , fileData ) } catch ( Exception e ) { debug . error ( classMethod + NUM00 + fileName ) ; } return fileString ; }
public ScaleIOSnapshotVolumeResponse snapshotMultiVolume ( $F2540 ( id2snapshot ) , String systemId ) throws Exception { String uri = ScaleIOConstants . getSnapshotVolumesURI ( systemId ) ; ScaleIOSnapshotVolumes spVol = new ScaleIOSnapshotVolumes $F72 ; for ( $F19318 ( entry , id2snapshot ) ) { spVol . addSnapshot ( $F15245 ( entry ) ) ; } ClientResponse response = post ( URI . create ( uri ) , getJsonForEntity ( spVol ) ) ; return getResponseObject ( ScaleIOSnapshotVolumeResponse . class , response ) ; }
$F1 public String toString $F72 { return NUM00 + m_Width + NUM00 + m_SumOfWeights + NUM00 + m_TM . toString ( ) ; }
$F10929 ( buf , mSizeLimit , mBuffersByLastUse , pos , Collections , mBuffersBySize , BUF_COMPARATOR , mCurrentSize , trim )
public boolean isDraft $F72 { return draft != null && draft . booleanValue ( ) ; }
private WeatherUpdater $F72 $F73598 ( onTurnReached )
protected void writeDataToFile ( NodeHolder nodeHolder ) throws CarbonDataWriterException { long offset = writeDataToFile ( nodeHolder , fileChannel ) ; BlockletInfoColumnar blockletInfo = getBlockletInfo ( nodeHolder , offset ) ; blockletInfoList . add ( blockletInfo ) ; }
protected Container createSideNavigationComponent ( Vector commands ) $F13736 ( createSideNavigationComponent , commands )
public static double min $F9830 ( a ) { double min = Double . POSITIVE_INFINITY ; for ( $F1139 ( i , a ) ) { if $F1998 ( Double , a , i ) return Double . NaN ; if ( a [ i ] < min ) min = a [ i ] ; } return min ; }
$F1 public void onUpdateSelection ( int oldSelStart , int oldSelEnd , int newSelStart , int newSelEnd , int candidatesStart , int candidatesEnd ) { super . onUpdateSelection ( oldSelStart , oldSelEnd , newSelStart , newSelEnd , candidatesStart , candidatesEnd ) ; if ( $F20 ( mComposing ) && ( newSelStart != candidatesEnd || newSelEnd != candidatesEnd ) ) { $F4910 ( mComposing ) updateCandidates ( ) ; InputConnection ic = getCurrentInputConnection ( ) ; if ( ic != null ) { ic . finishComposingText ( ) ; } } }
public $F4203 T mapTo ( $F98259 ( mappingClass ) ) $F13736 ( mapTo , mappingClass )
private ArrayList < SpinnerLanguageElement > createSpinnerLanguages ( int avoidLanguage ) { ArrayList < SpinnerLanguageElement > result = new ArrayList < SpinnerLanguageElement > $F72 ; $F3803 languages = mSessionOptions . allLanguages ( ) ; for ( $F3836 ( i , languages ) ) { if ( i != avoidLanguage ) { result . add ( new SpinnerLanguageElement ( languages . get ( i ) , i ) ) ; } } return result ; }
private String userAgent $F72 { return mUserAgent ; }
protected void collectProperties ( $F6969 type , $F101739 referenceType , Map < String , Property > properties ) { try { BeanInfo beanInfo = Introspector . getBeanInfo ( type ) ; PropertyDescriptor [ ] descriptors = beanInfo . getPropertyDescriptors ( ) ; for ( final PropertyDescriptor pd : descriptors ) { try { Method readMethod = getReadMethod ( pd , type ) ; Method writeMethod = getWriteMethod ( pd , type , null ) ; Property property = processProperty ( pd . getName ( ) , pd . getPropertyType ( ) , readMethod , writeMethod , type , referenceType , properties ) ; postProcessProperty ( property , pd , readMethod , writeMethod , type , referenceType , properties ) ; } catch ( final Exception e ) { throw new RuntimeException ( NUM00 + referenceType . getCanonicalName ( ) + NUM00 + pd . getName ( ) + NUM00 , e ) ; } } } catch ( IntrospectionException e ) $F9491 ( e ) }
private void beforeKey $F72 throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) $F86 ( out ) else if ( context != Scope . EMPTY_OBJECT ) $F19954 newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
public void addHeaderView $F123554 ( v , data , isSelectable ) { if ( mAdapter != null && ! ( mAdapter instanceof HeaderViewListAdapter ) ) $F4639 $F123559 ( info ) info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mHeaderViewInfos . add ( info ) ; if ( mAdapter != null && mObserver != null ) { mObserver . onChanged ( ) ; } }
private void renderOperatorBackground ( final Operator operator , final Graphics2D g2 ) { Rectangle2D frame = model . getOperatorRect ( operator ) ; $F2329 ( frame ) RoundRectangle2D background = new RoundRectangle2D . Double ( frame . getX ( ) - NUM00 , frame . getY ( ) - NUM00 , frame . getWidth ( ) + NUM00 , frame . getHeight ( ) + NUM00 , OPERATOR_BG_CORNER , OPERATOR_BG_CORNER ) ; g2 . setColor ( Color . WHITE ) ; g2 . fill ( background ) ; Rectangle2D nameBounds = OPERATOR_FONT . getStringBounds ( operator . getName ( ) , g2 . getFontRenderContext ( ) ) ; if ( nameBounds . getWidth ( ) > frame . getWidth ( ) ) { double relevantWidth = Math . min ( nameBounds . getWidth ( ) , frame . getWidth ( ) * MAX_HEADER_RATIO ) ; double offset = ( frame . getWidth ( ) - relevantWidth ) / NUM00 ; int x = ( int ) ( frame . getX ( ) + offset ) ; int padding = NUM00 ; RoundRectangle2D nameBackground = new RoundRectangle2D . Double ( ( int ) Math . min ( frame . getX ( ) - padding , x - padding ) , frame . getY ( ) - NUM00 , relevantWidth + NUM00 * padding , ProcessRendererModel . HEADER_HEIGHT + NUM00 , OPERATOR_BG_CORNER , OPERATOR_BG_CORNER ) ; g2 . fill ( nameBackground ) ; } renderPortsBackground ( operator . getInputPorts ( ) , g2 ) ; renderPortsBackground ( operator . getOutputPorts ( ) , g2 ) ; }
protected void optionWindow ( ActionEvent e ) { if ( optionsFrame == null ) { optionsFrame = new JmriJFrame ( Bundle . getMessage ( NUM00 ) , _BOOL , _BOOL ) ; optionsPane = optionsFrame . getContentPane ( ) ; optionsPane . setLayout ( new BoxLayout ( optionsFrame . getContentPane ( ) , BoxLayout . Y_AXIS ) ) ; clearEntry . setSelectedIndex ( nxPairs . getClearDownOption ( ) ) ; $F58099 ( p1 ) $F58097 ( clearEntry ) p1 . add ( new JLabel $F253578 ( Bundle ) ) ; p1 . add ( clearEntry ) ; optionsPane . add ( p1 ) ; $F58099 ( p2 ) initializeColorCombo ( settingTrackColorBox ) ; setColorCombo ( settingTrackColorBox , nxPairs . getSettingRouteColor ( ) ) ; ActionListener settingTrackColorListener = null ; settingTrackColorBox . addActionListener ( settingTrackColorListener ) ; p2 . add ( new JLabel $F253578 ( Bundle ) ) ; p2 . add ( settingTrackColorBox ) ; optionsPane . add ( p2 ) ; durationSetting . setText ( NUM00 + nxPairs . getSettingTimer ( ) ) ; if ( nxPairs . useDifferentColorWhenSetting ( ) ) $F7728 ( durationSetting , _BOOL ) else $F7728 ( durationSetting , _BOOL ) $F58099 ( p3 ) p3 . add ( new JLabel $F253578 ( Bundle ) ) ; p3 . add ( durationSetting ) ; optionsPane . add ( p3 ) ; $F58099 ( p4 ) p4 . add ( dispatcherUse ) ; dispatcherUse . setSelected ( nxPairs . getDispatcherIntegration ( ) ) ; optionsPane . add ( p4 ) ; JButton ok = new JButton $F253578 ( Bundle ) ; optionsPane . add ( ok ) ; $F32271 ( ok ) } $F30070 ( optionsFrame ) optionsFrame . setVisible ( _BOOL ) ; }
public void makeExistingDemandBillInactive ( String assessmentNo ) { DemandBillService demandBillService = ( DemandBillService ) beanProvider . getBean ( NUM00 ) ; demandBillService . makeDemandBillInactive ( assessmentNo ) ; }
public void write ( DataOutput out ) throws IOException { WritableUtils . writeVInt ( out , length ) ; $F11584 ( out , bytes , length ) }
int characterClass $F72 throws RESyntaxException { if $F20317 ( pattern , idx ) $F5795 ( internalError ) if ( ( idx + NUM00 ) >= len || pattern . charAt ( ++ idx ) == NUM00 ) $F1210 ( syntaxError ) if $F52566 ( idx , len , pattern ) { idx ++ ; int idxStart = idx ; while ( idx < len && pattern . charAt ( idx ) >= NUM00 && pattern . charAt ( idx ) <= NUM00 ) { idx ++ ; } if ( ( idx + NUM00 ) < len && pattern . charAt ( idx ) == NUM00 && $F10825 ( pattern , idx ) ) { $F12715 ( charClass , pattern , idxStart , idx ) Character i = ( Character ) hashPOSIX . get ( charClass ) ; if ( i != null ) { idx += NUM00 ; return node ( RE . OP_POSIXCLASS , i . charValue ( ) ) ; } syntaxError ( NUM00 + charClass + NUM00 ) ; } syntaxError ( NUM00 ) ; } int ret = node ( RE . OP_ANYOF , NUM00 ) ; char CHAR_INVALID = Character . MAX_VALUE ; char last = CHAR_INVALID ; char simpleChar ; boolean include = _BOOL ; boolean definingRange = _BOOL ; int idxFirst = idx ; char rangeStart = Character . MIN_VALUE ; char rangeEnd ; RERange range = new RERange $F72 ; while ( idx < len && pattern . charAt ( idx ) != NUM00 ) { switchOnCharacter : switch $F31372 ( pattern , idx ) { $F1262 include = ! include ; if ( idx == idxFirst ) { range . include ( Character . MIN_VALUE , Character . MAX_VALUE , _BOOL ) ; } idx ++ ; $F598 $F1262 { int c ; switch ( c = escape ( ) ) { case ESC_COMPLEX : case ESC_BACKREF : syntaxError ( NUM00 ) ; case ESC_CLASS : $F29727 ( definingRange , syntaxError ) switch ( pattern . charAt ( idx - NUM00 ) ) { case RE . E_NSPACE : range . include ( Character . MIN_VALUE , NUM00 , include ) ; range . include ( $F2858 , include ) ; range . include ( NUM00 , NUM00 , include ) ; range . include ( NUM00 , Character . MAX_VALUE , include ) ; $F597 case RE . E_NALNUM : range . include ( Character . MIN_VALUE , NUM00 , include ) ; range . include ( NUM00 , NUM00 , include ) ; range . include ( NUM00 , NUM00 , include ) ; range . include ( NUM00 , include ) ; range . include ( NUM00 , Character . MAX_VALUE , include ) ; $F597 case RE . E_NDIGIT : range . include ( Character . MIN_VALUE , NUM00 , include ) ; range . include ( NUM00 , Character . MAX_VALUE , include ) ; $F597 case RE . E_SPACE : range . include ( NUM00 , include ) ; range . include ( NUM00 , include ) ; range . include ( NUM00 , include ) ; range . include ( NUM00 , include ) ; range . include ( NUM00 , include ) ; range . include ( NUM00 , include ) ; $F597 case RE . E_ALNUM : range . include ( NUM00 , NUM00 , include ) ; range . include ( NUM00 , NUM00 , include ) ; range . include ( NUM00 , include ) ; case RE . E_DIGIT : range . include ( NUM00 , NUM00 , include ) ; $F597 } last = CHAR_INVALID ; $F597 $F1267 simpleChar = ( char ) c ; break switchOnCharacter ; } } $F598 $F1262 $F29727 ( definingRange , syntaxError ) definingRange = _BOOL ; rangeStart = ( last == CHAR_INVALID ? NUM00 : last ) ; if ( ( idx + NUM00 ) < len && pattern . charAt ( ++ idx ) == NUM00 ) { simpleChar = Character . MAX_VALUE ; $F597 } $F598 $F1267 $F47698 ( simpleChar , pattern , idx ) $F597 } if ( definingRange ) { rangeEnd = simpleChar ; if ( rangeStart >= rangeEnd ) $F1210 ( syntaxError ) range . include ( rangeStart , rangeEnd , include ) ; last = CHAR_INVALID ; definingRange = _BOOL ; } else { if ( idx >= len || pattern . charAt ( idx ) != NUM00 ) { range . include ( simpleChar , include ) ; } last = simpleChar ; } } if ( idx == len ) $F1210 ( syntaxError ) idx ++ ; instruction [ ret + RE . offsetOpdata ] = ( char ) range . num ; for ( int i = NUM00 ; i < range . num ; i ++ ) { emit ( ( char ) range . minRange [ i ] ) ; emit ( ( char ) range . maxRange [ i ] ) ; } return ret ; }
public static $F96 decode $F97 ( data ) { int len = data . length / NUM00 * NUM00 ; $F39018 ( bOut , len ) try { encoder . decode ( data , NUM00 , data . length , bOut ) ; } catch ( Exception e ) { throw new DecoderException $F11592 ( e ) ; } $F11316 ( bOut ) }
$F1 public int doFinal $F4741 ( out , outOff ) throws BadCiphertextException { complete_ = _BOOL ; int written = contentCryptoHandler_ . doFinal ( out , outOff ) ; updateTrailingSignature ( out , outOff , written ) ; if ( cryptoAlgo_ . getTrailingSignatureLength ( ) > NUM00 ) { try { CiphertextFooters footer = new CiphertextFooters ( trailingSig_ . sign ( ) ) ; $F1208 ( fBytes , footer ) System . arraycopy ( fBytes , NUM00 , out , outOff + written , fBytes . length ) ; return written + fBytes . length ; } catch ( final SignatureException ex ) { throw new AwsCryptoException ( ex ) ; } } else { return written ; } }
public void hideAllBudges $F72 { for ( RelativeLayout badge : badgeList ) { if ( badge . getVisibility ( ) == VISIBLE ) BadgeHelper . hideBadge ( badge ) ; } $F725 ( badgeSaveInstanceHashMap ) }
public Element render ( SVGPlot svgp ) { Element tag = svgp . svgElement ( SVGConstants . SVG_G_TAG ) ; Element button = svgp . svgRect ( x , y , w , h ) ; if $F2292 ( Double , r ) { SVGUtil . setAtt ( button , SVGConstants . SVG_RX_ATTRIBUTE , r ) ; SVGUtil . setAtt ( button , SVGConstants . SVG_RY_ATTRIBUTE , r ) ; } SVGUtil . setAtt ( button , SVGConstants . SVG_STYLE_ATTRIBUTE , butcss . inlineCSS ( ) ) ; tag . appendChild ( button ) ; if ( svgp . getIdElement ( SVGEffects . LIGHT_GRADIENT_ID ) != null ) { Element light = svgp . svgRect ( x , y , w , h ) ; if $F2292 ( Double , r ) { SVGUtil . setAtt ( light , SVGConstants . SVG_RX_ATTRIBUTE , r ) ; SVGUtil . setAtt ( light , SVGConstants . SVG_RY_ATTRIBUTE , r ) ; } SVGUtil . setAtt ( light , SVGConstants . SVG_STYLE_ATTRIBUTE , NUM00 + SVGEffects . LIGHT_GRADIENT_ID + NUM00 ) ; tag . appendChild ( light ) ; } if ( svgp . getIdElement ( SVGEffects . SHADOW_ID ) != null ) { button . setAttribute ( SVGConstants . SVG_FILTER_ATTRIBUTE , NUM00 + SVGEffects . SHADOW_ID + NUM00 ) ; } if ( title != null ) { Element label = svgp . svgText ( x + w * NUM00 , y + h * NUM00 , title ) ; label . setAttribute ( SVGConstants . SVG_STYLE_ATTRIBUTE , titlecss . inlineCSS ( ) ) ; tag . appendChild ( label ) ; } return tag ; }
public void add ( String gram ) { $F57400 ( name , gram ) $F1749 ( len , gram ) if ( len < NUM00 || len > NGram . N_GRAM ) $F665 ++ n_words [ len - NUM00 ] ; if $F1710 ( freq , gram ) { freq . put ( gram , freq . get ( gram ) + NUM00 ) ; } else $F248856 ( freq , gram ) }
public void test_addressing $F72 { final Journal store = ( Journal ) getStore ( ) ; try { $F205089 ( bufferStrategy , store ) $F205091 ( rw , bufferStrategy ) final $F15272 sizes = new $F15272 $F72 ; final TreeMap $F143848 paddrs = new TreeMap $F143848 $F72 ; for ( $F6268 ( i ) ) { final int s = $F6823 ( r ) ; sizes . add ( s ) ; final int a = rw . alloc ( s , null ) ; final long pa = rw . physicalAddress ( a ) ; assertTrue ( paddrs . get ( pa ) == null ) ; paddrs . put ( pa , a ) ; } for ( $F6268 ( i ) ) { final int s = $F6823 ( r ) ; sizes . add ( s ) ; final int a = rw . alloc ( s , null ) ; final long pa = rw . physicalAddress ( a ) ; paddrs . put ( pa , a ) ; } } $F17625 ( store ) }
public void handleClientMembership ( String clientId , int eventType ) { String notifType = null ; List < ManagedResource > cleanedUp = null ; if ( eventType == ClientMembershipMessage . LEFT ) { notifType = NOTIF_CLIENT_LEFT ; cleanedUp = cleanupBridgeClientResources ( clientId ) ; } else if ( eventType == ClientMembershipMessage . CRASHED ) { notifType = NOTIF_CLIENT_CRASHED ; cleanedUp = cleanupBridgeClientResources ( clientId ) ; } else if ( eventType == ClientMembershipMessage . JOINED ) { notifType = NOTIF_CLIENT_JOINED ; } if ( cleanedUp != null ) { for ( ManagedResource resource : cleanedUp ) { MBeanUtil . unregisterMBean ( resource ) ; } } Helper . sendNotification ( this , new Notification ( notifType , this . modelMBean , Helper . getNextNotificationSequenceNumber ( ) , clientId ) ) ; }
public < V extends Comparable $F42625 > OptionalDouble maxBy ( DoubleFunction $F2193 keyExtractor ) { ObjDoubleBox $F2193 result = collect ( $F32718 ) ; return result . a == null ? OptionalDouble . empty ( ) : OptionalDouble . of ( result . b ) ; }
private JLabel addKeybindLabel ( JPanel panel , String labelText ) { $F45960 ( gbc ) $F98084 ( gbc , GridBagConstraints ) $F184708 ( gbc ) gbc . gridx = NUM00 ; gbc . gridy = keybindLabelGridYCounter ++ ; gbc . weightx = NUM00 ; $F78356 ( jlbl , labelText ) panel . add ( jlbl , gbc ) ; return jlbl ; }
public static boolean isLetterOrNumber ( int c ) { return isLetter ( c ) || isNumber ( c ) ; }
public String seasonSummaryStr $F72 { setTeamRanks ( ) ; $F83 ( sb ) $F16690 ( sb , ncgSummaryStr ) sb . append ( NUM00 + userTeam . seasonSummaryStr ( ) ) ; sb . append ( NUM00 + leagueRecords . brokenRecordsStr ( getYear ( ) , userTeam . abbr ) ) ; $F92 ( sb ) }
public void addEndBumper $F72 { numEndBumpers ++ ; String name = NUM00 ; boolean duplicate = _BOOL ; while ( duplicate ) { name = NUM00 + numEndBumpers ; if ( finder . findPositionablePointByName ( name ) == null ) { duplicate = _BOOL ; } $F19814 ( duplicate , numEndBumpers ) } PositionablePoint o = new PositionablePoint ( name , PositionablePoint . END_BUMPER , currentPoint , this ) ; pointList . add ( o ) ; setDirty ( _BOOL ) ; }
$F103859 ( data , results , key )
public int pixelFor ( Color c ) { return pixelFor ( c . getRGB ( ) ) ; }
void stripNonCompiledNodes ( Node n , $F2689 filesToCompile ) { for ( Node child : n . children ( ) ) { if ( ! filesToCompile . contains ( child . getSourceFileName ( ) ) ) { child . detachFromParent ( ) ; } } }
protected void restoreBaseURI $F72 { $F34454 ( fBaseURI ) $F34454 ( fLiteralSystemID ) $F34454 ( fExpandedSystemID ) $F34454 ( fBaseURIScope ) fCurrentBaseURI . setBaseSystemId ( ( String ) fBaseURI . peek ( ) ) ; fCurrentBaseURI . setLiteralSystemId ( ( String ) fLiteralSystemID . peek ( ) ) ; fCurrentBaseURI . setExpandedSystemId ( ( String ) fExpandedSystemID . peek ( ) ) ; }
$F9863 ( child , dx , dy , _BOOL , checkHorizontal , mCallback , checkVertical , mTouchSlop , Math )
public void testToBigIntegerPos1 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue )
public static boolean asBoolean ( CharSequence string ) { return $F20 ( string ) ; }
public void initialize $F72 { TextureState ts = new TextureState $F72 ; ts . setEnabled ( _BOOL ) ; setRenderState ( ts ) ; for ( $F3836 ( i , landmarkList ) ) { LandmarkState state = landmarkList . get ( i ) ; addLandmark ( state , _BOOL ) ; } zBufferState = new ZBufferState $F72 ; zBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; zBufferState . setEnabled ( _BOOL ) ; setRenderState ( zBufferState ) ; }
public $F53328 enterTrees ( $F53328 roots ) { if $F5973 ( taskListener ) { for ( JCCompilationUnit unit : roots ) { TaskEvent e = new TaskEvent ( TaskEvent . Kind . ENTER , unit ) ; taskListener . started ( e ) ; } } enter . main ( roots ) ; if $F5973 ( taskListener ) { for ( JCCompilationUnit unit : roots ) { TaskEvent e = new TaskEvent ( TaskEvent . Kind . ENTER , unit ) ; taskListener . finished ( e ) ; } } if ( needRootClasses || sourceOutput || stubOutput ) { ListBuffer < JCClassDecl > $F53349 ( cdefs ) ; for ( JCCompilationUnit unit : roots ) { for ( List $F53352 defs = unit . defs ; defs . nonEmpty ( ) ; defs = defs . tail ) { if ( defs . head instanceof JCClassDecl ) cdefs . append ( ( JCClassDecl ) defs . head ) ; } } rootClasses = cdefs . toList ( ) ; } for ( JCCompilationUnit unit : roots ) { inputFiles . add ( unit . sourcefile ) ; } return roots ; }
final V replaceNode ( long key , V value , Object cv ) { int hash = spread ( key ) ; for ( $F75434 tab = table ; ; ) { $F75433 f ; int n , i , fh ; if ( $F35157 ( tab , n ) || $F35160 ( f , tabAt , tab , i , n , hash ) ) $F5153 else if $F35162 ( fh , f , MOVED ) $F176272 ( tab , helpTransfer , f ) else { V oldVal = null ; boolean validated = _BOOL ; synchronized ( f ) { if ( tabAt ( tab , i ) == f ) { if ( fh >= NUM00 ) { validated = _BOOL ; for ( $F75433 e = f , pred = null ; ; ) { if ( ( e . key == key ) ) { V ev = e . val ; if $F125165 ( cv , ev ) { oldVal = ev ; if ( value != null ) { e . val = value ; } else if ( pred != null ) { $F33910 ( pred , e ) } else { setTabAt ( tab , i , e . next ) ; } } $F597 } pred = e ; if ( ( e = e . next ) == null ) $F5153 } } else if ( f instanceof TreeBin ) { validated = _BOOL ; TreeBin $F2193 t = ( TreeBin $F2193 ) f ; TreeNode $F2193 r , p ; if ( ( r = t . root ) != null && ( p = r . findTreeNode ( hash , key ) ) != null ) { V pv = p . val ; if $F125165 ( cv , pv ) { oldVal = pv ; if ( value != null ) { p . val = value ; } else if ( t . removeTreeNode ( p ) ) { setTabAt ( tab , i , untreeify ( t . first ) ) ; } } } } } } if ( validated ) { if ( oldVal != null ) { if ( value == null ) { addCount ( $F64496 ) ; } return oldVal ; } $F597 } } } $F1274 }
public static LineByLineFileInputOperator checkpoint ( LineByLineFileInputOperator oper , ByteArrayOutputStream bos ) throws Exception { Kryo kryo = new Kryo $F72 ; Output loutput = new Output ( bos ) ; kryo . writeObject ( loutput , oper ) ; $F59 ( loutput ) Input lInput = new Input $F87573 ( bos ) ; $F1431 LineByLineFileInputOperator checkPointedOper = kryo . readObject ( lInput , oper . getClass ( ) ) ; $F59 ( lInput ) return checkPointedOper ; }
public static String explode $F126719 ( collection , delimiter ) { $F83 ( sb ) if $F5973 ( collection ) { $F13712 ( i , collection ) $F45691 ( sb , i ) while $F2921 ( i ) { sb . append ( delimiter ) ; $F45691 ( sb , i ) } } $F92 ( sb ) }
$F16587 ( fullyQualifiedName )
$F1 public $F14937 enumerateMeasures $F72 { $F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) }
public static void writeStatistics ( TDoubleObjectHashMap < DescriptiveStatistics > statsMap , String keyLabel , String file ) throws IOException { $F1986 keys = statsMap . keys ( ) ; Arrays . sort ( keys ) ; $F1764 ( writer , file ) writer . write ( keyLabel ) ; writer . write ( TAB ) ; $F3410 ( writer ) writer . write ( TAB ) ; $F3410 ( writer ) writer . write ( TAB ) ; $F3410 ( writer ) writer . write ( TAB ) ; $F3410 ( writer ) writer . write ( TAB ) ; $F3410 ( writer ) $F1769 ( writer ) for ( double key : keys ) { DescriptiveStatistics stats = statsMap . get ( key ) ; $F406601 ( writer , String , key ) writer . write ( TAB ) ; writer . write ( String . valueOf ( stats . getMean ( ) ) ) ; writer . write ( TAB ) ; writer . write ( String . valueOf ( stats . getPercentile ( NUM00 ) ) ) ; writer . write ( TAB ) ; writer . write ( String . valueOf ( stats . getMin ( ) ) ) ; writer . write ( TAB ) ; writer . write ( String . valueOf ( stats . getMax ( ) ) ) ; writer . write ( TAB ) ; writer . write ( String . valueOf ( stats . getN ( ) ) ) ; $F1769 ( writer ) } $F59 ( writer ) }
public void actionPerformed ( ActionEvent e ) { $F15308 ( checkModified ) if ( m_Script . getFilename ( ) == null ) $F665 try { m_Script . start ( m_Args ) ; } catch ( Exception ex ) { $F301 ( ex ) JOptionPane . showMessageDialog ( FileScriptingPanel . this , NUM00 + ex , NUM00 , JOptionPane . ERROR_MESSAGE ) ; } }
static String encodeStub ( RMIServer rmiServer , $F6253 ( env ) ) throws IOException { if ( IIOPHelper . isStub ( rmiServer ) ) return NUM00 + encodeIIOPStub ( rmiServer , env ) ; else return NUM00 + encodeJRMPStub ( rmiServer , env ) ; }
public int lineToY ( int line ) { $F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; }
private void handleDoubleClick ( DoubleClickEvent e ) { $F359183 ( selection , e ) if ( selection instanceof IStructuredSelection ) { IStructuredSelection structured = ( IStructuredSelection ) selection ; if $F10471 ( structured ) { Object first = structured . getFirstElement ( ) ; if ( first instanceof ISVNRemoteFile ) { openAction . selectionChanged ( null , selection ) ; openAction . run ( null ) ; } else { treeViewer . setExpandedState ( first , ! treeViewer . getExpandedState ( first ) ) ; } } } }
public CSVResultSetConfiguration $F72 $F845
protected File chooseFile ( int type ) { Frame frame = getFrame ( ) ; File f = null ; if ( fileChooser == null ) fileChooser = new JFileChooser $F72 ; fileChooser . setCurrentDirectory ( E00File ) ; if ( type == NUM00 ) fileChooser . setDialogType ( JFileChooser . OPEN_DIALOG ) ; else fileChooser . setDialogType ( JFileChooser . SAVE_DIALOG ) ; int retval = fileChooser . showDialog ( frame , null ) ; if ( retval == JFileChooser . APPROVE_OPTION ) f = fileChooser . getSelectedFile ( ) ; return f ; }
public void pixellate ( FontRenderContext renderFRC , Point2D loc , Point pxResult ) { $F13265 ( renderFRC , frc ) $F37301 ( at , renderFRC ) $F166803 ( at , loc ) pxResult . x = $F52991 ( loc ) ; pxResult . y = $F52994 ( loc ) ; loc . setLocation ( $F25550 ( pxResult ) ) ; try { at . inverseTransform ( loc , loc ) ; } catch ( NoninvertibleTransformException e ) $F825 }
public static long startTime $F72 { return System . nanoTime ( ) ; }
$F1230 public int deleteAll $F72 { $F5675 allEntities = retrieveAll ( ) ; for ( T entity : allEntities ) { delete ( entity ) ; } $F1651 ( allEntities ) }
private GSMessageImpl receiveFromQueue ( long timeout ) throws ReceiveFromQueueException { Transaction txn = m_session . getTransaction ( ) ; if $F6456 ( _logger , Level ) { _logger . log ( Level . FINE , NUM00 + txn ) ; } try { return ( GSMessageImpl ) m_space . take ( m_jmsMessageTemplate , txn , timeout ) ; } catch ( Exception e ) { throw new ReceiveFromQueueException ( e ) ; } }
public static void writeByteArrayToFile ( File file , $F96 data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; $F59 ( out ) } $F18090 ( IOUtils , out ) }
public String findNext ( boolean previousFlipped ) { boolean resetIsFlipped = _BOOL ; if ( previousFlipped && count > NUM00 ) { if $F87568 ( valueIterator ) { $F18058 ( valueIterator , values ) index = NUM00 ; isFlipped = _BOOL ; resetIsFlipped = _BOOL ; } else { index ++ ; } $F45366 ( currentValue , valueIterator ) } count ++ ; $F65989 ( resetIsFlipped , isFlipped , _BOOL ) return currentValue ; }
public static boolean isNotEmpty $F11546 ( list ) $F3387 ( list )
private RegistrationResult checkPassword ( String password , String confirmPassword ) { if ( ( password == null ) || $F1276 ( password ) ) { $F144577 ( debug ) return RegistrationResult . NO_PASSWORD_ERROR ; } else { if $F80353 ( password , requiredPasswordLength ) { $F144577 ( debug ) return RegistrationResult . PASSWORD_TOO_SHORT ; } if ( ( confirmPassword == null ) || $F1276 ( confirmPassword ) ) { $F144577 ( debug ) return RegistrationResult . NO_CONFIRMATION_ERROR ; } else { if $F2137 ( password , confirmPassword ) { return RegistrationResult . PASSWORD_MISMATCH_ERROR ; } } } return RegistrationResult . NO_ERROR ; }
private static LDAPFilter createANDFilter ( FilterSet filterSet ) throws LDAPException , IOException { List < JAXBElement $F1011 > list = filterSet . getFilterGroup ( ) ; ArrayList < RawFilter > $F719 ( filters , list ) ; for ( JAXBElement $F1011 filter : list ) $F3762 ( filters , createFilter , filter ) return LDAPFilter . createANDFilter ( filters ) ; }
void calculateUtility ( FiringPlan firingPlan , int overheatTolerance , boolean shooterIsAero ) { int overheat = NUM00 ; if ( firingPlan . getHeat ( ) > overheatTolerance ) { overheat = firingPlan . getHeat ( ) - overheatTolerance ; } double modifier = NUM00 ; modifier += $F7441 ( calcCommandUtility , firingPlan ) ; modifier += $F7441 ( calcStrategicBuildingTargetUtility , firingPlan ) ; modifier += $F7441 ( calcPriorityUnitTargetUtility , firingPlan ) ; double utility = NUM00 ; utility += DAMAGE_UTILITY * firingPlan . getExpectedDamage ( ) ; utility += CRITICAL_UTILITY * firingPlan . getExpectedCriticals ( ) ; utility += KILL_UTILITY * firingPlan . getKillProbability ( ) ; utility *= $F7441 ( calcTargetPotentialDamageMultiplier , firingPlan ) ; utility += TARGET_HP_FRACTION_DEALT_UTILITY * calcDamageAllocationUtility ( firingPlan . getTarget ( ) , firingPlan . getExpectedDamage ( ) ) ; utility -= $F7441 ( calcCivilianTargetDisutility , firingPlan ) ; utility *= modifier ; utility -= ( shooterIsAero ? OVERHEAT_DISUTILITY_AERO : OVERHEAT_DISUTILITY ) * overheat ; utility -= ( firingPlan . getTarget ( ) instanceof MechWarrior ) ? EJECTED_PILOT_DISUTILITY : NUM00 ; firingPlan . setUtility ( utility ) ; }
public void put ( String key , double value ) { if ( value == Double . POSITIVE_INFINITY ) $F28986 ( put , key ) else if ( value == Double . NEGATIVE_INFINITY ) $F28986 ( put , key ) else $F261761 ( put , key , Double , value ) }
public void test_fill$FIIF $F72 { float val = Float . MAX_VALUE ; float $F3234 = $F12454 ; $F47119 ( Arrays , d , val ) $F47123 ( i , assertTrue , d , val ) $F47124 ( i , d , assertTrue , val ) $F47128 ( Arrays , d , val , fail ) $F47133 ( Arrays , d , val , fail ) $F47138 ( Arrays , d , val , fail ) }
public static long persianToJulian ( long year , int month , int day ) { return NUM00 * ( ( ceil ( year - NUM00 , NUM00 ) + NUM00 ) - NUM00 ) + ( ( long ) Math . floor ( ( NUM00 * ( ceil ( year - NUM00 , NUM00 ) + NUM00 ) - NUM00 ) / NUM00 ) ) + ( PersianCalendarConstants . PERSIAN_EPOCH - NUM00 ) + NUM00 * ( ( long ) Math . floor ( ( year - NUM00 ) / NUM00 ) ) + ( month < NUM00 ? NUM00 * month : NUM00 * month + NUM00 ) + day ; }
$F1 public void mouseDragged ( MouseEvent evt ) { int xTrans = NUM00 ; int yTrans = NUM00 ; if ( slider . getSnapToTicks ( ) ) { int pos = getLocationForValue ( getSnappedValue ( evt ) ) ; if ( pos > - NUM00 ) { if ( slider . getOrientation ( ) == JSlider . HORIZONTAL ) { xTrans = pos - evt . getX ( ) + offset ; evt . translatePoint ( xTrans , NUM00 ) ; } else { yTrans = pos - evt . getY ( ) + offset ; evt . translatePoint ( NUM00 , yTrans ) ; } } } delegate . mouseDragged ( evt ) ; evt . translatePoint ( xTrans , yTrans ) ; }
$F1 final $F9341 find ( int h , Object k ) { if ( k != null ) { for ( $F9341 e = first ; e != null ; e = e . next ) { int s ; K ek ; if ( ( ( s = lockState ) & ( WAITER | WRITER ) ) != NUM00 ) { if ( e . hash == h && ( ( ek = e . key ) == k || $F35166 ( ek , k ) ) ) return e ; } else if ( U . compareAndSwapInt ( this , LOCKSTATE , s , s + READER ) ) { $F35195 ( r , p ) try { p = ( ( r = root ) == null ? null : r . findTreeNode ( h , k , null ) ) ; } finally { Thread w ; int ls ; do $F845 while ( ! U . compareAndSwapInt ( this , LOCKSTATE , ls = lockState , ls - READER ) ) ; if ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) LockSupport . unpark ( w ) ; } return p ; } } } $F1274 }
public void stopEnumeration ( EnumerationDeletionContext aws ) { aws . computeEnumerationRequest . enumerationAction = EnumerationAction . STOP ; handleEnumerationRequestForDeletion ( aws ) ; }
public static void doRestart ( Context c ) { try { if ( c != null ) { $F45547 ( pm , c ) if ( pm != null ) { Intent mStartActivity = pm . getLaunchIntentForPackage ( c . getPackageName ( ) ) ; if ( mStartActivity != null ) { mStartActivity . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; int mPendingIntentId = NUM00 ; PendingIntent mPendingIntent = PendingIntent . getActivity ( c , mPendingIntentId , mStartActivity , PendingIntent . FLAG_CANCEL_CURRENT ) ; AlarmManager mgr = ( AlarmManager ) c . getSystemService ( Context . ALARM_SERVICE ) ; mgr . set ( AlarmManager . RTC , $F113506 ( System ) , mPendingIntent ) ; $F5194 ( System ) } else $F259302 ( Log ) } else $F259302 ( Log ) } else $F259302 ( Log ) } catch ( Exception ex ) $F259302 ( Log ) }
public $F5363 values $F72 { $F3523 answer = new $F3523 $F716 ( readMethods ) ; for ( $F91960 iter = valueIterator ( ) ; iter . hasNext ( ) ; ) { answer . add ( iter . next ( ) ) ; } $F26666 ( Collections , answer ) }
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; $F1749 ( len , str ) int end = getYearMonth ( str , NUM00 , len , date ) ; date . day = DAY ; parseTimeZone ( str , end , len , date ) ; validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != NUM00 && date . utc != NUM00 ) { normalize ( date ) ; } date . position = NUM00 ; return date ; }
public ArrayVal $F9830 ( values ) { this . array = new double [ values . length ] ; for ( $F1139 ( i , array ) ) $F15086 ( array , i , values ) hashcode = Arrays . hashCode ( array ) ; }
public void addChild ( String child ) { $F2329 ( child ) String childPath = path . endsWith ( NUM00 ) ? path + child : path + NUM00 + child ; children . add ( new ZkNode ( childPath ) ) ; }
$F1219 public static boolean sendToTMaster ( String command , String topologyName , SchedulerStateManagerAdaptor stateManager , NetworkUtils . TunnelConfig tunnelConfig ) { $F35577 ( LOG , topologyName ) TopologyMaster . TMasterLocation location = stateManager . getTMasterLocation ( topologyName ) ; if ( location == null ) { $F285008 ( LOG , topologyName ) return _BOOL ; } $F35577 ( LOG , topologyName ) String url = String . format ( NUM00 , location . getHost ( ) , location . getControllerPort ( ) , command , location . getTopologyId ( ) ) ; try { $F9518 ( endpoint , url ) $F35577 ( LOG , endpoint ) return sendGetRequest ( endpoint , command , tunnelConfig ) ; } catch ( MalformedURLException e ) $F72290 ( url , e ) }
public int addPadding $F5474 ( in , inOff ) { $F18952 ( code , in , inOff ) while ( inOff < $F33765 ( in ) ) { in [ inOff ] = ( byte ) random . nextInt ( ) ; inOff ++ ; } in [ inOff ] = code ; return code ; }
public void update ( long duration , TimeUnit unit ) { update ( unit . toNanos ( duration ) ) ; }
public static String fromDoc2String ( Document doc ) throws Exception { KXmlSerializer serializer = new KXmlSerializer $F72 ; $F1538 ( bos ) $F1533 ( dos , bos ) try { $F96257 ( serializer , _BOOL ) serializer . setOutput ( dos , XformConstants . DEFAULT_CHARACTER_ENCODING ) ; doc . write ( serializer ) ; $F1206 ( serializer ) } $F84580 ( e ) return new String ( bos . toByteArray ( ) , XformConstants . DEFAULT_CHARACTER_ENCODING ) ; }
public int addOrderTerm ( GenericValue orderTerm ) $F203238 ( orderTerms , orderTerm )
public static int checkActions $F4673 ( entry ) { boolean ip6 = _BOOL ; boolean ip4 = _BOOL ; String actions = null ; if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_ACTIONS ) || entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) || entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ) { if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_ACTIONS ) ) { actions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_ACTIONS ) ; } else if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) ) { actions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_INSTR_APPLY_ACTIONS ) ; } else if ( entry . containsKey ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ) { actions = ( String ) entry . get ( StaticFlowEntryPusher . COLUMN_INSTR_WRITE_ACTIONS ) ; } if ( actions . contains ( MatchUtils . STR_ICMPV6_CODE ) || actions . contains ( MatchUtils . STR_ICMPV6_TYPE ) || actions . contains ( MatchUtils . STR_IPV6_DST ) || actions . contains ( MatchUtils . STR_IPV6_SRC ) || actions . contains ( MatchUtils . STR_IPV6_FLOW_LABEL ) || actions . contains ( MatchUtils . STR_IPV6_ND_SSL ) || actions . contains ( MatchUtils . STR_IPV6_ND_TARGET ) || actions . contains ( MatchUtils . STR_IPV6_ND_TTL ) ) { ip6 = _BOOL ; } if ( actions . contains ( MatchUtils . STR_NW_SRC ) || actions . contains ( MatchUtils . STR_NW_DST ) || actions . contains ( MatchUtils . STR_ARP_OPCODE ) || actions . contains ( MatchUtils . STR_ARP_SHA ) || actions . contains ( MatchUtils . STR_ARP_DHA ) || actions . contains ( MatchUtils . STR_ARP_SPA ) || actions . contains ( MatchUtils . STR_ARP_DPA ) || actions . contains ( MatchUtils . STR_ICMP_CODE ) || actions . contains ( MatchUtils . STR_ICMP_TYPE ) ) { ip4 = _BOOL ; } } if ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else if ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else if ( ip6 == _BOOL && ip4 == _BOOL ) $F1083 else $F7629 }
public String toString $F72 { $F83 ( stringBuilder ) for ( ValidationErrorObject error : errors ) $F221418 ( stringBuilder , error ) $F92 ( stringBuilder ) }
public static ObservableStringValue decision ( ObservableBooleanValue condition , ObservableStringValue ifTrue , ObservableStringValue ifFalse ) { StringProperty ret = new SimpleStringProperty $F72 ; condition . addListener ( null ) ; ifTrue . addListener ( null ) ; ifFalse . addListener ( null ) ; ret . set ( condition . get ( ) ? ifTrue . get ( ) : ifFalse . get ( ) ) ; return ret ; }
public static final boolean readFromStream ( InputStream in , $F96 buf , int offset , int len ) throws IOException { int totalBytesRead = NUM00 ; while ( totalBytesRead < len ) { $F113519 ( bytesRead , in , buf , offset , totalBytesRead , len ) $F7879 ( bytesRead , _BOOL ) totalBytesRead += bytesRead ; } return _BOOL ; }
public static Field findStaticField $F17798 ( type , name ) throws NoSuchFieldException { Field field = findField ( type , name ) ; if $F48024 ( Modifier , field ) { throw new NoSuchFieldException ( NUM00 + name + NUM00 ) ; } return field ; }
public void newBraces ( EditorState editorState , char ch ) { String casName = argumentHelper . readCharacters ( editorState ) ; if ( ch == FUNCTION_OPEN_KEY && metaModel . isGeneral ( casName ) ) { delCharacters ( editorState , casName . length ( ) ) ; newFunction ( editorState , casName ) ; } else if ( ch == FUNCTION_OPEN_KEY && metaModel . isFunction ( casName ) ) { delCharacters ( editorState , casName . length ( ) ) ; newFunction ( editorState , casName ) ; } else $F40485 ( newArray , editorState , ch ) }
$F1 public Xid [ ] recover ( int flag ) throws XAException { debugCodeCall ( NUM00 , quoteFlags ( flag ) ) ; checkOpen ( ) ; try $F348538 ( stat , physicalConn ) { ResultSet rs = stat . executeQuery ( NUM00 + NUM00 ) ; ArrayList < Xid > list = New . arrayList ( ) ; while $F1682 ( rs ) { $F21024 ( tid , rs ) int id = getNextId ( XID ) ; Xid xid = new JdbcXid ( factory , id , tid ) ; list . add ( xid ) ; } $F59 ( rs ) Xid [ ] result = new Xid $F2313 ( list ) ; list . toArray ( result ) ; if $F3817 ( list ) { prepared = _BOOL ; } return result ; } catch ( SQLException e ) { XAException xa = new XAException ( XAException . XAER_RMERR ) ; xa . initCause ( e ) ; throw xa ; } }
public void bind ( Texture texture ) $F115274 ( faces )
public final void clearPassword $F72 $F21018 ( Arrays , password )
private static int NewCharArray ( JNIEnvironment env , int length ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F18064 ( newArray , length ) $F79069 ( env , newArray ) } $F4287 ( traceJNI , unexpected , System , env ) }
$F125215 ( glUseProgram , quadProgram , texUniform , glGetUniformLocation , glUniform1i )
public void put ( E e ) throws InterruptedException { $F61745 ( e ) int c = - NUM00 ; $F13430 node = $F201035 ( e ) ; $F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { while $F33770 ( count , capacity ) $F24081 ( notFull ) enqueue ( node ) ; $F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } $F796 ( putLock ) $F42886 ( c , signalNotEmpty ) }
public static boolean logFileZipped ( String file ) { return file . endsWith ( NUM00 ) || file . endsWith ( NUM00 ) || file . endsWith ( NUM00 ) ; }
private void validateHasChecksumFile ( File archiveFile ) throws InvalidArchiveUpdateException { try { resolveChecksumFile ( extractFileToDirectory ( archiveFile , CHECKSUMS_FILE_IN_OPENIDM ) ) ; } catch ( Exception e ) { throw new InvalidArchiveUpdateException ( archiveFile . getName ( ) , $F2990 ( archiveFile ) , e ) ; } }
protected String ratsProblem $F72 { $F21899 ( text ) return ( text ) ; }
public $F6969 lookupEntityClass $F60993 ( objClass ) { for ( $F6969 cls = objClass ; cls != null ; cls = cls . getSuperclass ( ) ) { if ( entityBindings . containsKey ( cls ) || cls . isAnnotationPresent ( Entity . class ) ) { return cls ; } } $F11416 ( objClass ) }
private boolean isWhitespace ( int position ) { if ( _len >= NUM00 && position >= _len ) { return _BOOL ; } return Character . isWhitespace ( _working [ position ] ) ; }
private void collectWrapperClasses ( ClassLoader cl , String pkg , File file ) throws Exception { for ( $F3445 ( f , file ) ) { if $F3444 ( f ) { collectWrapperClasses ( cl , pkg + f . getName ( ) + NUM00 , f ) ; } else { addWrapperClassToWrapperClassesList ( cl , pkg , f ) ; } } }
public void clearImages $F72 { $F725 ( chunks ) $F725 ( markers ) redraw ( _BOOL ) ; shift_x = NUM00 ; shift_y = NUM00 ; zoom_level_pos = NUM00 ; zoom_level = NUM00 ; }
public void test_fill$JIIJ $F72 { long $F3234 = $F87103 ; Arrays . fill ( d , NUM00 , d . length , Long . MAX_VALUE ) ; for ( $F6268 ( i ) ) assertTrue ( NUM00 , ! ( d [ i ] == Long . MAX_VALUE ) ) ; for ( $F1139 ( i , d ) ) assertTrue ( NUM00 , d [ i ] == Long . MAX_VALUE ) ; try { Arrays . fill ( d , NUM00 , NUM00 , Long . MIN_VALUE ) ; fail ( NUM00 ) ; } $F45786 try { Arrays . fill ( d , - NUM00 , NUM00 , Long . MAX_VALUE ) ; fail ( NUM00 ) ; } $F47132 try { Arrays . fill ( d , NUM00 , d . length + NUM00 , Long . MAX_VALUE ) ; fail ( NUM00 ) ; } $F47132 }
public Object extFunction ( String ns , String funcName , Vector argVec , Object methodKey , ExpressionContext exprContext ) throws $F1872 { Object result = null ; if ( null != ns ) { $F308395 ( extNS , m_extensionFunctionNamespaces , ns ) if ( null != extNS ) { try { result = extNS . callFunction ( funcName , argVec , methodKey , exprContext ) ; } catch ( $F1872 e ) { throw e ; } catch ( Exception e ) { throw new $F1872 ( e ) ; } } else { throw new XPathProcessorException ( XSLMessages . createMessage ( XSLTErrorResources . ER_EXTENSION_FUNC_UNKNOWN , $F40356 ( ns , funcName ) ) ) ; } } return result ; }
private static void addComponent ( final JPanel panel , final Component component , final String description , final String hint ) { $F40881 ( settingPanel ) settingPanel . setBorder ( STANDARD_EMPTY_BORDER ) ; settingPanel . add ( new JLabel ( description ) , BorderLayout . CENTER ) ; $F40881 ( innerPanel ) $F30063 ( innerPanel , component , BorderLayout ) final JHintIcon hintPopup = new JHintIcon ( hint ) ; $F40867 ( hintPopup ) $F40903 ( innerPanel , hintPopup , BorderLayout ) $F40903 ( settingPanel , innerPanel , BorderLayout ) panel . add ( settingPanel ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public ReversedLinesFileReader ( final File file , final int blockSize , final String encoding ) throws IOException { this ( file , blockSize , Charsets . toCharset ( encoding ) ) ; }
private void onConnect $F72 { connectionState = ConnectionState . Connected ; checkForUpdatedFlight = _BOOL ; subscribe ( String . format ( trafficAlertChannel , flightId ) ) ; subscribe ( String . format ( situationalAwarenessChannel , flightId ) ) ; }
public static double cdf ( double x , double sigma ) { $F14825 ( x ) final double xs = x / sigma ; return NUM00 - Math . exp ( - NUM00 * xs * xs ) ; }
public double gaussianShortfall ( double target ) { final CumulativeNormalDistribution gIntegral = new CumulativeNormalDistribution $F10644 ( mean , standardDeviation ) ; return gIntegral . op ( target ) ; }
$F1 public int read $F62353 ( offset , length ) throws IOException { int byteLength = length < < NUM00 ; if ( byteLength > fBuffer . length ) $F9454 ( byteLength , fBuffer ) $F65003 ( byteCount , fInputStream , fBuffer , byteLength ) $F227776 ( byteCount ) if $F69047 ( byteCount ) { $F7468 ( b , fInputStream ) if ( b == - NUM00 ) $F5795 ( expectedTwoBytes ) $F11740 ( fBuffer , byteCount , b ) } final int charCount = byteCount > > NUM00 ; if ( fIsBigEndian ) { processBE ( ch , offset , charCount ) ; } else { processLE ( ch , offset , charCount ) ; } return charCount ; }
public static void endWrapper ( Writer writer ) throws IOException { $F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) $F3410 ( writer ) }
protected Document createConfigurationDocument ( AVList params ) { Document doc = super . createConfigurationDocument ( params ) ; if ( doc == null || doc . getDocumentElement ( ) == null ) return doc ; DataConfigurationUtils . createWMSLayerConfigElements ( params , doc . getDocumentElement ( ) ) ; return doc ; }
public void registerCallback ( String challenge , ChallengeCallbackPlugin plugin , HttpMessage attack ) { cleanExpiredCallbacks ( ) ; regCallbacks . put ( challenge , new RegisteredCallback ( plugin , attack ) ) ; }
public static double min ( Array array ) throws PageException { if ( array . getDimension ( ) > NUM00 ) $F36299 if $F10471 ( array ) $F1082 double rtn = _toDoubleValue ( array , NUM00 ) ; $F2199 ( len , array ) try { for ( $F9993 ( i , len ) ) { double v = _toDoubleValue ( array , i ) ; $F46170 ( rtn , v ) } } catch ( PageException e ) { throw new ExpressionException $F16296 ( e ) ; } return rtn ; }
public static $F96 writeToArray ( NSObject root ) throws IOException { $F1538 ( bout ) write ( bout , root ) ; $F11316 ( bout ) }
private static void loadLibraryResource ( String resourceSubdirectoryName , String libraryName , String tempSubdirectoryName , String ... dependentLibraryNames ) throws Throwable { for ( String dependentLibraryName : dependentLibraryNames ) { logger . log ( level , NUM00 + libraryName + NUM00 + dependentLibraryName ) ; String dependentResourceSubdirectoryName = resourceSubdirectoryName + NUM00 + osString ( ) + NUM00 + archString ( ) ; String dependentLibraryTempSubDirectoryName = libraryName + NUM00 + File . separator + osString ( ) + File . separator + archString ( ) + File . separator ; loadLibraryResource ( dependentResourceSubdirectoryName , dependentLibraryName , dependentLibraryTempSubDirectoryName ) ; } String libraryFileName = createLibraryFileName ( libraryName ) ; File libraryTempFile = createTempFile ( tempSubdirectoryName , libraryFileName ) ; if $F1906 ( libraryTempFile ) { String libraryResourceName = resourceSubdirectoryName + NUM00 + libraryFileName ; logger . log ( level , NUM00 + libraryResourceName ) ; logger . log ( level , NUM00 + libraryTempFile ) ; writeResourceToFile ( libraryResourceName , libraryTempFile ) ; } logger . log ( level , NUM00 + libraryTempFile ) ; System . load ( libraryTempFile . toString ( ) ) ; logger . log ( level , NUM00 + libraryTempFile + NUM00 ) ; }
private JobDefinition createJobDefinition $F72 throws Exception { namespaceDaoTestHelper . createNamespaceEntity ( TEST_ACTIVITI_NAMESPACE_CD ) ; JobDefinitionCreateRequest request = jobDefinitionServiceTestHelper . createJobDefinitionCreateRequest ( ) ; JobDefinition jobDefinition = jobDefinitionService . createJobDefinition ( request , _BOOL ) ; validateJobDefinition ( jobDefinition ) ; return jobDefinition ; }
private WebSocketInputStream openInputStream ( Socket socket ) throws WebSocketException { try { return new WebSocketInputStream ( new BufferedInputStream ( socket . getInputStream ( ) ) ) ; } catch ( IOException e ) { throw new WebSocketException ( WebSocketError . SOCKET_INPUT_STREAM_FAILURE , $F5351 ( e ) , e ) ; } }
$F1 protected void drawFirstPassShape ( Graphics2D g2 , int pass , int series , int item , Shape shape ) { if ( isShadowPass ( pass ) ) { if $F89491 ( getWallPaint ) { $F98595 ( g2 , getItemStroke , series , item ) g2 . setPaint ( getWallPaint ( ) ) ; g2 . translate ( getXOffset ( ) , getYOffset ( ) ) ; g2 . draw ( shape ) ; g2 . translate ( - getXOffset ( ) , - getYOffset ( ) ) ; } } else { super . drawFirstPassShape ( g2 , pass , series , item , shape ) ; } }
public static double asDouble ( String str , double def ) { try $F2404 ( Double , str ) $F8835 ( def ) }
public JMenu createHelpMenu $F72 { ShowHelpAction helpAction = new ShowHelpAction $F580 ; $F132272 ( helpMenu ) helpMenu . add ( helpAction ) ; return helpMenu ; }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public static void expandDigits ( String numberString , WordRelation wordRelation , Item tokenItem ) { $F1749 ( numberDigits , numberString ) for ( $F119 ( i , numberDigits ) ) { $F1280 ( digit , numberString , i ) if ( isDigit ( digit ) ) { wordRelation . addWord ( tokenItem , digit2num [ numberString . charAt ( i ) - NUM00 ] ) ; } else $F56209 ( wordRelation , tokenItem ) } }
public String longestMatch ( String input ) { TrieNode node = root ; String result = null ; for ( $F186068 ( i , input ) ) { $F93781 ( node , input , i ) $F12576 ( node ) if $F93782 ( node ) result = input . substring ( i ) ; } return result ; }
public void testMapSubClass $F72 throws Exception { $F44214 ( mapper ) MapSubClass result = mapper . readValue ( NUM00 , MapSubClass . class ) ; $F70108 ( assertEquals , result ) $F100553 ( value , result ) assertEquals ( BooleanWrapper . class , value . getClass ( ) ) ; BooleanWrapper bw = ( BooleanWrapper ) value ; assertEquals ( Boolean . TRUE , bw . b ) ; }
$F1 public $F9107 ( pcl , m_pcs )
public void addOnTagClickListener ( TagsClickListener listener ) $F23232 ( clickListeners , listener )
public void removeAllTrackingIcons $F72 { if $F8841 ( trackingIcons ) $F13478 ( trackingIcons , repaint ) }
private void readReference $F72 { $F8728 ( v_value ) $F8728 ( v_name ) $F8728 ( v_description ) DocumentEngine . readReferenceList ( v_value , v_name , v_description ) ; $F115 ( size , v_value ) $F58180 ( s_value , size ) $F58180 ( s_name , size ) $F58180 ( s_description , size ) for ( $F119 ( i , size ) ) { $F73934 ( s_value , i , v_value ) $F73934 ( s_name , i , v_name ) $F73934 ( s_description , i , v_description ) } }
protected void assertRoundTrip ( TPS expected ) throws $F6427 { $F59037 ( serialized ) { $F1538 ( baos ) $F7054 ( oos , baos ) expected . writeExternal ( oos ) ; $F1206 ( oos ) $F3031 ( serialized , baos ) } final TPS actual ; { actual = new TPS $F72 ; $F5950 ( bais , serialized ) $F67402 ( ois , bais ) actual . readExternal ( ois ) ; } assertEquals ( expected , actual ) ; }
public static double calculateContrastRatio ( double lum1 , double lum2 ) { if ( $F21197 ( lum1 , lum2 ) ) $F825 return ( Math . max ( lum1 , lum2 ) + NUM00 ) / ( Math . min ( lum1 , lum2 ) + NUM00 ) ; }
protected void reset $F72 throws XNIException $F16404 ( count , fComponents , i , c , this )
public synchronized void unregister ( String name ) { StreamScope $F1011 streamScope = byNameMap . remove ( name ) ; $F8249 ( streamScope ) $F64948 ( names , byStreamScopeMap , streamScope ) names . remove ( name ) ; if $F2979 ( names ) byStreamScopeMap . remove ( streamScope ) ; }
private String expandAffix ( String pattern , StringBuffer buffer ) { $F4910 ( buffer ) for ( $F124686 ( i , pattern ) ) { $F52837 ( c , pattern , i ) if ( c == QUOTE ) { $F47698 ( c , pattern , i ) switch ( c ) { case CURRENCY_SIGN : if ( i < pattern . length ( ) && pattern . charAt ( i ) == CURRENCY_SIGN ) { ++ i ; buffer . append ( symbols . getInternationalCurrencySymbol ( ) ) ; } else { buffer . append ( symbols . getCurrencySymbol ( ) ) ; } $F598 case PATTERN_PERCENT : c = symbols . getPercent ( ) ; $F597 case PATTERN_PER_MILLE : c = symbols . getPerMill ( ) ; $F597 case PATTERN_MINUS : c = symbols . getMinusSign ( ) ; $F597 } } buffer . append ( c ) ; } $F92 ( buffer ) }
public static QueryFunctions extractFunctions $F4374 ( filterQueries ) { final QueryFunctions result = new QueryFunctions $F72 ; $F46660 ( isEmpty , filterQueries , result ) $F808 ( arguments ) for ( String unmodifiedAnalysis : filterQueries ) { String function = extractFunction ( unmodifiedAnalysis ) ; $F806 functions ; if $F105 ( function , FUNCTION_ARGUMENT_SPLITTER ) { functions = function . split ( FUNCTION_ARGUMENT_SPLITTER ) ; } else { functions = $F8640 ( function ) ; } for ( String subFunction : functions ) { if $F105 ( subFunction , AGGREGATION_ARGUMENT_DELIMITER ) { arguments = extractAggregationParameter ( subFunction ) ; subFunction = subFunction . substring ( NUM00 , subFunction . indexOf ( AGGREGATION_ARGUMENT_DELIMITER ) ) ; } FunctionType type = FunctionType . valueOf ( subFunction . toUpperCase ( ) ) ; addFunction ( result , type , arguments ) ; } } return result ; }
protected final void fireVetoableChange $F36827 ( propertyName , oldValue , newValue ) throws PropertyVetoException { VetoableChangeSupport aVetoSupport = this . vetoSupport ; $F2329 ( aVetoSupport ) aVetoSupport . fireVetoableChange ( propertyName , Integer . valueOf ( oldValue ) , Integer . valueOf ( newValue ) ) ; }
protected boolean isValidClassname ( String classname ) { return $F8908 ( classname ) ; }
public static int number $F72 $F1652 ( _all )
public String generateInvertedString $F72 { return String . format ( NUM00 , NUM00 & generateInverted ( ) ) ; }
$F1113 public String extractPresentableUrl $F116884 ( path ) { return $F79251 ( path , File ) ; }
public String convertSWFToHTML ( URL in ) throws Exception { $F7963 ( conn , in ) conn . setAllowUserInteraction ( _BOOL ) ; $F7965 ( conn ) conn . setInstanceFollowRedirects ( _BOOL ) ; $F2410 ( conn ) return $F171458 ( convertSWFToHTML , conn ) ; }
private void initProgram $F72 { glUseProgram ( this . program ) ; viewProjMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; glUseProgram ( NUM00 ) ; }
private boolean isNegative ( final String input ) { requireNonNull ( input ) ; for ( final String negativeString : negativeStrings ) $F72434 ( input , negativeString , _BOOL ) return _BOOL ; }
$F1 protected void sendDispositionHeader ( final OutputStream out ) throws IOException { $F1932 ( LOG ) super . sendDispositionHeader ( out ) ; final String filename = source . getFileName ( ) ; if ( filename != null ) { out . write ( FILE_NAME_BYTES ) ; out . write ( QUOTE_BYTES ) ; out . write ( EncodingUtil . getAsciiBytes ( filename ) ) ; out . write ( QUOTE_BYTES ) ; } }
private $F20526 prepareResultsforDisplay ( Collection < ScoredResult > scoredResults ) { $F390500 output = new $F390500 $F716 ( scoredResults ) ; for ( ScoredResult result : scoredResults ) { $F535 ( resultMap ) if ( result . track != null ) { prepareTrackForDisplay ( result . track , resultMap ) ; } else { prepareMarkerForDisplay ( result . waypoint , resultMap ) ; } output . add ( resultMap ) ; } return output ; }
public long copy ( final InputStream from , final OutputStream to ) throws IOException { long count = NUM00 ; $F96 tmp = mByteArrayPool . get ( mTempBufSize ) ; try { while ( _BOOL ) { int read = from . read ( tmp , NUM00 , mTempBufSize ) ; $F5881 ( read , count ) $F11584 ( to , tmp , read ) count += read ; } } finally { mByteArrayPool . release ( tmp ) ; } }
private static Element infoAsElement ( Document doc , LibraryInfo info ) { $F8382 ( libraryElement , doc ) libraryElement . setAttribute ( NUM00 , info . getVersion ( ) ) ; appendPathElements ( doc , NUM00 , libraryElement , info . getBootpath ( ) ) ; appendPathElements ( doc , NUM00 , libraryElement , info . getExtensionDirs ( ) ) ; appendPathElements ( doc , NUM00 , libraryElement , info . getEndorsedDirs ( ) ) ; return libraryElement ; }
public void addChoiceValue ( String value , String i18nKey ) throws $F16995 { Map choiceValues = as . getChoiceValuesMap ( ) ; choiceValues . put ( value , i18nKey ) ; updateChoiceValues ( choiceValues ) ; }
private void notifyChange ( int previous , int current ) { if ( mOnValueChangeListener != null ) { mOnValueChangeListener . onValueChange ( this , previous , mValue ) ; } }
public void loadLibrary ( String libName ) { loadLibrary0 ( libName , RVMClass . getClassLoaderFromStackFrame ( NUM00 ) , _BOOL ) ; }
public void handleTblDataActionHrefRequest ( RequestInvocationEvent event ) { String idRepoName = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_HREF ) ) ; String curRealm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; try { IDRepoModel model = ( IDRepoModel ) getModel ( ) ; setPageSessionAttribute ( IDRepoOpViewBeanBase . IDREPO_NAME , idRepoName ) ; setPageSessionAttribute ( IDRepoOpViewBeanBase . IDREPO_TYPE , model . getIDRepoType ( curRealm , idRepoName ) ) ; IDRepoEditViewBean vb = ( IDRepoEditViewBean ) getViewBean ( IDRepoEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } $F123309 ( setInlineAlertMessage , CCAlert , e , forwardTo ) }
public Charset charset $F72 { return charset != null ? Charset . forName ( charset ) : null ; }
public boolean initialize ( DDFModule poModuleIn , String pszTagIn , $F96 pachFieldArea ) { int iFDOffset = poModuleIn . _fieldControlLength ; poModule = poModuleIn ; pszTag = pszTagIn ; _data_struct_code = DataStructCode . get ( $F254519 ( pachFieldArea ) ) ; _data_type_code = DataTypeCode . get ( $F254519 ( pachFieldArea ) ) ; if $F22503 ( Debug ) { Debug . output ( NUM00 + pszTagIn + NUM00 + _data_struct_code + NUM00 + _data_type_code + NUM00 + iFDOffset ) ; } $F96 $F154032 ( tempData , pachFieldArea , iFDOffset ) ; System . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; MutableInt nCharsConsumed = new MutableInt $F72 ; _fieldName = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; if $F22503 ( Debug ) { Debug . output ( NUM00 + pszTagIn + NUM00 + _fieldName ) ; } iFDOffset += nCharsConsumed . value ; $F154032 ( tempData , pachFieldArea , iFDOffset ) ; System . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; _arrayDescr = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; iFDOffset += nCharsConsumed . value ; $F154032 ( tempData , pachFieldArea , iFDOffset ) ; System . arraycopy ( pachFieldArea , iFDOffset , tempData , NUM00 , pachFieldArea . length - iFDOffset ) ; _formatControls = DDFUtils . fetchVariable ( tempData , tempData . length , DDF_UNIT_TERMINATOR , DDF_FIELD_TERMINATOR , nCharsConsumed ) ; if ( _data_struct_code != DataStructCode . ELEMENTARY ) { $F38676 ( buildSubfieldDefns , _arrayDescr , _BOOL ) $F38676 ( applyFormats , _formatControls , _BOOL ) } return _BOOL ; }
$F1 public void loadHeightMap ( Raster raster ) throws IOException { $F17565 ( stripHeight , Math , STRIP_ROWS , rasterLength ) int stripWidth = rasterWidth * samplesPerPixel ; int stripSize = stripWidth * stripHeight * bytesPerSample ; int numStrips = ( int ) $F98031 ( Math , rasterLength , stripHeight ) ; if ( stripSize > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; } if $F54923 ( minimum , maximum ) { computeMinMaxFromStrip ( dataType , numStrips , stripSize , stripWidth , stripHeight ) ; } loadFromStrip ( dataType , numStrips , stripSize , stripWidth , stripHeight , raster , _BOOL ) ; }
public void addFooter $F101116 ( view ) $F41100 ( view , mFooters )
public static Pair < $F2027 , $F1986 > convert ( Set < Feature > features , Lexicon lexicon , boolean trainingMode ) { TIntDoubleHashMap fMap = new TIntDoubleHashMap $F716 ( features ) ; for ( Feature feature : features ) { final int featureId = FeatureUtilities . getFeatureId ( lexicon , trainingMode , feature ) ; $F166042 ( featureId ) double value = feature . getValue ( ) + fMap . get ( featureId ) ; fMap . put ( featureId , value ) ; } $F2027 idsOriginal = fMap . keys ( ) ; $F22974 ( ids , idsOriginal ) $F5634 ( System , idsOriginal , ids ) Arrays . sort ( ids ) ; $F5311 ( vals , fMap ) int count = NUM00 ; for ( int key : ids ) { $F134636 ( vals , count , fMap , key ) } $F83164 ( ids , vals ) }
private static String creteXMLTotalCount $F83794 ( firstRow , numPFIS , numPJUR , rDefault , maxResults ) { String result = null ; Document document = DocumentHelper . createDocument ( ) ; Element root = document . addElement ( PersonKeys . XML_PERSONAS_TEXT ) ; root . addAttribute ( PersonKeys . XML_INICIO_TEXT , Integer . toString ( firstRow ) ) ; if ( ( firstRow + rDefault ) > ( numPFIS + numPJUR ) ) { root . addAttribute ( PersonKeys . XML_FIN_TEXT , Integer . toString ( numPFIS + numPJUR ) ) ; } else { root . addAttribute ( PersonKeys . XML_FIN_TEXT , Integer . toString ( firstRow + rDefault ) ) ; } root . addAttribute ( PersonKeys . XML_TOTAL_TEXT , Integer . toString ( numPFIS + numPJUR ) ) ; root . addAttribute ( PersonKeys . XML_RANGO_TEXT , Integer . toString ( rDefault ) ) ; root . addAttribute ( PersonKeys . XML_RESULT_MAX_TEXT , Integer . toString ( maxResults ) ) ; result = document . asXML ( ) ; return result ; }
public String toFeatureString ( FeatureVector fv ) { if ( numByteFeatures != fv . getNumberOfByteFeatures ( ) || numShortFeatures != fv . getNumberOfShortFeatures ( ) || numContinuousFeatures != fv . getNumberOfContinuousFeatures ( ) ) $F29525 ( fv ) $F83 ( buf ) for ( $F119 ( i , numByteFeatures ) ) { $F275070 ( buf ) buf . append ( getFeatureValueAsString ( i , fv . getByteFeature ( i ) ) ) ; } for ( $F5883 ( i , numByteFeatures , numShortFeatures ) ) { $F275070 ( buf ) buf . append ( getFeatureValueAsString ( i , fv . getShortFeature ( i ) ) ) ; } for ( int i = numByteFeatures + numShortFeatures ; i < numByteFeatures + numShortFeatures + numContinuousFeatures ; i ++ ) { $F275070 ( buf ) buf . append ( fv . getContinuousFeature ( i ) ) ; } $F92 ( buf ) }
protected void sortPopulation $F72 { if ( Properties . SHUFFLE_GOALS ) Randomness . shuffle ( population ) ; if ( isMaximizationFunction ( ) ) { Collections . sort ( population , Collections . reverseOrder ( ) ) ; } else $F57765 ( Collections , population ) }
public void clean $F72 { ChronoFullRevision cfr = firstCFR ; totalSize = size ; while ( cfr != null ) { $F41045 ( totalSize , cfr ) $F224746 ( cfr ) } if ( totalSize < MAX_STORAGE_SIZE ) $F932 cfr = firstCFR ; while ( cfr != null ) { totalSize += cfr . clean ( revisionIndex , NUM00 ) ; $F224746 ( cfr ) } ChronoStorageBlock block ; while ( last != null && totalSize >= MAX_STORAGE_SIZE ) { block = last . getIndexPrev ( ) ; if ( storage . remove ( last . getRevisionIndex ( ) ) == null ) $F11389 totalSize -= last . length ( ) ; $F90433 ( size , last ) if ( block != null ) { block . setIndexNext ( null ) ; } last . setIndexPrev ( null ) ; cfr = last . getChronoFullRevision ( ) ; totalSize += cfr . size ( ) - cfr . clean ( revisionIndex , last . getRevisionIndex ( ) ) ; if ( last == first ) { first = null ; } last = block ; } $F58463 ( System ) }
public static Number plus ( Character left , Character right ) $F209729 ( plus , Integer , left , right )
boolean containRelayState ( String relayState ) $F69736 ( relayStateMap , relayState )
public void localSearchStarted $F72 { $F3224 ( startTime , System ) endTime = startTime + Properties . LOCAL_SEARCH_BUDGET * NUM00 ; tests = NUM00 ; suites = NUM00 ; fitnessEvaluations = NUM00 ; executedStart = MaxStatementsStoppingCondition . getNumExecutedStatements ( ) ; }
$F30512 ( in , readCount , inBufferPos , count , filledBufferSum , n , currentBuffer , needNewBuffer )
public static double normalizeRadians ( double r ) { if ( r < NUM00 && r >= - TWO_PI ) return r + TWO_PI ; if ( r >= TWO_PI && r < FOUR_PI ) return r - TWO_PI ; if ( r >= NUM00 && r < TWO_PI ) return r ; r -= TWO_PI * Math . floor ( r * TWO_PI_INVERSE ) ; if ( r < NUM00 ) r += TWO_PI ; return r ; }
public static TetradMatrix convertCovToCorr ( TetradMatrix m ) { for ( int i = NUM00 ; i < m . rows ( ) ; i ++ ) { for ( int j = NUM00 ; j < m . columns ( ) ; j ++ ) { if ( Double . isNaN ( m . get ( i , j ) ) ) $F825 } } return correlation ( m ) ; }
private $F96 ungzip $F97 ( body ) { $F5950 ( bytein , body ) try ( GZIPInputStream gzin = new GZIPInputStream ( bytein ) ; ByteArrayOutputStream byteout = $F1535 ) { int res = NUM00 ; byte $F46499 = $F10314 ; while ( res >= NUM00 ) { $F81136 ( res , gzin , buf ) $F170111 ( res , byteout , buf ) } byte uncompressed [ ] = byteout . toByteArray ( ) ; return uncompressed ; } $F29052 $F1274 }
private boolean selectID ( int nodeID , boolean show ) { $F397 ( m_root , _BOOL ) log . config ( NUM00 + nodeID + NUM00 + show + NUM00 + m_root ) ; MTreeNode node = m_root . findNode ( nodeID ) ; if ( node != null ) { TreePath treePath = new TreePath $F183378 ( node ) ; log . config ( $F28567 ( node , treePath ) ) ; tree . setSelectionPath ( treePath ) ; if ( show ) { tree . makeVisible ( treePath ) ; tree . scrollPathToVisible ( treePath ) ; } return _BOOL ; } $F556 ( log , nodeID ) return _BOOL ; }
$F1 public void loadRGBA ( Raster raster ) throws IOException { $F826 ( bandStorageType ) $F6853 ( samplesPerPixel ) $F2727 ( iStream ) iStream = new FileImageInputStream $F15780 ( dataFilePath ) ; iStream . seek ( imageStart ) ; $F17565 ( stripHeight , Math , STRIP_ROWS , rasterLength ) int stripWidth = rasterWidth * samplesPerPixel ; int numStrips = ( int ) $F98031 ( Math , rasterLength , stripHeight ) ; if $F3057 ( bandStorageType ) { int stripSize = stripWidth * stripHeight * bytesPerSample ; if ( stripSize > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; } $F2175 ( bbArray , stripSize ) ByteBuffer bbuf = ByteBuffer . allocate ( NUM00 * rasterWidth * stripHeight ) ; iStream . seek ( imageStart ) ; int r = NUM00 ; for ( $F1316 ( i , numStrips ) ) { int h = Math . min ( rasterLength - stripHeight * i , stripHeight ) ; int len = h * stripWidth ; len = iStream . read ( bbArray , NUM00 , len ) ; for ( $F1316 ( j , h ) ) { for ( int k = NUM00 ; k < stripWidth ; k += samplesPerPixel ) { for ( $F1316 ( l , samplesPerPixel ) ) { bbuf . put ( bbArray [ k + l ] ) ; } if ( samplesPerPixel == NUM00 ) { $F31279 ( bbuf ) } } r ++ ; } $F23501 ( bbuf ) raster . set ( r , h , bbArray ) ; } } else if $F3057 ( bandStorageType ) { int stripSize = rasterWidth * stripHeight ; if ( stripSize > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( NUM00 + Integer . MAX_VALUE + NUM00 ) ; } $F3223 ( raster ) $F96 bArray = new byte [ NUM00 * rasterWidth * stripHeight ] ; $F2175 ( bbArray , stripSize ) iStream . seek ( imageStart ) ; for ( $F1316 ( k , samplesPerPixel ) ) { int r = NUM00 ; for ( $F1316 ( i , numStrips ) ) { int h = Math . min ( rasterLength - stripHeight * i , stripHeight ) ; int len = h * rasterWidth ; len = iStream . read ( bbArray , NUM00 , len ) ; for ( $F1316 ( j , h ) ) { raster . get ( r , bArray ) ; for ( $F1316 ( c , rasterWidth ) ) { bArray [ c * NUM00 + k ] = bbArray [ c ] ; } raster . set ( r , NUM00 , bArray ) ; r ++ ; } } } } if ( minimum == null ) { minimum = new double $F104039 ; } if ( maximum == null ) { maximum = new double $F104039 ; } }
protected final boolean isListState $F72 { return stateTextTypes . charAt ( state ) == NUM00 ; }
private static Class < ? extends Activity > guessErrorActivityClass ( Context context ) { Class < ? extends Activity > resolvedActivityClass ; resolvedActivityClass = CustomActivityOnCrash . getErrorActivityClassWithIntentFilter ( context ) ; if ( resolvedActivityClass == null ) { resolvedActivityClass = DefaultErrorActivity . class ; } return resolvedActivityClass ; }
public void loadGlyphs ( String chars ) throws NoGlyphException { $F7782 ( chs , chars ) for ( $F1139 ( i , chs ) ) { getGlyph ( chs [ i ] , null ) ; } }
private void initQuestAndAddToWorld ( final IQuest quest ) { $F170638 ( logger , quest ) quest . addToWorld ( ) ; quests . add ( quest ) ; }
public static MoveCommand [ ] values ( int f , GameOptions opts , boolean forwardIni ) { boolean manualShutdown = _BOOL , selfDestruct = _BOOL ; if ( opts != null ) { manualShutdown = opts . booleanOption ( NUM00 ) ; selfDestruct = opts . booleanOption ( NUM00 ) ; } ArrayList < MoveCommand > flaggedCmds = new ArrayList < MoveCommand > $F72 ; for ( $F40424 ( cmd , MoveCommand ) ) { if ( ( cmd == MOVE_SHUTDOWN || cmd == MOVE_STARTUP ) && ! manualShutdown ) $F1448 if ( cmd == MOVE_SELF_DESTRUCT && ! selfDestruct ) $F1448 if ( cmd == MOVE_FORWARD_INI && ! forwardIni ) $F1448 if ( ( cmd . flag & f ) == f ) $F207 ( flaggedCmds , cmd ) } return flaggedCmds . toArray ( new MoveCommand $F380 ) ; }
public boolean isLDAP $F72 { String host = getLDAPHost ( ) ; $F72105 ( host , _BOOL ) String domain = getLDAPDomain ( ) ; $F179974 ( domain ) }
public void shedCache $F72 { Connection [ ] conn ; synchronized ( freeList ) { conn = freeList . toArray ( new Connection $F2313 ( freeList ) ) ; $F725 ( freeList ) } for ( $F45516 ( i , conn ) ) { Connection c = conn [ i ] ; conn [ i ] = null ; try $F881 ( c ) $F42485 } }
public static $F96 hash ( InputStream in ) throws IOException { if ( HASH_DIGEST == null ) { throw new EvernoteUtilException ( EDAM_HASH_ALGORITHM + NUM00 , new NoSuchAlgorithmException ( EDAM_HASH_ALGORITHM ) ) ; } $F12496 ( buf ) int n ; while $F18067 ( n , in , buf ) { $F118814 ( HASH_DIGEST , buf , n ) } $F70686 ( HASH_DIGEST ) }
public $F96 readRawBytes ( final int size ) throws IOException { if ( size < NUM00 ) { throw InvalidProtocolBufferNanoException . negativeSize ( ) ; } if ( bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - bufferPos ) ; throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } if ( size <= bufferSize - bufferPos ) { $F4727 ( bytes , size ) $F21535 ( System , buffer , bufferPos , bytes , size ) bufferPos += size ; return bytes ; } else { throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } }
public abstract TreeNode createNode $F6803 ( x , y ) ;
$F1431 public static < T extends FeatureStructure > $F5675 toList ( FSArray array ) { if ( array == null ) { return new $F5676 $F72 ; } else { return ( $F5675 ) Arrays . asList ( array . toArray ( ) ) ; } }
private void resetNotes2 $F72 { if ( errorInStatus2 ) { if ( editMode ) $F59925 ( statusText1 , editStatus2 ) else $F59925 ( statusText2 , stdStatus2 ) errorInStatus2 = _BOOL ; } }
protected static int toDigit ( final char ch , final int index ) throws IllegalArgumentException { final int digit = Character . digit ( ch , NUM00 ) ; if ( digit == - NUM00 ) $F20855 ( ch , index ) return digit ; }
public static ServerSideSortRequestControl newControl ( final boolean isCritical , final Collection < SortKey > keys ) { Reject . ifNull ( keys ) ; Reject . ifFalse ( $F27376 ( keys ) ) ; return new ServerSideSortRequestControl ( isCritical , Collections . unmodifiableList ( new ArrayList < SortKey > ( keys ) ) ) ; }
$F45923 static < E extends Comparable $F11685 > AutoSortedCollection $F11685 createAutoSortedCollection ( Supplier < List < SortedListElement $F11685 > > listSup , Collection $F22448 values ) { List list = listSup . get ( ) ; if $F5973 ( list ) $F4639 AutoSortedCollection $F11685 sortedCollection = new AutoListSortedCollection $F200 ( list , null ) ; sortedCollection . addAll ( values ) ; return sortedCollection ; }
private void intStream $F72 { $F2027 ints = new int [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; IntStream intStream = IntStream . of ( ints ) ; $F22620 ( intStream ) IntStream intStream2 = IntStream . of ( NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; $F22620 ( intStream2 ) }
$F1431 public boolean isCustomized $F72 { if ( m_customizationLevel == null ) { getElementID ( ) ; m_customizationLevel = new Integer ( s_parameters . CUSTOMNONE ) ; if ( m_parent . isCustomPrefix ( m_name ) ) { m_customizationLevel = new Integer ( s_parameters . CUSTOMPREFIXED ) ; } else { if ( m_parent . isObjectExists ( NUM00 , m_parent . getTables ( ) ) && m_parent . isObjectExists ( NUM00 , m_parent . getTables ( ) ) ) { String sql = s_dbEngine . sqlAD_getTableColumnEntityType ( m_parent . getVendor ( ) , m_parent . getCatalog ( ) , m_parent . getSchema ( ) , m_table , m_name ) ; Statement stmt = m_parent . setStatement ( ) ; ResultSet rs = m_parent . executeQuery ( stmt , sql ) ; if ( m_parent . getResultSetNext ( rs ) ) { String s = m_parent . getResultSetString ( rs , NUM00 ) ; if ( m_parent . isCustomEntityType ( s ) ) m_customizationLevel = new Integer ( s_parameters . CUSTOMMARKED ) ; } m_parent . releaseResultSet ( rs ) ; m_parent . releaseStatement ( stmt ) ; } } } if ( m_customizationLevel . intValue ( ) > s_parameters . CUSTOMNONE ) return _BOOL ; else return _BOOL ; }
private void reloadQueue $F72 { String q = null ; int id = mCardId ; if $F3578 ( mPreferences ) { id = mPreferences . getInt ( NUM00 , ~ mCardId ) ; } if ( id == mCardId ) { q = $F299346 ( mPreferences ) ; } int qlen = q != null ? q . length ( ) : NUM00 ; if ( qlen > NUM00 ) { int plen = NUM00 ; int n = NUM00 ; int shift = NUM00 ; for ( $F119 ( i , qlen ) ) { $F1090 ( c , q , i ) if ( c == NUM00 ) { ensurePlayListCapacity ( plen + NUM00 ) ; mPlayList [ plen ] = n ; plen ++ ; n = NUM00 ; shift = NUM00 ; } else { if $F19295 ( c ) { n += c - NUM00 < < shift ; } else if $F19295 ( c ) { n += NUM00 + c - NUM00 < < shift ; } else { plen = NUM00 ; $F597 } shift += NUM00 ; } } mPlayListLen = plen ; final int pos = mPreferences . getInt ( NUM00 , NUM00 ) ; if ( pos < NUM00 || pos >= mPlayListLen ) { mPlayListLen = NUM00 ; $F665 } mPlayPos = pos ; updateCursor ( mPlayList [ mPlayPos ] ) ; if ( mCursor == null ) { $F9470 ( SystemClock ) updateCursor ( mPlayList [ mPlayPos ] ) ; } synchronized ( this ) { closeCursor ( ) ; mOpenFailedCounter = NUM00 ; openCurrentAndNext ( ) ; } if ( mPlayer == null || $F225104 ( mPlayer ) ) { mPlayListLen = NUM00 ; $F665 } final long seekpos = mPreferences . getLong ( NUM00 , NUM00 ) ; seek ( seekpos >= NUM00 && seekpos < duration ( ) ? seekpos : NUM00 ) ; if ( D ) { LOG . info ( NUM00 + position ( ) + NUM00 + duration ( ) + NUM00 + seekpos + NUM00 ) ; } int repmode = mPreferences . getInt ( NUM00 , REPEAT_NONE ) ; if ( repmode != REPEAT_ALL && repmode != REPEAT_CURRENT ) { repmode = REPEAT_NONE ; } mRepeatMode = repmode ; int shufmode = mPreferences . getInt ( NUM00 , SHUFFLE_NONE ) ; if ( shufmode != SHUFFLE_AUTO && shufmode != SHUFFLE_NORMAL ) { shufmode = SHUFFLE_NONE ; } if ( shufmode != SHUFFLE_NONE ) { q = $F299346 ( mPreferences ) ; qlen = q != null ? q . length ( ) : NUM00 ; if ( qlen > NUM00 ) { n = NUM00 ; shift = NUM00 ; $F725 ( mHistory ) for ( $F119 ( i , qlen ) ) { $F1090 ( c , q , i ) if ( c == NUM00 ) { if ( n >= mPlayListLen ) { $F725 ( mHistory ) $F597 } mHistory . add ( n ) ; n = NUM00 ; shift = NUM00 ; } else { if $F19295 ( c ) { n += c - NUM00 < < shift ; } else if $F19295 ( c ) { n += NUM00 + c - NUM00 < < shift ; } else { $F725 ( mHistory ) $F597 } shift += NUM00 ; } } } } if ( shufmode == SHUFFLE_AUTO ) { if $F931 ( makeAutoShuffleList ) { shufmode = SHUFFLE_NONE ; } } mShuffleMode = shufmode ; } }
public final void scheduledForFlush $F72 $F24242 ( scheduledForFlush , _BOOL )
public ImageInfo inspectImage ( String image ) throws IOException { return inspectImage ( InspectImageParams . create ( image ) ) ; }
$F1 public double prevCumulativeQuantity ( final Long woActivityId , Long mbHeaderId ) { if ( mbHeaderId == null ) mbHeaderId = - NUM00 ; final $F131 params = new Object [ ] { mbHeaderId , mbHeaderId , WorksConstants . CANCELLED_STATUS , woActivityId } ; final Double pQuant = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; if ( pQuant == null ) $F1082 else $F12165 ( pQuant ) }
void receive ( int length , DataInputStream in ) throws IOException { synchronized ( lock ) { if ( ( pos > NUM00 ) && ( ( buffer . length - present ) < length ) ) { System . arraycopy ( buffer , pos , buffer , NUM00 , present - pos ) ; present -= pos ; pos = NUM00 ; } if ( ( buffer . length - present ) < length ) $F3575 in . readFully ( buffer , present , length ) ; present += length ; requested -= length ; $F165 ( lock ) } }
public JDABuilder removeListener ( Object listener ) $F120129 ( listeners , listener , this )
$F221804 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
private static $F3803 readFile ( File file ) throws IOException { $F35542 ( fr , file ) $F20481 ( br , fr ) $F10144 ( lines ) String line ; while $F443 ( line , br ) lines . add ( line ) ; $F59 ( fr ) $F59 ( br ) return lines ; }
FlexibleNode readExternalNode ( HashMap < String , Taxon > translationList ) throws ImportException , IOException { FlexibleNode node = new FlexibleNode $F72 ; String label = readToken ( NUM00 ) ; Taxon taxon ; if $F3817 ( translationList ) { taxon = translationList . get ( label ) ; if ( taxon == null ) { throw new UnknownTaxonException ( NUM00 + label + NUM00 ) ; } } else { taxon = new Taxon ( label ) ; } if $F89491 ( getLastMetaComment ) { parseMigrationString ( getLastMetaComment ( ) , node ) ; clearLastMetaComment ( ) ; } node . setTaxon ( taxon ) ; int pop = Integer . parseInt ( $F43978 ( label ) ) ; node . setAttribute ( POP , ( pop - NUM00 ) ) ; return node ; }
static void plugTogetherPair ( InputStream in , OutputStream out , InputStream in1 , OutputStream out1 ) { Thread inThread = null ; Thread outThread = null ; int nExecs = getNumExec ( ) ; inThread = AccessController . doPrivileged ( new NewThreadAction ( new PipeWriter ( in , out , NUM00 , nExecs ) , NUM00 , _BOOL ) ) ; outThread = AccessController . doPrivileged ( new NewThreadAction ( new PipeWriter ( in1 , out1 , NUM00 , nExecs ) , NUM00 , _BOOL ) ) ; $F2346 ( inThread ) $F2346 ( outThread ) }
$F4170 public static StorableFence and ( $F4170 StorableFence ... fences ) { return StorableFence . and ( Arrays . asList ( fences ) ) ; }
public MXFUID $F97 ( uid ) { $F17879 ( this , Arrays , uid ) }
private int shrinkFlexItems ( FlexLine flexLine , @ FlexDirection int flexDirection , int maxMainSize , int paddingAlongMainAxis , int startIndex ) { int childIndex = startIndex ; int sizeBeforeShrink = flexLine . mMainSize ; if ( flexLine . mTotalFlexShrink <= NUM00 || maxMainSize > flexLine . mMainSize ) { childIndex += flexLine . mItemCount ; return childIndex ; } boolean needsReshrink = _BOOL ; float unitShrink = ( flexLine . mMainSize - maxMainSize ) / flexLine . mTotalFlexShrink ; float accumulatedRoundError = NUM00 ; flexLine . mMainSize = paddingAlongMainAxis + flexLine . mDividerLengthInMainSize ; for ( int i = NUM00 ; i < flexLine . mItemCount ; i ++ ) { View child = getReorderedChildAt ( childIndex ) ; if ( child == null ) $F1448 else if ( child . getVisibility ( ) == View . GONE ) $F118993 ( childIndex ) $F310049 ( lp , child ) if ( isMainAxisDirectionHorizontal ( flexDirection ) ) { if ( ! mChildrenFrozen [ childIndex ] ) { float rawCalculatedWidth = child . getMeasuredWidth ( ) - unitShrink * lp . flexShrink ; if ( i == flexLine . mItemCount - NUM00 ) { rawCalculatedWidth += accumulatedRoundError ; accumulatedRoundError = NUM00 ; } int newWidth = Math . round ( rawCalculatedWidth ) ; if ( newWidth < lp . minWidth ) { needsReshrink = _BOOL ; newWidth = lp . minWidth ; mChildrenFrozen [ childIndex ] = _BOOL ; flexLine . mTotalFlexShrink -= lp . flexShrink ; } else { accumulatedRoundError += ( rawCalculatedWidth - newWidth ) ; if ( accumulatedRoundError > NUM00 ) { newWidth += NUM00 ; accumulatedRoundError -= NUM00 ; } else if ( accumulatedRoundError < - NUM00 ) { newWidth -= NUM00 ; accumulatedRoundError += NUM00 ; } } child . measure ( $F19050 ( MeasureSpec , newWidth ) , MeasureSpec . makeMeasureSpec ( child . getMeasuredHeight ( ) , MeasureSpec . EXACTLY ) ) ; } flexLine . mMainSize += $F239295 ( child , lp ) ; } else { if ( ! mChildrenFrozen [ childIndex ] ) { float rawCalculatedHeight = child . getMeasuredHeight ( ) - unitShrink * lp . flexShrink ; if ( i == flexLine . mItemCount - NUM00 ) { rawCalculatedHeight += accumulatedRoundError ; accumulatedRoundError = NUM00 ; } int newHeight = Math . round ( rawCalculatedHeight ) ; if ( newHeight < lp . minHeight ) { needsReshrink = _BOOL ; newHeight = lp . minHeight ; mChildrenFrozen [ childIndex ] = _BOOL ; flexLine . mTotalFlexShrink -= lp . flexShrink ; } else { accumulatedRoundError += ( rawCalculatedHeight - newHeight ) ; if ( accumulatedRoundError > NUM00 ) { newHeight += NUM00 ; accumulatedRoundError -= NUM00 ; } else if ( accumulatedRoundError < - NUM00 ) { newHeight -= NUM00 ; accumulatedRoundError += NUM00 ; } } child . measure ( MeasureSpec . makeMeasureSpec ( child . getMeasuredWidth ( ) , MeasureSpec . EXACTLY ) , $F19050 ( MeasureSpec , newHeight ) ) ; } flexLine . mMainSize += child . getMeasuredHeight ( ) + lp . topMargin + lp . bottomMargin ; } childIndex ++ ; } if ( needsReshrink && sizeBeforeShrink != flexLine . mMainSize ) { shrinkFlexItems ( flexLine , flexDirection , maxMainSize , paddingAlongMainAxis , startIndex ) ; } return childIndex ; }
public static DataModelList serializableInstance $F72 { return new DataModelList $F72 ; }
$F1 public MBHeader findLastMBPageNoForLineItem ( final WorkOrderActivity workOrderActivity , final Long mbHeaderId ) { $F973 ( logger ) String query = NUM00 ; $F131 params ; final $F6689 paramList = new $F3523 $F72 ; query = query + NUM00 + NUM00 + NUM00 + NUM00 ; $F42096 ( paramList , workOrderActivity ) paramList . add ( mbHeaderId ) ; paramList . add ( WorksConstants . APPROVED ) ; paramList . add ( mbHeaderId ) ; params = $F103414 ( paramList ) ; $F5443 ( params , paramList ) final List < MBHeader > mbHeaderList = genericService . findAllBy ( query , params ) ; MBHeader result = null ; if $F1032 ( mbHeaderList ) $F36986 ( result , mbHeaderList ) return result ; }
synchronized private void outputBufferedChunk $F72 { if ( smallChunks == null || chunkSize == NUM00 ) $F932 if $F10471 ( smallChunks ) { $F254829 ( outputChunk , smallChunks ) chunkSize = NUM00 ; smallChunks = null ; $F665 } final IBindingSet [ ] chunk = new IBindingSet [ chunkSize ] ; int destPos = NUM00 ; for ( IBindingSet [ ] e : smallChunks ) $F181805 ( System , e , chunk , destPos ) outputChunk ( chunk ) ; chunkSize = NUM00 ; smallChunks = null ; }
$F69921 ( b , off , len , length , data , enlarge , System , this )
private void waitLoadCompete $F72 { $F5453 ( m_loadComplete ) m_loader . setPriority ( Thread . NORM_PRIORITY ) ; $F156357 ( log ) while $F44356 ( m_loader ) { try $F31130 ( Thread ) $F209655 ( log , Level , e ) } $F156357 ( log ) }
$F1431 private void dtdatt ( Pair elm ) throws Exception { char attqn [ ] = null ; Pair att = null ; char ch ; for ( short st = NUM00 ; st >= NUM00 ; ) { ch = getch ( ) ; switch ( st ) { $F3366 switch ( chtyp ( ch ) ) { $F1262 $F1262 $F1262 $F1262 $F1262 bkch ( ) ; attqn = qname ( mIsNSAware ) ; att = find ( elm . list , attqn ) ; if ( att == null ) { att = pair ( elm . list ) ; att . chars = attqn ; elm . list = att ; } else { att = pair ( null ) ; att . chars = attqn ; att . id = NUM00 ; } wsskip ( ) ; st = NUM00 ; $F597 $F151812 ( pent ) $F151814 $F151807 ( panic , FAULT ) } $F597 $F3366 switch ( chtyp ( ch ) ) { $F1262 att . id = NUM00 ; st = NUM00 ; $F597 $F151812 ( pent ) $F151814 $F1267 bkch ( ) ; bntok ( ) ; att . id = bkeyword ( ) ; switch ( att . id ) { $F1262 if $F151815 ( wsskip ) { panic ( FAULT ) ; } ch = getch ( ) ; st = NUM00 ; $F597 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 wsskip ( ) ; st = NUM00 ; $F597 $F151807 ( panic , FAULT ) } $F597 } $F597 $F3366 switch ( chtyp ( ch ) ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 bkch ( ) ; switch ( att . id ) { $F151804 ( bntok ) $F1262 mBuffIdx = - NUM00 ; bname ( _BOOL ) ; $F597 $F151807 ( panic , FAULT ) } wsskip ( ) ; st = NUM00 ; $F597 $F151812 ( pent ) $F151814 $F151807 ( panic , FAULT ) } $F597 $F3366 switch ( ch ) { $F1262 wsskip ( ) ; st = NUM00 ; $F597 $F1262 wsskip ( ) ; switch ( att . id ) { $F151804 ( bntok ) $F1262 mBuffIdx = - NUM00 ; bname ( _BOOL ) ; $F597 $F151807 ( panic , FAULT ) } wsskip ( ) ; $F597 $F151812 ( pent ) $F151807 ( panic , FAULT ) } $F597 $F3366 switch ( ch ) { $F1262 bntok ( ) ; switch ( bkeyword ( ) ) { $F1262 switch ( wsskip ( ) ) { $F1262 $F1262 st = NUM00 ; $F597 case EOS : panic ( FAULT ) ; $F1267 st = - NUM00 ; $F597 } $F597 $F1262 $F1262 st = - NUM00 ; $F597 $F151807 ( panic , FAULT ) } $F597 $F1262 $F1262 bkch ( ) ; st = NUM00 ; $F597 $F1262 $F1262 $F1262 $F1262 $F597 $F151812 ( pent ) $F1267 bkch ( ) ; st = - NUM00 ; $F597 } $F597 $F3366 switch ( ch ) { $F1262 $F1262 bkch ( ) ; bqstr ( NUM00 ) ; att . list = pair ( null ) ; att . list . chars = new char [ att . chars . length + mBuffIdx + NUM00 ] ; System . arraycopy ( att . chars , NUM00 , att . list . chars , NUM00 , att . chars . length - NUM00 ) ; att . list . chars [ att . chars . length - NUM00 ] = NUM00 ; att . list . chars [ att . chars . length ] = ch ; System . arraycopy ( mBuff , NUM00 , att . list . chars , att . chars . length + NUM00 , mBuffIdx ) ; att . list . chars [ att . chars . length + mBuffIdx + NUM00 ] = ch ; att . list . chars [ att . chars . length + mBuffIdx + NUM00 ] = NUM00 ; st = - NUM00 ; $F597 $F151807 ( panic , FAULT ) } $F597 $F151807 ( panic , FAULT ) } } }
public void addClasses $F24643 ( classNames ) { $F30647 ( handlerFactories ) handlerFactories . addAll ( classNames ) ; }
public static boolean isConstantName ( String name ) { return Pattern . matches ( NUM00 , name ) ; }
private void notifyDead ( final RPEntity dead ) { if $F40971 ( rats , dead ) { logger . warn ( $F369 ( dead ) ) ; } if $F10471 ( rats ) { phaseToDefaultPhase ( new $F28830 ( Arrays . asList ( NUM00 ) ) ) ; } }
public static OMGrid read ( DataInputStream dis ) throws IOException $F13736 ( read , dis )
public VarcharConstant ( String s ) { type = new VarcharType $F45530 ( s ) ; val = s ; }
public boolean addChildPlanet ( DimensionProperties child ) { if ( child == this ) return _BOOL ; $F42096 ( childPlanets , child ) child . setParentPlanet ( this ) ; return _BOOL ; }
$F1 public $F14937 enumerateMeasures $F72 { $F75150 ( newVector ) $F18793 ( newVector ) $F1007 ( newVector ) }
$F2027 calculateRelative $F23416 ( absolute ) { $F22974 ( res , absolute ) $F603 ( res , absolute ) for ( $F1139 ( i , res ) ) { res [ i ] = $F52395 ( absolute , i ) ; } return res ; }
@ AfterClass public static void deleteLogDir $F72 { if ( logDir != null ) { FileUtils . deleteQuietly ( logDir ) ; } }
public String toString $F72 { $F280 ( sb ) $F1469 separator = $F4582 ; int n = rows ( ) ; int m = columns ( ) ; for ( $F119 ( i , n ) ) { separator [ NUM00 ] = NUM00 ; for ( $F119 ( j , m ) ) { sb . append ( separator ) ; $F53015 ( sb , components , i , j ) separator [ NUM00 ] = NUM00 ; } $F84 ( sb ) $F84 ( sb ) } $F92 ( sb ) }
public static $F806 splitStringIntoArray ( String value ) { $F808 ( values ) if $F22 ( value ) { if ( value . indexOf ( CIMConstants . COMMA_SEPERATOR ) != - NUM00 ) { $F10128 ( values , value ) } else { $F384 ( values ) values [ NUM00 ] = value ; } } return values ; }
public static String fromAttrModelingModelClass ( String vaModelClass ) { return vaModelClass . split ( ValueAnalysis . MODEL_PACKAGE_PREFIX ) [ NUM00 ] ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public synchronized void add ( DccLocoAddress locoAddress , boolean directionNormal ) { if ( ! contains ( locoAddress ) ) { if $F10471 ( ConsistList ) { byte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_LEAD ; if ( ! directionNormal ) { command = NceBinaryCommand . LOCO_CMD_REV_CONSIST_LEAD ; } addLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; ConsistPosition . put ( locoAddress , DccConsist . POSITION_LEAD ) ; } else if $F10471 ( ConsistList ) { byte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_REAR ; if ( ! directionNormal ) { command = NceBinaryCommand . LOCO_CMD_REV_CONSIST_REAR ; } addLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; ConsistPosition . put ( locoAddress , DccConsist . POSITION_TRAIL ) ; } else { byte command = NceBinaryCommand . LOCO_CMD_FWD_CONSIST_MID ; if ( ! directionNormal ) { command = NceBinaryCommand . LOCO_CMD_REV_CONSIST_MID ; } addLocoToConsist ( locoAddress . getNumber ( ) , locoAddress . isLongAddress ( ) , command ) ; ConsistPosition . put ( locoAddress , ConsistPosition . size ( ) ) ; } ConsistList . add ( locoAddress ) ; $F33227 ( ConsistDir , locoAddress , Boolean , directionNormal ) } else { log . error ( NUM00 + locoAddress + NUM00 + getConsistAddress ( ) ) ; } }
private GridClientConfiguration clientConfiguration $F72 { GridClientConfiguration cfg = new GridClientConfiguration $F72 ; cfg . setTopologyRefreshFrequency ( topologyRefreshFrequency ( ) ) ; cfg . setMaxConnectionIdleTime ( maxConnectionIdleTime ( ) ) ; cfg . setProtocol ( protocol ( ) ) ; cfg . setServers ( Arrays . asList ( serverAddress ( ) ) ) ; cfg . setBalancer ( new GridClientRoundRobinBalancer $F72 ) ; if ( useSsl ( ) ) cfg . setSslContextFactory ( sslContextFactory ( ) ) ; GridClientDataConfiguration loc = new GridClientDataConfiguration $F72 ; GridClientDataConfiguration partitioned = new GridClientDataConfiguration $F72 ; partitioned . setName ( PARTITIONED_CACHE_NAME ) ; partitioned . setAffinity ( new GridClientPartitionAffinity $F72 ) ; GridClientDataConfiguration partitionedAsyncBackup = new GridClientDataConfiguration $F72 ; partitionedAsyncBackup . setName ( PARTITIONED_ASYNC_BACKUP_CACHE_NAME ) ; partitionedAsyncBackup . setAffinity ( new GridClientPartitionAffinity $F72 ) ; GridClientDataConfiguration replicated = new GridClientDataConfiguration $F72 ; replicated . setName ( REPLICATED_CACHE_NAME ) ; GridClientDataConfiguration replicatedAsync = new GridClientDataConfiguration $F72 ; replicatedAsync . setName ( REPLICATED_ASYNC_CACHE_NAME ) ; cfg . setDataConfigurations ( Arrays . asList ( loc , partitioned , replicated , replicatedAsync , partitionedAsyncBackup ) ) ; return cfg ; }
public final TestSubscriber assertNotSubscribed $F72 { String prefix = NUM00 ; $F61921 ( done , prefix ) if $F212185 ( subscription ) $F16882 ( fail , prefix , errors ) else if $F5973 ( errors ) $F16882 ( fail , prefix , errors ) return this ; }
public Builder $F72 { setVersionCode ( Math . min ( FreshAir . getCurrentApplicationVersion ( ) , NUM00 ) ) ; setFeatures ( new LinkedList < FeatureInfo > $F72 ) ; }
protected String convertDateFormat ( String pattern ) { boolean inside = _BOOL ; boolean mark = _BOOL ; boolean modifiedCommand = _BOOL ; $F83 ( buf ) for ( $F1088 ( i , pattern ) ) { $F1280 ( c , pattern , i ) if ( c == NUM00 && ! mark ) { mark = _BOOL ; } else { if ( mark ) { if ( modifiedCommand ) { modifiedCommand = _BOOL ; mark = _BOOL ; } else { inside = translateCommand ( buf , pattern , i , inside ) ; if $F37111 ( c ) { modifiedCommand = _BOOL ; } else { mark = _BOOL ; } } } else { if ( ! inside && c != NUM00 ) $F19003 ( buf , inside , _BOOL ) buf . append ( c ) ; } } } if $F4012 ( buf ) { $F185195 ( lastChar , buf ) if ( lastChar != NUM00 && inside ) $F86 ( buf ) } $F92 ( buf ) }
public void addChildNode ( EvalFactoryNode childNode ) $F207 ( childNodes , childNode )
public final void headTo ( Tuple3d p ) { double angle = Geometric . angle ( this . location , p ) ; turnTo ( Math . toDegrees ( angle ) ) ; }
public void compactBuffer $F72 { if ( offset != buffer . length ) { $F2175 ( newBuffer , offset ) $F135 ( System , buffer , newBuffer , offset ) buffer = newBuffer ; } }
public static $F96 decode ( String s ) $F36684 ( decode , s )
public static int putByteBuffer ( $F96 bytes , int offset , ByteBuffer buf ) { $F45850 ( len , buf ) buf . get ( bytes , offset , len ) ; return offset + len ; }
private void clearIndexToFirst $F72 { for ( $F589 ) { $F154321 ( q , head ) for ( $F589 ) { $F154323 ( r , q ) if ( r != null && r . indexesDeletedNode ( ) && ! q . unlink ( r ) ) $F597 if ( ( q = q . down ) == null ) { if ( head . right == null ) tryReduceLevel ( ) ; $F665 } } } }
final void tryTerminate $F72 { for ( $F589 ) { $F8943 ( c , ctl ) if ( isRunning ( c ) || runStateAtLeast ( c , TIDYING ) || ( runStateOf ( c ) == SHUTDOWN && $F1030 ( workQueue ) ) ) $F665 if ( workerCountOf ( c ) != NUM00 ) $F14411 ( interruptIdleWorkers , ONLY_ONE ) $F677 ( mainLock , this ) $F8934 ( mainLock ) try { if ( ctl . compareAndSet ( c , ctlOf ( TIDYING , NUM00 ) ) ) { try $F5795 ( terminated ) finally { ctl . set ( ctlOf ( TERMINATED , NUM00 ) ) ; $F39065 ( termination ) } $F665 } } $F796 ( mainLock ) } }
public void joinResource $F72 throws InterruptedException { if ( runObj != null ) { synchronized ( complete ) { if ( runObj != null ) $F18604 ( complete ) } } }
public static String toJSONString ( List list ) { $F1747 ( list ) boolean first = _BOOL ; $F280 ( sb ) $F10531 ( iter , list ) $F84 ( sb ) while $F2921 ( iter ) { $F60570 ( first , _BOOL , sb ) $F8877 ( value , iter ) if ( value == null ) $F223464 ( sb ) sb . append ( JSONValue . toJSONString ( value ) ) ; } $F84 ( sb ) $F92 ( sb ) }
$F1 public int hashCode $F72 { final int prime = NUM00 ; $F17043 ( result , super ) result = prime * result + $F50584 ( tenant ) ; return result ; }
public void loadAccessors ( MappedField configuredField , MappedField targetField ) { loadAccessors ( targetClass , configuredField , targetField ) ; }
public static MatrixBlock reshape ( MatrixBlock in , MatrixBlock out , int rows , int cols , boolean rowwise ) throws DMLRuntimeException { int rlen = in . rlen ; int clen = in . clen ; if ( ( ( long ) rlen ) * clen != ( ( long ) rows ) * cols ) throw new DMLRuntimeException $F84331 ( rlen , clen , rows , cols ) ; if ( rlen == rows && clen == cols ) { out . copy ( in ) ; return out ; } out . sparse = MatrixBlock . evalSparseFormatInMemory ( rows , cols , in . nonZeros ) ; out . rlen = rows ; out . clen = cols ; out . nonZeros = in . nonZeros ; if ( ! in . sparse && ! out . sparse ) reshapeDense ( in , out , rows , cols , rowwise ) ; else if ( in . sparse && out . sparse ) reshapeSparse ( in , out , rows , cols , rowwise ) ; else if ( in . sparse ) reshapeSparseToDense ( in , out , rows , cols , rowwise ) ; else reshapeDenseToSparse ( in , out , rows , cols , rowwise ) ; return out ; }
public static $F18547 toClassesFromObjects ( final $F131 params ) { final $F18547 classes = new $F6969 [ params . length ] ; int i = NUM00 ; for ( final Object object : params ) { if ( object != null ) { classes [ i ++ ] = object . getClass ( ) ; } else { classes [ i ++ ] = $F12222 ; } } return classes ; }
public AdminRegion ( String localName , RemoteGemFireVM vm , String userAttributeDesc ) { String gn = localName ; $F162792 ( idx , localName , nameSep ) if ( idx != - NUM00 ) $F31399 ( localName , idx ) else { gn = nameSep + gn ; } this . globalName = gn ; this . localName = localName ; this . userAttributeDesc = userAttributeDesc ; this . vm = vm ; }
public Element signWithWSSX509TokenProfile ( Document doc , $F132633 cert , String algorithm , List ids ) throws XMLSignatureException { return signWithWSSX509TokenProfile ( doc , cert , algorithm , ids , SOAPBindingConstants . WSF_10_VERSION ) ; }
public void addUserMessageListener ( UserMessageListener userMessageListener ) $F207 ( userMessageListeners , userMessageListener )
public IteratorBuilder addTemplate ( ISpaceQuery query ) $F18637 ( templates , query , this )
public String addToClassPath ( final String path ) { this . classPath += ( System . getProperty ( NUM00 ) + path ) ; return this . classPath ; }
private static int NewLongArray ( JNIEnvironment env , int length ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F12300 ( newArray , length ) $F79069 ( env , newArray ) } $F4287 ( traceJNI , unexpected , System , env ) }
protected abstract void finalizeOutput ( final $F2027 sourceImagePixels , final int imageWidth , final int imageHeight ) ;
public static boolean ignoringBatteryOptimizations $F72 { return NgnApplication . ignoringBatteryOptimizations ( null ) ; }
private boolean retryDelayHasPassedBy ( Long lastFailTime ) { return lastFailTime == null || lastFailTime + this . retryAfterMs < System . currentTimeMillis ( ) ; }
public static $F9737 valueOf ( long l ) $F23210 ( Long , l )
private boolean useMetric ( MetricRule rule , Metric metric ) { if ( rule . awsDimensionSelect == null && rule . awsDimensionSelectRegex == null ) { return _BOOL ; } if ( rule . awsDimensionSelect != null && metricsIsInAwsDimensionSelect ( rule , metric ) ) { return _BOOL ; } if ( rule . awsDimensionSelectRegex != null && metricIsInAwsDimensionSelectRegex ( rule , metric ) ) { return _BOOL ; } return _BOOL ; }
final void addIconManager ( AbstractStatusIconManager manager ) $F207 ( iconManagers , manager )
public IndexMetaData upgradeIndexMetaData ( IndexMetaData indexMetaData ) { $F65304 ( isUpgraded , indexMetaData ) checkSupportedVersion ( indexMetaData ) ; IndexMetaData newMetaData = upgradeLegacyRoutingSettings ( indexMetaData ) ; newMetaData = addDefaultUnitsIfNeeded ( newMetaData ) ; checkMappingsCompatibility ( newMetaData ) ; newMetaData = upgradeSettings ( newMetaData ) ; newMetaData = markAsUpgraded ( newMetaData ) ; return newMetaData ; }
static final void encode $F107623 ( src , srcOff , len , dst , dstOff ) { dst [ dstOff ] = ( byte ) ENCODE_TABLE . charAt ( $F245776 ( src , srcOff ) ) ; if ( len == NUM00 ) { dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff + NUM00 ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( src [ srcOff + NUM00 ] & NUM00 ) ; } else if ( len == NUM00 ) { dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) | ( ( src [ srcOff + NUM00 ] > > NUM00 ) & NUM00 ) ) ; dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( src [ srcOff + NUM00 ] < < NUM00 ) & NUM00 ) ; } else { dst [ dstOff + NUM00 ] = ( byte ) ENCODE_TABLE . charAt ( ( src [ srcOff ] < < NUM00 ) & NUM00 ) ; } }
public static void convolveV ( Kernel kernel , $F2027 inPixels , $F2027 outPixels , int width , int height , boolean alpha , int edgeAction ) { int index = NUM00 ; $F5415 matrix = kernel . getKernelData ( null ) ; $F2047 ( rows , kernel ) int rows2 = rows / NUM00 ; for ( $F119 ( y , height ) ) { for ( $F119 ( x , width ) ) { float r = NUM00 , g = NUM00 , b = NUM00 , a = NUM00 ; for ( $F142929 ( row , rows2 ) ) { int iy = y + row ; int ioffset ; if ( iy < NUM00 ) { if ( edgeAction == CLAMP_EDGES ) ioffset = NUM00 ; else if ( edgeAction == WRAP_EDGES ) ioffset = ( ( y + height ) % height ) * width ; else ioffset = iy * width ; } else if ( iy >= height ) { if ( edgeAction == CLAMP_EDGES ) ioffset = ( height - NUM00 ) * width ; else if ( edgeAction == WRAP_EDGES ) ioffset = ( ( y + height ) % height ) * width ; else ioffset = iy * width ; } else ioffset = iy * width ; float f = matrix [ row + rows2 ] ; if ( f != NUM00 ) { int rgb = inPixels [ ioffset + x ] ; $F339696 ( a , f , rgb ) $F339696 ( r , f , rgb ) $F339696 ( g , f , rgb ) b += f * ( rgb & NUM00 ) ; } } int ia = alpha ? PixelUtils . clamp ( $F127087 ( a ) ) : NUM00 ; $F339710 ( ir , PixelUtils , r ) $F339710 ( ig , PixelUtils , g ) $F339710 ( ib , PixelUtils , b ) outPixels [ index ++ ] = $F38048 ( ia , ir , ig , ib ) ; } } }
$F1431 public final void storeData ( final List data ) throws IDBPersistenceException { SqlSession session = null ; $F115 ( size , data ) int commited = NUM00 ; T dtShortTermLog ; try { session = sqlSessionFactory . openSession ( ExecutorType . BATCH , _BOOL ) ; if $F585 ( LOGGER ) { LOGGER . debug ( $F369 ( session ) ) ; } LoggerMapper $F4203 persistenceMapper = session . getMapper ( mapperInterface ) ; for ( $F253816 ( i , size ) ) { if ( ( NUM00 == i % RECORDS_PER_BATCH ) && i > NUM00 ) { $F15998 ( LOGGER , i ) $F17621 ( session ) commited = i ; } if $F26935 ( data , i ) { dtShortTermLog = ( T ) data . get ( i ) ; if $F585 ( LOGGER ) { LOGGER . debug ( $F73839 ( dtShortTermLog ) ) ; } persistenceMapper . insertLog ( dtShortTermLog ) ; } } $F17621 ( session ) commited = size ; } catch ( PersistenceException e ) { LOGGER . error ( $F10533 ( data ) , e ) ; try { if ( session != null ) $F21746 ( session ) } $F9877 ( LOGGER , sql ) throw new IDBPersistenceException ( e . getMessage ( ) , commited ) ; } finally { try $F6399 ( session ) $F9877 ( LOGGER , e ) } }
$F1431 public static Map < String , ConfigurationKey $F1011 > registeredKeys $F72 { synchronized ( registeredKeys ) { if ( copy == null ) copy = Collections . unmodifiableMap ( ( Map < String , ConfigurationKey $F1011 > ) registeredKeys . clone ( ) ) ; return copy ; } }
public static String md5 ( String stringToHash ) { if ( stringToHash != null ) { try { $F5348 ( md , MessageDigest ) $F96 bytes = md . digest ( stringToHash . getBytes ( ) ) ; StringBuilder sb = new StringBuilder $F113948 ( bytes ) ; for ( $F1139 ( i , bytes ) ) { int low = ( bytes [ i ] & NUM00 ) ; int high = ( $F92928 ( bytes , i ) ) ; sb . append ( Constants . HEXADECIMAL [ high ] ) ; sb . append ( Constants . HEXADECIMAL [ low ] ) ; } $F92 ( sb ) } catch ( NoSuchAlgorithmException e ) $F2455 } else $F2455 }
public String mostOfString $F72 { String typeName = NUM00 ; switch ( type ) { $F7242 ( BUILTIN , typeName ) $F7242 ( NUMBER , typeName ) $F23258 ( typeName ) $F7242 ( PF_STEP , typeName ) $F7242 ( IDENT , typeName ) $F7242 ( COMMENT , typeName ) $F7242 ( DASHES , typeName ) $F7242 ( END_MODULE , typeName ) $F7242 ( PROLOG , typeName ) $F7242 ( EPILOG , typeName ) $F7242 ( PCAL_LABEL , typeName ) } ; String str = NUM00 + string + NUM00 ; if ( string == null ) { str = NUM00 ; } ; String result = NUM00 + str + NUM00 + typeName + NUM00 + column + NUM00 + getWidth ( ) ; if ( aboveAlign . line != - NUM00 ) { result = $F31144 ( result , aboveAlign ) ; } ; if ( belowAlign . line != - NUM00 ) { result = $F31144 ( result , belowAlign ) ; } ; if ( preSpace != NUM00 ) $F15894 ( result , preSpace ) ; if ( isAlignmentPoint ) $F2365 ( result ) ; if ( distFromMargin != NUM00 ) $F15894 ( result , distFromMargin ) ; if ( subscript ) $F2365 ( result ) ; return result ; }
public CreateIndexRequest mapping ( String type , XContentBuilder source ) { if $F1710 ( mappings , type ) $F322689 ( type ) try { mappings . put ( type , source . string ( ) ) ; } catch ( IOException e ) $F78550 ( e ) return this ; }
public static PrettyPrint indentWithSpaces ( int number ) { $F6853 ( number ) $F18064 ( chars , number ) $F21017 ( Arrays , chars ) return new PrettyPrint ( chars ) ; }
private static void copyFile ( File src , File dst , Integer port , boolean internalCompression ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( src ) , StandardCharsets . UTF_8 ) ) ; Writer out = new OutputStreamWriter ( new FileOutputStream ( dst ) , StandardCharsets . UTF_8 ) ; for ( String line = in . readLine ( ) ; null != line ; line = in . readLine ( ) ) { if ( null != port ) line = line . replace ( $F22435 ( port ) ) ; line = line . replace ( NUM00 , internalCompression ? NUM00 : NUM00 ) ; out . write ( line ) ; } $F59 ( in ) $F59 ( out ) }
public void assertEventLogContains ( Object event ) { if $F2200 ( mEventLog , event ) $F1328 ( fail , mEventLog ) }
private static boolean isAllUnderscores $F72 { int i = NUM00 ; boolean result = _BOOL ; while ( result && $F7007 ( i , token ) ) { if $F20317 ( token , i ) { result = _BOOL ; } ; i = i + NUM00 ; } ; return result ; }
public ImageWarp ( BufferedImage bi , GeoCoordTransformation transform , DataBounds imageBounds ) { if ( bi != null ) { $F23468 ( iwidth , bi ) $F23469 ( iheight , bi ) setGeoTrans ( transform ) ; setImageBounds ( imageBounds ) ; pixels = getPixels ( bi , NUM00 , NUM00 , iwidth , iheight ) ; bi = null ; } }
public static EquipmentLoggerFactory createFactory ( final EquipmentConfiguration econf , final ProcessConfiguration pconf , boolean useEquipmentLoggers , boolean useEquipmentAppendersOnly ) { return new EquipmentLoggerFactory ( econf . getHandlerClassName ( ) , Long . valueOf ( econf . getId ( ) ) , econf . getName ( ) , pconf . getProcessName ( ) , useEquipmentLoggers , useEquipmentAppendersOnly ) ; }
protected void assertEquals ( Integer expected , Integer actual ) { if ( expected == null || actual == null ) { if ( expected != actual ) { assertEquals ( NUM00 + expected , NUM00 + actual ) ; } } else { assertEquals ( expected . intValue ( ) , actual . intValue ( ) ) ; } }
public static boolean vPoolSpecifiesSnapshots ( final VirtualPool virtualPool ) { if ( virtualPool . getMaxNativeSnapshots ( ) == null ) { return _BOOL ; } return virtualPool . getMaxNativeSnapshots ( ) != MAX_DISABLED ; }
public void mapDatasetToAxis ( int index , int axisIndex ) { List axisIndices = new $F59124 $F989 ; $F368241 ( axisIndices , axisIndex ) mapDatasetToAxes ( index , axisIndices ) ; }
public AuthenticatorAppRegistrationURIBuilder ( AMIdentity id , String secretHex , int codeLength , String issuer ) { Reject . ifNull ( id , NUM00 ) ; Reject . ifNull ( secretHex , NUM00 ) ; Reject . ifTrue ( StringUtils . isBlank ( issuer ) , NUM00 ) ; Reject . ifTrue ( ( codeLength < MIN_CODE_LENGTH ) , NUM00 + MIN_CODE_LENGTH + NUM00 ) ; if $F1277 ( secretHex ) $F825 this . issuer = issuer ; this . id = id ; this . secretHex = secretHex ; this . codeLength = codeLength ; }
protected void updateApplicationEnabled $F72 { firePropertyChange ( NUM00 , Boolean . valueOf ( ! isEnabled ( ) ) , $F130521 ( Boolean , isEnabled ) ) ; }
public PersonalityInsights ( final String versionDate , String username , String password ) { this ( versionDate ) ; setUsernameAndPassword ( username , password ) ; }
public String signMessage ( String message ) throws IllegalStateException { Validate . notNull ( getSignAlgorithm ( ) , NUM00 ) ; Validate . notNull ( getPrivateKey ( ) , NUM00 ) ; Validate . notEmpty ( message , NUM00 ) ; log . debug ( NUM00 + message + NUM00 + getSignAlgorithm ( ) ) ; try { SignatureAlgorithm algo = SignatureAlgorithm . getSignatureAlgorithmForURI ( getSignAlgorithm ( ) ) ; Signature sig = Signature . getInstance ( algo . getAlgorithmName ( ) ) ; sig . initSign ( this . privateKey ) ; $F151317 ( messageBytes , message ) sig . update ( messageBytes ) ; $F96 sigBytes = sig . sign ( ) ; String signature = SharedUtils . encodeBytes ( sigBytes ) ; $F586 ( log , signature ) return signature ; } catch ( Exception e ) { $F5197 ( log , e ) $F48926 ( e ) } }
private void outputPriceLists ( Properties ctx , PrintWriter out , boolean includeAny ) { $F8438 ( out ) if ( includeAny ) $F8438 ( out ) $F8438 ( out ) $F8438 ( out ) $F8438 ( out ) }
public void clearBindings $F72 { if ( mBindArgs != null ) { $F17838 ( Arrays , mBindArgs ) } }
public boolean assignIfBestMatch ( MethodDeclaration declaration ) { assert ! finalized : NUM00 ; if ( ! isMatch ( declaration . getParameters ( ) ) ) { return _BOOL ; } if ( this . bestMatchMethod . isPresent ( ) ) { if ( this . bestMatchMethod . get ( ) . getParameters ( ) . size ( ) > declaration . getParameters ( ) . size ( ) ) { return _BOOL ; } } this . bestMatchMethod = Optional . of ( declaration ) ; return _BOOL ; }
public static List $F284080 from ( Cursor c ) { List $F284080 users = null ; $F23386 ( count , c ) if ( count > NUM00 ) { $F10253 ( users , count ) while $F12260 ( c ) { User user = $F246422 ; Syncing . from ( c , user ) ; $F204682 ( col , c , EMAIL_HASH ) if ( col >= NUM00 ) { user . emailHash = c . getString ( col ) ; } col = c . getColumnIndex ( FOLLOWING ) ; if ( col >= NUM00 ) { user . isFollowing = c . getInt ( col ) == NUM00 ; } users . add ( user ) ; } } $F59 ( c ) return users ; }
$F1 public void flush $F72 throws IOException $F29882 ( out )
private void startCheckingStatus $F72 { future = executor . submit ( null ) ; }
private static Object newInstanceNoServiceLoader $F60993 ( providerClass ) { if ( System . getSecurityManager ( ) == null ) $F1337 try { Method creationMethod = providerClass . getDeclaredMethod ( NUM00 ) ; return creationMethod . invoke ( null , ( $F131 ) null ) ; } catch ( NoSuchMethodException exc ) $F1337 catch ( Exception exc ) $F1337 }
private void addSignatureProfile ( SignatureWrapper signature , XmlSignature xmlSignature ) { SignatureType signatureType = SignatureType . NA ; String certificateId = signature . getSigningCertificateId ( ) ; if ( certificateId != null ) { signatureType = getSignatureType ( certificateId ) ; } xmlSignature . setSignatureLevel ( signatureType . name ( ) ) ; }
private static final int parseTimeString ( String str ) { $F1382 ( str ) int ret = NUM00 ; boolean neg = _BOOL ; int i = NUM00 ; if $F4432 ( str ) { neg = _BOOL ; i ++ ; } int num = NUM00 ; $F22998 ( len , str ) for ( ; i < len ; i ++ ) { $F1280 ( c , str , i ) if $F220844 ( c ) { num = num * NUM00 + c - NUM00 ; } else if ( c == NUM00 ) { ret += num ; num = NUM00 ; ret *= NUM00 ; } } ret += num ; ret *= NUM00 ; if ( neg ) ret = - ret ; return ret ; }
public synchronized void removeImageListener ( ImageListener cl ) $F106 ( m_imageListeners , cl )
public ArrayList < ConstraintWidget > buildList ( ScoutWidget [ ] list ) { ArrayList < ConstraintWidget > $F204 ( ret ) ; for ( $F304395 ( i , mContainSet ) ; i >= NUM00 ; $F304396 ( i , mContainSet ) ) { ret . add ( list [ i ] . mConstraintWidget ) ; } return ret ; }
private boolean nodeExists ( StringTokenizer path ) throws BackingStoreException { $F8095 ( token , path ) if $F3057 ( token ) $F824 synchronized ( lock ) { AbstractPreferences child = kidCache . get ( token ) ; $F192589 ( child , getChild , token ) $F397 ( child , _BOOL ) if $F49874 ( path ) return _BOOL ; $F89223 ( path ) if $F49874 ( path ) $F824 return child . nodeExists ( path ) ; } }
$F1654 ( delegate )
public NetworkAddressFactoryImpl $F72 throws InitializationException { this ( DEFAULT_TCP_HTTP_LISTEN_PORT ) ; }
public TransparentGlassPanePanel ( ImageIcon icon , String text , Color backgroundColor , float transparency ) { setLayout ( $F78335 ) ; $F45960 ( gbc ) gbc . gridy = NUM00 ; gbc . gridx = NUM00 ; $F78356 ( iconLabel , icon ) add ( iconLabel , gbc ) ; gbc . gridy += NUM00 ; label = new JLabel ( text ) ; add ( label , gbc ) ; if ( transparency > NUM00 ) { transparency = NUM00 ; } else $F17370 ( transparency ) Color transparentColor = new Color ( backgroundColor . getRed ( ) , backgroundColor . getGreen ( ) , backgroundColor . getBlue ( ) , $F35376 ( transparency ) ) ; setBackground ( transparentColor ) ; setOpaque ( _BOOL ) ; }
$F1 protected void fillHeader ( Header head ) { try { Standard . context ( UndefinedData . class ) ; head . setXtension ( NUM00 ) ; head . setBitpix ( BasicHDU . BITPIX_BYTE ) ; head . setNaxes ( NUM00 ) ; head . addValue ( NAXISn . n ( NUM00 ) , this . data . length ) ; head . addValue ( PCOUNT , NUM00 ) ; head . addValue ( GCOUNT , NUM00 ) ; head . addValue ( EXTEND , _BOOL ) ; } catch ( HeaderCardException e ) $F55754 ( LOG , Level , e ) finally { Standard . context ( null ) ; } }
protected void cleanStationsAndNetwork $F72 { $F973 ( log ) cleanSchedule ( ) ; removeNonUsedStopFacilities ( ) ; cleanModes ( ) ; removeNonUsedLinks ( ) ; $F973 ( log ) }
private static String stripAppleSpanFromMarkup ( String markup ) { $F7542 ( stripped , markup ) $F12747 ( prefixBegIdx , stripped , APPLE_SPAN_PREFIX ) while ( prefixBegIdx >= NUM00 ) { int prefixEndIdx = stripped . indexOf ( NUM00 , prefixBegIdx ) + NUM00 ; stripped . replace ( prefixBegIdx , prefixEndIdx , NUM00 ) ; $F162792 ( suffixBegIdx , stripped , APPLE_SPAN_SUFFIX ) $F12749 ( suffixEndIdx , suffixBegIdx , APPLE_SPAN_SUFFIX ) stripped . replace ( suffixBegIdx , suffixEndIdx , NUM00 ) ; prefixBegIdx = stripped . indexOf ( APPLE_SPAN_PREFIX ) ; } $F92 ( stripped ) }
private InvocationConstraints createInvocationConstraints $F72 { if ( MIN_RETRY >= sleepTime [ tryIndx ] ) { return new InvocationConstraints ( new ConnectionAbsoluteTime ( System . currentTimeMillis ( ) + sleepTime [ tryIndx ] ) , null ) ; } else $F74420 ( InvocationConstraints ) }
public void create ( SSOToken token , String dn , Map attrs ) throws $F16995 { create ( token . getPrincipal ( ) , dn , attrs ) ; objectChanged ( dn , ADD ) ; }
$F1 public void close $F72 throws IOException { if ( ! closed ) { try { $F42258 ( eof , exhaustInputStream , this ) } finally { eof = _BOOL ; closed = _BOOL ; } } }
private void discardDownstreamMediaChunk $F72 { MediaChunk removed = mediaChunks . removeFirst ( ) ; long totalBytes = removed . bytesLoaded ( ) ; $F33833 ( removed ) notifyDownstreamDiscarded ( removed . startTimeUs , removed . endTimeUs , totalBytes ) ; }
public Object executeScript ( final Script script , final ScriptContext context ) { final ScriptEngine engine = scriptEngineProvider . getScriptEngine ( script . getType ( ) ) ; return executeScript ( script , engine , context ) ; }
public static PlaceholderFragment newInstance $F72 { PlaceholderFragment fragment = new PlaceholderFragment $F72 ; $F53033 ( args ) fragment . setArguments ( args ) ; return fragment ; }
void removeEQ ( Object o ) { $F677 ( lock , this ) $F790 ( lock ) try { $F131 array = queue ; for ( int i = NUM00 , n = size ; i < n ; i ++ ) { if ( o == array [ i ] ) $F87181 ( removeAt , i ) } } $F796 ( lock ) }
public T eval $F72 { return eval ( bindings ( ) ) ; }
public void add ( XMPPathSegment segment ) $F207 ( segments , segment )
private void nextSync $F72 { if $F2921 ( syncItemIterator ) { $F3224 ( partialStartTime , System ) $F45366 ( currentSyncItem , syncItemIterator ) currentSyncItem . sync ( this , hostConnection , callbackHandler , contentResolver ) ; } else { LogUtils . LOGD ( TAG , NUM00 + $F32707 ( System , startTime ) ) ; if ( listener != null ) { listener . onSyncFinished ( this ) ; } syncService . stopSelf ( serviceStartId ) ; } }
public String decode ( String encoded ) { JsonObject object = new JsonObject ( encoded ) ; JsonArray headers = object . getJsonArray ( NUM00 ) ; for ( Object headerObj : headers ) { JsonArray header = ( JsonArray ) headerObj ; $F27130 ( key , header ) $F27130 ( value , header ) if ( key . equalsIgnoreCase ( CONTENT_TYPE ) && ( value . contains ( NUM00 ) || value . contains ( APPLICATION_JSON ) ) ) { try { object . put ( NUM00 , new JsonObject ( new String ( object . getBinary ( PAYLOAD ) , Charset . forName ( UTF_8 ) ) ) ) ; } catch ( DecodeException e ) { object . put ( NUM00 , new String ( object . getBinary ( PAYLOAD ) , Charset . forName ( UTF_8 ) ) ) ; } object . remove ( PAYLOAD ) ; $F597 } } $F92 ( object ) }
public boolean matchesWord $F72 { return ! isEmpty ( ) && $F15875 ( Character , queue , pos ) ; }
public void test_doAs_01 $F72 { Subject subj = new Subject $F72 ; $F101877 pa = new myPrivilegedAction $F72 ; $F101877 paNull = null ; try { Object obj = Subject . doAs ( null , pa ) ; } $F17395 ( fail , e ) try { Object obj = Subject . doAs ( subj , pa ) ; } $F17395 ( fail , e ) try { Object obj = Subject . doAs ( subj , paNull ) ; fail ( NUM00 ) ; } $F53531 }
public void testDivideExpLessZero $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int resScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_CEILING ) ; $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , resScale , result ) }
public static boolean containsWhitespace ( final CharSequence seq ) { $F46660 ( isEmpty , seq , _BOOL ) $F22998 ( strLen , seq ) for ( $F119 ( i , strLen ) ) { if $F11974 ( Character , seq , i ) { return _BOOL ; } } return _BOOL ; }
$F125330 ( isWheelEvent )
public Connection ( String clientHandle , String clientId , String host , int port , Context context , MqttAndroidClient client , boolean sslConnection ) { this . clientHandle = clientHandle ; this . clientId = clientId ; this . host = host ; this . port = port ; this . context = context ; this . client = client ; this . sslConnection = sslConnection ; $F30598 ( history ) $F280 ( sb ) $F84 ( sb ) sb . append ( clientId ) ; $F84 ( sb ) $F31458 ( addAction , sb ) }
public void recordState ( DialogueState state , String name ) { if ( frame != null ) { stateMonitorTab . recordState ( state , name ) ; } }
public void characters ( org . w3c . dom . Node node ) throws $F2253 { flushPending ( ) ; $F61361 ( data , node ) if ( data != null ) { $F11550 ( length , data ) $F180083 ( length , m_charsBuff ) $F16116 ( data , length , m_charsBuff ) characters ( m_charsBuff , NUM00 , length ) ; } }
private void computeFiltersFromDefault ( IndicatorViewState oldState ) { filters = new ArrayList < Filter > $F72 ; $F2695 ( defaultFilterNames ) for ( Filter defaultFilter : defaultFilters ) { filters . add ( defaultFilter ) ; if ( defaultFilter . name != null ) defaultFilterNames . add ( defaultFilter . name ) ; } if ( oldState != null ) { for ( Filter oldFilter : oldState . filters ) { if ( oldFilter . name == null || ! defaultFilterNames . contains ( oldFilter . name ) ) filters . add ( oldFilter ) ; } } }
private static Data parseName ( Set me , Set peer ) { if ( me == null ) $F895 else $F27731 ( me ) Data data = new Data $F72 ; $F280 ( b ) data . me = cons ( me , b ) ; if $F1032 ( peer ) { $F84 ( b ) data . peer = cons ( peer , b ) ; } data . name = b . toString ( ) ; return data ; }
public static boolean streamContentEquals ( InputStream s1 , InputStream s2 ) throws IOException { try { int b1 , b2 ; do { $F10201 ( b1 , s1 ) $F10201 ( b2 , s2 ) } while ( ( b1 == b2 ) && ( b1 != - NUM00 ) ) ; return b1 == b2 ; } finally { try $F4650 ( s1 , s2 ) $F3957 } }
public ContentNode parse ( JSDocCharScanner scanner , TagDictionary < AbstractInlineTagDefinition > inlineTagsDictinary ) { ComposedContent description = DomFactory . eINSTANCE . createComposedContent ( ) ; if $F87568 ( scanner ) $F1337 $F115472 ( nextIsTagTitle , scanner ) int start = scanner . nextOffset ( ) ; int end = start ; $F83 ( strb ) while $F2921 ( scanner ) { char c = scanner . peek ( ) ; if ( regionStart ( c ) ) { ScannerState st = scanner . saveState ( ) ; InlineTag tag = ( InlineTag ) parseRegion ( scanner , inlineTagsDictinary ) ; if ( tag != null ) { saveTextTokens ( description , start , end , strb ) ; $F6932 ( strb ) start = end ; description . getContents ( ) . add ( tag ) ; $F598 } else { scanner . restoreState ( st ) ; if ( start == end ) { assert _BOOL ; } } } $F24630 ( scanner ) if ( JSDocCharScanner . isNL ( c ) ) { if ( scanner . hasNext ( ) && ! nextIsTagTitle ( scanner ) ) { end = scanner . offset ( ) ; } else $F5153 } strb . append ( c ) ; end = scanner . offset ( ) ; } $F1822 ( pendingData , strb ) if $F38506 ( pendingData , _BOOL ) { saveTextTokens ( description , start , end , strb ) ; } switch ( description . getContents ( ) . size ( ) ) { $F3366 $F1274 $F3366 return description . getContents ( ) . get ( NUM00 ) ; $F1267 return description ; } }
static public void add ( Errors errors , String text ) { $F2329 ( errors ) errors . add ( text ) ; }
public synchronized void removeIconsForPkg ( String packageName , UserHandleCompat user ) { removeFromMemCacheLocked ( packageName , user ) ; long userSerial = mUserManager . getSerialNumberForUser ( user ) ; mIconDb . delete ( IconDB . COLUMN_COMPONENT + NUM00 + IconDB . COLUMN_USER + NUM00 , new String [ ] { packageName + NUM00 , Long . toString ( userSerial ) } ) ; }
public boolean contains ( String sCategory ) $F69736 ( CategoryEstimations , sCategory )
private void createRecursivly ( String path ) throws $F80658 { try { if ( zk . exists ( path , _BOOL ) == null && $F20 ( path ) ) { String temp = path . substring ( NUM00 , $F23703 ( path , File ) ) ; createRecursivly ( temp ) ; zk . create ( path , null , Ids . OPEN_ACL_UNSAFE , CreateMode . PERSISTENT ) ; } else $F932 } catch ( KeeperException e ) { throw e ; } catch ( InterruptedException e ) { throw e ; } }
public static final void frontEndStatistics ( SpecObj spec ) $F845
public String toString $F72 { if ( notBefore == null || notAfter == null ) $F1278 return ( $F148552 ( notBefore , notAfter ) + NUM00 ) ; }
public void zoom $F7635 ( x , y , factor ) { double rangeX = Math . abs ( currentExtent . getMaxX ( ) - currentExtent . getMinX ( ) ) ; double rangeY = Math . abs ( currentExtent . getMaxY ( ) - currentExtent . getMinY ( ) ) ; currentExtent . setMinX ( x - ( rangeX * factor ) / NUM00 ) ; currentExtent . setMinY ( y - ( rangeY * factor ) / NUM00 ) ; currentExtent . setMaxX ( x + ( rangeX * factor ) / NUM00 ) ; currentExtent . setMaxY ( y + ( rangeY * factor ) / NUM00 ) ; addToExtentHistory ( currentExtent ) ; }
protected boolean isOutputLineExpected ( final String line , final $F806 expectedPrefixes , final boolean filePathsAreExpected ) { final String trimmed = line != null ? line . trim ( ) : null ; if $F35028 ( StringUtils , trimmed ) { if ( filePathsAreExpected && isFilePath ( line ) ) { return _BOOL ; } if ( expectedPrefixes != null ) { for ( final String prefix : expectedPrefixes ) { if ( StringUtils . startsWithIgnoreCase ( line , prefix ) ) { return _BOOL ; } } } return _BOOL ; } return _BOOL ; }
public static String meterToString ( OFInstructionMeter inst , Logger log ) { return STR_SUB_GOTO_METER_METER_ID + NUM00 + Long . toString ( inst . getMeterId ( ) ) ; }
public boolean isImageCachable ( int w , int h ) { return ( w * h ) < maxSingleImagePixelSize ; }
public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } $F62612 } return size ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void freeEntry ( BasicPoolEntry entry ) { if ( numEntries < NUM00 ) $F1155 ( route ) if ( numEntries <= freeEntries . size ( ) ) $F1155 ( route ) freeEntries . add ( entry ) ; }
public boolean isIn ( Coords coords ) $F298 ( coordinates , coords )
private DialogBaseUnits computeDialogBaseUnits ( FontMetrics metrics ) { double averageCharWidth = computeAverageCharWidth ( metrics , averageCharWidthTestString ) ; int ascent = metrics . getAscent ( ) ; double height = ascent > NUM00 ? ascent : ascent + ( NUM00 - ascent ) / NUM00 ; DialogBaseUnits dialogBaseUnits = new DialogBaseUnits ( averageCharWidth , height ) ; if $F176449 ( LOGGER , Level ) { LOGGER . config ( NUM00 + dialogBaseUnits + NUM00 + metrics . getFont ( ) ) ; } return dialogBaseUnits ; }
public synchronized void close $F72 $F236461 ( writer , ioe )
public static boolean isProxyUri ( final String url ) { notNull ( url ) ; return $F126724 ( url , getRequestHandlerPath ) ; }
public void addAction ( Action act ) { if ( act . entry != null && act . entry != this ) { Log . e ( TAG , NUM00 + act . entry . ID + NUM00 + ID ) ; $F665 } if ( mActions == null ) { mActions = new ArrayList < Action > $F72 ; } if $F10471 ( mActions ) $F13518 ( Log , TAG ) act . entry = this ; mActions . add ( act ) ; }
public abstract Iterable < ? extends CompilationUnitTree > parse $F72 throws IOException ;
private void name ( StringBuilder builder ) { $F20605 ( name , type ) $F20973 ( name , builder ) }
boolean ensureProcessSizeFits ( final ExecutionUnit process , final Rectangle2D rect ) { Dimension processSize = model . getProcessSize ( process ) ; $F1933 ( processSize , _BOOL ) $F1933 ( rect , _BOOL ) boolean needsResize = _BOOL ; double processWidth = processSize . getWidth ( ) * ( NUM00 / model . getZoomFactor ( ) ) ; double processHeight = processSize . getHeight ( ) * ( NUM00 / model . getZoomFactor ( ) ) ; double width = processWidth ; double height = processHeight ; if ( processSize != null ) { if ( processWidth < rect . getMaxX ( ) + ProcessDrawer . GRID_X_OFFSET ) { double diff = rect . getMaxX ( ) + ProcessDrawer . GRID_X_OFFSET - processWidth ; if ( diff > ProcessDrawer . GRID_X_OFFSET ) { width += diff ; } else { width += ProcessDrawer . GRID_X_OFFSET ; } needsResize = _BOOL ; } if ( processHeight < rect . getMaxY ( ) + ProcessDrawer . GRID_Y_OFFSET ) { double diff = rect . getMaxY ( ) + ProcessDrawer . GRID_Y_OFFSET - processHeight ; if ( diff > ProcessDrawer . GRID_Y_OFFSET ) { height += diff ; } else { height += ProcessDrawer . GRID_Y_OFFSET ; } needsResize = _BOOL ; } if ( needsResize ) { model . setProcessWidth ( process , width ) ; model . setProcessHeight ( process , height ) ; balance ( ) ; model . fireProcessSizeChanged ( ) ; return _BOOL ; } } return _BOOL ; }
public void handleTblHandlersButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) WSAuthNServicesHandlersAddViewBean vb = ( WSAuthNServicesHandlersAddViewBean ) getViewBean ( WSAuthNServicesHandlersAddViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
public void reduceDL ( double expFPRate , boolean checkErr ) { boolean needUpdate = _BOOL ; $F1993 ( rulesetStat ) for ( $F2277 ( j , m_SimpleStats ) ) { $F2280 ( rulesetStat , m_SimpleStats , j ) $F2280 ( rulesetStat , m_SimpleStats , j ) $F2280 ( rulesetStat , m_SimpleStats , j ) if $F2283 ( j , m_SimpleStats ) { rulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; rulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; rulesetStat [ NUM00 ] = $F2278 ( m_SimpleStats , j ) ; } } for ( $F5373 ( k , m_SimpleStats ) ) { $F1986 ruleStat = m_SimpleStats . get ( k ) ; double ifDeleted = potential ( k , expFPRate , rulesetStat , ruleStat , checkErr ) ; if $F2292 ( Double , ifDeleted ) { if ( k == $F113103 ( m_SimpleStats ) ) $F5795 ( removeLast ) else { m_Ruleset . remove ( k ) ; needUpdate = _BOOL ; } } } if ( needUpdate ) { m_Filtered = null ; m_SimpleStats = null ; countData ( ) ; } }
$F1 public void onDrawFrame ( GL10 gl10 ) { $F14648 ( GLES20 ) $F14651 ( GLES20 ) $F14653 ( GLES20 ) $F14655 ( GLES20 ) $F14657 ( GLES20 ) GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; $F14662 ( currentTimeMillis , System ) updateWithDelta ( currentTimeMillis - lastTimeMillis ) ; lastTimeMillis = currentTimeMillis ; }
public void removeLineHighlight ( Object tag ) { if ( tag instanceof LineHighlightInfo ) { lineHighlights . remove ( tag ) ; repaintLine ( ( LineHighlightInfo ) tag ) ; } }
private Element createSingleLogOutForCastleAsIDP ( String binding ) throws Exception { String entityID = idmClient . getEntityID ( tenantName ) ; String ssoLoc = convertToIPV6ShortForm ( entityID ) ; $F13265 ( ssoLoc , tenantName ) $F57196 ( sloLoc , ssoLoc ) Element slosEle = createEndPoint ( SAMLNames . SLOS , binding , sloLoc , null ) ; return slosEle ; }
public static void unregisterTransportMBean ( String containerName ) throws Exception { MBeanServer mBeanServer = getMBeanServer ( containerName ) ; $F8249 ( mBeanServer ) ObjectName transportMBeanObjectName = TransportConstants . createTransportMBeanObjectName ( containerName ) ; if ( mBeanServer . isRegistered ( transportMBeanObjectName ) ) { mBeanServer . unregisterMBean ( transportMBeanObjectName ) ; $F432107 ( _logger , Level ) } }
public void addNodesInDocOrder ( NodeIterator iterator , XPathContext support ) { $F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) Node node ; while ( null != $F161934 ( node , iterator ) ) { addNodeInDocOrder ( node , support ) ; } }
protected void uninstallDefaults $F72 { SeaGlassContext context = getContext ( splitPane , ENABLED ) ; style . uninstallDefaults ( context ) ; $F355 ( context ) style = null ; context = getContext ( splitPane , Region . SPLIT_PANE_DIVIDER , ENABLED ) ; dividerStyle . uninstallDefaults ( context ) ; $F355 ( context ) dividerStyle = null ; super . uninstallDefaults ( ) ; }
public void subtractAmount ( final String amount ) { $F46427 ( subtractAmount , Integer , amount ) }
private synchronized void makeCompositeBuilder $F72 throws InvalidObjectException { $F57099 ( compositeBuilder ) $F6969 targetClass = ( $F6969 ) getJavaType ( ) ; CompositeBuilder [ ] [ ] builders = { { new CompositeBuilderViaFrom ( targetClass , itemNames ) } , { new CompositeBuilderViaConstructor ( targetClass , itemNames ) } , { new CompositeBuilderCheckGetters ( targetClass , itemNames , getterMappings ) , new CompositeBuilderViaSetters ( targetClass , itemNames ) , new CompositeBuilderViaProxy ( targetClass , itemNames ) } } ; CompositeBuilder foundBuilder = null ; $F1121 ( whyNots ) Throwable possibleCause = null ; find : for ( CompositeBuilder [ ] relatedBuilders : builders ) { for ( $F1139 ( i , relatedBuilders ) ) { CompositeBuilder builder = relatedBuilders [ i ] ; String whyNot = builder . applicable ( getters ) ; if ( whyNot == null ) { foundBuilder = builder ; break find ; } Throwable cause = builder . possibleCause ( ) ; $F19621 ( cause , possibleCause ) if $F4012 ( whyNot ) { $F275070 ( whyNots ) whyNots . append ( whyNot ) ; if ( i == NUM00 ) $F597 } } } if ( foundBuilder == null ) { String msg = $F10073 ( targetClass , whyNots ) ; if ( possibleCause != null ) msg += NUM00 ; throw invalidObjectException ( msg , possibleCause ) ; } compositeBuilder = foundBuilder ; }
public void append ( CharSequence s ) $F288 ( text , s )
public void invalidateAll $F72 { $F8249 ( m_tuples ) for ( $F9808 ( i , m_tuples ) ) invalidate ( i ) ; }
public void add ( final long addr ) $F207 ( addrs , addr )
$F30902 public void test_wrap_ByteBuffer_ByteBuffer_04 $F72 { String host = NUM00 ; int port = NUM00 ; $F30909 ( bbs , ByteBuffer ) $F30909 ( bbd , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; try { sse . wrap ( bbs , bbd ) ; fail ( NUM00 ) ; } $F30913 $F30915 ( fail , e ) }
public static boolean isBlackListed ( $F2304 Size size , $F2304 String blacklistString ) { $F6542 ( blacklistStringArray , blacklistString ) $F50086 ( blacklistStringArray , _BOOL ) $F2689 blacklistedSizes = new HashSet ( Lists . newArrayList ( blacklistStringArray ) ) ; return isBlackListed ( size , blacklistedSizes ) ; }
static private void _writeDecRef ( Writer out , char ch ) throws IOException { if ( ch == NUM00 ) { $F3410 ( out ) $F665 } $F3410 ( out ) $F29204 ( i , ch ) if ( i > NUM00 ) { out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; $F62201 ( out , i ) } else if ( i > NUM00 ) { out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; $F62201 ( out , i ) } else { out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; out . write ( NUM00 + ( i / NUM00 ) ) ; i = i % NUM00 ; $F62201 ( out , i ) } $F3410 ( out ) }
protected $F96 inputStreamToByteArray ( InputStream is ) throws IOException { $F1538 ( bos ) $F7468 ( next , is ) while ( next > - NUM00 ) { bos . write ( next ) ; $F10201 ( next , is ) } $F1206 ( bos ) $F59 ( is ) $F11316 ( bos ) }
$F1 public String toString $F72 { Object value = get ( ) ; return $F58366 ( value ) ; }
private boolean isAReferenceTag ( String str ) { $F1933 ( str , _BOOL ) return str . indexOf ( NUM00 ) == NUM00 && str . lastIndexOf ( NUM00 ) == $F45793 ( str ) ; }
protected static String encode ( String url ) { $F83 ( encoder ) for ( $F2998 ( chr , url ) ) { byte chrByte = ( byte ) chr ; if ( ( chrByte <= NUM00 || chrByte >= NUM00 || chr == NUM00 || chr == NUM00 ) ) $F181853 ( encoder , String , chrByte ) else $F288 ( encoder , chr ) } $F92 ( encoder ) }
public void testX509CRLEntry $F72 { TBTCRLEntry tbt_crlentry = new TBTCRLEntry $F72 ; assertNull ( tbt_crlentry . getCertificateIssuer ( ) ) ; assertNull ( tbt_crlentry . getCriticalExtensionOIDs ( ) ) ; try { $F196480 ( assertNull , tbt_crlentry ) ; } catch ( CRLException e ) $F32309 ( fail , e ) assertNull ( tbt_crlentry . getNonCriticalExtensionOIDs ( ) ) ; assertNull ( tbt_crlentry . getRevocationDate ( ) ) ; }
public static long now $F72 { $F21879 ( System ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private BinlogPosition findHeartbeat ( MaxwellReplicator r ) throws Exception { r . startReplicator ( ) ; for ( RowMap row = r . getRow ( ) ; row != null ; row = r . getRow ( ) ) { if ( Objects . equals ( r . getLastHeartbeatRead ( ) , recoveryInfo . heartbeat ) ) return row . getPosition ( ) ; } $F1274 }
private Configure $F72 { $F2697 ( p ) $F28017 ( args ) args . putAll ( System . getenv ( ) ) ; args . putAll ( System . getProperties ( ) ) ; p . putAll ( args ) ; this . property = p ; reload ( _BOOL ) ; }
private void handleTruncatedInfo ( final StatementInfo info ) throws SQLException { final $F96 originalInfo = statement . getStatementInfoRequestItems ( ) ; final $F96 newInfoItems = new byte [ originalInfo . length + NUM00 * NUM00 ] ; int newIndex = NUM00 ; for ( final byte infoItem : originalInfo ) { assert newIndex < newInfoItems . length : NUM00 ; switch ( infoItem ) { case ISCConstants . isc_info_sql_select : case ISCConstants . isc_info_sql_bind : final RowDescriptorBuilder currentBuilder = infoItem == ISCConstants . isc_info_sql_select ? info . fieldBuilder : info . parameterBuilder ; final int descriptorIndex = currentBuilder != null ? currentBuilder . getFirstUnprocessedIndex ( ) + NUM00 : NUM00 ; newInfoItems [ newIndex ++ ] = ISCConstants . isc_info_sql_sqlda_start ; newInfoItems [ newIndex ++ ] = NUM00 ; $F189022 ( newInfoItems , newIndex , descriptorIndex ) $F157410 ( newInfoItems , newIndex , descriptorIndex ) newInfoItems [ newIndex ++ ] = infoItem ; $F597 $F1267 newInfoItems [ newIndex ++ ] = infoItem ; $F597 } } assert newIndex == newInfoItems . length : NUM00 ; info . requestBufferSize = Math . min ( NUM00 * info . requestBufferSize , statement . getMaxSqlInfoSize ( ) ) ; info . buffer = statement . getSqlInfo ( newInfoItems , info . requestBufferSize ) ; info . currentIndex = NUM00 ; }
public static String stripFileExtension ( String name ) { $F24867 ( pos , name ) if ( pos > NUM00 & $F1093 ( pos , name ) ) $F35298 ( name , pos ) return name ; }
private static void pushTransactionStartStamp ( Transaction t ) { Map < Transaction , Timestamp > map = suspendedTxStartStamps . get ( ) ; Timestamp stamp = transactionStartStamp . get ( ) ; if ( stamp != null ) $F1717 ( map , t , stamp ) else { $F172017 ( Debug , module ) } }
private int indexedBinarySearch ( List < S2CellId > l , S2CellId key , int low ) { $F40484 ( high , l ) while ( low <= high ) { int mid = ( low + high ) > > NUM00 ; S2CellId midVal = l . get ( mid ) ; $F58436 ( cmp , midVal , key ) if ( cmp < NUM00 ) { low = mid + NUM00 ; } else if ( cmp > NUM00 ) { high = mid - NUM00 ; } else { return mid ; } } return low ; }
public Variable [ ] findLocalArrays $F72 { List $F30094 arrays = new ArrayList $F30094 $F72 ; for ( ListIterator $F30094 $F30104 ( iterator , fLocalVariables ) ; iterator . hasPrevious ( ) ; ) { Variable localVariable = iterator . previous ( ) ; if $F6974 ( localVariable ) arrays . add ( localVariable ) ; } return arrays . toArray ( new Variable $F2313 ( arrays ) ) ; }
public static int indexOfJavaLikeExtension ( String fileName ) { $F1749 ( fileNameLength , fileName ) $F10849 javaLikeExtensions = getJavaLikeExtensions ( ) ; extensions : for ( $F21059 ( i , length , javaLikeExtensions ) ) { $F16051 ( extension , javaLikeExtensions , i ) int extensionLength = extension . length ; int extensionStart = fileNameLength - extensionLength ; int dotIndex = extensionStart - NUM00 ; $F166042 ( dotIndex ) if $F20317 ( fileName , dotIndex ) $F598 for ( $F119 ( j , extensionLength ) ) { if ( fileName . charAt ( extensionStart + j ) != extension [ j ] ) continue extensions ; } return dotIndex ; } $F150 }
public ShapeTileSimplex remove_border_line ( int p_no ) { if ( p_no < NUM00 || p_no >= lines_size ( ) ) { return this ; } ArrayList $F66714 new_arr = new ArrayList $F66714 ( lines_size ( ) ) ; new_arr . addAll ( lines_list ) ; new_arr . remove ( p_no ) ; return new ShapeTileSimplex ( new_arr ) ; }
protected boolean waitBeforeExecution $F72 throws InterruptedException { return _BOOL ; }
static boolean isValidStreamingUrl ( String url ) { return url != null && url . matches ( NUM00 ) ; }
public WebServiceProxy ( URL serverURL , ExecutorService executorService ) { this ( serverURL , executorService , NUM00 , NUM00 ) ; }
private static $F96 exposeByteArrayInputStreamBytes ( ByteArrayInputStream bais ) { $F96 buffer ; synchronized ( bais ) { $F96 buf ; int pos ; try { $F116458 ( buf , BAIS_BUF , bais ) ; pos = BAIS_POS . getInt ( bais ) ; } $F180169 ( iae ) $F115 ( available , bais ) if ( pos == NUM00 && buf . length == available ) { buffer = buf ; } else $F65231 ( buffer , available , System , buf , pos ) bais . skip ( available ) ; } return buffer ; }
private void restoreData $F72 { Map $F6251 map = preferenceUtils . getAll ( ) ; $F23720 ( strings , map ) for ( String string : strings ) { if ( string . startsWith ( SharedPreferenceUtils . keyTestMode ) ) { preferenceUtils . restoreKey ( string ) ; } } refreshKeyValues ( ) ; }
public String putImage ( String theFolder , String theImageName , Bitmap theBitmap ) { if $F154085 ( theFolder , theImageName , theBitmap ) $F1274 this . DEFAULT_APP_IMAGEDATA_DIRECTORY = theFolder ; String mFullPath = setupFullPath ( theImageName ) ; if $F1264 ( mFullPath ) { lastImagePath = mFullPath ; saveBitmap ( mFullPath , theBitmap ) ; } return mFullPath ; }
public $F6969 type $F72 { if ( isClass ) { return $F146471 ( object ) ; } else { return object . getClass ( ) ; } }
void addToExternalCSS ( CSSElement cssElement ) $F54891 ( externalCSS , cssElement )
$F16994 ( buf )
private void remove ( String world , PermissionHolder holder , String permission ) { try { if $F77244 ( world ) { holder . unsetPermission ( permission , server , world ) ; } else { holder . unsetPermission ( permission , server ) ; } } catch ( ObjectLacksException ignored ) $F845 save ( holder ) ; }
private void action_treeAddAll $F72 { $F973 ( log ) ListModel model = centerList . getModel ( ) ; $F17900 ( size , model ) int index = - NUM00 ; for ( index = NUM00 ; index < size ; index ++ ) { ListItem item = ( ListItem ) model . getElementAt ( index ) ; action_treeAdd ( item ) ; } }
private ConcurrentSkipListMap . Node $F9340 hiNode $F72 { if ( hi == null ) return m . findLast ( ) ; else if ( hiInclusive ) return m . findNear ( hi , LT | EQ ) ; else return m . findNear ( hi , LT ) ; }
public static final ImagePoint convertPoint ( MapPoint mapPoint , MapEnvelope mapEnv , int imgHeight , int imgWidth ) { long imageY = Math . round ( convertY ( mapPoint , mapEnv , imgHeight ) ) ; long imageX = Math . round ( convertX ( mapPoint , mapEnv , imgWidth ) ) ; return new ImagePoint ( imageX , imageY ) ; }
private void checkUsingAdaptation $F72 { if $F31483 ( tsUseAdaptation ) $F7715 ( tfAdaptationTime , _BOOL , tfAdaptationParam ) else $F7715 ( tfAdaptationTime , _BOOL , tfAdaptationParam ) }
public String combineMix $F72133 ( files , outFile ) { $F8728 ( cmd ) cmd . add ( soxBin ) ; $F18793 ( cmd ) for ( String file : files ) { $F18793 ( cmd ) $F18793 ( cmd ) cmd . add ( file ) ; } cmd . add ( outFile ) ; try { int rc = execSox ( cmd , callback ) ; if ( rc != NUM00 ) { outFile = null ; } } $F12241 ( e ) $F3101 ( e ) return outFile ; }
public Quarter ( int quarter , Year year ) { if $F61167 ( quarter , FIRST_QUARTER , LAST_QUARTER ) $F825 this . year = ( short ) year . getYear ( ) ; this . quarter = ( byte ) quarter ; $F53414 ( peg , Calendar ) }
public void sendRequestVoteRequest ( boolean isPrevote ) throws GondolaException { if ( ! enabled || masterId >= NUM00 ) $F932 if ( ! isPrevote ) { currentTerm ++ ; votedFor = - NUM00 ; save ( currentTerm , memberId ) ; votedFor = memberId ; } prevotesOnly = isPrevote ; Message message = pool . checkout ( ) ; try { saveQueue . getLatest ( savedRid ) ; message . requestVoteRequest ( memberId , currentTerm , isPrevote , savedRid ) ; $F22620 ( peers ) } $F33835 ( message ) prevoteTs = clock . now ( ) + ( long ) ( ( Math . random ( ) * prevotePeriod ) ) ; $F228945 ( isPrevote , prevoteTs , electionTimeout ) }
private $F3803 filterTargetsFromResponse ( $F2689 varrayTaggedPortWWNs , $F224310 ( initiatorTargetMap ) , String initiatorKey ) { $F980 ( log ) $F10144 ( filteredTargetList ) $F64948 ( targetPortListFromResponse , initiatorTargetMap , initiatorKey ) for ( String portWWN : targetPortListFromResponse ) { if ( varrayTaggedPortWWNs . contains ( portWWN ) || $F131344 ( varrayTaggedPortWWNs , portWWN ) ) { filteredTargetList . add ( portWWN . toUpperCase ( ) ) ; } } $F980 ( log ) return filteredTargetList ; }
public PilotingRollData checkManeuver ( MoveStep step , EntityMovementType overallMoveType ) { PilotingRollData roll = getBasePilotingRoll ( overallMoveType ) ; if ( ( step == null ) || ( step . getType ( ) != MoveStepType . MANEUVER ) ) { roll . addModifier ( TargetRoll . CHECK_FALSE , NUM00 ) ; return roll ; } boolean sideSlipMod = ( this instanceof ConvFighter ) && isVSTOL ( ) ; roll . append ( new PilotingRollData ( getId ( ) , ManeuverType . getMod ( step . getManeuverType ( ) , sideSlipMod ) , ManeuverType . getTypeName ( step . getManeuverType ( ) ) + NUM00 ) ) ; return roll ; }
public static $F3803 parseProgramArgs ( ILaunchConfiguration launchConfig ) throws CoreException { return parseArgs ( launchConfig . getAttribute ( IJavaLaunchConfigurationConstants . ATTR_PROGRAM_ARGUMENTS , NUM00 ) ) ; }
public abstract T decodeValue ( String value ) ;
$F5803 ( drawable , getDrawable , matrix , prevMatrix , drawableWidth , drawableHeight , scaleX , viewWidth , scaleY , viewHeight , mScaleType , CENTER , CENTER_CROP , Math , CENTER_INSIDE , FIT_CENTER , FIT_XY , redundantXSpace , redundantYSpace , matchViewWidth , matchViewHeight , isZoomed , imageRenderedAtLeastOnce , normalizedScale , prevMatchViewWidth , prevMatchViewHeight , savePreviousImageValues , m , Matrix , transX , transY , prevActualWidth , actualWidth , getImageWidth , translateMatrixAfterRotate , prevViewWidth , prevActualHeight , actualHeight , getImageHeight , prevViewHeight , fixTrans , setImageMatrix )
$F1 public synchronized MXBeanMapping mappingForType ( Type objType , MXBeanMappingFactory factory ) throws OpenDataException { if $F1710 ( inProgress , objType ) { throw new OpenDataException ( NUM00 + typeName ( objType ) ) ; } MXBeanMapping mapping ; mapping = getMapping ( objType ) ; $F60730 ( mapping ) $F22747 ( inProgress , objType ) try { mapping = makeMapping ( objType , factory ) ; } catch ( OpenDataException e ) { throw openDataException ( NUM00 + typeName ( objType ) , e ) ; } finally $F106 ( inProgress , objType ) putMapping ( objType , mapping ) ; return mapping ; }
public void testCase18 $F72 { $F45030 $F45033 $F15143 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static Element createElementInSignature11Space ( Document doc , String elementName ) { $F28724 ( doc ) if $F38892 ( ds11Prefix ) { return doc . createElementNS ( Constants . SignatureSpec11NS , elementName ) ; } return doc . createElementNS ( Constants . SignatureSpec11NS , ds11Prefix + NUM00 + elementName ) ; }
public void removeElementAt ( final int index ) $F106 ( entries , index )
public static void c2ir ( double $F184368 , int nc , double hh [ ] , int leng ) { hh [ NUM00 ] = Math . exp ( c [ NUM00 ] ) ; for ( $F119 ( n , leng ) ) { double d = NUM00 ; int upl = ( n >= nc ) ? nc - NUM00 : n ; for ( $F9993 ( k , upl ) ) d += k * c [ k ] * hh [ n - k ] ; hh [ n ] = d / n ; } }
public void close $F72 { _ncGuards = null ; }
public void processIndication ( $F10274 ( cimNotification ) ) { String cimIndicationType = getCimIndicationType ( cimNotification ) ; if ( _monitoringPropertiesLoader . isToLogIndications ( ) ) { _logger . debug ( NUM00 + getIndicationData ( cimNotification ) ) ; } if ( cimIndicationType != null && cimIndicationType . equals ( CimConstants . CIM_ALERT_INDICATION_TYPE ) ) { if ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F981 ( _logger ) _alertProcessor . processIndication ( cimNotification ) ; } else if ( cimIndicationType != null && cimIndicationType . equals ( CimConstants . CIM_INST_INDICATION_TYPE ) ) { if ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F981 ( _logger ) _eventProcessor . processIndication ( cimNotification ) ; } else { if ( _monitoringPropertiesLoader . isToLogIndications ( ) ) $F11589 ( _logger , cimIndicationType ) } }
public ReplicationJob createJobForCopyTable ( long auditLogId , long auditLogEntryCreateTime , Table table ) throws StateUpdateException { ReplicationOperation replicationOperation = HiveUtils . isPartitioned ( table ) ? ReplicationOperation . COPY_PARTITIONED_TABLE : ReplicationOperation . COPY_UNPARTITIONED_TABLE ; $F35131 ( extras ) extras . put ( PersistedJobInfo . AUDIT_LOG_ID_EXTRAS_KEY , Long . toString ( auditLogId ) ) ; extras . put ( PersistedJobInfo . AUDIT_LOG_ENTRY_CREATE_TIME_KEY , Long . toString ( auditLogEntryCreateTime ) ) ; PersistedJobInfo persistedJobInfo = jobInfoStore . resilientCreate ( replicationOperation , ReplicationStatus . PENDING , ReplicationUtils . getLocation ( table ) , srcCluster . getName ( ) , new HiveObjectSpec ( table ) , Collections . emptyList ( ) , ReplicationUtils . getTldt ( table ) , Optional . empty ( ) , Optional . empty ( ) , extras ) ; $F212639 ( spec , table ) Optional $F72371 tableLocation = ReplicationUtils . getLocation ( table ) ; switch ( replicationOperation ) { case COPY_UNPARTITIONED_TABLE : return new ReplicationJob ( conf , new CopyUnpartitionedTableTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , tableLocation , directoryCopier , _BOOL ) , onStateChangeHandler , persistedJobInfo ) ; case COPY_PARTITIONED_TABLE : return new ReplicationJob ( conf , new CopyPartitionedTableTask ( conf , destinationObjectFactory , objectConflictHandler , srcCluster , destCluster , spec , tableLocation ) , onStateChangeHandler , persistedJobInfo ) ; $F6634 ( replicationOperation ) } }
$F47733 ( reader , writer , buffer , count )
synchronized public void releaseXMLReader ( XMLReader reader ) { if ( m_readerManager != null ) { m_readerManager . releaseXMLReader ( reader ) ; } }
public int unFinishSize $F72 $F1652 ( mUnFinishQueue )
public void addSample ( int weight , float value ) { ensureSortedByIndex ( ) ; Sample newSample = recycledSampleCount > NUM00 ? recycledSamples [ -- recycledSampleCount ] : new Sample $F72 ; newSample . index = nextSampleIndex ++ ; newSample . weight = weight ; newSample . value = value ; samples . add ( newSample ) ; totalWeight += weight ; while ( totalWeight > maxWeight ) { int excessWeight = totalWeight - maxWeight ; Sample oldestSample = samples . get ( NUM00 ) ; if ( oldestSample . weight <= excessWeight ) { totalWeight -= oldestSample . weight ; $F86372 ( samples ) if ( recycledSampleCount < MAX_RECYCLED_SAMPLES ) $F52339 ( recycledSamples , recycledSampleCount , oldestSample ) } else { oldestSample . weight -= excessWeight ; totalWeight -= excessWeight ; } } }
private void specialisedPredicates $F72 { DoublePredicate doublePredicate = null ; LongPredicate longPredicate = null ; }
private static final synchronized int nextPoolId $F72 $F124417 ( poolNumberSequence )
public static boolean secKeyVerify $F97 ( seckey ) { Preconditions . checkArgument ( seckey . length == NUM00 ) ; ByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; if ( byteBuff == null || byteBuff . capacity ( ) < seckey . length ) { $F67586 ( byteBuff , ByteBuffer , seckey ) $F16706 ( byteBuff , ByteOrder ) nativeECDSABuffer . set ( byteBuff ) ; } $F23501 ( byteBuff ) byteBuff . put ( seckey ) ; $F8934 ( r ) try { return secp256k1_ec_seckey_verify ( byteBuff , Secp256k1Context . getContext ( ) ) == NUM00 ; } $F796 ( r ) }
public TreeNodeIterator ( Node root , boolean preorder ) { m_preorder = preorder ; m_root = root ; $F13241 ( m_stack ) m_stack . add ( root ) ; if ( ! preorder ) { for ( Node n = root . getChild ( NUM00 ) ; n != null ; n = n . getChild ( NUM00 ) ) m_stack . add ( n ) ; } }
public static WritableNativeArray makeNativeArray ( List objects ) { WritableNativeArray nativeArray = new WritableNativeArray $F72 ; $F1933 ( objects , nativeArray ) for ( Object elem : objects ) { elem = makeNativeObject ( elem ) ; if ( elem == null ) { nativeArray . pushNull ( ) ; } else if ( elem instanceof Boolean ) { nativeArray . pushBoolean ( ( Boolean ) elem ) ; } else if ( elem instanceof Integer ) { nativeArray . pushInt ( ( Integer ) elem ) ; } else if ( elem instanceof Double ) { nativeArray . pushDouble ( ( Double ) elem ) ; } else if ( elem instanceof String ) { nativeArray . pushString ( ( String ) elem ) ; } else if ( elem instanceof WritableNativeArray ) { nativeArray . pushArray ( ( WritableNativeArray ) elem ) ; } else if ( elem instanceof WritableNativeMap ) { nativeArray . pushMap ( ( WritableNativeMap ) elem ) ; } else { throw new IllegalArgumentException $F93485 ( elem ) ; } } return nativeArray ; }
public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } $F62612 } return size ; }
$F1 public void nodeChanged $F72 { $F973 ( log ) wakeup ( ) ; }
private static NodePair splitBlock ( final View view , final Function function , final CodeNode node , final Instruction instruction ) { boolean before = _BOOL ; final List $F12038 beforeInstructions = new $F241341 $F72 ; final List $F12038 afterInstructions = new $F241341 $F72 ; for ( final Instruction nodeInstruction : node . getInstructions ( ) ) { $F28618 ( before , beforeInstructions , nodeInstruction , afterInstructions ) $F52555 ( nodeInstruction , instruction , before , _BOOL ) } if $F2979 ( afterInstructions ) { return new NodePair ( node , null ) ; } else { final CodeNode firstNode = view . createCodeNode ( function , beforeInstructions ) ; final CodeNode secondNode = view . createCodeNode ( function , afterInstructions ) ; $F14782 ( firstNode , node ) secondNode . setColor ( DEFAULT_BLOCK_COLOR ) ; for ( final ViewEdge edge : node . getIncomingEdges ( ) ) { final ViewEdge newEdge = view . createEdge ( edge . getSource ( ) , firstNode , edge . getType ( ) ) ; $F14782 ( newEdge , edge ) } for ( final ViewEdge edge : node . getOutgoingEdges ( ) ) { final ViewEdge newEdge = view . createEdge ( secondNode , edge . getTarget ( ) , edge . getType ( ) ) ; $F14782 ( newEdge , edge ) } view . deleteNode ( node ) ; return new NodePair ( firstNode , secondNode ) ; } }
public $F7329 objectToString ( final long shopId , final String currency , final BigDecimal regularPrice ) { return new $F7329 ( NUM00 + shopId + NUM00 + currency , moneyBridge . objectToString ( regularPrice ) ) ; }
public String readLine $F72 throws IOException { $F83 ( line ) int i ; char c ; i = read ( ) ; $F28386 ( i ) while ( i > - NUM00 && i != NUM00 && i != NUM00 ) { c = $F27723 ( i ) ; line = line . append ( c ) ; i = read ( ) ; } if ( i == NUM00 ) { if $F657475 ( i , read ) throw new IOException ( $F36004 ( Integer , i ) + line ) ; } $F92 ( line ) }
static public $F117572 ( forceCreationOfNewIndex , _BOOL )
public FrameBlock zeroOutOperations ( FrameBlock result , IndexRange range , boolean complementary , int iRowStartSrc , int iRowStartDest , int brlen , int iMaxRowsToCopy ) throws DMLRuntimeException { int clen = getNumColumns ( ) ; if ( result == null ) result = new FrameBlock ( getSchema ( ) ) ; else { result . reset ( NUM00 , _BOOL ) ; result . setSchema ( getSchema ( ) ) ; } result . ensureAllocatedColumns ( brlen ) ; if ( complementary ) { for ( int r = ( int ) range . rowStart ; r <= range . rowEnd && r + iRowStartDest < brlen ; r ++ ) { for ( int c = ( int ) range . colStart ; c <= range . colEnd ; c ++ ) result . set ( r + iRowStartDest , c , get ( r + iRowStartSrc , c ) ) ; } } else { int r = iRowStartDest ; for ( ; r < ( int ) range . rowStart && r - iRowStartDest < iMaxRowsToCopy ; r ++ ) for ( $F119 ( c , clen ) ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; for ( ; r <= ( int ) range . rowEnd && r - iRowStartDest < iMaxRowsToCopy ; r ++ ) { for ( int c = NUM00 ; c < ( int ) range . colStart ; c ++ ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; for ( int c = ( int ) range . colEnd + NUM00 ; c < clen ; c ++ ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; } for ( ; r - iRowStartDest < iMaxRowsToCopy ; r ++ ) for ( $F119 ( c , clen ) ) result . set ( r , c , get ( r + iRowStartSrc - iRowStartDest , c ) ) ; } return result ; }
public SignalBarrier $F72 { _owner = null ; }
public void testToBigIntegerPos1 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue )
private static $F5415 normalize $F74143 ( coefficients ) { float accumulator = NUM00 ; for ( $F1139 ( x , coefficients ) ) { accumulator += Math . abs ( coefficients [ x ] ) ; } for ( $F1139 ( x , coefficients ) ) $F160348 ( coefficients , x , accumulator ) return coefficients ; }
protected void printTrack ( Track track ) { DefaultEntityViewInfo vInfo = ( DefaultEntityViewInfo ) track . getViewInfo ( ) ; $F725 ( tmpNodeBuffer ) tmpNodeBuffer . addAll ( track . getNodes ( ) ) ; if $F5973 ( tmpNodeBuffer ) { printLine ( imageBdr , tmpNodeBuffer , vInfo , _BOOL , _BOOL , null ) ; printPoint ( imageBdr , $F7661 ( tmpNodeBuffer ) , vInfo , null ) ; } }
private PeriodFormatterBuilder appendSuffix ( PeriodFieldAffix suffix ) { final Object originalPrinter ; final Object originalParser ; if $F3817 ( iElementPairs ) { $F14770 ( originalPrinter , iElementPairs ) $F14770 ( originalParser , iElementPairs ) } else $F39233 ( originalPrinter , originalParser ) if ( originalPrinter == null || originalParser == null || originalPrinter != originalParser || ! ( originalPrinter instanceof FieldFormatter ) ) $F4639 clearPrefix ( ) ; FieldFormatter newField = new FieldFormatter ( ( FieldFormatter ) originalPrinter , suffix ) ; iElementPairs . set ( $F175208 ( iElementPairs , newField ) ) ; iElementPairs . set ( $F175208 ( iElementPairs , newField ) ) ; iFieldFormatters [ newField . getFieldType ( ) ] = newField ; return this ; }
public Collection < Cube > all $F72 { return Collections . unmodifiableCollection ( cubes ) ; }
public static short readUByte ( ByteBuffer buffer ) { $F46702 ( b , buffer ) return ( short ) ( b & NUM00 ) ; }
public static double mostToxicRow ( Gate g ) { return Collections . min ( g . get_toxicity ( ) ) ; }
public MultiServer $F72 { this ( NetworkConfig . DEFAULT_TCP_PORT , NetworkConfig . DEFAULT_UDP_PORT ) ; }
protected String urlString $F72 throws ParseException { $F280 ( retval ) lexer . selectLexer ( NUM00 ) ; while ( lexer . hasMoreChars ( ) ) { char la = lexer . lookAhead ( NUM00 ) ; if ( la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 || la == NUM00 ) $F597 lexer . consume ( NUM00 ) ; retval . append ( la ) ; } $F92 ( retval ) }
public XmlElement $F97 ( encodedDocument ) { $F19273 ( encodedDocument ) this . encoded = encodedDocument . clone ( ) ; }
public void add ( int position , int height ) { $F170294 ( currHeight , mMap , position ) if ( currHeight != height ) { if ( currHeight == - NUM00 ) { if $F36323 ( mMap , mMaxSize ) { mMap . delete ( mOrder . remove ( NUM00 ) ) ; } } else { mOrder . remove ( ( Integer ) position ) ; } mMap . put ( position , height ) ; mOrder . add ( position ) ; } }
public void testmodInversePos2 $F72 { byte $F3009 = { NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 } ; byte mBytes [ ] = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; int aSign = NUM00 ; int mSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( modulus , mSign , mBytes ) BigInteger result = aNumber . modInverse ( modulus ) ; $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
@ GET $F2513 $F2512 ( MediaType ) @ CheckPermission ( roles = { Role . SECURITY_ADMIN } ) public OSTenantListRestRep listCoprhdOsTenants $F72 { $F980 ( _log ) List < OSTenant > tenants = getOsTenantsFromCoprhdDb ( ) ; return map ( tenants ) ; }
public int read $F3295 ( data ) { init ( ) ; if ( data != null ) { rawData = ByteBuffer . wrap ( data ) ; $F23501 ( rawData ) $F31290 ( rawData , ByteOrder ) readHeader ( ) ; $F218592 ( err , readContents , frameCount , status , STATUS_FORMAT_ERROR ) } else { status = STATUS_OPEN_ERROR ; } return status ; }
private void calculateUniqueValue $F89818 ( minValue , uniqueValue ) { for ( $F119 ( i , measureCount ) ) { if ( type [ i ] == CarbonCommonConstants . BIG_INT_MEASURE ) { uniqueValue [ i ] = ( long ) minValue [ i ] - NUM00 ; } else if ( type [ i ] == CarbonCommonConstants . BIG_DECIMAL_MEASURE ) { BigDecimal val = ( BigDecimal ) minValue [ i ] ; uniqueValue [ i ] = ( val . subtract ( $F173307 ) ) ; } else { uniqueValue [ i ] = ( double ) minValue [ i ] - NUM00 ; } } }
@ RequestMapping ( $F3144 ) public void ssoBindingError ( Locale locale , @ PathVariable ( $F3144 ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( $F370 ( locale , tenant ) ) ; ssoDefaultTenantBindingError ( locale , response ) ; }
public long env_end $F72 $F12907 ( Long , fields )
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return NUM00 S ; $F3366 return HELLO ; $F20809 } }
public X509TrustChainKeySelector ( X509Certificate ... trustedRoots ) { _log = LoggerFactory . getLogger ( X509TrustChainKeySelector . class ) ; checkCtorArgsNotNull ( trustedRoots ) ; _trustAnchors = new HashSet < TrustAnchor > $F72 ; for ( X509Certificate cert : trustedRoots ) { _trustAnchors . add ( new TrustAnchor ( cert , null ) ) ; } }
$F1 public void removeAttributeNS ( String namespaceURI , String localName ) { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { $F209190 ( msg , DOMMessageFormatter ) throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , msg ) ; } $F191280 ( needsSyncData , synchronizeData ) $F2329 ( attributes ) attributes . safeRemoveNamedItemNS ( namespaceURI , localName ) ; }
public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { $F1933 ( img , _BOOL ) boolean result ; $F74906 ( srcWidth , img ) $F74908 ( srcHeight , img ) if ( srcWidth < NUM00 || srcHeight < NUM00 ) { result = _BOOL ; } else { result = drawImageToPlatform ( img , xform , null , NUM00 , NUM00 , srcWidth , srcHeight , _BOOL ) ; } return result ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { $F59551 ( model , getModel ) $F123284 ( ps , getChild , PROPERTY_ATTRIBUTE ) $F59547 ( serverName , getPageSessionAttribute , PG_ATTR_SERVER_NAME ) $F59547 ( name , getDisplayFieldValue , TF_NAME ) $F1382 ( name ) if $F4012 ( name ) { try { model . cloneServer ( serverName , name ) ; backTrail ( ) ; ServerSiteViewBean vb = ( ServerSiteViewBean ) getViewBean ( ServerSiteViewBean . class ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } $F123309 ( setInlineAlertMessage , CCAlert , e , forwardTo ) } else { setInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , NUM00 ) ; forwardTo ( ) ; } }
public static $F247984 FeatureValueCollection < FV > combine ( Derivation $F247984 hyp ) { Counter < FV > counter = new ClassicCounter < FV > $F72 ; for ( ; hyp != null ; hyp = hyp . parent ) { if ( hyp . features != null ) { for ( FeatureValue < FV > feature : hyp . features ) { counter . incrementCount ( feature . name , feature . value ) ; } } } Set < FV > featureNames = new TreeSet < FV > $F57797 ( counter ) ; FeatureValueCollection < FV > combinedList = new FeatureValueList < FV > $F716 ( featureNames ) ; for ( FV feature : featureNames ) { combinedList . add ( new FeatureValue < FV > ( feature , counter . getCount ( feature ) ) ) ; } return combinedList ; }
public void sendTitles $F72 { $F2329 ( listeners ) $F4000 ( labels ) labels . append ( NUM00 + Bundle . getMessage ( NUM00 ) + NUM00 ) ; labels . append ( NUM00 + manager . getClosedText ( ) + NUM00 ) ; labels . append ( NUM00 + manager . getThrownText ( ) + NUM00 ) ; $F1822 ( message , labels ) for ( ControllerInterface listener : listeners ) { listener . sendPacketToDevice ( message ) ; } }
$F292923 ( super )
$F123743 ( session , threadLocal )
protected Calendar $F72 { $F39044 ( zone , TimeZone ) $F3936 ( fields , FIELD_COUNT ) $F34814 ( isSet , FIELD_COUNT ) areFieldsSet = isTimeSet = _BOOL ; $F153821 ( setTimeInMillis , System ) }
private PointPair calculateEdge ( Component comp1 , Component comp2 ) { $F5112 ( r1 , comp1 ) $F5112 ( r2 , comp2 ) Point c1 = new Point ( ( int ) $F85273 ( r1 ) , ( int ) $F85279 ( r1 ) ) ; Point c2 = new Point ( ( int ) $F85273 ( r2 ) , ( int ) $F85279 ( r2 ) ) ; double angle = Math . atan2 ( c1 . y - c2 . y , c1 . x - c2 . x ) ; angle += Math . PI / NUM00 ; Point d = new Point ( ( int ) $F68927 ( offset , Math , angle ) , ( int ) $F68922 ( offset , Math , angle ) ) ; $F26898 ( c1 , d ) $F26898 ( c2 , d ) Point p1 = getBoundaryIntersection ( comp1 , c1 , c2 ) ; Point p2 = getBoundaryIntersection ( comp2 , c2 , c1 ) ; if $F54923 ( p1 , p2 ) { c1 = new Point ( ( int ) $F85273 ( r1 ) , ( int ) $F85279 ( r1 ) ) ; c2 = new Point ( ( int ) $F85273 ( r2 ) , ( int ) $F85279 ( r2 ) ) ; p1 = getBoundaryIntersection ( comp1 , c1 , c2 ) ; p2 = getBoundaryIntersection ( comp2 , c2 , c1 ) ; } if $F54923 ( p1 , p2 ) $F1337 return new PointPair ( p1 , p2 ) ; }
$F226941 ( c , XML11CHARS , MASK_XML11_SPACE )
public void unregisterPlayerListener ( CheerleaderPlayerListener listener ) { checkState ( ) ; mCheerleaderPlayerListeners . remove ( listener ) ; }
public OutputStream openOutputStream ( Uri uri , boolean append ) throws IOException { assertBackgroundThread ( ) ; switch ( getUriType ( uri ) ) { case URI_TYPE_FILE : { $F291035 ( localFile , uri ) $F4924 ( parent , localFile ) if ( parent != null ) $F1908 ( parent ) return new FileOutputStream ( localFile , append ) ; } case URI_TYPE_CONTENT : case URI_TYPE_RESOURCE : { AssetFileDescriptor assetFd = contentResolver . openAssetFileDescriptor ( uri , append ? NUM00 : NUM00 ) ; return assetFd . createOutputStream ( ) ; } } $F352240 ( uri ) }
protected Integer adjustIntegerValue ( Integer origValue , Integer minValue , Integer maxValue ) { Integer resultValue = origValue ; if $F25292 ( resultValue , minValue ) { resultValue = minValue ; } if $F9032 ( resultValue , maxValue ) { resultValue = maxValue ; } return resultValue ; }
private void initPaints ( Resources res ) { final String monthTypeface = res . getString ( R . string . date_picker_month_typeface ) ; final String dayOfWeekTypeface = res . getString ( R . string . date_picker_day_of_week_typeface ) ; final String dayTypeface = res . getString ( R . string . date_picker_day_typeface ) ; final int monthTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_month_text_size ) ; final int dayOfWeekTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_day_of_week_text_size ) ; final int dayTextSize = res . getDimensionPixelSize ( R . dimen . date_picker_day_text_size ) ; mMonthPaint . setAntiAlias ( _BOOL ) ; mMonthPaint . setTextSize ( monthTextSize ) ; mMonthPaint . setTypeface ( Typeface . create ( monthTypeface , NUM00 ) ) ; $F5595 ( mMonthPaint , Align ) $F5597 ( mMonthPaint , Style ) mDayOfWeekPaint . setAntiAlias ( _BOOL ) ; mDayOfWeekPaint . setTextSize ( dayOfWeekTextSize ) ; mDayOfWeekPaint . setTypeface ( Typeface . create ( dayOfWeekTypeface , NUM00 ) ) ; $F5595 ( mDayOfWeekPaint , Align ) $F5597 ( mDayOfWeekPaint , Style ) mDaySelectorPaint . setAntiAlias ( _BOOL ) ; $F5597 ( mDaySelectorPaint , Style ) mDayHighlightPaint . setAntiAlias ( _BOOL ) ; $F5597 ( mDayHighlightPaint , Style ) mDayPaint . setAntiAlias ( _BOOL ) ; mDayPaint . setTextSize ( dayTextSize ) ; mDayPaint . setTypeface ( Typeface . create ( dayTypeface , NUM00 ) ) ; $F5595 ( mDayPaint , Align ) $F5597 ( mDayPaint , Style ) }
$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
$F1654 ( rules )
private void copyArrays $F72 { $F806 oldSyms = _symbols ; int size = oldSyms . length ; $F58180 ( _symbols , size ) $F135 ( System , oldSyms , _symbols , size ) Bucket [ ] oldBuckets = _buckets ; size = oldBuckets . length ; _buckets = new Bucket [ size ] ; $F135 ( System , oldBuckets , _buckets , size ) }
$F96285 ( labels , map , clones , i )
@ Procedure @ PerformsWrites @ Description ( NUM00 ) public Stream < RelationshipRefactorResult > from ( @ Name ( NUM00 ) Relationship rel , @ Name ( NUM00 ) Node newNode ) { RelationshipRefactorResult result = new RelationshipRefactorResult ( rel . getId ( ) ) ; try { Relationship newRel = newNode . createRelationshipTo ( rel . getEndNode ( ) , rel . getType ( ) ) ; copyProperties ( rel , newRel ) ; $F1900 ( rel ) return Stream . of ( result . withOther ( newRel ) ) ; } catch ( Exception e ) { return Stream . of ( result . withError ( e ) ) ; } }
public static long maxFill ( final long n , final float f ) { return Math . min ( ( long ) Math . ceil ( n * f ) , n - NUM00 ) ; }
public static void print ( char x ) $F7523 ( out , x )
public void clearSourceElements $F72 { for ( PNode node : sourceElements ) { SourceHandle . removeSourceHandleFrom ( node ) ; } $F725 ( sourceElements ) selectionModel . fireSelectionChanged ( ) ; }
public static $F3789 readMatrix ( int numberOfRows , int numberOfColumns , boolean ignoreFirstLine , String fileName ) { $F220301 ( matrix , numberOfRows , numberOfColumns ) try { $F35542 ( fr , fileName ) $F20481 ( br , fr ) String line ; StringTokenizer tokenizer ; String token ; if ( ignoreFirstLine ) { $F224956 ( br ) } $F36243 ( line , br ) int rowId = NUM00 ; while ( line != null ) { tokenizer = new StringTokenizer ( line ) ; for ( $F119 ( i , numberOfColumns ) ) { $F39710 ( token , tokenizer ) $F182295 ( parsedNumber , Double , token ) matrix [ rowId ] [ i ] = parsedNumber ; } if $F14498 ( tokenizer ) $F11389 $F36243 ( line , br ) rowId ++ ; } if ( rowId != numberOfRows ) $F11389 } $F41337 ( e ) catch ( Exception e ) $F33618 ( e ) return matrix ; }
$F1 protected boolean readIntoBuffer ( int minLength ) { if ( bufferSpaceLeft ( ) < minLength ) { increaseBufferSize ( minLength + currentlyInBuffer ( ) ) ; } else if ( buf . length - writePos < minLength ) $F5795 ( compact ) int readSum = NUM00 ; while ( readSum < minLength && $F1030 ( datagrams ) ) { Datagram next = datagrams . removeFirst ( ) ; int length = ( int ) next . getDuration ( ) ; if ( buf . length < writePos + length ) { increaseBufferSize ( writePos + length ) ; } int read = readDatagram ( next , buf , writePos ) ; writePos += read ; readSum += read ; } if ( dataProcessor != null ) { dataProcessor . applyInline ( buf , writePos - readSum , readSum ) ; } return readSum >= minLength ; }
private int heightOfPhi ( int Phi ) { $F7630 ( Phi ) int Tau = NUM00 ; int modul = NUM00 ; while ( Phi % modul == NUM00 ) { modul *= NUM00 ; Tau += NUM00 ; } return Tau - NUM00 ; }
$F1113 public ClarifaiClient buildSync $F72 { return new ClarifaiClientImpl ( this ) ; }
public void mouseReleased ( MouseEvent e ) { $F128225 vv = ( $F128225 ) e . getSource ( ) ; down = null ; vv . setCursor ( $F88367 ( Cursor ) ) ; }
$F5466 public static $F6969 classForName ( $F5466 String cls , $F5466 $F6969 dflt , boolean includePrimitiveTypes ) { $F33929 ( clazz ) if ( cls == null ) clazz = dflt ; else if ( ! includePrimitiveTypes || $F20 ( cls ) || $F86155 ( clazz , primitiveMap , cls ) == null ) { try { clazz = Class . forName ( cls ) ; } catch ( ClassNotFoundException ignore ) { clazz = dflt ; } } return clazz ; }
public String checkWriteProtected ( int resIdAction , final File ... filesToBeModified ) { if ( filesToBeModified != null ) { for ( File file : filesToBeModified ) { if ( ( file != null ) && $F3428 ( file ) && $F14326 ( file ) ) { String action = ( resIdAction == NUM00 ) ? NUM00 : mContext . getString ( resIdAction ) ; return mContext . getString ( R . string . file_err_writeprotected , file . getAbsolutePath ( ) , action ) ; } } } $F1274 }
$F49286 ( value , absMin , absMax , absValue , Math )
$F1113 $F125711 ( _BOOL ) public static String strip ( $F1113 final String s , $F1113 final CharFilter filter ) { final StringBuilder result = new StringBuilder $F45530 ( s ) ; for ( $F1088 ( i , s ) ) { $F1280 ( ch , s , i ) if ( filter . accept ( ch ) ) $F288 ( result , ch ) } $F92 ( result ) }
protected void addComponent ( XMLComponent component ) $F42353 ( fComponents , component , addRecognizedParamsAndSetDefaults )
public void testLocalInstances_distribution $F72 { MatsimRandom . reset ( NUM00 ) ; Random local1a = MatsimRandom . getLocalInstance ( ) ; $F8669 ( value1 , local1a ) MatsimRandom . reset ( NUM00 ) ; Random local2a = MatsimRandom . getLocalInstance ( ) ; $F8669 ( value2a , local2a ) Random local2b = MatsimRandom . getLocalInstance ( ) ; $F8669 ( value2b , local2b ) assertTrue ( Math . abs ( value1 - value2a ) > EPSILON ) ; assertTrue ( Math . abs ( value2a - value2b ) > EPSILON ) ; assertTrue ( Math . abs ( value1 - value2b ) > EPSILON ) ; }
public final void test_ROUNDTRIP_GetKeySpecKey02 $F72 { boolean performed = _BOOL ; for ( $F1139 ( i , algName ) ) { try { $F75160 ( g , algName , i , privateKeyInfoDamaged ) EncryptedPrivateKeyInfo epki ; $F71324 ( g , epki , algName , i ) try { epki . getKeySpec ( $F71326 ( g ) ) ; $F71332 ( fail , algName , i ) } $F32328 performed = _BOOL ; } $F75179 $F71336 } assertTrue ( NUM00 , performed ) ; }
public void clear ( IValidatable bean ) { for ( Binding b : _optComponents . values ( ) ) $F241907 ( b , bean ) for ( Binding b : _bindings . values ( ) ) $F241907 ( b , bean ) _modified = _BOOL ; }
public boolean hasCredentials $F72 { return _hasCredentials ; }
public boolean isRecursiveAttrSet ( ElemAttributeSet attrSet ) { if ( null == m_attrSetStack ) { $F84877 ( m_attrSetStack ) ; } if $F84882 ( m_attrSetStack ) { int loc = m_attrSetStack . search ( attrSet ) ; if ( loc > - NUM00 ) { return _BOOL ; } } return _BOOL ; }
public void clear ( AbsoluteTableIdentifier absoluteTableIdentifier ) $F76730 ( tableLockMap , absoluteTableIdentifier , tableSegmentMap )
public int enumerate ( Thread [ ] threads ) $F8587 ( enumerate , threads , _BOOL )
public static InputStream toInputStream ( CharSequence input ) { $F17718 ( toInputStream , input ) }
$F1 public void process ( Number tuple ) { values . add ( tuple . doubleValue ( ) ) ; }
public void grantWritePermission ( Collection attributeNames ) { $F10531 ( it , attributeNames ) if ( it != null ) { while $F2921 ( it ) { $F2778 ( temp , it ) $F9631 ( writables , temp ) } } }
public void saveData ( File file ) throws IOException { synchronized ( accumulators ) { ObjectOutputStream oos = null ; try { oos = new ObjectOutputStream $F4443 ( file ) ; oos . writeObject ( accumulators ) ; } $F14364 ( oos ) } }
public static Ingredient fromCursor ( Cursor cursor ) { Ingredient ingredient = new Ingredient $F72 ; for ( $F90183 ( c , cursor ) ) { $F43881 ( columnName , cursor , c ) if ( columnName . equals ( RecipeIngredientTable . AMOUNT_COLUMN ) ) { ingredient . setAmount ( cursor . getString ( c ) ) ; } else if $F197257 ( columnName , RecipeIngredientTable ) $F197260 ( ingredient , cursor , c ) } return ingredient ; }
public void append ( char $F184368 , int off , int len ) { int restLength = buffer . length - pos ; if ( len < restLength ) $F21534 ( System , c , off , buffer , pos , len ) else { System . arraycopy ( c , off , buffer , pos , restLength ) ; curr . next = new Entity ( buffer ) ; curr = curr . next ; length += buffer . length ; buffer = new char [ ( buffer . length > len - restLength ) ? buffer . length : len - restLength ] ; System . arraycopy ( c , off + restLength , buffer , NUM00 , len - restLength ) ; pos = len - restLength ; } }
public boolean contains ( String voiceName ) { return ( getVoice ( voiceName ) != null ) ; }
public static boolean isEnterpriseEdition ( String serverVersion ) { return serverVersion . contains ( NUM00 ) || serverVersion . contains ( NUM00 ) || serverVersion . contains ( NUM00 ) ; }
$F1 public CategoryItemRendererState initialise ( Graphics2D g2 , Rectangle2D dataArea , CategoryPlot plot , int rendererIndex , PlotRenderingInfo info ) { CategoryItemRendererState state = super . initialise ( g2 , dataArea , plot , rendererIndex , info ) ; CategoryAxis domainAxis = getDomainAxis ( plot , rendererIndex ) ; CategoryDataset dataset = plot . getDataset ( rendererIndex ) ; if ( dataset != null ) { $F16742 ( columns , dataset ) $F160876 ( rows , dataset ) double space = NUM00 ; $F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) $F32511 ( space , dataArea ) else if ( orientation == PlotOrientation . VERTICAL ) $F32508 ( space , dataArea ) double maxWidth = space * getMaximumBarWidth ( ) ; double categoryMargin = NUM00 ; double currentItemMargin = NUM00 ; if ( columns > NUM00 ) { categoryMargin = domainAxis . getCategoryMargin ( ) ; } if ( rows > NUM00 ) $F20182 ( currentItemMargin , getItemMargin ) double used = space * ( NUM00 - domainAxis . getLowerMargin ( ) - domainAxis . getUpperMargin ( ) - categoryMargin - currentItemMargin ) ; if ( ( rows * columns ) > NUM00 ) { state . setBarWidth ( Math . min ( used / ( dataset . getColumnCount ( ) * dataset . getRowCount ( ) ) , maxWidth ) ) ; } else { state . setBarWidth ( Math . min ( used , maxWidth ) ) ; } } return state ; }
public static boolean createFolder ( $F1431 Context mContext , String path , String folderName ) { $F4453 ( SDCardRoot , path , folderName ) if $F1906 ( SDCardRoot ) { return SDCardRoot . mkdir ( ) ; } return _BOOL ; }
private static NSObject parseObject ( Node n ) throws ParseException , IOException { $F48115 ( type , n ) if $F3057 ( type ) { NSDictionary dict = new NSDictionary $F72 ; $F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; for ( $F48125 ( i , children ) ) { $F22142 ( key , children , i ) Node val = children . get ( i + NUM00 ) ; String keyString = getNodeTextContents ( key ) ; $F39715 ( dict , keyString , parseObject , val ) } return dict ; } else if $F3057 ( type ) { $F27878 children = filterElementNodes ( n . getChildNodes ( ) ) ; NSArray array = new NSArray $F716 ( children ) ; for ( $F2277 ( i , children ) ) { array . setValue ( i , parseObject ( children . get ( i ) ) ) ; } return array ; } else if $F3057 ( type ) { return new NSNumber ( _BOOL ) ; } else if $F3057 ( type ) { return new NSNumber ( _BOOL ) ; } else if $F3057 ( type ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSString ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSData ( getNodeTextContents ( n ) ) ; } else if $F3057 ( type ) { return new NSDate ( getNodeTextContents ( n ) ) ; } $F1274 }
LuaString loadString $F72 throws IOException { int size = this . luacSizeofSizeT == NUM00 ? $F112407 ( loadInt64 ) : loadInt ( ) ; $F112238 ( size ) $F2175 ( bytes , size ) $F65245 ( is , bytes , size ) return LuaString . valueOf ( $F31038 ( bytes ) ) ; }
protected AbstractPreferences ( AbstractPreferences parent , String name ) { if ( parent == null ) { if $F1264 ( name ) $F29525 ( name ) this . absolutePath = NUM00 ; root = this ; } else { if $F12703 ( name ) $F29525 ( name ) if $F3057 ( name ) $F824 root = parent . root ; absolutePath = ( parent == root ? NUM00 + name : parent . absolutePath ( ) + NUM00 + name ) ; } this . name = name ; this . parent = parent ; }
static $F6969 canonicalize ( $F6969 t , int how ) { $F33929 ( ct ) if ( t == $F12222 ) $F845 else if $F49310 ( t ) { switch ( how ) { case UNWRAP : ct = Wrapper . asPrimitiveType ( t ) ; if ( ct != t ) return ct ; $F597 case RAW_RETURN : case ERASE : return $F12222 ; } } else if ( t == $F78753 ) { switch ( how ) { case RAW_RETURN : return $F37010 ; case WRAP : return Void . class ; } } else { switch ( how ) { case WRAP : return Wrapper . asWrapperType ( t ) ; case INTS : if ( t == $F37010 || t == $F41237 ) $F1274 if $F41243 ( t ) return $F41237 ; return $F37010 ; case LONGS : if $F41238 ( t ) $F1274 return $F41237 ; case RAW_RETURN : if ( t == $F37010 || t == $F41237 || t == $F41248 || t == $F41242 ) $F1274 return $F37010 ; } } $F1274 }
protected String extractSubstring ( String pszSrc ) { int nBracket = NUM00 ; int i ; String pszReturn ; for ( i = NUM00 ; i < pszSrc . length ( ) && ( nBracket > NUM00 || pszSrc . charAt ( i ) != NUM00 ) ; i ++ ) { if $F11983 ( pszSrc , i ) { nBracket ++ ; } else if $F11983 ( pszSrc , i ) { nBracket -- ; } } if $F4432 ( pszSrc ) { pszReturn = $F28929 ( pszSrc , i ) ; } else $F14494 ( pszReturn , pszSrc , i ) return pszReturn ; }
public void read ( Appendable dest ) throws IOException { $F3576 ( _inputStream ) while ( _BOOL ) { if ( _start >= _end ) { _start = NUM00 ; $F81136 ( _end , _inputStream , _bytes ) $F65649 ( _end ) } byte b = _bytes [ _start ] ; if ( b >= NUM00 ) { $F36813 ( dest , b ) _start ++ ; } else { int code = read2 ( ) ; if ( code < NUM00 ) $F46352 ( dest , code ) else if ( code <= NUM00 ) { dest . append ( ( char ) ( ( ( code - NUM00 ) > > NUM00 ) + NUM00 ) ) ; dest . append ( ( char ) ( ( ( code - NUM00 ) & NUM00 ) + NUM00 ) ) ; } else { throw new CharConversionException ( $F36004 ( Integer , code ) ) ; } } } }
public boolean isMonitoring $F72 { return m_Monitor . isMonitoring ( ) ; }
static final Color hexToColor ( String value ) { String digits ; $F1749 ( n , value ) if $F3106 ( value ) { digits = value . substring ( NUM00 , Math . min ( value . length ( ) , NUM00 ) ) ; } else { digits = value ; } String hstr = NUM00 + digits ; Color c ; try { c = Color . decode ( hstr ) ; } catch ( NumberFormatException nfe ) { c = null ; } return c ; }
public final boolean contentEquals ( java . lang . CharSequence csq ) { if $F8732 ( csq , _length ) return _BOOL ; for ( int i = NUM00 ; i < _length ; ) { char c = _high [ i > > B1 ] [ i & M1 ] ; if ( csq . charAt ( i ++ ) != c ) return _BOOL ; } return _BOOL ; }
private void populateAvailableDataStores $F72 { DataAccessFactory fac ; $F980 ( logger ) Iterator < DataStoreFactorySpi > iterator = DataStoreFinder . getAvailableDataStores ( ) ; while $F2921 ( iterator ) { fac = ( DataAccessFactory ) iterator . next ( ) ; logger . debug ( $F16018 ( fac ) ) ; availableDataStoreList . add ( fac . getDisplayName ( ) ) ; } }
protected void add ( double value , int group ) { if ( ( group < NUM00 ) || ( group >= numberOfGroups ) ) $F825 data . add ( new Observation ( value , group ) ) ; }
protected static String makeOptionString ( Script script ) { StringBuffer result ; $F987 enm ; Option option ; result = new StringBuffer $F580 ; $F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) enm = script . listOptions ( ) ; while $F1444 ( enm ) { $F1445 ( option , enm ) result . append ( option . synopsis ( ) + NUM00 ) ; result . append ( option . description ( ) + NUM00 ) ; } $F84 ( result ) $F84 ( result ) $F84 ( result ) $F84 ( result ) $F92 ( result ) }
public RegistrationBuilder addContact ( URI contact ) $F18637 ( contacts , contact , this )
public static void closeQuietly ( AutoCloseable closeable ) { if ( closeable != null ) { try $F881 ( closeable ) $F41337 ( rethrown ) $F63878 } }
String formatTime ( int hour , int minute ) { String s = NUM00 ; $F4074 ( t , Integer , hour ) if $F1277 ( t ) { s = t + NUM00 ; } else if $F1277 ( t ) { s = NUM00 + t + NUM00 ; } t = Integer . toString ( minute ) ; if $F1277 ( t ) { s = s + t ; } else if $F1277 ( t ) $F15894 ( s , t ) if $F35625 ( s ) { s = NUM00 ; } return s ; }
public boolean isEmpty $F72 { return ( sentenceType == SentenceType . UNDEFINED ) && expressions . isEmpty ( ) ; }
$F1 public void init ( AbstractAddressbookManager aBooMgr ) { setAddressBookManager ( aBooMgr ) ; reloadSettings ( ) ; try { connection = DriverManager . getConnection ( IDENTITYDB_CONNECT_ "STRING" ) ; } catch ( SQLException e ) { logger . error ( NUM00 + IDENTITYDB_CONNECT_ <missing ';'> NUM00 , e ) ; } Statement statement ; try { $F2715 ( statement , connection ) statement . setQueryTimeout ( NUM00 ) ; statement . executeUpdate ( NUM00 + TABLE_IDENTITY + NUM00 ) ; statement . executeUpdate ( NUM00 + TABLE_CLOUDPROVIDER + NUM00 ) ; statement . executeUpdate ( NUM00 + TABLE_CLOUDPROVIDER_MAP + NUM00 ) ; $F10089 ( aBooMgr ) } $F174178 ( logger , e ) finally { if ( connection != null ) { try $F881 ( connection ) $F174178 ( logger , e ) } } }
private Buffer checkErrorPacket ( int command ) throws SQLException { Buffer resultPacket = null ; this . serverStatus = NUM00 ; try { resultPacket = reuseAndReadPacket ( this . reusablePacket ) ; } catch ( SQLException sqlEx ) { throw sqlEx ; } catch ( Exception fallThru ) { throw SQLError . createCommunicationsException ( this . connection , this . lastPacketSentTimeMs , this . lastPacketReceivedTimeMs , fallThru , getExceptionInterceptor ( ) ) ; } checkErrorPacket ( resultPacket ) ; return resultPacket ; }
public void applySettings ( boolean loadCoreComponents ) throws ApplySettingsException { $F16092 ( errors ) applyTorrentDataSaveFolderSettings ( errors ) ; applyTorrentSeedingSettings ( errors ) ; if $F5973 ( errors ) { throw new ApplySettingsException ( StringUtils . explode ( errors , NUM00 ) ) ; } }
public boolean shouldSelectCell ( EventObject e ) { return _BOOL ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private void readObject ( ObjectInputStream in ) throws $F6427 { $F6428 ( in ) if ( resourceBundleName != null ) { try { rb = ResourceBundle . getBundle ( resourceBundleName ) ; } catch ( MissingResourceException e ) { rb = null ; } } }
method_info findMethod ( String s ) { method_info m ; int i ; for ( i = NUM00 ; i < methods_count ; i ++ ) { m = methods [ i ] ; if ( s . equals ( m . toName ( constant_pool ) ) ) { return m ; } } $F1274 }
private boolean matches ( $F5466 Object obj , String operator , String operandStr ) { ObsValue value ; if ( obj == null ) { switch ( operator ) { $F1262 $F1262 $F1262 $F18904 ( operandStr ) $F1267 return _BOOL ; } } else if ( obj instanceof ObsPoint ) { value = ( ( ObsPoint ) obj ) . value ; } else if ( obj instanceof ObsValue ) { value = ( ObsValue ) obj ; } else return _BOOL ; ObsValue operand = null ; if ( value . uuid != null ) { operand = ObsValue . newCoded ( Utils . expandUuid ( operandStr ) ) ; } else if ( value . number != null ) { try { operand = ObsValue . newNumber ( Double . valueOf ( operandStr ) ) ; } catch ( NumberFormatException e ) $F429599 ( operand , ObsValue ) } else if ( value . text != null ) { operand = ObsValue . newText ( operandStr ) ; } else if ( value . date != null ) { try { operand = ObsValue . newDate ( LocalDate . parse ( operandStr ) ) ; } catch ( IllegalArgumentException e ) { operand = ObsValue . MIN_DATE ; } } else if ( value . instant != null ) { try { operand = ObsValue . newTime ( Long . valueOf ( operandStr ) ) ; } catch ( IllegalArgumentException e ) { operand = ObsValue . MIN_TIME ; } } switch ( operator ) { $F1262 $F1262 $F1262 return Objects . equal ( value . uuid , operand . uuid ) ; $F1262 return value . compareTo ( operand ) < NUM00 ; $F1262 return value . compareTo ( operand ) <= NUM00 ; $F1262 return value . compareTo ( operand ) > NUM00 ; $F1262 return value . compareTo ( operand ) >= NUM00 ; } return _BOOL ; }
private void waitUntilReadable $F72 throws IOException { $F14811 ( readTimeout ) try { while ( $F10470 ( readBuffer ) && ! finished && ! closed && errorCode == null ) $F5795 ( waitForIo ) } $F14820 ( readTimeout ) }
public static < X extends Exception > String toString ( Iteration < ? , X > iter , String separator ) throws X { $F83 ( sb ) toString ( iter , separator , sb ) ; $F92 ( sb ) }
$F1431 $F1 public boolean contains ( final Object obj ) { if ( null != obj ) { $F11686 it = new ArrayDequeIterator $F11685 $F72 ; while $F2921 ( it ) { if ( obj . equals ( ( E ) it . next ( ) ) ) { return _BOOL ; } } } return _BOOL ; }
public static synchronized GridTestPrintStream acquireErr $F72 { if ( testErr == null ) testErr = new GridTestPrintStream ( sysErr ) ; if ( errCnt == NUM00 ) System . setErr ( testErr ) ; errCnt ++ ; return testErr ; }
private void writeObject ( ObjectOutputStream out ) throws IOException { $F9339 ( out ) doWriteObject ( out ) ; }
private static boolean isPropertyName ( String name ) { return ( $F4012 ( name ) && $F102260 ( Character , name ) ) || ( $F4012 ( name ) && $F102260 ( Character , name ) ) ; }
public Collection < ExpressionObject $F1011 > analyzeExpression ( GenericPK id , Expression formula , ExpressionAST expression ) throws ScopeException { ExtractReferences visitor = new ExtractReferences $F72 ; List < ExpressionRef > references = visitor . apply ( expression ) ; String internal = rewriteExpressionValue ( formula . getValue ( ) , expression , references ) ; if ( ! $F14681 ( internal , formula ) ) { formula . setInternal ( internal ) ; } else { formula . setInternal ( null ) ; } int level = computeReferenceTree ( expression , references ) ; formula . setLevel ( level ) ; Collection < ExpressionObject $F1011 > $F9626 ( objects ) ; for ( ExpressionRef expr : references ) { Object ref = expr . getReference ( ) ; if ( ref != null && ref instanceof Property ) { Property property = ( Property ) ref ; ExpressionObject $F1011 object = property . getExpressionObject ( ) ; $F1140 ( object , objects ) } } if $F5973 ( objects ) { Collection < ExpressionObject $F1011 > closure = null ; Collection < ExpressionObject $F1011 > transitiveClosure = objects ; do { closure = transitiveClosure ; transitiveClosure = transitiveClosure ( id , closure ) ; } while $F45088 ( closure , transitiveClosure ) ; Collection < ReferencePK $F1011 > $F9626 ( IDs ) ; for ( ExpressionObject $F1011 object : transitiveClosure ) { ReferencePK $F1011 refPk = reference ( object ) ; $F1140 ( refPk , IDs ) } formula . setReferences ( IDs ) ; return transitiveClosure ; } else { return objects ; } }
public void removeRtcpListener ( RtcpEventListener listener ) { $F1375 ( sLogger ) mListeners . removeElement ( listener ) ; }
private static void collectAllTimes ( Tree tree , NodeRef node , NodeRef [ ] excludeBelow , ArrayList times , $F15272 childs ) { times . add ( new ComparableDouble ( tree . getNodeHeight ( node ) ) ) ; childs . add ( tree . getChildCount ( node ) ) ; for ( $F5911 ( i , tree , node ) ) { NodeRef child = tree . getChild ( node , i ) ; if ( excludeBelow == null ) { collectAllTimes ( tree , child , excludeBelow , times , childs ) ; } else { boolean include = _BOOL ; for ( NodeRef anExcludeBelow : excludeBelow ) { if ( anExcludeBelow . getNumber ( ) == child . getNumber ( ) ) $F3468 ( include , _BOOL ) } if ( include ) collectAllTimes ( tree , child , excludeBelow , times , childs ) ; } } }
protected void paintText ( final Graphics g , final JComponent c , final Rectangle localTextRect , final String text ) { final Graphics2D g2d = g instanceof Graphics2D ? ( Graphics2D ) g : null ; final AbstractButton b = ( AbstractButton ) c ; final ButtonModel model = b . getModel ( ) ; final FontMetrics fm = g . getFontMetrics ( ) ; final int mnemonicIndex = AquaMnemonicHandler . isMnemonicHidden ( ) ? - NUM00 : b . getDisplayedMnemonicIndex ( ) ; if $F34496 ( model ) { g . setColor ( b . getForeground ( ) ) ; } else $F158293 ( g , defaultDisabledTextColor ) SwingUtilities2 . drawStringUnderlineCharAt ( c , g , text , mnemonicIndex , localTextRect . x , localTextRect . y + fm . getAscent ( ) ) ; }
public static ConstraintWidget [ ] inferTableList ( WidgetsScene list ) { for ( ConstraintWidget widget : list . getWidgets ( ) ) { widget . resetAnchors ( ) ; } return inferTableList ( list . getRoot ( ) ) ; }
public String toXMLString ( boolean includeNS , boolean declareNS ) throws FSMsgException $F19580 ( toXMLString , includeNS , declareNS , _BOOL )
public void ifPresent ( LongConsumer consumer ) { if ( isPresent ) consumer . accept ( value ) ; }
public void update ( $F806 columns , $F131 columnValues , $F806 conditions , $F131 conditionValues ) throws DataAccessException { if ( columns . length != columnValues . length || conditions . length != conditionValues . length ) $F9465 ( logger ) $F131 values = Arrays . copyOf ( columnValues , columnValues . length + conditionValues . length ) ; $F11244 ( System , conditionValues , values , columnValues ) final String sql = PreparedStatementUtil . prepareUpdateTemplateWithColumn ( tableName , columns , conditions ) ; execute ( sql , values ) ; }
public static String replicaSetUsedIn ( String addresses ) { if $F3106 ( addresses ) $F1337 $F1384 ( index , addresses ) $F94834 ( index ) $F35298 ( addresses , index ) }
public void onProgress ( long bytesWritten , long totalSize ) { Log . v ( LOG_TAG , String . format ( NUM00 , bytesWritten , totalSize , ( totalSize > NUM00 ) ? ( bytesWritten * NUM00 / totalSize ) * NUM00 : - NUM00 ) ) ; }
public String self ( TypeDeclaration decl ) { if ( decl instanceof Constructor ) { decl = ( TypeDeclaration ) decl . getContainer ( ) ; } String name = JsUtils . escapeStringLiteral ( decl . getName ( ) ) ; if ( decl . isShared ( ) || decl . isToplevel ( ) ) { name += nestingSuffix ( decl , _BOOL ) ; } else { name = NUM00 + Long . toString ( getUID ( decl ) , NUM00 ) ; } return String . format ( NUM00 , $F85542 ( Character , name ) , name . substring ( NUM00 ) ) ; }
public double elapsedTime $F72 { long now = threadTimer . getCurrentThreadCpuTime ( ) ; return ( now - start ) / NANOSECONDS_PER_SECOND ; }
public static void sortList ( List list ) { if ( SystemUtils . IS_JAVA_1_7 && list instanceof CopyOnWriteArrayList ) { $F46704 ( tempList , list ) Collections . sort ( tempList ) ; $F725 ( list ) list . addAll ( tempList ) ; } else $F57765 ( Collections , list ) }
public void fireIndexedPropertyChange ( String propertyName , int index , boolean oldValue , boolean newValue ) { if ( oldValue != newValue ) { fireIndexedPropertyChange ( propertyName , index , Boolean . valueOf ( oldValue ) , Boolean . valueOf ( newValue ) ) ; } }
public static $F4203 $F10809 concat ( $F10809 first , $F10809 second , $F20474 type ) { $F10809 result = newArray ( type , first . length + second . length ) ; $F7057 ( System , first , result ) $F11244 ( System , second , result , first ) return result ; }
public synchronized void writeToRemote ( byte b ) $F207 ( remoteBuffer , b )
$F1 public void drawSeries ( Canvas canvas , Paint paint , $F6205 points , $F31488 values , XYSeriesRenderer seriesRenderer , SupportSeriesRender supportSeriesRender , float yAxisValue , int seriesIndex , int startIndex ) { $F36951 ( seriesNr , mDataset ) $F2199 ( length , points ) $F14782 ( paint , seriesRenderer ) $F5597 ( paint , Style ) float halfDiffX = getHalfDiffX ( points , length , seriesNr ) ; int start = NUM00 ; $F36952 ( startIndex , start ) for ( int i = start ; i < length ; i += NUM00 ) { if ( points . size ( ) > i + NUM00 ) { $F36955 ( xMin , points , i ) $F36957 ( yMin , points , i ) $F36957 ( xMax , points , i ) $F36957 ( yMax , points , i ) drawBar ( canvas , xMin , yMin , xMax , yMax , halfDiffX , seriesNr , seriesIndex , paint ) ; } } $F14782 ( paint , seriesRenderer ) }
private void beginGesture ( int scrollOffsetY , int scrollExtentY ) { mInitialTranslationY = getTranslationY ( ) ; boolean isInitiallyVisible = mInitialTranslationY < mTotalHeight ; int startingY = isInitiallyVisible ? scrollOffsetY : Math . min ( scrollOffsetY , mTotalHeight ) ; mInitialOffsetY = startingY + scrollExtentY ; }
$F1 public void add ( String ... identifiers ) $F50757 ( whitelist , Arrays , identifiers )
public static void clear $F72 { $F3223 ( shopId ) shopCode . set ( NUM00 ) ; }
$F1 public boolean communicationInitiated $F72 { return bugsPopulated . getCount ( ) == NUM00 && communicationInitiated && networkClient . ready ( ) ; }
$F127810 ( charset , Charset )
$F1 public void dump ( String prefix , FileDescriptor fd , PrintWriter writer , $F806 args ) { super . dump ( prefix , fd , writer , args ) ; writer . print ( prefix ) ; $F21384 ( writer ) writer . println ( rawQuery ) ; writer . print ( prefix ) ; $F21384 ( writer ) writer . println ( Arrays . toString ( args ) ) ; }
public void addContigField ( ContigField field ) { addIdField ( mContigLines , field ) ; }
boolean removeIndexEntry ( String resourceName , String policyName ) { $F10531 ( iter , topLevelEntries ) boolean processed = _BOOL ; while ( ! processed && $F2921 ( iter ) ) { $F388331 ( resourceIndexEntry , iter ) if ( resourceIndexEntry . removeIndexEntry ( resourceType , resourceName , policyName ) ) { processed = _BOOL ; } } return processed ; }
public static double pdf $F7635 ( x , mu , shape ) { if ( ! ( x > NUM00 ) || x == Double . POSITIVE_INFINITY ) $F1083 final double v = ( x - mu ) / mu ; double t1 = Math . sqrt ( shape / ( MathUtil . TWOPI * x * x * x ) ) ; return t1 > NUM00 ? t1 * Math . exp ( - shape * v * v * NUM00 / x ) : NUM00 ; }
$F1 public void onStopTrackingTouch ( SeekBar seekBar ) { $F1086 ( pos , mItemList , mSelectedTracker ) final int delta = NUM00 / mItemList . size ( ) ; cp_mover . setProgress ( pos * delta + delta / NUM00 ) ; }
public static int maxProfit $F23416 ( prices ) { if ( prices == null || prices . length < NUM00 ) $F1083 int max = NUM00 ; int min = prices [ NUM00 ] ; for ( $F1139 ( i , prices ) ) { $F37717 ( min , Math , prices , i ) if ( prices [ i ] > prices [ i - NUM00 ] ) { max = Math . max ( max , prices [ i ] - min ) ; } } return max ; }
public void add ( String string ) { elements . add ( string == null ? JsonNull . INSTANCE : new JsonPrimitive ( string ) ) ; }
public void componentAdded ( ContainerEvent e ) { Layer childLayer = ( Layer ) e . getChild ( ) ; addProjectionListener ( childLayer ) ; if ( ! removedLayers . removeElement ( childLayer ) ) $F6659 ( addedLayers , childLayer ) changeLayers ( e ) ; }
public void processingInstruction ( String target , String data ) throws SAXException { charactersFlush ( ) ; $F2199 ( dataIndex , m_data ) m_previous = addNode ( DTM . PROCESSING_INSTRUCTION_NODE , DTM . PROCESSING_INSTRUCTION_NODE , m_parents . peek ( ) , m_previous , - dataIndex , _BOOL ) ; m_data . addElement ( m_valuesOrPrefixes . stringToIndex ( target ) ) ; m_values . addElement ( data ) ; m_data . addElement ( m_valueIndex ++ ) ; }
protected void panic ( String msg ) throws SAXException { SAXParseException spe = new SAXParseException ( msg , this ) ; mHandErr . fatalError ( spe ) ; throw spe ; }
private void updateNamespacePermissions ( UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity , List < NamespacePermissionEnum > namespacePermissions ) { userNamespaceAuthorizationEntity . setReadPermission ( namespacePermissions . contains ( NamespacePermissionEnum . READ ) ) ; userNamespaceAuthorizationEntity . setWritePermission ( namespacePermissions . contains ( NamespacePermissionEnum . WRITE ) ) ; userNamespaceAuthorizationEntity . setExecutePermission ( namespacePermissions . contains ( NamespacePermissionEnum . EXECUTE ) ) ; userNamespaceAuthorizationEntity . setGrantPermission ( namespacePermissions . contains ( NamespacePermissionEnum . GRANT ) ) ; }
public static void report $F72 { $F18748 ( booted ) ControllerThread . report ( ) ; RuntimeMeasurements . report ( ) ; for ( Enumeration < Organizer > e = organizers . elements ( ) ; e . hasMoreElements ( ) ; ) { Organizer organizer = e . nextElement ( ) ; organizer . report ( ) ; } if ( options . FINAL_REPORT_LEVEL >= NUM00 ) { EdgeCounts . dumpCounts ( ) ; dcg . dumpGraph ( ) ; } if ( options . REPORT_INTERRUPT_STATS ) { $F152381 ( VM ) VM . sysWriteln ( NUM00 , RVMThread . timerTicks ) ; VM . sysWriteln ( NUM00 , controllerClock ) ; VM . sysWriteln ( NUM00 , ( int ) methodSamples . getTotalNumberOfSamples ( ) ) ; } }
public static $F35235 convertArrayToSet $F22194 ( source ) { $F113927 set = $F22202 ; for ( Object element : source ) $F207 ( set , element ) return set ; }
public static int intersectLineRectangle ( Line2D l , Rectangle2D r , $F52977 pts ) { double a1x = l . getX1 ( ) , a1y = l . getY1 ( ) ; double a2x = l . getX2 ( ) , a2y = l . getY2 ( ) ; double mxx = r . getMaxX ( ) , mxy = r . getMaxY ( ) ; double mnx = r . getMinX ( ) , mny = r . getMinY ( ) ; $F556263 ( pts ) $F556263 ( pts ) int i = NUM00 ; $F556265 ( intersectLineLine , mnx , mny , mxx , a1x , a1y , a2x , a2y , pts , i ) $F556267 ( intersectLineLine , mxx , mny , mxy , a1x , a1y , a2x , a2y , pts , i ) $F556268 ( i ) $F556265 ( intersectLineLine , mxx , mxy , mnx , a1x , a1y , a2x , a2y , pts , i ) $F556268 ( i ) $F556267 ( intersectLineLine , mnx , mxy , mny , a1x , a1y , a2x , a2y , pts , i ) return i ; }
public static String cidrMaskToNetMask ( String cidrMask ) { $F1338 ( cidrMask ) int cidrMaskValue = NUM00 ; try $F37473 ( cidrMaskValue , Integer , cidrMask ) $F62108 int cidrMaskFull = NUM00 < < ( NUM00 - cidrMaskValue ) ; $F91054 ( cidrMaskBits1 , cidrMaskFull ) $F91054 ( cidrMaskBits2 , cidrMaskFull ) $F91054 ( cidrMaskBits3 , cidrMaskFull ) $F91054 ( cidrMaskBits4 , cidrMaskFull ) $F280 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits1 ) ; $F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits2 ) ; $F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits3 ) ; $F84 ( netMaskBuf ) netMaskBuf . append ( cidrMaskBits4 ) ; $F92 ( netMaskBuf ) }
public boolean inBounds ( MouseEvent e ) { return e . getX ( ) > x && e . getX ( ) < x + width && e . getY ( ) > y && e . getY ( ) < y + height ; }
public ClassPath ( $F2304 Iterable < DexFile > classPath , boolean checkPackagePrivateAccess ) { Iterable < DexFile > dexFiles = Iterables . concat ( classPath , Lists . newArrayList ( getBasicClasses ( ) ) ) ; unknownClass = new UnknownClassProto ( this ) ; $F58338 ( loadedClasses , unknownClass ) this . checkPackagePrivateAccess = checkPackagePrivateAccess ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; loadPrimitiveType ( NUM00 ) ; for ( DexFile dexFile : dexFiles ) { for ( ClassDef classDef : dexFile . getClasses ( ) ) { ClassDef $F4985 ( prev , availableClasses , classDef ) ; if ( prev == null ) { $F58338 ( availableClasses , classDef ) } } } }
private boolean askToSave $F72 { if ( mainFrame . isProjectChanged ( ) ) { int response = JOptionPane . showConfirmDialog ( mainFrame , L10N . getLocalString ( NUM00 , NUM00 ) , L10N . getLocalString ( NUM00 , NUM00 ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . WARNING_MESSAGE ) ; if ( response == JOptionPane . YES_OPTION ) { if ( mainFrame . getSaveFile ( ) != null ) $F5795 ( save ) else $F5795 ( saveAs ) } else if ( response == JOptionPane . CANCEL_OPTION ) { return _BOOL ; } } return _BOOL ; }
public MapCursor addCursor ( MapCursor cursor ) { cursors . add ( cursor ) ; return cursor ; }
private boolean discardUpstreamMediaChunks ( int queueLength ) { if $F58405 ( mediaChunks , queueLength ) { return _BOOL ; } long startTimeUs = NUM00 ; long endTimeUs = mediaChunks . getLast ( ) . endTimeUs ; BaseMediaChunk removed = null ; while $F60125 ( mediaChunks , queueLength ) { removed = mediaChunks . removeLast ( ) ; startTimeUs = removed . startTimeUs ; } sampleQueue . discardUpstreamSamples ( removed . getFirstSampleIndex ( ) ) ; notifyUpstreamDiscarded ( startTimeUs , endTimeUs ) ; return _BOOL ; }
public MetalinkFileBuilder addFile ( String name ) { MetalinkFileBuilder newFile = new MetalinkFileBuilder ( name ) ; files . add ( newFile ) ; return newFile ; }
private void sendAfterConnect ( Channel ch , NettyChannelContext contextFinal , Operation request , NettyChannelGroup group ) { if ( request . getStatusCode ( ) < Operation . STATUS_CODE_FAILURE_THRESHOLD ) { $F168274 ( request ) } else { request . fail ( request . getStatusCode ( ) ) ; } }
protected String checkProduction ( final Territory to , $F103 ( units ) , final PlayerID player ) { final List < Territory > producers = getAllProducers ( to , player , units ) ; if $F2979 ( producers ) { return $F2989 ( to ) ; } Collections . sort ( producers , getBestProducerComparator ( to , units , player ) ) ; if ( ! getCanAllUnitsWithRequiresUnitsBePlacedCorrectly ( units , to ) ) $F2455 final int maxUnitsToBePlaced = getMaxUnitsToBePlaced ( units , to , player , _BOOL ) ; if ( ( maxUnitsToBePlaced != - NUM00 ) && $F1765 ( maxUnitsToBePlaced , units ) ) { return $F10533 ( units ) + to . getName ( ) ; } $F1274 }
$F1 public void closeWrite $F72 throws IOException { $F7254 ( _isWriteClosed ) _isWriteClosed = _BOOL ; SocketStream stream = _streamImpl ; if ( stream != null ) { stream . closeWrite ( ) ; } else if ( _s != null ) { try { $F124256 ( _s ) } catch ( UnsupportedOperationException e ) { $F120634 ( log , Level , e ) } catch ( Exception e ) { log . finer ( e . toString ( ) ) ; $F120634 ( log , Level , e ) } } }
public boolean equals ( Object that ) { return ( that instanceof CharSet ) && Arrays . equals ( chars , ( ( CharSet ) that ) . chars ) ; }
public static Void processRecords ( List < KinesisEventRecord > inputRecords , KinesisUserRecordProcessor processor ) { $F53673 $F19827 ( rawRecords ) ; for ( KinesisEventRecord rec : inputRecords ) { rawRecords . add ( rec . getKinesis ( ) ) ; } return processor . process ( UserRecord . deaggregate ( rawRecords ) ) ; }
protected Font resolveFont ( SharedContext ctx , String font , float size , IdentValue weight , IdentValue style , IdentValue variant ) { $F3110 ( font ) $F8996 ( font ) if $F21935 ( font ) { font = NUM00 ; } if $F21935 ( font ) { font = NUM00 ; } if $F21935 ( font ) { font = NUM00 ; } if ( font . equals ( NUM00 ) && style == IdentValue . OBLIQUE ) { font = NUM00 ; } if ( font . equals ( NUM00 ) && style == IdentValue . ITALIC ) { font = NUM00 ; } String fontInstanceName = getFontInstanceHashName ( ctx , font , size , weight , style , variant ) ; $F65325 ( instanceHash , fontInstanceName ) if $F1710 ( availableFontsHash , font ) { Font possiblyNullFont = availableFontsHash . get ( font ) ; Font rootFont = null ; if ( possiblyNullFont != null ) { rootFont = possiblyNullFont ; } else { rootFont = new Font ( font , Font . PLAIN , NUM00 ) ; availableFontsHash . put ( font , rootFont ) ; } Font fnt = createFont ( ctx , rootFont , size , weight , style , variant ) ; instanceHash . put ( fontInstanceName , fnt ) ; return fnt ; } $F1274 }
public ArrayRealVector $F196672 ( d , pos , size ) throws MathIllegalArgumentException , NullArgumentException { if ( d == null ) { throw new NullArgumentException $F72 ; } if ( d . length < pos + size ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NUMBER_TOO_LARGE , pos + size , d . length ) ; } $F10254 ( data , size ) $F21535 ( System , d , pos , data , size ) }
public void clearPaymentMethodsById $F24643 ( paymentMethodIdsToRemove ) { if $F4329 ( UtilValidate , paymentMethodIdsToRemove ) $F665 for ( Iterator < CartPaymentInfo > iter = paymentInfo . iterator ( ) ; iter . hasNext ( ) ; ) { CartPaymentInfo info = iter . next ( ) ; if ( paymentMethodIdsToRemove . contains ( info . paymentMethodId ) ) $F38599 ( iter ) } }
$F1 public void clean $F72 { setCurrentPoints ( NUM00 ) ; checkState ( ) ; }
public void handleButton2Request ( RequestInvocationEvent event ) { setPageSessionAttribute ( getTrackingTabIDName ( ) , AMAdminConstants . FED_TAB_ID ) ; setPageSessionAttribute ( AMAdminConstants . PREVIOUS_TAB_ID , getTrackingTabIDName ( ) ) ; FederationViewBean vb = ( FederationViewBean ) getViewBean ( FederationViewBean . class ) ; backTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) }
$F1 public void performRequest ( String request ) { $F87844 ( request , stop ) }
public $F96 toBytes $F72 { $F2175 ( returnBytes , bytesLength ) $F135 ( System , bytes , returnBytes , bytesLength ) return returnBytes ; }
public void startCheck $F72 { checker = new Thread ( new CheckForUpdate $F72 ) ; checker . setPriority ( Thread . MIN_PRIORITY ) ; $F2346 ( checker ) }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case SGraphPackage . TRANSITION__TRIGGER : return trigger != null ; case SGraphPackage . TRANSITION__EFFECT : return effect != null ; case SGraphPackage . TRANSITION__PROPERTIES : $F6441 ( properties ) case SGraphPackage . TRANSITION__DOCUMENTATION : $F6439 ( DOCUMENTATION_EDEFAULT , documentation ) case SGraphPackage . TRANSITION__TARGET : return target != null ; case SGraphPackage . TRANSITION__SOURCE : return basicGetSource ( ) != null ; } $F6444 ( super , featureID ) }
public boolean isAckSeen $F72 { return this . ackSeen ; }
protected void uninstallListeners $F72 { super . uninstallListeners ( ) ; splitPane . removePropertyChangeListener ( this ) ; }
private static Collector < SegmentInfo , ? , Map < String , SegmentInfo > > partitionsToMapCollector $F72 { return Collector . of ( $F32718 ) ; }
public boolean isCrc $F72 { return isFlags ( FLAG_CACHED_VALUES_CHECKED & FLAG_CRC_CALCED ) ; }
$F1654 ( queue )
$F1 public StringBuffer format ( double number , StringBuffer result , FieldPosition fieldPosition ) { boolean tryFastPath = _BOOL ; if ( fieldPosition == DontCareFieldPosition . INSTANCE ) tryFastPath = _BOOL ; else { fieldPosition . setBeginIndex ( NUM00 ) ; fieldPosition . setEndIndex ( NUM00 ) ; } if ( tryFastPath ) { String tempResult = fastFormat ( number ) ; if ( tempResult != null ) { result . append ( tempResult ) ; return result ; } } return format ( number , result , fieldPosition . getFieldDelegate ( ) ) ; }
private void buildCursorConditionally ( MatrixCursor cursor , CharacterRecord cr , String selection , $F806 selectionArgs ) { if ( selectionArgs == null ) cursor . addRow ( new Object [ ] { cr . getId ( ) , cr . getName ( ) , cr . getRace ( ) } ) ; else for ( String item : selectionArgs ) if ( ( selection . equals ( CharacterContract . CharacterEntry . COLUMN_NAME ) && $F3174 ( item , cr ) ) || ( selection . equals ( CharacterContract . CharacterEntry . COLUMN_RACE ) && item . equals ( cr . getRace ( ) ) ) ) { cursor . addRow ( new Object [ ] { cr . getId ( ) , cr . getName ( ) , cr . getRace ( ) } ) ; } }
public ModpackFileSelectionPanel ( WizardController controller , Map wizardData , File gameDir , BiFunction < String , Boolean , Integer > blackList ) { initComponents ( ) ; this . controller = controller ; this . wizardData = wizardData ; this . blackList = blackList ; CheckBoxTreeNode root = create ( gameDir , NUM00 ) ; jTree1 . setModel ( new DefaultTreeModel ( root ) ) ; jTree1 . setCellRenderer ( new CheckBoxTreeCellRenderer $F72 ) ; jTree1 . addMouseListener ( new CheckBoxTreeNodeSelectionListener $F72 ) ; $F545 ( wizardData , root ) }
public Shape paintLayer ( Graphics g , int offs0 , int offs1 , Shape bounds , JTextComponent c , View view ) { $F20230 ( g2d , g ) Composite originalComposite = null ; if $F65233 ( getAlpha ) { originalComposite = g2d . getComposite ( ) ; g2d . setComposite ( getAlphaComposite ( ) ) ; } Paint paint = getPaint ( ) ; if ( paint == null ) g2d . setColor ( c . getSelectionColor ( ) ) ; else g2d . setPaint ( paint ) ; if ( offs0 == view . getStartOffset ( ) && offs1 == view . getEndOffset ( ) ) { Rectangle alloc ; if ( bounds instanceof Rectangle ) alloc = ( Rectangle ) bounds ; else alloc = bounds . getBounds ( ) ; $F109734 ( g2d , alloc ) if $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; return alloc ; } else { try { Shape shape = view . modelToView ( offs0 , Position . Bias . Forward , offs1 , Position . Bias . Backward , bounds ) ; Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . getBounds ( ) ; if ( roundedEdges ) { g2d . fillRoundRect ( r . x , r . y , r . width , r . height , ARCWIDTH , ARCHEIGHT ) ; } else { $F109734 ( g2d , r ) } if $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; return r ; } $F203264 ( ble ) finally { if $F65233 ( getAlpha ) g2d . setComposite ( originalComposite ) ; } } $F1274 }
private void createContainerIfNecessary $F72 { if ( container . isFull ( ) ) { container = new TimerRawContainer $F72 ; data . add ( container ) ; } }
private void processUpdateCounts $F11072 ( updateCounts , commandsInBatch ) { if ( updateCounts . length < commandsInBatch ) { error . emit ( tuples . get ( updateCounts . length + batchStartIdx ) ) ; errorTuples ++ ; tuplesWrittenSuccessfully += updateCounts . length ; batchStartIdx += updateCounts . length + NUM00 ; if ( ( tuples . size ( ) - batchStartIdx ) > NUM00 ) $F5795 ( processBatch ) } else { tuplesWrittenSuccessfully = commandsInBatch ; for ( $F119 ( i , commandsInBatch ) ) { if ( updateCounts [ i ] == Statement . EXECUTE_FAILED ) { error . emit ( tuples . get ( i + batchStartIdx ) ) ; errorTuples ++ ; tuplesWrittenSuccessfully -- ; } } } }
public int chooseProtocolVersion $F72 { return preferredProtocolVersion ; }
public Sensor createNewSensor ( String systemName , String userName ) { Sensor s ; String sName = AcelaAddress . normalizeSystemName ( systemName ) ; if $F3057 ( sName ) $F337969 ( log , systemName ) s = getBySystemName ( sName ) ; if ( s != null ) $F337969 ( log , systemName ) String altName = AcelaAddress . convertSystemNameToAlternate ( sName ) ; s = getBySystemName ( altName ) ; if ( s != null ) { log . error ( NUM00 + systemName + NUM00 + altName + NUM00 ) ; $F1274 } int bit = AcelaAddress . getBitFromSystemName ( sName ) ; if ( ( bit < NUM00 ) || ( bit >= NUM00 ) ) { log . error ( $F11846 ( Integer , bit ) ) ; $F1274 } if ( userName == null ) { s = new AcelaSensor ( sName ) ; } else { s = new AcelaSensor ( sName , userName ) ; } AcelaNode node = AcelaAddress . getNodeFromSystemName ( sName , _memo ) ; if ( node == null ) { $F28293 ( log , sName ) return s ; } if ( ! node . hasActiveSensors ) { int newnodeaddress ; newnodeaddress = node . getNodeAddress ( ) ; $F34419 ( log , newnodeaddress ) return s ; } node . registerSensor ( s , bit ) ; return s ; }
public static InputStream needStream ( String propertyName ) throws NoSuchPropertyException , FileNotFoundException , MaryConfigurationException { MaryProperties . needProperty ( propertyName ) ; return getStream ( propertyName ) ; }
$F56659 ( a , b )
public static String networkNameToString $F24576 ( data , offset , length ) { String ret ; if ( ( data [ offset ] & NUM00 ) != NUM00 || length < NUM00 ) $F2455 switch ( ( data [ offset ] > > > NUM00 ) & NUM00 ) { $F3366 int countSeptets ; int unusedBits = data [ offset ] & NUM00 ; countSeptets = ( ( ( length - NUM00 ) * NUM00 ) - unusedBits ) / NUM00 ; ret = GsmAlphabet . gsm7BitPackedToString ( data , offset + NUM00 , countSeptets ) ; $F597 $F3366 try { ret = new String ( data , offset + NUM00 , length - NUM00 , NUM00 ) ; } catch ( UnsupportedEncodingException ex ) { ret = NUM00 ; Log . e ( LOG_TAG , NUM00 , ex ) ; } $F597 $F1267 ret = NUM00 ; $F597 } if ( ( data [ offset ] & NUM00 ) != NUM00 ) $F845 return ret ; }
public void add ( Marker marker ) $F207 ( mItems , marker )
$F41325 ( in , result , _BOOL , c , length )
private static Map . Entry < DateTime , TimeSeriesValue > findName ( List < TimeSeriesCollection > c , GroupName name ) { ListIterator < TimeSeriesCollection > iter = c . listIterator ( ) ; while $F2921 ( iter ) { final int idx = iter . nextIndex ( ) ; final TimeSeriesCollection tsdata = iter . next ( ) ; final Optional < TimeSeriesValue > found = tsdata . get ( name ) ; if $F16464 ( found ) return SimpleMapEntry . create ( tsdata . getTimestamp ( ) , found . get ( ) ) ; } $F4638 }
public $F529 finalizeOrderEntryPayment ( String checkOutPaymentId , BigDecimal amount , boolean singleUse , boolean append ) { $F6259 ( result , ServiceUtil ) if $F35028 ( UtilValidate , checkOutPaymentId ) { if ( ! append ) { cart . clearPayments ( ) ; } cart . addPaymentAmount ( checkOutPaymentId , amount , singleUse ) ; } return result ; }
public void deploy ( String routeId , String routeName , JsonValue routeConfig ) throws RouterHandlerException { Reject . ifNull ( routeName ) ; $F8934 ( write ) try { load ( routeId , routeName , routeConfig . copy ( ) ) ; directoryMonitor . store ( routeId , routeConfig ) ; $F21153 ( logger , routeId , routeName ) } catch ( IOException e ) { throw new RouterHandlerException ( format ( NUM00 , routeId ) , e ) ; } $F796 ( write ) }
private static $F1469 subscriptForDigit ( int digit ) { return Character . toChars ( NUM00 + digit ) ; }
private FsPermission permission ( IgfsFile file ) { String perm = file . property ( IgfsUtils . PROP_PERMISSION , null ) ; if ( perm == null ) return FsPermission . getDefault ( ) ; try { return new FsPermission ( ( short ) Integer . parseInt ( perm , NUM00 ) ) ; } catch ( NumberFormatException ignore ) { return FsPermission . getDefault ( ) ; } }
public SimpleMailboxACL $F72 { this . entries = Collections . emptyMap ( ) ; }
private void readStreamResult ( InH3 hIn , HeadersAmp headers ) throws IOException { ServiceRefAmp serviceRef = readToAddress ( hIn ) ; $F58758 ( id , hIn ) QueryRefAmp queryRef = serviceRef . getQueryRef ( id ) ; if ( queryRef != null ) { ClassLoader loader = queryRef . getClassLoader ( ) ; $F686 ( thread , Thread ) thread . setContextClassLoader ( loader ) ; } $F5952 ( sequence , hIn ) $F6689 values = ( List ) hIn . readObject ( ) ; Throwable exn = ( Throwable ) hIn . readObject ( Throwable . class ) ; $F6622 ( isComplete , hIn ) if $F155449 ( log , _logLevel ) { log . log ( _logLevel , NUM00 + values + NUM00 + isComplete + NUM00 + this + NUM00 + NUM00 + id + NUM00 + serviceRef + NUM00 + headers + NUM00 ) ; } if ( queryRef != null ) { if ( queryRef . accept ( headers , values , sequence , isComplete ) ) { serviceRef . removeQueryRef ( id ) ; } if ( exn != null ) { serviceRef . removeQueryRef ( id ) ; queryRef . fail ( headers , exn ) ; } } else if $F89967 ( log , Level ) { log . warning ( NUM00 + id + NUM00 + serviceRef + NUM00 + headers ) ; } }
public static int rectCrossingsForPath ( PathIterator pi , double rxmin , double rymin , double rxmax , double rymax ) { if ( rxmax <= rxmin || rymax <= rymin ) $F1083 if $F38577 ( pi ) $F1083 double coords [ ] = $F1990 ; if ( pi . currentSegment ( coords ) != PathIterator . SEG_MOVETO ) { throw new IllegalPathStateException $F3487 ; } $F24630 ( pi ) double curx , cury , movx , movy , endx , endy ; curx = movx = coords [ NUM00 ] ; cury = movy = coords [ NUM00 ] ; int crossings = NUM00 ; while ( crossings != RECT_INTERSECTS && ! pi . isDone ( ) ) { switch ( pi . currentSegment ( coords ) ) { case PathIterator . SEG_MOVETO : if ( curx != movx || cury != movy ) { crossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; } movx = curx = coords [ NUM00 ] ; movy = cury = coords [ NUM00 ] ; $F597 case PathIterator . SEG_LINETO : endx = coords [ NUM00 ] ; endy = coords [ NUM00 ] ; crossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , endx , endy ) ; curx = endx ; cury = endy ; $F597 case PathIterator . SEG_QUADTO : endx = coords [ NUM00 ] ; endy = coords [ NUM00 ] ; crossings = rectCrossingsForQuad ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM00 ] , coords [ NUM00 ] , endx , endy , NUM00 ) ; curx = endx ; cury = endy ; $F597 case PathIterator . SEG_CUBICTO : endx = coords [ NUM00 ] ; endy = coords [ NUM00 ] ; crossings = rectCrossingsForCubic ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM00 ] , coords [ NUM00 ] , coords [ NUM00 ] , coords [ NUM00 ] , endx , endy , NUM00 ) ; curx = endx ; cury = endy ; $F597 case PathIterator . SEG_CLOSE : if ( curx != movx || cury != movy ) { crossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; } curx = movx ; cury = movy ; $F597 } $F24630 ( pi ) } if ( crossings != RECT_INTERSECTS && ( curx != movx || cury != movy ) ) { crossings = rectCrossingsForLine ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; } return crossings ; }
public void updateFieldVisibility ( NeuronUpdateRule rule ) { boolean bounded = rule instanceof BoundedUpdateRule ; boolean clip = _BOOL ; setBoundsPanelVisible ( bounded ) ; if ( bounded ) { clip = rule instanceof ClippableUpdateRule ; clippingDropDown . setSelected ( clip ) ; } setClippingPanelVisible ( clip ) ; setBoundsEnabled ( bounded ) ; }
$F1 public int hashCode $F72 { int hash = NUM00 ; $F156574 ( altFormat , hash ) if ( projection != null ) { hash = hash * NUM00 ; hash += projection . hashCode ( ) ; } if ( version != null ) { hash = hash * NUM00 ; hash += version . hashCode ( ) ; } return hash ; }
public void removeOkListener ( ActionListener a ) { m_okBut . removeActionListener ( a ) ; }
void change_item_shape ( BrdItem p_item , int p_shape_no , ShapeTile p_new_shape ) { AwtreeNodeLeaf [ ] old_entries = p_item . get_search_tree_entries ( this ) ; AwtreeNodeLeaf [ ] new_leaf_arr = new AwtreeNodeLeaf [ old_entries . length ] ; ShapeTile [ ] new_precalculated_tree_shapes = new ShapeTile [ old_entries . length ] ; remove_leaf ( old_entries [ p_shape_no ] ) ; for ( $F9808 ( i , new_precalculated_tree_shapes ) ) { if ( i == p_shape_no ) { new_precalculated_tree_shapes [ i ] = p_new_shape ; } else { new_precalculated_tree_shapes [ i ] = p_item . get_tree_shape ( this , i ) ; new_leaf_arr [ i ] = old_entries [ i ] ; } } p_item . set_precalculated_tree_shapes ( new_precalculated_tree_shapes , this ) ; new_leaf_arr [ p_shape_no ] = insert ( p_item , p_shape_no ) ; p_item . set_search_tree_entries ( this , new_leaf_arr ) ; }
public JQuickStartPane ( KseFrame kseFrame ) { super ( GRADIENT_COLOR_1 , GRADIENT_COLOR_2 ) ; this . kseFrame = kseFrame ; new DropTarget ( this , this ) ; initComponents ( ) ; }
protected String decode ( String urlString ) { try { Class clazz = URLDecoder . class ; Method method = clazz . getDeclaredMethod ( NUM00 , new Class [ ] { $F10062 , $F10062 } ) ; if $F48846 ( urlString ) { $F1749 ( len , urlString ) $F1350 ( buf , len ) for ( $F119 ( i , len ) ) { $F1280 ( c , urlString , i ) if ( c == NUM00 ) $F84 ( buf ) else buf . append ( c ) ; } $F6947 ( urlString , buf ) } Object result = method . invoke ( null , new Object [ ] { urlString , NUM00 } ) ; if ( result != null ) return ( String ) result ; } $F3957 boolean replaced = _BOOL ; $F39526 ( encodedBytes , urlString ) int encodedLength = encodedBytes . length ; $F2175 ( decodedBytes , encodedLength ) int decodedLength = NUM00 ; for ( $F119 ( i , encodedLength ) ) { byte b = encodedBytes [ i ] ; if ( b == NUM00 ) { if ( i + NUM00 >= encodedLength ) $F29525 ( urlString ) byte enc1 = encodedBytes [ ++ i ] ; byte enc2 = encodedBytes [ ++ i ] ; b = ( byte ) ( $F88401 ( hexToByte , enc1 ) + hexToByte ( enc2 ) ) ; replaced = _BOOL ; } decodedBytes [ decodedLength ++ ] = b ; } $F25096 ( replaced , urlString ) try { return $F202411 ( decodedBytes , decodedLength ) ; } catch ( UnsupportedEncodingException e ) { $F62310 ( decodedBytes , decodedLength ) } }
public static String indent ( final int depth ) { if ( depth < NUM00 ) $F2455 return ws . substring ( NUM00 , Math . min ( ws . length ( ) , depth * NUM00 ) ) ; }
public ExceptionlessOutputStream ( OutputStream out ) { super ( new DataOutputStream ( out ) ) ; dos = ( DataOutputStream ) this . out ; }
public T advanceToElement ( $F54596 predicate ) { Node $F4203 start = head ; $F1275 ( head ) do { T currElement = advance ( ) ; if $F167956 ( predicate , currElement ) { return currElement ; } } while ( head != start ) ; $F1274 }
public void addTrace ( final Trace trace ) { traceList . add ( trace ) ; add ( trace ) ; revalidate ( ) ; }
public static void pingAllDevices ( String message ) throws IOException { Sender sender = new Sender ( Ids . API_KEY ) ; for ( DeviceInfo deviceInfo : endpoint . listDeviceInfo ( ) ) { doSendViaGcm ( message , sender , deviceInfo ) ; } }
$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log )
private void findMatchesInContexts ( List < NumberContext > contexts , boolean isValid , boolean isPossible , String region , String number ) { if ( isValid ) { doTestInContext ( number , region , contexts , Leniency . VALID ) ; } else { for ( NumberContext context : contexts ) { String text = context . leadingText + number + context . trailingText ; assertTrue ( NUM00 + text , hasNoMatches ( phoneUtil . findNumbers ( text , region ) ) ) ; } } if ( isPossible ) { doTestInContext ( number , region , contexts , Leniency . POSSIBLE ) ; } else { for ( NumberContext context : contexts ) { String text = context . leadingText + number + context . trailingText ; assertTrue ( NUM00 + text , hasNoMatches ( phoneUtil . findNumbers ( text , region , Leniency . POSSIBLE , Long . MAX_VALUE ) ) ) ; } } }
public void testGeneralPunctuationCategory $F72 { $F806 s = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; String regexp = NUM00 ; for ( $F1139 ( i , s ) ) { $F55449 ( pattern , Pattern , regexp ) Matcher matcher = pattern . matcher ( s [ i ] ) ; assertTrue ( matcher . find ( ) ) ; } }
$F1 public int hashCode $F72 { int code = NUM00 ; if ( eSubjects != null ) { for ( EntitlementSubject eSubject : eSubjects ) { code += eSubject . hashCode ( ) ; } } $F156574 ( pSubjectName , code ) return code ; }
private void assignRandomLowerTriangularMatrix ( int n , SecureRandom sr ) { numRows = n ; numColumns = n ; length = ( n + NUM00 ) > > > NUM00 ; matrix = new int [ numRows ] [ length ] ; for ( $F119 ( i , numRows ) ) { $F297790 ( q , i ) int r = i & NUM00 ; int s = NUM00 - r ; r = NUM00 < < r ; for ( $F119 ( j , q ) ) { matrix [ i ] [ j ] = sr . nextInt ( ) ; } matrix [ i ] [ q ] = ( sr . nextInt ( ) > > > s ) | r ; for ( $F2634 ( j , q , length ) ) $F211213 ( matrix , i , j ) } }
private boolean loadWithInspectItClassLoader ( String className ) $F121470 ( className , CLASS_NAME_PREFIX )
public static void addCustomCommands ( String commands , ContextMenu m ) { $F275 ( matcher , CUSTOM_COMMANDS_PATTERN , commands ) boolean sep = _BOOL ; while $F281 ( matcher ) { $F45144 ( match , matcher ) if $F3057 ( match ) { sep = _BOOL ; } else { $F283 ( command , matcher ) String submenu = null ; if $F3106 ( match ) { submenu = CUSTOM_COMMANDS_SUBMENU ; } if ( sep ) { m . addSeparator ( submenu ) ; } m . addSubItem ( NUM00 + command , Helper . replaceUnderscoreWithSpace ( command ) , submenu ) ; sep = _BOOL ; } } }
public void paintBorder $F6065 ( c , g , x , y , width , height ) { Border border = getBorder ( ) ; String title = getTitle ( ) ; if $F2772 ( title ) { int edge = ( border instanceof TitledBorder ) ? NUM00 : EDGE_SPACING ; JLabel label = getLabel ( c ) ; $F86864 ( size , label ) Insets insets = getBorderInsets ( border , c , $F32450 ) ; int borderX = x + edge ; int borderY = y + edge ; int borderW = width - edge - edge ; int borderH = height - edge - edge ; int labelY = y ; int labelH = size . height ; int position = getPosition ( ) ; switch ( position ) { case ABOVE_TOP : insets . left = NUM00 ; insets . right = NUM00 ; borderY += labelH - edge ; borderH -= labelH - edge ; $F597 case TOP : insets . top = edge + insets . top / NUM00 - labelH / NUM00 ; if ( insets . top < edge ) { borderY -= insets . top ; borderH += insets . top ; } else { labelY += insets . top ; } $F597 case BELOW_TOP : labelY += insets . top + edge ; $F597 case ABOVE_BOTTOM : labelY += height - labelH - insets . bottom - edge ; $F597 case BOTTOM : labelY += height - labelH ; insets . bottom = edge + ( insets . bottom - labelH ) / NUM00 ; if ( insets . bottom < edge ) { borderH += insets . bottom ; } else { labelY -= insets . bottom ; } $F597 case BELOW_BOTTOM : insets . left = NUM00 ; insets . right = NUM00 ; labelY += height - labelH ; borderH -= labelH - edge ; $F597 } insets . left += edge + TEXT_INSET_H ; insets . right += edge + TEXT_INSET_H ; int labelX = x ; int labelW = width - insets . left - insets . right ; if ( labelW > size . width ) { labelW = size . width ; } switch ( getJustification ( c ) ) { case LEFT : labelX += insets . left ; $F597 case RIGHT : labelX += width - insets . right - labelW ; $F597 case CENTER : labelX += ( width - labelW ) / NUM00 ; $F597 } if ( border != null ) { if ( ( position != TOP ) && ( position != BOTTOM ) ) { border . paintBorder ( c , g , borderX , borderY , borderW , borderH ) ; } else { Graphics g2 = g . create ( ) ; if ( g2 instanceof Graphics2D ) { $F20230 ( g2d , g2 ) Path2D path = new Path2D . Float $F72 ; path . append ( new Rectangle ( borderX , borderY , borderW , labelY - borderY ) , _BOOL ) ; path . append ( new Rectangle ( borderX , labelY , labelX - borderX - TEXT_SPACING , labelH ) , _BOOL ) ; path . append ( new Rectangle ( labelX + labelW + TEXT_SPACING , labelY , borderX - labelX + borderW - labelW - TEXT_SPACING , labelH ) , _BOOL ) ; path . append ( new Rectangle ( borderX , labelY + labelH , borderW , borderY - labelY + borderH - labelH ) , _BOOL ) ; g2d . clip ( path ) ; } border . paintBorder ( c , g2 , borderX , borderY , borderW , borderH ) ; $F355 ( g2 ) } } g . translate ( labelX , labelY ) ; label . setSize ( labelW , labelH ) ; label . paint ( g ) ; $F86480 ( g , labelX , labelY ) } else if ( border != null ) { border . paintBorder ( c , g , x , y , width , height ) ; } }
public int nextClearBit ( int fromIndex ) { int i = fromIndex > > ADDRESS_BITS ; int max = data . length ; for ( ; i < max ; i ++ ) { if $F13071 ( data , i ) $F1448 int j = Math . max ( fromIndex , i < < ADDRESS_BITS ) ; for ( int end = j + NUM00 ; j < end ; j ++ ) { $F74602 ( get , j ) } } return max < < ADDRESS_BITS ; }
private final void nextRequest $F72 { $F5191 ( pacingTimer ) $F31134 ( pacingTimer ) replyTryCount = NUM00 ; }
$F1 public boolean equals ( Object o ) { $F3627 ( this , o , _BOOL ) $F110236 ( o , getClass , _BOOL ) Account account = ( Account ) o ; $F110240 ( username , account , _BOOL ) return _BOOL ; }
public static int identifyPid ( final String name ) throws PidUnavailableException { try { $F46662 ( index , name ) if ( index < NUM00 ) { throw new PidUnavailableException ( NUM00 + name ) ; } return Integer . valueOf ( name . substring ( NUM00 , index ) ) ; } catch ( NumberFormatException e ) { throw new PidUnavailableException ( NUM00 + name , e ) ; } }
abstract protected void processCommand ( String line ) throws Exception ;
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
protected Object next $F72 { int i = NUM00 ; $F1469 c ; try { $F39710 ( i , st ) } catch ( IOException e ) { Debug . error ( $F369 ( e ) ) ; } if ( ( i == StreamTokenizer . TT_EOF ) || ( i == NUM00 ) ) return EOF ; if ( i == StreamTokenizer . TT_WORD ) return new Symbol ( st . sval , NUM00 ) ; if $F34322 ( i ) return st . sval ; if ( i == StreamTokenizer . TT1BER ) return new Double ( st . nval ) ; if ( $F152535 ( i ) ) return LP ; if ( $F152535 ( i ) ) return RP ; $F11575 ( c ) ; $F238001 ( c , i ) return new Symbol ( new String ( c ) , NUM00 ) ; }
public static void copy ( File source , File dest ) throws IOException { if $F3444 ( source ) { $F27233 ( dest ) for ( File child : listFiles ( source ) ) { copy ( child , new File ( dest , child . getName ( ) ) ) ; } } else { if $F3428 ( source ) { $F105872 ( lm , source ) if $F3444 ( dest ) { dest = new File ( dest , source . getName ( ) ) ; } $F4649 ( fos , dest ) try { $F4647 ( fis , source ) try { if ( USE_NIO ) { nioCopy ( fos , fis ) ; } else { oioCopy ( source , fos , fis ) ; } } $F3229 ( fis ) } $F3229 ( fos ) dest . setExecutable ( source . canExecute ( ) , _BOOL ) ; dest . setLastModified ( lm ) ; } } }
public static int classIndex ( int luaState , Class clazz , String searchName ) throws LuaException { synchronized ( LuaStateFactory . getExistingState ( luaState ) ) { int res ; res = checkField ( luaState , clazz , searchName ) ; if ( res != NUM00 ) $F1083 res = checkMethod ( luaState , clazz , searchName ) ; if ( res != NUM00 ) $F1083 $F1082 } }
private void notifyResourceEventListeners ( ResourceEvent event , Object resource ) { for ( Iterator < ResourceEventsListener > iter = resourceListeners . iterator ( ) ; iter . hasNext ( ) ; ) { try { ResourceEventsListener listener = ( ResourceEventsListener ) iter . next ( ) ; listener . handleEvent ( event , resource ) ; } catch ( CancelException e ) $F845 catch ( GemFireSecurityException | ManagementException ex ) { if ( event == ResourceEvent . CACHE_CREATE ) { throw ex ; } else { logger . warn ( $F1573 ( ex ) ) ; } } catch ( Exception err ) { logger . warn ( $F1573 ( err ) ) ; } $F79506 ( SystemFailure , e ) catch ( Throwable t ) { $F79507 ( SystemFailure ) logger . warn ( $F1573 ( t ) ) ; } } }
public boolean isEnumConstant $F72 { return ( getModifiers ( ) & Modifier . ENUM ) != NUM00 ; }
private void inferCaller $F72 { needToInferCaller = _BOOL ; Throwable throwable = $F219728 ; boolean lookingForLogger = _BOOL ; for ( final StackTraceElement frame : throwable . getStackTrace ( ) ) { String cname = frame . getClassName ( ) ; boolean isLoggerImpl = isLoggerImplFrame ( cname ) ; if ( lookingForLogger ) { $F65989 ( isLoggerImpl , lookingForLogger , _BOOL ) } else { if ( ! isLoggerImpl ) { if ( $F132005 ( cname ) ) { setSourceClassName ( cname ) ; setSourceMethodName ( frame . getMethodName ( ) ) ; $F665 } } } } }
final int recordExceptionalCompletion ( Throwable ex ) { int s ; if ( ( s = status ) >= NUM00 ) { $F33763 ( h , System , this ) final ReentrantLock lock = exceptionTableLock ; $F790 ( lock ) try { expungeStaleExceptions ( ) ; $F33764 t = exceptionTable ; $F33769 ( i , h , t ) for ( ExceptionNode e = t [ i ] ; ; e = e . next ) { if ( e == null ) { t [ i ] = new ExceptionNode ( this , ex , t [ i ] , exceptionTableRefQueue ) ; $F597 } if $F33770 ( e , this ) $F597 } } $F796 ( lock ) s = setCompletion ( EXCEPTIONAL ) ; } return s ; }
private void analyzeResultingTlsContextAndWriteFile ( TlsContext tlsContext , String folder , String fieldName , String workflowName , long phase ) throws JAXBException , IOException { if ( TlsContextAnalyzer . containsFullWorkflowWithMissingMessage ( tlsContext ) || TlsContextAnalyzer . containsServerFinishedWithModifiedHandshake ( tlsContext ) || TlsContextAnalyzer . containsFullWorkflowWithModifiedMessage ( tlsContext ) ) { String fileNameBasic = createFileName ( folder , phase , tlsContext , fieldName ) ; FileOutputStream fos = new FileOutputStream ( fileNameBasic + workflowName + NUM00 ) ; WorkflowTraceSerializer . write ( fos , tlsContext . getWorkflowTrace ( ) ) ; } }
private static String toVariableName ( String str ) { $F280 ( rtn ) $F7782 ( chars , str ) long changes = NUM00 ; boolean doCorrect = _BOOL ; for ( $F1139 ( i , chars ) ) { char c = chars [ i ] ; if ( i == NUM00 && $F19295 ( c ) ) $F11030 ( rtn , c ) else if ( $F53963 ( c ) || c == NUM00 || c == NUM00 ) rtn . append ( c ) ; else { doCorrect = _BOOL ; $F84 ( rtn ) changes += ( c * ( i + NUM00 ) ) ; } } if ( changes > NUM00 ) rtn . append ( changes ) ; if ( doCorrect ) $F17718 ( correctReservedWord , rtn ) $F92 ( rtn ) }
public Year ( int year ) { if ( ( year < Year . MINIMUM_YEAR ) || ( year > Year . MAXIMUM_YEAR ) ) $F29526 ( year ) this . year = ( short ) year ; $F53414 ( peg , Calendar ) }
$F1431 public $F3803 hostVcenterChangeDetails ( URI hostId , URI clusterId , URI datacenterId , boolean isVcenter ) { $F295581 ( result , Lists ) Host host = _dbClient . queryObject ( $F2522 , hostId ) ; VcenterDataCenter datacenter = _dbClient . queryObject ( VcenterDataCenter . class , datacenterId ) ; if ( host != null && datacenter != null ) { result . add ( ComputeSystemDialogProperties . getMessage ( $F17177 ( host , datacenter ) ) ) ; result . addAll ( hostClusterChangeDetails ( hostId , clusterId , datacenterId , isVcenter ) ) ; } return result ; }
public boolean deleteStatement ( TestCase test , int position ) throws ConstructionFailedException { if ( ! ConstraintVerifier . canDelete ( test , position ) ) { return _BOOL ; } $F7028 ( logger , position ) $F11868 $F22304 ( toDelete ) ; recursiveDeleteInclusion ( test , toDelete , position ) ; $F3807 $F10252 ( pos , toDelete ) ; Collections . sort ( pos , Collections . reverseOrder ( ) ) ; for ( Integer i : pos ) { $F7028 ( logger , i ) test . remove ( i ) ; } return _BOOL ; }
public boolean isCompound $F72 { return $F6886 ( splits ) ; }
$F1 public $F12622 sum ( $F12625 ( state ) , final $F12622 left , final $F12622 right ) { final $F12622 tmp = new LinkedHashSet $F12621 ( left ) ; tmp . addAll ( right ) ; return tmp ; }
public void testSignumPositive $F72 { String a = NUM00 ; int aScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F3037 ( assertEquals , aNumber ) }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return HOST ; $F3366 return PORT ; $F3366 return ID ; $F3366 return V_NODES ; $F3366 return PING_FREQUENCY ; $F3366 return SERVICE_NAME ; $F3366 return STATE ; $F3366 return TIMESTAMP ; $F20809 } }
private static int categorizeByYear2014Method ( Context c ) { $F15277 ( componentYears ) conditionallyAdd ( componentYears , getNumCoresYear ( ) ) ; conditionallyAdd ( componentYears , getClockSpeedYear ( ) ) ; conditionallyAdd ( componentYears , getRamYear ( c ) ) ; $F69790 ( componentYears , CLASS_UNKNOWN ) Collections . sort ( componentYears ) ; if ( ( componentYears . size ( ) & NUM00 ) == NUM00 ) { return componentYears . get ( $F74216 ( componentYears ) ) ; } else { int baseIndex = $F74216 ( componentYears ) - NUM00 ; return componentYears . get ( baseIndex ) + ( componentYears . get ( baseIndex + NUM00 ) - componentYears . get ( baseIndex ) ) / NUM00 ; } }
public Time ( Date time ) { SimpleTimeZone tz = new SimpleTimeZone ( NUM00 , NUM00 ) ; $F108456 ( dateF ) dateF . setTimeZone ( tz ) ; String d = dateF . format ( time ) + NUM00 ; $F215024 ( year , Integer , d ) if $F19274 ( year ) { this . time = new DERGeneralizedTime ( d ) ; } else { this . time = new DERUTCTime ( d . substring ( NUM00 ) ) ; } }
public ActionRequestHelper then ( ActionRequestHelper nextAction ) $F18637 ( mNext , nextAction , this )
protected $F2027 readColorTable ( final int ncolors ) { final int nbytes = NUM00 * ncolors ; $F10498 ( tab ) $F4727 ( c , nbytes ) try { rawData . get ( c ) ; $F4470 ( tab ) int i = NUM00 ; int j = NUM00 ; while ( i < ncolors ) { final int r = ( c [ j ++ ] ) & NUM00 ; final int g = ( c [ j ++ ] ) & NUM00 ; final int b = ( c [ j ++ ] ) & NUM00 ; tab [ i ++ ] = NUM00 | ( r < < NUM00 ) | ( g < < NUM00 ) | b ; } } catch ( final BufferUnderflowException e ) { Log . w ( TAG , NUM00 , e ) ; status = STATUS_FORMAT_ERROR ; } return tab ; }
public boolean isCurrent ( String str ) { if ( pos + str . length ( ) > lcText . length ) return _BOOL ; for ( $F186068 ( i , str ) ) { if ( str . charAt ( i ) != lcText [ pos + i ] ) return _BOOL ; } return _BOOL ; }
private static String matchablePath ( String path ) { if ( path == null ) $F2455 else if $F8991 ( path ) { return path ; } else $F70142 ( path ) }
public void assertUsable $F72 throws IOException { if $F61923 ( throwable ) { $F31068 ( connection ) $F665 } Throwable t = throwable . get ( ) ; if ( t instanceof IOException ) $F204796 ( t ) else { throw Throwables . propagate ( t ) ; } }
protected static double computeH ( final int i , $F1986 dist_i , $F1986 pij_i , double mbeta ) { double sumP = NUM00 ; for ( $F119 ( j , i ) ) { sumP += ( pij_i [ j ] = Math . exp ( dist_i [ j ] * mbeta ) ) ; } for ( $F169942 ( j , i , dist_i ) ) { sumP += ( pij_i [ j ] = Math . exp ( dist_i [ j ] * mbeta ) ) ; } if $F102905 ( sumP ) $F86429 ( Double ) final double s = NUM00 / sumP ; double sum = NUM00 ; for ( $F1139 ( j , dist_i ) ) { sum += dist_i [ j ] * ( pij_i [ j ] *= s ) ; } return Math . log ( sumP ) - mbeta * sum ; }
private Collection < Insanity > checkSubreaders ( MapOfSets < Integer , CacheEntry > valIdToItems , MapOfSets < ReaderField , Integer > readerFieldToValIds ) { final List < Insanity > $F9187 ( insanity ) ; Map < ReaderField , Set < ReaderField > > badChildren = new $F4188 $F989 ; MapOfSets < ReaderField , ReaderField > badKids = new MapOfSets $F200 ( badChildren ) ; Map < Integer , Set < CacheEntry > > viToItemSets = valIdToItems . getMap ( ) ; Map < ReaderField , $F11868 > rfToValIdSets = readerFieldToValIds . getMap ( ) ; Set < ReaderField > seen = new $F9623 $F989 ; Set < ReaderField > readerFields = rfToValIdSets . keySet ( ) ; for ( final ReaderField rf : readerFields ) { $F71285 ( seen , rf ) $F6689 kids = getAllDescendantReaderKeys ( rf . readerKey ) ; for ( Object kidKey : kids ) { ReaderField kid = new ReaderField ( kidKey , rf . fieldName ) ; if $F1710 ( badChildren , kid ) { badKids . put ( rf , kid ) ; badKids . putAll ( rf , badChildren . get ( kid ) ) ; badChildren . remove ( kid ) ; } else if $F1710 ( rfToValIdSets , kid ) $F1717 ( badKids , rf , kid ) seen . add ( kid ) ; } seen . add ( rf ) ; } for ( final ReaderField parent : badChildren . keySet ( ) ) { Set < ReaderField > kids = badChildren . get ( parent ) ; List < CacheEntry > badEntries = new $F201 $F98338 ( kids ) ; { for ( final Integer value : rfToValIdSets . get ( parent ) ) { $F103980 ( badEntries , viToItemSets , value ) } } for ( final ReaderField kid : kids ) { for ( final Integer value : rfToValIdSets . get ( kid ) ) { $F103980 ( badEntries , viToItemSets , value ) } } CacheEntry [ ] badness = new CacheEntry $F2313 ( badEntries ) ; $F5443 ( badness , badEntries ) insanity . add ( new Insanity ( InsanityType . SUBREADER , $F368 ( parent ) , badness ) ) ; } return insanity ; }
public static String addProtocolToUrl ( String url ) { if ( ! url . startsWith ( HTTP_PROTOCOL_PREFIX ) && ! url . startsWith ( HTTPS_PROTOCOL_PREFIX ) && ! url . startsWith ( FILE_PROTOCOL_PREFIX ) ) { if $F7311 ( url , FILE_PREFIX ) { url = FILE_PROTOCOL_PREFIX + url ; } else { url = HTTP_PROTOCOL_PREFIX + url ; } } return url ; }
public XPath ( String exprString , SourceLocator locator , PrefixResolver prefixResolver , int type ) throws $F1872 { this ( exprString , locator , prefixResolver , type , null ) ; }
public static String methodNameToPropertyName ( String methodName ) { if $F3106 ( methodName ) $F3108 ( methodName ) else if $F3106 ( methodName ) $F3108 ( methodName ) else $F120626 ( methodName ) if $F1277 ( methodName ) $F1274 $F12685 ( ch , methodName ) if ( Character . isUpperCase ( ch ) && ( $F1276 ( methodName ) || ! $F102260 ( Character , methodName ) ) ) { methodName = Character . toLowerCase ( ch ) + methodName . substring ( NUM00 ) ; } return methodName ; }
private StringBuilder createIndent ( int indent ) { StringBuilder oneIndent = createIndent ( ) ; $F83 ( ret ) while ( indent -- > NUM00 ) $F288 ( ret , oneIndent ) return ret ; }
protected ClassLoader $F72 $F7429 ( this , getSystemClassLoader )
public static void matchvPoolWithStoragePools ( VirtualPool vpool , $F37270 pools , DbClient dbClient , CoordinatorClient coordinator , String matcherGroupName , StringBuffer errorMessage ) { $F37270 filterPools = getMatchedPoolWithStoragePools ( vpool , pools , VirtualPool . getProtectionSettings ( vpool , dbClient ) , VirtualPool . getRemoteProtectionSettings ( vpool , dbClient ) , VirtualPool . getFileRemoteProtectionSettings ( vpool , dbClient ) , dbClient , coordinator , matcherGroupName , errorMessage ) ; updateInvalidAndMatchedPoolsForVpool ( vpool , filterPools , pools , dbClient ) ; }
private static $F2027 trimArray $F11072 ( array , size ) { $F63585 ( size ) $F6482 ( size , NO_ERRORS ) $F4120 ( a , size ) $F135 ( System , array , a , size ) return a ; }
static $F4203 boolean removeIf ( $F35808 removeFrom , $F111034 predicate ) { if ( removeFrom instanceof RandomAccess && removeFrom instanceof List ) { return removeIfFromRandomAccessList ( ( $F5675 ) removeFrom , checkNotNull ( predicate ) ) ; } return Iterators . removeIf ( removeFrom . iterator ( ) , predicate ) ; }
@ BeforeClass public static void createEcomConnection $F72 { boolean wasException = _BOOL ; try { _connection = new EcomConnection ( createConnectionInfo ( ) , createListener ( ) , new CimFilterMap $F72 ) ; } $F28453 ( wasException , _BOOL ) Assert . assertFalse ( wasException ) ; }
protected void _init ( final IDatatypeURIResolver resolver , final ILexiconConfiguration < BigdataValue > config , final Collection < IExtension < ? extends BigdataValue > > extensions ) $F845
public mxRectangle graphModelChanged ( mxIGraphModel sender , List < mxUndoableChange > changes , Boolean rv ) { int thresh = getChangesRepaintThreshold ( ) ; boolean ignoreDirty = thresh > NUM00 && changes . size ( ) > thresh ; if ( ! ignoreDirty ) { Iterator < mxUndoableChange > it = changes . iterator ( ) ; while $F2921 ( it ) { if ( it . next ( ) instanceof mxRootChange ) $F3468 ( ignoreDirty , _BOOL ) } } $F37669 ( changedCells ) mxRectangle dirty = processChanges ( changes , _BOOL , ignoreDirty , changedCells ) ; if ( ! rv ) { if ( changedCells != null ) { for ( Object changedCell : changedCells ) { mxCellState parentState = view . getState ( model . getParent ( changedCell ) , _BOOL ) ; view . validate ( parentState , changedCell , _BOOL ) ; } } } else $F1954 ( view ) if ( ! ignoreDirty ) { mxRectangle tmp = processChanges ( changes , _BOOL , ignoreDirty ) ; if ( tmp != null ) { if ( dirty == null ) { dirty = tmp ; } else $F207 ( dirty , tmp ) } } removeSelectionCells ( getRemovedCellsForChanges ( changes ) ) ; return dirty ; }
public void testSetBitException $F72 { $F123148 int aSign = NUM00 ; int number = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) try { aNumber . setBit ( number ) ; fail ( NUM00 ) ; } $F174375 }
public void guard ( final Guard r ) throws InterruptedException { incThread ( ) ; try $F21688 ( r ) catch ( InterruptedException e ) { throw e ; } $F12237 ( e ) $F49978 ( decThread ) }
public void log ( Date time , String message ) { try { PrintWriter w = new PrintWriter ( new FileWriter ( filename , _BOOL ) ) ; w . println ( NUM00 + format . format ( time ) + NUM00 + message ) ; $F59 ( w ) } $F29052 }
protected ResourceInfo newElement ( int type ) { ResourceInfo result = null ; switch ( type ) { case IResource . FILE : case IResource . FOLDER : result = new ResourceInfo ( type ) ; $F597 case IResource . PROJECT : result = new ResourceInfo ( type ) ; $F597 case IResource . ROOT : result = new ResourceInfo ( type ) ; $F597 } return result ; }
private boolean isModelUseful ( ContingencyMatrix cm ) { return _BOOL ; }
public void registerPlayerObserver ( PlayerEventsObserver observer , boolean replyImmediately ) { if ( this . connection == null ) $F665 playerEventsObservers . add ( observer ) ; if ( replyImmediately ) replyWithLastResult ( observer ) ; if $F10471 ( playerEventsObservers ) { if ( connection . getProtocol ( ) == HostConnection . PROTOCOL_TCP ) { connection . registerPlayerNotificationsObserver ( this , checkerHandler ) ; connection . registerSystemNotificationsObserver ( this , checkerHandler ) ; connection . registerInputNotificationsObserver ( this , checkerHandler ) ; checkerHandler . post ( tcpCheckerRunnable ) ; } else $F95028 ( checkerHandler , httpCheckerRunnable ) } }
$F1 public int numElements $F72 throws Exception { if ( m_zeroR != null ) $F1083 return m_Tree . numNodes ( ) ; }
public boolean isHighlightable ( OMGraphic omg ) { return _BOOL ; }
public void testVirtualDestinationsDinamicallyIncludedBehavior3 $F72 throws Exception { final String topic = NUM00 ; final String vq = NUM00 + topic ; startAllBrokers ( ) ; final int msgs1 = NUM00 ; final int msgs2 = NUM00 ; Destination tDest = createDestination ( topic , _BOOL ) ; Destination vqDest = createDestination ( vq , _BOOL ) ; MessageConsumer clientB1t = createConsumer ( NUM00 , tDest ) ; MessageConsumer clientB2t = createConsumer ( NUM00 , tDest ) ; MessageConsumer clientB1vq = createConsumer ( NUM00 , vqDest ) ; $F165308 ( Thread ) sendMessages ( NUM00 , tDest , msgs1 ) ; sendMessages ( NUM00 , tDest , msgs2 ) ; $F9470 ( Thread ) MessageIdList msgsB1t = getConsumerMessages ( NUM00 , clientB1t ) ; msgsB1t . waitForMessagesToArrive ( msgs1 + msgs2 ) ; assertEquals ( msgs1 + msgs2 , msgsB1t . getMessageCount ( ) ) ; MessageIdList msgsB2t = getConsumerMessages ( NUM00 , clientB2t ) ; msgsB2t . waitForMessagesToArrive ( msgs1 + msgs2 ) ; assertEquals ( msgs1 + msgs2 , msgsB2t . getMessageCount ( ) ) ; MessageIdList msgsB1vq = getConsumerMessages ( NUM00 , clientB1vq ) ; msgsB1vq . waitForMessagesToArrive ( msgs1 + msgs2 ) ; assertEquals ( msgs1 + msgs2 , msgsB1vq . getMessageCount ( ) ) ; assertEquals ( NUM00 , getQueueSize ( NUM00 , ( ActiveMQDestination ) vqDest ) ) ; assertEquals ( NUM00 , getQueueSize ( NUM00 , ( ActiveMQDestination ) vqDest ) ) ; destroyAllBrokers ( ) ; }
public RpcClient peerWith ( PeerInfo serverInfo , Bootstrap bootstrap , $F2100 ( attributes ) ) throws IOException { InetSocketAddress remoteAddress = new InetSocketAddress ( serverInfo . getHostName ( ) , serverInfo . getPort ( ) ) ; return peerWith ( remoteAddress , bootstrap , attributes ) ; }
public GridReversedLinesFileReader ( final File file , final int blockSize , final String encoding ) throws IOException { this ( file , blockSize , Charset . forName ( encoding ) ) ; }
private void beforeName $F72 throws IOException { int context = peek ( ) ; if ( context == NONEMPTY_OBJECT ) $F12032 ( out ) else if ( context != EMPTY_OBJECT ) $F4639 newline ( ) ; replaceTop ( DANGLING_NAME ) ; }
protected String constName $F72 { return NUM00 + name . toUpperCase ( ) ; }
public boolean isTimestampWithinInterval ( DateTime timestamp , String intervalString ) throws IllegalArgumentException { $F23375 ( interval , Interval , intervalString ) $F297 ( interval , timestamp ) }
private void processAnsiOsCommand $F72 { if ( $F4434 ( ansiOsCommand ) || $F4434 ( ansiOsCommand ) ) { Logger . log ( NUM00 + ansiOsCommand + NUM00 ) ; $F665 } }
private void addToRenaming ( Renaming renaming , $F2690 prevDeclared , ExprNode expr ) { if ( ! ( expr instanceof OpApplNode ) ) $F932 $F2690 newDeclared = ( $F2690 ) prevDeclared . clone ( ) ; OpApplNode node = ( OpApplNode ) expr ; if ( node . getUnbdedQuantSymbols ( ) != null ) { for ( int i = NUM00 ; i < node . getUnbdedQuantSymbols ( ) . length ; i ++ ) { FormalParamNode id = node . getUnbdedQuantSymbols ( ) [ i ] ; if ( newDeclared . contains ( getCurrentName ( id , renaming ) ) ) { String newname = getNewName ( id , newDeclared , renaming ) ; newDeclared . add ( newname ) ; addCurrentName ( id , newname , renaming ) ; } } } if ( node . getBdedQuantSymbolLists ( ) != null ) { for ( int i = NUM00 ; i < node . getBdedQuantSymbolLists ( ) . length ; i ++ ) { addToRenaming ( renaming , prevDeclared , node . getBdedQuantBounds ( ) [ i ] ) ; FormalParamNode [ ] nodeList = node . getBdedQuantSymbolLists ( ) [ i ] ; for ( $F1139 ( j , nodeList ) ) { FormalParamNode id = nodeList [ j ] ; if ( newDeclared . contains ( getCurrentName ( id , renaming ) ) ) { String newname = getNewName ( id , newDeclared , renaming ) ; newDeclared . add ( newname ) ; addCurrentName ( id , newname , renaming ) ; } } } } for ( int i = NUM00 ; i < node . getArgs ( ) . length ; i ++ ) { if ( node . getArgs ( ) [ i ] instanceof ExprNode ) { addToRenaming ( renaming , newDeclared , ( ExprNode ) node . getArgs ( ) [ i ] ) ; } } }
private $F16501 diff_lineMode $F9179 ( text1 , text2 , deadline ) { LinesToCharsResult b = diff_linesToChars ( text1 , text2 ) ; text1 = b . chars1 ; text2 = b . chars2 ; $F3803 linearray = b . lineArray ; $F40337 ( diffs , diff_main , text1 , text2 , _BOOL , deadline ) diff_charsToLines ( diffs , linearray ) ; diff_cleanupSemantic ( diffs ) ; $F340181 ( diffs , Operation ) int count_delete = NUM00 ; int count_insert = NUM00 ; String text_delete = NUM00 ; String text_insert = NUM00 ; $F340184 ( pointer , diffs ) $F340186 ( thisDiff , pointer ) while ( thisDiff != null ) { switch ( thisDiff . operation ) { $F357861 ( INSERT , count_insert , text_insert , thisDiff ) $F357861 ( DELETE , count_delete , text_delete , thisDiff ) case EQUAL : if ( count_delete >= NUM00 && count_insert >= NUM00 ) { $F45359 ( pointer ) for ( $F41842 ( j , count_delete , count_insert ) ) { $F45359 ( pointer ) $F7042 ( pointer ) } for ( Diff newDiff : diff_main ( text_delete , text_insert , _BOOL , deadline ) ) $F207 ( pointer , newDiff ) } count_insert = NUM00 ; count_delete = NUM00 ; text_delete = NUM00 ; text_insert = NUM00 ; $F597 } $F335731 ( thisDiff , pointer ) } diffs . removeLast ( ) ; return diffs ; }
public boolean removeTriggerGroupToNeverDelete ( String group ) { if ( group != null ) $F13237 ( triggerGroupsToNeverDelete , group ) return _BOOL ; }
public void remove ( Rule rule ) $F106 ( rules , rule )
private boolean uploadAllTrackPoints ( Fusiontables fusiontables , String tableId , Track track ) throws IOException { int numberOfPoints = track . getNumberOfPoints ( ) ; List $F80423 locations = new ArrayList $F80423 ( MAX_POINTS_PER_UPLOAD ) ; Location lastValidLocation = null ; boolean sentStartMarker = _BOOL ; int readCount = NUM00 ; LocationIterator locationIterator = null ; try { locationIterator = myTracksProviderUtils . getTrackPointLocationIterator ( trackId , - NUM00 , _BOOL , MyTracksProviderUtils . DEFAULT_LOCATION_FACTORY ) ; while $F2921 ( locationIterator ) { Location location = locationIterator . next ( ) ; locations . add ( location ) ; if ( LocationUtils . isValidLocation ( location ) ) { lastValidLocation = location ; } if ( ! sentStartMarker && lastValidLocation != null ) { String name = context . getString ( R . string . marker_label_start , track . getName ( ) ) ; createNewPoint ( fusiontables , tableId , name , NUM00 , lastValidLocation , MARKER_TYPE_START ) ; sentStartMarker = _BOOL ; } readCount ++ ; if ( readCount % MAX_POINTS_PER_UPLOAD == NUM00 ) { if ( ! prepareAndUploadPoints ( fusiontables , tableId , track , locations , _BOOL ) ) $F35346 ( Log , TAG , _BOOL ) updateProgress ( readCount , numberOfPoints ) ; $F725 ( locations ) } } if ( ! prepareAndUploadPoints ( fusiontables , tableId , track , locations , _BOOL ) ) $F35346 ( Log , TAG , _BOOL ) if ( lastValidLocation != null ) { String name = context . getString ( R . string . marker_label_end , track . getName ( ) ) ; DescriptionGenerator descriptionGenerator = new DescriptionGeneratorImpl ( context ) ; String description = descriptionGenerator . generateTrackDescription ( track , null , null , _BOOL ) ; createNewPoint ( fusiontables , tableId , name , description , lastValidLocation , MARKER_TYPE_END ) ; } return _BOOL ; } $F14364 ( locationIterator ) }
$F153740 $F1309 $F2304 public static String join ( $F2304 $F806 s , $F2304 String delimiter ) { $F83 ( buffer ) for ( $F1139 ( i , s ) ) { $F6939 ( buffer , s , i ) $F262067 ( i , s , buffer , delimiter ) } $F92 ( buffer ) }
private void initSelectPosition ( int position ) { if ( mSelectMode == ISelectable . SELECT_MODE_SINGLE ) { if ( mSelectedPosition == ISelectable . INVALID_POSITION ) { mSelectedPosition = position ; } } else if ( mSelectMode == ISelectable . SELECT_MODE_MULTI ) $F24128 ( mSelectedPositions , position ) else $F65782 }
$F1 public PathImpl schemeWalk ( String userPath , $F2100 ( attributes ) , String filePath , int offset ) { if $F931 ( isWindows ) { return super . schemeWalk ( userPath , attributes , filePath , offset ) ; } String canonicalPath ; if ( filePath . length ( ) < offset + NUM00 ) { return super . schemeWalk ( userPath , attributes , filePath , offset ) ; } $F17494 ( ch1 , filePath , offset ) $F1280 ( ch2 , filePath , offset ) if ( ( ch2 == NUM00 || ch2 == _separatorChar ) && ( ch1 == NUM00 || ch1 == _separatorChar ) ) return super . schemeWalk ( userPath , attributes , convertFromWindowsPath ( filePath . substring ( offset ) ) , NUM00 ) ; else return super . schemeWalk ( userPath , attributes , filePath , offset ) ; }
void initProperties $F19845 ( defaultLevel , defaultFilter , defaultFormatter , defaultEncoding ) { LogManager manager = LogManager . getLogManager ( ) ; $F498481 ( filterName , manager , prefix ) if ( filterName != null ) { try { $F498482 ( filter , getCustomizeInstance , filterName ) } catch ( Exception e1 ) { printInvalidPropMessage ( NUM00 , filterName , e1 ) ; $F498482 ( filter , getDefaultInstance , defaultFilter ) } } else { $F498482 ( filter , getDefaultInstance , defaultFilter ) } String levelName = manager . getProperty ( prefix + NUM00 ) ; if ( levelName != null ) { try $F49239 ( level , Level , levelName ) catch ( Exception e ) { printInvalidPropMessage ( NUM00 , levelName , e ) ; level = Level . parse ( defaultLevel ) ; } } else $F49239 ( level , Level , defaultLevel ) $F498481 ( formatterName , manager , prefix ) if ( formatterName != null ) { try { $F498496 ( formatter , getCustomizeInstance , formatterName ) } catch ( Exception e ) { printInvalidPropMessage ( NUM00 , formatterName , e ) ; $F498496 ( formatter , getDefaultInstance , defaultFormatter ) } } else { $F498496 ( formatter , getDefaultInstance , defaultFormatter ) } $F498481 ( encodingName , manager , prefix ) try { internalSetEncoding ( encodingName ) ; } catch ( UnsupportedEncodingException e ) $F228450 ( printInvalidPropMessage , encodingName , e ) }
public static void writeUnsignedVL ( long data , DataOutput out ) throws IOException { while ( _BOOL ) { if $F105378 ( data ) { out . writeByte ( ( int ) data ) ; $F665 } else { out . writeByte ( ( ( int ) data & NUM00 ) | NUM00 ) ; data >>>= NUM00 ; } } }
public JSONArray names $F72 { $F19928 ( ja ) Iterator keys = keys ( ) ; while $F2921 ( keys ) { ja . put ( keys . next ( ) ) ; } return $F1276 ( ja ) ? null : ja ; }
public void addTableWithAlias ( String table , String alias ) { QueryTableData tableData = new QueryTableData $F72 ; tableData . setTableName ( table ) ; tableData . setTableAlias ( alias ) ; tableData . setTableIndex ( _tablesData . size ( ) ) ; _tablesData . add ( tableData ) ; if ( alias == null ) tables . put ( table , tableData ) ; else { tables . put ( alias , tableData ) ; tables . put ( table , tableData ) ; } }
private int encryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) for ( $F119 ( i , blockSize ) ) { cbcV [ i ] ^= in [ inOff + i ] ; } int length = cipher . processBlock ( cbcV , NUM00 , out , outOff ) ; $F198866 ( System , out , outOff , cbcV ) return length ; }
$F291007 ( camera , glPushMatrix , glLoadIdentity , rotX , rotY , rotZ , glRotatef , glLineWidth , glBegin , GL_LINES , glColor3f , glVertex3f , glEnd , glPopMatrix )
$F1 public Object clone $F72 throws CloneNotSupportedException { PeriodAxisLabelInfo clone = ( PeriodAxisLabelInfo ) super . clone ( ) ; return clone ; }
public long skip ( long n ) throws IOException { $F6853 ( n ) ensureOpen ( ) ; int max = ( int ) Math . min ( n , Integer . MAX_VALUE ) ; int total = NUM00 ; while ( total < max ) { int len = max - total ; if ( len > tmpbuf . length ) $F9454 ( len , tmpbuf ) len = read ( tmpbuf , NUM00 , len ) ; if ( len == - NUM00 ) $F3468 ( entryEOF , _BOOL ) total += len ; } return total ; }
private Path convertPath ( Path path ) throws Exception { if ( mode != PROXY ) return path ; else { $F149244 ( secondaryUri , SECONDARY_URI ) URI pathUri = path . toUri ( ) ; return new Path ( new URI ( pathUri . getScheme ( ) != null ? secondaryUri . getScheme ( ) : null , pathUri . getAuthority ( ) != null ? secondaryUri . getAuthority ( ) : null , pathUri . getPath ( ) , null , null ) ) ; } }
private static String joinArray $F28786 ( array , delimiter ) { $F280 ( buffer ) for ( $F1139 ( index , array ) ) { $F6939 ( buffer , array , index ) $F262067 ( index , array , buffer , delimiter ) } $F92 ( buffer ) }
private void outputPartners ( Properties ctx , PrintWriter out , int partnerID , boolean includeAny ) { $F8438 ( out ) $F24502 ( includeAny , out , partnerID ) for ( MBPartner partner : getAllPartners ( ctx ) ) { out . print ( NUM00 + partner . get_ID ( ) + NUM00 ) ; if ( partnerID == partner . get_ID ( ) ) $F21384 ( out ) out . println ( NUM00 + Util . maskHTML ( partner . getName ( ) ) + NUM00 ) ; } $F8438 ( out ) }
public void stop $F72 { mCancel = _BOOL ; if $F48405 ( mRunning , _BOOL ) { if ( mSampleDispatcherTask != null ) { mSampleDispatcherTask . cancel ( _BOOL ) ; $F725 ( mFilledBuffers ) } } }
public ChessSquare ( Composite parent , ChessBoard chessBoard , int id , boolean isLight ) { super ( parent , SWT . DOUBLE_BUFFERED | SWT . NO_BACKGROUND ) ; board = chessBoard ; this . id = id ; this . isLight = isLight ; addPaintListener ( paintListener ) ; addControlListener ( controlListener ) ; addMouseListener ( mouseListener ) ; addListener ( SWT . MouseWheel , mouseWheelListener ) ; addListener ( SWT . MouseDown , dndListener ) ; addListener ( SWT . MouseUp , dndListener ) ; }
$F1 protected void stopService $F72 { Thread t = keepAliveThread ; keepAliveThread = null ; $F36258 ( t ) }
public static int truncatedCompareTo ( final Calendar cal1 , final Calendar cal2 , final int field ) { final Calendar truncatedCal1 = truncate ( cal1 , field ) ; final Calendar truncatedCal2 = truncate ( cal2 , field ) ; $F12554 ( truncatedCal1 , truncatedCal2 ) }
public boolean isPortUsable ( StoragePort storagePort ) $F8587 ( isPortUsable , storagePort , _BOOL )
$F14119 ( this , System )
$F1 public void actionPerformed ( ActionEvent event ) { $F35563 ( command , event ) if $F3057 ( command ) $F5795 ( attemptFontSelection ) else if $F3057 ( command ) $F5795 ( attemptPaintSelection ) else if $F3057 ( command ) $F5795 ( attemptModifyShowTitle ) }
void removeAttributeValues ( String attrName , Set values ) throws SMSException { if ( attrName != null ) { Map attrs = getAttributes ( ) ; $F125374 ( origValues , attrs , attrName ) if $F1032 ( origValues ) { $F46709 ( newValues , origValues ) newValues . removeAll ( values ) ; if $F2979 ( newValues ) { removeAttribute ( attrName ) ; } else { $F28017 ( newAttrs ) newAttrs . put ( attrName , newValues ) ; setAttributes ( newAttrs ) ; } } } }
private static boolean checkContentCharacters ( String chars ) throws CharConversionException { boolean escape = _BOOL ; for ( $F1088 ( i , chars ) ) { $F1280 ( ch , chars , i ) if ( ch <= NUM00 ) { switch ( ch ) { $F3366 $F3366 $F3366 $F598 $F1262 $F19743 ( escape ) escape = ( i > NUM00 ) && $F198486 ( chars , i ) ; $F598 $F1262 $F1262 escape = _BOOL ; $F598 $F1267 if ( ch < NUM00 ) { throw new CharConversionException ( NUM00 + $F1047 ( ch ) + NUM00 ) ; } } } } return escape == _BOOL ; }
public void testFindAppDeployments $F72 throws Exception { WAR war = createWar ( ) ; testConfigWar ( ) ; $F15369 l = deployer . selectAppDeployments ( war , domain ) ; $F70108 ( assertEquals , l ) deployer . removeDeployableFromDomain ( war , domain ) ; l = deployer . selectAppDeployments ( war , domain ) ; $F70108 ( assertEquals , l ) }
$F1 public void drawTop ( final Graphics2D g2d ) { final Rectangle r = getArea ( ) ; if ( isContained ( ) ) { $F166805 ( r ) } else { $F82893 ( isOnScreen , g2d , r ) } final Composite oldComposite = g2d . getComposite ( ) ; try { g2d . setComposite ( entityComposite ) ; drawTop ( g2d , r . x , r . y , r . width , r . height ) ; } finally { g2d . setComposite ( oldComposite ) ; } }
protected void initDebug $F72 { setDebug ( ( getInitParameter ( NUM00 ) == null ) ? _BOOL : Boolean . valueOf ( getInitParameter ( NUM00 ) ) ) ; }
protected void indexNulls ( InputStream is , long ptr , $F14699 entries ) { boolean moreRecords = _BOOL ; byte rHdr [ ] = new byte [ SHAPE_RECORD_HEADER_LENGTH ] ; int result ; int nRecords = NUM00 ; int recLengthWords , recLengthBytes ; long recOffset ; int recBufSize = NUM00 ; byte recBuf [ ] = new byte [ recBufSize ] ; double x ; double y ; try { while ( moreRecords ) { $F61539 ( result , is , rHdr , SHAPE_RECORD_HEADER_LENGTH ) if ( result < NUM00 ) { moreRecords = _BOOL ; if $F6456 ( logger , Level ) { $F29117 ( logger , nRecords ) $F35577 ( logger , recBufSize ) } } else { nRecords ++ ; recOffset = ptr ; readBEInt ( rHdr , NUM00 ) ; recLengthWords = readBEInt ( rHdr , NUM00 ) ; recLengthBytes = recLengthWords * NUM00 ; if ( recLengthBytes > recBufSize ) { $F35579 ( logger , Level , recLengthBytes ) recBufSize = recLengthBytes ; $F1325 ( recBuf , recBufSize ) } $F61539 ( result , is , recBuf , recLengthBytes ) x = NUM00 ; y = NUM00 ; ptr += recLengthBytes + NUM00 ; Entry entry = new Entry ( x , y , x , y , ( int ) recOffset ) ; entries . add ( entry ) ; } } } $F61572 ( e ) finally { try $F881 ( is ) $F42485 } }
protected static RpcPair resolveRpcPair ( ASTNode node , PeerTypeResolver peerResolver ) { MethodDeclaration methodDecl = ASTResolving . findParentMethodDeclaration ( node ) ; TypeDeclaration typeDecl = ( TypeDeclaration ) ASTResolving . findAncestor ( node , ASTNode . TYPE_DECLARATION ) ; $F83951 ( typeDecl ) IType dstType = peerResolver . getPeerType ( typeDecl ) ; $F1338 ( dstType ) CompilationUnit astRoot = ASTResolving . createQuickFixAST ( dstType . getCompilationUnit ( ) , null ) ; TypeDeclaration dstTypeDecl = JavaASTUtils . findTypeDeclaration ( astRoot , dstType . getFullyQualifiedName ( NUM00 ) ) ; $F1338 ( dstTypeDecl ) return new RpcPair ( typeDecl , methodDecl , dstTypeDecl ) ; }
public static void assertEquals ( FieldMatrix < ? extends FieldElement $F1011 > expected , FieldMatrix < ? extends FieldElement $F1011 > observed ) { Assert . assertNotNull ( NUM00 , observed ) ; if ( expected . getColumnDimension ( ) != observed . getColumnDimension ( ) || expected . getRowDimension ( ) != observed . getRowDimension ( ) ) { $F83 ( messageBuffer ) $F84 ( messageBuffer ) messageBuffer . append ( $F314977 ( observed ) + observed . getColumnDimension ( ) ) ; messageBuffer . append ( $F314977 ( expected ) + expected . getColumnDimension ( ) ) ; Assert . fail ( messageBuffer . toString ( ) ) ; } for ( int i = NUM00 ; i < expected . getRowDimension ( ) ; ++ i ) { for ( int j = NUM00 ; j < expected . getColumnDimension ( ) ; ++ j ) { FieldElement $F1011 eij = expected . getEntry ( i , j ) ; FieldElement $F1011 oij = observed . getEntry ( i , j ) ; Assert . assertEquals ( eij , oij ) ; } } }
public void addAddition ( String addition ) $F207 ( additions , addition )
private void startNewTransition $F72 { if $F931 ( hasBounds ) { throw new UnsupportedOperationException $F3487 ; } mCurrentTrans = mTransGen . generateNextTransition ( mDrawableRect , mViewportRect ) ; mElapsedTime = NUM00 ; $F3224 ( mLastFrameTime , System ) fireTransitionStart ( mCurrentTrans ) ; }
protected void rotateOrthogonal $F72 { active . setRotation ( active . getRotation ( ) + NUM00 , this ) ; error . setRotation ( error . getRotation ( ) + NUM00 , this ) ; displayState ( ) ; repaint ( ) ; }
private String convertToElementName ( String attributeName ) $F11447 ( attributeName )
private boolean hasOtherMapAndReduceParentNode ( Lop tmpNode , $F180243 nodeList , Lop node ) { if ( tmpNode . getExecLocation ( ) == ExecLocation . MapAndReduce ) return _BOOL ; for ( Lop n : tmpNode . getOutputs ( ) ) { if ( nodeList . contains ( n ) && isChild ( n , node , IDMap ) ) { if ( ! n . equals ( node ) && n . getExecLocation ( ) == ExecLocation . MapAndReduce ) return _BOOL ; else return hasOtherMapAndReduceParentNode ( n , nodeList , node ) ; } } return _BOOL ; }
public synchronized void add ( double value ) { add ( $F37513 ( mCategories ) , value ) ; }
$F5466 String findLongestNamePrefix ( Node name , $F2689 namespaces ) { if ( namespaces . contains ( name . getQualifiedName ( ) ) ) { return name . getQualifiedName ( ) ; } else if ( name . isGetProp ( ) ) { return findLongestNamePrefix ( name . getFirstChild ( ) , namespaces ) ; } $F1274 }
public static LogWriter createLogWriter ( final Properties properties ) { Properties nonDefault = properties ; if ( nonDefault == null ) { $F65625 ( nonDefault ) } DistributedTestUtils . addHydraProperties ( nonDefault ) ; DistributionConfig dc = new DistributionConfigImpl ( nonDefault ) ; LogWriter logger = LogWriterFactory . createLogWriterLogger ( _BOOL , _BOOL , dc , _BOOL ) ; nonDefault . put ( DistributionConfig . LOG_WRITER_NAME , logger ) ; return logger ; }
public int session $F72 $F22645 ( Integer , fields )
public ReflectiveProperty ( $F20474 propertyHolder , $F197000 valueType , String name ) { super ( valueType , name ) ; $F226746 ( firstLetter , Character , name ) $F28924 ( theRest , name ) String capitalizedName = firstLetter + theRest ; String getterName = PREFIX_GET + capitalizedName ; try $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e ) { try $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e2 ) { getterName = PREFIX_IS + capitalizedName ; try $F226752 ( mGetter , propertyHolder , getterName ) catch ( NoSuchMethodException e3 ) { try $F226756 ( mGetter , propertyHolder , getterName , _BOOL ) catch ( NoSuchMethodException e4 ) { try { mField = propertyHolder . getField ( name ) ; $F42606 ( fieldType , mField ) $F226761 ( typesMatch , valueType , fieldType ) $F665 } catch ( NoSuchFieldException e5 ) { throw new NoSuchPropertyException ( NUM00 + NUM00 + name ) ; } } } } } Class getterType = mGetter . getReturnType ( ) ; $F226761 ( typesMatch , valueType , getterType ) String setterName = PREFIX_SET + capitalizedName ; try { mSetter = propertyHolder . getDeclaredMethod ( setterName , getterType ) ; mSetter . setAccessible ( _BOOL ) ; } $F110500 }
private void writePhotoOverlay ( String name , String category , String description , String styleName , Location location , String photoUrl , float heading ) { if ( location != null ) { $F8438 ( printWriter ) printWriter . println ( NUM00 + StringUtils . formatCData ( name ) + NUM00 ) ; printWriter . println ( NUM00 + StringUtils . formatCData ( description ) + NUM00 ) ; $F21384 ( printWriter ) printWriter . print ( NUM00 + location . getLongitude ( ) + NUM00 ) ; printWriter . print ( NUM00 + location . getLatitude ( ) + NUM00 ) ; $F21384 ( printWriter ) $F147974 ( printWriter , heading ) $F21384 ( printWriter ) $F8438 ( printWriter ) printWriter . println ( NUM00 + StringUtils . formatDateTimeIso8601 ( location . getTime ( ) ) + NUM00 ) ; $F24499 ( printWriter , styleName ) writeCategory ( category ) ; if ( playTrack ) { printWriter . println ( NUM00 + Uri . decode ( photoUrl ) + NUM00 ) ; } else { $F23375 ( uri , Uri , photoUrl ) printWriter . println ( NUM00 + KmzTrackExporter . KMZ_IMAGES_DIR + File . separatorChar + uri . getLastPathSegment ( ) + NUM00 ) ; } $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F21384 ( printWriter ) $F8438 ( printWriter ) $F8438 ( printWriter ) printWriter . println ( NUM00 + getCoordinates ( location , NUM00 ) + NUM00 ) ; $F8438 ( printWriter ) $F8438 ( printWriter ) } }
public boolean onBackPressed $F72 { if ( doesDrawerExist ( ) ) { if ( mDrawer . isDrawerVisible ( Gravity . START ) ) { mDrawer . closeDrawer ( Gravity . START ) ; return _BOOL ; } } if ( mContentView . onBackPressed ( ) ) return _BOOL ; if $F84882 ( mStateStack ) { $F34454 ( mStateStack ) if $F84882 ( mStateStack ) { setState ( mStateStack . pop ( ) ) ; return _BOOL ; } } return _BOOL ; }
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_latestUserDefinedLoader , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_allocateNewObject , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_io_ObjectInputStream_allocateNewArray , method , thisVar , returnVar , params ) else $F5501 ( defaultMethod , method , thisVar , returnVar , params ) }
public NodeSetDTM ( NodeIterator iterator , XPathContext xctxt ) { super ( ) ; Node node ; m_manager = xctxt . getDTMManager ( ) ; while ( null != $F161934 ( node , iterator ) ) { int handle = xctxt . getDTMHandleFromNode ( node ) ; addNodeInDocOrder ( handle , xctxt ) ; } }
public ShardIterator onlyNodeSelectorActiveInitializingShardsIt ( String nodeAttribute , DiscoveryNodes discoveryNodes ) { ArrayList $F411430 ordered = new $F201 $F256270 ( activeShards , allInitializingShards ) ; $F2689 selectedNodes = Sets . newHashSet ( discoveryNodes . resolveNodesIds ( nodeAttribute ) ) ; for ( ShardRouting shardRouting : activeShards ) { if ( selectedNodes . contains ( shardRouting . currentNodeId ( ) ) ) $F207 ( ordered , shardRouting ) } for ( ShardRouting shardRouting : allInitializingShards ) { if ( selectedNodes . contains ( shardRouting . currentNodeId ( ) ) ) $F207 ( ordered , shardRouting ) } if $F2979 ( ordered ) $F29526 ( nodeAttribute ) return new PlainShardIterator ( shardId , ordered ) ; }
private void checkChanges $F72 { settings . clearMovieNfoFilenames ( ) ; if $F31483 ( cbMovieNfoFilename1 ) { settings . addMovieNfoFilename ( MovieNfoNaming . FILENAME_NFO ) ; } if $F31483 ( cbMovieNfoFilename2 ) { settings . addMovieNfoFilename ( MovieNfoNaming . MOVIE_NFO ) ; } if $F31483 ( cbMovieNfoFilename3 ) { settings . addMovieNfoFilename ( MovieNfoNaming . DISC_NFO ) ; } CertificationStyleWrapper wrapper = ( CertificationStyleWrapper ) cbCertificationStyle . getSelectedItem ( ) ; if ( wrapper != null && settings . getMovieCertificationStyle ( ) != wrapper . style ) { settings . setMovieCertificationStyle ( wrapper . style ) ; } }
XMenuItemPeer [ ] copyItems $F72 { synchronized ( getMenuTreeLock ( ) ) { return ( XMenuItemPeer [ ] ) items . toArray ( new XMenuItemPeer $F10277 ) ; } }
public byte receiveOneByte $F72 { $F13527 ( Log , TAG ) try { acquireLock ( ) ; mServerSocket . receive ( mReceivePacket ) ; Log . d ( TAG , NUM00 + ( NUM00 + $F94795 ( mReceivePacket ) ) ) ; return $F94795 ( mReceivePacket ) ; } $F12241 ( e ) return Byte . MIN_VALUE ; }
public static void connectionClosed $F72 { numConnections . getAndDecrement ( ) ; }
public static String buildChatSDP ( String ipAddress , int localPort , String protocol , String acceptTypes , String wrapperTypes , String setup , String path , String direction ) { return buildSDP ( ipAddress , localPort , protocol , acceptTypes , wrapperTypes , null , null , null , setup , path , direction , null , NUM00 ) ; }
$F2027 determineDimensions ( int sourceCodeWords , int errorCorrectionCodeWords ) throws WriterException { float ratio = NUM00 ; $F10498 ( dimension ) for ( int cols = minCols ; cols <= maxCols ; cols ++ ) { int rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , cols ) ; if ( rows < minRows ) $F5153 $F10500 ( rows , maxRows ) float newRatio = ( ( NUM00 * cols + NUM00 ) * DEFAULT_MODULE_WIDTH ) / ( rows * HEIGHT ) ; if ( dimension != null && Math . abs ( newRatio - PREFERRED_RATIO ) > Math . abs ( ratio - PREFERRED_RATIO ) ) $F1448 ratio = newRatio ; dimension = $F10511 ( cols , rows ) ; } if ( dimension == null ) { int rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , minCols ) ; if ( rows < minRows ) { dimension = $F10511 ( minCols , minRows ) ; } } if ( dimension == null ) { throw new WriterException $F580 ; } return dimension ; }
private static void s_ucumm ( SparseBlock a , $F1986 agg , $F1986 c , int m , int n , int rl , int ru ) { $F1986 cprod = ( agg != null ) ? agg : new double [ n ] ; if ( agg == null ) $F9952 ( Arrays , cprod ) $F4120 ( cnt , n ) for ( $F305651 ( i , rl , ix , n , ru ) ) { if $F20899 ( a , i ) { int apos = a . pos ( i ) ; $F64142 ( alen , a , i ) $F2027 aix = a . indexes ( i ) ; $F1986 avals = a . values ( i ) ; productAgg ( avals , cprod , aix , apos , NUM00 , alen ) ; countAgg ( avals , cnt , aix , apos , alen ) ; } for ( $F119 ( j , n ) ) if ( cnt [ j ] < i + NUM00 ) cprod [ j ] *= NUM00 ; $F6483 ( System , cprod , c , ix , n ) } }
public static DataDisplayTable listFontMetrics ( Font font ) { $F64831 ( header ) $F218688 displayAlignment = { Align . Left , Align . Left } ; $F218697 ( table , Arrays , header ) $F218699 ( table , Arrays , displayAlignment ) FontHeaderTable headTable = ( FontHeaderTable ) FontUtils . getTable ( font , Tag . head ) ; HorizontalHeaderTable hheaTable = ( HorizontalHeaderTable ) FontUtils . getTable ( font , Tag . hhea ) ; OS2Table os2Table = ( OS2Table ) FontUtils . getTable ( font , Tag . OS_2 ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , headTable . unitsPerEm ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , headTable . xMin ( ) , headTable . xMax ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , headTable . yMin ( ) , headTable . yMax ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , headTable . lowestRecPPEM ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , hheaTable . ascender ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , hheaTable . descender ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , hheaTable . lineGap ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , os2Table . usWinAscent ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , os2Table . usWinDescent ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , os2Table . sTypoAscender ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , os2Table . sTypoDescender ( ) ) } ) ) ; table . add ( Arrays . asList ( new String [ ] { NUM00 , String . format ( NUM00 , os2Table . sTypoLineGap ( ) ) } ) ) ; return table ; }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F77737 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public static ShoppingCartItem makeItem ( Integer cartLocation , String itemType , String itemDescription , String productCategoryId , BigDecimal basePrice , BigDecimal selectedAmount , BigDecimal quantity , $F2100 ( attributes ) , String prodCatalogId , ShoppingCart . ShoppingCartItemGroup itemGroup , LocalDispatcher dispatcher , ShoppingCart cart , Boolean triggerExternalOpsBool ) throws CartItemModifyException { $F6257 ( delegator , cart ) ShoppingCartItem newItem = new ShoppingCartItem ( delegator , itemType , itemDescription , productCategoryId , basePrice , attributes , prodCatalogId , cart . getLocale ( ) , itemGroup ) ; if ( cartLocation == null ) { cart . addItemToEnd ( newItem ) ; } else { cart . addItem ( cartLocation . intValue ( ) , newItem ) ; } boolean triggerExternalOps = triggerExternalOpsBool == null ? _BOOL : triggerExternalOpsBool . booleanValue ( ) ; try { newItem . setQuantity ( quantity , dispatcher , cart , triggerExternalOps ) ; } catch ( CartItemModifyException e ) { cart . removeEmptyCartItems ( ) ; throw e ; } if ( selectedAmount != null ) { newItem . setSelectedAmount ( selectedAmount ) ; } return newItem ; }
private native synchronized static void hookMethodNative ( Member method , $F6969 declaringClass , int slot , Object additionalInfo ) ;
final void runWorker ( Worker w ) { Runnable task = w . firstTask ; w . firstTask = null ; boolean completedAbruptly = _BOOL ; try { while ( task != null || ( task = getTask ( ) ) != null ) { $F8934 ( w ) clearInterruptsForTaskRun ( ) ; try { beforeExecute ( w . thread , task ) ; Throwable thrown = null ; try $F21688 ( task ) catch ( RuntimeException x ) $F234985 ( thrown , x ) catch ( Error x ) $F234985 ( thrown , x ) catch ( Throwable x ) { thrown = x ; throw new Error ( x ) ; } $F168670 ( afterExecute , task , thrown ) } finally { task = null ; w . completedTasks ++ ; $F704 ( w ) } } completedAbruptly = _BOOL ; } $F168670 ( processWorkerExit , w , completedAbruptly ) }
private static ClusterProperties fromProperties ( Properties props ) { ClusterProperties prop = new ClusterProperties $F72 ; prop . clusterName = getStringProperty ( IGNITE_CLUSTER_NAME , props , DEFAULT_CLUSTER_NAME ) ; prop . cpuPerNode = getDoubleProperty ( IGNITE_RUN_CPU_PER_NODE , props , DEFAULT_CPU_PER_NODE ) ; prop . memPerNode = getDoubleProperty ( IGNITE_MEMORY_PER_NODE , props , DEFAULT_MEM_PER_NODE ) ; prop . memOverHeadPerNode = getDoubleProperty ( IGNITE_MEMORY_OVERHEAD_PER_NODE , props , Math . max ( NUM00 * prop . memPerNode , DEFAULT_MINIMUM_MEM_OVERHEAD_PER_NODE ) ) ; prop . nodeCnt = getDoubleProperty ( IGNITE_NODE_COUNT , props , DEFAULT_IGNITE_NODE_COUNT ) ; prop . igniteUrl = getStringProperty ( IGNITE_URL , props , null ) ; prop . ignitePath = getStringProperty ( IGNITE_PATH , props , null ) ; prop . licencePath = getStringProperty ( LICENCE_PATH , props , null ) ; prop . jvmOpts = getStringProperty ( IGNITE_JVM_OPTS , props , null ) ; prop . igniteWorkDir = getStringProperty ( IGNITE_WORKING_DIR , props , DEFAULT_IGNITE_WORK_DIR ) ; prop . igniteLocalWorkDir = getStringProperty ( IGNITE_LOCAL_WORK_DIR , props , DEFAULT_IGNITE_LOCAL_WORK_DIR ) ; prop . igniteReleasesDir = getStringProperty ( IGNITE_RELEASES_DIR , props , DEFAULT_IGNITE_RELEASES_DIR ) ; prop . igniteCfg = getStringProperty ( IGNITE_CONFIG_XML , props , null ) ; prop . userLibs = getStringProperty ( IGNITE_USERS_LIBS , props , null ) ; String pattern = getStringProperty ( IGNITE_HOSTNAME_CONSTRAINT , props , null ) ; if ( pattern != null ) { try { prop . hostnameConstraint = Pattern . compile ( pattern ) ; } catch ( PatternSyntaxException e ) { log . log ( Level . WARNING , NUM00 , e ) ; } } return prop ; }
public static String generateNativeGuid ( StorageSystem device ) { return String . format ( NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) ) ; }
public CacheMetricsSnapshot ( CacheMetrics loc , Collection < CacheMetrics > metrics ) { cacheName = loc . name ( ) ; $F54171 ( isEmpty , loc ) $F54171 ( isWriteBehindEnabled , loc ) writeBehindFlushSize = loc . getWriteBehindFlushSize ( ) ; writeBehindFlushThreadCnt = loc . getWriteBehindFlushThreadCount ( ) ; writeBehindFlushFreq = loc . getWriteBehindFlushFrequency ( ) ; writeBehindStoreBatchSize = loc . getWriteBehindStoreBatchSize ( ) ; writeBehindBufSize = loc . getWriteBehindBufferSize ( ) ; size = loc . getSize ( ) ; keySize = loc . getKeySize ( ) ; keyType = loc . getKeyType ( ) ; valType = loc . getValueType ( ) ; isStoreByVal = loc . isStoreByValue ( ) ; $F54171 ( isStatisticsEnabled , loc ) $F54171 ( isManagementEnabled , loc ) $F54171 ( isReadThrough , loc ) $F54171 ( isWriteThrough , loc ) offHeapMaxSize = loc . getOffHeapMaxSize ( ) ; for ( CacheMetrics e : metrics ) { reads += e . getCacheGets ( ) ; puts += e . getCachePuts ( ) ; hits += e . getCacheHits ( ) ; misses += e . getCacheMisses ( ) ; txCommits += e . getCacheTxCommits ( ) ; txRollbacks += e . getCacheTxRollbacks ( ) ; evicts += e . getCacheEvictions ( ) ; removes += e . getCacheRemovals ( ) ; putAvgTimeNanos += e . getAveragePutTime ( ) ; getAvgTimeNanos += e . getAverageGetTime ( ) ; rmvAvgTimeNanos += e . getAverageRemoveTime ( ) ; commitAvgTimeNanos += e . getAverageTxCommitTime ( ) ; rollbackAvgTimeNanos += e . getAverageTxRollbackTime ( ) ; if ( e . getOverflowSize ( ) > - NUM00 ) overflowSize += e . getOverflowSize ( ) ; else overflowSize = - NUM00 ; offHeapGets += e . getOffHeapGets ( ) ; offHeapPuts += e . getOffHeapPuts ( ) ; offHeapRemoves += e . getOffHeapRemovals ( ) ; offHeapEvicts += e . getOffHeapEvictions ( ) ; offHeapHits += e . getOffHeapHits ( ) ; offHeapMisses += e . getOffHeapMisses ( ) ; offHeapEntriesCnt += e . getOffHeapEntriesCount ( ) ; offHeapPrimaryEntriesCnt += e . getOffHeapPrimaryEntriesCount ( ) ; offHeapBackupEntriesCnt += e . getOffHeapBackupEntriesCount ( ) ; offHeapAllocatedSize += e . getOffHeapAllocatedSize ( ) ; swapGets += e . getSwapGets ( ) ; swapPuts += e . getSwapPuts ( ) ; swapRemoves += e . getSwapRemovals ( ) ; swapHits += e . getSwapHits ( ) ; swapMisses += e . getSwapMisses ( ) ; swapEntriesCnt += e . getSwapEntriesCount ( ) ; swapSize += e . getSwapSize ( ) ; if ( e . getDhtEvictQueueCurrentSize ( ) > - NUM00 ) dhtEvictQueueCurrSize += e . getDhtEvictQueueCurrentSize ( ) ; else dhtEvictQueueCurrSize = - NUM00 ; txThreadMapSize += e . getTxThreadMapSize ( ) ; txXidMapSize += e . getTxXidMapSize ( ) ; txCommitQueueSize += e . getTxCommitQueueSize ( ) ; txPrepareQueueSize += e . getTxPrepareQueueSize ( ) ; txStartVerCountsSize += e . getTxStartVersionCountsSize ( ) ; txCommittedVersionsSize += e . getTxCommittedVersionsSize ( ) ; txRolledbackVersionsSize += e . getTxRolledbackVersionsSize ( ) ; if ( e . getTxDhtThreadMapSize ( ) > - NUM00 ) txDhtThreadMapSize += e . getTxDhtThreadMapSize ( ) ; else txDhtThreadMapSize = - NUM00 ; if ( e . getTxDhtXidMapSize ( ) > - NUM00 ) txDhtXidMapSize += e . getTxDhtXidMapSize ( ) ; else txDhtXidMapSize = - NUM00 ; if ( e . getTxDhtCommitQueueSize ( ) > - NUM00 ) txDhtCommitQueueSize += e . getTxDhtCommitQueueSize ( ) ; else txDhtCommitQueueSize = - NUM00 ; if ( e . getTxDhtPrepareQueueSize ( ) > - NUM00 ) txDhtPrepareQueueSize += e . getTxDhtPrepareQueueSize ( ) ; else txDhtPrepareQueueSize = - NUM00 ; if ( e . getTxDhtStartVersionCountsSize ( ) > - NUM00 ) txDhtStartVerCountsSize += e . getTxDhtStartVersionCountsSize ( ) ; else txDhtStartVerCountsSize = - NUM00 ; if ( e . getTxDhtCommittedVersionsSize ( ) > - NUM00 ) txDhtCommittedVersionsSize += e . getTxDhtCommittedVersionsSize ( ) ; else txDhtCommittedVersionsSize = - NUM00 ; if ( e . getTxDhtRolledbackVersionsSize ( ) > - NUM00 ) txDhtRolledbackVersionsSize += e . getTxDhtRolledbackVersionsSize ( ) ; else txDhtRolledbackVersionsSize = - NUM00 ; if ( e . getWriteBehindTotalCriticalOverflowCount ( ) > - NUM00 ) writeBehindTotalCriticalOverflowCnt += e . getWriteBehindTotalCriticalOverflowCount ( ) ; else writeBehindTotalCriticalOverflowCnt = - NUM00 ; if ( e . getWriteBehindCriticalOverflowCount ( ) > - NUM00 ) writeBehindCriticalOverflowCnt += e . getWriteBehindCriticalOverflowCount ( ) ; else writeBehindCriticalOverflowCnt = - NUM00 ; if ( e . getWriteBehindErrorRetryCount ( ) > - NUM00 ) writeBehindErrorRetryCnt += e . getWriteBehindErrorRetryCount ( ) ; else writeBehindErrorRetryCnt = - NUM00 ; } $F115 ( size , metrics ) if ( size > NUM00 ) { putAvgTimeNanos /= size ; getAvgTimeNanos /= size ; rmvAvgTimeNanos /= size ; commitAvgTimeNanos /= size ; rollbackAvgTimeNanos /= size ; } }
$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System )
public void step3 ( $F2540 ( fileNameToPackageName ) , Map < String , List < FunDef > > fileNameToFunctions ) throws SyntaxException { for ( STypeDef sTypeDef : typeDefSet ) { if ( sTypeDef instanceof SClassDef ) { List < STypeDef > $F204 ( circularRecorder ) ; SClassDef parent = ( ( SClassDef ) sTypeDef ) . parent ( ) ; while ( parent != null ) { circularRecorder . add ( parent ) ; if $F1238 ( parent , sTypeDef ) { err . SyntaxException ( NUM00 + circularRecorder , LineCol . SYNTHETIC ) ; $F665 } parent = parent . parent ( ) ; } $F725 ( circularRecorder ) } else if ( sTypeDef instanceof SInterfaceDef ) { SInterfaceDef i = ( SInterfaceDef ) sTypeDef ; checkInterfaceCircularInheritance ( i , i . superInterfaces ( ) , $F203 ) ; } else { throw new LtBug $F93485 ( sTypeDef ) ; } } for ( STypeDef sTypeDef : typeDefSet ) { checkOverrideAllMethods ( sTypeDef ) ; } for ( $F3465 ( fileName , mapOfStatements ) ) { List < Import > imports = fileNameToImport . get ( fileName ) ; $F1729 ( pkg , fileNameToPackageName , fileName ) List < FunDef > functionDefs = fileNameToFunctions . get ( fileName ) ; for ( FunDef fun : functionDefs ) { STypeDef type = getTypeWithAccess ( fun . superType , imports ) ; if ( ! ( type instanceof SClassDef || type instanceof SInterfaceDef ) ) { err . SyntaxException ( NUM00 , fun . superType . line_col ( ) ) ; $F665 } SConstructorDef [ ] zeroParamConstructor = new SConstructorDef $F380 ; SMethodDef [ ] methodToOverride = new SMethodDef $F380 ; if ( ! getMethodForLambda ( type , zeroParamConstructor , methodToOverride ) ) { err . SyntaxException ( NUM00 , fun . superType . line_col ( ) ) ; $F665 } SClassDef sClassDef = ( SClassDef ) types . get ( pkg + fun . name ) ; parseAnnos ( fun . annos , sClassDef , imports , ElementType . TYPE , Arrays . asList ( ElementType . METHOD , ElementType . CONSTRUCTOR ) ) ; if ( zeroParamConstructor [ NUM00 ] == null ) { sClassDef . setParent ( getObject_Class ( ) ) ; assert type instanceof SInterfaceDef ; sClassDef . superInterfaces ( ) . add ( ( SInterfaceDef ) type ) ; } else { sClassDef . setParent ( ( SClassDef ) zeroParamConstructor [ NUM00 ] . declaringType ( ) ) ; } SConstructorDef cons = new SConstructorDef ( LineCol . SYNTHETIC ) ; parseAnnos ( fun . annos , cons , imports , ElementType . CONSTRUCTOR , Arrays . asList ( ElementType . TYPE , ElementType . METHOD ) ) ; cons . setDeclaringType ( sClassDef ) ; sClassDef . constructors ( ) . add ( cons ) ; if ( zeroParamConstructor [ NUM00 ] == null ) { zeroParamConstructor [ NUM00 ] = getObject_Class ( ) . constructors ( ) . get ( NUM00 ) ; } cons . statements ( ) . add ( new Ins . InvokeSpecial ( new Ins . This ( sClassDef ) , zeroParamConstructor [ NUM00 ] , LineCol . SYNTHETIC ) ) ; cons . modifiers ( ) . add ( SModifier . PUBLIC ) ; SMethodDef method = new SMethodDef ( LineCol . SYNTHETIC ) ; method . setDeclaringType ( sClassDef ) ; method . setReturnType ( getRealReturnType ( methodToOverride [ NUM00 ] . getReturnType ( ) , _BOOL ) ) ; method . setName ( methodToOverride [ NUM00 ] . name ( ) ) ; sClassDef . methods ( ) . add ( method ) ; parseAnnos ( fun . annos , method , imports , ElementType . METHOD , Arrays . asList ( ElementType . TYPE , ElementType . CONSTRUCTOR ) ) ; method . modifiers ( ) . add ( SModifier . PUBLIC ) ; parseParameters ( fun . params , fun . params . size ( ) , method , imports , _BOOL ) ; methodToStatements . put ( method , fun . statements ) ; checkOverrideAllMethods ( sClassDef ) ; } } for ( STypeDef typeDef : typeDefSet ) { for ( SAnno anno : typeDef . annos ( ) ) { if ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { final String msg = typeDef + NUM00 ; if ( typeDef instanceof SInterfaceDef ) { if ( ! getMethodForLambda ( typeDef , new SConstructorDef $F380 , new SMethodDef $F380 ) ) { err . SyntaxException ( msg , typeDef . line_col ( ) ) ; $F665 } } else { err . SyntaxException ( msg , typeDef . line_col ( ) ) ; $F665 } } else if ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { final String msg = typeDef + NUM00 ; if ( typeDef instanceof SClassDef ) { if ( ! getMethodForLambda ( typeDef , new SConstructorDef $F380 , new SMethodDef $F380 ) ) { err . SyntaxException ( msg , typeDef . line_col ( ) ) ; $F665 } } else { err . SyntaxException ( msg , typeDef . line_col ( ) ) ; $F665 } } } List < SMethodDef > methods ; if ( typeDef instanceof SClassDef ) methods = ( ( SClassDef ) typeDef ) . methods ( ) ; else methods = ( ( SInterfaceDef ) typeDef ) . methods ( ) ; for ( SMethodDef method : methods ) { for ( SAnno anno : method . annos ( ) ) { if ( anno . type ( ) . fullName ( ) . equals ( NUM00 ) ) { if ( method . overRide ( ) . isEmpty ( ) ) { err . SyntaxException ( method + NUM00 , method . line_col ( ) ) ; $F665 } } } } } for ( STypeDef typeDef : typeDefSet ) { if ( typeDef instanceof SClassDef ) { SClassDef cls = ( SClassDef ) typeDef ; if ( cls . isDataClass ( ) ) { fillMethodsIntoDataClass ( cls ) ; } } } }
$F27745 ( mUpdateListeners )
public Vector2 floor $F72 { x = ( float ) Math . floor ( x ) ; z = ( float ) Math . floor ( z ) ; return this ; }
public static Location createLocation ( final String rawJSON ) throws TwitterException $F27258 ( json , rawJSON , locationConstructor , e )
$F1 protected int calcAttackValue $F72 { int av = NUM00 ; if ( bDirect ) { av = Math . min ( av + ( toHit . getMoS ( ) / NUM00 ) , av * NUM00 ) ; } if ( bGlancing ) { av = $F71088 ( Math , av ) ; } av = ( int ) Math . floor ( getBracketingMultiplier ( ) * av ) ; return av ; }
public void test_writeImmutable $F72 { $F75329 ( store , getStore ) try { final int len = NUM00 ; $F4727 ( expected1 , len ) r . nextBytes ( expected1 ) ; $F17615 ( tmp , ByteBuffer , expected1 ) $F17617 ( addr1 , store , tmp ) $F59033 ( assertEquals , len , tmp ) $F37204 ( assertEquals , tmp ) $F37205 ( assertEquals , expected1 , store , addr1 ) final $F96 expected2 = expected1 . clone ( ) ; r . nextBytes ( expected1 ) ; $F37205 ( assertEquals , expected2 , store , addr1 ) } $F17625 ( store ) }
$F1 public String queryToRetrieveData $F72 { String parameterizedQuery ; if $F3578 ( query ) { parameterizedQuery = query . replace ( NUM00 , startRow + NUM00 ) ; } else { parameterizedQuery = query ; } return parameterizedQuery ; }
public String toString $F72 { String classname = Util . getUnqualifiedName ( getClass ( ) ) ; return ( ref == null ) ? classname : classname + NUM00 + ref . remoteToString ( ) + NUM00 ; }
private static void initialise $F72 { Hints hints = new Hints ( Hints . CRS , DefaultGeographicCRS . WGS84 ) ; PositionFactory positionFactory = GeometryFactoryFinder . getPositionFactory ( hints ) ; GeometryFactory geometryFactory = GeometryFactoryFinder . getGeometryFactory ( hints ) ; PrimitiveFactory primitiveFactory = GeometryFactoryFinder . getPrimitiveFactory ( hints ) ; AggregateFactory aggregateFactory = GeometryFactoryFinder . getAggregateFactory ( hints ) ; wktParser = new WKTParser ( geometryFactory , primitiveFactory , positionFactory , aggregateFactory ) ; wktTypeList . add ( new WKTType ( WKT_POINT , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( WKT_MULTIPOINT , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( WKT_LINE <missing ';'> NUM00 , $F190911 NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( NUM00 , _BOOL , NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( WKT_MULTILINE <missing ';'> NUM00 , $F190911 NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( WKT_POLYGON , _BOOL , - NUM00 , NUM00 , _BOOL ) ) ; wktTypeList . add ( new WKTType ( WKT_MULTIPOLYGON , _BOOL , - NUM00 , NUM00 , _BOOL , _BOOL ) ) ; for ( WKTType wkyType : wktTypeList ) $F64959 ( wktTypeMap , wkyType ) }
public Instances pruneToK ( Instances neighbours , $F1986 distances , int k ) { if ( neighbours == null || distances == null || neighbours . numInstances ( ) == NUM00 ) $F1337 $F17370 ( k ) int currentK = NUM00 ; double currentDist ; for ( $F208679 ( i , neighbours ) ) { currentK ++ ; currentDist = distances [ i ] ; if ( currentK > k && currentDist != distances [ i - NUM00 ] ) { currentK -- ; neighbours = new Instances ( neighbours , NUM00 , currentK ) ; $F597 } } return neighbours ; }
$F1 protected String doInBackground ( String ... f_url ) { int count ; InputStream input = null ; OutputStream output = null ; try { URL url = new URL ( f_url [ NUM00 ] ) ; $F5858 ( connection , url ) $F2410 ( connection ) $F7983 ( lengthOfFile , connection ) input = new BufferedInputStream ( url . openStream ( ) , NUM00 ) ; output = new FileOutputStream ( f_url [ NUM00 ] ) ; byte $F19196 = $F10314 ; long total = NUM00 ; while $F18067 ( count , input , data ) { total += count ; publishProgress ( Integer . toString ( ( int ) ( ( total * NUM00 ) / lengthOfFile ) ) ) ; $F11584 ( output , data , count ) } $F1206 ( output ) } catch ( Exception e ) { Log . e ( $F10629 ( e ) ) ; } finally { try $F1823 ( output ) catch ( Exception e ) { Log . e ( $F10629 ( e ) ) ; } try $F1823 ( input ) catch ( Exception e ) { Log . e ( $F10629 ( e ) ) ; } } $F1274 }
public void error ( String msg ) { print ( NUM00 + msg , out . err ) ; }
public static void loadArmV7aLibrary ( ApplicationLike applicationLike , String libName ) { if ( $F20402 ( libName , applicationLike ) ) { throw new TinkerRuntimeException $F580 ; } if ( TinkerApplicationHelper . isTinkerEnableForNativeLib ( applicationLike ) ) { if ( TinkerApplicationHelper . loadLibraryFromTinker ( applicationLike , NUM00 , libName ) ) $F932 } System . loadLibrary ( libName ) ; }
AtomicSequence ( final long initialValue ) { UPDATER . lazySet ( this , initialValue ) ; }
public void keyReleased ( KeyEvent e ) { if ( e . isShiftDown ( ) && e . getKeyCode ( ) == NEXT_THROTTLE_KEY ) $F5795 ( requestFocusForNextFrame ) else if ( e . isShiftDown ( ) && e . getKeyCode ( ) == PREV_THROTTLE_KEY ) $F5795 ( requestFocusForPreviousFrame ) }
protected static Long convertStringToBuckectingLong ( String stringToBeConverted ) { if $F3581 ( stringToBeConverted ) $F1337 $F39526 ( byteString , stringToBeConverted ) if $F8830 ( byteString ) { $F12496 ( newByteString ) for ( $F1139 ( i , newByteString ) ) { if ( i < byteString . length ) $F15086 ( newByteString , i , byteString ) else $F5629 ( newByteString , i ) } byteString = newByteString ; } $F23500 ( bb , ByteBuffer , byteString ) $F219374 ( byteMethod , bb ) $F15467 ( byteMethod , Math ) return byteMethod ; }
$F1 public void closeInvoked $F72 $F845
private void pendingEvent ( EventReg reg , ServiceID sid , Item item , int transition , boolean copyItem ) { if ( item != null && copyItem ) item = copyItem ( item ) ; newNotifies . add ( new EventTask ( reg , sid , item , transition ) ) ; }
public static void writeln $F13180 ( fileName , objects ) { if ( writer == null ) { createWriter ( fileName ) ; for ( Object obj : objects ) $F94311 ( writeln , obj ) closeWriter ( ) ; } }
protected double regressionPrediction ( Instance transformedInstance , $F8748 selectedAttributes , $F1986 coefficients ) throws Exception { double result = NUM00 ; int column = NUM00 ; for ( $F180066 ( j , transformedInstance ) ) { if ( ( m_ClassIndex != j ) && ( selectedAttributes [ j ] ) ) { result += coefficients [ column ] * transformedInstance . value ( j ) ; column ++ ; } } result += coefficients [ column ] ; return result ; }
public QLFDocument ( List $F355799 list , String docno , $F2540 ( extraProps ) ) { featureList = new MemoryLocalFeatureList $F355799 ( list ) ; $F54171 ( iterator , list ) if ( extraProps != null ) props . putAll ( extraProps ) ; $F545 ( props , docno ) }
$F1 protected TemplateModel invokeGenericGet ( Map keyMap , Class clazz , String key ) throws TemplateModelException { Map map = ( Map ) object ; $F16628 ( val , map , key ) if ( val == null ) { if $F1277 ( key ) { Character charKey = Character . valueOf ( key . charAt ( NUM00 ) ) ; val = map . get ( charKey ) ; if ( val == null && ! ( map . containsKey ( key ) || map . containsKey ( charKey ) ) ) { return UNKNOWN ; } } else if $F15257 ( map , key ) { return UNKNOWN ; } } return wrap ( val ) ; }
public $F96 toZOrderByteArray ( final BigInteger bigInt ) { final int numDimensions = datatypeConfig . getNumDimensions ( ) ; $F40695 ( bigIntAsByteArr , bigInt ) final int paddedArraySize = numDimensions * BASE_SIZE + NUM00 ; $F4727 ( bigIntAsByteArrPad , paddedArraySize ) int idx = NUM00 ; for ( int i = NUM00 ; i < paddedArraySize - bigIntAsByteArr . length ; i ++ ) { bigIntAsByteArrPad [ idx ++ ] = NUM00 ; } for ( $F1139 ( i , bigIntAsByteArr ) ) $F49219 ( bigIntAsByteArrPad , idx , bigIntAsByteArr , i ) $F172325 ( bigIntAsByteArrUnsigned , unpadLeadingZero , bigIntAsByteArrPad ) return bigIntAsByteArrUnsigned ; }
public void clearLogcat ( $F1113 IDevice device , $F1113 Project project ) { synchronized ( myLock ) { ExecutorService executor = myExecutors . get ( device ) ; if ( executor != null ) { stopReceiving ( device ) ; executor . submit ( null ) ; startReceiving ( device ) ; } } }
public void expand ( int level ) { $F17427 output = new $F17427 $F72 ; long levelLsb = S2CellId . lowestOnBitForLevel ( level ) ; $F13124 ( i , size ) do { S2CellId id = cellId ( i ) ; if ( id . lowestOnBit ( ) < levelLsb ) { id = id . parent ( level ) ; while ( i > NUM00 && id . contains ( cellId ( i - NUM00 ) ) ) { -- i ; } } output . add ( id ) ; id . getAllNeighbors ( level , output ) ; } while ( -- i >= NUM00 ) ; initSwap ( output ) ; }
private StringSet discoverVolumeSnaps ( StorageSystem system , List < Snap > snaps , String parentGUID , StringSet parentMatchedVPools , VNXeApiClient apiClient , DbClient dbClient , Map < String , List $F172366 > hostVolumesMap , VNXeLun lun , boolean isSnapInCG , String cgName ) throws Exception { $F69100 ( snapsets ) for ( Snap snapDetail : snaps ) { UnManagedVolume unManagedVolume = null ; String managedSnapNativeGuid = NativeGUIDGenerator . generateNativeGuidForVolumeOrBlockSnapShot ( system . getNativeGuid ( ) , snapDetail . getId ( ) ) ; BlockSnapshot viprSnap = DiscoveryUtils . checkBlockSnapshotExistsInDB ( dbClient , managedSnapNativeGuid ) ; if ( null != viprSnap ) { $F10635 ( log , managedSnapNativeGuid ) snapsets . add ( managedSnapNativeGuid ) ; $F598 } String unManagedVolumeNatvieGuid = NativeGUIDGenerator . generateNativeGuidForPreExistingVolume ( system . getNativeGuid ( ) , snapDetail . getId ( ) ) ; unManagedVolume = DiscoveryUtils . checkUnManagedVolumeExistsInDB ( dbClient , unManagedVolumeNatvieGuid ) ; unManagedVolume = createUnManagedVolumeForSnap ( unManagedVolume , unManagedVolumeNatvieGuid , lun , system , dbClient , hostVolumesMap , snapDetail ) ; populateSnapInfo ( unManagedVolume , snapDetail , parentGUID , parentMatchedVPools ) ; snapsets . add ( unManagedVolumeNatvieGuid ) ; $F42096 ( unManagedVolumesReturnedFromProvider , unManagedVolume ) if ( isSnapInCG ) { addObjectToUnManagedConsistencyGroup ( apiClient , unManagedVolume , cgName , system , dbClient ) ; } } return snapsets ; }
public void receive ( final CallEvent event ) { if $F45040 ( event ) { if $F2200 ( mEvents , event ) { $F6965 ( mEvents , event ) fireTableRowsInserted ( NUM00 , NUM00 ) ; prune ( ) ; } else { $F12747 ( row , mEvents , event ) fireTableRowsUpdated ( row , row ) ; } } else { if $F105 ( mEvents , event ) { $F12747 ( row , mEvents , event ) mEvents . remove ( event ) ; fireTableRowsDeleted ( row , row ) ; } } }
public Pet findOne ( String id ) { $F7028 ( log , id ) Pet pet = petRepository . findOne ( UUID . fromString ( id ) ) ; return pet ; }
public final $F40512 ( mActiveIssues )
public static void awaitDataReady $F72 { synchronized ( mDbHelperLock ) { if ( mDbHelper == null ) { try $F28646 ( mDbHelperLock ) $F3101 ( e ) } } }
protected AbstractIoSession ( IoService service ) { this . service = service ; this . handler = service . getHandler ( ) ; $F657 ( currentTime , System ) creationTime = currentTime ; lastThroughputCalculationTime = currentTime ; lastReadTime = currentTime ; lastWriteTime = currentTime ; lastIdleTimeForBoth = currentTime ; lastIdleTimeForRead = currentTime ; lastIdleTimeForWrite = currentTime ; closeFuture . addListener ( SCHEDULED_COUNTER_RESETTER ) ; sessionId = idGenerator . incrementAndGet ( ) ; }
private String processFloatToken ( String token ) { String result = token . replaceAll ( groupSeparator , NUM00 ) ; if $F1264 ( decimalSeparator ) $F107746 ( result , decimalSeparator ) boolean isNegative = _BOOL ; $F1749 ( preLen , negativePrefix ) if ( ( preLen > NUM00 ) && result . startsWith ( negativePrefix ) ) { isNegative = _BOOL ; $F11978 ( result , preLen ) } $F1749 ( sufLen , negativeSuffix ) if ( ( sufLen > NUM00 ) && result . endsWith ( negativeSuffix ) ) { isNegative = _BOOL ; result = result . substring ( result . length ( ) - sufLen , result . length ( ) ) ; } if $F1238 ( result , nanString ) result = NUM00 ; if $F1238 ( result , infinityString ) result = NUM00 ; if ( isNegative ) result = NUM00 + result ; $F1150 ( m , NON_ASCII_DIGIT , result ) if $F281 ( m ) { $F83 ( inASCII ) for ( $F1088 ( i , result ) ) { $F1280 ( nextChar , result , i ) if $F119844 ( Character , nextChar ) { int d = Character . digit ( nextChar , NUM00 ) ; if ( d != - NUM00 ) inASCII . append ( d ) ; else inASCII . append ( nextChar ) ; } else $F288 ( inASCII , nextChar ) } $F6947 ( result , inASCII ) } return result ; }
InternalWindow ( String title ) { $F9898 ( setLayout ) titleBar = new TitleBar $F72 ; add ( titleBar , BorderLayout . NORTH ) ; titleBar . setLayout ( new SBoxLayout ( SBoxLayout . HORIZONTAL , TITLEBAR_PADDING ) ) ; $F171121 ( titleLabel ) setTitle ( title ) ; $F167982 ( titleLabel ) titleBar . add ( titleLabel ) ; SBoxLayout . addSpring ( titleBar ) ; $F498117 ( minimizeButton , minimizeIcon ) minimizeButton . setMargin ( $F32450 ) ; minimizeButton . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; minimizeButton . setFocusable ( _BOOL ) ; minimizeButton . addActionListener ( new MinimizeListener $F72 ) ; titleBar . add ( minimizeButton ) ; $F498117 ( closeButton , closeIcon ) closeButton . setMargin ( $F32450 ) ; closeButton . setBorder ( BorderFactory . createEmptyBorder ( ) ) ; closeButton . setFocusable ( _BOOL ) ; closeButton . addActionListener ( new CloseActionListener $F72 ) ; titleBar . add ( closeButton ) ; cache = new ComponentPaintCache ( this ) ; }
$F1431 public static $F529 loadStream ( InputStream inputStream ) { $F22806 ( LOG ) Yaml yaml = new Yaml $F72 ; $F276224 propsYaml = ( $F276224 ) yaml . load ( inputStream ) ; $F22806 ( LOG ) $F20530 ( typedMap ) for ( $F85 ( key , propsYaml ) ) { typedMap . put ( key . toString ( ) , propsYaml . get ( key ) ) ; } return typedMap ; }
$F806 split ( final String stringToSplit ) { if $F16093 ( StringUtils , stringToSplit ) { $F1749 ( strLenght , stringToSplit ) int splitNum = strLenght / chunkSize ; if ( strLenght % chunkSize > NUM00 ) { splitNum += NUM00 ; } $F12914 ( result , splitNum ) for ( $F119 ( i , splitNum ) ) { int startPos = i * chunkSize ; int endPos = startPos + chunkSize ; $F8789 ( endPos , strLenght ) result [ i ] = stringToSplit . substring ( startPos , endPos ) ; } return result ; } $F1274 }
public void logVelocityMessage ( int level , String message ) { synchronized ( this ) { $F3300 ( data ) data [ NUM00 ] = new Integer ( level ) ; data [ NUM00 ] = message ; pendingMessages . addElement ( data ) ; } }
public void testShiftRightNegNonZeroes $F72 { $F156136 int aSign = - NUM00 ; int number = NUM00 ; byte $F3018 = { - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F86501 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , result ) }
public void removeAllAddresses $F72 $F9096 ( addresses )
public static boolean isShowTooltips $F72 { return showTooltips ; }
$F32797 ( sourcePosition , referencePosition , srcAndRefPositions , referenceCount , a , System )
$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener )
public static $F9737 toBinaryString ( int i ) $F4915 ( intToBinaryString , i )
public static boolean isPropertyField ( String fieldName ) { return ! ID_FIELD_NAME . equals ( fieldName ) && ! URI_FIELD_NAME . equals ( fieldName ) && ! TEXT_FIELD_NAME . equals ( fieldName ) && ! CONTEXT_FIELD_NAME . equals ( fieldName ) && $F4434 ( fieldName ) ; }
public static void checkAccess ( int modifiers ) { if ( System . getSecurityManager ( ) != null && ! Modifier . isPublic ( modifiers ) ) $F182689 }
protected void printIndent ( StringBuilder ddl ) $F39640 ( ddl , getIndent )
public NType merge ( NType a , NType b ) throws MergeFailed { if ( a != null && b == null ) return a ; if ( a == null && b != null ) return b ; if ( a == null && b == null ) $F1274 if $F1238 ( a , b ) return a ; try { return Dispatcher . dispatch ( getClass ( ) , this , NUM00 , a , b ) ; } catch ( NoSuchMethodException e ) { throw new MergeFailed ( NUM00 , a , b ) ; } }
public static String format ( String s , String col ) { String s1 = ( s + padd ) ; return s1 . substring ( NUM00 , Math . min ( col . length ( ) , s1 . length ( ) ) ) ; }
protected static void loadEnd ( MLookupInfo info , HashMap lookup ) { if ( info . IsValidated && $F3816 ( lookup ) ) s_loadedLookups . put ( getKey ( info ) , lookup ) ; }
public static void info ( final String message ) $F17670 ( infoLogger , message )
private void rotateRight $F17573 ( root ) { $F17575 ( pivot , root ) $F17577 ( right , root ) $F17575 ( pivotLeft , pivot ) $F17579 ( pivotRight , pivot ) root . left = pivotRight ; $F17581 ( pivotRight , root ) replaceInParent ( root , pivot ) ; pivot . right = root ; root . parent = pivot ; $F17587 ( root , Math , right , pivotRight ) $F17592 ( pivot , Math , root , pivotLeft ) }
private void checkNoCharactersMissing ( int totalLength , $F40119 tokens ) { if ( $F1030 ( tokens ) && $F7661 ( tokens ) . right != totalLength ) { String error = String . format ( NUM00 , $F7661 ( tokens ) . right , totalLength ) ; $F5301 ( error ) } int start = NUM00 ; for ( $F2277 ( i , tokens ) ) { Token token = tokens . get ( i ) ; if ( token . left != start ) $F1666 ( start ) start = token . right ; } }
public boolean validateServiceAttributes ( String token , String validatorClass , Set values ) throws SMSException , SSOException , RemoteException { initialize ( ) ; $F21954 ( debug , validatorClass , values ) try { $F63290 ( clazz , Class , validatorClass ) ServiceAttributeValidator v = ( ServiceAttributeValidator ) clazz . newInstance ( ) ; return v . validate ( values ) ; } catch ( InstantiationException ex ) { throw new SMSException $F580 ; } catch ( IllegalAccessException ex ) { throw new SMSException $F580 ; } catch ( ClassNotFoundException ex ) { throw new SMSException $F580 ; } }
public synchronized void animatePanTo ( Point2D p , long duration ) { $F24099 ( pp ) m_itransform . transform ( p , pp ) ; animatePanToAbs ( pp , duration ) ; }
public static void assertEqualsWithRelativeErrorOrBothNaN $F21013 ( message , expected , actual ) { $F19899 ( expected , actual ) if ( Double . isNaN ( expected ) && ! Double . isNaN ( actual ) ) { throw new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; } if ( ! Double . isNaN ( expected ) && Double . isNaN ( actual ) ) { throw new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; } double relativeError ; if $F45017 ( Math , actual , expected ) { relativeError = Math . abs ( ( expected - actual ) / actual ) ; } else { relativeError = Math . abs ( ( expected - actual ) / expected ) ; } if ( relativeError > MAX_RELATIVE_ERROR ) { throw new AssertionFailedError ( message + NUM00 + expected + NUM00 + actual + NUM00 ) ; } }
protected void assertException ( final AbstractExceptionCase exceptionCase ) throws Throwable $F11707 ( assertException , exceptionCase )
$F1 public ServiceHost start $F72 throws Throwable { $F2346 ( super ) startDefaultCoreServicesSynchronously ( ) ; super . startService ( new RootNamespaceService $F72 ) ; super . startService ( new SampleServiceWithSharedCustomUi $F72 ) ; super . startService ( new SampleFactoryServiceWithCustomUi $F72 ) ; super . startFactory ( new SampleSimpleEchoService $F72 ) ; super . startFactory ( new SamplePreviousEchoService $F72 ) ; super . startFactory ( new ExampleService $F72 ) ; super . startFactory ( new ExampleTaskService $F72 ) ; super . startService ( new UiService $F72 ) ; startSwaggerDescriptorService ( ) ; return this ; }
$F1 public void endOfStream $F72 throws AdeException { for ( MsgData data : m_msgData . values ( ) ) { if ( data . m_totalLogCounts > NUM00 ) { data . m_lambda = data . m_totalLogCounts / data . m_intervalCount ; m_minLambda = Math . min ( data . m_lambda , m_minLambda ) ; if ( locateMismatchingDistributions ( data ) ) { data . m_badFit = _BOOL ; } } } m_trained = _BOOL ; }
static BinaryTree $F2305 buildComplete ( int n ) { BinaryTree $F2305 bt = new BinaryTree $F2305 $F72 ; int b = ( int ) $F89003 ( Math , n ) ; for ( $F119 ( i , n ) ) { bt . insert ( b ) ; for ( int j = NUM00 ; j <= Math . pow ( NUM00 , i ) - NUM00 ; j ++ ) { bt . insert ( b + NUM00 * b * j ) ; } b = b / NUM00 ; } return bt ; }
public void erase $F72 { $F5475 ( bytes ) for ( ByteBuffer buffer : buffers ) { if ( bytes == null || bytes . length < buffer . limit ( ) ) bytes = new byte $F386298 ( buffer ) ; $F16709 ( buffer ) buffer . put ( bytes , NUM00 , buffer . limit ( ) ) ; $F16709 ( buffer ) } }
$F1 boolean resurrectSelection $F72 { $F3666 ( childCount , getChildCount ) $F18806 ( childCount , _BOOL ) int selectedTop = NUM00 ; int selectedPos ; int childrenTop = mListPadding . top ; int childrenBottom = getBottom ( ) - getTop ( ) - mListPadding . bottom ; final int firstPosition = mFirstPosition ; final int toPosition = mResurrectToPosition ; boolean down = _BOOL ; if ( toPosition >= firstPosition && toPosition < firstPosition + childCount ) { selectedPos = toPosition ; final View selected = getChildAt ( selectedPos - mFirstPosition ) ; selectedTop = selected . getTop ( ) ; int selectedBottom = selected . getBottom ( ) ; if ( selectedTop < childrenTop ) { selectedTop = childrenTop + getVerticalFadingEdgeLength ( ) ; } else if ( selectedBottom > childrenBottom ) { selectedTop = childrenBottom - selected . getMeasuredHeight ( ) - getVerticalFadingEdgeLength ( ) ; } } else { if ( toPosition < firstPosition ) { selectedPos = firstPosition ; for ( $F119 ( i , childCount ) ) { final View v = getChildAt ( i ) ; final int top = v . getTop ( ) ; if ( i == NUM00 ) { selectedTop = top ; if ( firstPosition > NUM00 || top < childrenTop ) { childrenTop += getVerticalFadingEdgeLength ( ) ; } } if ( top >= childrenTop ) { selectedPos = firstPosition + i ; selectedTop = top ; $F597 } } } else { final int itemCount = mItemCount ; down = _BOOL ; selectedPos = firstPosition + childCount - NUM00 ; for ( $F18298 ( i , childCount ) ) { final View v = getChildAt ( i ) ; final int top = v . getTop ( ) ; final int bottom = v . getBottom ( ) ; if ( i == childCount - NUM00 ) { selectedTop = top ; if ( firstPosition + childCount < itemCount || bottom > childrenBottom ) { childrenBottom -= getVerticalFadingEdgeLength ( ) ; } } if ( bottom <= childrenBottom ) { selectedPos = firstPosition + i ; selectedTop = top ; $F597 } } } } mResurrectToPosition = INVALID_POSITION ; removeCallbacks ( mFlingRunnable ) ; mTouchMode = TOUCH_MODE_REST ; clearScrollingCache ( ) ; mSpecificTop = selectedTop ; selectedPos = lookForSelectablePosition ( selectedPos , down ) ; if ( selectedPos >= firstPosition && selectedPos <= getLastVisiblePosition ( ) ) { mLayoutMode = LAYOUT_SPECIFIC ; setSelectionInt ( selectedPos ) ; invokeOnItemScrollListener ( ) ; } else { selectedPos = INVALID_POSITION ; } reportScrollStateChange ( OnScrollListener . SCROLL_STATE_IDLE ) ; return selectedPos >= NUM00 ; }
public void logPurchase ( BigDecimal purchaseAmount , Currency currency , Bundle parameters ) { if ( purchaseAmount == null ) $F3602 ( notifyDeveloperError ) else $F25700 ( currency , notifyDeveloperError ) if ( parameters == null ) { $F53031 ( parameters ) ; } parameters . putString ( AppEventsConstants . EVENT_PARAM_CURRENCY , currency . getCurrencyCode ( ) ) ; logEvent ( AppEventsConstants . EVENT_NAME_PURCHASED , purchaseAmount . doubleValue ( ) , parameters ) ; eagerFlush ( ) ; }
public static String padBetween $F16339 ( first , length , last ) { final int padlen = length - ( $F71221 ( first , last ) ) ; return first + ( padlen > NUM00 ? getSpaceString ( padlen ) : NUM00 ) + last ; }
public void applyFromResolveInfo ( PackageManager pm , ResolveInfo info , WidgetPreviewLoader loader ) { mInfo = info ; CharSequence label = info . loadLabel ( pm ) ; mWidgetName . setText ( label ) ; mWidgetDims . setText ( String . format ( mDimensionsFormatString , NUM00 , NUM00 ) ) ; mWidgetPreviewLoader = loader ; }
private QueueConnectionImpl createNewPrimary ( Set excludedServers ) { QueueConnectionImpl primary = null ; while ( primary == null && pool . getPoolOrCacheCancelInProgress ( ) == null ) { List servers = findQueueServers ( excludedServers , NUM00 , _BOOL , printPrimaryNotFoundError , LocalizedStrings . QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_PRIMARY_CLIENT_QUEUE ) ; printPrimaryNotFoundError = _BOOL ; if $F4251 ( servers ) $F5153 Connection connection = null ; try { connection = factory . createClientToServerConnection ( ( ServerLocation ) servers . get ( NUM00 ) , _BOOL ) ; } catch ( GemFireSecurityException e ) { throw e ; } catch ( Exception e ) { if $F585 ( logger ) { logger . debug ( NUM00 , servers . get ( NUM00 ) ) ; } } if ( connection != null ) { primary = initializeQueueConnection ( connection , _BOOL , queueConnections . getFailedUpdater ( ) ) ; } excludedServers . addAll ( servers ) ; } if ( primary != null && sentClientReady && primary . sendClientReady ( ) ) { readyForEventsAfterFailover ( primary ) ; } return primary ; }
public static int readInt $F72 { return scanner . nextInt ( ) ; }
public CSVConfig guess $F72 { try { BufferedReader bIn = new BufferedReader ( new InputStreamReader ( getInputStream ( ) , StandardCharsets . UTF_8 ) ) ; $F808 ( lines ) String line = null ; int counter = NUM00 ; while ( ( line = bIn . readLine ( ) ) != null && counter <= NUM00 ) $F2319 ( lines , counter , line ) if ( counter < NUM00 ) { $F12914 ( newLines , counter ) $F135 ( System , lines , newLines , counter ) lines = newLines ; } analyseLines ( lines ) ; } $F1516 ( e ) finally { $F111205 ( in ) } CSVConfig conf = config ; config = null ; return conf ; }
private void updateDesign ( DataSetDesign dataSetDesign , IConnection conn , String queryText ) throws OdaException { IQuery query = conn . newQuery ( null ) ; query . prepare ( queryText ) ; query . setProperty ( Query . PROP_SETUP_QUERY_TEXT , getSetupQueryText ( ) ) ; try { IResultSetMetaData md = query . getMetaData ( ) ; updateResultSetDesign ( md , dataSetDesign ) ; } catch ( OdaException e ) { dataSetDesign . setResultSets ( null ) ; $F301 ( e ) } try { IParameterMetaData paramMd = query . getParameterMetaData ( ) ; updateParameterDesign ( paramMd , dataSetDesign ) ; } catch ( OdaException ex ) { dataSetDesign . setParameters ( null ) ; $F301 ( ex ) } }
$F1 public OutlierResult run ( Database db , $F42616 relation ) { DBIDs ids = relation . getDBIDs ( ) ; SimilarityQuery $F2193 sq = db . getSimilarityQuery ( relation , kernelFunction ) ; KernelMatrix kernelMatrix = new KernelMatrix ( sq , relation , ids ) ; WritableDoubleDataStore abodvalues = DataStoreUtil . makeDoubleStorage ( ids , DataStoreFactory . HINT_STATIC ) ; DoubleMinMax minmaxabod = new DoubleMinMax $F72 ; MeanVariance s = new MeanVariance $F72 ; KNNHeap nn = DBIDUtil . newHeap ( k ) ; for ( $F60471 ( pA , ids ) ) { final double simAA = kernelMatrix . getSimilarity ( pA , pA ) ; $F725 ( nn ) for ( $F42632 ( nB , relation ) ) { $F95009 ( DBIDUtil , nB , pA ) double simBB = kernelMatrix . getSimilarity ( nB , nB ) ; $F243880 ( simAB , kernelMatrix , pA , nB ) double sqdAB = simAA + simBB - simAB - simAB ; if $F102905 ( sqdAB ) $F1448 nn . insert ( sqdAB , nB ) ; } KNNList nl = nn . toKNNList ( ) ; $F2268 ( s ) DoubleDBIDListIter iB = nl . iter ( ) , iC = nl . iter ( ) ; for ( ; iB . valid ( ) ; iB . advance ( ) ) { $F50466 ( sqdAB , iB ) $F243880 ( simAB , kernelMatrix , pA , iB ) if $F102905 ( sqdAB ) $F1448 for ( iC . seek ( iB . getOffset ( ) + NUM00 ) ; iC . valid ( ) ; iC . advance ( ) ) { $F50466 ( sqdAC , iC ) $F243880 ( simAC , kernelMatrix , pA , iC ) if $F102905 ( sqdAC ) $F1448 $F243880 ( simBC , kernelMatrix , iB , iC ) double numerator = simBC - simAB - simAC + simAA ; double div = NUM00 / ( sqdAB * sqdAC ) ; s . put ( numerator * div , Math . sqrt ( div ) ) ; } } final double abof = s . getNaiveVariance ( ) ; minmaxabod . put ( abof ) ; abodvalues . putDouble ( pA , abof ) ; } DoubleRelation scoreResult = new MaterializedDoubleRelation ( NUM00 , NUM00 , abodvalues , relation . getDBIDs ( ) ) ; OutlierScoreMeta scoreMeta = new InvertedOutlierScoreMeta ( minmaxabod . getMin ( ) , minmaxabod . getMax ( ) , NUM00 , Double . POSITIVE_INFINITY ) ; return new OutlierResult ( scoreMeta , scoreResult ) ; }
$F237470 ( doc , elementList , nameNode , child , badSubstring , load , _BOOL , success , ex , DOMException , assertTrue )
public static String toString ( JSONObject jo ) throws JSONException { $F280 ( sb ) $F189163 ( sb , escape , jo ) $F84 ( sb ) $F189163 ( sb , escape , jo ) if $F16934 ( jo ) { $F84 ( sb ) $F189165 ( sb , jo ) } $F189169 ( jo , sb , escape ) $F189169 ( jo , sb , escape ) if ( jo . optBoolean ( NUM00 ) ) $F86 ( sb ) $F92 ( sb ) }
$F1 public boolean equals ( Object otherRule ) { $F3627 ( otherRule , this , _BOOL ) if ( otherRule instanceof ZoneOffsetTransitionRule ) { ZoneOffsetTransitionRule other = ( ZoneOffsetTransitionRule ) otherRule ; return month == other . month && dom == other . dom && dow == other . dow && timeDefinition == other . timeDefinition && $F12737 ( time , other ) && timeEndOfDay == other . timeEndOfDay && $F12737 ( standardOffset , other ) && $F12737 ( offsetBefore , other ) && $F12737 ( offsetAfter , other ) ; } return _BOOL ; }
private void initializeMembershipMatrix $F72 { for ( $F2277 ( i , points ) ) { for ( $F119 ( j , k ) ) { membershipMatrix [ i ] [ j ] = random . nextDouble ( ) ; } membershipMatrix [ i ] = MathArrays . normalizeArray ( membershipMatrix [ i ] , NUM00 ) ; } }
public static void writeAll ( OutputStream stream , $F131 o ) throws Exception { ObjectOutputStream oos ; int i ; if ( ! ( stream instanceof BufferedOutputStream ) ) { stream = new BufferedOutputStream ( stream ) ; } $F111162 ( oos , stream ) for ( $F6929 ( i , o ) ) { $F359966 ( oos , o , i ) } $F1206 ( oos ) $F59 ( oos ) }
public synchronized void reset $F72 { $F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { $F16709 ( mBufTexCoords ) } for ( $F809 ( i ) ) { Vertex tmp = mArrTempVertices . get ( NUM00 ) ; tmp . set ( mRectangle [ i ] ) ; if ( mFlipTexture ) { tmp . mTexX *= mTextureRectBack . right ; tmp . mTexY *= mTextureRectBack . bottom ; tmp . mColor = mTexturePage . getColor ( CurlPage . SIDE_BACK ) ; } else { tmp . mTexX *= mTextureRectFront . right ; tmp . mTexY *= mTextureRectFront . bottom ; tmp . mColor = mTexturePage . getColor ( CurlPage . SIDE_FRONT ) ; } addVertex ( tmp ) ; } mVerticesCountFront = NUM00 ; mVerticesCountBack = NUM00 ; $F16709 ( mBufVertices ) $F16709 ( mBufColors ) if ( DRAW_TEXTURE ) { $F16709 ( mBufTexCoords ) } mDropShadowCount = mSelfShadowCount = NUM00 ; }
public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { AttachmentPoint ap = new AttachmentPoint ( sw , port , $F6419 ) ; if ( this . oldAPs != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . oldAPs ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . oldAPs = apList ; } } if ( this . attachmentPoints != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > $F72 ; apList . addAll ( this . attachmentPoints ) ; $F12747 ( index , apList , ap ) if ( index > NUM00 ) { apList . remove ( index ) ; this . attachmentPoints = apList ; return _BOOL ; } } return _BOOL ; }
public B css ( $F157772 String classes ) $F13736 ( css , classes )
public static ArgumentException adaptPropertyException ( PropertyException e , AbstractManagedObjectDefinition $F5162 d ) { return new ArgumentException ( e . getMessageObject ( ) ) ; }
private Consumer < Operation > createNotificationTarget $F72 $F1337
public void write $F97 ( bytes ) throws IOException { dataOutput . write ( bytes ) ; offset += bytes . length ; }
static synchronized boolean isShapingSupported $F72 { if ( isShapingSupported == null ) { XToolkit . awtLock ( ) ; try { isShapingSupported = XlibWrapper . XShapeQueryExtension ( XToolkit . getDisplay ( ) , XlibWrapper . larg1 , XlibWrapper . larg2 ) ; } finally { XToolkit . awtUnlock ( ) ; } } $F44652 ( isShapingSupported ) }
private boolean isIdChar ( int ch ) { return isAlpha ( ch ) || isDigit ( ch ) || ch == NUM00 || ch == NUM00 || ch == NUM00 || ch == NUM00 || Character . isLetter ( ch ) ; }
protected String handleTimeseal ( String text ) throws IOException { String result = text ; $F51620 ( LOG , result ) while $F3578 ( result ) { sendAck ( ) ; $F56558 ( result ) $F51620 ( LOG , result ) } $F51620 ( LOG , result ) return result ; }
public BerInputStream ( InputStream in , int initialSize ) throws IOException { this . in = in ; $F1325 ( buffer , initialSize ) next ( ) ; if ( length != INDEFINIT_LENGTH ) { if ( buffer . length < ( length + offset ) ) { $F112445 ( newBuffer , length , offset ) $F135 ( System , buffer , newBuffer , offset ) buffer = newBuffer ; } } else { isIndefinedLength = _BOOL ; throw new ASN1Exception $F580 ; } }
protected LocationHandler ( Location location , Option ... options ) { this . location = location ; this . options = options . length == NUM00 ? EnumSet . noneOf ( Option . class ) : EnumSet . copyOf ( Arrays . asList ( options ) ) ; }
private void init $F72 { $F980 ( _logger ) list = new ConcurrentLinkedQueue < ArrivedIndication > $F72 ; IntermediateProcessor intermediateProcessor = new IntermediateProcessor ( list , _processor ) ; indicationProcessTimer = Executors . newSingleThreadScheduledExecutor ( ) ; indicationProcessTimer . scheduleWithFixedDelay ( intermediateProcessor , CIMConstants . INDICATION_PROCESS_INTERVAL , PERIODIC_DELAY , TimeUnit . SECONDS ) ; }
public void testResultSetMetadate $F72 throws Exception { final int rows = NUM00 ; final int tables = NUM00 ; final int columns = NUM00 ; $F11282 ( st , con ) $F83 ( sb ) try { for ( $F119 ( t , tables ) ) { $F4910 ( sb ) $F84 ( sb ) sb . append ( t ) ; $F84 ( sb ) for ( $F119 ( c , columns ) ) $F7227 ( sb , c ) $F84 ( sb ) st . execute ( sb . toString ( ) ) ; } for ( $F119 ( t , tables ) ) { $F4910 ( sb ) $F84 ( sb ) sb . append ( t ) ; $F84 ( sb ) $F103815 ( c , columns , sb ) $F84 ( sb ) PreparedStatement pst = con . prepareStatement ( sb . toString ( ) ) ; for ( $F119 ( r , rows ) ) { for ( $F9993 ( c , columns ) ) { pst . setInt ( c + NUM00 , r ) ; } $F420497 ( pst ) } Assert . assertEquals ( rows , pst . executeBatch ( ) . length ) ; } $F4910 ( sb ) $F84 ( sb ) for ( $F119 ( t , tables ) ) { sb . append ( t > NUM00 ? NUM00 : NUM00 ) ; $F84 ( sb ) sb . append ( t ) ; } if ( tables > NUM00 ) { $F84 ( sb ) for ( $F119 ( t , tables ) ) { sb . append ( t > NUM00 ? NUM00 : NUM00 ) ; $F84 ( sb ) sb . append ( t ) ; $F84 ( sb ) $F84 ( sb ) sb . append ( t - NUM00 ) ; $F84 ( sb ) } } ResultSet rs = st . executeQuery ( sb . toString ( ) ) ; $F19097 ( rsmd , rs ) $F16742 ( toalColumns , rsmd ) Assert . assertEquals ( tables * ( columns + NUM00 ) , toalColumns ) ; for ( $F119 ( r , rows ) ) { $F7683 ( assertTrue , rs ) } int index = NUM00 ; for ( $F119 ( t , tables ) ) { for ( int c = NUM00 ; c <= columns + NUM00 ; c ++ ) { index ++ ; Assert . assertEquals ( c > NUM00 ? ( NUM00 + ( c - NUM00 ) ) : NUM00 , rsmd . getColumnName ( index ) ) ; Assert . assertEquals ( Types . INTEGER , rsmd . getColumnType ( index ) ) ; Assert . assertEquals ( NUM00 + t , rsmd . getTableName ( index ) ) ; } } } finally { for ( $F119 ( t , tables ) ) $F1328 ( dropTable , t ) } }
public static final String longToHexString ( long a ) { $F75240 ( sb ) for ( $F6268 ( i ) ) sb . append ( NIBBLE [ ( int ) ( a > > > ( NUM00 - NUM00 * i ) ) & NUM00 ] ) ; $F92 ( sb ) }
private Date watchCoreStartAt ( SolrServer client , final long timeout , final Date min ) throws InterruptedException , IOException , SolrServerException { final long sleepInterval = NUM00 ; long timeSlept = NUM00 ; SolrParams p = params ( $F61861 ) ; while ( timeSlept < timeout ) { QueryRequest req = new QueryRequest ( p ) ; $F244296 ( req ) try { NamedList data = client . request ( req ) ; for ( String k : $F78037 ) { $F16628 ( o , data , k ) assertNotNull ( NUM00 + k , o ) ; data = ( NamedList ) o ; } Date startTime = ( Date ) data . get ( NUM00 ) ; assertNotNull ( NUM00 , startTime ) ; if ( null == min || startTime . after ( min ) ) { return startTime ; } } catch ( SolrException e ) { if ( NUM00 != e . code ( ) ) { throw e ; } } timeSlept += sleepInterval ; Thread . sleep ( sleepInterval ) ; } fail ( NUM00 + min ) ; return min ; }
$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
$F1 public ParamsRequestCondition combine ( ParamsRequestCondition other ) { Set < ParamExpression > set = new $F22301 ( this . expressions ) ; set . addAll ( other . expressions ) ; return new ParamsRequestCondition ( set ) ; }
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof TimeSeriesCollection ) ) { return _BOOL ; } TimeSeriesCollection that = ( TimeSeriesCollection ) obj ; if ( this . xPosition != that . xPosition ) { return _BOOL ; } if ( this . domainIsPointsInTime != that . domainIsPointsInTime ) { return _BOOL ; } if ( ! ObjectUtilities . equal ( this . data , that . data ) ) { return _BOOL ; } return _BOOL ; }
private void parseRules ( Attributes attributes ) { startMode = getModeAttribute ( attributes , NUM00 ) ; if ( startMode == null ) { startMode = lookupCreateMode ( IMPLICIT_MODE_NAME ) ; md . currentMode = startMode ; startMode . noteDefined ( null ) ; } startMode . noteUsed ( locator ) ; if ( attributesSchema ) { Mode wrapper = lookupCreateMode ( WRAPPER_MODE_NAME ) ; ActionSet actions = new ActionSet $F72 ; actions . addNoResultAction ( new AllowAction ( new ModeUsage ( startMode , startMode ) ) ) ; wrapper . bindElement ( NamespaceSpecification . ANY_NAMESPACE , NamespaceSpecification . DEFAULT_WILDCARD , actions ) ; wrapper . noteDefined ( null ) ; startMode = wrapper ; } defaultSchemaType = getSchemaType ( attributes ) ; }
public void fill ( byte value ) { value &= NUM00 ; Arrays . fill ( data , ( byte ) ( value < < NUM00 | value ) ) ; }
public void makeImmutable $F72 { $F4246 ( isMutable , _BOOL ) }
private static void parse ( InputStream in , Encoding encoding , ContentHandler contentHandler ) throws $F35763 { try { XMLReader reader = new ExpatReader $F72 ; reader . setContentHandler ( contentHandler ) ; $F77995 ( source , in ) source . setEncoding ( encoding . expatName ) ; reader . parse ( source ) ; } catch ( IOException e ) $F27253 ( e ) }
$F1 public $F38156 findByField2 ( boolean field2 ) { return findByField2 ( field2 , QueryUtil . ALL_POS , QueryUtil . ALL_POS , null ) ; }
public void addToAssociated ( Message asMessage ) $F207 ( associatedMessages , asMessage )
private static void parsePropertyAssignments ( Properties p , $F806 assignments ) { for ( String assignment : assignments ) { $F1384 ( split , assignment ) $F11991 ( key , assignment , split ) $F36289 ( value , assignment , split ) p . put ( key , value ) ; } }
protected boolean switchProfiles ( IProfile newSelection ) { $F1933 ( newSelection , _BOOL ) $F3627 ( mCurrentProfile , newSelection , _BOOL ) if ( mAlternativeProfileHeaderSwitching ) { int prevSelection = - NUM00 ; if ( mProfileFirst == newSelection ) { prevSelection = NUM00 ; } else if ( mProfileSecond == newSelection ) { prevSelection = NUM00 ; } else $F154378 ( mProfileThird , newSelection , prevSelection ) IProfile tmp = mCurrentProfile ; mCurrentProfile = newSelection ; if ( prevSelection == NUM00 ) { mProfileFirst = tmp ; } else if ( prevSelection == NUM00 ) { mProfileSecond = tmp ; } else $F126526 ( prevSelection , mProfileThird , tmp ) } else { if ( mProfiles != null ) { ArrayList < IProfile > previousActiveProfiles = new $F201 ( Arrays . asList ( mCurrentProfile , mProfileFirst , mProfileSecond , mProfileThird ) ) ; if $F105 ( previousActiveProfiles , newSelection ) { int position = - NUM00 ; for ( $F6268 ( i ) ) { if $F36973 ( previousActiveProfiles , i , newSelection ) $F3468 ( position , i ) } if ( position != - NUM00 ) { previousActiveProfiles . remove ( position ) ; $F6965 ( previousActiveProfiles , newSelection ) $F36986 ( mCurrentProfile , previousActiveProfiles ) $F36986 ( mProfileFirst , previousActiveProfiles ) $F36986 ( mProfileSecond , previousActiveProfiles ) $F36986 ( mProfileThird , previousActiveProfiles ) } } else { mProfileThird = mProfileSecond ; mProfileSecond = mProfileFirst ; mProfileFirst = mCurrentProfile ; mCurrentProfile = newSelection ; } } } if ( mOnlySmallProfileImagesVisible ) { mProfileThird = mProfileSecond ; mProfileSecond = mProfileFirst ; mProfileFirst = mCurrentProfile ; } buildProfiles ( ) ; return _BOOL ; }
public static SearchScope valueOf ( final int intValue ) { SearchScope result = null ; if ( NUM00 <= intValue && intValue < ELEMENTS . length ) { result = ELEMENTS [ intValue ] ; } if ( result == null ) { result = new SearchScope ( intValue , NUM00 + intValue + NUM00 , Enum . UNKNOWN ) ; } return result ; }
public static IPackageFragmentRoot addClassFolder ( IJavaProject jproject , String containerName , IPath sourceAttachPath , IPath sourceAttachRoot ) throws CoreException { $F18258 ( project , jproject ) IContainer container = null ; if $F6036 ( containerName ) { container = project ; } else { IFolder folder = project . getFolder ( containerName ) ; if $F1906 ( folder ) { CoreUtility . createFolder ( folder , _BOOL , _BOOL , null ) ; } container = folder ; } IClasspathEntry cpe = JavaCore . newLibraryEntry ( container . getFullPath ( ) , sourceAttachPath , sourceAttachRoot ) ; addToClasspath ( jproject , cpe ) ; return jproject . getPackageFragmentRoot ( container ) ; }
private void previousWindow ( Calendar startTime ) { if ( isDaily ( ) ) { startTime . add ( Calendar . DAY_OF_MONTH , - NUM00 ) ; } else if ( isWeekly ( ) ) { startTime . add ( Calendar . WEEK_OF_MONTH , - NUM00 ) ; } else if ( isMonthly ( ) ) { int month = $F21623 ( startTime , Calendar ) ; adjustDayOfMonth ( startTime , month + - NUM00 ) ; } }
$F152357 ( a , head , tail , System , elements , size , headPortionLen )
abstract void executeOnHandlerTask ( Runnable task ) ;
public static LatLng translatePoint ( LatLng point , double distance , double bearing ) { distance = distance / NUM00 ; $F46307 ( lat , Math , point ) $F89861 ( lng , Math , point ) $F129283 ( bearing , Math ) double Lat2 = Math . asin ( ( Math . sin ( lat ) * Math . cos ( distance / EARTH ) ) + ( Math . cos ( lat ) * Math . sin ( distance / EARTH ) * Math . cos ( bearing ) ) ) ; double Long2 = lng + Math . atan2 ( Math . sin ( bearing ) * Math . sin ( distance / EARTH ) * Math . cos ( lat ) , Math . cos ( distance / EARTH ) - ( Math . sin ( lat ) * Math . sin ( Lat2 ) ) ) ; Lat2 = Math . toDegrees ( Lat2 ) ; Long2 = Math . toDegrees ( Long2 ) ; return new LatLng ( Lat2 , Long2 ) ; }
public Instance calcPivot ( MyIdxList list1 , MyIdxList list2 , Instances insts ) { int classIdx = m_Instances . classIndex ( ) ; $F1986 attrVals = new double [ insts . numAttributes ( ) ] ; Instance temp ; for ( $F1088 ( i , list1 ) ) { temp = insts . instance ( list1 . get ( i ) . idx ) ; for ( int k = NUM00 ; k < temp . numValues ( ) ; k ++ ) { if ( temp . index ( k ) == classIdx ) $F1448 attrVals [ k ] += temp . valueSparse ( k ) ; } } for ( $F1088 ( j , list2 ) ) { temp = insts . instance ( list2 . get ( j ) . idx ) ; for ( int k = NUM00 ; k < temp . numValues ( ) ; k ++ ) { if ( temp . index ( k ) == classIdx ) $F1448 attrVals [ k ] += temp . valueSparse ( k ) ; } } for ( int j = NUM00 , numInsts = $F71221 ( list1 , list2 ) ; j < attrVals . length ; j ++ ) { attrVals [ j ] /= numInsts ; } $F124374 ( temp , attrVals ) return temp ; }
default Optional < $F5675 > parseOptional $F97 ( parseMessage ) { return Optional . ofNullable ( parse ( parseMessage ) ) ; }
public static void initializeForClientUse $F72 { EmbeddedUtils . initializeForClientUse ( ) ; }
private void createUser ( SSOToken token , PersistentObject parentObj , Map attributes , String profileName ) throws UMSException , AMEntryExistsException , AMException { String orgDN = getOrganizationDN ( internalToken , parentObj . getDN ( ) ) ; String entryDN = getNamingAttribute ( AMObject . USER ) + NUM00 + profileName + NUM00 + parentObj . getDN ( ) ; attributes = callBackHelper . preProcess ( token , entryDN , orgDN , null , attributes , CallBackHelper . CREATE , AMObject . USER , _BOOL ) ; AttrSet attrSet = CommonUtils . mapToAttrSet ( attributes ) ; makeNamingFirst ( attrSet , getNamingAttribute ( AMObject . USER ) , profileName ) ; UserPasswordValidationHelper pluginImpl = new UserPasswordValidationHelper ( token , orgDN ) ; try { pluginImpl . validate ( CommonUtils . attrSetToMap ( attrSet ) ) ; } catch ( AMException ame ) { $F66414 ( debug , ame ) throw ame ; } TemplateManager tempMgr = TemplateManager . getTemplateManager ( ) ; CreationTemplate creationTemp = tempMgr . getCreationTemplate ( NUM00 , new Guid ( orgDN ) , TemplateManager . SCOPE_ANCESTORS ) ; attrSet = combineOCs ( creationTemp , attrSet ) ; PersistentObject user = new PersistentObject ( creationTemp , attrSet ) ; try $F87603 ( parentObj , user ) catch ( AccessRightsException e ) { if $F12866 ( debug ) { debug . warning ( NUM00 + NUM00 , e ) ; } $F88429 ( token ) } catch ( EntryAlreadyExistsException ee ) { if ( ComplianceServicesImpl . isComplianceUserDeletionEnabled ( ) ) { complianceImpl . checkIfDeletedUser ( token , user . getDN ( ) ) ; } if $F12866 ( debug ) { debug . warning ( NUM00 + NUM00 , ee ) ; } throw new AMEntryExistsException ( token , NUM00 , ee ) ; } catch ( UMSException ue ) { if $F12866 ( debug ) { debug . warning ( NUM00 + NUM00 , ue ) ; } processInternalException ( token , ue , NUM00 ) ; } callBackHelper . postProcess ( token , user . getDN ( ) , orgDN , null , attributes , CallBackHelper . CREATE , AMObject . USER , _BOOL ) ; AMUserEntryProcessed postPlugin = getUserPostPlugin ( ) ; if ( postPlugin != null ) { Map attrMap = CommonUtils . attrSetToMap ( attrSet ) ; postPlugin . processUserAdd ( token , user . getDN ( ) , attrMap ) ; } EmailNotificationHelper mailerObj = new EmailNotificationHelper ( user . getDN ( ) ) ; mailerObj . setUserCreateNotificationList ( ) ; mailerObj . sendUserCreateNotification ( attributes ) ; }
public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) newVector . addElement ( new Option ( $F34354 + NUM00 + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
private static int byteCompaction ( int mode , $F2027 codewords , int codeIndex , StringBuilder result ) { if ( mode == BYTE_COMPACTION_MODE_LATCH ) { int count = NUM00 ; long value = NUM00 ; $F11577 ( decodedData ) $F11844 ( byteCompactedCodewords ) boolean end = _BOOL ; int nextCode = codewords [ codeIndex ++ ] ; while ( ( codeIndex < codewords [ NUM00 ] ) && ! end ) { byteCompactedCodewords [ count ++ ] = nextCode ; value = NUM00 * value + nextCode ; nextCode = codewords [ codeIndex ++ ] ; if $F62764 ( nextCode , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } else { if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = ( char ) ( value % NUM00 ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } if ( codeIndex == codewords [ NUM00 ] && nextCode < TEXT_COMPACTION_MODE_LATCH ) $F52339 ( byteCompactedCodewords , count , nextCode ) for ( $F119 ( i , count ) ) { $F3356 ( result , byteCompactedCodewords , i ) } } else if ( mode == BYTE_COMPACTION_MODE_LATCH_6 ) { int count = NUM00 ; long value = NUM00 ; boolean end = _BOOL ; while $F38554 ( codeIndex , codewords , end ) { int code = codewords [ codeIndex ++ ] ; if ( code < TEXT_COMPACTION_MODE_LATCH ) { count ++ ; value = NUM00 * value + code ; } else { if $F62764 ( code , TEXT_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH , NUMERIC_COMPACTION_MODE_LATCH , BYTE_COMPACTION_MODE_LATCH_6 , BEGIN_MACRO_PDF417_CONTROL_BLOCK , BEGIN_MACRO_PDF417_OPTIONAL_FIELD , MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = _BOOL ; } } if ( ( count % NUM00 == NUM00 ) && ( count > NUM00 ) ) { $F11577 ( decodedData ) for ( $F809 ( j ) ) { decodedData [ NUM00 - j ] = $F27723 ( value ) ; value >>= NUM00 ; } result . append ( decodedData ) ; count = NUM00 ; } } } return codeIndex ; }
public void addAll ( $F4170 $F5675 itemList ) { synchronized ( lock ) { $F9406 ( items ) items . addAll ( itemList ) ; } if ( notifyOnChange ) { if ( items . size ( ) - itemList . size ( ) != NUM00 ) { notifyItemRangeChanged ( items . size ( ) - itemList . size ( ) , itemList . size ( ) ) ; } else $F5795 ( notifyDataSetChanged ) } }
public void write ( int a ) throws IOException $F164531 ( outs , a , position )
public void testInsert1 $F72 throws SQLException { DatabaseCreator . fillParentTable ( conn ) ; DatabaseCreator . fillFKStrictTable ( conn ) ; DatabaseCreator . fillFKCascadeTable ( conn ) ; $F283254 ( statement , DatabaseCreator ) statement . execute ( NUM00 + DatabaseCreator . FKCASCADE_TABLE + NUM00 ) ; }
public boolean isStartsWithMode $F72 { return startsWithMode ; }
public Builder withThreads ( int threads ) { properties . setProperty ( NettyOptions . THREADS , $F348031 ( String , Assert , threads ) ) ; return this ; }
public void paintTabbedPaneTabAreaBackground ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { if ( orientation == JTabbedPane . LEFT ) { $F34721 ( transform ) transform . scale ( $F72322 ) ; $F72326 ( transform , Math ) paintBackground ( context , g , y , x , h , w , transform ) ; } else if ( orientation == JTabbedPane . RIGHT ) { $F34721 ( transform ) $F72326 ( transform , Math ) transform . translate ( NUM00 , - ( x + w ) ) ; paintBackground ( context , g , y , NUM00 , h , w , transform ) ; } else if ( orientation == JTabbedPane . BOTTOM ) { $F34721 ( transform ) transform . translate ( x , y ) ; paintBackground ( context , g , NUM00 , NUM00 , w , h , transform ) ; } else $F72336 ( paintBackground , context , g , x , y , w , h ) }
$F1 public void endCDATA ( Augmentations augs ) throws XNIException { try { if ( fLexicalHandler != null ) { fLexicalHandler . endCDATA ( ) ; } } $F122277 ( e ) }
public static MediaLocator createMediaLocator ( String url ) { MediaLocator ml ; if ( url . indexOf ( NUM00 ) > NUM00 && ( ml = new MediaLocator ( url ) ) != null ) return ml ; if ( url . startsWith ( File . separator ) ) { if ( ( ml = new MediaLocator ( NUM00 + url ) ) != null ) return ml ; } else { String file = NUM00 + System . getProperty ( NUM00 ) + File . separator + url ; if ( ( ml = new MediaLocator ( file ) ) != null ) return ml ; } $F1274 }
private static void invokeRemoteClearAndWait ( VM remoteVM , VM thisVM ) { $F188761 ( remoteVM ) try $F24081 ( clearLatch ) catch ( InterruptedException e ) $F1210 ( fail ) }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
public void key ( String skey ) throws $F65177 { synchronized ( this ) { byte ekey [ ] = null ; if $F22 ( skey ) { $F65182 ( ekey , skey ) for ( $F1088 ( i , skey ) ) { $F1280 ( c , skey , i ) ekey [ i ] = ( byte ) ( ( c & NUM00 ) ^ ( c > > NUM00 ) ) ; } } _key ( ekey ) ; } }
public void testSharedTestData $F72 throws Exception { $F141086 ( assertEquals , testSqlDate , Date , testLocalDate ) $F141086 ( assertEquals , testSqlTime , Time , testLocalTime ) $F141086 ( assertEquals , testSqlTimeStamp , Timestamp , testLocalDateTime ) assertEquals ( testLocalDate , testSqlDate . toLocalDate ( ) ) ; assertEquals ( testLocalTime , testSqlTime . toLocalTime ( ) ) ; assertEquals ( testLocalDateTime , testSqlTimeStamp . toLocalDateTime ( ) ) ; }
public static $F13096 makeRandomCacheEntry ( $F96 data , boolean isExpired , boolean needsRefresh ) { $F6822 ( random ) $F13096 entry = new $F13096 $F72 ; if ( data != null ) $F6988 ( entry , data ) else { entry . data = $F13106 ( random ) ; } entry . etag = $F13111 ( String , random ) ; entry . serverDate = random . nextLong ( ) ; entry . ttl = isExpired ? NUM00 : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? NUM00 : Long . MAX_VALUE ; return entry ; }
public static final void isCDataWF ( DOMErrorHandler errorHandler , DOMErrorImpl error , DOMLocatorImpl locator , String datavalue , boolean isXML11Version ) { if ( datavalue == null || $F1277 ( datavalue ) ) $F932 $F7782 ( dataarray , datavalue ) int datalength = dataarray . length ; if ( isXML11Version ) { int i = NUM00 ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XML11Char . isXML11Invalid ( c ) ) { $F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , $F236375 ( Integer , c ) ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } else if ( c == NUM00 ) { int count = i ; if ( count < datalength && dataarray [ count ] == NUM00 ) { while ( ++ count < datalength && dataarray [ count ] == NUM00 ) $F845 if ( count < datalength && dataarray [ count ] == NUM00 ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } } } } } else { int i = NUM00 ; while ( i < datalength ) { char c = dataarray [ i ++ ] ; if ( XMLChar . isInvalid ( c ) ) { $F121844 ( XMLChar , c , i , datalength , c2 , dataarray ) String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , $F236375 ( Integer , c ) ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } else if ( c == NUM00 ) { int count = i ; if ( count < datalength && dataarray [ count ] == NUM00 ) { while ( ++ count < datalength && dataarray [ count ] == NUM00 ) $F845 if ( count < datalength && dataarray [ count ] == NUM00 ) { String msg = DOMMessageFormatter . formatMessage ( DOMMessageFormatter . XML_DOMAIN , NUM00 , null ) ; reportDOMError ( errorHandler , error , locator , msg , DOMError . SEVERITY_ERROR , NUM00 ) ; } } } } } }
public void characters $F62353 ( start , length ) { if ( titlePending ) $F92922 ( title , ch , start , length ) else if ( descPending ) $F92922 ( desc , ch , start , length ) }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F9007 ( newVector ) $F1007 ( newVector ) }
private void closeInjectorResource ( ShardId shardId , Injector shardInjector , Class < ? extends Closeable > ... toClose ) { for ( Class < ? extends Closeable > closeable : toClose ) { if ( closeInjectorOptionalResource ( shardId , shardInjector , closeable ) == _BOOL ) { logger . warn ( NUM00 , shardId , closeable . getSimpleName ( ) ) ; } } }
public final void incrementIdCounterTo ( int id ) { int diff = id - mIdCounter . get ( ) ; $F61236 ( diff ) mIdCounter . addAndGet ( diff ) ; updateSharedPreference ( ) ; }
private static int clearBrandingResourceMapCache ( ContentResolver cr , long providerId ) { $F83 ( where ) where . append ( Imps . BrandingResourceMapCache . PROVIDER_ID ) ; $F84 ( where ) where . append ( providerId ) ; return cr . delete ( Imps . BrandingResourceMapCache . CONTENT_URI , where . toString ( ) , null ) ; }
protected int checkLastLogin $F72 { $F121432 ( formatter ) Date now = newDate ( ) ; Date loginTime = null ; String lastLoginEnc = null ; String lastLogin = null ; String savedUserName = null ; int retVal = NUM00 ; if ( timeSinceLastLoginAttribute != null ) { HttpServletRequest req = getHttpServletRequest ( ) ; if ( req != null ) { Cookie cookie = CookieUtils . getCookieFromReq ( req , timeSinceLastLoginAttribute ) ; if ( cookie != null ) { if $F6299 ( debug ) { debug . message ( NUM00 , ADAPTIVE , timeSinceLastLoginAttribute ) ; } lastLoginEnc = CookieUtils . getCookieValue ( cookie ) ; lastLogin = AccessController . doPrivileged ( new DecodeAction ( lastLoginEnc ) ) ; } if ( lastLogin != null ) { $F6542 ( tokens , lastLogin ) if $F9634 ( tokens ) { lastLogin = tokens [ NUM00 ] ; savedUserName = tokens [ NUM00 ] ; } if $F28190 ( userName , savedUserName ) { lastLogin = null ; } if ( lastLogin != null ) { try { loginTime = formatter . parse ( lastLogin ) ; if ( ( $F265 ( now , loginTime ) ) < timeSinceLastLoginValue * NUM00 * NUM00 * NUM00 * NUM00 ) { retVal = timeSinceLastLoginScore ; } } catch ( ParseException pe ) { if $F6299 ( debug ) { debug . message ( NUM00 , ADAPTIVE , lastLogin , pe ) ; } } } } } if ( timeSinceLastLoginSave ) { $F545 ( postAuthNMap , timeSinceLastLoginAttribute ) lastLogin = formatter . format ( now ) ; lastLogin = UUID . randomUUID ( ) + NUM00 + lastLogin + NUM00 + userName ; lastLoginEnc = AccessController . doPrivileged ( new EncodeAction ( lastLogin ) ) ; $F545 ( postAuthNMap , lastLoginEnc ) } } if ( ! timeSinceLastLoginInvert ) { retVal = timeSinceLastLoginScore - retVal ; } return retVal ; }
public $F96 toByteArray $F72 { final int outLen = nonce_ . length + ( Long . SIZE / Byte . SIZE ) ; $F14256 ( out , ByteBuffer , outLen ) out . put ( nonce_ ) ; out . putLong ( contentLength_ ) ; $F31057 ( out ) }
public void addInterface ( CP ifc ) { addCPItem ( ifc ) ; interfaces . addElement ( ifc ) ; }
public Builder addConstraint ( @ JobConstraint int constraint ) { $F2027 newConstraints = new int [ mConstraints == null ? NUM00 : mConstraints . length + NUM00 ] ; if $F180527 ( mConstraints ) $F192661 ( System , mConstraints , newConstraints ) $F41606 ( newConstraints , constraint ) mConstraints = newConstraints ; return this ; }
void cleanupParameters ( String relayState ) { $F36310 ( debug , relayState ) relayStateMap . remove ( relayState ) ; userSessionMap . remove ( relayState ) ; userIDMap . remove ( relayState ) ; isSOAPInitiatedMap . remove ( relayState ) ; isSOAPInitiatedMap . remove ( relayState ) ; isIDPInitiatedMap . remove ( relayState ) ; origProtocolMap . remove ( relayState ) ; protocolListMap . remove ( relayState ) ; realmMap . remove ( relayState ) ; idpEntityIDMap . remove ( relayState ) ; spEntityIDMap . remove ( relayState ) ; sloRequestXMLMap . remove ( relayState ) ; sloResponseXMLMap . remove ( relayState ) ; currentStatusMap . remove ( relayState ) ; }
private boolean extraEntity ( String outputString , int charToMap ) { boolean extra = _BOOL ; if ( charToMap < ASCII_MAX ) { switch ( charToMap ) { $F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1266 ( outputString , extra , _BOOL ) $F1267 extra = _BOOL ; } } return extra ; }
protected void drawPoint ( Graphics2D g , PointStyle pointStyle , double x , double y , Color color , Color borderColor ) { Shape pointShape = pointStyle . createShape ( x , y ) ; g . setColor ( color ) ; g . fill ( pointShape ) ; g . setColor ( borderColor ) ; g . draw ( pointShape ) ; }
public void testAndNotNegNegFirstLonger $F72 { $F37335 $F37339 int aSign = - NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F89728 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
int retryTime $F72 { return retryTime . decrementAndGet ( ) ; }
public DatepickerCombo ( final Composite parent , final int style ) { this ( parent , style , DateFormat . getDateTimeInstance ( ) ) ; }
public void testPowPositiveNum $F72 { $F12762 int aSign = NUM00 ; int exp = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F12767 ( result , aNumber , exp ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
protected void drawMarkHilighted ( Graphics2D g2 , float x , float y ) { $F104030 ( bounds , mark ) float w = $F52896 ( bounds ) ; float h = $F52899 ( bounds ) ; x = x - ( w / NUM00 ) ; y = y - ( h / NUM00 ) ; g2 . translate ( x , y ) ; if ( hilightedMarkFillPaint != null ) { g2 . setPaint ( hilightedMarkFillPaint ) ; g2 . fill ( mark ) ; } g2 . setPaint ( hilightedMarkPaint ) ; g2 . setStroke ( hilightedMarkStroke ) ; g2 . draw ( mark ) ; $F86480 ( g2 , x , y ) Rectangle2D rect = new $F186398 ( x , y , w , h ) ; markBounds . add ( rect ) ; }
public static String trimTrailingWhitespace ( String str ) { $F74602 ( hasLength , str ) $F7542 ( sb , str ) while ( $F20 ( sb ) && Character . isWhitespace ( $F7792 ( sb ) ) ) $F50866 ( sb ) $F92 ( sb ) }
private static MksTicketResponse checkGetMksTicketResponse ( MksTicketResponse mksTicketResponse ) throws RpcException { $F10635 ( logger , mksTicketResponse ) switch $F52729 ( mksTicketResponse ) { case OK : $F597 $F52738 ( SYSTEM_ERROR , mksTicketResponse ) case VM_NOT_FOUND : throw new VmNotFoundException $F52730 ( mksTicketResponse ) ; case INVALID_VM_POWER_STATE : throw new InvalidVmPowerStateException $F52730 ( mksTicketResponse ) ; $F52745 ( String , mksTicketResponse ) } return mksTicketResponse ; }
$F1113 default B append ( double d , int decimalPlaces ) throws BufferOverflowException { if ( decimalPlaces < NUM00 ) { double d2 = d * Maths . tens ( decimalPlaces ) ; if ( d2 <= Long . MAX_VALUE && d2 >= Long . MIN_VALUE ) { return appendDecimal ( Math . round ( d2 ) , decimalPlaces ) ; } } return append ( d ) ; }
public $F124768 completeAsync ( Supplier $F10049 supplier , Executor executor ) { if ( supplier == null || executor == null ) $F18043 executor . execute ( new AsyncSupply $F4203 ( this , supplier ) ) ; return this ; }
private MovieSubtitleChooserModel $F72 $F213842 ( name , BUNDLE )
protected SuballocatedIntVector findNamespaceContext ( int elementNodeIndex ) { if ( null != m_namespaceDeclSetElements ) { int wouldBeAt = findInSortedSuballocatedIntVector ( m_namespaceDeclSetElements , elementNodeIndex ) ; if ( wouldBeAt >= NUM00 ) return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; $F28386 ( wouldBeAt ) wouldBeAt = - NUM00 - wouldBeAt ; int candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; int ancestor = _parent ( elementNodeIndex ) ; if ( wouldBeAt == NUM00 && candidate < ancestor ) { int rootHandle = getDocumentRoot ( makeNodeHandle ( elementNodeIndex ) ) ; int rootID = makeNodeIdentity ( rootHandle ) ; int uppermostNSCandidateID ; if ( getNodeType ( rootHandle ) == DTM . DOCUMENT_NODE ) { int ch = _firstch ( rootID ) ; uppermostNSCandidateID = ( ch != DTM . NULL ) ? ch : rootID ; } else { uppermostNSCandidateID = rootID ; } if ( candidate == uppermostNSCandidateID ) { return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; } } while ( wouldBeAt >= NUM00 && ancestor > NUM00 ) { if ( candidate == ancestor ) { return $F28383 ( m_namespaceDeclSets , wouldBeAt ) ; } else if ( candidate < ancestor ) { do $F8576 ( ancestor , _parent ) while ( candidate < ancestor ) ; } else if ( wouldBeAt > NUM00 ) { candidate = m_namespaceDeclSetElements . elementAt ( -- wouldBeAt ) ; } else $F597 } } $F1274 }
public static $F65431 nowTimestamp $F72 { return getTimestamp ( System . currentTimeMillis ( ) ) ; }
public int diff_commonSuffix ( String text1 , String text2 ) { $F1749 ( text1_length , text1 ) $F1749 ( text2_length , text2 ) $F17565 ( n , Math , text1_length , text2_length ) for ( $F9993 ( i , n ) ) { if ( text1 . charAt ( text1_length - i ) != text2 . charAt ( text2_length - i ) ) $F143681 ( i ) } return n ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
private void revokeEncryptPolicy ( org . wso2 . emm . agent . beans . Operation operation ) { boolean encryptStatus = ( devicePolicyManager . getStorageEncryptionStatus ( ) != devicePolicyManager . ENCRYPTION_STATUS_UNSUPPORTED && ( devicePolicyManager . getStorageEncryptionStatus ( ) == devicePolicyManager . ENCRYPTION_STATUS_ACTIVE || devicePolicyManager . getStorageEncryptionStatus ( ) == devicePolicyManager . ENCRYPTION_STATUS_ACTIVATING ) ) ; if ( operation . isEnabled ( ) && encryptStatus ) { devicePolicyManager . setStorageEncryption ( deviceAdmin , _BOOL ) ; } }
public JSONBuffer closeHash $F72 { if ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) $F19954 removeSeparator ( ) ; $F84 ( buffer ) $F34454 ( stack ) addSeparator ( ) ; return this ; }
private static $F96 generateSeed $F72 { try { $F1538 ( seedBuffer ) $F1533 ( seedBufferOut , seedBuffer ) seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; $F59 ( seedBufferOut ) $F11316 ( seedBuffer ) } catch ( IOException e ) { throw new SecurityException ( NUM00 , e ) ; } }
private void init ( SnmpMib myMib ) { if ( debug == null ) { final Key < Debug > key = Key . get ( Debug . class , Names . named ( CoreTokenConstants . CTS_MONITOR_DEBUG ) ) ; debug = InjectorHolder . getInstance ( key ) ; } final List < OperationEntry > operationEntries = new ArrayList < OperationEntry > $F72 ; final List < TokenEntry > tokenEntries = new ArrayList < TokenEntry > $F72 ; for ( Enum e : crudItems ) { final OperationEntry entry = new OperationEntry ( myMib ) ; entry . OperationType = e . name ( ) ; entry . OperationTableIndex = ( long ) e . ordinal ( ) + NUM00 ; operationEntries . add ( entry ) ; } for ( Enum e : tokenItems ) { final TokenEntry entry = new TokenEntry ( myMib ) ; entry . TokenType = e . name ( ) ; entry . TokenTableIndex = ( long ) e . ordinal ( ) + NUM00 ; tokenEntries . add ( entry ) ; } try { for ( OperationEntry ce : operationEntries ) { OperationTable . addEntry ( ce ) ; } for ( TokenEntry te : tokenEntries ) { TokenTable . addEntry ( te ) ; } createCRUDOperationsPerTokenTypeTable ( myMib , CtsCRUDOperationsPerTokenTypeTable , operationEntries , tokenEntries ) ; createCRUDOperationsTable ( myMib , CtsCRUDOperationsTable , operationEntries ) ; createTokenOperationsTable ( myMib , CtsTokenOperationsTable , tokenEntries ) ; } catch ( SnmpStatusException e ) { if $F6299 ( debug ) $F5198 ( debug , e ) } }
$F1 public void disconnectionNotification ( String eventName , Object source ) { m_listenees . remove ( source ) ; if $F10471 ( m_listenees ) $F9096 ( m_listeneeTypes ) }
public X509Name ( Vector oids , Vector values ) { this ( oids , values , new X509DefaultEntryConverter $F72 ) ; }
$F1 public ToDoubleFunction < Stream < Tuple2 < F , Double > > > dist ( Stream < Tuple2 < F , Double > > features1 ) { Object2DoubleMap $F355799 auxMap = new Object2DoubleOpenHashMap $F200 $F72 ; auxMap . defaultReturnValue ( NUM00 ) ; DoubleAdder norm1 = new DoubleAdder $F72 ; $F22620 ( features1 ) if ( norm1 . doubleValue ( ) == NUM00 ) $F1337 $F1274 }
public LoadMetadataDetails [ ] readLoadMetadata ( String tableFolderPath ) { $F554 ( gsonObjectToRead ) DataInputStream dataInputStream = null ; BufferedReader buffReader = null ; InputStreamReader inStream = null ; String metadataFileName = tableFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . LOADMETADATA_FILENAME ; LoadMetadataDetails [ ] listOfLoadFolderDetailsArray ; AtomicFileOperations fileOperation = new AtomicFileOperationsImpl ( metadataFileName , FileFactory . getFileType ( metadataFileName ) ) ; try { if ( ! FileFactory . isFileExist ( metadataFileName , FileFactory . getFileType ( metadataFileName ) ) ) { return new LoadMetadataDetails $F380 ; } dataInputStream = fileOperation . openForRead ( ) ; inStream = new InputStreamReader ( dataInputStream , Charset . forName ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ; $F26608 ( buffReader , inStream ) listOfLoadFolderDetailsArray = gsonObjectToRead . fromJson ( buffReader , LoadMetadataDetails [ ] . class ) ; } catch ( IOException e ) { return new LoadMetadataDetails $F380 ; } finally { closeStreams ( buffReader , inStream , dataInputStream ) ; } return listOfLoadFolderDetailsArray ; }
public String toInnerHtml ( Node node , Appendable appendable ) { NodeVisitor renderer = createRenderer ( appendable ) ; node . visitChildren ( renderer ) ; $F92 ( appendable ) }
private void updateStorageViewInfo ( VPlexStorageViewInfo storageViewInfo ) { $F48207 ( discoveryMgr , _vplexApiClient ) discoveryMgr . updateStorageViewInfo ( storageViewInfo ) ; }
static $F3803 decodeAll $F34102 ( eventKeys ) { $F295581 ( eventIds , Lists ) for ( String eventKey : eventKeys ) { decodeTo ( eventKey , eventIds ) ; } return eventIds ; }
$F238095 ( lock , this , a , count , k , p , first )
private void replaceTop ( Scope topOfStack ) $F233310 ( stack , topOfStack )
public void testZeroOne $F72 { BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = BigInteger . ONE ; $F37344 ( result , aNumber , bNumber ) assertTrue ( result . equals ( BigInteger . ZERO ) ) ; $F3037 ( assertEquals , result ) }
public $F96 toByteArray ( String ascii ) { $F1933 ( ascii , EMPTY_BYTE_ARRAY ) return fromAscii ( ascii . toCharArray ( ) ) ; }
public static $F8748 copyOfRange ( $F8748 original , int start , int end ) { if ( start <= end ) { if $F237152 ( original , start ) { int length = end - start ; $F172265 ( copyLength , Math , length , original , start ) $F57515 ( copy , length ) $F21535 ( System , original , start , copy , copyLength ) return copy ; } $F38324 } $F10056 }
private void onColumnSync $F72 { int syncPosition = $F125548 ( Math , mSyncPosition , getCount ) ; SparseArray $F12404 positionHeightRatios = new SparseArray $F12404 ( syncPosition ) ; for ( $F119 ( pos , syncPosition ) ) { final GridItemRecord rec = mPositionData . get ( pos ) ; $F12576 ( rec ) Log . d ( TAG , NUM00 + pos + NUM00 + rec . heightRatio ) ; positionHeightRatios . append ( pos , rec . heightRatio ) ; } $F725 ( mPositionData ) $F12259 ( DBG , Log , TAG , mColumnWidth ) for ( $F119 ( pos , syncPosition ) ) { final GridItemRecord rec = getOrCreateRecord ( pos ) ; final double heightRatio = positionHeightRatios . get ( pos ) ; final int height = $F2354 ( mColumnWidth , heightRatio ) ; rec . heightRatio = heightRatio ; int top ; int bottom ; if ( isHeaderOrFooter ( pos ) ) { top = getLowestPositionedBottom ( ) ; bottom = top + height ; for ( $F119 ( i , mColumnCount ) ) { mColumnTops [ i ] = top ; mColumnBottoms [ i ] = bottom ; } } else { $F3666 ( column , getHighestPositionedBottomColumn ) top = mColumnBottoms [ column ] ; bottom = top + height + getChildTopMargin ( pos ) + getChildBottomMargin ( ) ; mColumnTops [ column ] = top ; mColumnBottoms [ column ] = bottom ; rec . column = column ; } if ( DBG ) Log . d ( TAG , $F3906 ( pos , top , bottom , height , heightRatio ) ) ; } $F3666 ( syncColumn , getHighestPositionedBottomColumn ) setPositionColumn ( syncPosition , syncColumn ) ; int syncToBottom = mColumnBottoms [ syncColumn ] ; int offset = - syncToBottom + mSpecificTop ; offsetAllColumnsTopAndBottom ( offset ) ; mDistanceToTop = - syncToBottom ; $F135 ( System , mColumnBottoms , mColumnTops , mColumnCount ) }
private static Map < Direction , Sprite [ ] > splitTiles ( SpriteStore st , Sprite orig ) { int twidth = NUM_ATTACK_FRAMES * TILE_SIZE ; int theight = NUM00 * TILE_SIZE ; Map < Direction , Sprite [ ] > map = new EnumMap < Direction , Sprite [ ] > ( Direction . class ) ; int y = NUM00 ; map . put ( Direction . UP , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; y += theight ; map . put ( Direction . RIGHT , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; y += theight ; map . put ( Direction . DOWN , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; y += theight ; map . put ( Direction . LEFT , st . getTiles ( orig , NUM00 , y , NUM_ATTACK_FRAMES , twidth , theight ) ) ; return map ; }
void incrementSchema ( String schemaName ) { if ( schemaName != null ) { $F99426 ( count , dbMap , schemaName ) if ( count == null ) $F101820 ( dbMap , schemaName ) else dbMap . put ( schemaName , count . intValue ( ) + NUM00 ) ; } lastDb = schemaName ; }
private String buildEventData $F72 throws JAXBException { if ( _eventParameters != null ) { try { JAXBContext jaxbContext = JAXBContext . newInstance ( EventParameters . class ) ; $F142433 ( marshaller , jaxbContext ) marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , _BOOL ) ; $F108916 ( outWriter ) $F94122 ( result , outWriter ) marshaller . marshal ( _eventParameters , result ) ; $F92 ( outWriter ) } catch ( JAXBException e ) { $F45904 ( _log , e ) throw e ; } } else $F1337 }
public boolean isProjected $F72 { return projected ; }
private boolean normalizeAttrValue ( XMLAttributes attributes , int index ) { boolean leadingSpace = _BOOL ; boolean spaceStart = _BOOL ; boolean readingNonSpace = _BOOL ; int count = NUM00 ; int eaten = NUM00 ; $F62203 ( attrValue , attributes , index ) $F1469 $F114317 ( attValue , attrValue ) ; $F4910 ( fBuffer ) attrValue . getChars ( NUM00 , attrValue . length ( ) , attValue , NUM00 ) ; for ( $F1139 ( i , attValue ) ) { if ( attValue [ i ] == NUM00 ) { if ( readingNonSpace ) { spaceStart = _BOOL ; readingNonSpace = _BOOL ; } if ( spaceStart && ! leadingSpace ) { spaceStart = _BOOL ; $F6939 ( fBuffer , attValue , i ) count ++ ; } else { if ( leadingSpace || ! spaceStart ) { eaten ++ ; } } } else { readingNonSpace = _BOOL ; spaceStart = _BOOL ; leadingSpace = _BOOL ; $F6939 ( fBuffer , attValue , i ) count ++ ; } } if $F41319 ( count , fBuffer ) { fBuffer . setLength ( count - NUM00 ) ; } $F1822 ( newValue , fBuffer ) attributes . setValue ( index , newValue ) ; $F74867 ( attrValue , newValue ) }
private Shape decodeMarkInterior ( int width , int height ) { double left = width / NUM00 - NUM00 ; double top = height / NUM00 - NUM00 ; $F2268 ( path ) path . moveTo ( left + NUM00 , top + NUM00 ) ; path . lineTo ( left + NUM00 , top + NUM00 ) ; path . lineTo ( left + NUM00 , top + NUM00 ) ; $F2272 ( path ) return path ; }
public MonotoneSolver ( final ILatticeGraph $F36711 graph , final Lattice lattice , final IStateVector < GraphNode , LatticeElement > startVector , final ITransformationProvider < GraphNode , LatticeElement > transformationProvider , final IGraphWalker < GraphNode , ObjectType > walker ) { $F826 ( graph ) $F826 ( lattice ) $F826 ( startVector ) $F826 ( transformationProvider ) final List $F36711 nodes = graph . getNodes ( ) ; if $F15256 ( nodes , startVector ) { throw new IllegalArgumentException ( String . format ( NUM00 , startVector . size ( ) , nodes . size ( ) ) ) ; } for ( final GraphNode node : nodes ) { if ( ! startVector . hasState ( node ) ) $F29526 ( node ) } this . graph = graph ; this . lattice = lattice ; this . state = startVector ; this . transformationList = transformationProvider ; this . walker = walker ; }
private Stat preparePortStatInfo ( String nativeId , URI resourceId , long iops , long timeSample ) { Stat ipPortStat = new Stat $F72 ; ipPortStat . setServiceType ( Constants . _File ) ; ipPortStat . setTimeCollected ( timeSample ) ; ipPortStat . setResourceId ( resourceId ) ; ipPortStat . setNativeGuid ( nativeId ) ; ipPortStat . setTotalIOs ( iops ) ; return ipPortStat ; }
public void testInsert3 $F72 throws SQLException { DatabaseCreator . fillParentTable ( conn ) ; DatabaseCreator . fillFKStrictTable ( conn ) ; statement . execute ( NUM00 + DatabaseCreator . TEST_TABLE5 + NUM00 + NUM00 + DatabaseCreator . FKSTRICT_TABLE + NUM00 ) ; ResultSet r = statement . executeQuery ( NUM00 + DatabaseCreator . TEST_TABLE5 ) ; $F24630 ( r ) $F92911 ( assertEquals , r ) $F59 ( r ) }
public int compareTo ( AppVersion other ) { int result = major - other . major ; if ( result == NUM00 ) { result = minor - other . minor ; } if ( result == NUM00 ) { result = patch - other . patch ; } if ( result == NUM00 && ( milestone > - NUM00 || other . milestone > - NUM00 ) ) { if ( milestone > - NUM00 ) { if ( other . milestone == - NUM00 ) $F44867 ( result ) else { result = milestone - other . milestone ; } } else { if ( other . milestone > - NUM00 ) { result = NUM00 ; } } } if ( result == NUM00 && ! ObjectUtil . nullEquals ( modifier , other . modifier ) ) { if ( modifier == null ) { result = NUM00 ; } else if ( other . modifier == null ) $F44867 ( result ) else { result = modifier . compareToIgnoreCase ( other . modifier ) ; } } return result ; }
public StreamConsumer ( InputStream stream , String charset ) { $F189568 ( in , stream ) this . charset = charset ; $F2346 ( thread ) }
public MediaSize $F14337 ( x , y , units ) { super ( x , y , units ) ; $F49689 ( x , y ) sizeVector . add ( this ) ; }
private Peer constructPeerPojo ( final PeerData peerData ) throws PeerException { $F1832 ( Preconditions , peerData ) try { PeerInfo peerInfo = fromJson ( peerData . getInfo ( ) , PeerInfo . class ) ; if ( $F140091 ( localPeerId , peerData ) ) { localPeer . setPeerInfo ( peerInfo ) ; return localPeer ; } RemotePeerImpl remotePeer = new RemotePeerImpl ( localPeerId , securityManager , peerInfo , messenger , commandResponseListener , messageResponseListener , provider , this ) ; RelationInfoMeta relationInfoMeta = new RelationInfoMeta $F72 ; $F2539 traits = relationInfoMeta . getRelationTraits ( ) ; $F16824 ( traits ) $F16824 ( traits ) $F16824 ( traits ) User peerOwner = identityManager . getUserByKeyId ( identityManager . getPeerOwnerId ( ) ) ; RelationMeta relationMeta = new RelationMeta ( peerOwner , localPeer , remotePeer , localPeer . getKeyId ( ) ) ; Relation relation = relationManager . buildRelation ( relationInfoMeta , relationMeta ) ; relation . setRelationStatus ( RelationStatus . VERIFIED ) ; relationManager . saveRelation ( relation ) ; return remotePeer ; } catch ( Exception e ) { throw new PeerException ( NUM00 , e ) ; } }
public void loadWorkspaceContents ( String xml ) throws BlocklyParserException { loadWorkspaceContents ( $F107841 ( xml ) ) ; }
private boolean compareAndDecrementWorkerCount ( int expect ) { return ctl . compareAndSet ( expect , expect - NUM00 ) ; }
public boolean load ( String fileLocation , int type ) { $F9303 ( mHasLoaded , _BOOL ) String shaderCode ; try { shaderCode = ShaderUtils . getStringFromFileInAssets ( mContext , fileLocation , _BOOL ) ; } catch ( IOException e ) { $F301 ( e ) mIsCompiled = _BOOL ; return _BOOL ; } mHasLoaded = _BOOL ; mShaderId = GLES20 . glCreateShader ( type ) ; if ( mShaderId == NUM00 ) { String msg = ( type == GLES20 . GL_VERTEX_SHADER ? NUM00 : NUM00 ) ; $F110901 ( Log , TAG , msg ) return _BOOL ; } GLES20 . glShaderSource ( mShaderId , shaderCode ) ; GLES20 . glCompileShader ( mShaderId ) ; $F11844 ( compileStatus ) GLES20 . glGetShaderiv ( mShaderId , GLES20 . GL_COMPILE_STATUS , compileStatus , NUM00 ) ; mIsCompiled = ( compileStatus [ NUM00 ] == GLES20 . GL_TRUE ) ; if ( ! mIsCompiled ) { String compileError = GLES20 . glGetShaderInfoLog ( mShaderId ) ; Log . e ( TAG , compileError ) ; GLES20 . glDeleteShader ( mShaderId ) ; } return mIsCompiled && mHasLoaded ; }
public void addChild ( PdfLayer childLayer ) { if ( childLayer . parent != null ) $F824 childLayer . parent = this ; $F21432 ( children ) children . add ( childLayer ) ; }
protected void moveRandomly ( OMPoint point , double factor , Projection proj ) { double hor = Math . random ( ) - NUM00 ; double vert = Math . random ( ) - NUM00 ; Point2D mapPoint = proj . forward ( point . getLat ( ) , point . getLon ( ) ) ; mapPoint . setLocation ( mapPoint . getX ( ) + ( hor * factor ) , mapPoint . getY ( ) + ( vert * factor ) ) ; Point2D llp = proj . inverse ( mapPoint ) ; point . setLat ( llp . getY ( ) ) ; point . setLon ( llp . getX ( ) ) ; }
private void initializeContext $F72 throws IOException { $F27462 ( workingDir , System ) File dataset = FileUtils . getFile ( workingDir + NUM00 ) ; File log4jFile = FileUtils . getFile ( workingDir + NUM00 ) ; $F94120 ( datasetFolder , destinationFolder ) $F94120 ( log4jFolder , destinationFolder ) $F1907 ( dataset ) $F1907 ( log4jFile ) FileUtils . copyFileToDirectory ( dataset , datasetFolder ) ; FileUtils . copyFileToDirectory ( log4jFile , log4jFolder ) ; }
protected boolean isTokenChar ( char ch ) { if $F255966 ( Character , ch ) return _BOOL ; if ( Character . isISOControl ( ch ) ) return _BOOL ; $F7450 ( isHttpSeparator , ch , _BOOL ) return _BOOL ; }
public static int parseInt ( FXGNode node , String value , String name ) { try $F75349 ( Integer , value ) catch ( NumberFormatException e ) { throw new FXGException ( node . getStartLine ( ) , node . getStartColumn ( ) , NUM00 , name , value ) ; } }
public static double invSqrtQuick ( final double value ) { if ( USE_JDK_MATH ) { return NUM00 / Math . sqrt ( value ) ; } return Double . longBitsToDouble ( NUM00 - ( Double . doubleToRawLongBits ( value ) > > NUM00 ) ) ; }
public void close $F72 throws IOException { $F59 ( articleIdxWriter ) $F59 ( chronoIdxWriter ) $F59 ( revisionIdxWriter ) }
private final $F96 zeroExtend $F97 ( dataToPad ) { assert null != dataToPad ; final int targetLength = NUM00 ; if ( targetLength <= dataToPad . length ) return dataToPad ; byte padded [ ] = new byte [ targetLength ] ; for ( $F1139 ( i , dataToPad ) ) padded [ i ] = dataToPad [ i ] ; for ( int i = dataToPad . length ; i < padded . length ; i ++ ) padded [ i ] = $F19905 ; return padded ; }
public void applyFromResolveInfo ( PackageManager pm , ResolveInfo info , WidgetPreviewLoader loader ) { mInfo = info ; CharSequence label = info . loadLabel ( pm ) ; mWidgetName . setText ( label ) ; mWidgetDims . setText ( String . format ( mDimensionsFormatString , NUM00 , NUM00 ) ) ; mWidgetPreviewLoader = loader ; }
private static boolean isCertificateEntry ( String alias ) throws KeyStoreException { return sKeyStore . isCertificateEntry ( alias ) ; }
public void test_unwrap_06 $F72 { String host = NUM00 ; int port = NUM00 ; $F30907 ( bbA , ByteBuffer ) $F30909 ( bb , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { SSLEngineResult res = sse . unwrap ( bb , bbA , NUM00 , bbA . length ) ; $F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } $F17395 ( fail , ex ) }
public static Window windowForWordInPosition ( int windowSize , int wordPos , $F3803 sentence ) { $F24645 ( window ) $F24645 ( onlyTokens ) int contextSize = ( int ) Math . floor ( ( windowSize - NUM00 ) / NUM00 ) ; for ( int i = wordPos - contextSize ; i <= wordPos + contextSize ; i ++ ) { if ( i < NUM00 ) $F18793 ( window ) else if $F6389 ( i , sentence ) $F18793 ( window ) else { $F18208 ( onlyTokens , sentence , i ) $F18208 ( window , sentence , i ) } } String wholeSentence = StringUtils . join ( sentence ) ; String window2 = StringUtils . join ( onlyTokens ) ; $F12747 ( begin , wholeSentence , window2 ) $F12749 ( end , begin , window2 ) return new Window ( window , begin , end ) ; }
private void fillIn ( ClassSymbol c ) { if ( completionFailureName == c . fullname ) { throw new CompletionFailure ( c , NUM00 ) ; } currentOwner = c ; $F725 ( warnedAttrs ) JavaFileObject classfile = c . classfile ; if ( classfile != null ) { JavaFileObject previousClassFile = currentClassFile ; try { if ( filling ) { Assert . error ( NUM00 + classfile . toUri ( ) + NUM00 + previousClassFile ) ; } currentClassFile = classfile ; if ( verbose ) { log . printVerbose ( $F22435 ( currentClassFile ) ) ; } if ( classfile . getKind ( ) == JavaFileObject . Kind . CLASS ) { filling = _BOOL ; try { bp = NUM00 ; buf = readInputStream ( buf , classfile . openInputStream ( ) ) ; readClassFile ( c ) ; if $F133343 ( missingTypeVariables , foundTypeVariables ) { $F17124 missing = missingTypeVariables ; $F17124 found = foundTypeVariables ; missingTypeVariables = List . nil ( ) ; foundTypeVariables = List . nil ( ) ; filling = _BOOL ; ClassType ct = ( ClassType ) currentOwner . type ; ct . supertype_field = types . subst ( ct . supertype_field , missing , found ) ; ct . interfaces_field = types . subst ( ct . interfaces_field , missing , found ) ; } else if ( missingTypeVariables . isEmpty ( ) != foundTypeVariables . isEmpty ( ) ) { Name name = missingTypeVariables . head . tsym . name ; throw badClassFile ( NUM00 , name ) ; } } finally { missingTypeVariables = List . nil ( ) ; foundTypeVariables = List . nil ( ) ; filling = _BOOL ; } } else { if ( sourceCompleter != null ) { sourceCompleter . complete ( c ) ; } else { throw new IllegalStateException ( NUM00 + classfile . toUri ( ) ) ; } } $F665 } catch ( IOException ex ) { throw badClassFile ( $F10629 ( ex ) ) ; } finally { currentClassFile = previousClassFile ; } } else { JCDiagnostic diag = diagFactory . fragment ( NUM00 , c . flatname ) ; throw newCompletionFailure ( c , diag ) ; } }
public void enable $F72 { $F14699 entries = removeIntersectedEntries ( tree . getSelectedEntries ( ) ) ; boolean enable = _BOOL ; for ( Entry entry : entries ) { if ( entry == null ) $F3468 ( enable , _BOOL ) if $F78643 ( requiredSelectionType , entry ) $F3468 ( enable , _BOOL ) if ( needsWriteAccess && entry . isReadOnly ( ) ) $F3468 ( enable , _BOOL ) } $F159338 ( entries , enable , _BOOL ) setEnabled ( enable ) ; }
public String toString $F72 { $F280 ( buffer ) if $F89491 ( getName ) $F39640 ( buffer , getName ) $F84 ( buffer ) if $F89491 ( getEnclosingTypeName ) $F39640 ( buffer , getEnclosingTypeName ) $F84 ( buffer ) if $F89491 ( getSourceName ) $F39640 ( buffer , getSourceName ) $F92 ( buffer ) }
protected void mark $F72 throws CompilationFailedException { applyToSourceUnits ( mark ) ; }
private boolean labelToKeepRec ( Node v , $F11868 ids , NodeSet keep ) { boolean hasBelow = _BOOL ; int id = $F149624 ( v ) ; if ( $F10470 ( ids ) || ids . contains ( id ) ) hasBelow = _BOOL ; for ( $F149631 ( e , v ) ) { Node w = e . getTarget ( ) ; if ( labelToKeepRec ( w , ids , keep ) ) hasBelow = _BOOL ; } if ( hasBelow ) keep . add ( v ) ; return hasBelow ; }
public void putExternalProperty ( SSOToken clientToken , String key , String value ) throws SessionException { try { sessionUtilsWrapper . checkPermissionToSetProperty ( clientToken , key , value ) ; } catch ( SessionException se ) { fireSessionEvent ( SessionEventType . PROTECTED_PROPERTY ) ; sessionLogging . logEvent ( toSessionInfo ( ) , SessionEventType . PROTECTED_PROPERTY ) ; throw se ; } internalPutProperty ( key , value ) ; $F18126 ( debug ) }
void addEdge ( MethodParameter in , MethodParameter out ) { Set < MethodParameter > outs = graph . get ( in ) ; if ( outs == null ) $F327697 ( outs , graph , in ) outs . add ( out ) ; }
public static $F2027 randomNumber ( int n ) { $F4120 ( num , n ) for ( $F1139 ( i , num ) ) { num [ i ] = ( int ) ( $F32605 ( rGen ) ) ; } return num ; }
public boolean isDeviceTV ( Context context ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { UiModeManager uiManager = ( UiModeManager ) context . getSystemService ( Context . UI_MODE_SERVICE ) ; return uiManager != null && uiManager . getCurrentModeType ( ) == Configuration . UI_MODE_TYPE_TELEVISION ; } return _BOOL ; }
protected void rcptToAuthors ( final RecipientType rt ) { for ( final Account . Id id : authors ) { add ( rt , id ) ; } }
public Object createShapeData ( Shape shape ) $F1337
private ProtectionSet createProtectionSet ( RecoverPointVolumeIngestionContext volumeContext ) { UnManagedProtectionSet umpset = volumeContext . getUnManagedProtectionSet ( ) ; ProtectionSet pset = VolumeIngestionUtil . findOrCreateProtectionSet ( volumeContext , volumeContext . getUnmanagedVolume ( ) , umpset , _dbClient ) ; volumeContext . setManagedProtectionSet ( pset ) ; return pset ; }
public synchronized void dispose $F72 { $F7254 ( isDisposed ) isDisposed = _BOOL ; ArrayList < PooledConnection > list = recycledConnections ; for ( $F12534 ( i , size , list ) ) $F80218 ( closeConnection , list , i ) }
public static String appendParameter ( CtClass type , String descriptor ) { $F1384 ( i , descriptor ) if ( i < NUM00 ) return descriptor ; else { $F280 ( newdesc ) $F6937 ( newdesc , descriptor , i ) toDescriptor ( newdesc , type ) ; $F13047 ( newdesc , descriptor , i ) $F92 ( newdesc ) } }
public void writeTo $F5474 ( bytes , offset ) throws IOException { flush ( ) ; final long end = file . length ; long pos = NUM00 ; int buffer = NUM00 ; int bytesUpto = offset ; while ( pos < end ) { int length = BUFFER_SIZE ; long nextPos = pos + length ; if ( nextPos > end ) { $F443511 ( length , end , pos ) } System . arraycopy ( file . getBuffer ( buffer ++ ) , NUM00 , bytes , bytesUpto , length ) ; bytesUpto += length ; pos = nextPos ; } }
protected int calcnCluster $F72 $F1083
public static void validateServiceName ( String serviceCode , String serviceName ) { if $F34844 ( serviceName , serviceCode ) { throw new CodedException ( X_INCONSISTENT_HEADERS , NUM00 + NUM00 ) ; } }
protected static void initCMYKColorspace $F72 { if ( ICCProfileForRGB == null ) { rgbModel = new ComponentColorModel ( rgbCS , $F183429 , _BOOL , _BOOL , ColorModel . OPAQUE , DataBuffer . TYPE_BYTE ) ; } else { final int compCount = rgbCS . getNumComponents ( ) ; $F64664 ( values , compCount ) for ( $F119 ( i , compCount ) ) $F5629 ( values , i ) rgbModel = new ComponentColorModel ( rgbCS , values , _BOOL , _BOOL , ColorModel . OPAQUE , DataBuffer . TYPE_BYTE ) ; } final FastColorSpaceCMYK cmykCS = new FastColorSpaceCMYK $F72 ; CSToRGB = new ColorConvertOp ( cmykCS , rgbCS , ColorSpaces . hints ) ; }
private void addNotificationCategorySeparator ( JPanel panel ) { JSeparator jsep = new JSeparator ( SwingConstants . HORIZONTAL ) ; jsep . setMaximumSize ( new Dimension ( Short . MAX_VALUE , NUM00 ) ) ; panel . add ( jsep ) ; }
public void clearDraggedOperators $F72 { this . draggedOperators = Collections . unmodifiableList ( Collections . < Operator > $F9639 ) ; }
public FakeClock resetTime $F72 { fakeNowMs . set ( baseTimeMs ) ; return this ; }
public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener )
public GSERParser ( CharSequence value ) { Reject . checkNotNull ( value ) ; this . gserValue = value . toString ( ) ; this . pos = NUM00 ; this . length = value . length ( ) ; }
public Slice ( double start , double end , boolean visible ) $F9180 ( this , start , end , visible )
public static void injectToTarget ( Object target , Bundle data ) { $F57400 ( target , data ) ParcelInjector injector ; try { $F5998 ( injector , getInjectorByClass , target ) ; injector . injectDataToTarget ( target , data ) ; } catch ( Exception e ) { throw new RuntimeException ( String . format ( $F10629 ( e ) ) , e ) ; } }
public static boolean areBackendInitiators ( $F15661 initiators ) { boolean backend = _BOOL ; for ( Initiator initiator : initiators ) { if ( ! NullColumnValueGetter . isNullURI ( initiator . getHost ( ) ) && URIUtil . isType ( initiator . getHost ( ) , $F2522 ) ) $F3468 ( backend , _BOOL ) } return backend ; }
public boolean containsValue ( Object value ) { return map . containsValue ( value ) ; }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
public boolean hasSkins $F72 { return $F48836 ( System ) || $F48836 ( System ) ; }
public String toString $F72 { $F83 ( builder ) if ( type != null ) $F86383 ( name , builder , attributes ) $F92 ( builder ) }
public void makeImmutable $F72 { if ( ! isImmutable ) { overflowEntries = overflowEntries . isEmpty ( ) ? Collections . $F9340 $F100460 : Collections . unmodifiableMap ( overflowEntries ) ; isImmutable = _BOOL ; } }
protected void parseNames $F72 { while ( reader . hasNextCharacter ( ) ) { final char character = next ( ) ; if $F104645 ( Strings , character ) { addName ( ) ; $F598 } else if ( character == blockOpening ) $F151805 ( addName ) else $F288 ( builder , character ) } if $F4329 ( GdxArrays , tags ) $F1210 ( throwException ) }
protected void writeZip64CentralDirectory $F72 throws IOException { if ( zip64Mode == Zip64Mode . Never ) $F932 if ( ! hasUsedZip64 && ( cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC || entries . size ( ) >= ZIP64_MAGIC_SHORT ) ) { hasUsedZip64 = _BOOL ; } $F24126 ( hasUsedZip64 ) long offset = written ; writeOut ( ZIP64_EOCD_SIG ) ; writeOut ( ZipEightByteInteger . getBytes ( SHORT + SHORT + WORD + WORD + DWORD + DWORD + DWORD + DWORD ) ) ; writeOut ( ZipShort . getBytes ( ZIP64_MIN_VERSION ) ) ; writeOut ( ZipShort . getBytes ( ZIP64_MIN_VERSION ) ) ; writeOut ( LZERO ) ; writeOut ( LZERO ) ; $F96 num = ZipEightByteInteger . getBytes ( entries . size ( ) ) ; writeOut ( num ) ; writeOut ( num ) ; writeOut ( ZipEightByteInteger . getBytes ( cdLength ) ) ; writeOut ( ZipEightByteInteger . getBytes ( cdOffset ) ) ; writeOut ( ZIP64_EOCD_LOC_SIG ) ; writeOut ( LZERO ) ; writeOut ( ZipEightByteInteger . getBytes ( offset ) ) ; writeOut ( ONE ) ; }
public boolean isCacheValid ( int row ) $F8314 ( m_valid , row )
public void finish $F72 throws IOException $F9099 ( checkClosed , write )
public final void readFully $F24576 ( b , off , len ) throws $F3258 { if ( len < NUM00 ) $F81129 int n = NUM00 ; while ( n < len ) { int count = read ( b , off + n , len - n ) ; $F5148 ( count ) n += count ; } }
public SVGRasterizer ( InputStream istream ) { this . input = new TranscoderInput ( istream ) ; }
private static $F44535 directExecute ( Runnable runnable , int delay ) { $F44535 future = null ; if ( delay > NUM00 ) { if ( ! ( executor instanceof ScheduledExecutorService ) ) $F825 ScheduledExecutorService scheduledExecutorService = ( ScheduledExecutorService ) executor ; $F44542 ( future , scheduledExecutorService , runnable , delay , TimeUnit ) ; } else { if ( executor instanceof ExecutorService ) { ExecutorService executorService = ( ExecutorService ) executor ; future = executorService . submit ( runnable ) ; } else $F44547 ( executor , runnable ) } return future ; }
$F1 public void onPatchVersionCheckFail ( File patchFile , SharePatchInfo oldPatchInfo , String patchFileVersion , boolean isUpgradePatch ) { TinkerLog . i ( TAG , NUM00 , patchFile . getAbsolutePath ( ) , patchFileVersion , isUpgradePatch ) ; }
public void init ( boolean forEncryption , CipherParameters params ) throws IllegalArgumentException { if ( ! ( params instanceof ParametersWithIV ) ) $F825 $F5621 ( ivParams , params ) $F5623 ( iv , ivParams ) if ( iv == null || iv . length != NUM00 ) $F825 if ( ! ( ivParams . getParameters ( ) instanceof KeyParameter ) ) $F825 KeyParameter key = ( KeyParameter ) ivParams . getParameters ( ) ; workingIV = new byte [ key . getKey ( ) . length ] ; workingKey = new byte [ key . getKey ( ) . length ] ; $F3936 ( lfsr , STATE_SIZE ) $F3936 ( nfsr , STATE_SIZE ) $F46945 ( out ) $F7057 ( System , iv , workingIV ) System . arraycopy ( key . getKey ( ) , NUM00 , workingKey , NUM00 , key . getKey ( ) . length ) ; reset ( ) ; }
GridMemcachedMessage $F72 $F845
public ExtensionForcedUser $F72 $F9099 ( super , initialize )
private String replacePlaceholders $F5805 ( query , replacements ) { String resultQuery = query ; for ( $F19318 ( entry , replacements ) ) { resultQuery = resultQuery . replace ( $F15245 ( entry ) ) ; } return resultQuery ; }
protected int readFully ( InputStream in , byte $F76061 ) throws $F3258 { for ( $F1139 ( i , buffer ) ) { $F7468 ( q , in ) $F101463 ( q , i ) $F8214 ( buffer , i , q ) } return buffer . length ; }
public void destroyBucket ( AutoMixBucket bucket ) { SharedPreferences prefs = getPrefs ( ) ; $F37526 ( editor , prefs ) $F2689 set = new $F2611 ( prefs . getStringSet ( PREF_BUCKETS_IDS , new $F32030 $F72 ) ) ; set . remove ( bucket . getSessionId ( ) ) ; editor . putStringSet ( PREF_BUCKETS_IDS , set ) ; $F37527 ( editor ) mBuckets . remove ( bucket ) ; }
public void clearChanged $F72 $F24242 ( changed , _BOOL )
public static $F131 convertParams ( $F131 source , $F63826 ( target ) ) { $F193824 ( converted , target ) for ( $F1139 ( i , target ) ) { converted [ i ] = convert ( source [ i ] , target [ i ] ) ; } return converted ; }
private void rProbeAndAddHopsToCandidateSet ( Hop hop , HashSet < Hop > probeSet , HashSet < Pair < Hop , Hop > > candSet ) { if ( hop . getVisited ( ) == VisitStatus . DONE ) $F665 if ( hop . getInput ( ) != null ) for ( Hop c : hop . getInput ( ) ) { if $F2200 ( probeSet , c ) rProbeAndAddHopsToCandidateSet ( c , probeSet , candSet ) ; else { candSet . add ( new Pair < Hop , Hop > ( hop , c ) ) ; } } hop . setVisited ( VisitStatus . DONE ) ; }
protected void parse ( DataInputStream stream ) throws Exception { $F5961 ( value , stream ) }
$F3803 asList $F72 { if ( more ) { list . set ( $F2281 ( list ) , NUM00 ) ; } $F26666 ( Collections , list ) }
public void testNotNeg $F72 { $F53390 int aSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) BigInteger result = aNumber . not ( ) ; $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public CacheStatResource ( String resourceIdentifier , CacheResource cacheResource ) { super ( resourceIdentifier ) ; this . cacheResource = cacheResource ; relativeCacheStats = cacheResource . getCacheStats ( ) ; }
public $F42106 addTargetVolumeFullCopies $F72 { $F28584 fullCopies = Lists . newArrayList ( ) ; $F42106 $F8690 ( fullCopiesMap ) ; URI targetCG = null ; for ( URI volumeId : uris ( volumeIds ) ) { $F141871 ( targets , getTargets , volumeId ) for ( URI target : targets ) { $F5178 ( targetCG , getConsistencyGroup , target ) $F141871 ( volumeFullCopies , getFullCopies , target ) fullCopies . addAll ( volumeFullCopies ) ; fullCopiesMap . put ( target , volumeFullCopies ) ; } } if ( $F1030 ( fullCopies ) && targetCG != null ) { BlockStorageUtils . addVolumesToConsistencyGroup ( targetCG , fullCopies ) ; } return fullCopiesMap ; }
WeatherAttribute ( int max , String ... desc ) { maxValue = max ; value = Rand . rand ( max + NUM00 ) ; this . desc = desc ; }
protected ClassLoader ( ClassLoader parentLoader ) { $F8108 ( sc , System ) if ( sc != null ) { sc . checkCreateClassLoader ( ) ; } parentClassLoader = parentLoader ; definedPackages = new HashMap < String , Package > $F72 ; loadedClasses = new HashMap < String , $F6969 > $F72 ; packageCertificates = new Hashtable < String , $F65927 > $F72 ; }
static public double log10 ( double inValue ) { return $F49357 ( Math , inValue ) ; }
void updateFeatureCounts ( $F2027 translationIds , List < List < RichTranslation $F57784 > > nbestLists ) { for ( $F1139 ( i , translationIds ) ) { $F2695 ( features ) for ( RichTranslation $F57784 trans : nbestLists . get ( i ) ) { for ( FeatureValue $F4 f : trans . features ) { features . add ( f . name ) ; } } synchronized ( clippedFeatureIndex ) { for ( String fName : features ) { $F86394 ( ids , clippedFeatureIndex , fName ) if ( ids == null ) { $F129524 ( ids ) ; clippedFeatureIndex . put ( fName , ids ) ; } if $F10255 ( ids , minFeatureCount ) $F24617 ( ids , translationIds , i ) } } } }
$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log )
private void addNativeExpressAds $F72 { for ( int i = NUM00 ; i <= mRecyclerViewItems . size ( ) ; i += ITEMS_PER_AD ) { final NativeExpressAdView adView = new NativeExpressAdView ( MainActivity . this ) ; mRecyclerViewItems . add ( i , adView ) ; } }
protected boolean accept ( final IChangeRecord record ) { return _BOOL ; }
public final T allocate $F72 { AtomicInteger topRef = _top ; while ( _BOOL ) { $F87905 ( top , topRef ) if ( top <= NUM00 ) $F1337 else if ( topRef . compareAndSet ( top , top - NUM00 ) ) { T value = _freeStack . getAndSet ( top - NUM00 , null ) ; $F21525 ( value ) } } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public void putResponseGetAllResources $F24643 ( resources ) { $F980 ( logger ) ResourceSet resourceSet = new ResourceSet $F72 ; for ( String res : resources ) { RemoteResource resource = gson . fromJson ( res , RemoteResource . class ) ; resource . setResourcePoolConnector ( this ) ; resourceSet . add ( resource ) ; } synchronized ( getAllResourceResponse ) { getAllResourceResponse . add ( resourceSet ) ; $F8071 ( getAllResourceResponse ) } }
public static $F10651 toAvPairMap ( $F11290 ( names ) , final String value ) { if ( value == null ) { return Collections . EMPTY_MAP ; } if $F4251 ( names ) { return new HashMap $F72 ; } final $F10651 map = new HashMap < String , $F2689 > $F716 ( names ) ; final $F2689 set = new $F2690 $F989 ; set . add ( value ) ; for ( final String name : names ) $F1717 ( map , name , set ) return map ; }
public PrefixTagger ( MaxentTagger maxentTagger ) { super ( maxentTagger ) ; this . leftWindow = leftWindow ( ) ; this . rightWindow = rightWindow ( ) ; this . offset = leftWindow ( ) ; }
$F1 public void performRequest ( String request ) { $F87844 ( request , stop ) }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public synchronized void kill $F72 { running = _BOOL ; closed = _BOOL ; $F29053 ( STDIN ) try $F17624 ( process ) $F3957 }
private Iterable $F9183 splitArray $F23416 ( arr ) { $F30975 ( len1 , arr ) int len2 = len1 + arr . length % NUM00 ; $F4120 ( a1 , len1 ) $F4120 ( a2 , len2 ) $F135 ( System , arr , a1 , len1 ) $F21535 ( System , arr , len1 , a2 , len2 ) return Arrays . asList ( a1 , a2 ) ; }
public void put ( E e ) throws InterruptedException { checkNotNull ( e ) ; $F677 ( lock , this ) $F678 ( lock ) try { while ( count == items . length ) $F681 ( notFull ) enqueue ( e ) ; } $F796 ( lock ) }
$F122843 $F32043 public void shouldCaptureQueryEventData $F72 throws Exception { startClient ( null ) ; counters . consumeAll ( NUM00 , TimeUnit . SECONDS ) ; List < QueryEventData > allQueryEvents = recordedEventData ( QueryEventData . class , - NUM00 ) ; $F22620 ( allQueryEvents ) }
private List < ValidationError > checkForNoRatesPresent $F72 { if $F171402 ( overheadRates ) return Arrays . asList ( new ValidationError $F6600 ) ; else $F1274 }
public void modifyExport ( String id , String zoneName , IsilonExport exp ) throws IsilonException { String uriWithZoneName = getURIWithZoneName ( id , zoneName ) ; modify ( _baseUrl . resolve ( URI_NFS_EXPORTS ) , uriWithZoneName , NUM00 , exp ) ; }
public double measureNumIterations $F72 $F1652 ( m_Classifiers )
public void markPotentiallyUnknownBit ( LocalVariableBinding local ) { if ( this != DEAD_END ) { this . tagBits |= NULL_FLAG_MASK ; int position ; long mask ; if ( ( position = local . id + this . maxFieldCount ) < BitCacheSize ) { mask = NUM00 < < position ; isTrue ( ( this . nullBit1 & mask ) == NUM00 , NUM00 ) ; this . nullBit4 |= mask ; if ( COVERAGE_TEST_FLAG ) { if ( CoverageTestId == NUM00 ) { this . nullBit4 = ~ NUM00 ; } } } else { int vectorIndex = ( position / BitCacheSize ) - NUM00 ; if ( this . extra == null ) { int length = vectorIndex + NUM00 ; this . extra = new long [ extraLength ] [ ] ; for ( $F119 ( j , extraLength ) ) { this . extra [ j ] = new long [ length ] ; } } else { int oldLength ; if ( vectorIndex >= ( oldLength = $F239428 ( this ) ) ) { for ( $F119 ( j , extraLength ) ) { System . arraycopy ( this . extra [ j ] , NUM00 , ( this . extra [ j ] = new long [ vectorIndex + NUM00 ] ) , NUM00 , oldLength ) ; } } } mask = NUM00 < < ( position % BitCacheSize ) ; isTrue ( ( $F239445 ( this , vectorIndex ) & mask ) == NUM00 , NUM00 ) ; $F239445 ( this , vectorIndex ) |= mask ; if ( COVERAGE_TEST_FLAG ) { if ( CoverageTestId == NUM00 ) { $F239445 ( this , vectorIndex ) = ~ NUM00 ; } } } } }
$F96202 ( dict )
public static boolean aboveOrEqual ( int a , int b ) { return Integer . compareUnsigned ( a , b ) >= NUM00 ; }
protected void awaitCompletionComputeValuesAndShutdown $F72 { $F5795 ( runExecutorAndAwaitCompletion ) if $F585 ( logger ) printStats ( ) ; $F733 ( executor ) while ( ! executor . isTerminated ( ) ) { $F110998 ( Thread , e ) } }
public Flags flagList $F72 throws DecodingException { Flags flags = new Flags $F72 ; nextWordChar ( ) ; consumeChar ( NUM00 ) ; CharacterValidator validator = new NoopCharValidator $F72 ; String nextWord = consumeWord ( validator ) ; while $F2364 ( nextWord ) { DecoderUtils . setFlag ( nextWord , flags ) ; nextWord = consumeWord ( validator ) ; } if $F4012 ( nextWord ) { $F1384 ( parenIndex , nextWord ) if ( parenIndex > NUM00 ) { $F66071 ( nextFlag , nextWord , parenIndex ) DecoderUtils . setFlag ( nextFlag , flags ) ; } } return flags ; }
protected RestClientItf createNewRestClient ( URI endpoint , String username , String password , String version , Client client ) { XtremIOClient xioClient = null ; if ( $F1031 ( version ) && Integer . valueOf ( version . split ( DOT_OPERATOR ) [ NUM00 ] ) >= XIO_MIN_4X_VERSION ) { xioClient = new XtremIOV2Client ( endpoint , username , password , client ) ; } else { xioClient = new XtremIOV1Client ( endpoint , username , password , client ) ; } return xioClient ; }
public String diff_text2 $F68061 ( diffs ) { $F83 ( text ) for ( Diff aDiff : diffs ) { if ( aDiff . operation != Operation . DELETE ) $F68065 ( text , aDiff ) } $F92 ( text ) }
static private $F11685 $F57915 toJavaList ( $F57915 values , int rows , int columns ) { $F57915 $F719 ( result , values ) ; for ( $F2277 ( i , values ) ) { int row = i / columns ; int column = i % columns ; E value = values . get ( ( column * rows ) + row ) ; result . add ( value ) ; } return result ; }
public void lineArrow ( final int x0 , final int y0 , final int x1 , final int y1 , final int sidelength , final int padding , final long lineColor , final long arrowColor ) { final double dx = x1 - x0 ; final double dy = y1 - y0 ; final double angle = Math . atan2 ( dy , dx ) ; final double d = Math . sqrt ( ( dx * dx + dy * dy ) ) ; final double arrowtip = d - padding ; final double arrowlength = TL * sidelength ; final double arrowbase = arrowtip - arrowlength ; final double xn = Math . cos ( angle ) ; final double yn = Math . sin ( angle ) ; final int xt = x0 + $F433831 ( arrowtip , xn ) ; final int yt = y0 + $F433831 ( arrowtip , yn ) ; final double xb = x0 + arrowbase * xn ; final double yb = y0 + arrowbase * yn ; final double sl2 = sidelength / NUM00 ; final double xk = sl2 * Math . cos ( angle + PI2 ) ; final double yk = sl2 * Math . sin ( angle + PI2 ) ; $F66967 ( x2 , xb , xk ) $F66967 ( y2 , yb , yk ) $F66963 ( x3 , xb , xk ) $F66963 ( y3 , yb , yk ) setColor ( lineColor ) ; line ( x0 , y0 , ( int ) xb , ( int ) yb , NUM00 ) ; setColor ( arrowColor ) ; line ( x2 , y2 , x3 , y3 , NUM00 ) ; line ( x2 , y2 , xt , yt , NUM00 ) ; line ( x3 , y3 , xt , yt , NUM00 ) ; }
public String toHtml ( Node node , Appendable appendable ) { NodeVisitor renderer = createRenderer ( appendable ) ; node . visit ( renderer ) ; $F92 ( appendable ) }
public static $F806 toCommaSeparatedArray ( String str ) throws IOException { return str . split ( NUM00 ) ; }
$F1 public final Object put ( String key , Object value ) $F8587 ( set , key , value )
private void appendFloatType $F94426 ( sb , fieldType , fieldWidth ) $F86 ( sb )
private HttpEntity paramsToEntity ( RequestParams params , ResponseHandlerInterface responseHandler ) { HttpEntity entity = null ; try { if ( params != null ) { entity = params . getEntity ( responseHandler ) ; } } catch ( Throwable t ) { if ( responseHandler != null ) responseHandler . sendFailureMessage ( NUM00 , null , null , t ) ; else $F301 ( t ) } return entity ; }
public static boolean isInstallableEditing ( EnumSet < EmbeddingFlags > flagSet ) $F18905 ( flagSet )
public void testMultiplyScalePosPos $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = NUM00 ; String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F168802 ( result , aNumber , bNumber ) $F1925 ( assertEquals , c , result ) $F1928 ( assertEquals , cScale , result ) }
public Iterator $F25924 resourceIterator $F72 $F16048 ( resourceList )
public double nextUniform ( double lower , double upper ) { if ( upper <= lower ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . LOWER_BOUND_NOT_BELOW_UPPER_BOUND , lower , upper ) ; } if ( Double . isInfinite ( lower ) || Double . isInfinite ( upper ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . INFINITE_BOUND ) ; } if $F89880 ( Double , lower , upper ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NAN_NOT_ALLOWED ) ; } final double u = randomGenerator . nextDouble ( ) ; return u * upper + ( NUM00 - u ) * lower ; }
public ShapeTileBox bounding_box $F72 { PlaPointInt lower_left = new PlaPointInt ( Math . floor ( v_x ) , Math . floor ( v_y ) ) ; PlaPointInt upper_right = new PlaPointInt ( Math . ceil ( v_x ) , Math . ceil ( v_y ) ) ; return new ShapeTileBox ( lower_left , upper_right ) ; }
public void addInterface ( String name ) { cachedInterfaces = null ; int info = constPool . addClassInfo ( name ) ; if ( interfaces == null ) { $F4470 ( interfaces ) interfaces [ NUM00 ] = info ; } else { int n = interfaces . length ; $F65716 ( newarray , n ) $F135 ( System , interfaces , newarray , n ) newarray [ n ] = info ; interfaces = newarray ; } }
private void biomeFactor ( final int x , final int z , final double addHeight ) { float smoothVolatility = NUM00 ; float smoothHeight = NUM00 ; float biomeWeightSum = NUM00 ; final Biome centerBiomeConfig = getCenterBiome ( x , z ) ; final int lookRadius = this . maxSmoothRadius ; for ( $F142929 ( nextX , lookRadius ) ) { for ( $F142929 ( nextZ , lookRadius ) ) { final Biome biome = getOffsetBiome ( x , z , nextX , nextZ ) ; final float biomeHeight = biome . getBaseHeight ( ) ; final float biomeVolatility = biome . getHeightVariation ( ) ; double biomeWeight = calcBiomeWeight ( nextX , nextZ , biomeHeight ) ; $F15467 ( biomeWeight , Math ) if ( biomeHeight > centerBiomeConfig . getBaseHeight ( ) ) { biomeWeight /= NUM00 ; } smoothVolatility += biomeVolatility * biomeWeight ; smoothHeight += biomeHeight * biomeWeight ; biomeWeightSum += biomeWeight ; } } smoothVolatility /= biomeWeightSum ; smoothHeight /= biomeWeightSum ; this . biomeVolatility = smoothVolatility * NUM00 + NUM00 ; this . biomeVolatility *= NUM00 / NUM00 ; this . biomeHeight = NUM00 / NUM00 ; this . biomeHeight += smoothHeight * NUM00 / NUM00 ; this . biomeHeight += NUM00 * addHeight * NUM00 / NUM00 ; }
$F1431 public static MIssue create ( Properties ctx , String hexInput ) { HashMap hmIn = null ; try { $F96 byteArray = Secure . convertHexString ( hexInput ) ; $F5950 ( bIn , byteArray ) $F67402 ( oIn , bIn ) hmIn = ( HashMap ) oIn . readObject ( ) ; } catch ( Exception e ) { $F51338 ( s_log , Level , e ) $F1274 } MIssue issue = new MIssue ( ctx , ( $F12078 ) hmIn ) ; return issue ; }
void flushBuffer $F72 throws IOException { se . flushBuffer ( ) ; }
public static void showUnknownError ( Context context , Throwable t , DialogInterface . OnCancelListener listener ) { showError ( context , String . format ( context . getString ( R . string . afc_pmsg_unknown_error ) , t ) , listener ) ; }
private static boolean makeConcavePolygon ( final PlanetModel planetModel , final GeoCompositePolygon rval , final MutableBoolean seenConcave , final EdgeBuffer edgeBuffer , final List < GeoPolygon > holes , final GeoPoint testPoint ) { $F19795 ( edgeBuffer , _BOOL ) if ( seenConcave . value ) $F825 seenConcave . value = _BOOL ; if $F6214 ( edgeBuffer ) $F825 final List < GeoPoint > points = new $F162971 $F716 ( edgeBuffer ) ; final BitSet internalEdges = new BitSet $F113103 ( edgeBuffer ) ; Edge edge = edgeBuffer . pickOne ( ) ; boolean isInternal = _BOOL ; for ( $F2277 ( i , edgeBuffer ) ) { points . add ( edge . startPoint ) ; if $F18523 ( i , edgeBuffer ) { internalEdges . set ( i , edge . isInternal ) ; } else $F145688 ( isInternal , edge ) edge = edgeBuffer . getNext ( edge ) ; } if ( testPoint != null && holes != null && $F3816 ( holes ) ) { final GeoPolygon testPolygon = new GeoConcavePolygon ( planetModel , points , null , internalEdges , isInternal ) ; if ( testPolygon . isWithin ( testPoint ) ) { return _BOOL ; } } final GeoPolygon realPolygon = new GeoConcavePolygon ( planetModel , points , holes , internalEdges , isInternal ) ; if ( testPoint != null && $F45555 ( holes ) ) { if ( realPolygon . isWithin ( testPoint ) ) { return _BOOL ; } } rval . addShape ( realPolygon ) ; return _BOOL ; }
public void addButton ( final JButton theButton ) $F207 ( customButtonPanel , theButton )
void swapCursor ( long monthMillis , $F5466 EventCursor cursor , ContentObserver contentObserver ) { for ( $F2277 ( i , mMonths ) ) { if ( CalendarUtils . sameMonth ( monthMillis , mMonths . get ( i ) ) ) { swapCursor ( i , cursor , contentObserver ) ; $F597 } } }
final boolean close $F72 { return ! closed . getAndSet ( _BOOL ) ; }
public $F96 encryptRaw ( $F96 baseKey , int usage , $F96 ivec , $F96 plaintext , int start , int len ) throws GeneralSecurityException , KrbCryptoException { if $F150622 ( KeyUsage , usage ) { throw new GeneralSecurityException ( NUM00 + usage ) ; } $F96 output = encryptCTS ( baseKey , usage , ivec , null , plaintext , start , len , _BOOL ) ; return output ; }
private void fixbug ( Document doc ) { $F9029 ( element , doc ) $F25302 ( element , fixbug ) }
private String toHexString $F97 ( block ) { $F280 ( buf ) int len = block . length ; for ( $F119 ( i , len ) ) { byte2hex ( block [ i ] , buf ) ; $F24364 ( i , len , buf ) } $F92 ( buf ) }
public static String removeDeployUri ( String uri ) { if $F38892 ( uri ) { return uri ; } $F129840 ( loc , uri ) if ( loc == - NUM00 ) $F1337 else $F61217 ( uri , loc ) }
public static double loss ( double pred , double y ) { $F107213 ( Math , y , pred ) }
public boolean needSignatureFileBytes $F72 { return sfBytes == null ; }
public void insert ( T object , int index ) { synchronized ( mLock ) $F42308 ( mObjects , index , object ) if ( mNotifyOnChange ) notifyItemInserted ( index ) ; }
private void loadTargetModules $F72 { for ( final Module module : target . getModules ( ) ) { module . addListener ( moduleKeeperListener ) ; modules . add ( module ) ; if ( ! module . isLoaded ( ) ) { try { $F37249 ( module ) } catch ( final CouldntLoadDataException e ) $F47994 ( errorLoadingModule , module , e ) } } step ++ ; }
public BloomFilter ( double falsePositiveProbability , int expectedNumberOfElements ) { this ( Math . ceil ( - ( $F49357 ( Math , falsePositiveProbability ) ) ) / Math . log ( NUM00 ) , expectedNumberOfElements , ( int ) Math . ceil ( - ( $F49357 ( Math , falsePositiveProbability ) ) ) ) ; }
public synchronized void notifyBand ( final int times , final int onTime , final int offTime , final int flashColour ) { final List < BLEAction > $F204 ( list ) ; $F12490 ( colors , convertRgb , flashColour ) list . add ( new WaitAction $F989 ) ; list . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . VIBRATION_WITHOUT_LED ) ) ; list . add ( new WaitAction $F989 ) ; list . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , colors ) ) ; queue ( list ) ; }
public void test_ConstructorLjava_security_cert_CertPathParameters $F72 { try { CertPathParameters parameters = new MyCertPathParameters $F72 ; CertPathTrustManagerParameters p = new CertPathTrustManagerParameters ( parameters ) ; assertNotSame ( NUM00 , parameters , p . getParameters ( ) ) ; } $F53525 ( fail , e ) try { new CertPathTrustManagerParameters $F8320 ; fail ( NUM00 ) ; } $F53531 }
private static int buildRequestCode ( long threadId , int action ) { action ++ ; return ( int ) ( action * NUM00 + threadId ) ; }
public OuterJoinQualifier add ( String propertyLeft , String propertyRight ) { additionalProperties . add ( new PropertyValueExpressionPair ( new PropertyValueExpression ( propertyLeft ) , new PropertyValueExpression ( propertyRight ) ) ) ; return this ; }
public void insertElementAt ( int value , int at ) { if ( null == m_map ) $F74814 ( m_map , m_blocksize , m_mapSize ) else $F11084 ( m_firstFree , m_mapSize , m_blocksize , System , m_map , newMap ) $F45575 ( at , m_firstFree , System , m_map ) m_map [ at ] = value ; m_firstFree ++ ; }
protected static Dfp atanInternal ( final Dfp a ) { Dfp y = new Dfp ( a ) ; Dfp x = new Dfp ( y ) ; Dfp py = new Dfp ( y ) ; for ( $F5151 ( i ) ) { x = x . multiply ( a ) ; x = x . multiply ( a ) ; $F201387 ( x ) y = y . add ( x . divide ( i ) ) ; if $F1238 ( y , py ) $F5153 py = new Dfp ( y ) ; } return y ; }
public static String parseSegmentName ( String filename ) { int idx = indexOfSegmentName ( filename ) ; $F63871 ( idx , filename ) return filename ; }
private static Tree generateSubTree ( HashMap < Integer , Pair < IndexedWord , $F3807 > > dependencies , int root ) { $F3807 children = dependencies . get ( root ) . second ; IndexedWord tw = dependencies . get ( root ) . first ; Tree tree = new LabeledScoredTreeNode ( tw ) ; boolean addedHead = children . isEmpty ( ) ; $F3807 sortedChildren = CollectionUtils . sorted ( children ) ; for ( Integer c : sortedChildren ) { if ( c > root && ! addedHead ) { Tree child = new LabeledScoredTreeNode ( tw ) ; tree . addChild ( child ) ; addedHead = _BOOL ; } Tree child = generateSubTree ( dependencies , c ) ; tree . addChild ( child ) ; } if ( ! addedHead ) { Tree child = new LabeledScoredTreeNode ( tw ) ; tree . addChild ( child ) ; } return tree ; }
@ HLEFunction ( nid = NUM00 , version = NUM00 , checkInsideInterrupt = _BOOL ) public int __sceSasRevParam $F14337 ( sasCore , delay , feedback ) { checkSasHandleGood ( sasCore ) ; waveformEffectDelay = delay ; waveformEffectFeedback = feedback ; $F1082 }
static boolean isPossibleFP ( String val ) { $F11550 ( length , val ) for ( $F1316 ( i , length ) ) { $F1280 ( c , val , i ) if ( ! ( c >= NUM00 && c <= NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 ) ) { return _BOOL ; } } return _BOOL ; }
public boolean deleteTrack ( Track track ) { synchronized ( tracks ) { return tracks . removeElement ( track ) ; } }
protected static $F162971 parseKmlCoordinates ( String input ) { LinkedList < GeoPoint > tmpCoords = new LinkedList < GeoPoint > $F72 ; int i = NUM00 ; int tupleStart = NUM00 ; $F115 ( length , input ) boolean startReadingTuple = _BOOL ; while ( i < length ) { $F1280 ( c , input , i ) if $F58237 ( c ) { if ( startReadingTuple ) { $F12715 ( tuple , input , tupleStart , i ) GeoPoint p = parseKmlCoord ( tuple ) ; $F67023 ( p , tmpCoords ) startReadingTuple = _BOOL ; } } else { if ( ! startReadingTuple ) { startReadingTuple = _BOOL ; tupleStart = i ; } if ( i == length - NUM00 ) { String tuple = input . substring ( tupleStart , i + NUM00 ) ; GeoPoint p = parseKmlCoord ( tuple ) ; $F67023 ( p , tmpCoords ) } } i ++ ; } $F162971 coordinates = new $F162971 $F716 ( tmpCoords ) ; coordinates . addAll ( tmpCoords ) ; return coordinates ; }
public void paint ( Graphics2D g ) { for ( $F2277 ( i , m_nodes ) ) { WFNode node = m_nodes . get ( i ) ; $F5112 ( rect , node ) $F339 ( g , Color ) g . drawRect ( $F941 ( rect ) ) ; Graphics2D t = ( Graphics2D ) g . create ( $F941 ( rect ) ) ; node . paint ( t ) ; $F355 ( t ) } createLines ( ) ; for ( $F2277 ( i , m_lines ) ) { WFLine line = ( WFLine ) m_lines . get ( i ) ; line . paint ( g ) ; } }
ServerSessionContext registerRequest ( long sequence , Runnable runnable ) $F67896 ( commands , sequence , runnable , this )
public void testConstructorSignBytesZeroNull2 $F72 { byte $F3009 = $F845 ; int aSign = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public void addPreferencesButton $F72 { $F79691 ( prefsButton ) prefsButton . setHideActionText ( _BOOL ) ; prefsButton . setAction ( TimeSeriesPlotActions . getPropertiesDialogAction ( this ) ) ; buttonPanel . add ( prefsButton ) ; }
public static void findIndexMatches ( SearchPattern pattern , Index index , IndexQueryRequestor requestor , SearchParticipant participant , IJavaSearchScope scope , IProgressMonitor monitor ) throws IOException { pattern . findIndexMatches ( index , requestor , participant , scope , monitor ) ; }
public static void logInfo $F4353 ( message , args ) { $F3869 ( message , MessageFormat , args ) log ( IStatus . INFO , IStatus . OK , message , null ) ; }
public static boolean occupy ( int waitMs ) { if ( occupiedUntil != null && occupiedUntil . after ( $F4094 ) ) { return _BOOL ; } occupiedUntil = DateUtils . addMilliseconds ( $F4094 , waitMs ) ; return _BOOL ; }
public boolean [ ] [ ] moralize ( BayesNet bayesNet ) { int nNodes = bayesNet . getNrOfNodes ( ) ; boolean [ ] [ ] bAdjacencyMatrix = new boolean [ nNodes ] [ nNodes ] ; for ( $F119 ( iNode , nNodes ) ) { ParentSet parents = bayesNet . getParentSets ( ) [ iNode ] ; moralizeNode ( parents , iNode , bAdjacencyMatrix ) ; } return bAdjacencyMatrix ; }
public void addDivider ( ImageView v ) { RelativeLayout . LayoutParams dividerParams = new RelativeLayout . LayoutParams ( LayoutParams . FILL_PARENT , LayoutParams . WRAP_CONTENT ) ; if ( mImageView != null ) { dividerParams . addRule ( RelativeLayout . BELOW , mImageView . getId ( ) ) ; } else if ( mMissingImage != null ) { dividerParams . addRule ( RelativeLayout . BELOW , mMissingImage . getId ( ) ) ; } else if ( mVideoButton != null ) { dividerParams . addRule ( RelativeLayout . BELOW , mVideoButton . getId ( ) ) ; } else if ( mAudioButton != null ) { dividerParams . addRule ( RelativeLayout . BELOW , mAudioButton . getId ( ) ) ; } else if ( mView_Text != null ) { dividerParams . addRule ( RelativeLayout . BELOW , mView_Text . getId ( ) ) ; } else $F17931 ( Log , t ) addView ( v , dividerParams ) ; }
private double findLength ( Point originPoint , Point targetPoint ) { int x1 = originPoint . x ; int y1 = originPoint . y ; int x2 = targetPoint . x ; int y2 = targetPoint . y ; double sideA = x2 - x1 ; double sideB = ( y1 > y2 ? ( y1 - y2 ) : ( y2 - y1 ) ) ; $F6482 ( sideB , sideA ) return Math . sqrt ( Math . pow ( sideA , NUM00 ) + Math . pow ( sideB , NUM00 ) ) ; }
public void testCase4 $F72 { $F7829 $F10679 int aSign = NUM00 ; int bSign = - NUM00 ; $F10682 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
public static Automaton determinizeSimple ( Automaton a , $F11868 initialset ) { if $F25441 ( a ) { return a ; } $F2027 points = a . getStartPoints ( ) ; Map < $F11868 , $F11868 > $F8690 ( sets ) ; LinkedList < $F11868 > $F19827 ( worklist ) ; Map < $F11868 , Integer > $F8690 ( newstate ) ; $F22747 ( sets , initialset ) worklist . add ( initialset ) ; Automaton . Builder result = new Automaton . Builder $F72 ; $F25451 ( result ) $F101820 ( newstate , initialset ) Transition t = new Transition $F72 ; while $F3817 ( worklist ) { $F11868 s = worklist . removeFirst ( ) ; $F85651 ( r , newstate , s ) for ( int q : s ) { if ( a . isAccept ( q ) ) { result . setAccept ( r , _BOOL ) ; $F597 } } for ( $F1139 ( n , points ) ) { $F114818 ( p ) for ( int q : s ) { int count = a . initTransition ( q , t ) ; for ( $F119 ( i , count ) ) { a . getNextTransition ( t ) ; if ( t . min <= points [ n ] && points [ n ] <= t . max ) { p . add ( t . dest ) ; } } } if $F15257 ( sets , p ) { $F22747 ( sets , p ) worklist . add ( p ) ; newstate . put ( p , result . createState ( ) ) ; } $F85651 ( q , newstate , p ) int min = points [ n ] ; int max ; if ( n + NUM00 < points . length ) { max = points [ n + NUM00 ] - NUM00 ; } else { max = Character . MAX_CODE_POINT ; } result . addTransition ( r , q , min , max ) ; } } return Operations . removeDeadStates ( result . finish ( ) ) ; }
public static void write ( InputStream in , OutputStream out , boolean closeBoth ) throws IOException { $F12496 ( buff ) int read = NUM00 ; while ( $F29984 ( read , in , buff ) > NUM00 ) $F29756 ( out , buff , read ) $F1206 ( out ) $F308 ( closeBoth , safeCloseStreams , in , out ) }
public static double distance ( CoordinateDD p1 , CoordinateDD p2 , UNITS units ) { final double latP1 = p1 . northSouth ; final double latP2 = p2 . northSouth ; final double lonP1 = p1 . eastWest ; final double lonP2 = p2 . eastWest ; if ( latP1 == latP2 && lonP1 == lonP2 ) $F1082 double distRad = Math . acos ( Math . sin ( toRadians ( latP1 ) ) * Math . sin ( toRadians ( latP2 ) ) + Math . cos ( toRadians ( latP1 ) ) * Math . cos ( toRadians ( latP2 ) ) * Math . cos ( toRadians ( lonP1 - lonP2 ) ) ) ; final double distAsDegree = toDegrees ( distRad ) ; return metersToUnits ( distAsDegree * NUM00 * NUM00 * NUM00 , units ) ; }
public static LiquidNetwork initNetwork $F72 { Random random = new Random $F30 ( System ) ; $F8254 ( id , random ) while $F105 ( usedIds , id ) { id = random . nextInt ( ) ; } ; LiquidNetwork net = new LiquidNetwork $F72 ; usedIds . add ( id ) ; net . networkID = id ; return net ; }
public String exportXml $F72 throws IOException { $F1538 ( outputStream ) exportXml ( outputStream ) ; $F92 ( outputStream ) }
public PatternReplaceFilter ( TokenStream in , Pattern p , String replacement , boolean all ) { super ( in ) ; this . replacement = ( null == replacement ) ? NUM00 : replacement ; this . all = all ; this . m = p . matcher ( termAtt ) ; }
public boolean isMutable $F72 { return mutable ; }
public static $F2027 stableSort $F9830 ( array ) { $F22974 ( index , array ) $F22974 ( newIndex , array ) $F2027 helpIndex ; int numEqual ; array = ( $F1986 ) array . clone ( ) ; for ( $F1139 ( i , index ) ) { index [ i ] = i ; if $F1998 ( Double , array , i ) { array [ i ] = Double . MAX_VALUE ; } } quickSort ( array , index , NUM00 , array . length - NUM00 ) ; int i = NUM00 ; while ( i < index . length ) { numEqual = NUM00 ; for ( int j = i + NUM00 ; ( ( j < index . length ) && Utils . eq ( array [ index [ i ] ] , array [ index [ j ] ] ) ) ; j ++ ) numEqual ++ ; if ( numEqual > NUM00 ) { $F3936 ( helpIndex , numEqual ) for ( $F119 ( j , numEqual ) ) helpIndex [ j ] = i + j ; quickSort ( index , helpIndex , NUM00 , numEqual - NUM00 ) ; for ( $F119 ( j , numEqual ) ) newIndex [ i + j ] = index [ helpIndex [ j ] ] ; i += numEqual ; } else { newIndex [ i ] = index [ i ] ; i ++ ; } } return newIndex ; }
public void reopenReadWrite $F72 { synchronized ( mLock ) { throwIfNotOpenLocked ( ) ; $F933 ( isReadOnlyLocked ) final int oldOpenFlags = mConfigurationLocked . openFlags ; mConfigurationLocked . openFlags = ( mConfigurationLocked . openFlags & ~ OPEN_READ_MASK ) | OPEN_READWRITE ; try { mConnectionPoolLocked . reconfigure ( mConfigurationLocked ) ; } catch ( RuntimeException ex ) { mConfigurationLocked . openFlags = oldOpenFlags ; throw ex ; } } }
public static int readChars ( Reader r , $F1469 charArray ) throws IOException { int totalCharsRead = NUM00 ; $F83249 ( charsRead , r , charArray ) while ( charsRead >= NUM00 ) { totalCharsRead += charsRead ; if ( totalCharsRead == charArray . length ) $F5153 charsRead = r . read ( charArray , totalCharsRead , charArray . length - totalCharsRead ) ; } return totalCharsRead ; }
public void removeDirection ( final Direction dir , final boolean face ) { RPAction action ; int size ; action = new RPAction $F72 ; $F16824 ( action ) action . put ( NUM00 , - dir . get ( ) ) ; send ( action ) ; directions . remove ( dir ) ; $F54171 ( size , directions ) if ( size == NUM00 ) { action = new RPAction $F72 ; $F16824 ( action ) } else { if ( face ) { action = new FaceRPAction ( directions . get ( size - NUM00 ) ) ; } else { action = new MoveRPAction ( directions . get ( size - NUM00 ) ) ; } } send ( action ) ; }
public static $F1986 ndary ( int n ) { double $F3234 = new double [ n ] ; for ( $F119 ( i , n ) ) { d [ i ] = R . nextGaussian ( ) ; } return d ; }
private float applyBounce $F2267 ( velocity , distOutOfBounds , simulationRate ) { $F46660 ( isZero , distOutOfBounds , velocity ) velocity *= - NUM00 ; float bounce = BOUNCE_MULTIPLIER * Math . abs ( distOutOfBounds / mIrisRadius ) ; if ( velocity > NUM00 ) { velocity += bounce * simulationRate ; } else { velocity -= bounce * simulationRate ; } return velocity ; }
private double dot ( final int k0 , final int k1 , final $F2027 assignment0 , final $F2027 assignment1 ) { double dot = NUM00 ; $F10162 ( N , X ) int a = NUM00 , b = NUM00 ; for ( $F119 ( i , N ) ) { if ( assignment0 [ i ] != k0 ) $F598 a ++ ; for ( $F119 ( j , N ) ) { if ( assignment1 [ j ] != k1 ) $F598 dot += kernel . eval ( i , j , X , accel ) ; } } for ( $F119 ( j , N ) ) if ( assignment1 [ j ] == k1 ) b ++ ; return dot / ( a * b ) ; }
public void removeAllTextures $F72 { for ( WeakReference < CCTexture2D > texSR : textures . values ( ) ) { CCTexture2D tex = texSR . get ( ) ; if ( tex != null ) tex . releaseTexture ( CCDirector . gl ) ; } $F725 ( textures ) }
public synchronized void addToQueue ( final ImageResourceLoader imageResourceLoader , final String uri , final MutableFSImage mfsi , final int width , final int height ) { XRLog . general ( Level . FINE , NUM00 + uri ) ; _loadQueue . addLast ( new ImageLoadItem ( imageResourceLoader , uri , mfsi , width , height ) ) ; notifyAll ( ) ; }
private JNIWriter ( Context context ) { context . put ( jniWriterKey , this ) ; fileManager = context . get ( JavaFileManager . class ) ; log = Log . instance ( context ) ; Options options = Options . instance ( context ) ; verbose = options . isSet ( VERBOSE ) ; $F244456 ( checkAll , options ) this . context = context ; syms = Symtab . instance ( context ) ; $F109927 ( lineSep , System ) }
public JOSMTolerantFastXMLParser ( Sink sink , XMLStreamReader reader , boolean enableDateParsing ) { this . sink = sink ; this . enableDateParsing = enableDateParsing ; this . reader = reader ; if ( enableDateParsing ) { timestampFormat = new XmlTimestampFormat $F72 ; } else { Calendar calendar ; $F90333 ( calendar , Calendar ) $F104560 ( calendar , Calendar ) dummyTimestampContainer = new SimpleTimestampContainer $F16810 ( calendar ) ; } memberTypeParser = new MemberTypeParser $F72 ; }
public Hashtable ( int initialCapacity , float loadFactor ) { $F20450 ( initialCapacity ) if $F92586 ( loadFactor , Float ) $F18931 ( loadFactor ) $F211985 ( initialCapacity ) this . loadFactor = loadFactor ; table = new Entry [ initialCapacity ] ; $F53239 ( threshold , initialCapacity , loadFactor ) }
public static String extractReminder ( String publicURL , String accessURL ) { $F158275 ( publicURL , accessURL ) }
public void createUnderlying $F72 { if ( options != null ) { options . createUnderlying ( ) ; if ( Platform . isFxApplicationThread ( ) ) { line = new com . lynden . gmapsfx . shapes . Polyline ( options . convert ( ) ) ; } } }
private void initRasterProgram $F72 { $F130812 ( props , BufferUtils ) $F130812 ( params , BufferUtils ) int uniformsResourceIndex = glGetProgramResourceIndex ( rasterProgram , GL_UNIFORM_BLOCK , NUM00 ) ; $F36986 ( computeUboBinding , params ) $F130813 ( props , GL_BUFFER_BINDING ) glGetProgramResourceiv ( rasterProgram , GL_UNIFORM_BLOCK , uniformsResourceIndex , props , null , params ) ; $F36986 ( rasterUboBinding , params ) }
private void installVoiceData $F72 { if ( TextUtils . isEmpty ( getEngineName ( ) ) ) $F665 Intent intent = new Intent ( TextToSpeech . Engine . ACTION_INSTALL_TTS_DATA ) ; $F111932 ( intent , Intent ) intent . setPackage ( getEngineName ( ) ) ; try { Log . v ( TAG , NUM00 + intent . toUri ( NUM00 ) ) ; startActivity ( intent ) ; } catch ( ActivityNotFoundException ex ) { Log . e ( TAG , NUM00 + intent + NUM00 ) ; } }
$F1431 Symbol selectBest ( $F17111 env , Type site , $F17124 argtypes , $F17124 typeargtypes , Symbol sym , Symbol bestSoFar , boolean allowBoxing , boolean useVarargs , boolean operator ) { if ( sym . kind == ERR || ! sym . isInheritedIn ( site . tsym , types ) ) { return bestSoFar ; } else if ( useVarargs && ( sym . flags ( ) & VARARGS ) == NUM00 ) { return bestSoFar . kind >= ERRONEOUS ? new BadVarargsMethod ( ( ResolveError ) bestSoFar . baseSymbol ( ) ) : bestSoFar ; } Assert . check ( sym . kind < AMBIGUOUS ) ; try { Type mt = rawInstantiate ( env , site , sym , null , argtypes , typeargtypes , allowBoxing , useVarargs , types . noWarnings ) ; if ( ! operator || verboseResolutionMode . contains ( VerboseResolutionMode . PREDEF ) ) currentResolutionContext . addApplicableCandidate ( sym , mt ) ; } catch ( InapplicableMethodException ex ) { if ( ! operator ) currentResolutionContext . addInapplicableCandidate ( sym , ex . getDiagnostic ( ) ) ; switch ( bestSoFar . kind ) { case ABSENT_MTH : return new InapplicableSymbolError ( currentResolutionContext ) ; case WRONG_MTH : if ( operator ) return bestSoFar ; bestSoFar = new InapplicableSymbolsError ( currentResolutionContext ) ; $F1267 return bestSoFar ; } } if ( ! isAccessible ( env , site , sym ) ) { return ( bestSoFar . kind == ABSENT_MTH ) ? new AccessError ( env , site , sym ) : bestSoFar ; } return ( bestSoFar . kind > AMBIGUOUS ) ? sym : mostSpecific ( argtypes , sym , bestSoFar , env , site , allowBoxing && operator , useVarargs ) ; }
public Bitmap loadBitmap $F36827 ( uri , reqWidth , reqHeight ) { Bitmap bitmap = loadBitmapFromMemCache ( uri ) ; if ( bitmap != null ) { $F12258 ( Log , TAG , uri ) return bitmap ; } try { bitmap = loadBitmapFromDiskCache ( uri , reqWidth , reqHeight ) ; if ( bitmap != null ) { $F12258 ( Log , TAG , uri ) return bitmap ; } bitmap = loadBitmapFromHttp ( uri , reqWidth , reqHeight ) ; $F12258 ( Log , TAG , uri ) } $F12241 ( e ) if ( bitmap == null && ! mIsDiskLruCacheCreated ) { $F6173 ( Log , TAG ) bitmap = downloadBitmapFromUrl ( uri ) ; } return bitmap ; }
public boolean isSafeToExecuteSUTCode $F72 { $F686 ( current , Thread ) if $F2200 ( privilegedThreads , current ) { return _BOOL ; } else { return privilegedThreadToIgnore == current ; } }
public void testCase17 $F72 { $F45030 $F3017 $F3021 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F3024 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public $F806 readDirectory ( String dir ) { $F896 ( dir ) StringArrayOut listOut = new StringArrayOut $F72 ; try { checkResult ( LibIMobileDevice . afc_read_directory ( getRef ( ) , dir , listOut ) ) ; StringArray list = listOut . getValue ( ) ; $F8728 ( result ) if ( list != null ) { for ( $F26577 ( i ) ) { $F1729 ( s , list , i ) $F32472 ( s ) result . add ( s ) ; } } $F14862 ( result ) } finally { LibIMobileDevice . delete_StringArray_values_z ( listOut . getValue ( ) ) ; $F1900 ( listOut ) } }
public static String createArgsString $F24643 ( args ) { $F4158 ( args ) $F83 ( argsSb ) for ( String arg : args ) { if ( $F80721 ( arg ) && ! StringUtilities . isQuoted ( arg ) ) { argsSb . append ( StringUtilities . quote ( arg ) ) ; } else $F288 ( argsSb , arg ) $F84 ( argsSb ) } if $F4012 ( argsSb ) { $F90455 ( argsSb ) } $F92 ( argsSb ) }
public void addElement ( int value ) { int indexRelativeToCache = m_firstFree - m_buildCacheStartIndex ; if ( indexRelativeToCache >= NUM00 && indexRelativeToCache < m_blocksize ) { m_buildCache [ indexRelativeToCache ] = value ; ++ m_firstFree ; } else { int index = m_firstFree > > > m_SHIFT ; int offset = m_firstFree & m_MASK ; $F166813 ( index , m_map , newsize , m_numblocks , newMap , System ) $F65714 ( block , m_map , index ) $F166816 ( block , m_map , index , m_blocksize ) block [ offset ] = value ; m_buildCache = block ; m_buildCacheStartIndex = m_firstFree - offset ; ++ m_firstFree ; } }
public static $F4203 $F98026 overlap ( $F98026 lists , int before , int after ) { $F6853 ( before ) $F6853 ( after ) ListIterator < $F5675 > iter = lists . listIterator ( ) ; $F98026 result = new ArrayList < $F5675 > $F72 ; for ( ; iter . hasNext ( ) ; ) { $F5675 current = new $F5676 $F1682 ( iter ) ; $F5675 prev = before > NUM00 ? findPrevious ( iter ) : null ; $F5675 next = after > NUM00 ? findNext ( iter ) : null ; if ( prev != null ) { $F5675 overlap = prev . subList ( prev . size ( ) - before , prev . size ( ) ) ; $F177656 ( current , overlap ) } if ( next != null ) { $F5675 overlap = next . subList ( NUM00 , after ) ; current . addAll ( overlap ) ; } result . add ( current ) ; } return result ; }
public $F3789 extractMainSetJacobian ( final ODEState state ) { final $F1986 p = state . getSecondaryState ( index ) ; final $F3789 dYdY0 = new double [ stateDim ] [ stateDim ] ; int j = NUM00 ; for ( $F119 ( i , stateDim ) ) { System . arraycopy ( p , j , dYdY0 [ i ] , NUM00 , stateDim ) ; j += stateDim ; } return dYdY0 ; }
public static void init ( final AsyncContext context ) { final SecurityContext security = ( SecurityContext ) context . getAttribute ( AsyncContext . SECURITY_CTX ) ; final boolean forceSetSecurity = forceSetSecurityContext ( context ) ; if ( forceSetSecurity ) { SecurityContextHolder . setContext ( security ) ; } ctx . set ( context ) ; }
private void handleGetCandidateResult ( PlacementTask currentState , Operation postOperation , Map < String , ServerAddress > candidates , Stopwatch placementWatch ) { ServiceUtils . logInfo ( this , NUM00 , placementWatch . elapsed ( TimeUnit . MILLISECONDS ) ) ; if $F2979 ( candidates ) { String msg = String . format ( NUM00 , currentState . resource ) ; PlacementTask patchState = buildPatch ( TaskState . TaskStage . FAILED , currentState . taskState . isDirect , null ) ; patchState . resultCode = PlaceResultCode . NO_SUCH_RESOURCE ; patchState . error = msg ; failTask ( patchState , new Throwable ( msg ) , postOperation ) ; $F665 } ServiceUtils . logInfo ( this , NUM00 , candidates , currentState . timeoutMs ) ; Stopwatch scoreCandidatesStopwatch = Stopwatch . createStarted ( ) ; queryHostsForScores ( currentState . resource , candidates , null ) ; }
public boolean contains ( JsonElement element ) $F298 ( elements , element )
private void appendPath ( Path cp , final Path p ) { if $F8841 ( p ) $F288 ( cp , p ) }
public static void doDefaultLayout ( Composite parent , DialogField [ ] editors , boolean labelOnTop ) { doDefaultLayout ( parent , editors , labelOnTop , NUM00 , NUM00 ) ; }
protected static final List < CView > processQueryResults ( final ResultSet resultSet , final INaviProject project , final Map < Integer , Set $F97882 > tags , final ITagManager nodeTagManager , final SQLProvider provider , final List < CView > views , final ViewType viewType , final GraphType graphType ) throws SQLException { final Map < Integer , Set $F97882 > nodeTagMap = getNodeTags ( provider . getConnection ( ) , project , nodeTagManager ) ; try { while $F1682 ( resultSet ) { $F10411 ( viewId , resultSet ) $F435445 ( name , PostgreSQLHelpers , resultSet ) $F435445 ( description , PostgreSQLHelpers , resultSet ) final Timestamp creationDate = resultSet . getTimestamp ( NUM00 ) ; final Timestamp modificationDate = resultSet . getTimestamp ( NUM00 ) ; final boolean starState = resultSet . getBoolean ( NUM00 ) ; $F10411 ( nodeCount , resultSet ) $F10411 ( edgeCount , resultSet ) final Set $F97882 viewTags = tags . containsKey ( viewId ) ? tags . get ( viewId ) : new HashSet $F97882 $F72 ; final Set $F97882 nodeTags = nodeTagMap . containsKey ( viewId ) ? nodeTagMap . get ( viewId ) : new HashSet $F97882 $F72 ; final CProjectViewGenerator generator = new CProjectViewGenerator ( provider , project ) ; views . add ( generator . generate ( viewId , name , description , viewType , graphType , creationDate , modificationDate , nodeCount , edgeCount , viewTags , nodeTags , starState ) ) ; } return views ; } $F3229 ( resultSet ) }
private void drawString ( Object nativeFont , String str , int x , int y , int textDecoration , int fontHeight ) { if $F1277 ( str ) $F932 if ( textDecoration != NUM00 ) { boolean raised = ( textDecoration & Style . TEXT_DECORATION_3D ) != NUM00 ; boolean lowerd = ( textDecoration & Style . TEXT_DECORATION_3D_LOWERED ) != NUM00 ; boolean north = ( textDecoration & Style . TEXT_DECORATION_3D_SHADOW_NORTH ) != NUM00 ; if ( raised || lowerd || north ) { textDecoration = textDecoration & ( ~ Style . TEXT_DECORATION_3D ) & ( ~ Style . TEXT_DECORATION_3D_LOWERED ) & ( ~ Style . TEXT_DECORATION_3D_SHADOW_NORTH ) ; int c = getColor ( ) ; int a = getAlpha ( ) ; int newColor = NUM00 ; int offset = - NUM00 ; if ( lowerd ) $F18712 ( offset , newColor ) else $F96068 ( north , offset ) setColor ( newColor ) ; if ( a == NUM00 ) $F73598 ( setAlpha ) drawString ( nativeFont , str , x , y + offset , textDecoration , fontHeight ) ; setAlpha ( a ) ; setColor ( c ) ; drawString ( nativeFont , str , x , y , textDecoration , fontHeight ) ; $F665 } canvas . drawText ( str , x , y - font . getFontAscent ( ) , font ) ; if ( ( textDecoration & Style . TEXT_DECORATION_UNDERLINE ) != NUM00 ) { $F22950 ( paint , Paint ) canvas . drawLine ( x , y + fontHeight - NUM00 , x + impl . stringWidth ( nativeFont , str ) , y + fontHeight - NUM00 , paint ) ; } if ( ( textDecoration & Style . TEXT_DECORATION_STRIKETHRU ) != NUM00 ) { $F22950 ( paint , Paint ) canvas . drawLine ( x , y + fontHeight / NUM00 , x + impl . stringWidth ( nativeFont , str ) , y + fontHeight / NUM00 , paint ) ; } if ( ( textDecoration & Style . TEXT_DECORATION_OVERLINE ) != NUM00 ) { $F22950 ( paint , Paint ) canvas . drawLine ( x , y , x + impl . stringWidth ( nativeFont , str ) , y , paint ) ; } } else { canvas . drawText ( str , x , y - font . getFontAscent ( ) , font ) ; } }
protected void parse ( DataInputStream stream ) throws Exception { $F14539 ( value , stream ) }
public void removeDragEventHandlers $F72 { node . removeEventHandler ( TouchEvent . ANY , touchHandler ) ; node . removeEventHandler ( MouseEvent . ANY , mouseHandler ) ; }
protected void installListeners $F72 { super . installListeners ( ) ; table . addPropertyChangeListener ( this ) ; }
public void testCompareToZeroPos $F72 { $F79258 int bSign = NUM00 ; BigInteger aNumber = BigInteger . ZERO ; $F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) }
public void shutdown $F72 throws ConnectionManagerException { $F973 ( s_logger ) $F8934 ( connectionLock ) try { closeAllConnections ( ) ; if ( _listener != null ) { $F5191 ( _listener ) _listener = null ; } $F733 ( executorService ) } catch ( Exception e ) { throw new ConnectionManagerException ( NUM00 , e ) ; } $F796 ( connectionLock ) }
private void closeWriterExecutionService ( ExecutorService service ) throws CarbonDataWriterException { try { $F733 ( service ) service . awaitTermination ( NUM00 , TimeUnit . DAYS ) ; } catch ( InterruptedException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; $F33828 ( e ) } }
public void removeJob ( String jobId ) { $F80306 ( jobs , jobId ) }
public String formatTimeMillis ( long ts ) { synchronized ( timeFormatter ) { return $F121435 ( timeFormatter , ts ) ; } }
protected static final int positionCoordinate2D ( float value ) { return $F127087 ( value ) ; }
$F1 public Object clone $F72 { try { $F231356 cloneHashMap = ( $F231356 ) super . clone ( ) ; cloneHashMap . elementData = newElementArray ( elementData . length ) ; $F833 ( System , elementData , cloneHashMap ) return cloneHashMap ; } catch ( CloneNotSupportedException e ) $F27253 ( e ) }
public int trap $F23416 ( A ) { if $F12414 ( A ) $F1082 int l = NUM00 ; $F40997 ( r , A ) int level = NUM00 ; int all = NUM00 ; int block = NUM00 ; while ( l <= r ) { int curLevel = Math . min ( A [ l ] , A [ r ] ) ; if ( curLevel > level ) { all += ( curLevel - level ) * ( r - l + NUM00 ) ; level = curLevel ; } if $F356102 ( A , l , r ) block += A [ l ++ ] ; else block += A [ r -- ] ; } return all - block ; }
public void search $F72 $F5795 ( performSearch )
public RemoteSession ( HttpSession session ) { super ( ) ; $F6161 ( debug , Debug ) this . session = ( HttpSession ) session ; creationTime = session . getCreationTime ( ) ; $F126817 ( id , session ) lastAccessedTime = session . getLastAccessedTime ( ) ; maxInactiveInterval = session . getMaxInactiveInterval ( ) ; $F54171 ( isNew , session ) $F12775 ( internalAttributes ) Enumeration aNames = getAttributeNames ( ) ; while $F1444 ( aNames ) { $F14952 ( attributeName , aNames ) if ( isSerializable ( getAttribute ( attributeName ) ) && $F1263 ( attributeName ) && $F1263 ( attributeName ) ) { internalAttributes . put ( attributeName , getAttribute ( attributeName ) ) ; internalAttributeNames . add ( attributeName ) ; debug . message ( NUM00 + attributeName + NUM00 + getAttribute ( attributeName ) ) ; } } }
$F1 public SnmpMibHandler addMib ( SnmpMibAgent mib ) throws IllegalArgumentException { $F99586 ( mib ) if $F2200 ( mibs , mib ) mibs . addElement ( mib ) ; root . register ( mib ) ; return this ; }
public boolean exist $F72 $F40347 ( productionRun )
public static String numberToString ( Number number ) throws JSONException { if ( number == null ) $F19954 $F23206 ( doubleValue , number ) JSON . checkDouble ( doubleValue ) ; if $F1238 ( number , NEGATIVE_ZERO ) $F2455 $F14662 ( longValue , number ) if $F23208 ( doubleValue , longValue ) $F23210 ( Long , longValue ) $F92 ( number ) }
public static SortClause create ( String item , String order ) { return new SortClause ( item , ORDER . valueOf ( order ) ) ; }
public long endTime $F72 { return getTimestamp ( ) + calculateDuration ( ) ; }
protected void buildLeavesMiddleOut ( BallNode node ) throws Exception { if ( node . m_Left != null && node . m_Right != null ) { buildLeavesMiddleOut ( node . m_Left ) ; buildLeavesMiddleOut ( node . m_Right ) ; } else if ( node . m_Left != null || node . m_Right != null ) $F9451 else { BallNode n2 = buildTreeMiddleOut ( node . m_Start , node . m_End ) ; if ( n2 . m_Left != null && n2 . m_Right != null ) { node . m_Left = n2 . m_Left ; node . m_Right = n2 . m_Right ; buildLeavesMiddleOut ( node ) ; } else if ( n2 . m_Left != null || n2 . m_Right != null ) $F9451 } }
$F1309 public static $F2027 decodeValue ( String a ) { return toIntArray ( a . split ( NUM00 ) ) ; }
public WeightVector ( WeightVector wv ) { float in [ ] = wv . getInternalArray ( ) ; u = new float [ in . length ] ; $F7057 ( System , in , u ) size = in . length ; }
public void waitUntilDone $F72 { $F8934 ( countLock ) try $F24081 ( equalCountCv ) catch ( InterruptedException e ) $F11389 $F796 ( countLock ) }
public $F14638 insert ( int offset , long l ) $F65298 ( insert , offset , Long , l )
public ProjectionPreferencesDialog ( Projector projector ) { this . projector = projector ; String toleranceToolTip = NUM00 + NUM00 ; $F115588 ( toleranceLabel ) tolerance . setToolTipText ( toleranceToolTip ) ; toleranceLabel . setToolTipText ( toleranceToolTip ) ; mainPanel . addItemLabel ( toleranceLabel , tolerance ) ; if ( projector . getProjectionMethod ( ) instanceof ProjectCoordinate ) { $F296661 ( mainPanel , autoFind ) } fillFieldValues ( ) ; setContentPane ( mainPanel ) ; }
private Element generateBranch ( TreeType treeType , RootedTree tree , Node node , String nodeName , double startLatitude , double finishLatitude , double startLongitude , double finishLongitude , double startAltitude , double finishAltitude , double peakPosition , double peakAltitude , double startDate , double finishDate , double ageCutOff , LineStyle startStyle , LineStyle finishStyle , int divisionCount , $F15369 styles ) { Element element ; Double rate = ( Double ) node . getAttribute ( NUM00 ) ; Double support = ( Double ) node . getAttribute ( NUM00 ) ; double height = tree . getHeight ( node ) ; boolean hasDivisionStyles = startStyle != null && finishStyle != null ; if ( divisionCount > NUM00 ) { double latDiff = finishLatitude - startLatitude ; double latDelta = latDiff / divisionCount ; double longDiff = finishLongitude - startLongitude ; double longDelta = longDiff / divisionCount ; double altDiff = finishAltitude - startAltitude ; double altDelta = altDiff / divisionCount ; double dateDiff = finishDate - startDate ; double dateDelta = dateDiff / divisionCount ; double lastLatitude = startLatitude ; double latitude = startLatitude + latDelta ; double lastLongitude = startLongitude ; double longitude = startLongitude + longDelta ; double x = - peakPosition ; double xDelta = NUM00 / divisionCount ; double a = peakAltitude - finishAltitude ; if ( peakPosition == NUM00 ) { a *= NUM00 ; } double altitude = peakAltitude - ( a * ( x * x ) ) ; double lastAltitude = altitude ; x += xDelta ; double date = startDate ; String styleName = null ; if ( ! hasDivisionStyles && startStyle != null ) { styleName = nodeName + NUM00 ; styles . add ( generateLineStyle ( styleName , startStyle . getWidth ( ) , startStyle . getColor ( ) ) ) ; } element = generateContainer ( NUM00 , nodeName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; for ( $F119 ( division , divisionCount ) ) { if ( ageCutOff == NUM00 || date > ageCutOff ) { String partName = nodeName + NUM00 + ( division + NUM00 ) ; styleName = null ; if ( hasDivisionStyles ) { styleName = partName + NUM00 ; } Element placeMark = generateContainer ( NUM00 , partName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; annotateBranch ( placeMark , height , startDate , finishDate , rate , support ) ; if ( hasDivisionStyles ) { $F324 ( width , startStyle ) Color color = getBlendedColor ( $F61779 ( division ) / ( divisionCount - NUM00 ) , startStyle . getColor ( ) , finishStyle . getColor ( ) ) ; $F139397 ( styles , generateLineStyle , styleName , width , color ) } if ( dateDiff > NUM00 ) { Element timeSpan = new Element $F580 ; timeSpan . addContent ( generateElement ( NUM00 , getKMLDate ( date ) ) ) ; placeMark . addContent ( timeSpan ) ; } Element lineString = new Element $F580 ; Element coordinates = new Element $F580 ; if ( altDiff > NUM00 || peakAltitude > NUM00 ) { lineString . addContent ( generateElement ( NUM00 , altitudeMode ) ) ; altitude = peakAltitude - ( a * ( x * x ) ) ; coordinates . addContent ( NUM00 + lastLongitude + NUM00 + lastLatitude + NUM00 + lastAltitude + NUM00 ) ; coordinates . addContent ( NUM00 + longitude + NUM00 + latitude + NUM00 + altitude + NUM00 ) ; } else { lineString . addContent ( generateElement ( NUM00 , NUM00 ) ) ; lineString . addContent ( generateElement ( NUM00 , _BOOL ) ) ; coordinates . addContent ( NUM00 + lastLongitude + NUM00 + lastLatitude + NUM00 ) ; coordinates . addContent ( NUM00 + longitude + NUM00 + latitude + NUM00 ) ; } lastLatitude = latitude ; latitude += latDelta ; lastLongitude = longitude ; longitude += longDelta ; lastAltitude = altitude ; x += xDelta ; date += dateDelta ; lineString . addContent ( coordinates ) ; placeMark . addContent ( lineString ) ; element . addContent ( placeMark ) ; } } } else { String styleName = null ; if ( startStyle != null ) { styleName = nodeName + NUM00 ; $F324 ( width , startStyle ) styles . add ( generateLineStyle ( styleName , width , startStyle . getColor ( ) ) ) ; } element = generateContainer ( NUM00 , nodeName , null , ( styleName != null ? NUM00 + styleName : null ) ) ; annotateBranch ( element , height , startDate , finishDate , rate , support ) ; Element lineString = new Element $F580 ; lineString . addContent ( generateElement ( NUM00 , altitudeMode ) ) ; Element coordinates = new Element $F580 ; if ( treeType == TreeType . RECTANGLE_TREE ) { coordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + finishAltitude + NUM00 ) ; coordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + startAltitude + NUM00 ) ; coordinates . addContent ( NUM00 + startLongitude + NUM00 + startLatitude + NUM00 + startAltitude + NUM00 ) ; } else { coordinates . addContent ( NUM00 + finishLongitude + NUM00 + finishLatitude + NUM00 + finishAltitude + NUM00 ) ; coordinates . addContent ( NUM00 + startLongitude + NUM00 + startLatitude + NUM00 + startAltitude + NUM00 ) ; } lineString . addContent ( coordinates ) ; element . addContent ( lineString ) ; } return element ; }
public void addTableValueChangeListener ( TableValueChangeListener listener ) $F38373 ( listener , m_listeners )
$F1 public int print ( Graphics g , PageFormat pageFormat , int pageIndex ) { if ( pageIndex > NUM00 ) $F3139 ( NO_SUCH_PAGE ) else { $F20230 ( g2d , g ) g2d . translate ( pageFormat . getImageableX ( ) , pageFormat . getImageableY ( ) ) ; double fHeight = pageFormat . getImageableHeight ( ) ; double fWidth = pageFormat . getImageableWidth ( ) ; int xMax = NUM00 ; int yMax = NUM00 ; for ( int iNode = NUM00 ; iNode < m_BayesNet . getNrOfNodes ( ) ; iNode ++ ) { if ( xMax < m_BayesNet . getPositionX ( iNode ) ) { xMax = m_BayesNet . getPositionX ( iNode ) ; } if ( yMax < m_BayesNet . getPositionY ( iNode ) ) { yMax = m_BayesNet . getPositionY ( iNode ) ; } } double fCurrentScale = m_fScale ; xMax += m_nPaddedNodeWidth + NUM00 ; if ( fWidth / xMax < fHeight / yMax ) { m_fScale = fWidth / xMax ; } else { m_fScale = fHeight / yMax ; } paint ( g2d ) ; m_fScale = fCurrentScale ; return ( PAGE_EXISTS ) ; } }
public LinkedHashMap < Pokemon , NicknamePokemonResponse . Result > bulkRenameWithPattern ( final String pattern , final BiConsumer < NicknamePokemonResponse . Result , Pokemon > perPokeCallback ) { final LinkedHashMap < Pokemon , NicknamePokemonResponse . Result > $F161023 ( results ) ; $F22620 ( mons ) return results ; }
protected static $F30974 parseDirectives ( $F96 buf , $F806 keyTable , $F4358 ( realmChoices ) , int realmIndex ) throws SaslException { $F30974 valueTable = new byte [ keyTable . length ] [ ] ; $F121388 ( key ) $F121388 ( value ) boolean gettingKey = _BOOL ; boolean gettingQuotedValue = _BOOL ; boolean expectSeparator = _BOOL ; byte bch ; int i = skipLws ( buf , NUM00 ) ; while ( i < buf . length ) { bch = buf [ i ] ; if ( gettingKey ) { if ( bch == NUM00 ) { if $F6887 ( key ) { throw new SaslException ( NUM00 + key ) ; } i = skipLws ( buf , i + NUM00 ) ; } else if ( bch == NUM00 ) { if $F10471 ( key ) { $F180829 } gettingKey = _BOOL ; i = skipLws ( buf , i + NUM00 ) ; if ( i < buf . length ) { if ( buf [ i ] == NUM00 ) { gettingQuotedValue = _BOOL ; ++ i ; } } else { throw new SaslException $F3943 ( key ) ; } } else if ( isLws ( bch ) ) { i = skipLws ( buf , i + NUM00 ) ; if ( i < buf . length ) { if ( buf [ i ] != NUM00 ) { throw new SaslException $F3943 ( key ) ; } } else { throw new SaslException $F3943 ( key ) ; } } else { key . write ( bch ) ; ++ i ; } } else if ( gettingQuotedValue ) { if ( bch == NUM00 ) { ++ i ; if ( i < buf . length ) { value . write ( buf [ i ] ) ; ++ i ; } else { throw new SaslException ( $F148552 ( key , value ) ) ; } } else if ( bch == NUM00 ) { ++ i ; gettingQuotedValue = _BOOL ; expectSeparator = _BOOL ; } else { value . write ( bch ) ; ++ i ; } } else if ( isLws ( bch ) || bch == NUM00 ) { extractDirective ( key . toString ( ) , value . toByteArray ( ) , keyTable , valueTable , realmChoices , realmIndex ) ; $F2268 ( key ) $F2268 ( value ) gettingKey = _BOOL ; gettingQuotedValue = expectSeparator = _BOOL ; i = skipLws ( buf , i + NUM00 ) ; } else if ( expectSeparator ) { throw new SaslException $F134423 ( value ) ; } else { value . write ( bch ) ; ++ i ; } } if ( gettingQuotedValue ) { throw new SaslException ( $F148552 ( key , value ) ) ; } if $F3817 ( key ) { extractDirective ( key . toString ( ) , value . toByteArray ( ) , keyTable , valueTable , realmChoices , realmIndex ) ; } return valueTable ; }
public static Assignment createDefault ( String ... variables ) $F28185 ( createDefault , Arrays , variables )
private void onStopAttack $F72 { attacking = null ; }
$F32186 ( reader , this , _BOOL )
void calculatePressed ( ActionEvent e ) { $F84963 ( checkEditConditional ) if ( numConditionals > NUM00 ) { String cName = NUM00 ; Conditional c = null ; for ( $F119 ( i , numConditionals ) ) { cName = _curLogix . getConditionalByNumberOrder ( i ) ; if ( cName != null ) { c = _conditionalManager . getBySystemName ( cName ) ; if ( c == null ) $F17663 ( log , cName ) else { c . calculate ( _BOOL , null ) ; } } else $F21338 ( log ) } $F15362 ( conditionalTableModel ) } }
public static FunctionAlias newInstance ( Schema schema , int id , String name , String javaClassMethod , boolean force , boolean bufferResultSetToLocalTemp ) { FunctionAlias alias = new FunctionAlias ( schema , id , name ) ; $F1384 ( paren , javaClassMethod ) int lastDot = javaClassMethod . lastIndexOf ( NUM00 , paren < NUM00 ? javaClassMethod . length ( ) : paren ) ; if ( lastDot < NUM00 ) { throw DbException . get ( ErrorCode . SYNTAX_ERROR_1 , javaClassMethod ) ; } alias . className = javaClassMethod . substring ( NUM00 , lastDot ) ; alias . methodName = javaClassMethod . substring ( lastDot + NUM00 ) ; alias . bufferResultSetToLocalTemp = bufferResultSetToLocalTemp ; alias . init ( force ) ; return alias ; }
protected void updateMenu $F72 { boolean present ; boolean initializing ; boolean running ; boolean stopping ; boolean active ; $F8249 ( m_MenuBar ) present = ( m_Experiment != null ) ; initializing = present && m_Experiment . isInitializing ( ) ; running = present && m_Experiment . isRunning ( ) ; stopping = present && m_Experiment . isStopping ( ) ; active = initializing || running || stopping ; m_MenuItemFileNew . setEnabled ( ! active ) ; m_MenuItemFileOpen . setEnabled ( ! active ) ; m_MenuItemFileSave . setEnabled ( present && $F89491 ( getCurrentFile ) ) ; m_MenuItemFileSaveAs . setEnabled ( present ) ; m_MenuItemFileClose . setEnabled ( ! active ) ; m_MenuItemExecutionStart . setEnabled ( present && ! active ) ; m_MenuItemExecutionStop . setEnabled ( present && running ) ; for ( AbstractExperimenterMenuItem item : m_AdditionalMenuItems . keySet ( ) ) item . update ( this , m_AdditionalMenuItems . get ( item ) ) ; }
$F1113 @ ObjectiveCName ( NUM00 ) public ConfigurationBuilder addAutoJoinGroup ( String groupTokenOrShortName ) $F18637 ( autoJoinGroups , groupTokenOrShortName , this )
public boolean hasValueInfo $F72 { return $F1263 ( receiverValue ) || methodArgumentValues != null ; }
public boolean nextIsSep $F72 { if ( $F15875 ( Character , str , currentPosition ) ) return _BOOL ; else return _BOOL ; }
$F31396 ( str , retval , ch , i , s , Integer )
protected void dropCar ( PrintWriter file , Car car , boolean isManifest ) { if ( isManifest ) { StringBuffer buf = new StringBuffer ( padAndTruncateString ( Setup . getDropCarPrefix ( ) , Setup . getManifestPrefixLength ( ) ) ) ; $F806 format = Setup . getDropManifestMessageFormat ( ) ; boolean isLocal = isLocalMove ( car ) ; if ( isLocal ) { buf = new StringBuffer ( padAndTruncateString ( Setup . getLocalPrefix ( ) , Setup . getManifestPrefixLength ( ) ) ) ; format = Setup . getLocalManifestMessageFormat ( ) ; } dropCar ( file , car , buf , format , isLocal , isManifest ) ; } else { StringBuffer buf = new StringBuffer ( padAndTruncateString ( Setup . getSwitchListDropCarPrefix ( ) , Setup . getSwitchListPrefixLength ( ) ) ) ; $F806 format = Setup . getDropSwitchListMessageFormat ( ) ; boolean isLocal = isLocalMove ( car ) ; if ( isLocal ) { buf = new StringBuffer ( padAndTruncateString ( Setup . getSwitchListLocalPrefix ( ) , Setup . getSwitchListPrefixLength ( ) ) ) ; format = Setup . getLocalSwitchListMessageFormat ( ) ; } dropCar ( file , car , buf , format , isLocal , isManifest ) ; } }
@ AfterMethod public void deleteStorage $F72 throws BusinessException , IOException , SerializationException { if ( null != storageData ) { if ( storageManager . getRecordingState ( ) == RecordingState . ON ) { storageManager . stopRecording ( ) ; } if ( ! storageManager . isStorageClosed ( storageData ) ) { storageManager . closeStorage ( storageData ) ; } storageManager . deleteStorage ( storageData ) ; storageData = null ; } assertThat ( storageManager . getExistingStorages ( ) , is ( empty ( ) ) ) ; }
public final void removeElementAt ( int i ) { if ( i > m_firstFree ) $F173011 ( System , m_map , i , m_firstFree ) else $F7532 ( m_map , i , java ) m_firstFree -- ; }
protected int keyOnList $F13322 ( key , list ) { int ret = - NUM00 ; int index = NUM00 ; if ( list != null ) { for ( String listKey : list ) { $F236528 ( listKey , key , ret , index ) index ++ ; } } return ret ; }
private boolean incrementSentence $F72 throws IOException { $F116 ( length , _BOOL ) while ( _BOOL ) { int start = iterator . current ( ) ; if ( start == BreakIterator . DONE ) return _BOOL ; $F128162 ( end , iterator ) if ( end == BreakIterator . DONE ) return _BOOL ; setNextSentence ( start , end ) ; $F58185 ( incrementWord , _BOOL ) } }
Enumeration < CryptoPermissionEntry > permissionElements $F72 $F10806 ( permissionEntries )
$F52843 ( packed , map , i , j , count , value )
private static void populateAccessRequest ( AccessRequest accessRequest ) { accessRequest . setAccessLicenseNumber ( props . getProperty ( LICENSE1BER ) ) ; accessRequest . setUserId ( props . getProperty ( USER_NAME ) ) ; accessRequest . setPassword ( props . getProperty ( PASSWORD ) ) ; }
public BinaryTable ( Header myHeader ) throws FitsException { long heapSizeL = myHeader . getLongValue ( PCOUNT ) ; long heapOffsetL = myHeader . getLongValue ( THEAP ) ; if ( heapOffsetL > MAX_INTEGER_VALUE ) { throw new FitsException $F580 ; } if ( heapSizeL > MAX_INTEGER_VALUE ) { throw new FitsException $F580 ; } if ( heapSizeL - heapOffsetL > MAX_INTEGER_VALUE ) { throw new FitsException $F580 ; } this . heapOffset = ( int ) heapOffsetL ; $F29204 ( heapSize , heapSizeL ) int rwsz = myHeader . getIntValue ( NAXIS1 ) ; this . nRow = myHeader . getIntValue ( NAXIS2 ) ; if ( this . heapOffset > NUM00 ) { this . heapOffset -= this . nRow * rwsz ; } if ( this . heapOffset < NUM00 || this . heapOffset > heapSize ) { throw new FitsException $F580 ; } this . heap = new FitsHeap ( heapSize - this . heapOffset ) ; int nCol = myHeader . getIntValue ( TFIELDS ) ; this . rowLen = NUM00 ; for ( $F119 ( col , nCol ) ) { this . rowLen += processCol ( myHeader , col ) ; } HeaderCard card = myHeader . findCard ( NAXIS1 ) ; card . setValue ( String . valueOf ( this . rowLen ) ) ; myHeader . updateLine ( NAXIS1 , card ) ; }
public static TaskContext current $F72 { final Deque < TaskContext > stack = contextStacks . get ( ) ; $F1338 ( stack ) return stack . peekLast ( ) ; }
public static $F96 concat ( final $F96 ... arrays ) { int totalSize = NUM00 ; for ( final $F96 array : arrays ) { totalSize += array . length ; } int startIndex = NUM00 ; $F4727 ( result , totalSize ) for ( final $F96 array : arrays ) $F181805 ( System , array , result , startIndex ) return result ; }
public JKNamespace $F2236 ( url , prefix ) { $F124174 ( logger , String , url , prefix ) this . url = url ; this . prefix = prefix ; }
public boolean isLifo $F72 $F94352 ( cm , getCostingMethod , COSTINGMETHOD_Lifo , COSTELEMENTTYPE_Material , getCostElementType )
public static void main $F4374 ( args ) throws Exception { final String cfg = NUM00 ; final Class < ? extends BenchmarkDriver > benchmark = IgniteSqlQueryBenchmark . class ; final int threads = NUM00 ; final boolean clientDriverNode = _BOOL ; final int extraNodes = NUM00 ; final int warmUp = NUM00 ; final int duration = NUM00 ; final int range = NUM00 ; final boolean throughputLatencyProbe = _BOOL ; for ( $F119 ( i , extraNodes ) ) { IgniteConfiguration nodeCfg = Ignition . loadSpringBean ( cfg , NUM00 ) ; nodeCfg . setGridName ( NUM00 + i ) ; nodeCfg . setMetricsLogFrequency ( NUM00 ) ; Ignition . start ( nodeCfg ) ; } $F22547 ( args0 ) addArg ( args0 , NUM00 , threads ) ; addArg ( args0 , NUM00 , warmUp ) ; addArg ( args0 , NUM00 , duration ) ; addArg ( args0 , NUM00 , range ) ; addArg ( args0 , NUM00 , benchmark . getSimpleName ( ) ) ; addArg ( args0 , NUM00 , NUM00 ) ; addArg ( args0 , NUM00 , cfg ) ; if ( throughputLatencyProbe ) addArg ( args0 , NUM00 , NUM00 ) ; if ( clientDriverNode ) $F18793 ( args0 ) BenchmarkDriverStartUp . main ( $F10148 ( args0 ) ) ; }
public static boolean safeNavigationOperatorDefined ( String nestedFieldName ) { if $F105 ( nestedFieldName , SAFE_NAVIGATION_OPERATOR ) if $F34844 ( nestedFieldName , SAFE_NAVIGATION_OPERATOR ) throw new MappingException $F580 ; else return _BOOL ; return _BOOL ; }
public static boolean isEnabled $F72 { $F22771 ( sEnabled , detectEnabled ) $F44652 ( sEnabled ) }
public boolean intersects ( GeoBounds other ) { boolean rv = _BOOL ; for ( Rectangle2D r1 : rects ) { for ( Rectangle2D r2 : other . rects ) { rv = r1 . intersects ( r2 ) ; $F30711 ( rv ) } $F30711 ( rv ) } return rv ; }
public void dispose $F72 $F9096 ( mListeners )
public void openImageGallery ( final ActionListener response ) { openGallery ( response , Display . GALLERY_IMAGE ) ; }
private void readObject ( final java . io . ObjectInputStream in ) throws $F6427 { $F128845 ( inequalitySymbol , in ) ; $F33039 ( timeStamp , in ) }
String popBaseIndentifier $F72 $F283374 ( m_baseIdentifiers )
$F5466 public static File resolveDrawable ( $F1113 RenderResources resources , $F5466 ResourceValue drawable , $F1113 Project project ) { if ( drawable != null ) { drawable = resources . resolveResValue ( drawable ) ; } $F1338 ( drawable ) $F840 ( result , drawable ) StateList stateList = resolveStateList ( resources , drawable , project ) ; if ( stateList != null ) { List < StateListState > states = stateList . getStates ( ) ; if $F5973 ( states ) { StateListState $F7662 ( state , states ) ; $F37891 ( result , state ) } } $F1338 ( result ) $F15885 ( file , result ) return file . isFile ( ) ? file : null ; }
public static void delete ( String code , JDA jda ) { Invite invite = resolve ( code ) ; if ( invite == null ) throw new IllegalArgumentException ( NUM00 + NUM00 + code ) ; delete ( invite , jda ) ; }
private void updateHeaderSeparator $F72 { final String bestDateTimePattern = DateFormatUtils . getBestDateTimePattern ( mCurrentLocale , ( mIs24HourView ) ? NUM00 : NUM00 ) ; final String separatorText ; final $F1469 $F167305 ( hourFormats ) ; int hIndex = lastIndexOfAny ( bestDateTimePattern , hourFormats ) ; if ( hIndex == - NUM00 ) { separatorText = NUM00 ; } else { separatorText = Character . toString ( bestDateTimePattern . charAt ( hIndex + NUM00 ) ) ; } mSeparatorView . setText ( separatorText ) ; }
protected void connectionFailed ( Channel failedChannel , IOException cause ) { failureCause = IOExceptionSupport . create ( cause ) ; channel = failedChannel ; connected . set ( _BOOL ) ; $F38783 ( connectLatch ) }
public void testMissingApplication $F72 throws Exception { mEnabled . add ( LauncherActivityDetector . ISSUE_MORE_THAN_ONE_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_MISSING_LAUNCHER ) ; mEnabled . add ( LauncherActivityDetector . ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY ) ; String expected = NUM00 ; String result = lintProject ( xml ( FN_ANDROID_MANIFEST_XML , $F40 ) ) ; assertEquals ( expected , result ) ; }
public String toString $F72 { ArrayList fields = new ArrayList $F989 ; fields . add ( codebase ) ; fields . add ( policy ) ; fields . add ( classpath ) ; fields . add ( implClassName ) ; fields . add ( ( ( serverConfigArgs == null ) ? null : Arrays . asList ( serverConfigArgs ) ) ) ; fields . add ( lifeCycle ) ; fields . add ( servicePreparer ) ; $F92 ( fields ) }
public Drawable createFromPath ( String pathName ) { return Drawable . createFromPath ( pathName ) ; }
$F1 public void parse ( Reader reader , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { $F826 ( reader ) $F826 ( baseURI ) $F77995 ( inputSource , reader ) inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
final public void print ( double v ) { try $F91838 ( _out , v ) $F53427 ( log , Level , e ) }
public static boolean isEmpty ( String string ) $F215747 ( string )
public static boolean isXML11ValidName ( String name ) { $F115 ( length , name ) $F116 ( length , _BOOL ) int i = NUM00 ; $F12685 ( ch , name ) $F12693 ( isXML11NameStart , ch , length , isXML11NameHighSurrogate , ch2 , name , XMLChar , _BOOL , i ) $F12699 ( i , length , ch , name , isXML11Name , isXML11NameHighSurrogate , ch2 , XMLChar , _BOOL ) return _BOOL ; }
public void reset $F72 { $F725 ( mExpectedEvents ) mExpectedInterrupt = _BOOL ; mReplaying = _BOOL ; }
String generateDigest ( File fileDir , String fileName ) { final String algorithm = NUM00 ; InputStream fileStream = null ; DigestInputStream d = null ; try { fileStream = getFileStream ( fileDir , fileName ) ; $F156 ( md , MessageDigest , algorithm ) d = new DigestInputStream ( fileStream , md ) ; $F12496 ( buffer ) while $F127801 ( d , buffer ) $F845 return toHexString ( md . digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) $F70142 ( algorithm ) catch ( IOException e ) $F25910 ( CLog , e ) finally { StreamUtil . closeStream ( d ) ; StreamUtil . closeStream ( fileStream ) ; } $F1278 }
public AgentConfig environmentToConfiguration ( Environment environment , long platformId ) { AgentConfig agentConfiguration = new AgentConfig $F72 ; agentConfiguration . setPlatformId ( platformId ) ; if ( CollectionUtils . isNotEmpty ( environment . getPlatformSensorConfigs ( ) ) ) { Collection < PlatformSensorTypeConfig > $F204 ( platformSensorTypeConfigs ) ; for ( IPlatformSensorConfig platformSensorConfig : environment . getPlatformSensorConfigs ( ) ) { if $F80957 ( platformSensorConfig ) $F18351 ( platformSensorTypeConfigs , getPlatformSensorTypeConfig , platformId , platformSensorConfig ) } agentConfiguration . setPlatformSensorTypeConfigs ( platformSensorTypeConfigs ) ; } else { agentConfiguration . setPlatformSensorTypeConfigs ( Collections . < PlatformSensorTypeConfig > $F9639 ) ; } if ( CollectionUtils . isNotEmpty ( environment . getMethodSensorConfigs ( ) ) ) { Collection < MethodSensorTypeConfig > $F204 ( methodSensorTypeConfigs ) ; for ( IMethodSensorConfig methodSensorConfig : environment . getMethodSensorConfigs ( ) ) $F18351 ( methodSensorTypeConfigs , getMethodSensorTypeConfig , platformId , methodSensorConfig ) agentConfiguration . setMethodSensorTypeConfigs ( methodSensorTypeConfigs ) ; } else { agentConfiguration . setMethodSensorTypeConfigs ( Collections . < MethodSensorTypeConfig > $F9639 ) ; } IExceptionSensorConfig exceptionSensorConfig = environment . getExceptionSensorConfig ( ) ; if ( null != exceptionSensorConfig ) { agentConfiguration . setExceptionSensorTypeConfig ( getExceptionSensorTypeConfig ( platformId , exceptionSensorConfig ) ) ; } JmxSensorConfig jmxSensorConfig = environment . getJmxSensorConfig ( ) ; if ( null != jmxSensorConfig ) { agentConfiguration . setJmxSensorTypeConfig ( getJmxSensorTypeConfig ( platformId , jmxSensorConfig ) ) ; } IStrategyConfig bufferStrategyConfig = environment . getBufferStrategyConfig ( ) ; agentConfiguration . setBufferStrategyConfig ( new StrategyConfig ( bufferStrategyConfig . getClassName ( ) , bufferStrategyConfig . getSettings ( ) ) ) ; IStrategyConfig sendingStrategyConfig = environment . getSendingStrategyConfig ( ) ; agentConfiguration . setSendingStrategyConfig ( new StrategyConfig ( sendingStrategyConfig . getClassName ( ) , sendingStrategyConfig . getSettings ( ) ) ) ; Collection < ExcludeRule > excludeRules = configurationResolver . getAllExcludeRules ( environment ) ; if $F35028 ( CollectionUtils , excludeRules ) { Collection < IMatchPattern > $F204 ( excludeClassesPatterns ) ; for ( ExcludeRule excludeRule : excludeRules ) { excludeClassesPatterns . add ( PatternFactory . getPattern ( excludeRule . getClassName ( ) ) ) ; } agentConfiguration . setExcludeClassesPatterns ( excludeClassesPatterns ) ; } else { agentConfiguration . setExcludeClassesPatterns ( Collections . < IMatchPattern > $F9639 ) ; } agentConfiguration . setConfigurationInfo ( configurationResolver . getConfigurationInfo ( environment ) ) ; return agentConfiguration ; }
private void initializeNameGoals ( Map < TestCase , Set < TestFitnessFunction > > testToGoals ) { for ( Map . Entry < TestCase , Set < TestFitnessFunction > > entry : testToGoals . entrySet ( ) ) { Set < TestFitnessFunction > $F22304 ( goals ) ; List < TestFitnessFunction > $F224232 ( topGoals , getTopGoals , entry ) ; if $F2979 ( topGoals ) $F845 else if $F58405 ( topGoals , MAX_SIMILAR_GOALS ) { for ( TestFitnessFunction goal : topGoals ) { goals . add ( goal ) ; String goalName = getTestName ( entry . getKey ( ) , goals ) ; if $F62924 ( goalName , MAX_CHARS ) $F2676 ( goals , goal ) } } else { goals . add ( chooseRepresentativeGoal ( entry . getKey ( ) , topGoals ) ) ; } $F15251 ( testToGoals , entry , goals ) } }
public static java . lang . Double valueOf $F93065 ( s ) throws $F68605 { return new Double ( parseDouble ( s ) ) ; }
$F92274 ( s , lock , this , p , first )
public boolean isParseRobotsTxt $F72 { return parseRobotsTxt ; }
public String byteArrayToBase64 $F97 ( bytes ) { return Base64 . encodeBase64String ( bytes ) ; }
private void validateIndexStorage $F72 { CloseableIterator < IndexStoreEntry > iterator = null ; try { $F12181 ( structureList ) iterator = indexDataStructure . iterator ( null ) ; while $F2921 ( iterator ) { IndexStoreEntry ie = iterator . next ( ) ; if ( entriesContains ( ie ) ) $F207 ( structureList , ie ) else $F1328 ( fail , ie ) } assertEquals ( NUM00 , entries . size ( ) , structureList . size ( ) ) ; } $F14364 ( iterator ) }
protected void onException ( final WroRuntimeException e ) { throw e ; }
private int quantize ( long x ) { return NUM00 + ( int ) Math . floor ( Math . log ( x ) / Math . log ( quantizationBase ) ) ; }
public static boolean validateOutputDirectory ( File directory ) { if $F3428 ( directory ) { Diagnostic . error ( ErrorType . DIRECTORY_EXISTS , directory . getPath ( ) ) ; return _BOOL ; } return _BOOL ; }
$F1 public void onWebSocketClose ( int statusCode , String reason ) { super . onWebSocketClose ( statusCode , reason ) ; log . info ( NUM00 , peerID , Integer . toString ( statusCode ) + NUM00 + reason ) ; store . unsubscribe ( handle ) ; }
$F1 public double logDensity ( double value ) { updateBoundariesAndOrWeights ( ) ; if ( m_Boundaries == null ) { return Math . log ( Double . MIN_VALUE ) ; } $F8533 ( index , Arrays , m_Boundaries , value ) if ( ( index == - NUM00 ) || ( index == - m_Boundaries . length - NUM00 ) ) { double val = NUM00 ; if ( index == - NUM00 ) { val = m_TM . firstKey ( ) - value ; } else { val = value - m_TM . lastKey ( ) ; } return ( CONST - Math . log ( m_Width ) - NUM00 * ( val * val / ( m_Width * m_Width ) ) ) - Math . log ( m_SumOfWeights + NUM00 ) ; } if $F74408 ( index , m_Boundaries ) { index -- ; } else { if ( index < NUM00 ) { index = - index - NUM00 ; } } double width = m_Boundaries [ index + NUM00 ] - m_Boundaries [ index ] ; double densSmearedOut = NUM00 / ( ( m_SumOfWeights + NUM00 ) * ( $F8528 ( m_Boundaries ) - m_Boundaries [ NUM00 ] ) ) ; if ( m_Weights [ index ] <= NUM00 ) { return Math . log ( densSmearedOut ) ; } else { return Math . log ( densSmearedOut + m_Weights [ index ] / ( ( m_SumOfWeights + NUM00 ) * width ) ) ; } }
public void drawPoint ( Graphics sc , IPoint p ) { $F82242 ( x1 , p ) $F82240 ( y1 , p ) sc . drawOval ( ( int ) x1 - NUM00 , ( int ) y1 - NUM00 , NUM00 , NUM00 ) ; }
private static int computeCapacity ( final int expectedSize ) { $F14826 ( expectedSize ) final int $F404182 ( capacity , FastMath , expectedSize , LOAD_FACTOR ) ; final int powerOfTwo = Integer . highestOneBit ( capacity ) ; if ( powerOfTwo == capacity ) { return capacity ; } return nextPowerOfTwo ( capacity ) ; }
$F113898 ( buf , s , i , c , Integer )
protected void a_processJunction_nns ( String name , Continuation cont ) throws NamingException { if $F3057 ( name ) { NameNotFoundException e = new NameNotFoundException $F72 ; cont . setErrorNNS ( this , name ) ; throw cont . fillInException ( e ) ; } try { Object target = a_lookup ( name , cont ) ; if ( cont . isContinue ( ) ) cont . appendRemainingComponent ( NUM00 ) ; else { cont . setContinueNNS ( target , name , this ) ; } } catch ( NamingException e ) { e . appendRemainingComponent ( NUM00 ) ; throw e ; } }
public void addCallback ( Callback callback ) $F2202 ( mCallbacks , callback )
public JTidyDocumentBuilderFactory $F230110 ( settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { $F50403 ( classLoader , ClassLoader ) $F198604 ( tidyClass , classLoader ) tidyConstructor = tidyClass . getConstructor ( NO_CLASSES ) ; parseDOMMethod = tidyClass . getMethod ( NUM00 , new Class [ ] { java . io . InputStream . class , java . io . OutputStream . class } ) ; domImpl = new JTidyDOMImplementation $F72 ; } catch ( Exception ex ) $F349675 ( ex ) if ( settings != null ) { for ( $F1139 ( i , settings ) ) $F845 } }
$F9159 ( logDebug , mSetupDone , _BOOL , mServiceConn , mContext , mDisposed , mService , mPurchaseListener )
public void enqueue ( TerminatingRunnable r ) { synchronized ( queue ) { queue . add ( r ) ; $F165 ( queue ) } }
protected void doProcessMessage ( DTLSMessage message ) throws HandshakeException , GeneralSecurityException $F845
public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; crls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; }
void disconnect $F72 { $F39755 ( lock , disconnected , _BOOL ) }
public SimpleRateLimiter ( double mbPerSec ) { setMBPerSec ( mbPerSec ) ; $F101251 ( lastNS , System ) }
private long wc ( String text ) { long wc = NUM00 ; $F6542 ( lines , text ) for ( String line : lines ) { wc += $F28838 ( line ) ; } return wc ; }
public boolean unbind $F72 { boolean worked = _BOOL ; if ( m_rxThread == null ) worked = _BOOL ; else m_stopRx = _BOOL ; return worked ; }
public void register ( Schedule schedule ) { $F10192 ( oldSize , Integer , _scheduleHashTable ) $F33163 ( _scheduleHashTable , schedule ) $F252150 ( id , Integer , schedule ) $F12283 ( id , _id ) $F10197 ( setDirtyAndFirePropertyChange , LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer , _scheduleHashTable ) }
public final void writeMapleAsciiString ( final String s ) { writeShort ( ( short ) s . length ( ) ) ; writeAsciiString ( s ) ; }
public static boolean hasUID ( String classname ) { boolean result ; try { result = hasUID ( Class . forName ( classname ) ) ; } $F28453 ( result , _BOOL ) return result ; }
public static boolean removeDirectory ( String pathToDir ) { $F65260 ( deleteRecursive , pathToDir ) }
public static final boolean validateGroupName ( String sGroupName ) { $F25111 ( sGroupName , _BOOL ) return sGroupName . matches ( NUM00 ) ; }
private void _init ( Configuration conf ) { try { if ( this . id > NUM00 ) { DefaultListener d = new DefaultListener $F72 ; d . upgrade ( conf , this ) ; } if $F20899 ( X , listener ) { String name = listener ; if ( name != null ) { try { $F6969 c = Class . forName ( name , _BOOL , classLoader ) ; $F71976 ( o , c ) if ( o instanceof IListener ) { $F556 ( log , name ) IListener l = ( IListener ) o ; l . upgrade ( conf , this ) ; l . onStart ( conf , this ) ; } } catch ( Throwable e ) { log . error ( this . name + NUM00 + name , e ) ; } } } } catch ( Throwable e ) $F14108 ( log , e ) }
private boolean isScanRootAvailable ( URL url ) { for ( ScanRoot scanRoot : _pendingScanRoots ) { if ( url . equals ( scanRoot . getUrl ( ) ) ) return _BOOL ; } return _BOOL ; }
public SequentialListenerManager addListenerExecutor ( int index , Listener listener , ListenerExecutor executor ) { if $F105 ( listeners , listener ) $F11416 ( listener ) listeners . add ( index , listener ) ; listenerExecutors . add ( index , executor ) ; return this ; }
private boolean hasAsParent ( INode child , ICompositeNode directParent ) { INode parent = child ; while ( parent != null ) { if ( parent == directParent ) return _BOOL ; $F10337 ( parent ) } return _BOOL ; }
public void clearMarkers $F72 $F5122 ( mGoogleMap , markers )
$F1 public double cloudletSubmit ( Cloudlet cl ) $F41330 ( cloudletSubmit , cl )
public void verifyingToken $F72 { setTokenInfo ( NUM00 ) ; verifyToken . setEnabled ( _BOOL ) ; }
public Certificate buildCertificate ( String certString ) throws InvalidCertificate { try { String base64Cert = formatCertificate ( certString ) ; $F217487 ( inBytes , base64Cert ) $F5348 ( cf , CertificateFactory ) assert inBytes . available ( ) > NUM00 ; Certificate certificate = cf . generateCertificate ( inBytes ) ; $F59 ( inBytes ) return certificate ; } catch ( Exception e ) { $F630 ( log , e ) throw FaultUtil . InvalidCertificate ( NUM00 ) ; } }
private PageLeafImpl compact ( TableKelp table ) { long now = CurrentTime . currentTime ( ) / NUM00 ; Set < PageLeafEntry > entries = fillEntries ( table ) ; ArrayList < BlockLeaf > $F204 ( blocks ) ; BlockLeaf block = new BlockLeaf ( getId ( ) ) ; blocks . add ( block ) ; Row row = table . row ( ) ; for ( PageLeafEntry entry : entries ) { if ( entry . getCode ( ) != INSERT && entry . getExpires ( ) <= now ) $F1448 while ( ! block . addEntry ( row , entry ) ) { block = new BlockLeaf ( getId ( ) ) ; blocks . add ( block ) ; } } PageLeafImpl newPage = new PageLeafImpl ( getId ( ) , getNextId ( ) , getSequence ( ) , _table , getMinKey ( ) , getMaxKey ( ) , blocks ) ; newPage . validate ( table ) ; newPage . toSorted ( table ) ; if ( isDirty ( ) ) { newPage . setDirty ( ) ; } if ( _stub != null ) { _stub . copyToCompact ( newPage ) ; } return newPage ; }
public SabresQuery $F38789 ( clazz ) { this . clazz = clazz ; name = clazz . getSimpleName ( ) ; innerQueries = null ; }
SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { $F74107 ( deadline , timed , System , nanos ) $F686 ( w , Thread ) int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : NUM00 ) ; for ( $F589 ) { if $F84922 ( w ) s . tryCancel ( ) ; SNode m = s . match ; $F60730 ( m ) if ( timed ) { $F27353 ( nanos , deadline , System ) if ( nanos <= NUM00 ) { s . tryCancel ( ) ; $F598 } } if ( spins > NUM00 ) spins = shouldSpin ( s ) ? ( spins - NUM00 ) : NUM00 ; else if $F74129 ( s ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
public String backupNow ( String backupFilePrefix ) throws McException , IOException { $F980 ( _logger ) return Backup . backup ( backupFilePrefix ) ; }
public static void CF7 $F50490 ( x , f , c , nx ) { double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; for ( $F9993 ( j , nx ) ) { if ( j % NUM00 == NUM00 ) { yj = x [ j - NUM00 ] - Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; sum1 += $F63533 ( yj , Math , PI ) ; } else { $F94025 ( yj , x , j , Math , PI , nx ) if $F2862 ( j ) { sum2 += yj * yj ; } else { sum2 += $F63533 ( yj , Math , PI ) ; } } } f [ NUM00 ] = x [ NUM00 ] + sum1 ; f [ NUM00 ] = $F247205 ( x ) * $F247205 ( x ) + sum2 ; c [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) ) ; c [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) ) ; }
$F75659 ( takeLock , putLock )
public boolean isClusteredHost ( StorageSystem storage , $F15661 initiators ) $F25228 ( isClusteredHost , storage , initiators )
public static List < SubstringReplacerMatchRule > matchRulesFromInternal ( String matchReplaceDetails , Instances inputStructure , String statusMessagePrefix , Logger log , Environment env ) { List < SubstringReplacerMatchRule > matchRules = new ArrayList < SubstringReplacerMatchRule > $F72 ; $F6542 ( mrParts , matchReplaceDetails ) for ( String p : mrParts ) { SubstringReplacerMatchRule mr = new SubstringReplacerMatchRule ( p . trim ( ) ) ; mr . m_statusMessagePrefix = statusMessagePrefix ; mr . m_logger = log ; mr . init ( env , inputStructure ) ; matchRules . add ( mr ) ; } return matchRules ; }
private static void time ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO , boolean reducedPrec , boolean datePresent ) { boolean hour = fields . remove ( DateTimeFieldType . hourOfDay ( ) ) ; boolean minute = fields . remove ( DateTimeFieldType . minuteOfHour ( ) ) ; boolean second = fields . remove ( DateTimeFieldType . secondOfMinute ( ) ) ; boolean milli = fields . remove ( DateTimeFieldType . millisOfSecond ( ) ) ; if ( ! hour && ! minute && ! second && ! milli ) $F932 if ( hour || minute || second || milli ) { if ( strictISO && reducedPrec ) $F18931 ( fields ) if ( datePresent ) $F188367 ( bld ) } if ( hour && minute && second || ( hour && ! second && ! milli ) ) $F845 else { if ( strictISO && datePresent ) $F18931 ( fields ) if ( ! hour && ( minute && second || ( minute && ! milli ) || second ) ) $F845 else { if ( strictISO ) $F18931 ( fields ) } } if ( hour ) { bld . appendHourOfDay ( NUM00 ) ; } else if ( minute || second || milli ) $F188367 ( bld ) if ( extended && hour && minute ) $F188367 ( bld ) if ( minute ) { bld . appendMinuteOfHour ( NUM00 ) ; } else if ( second || milli ) $F188367 ( bld ) if ( extended && minute && second ) $F188367 ( bld ) if ( second ) { bld . appendSecondOfMinute ( NUM00 ) ; } else if ( milli ) $F188367 ( bld ) if ( milli ) { $F188366 ( bld ) bld . appendMillisOfSecond ( NUM00 ) ; } }
public static $F131 mergeAndExtractParams ( $F42010 ( globalConfig ) , $F42010 ( localParams ) , $F6877 ignoreParams , Map < String , ExternalResourceDescription > resources ) { $F13750 ( uniqueParams ) $F70469 ( uniqueParams , localParams ) $F70469 ( uniqueParams , globalConfig ) if ( ignoreParams != null ) $F111938 ( uniqueParams , ignoreParams ) $F131 params = new Object [ $F62428 ( resources ) + $F62428 ( uniqueParams ) ] ; int i = NUM00 ; for ( Entry < String , ExternalResourceDescription > entry : resources . entrySet ( ) ) { params [ i ++ ] = entry . getKey ( ) ; params [ i ++ ] = entry . getValue ( ) ; } for ( String key : uniqueParams ) { params [ i ++ ] = key ; if $F1710 ( localParams , key ) { params [ i ++ ] = CpeBuilderUtils . convertToParameterValue ( localParams . get ( key ) ) ; } else { params [ i ++ ] = CpeBuilderUtils . convertToParameterValue ( globalConfig . get ( key ) ) ; } } return params ; }
public void storeProperties ( String artifact , String version , Properties props ) throws IOException { Path propertiesFile = getPropertiesFile ( artifact , version ) ; Path dir = propertiesFile . getParent ( ) ; if $F33270 ( Files , dir ) { Files . createDirectories ( dir ) ; } try ( OutputStream out = new BufferedOutputStream ( newOutputStream ( propertiesFile ) ) ) { $F145993 ( props , out ) } }
public static String makeDescriptor ( $F749 params , Class retType ) { $F280 ( sbuf ) $F84 ( sbuf ) for ( $F1139 ( i , params ) ) makeDesc ( sbuf , params [ i ] ) ; $F84 ( sbuf ) if ( retType != null ) makeDesc ( sbuf , retType ) ; $F92 ( sbuf ) }
public boolean isLoggable ( Level lev ) { return logger . isLoggable ( lev ) ; }
int parseHour ( String source , char patternChar , int offset ) throws ParseException { int min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? NUM00 : NUM00 ; int max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? NUM00 : NUM00 ) + min ; return parseNumber ( source , offset , NUM00 , min , max ) - min ; }
$F1 public boolean supportsKnowledge $F72 { return _BOOL ; }
$F1322 ( criteria , oredCriteria )
@ DataProvider public $F29684 invalidIdProvider $F72 { return new Object [ ] [ ] { new Object [ ] { NUM00 , NUM00 , HttpStatus . SC_NOT_FOUND } , new Object [ ] { NUM00 , NUM00 , HttpStatus . SC_NOT_FOUND } , new Object [ ] { NUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } , new Object [ ] { NUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } , new Object [ ] { NUM00 , NUM00 , HttpStatus . SC_INTERNAL_SERVER_ERROR } } ; }
public final static HeaderElement parseHeaderElement $F45528 ( value , parser ) throws ParseException { $F826 ( value ) $F45529 ( parser , BasicHeaderValueParser ) $F45535 ( buffer , value ) buffer . append ( value ) ; $F45541 ( cursor , value ) return parser . parseHeaderElement ( buffer , cursor ) ; }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
public static String encodeString ( String s ) { return new String ( encode ( s . getBytes ( ) ) ) ; }
private void clearState $F72 $F154601 ( allocatedResources , requestsToCountMap , requestsQueue )
public static $F1986 vectorBoxCorner ( $F1986 center , $F1986 result , double distance , boolean upperRight ) { if ( result == null || result . length != center . length ) { $F14238 ( result , center ) } if ( upperRight == _BOOL ) $F52810 ( distance ) distance = SIN_PI_DIV_4 * distance ; for ( $F1139 ( i , center ) ) { result [ i ] = center [ i ] + distance ; } return result ; }
public void toArray $F23416 ( array ) $F138343 ( System , data , array , size )
public FixedSecureRandom ( boolean intPad , $F31427 ( values ) ) { $F1538 ( bOut ) for ( $F15868 ( i , values ) ) { try $F31431 ( bOut , values , i ) catch ( IOException e ) $F825 } $F3031 ( _data , bOut ) if ( intPad ) { _intPad = _data . length % NUM00 ; } }
$F1 protected void ensureNumberOfColumns ( int numberOfColumns ) { if ( data . length >= numberOfColumns ) $F932 $F12300 ( newData , numberOfColumns ) $F7057 ( System , data , newData ) data = newData ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void invokeHookSpoutAck ( Object messageId , long completeLatencyNs ) { if $F6887 ( taskHooks ) { SpoutAckInfo ackInfo = new SpoutAckInfo ( messageId , getThisTaskId ( ) , completeLatencyNs / Constants . MILLISECONDS_TO_NANOSECONDS ) ; for ( ITaskHook taskHook : taskHooks ) { taskHook . spoutAck ( ackInfo ) ; } } }
public static float wrap ( float value ) { if ( value >= NUM00 ) { return value - ( int ) value ; } float wrappedValue = value - ( float ) Math . floor ( value ) ; if ( wrappedValue >= NUM00 ) { wrappedValue -= NUM00 ; } return wrappedValue ; }
StubSkeletonWriter ( BatchEnvironment env , RemoteClass remoteClass , StubVersion version ) { this . env = env ; this . remoteClass = remoteClass ; this . version = version ; stubClassName = Util . binaryNameOf ( remoteClass . classDoc ( ) ) + NUM00 ; skeletonClassName = Util . binaryNameOf ( remoteClass . classDoc ( ) ) + NUM00 ; $F24867 ( i , stubClassName ) packageName = ( i != - NUM00 ? stubClassName . substring ( NUM00 , i ) : NUM00 ) ; $F4571 ( stubClassSimpleName , stubClassName , i ) $F4571 ( skeletonClassSimpleName , skeletonClassName , i ) $F54171 ( remoteMethods , remoteClass ) methodFieldNames = nameMethodFields ( remoteMethods ) ; }
$F92274 ( s , lock , this , p , first )
public void removeUpdateListener ( AnimatorUpdateListener listener ) $F49005 ( mUpdateListeners , listener )
public void put ( String key , Object value , boolean errorOnFail ) { if ( value == null ) { putNull ( key ) ; } else if ( value instanceof Boolean ) { put ( key , ( Boolean ) value ) ; } else if ( value instanceof Byte ) { put ( key , ( Byte ) value ) ; } else if ( value instanceof Double ) { put ( key , ( Double ) value ) ; } else if ( value instanceof Float ) { put ( key , ( Float ) value ) ; } else if ( value instanceof Integer ) { put ( key , ( Integer ) value ) ; } else if ( value instanceof Long ) { put ( key , ( Long ) value ) ; } else if ( value instanceof Short ) { put ( key , ( Short ) value ) ; } else if ( value instanceof String ) { put ( key , ( String ) value ) ; } else if $F2456 ( value ) { put ( key , $F2457 ( value ) ) ; } else if ( errorOnFail ) { throw new UnsupportedOperationException $F93485 ( value ) ; } }
private void step $F72 { $F22620 ( casings ) $F22620 ( casings ) $F22620 ( casings ) stepPipes ( ) ; stepForwarders ( ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return HOST ; $F3366 return PORT ; $F3366 return ID ; $F3366 return STATE ; $F3366 return TIMESTAMP ; $F3366 return VERSION ; $F20809 } }
public static void CF7 $F50490 ( x , f , c , nx ) { double sum1 = NUM00 ; double sum2 = NUM00 ; double yj ; for ( $F9993 ( j , nx ) ) { if ( j % NUM00 == NUM00 ) { yj = x [ j - NUM00 ] - Math . cos ( NUM00 * PI * x [ NUM00 ] + j * PI / nx ) ; sum1 += $F63533 ( yj , Math , PI ) ; } else { $F94025 ( yj , x , j , Math , PI , nx ) if $F2862 ( j ) { sum2 += yj * yj ; } else { sum2 += $F63533 ( yj , Math , PI ) ; } } } f [ NUM00 ] = x [ NUM00 ] + sum1 ; f [ NUM00 ] = $F247205 ( x ) * $F247205 ( x ) + sum2 ; c [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( ( x [ NUM00 ] - NUM00 ) * $F247205 ( x ) ) ) ; c [ NUM00 ] = x [ NUM00 ] - Math . sin ( NUM00 * x [ NUM00 ] * PI + NUM00 * PI / nx ) - MYSIGN ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) * Math . sqrt ( Math . abs ( NUM00 * Math . sqrt ( NUM00 - x [ NUM00 ] ) - NUM00 * $F247205 ( x ) ) ) ; }
public static Number abs ( Number a ) { if ( isFloatingPoint ( a ) ) { return Math . abs ( a . doubleValue ( ) ) ; } else { return Math . abs ( a . longValue ( ) ) ; } }
private static DoubleMatrix2D xdistanceOld ( DoubleMatrix2D matrix , int norm ) $F1337
public $F2539 map $F72 $F2905 ( hashMap )
private String discoverTagName ( RSyntaxDocument doc , int dot ) { $F229316 ( stack ) $F48972 ( root , doc ) $F105097 ( curLine , root , dot ) for ( $F9993 ( i , curLine ) ) { $F48983 ( t , doc , i ) while ( t != null && t . isPaintable ( ) ) { if ( t . type == Token . MARKUP_TAG_DELIMITER ) { if ( t . isSingleChar ( NUM00 ) || t . isSingleChar ( NUM00 ) ) { t = t . getNextToken ( ) ; while ( t != null && t . isPaintable ( ) ) { if ( t . type == Token . MARKUP_TAG_NAME || t . type == Token . MARKUP_TAG_ATTRIBUTE ) { stack . push ( t . getLexeme ( ) ) ; $F597 } t = t . getNextToken ( ) ; } } else if ( t . textCount == NUM00 && t . text [ t . textOffset ] == NUM00 && ( t . text [ t . textOffset + NUM00 ] == NUM00 || t . text [ t . textOffset + NUM00 ] == NUM00 ) ) { if $F5973 ( stack ) $F89427 ( stack ) } else if ( t . textCount == NUM00 && ( t . text [ t . textOffset ] == NUM00 || t . text [ t . textOffset ] == NUM00 ) && t . text [ t . textOffset + NUM00 ] == NUM00 ) { String tagName = null ; if $F5973 ( stack ) { tagName = ( String ) stack . pop ( ) ; } if ( t . offset + t . textCount >= dot ) { return tagName ; } } } t = t . getNextToken ( ) ; } } $F1274 }
private static void addQueryFields ( Document doc , Node parent , Collection < PojoField > fields ) { if $F5973 ( fields ) { Element prop = addProperty ( doc , parent , NUM00 , null ) ; Element map = addElement ( doc , prop , NUM00 , NUM00 , NUM00 ) ; for ( PojoField field : fields ) addElement ( doc , map , NUM00 , NUM00 , field . javaName ( ) , NUM00 , GeneratorUtils . boxPrimitiveType ( field . javaTypeName ( ) ) ) ; } }
public void testSimpleValidString $F72 throws Exception { JsonFactory jsonF = new JsonFactory $F72 ; DataFormatDetector detector = new DataFormatDetector ( jsonF ) ; final String JSON = NUM00 ; DataFormatMatcher matcher = detector . findFormat ( $F18490 ( JSON ) ) ; assertTrue ( matcher . hasMatch ( ) ) ; assertEquals ( NUM00 , matcher . getMatchedFormatName ( ) ) ; assertSame ( jsonF , matcher . getMatch ( ) ) ; assertEquals ( MatchStrength . WEAK_MATCH , matcher . getMatchStrength ( ) ) ; JsonParser jp = matcher . createParserWithMatch ( ) ; assertToken ( JsonToken . VALUE_ <missing ';'> NUM00 , jp . nextToken ( ) ) ; assertEquals ( NUM00 , jp . getText ( ) ) ; $F67384 ( assertNull , jp ) ; $F59 ( jp ) }
protected boolean doStart $F72 { if $F279276 ( _lifecycle ) { return _BOOL ; } $F1485 ( isEnable , _BOOL ) $F109722 ( startingCount , _startingCount ) int threadCount = _threadCount . get ( ) + startingCount ; if ( _threadMax < threadCount ) { $F15856 ( _startingCount ) onThreadMax ( ) ; return _BOOL ; } else if ( isIdleTooLow ( startingCount ) ) { return _BOOL ; } else { $F15856 ( _startingCount ) return _BOOL ; } }
$F1 public String globalInfo $F72 $F11287
public static long streamSkip ( InputStream stream , long count ) throws IOException { long skipped = stream . skip ( count ) ; if ( skipped < NUM00 ) { $F10317 ( temp ) skipped = stream . read ( temp , NUM00 , Math . min ( ( int ) count , NUM00 ) ) ; } return skipped ; }
public boolean managedObjectExists ( $F303831 ( path ) ) { DN targetDN = DNBuilder . create ( path ) ; try { return configRepository . getEntry ( targetDN ) != null ; } catch ( ConfigException e ) { return _BOOL ; } }
public Vector2 rotate ( double theta ) { $F55455 ( cos , Math , theta ) $F55455 ( sin , Math , theta ) double x = this . x ; double y = this . y ; this . x = x * cos - y * sin ; this . y = x * sin + y * cos ; return this ; }
private static $F26352 regroupHistogram ( $F26353 ( matrix ) , $F2027 groups ) { long oldEntries = NUM00 ; for ( $F1139 ( i , matrix ) ) { oldEntries += matrix [ i ] . length - NUM00 ; } long newEntries = NUM00 ; for ( $F1139 ( ni , groups ) ) { newEntries += groups [ ni ] ; } if ( newEntries > oldEntries ) { int newlen = groups . length ; long ok = oldEntries ; for ( $F1139 ( ni , groups ) ) { if ( ok < groups [ ni ] ) { $F65716 ( newGroups , ni ) $F10236 ( System , groups , newGroups , ni ) groups = newGroups ; $F22574 ( groups , ni , ok ) ok = NUM00 ; $F597 } ok -= groups [ ni ] ; } } else { long excess = oldEntries - newEntries ; $F32792 ( newGroups , groups ) $F7057 ( System , groups , newGroups ) newGroups [ groups . length ] = ( int ) excess ; groups = newGroups ; } $F26352 newMatrix = new int [ groups . length ] [ ] ; int i = NUM00 ; int jMin = NUM00 ; int jMax = matrix [ i ] . length ; for ( $F1139 ( ni , groups ) ) { int groupLength = groups [ ni ] ; $F2027 group = new int [ NUM00 + groupLength ] ; long groupWeight = NUM00 ; newMatrix [ ni ] = group ; int njFill = NUM00 ; while ( njFill < group . length ) { int len = group . length - njFill ; while ( jMin == jMax ) { jMin = NUM00 ; jMax = matrix [ ++ i ] . length ; } if ( len > jMax - jMin ) len = jMax - jMin ; groupWeight += ( long ) matrix [ i ] [ NUM00 ] * len ; System . arraycopy ( matrix [ i ] , jMax - len , group , njFill , len ) ; jMax -= len ; njFill += len ; } Arrays . sort ( group , NUM00 , group . length ) ; group [ NUM00 ] = ( int ) ( ( groupWeight + groupLength / NUM00 ) / groupLength ) ; } assert ( jMin == jMax ) ; assert $F74408 ( i , matrix ) ; return newMatrix ; }
public void removePermission ( PermissionType permission ) $F207 ( removedPermissions , permission )
static void exportPrefs ( Preferences prefs , OutputStream stream , boolean withSubTree ) throws IOException , BackingStoreException { indent = - NUM00 ; BufferedWriter out = new BufferedWriter $F18982 ( stream ) ; out . write ( HEADER ) ; $F1769 ( out ) $F1769 ( out ) out . write ( DOCTYPE ) ; $F3410 ( out ) out . write ( PREFS_DTD_NAME ) ; $F3410 ( out ) $F1769 ( out ) $F1769 ( out ) flushStartTag ( NUM00 , $F21904 , $F51969 ( String , XML_VERSION ) , out ) ; flushStartTag ( NUM00 , $F21904 , new String [ ] { prefs . isUserNode ( ) ? NUM00 : NUM00 } , out ) ; flushEmptyElement ( NUM00 , out ) ; StringTokenizer ancestors = new StringTokenizer ( prefs . absolutePath ( ) , NUM00 ) ; exportNode ( ancestors , prefs , withSubTree , out ) ; flushEndTag ( NUM00 , out ) ; flushEndTag ( NUM00 , out ) ; $F1206 ( out ) out = null ; }
protected void storeInProfilesMap ( Client client ) { Set parentSet = client . getProperties ( PARENT_ID ) ; String clientType = client . getClientType ( ) ; Map m = getStylesProfileMap ( clientType , parentSet ) ; if ( m != null ) $F1717 ( m , clientType , client ) $F665 }
$F1654 ( data )
public void testBug4808 $F72 throws Exception { MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource $F72 ; ds . setURL ( BaseTestCase . dbUrl ) ; PooledConnection closeMeTwice = ds . getPooledConnection ( ) ; $F59 ( closeMeTwice ) $F59 ( closeMeTwice ) }
public void testComputeZNaN $F72 { Geometry linearGeom = read ( NUM00 ) ; LengthIndexedLine indexedLine = new LengthIndexedLine ( linearGeom ) ; double projIndex = indexedLine . project ( new Coordinate $F32532 ) ; Coordinate projPt = indexedLine . extractPoint ( projIndex ) ; assertTrue ( Double . isNaN ( projPt . z ) ) ; }
public static int optionLength ( String option ) { if $F3057 ( option ) $F1082 if $F3057 ( option ) $F1082 if $F3057 ( option ) $F1082 $F1082 }
public final double cos $F72 { return Math . cos ( this . radians ) ; }
public static FloatBuffer createFloatBuffer $F74143 ( coords ) { ByteBuffer bb = ByteBuffer . allocateDirect ( coords . length * SIZEOF_FLOAT ) ; $F16706 ( bb , ByteOrder ) $F16708 ( fb , bb ) fb . put ( coords ) ; $F16709 ( fb ) return fb ; }
public IntStreamEx remove ( IntPredicate predicate ) { return filter ( predicate . negate ( ) ) ; }
static void sendRawLine ( PircBot bot , BufferedWriter bwriter , String line ) { if ( line . length ( ) > bot . getMaxLineLength ( ) - NUM00 ) { line = line . substring ( NUM00 , bot . getMaxLineLength ( ) - NUM00 ) ; } synchronized ( bwriter ) { try { $F5299 ( bwriter , line ) $F1206 ( bwriter ) } $F3957 } }
Entry kill $F72 { Entry entry ; for ( $F5373 ( i , entries ) ) { entry = entries . get ( i ) ; if ( ! entry . dead ) { entry . dead = _BOOL ; return entry ; } } $F4638 }
public void slotFromLocoAddress ( int i , SlotListener l ) { $F124940 ( mLocoAddrHash , Integer , i , l ) LocoNetMessage m = new LocoNetMessage $F989 ; m . setOpCode ( LnConstants . OPC_LOCO_ADR ) ; m . setElement ( NUM00 , ( i / NUM00 ) & NUM00 ) ; m . setElement ( NUM00 , i & NUM00 ) ; tc . sendLocoNetMessage ( m ) ; }
protected void uninstallComponents $F72 { if ( scrollableTabLayoutEnabled ( ) ) { tabPane . remove ( tabScroller . viewport ) ; tabPane . remove ( tabScroller . scrollForwardButton ) ; tabPane . remove ( tabScroller . scrollBackwardButton ) ; tabScroller = null ; } }
public void reset $F72 { forms = null ; }
public static $F2539 populateRequestProperties ( $F2540 ( requestProperties ) , int bodyLength , MediaType contentType , MediaType acceptType ) { $F2540 ( properties ) ; if $F4251 ( requestProperties ) { $F23429 ( properties ) } else { $F26694 ( properties , requestProperties ) ; } if ( acceptType != null ) { properties . put ( HeaderNames . ACCEPT , acceptType . toString ( ) ) ; } if ( contentType != null ) { properties . put ( HeaderNames . CONTENT_TYPE , contentType . toString ( ) ) ; } if ( bodyLength > - NUM00 ) { properties . put ( HeaderNames . CONTENT_LENGTH , String . valueOf ( bodyLength ) ) ; } return properties ; }
public static BlockSnapshotDeleteCompleter createCompleter ( DbClient dbClient , BlockSnapshot snapshot , String task ) { BlockSnapshotDeleteCompleter completer = new BlockSnapshotDeleteCompleter ( snapshot , task ) ; if ( snapshot . getConsistencyGroup ( ) != null ) { $F114980 ( snapIds ) List $F106744 snaps = ControllerUtils . getSnapshotsPartOfReplicationGroup ( snapshot , dbClient ) ; for ( BlockSnapshot snap : snaps ) $F42097 ( snapIds , snap ) completer . addIds ( snapIds ) ; } return completer ; }
private void checkProtocolAlreadyExists $F73675 ( protocols , protocolType ) $F2202 ( protocols , protocolType )
private static char CallCharMethodV $F4272 ( env , objJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F4276 ( obj , env , objJREF ) Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Char , _BOOL ) ; return Reflection . unwrapChar ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
public void testConstrStringWithExponentWithPoint3 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals )
public static boolean isCompositionPlaylist ( ResourceByteRangeProvider resourceByteRangeProvider ) throws IOException { return IMFCompositionPlaylistType . isCompositionPlaylist ( resourceByteRangeProvider ) ; }
public static MasterPrivateKey decrypt $F84589 ( passphrase , encrypted ) throws HyperLedgerException { try { $F96 key = SCrypt . generate ( passphrase . getBytes ( NUM00 ) , BITCOIN_SEED , NUM00 , NUM00 , NUM00 , NUM00 ) ; $F89939 ( keyspec , key ) $F105480 ( cipher , Cipher ) $F96 iv = Arrays . copyOfRange ( encrypted , NUM00 , NUM00 ) ; $F96 data = Arrays . copyOfRange ( encrypted , NUM00 , encrypted . length ) ; cipher . init ( Cipher . DECRYPT_MODE , keyspec , new IvParameterSpec ( iv ) ) ; return MasterPrivateKey . parse ( new String ( cipher . doFinal ( data ) ) ) ; } catch ( UnsupportedEncodingException | InvalidAlgorithmParameterException | NoSuchPaddingException | NoSuchProviderException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException e ) { throw new HyperLedgerException ( e ) ; } }
protected boolean beforeRelease $F72 { return deque . size ( ) < maxSize ; }
final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , NUM00 ) ) $F9278 ( enq , node , _BOOL ) while ( ! isOnSyncQueue ( node ) ) $F5756 ( Thread ) return _BOOL ; }
public void reset $F72 { $F5634 ( System , initialState , chain ) ubiInit ( PARAM_TYPE_MESSAGE ) ; }
public int updateWithOnConflict ( String table , ContentValues values , String whereClause , $F806 whereArgs , @ ConflictAlgorithm int conflictAlgorithm ) { if $F45555 ( values ) $F825 acquireReference ( ) ; try { $F20818 ( sql ) $F84 ( sql ) $F6939 ( sql , CONFLICT_VALUES , conflictAlgorithm ) sql . append ( table ) ; $F84 ( sql ) $F2199 ( setValuesSize , values ) int bindArgsSize = ( whereArgs == null ) ? setValuesSize : ( setValuesSize + whereArgs . length ) ; $F133 ( bindArgs , bindArgsSize ) int i = NUM00 ; for ( $F21130 entry : values . valueSet ( ) ) { $F122292 ( sql , i ) $F79971 ( sql , entry ) bindArgs [ i ++ ] = entry . getValue ( ) ; $F84 ( sql ) } if ( whereArgs != null ) { for ( i = setValuesSize ; i < bindArgsSize ; i ++ ) { bindArgs [ i ] = whereArgs [ i - setValuesSize ] ; } } if $F20899 ( TextUtils , whereClause ) $F20352 ( sql , whereClause ) SQLiteStatement statement = new SQLiteStatement $F122301 ( this , sql , bindArgs ) ; try { return statement . executeUpdateDelete ( ) ; } $F3229 ( statement ) } $F49978 ( releaseReference ) }
public synchronized void addURLs ( List $F100821 urls ) { for ( URL url : urls ) super . addURL ( url ) ; $F12181 ( searchList ) searchList . addAll ( searchPath ) ; searchList . addAll ( urls ) ; $F5939 ( searchPath , Collections ) }
protected $F96 httpGet ( final String url ) { HttpGet httpRequest = null ; HttpResponse httpResponse = null ; CloseableHttpClient client = null ; try { final URI uri = new URI ( url . trim ( ) ) ; httpRequest = new HttpGet ( uri ) ; if ( contentType != null ) { httpRequest . setHeader ( CONTENT_TYPE , contentType ) ; } client = getHttpClient ( url ) ; httpResponse = getHttpResponse ( client , httpRequest , url ) ; final $F96 returnedBytes = readHttpResponse ( url , httpResponse ) ; return returnedBytes ; } catch ( URISyntaxException e ) $F36611 ( e ) finally { try { if ( httpRequest != null ) { httpRequest . releaseConnection ( ) ; } if ( httpResponse != null ) { EntityUtils . consumeQuietly ( httpResponse . getEntity ( ) ) ; } } $F18632 ( closeClient , client ) } }
$F8370 ( asString )
public final int readChar $F72 throws IOException { if ( _readEncoding != null ) { $F7468 ( ch , _readEncoding ) return ch ; } if ( _readLength <= _readOffset ) { if $F931 ( readBuffer ) $F150 } return _readBuffer [ _readOffset ++ ] & NUM00 ; }
$F392700 ( jpegFileName , exifOutFileName , NULL_ARGUMENT_ , is , writeExif , closeSilently , e )
public void execNonQuery $F8306 ( sql , selectionArgs ) { for ( $F151668 ( i , count , selectionArgs ) ) sql = sql . replaceFirst ( NUM00 , selectionArgs [ i ] ) ; LogUtils . d ( sql ) ; database . execSQL ( sql ) ; }
public DGeneralSubtreeChooser ( JFrame parent , String title , GeneralSubtree generalSubtree ) $F313840 ( super , parent , title , ModalityType , initComponents , generalSubtree )
public void insert ( UndoObjectStorable p_object ) { if ( p_object == null ) $F70401 ( classname ) disable_redo ( ) ; UndoObjectNode undoable_object = new UndoObjectNode ( p_object , stack_level ) ; objects_map . put ( p_object , undoable_object ) ; }
protected abstract SimpleEntry entryDataMatched ( EntryHierarchyData ehd ) ;
$F1 public $F987 listOptions $F72 { $F46582 ( result , enumToVector , super ) result . add ( new Option ( NUM00 + defaultNoisePercent ( ) + NUM00 , NUM00 , NUM00 , NUM00 ) ) ; $F1007 ( result ) }
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
$F1431 protected void notifyPropertyChangeListener $F109214 ( property , oldValue , newValue ) { if ( $F1256 ( oldValue , newValue ) || oldValue == newValue ) $F21338 ( log ) Vector $F39994 v ; synchronized ( this ) { v = ( Vector $F39994 ) listeners . clone ( ) ; } if $F585 ( log ) { log . debug ( $F26062 ( v , property ) ) ; } $F2199 ( cnt , v ) for ( $F119 ( i , cnt ) ) { PropertyChangeListener client = v . elementAt ( i ) ; client . propertyChange ( new PropertyChangeEvent ( this , property , oldValue , newValue ) ) ; } }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public Element writeBeanVisual ( Element parent , Object o , String name ) throws Exception { Element node ; BeanVisual visual ; if ( DEBUG ) { trace ( $F219728 , name ) ; } m_CurrentNode = parent ; visual = ( BeanVisual ) o ; node = writeToXML ( parent , o , name ) ; invokeWriteToXML ( node , visual . getIconPath ( ) , VAL_ICONPATH ) ; invokeWriteToXML ( node , visual . getAnimatedIconPath ( ) , VAL_ANIMATEDICONPATH ) ; return node ; }
private String displayNametoBackCompatName ( String queryName ) { $F55879 ( lastBackSlash , queryName ) if ( lastBackSlash > NUM00 && $F1093 ( lastBackSlash , queryName ) ) { queryName = $F2858 + queryName ; queryName = $F1399 ( queryName , lastBackSlash ) + $F2858 + NUM00 + queryName . substring ( lastBackSlash + NUM00 ) ; queryName = queryName . replace ( NUM00 , $F2858 ) ; } return queryName ; }
public SQLiteDatabaseConfiguration ( String path , int openFlags ) { $F826 ( path ) this . path = path ; label = stripPathForLogs ( path ) ; this . openFlags = openFlags ; maxSqlCacheSize = NUM00 ; $F39044 ( locale , Locale ) }
$F1 public void drawRangeGridline ( Graphics2D g2 , CategoryPlot plot , ValueAxis axis , Rectangle2D dataArea , double value ) { $F10706 ( range , axis ) $F10707 ( range , value ) $F10701 ( adjusted , dataArea , getYOffset , getXOffset ) Line2D line1 = null ; Line2D line2 = null ; $F10709 ( orientation , plot ) if ( orientation == PlotOrientation . HORIZONTAL ) { $F69926 ( x0 , axis , value , adjusted , plot ) double x1 = x0 + getXOffset ( ) ; $F69928 ( y0 , dataArea ) double y1 = y0 - getYOffset ( ) ; $F69930 ( y2 , dataArea ) $F69935 ( line1 , x0 , y0 , x1 , y1 ) $F69939 ( line2 , x1 , y1 , y2 ) } else if ( orientation == PlotOrientation . VERTICAL ) { $F69926 ( y0 , axis , value , adjusted , plot ) double y1 = y0 - getYOffset ( ) ; $F69942 ( x0 , dataArea ) double x1 = x0 + getXOffset ( ) ; $F69944 ( x2 , dataArea ) $F69935 ( line1 , x0 , y0 , x1 , y1 ) $F69948 ( line2 , x1 , y1 , x2 ) } Paint paint = plot . getRangeGridlinePaint ( ) ; Stroke stroke = plot . getRangeGridlineStroke ( ) ; g2 . setPaint ( paint != null ? paint : Plot . DEFAULT_OUTLINE_PAINT ) ; g2 . setStroke ( stroke != null ? stroke : Plot . DEFAULT_OUTLINE_STROKE ) ; g2 . draw ( line1 ) ; g2 . draw ( line2 ) ; }
public static String dump ( final EndpointDescriptor descriptor ) { return String . format ( $F34354 + NUM00 + NUM00 + NUM00 , descriptor . bLength ( ) , descriptor . bDescriptorType ( ) , String . format ( NUM00 , descriptor . bEndpointAddress ( ) & NUM00 ) , descriptor . bEndpointAddress ( ) & NUM00 , getDirectionName ( descriptor . bEndpointAddress ( ) ) , descriptor . bmAttributes ( ) & NUM00 , getTransferTypeName ( descriptor . bmAttributes ( ) ) , getSynchTypeName ( descriptor . bmAttributes ( ) ) , getUsageTypeName ( descriptor . bmAttributes ( ) ) , descriptor . wMaxPacketSize ( ) & NUM00 , descriptor . bInterval ( ) & NUM00 ) ; }
public $F987 listOptions $F72 { $F994 ( newVector ) $F1006 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public static void printPadding ( PrintWriter out , int padding ) { for ( $F1316 ( i , padding ) ) $F21410 ( out ) }
protected void sneakyClear $F72 { List < EObject > collection = new UnmodifiableEList $F200 ( size , data ) ; sneakyDoClear ( ) ; for ( Iterator < EObject > i = collection . iterator ( ) ; i . hasNext ( ) ; ) { inverseRemove ( i . next ( ) , null ) ; } }
$F137843 public static Bitmap createHomeScreenIconFromWebIcon ( Context context , Bitmap webIcon ) { ActivityManager am = ( ActivityManager ) context . getSystemService ( Context . ACTIVITY_SERVICE ) ; int maxInnerSize = Math . round ( am . getLauncherLargeIconSize ( ) * MAX_INNER_SIZE_RATIO ) ; int innerSize = Math . min ( maxInnerSize , Math . max ( $F13695 ( webIcon ) ) ) ; $F383470 ( padding , Math , ICON_PADDING_RATIO , innerSize ) int outerSize = innerSize + NUM00 * padding ; Bitmap bitmap = null ; try { bitmap = Bitmap . createBitmap ( outerSize , outerSize , Bitmap . Config . ARGB_8888 ) ; } catch ( OutOfMemoryError e ) $F35336 ( Log , TAG , webIcon ) $F107516 ( canvas , bitmap ) Rect innerBounds = new Rect ( padding , padding , outerSize - padding , outerSize - padding ) ; Paint paint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; paint . setFilterBitmap ( _BOOL ) ; canvas . drawBitmap ( webIcon , null , innerBounds , paint ) ; $F383470 ( cornerRadius , Math , ICON_CORNER_RADIUS_RATIO , outerSize ) $F6212 ( path ) path . setFillType ( Path . FillType . INVERSE_WINDING ) ; RectF innerBoundsF = new RectF ( innerBounds ) ; path . addRoundRect ( innerBoundsF , cornerRadius , cornerRadius , Path . Direction . CW ) ; paint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . CLEAR ) ) ; canvas . drawPath ( path , paint ) ; return bitmap ; }
private static boolean isInOverflow ( MenuItem item ) { return ! isActionButton ( item ) ; }
private static int determineConsecutiveBinaryCount ( CharSequence msg , $F96 bytes , int startpos ) throws WriterException { $F1749 ( len , msg ) int idx = startpos ; while ( idx < len ) { $F1280 ( ch , msg , idx ) int numericCount = NUM00 ; while ( numericCount < NUM00 && isDigit ( ch ) ) { numericCount ++ ; int i = idx + numericCount ; $F66497 ( i , len ) ch = msg . charAt ( i ) ; } if ( numericCount >= NUM00 ) { return idx - startpos ; } int textCount = NUM00 ; while ( textCount < NUM00 && isText ( ch ) ) { textCount ++ ; int i = idx + textCount ; $F66497 ( i , len ) ch = msg . charAt ( i ) ; } if ( textCount >= NUM00 ) { return idx - startpos ; } ch = msg . charAt ( idx ) ; if ( bytes [ idx ] == NUM00 && ch != NUM00 ) { throw new WriterException ( NUM00 + ch + NUM00 + ( int ) ch + NUM00 ) ; } idx ++ ; } return idx - startpos ; }
void pluginMessage ( Throwable ex ) { log . printLines ( PrefixKind . JAVAC , NUM00 ) ; $F94360 ( ex , log , WriterKind ) }
public Builder map ( String fullyQualifiedColumnNames , ColumnMapper mapper ) { Predicate < ColumnId > columnMatcher = Predicates . includes ( fullyQualifiedColumnNames , null ) ; rules . add ( new MapperRule ( columnMatcher , mapper ) ) ; return this ; }
public double theta $F72 { $F31795 ( Math , y , x ) }
public static int hash32 ( final String text , int from , int length ) { return hash32 ( text . substring ( from , from + length ) ) ; }
protected void sendClosingMessage $F72 { try { send ( ConnectionMessage . CLOSING , NetworkProtocol . TCP ) ; } catch ( Exception e ) { log . warning ( $F5351 ( e ) ) ; } try { send ( ConnectionMessage . CLOSING , NetworkProtocol . UDP ) ; } catch ( Exception e ) { log . warning ( $F5351 ( e ) ) ; } }
public static String parseNumberToString ( int aNumber ) { boolean temp = _BOOL , negative = _BOOL ; if ( aNumber < NUM00 ) { aNumber *= - NUM00 ; negative = _BOOL ; } $F83 ( tStringB ) for ( int i = NUM00 ; i > NUM00 ; i /= NUM00 ) { int tDigit = ( aNumber / i ) % NUM00 ; if ( temp && tDigit != NUM00 ) temp = _BOOL ; if ( ! temp ) { tStringB . append ( tDigit ) ; if ( i != NUM00 ) for ( int j = i ; j > NUM00 ; j /= NUM00 ) if ( j == NUM00 ) $F84 ( tStringB ) } } $F1822 ( tString , tStringB ) if $F1238 ( tString , E ) tString = NUM00 ; return negative ? NUM00 + tString : tString ; }
public void remove ( T graphic ) { synchronized ( mLock ) { mGraphics . remove ( graphic ) ; if $F1256 ( mFirstGraphic , graphic ) { mFirstGraphic = null ; } } postInvalidate ( ) ; }
public boolean validSystemNameConfig ( String systemName ) $F3139 ( _BOOL )
public int read $F72 throws IOException { ensureOpen ( ) ; $F55825 ( next , length ) return str . charAt ( next ++ ) ; }
void addHiddenChannelListener ( HiddenChannelListener listener ) $F207 ( listeners , listener )
public boolean nextTo ( final Entity entity , final double step ) { final Rectangle2D thisArea = new $F1634 ( x - step , y - step , area . getWidth ( ) + NUM00 * step , area . getHeight ( ) + NUM00 * step ) ; return thisArea . intersects ( entity . getArea ( ) ) ; }
private long rebalance_nl ( final long nParent , final long n , LongArray unlinked ) { final long nL = unsharedLeft ( n , unlinked ) ; final long nR = unsharedRight ( n , unlinked ) ; if ( ( nL == NUM00 || nR == NUM00 ) && vOptIsNull ( n ) ) { if ( attemptUnlink_nl ( nParent , n , unlinked ) ) $F4915 ( fixHeight_nl , nParent ) else { return n ; } } final int hN = height ( n ) ; final int hL0 = height ( nL ) ; final int hR0 = height ( nR ) ; final int hNRepl = NUM00 + Math . max ( hL0 , hR0 ) ; final int bal = hL0 - hR0 ; if ( bal > NUM00 ) $F16525 ( rebalanceToRight_nl , nParent , n , nL , hR0 , unlinked ) else if ( bal < - NUM00 ) $F16525 ( rebalanceToLeft_nl , nParent , n , nR , hL0 , unlinked ) else if ( hNRepl != hN ) { height ( n , hNRepl ) ; return fixHeight_nl ( nParent ) ; } else $F1083 }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
private void addConversations $F72 { TPP_Phase myphase = AWAITING ; mainNPC . add ( ConversationStates . ATTENDING , $F161002 ( Arrays ) , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , $F38 , null ) ; mainNPC . add ( ConversationStates . ATTENDING , NUM00 , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , null , new DetailsKillingsAction $F72 ) ; mainNPC . add ( ConversationStates . ATTENDING , NUM00 , new TPPQuestInPhaseCondition ( myphase ) , ConversationStates . ATTENDING , null , new RewardPlayerAction $F72 ) ; }
public static void w $F3867 ( tag , s , args ) { if ( LOG . WARN >= LOGLEVEL ) Log . w ( tag , String . format ( s , args ) ) ; }
@ edu . umd . cs . findbugs . annotations . SuppressWarnings ( $F3144 , justification = NUM00 ) public void handleNotification ( Notification notification , Object handback ) { if ( handback instanceof AgentImpl ) { AgentImpl agent = ( AgentImpl ) handback ; JMXConnectionNotification jmxNotifn = ( JMXConnectionNotification ) notification ; if $F585 ( logger ) { logger . debug ( NUM00 , jmxNotifn . getConnectionId ( ) ) ; } agent . updateRmiClientsCount ( ) ; } }
public static boolean isBlank ( String s ) { $F1933 ( s , _BOOL ) $F1749 ( sLen , s ) for ( $F119 ( i , sLen ) ) { if $F11994 ( Character , s , i ) { return _BOOL ; } } return _BOOL ; }
public PlainTextDictionary ( Path path ) throws IOException { in = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ; }
public boolean addAliasByNumber ( String aliasName , String number ) { if $F3578 ( aliasName ) return _BOOL ; String contactName = ContactsManager . getContactNameOrNull ( ctx , number ) ; addOrUpdate ( aliasName , number , contactName ) ; return _BOOL ; }
void splitData ( Node node , Node newNode , int offset ) { if ( ranges != null ) { notifyRangesSplitData ( node , newNode , offset ) ; } }
$F1113 @ ObjectiveCName ( NUM00 ) public ConfigurationBuilder addTrustedKey ( String trustedKey ) { trustedKeys . add ( new TrustedKey ( trustedKey ) ) ; return this ; }
private void checkIsCorrectClass $F72 { if ( checkIsSubClass ( ACT_NAME ) ) { type = ElementType . ACTTIVITY ; } else if $F71585 ( checkIsSubClass , FRAG_NAME , V4_FRAG_NAME ) { type = ElementType . FRAGMENT ; } else { throw new IllegalArgumentException ( String . format ( NUM00 , element . getQualifiedName ( ) , ACT_NAME , FRAG_NAME , V4_FRAG_NAME ) ) ; } }
String transformResourceIdToFileName ( final String resourceName ) $F11447 ( resourceName )
public void disable ( RichFormatterFeature feature ) $F106 ( features , feature )
$F38752 ( _BOOL )
public final boolean isSecure ( Socket sock ) throws IllegalArgumentException { $F826 ( sock ) if ( sock . getClass ( ) != $F43259 ) $F825 $F43264 ( sock ) return _BOOL ; }
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
private void skipWhitespace $F72 { matcher . usePattern ( WHITESPACE ) ; if $F54321 ( matcher ) { matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } }
$F20813 ( fieldId , SUCCESS , MSG )
public void pushStylesheet ( Stylesheet s ) { if $F10471 ( m_stylesheets ) m_stylesheetRoot = ( StylesheetRoot ) s ; m_stylesheets . push ( s ) ; }
private void fillNodesInContext ( SiteNode rootNode , List $F46963 nodesList ) { $F1431 Enumeration $F46963 en = rootNode . children ( ) ; while $F1444 ( en ) { SiteNode sn = en . nextElement ( ) ; $F192176 ( isInContext , sn , nodesList ) fillNodesInContext ( sn , nodesList ) ; } }
$F45923 public boolean matches ( InventoryCrafting p_77569_1_ , World p_77569_2_ ) { ArrayList arraylist = new ArrayList ( this . recipeItems ) ; for ( $F809 ( i ) ) { for ( $F809 ( j ) ) { ItemStack itemstack = p_77569_1_ . getStackInRowAndColumn ( j , i ) ; if ( itemstack != null ) { boolean flag = _BOOL ; $F19402 ( iterator , arraylist ) while $F2921 ( iterator ) { ItemStack itemstack1 = ( ItemStack ) iterator . next ( ) ; if ( itemstack . getItem ( ) == itemstack1 . getItem ( ) && ( itemstack1 . getItemDamage ( ) == NUM00 || itemstack . getItemDamage ( ) == itemstack1 . getItemDamage ( ) ) ) { flag = _BOOL ; arraylist . remove ( itemstack1 ) ; $F597 } } $F42316 ( flag , _BOOL ) } } } $F18904 ( arraylist ) }
public StringBuilder dumpStatements ( final IAccessPath < ISPO > accessPath ) { $F1121 ( sb ) final BigdataStatementIterator itr = $F15849 ( asStatementIterator , accessPath ) ; try { while $F2921 ( itr ) { sb . append ( NUM00 + itr . next ( ) ) ; } return sb ; } $F3229 ( itr ) }
public static Element svgWaitIcon ( Document document , double x , double y , double w , double h ) { Element g = SVGUtil . svgElement ( document , SVGConstants . SVG_G_TAG ) ; setAtt ( g , SVGConstants . SVG_TRANSFORM_ATTRIBUTE , $F3905 ( x , y , w , h ) ) ; Element thro = SVGUtil . svgElement ( document , SVGConstants . SVG_PATH_TAG ) ; setAtt ( thro , SVGConstants . SVG_D_ATTRIBUTE , THROBBER_PATH ) ; setStyle ( thro , THROBBER_STYLE ) ; Element anim = SVGUtil . svgElement ( document , SVGConstants . SVG_ANIMATE_TRANSFORM_TAG ) ; setAtt ( anim , SVGConstants . SVG_ATTRIBUTE_NAME_ATTRIBUTE , SVGConstants . SVG_TRANSFORM_ATTRIBUTE ) ; setAtt ( anim , SVGConstants . SVG_ATTRIBUTE_TYPE_ATTRIBUTE , NUM00 ) ; setAtt ( anim , SVGConstants . SVG_TYPE_ATTRIBUTE , SVGConstants . SVG_ROTATE_ATTRIBUTE ) ; setAtt ( anim , SVGConstants . SVG_FROM_ATTRIBUTE , NUM00 ) ; setAtt ( anim , SVGConstants . SVG_TO_ATTRIBUTE , NUM00 ) ; setAtt ( anim , SVGConstants . SVG_BEGIN_ATTRIBUTE , fmt ( $F34938 ( Math ) ) + NUM00 ) ; setAtt ( anim , SVGConstants . SVG_DUR_ATTRIBUTE , NUM00 ) ; setAtt ( anim , SVGConstants . SVG_REPEAT_COUNT_ATTRIBUTE , NUM00 ) ; setAtt ( anim , SVGConstants . SVG_FILL_ATTRIBUTE , NUM00 ) ; thro . appendChild ( anim ) ; g . appendChild ( thro ) ; return g ; }
protected void onEnd ( Pcap pcap ) { this . end = _BOOL ; }
public void cd ( String dir ) { $F83 ( buf ) String command = $F36702 ( String , ImageServerDialogProperties , dir ) ; sendWaitFor ( command , defaultTimeout , prompts , buf ) ; $F62755 ( log , buf ) }
public void addRequestProperty ( String key , String value ) { jarFileURLConnection . addRequestProperty ( key , value ) ; }
$F131106 ( number , testValidity , string )
public static void writeSpecInfoToFiles ( SecuritySpecModel securitySpecModel , String app_ROOT_DIR ) { writeInfoFlowSummaryToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; writeInfoFlowDetailsToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; writeValueInfoToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; writePointsToInfoToFile ( securitySpecModel , Config . v ( ) . APP_ROOT_DIR ) ; }
$F23145 ( measureSpec , result , specMode , MeasureSpec , specSize , mRadius , getPaddingTop , getPaddingBottom , Math )
private void handleCommand $F103468 ( id , command , params ) { $F1729 ( originCommand , commandId , id ) $F23170 ( originCommand ) handler . handleCommand ( id , command , params , originCommand ) ; if $F3057 ( command ) $F37856 ( LOGGER , params ) }
private void closeAllDumps $F72 { $F131 options = $F4582 ; int selectValue = JOptionPane . showOptionDialog ( null , NUM00 , NUM00 , JOptionPane . DEFAULT_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , options [ NUM00 ] ) ; if ( selectValue == NUM00 ) { $F20637 ( topNodes ) resetMainPanel ( ) ; } }
private void closeCounterDataInputStream $F72 throws DataFallbackException { if $F585 ( LOG ) $F74568 ( LOG , counterFile ) if ( dInput != null ) { try $F881 ( dInput ) catch ( IOException e ) { throw new DataFallbackException $F1783 ( e ) ; } $F14110 ( dInput ) } }
private static String removeFileNameExtension ( String fileName ) { if ( fileName . lastIndexOf ( NUM00 ) == - NUM00 ) return fileName ; return $F129389 ( fileName ) ; }
public void clear $F72 { read = write = count = NUM00 ; $F17838 ( Arrays , buffer ) }
$F98646 ( response , data , decodeOptions , bitmap , mMaxWidth , mMaxHeight , mDecodeConfig , BitmapFactory , _BOOL , actualWidth , actualHeight , desiredWidth , getResizedDimension , mScaleType , desiredHeight , findBestSampleSize , tempBitmap , Bitmap , Response , HttpHeaderParser )
private $F14699 reduceWithDouglasPeuker ( $F14699 entries , double epsilon ) { if ( epsilon <= NUM00 || $F6213 ( entries ) ) { return entries ; } keep [ NUM00 ] = _BOOL ; keep [ $F2281 ( entries ) ] = _BOOL ; algorithmDouglasPeucker ( entries , epsilon , NUM00 , $F2281 ( entries ) ) ; $F14699 $F204 ( reducedEntries ) ; for ( $F2277 ( i , entries ) ) { if ( keep [ i ] ) { $F14726 ( curEntry , entries , i ) reducedEntries . add ( new Entry ( curEntry . getVal ( ) , curEntry . getXIndex ( ) ) ) ; } } return reducedEntries ; }
static int hiBitPos ( long num ) { return NUM00 - Long . numberOfLeadingZeros ( num ) ; }
public AdaptiveGridArchive ( int capacity , Problem problem , int numberOfDivisions ) { this . capacity = capacity ; this . problem = problem ; this . numberOfDivisions = numberOfDivisions ; minimum = new double [ problem . getNumberOfObjectives ( ) ] ; maximum = new double [ problem . getNumberOfObjectives ( ) ] ; density = new int [ ( int ) Math . pow ( numberOfDivisions , problem . getNumberOfObjectives ( ) ) ] ; adaptGrid ( ) ; }
BeginLineAction ( String nm , boolean select ) $F64660 ( super , nm , this , select )
public static boolean occupy ( int waitMs ) { if ( occupiedUntil != null && occupiedUntil . after ( $F4094 ) ) { return _BOOL ; } occupiedUntil = DateUtils . addMilliseconds ( $F4094 , waitMs ) ; return _BOOL ; }
private void adjustWindowSize ( ContainerWrapper parent ) { BoundSize wBounds = lc . getPackWidth ( ) ; BoundSize hBounds = lc . getPackHeight ( ) ; $F2564 ( wBounds , hBounds ) Window win = ( ( Window ) SwingUtilities . getAncestorOfClass ( Window . class , ( Component ) parent . getComponent ( ) ) ) ; $F8249 ( win ) $F86864 ( prefSize , win ) int targW = constrain ( checkParent ( win ) , win . getWidth ( ) , prefSize . width , wBounds ) ; int targH = constrain ( checkParent ( win ) , win . getHeight ( ) , prefSize . height , hBounds ) ; int x = Math . round ( win . getX ( ) - ( ( targW - win . getWidth ( ) ) * ( NUM00 - lc . getPackWidthAlign ( ) ) ) ) ; int y = Math . round ( win . getY ( ) - ( ( targH - win . getHeight ( ) ) * ( NUM00 - lc . getPackHeightAlign ( ) ) ) ) ; win . setBounds ( x , y , targW , targH ) ; }
$F1 public void write ( $F4358 ( valueList ) ) throws IOException { $F62355 ( isFirstTime , init , _BOOL ) for ( $F96 value : valueList ) { oneDictionaryChunkList . add ( ByteBuffer . wrap ( value ) ) ; totalRecordCount ++ ; } }
public void proceed $F72 { idle . set ( _BOOL ) ; subject . onNext ( null ) ; }
private static boolean nsEquals ( String nsURI_1 , String nsURI_2 ) { if ( nsURI_1 == null ) $F314738 ( nsURI_2 ) else $F23588 ( nsURI_1 , nsURI_2 ) }
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
public static void sleep ( long millis ) { if ( mockSleepQueue == null ) { sleepUninterruptibly ( millis , TimeUnit . MILLISECONDS ) ; } else { try { boolean isMultiPass = mockSleepQueue . take ( ) ; rollMockClockMillis ( millis ) ; if ( isMultiPass ) mockSleepQueue . offer ( _BOOL ) ; } $F887 } }
public boolean isHandle ( String handle ) $F23588 ( clientHandle , handle )
public static void isGTE ( String argName , long i , long min ) { if ( i < min ) { throw new IllegalArgumentException ( String . format ( NUM00 , argName , min , i ) ) ; } }
int adjustTextOffset ( int offset ) { $F19410 ( maxTextOffset , Math , offset ) return maxTextOffset ; }
public static Object valueFromClassConstant ( String key , Object defaultValue ) { Configuration conf = instance ( ) ; String val = valueFor ( key ) ; $F1933 ( val , defaultValue ) $F24867 ( idx , val ) String klassname ; String cnst ; try $F60269 ( klassname , val , idx , cnst ) catch ( IndexOutOfBoundsException e ) { conf . warning ( NUM00 + key + NUM00 + NUM00 + val ) ; return defaultValue ; } Class klass ; try { klass = Class . forName ( klassname ) ; } catch ( ClassNotFoundException e ) { $F105918 ( conf , key , klassname ) return defaultValue ; } Object cnstVal ; try { $F111040 ( fld , klass , cnst ) try $F6045 ( cnstVal , fld , klass ) catch ( IllegalAccessException e ) { conf . warning ( NUM00 + key + NUM00 + klassname + NUM00 + cnst ) ; return defaultValue ; } } catch ( NoSuchFieldException e ) { $F105918 ( conf , key , klassname ) return defaultValue ; } return cnstVal ; }
public static boolean isWifiConnected ( Context context ) { $F40395 ( connectivityManager , context , Context ) $F40397 ( networkInfo , connectivityManager ) return networkInfo != null && networkInfo . getType ( ) == ConnectivityManager . TYPE_WIFI ; }
public StrBuilder insert ( final int index , final char value ) { validateIndex ( index ) ; ensureCapacity ( size + NUM00 ) ; $F27096 ( System , buffer , index , size ) buffer [ index ] = value ; size ++ ; return this ; }
public $F3510 tryDecode ( final String targetToken ) { final ByteBuffer payloadBuf = extractValidPayloadFields ( targetToken ) ; $F1338 ( payloadBuf ) final $F3510 $F204 ( fields ) ; try { $F5475 ( field ) while ( ( field = tryReadPayloadNextField ( payloadBuf ) ) . length > NUM00 ) { fields . add ( field ) ; if $F60125 ( fields , MAX_FIELD_SIZE ) $F1337 } return fields ; } catch ( final BufferUnderflowException e ) $F1337 }
@ NamespacePermission ( fields = NUM00 , permissions = NamespacePermissionEnum . WRITE ) $F1 public BusinessObjectDefinition createBusinessObjectDefinition ( BusinessObjectDefinitionCreateRequest request ) { validateBusinessObjectDefinitionCreateRequest ( request ) ; NamespaceEntity namespaceEntity = namespaceDaoHelper . getNamespaceEntity ( request . getNamespace ( ) ) ; DataProviderEntity dataProviderEntity = dataProviderDaoHelper . getDataProviderEntity ( request . getDataProviderName ( ) ) ; BusinessObjectDefinitionKey businessObjectDefinitionKey = new BusinessObjectDefinitionKey ( request . getNamespace ( ) , request . getBusinessObjectDefinitionName ( ) ) ; BusinessObjectDefinitionEntity businessObjectDefinitionEntity = businessObjectDefinitionDao . getBusinessObjectDefinitionByKey ( businessObjectDefinitionKey ) ; if ( businessObjectDefinitionEntity != null ) { throw new AlreadyExistsException ( String . format ( NUM00 , businessObjectDefinitionKey . getBusinessObjectDefinitionName ( ) , businessObjectDefinitionKey . getNamespace ( ) ) ) ; } businessObjectDefinitionEntity = createBusinessObjectDefinitionEntity ( request , namespaceEntity , dataProviderEntity ) ; return createBusinessObjectDefinitionFromEntity ( businessObjectDefinitionEntity ) ; }
public void endBlock $F72 throws IOException { if $F71860 ( indent ) { indent = NUM00 ; } else if $F45145 ( indent ) $F3109 ( indent ) print ( NUM00 , null ) ; $F21416 ( printer ) }
private void migrateBlockVolumes $F72 { $F973 ( log ) DbClient dbClient = getDbClient ( ) ; $F28584 volumeURIs = dbClient . queryByType ( $F8540 , _BOOL ) ; $F150928 volumes = dbClient . queryIterativeObjects ( $F8540 , volumeURIs , _BOOL ) ; List $F30635 blockObjects = new ArrayList $F30635 $F72 ; $F3536 ( volumes , blockObjects ) migrateBlockObjects ( blockObjects ) ; }
public static String decode $F22381 ( s , enc , plusToSpace ) { boolean modified = _BOOL ; if $F6036 ( enc ) { enc = NUM00 ; } $F1749 ( numChars , s ) StringBuilder sb = new StringBuilder ( numChars > NUM00 ? numChars / NUM00 : numChars ) ; int i = NUM00 ; char c ; $F5475 ( bytes ) while ( i < numChars ) { c = s . charAt ( i ) ; switch ( c ) { $F1262 if ( plusToSpace ) $F86 ( sb ) else $F86 ( sb ) i ++ ; modified = _BOOL ; $F597 $F1262 try { if ( bytes == null ) { bytes = new byte [ ( numChars - i ) / NUM00 ] ; } int pos = NUM00 ; while ( $F7526 ( i , numChars ) && ( c == NUM00 ) ) { bytes [ pos ++ ] = ( byte ) $F105161 ( Integer , s , i ) ; i += NUM00 ; if ( i < numChars ) $F7458 ( c , s , i ) } if ( ( i < numChars ) && ( c == NUM00 ) ) $F18931 ( s ) try { sb . append ( new String ( bytes , NUM00 , pos , enc ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException $F3362 ( e ) ; } } catch ( NumberFormatException e ) $F18931 ( s ) modified = _BOOL ; $F597 $F1267 sb . append ( c ) ; i ++ ; $F597 } } if ( modified ) $F2495 ( sb ) return s ; }
public ServerControllerTest ( String name ) { super ( name ) ; this . baseDir = System . getProperty ( NUM00 ) ; }
$F1 public String encode $F72 { return value == intValue ( ) ? $F27055 ( Integer , intValue ) + unit . encode ( ) : Double . toString ( value ) + unit . encode ( ) ; }
public HostNameParser ( LexerCore lexer ) { this . lexer = lexer ; lexer . selectLexer ( NUM00 ) ; stripAddressScopeZones = Boolean . getBoolean ( NUM00 ) ; }
private void loadText ( InputStream is ) { BufferedReader reader ; String line ; if ( is == null ) $F78453 $F105457 ( reader , is ) try { $F36243 ( line , reader ) lineCount ++ ; while ( line != null ) { if $F14943 ( line ) { parseAndAdd ( line , reader ) ; } $F36243 ( line , reader ) } $F59 ( reader ) } catch ( IOException e ) { throw new Error ( e . getMessage ( ) + NUM00 + lineCount ) ; } $F4231 }
public void addEmailAdress ( String anEmailAddress ) { if $F283026 ( mEmails , anEmailAddress ) $F207 ( mEmails , anEmailAddress ) }
public static Instances loadDataset ( String options [ ] , char T ) throws Exception { Instances D = null ; $F142641 ( filename , Utils , T , options ) if $F4251 ( filename ) $F9450 $F1705 ( file , filename ) if $F1906 ( file ) throw new Exception ( NUM00 + filename ) ; if $F3444 ( file ) throw new Exception ( NUM00 + filename + NUM00 ) ; try { DataSource source = new DataSource ( filename ) ; D = source . getDataSet ( ) ; } catch ( Exception e ) { $F301 ( e ) throw new Exception ( NUM00 + filename + NUM00 ) ; } return D ; }
$F121562 ( mIs24HourMode , values , getEnteredTime , mTypedTimes , getAmOrPmKeyCode , AM , PM )
public void test_groupCommit $F72 throws Exception { final int writeServiceCorePoolSize = NUM00 ; $F17606 ( properties , getProperties ) properties . setProperty ( TestOptions . TIMEOUT , NUM00 ) ; $F154946 ( properties , TestOptions ) properties . setProperty ( Options . WRITE_SERVICE_CORE_POOL_SIZE , NUM00 + writeServiceCorePoolSize ) ; properties . setProperty ( Options . WRITE_SERVICE_MAXIMUM_POOL_SIZE , NUM00 ) ; properties . setProperty ( Options . WRITE_SERVICE_PRESTART_ALL_CORE_THREADS , NUM00 ) ; properties . setProperty ( Options . WRITE_SERVICE_QUEUE_CAPACITY , NUM00 ) ; doComparisonTest ( properties ) ; }
$F1 public void operate ( Population pop ) throws Exception { List $F7504 newIndividuals = new LinkedList $F7504 $F72 ; for ( int i = NUM00 ; i < pop . getNumberOfIndividuals ( ) ; i ++ ) { List $F7504 individuals = operate ( pop . get ( i ) ) ; newIndividuals . addAll ( individuals ) ; } $F725 ( pop ) pop . addAllIndividuals ( newIndividuals ) ; }
$F1654 ( encodedNames )
public static $F96 toSeed $F72133 ( words , passphrase ) { return toSeed ( words , passphrase , Version . V0_6 ) ; }
private ArrayList < Interval > findOrCreateIntervalSet ( Register r ) { ArrayList < Interval > v = map . get ( r ) ; if ( v == null ) { v = new ArrayList < Interval > $F72 ; map . put ( r , v ) ; } return v ; }
protected void removeColumns $F126719 ( removeColumnNames , tableName ) { if $F1032 ( removeColumnNames ) { execute ( getRemoveColumnSQLs ( removeColumnNames , tableName ) , mDb ) ; } }
$F1 public $F3789 predictIntervals ( double conf ) { updateBoundariesAndOrWeights ( ) ; double val = Statistics . normalInverse ( NUM00 - ( NUM00 - conf ) / NUM00 ) ; double min = m_TM . firstKey ( ) - val * m_Width ; double max = m_TM . lastKey ( ) + val * m_Width ; double delta = ( max - min ) / m_NumIntervals ; $F9662 ( probabilities , m_NumIntervals ) double leftVal = Math . exp ( logDensity ( min ) ) ; for ( $F119 ( i , m_NumIntervals ) ) { double rightVal = Math . exp ( logDensity ( min + ( i + NUM00 ) * delta ) ) ; probabilities [ i ] = NUM00 * ( leftVal + rightVal ) * delta ; leftVal = rightVal ; } $F2027 sortedIndices = Utils . sort ( probabilities ) ; double sum = NUM00 ; $F24314 ( toUse , probabilities ) int k = NUM00 ; while ( ( sum < conf ) && ( k < toUse . length ) ) { toUse [ sortedIndices [ toUse . length - ( k + NUM00 ) ] ] = _BOOL ; sum += probabilities [ sortedIndices [ toUse . length - ( k + NUM00 ) ] ] ; k ++ ; } probabilities = null ; $F302683 intervals = new $F302683 $F72 ; $F69807 ( interval ) boolean haveStartedInterval = _BOOL ; for ( $F119 ( i , m_NumIntervals ) ) { if ( toUse [ i ] ) { if ( haveStartedInterval == _BOOL ) { haveStartedInterval = _BOOL ; $F90860 ( interval ) interval [ NUM00 ] = min + i * delta ; } interval [ NUM00 ] = min + ( i + NUM00 ) * delta ; } else { if ( haveStartedInterval ) { haveStartedInterval = _BOOL ; intervals . add ( interval ) ; } } } $F46023 ( haveStartedInterval , intervals , interval ) return intervals . toArray ( new double $F387 ) ; }
public void registerAtmosphere ( IAtmosphere atmosphere ) { atmosphereRegistration . put ( atmosphere . getUnlocalizedName ( ) , atmosphere ) ; atmosphereList . add ( atmosphere ) ; }
public JXSearchField $F72 $F1210 ( this )
private static void reply_Login2_Role ( body body , MobileSessionCtx wsc , String roleId ) { String form = null ; Login login = new Login ( wsc . ctx ) ; KeyNamePair [ ] clients = login . getClients ( new KeyNamePair ( Integer . parseInt ( roleId ) , roleId ) ) ; $F8755 ( script ) for ( $F1139 ( i , clients ) ) { $F96530 ( i , script ) KeyNamePair p = clients [ i ] ; $F84 ( script ) $F167270 ( script , p ) $F84 ( script ) $F79971 ( script , p ) $F84 ( script ) } $F84 ( script ) }
public void testCreateDocumentType1 $F72 throws Throwable { Document doc ; DOMImplementation domImpl ; DocumentType newDocType ; Document ownerDocument ; String qualifiedName = NUM00 ; String publicId ; String systemId ; $F10144 ( publicIds ) $F18793 ( publicIds ) $F18793 ( publicIds ) $F10144 ( systemIds ) $F18793 ( systemIds ) $F18793 ( systemIds ) $F236 ( doc , load , builder ) $F28589 ( domImpl , doc ) for ( $F2277 ( indexN1005D , publicIds ) ) { $F18988 ( publicId , publicIds , indexN1005D ) for ( $F2277 ( indexN10061 , systemIds ) ) { $F18988 ( systemId , systemIds , indexN10061 ) newDocType = domImpl . createDocumentType ( qualifiedName , publicId , systemId ) ; assertNotNull ( NUM00 , newDocType ) ; ownerDocument = newDocType . getOwnerDocument ( ) ; assertNull ( NUM00 , ownerDocument ) ; } } }
public final void run $F72 { if ( m_start == NUM00 ) $F3224 ( m_start , System ) m_canContinue = _BOOL ; while ( m_canContinue ) { $F140642 ( isInterrupted ) $F3224 ( m_lastStart , System ) m_working = _BOOL ; try { m_pollCount ++ ; if ( canDoWork ( ) ) { m_canContinue = doWork ( ) ; m_count ++ ; } } $F209655 ( log , Level , e ) m_working = _BOOL ; $F657 ( end , System ) m_time += ( end - m_lastStart ) ; $F140642 ( isInterrupted ) try { $F35577 ( log , m_sleepSeconds ) sleep ( m_sleepSeconds * NUM00 ) ; } catch ( InterruptedException e1 ) { log . warning ( $F9309 ( e1 ) ) ; $F665 } } }
public static SolrDocument assertSearchOneDoc ( SolrParams p ) throws Exception { SolrDocumentList docs = assertSearch ( p ) ; assertEquals ( $F148552 ( p , docs ) , NUM00 , docs . getNumFound ( ) ) ; assertEquals ( $F148552 ( p , docs ) , NUM00 , docs . size ( ) ) ; $F38159 ( docs ) }
private static ValueSource buildSourceTree ( IndexSchema schema , String expression , int sourceType ) { int expressionType = getSourceType ( expression ) ; if ( sourceType != FIELD_TYPE && expressionType != FIELD_TYPE && expressionType != FILTER_TYPE && expressionType != sourceType ) $F1337 switch ( expressionType ) { case NUMBER_TYPE : return buildNumericSource ( schema , expression ) ; case DATE_TYPE : return buildDateSource ( schema , expression ) ; case NUM00 <missing ';'> _TYPE : return buildStringSource ( schema , expression ) ; case FIELD_TYPE : return buildFieldSource ( schema , expression , sourceType ) ; case FILTER_TYPE : return buildFilterSource ( schema , expression . substring ( $F12707 ( expression ) , expression . lastIndexOf ( NUM00 ) ) , sourceType ) ; default : throw new SolrException ( ErrorCode . BAD_REQUEST , expression + NUM00 ) ; }
public Value predecessor $F72 $F1522 ( predecessor )
public static double logPdf $F7635 ( x , m , sd ) { double a = NUM00 / ( $F172440 ( Math ) * sd ) ; double b = - ( x - m ) * ( x - m ) / ( NUM00 * sd * sd ) ; return Math . log ( a ) + b ; }
public int valueSparseInt ( int indexOfIndex ) throws Exception { return Integer . parseInt ( actualValue ( indexOfIndex ) ) ; }
public void testToEngineeringStringZeroPosExponent $F72 $F12820 ( a , aNumber , result , assertEquals )
public static int scan ( long v ) { return NUM00 - Long . numberOfLeadingZeros ( v ) ; }
public static boolean isAllUpperCase ( String str ) { $F397 ( str , _BOOL ) boolean hasLetters = _BOOL ; char c ; for ( $F186068 ( i , str ) ) { c = str . charAt ( i ) ; if ( Character . isLetter ( c ) ) { if ( ! Character . isUpperCase ( c ) ) return _BOOL ; hasLetters = _BOOL ; } } return hasLetters ; }
public static ClassPath createClassPath $F1947 ( classPathString , sysClassPathString , extDirsString ) { $F6212 ( path ) if ( sysClassPathString == null ) $F185872 ( sysClassPathString , System ) if ( sysClassPathString != null ) { path . addFiles ( sysClassPathString ) ; } path . expandJarClassPaths ( _BOOL ) ; if ( extDirsString == null ) $F185872 ( extDirsString , System ) if ( extDirsString != null ) { path . addDirectories ( extDirsString ) ; } path . emptyPathDefault ( NUM00 ) ; if ( classPathString == null ) { $F109927 ( classPathString , System ) $F23170 ( classPathString ) } path . addFiles ( classPathString ) ; return new ClassPath ( $F10148 ( path ) ) ; }
protected AbstractSpinedBuffer ( int initialCapacity ) { $F81428 ( initialCapacity ) this . initialChunkPower = Math . max ( MIN_CHUNK_POWER , Integer . SIZE - Integer . numberOfLeadingZeros ( initialCapacity - NUM00 ) ) ; }
public static void UF9 $F93381 ( x , f , nx ) { int count1 = NUM00 ; int count2 = NUM00 ; int count3 = NUM00 ; double sum1 = NUM00 ; double sum2 = NUM00 ; double sum3 = NUM00 ; double yj ; double E = NUM00 ; $F68593 ( j , nx , yj , x , Math , PI , sum1 , count1 , sum2 , count2 , sum3 , count3 ) yj = ( NUM00 + E ) * ( NUM00 - NUM00 * ( NUM00 * x [ NUM00 ] - NUM00 ) * ( NUM00 * x [ NUM00 ] - NUM00 ) ) ; $F17370 ( yj ) f [ NUM00 ] = NUM00 * ( yj + NUM00 * x [ NUM00 ] ) * x [ NUM00 ] + NUM00 * sum1 / ( double ) count1 ; f [ NUM00 ] = NUM00 * ( yj - NUM00 * x [ NUM00 ] + NUM00 ) * x [ NUM00 ] + NUM00 * sum2 / ( double ) count2 ; f [ NUM00 ] = NUM00 - x [ NUM00 ] + NUM00 * sum3 / ( double ) count3 ; }
private void cleaningText $F72 { int latinCount = NUM00 , nonLatinCount = NUM00 ; for ( $F38840 ( i , text ) ) { $F1280 ( c , text , i ) if ( c <= NUM00 && c >= NUM00 ) { ++ latinCount ; } else if ( c >= NUM00 && UnicodeBlock . of ( c ) != UnicodeBlock . LATIN_EXTENDED_ADDITIONAL ) { ++ nonLatinCount ; } } if ( latinCount * NUM00 < nonLatinCount ) { $F280 ( textWithoutLatin ) for ( $F38840 ( i , text ) ) { $F1280 ( c , text , i ) if ( c > NUM00 || c < NUM00 ) textWithoutLatin . append ( c ) ; } text = textWithoutLatin ; } }
public void beginApplyInterval $F72 { $F3224 ( intervalStartMillis , System ) endMillis = intervalStartMillis ; state = TaskState . apply ; }
void handshake $F72 throws $F5690 { $F50717 ( log , handshakeStatus , ses ) lock ( ) ; try { boolean loop = _BOOL ; while ( loop ) { switch ( handshakeStatus ) { case NOT_HANDSHAKING : case FINISHED : { $F233242 ( sslSes , sslEngine ) if $F585 ( log ) log . debug ( NUM00 + sslSes . getProtocol ( ) + NUM00 + sslSes . getCipherSuite ( ) + NUM00 + ses + NUM00 ) ; handshakeFinished = _BOOL ; if ( ! initHandshakeComplete ) { initHandshakeComplete = _BOOL ; GridNioFutureImpl $F1011 fut = ses . removeMeta ( HANDSHAKE_FUT_META_KEY ) ; if ( fut != null ) fut . onDone ( ) ; parent . proceedSessionOpened ( ses ) ; } loop = _BOOL ; $F597 } case NEED_TASK : { $F51620 ( log , ses ) handshakeStatus = runTasks ( ) ; $F597 } case NEED_UNWRAP : { $F51620 ( log , ses ) Status status = unwrapHandshake ( ) ; if ( status == BUFFER_UNDERFLOW && handshakeStatus != FINISHED || sslEngine . isInboundDone ( ) ) loop = _BOOL ; $F597 } case NEED_WRAP : { if $F5720 ( outNetBuf ) U . warn ( log , NUM00 + ses ) ; $F725 ( outNetBuf ) SSLEngineResult res = sslEngine . wrap ( handshakeBuf , outNetBuf ) ; $F14257 ( outNetBuf ) $F346875 ( handshakeStatus , res ) if $F585 ( log ) log . debug ( $F203080 ( res ) + handshakeStatus + NUM00 + ses + NUM00 ) ; writeNetBuffer ( ) ; $F597 } $F1267 { throw new IllegalStateException $F6486 ( handshakeStatus , ses ) ; } } } } $F49978 ( unlock ) $F50717 ( log , handshakeStatus , ses ) }
public void sendMessages ( List < ProducerRecord $F2538 > records ) { Producer $F2538 producer = new KafkaProducer $F200 ( getProducerConfig ( ) ) ; for ( ProducerRecord $F2538 rec : records ) producer . send ( rec ) ; $F1206 ( producer ) $F59 ( producer ) }
private static JFreeChart createChart $F72 { $F38363 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory . createXYStepChart ( NUM00 , NUM00 , NUM00 , dataset , PlotOrientation . VERTICAL , _BOOL , _BOOL , _BOOL ) ; }
public void appendToNalUnit $F24576 ( data , offset , limit ) { $F24126 ( isFilling ) int readLength = limit - offset ; if ( nalData . length < nalLength + readLength ) { nalData = Arrays . copyOf ( nalData , ( nalLength + readLength ) * NUM00 ) ; } System . arraycopy ( data , offset , nalData , nalLength , readLength ) ; nalLength += readLength ; }
public boolean isNumberGeographical ( PhoneNumber phoneNumber ) { return isNumberGeographical ( getNumberType ( phoneNumber ) , phoneNumber . getCountryCode ( ) ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
protected int weightedDistribution $F23416 ( weights ) { int sum = NUM00 ; for ( int weight : weights ) { sum += weight ; } int val = ( int ) Math . floor ( m_random . nextDouble ( ) * sum ) ; for ( $F1139 ( i , weights ) ) { val -= weights [ i ] ; $F7879 ( val , i ) } $F150 }
protected String cleanUp ( String classname ) { String result ; result = classname ; if $F51171 ( result ) $F14301 ( result ) if $F51171 ( result ) $F14301 ( result ) $F8996 ( result ) return result ; }
public static boolean isAssignable ( Class targetType , Class valueType ) { $F18062 ( Assert , targetType ) $F18062 ( Assert , valueType ) return ( targetType . isAssignableFrom ( valueType ) || $F115302 ( targetType , primitiveWrapperTypeMap , valueType ) ) ; }
public DialogCheckBox addDialogCheckBox $F22381 ( description , labelText , initialState ) { $F808 ( args ) args [ NUM00 ] = NUM00 ; args [ NUM00 ] = description ; args [ NUM00 ] = labelText ; args [ NUM00 ] = Boolean . toString ( initialState ) ; DialogCheckBox dcb = new DialogCheckBox $F72 ; dcb . setArgs ( args ) ; components . add ( dcb ) ; mainPanel . add ( dcb ) ; return dcb ; }
private void performRestore ( File memberDir , File backupDir ) throws Exception { $F11300 ifFiles = FileUtil . findAll ( memberDir , NUM00 ) ; for ( File file : ifFiles ) $F19636 ( file ) $F11300 oplogs = FileUtil . findAll ( memberDir , OPLOG_REGEX ) ; for ( File file : oplogs ) $F19636 ( file ) $F109797 ( restoreScript , backupDir ) if $F1906 ( restoreScript ) $F417464 ( restoreScript , backupDir ) assertTrue ( restoreScript . exists ( ) ) ; assertEquals ( NUM00 , $F40519 ( execute , restoreScript ) ) ; }
public static boolean downloadUrlToStream ( String urlString , OutputStream outputStream ) { disableConnectionReuseIfNecessary ( ) ; HttpURLConnection urlConnection = null ; BufferedOutputStream out = null ; BufferedInputStream in = null ; try { $F23801 ( url , urlString ) $F23802 ( urlConnection , url ) $F23808 ( in , urlConnection , IO_BUFFER_SIZE ) ; out = new BufferedOutputStream ( outputStream , IO_BUFFER_SIZE ) ; int b ; $F254305 ( b , in , out ) return _BOOL ; } $F23817 ( Log , TAG , e ) finally { $F14106 ( urlConnection ) try $F23818 ( out , in ) $F158789 } return _BOOL ; }
public boolean isPaymentsAdequate $F72 { return isPaymentsAdequate ( this . cart ) ; }
$F1 public void transactionCommited ( final long commitTime ) { if $F2979 ( listeners ) $F8030 ( records ) else { $F1206 ( records ) $F22620 ( listeners ) } }
public static MWarehousePrice [ ] find ( MBPartner bPartner , boolean IsSOTrx , Timestamp valid , int M_Warehouse_ID , String Value , String Name , String UPC , String SKU , String trxName ) { int M_PriceList_ID = IsSOTrx ? bPartner . getM_PriceList_ID ( ) : bPartner . getPO_PriceList_ID ( ) ; MPriceList pl = null ; if ( M_PriceList_ID == NUM00 ) pl = MPriceList . getDefault ( bPartner . getCtx ( ) , IsSOTrx ) ; else pl = MPriceList . get ( bPartner . getCtx ( ) , M_PriceList_ID , trxName ) ; if ( pl == null ) { s_log . severe ( NUM00 ) ; $F1274 } MPriceListVersion plv = pl . getPriceListVersion ( valid ) ; if ( plv == null ) { s_log . severe ( NUM00 + pl . getM_PriceList_ID ( ) ) ; $F1274 } return find ( bPartner . getCtx ( ) , plv . getM_PriceList_Version_ID ( ) , M_Warehouse_ID , Value , Name , UPC , SKU , trxName ) ; }
private void readObject ( ObjectInputStream in ) throws $F6427 { $F72840 ( COUNTER ) ; serializers = new HashMap < Class , SerializerWrapper > $F72 ; serializersArray = new Serializer $F380 ; deserialize ( in , this ) ; }
public static Date translateTime ( Date date , TimeZone src , TimeZone dest ) { $F6357 ( newDate ) int offset = ( dest . getOffset ( date . getTime ( ) ) - src . getOffset ( date . getTime ( ) ) ) ; newDate . setTime ( date . getTime ( ) - offset ) ; return newDate ; }
private void showPopupMenu ( final MouseEvent event ) { final CTracesTableFilterMenu menu = new CTracesTableFilterMenu ( getFilterField ( ) ) ; $F121507 ( menu , event ) }
private TaskResourceRep finishDeactivateTask ( BlockConsistencyGroup consistencyGroup , String task ) { $F58492 ( id , consistencyGroup ) Operation op = new Operation $F72 ; op . ready ( ) ; op . setProgress ( NUM00 ) ; op . setResourceType ( ResourceOperationTypeEnum . DELETE_CONSISTENCY_GROUP ) ; Operation status = _dbClient . createTaskOpStatus ( BlockConsistencyGroup . class , id , task , op ) ; return toTask ( consistencyGroup , task , status ) ; }
public static Severity parseSeverity ( String str ) throws IllegalSeverityException { if ( str . equalsIgnoreCase ( Messages . ERROR ) ) { return ERROR ; } else if ( str . equalsIgnoreCase ( Messages . WARNING ) ) { return WARNING ; } else { throw new IllegalSeverityException $F72 ; } }
private void restoreFromKeypress ( final KeyEvent keyEvent , final int keyNumber ) { if ( keyEvent . isAltDown ( ) ) { final int arrayIndex = ( keyNumber > NUM00 ? keyNumber : MAX_RECENT_MESSAGES ) - NUM00 ; if $F1765 ( arrayIndex , recentMessages ) $F80218 ( displayMessage , recentMessages , arrayIndex ) $F60335 ( keyEvent ) } }
$F115149 ( listener , scrollingListeners )
public void fire ( Session session , int type , boolean beforeAction ) { if ( rowBased || before != beforeAction || ( typeMask & type ) == NUM00 ) $F932 load ( ) ; Connection c2 = session . createConnection ( _BOOL ) ; boolean old = _BOOL ; if ( type != Trigger . SELECT ) { old = session . setCommitOrRollbackDisabled ( _BOOL ) ; } Value identity = session . getLastScopeIdentity ( ) ; try { triggerCallback . fire ( c2 , null , null ) ; } catch ( Throwable e ) { throw DbException . get ( ErrorCode . ERROR_EXECUTING_TRIGGER_3 , e , getName ( ) , triggerClassName != null ? triggerClassName : NUM00 , e . toString ( ) ) ; } finally { if ( session . getLastTriggerIdentity ( ) != null ) { session . setLastScopeIdentity ( session . getLastTriggerIdentity ( ) ) ; session . setLastTriggerIdentity ( null ) ; } else { session . setLastScopeIdentity ( identity ) ; } if ( type != Trigger . SELECT ) { session . setCommitOrRollbackDisabled ( old ) ; } } }
$F141880 ( closeable , rethrown )
public MqttDevice mqttDevice $F72 { return mqttDevice ; }
public boolean skipsLocation ( String locationId ) $F298 ( _skipLocationsList , locationId )
private List < Race > parseRaces ( String json ) { List < Race > $F204 ( result ) ; $F1338 ( json ) $F16165 ( parser ) try { JSONObject root = ( JSONObject ) parser . parse ( json . trim ( ) ) ; $F49149 ( races , root ) for ( Object o : races ) { if ( o instanceof JSONObject ) { Race race = parseRace ( ( JSONObject ) o ) ; $F1140 ( race , result ) } } } catch ( ParseException | ClassCastException | NullPointerException ex ) { $F37855 ( LOGGER , ex ) $F1274 } return result ; }
public boolean isConnected ( short nodeId ) { NodeConnection nc = connections . get ( nodeId ) ; return ( nc != null && nc . state == NodeConnectionState . CONNECTED ) ; }
public ObjectName manageSystemMember ( DistributedMember distributedMember ) throws AdminException , MalformedObjectNameException { try { SystemMember member = lookupSystemMember ( distributedMember ) ; $F1275 ( member ) SystemMemberJmxImpl jmx = ( SystemMemberJmxImpl ) member ; ObjectName oname = new ObjectName ( jmx . getMBeanName ( ) ) ; return oname ; } catch ( AdminException e ) { logger . warn ( $F1573 ( e ) ) ; throw e ; } catch ( RuntimeException e ) { logger . warn ( $F1573 ( e ) ) ; throw e ; } $F79506 ( SystemFailure , err ) catch ( Error e ) { $F79507 ( SystemFailure ) $F1575 ( logger , e ) throw e ; } }
private void connect $F72 throws IOException { JMXServiceURL jmxUrl = new JMXServiceURL ( String . format ( fmtUrl , host , port ) ) ; jmxc = JMXConnectorFactory . connect ( jmxUrl , null ) ; MBeanServerConnection mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; try { ObjectName name = new ObjectName ( DOMAINLIST_OBJECT_NAME ) ; domainListProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , DomainListManagementMBean . class , _BOOL ) ; name = new ObjectName ( VIRTUALUSERTABLE_OBJECT_NAME ) ; virtualUserTableProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , RecipientRewriteTableManagementMBean . class , _BOOL ) ; name = new ObjectName ( USERSREPOSITORY_OBJECT_NAME ) ; usersRepositoryProxy = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , UsersRepositoryManagementMBean . class , _BOOL ) ; name = new ObjectName ( MAILBOXCOPIER_OBJECT_NAME ) ; mailboxCopierManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , MailboxCopierManagementMBean . class , _BOOL ) ; name = new ObjectName ( MAILBOXMANAGER_OBJECT_NAME ) ; mailboxManagerManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , MailboxManagerManagementMBean . class , _BOOL ) ; name = new ObjectName ( QUOTAMANAGER_OBJECT_NAME ) ; quotaManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , QuotaManagementMBean . class , _BOOL ) ; name = new ObjectName ( REINDEXER_OBJECT_NAME ) ; reIndexerManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , ReIndexerManagementMBean . class , _BOOL ) ; name = new ObjectName ( SIEVEMANAGER_OBJECT_NAME ) ; sieveRepositoryManagement = MBeanServerInvocationHandler . newProxyInstance ( mbeanServerConn , name , SieveRepositoryManagementMBean . class , _BOOL ) ; } catch ( MalformedObjectNameException e ) $F7077 ( e ) }
public static void show ( $F1113 final JComponent dataComponent , $F5466 final JComponent actionListenerComponent , $F1113 final String title , $F1113 final Project project , $F5466 final Collection $F24548 closeListeners , $F1113 final AnAction ... customActions ) { final ToolWindowApi api = new ToolWindowApi ( project , title ) ; final Collection $F24548 closeListenersToAdd = new ArrayList $F24548 ( Collections . singleton ( new MyToolWindowCloser ( api ) ) ) ; $F36447 ( closeListeners , closeListenersToAdd ) api . add ( PanelWithActions . wrap ( dataComponent , closeListenersToAdd , actionListenerComponent , customActions ) ) ; }
public IntentBuilder addEmailCc ( String address ) { $F30647 ( mCcAddresses ) mCcAddresses . add ( address ) ; return this ; }
private $F5 extractNGrams $F72 { $F8728 ( list ) NGram ngram = new NGram $F72 ; for ( $F38840 ( i , text ) ) { ngram . addChar ( text . charAt ( i ) ) ; for ( int n = NUM00 ; n <= NGram . N_GRAM ; ++ n ) { $F1729 ( w , ngram , n ) if ( w != null && wordLangProbMap . containsKey ( w ) ) list . add ( w ) ; } } return list ; }
protected void updateKeys $F72 { ButtonInfo [ ] buttons = NavigationButtons . loadButtonMap ( mContext ) ; int visibleCount = NUM00 ; for ( $F1139 ( i , buttons ) ) { int id = BUTTON_IDS [ i ] ; ButtonInfo info = buttons [ mVertical ? buttons . length - i - NUM00 : i ] ; KeyButtonView button = ( KeyButtonView ) mParent . findViewById ( id ) ; boolean isSmallButton = NavigationButtons . IS_SLOT_SMALL [ i ] ; button . setInfo ( info , mVertical , isSmallButton ) ; if ( ! info . equals ( NavigationButtons . EMPTY ) && ! isSmallButton ) { visibleCount ++ ; } button . setTranslationX ( NUM00 ) ; mButtonViews . set ( i , button ) ; } if ( isDevicePhone ( mContext ) ) { adjustPadding ( visibleCount ) ; } updateLowLights ( visibleCount ) ; }
public static final String readString $F27539 ( bytes , charset ) throws IOException { return readString ( bytes , NUM00 , bytes . length , Charset . forName ( charset ) ) ; }
private void updateCommandCache $F22381 ( group , command , needNotify ) { $F1729 ( oldCommand , commandCache , group ) if $F2137 ( command , oldCommand ) { commandCache . put ( group , command ) ; if ( needNotify ) { notifyExecutor . execute ( new NotifyCommand ( group , command ) ) ; $F124174 ( LoggerUtil , String , group , command ) } } else { $F124174 ( LoggerUtil , String , group , command ) } }
public void updateLanguage $F72 { createLegendPanel ( legendPanel ) ; directoryTreeModel . changeRootText ( I18n . tr ( NUM00 ) ) ; }
$F3441 ( journalWriter , writer , journalFileTmp , Util , MAGIC , VERSION_1 , Integer , appVersion , valueCount , entry , lruEntries , DIRTY , CLEAN , journalFile , renameTo , journalFileBackup , _BOOL )
public static $F96 decompressForZlib $F97 ( bytesToDecompress ) { $F5475 ( returnValues ) Inflater inflater = new Inflater $F72 ; int numberOfBytesToDecompress = bytesToDecompress . length ; $F81138 ( inflater , bytesToDecompress , numberOfBytesToDecompress ) int bufferSizeInBytes = numberOfBytesToDecompress ; int numberOfBytesDecompressedSoFar = NUM00 ; $F29252 bytesDecompressedSoFar = $F113696 ; try { while ( inflater . needsInput ( ) == _BOOL ) { $F2175 ( bytesDecompressedBuffer , bufferSizeInBytes ) int numberOfBytesDecompressedThisTime = inflater . inflate ( bytesDecompressedBuffer ) ; numberOfBytesDecompressedSoFar += numberOfBytesDecompressedThisTime ; $F117265 ( b , numberOfBytesDecompressedThisTime , bytesDecompressedSoFar , bytesDecompressedBuffer ) } $F71700 ( returnValues , bytesDecompressedSoFar ) ; for ( $F1139 ( b , returnValues ) ) { returnValues [ b ] = ( byte ) $F73204 ( bytesDecompressedSoFar , b ) ; } } catch ( DataFormatException dfe ) $F302 ( dfe ) $F87417 ( inflater ) return returnValues ; }
protected boolean acceptChunk ( final IChunkMessage < IBindingSet > msg ) { $F10057 ( msg ) if ( ! msg . isMaterialized ( ) ) $F8675 final AbstractRunningQuery q = getRunningQuery ( msg . getQueryId ( ) ) ; if ( q == null ) $F10763 if ( ! q . acceptChunk ( msg ) ) { $F33833 ( msg ) return _BOOL ; } if $F931 ( isRunning ) { $F33833 ( msg ) return _BOOL ; } priorityQueue . add ( q ) ; return _BOOL ; }
public String format ( Object obj , StringBuffer toAppendTo ) throws IllegalArgumentException { return format ( ( Date ) obj , toAppendTo ) ; }
void addMember ( final TypeMember member ) { $F1832 ( Preconditions , member ) Preconditions . checkArgument ( member . getParentType ( ) == this , NUM00 ) ; members . add ( member ) ; }
public synchronized void removeIncrementalClassifierListener ( IncrementalClassifierListener cl ) $F106 ( m_incrementalClassifierListeners , cl )
$F87136 ( data , imageView , bitmapWorkerTask , getBitmapWorkerTask , bitmapData , _BOOL , BuildConfig , Log , TAG )
public static Number asinh ( Number a ) { return FastMath . asinh ( a . doubleValue ( ) ) ; }
private String formatNames $F10142 ( names , startIndex ) { $F83 ( sb ) if ( names != null ) { for ( String name : names ) { $F13047 ( sb , name , startIndex ) $F84 ( sb ) } } $F92 ( sb ) }
public String lookupPrefix ( String uri ) { String foundPrefix = null ; $F10529 ( prefixes , m_namespaces ) while $F1444 ( prefixes ) { $F14952 ( prefix , prefixes ) String uri2 = lookupNamespace ( prefix ) ; if $F1256 ( uri2 , uri ) $F3468 ( foundPrefix , prefix ) } return foundPrefix ; }
public void removeAllTrailers $F72 { $F725 ( trailer ) firePropertyChange ( TRAILER , null , trailer ) ; }
public Builder clear $F72 $F68437 ( localeBuilder , this )
private static boolean versionMatches ( Integer v1 , Integer v2 ) { if ( v1 == null || v1 == NUM00 || v2 == null || v2 == NUM00 ) { return _BOOL ; } $F1964 ( v1 , v2 ) }
public static $F65632 packageName ( String longName ) { if $F105 ( longName , DOT ) { return Optional . of ( longName . substring ( NUM00 , longName . lastIndexOf ( DOT ) ) ) ; } else $F21170 ( Optional ) }
public $F26352 e2f $F72 { int eDim = tgtEndExclusive - tgtStartInclusive ; $F26352 e2f = new int [ eDim ] [ ] ; for ( int i = tgtStartInclusive ; i < tgtEndExclusive ; ++ i ) { int localIdx = i - tgtStartInclusive ; $F2027 e2fI = sentencePair . e2f ( i ) ; int srcAlignDim = e2fI . length ; $F134093 ( e2f , localIdx , srcAlignDim ) if ( srcAlignDim > NUM00 ) { System . arraycopy ( e2fI , NUM00 , e2f [ localIdx ] , NUM00 , srcAlignDim ) ; for ( $F1316 ( j , srcAlignDim ) ) { e2f [ localIdx ] [ j ] -= srcStartInclusive ; } } } return e2f ; }
public void readExif ( String inFileName ) throws $F27136 { $F27609 ( inFileName , NULL_ARGUMENT_ ) InputStream is = null ; try { is = ( InputStream ) $F20276 ( inFileName ) ; readExif ( is ) ; } $F27615 ( closeSilently , is , e ) $F59 ( is ) }
private void assertWriteResult ( int size ) throws IOException { ByteBuffer buf = ByteBuffer . allocate ( size + NUM00 ) ; int count = NUM00 ; int total = NUM00 ; $F657 ( beginTime , System ) while $F18067 ( count , clientChannel , buf ) { total = total + count ; if ( System . currentTimeMillis ( ) - beginTime > NUM00 ) $F5153 } assertEquals ( total , size ) ; $F14257 ( buf ) for ( $F119 ( i , count ) ) { assertEquals ( ( byte ) i , buf . get ( i ) ) ; } }
public static boolean isFileUploadAvailable ( final boolean needsCorrectMimeType ) { if ( Build . VERSION . SDK_INT == NUM00 ) { final String platformVersion = ( Build . VERSION . RELEASE == null ) ? NUM00 : Build . VERSION . RELEASE ; return ! needsCorrectMimeType && $F418 ( platformVersion ) ; } else { return _BOOL ; } }
$F1 public String toString $F72 { if ( m_bGenerateNet ) $F2905 ( toXMLBIF03 ) $F92 ( m_Instances ) }
private boolean menuItemAction $F14337 ( screenX , screenY , action ) { ListView listView = mAppMenu . getPopup ( ) . getListView ( ) ; $F30929 $F266741 ( itemViews ) ; for ( int i = NUM00 ; i < listView . getChildCount ( ) ; ++ i ) { boolean hasImageButtons = _BOOL ; if ( listView . getChildAt ( i ) instanceof LinearLayout ) { LinearLayout layout = ( LinearLayout ) listView . getChildAt ( i ) ; for ( int j = NUM00 ; j < layout . getChildCount ( ) ; ++ j ) { itemViews . add ( layout . getChildAt ( j ) ) ; if ( layout . getChildAt ( j ) instanceof ImageButton ) hasImageButtons = _BOOL ; } } if ( ! hasImageButtons ) itemViews . add ( listView . getChildAt ( i ) ) ; } boolean didPerformClick = _BOOL ; for ( $F3836 ( i , itemViews ) ) { View itemView = itemViews . get ( i ) ; boolean shouldPerform = itemView . isEnabled ( ) && itemView . isShown ( ) && getScreenVisibleRect ( itemView ) . contains ( screenX , screenY ) ; switch ( action ) { case ITEM_ACTION_HIGHLIGHT : itemView . setPressed ( shouldPerform ) ; $F597 case ITEM_ACTION_PERFORM : if ( shouldPerform ) { itemView . performClick ( ) ; didPerformClick = _BOOL ; } $F597 case ITEM_ACTION_CLEAR_HIGHLIGHT_ALL : itemView . setPressed ( _BOOL ) ; $F597 $F1267 assert _BOOL ; $F597 } } return didPerformClick ; }
public void toggle ( JFXDrawer drawer ) { if $F2200 ( drawers , drawer ) addDrawer ( drawer ) ; if ( drawer . isShown ( ) || drawer . isShowing ( ) ) $F59 ( drawer ) else { updateDrawerPosition ( drawer ) ; $F5837 ( drawer ) } }
public static boolean isVMwareVapp $F72 { if ( isVMwareVapp != null ) { log . info ( NUM00 , isVMwareVapp . booleanValue ( ) ) ; $F44652 ( isVMwareVapp ) } final $F806 cmd = { GET_OVF_PROPERTY_CMD , IS_VAPP } ; Exec . Result result = Exec . sudo ( CMD_TIMEOUT , cmd ) ; if ( ! result . exitedNormally ( ) ) { log . error ( NUM00 , result . getStdError ( ) ) ; $F4638 } if ( result . getExitValue ( ) == NUM00 ) { $F973 ( log ) isVMwareVapp = Boolean . TRUE ; $F44652 ( isVMwareVapp ) } log . info ( NUM00 , result . getExitValue ( ) ) ; isVMwareVapp = Boolean . FALSE ; $F44652 ( isVMwareVapp ) }
protected String toBase64 $F97 ( data ) { return Base64 . encodeToString ( data , Base64 . DEFAULT ) ; }
$F1 public String toVerboseString $F72 { $F1121 ( sb ) print ( sb , NUM00 , Verbosity . LOG_WITH_STACKTRACE ) ; $F92 ( sb ) }
public static long quantile ( $F2469 values , double quantile ) { $F19273 ( values ) if $F19274 ( quantile ) $F824 $F19280 ( copy , values ) $F5634 ( System , values , copy ) Arrays . sort ( copy ) ; int index = ( int ) ( copy . length * quantile ) ; return copy [ index ] ; }
public void addTreeUpdate ( SLDTreeUpdatedInterface sldTree ) $F207 ( treeUpdateList , sldTree )
public static double distance ( VisualItem vi1 , VisualItem vi2 ) { $F152048 ( dx , vi1 , vi2 ) $F152051 ( dy , vi1 , vi2 ) $F126355 ( Math , dx , dy ) }
$F1 public void validateRequest ( GenericAttributeResolveRequest request ) throws BadAttributeResolveRequestException { $F51622 ( LOG ) String siteId = request . getSite ( ) ; if ( null == siteId ) throw new BadAttributeResolveRequestException ( HDFSResourceConstants . HDFS_RESOURCE_RESOLVE_FORMAT_HINT ) ; String filePath = request . getQuery ( ) ; if ( null == filePath || $F14942 ( filePath ) ) throw new BadAttributeResolveRequestException ( HDFSResourceConstants . HDFS_RESOURCE_RESOLVE_FORMAT_HINT ) ; $F51622 ( LOG ) }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
public Trigger when ( Criterion criterion ) { $F1140 ( criterion , criterions ) return this ; }
private static $F7329 offsetROR $F68514 ( offset , environment , instructions , registerNodeValue1 , registerNodeValue2 , immediateNodeValue ) { $F7336 ( address , environment ) $F7336 ( index , environment ) $F7336 ( tmpVar , environment ) $F7336 ( tmpVar1 , environment ) $F7336 ( tmpVar2 , environment ) $F7336 ( tmpVar3 , environment ) long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , NUM00 + Integer . decode ( immediateNodeValue ) , dw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , String . valueOf ( NUM00 - Integer . decode ( immediateNodeValue ) ) , dw , tmpVar2 ) ) ; $F43825 ( instructions , ReilHelpers , baseOffset , dw , tmpVar1 , tmpVar2 , tmpVar3 ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar3 , dWordBitMask , index ) $F43828 ( instructions , ReilHelpers , baseOffset , dw , registerNodeValue1 , index , tmpVar ) $F7341 ( instructions , ReilHelpers , baseOffset , dw , tmpVar , dWordBitMask , address ) $F7348 ( address , registerNodeValue1 ) }
public void clear $F72 { $F725 ( m_ReadMethods ) $F725 ( m_WriteMethods ) try $F5795 ( addMethods ) $F1516 ( e ) }
public static String join ( CharSequence delimiter , $F131 tokens ) { $F83 ( sb ) boolean firstTime = _BOOL ; for ( Object token : tokens ) $F98972 ( firstTime , _BOOL , sb , delimiter , token ) $F92 ( sb ) }
private void fillIn ( ClassSymbol c ) { if ( completionFailureName == c . fullname ) { throw new CompletionFailure ( c , NUM00 ) ; } currentOwner = c ; $F725 ( warnedAttrs ) JavaFileObject classfile = c . classfile ; if ( classfile != null ) { JavaFileObject previousClassFile = currentClassFile ; try { if ( filling ) { Assert . error ( NUM00 + classfile . toUri ( ) + NUM00 + previousClassFile ) ; } currentClassFile = classfile ; if ( verbose ) { log . printVerbose ( $F22435 ( currentClassFile ) ) ; } if ( classfile . getKind ( ) == JavaFileObject . Kind . CLASS ) { filling = _BOOL ; try { bp = NUM00 ; buf = readInputStream ( buf , classfile . openInputStream ( ) ) ; readClassFile ( c ) ; if $F133343 ( missingTypeVariables , foundTypeVariables ) { $F17124 missing = missingTypeVariables ; $F17124 found = foundTypeVariables ; missingTypeVariables = List . nil ( ) ; foundTypeVariables = List . nil ( ) ; filling = _BOOL ; ClassType ct = ( ClassType ) currentOwner . type ; ct . supertype_field = types . subst ( ct . supertype_field , missing , found ) ; ct . interfaces_field = types . subst ( ct . interfaces_field , missing , found ) ; } else if ( missingTypeVariables . isEmpty ( ) != foundTypeVariables . isEmpty ( ) ) { Name name = missingTypeVariables . head . tsym . name ; throw badClassFile ( NUM00 , name ) ; } } finally { missingTypeVariables = List . nil ( ) ; foundTypeVariables = List . nil ( ) ; filling = _BOOL ; } } else { if ( sourceCompleter != null ) { sourceCompleter . complete ( c ) ; } else { throw new IllegalStateException ( NUM00 + classfile . toUri ( ) ) ; } } $F665 } catch ( IOException ex ) { throw badClassFile ( $F10629 ( ex ) ) ; } finally { currentClassFile = previousClassFile ; } } else { JCDiagnostic diag = diagFactory . fragment ( NUM00 , c . flatname ) ; throw newCompletionFailure ( c , diag ) ; } }
public static Packet toPacket ( ByteBuffer data ) { final byte code = data . get ( ) ; final short id = ( short ) ( $F27748 ( data ) & NUM00 ) ; final short datalen = data . getShort ( ) ; $F10317 ( authData ) data . get ( authData ) ; final PacketType type = PacketType . getPacketType ( code ) ; Packet pkt = null ; switch ( type ) { case ACCESS_ACCEPT : pkt = new AccessAccept $F72 ; pkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; $F597 case ACCESS_CHALLENGE : pkt = new AccessChallenge $F72 ; pkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; $F597 case ACCESS_REJECT : pkt = new AccessReject $F72 ; pkt . setAuthenticator ( new ResponseAuthenticator ( authData ) ) ; $F597 case ACCESS_REQUEST : pkt = new AccessRequest $F72 ; pkt . setAuthenticator ( new RequestAuthenticator ( authData ) ) ; $F597 case UNKNOWN : $F1267 LOG . log ( Level . WARNING , NUM00 + code + NUM00 ) ; $F1274 } pkt . setIdentifier ( id ) ; Attribute a = null ; while ( ( a = PacketFactory . nextAttribute ( data ) ) != null ) { pkt . addAttribute ( a ) ; } return pkt ; }
public void unlockReadLocks $F72 { if ( database . isMultiVersion ( ) ) $F932 for ( $F2277 ( i , locks ) ) { Table t = locks . get ( i ) ; if ( ! t . isLockedExclusively ( ) ) { synchronized ( database ) { t . unlock ( this ) ; locks . remove ( i ) ; } i -- ; } } }
protected void processAttributes $F72 { for ( final String tag : tags ) { for ( final String inherit : inherits ) { styleSheet . addStyles ( tag , styleSheet . getStyles ( inherit ) ) ; } styleSheet . addStyles ( tag , attributes ) ; } }
private boolean isImage ( String url ) { return url . matches ( Regex . IMAGE_PATTERN ) ; }
public void addAttribute ( $F128895 attribute , Object value , int start , int end ) { $F896 ( attribute ) if ( $F128898 ( start , end , text ) || start >= end ) $F26853 $F2329 ( value ) $F128903 ranges = attributeMap . get ( attribute ) ; if ( ranges == null ) { ranges = new ArrayList $F128902 $F989 ; $F128912 ( ranges , start , end , value ) attributeMap . put ( attribute , ranges ) ; $F665 } ListIterator $F128902 it = ranges . listIterator ( ) ; while $F2921 ( it ) { Range range = it . next ( ) ; if ( end <= range . start ) { $F45359 ( it ) $F597 } else if ( start < range . end || ( start == range . end && $F12737 ( value , range ) ) ) { Range r1 = null , r3 ; $F7042 ( it ) r1 = new Range ( range . start , start , range . value ) ; r3 = new Range ( end , range . end , range . value ) ; while ( end > range . end && it . hasNext ( ) ) { $F45366 ( range , it ) if ( end <= range . end ) { if ( end > range . start || ( end == range . start && $F12737 ( value , range ) ) ) { $F7042 ( it ) r3 = new Range ( end , range . end , range . value ) ; $F597 } } else $F38599 ( it ) } if $F52920 ( value , r1 ) { if $F52920 ( value , r3 ) { it . add ( new Range ( r1 . start < start ? r1 . start : start , r3 . end > end ? r3 . end : end , r1 . value ) ) ; } else { it . add ( new Range ( r1 . start < start ? r1 . start : start , end , r1 . value ) ) ; $F128966 ( r3 , it ) } } else { if $F52920 ( value , r3 ) { $F128966 ( r1 , it ) it . add ( new Range ( start , r3 . end > end ? r3 . end : end , r3 . value ) ) ; } else { $F128966 ( r1 , it ) $F128912 ( it , start , end , value ) $F128966 ( r3 , it ) } } $F665 } } $F128912 ( it , start , end , value ) }
public static boolean pointInRotatedRect ( $F5415 point , RectF bound , float rot ) { $F28837 ( m ) $F5415 p = Arrays . copyOf ( point , NUM00 ) ; m . setRotate ( rot , bound . centerX ( ) , bound . centerY ( ) ) ; $F28837 ( m0 ) if ( ! m . invert ( m0 ) ) return _BOOL ; m0 . mapPoints ( p ) ; return inclusiveContains ( $F156480 ( bound , p ) ) ; }
$F1 public void warning ( String domain , String key , XMLParseException exception ) throws XNIException { if ( fErrorHandler != null ) { SAXParseException saxException = createSAXParseException ( exception ) ; try { fErrorHandler . warning ( saxException ) ; } catch ( SAXParseException e ) $F34850 ( createXMLParseException , e ) catch ( SAXException e ) $F34850 ( createXNIException , e ) } }
public void modifyAll ( Map < String , Collection < DynamicModification > > modifications , Collection $F81247 problems ) throws CannotCompileException { for ( $F3465 ( className , modifications ) ) { try { $F299378 ( modify , className , modifications ) } catch ( NotFoundException e ) { log . warn ( NUM00 + className , e ) ; problems . add ( e ) ; } catch ( ClassNotFoundException e ) { log . warn ( NUM00 + className , e ) ; problems . add ( e ) ; } catch ( IOException e ) { log . warn ( NUM00 + className , e ) ; problems . add ( e ) ; } } }
public MutableLocation toMutableLocation ( World w ) { return new MutableLocation ( x , y , z , w ) ; }
public boolean verify ( GeneralNameInterface name ) throws IOException { $F31068 ( name ) if $F8841 ( excluded ) { for ( $F2277 ( i , excluded ) ) { GeneralSubtree gs = excluded . get ( i ) ; $F45557 ( gs ) GeneralName gn = gs . getName ( ) ; $F45557 ( gn ) GeneralNameInterface exName = gn . getName ( ) ; $F45557 ( exName ) switch ( exName . constrains ( name ) ) { case GeneralNameInterface . NAME_DIFF_TYPE : case GeneralNameInterface . NAME_WIDENS : case GeneralNameInterface . NAME_SAME_TYPE : $F597 case GeneralNameInterface . NAME_MATCH : case GeneralNameInterface . NAME_NARROWS : return _BOOL ; } } } if $F8841 ( permitted ) { boolean sameType = _BOOL ; for ( $F2277 ( i , permitted ) ) { GeneralSubtree gs = permitted . get ( i ) ; $F45557 ( gs ) GeneralName gn = gs . getName ( ) ; $F45557 ( gn ) GeneralNameInterface perName = gn . getName ( ) ; $F45557 ( perName ) switch ( perName . constrains ( name ) ) { case GeneralNameInterface . NAME_DIFF_TYPE : $F598 case GeneralNameInterface . NAME_WIDENS : case GeneralNameInterface . NAME_SAME_TYPE : sameType = _BOOL ; $F598 case GeneralNameInterface . NAME_MATCH : case GeneralNameInterface . NAME_NARROWS : return _BOOL ; } } $F9303 ( sameType , _BOOL ) } return _BOOL ; }
public void readGraphics ( ObjectInputStream objstream ) throws IOException { $F36253 ( Debug ) try { while ( _BOOL ) { try { OMGraphic omg = ( OMGraphic ) objstream . readObject ( ) ; graphics . add ( omg ) ; } catch ( ClassNotFoundException e ) $F302 ( e ) catch ( OptionalDataException ode ) $F302 ( ode ) } } $F214817 }
public void createTopics ( int numPartitions , int replicationFactor , $F2689 topics ) { createTopics ( numPartitions , replicationFactor , $F10148 ( topics ) ) ; }
public synchronized void removeListener ( Listener l ) $F106 ( listeners , l )
public CommandLine add ( String ... args ) { if $F22195 ( args ) $F122380 ( Collections , arguments , args ) return this ; }
private void restoreIcon ( BackupProtos . Key key , $F96 buffer , int dataSize ) throws IOException { if ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; BackupProtos . Resource res = unpackProto ( new BackupProtos . Resource $F72 , buffer , dataSize ) ; if ( DEBUG ) { Log . d ( TAG , NUM00 + res . dpi + NUM00 ) ; } Bitmap icon = BitmapFactory . decodeByteArray ( res . data , NUM00 , res . data . length ) ; if ( icon == null ) { Log . w ( TAG , NUM00 + key . name ) ; } else { if ( VERBOSE ) Log . v ( TAG , NUM00 + key . name ) ; mIconCache . preloadIcon ( ComponentName . unflattenFromString ( key . name ) , icon , res . dpi , NUM00 , mUserSerial , mIdp ) ; } }
public static $F7465 ( msg , startpos , count , len , idx , ch , isDigit )
public EventStoreBuilder useSslConnection ( String certificateCommonName ) { settingsBuilder . sslSettings ( SslSettings . trustCertificateCN ( certificateCommonName ) ) ; return this ; }
ActionMap createActionMap $F72 { ActionMap map = new ActionMapUIResource $F72 ; map . put ( NUM00 , new ShowSystemMenuAction ( _BOOL ) ) ; map . put ( NUM00 , new ShowSystemMenuAction ( _BOOL ) ) ; return map ; }
protected void paintContentBorderLeftEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( selectHighlight ) ; g . fillRect ( x , y , NUM00 , h - NUM00 ) ; } }
private String fieldParamComment ( Field field , String paramComment ) { String commentType = fieldTypeCardinalityComment ( field ) ; String comment = String . format ( NUM00 , wrapIfKeywordOrBuiltIn ( field . getSimpleName ( ) ) , commentType ) ; if ( paramComment == null ) { paramComment = DocumentationUtil . getScopedDescription ( field ) ; } if $F48189 ( Strings , paramComment ) { paramComment = RDocCommentFixer . rdocify ( paramComment ) ; comment += $F37742 ( paramComment ) ; } return comment + NUM00 ; }
public static long periodEnd ( long now , long period ) { LocalDateTime time = LocalDateTime . ofEpochSecond ( now / NUM00 , NUM00 , ZoneOffset . UTC ) ; long endTime = periodEnd ( now , period , time ) ; return endTime ; }
public void testThenCombine_sourceCancelled $F72 throws Throwable { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( mayInterruptIfRunning , _BOOL ) ) for ( $F2703 ( fFirst , _BOOL ) ) for ( $F2703 ( failFirst , _BOOL ) ) for ( $F127409 ( v1 ) ) { $F127411 ( f ) $F127411 ( g ) final SubtractFunction r1 = new SubtractFunction ( m ) ; final SubtractFunction r2 = new SubtractFunction ( m ) ; final SubtractFunction r3 = new SubtractFunction ( m ) ; final $F70219 fst = fFirst ? f : g ; final $F70219 snd = ! fFirst ? f : g ; $F159507 ( complete1 , failFirst ) $F159507 ( complete2 , failFirst ) final $F70219 h1 = m . thenCombine ( f , g , r1 ) ; $F159512 ( assertTrue , complete1 ) final $F70219 h2 = m . thenCombine ( f , g , r2 ) ; checkIncomplete ( h1 ) ; checkIncomplete ( h2 ) ; $F159512 ( assertTrue , complete2 ) final $F70219 h3 = m . thenCombine ( f , g , r3 ) ; checkCompletedWithWrappedCancellationException ( h1 ) ; checkCompletedWithWrappedCancellationException ( h2 ) ; checkCompletedWithWrappedCancellationException ( h3 ) ; $F159513 ( r1 ) $F159513 ( r2 ) $F159513 ( r3 ) checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; checkCancelled ( failFirst ? fst : snd ) ; } }
public static String generateChatId $F2236 ( receiverId , senderId ) { String combined = null ; if $F25292 ( receiverId , senderId ) { combined = String . format ( Locale . US , AppConstants . CHAT_ID_FORMAT , receiverId , senderId ) ; } else { combined = String . format ( Locale . US , AppConstants . CHAT_ID_FORMAT , senderId , receiverId ) ; } String hashed = null ; try { hashed = Utils . sha1 ( combined ) ; } catch ( final NoSuchAlgorithmException e ) { hashed = combined ; } return hashed ; }
void extract ( String fname , String files [ ] ) throws IOException { $F170751 ( zf , fname ) Set < ZipEntry > dirs = newDirSet ( ) ; $F223878 ( zes , zf ) ; while $F1444 ( zes ) { $F223881 ( e , zes ) if ( files == null ) { dirs . add ( extractFile ( zf . getInputStream ( e ) , e ) ) ; } else { $F20605 ( name , e ) for ( String file : files ) { if $F7311 ( name , file ) { dirs . add ( extractFile ( zf . getInputStream ( e ) , e ) ) ; $F597 } } } } $F59 ( zf ) updateLastModifiedTime ( dirs ) ; }
public void remove ( MenuComponent m ) { synchronized ( getTreeLock ( ) ) { $F12747 ( index , menus , m ) $F308891 ( index , remove ) } }
public void testIdentity $F72 { assertNotNull ( new IdentityStub $F72 ) ; }
public void keyReleased ( final KeyEvent k ) $F845
public XMLImporter ( ProgressListener listener ) { progressListener = listener ; }
private static TreeMap < Integer , Long > loadWorkspaceScreensDb ( Context context ) { final ContentResolver contentResolver = context . getContentResolver ( ) ; final Uri screensUri = LauncherSettings . WorkspaceScreens . CONTENT_URI ; final Cursor sc = contentResolver . query ( screensUri , null , null , null , null ) ; TreeMap < Integer , Long > orderedScreens = new TreeMap < Integer , Long > $F72 ; try { final int idIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . _ID ) ; final int rankIndex = sc . getColumnIndexOrThrow ( LauncherSettings . WorkspaceScreens . SCREEN_RANK ) ; while $F12260 ( sc ) { try { long screenId = sc . getLong ( idIndex ) ; $F41834 ( rank , sc , rankIndex ) orderedScreens . put ( rank , screenId ) ; } catch ( Exception e ) { Launcher . addDumpLog ( TAG , NUM00 + e , _BOOL ) ; } } } $F3229 ( sc ) Launcher . addDumpLog ( TAG , NUM00 , _BOOL ) ; $F8728 ( orderedScreensPairs ) for ( $F61448 ( i , orderedScreens ) ) { orderedScreensPairs . add ( NUM00 + i + NUM00 + orderedScreens . get ( i ) + NUM00 ) ; } Launcher . addDumpLog ( TAG , NUM00 + TextUtils . join ( NUM00 , orderedScreensPairs ) , _BOOL ) ; return orderedScreens ; }
public Observable < DriveId > createFile ( DriveFolder folder , final File file ) { return createFile ( folder , file , file . getName ( ) ) ; }
public static void validateContext ( AccelSurface srcData , AccelSurface dstData , Region clip , Composite comp , AffineTransform xform , Paint paint , SunGraphics2D sg2d , int flags ) { BufferedContext context = dstData . getContext ( ) ; context . validate ( srcData , dstData , clip , comp , xform , paint , sg2d , flags ) ; }
public void addCertificatesAndCRLs ( CertStore certStore ) throws CertStoreException , CMSException { certs . addAll ( CMSUtils . getCertificatesFromStore ( certStore ) ) ; crls . addAll ( CMSUtils . getCRLsFromStore ( certStore ) ) ; }
public void changeDefaultNames ( String type ) { $F6542 ( convert , CONVERT_TYPES ) $F6542 ( types , TYPES ) if $F11279 ( convert , types ) { log . error ( NUM00 , types . length , convert . length ) ; $F665 } if ( type . equals ( Setup . DESCRIPTIVE ) ) { for ( $F1139 ( i , convert ) ) $F66563 ( replaceName , convert , i , types ) $F6542 ( aarTypes , ARR_TYPES ) for ( $F1139 ( i , aarTypes ) ) { list . remove ( aarTypes [ i ] ) ; } for ( $F1139 ( i , types ) ) { if $F22209 ( list , types , i ) $F24617 ( list , types , i ) } } else { for ( $F1139 ( i , convert ) ) $F66563 ( replaceName , types , i , convert ) for ( $F1139 ( i , types ) ) { list . remove ( types [ i ] ) ; } $F10128 ( types , ARR_TYPES ) for ( $F1139 ( i , types ) ) { if $F22209 ( list , types , i ) $F24617 ( list , types , i ) } } }
public LabelValueComparator ( final Locale locale ) $F25343 ( c , Collator , locale )
public Refresher ( GLScene scene ) { Preconditions . checkNotNull ( scene ) ; this . scene = scene ; }
public Rect updateFastScrollerBounds ( int lastTouchY ) { mInvalidateRect . set ( mBgBounds ) ; if ( isVisible ( ) ) { int edgePadding = mRv . getMaxScrollbarWidth ( ) ; int bgPadding = ( mBgOriginalSize - mTextBounds . height ( ) ) / NUM00 ; int bgHeight = mBgOriginalSize ; int bgWidth = Math . max ( mBgOriginalSize , mTextBounds . width ( ) + ( NUM00 * bgPadding ) ) ; if ( Utilities . isRtl ( mRes ) ) { mBgBounds . left = mRv . getBackgroundPadding ( ) . left + ( NUM00 * mRv . getMaxScrollbarWidth ( ) ) ; $F68813 ( mBgBounds , bgWidth ) } else { mBgBounds . right = mRv . getWidth ( ) - mRv . getBackgroundPadding ( ) . right - ( NUM00 * mRv . getMaxScrollbarWidth ( ) ) ; mBgBounds . left = mBgBounds . right - bgWidth ; } mBgBounds . top = lastTouchY - $F2354 ( FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR , bgHeight ) ; mBgBounds . top = Math . max ( edgePadding , Math . min ( mBgBounds . top , mRv . getHeight ( ) - edgePadding - bgHeight ) ) ; mBgBounds . bottom = mBgBounds . top + bgHeight ; } else $F406864 ( mBgBounds ) mInvalidateRect . union ( mBgBounds ) ; return mInvalidateRect ; }
public void buildUniqueId $F72 throws VPlexApiException { String name = getName ( ) ; if $F2200 ( name , VPLEX_NAME_DELIM ) { $F34419 ( s_logger , name ) uniqueId = name ; $F665 } $F162792 ( lastDelimIndex , name , VPLEX_NAME_DELIM ) $F36289 ( suffix , name , lastDelimIndex ) $F21153 ( s_logger , name , suffix ) uniqueId = suffix ; }
public static String createBase64 ( Bitmap mBitmap ) { $F1538 ( baos1 ) $F26834 ( mBitmap , Bitmap , baos1 ) $F1208 ( b1 , baos1 ) return Base64 . encodeToString ( b1 , Base64 . DEFAULT ) ; }
public DiceServerEditor ( final IRemoteDiceServer diceServer ) { m_bean = diceServer ; final int bottomSpace = NUM00 ; final int labelSpace = NUM00 ; int row = NUM00 ; if ( m_bean . sendsEmail ( ) ) { add ( m_toLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; $F34065 ( add , m_toAddress , row , GridBagConstraints , bottomSpace ) m_toAddress . setText ( m_bean . getToAddress ( ) ) ; row ++ ; add ( m_ccLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; $F34065 ( add , m_ccAddress , row , GridBagConstraints , bottomSpace ) m_ccAddress . setText ( m_bean . getCcAddress ( ) ) ; row ++ ; } if ( m_bean . supportsGameId ( ) ) { final JLabel m_gameIdLabel = $F34046 ; add ( m_gameIdLabel , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , labelSpace ) , NUM00 , NUM00 ) ) ; $F34065 ( add , m_gameId , row , GridBagConstraints , bottomSpace ) m_gameId . setText ( m_bean . getGameId ( ) ) ; row ++ ; } add ( m_testDiceyButton , new GridBagConstraints ( NUM00 , row , NUM00 , NUM00 , NUM00 , NUM00 , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( NUM00 , NUM00 , bottomSpace , NUM00 ) , NUM00 , NUM00 ) ) ; setupListeners ( ) ; }
$F1 public boolean equals ( Object obj ) { $F3627 ( obj , this , _BOOL ) if ( ! ( obj instanceof CandlestickRenderer ) ) { return _BOOL ; } CandlestickRenderer that = ( CandlestickRenderer ) obj ; if ( this . candleWidth != that . candleWidth ) { return _BOOL ; } if ( ! PaintUtilities . equal ( this . upPaint , that . upPaint ) ) { return _BOOL ; } if ( ! PaintUtilities . equal ( this . downPaint , that . downPaint ) ) { return _BOOL ; } if ( this . drawVolume != that . drawVolume ) { return _BOOL ; } if ( this . maxCandleWidthInMilliseconds != that . maxCandleWidthInMilliseconds ) { return _BOOL ; } if ( this . autoWidthMethod != that . autoWidthMethod ) { return _BOOL ; } if ( this . autoWidthFactor != that . autoWidthFactor ) { return _BOOL ; } if ( this . autoWidthGap != that . autoWidthGap ) { return _BOOL ; } if ( this . useOutlinePaint != that . useOutlinePaint ) { return _BOOL ; } if ( ! PaintUtilities . equal ( this . volumePaint , that . volumePaint ) ) { return _BOOL ; } $F1964 ( super , obj ) }
public HeaderIterator iterator $F72 { return new BasicListHeaderIterator ( this . headers , null ) ; }
$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log )
$F1431 $F20664 $F1 public boolean onTouchEvent ( MotionEvent event ) { PointF vCenterEnd ; float vDistEnd ; if ( anim != null && ! anim . interruptible ) { return _BOOL ; } else { anim = null ; } $F1933 ( vTranslate , _BOOL ) if ( detector == null || detector . onTouchEvent ( event ) ) { return _BOOL ; } int touchCount = event . getPointerCount ( ) ; switch $F166723 ( event ) { case MotionEvent . ACTION_DOWN : case MotionEvent . ACTION_POINTER_1_DOWN : case MotionEvent . ACTION_POINTER_2_DOWN : anim = null ; $F19410 ( maxTouchCount , Math , touchCount ) if ( touchCount >= NUM00 ) { if ( zoomEnabled ) { float distance = distance ( event . getX ( NUM00 ) , event . getX ( NUM00 ) , event . getY ( NUM00 ) , event . getY ( NUM00 ) ) ; scaleStart = scale ; vDistStart = distance ; vTranslateStart = new PointF $F47158 ( vTranslate ) ; vCenterStart = new PointF ( ( event . getX ( NUM00 ) + event . getX ( NUM00 ) ) / NUM00 , ( event . getY ( NUM00 ) + event . getY ( NUM00 ) ) / NUM00 ) ; } else { maxTouchCount = NUM00 ; } handler . removeMessages ( MESSAGE_LONG_CLICK ) ; } else { vTranslateStart = new PointF $F47158 ( vTranslate ) ; vCenterStart = new PointF ( $F5048 ( event ) ) ; handler . sendEmptyMessageDelayed ( MESSAGE_LONG_CLICK , NUM00 ) ; } return _BOOL ; case MotionEvent . ACTION_MOVE : boolean consumed = _BOOL ; if ( maxTouchCount > NUM00 ) { if ( touchCount >= NUM00 ) { vDistEnd = distance ( event . getX ( NUM00 ) , event . getX ( NUM00 ) , event . getY ( NUM00 ) , event . getY ( NUM00 ) ) ; vCenterEnd = new PointF ( ( event . getX ( NUM00 ) + event . getX ( NUM00 ) ) / NUM00 , ( event . getY ( NUM00 ) + event . getY ( NUM00 ) ) / NUM00 ) ; if ( zoomEnabled && ( distance ( vCenterStart . x , vCenterEnd . x , vCenterStart . y , vCenterEnd . y ) > NUM00 || Math . abs ( vDistEnd - vDistStart ) > NUM00 || isPanning ) ) { isZooming = _BOOL ; isPanning = _BOOL ; consumed = _BOOL ; scale = Math . min ( maxScale , ( vDistEnd / vDistStart ) * scaleStart ) ; if ( scale <= minScale ( ) ) { vDistStart = vDistEnd ; scaleStart = minScale ( ) ; vCenterStart = vCenterEnd ; vTranslateStart = vTranslate ; } else if ( panEnabled ) { float vLeftStart = vCenterStart . x - vTranslateStart . x ; float vTopStart = vCenterStart . y - vTranslateStart . y ; float vLeftNow = vLeftStart * ( scale / scaleStart ) ; float vTopNow = vTopStart * ( scale / scaleStart ) ; vTranslate . x = vCenterEnd . x - vLeftNow ; vTranslate . y = vCenterEnd . y - vTopNow ; } else if ( sRequestedCenter != null ) { vTranslate . x = ( getWidth ( ) / NUM00 ) - ( scale * sRequestedCenter . x ) ; vTranslate . y = ( getHeight ( ) / NUM00 ) - ( scale * sRequestedCenter . y ) ; } else { vTranslate . x = ( getWidth ( ) / NUM00 ) - ( scale * ( sWidth ( ) / NUM00 ) ) ; vTranslate . y = ( getHeight ( ) / NUM00 ) - ( scale * ( sHeight ( ) / NUM00 ) ) ; } fitToBounds ( _BOOL ) ; refreshRequiredTiles ( _BOOL ) ; } } else if ( ! isZooming ) { float dx = Math . abs ( event . getX ( ) - vCenterStart . x ) ; float dy = Math . abs ( event . getY ( ) - vCenterStart . y ) ; if ( dx > NUM00 || dy > NUM00 || isPanning ) { consumed = _BOOL ; vTranslate . x = vTranslateStart . x + ( event . getX ( ) - vCenterStart . x ) ; vTranslate . y = vTranslateStart . y + ( event . getY ( ) - vCenterStart . y ) ; float lastX = vTranslate . x ; float lastY = vTranslate . y ; fitToBounds ( _BOOL ) ; if ( lastX == vTranslate . x || ( lastY == vTranslate . y && dy > NUM00 ) || isPanning ) { isPanning = _BOOL ; } else if ( dx > NUM00 ) { maxTouchCount = NUM00 ; handler . removeMessages ( MESSAGE_LONG_CLICK ) ; } if ( ! panEnabled ) { $F33664 ( vTranslate , vTranslateStart ) $F33649 ( vTranslate , vTranslateStart ) } refreshRequiredTiles ( _BOOL ) ; } } } if ( consumed ) { handler . removeMessages ( MESSAGE_LONG_CLICK ) ; invalidate ( ) ; return _BOOL ; } $F597 case MotionEvent . ACTION_UP : case MotionEvent . ACTION_POINTER_UP : case MotionEvent . ACTION_POINTER_2_UP : handler . removeMessages ( MESSAGE_LONG_CLICK ) ; if ( maxTouchCount > NUM00 && ( isZooming || isPanning ) ) { if ( isZooming && touchCount == NUM00 ) { isPanning = _BOOL ; vTranslateStart = new PointF $F47158 ( vTranslate ) ; if ( event . getActionIndex ( ) == NUM00 ) { vCenterStart = new PointF ( event . getX ( NUM00 ) , event . getY ( NUM00 ) ) ; } else { vCenterStart = new PointF ( event . getX ( NUM00 ) , event . getY ( NUM00 ) ) ; } } if ( touchCount < NUM00 ) { isZooming = _BOOL ; } if ( touchCount < NUM00 ) { isPanning = _BOOL ; maxTouchCount = NUM00 ; } refreshRequiredTiles ( _BOOL ) ; return _BOOL ; } if ( touchCount == NUM00 ) { isZooming = _BOOL ; isPanning = _BOOL ; maxTouchCount = NUM00 ; } return _BOOL ; } $F19497 ( super , event ) }
public static < T1 , T2 > void transform ( Collection < T1 > from , Collection < T2 > to , Transformer < T1 , T2 > transformer ) { for ( T1 instance : from ) { to . add ( transformer . transform ( instance ) ) ; } }
public static String generateCode $F72 $F4915 ( generateCode , CODESIZE )
$F9105 ( url )
public void flush $F72 throws $F3258 $F29882 ( m_os )
private void combineEntries ( ArrayList < $F2469 > list , int total ) { Collections . sort ( list , this ) ; for ( int minGap = NUM00 ; minGap < total ; minGap += minGap / NUM00 ) { for ( $F2665 ( i , list ) ) { $F2469 current = list . get ( i ) ; $F2469 next = list . get ( i + NUM00 ) ; if ( current [ NUM00 ] + minGap >= next [ NUM00 ] ) { $F603 ( current , next ) list . remove ( i + NUM00 ) ; i -- ; } } int searched = NUM00 ; for ( $F2469 range : list ) { searched += $F50510 ( range ) + NUM00 ; } if ( searched > NUM00 * total || $F6213 ( list ) ) $F5153 } }
$F1 public void writeString $F24576 ( str , offset , length ) throws IOException { if ( str == null ) writeInt ( NUM00 ) ; else { if ( useCompression && length >= Compressor . MIN_SIZE_FOR_DEFLATION ) { if ( byteBuffer . length < length ) byteBuffer = new byte [ NUM00 * length ] ; int numberOfBytes = compressor . deflateString2ByteArray ( str , offset , length , byteBuffer ) ; writeInt ( numberOfBytes ) ; io . write ( byteBuffer , NUM00 , Math . abs ( numberOfBytes ) ) ; } else { writeInt ( length ) ; io . write ( str , offset , length ) ; } } }
public void testGenerateDomainLimit $F72 throws Exception { $F109649 list = new $F109649 $F72 ; $F109657 ( list , createURLCrawlDatum ) $F109657 ( list , createURLCrawlDatum ) $F109657 ( list , createURLCrawlDatum ) createCrawlDB ( list ) ; Configuration myConfiguration = new Configuration ( conf ) ; myConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; myConfiguration . set ( Generator . GENERATOR_COUNT_MODE , Generator . GENERATOR_COUNT_VALUE_DOMAIN ) ; Path generatedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; Path fetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; $F109649 fetchList = readContents ( fetchlistPath ) ; $F70108 ( assertEquals , fetchList ) myConfiguration = new Configuration ( myConfiguration ) ; myConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; generatedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; fetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; fetchList = readContents ( fetchlistPath ) ; $F70108 ( assertEquals , fetchList ) myConfiguration = new Configuration ( myConfiguration ) ; myConfiguration . setInt ( Generator . GENERATOR_MAX_COUNT , NUM00 ) ; generatedSegment = generateFetchlist ( Integer . MAX_VALUE , myConfiguration , _BOOL ) ; fetchlistPath = new Path ( new Path ( generatedSegment , CrawlDatum . GENERATE_DIR_NAME ) , NUM00 ) ; fetchList = readContents ( fetchlistPath ) ; $F70108 ( assertEquals , fetchList ) }
protected void writeColumnNotNullableStmt ( StringBuilder ddl ) $F86 ( ddl )
private static OutputStream wrapOutputStream ( final OutputStream stream ) { $F27462 ( os , System ) if $F3106 ( os ) { try { return new WindowsAnsiOutputStream ( stream ) ; } catch ( Throwable ignore ) $F845 return new AnsiOutputStream ( stream ) ; } return stream ; }
$F1 public Set $F80423 unmarshal ( LocationsType locationsType ) { Set $F80423 locations = new LinkedHashSet $F80423 $F72 ; locations . addAll ( locationsType . getRpsBlastLocations ( ) ) ; locations . addAll ( locationsType . getHmmer2Locations ( ) ) ; locations . addAll ( locationsType . getHmmer3Locations ( ) ) ; locations . addAll ( locationsType . getSuperFamilyHmmer3Locations ( ) ) ; locations . addAll ( locationsType . getFingerPrintsLocations ( ) ) ; locations . addAll ( locationsType . getBlastProDomLocations ( ) ) ; locations . addAll ( locationsType . getPatternScanLocations ( ) ) ; locations . addAll ( locationsType . getProfileScanLocations ( ) ) ; locations . addAll ( locationsType . getPhobiusLocations ( ) ) ; locations . addAll ( locationsType . getCoilsLocations ( ) ) ; locations . addAll ( locationsType . getPantherLocations ( ) ) ; locations . addAll ( locationsType . getSignalPLocations ( ) ) ; locations . addAll ( locationsType . getTMHMMLocations ( ) ) ; return locations ; }
public int writeKey ( OutputStream out ) throws IOException { out . write ( blockBuffer , keyOffset , klen ) ; return klen ; }
boolean descendsFrom ( ClassFile cf ) { $F17718 ( descendsFrom , cf ) }
protected Object writePreProcess ( Object o ) throws Exception { return o ; }
public $F987 listOptions $F72 { $F994 ( newVector ) $F1006 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
public ExpressionParserBuilder withDynamics ( Resolver resolver ) $F18637 ( dynamicsResolvers , resolver , this )
void warnMissingNames ( File file ) { String result = checkMissingNames ( file ) ; if $F3057 ( result ) { JOptionPane . showMessageDialog ( _who , NUM00 ) ; } else { JOptionPane . showMessageDialog ( _who , result ) ; } }
public void add ( int position , WishlistItem wishlistItem ) { notifyItemInserted ( position ) ; wishlistItems . add ( position , wishlistItem ) ; }
protected void printBand ( $F96 bgrData , int x , int y , int width , int height ) throws PrinterException { mPSStream . println ( IMAGE_SAVE ) ; int psBytesPerRow = NUM00 * width ; while ( psBytesPerRow > MAX_PSSTR ) { psBytesPerRow /= NUM00 ; } mPSStream . println ( psBytesPerRow + IMAGE_STR ) ; mPSStream . println ( NUM00 + width + NUM00 + NUM00 + height + NUM00 + x + NUM00 + y + NUM00 ) ; mPSStream . println ( width + NUM00 + height + NUM00 + NUM00 + NUM00 + width + NUM00 + NUM00 + - height + NUM00 + height + NUM00 + NUM00 ) ; int index = NUM00 ; $F171903 ( rgbData , width ) try { for ( $F119 ( i , height ) ) { index = swapBGRtoRGB ( bgrData , index , rgbData ) ; $F12490 ( encodedData , rlEncode , rgbData ) $F12490 ( asciiData , ascii85Encode , encodedData ) mPSStream . write ( asciiData ) ; $F8438 ( mPSStream ) } } catch ( IOException e ) { throw new PrinterIOException ( e ) ; } mPSStream . println ( IMAGE_RESTORE ) ; }
private void initPanel ( final ITreeNode $F97882 rootTag ) { $F40881 ( mainPanel ) $F40871 ( mainPanel ) createTree ( rootTag ) ; final JScrollPane pane = new JScrollPane ( m_tagTree ) ; pane . setVerticalScrollBarPolicy ( ScrollPaneConstants . VERTICAL_SCROLLBAR_AS_NEEDED ) ; pane . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_AS_NEEDED ) ; $F40873 ( anyTagPanel ) anyTagPanel . add ( m_anyTagBox ) ; $F30063 ( mainPanel , pane , BorderLayout ) $F30069 ( mainPanel , m_anyTagBox , BorderLayout ) add ( mainPanel , BorderLayout . CENTER ) ; }
public final void append ( String value ) { $F8249 ( value ) $F1749 ( strlen , value ) $F163790 ( strlen ) int copyfrom = NUM00 ; $F16051 ( chunk , m_array , m_lastChunk ) int available = m_chunkSize - m_firstFree ; while ( strlen > NUM00 ) { $F46170 ( available , strlen ) value . getChars ( copyfrom , copyfrom + available , m_array [ m_lastChunk ] , m_firstFree ) ; strlen -= available ; copyfrom += available ; $F163794 ( strlen , i , m_array , m_lastChunk , newarray , System , chunk , m_rebundleBits , m_chunkBits , m_maxChunkBits , m_innerFSB , this , m_chunkSize , available , m_firstFree ) } m_firstFree += available ; }
protected void addPrefixMatch ( StringBuilder sb , String surface , String analyzed , String prefixToken ) { if ( $F231224 ( prefixToken , surface ) ) $F55644 ( addWholeMatch , sb , surface , analyzed ) $F84 ( sb ) sb . append ( surface . substring ( $F34024 ( prefixToken ) ) ) ; $F84 ( sb ) sb . append ( $F8182 ( surface , prefixToken ) ) ; }
public WalletData addWallet ( final BitcoinController bitcoinController , Wallet wallet , String walletFilename ) { $F1338 ( walletFilename ) for ( WalletData loopModelData : perWalletModelDataList ) { if ( walletFilename . equals ( loopModelData . getWalletFilename ( ) ) ) { return loopModelData ; } } WalletData newPerWalletModelData = new WalletData $F72 ; newPerWalletModelData . setWallet ( wallet ) ; newPerWalletModelData . setWalletFilename ( walletFilename ) ; newPerWalletModelData . setWalletTableDataList ( new ArrayList < WalletTableData > $F72 ) ; if ( thereIsNoActiveWallet ( ) ) { perWalletModelDataList . remove ( activeWalletModelData ) ; activeWalletModelData = newPerWalletModelData ; } perWalletModelDataList . add ( newPerWalletModelData ) ; if ( wallet != null ) { wallet . addEventListener ( bitcoinController ) ; } createWalletTableData ( bitcoinController , walletFilename ) ; createAddressBookReceivingAddresses ( walletFilename ) ; return newPerWalletModelData ; }
public E push ( E object ) { addElement ( object ) ; return object ; }
public void add ( T object ) { synchronized ( mLock ) { if ( mOriginalValues != null ) $F207 ( mOriginalValues , object ) else $F207 ( mObjects , object ) } $F32367 ( mNotifyOnChange , notifyDataSetChanged ) }
public static String toHumanSize ( long bytesValue ) { if ( NUM00 == bytesValue ) $F2455 boolean powerOfTwo = _BOOL ; if ( $F37373 ( bytesValue ) == NUM00 ) { powerOfTwo = _BOOL ; } long multiple = ( long ) ( bytesValue / NUM00 ) ; if ( $F37373 ( multiple ) == NUM00 ) { powerOfTwo = _BOOL ; } Unit unit = Unit . B ; if ( powerOfTwo ) { if ( bytesValue >= Unit . EiB . value ) { unit = Unit . EiB ; } else if ( bytesValue >= Unit . PiB . value ) { unit = Unit . PiB ; } else if ( bytesValue >= Unit . TiB . value ) { unit = Unit . TiB ; } else if ( bytesValue >= Unit . GiB . value ) { unit = Unit . GiB ; } else if ( bytesValue >= Unit . MiB . value ) { unit = Unit . MiB ; } else if ( bytesValue >= Unit . KiB . value ) { unit = Unit . KiB ; } } else { if ( bytesValue >= Unit . EB . value ) { unit = Unit . EB ; } else if ( bytesValue >= Unit . PB . value ) { unit = Unit . PB ; } else if ( bytesValue >= Unit . TB . value ) { unit = Unit . TB ; } else if ( bytesValue >= Unit . GB . value ) { unit = Unit . GB ; } else if ( bytesValue >= Unit . MB . value ) { unit = Unit . MB ; } else if ( bytesValue >= Unit . KB . value ) { unit = Unit . KB ; } } double val = ( bytesValue / unit . getValue ( ) ) ; double roundedValue = $F37424 ( Math , val ) ; $F2544 ( myDecimal , BigDecimal , roundedValue ) BigDecimal updated = myDecimal . stripTrailingZeros ( ) ; return updated . toPlainString ( ) + unit . name ( ) ; }
public boolean equals ( Object another ) { if ( another instanceof Permission ) { Permission p = ( Permission ) another ; return permission . equals ( p . toString ( ) ) ; } else { return _BOOL ; } }
public static Intent buildStartInTerminalIntent ( File script ) { final ComponentName componentName = Constants . SL4A_SERVICE_LAUNCHER_COMPONENT_NAME ; Intent $F192736 ( intent ) ; intent . setComponent ( componentName ) ; intent . setAction ( Constants . ACTION_LAUNCH_FOREGROUND_SCRIPT ) ; intent . putExtra ( Constants . EXTRA_SCRIPT_PATH , script . getAbsolutePath ( ) ) ; return intent ; }
public Document loadDocument ( Resource file ) throws $F55616 { DOMParser parser = new DOMParser $F72 ; InputStream in = null ; try { $F7981 ( in , file ) $F77995 ( source , in ) parser . parse ( source ) ; } finally { IOUtil . closeEL ( in ) ; } return parser . getDocument ( ) ; }
public void resetFilters ( Boolean enabled ) { $F35579 ( logger , Level , enabled ) $F304893 ( keys , filters ) for ( $F2774 ( it , keys ) ) { $F2778 ( title , it ) setFilterValue ( title , enabled ) ; } updateInterface ( ) ; }
private $F806 diff_halfMatchI $F68141 ( longtext , shorttext , i ) { String seed = longtext . substring ( i , i + $F8196 ( longtext ) ) ; int j = - NUM00 ; String best_common = NUM00 ; String best_longtext_a = NUM00 , best_longtext_b = NUM00 ; String best_shorttext_a = NUM00 , best_shorttext_b = NUM00 ; while $F96196 ( j , shorttext , seed ) { int prefixLength = diff_commonPrefix ( longtext . substring ( i ) , shorttext . substring ( j ) ) ; int suffixLength = diff_commonSuffix ( longtext . substring ( NUM00 , i ) , shorttext . substring ( NUM00 , j ) ) ; if $F143803 ( best_common , suffixLength , prefixLength ) { best_common = shorttext . substring ( j - suffixLength , j ) + shorttext . substring ( j , j + prefixLength ) ; $F550209 ( best_longtext_a , longtext , i , suffixLength ) best_longtext_b = longtext . substring ( i + prefixLength ) ; $F550209 ( best_shorttext_a , shorttext , j , suffixLength ) best_shorttext_b = shorttext . substring ( j + prefixLength ) ; } } if ( $F9483 ( best_common ) >= longtext . length ( ) ) { return new String [ ] { best_longtext_a , best_longtext_b , best_shorttext_a , best_shorttext_b , best_common } ; } else $F1337 }
$F1 public boolean generateEventID $F72 { return _BOOL ; }
private void updateUtility $F72 { for ( Individual individual : population ) { double oldFitness = individual . getFitness ( ) ; double newFitness = fitness ( individual . getSolution ( ) , idealPoint ) ; double relativeDecrease = oldFitness - newFitness ; if ( relativeDecrease > NUM00 ) { individual . setUtility ( NUM00 ) ; } else { double utility = Math . min ( NUM00 , NUM00 * ( NUM00 + delta / NUM00 ) * individual . getUtility ( ) ) ; individual . setUtility ( utility ) ; } individual . setFitness ( newFitness ) ; } }
private void writeKeysWithPrefix ( String prefix ) { for ( String key : keys ) { if $F7311 ( key , prefix ) { ps . println ( key + NUM00 + prop . getProperty ( key ) ) ; } } $F21416 ( ps ) }
public List < Operation > sendAndWait ( List < Operation > ops ) $F8587 ( sendAndWait , ops , _BOOL )
public static void copy $F251959 ( in , out ) throws IOException { $F18062 ( Assert , in ) $F18062 ( Assert , out ) try $F4050 ( out , in ) $F211028 ( out ) }
public Action mapToXACMLAction ( String nativeActionName , String serviceName ) throws XACMLException $F1337
private int nextInt ( StringTokenizer tok , String errorMsg ) throws SAXException { if $F49874 ( tok ) { $F6287 ( errorMsg ) } try { return Integer . parseInt ( tok . nextToken ( ) ) ; } catch ( NumberFormatException nfe ) { $F6287 ( errorMsg ) } }
public Calculable ( String id , double value ) { setId ( id ) ; setValue ( value ) ; $F153821 ( setWhen , System ) }
public static boolean bookmarkNodeExists ( Context context , long nodeId ) { Boolean result = chromeBrowserProviderCall ( $F61970 , ChromeBrowserProvider . CLIENT_API_BOOKMARK_NODE_EXISTS , context , argsToBundle ( nodeId ) ) ; return result != null ? result . booleanValue ( ) : _BOOL ; }
private void executeTasksSimultaneouslyWithBarrier ( Runnable ... tasks ) throws InterruptedException { CountDownLatch latch = new CountDownLatch ( tasks . length ) ; for ( Runnable task : tasks ) $F62337 ( executor ) $F681 ( latch ) }
private boolean isOperator ( char tok ) { if $F85013 ( OPERATORS , tok ) { return _BOOL ; } return _BOOL ; }
protected String formatIterable ( JCDiagnostic d , $F247465 it , Locale l ) { $F83 ( sbuf ) String sep = NUM00 ; for ( Object o : it ) { sbuf . append ( sep ) ; sbuf . append ( formatArgument ( d , o , l ) ) ; sep = NUM00 ; } $F92 ( sbuf ) }
public void endRepresentation $F72 { if ( ! representationProtectionsSet ) { if ( currentRepresentationProtections != null ) $F57005 ( Collections , currentRepresentationProtections , this ) representationProtections = currentRepresentationProtections ; representationProtectionsSet = _BOOL ; } else { if ( currentRepresentationProtections == null ) { Assertions . checkState ( representationProtections == null ) ; } else { Collections . sort ( currentRepresentationProtections , this ) ; Assertions . checkState ( currentRepresentationProtections . equals ( representationProtections ) ) ; } } currentRepresentationProtections = null ; }
$F52843 ( packed , map , i , j , count , value )
public static ModuleVersion valueOf ( String string ) $F4915 ( parseVersion , string )
static void checkTypeRefAndPath ( int typeRef , TypePath typePath ) { int mask = NUM00 ; switch $F14870 ( typeRef ) { case TypeReference . CLASS_TYPE_PARAMETER : case TypeReference . METHOD_TYPE_PARAMETER : case TypeReference . METHOD_FORMAL_PARAMETER : mask = NUM00 ; $F597 case TypeReference . FIELD : case TypeReference . METHOD_RETURN : case TypeReference . METHOD_RECEIVER : case TypeReference . LOCAL_VARIABLE : case TypeReference . RESOURCE_VARIABLE : case TypeReference . INSTANCEOF : case TypeReference . NEW : case TypeReference . CONSTRUCTOR_REFERENCE : case TypeReference . METHOD_REFERENCE : mask = NUM00 ; $F597 case TypeReference . CLASS_EXTENDS : case TypeReference . CLASS_TYPE_PARAMETER_BOUND : case TypeReference . METHOD_TYPE_PARAMETER_BOUND : case TypeReference . THROWS : case TypeReference . EXCEPTION_PARAMETER : mask = NUM00 ; $F597 case TypeReference . CAST : case TypeReference . CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT : case TypeReference . METHOD_INVOCATION_TYPE_ARGUMENT : case TypeReference . CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT : case TypeReference . METHOD_REFERENCE_TYPE_ARGUMENT : mask = NUM00 ; $F597 $F1267 throw new IllegalArgumentException ( NUM00 + Integer . toHexString ( typeRef > > > NUM00 ) ) ; } if ( ( typeRef & ~ mask ) != NUM00 ) { throw new IllegalArgumentException $F184522 ( Integer , typeRef ) ; } if ( typePath != null ) { for ( $F184528 ( i , typePath ) ) { int step = typePath . getStep ( i ) ; if ( step != TypePath . ARRAY_ELEMENT && step != TypePath . INNER_TYPE && step != TypePath . TYPE_ARGUMENT && step != TypePath . WILDCARD_BOUND ) $F20855 ( i , typePath ) if ( step != TypePath . TYPE_ARGUMENT && typePath . getStepArgument ( i ) != NUM00 ) $F20855 ( i , typePath ) } } }
$F1 public boolean equals ( Object otherObj ) { if ( otherObj instanceof P2Model ) { return content . equals ( ( ( P2Model ) otherObj ) . content ) ; } else { return _BOOL ; } }
public boolean showIcons $F72 { return preferences . getBoolean ( resources . getString ( R . string . key_show_icons ) , Boolean . parseBoolean ( resources . getString ( R . string . default_show_icons ) ) ) ; }
$F173551 ( sourceList , value , _BOOL )
private boolean checkForKey $F72 throws Exception { String query = m_query ; $F2899 ( query ) if $F14943 ( query ) { return _BOOL ; } $F725 ( m_orderBy ) if ( $F192001 ( m_DataBaseConnection ) ) { m_DataBaseConnection . connectToDatabase ( ) ; } $F9236 ( dmd , m_DataBaseConnection ) String table = endOfQuery ( _BOOL ) ; ResultSet rs = dmd . getPrimaryKeys ( null , null , table ) ; while $F1682 ( rs ) { m_orderBy . add ( rs . getString ( NUM00 ) ) ; } $F59 ( rs ) if $F6887 ( m_orderBy ) { return _BOOL ; } rs = dmd . getBestRowIdentifier ( null , null , table , DatabaseMetaData . bestRowSession , _BOOL ) ; $F19097 ( rmd , rs ) int help = NUM00 ; while $F1682 ( rs ) { m_orderBy . add ( rs . getString ( NUM00 ) ) ; help ++ ; } $F59 ( rs ) if ( help == rmd . getColumnCount ( ) ) $F9096 ( m_orderBy ) if $F6887 ( m_orderBy ) { return _BOOL ; } return _BOOL ; }
public IgniteStripedThreadPoolExecutor $F103468 ( concurrentLvl , gridName , threadNamePrefix ) { execs = new ExecutorService [ concurrentLvl ] ; ThreadFactory factory = new IgniteThreadFactory ( gridName , threadNamePrefix ) ; for ( $F119 ( i , concurrentLvl ) ) execs [ i ] = Executors . newSingleThreadExecutor ( factory ) ; }
public static boolean isZip ( BufferedInputStream in ) { $F46282 ( in ) $F12496 ( b ) $F12496 ( zipSig ) zipSig [ NUM00 ] = NUM00 ; zipSig [ NUM00 ] = NUM00 ; zipSig [ NUM00 ] = NUM00 ; zipSig [ NUM00 ] = NUM00 ; try { $F3259 ( in , b ) ; } $F270358 ( ex ) try $F8030 ( in ) $F270358 ( ex ) return Arrays . equals ( b , zipSig ) ; }
public $F3803 extract ( Configuration config ) { $F10144 ( features ) for ( Extractor fe : extractors ) { features . add ( fe . extract ( config ) ) ; } return features ; }
public String toString $F72 { $F280 ( path ) $F19006 ( absolute , path ) for ( $F2277 ( i , elements ) ) { $F96530 ( i , path ) $F89 ( path , elements , i ) } $F92 ( path ) }
public void handleTblDataActionHrefRequest ( RequestInvocationEvent event ) { AgentsModel model = ( AgentsModel ) getModel ( ) ; String agentType = getDisplayIDType ( ) ; String universalId = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_HREF ) ) ; setPageSessionAttribute ( AgentProfileViewBean . UNIVERSAL_ID , universalId ) ; SSOToken ssoToken = model . getUserSSOToken ( ) ; String realm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; $F17727 ( st , universalId ) $F89223 ( st ) $F8095 ( agentName , st ) try { AMIdentity amid = new AMIdentity ( ssoToken , agentName , IdType . AGENTONLY , realm , null ) ; if ( agentType . equals ( AgentsViewBean . AGENT_WEB ) || ( agentType . equals ( AgentsViewBean . DEFAULT_ID_TYPE ) ) ) { if ( isPropertiesLocallyStored ( amid ) ) { setPageSessionAttribute ( LOCAL_OR_NOT , PROP_LOCAL ) ; } else { setPageSessionAttribute ( LOCAL_OR_NOT , PROP_CENTRAL ) ; } } Class clazz = getAgentCustomizedViewBean ( model . getAgentType ( amid ) ) ; AMViewBeanBase vb = ( AMViewBeanBase ) getViewBean ( clazz ) ; setPageSessionAttribute ( PG_SESSION_SUPERCEDE_AGENT_TYPE , model . getAgentType ( amid ) ) ; removePageSessionAttribute ( GenericAgentProfileViewBean . PS_TABNAME ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) } catch ( IdRepoException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; forwardTo ( ) ; } catch ( SSOException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; forwardTo ( ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; forwardTo ( ) ; } catch ( ClassNotFoundException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , NUM00 , model . getErrorString ( e ) ) ; forwardTo ( ) ; } }
$F1 protected boolean check ( File item ) $F2949 ( item )
public PropertyValueEditor ( ConsoleApplication app , ManagementContext context ) $F20755 ( this , app , context )
$F1 public void toData ( DataOutput out ) throws IOException { out . writeInt ( maxInactiveInterval ) ; out . writeLong ( lastAccessedTime ) ; synchronized ( attributes ) { $F27636 ( out , attributes ) for ( $F150315 ( entry , attributes ) ) { DeltaEvent delta = new DeltaEvent ( _BOOL , entry . getKey ( ) , entry . getValue ( ) ) ; DataSerializer . writeObject ( delta , out ) ; } } out . writeUTF ( jvmOwnerId ) ; }
public void createVictoryConditions $F72 { victory = vf . createVictory ( NUM00 ) ; }
public static IStatus validateQualifiedModuleName ( String qualifiedName ) { String pckg = Signature . getQualifier ( qualifiedName ) ; if ( ! Util . isValidPackageName ( pckg ) ) { return Util . newErrorStatus ( NUM00 ) ; } return validateSimpleModuleName ( Signature . getSimpleName ( qualifiedName ) ) ; }
public static < T1 , T2 > Map < T1 , T2 > synchronizedMap $F72 { return Collections . synchronizedMap ( new HashMap < T1 , T2 > $F72 ) ; }
private final int filterStatusBytes ( $F96 src , $F96 dest , int totalBytesRead , int maxPacketSize ) { final int packetsCount = totalBytesRead / maxPacketSize + ( totalBytesRead % maxPacketSize == NUM00 ? NUM00 : NUM00 ) ; for ( $F1316 ( packetIdx , packetsCount ) ) { final int count = $F126005 ( packetIdx , packetsCount ) ? ( totalBytesRead % maxPacketSize ) - MODEM_STATUS_HEADER_LENGTH : maxPacketSize - MODEM_STATUS_HEADER_LENGTH ; if ( count > NUM00 ) { System . arraycopy ( src , packetIdx * maxPacketSize + MODEM_STATUS_HEADER_LENGTH , dest , packetIdx * ( maxPacketSize - MODEM_STATUS_HEADER_LENGTH ) , count ) ; } } return totalBytesRead - ( packetsCount * NUM00 ) ; }
public boolean contains ( String key ) $F298 ( mSharedPreferences , key )
int registerMiss $F72 $F208283 ( misses )
$F30789 ( d , imageView , getImageView , viewWidth , viewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
public static CharSequence partialEscape ( CharSequence s ) { $F83 ( sb ) for ( $F1088 ( i , s ) ) { $F1280 ( c , s , i ) if ( c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 || c == NUM00 ) $F86 ( sb ) sb . append ( c ) ; } return sb ; }
public void finished ( long work , long latency ) { finishedUpdater . getAndIncrement ( this ) ; totalWorkUpdater . getAndAdd ( this , work ) ; totalWorkSquaredUpdater . getAndAdd ( this , work * work ) ; totalLatencyUpdater . getAndAdd ( this , latency ) ; totalLatencySquaredUpdater . getAndAdd ( this , latency * latency ) ; }
public void close $F72 throws IOException { if ( mInputStream != null ) $F881 ( mInputStream ) else $F14525 mInputStream = null ; }
private WindowsSecurityDescriptor $F72 { this . sidList = null ; this . aclBuffer = null ; this . sdBuffer = null ; }
public void printUsage ( OutputStream os ) { int count = NUM00 ; PrintStream out = UTF8 . printStream ( os ) ; for ( String option : optionList ) { if $F1710 ( optionGroups , count ) { out . println ( NUM00 + optionGroups . get ( count ) ) ; } count ++ ; $F36399 ( unlistedOptions , option ) $F21384 ( out ) $F83 ( buf ) buf . append ( option ) ; if $F26935 ( optionExtraPartSynopsisMap , option ) { $F1729 ( optionExtraPartSynopsis , optionExtraPartSynopsisMap , option ) $F84 ( buf ) buf . append ( optionExtraPartSynopsis ) ; $F84 ( buf ) } if $F105 ( requiresArgumentSet , option ) { $F84 ( buf ) $F89 ( buf , argumentDescriptionMap , option ) $F84 ( buf ) } printField ( out , buf . toString ( ) , maxWidth + NUM00 ) ; out . println ( optionDescriptionMap . get ( option ) ) ; } $F1206 ( out ) }
public void clearSharedVariables $F72 $F13478 ( sharedVariables , loadBuiltInSharedVariables )
public void remove ( Video video ) $F15777 ( videoList , video , notifyDataSetChanged )
public final void sendPacket ( LsServerPacket bp ) { synchronized ( guard ) { $F84963 ( isWriteDisabled ) $F586 ( log , bp ) sendMsgQueue . addLast ( bp ) ; enableWriteInterest ( ) ; } }
private static $F529 processSection ( String section , Collection < $F529 > hosts , $F2100 ( dflts ) , $F2100 ( props ) ) throws IgniteCheckedException { if ( section == null || props == null ) $F1274 if $F8397 ( DFLT_SECTION , section ) { if ( dflts != null ) throw new IgniteCheckedException ( NUM00 + DFLT_SECTION + NUM00 ) ; return props ; } else { hosts . add ( props ) ; $F1274 } }
public boolean isSet ( final OPTION option ) { return options == null ? _BOOL : options . contains ( option ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { List optionData = restoreOptionsData ( ) ; CCCheckBox cbForceResetPwd = ( CCCheckBox ) getChild ( CB_FORCE_RESET_PWD ) ; boolean forceResetPwd = cbForceResetPwd . isChecked ( ) ; UMUserPasswordResetOptionsModel model = ( UMUserPasswordResetOptionsModel ) getModel ( ) ; String userId = ( String ) getPageSessionAttribute ( EntityEditViewBean . UNIVERSAL_ID ) ; try { model . modifyUserOption ( optionData , userId , forceResetPwd ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , NUM00 , model . getLocalizedString ( NUM00 ) ) ; } $F50339 ( setInlineAlertMessage , CCAlert , e ) forwardTo ( ) ; }
NumberStrategy ( final int field ) $F6988 ( this , field )
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9010 ( newVector , Collections , super ) $F1007 ( newVector ) }
$F1 public boolean queueRequest ( Operation op ) { AuthorizationContext ctx = op . getAuthorizationContext ( ) ; if ( ctx == null ) { op . fail ( new IllegalArgumentException $F580 ) ; return _BOOL ; } Claims claims = ctx . getClaims ( ) ; if ( claims == null ) { op . fail ( new IllegalArgumentException $F580 ) ; return _BOOL ; } String subject = claims . getSubject ( ) ; if ( subject == null ) { op . fail ( new IllegalArgumentException $F580 ) ; return _BOOL ; } if ( op . hasPragmaDirective ( Operation . PRAGMA_DIRECTIVE_CLEAR_AUTH_CACHE ) ) $F8587 ( handleCacheClearRequest , op , subject ) if ( subject . equals ( SystemUserService . SELF_LINK ) ) { $F168274 ( op ) return _BOOL ; } if ( ctx . getResourceQueryFilter ( op . getAction ( ) ) != null ) { $F168274 ( op ) return _BOOL ; } return _BOOL ; }
public SpannableStringBuilder ( CharSequence text ) $F109834 ( this , text )
public boolean hasExtraFields ( PdxType other ) { for ( PdxField ft : this . fields ) { if ( ! ft . isDeleted ( ) && other . getPdxField ( ft . getFieldName ( ) ) == null ) { return _BOOL ; } } return _BOOL ; }
public void put ( String id , String str ) { tab . put ( id , str ) ; if $F8991 ( str ) { int i = $F23703 ( str , File ) ; if ( i >= NUM00 ) { tab . put ( str . substring ( i + NUM00 , $F1092 ( str ) ) , str ) ; } } }
private void assertReadVarint $F31474 ( data , value ) throws Exception { $F2237 ( input , CodedInputStream , data ) assertEquals ( ( int ) value , input . readRawVarint32 ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( data ) ; assertEquals ( value , input . readRawVarint64 ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( data ) ; assertEquals ( value , input . readRawVarint64SlowPath ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( data ) ; assertTrue ( input . skipField ( WireFormat . WIRETYPE_VARINT ) ) ; assertDataConsumed ( data , input ) ; for ( $F31477 ( blockSize ) ) { input = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; assertEquals ( ( int ) value , input . readRawVarint32 ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; assertEquals ( value , input . readRawVarint64 ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; assertEquals ( value , input . readRawVarint64SlowPath ( ) ) ; assertDataConsumed ( data , input ) ; input = CodedInputStream . newInstance ( new SmallBlockInputStream ( data , blockSize ) ) ; assertTrue ( input . skipField ( WireFormat . WIRETYPE_VARINT ) ) ; assertDataConsumed ( data , input ) ; } $F64222 ( longerData , data ) $F7057 ( System , data , longerData ) InputStream rawInput = new ByteArrayInputStream ( longerData ) ; assertEquals ( ( int ) value , CodedInputStream . readRawVarint32 ( rawInput ) ) ; assertEquals ( NUM00 , rawInput . available ( ) ) ; }
public void reportOccurences ( List < Map < Id < Vehicle > , Integer > > maps ) { for ( $F2277 ( m , maps ) ) { Map < Id < Vehicle > , Integer > theMap = maps . get ( m ) ; log . info ( $F37978 ( m ) + theMap . size ( ) + NUM00 ) ; Integer min = Integer . MAX_VALUE ; Integer max = Integer . MIN_VALUE ; for ( Id < Vehicle > id : theMap . keySet ( ) ) { min = Math . min ( min , theMap . get ( id ) ) ; max = Math . max ( max , theMap . get ( id ) ) ; } $F21448 ( log , min , max ) List < $F147537 > $F204 ( histList ) ; Map < $F147537 , Integer > histMap = new HashMap < $F147537 , Integer > $F72 ; for ( long h = min ; h <= max ; h ++ ) { $F147537 id = Id . create ( h , Link . class ) ; histList . add ( id ) ; histMap . put ( id , $F13791 ) ; } for ( Id < Vehicle > id : theMap . keySet ( ) ) { $F85651 ( value , theMap , id ) histMap . put ( Id . create ( value , Link . class ) , new Integer ( histMap . get ( Id . create ( value , Link . class ) ) + NUM00 ) ) ; } String s = NUM00 ; for ( $F147537 id : histList ) { s += $F5528 ( id ) + histMap . get ( id ) + NUM00 ; } $F973 ( log ) $F556 ( log , s ) } }
public static $F28584 refIds ( Collection < ? extends RelatedResourceRep > refs ) { $F114980 ( ids ) if ( refs != null ) { for ( RelatedResourceRep ref : refs ) $F42097 ( ids , ref ) } return ids ; }
public static boolean hasTopCategory ( HttpServletRequest request , String categoryId , $F3803 pathElements ) { if ( CategoryWorker . isCategoryTop ( request , categoryId ) ) { return _BOOL ; } String topCategoryId = CategoryWorker . getTopCategoryFromTrail ( request , pathElements ) ; $F20092 ( topCategoryId , _BOOL ) $F3803 trail = CategoryWorker . getTrail ( request ) ; topCategoryId = CategoryWorker . getTopCategoryFromTrail ( request , trail ) ; $F1933 ( topCategoryId , _BOOL ) return _BOOL ; }
$F1 public String append ( String path , InputStream is ) throws MalformedURLException , IOException , AuthenticationException { String resp = null ; ensureValidToken ( ) ; String redirectUrl = null ; HttpURLConnection conn = authenticatedURL . openConnection ( new URL ( new URL ( httpfsUrl ) , MessageFormat . format ( NUM00 , path ) ) , token ) ; $F2407 ( conn ) conn . setInstanceFollowRedirects ( _BOOL ) ; $F2410 ( conn ) logger . info ( NUM00 + conn . getHeaderField ( NUM00 ) ) ; resp = result ( conn , _BOOL ) ; if ( conn . getResponseCode ( ) == NUM00 ) redirectUrl = conn . getHeaderField ( NUM00 ) ; $F8074 ( conn ) if ( redirectUrl != null ) { conn = authenticatedURL . openConnection ( new URL ( redirectUrl ) , token ) ; $F2407 ( conn ) conn . setDoOutput ( _BOOL ) ; conn . setDoInput ( _BOOL ) ; conn . setUseCaches ( _BOOL ) ; $F7965 ( conn ) final int _SIZE = is . available ( ) ; conn . setRequestProperty ( NUM00 , NUM00 + _SIZE ) ; conn . setFixedLengthStreamingMode ( _SIZE ) ; $F2410 ( conn ) $F147972 ( os , conn ) copy ( is , os ) ; $F59 ( is ) $F59 ( os ) resp = result ( conn , _BOOL ) ; $F8074 ( conn ) } return resp ; }
public static void cacheImgs ( String skinImgDir , $F46406 baseImageURLs ) { String skinDir = getSkinDir ( ) ; for ( String img : baseImageURLs ) { img = img . replace ( NUM00 , skinDir + NUM00 ) ; img = img . replace ( NUM00 , skinDir + skinImgDir ) ; Image . prefetch ( img ) ; } }
$F42603 ( path , WINDOWS_SEPARATOR , UNIX_SEPARATOR )
public void clearBuffer $F72 $F9096 ( buffer )
$F1 public final void perform ( IR ir ) { java . util . HashMap < Register , Register > newMap = new java . util . HashMap < Register , Register > $F989 ; for ( $F32409 be = ir . getBasicBlocks ( ) ; be . hasMoreElements ( ) ; ) { $F32413 ( bb , be ) for ( $F12039 ie = bb . forwardInstrEnumerator ( ) ; ie . hasMoreElements ( ) ; ) { $F12043 ( s , ie ) ; $F725 ( newMap ) if ( s . isPEI ( ) && s . operator ( ) != IR_PROLOGUE ) { if ( bb . hasApplicableExceptionalOut ( s ) || ! RegisterRestrictions . SCRATCH_IN_PEI ) { splitAllLiveRanges ( s , newMap , ir , _BOOL ) ; } } switch ( s . getOpcode ( ) ) { case MIR_LOWTABLESWITCH_opcode : { RegisterOperand rOp = MIR_LowTableSwitch . getIndex ( s ) ; RegisterOperand temp = findOrCreateTemp ( rOp , newMap , ir ) ; insertMoveBefore ( temp , rOp . copyRO ( ) , s ) ; rOp . setRegister ( temp . getRegister ( ) ) ; } $F597 } } } }
protected void appendString ( final String text ) { final HTMLDocument doc = ( HTMLDocument ) textPane . getDocument ( ) ; try { final Element root = doc . getParagraphElement ( NUM00 ) ; doc . insertBeforeEnd ( root , text ) ; } catch ( final BadLocationException e ) $F98543 ( logger , e ) catch ( final IOException e ) $F98543 ( logger , e ) }
public void scaleToSamples ( int usrSamples ) { double ratio ; ratio = ( double ) usrSamples / count ; count = NUM00 ; for ( int i = NUM00 ; i <= limits . length ; ++ i ) { results [ i ] = ( int ) Math . round ( results [ i ] * ratio ) ; count += results [ i ] ; } }
private void refreshSelected ( int offsetX ) { int offset = $F66964 ( offsetX , mMaxOverScrollDistance ) ; int tempIndex = Math . round ( offset / mIntervalDis ) ; tempIndex = clampSelectedIndex ( tempIndex ) ; $F19899 ( mSelectedIndex , tempIndex ) mSelectedIndex = tempIndex ; if ( null != onValueChangeListener ) { onValueChangeListener . onChange ( this , mSelectedIndex , Float . parseFloat ( format ( mSelectedIndex * mIntervalValue + mMinValue ) ) ) ; } }
$F1 $F1431 public void resetFrame $F72 { synchronized ( lock ) { sysName . setText ( NUM00 + counter ++ ) ; } userName . setText ( null ) ; url . setText ( null ) ; stream . setSelected ( _BOOL ) ; stream . setEnabled ( _BOOL ) ; loopStart . setValue ( Long . valueOf ( NUM00 ) ) ; loopEnd . setValue ( Long . valueOf ( NUM00 ) ) ; this . newBuffer = _BOOL ; }
public ExpectedRecords $F4203 repeatAll ( int times ) { $F98037 ( toAppend ) for ( $F119 ( i , times ) ) $F21926 ( toAppend , expectedRecords ) expectedRecords . addAll ( toAppend ) ; return this ; }
public void addAttributes ( Attributes atts ) throws SAXException { $F19322 ( nAtts , atts ) for ( $F119 ( i , nAtts ) ) { String uri = atts . getURI ( i ) ; if ( null == uri ) uri = NUM00 ; addAttributeAlways ( uri , atts . getLocalName ( i ) , atts . getQName ( i ) , atts . getType ( i ) , atts . getValue ( i ) , _BOOL ) ; } }
protected static GeoPoint parseKmlCoord ( String input ) { $F1384 ( end1 , input ) $F50298 ( end2 , input , end1 ) try { if ( end2 == - NUM00 ) { double lon = Double . parseDouble ( input . substring ( NUM00 , end1 ) ) ; double lat = Double . parseDouble ( $F13885 ( input , end1 ) ) ; return new GeoPoint ( lat , lon ) ; } else { double lon = Double . parseDouble ( input . substring ( NUM00 , end1 ) ) ; double lat = Double . parseDouble ( input . substring ( end1 + NUM00 , end2 ) ) ; double alt = Double . parseDouble ( $F13885 ( input , end2 ) ) ; return new GeoPoint ( lat , lon , alt ) ; } } $F62108 catch ( IndexOutOfBoundsException e ) $F1337 }
$F5466 public Calendar detectDate ( String input ) { checkNotNull ( input ) ; Time . setTimeZone ( getTimeZone ( ) ) ; Options opt = new com . sk89q . jchronic . Options $F72 ; opt . setNow ( Calendar . getInstance ( getTimeZone ( ) ) ) ; Span date = Chronic . parse ( input , opt ) ; if ( date == null ) $F1337 else { return date . getBeginCalendar ( ) ; } }
public synchronized void saveCommitPoint ( Long indexCommitGen ) { $F101373 ( reserveCount , savedCommits , indexCommitGen ) if ( reserveCount == null ) $F72840 ( reserveCount ) ; $F5224 ( reserveCount ) savedCommits . put ( indexCommitGen , reserveCount ) ; }
public void removeSearchable ( SearchResult searchable ) { if $F105 ( searchables , searchable ) searchables . remove ( search ) ; }
public static boolean is64bit $F72 { boolean is64bit = _BOOL ; if ( isWindows ( ) ) { is64bit = ( System . getenv ( NUM00 ) != null ) ; } else { is64bit = $F3578 ( OS_ARCH ) ; } return is64bit ; }
private int resolveSizeAndStateRespectingMinSize $F14337 ( minSize , measuredSize , measureSpec ) { if ( minSize != SIZE_UNSPECIFIED ) { $F211129 ( desiredWidth , Math , minSize , measuredSize ) return resolveSizeAndState ( desiredWidth , measureSpec , NUM00 ) ; } else { return measuredSize ; } }
$F1 public void onSongUpdate ( ProviderIdentifier provider , final Song s ) throws RemoteException { if ( s == null ) { Log . w ( TAG , NUM00 + provider . mName + NUM00 ) ; $F665 } try { Song cached = mCache . getSong ( s . getRef ( ) ) ; boolean wasLoaded = _BOOL ; boolean changed = _BOOL ; if ( cached == null ) { mCache . putSong ( provider , s ) ; changed = _BOOL ; cached = s ; } else { wasLoaded = cached . isLoaded ( ) ; if ( s . isLoaded ( ) && ! cached . isIdentical ( s ) ) { cached . setAlbum ( s . getAlbum ( ) ) ; cached . setArtist ( s . getArtist ( ) ) ; cached . setSourceLogo ( s . getLogo ( ) ) ; cached . setDuration ( s . getDuration ( ) ) ; cached . setTitle ( s . getTitle ( ) ) ; cached . setYear ( s . getYear ( ) ) ; cached . setOfflineStatus ( s . getOfflineStatus ( ) ) ; cached . setAvailable ( s . isAvailable ( ) ) ; cached . setIsLoaded ( s . isLoaded ( ) ) ; changed = _BOOL ; } } if ( ! wasLoaded && cached . isLoaded ( ) ) { Artist artist = mCache . getArtist ( s . getArtist ( ) ) ; if ( artist == null && s . getArtist ( ) != null ) { artist = retrieveArtist ( s . getArtist ( ) , provider ) ; } if ( artist != null ) { Album album = mCache . getAlbum ( s . getAlbum ( ) ) ; if ( album == null && s . getAlbum ( ) != null ) { album = retrieveAlbum ( s . getAlbum ( ) , provider ) ; } if ( album != null ) { artist . addAlbum ( album . getRef ( ) ) ; } } } $F72524 ( changed , postSongForUpdate , cached ) } $F102303 ( Log , TAG , e ) }
public static boolean deleteDirectoryAndContents ( File rootDirectory ) { if ( ( rootDirectory == null ) || $F4925 ( rootDirectory ) ) { return _BOOL ; } try { $F1894 ( directoryContents , rootDirectory ) for ( $F1139 ( i , directoryContents ) ) { boolean success = deleteDirectoryAndContents ( $F170886 ( rootDirectory , directoryContents , i ) ) ; $F42316 ( success , _BOOL ) } $F16252 ( rootDirectory ) } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) return _BOOL ; } }
public static void nanosleep ( long nanos ) throws InterruptedException { $F2758 ( Thread ) $F36109 ( nanos ) if ( nanos >= NUM00 ) { Thread . sleep ( nanos / NUM00 , ( int ) ( nanos % NUM00 ) ) ; } else { if ( pureMode ) { $F5756 ( Thread ) } else { _nanosleep ( ( int ) nanos ) ; } } }
$F6802 ( esd , connectionAllowed )
int pureLength $F72 { return length - delimiter . length ( ) ; }
protected void drawArrow $F159951 ( g , x1 , y1 , x2 , y2 ) { if ( x1 == x2 ) { if ( y1 < y2 ) { g . drawLine ( x2 , y2 , x2 + NUM00 , y2 - NUM00 ) ; g . drawLine ( x2 , y2 , x2 - NUM00 , y2 - NUM00 ) ; } else { g . drawLine ( x2 , y2 , x2 + NUM00 , y2 + NUM00 ) ; g . drawLine ( x2 , y2 , x2 - NUM00 , y2 + NUM00 ) ; } } else { double hyp = NUM00 , base = NUM00 , perp = NUM00 , theta , beta ; int x3 = NUM00 , y3 = NUM00 ; if ( x2 < x1 ) { base = x1 - x2 ; hyp = $F127640 ( Math , x2 , x1 , y2 , y1 ) ; theta = Math . acos ( base / hyp ) ; } else { base = x1 - x2 ; hyp = $F127640 ( Math , x2 , x1 , y2 , y1 ) ; theta = Math . acos ( base / hyp ) ; } beta = NUM00 * Math . PI / NUM00 ; hyp = NUM00 ; base = Math . cos ( theta - beta ) * hyp ; perp = Math . sin ( theta - beta ) * hyp ; x3 = $F66964 ( x2 , base ) ; if ( y1 < y2 ) { $F443511 ( y3 , y2 , perp ) } else { y3 = $F66964 ( y2 , perp ) ; } g . drawLine ( x2 , y2 , x3 , y3 ) ; base = Math . cos ( theta + beta ) * hyp ; perp = Math . sin ( theta + beta ) * hyp ; x3 = $F66964 ( x2 , base ) ; if ( y1 < y2 ) { $F443511 ( y3 , y2 , perp ) } else { y3 = $F66964 ( y2 , perp ) ; } g . drawLine ( x2 , y2 , x3 , y3 ) ; } }
private void addElements ( int value , int numberOfElements ) { if ( m_firstFree + numberOfElements < m_blocksize ) for ( $F119 ( i , numberOfElements ) ) $F52339 ( m_map0 , m_firstFree , value ) else { int index = m_firstFree > > > m_SHIFT ; int offset = m_firstFree & m_MASK ; m_firstFree += numberOfElements ; while ( numberOfElements > NUM00 ) { $F166813 ( index , m_map , newsize , m_numblocks , newMap , System ) $F65714 ( block , m_map , index ) $F166816 ( block , m_map , index , m_blocksize ) int copied = ( m_blocksize - offset < numberOfElements ) ? m_blocksize - offset : numberOfElements ; numberOfElements -= copied ; while ( copied -- > NUM00 ) block [ offset ++ ] = value ; ++ index ; offset = NUM00 ; } } }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
public static StringBuilder formatTo ( StringBuilder buf , $F1986 d , String sep ) { $F50085 ( d , buf ) $F50086 ( d , buf ) $F13031 ( buf , d ) for ( $F1139 ( i , d ) ) { buf . append ( sep ) ; $F6939 ( buf , d , i ) } return buf ; }
$F1431 private static void mergeSort ( $F131 in , $F131 out , int start , int end , Comparator c ) { int len = end - start ; if ( len <= SIMPLE_LENGTH ) { for ( $F2634 ( i , start , end ) ) { Object current = out [ i ] ; Object prev = out [ i - NUM00 ] ; if $F230914 ( c , prev , current ) { int j = i ; do $F230915 ( out , j , prev ) while ( j > start && ( c . compare ( prev = out [ j - NUM00 ] , current ) > NUM00 ) ) ; out [ j ] = current ; } } $F665 } $F41176 ( med , end , start ) mergeSort ( out , in , start , med , c ) ; mergeSort ( out , in , med , end , c ) ; if ( c . compare ( in [ med - NUM00 ] , in [ med ] ) <= NUM00 ) { System . arraycopy ( in , start , out , start , len ) ; $F665 } int r = med , i = start ; do { Object fromVal = in [ start ] ; Object rVal = in [ r ] ; if $F150035 ( c , fromVal , rVal ) { int l_1 = find ( in , rVal , - NUM00 , start + NUM00 , med - NUM00 , c ) ; int toCopy = l_1 - start + NUM00 ; System . arraycopy ( in , start , out , i , toCopy ) ; i += toCopy ; out [ i ++ ] = rVal ; r ++ ; start = l_1 + NUM00 ; } else { int r_1 = find ( in , fromVal , NUM00 , r + NUM00 , end - NUM00 , c ) ; int toCopy = r_1 - r + NUM00 ; System . arraycopy ( in , r , out , i , toCopy ) ; i += toCopy ; out [ i ++ ] = fromVal ; start ++ ; r = r_1 + NUM00 ; } } while ( ( end - r ) > NUM00 && ( med - start ) > NUM00 ) ; if ( ( end - r ) <= NUM00 ) { $F55840 ( System , in , start , out , i , med ) } else { $F55840 ( System , in , r , out , i , end ) } }
private View fillFromLeft ( int nextLeft ) { $F16700 ( mFirstPosition , Math , mSelectedPosition ) $F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) return fillRight ( mFirstPosition , nextLeft ) ; }
public TomcatSlf4jLogbackFactoryAccessor ( ClassLoader cl ) throws ClassNotFoundException , IllegalAccessException , IllegalArgumentException , InvocationTargetException { $F198604 ( clazz , cl ) Method getSingleton = MethodUtils . getAccessibleMethod ( clazz , NUM00 , $F33934 ) ; Object singleton = getSingleton . invoke ( null ) ; Method getLoggerFactory = MethodUtils . getAccessibleMethod ( clazz , NUM00 , $F33934 ) ; Object loggerFactory = getLoggerFactory . invoke ( singleton ) ; $F198604 ( loggerFactoryClass , cl ) if $F78643 ( loggerFactoryClass , loggerFactory ) $F11389 setTarget ( loggerFactory ) ; }
public QuarterDateFormat ( TimeZone zone , $F806 quarterSymbols , boolean quarterFirst ) { $F19400 ( ParamChecks , zone ) this . calendar = new GregorianCalendar ( zone ) ; this . quarters = quarterSymbols ; this . quarterFirst = quarterFirst ; this . numberFormat = NumberFormat . getNumberInstance ( ) ; }
public long restart $F72 { long start = _startTimeNanos ; $F101251 ( _startTimeNanos , System ) return _startTimeNanos - start ; }
private static $F96 stringToByteArray ( String str ) { $F96 result = new byte [ $F1285 ( str ) ] ; for ( $F1088 ( i , str ) ) $F31790 ( result , i , str ) result [ str . length ( ) ] = NUM00 ; return result ; }
$F1 public void actionPerformed ( ActionEvent e ) { Object o ; o = e . getSource ( ) ; if ( o == menuFileOpen ) $F5795 ( loadFile ) else if ( o == menuFileSave ) $F5795 ( saveFile ) else if ( o == menuFileSaveAs ) $F5795 ( saveFileAs ) else if ( o == menuFileClose ) $F5795 ( closeFile ) else if ( o == menuFileCloseAll ) $F5795 ( closeAllFiles ) else if ( o == menuFileProperties ) $F5795 ( showProperties ) else if ( o == menuFileExit ) $F5795 ( close ) else if ( o == menuEditUndo ) $F5795 ( undo ) else if ( o == menuEditCopy ) $F5795 ( copyContent ) else if ( o == menuEditSearch ) $F5795 ( search ) else if ( o == menuEditClearSearch ) $F5795 ( clearSearch ) else if ( o == menuEditDeleteAttribute ) { deleteAttribute ( _BOOL ) ; } else if ( o == menuEditDeleteAttributes ) { deleteAttribute ( _BOOL ) ; } else if ( o == menuEditRenameAttribute ) $F5795 ( renameAttribute ) else if ( o == menuEditAttributeAsClass ) $F5795 ( attributeAsClass ) else if ( o == menuEditDeleteInstance ) { deleteInstance ( _BOOL ) ; } else if ( o == menuEditDeleteInstances ) { deleteInstance ( _BOOL ) ; } else if ( o == menuEditSortInstances ) $F5795 ( sortInstances ) else if ( o == menuViewAttributes ) $F5795 ( showAttributes ) else if ( o == menuViewValues ) $F5795 ( showValues ) else $F83461 ( o , menuViewOptimalColWidths , setOptimalColWidths ) updateMenu ( ) ; }
public static boolean hasJoda $F72 { try { $F32352 ( Class ) return _BOOL ; } $F17063 ( _BOOL ) }
public RemoteServiceDescriptor ( String baseUrl , HttpJsonRequestFactory requestFactory ) throws IllegalArgumentException { this . baseUrl = baseUrl ; try { $F105456 ( baseUrlURL , baseUrl ) final String protocol = baseUrlURL . getProtocol ( ) ; if ( ! $F40270 ( protocol ) ) $F74022 ( String , baseUrl ) } catch ( MalformedURLException e ) $F74022 ( String , baseUrl ) this . requestFactory = requestFactory ; }
private int findActivityElement ( int activityIndex ) { for ( $F2277 ( elementIndex , mActivityList ) ) { if ( mActivityList . get ( elementIndex ) . mActivityIndex == activityIndex ) { return elementIndex ; } } $F150 }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public void mapVolumeToSDC ( String volumeId , String sdcId ) throws Exception { $F973 ( log ) String uri = ScaleIOConstants . getMapVolumeToSDCURI ( volumeId ) ; ScaleIOMapVolumeToSDC mapParm = new ScaleIOMapVolumeToSDC $F72 ; mapParm . setSdcId ( sdcId ) ; mapParm . setAllowMultipleMappings ( NUM00 ) ; post ( URI . create ( uri ) , getJsonForEntity ( mapParm ) ) ; }
public void addObscuredRecipient ( String playerName ) $F6659 ( obscuredRecipients , playerName )
private static void replaceCollapsedByEclipseSourceRoots ( Element libElement , Library . ModifiableModel modifiableModel ) { $F806 srcUrlsFromClasspath = modifiableModel . getUrls ( OrderRootType . SOURCES ) ; LOG . assertTrue ( srcUrlsFromClasspath . length <= NUM00 ) ; final String eclipseUrl = srcUrlsFromClasspath . length > NUM00 ? srcUrlsFromClasspath [ NUM00 ] : null ; for ( Element r : libElement . getChildren ( SRCROOT_ATTR ) ) { final String url = r . getAttributeValue ( NUM00 ) ; final String bindAttr = r . getAttributeValue ( SRCROOT_BIND_ATTR ) ; boolean notBind = bindAttr != null && ! Boolean . parseBoolean ( bindAttr ) ; if ( notBind ) { modifiableModel . addRoot ( url , OrderRootType . SOURCES ) ; } else if ( eclipseUrl != null && areUrlsPointTheSame ( url , eclipseUrl ) && ! Comparing . strEqual ( url , eclipseUrl ) ) { modifiableModel . addRoot ( url , OrderRootType . SOURCES ) ; if $F7301 ( srcUrlsFromClasspath ) { modifiableModel . removeRoot ( eclipseUrl , OrderRootType . SOURCES ) ; srcUrlsFromClasspath = null ; } } } }
public static $F96 hexToBytes ( String hexString ) { $F19710 ( result , hexString ) for ( $F9808 ( i , result ) ) { int offset = i * NUM00 ; result [ i ] = ( byte ) $F138426 ( Integer , hexString , offset ) ; } return result ; }
public void testSetBitNegativeOutside1 $F72 $F117925 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals )
private static String replaceLast ( String str , char from , char to ) { $F162792 ( index , str , from ) $F101463 ( index , str ) return str . substring ( NUM00 , index ) + to + str . substring ( index + NUM00 ) ; }
public static String valueOf ( long value ) $F23210 ( Long , value )
private static void cleanStaleInitiatorReferences ( ExportGroup exportGroup , DbClient dbClient ) { StringSet exportGroupInitiators = exportGroup . getInitiators ( ) ; if ( ! CollectionUtils . isEmpty ( exportGroupInitiators ) && ! CollectionUtils . isEmpty ( exportGroup . getExportMasks ( ) ) ) { $F13750 ( allMaskInitiators ) for ( String mask : exportGroup . getExportMasks ( ) ) { ExportMask maskObj = dbClient . queryObject ( ExportMask . class , URI . create ( mask ) ) ; if ( maskObj != null && ! CollectionUtils . isEmpty ( maskObj . getInitiators ( ) ) ) { allMaskInitiators . addAll ( maskObj . getInitiators ( ) ) ; } } $F2689 staleInitiators = Sets . difference ( exportGroupInitiators , allMaskInitiators ) ; if $F20899 ( CollectionUtils , staleInitiators ) { Collection < URI > staleInitiatorURIS = Collections2 . transform ( staleInitiators , CommonTransformerFunctions . FCTN_ <missing ';'> NUM00 <missing ';'> _TO_URI ) ; exportGroup . removeInitiators ( $F7044 ( staleInitiatorURIS ) ) ; _log . info ( NUM00 , staleInitiatorURIS , exportGroup . getId ( ) ) ; } } }
public static $F4203 T findResourceByName ( Iterable < HasMetadata > entities , $F20474 clazz , String name ) { if ( entities != null ) { for ( HasMetadata entity : entities ) { if ( clazz . isInstance ( entity ) && Objects . equals ( name , getName ( entity ) ) ) { $F123138 ( clazz , entity ) } } } $F1274 }
public static Map ordinalMap ( Iterator tuples , String field , Comparator cmp ) { $F131 o = ordinalArray ( tuples , field , cmp ) ; $F246343 ( map ) for ( $F9808 ( i , o ) ) map . put ( o [ i ] , new Integer ( i ) ) ; return map ; }
void addLineMonitor ( LineMonitor lm ) { if ( Printer . trace ) $F248936 ( Printer , lm ) synchronized ( lineMonitors ) { if $F358955 ( lineMonitors , lm ) { if ( Printer . trace ) $F1932 ( Printer ) $F665 } if ( Printer . debug ) $F586 ( Printer , lm ) lineMonitors . add ( lm ) ; } $F59357 ( this , notifyAll ) if ( Printer . debug ) $F25390 ( Printer , lineMonitors ) }
public static String toChar ( byte b ) { if ( b >= NUM00 ) { return Character . toString ( ( char ) b ) ; } else $F23891 ( String , b ) }
public void addNodes ( NodeIterator iterator ) { $F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) if ( null != iterator ) { Node obj ; while ( null != $F161934 ( obj , iterator ) ) { addElement ( obj ) ; } } }
public static double ptSegDist $F130908 ( x1 , y1 , x2 , y2 , px , py ) { return Math . sqrt ( ptSegDistSq ( x1 , y1 , x2 , y2 , px , py ) ) ; }
MethodType asSpreaderType ( $F6969 arrayType , int arrayLength ) { assert ( parameterCount ( ) >= arrayLength ) ; int spreadPos = ptypes . length - arrayLength ; $F116 ( arrayLength , this ) if ( arrayType == $F22453 ) { if ( isGeneric ( ) ) return this ; if ( spreadPos == NUM00 ) { MethodType res = genericMethodType ( arrayLength ) ; if ( rtype != $F12222 ) { res = res . changeReturnType ( rtype ) ; } return res ; } } $F114155 ( elemType , arrayType ) $F83951 ( elemType ) for ( $F9958 ( i , spreadPos , ptypes ) ) { if ( ptypes [ i ] != elemType ) { $F18547 fixedPtypes = ptypes . clone ( ) ; Arrays . fill ( fixedPtypes , i , ptypes . length , elemType ) ; return methodType ( rtype , fixedPtypes ) ; } } return this ; }
public void put ( E e ) throws InterruptedException { $F61745 ( e ) int c = - NUM00 ; $F13430 node = $F201035 ( e ) ; $F677 ( putLock , this ) $F201031 ( count , this ) $F678 ( putLock ) try { while $F33770 ( count , capacity ) $F24081 ( notFull ) enqueue ( node ) ; $F201038 ( c , count ) $F201039 ( c , capacity , notFull ) } $F796 ( putLock ) $F42886 ( c , signalNotEmpty ) }
public static mxICell resolve ( mxICell root , String path ) { mxICell parent = root ; $F806 tokens = path . split ( Pattern . quote ( PATH_SEPARATOR ) ) ; for ( $F1139 ( i , tokens ) ) { parent = parent . getChildAt ( Integer . parseInt ( tokens [ i ] ) ) ; } return parent ; }
private static int nextNonQuoteIndex $F123257 ( trimmed , i , forward ) { while ( trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 || trimmed . charAt ( i ) == NUM00 ) { if ( forward ) i ++ ; else i -- ; } return i ; }
public static void reset $F72 { $F7042 ( traceState ) $F725 ( suspendedState ) }
private String inclusiveSlice $F72 { if ( mark >= pos ) $F2455 return sign . substring ( mark , pos + NUM00 ) ; }
public $F96 toBytecode $F72 throws IOException , CannotCompileException { $F1538 ( barray ) $F1533 ( out , barray ) try { toBytecode ( out ) ; } $F3229 ( out ) $F11316 ( barray ) }
public static void serializePath ( final ObjectOutput os , final PathIterator pi ) throws IOException { os . writeObject ( pi . getWindingRule ( ) ) ; final List < java . io . Serializable > list = new ArrayList < java . io . Serializable > $F72 ; while $F38402 ( pi ) { final $F5415 array = $F12454 ; final int type = pi . currentSegment ( array ) ; list . add ( type ) ; list . add ( array ) ; $F24630 ( pi ) } os . writeObject ( list ) ; }
public double calculateLocalSwapTotalCapacity ( int hostcount , int hostlocalswapsize ) { double d = ( double ) ( hostcount * hostlocalswapsize ) / NUM00 ; d *= - NUM00 ; d = ( double ) Math . round ( d * NUM00 ) / NUM00 ; return d ; }
boolean findMarker $F72 throws IOException { if ( markerIndex == marker . length ) { return _BOOL ; } if $F585 ( log ) log . debug ( $F36004 ( BytesUtil , marker ) + nreads ) ; while ( markerIndex < marker . length ) { final int remtok = marker . length - markerIndex ; markerBB . limit ( remtok ) ; $F16709 ( markerBB ) $F117439 ( rdLen , client , markerBB ) if ( rdLen == - NUM00 ) { $F132377 ( nreads , bytesRead ) } nreads ++ ; bytesRead += rdLen ; for ( $F119 ( i , rdLen ) ) { if ( markerBuffer [ i ] != marker [ markerIndex ] ) { if ( foundMarkerInInitialPosition ) { foundMarkerInInitialPosition = _BOOL ; $F9464 ( log ) } markerIndex = NUM00 ; if ( markerBuffer [ i ] == marker [ markerIndex ] ) { markerIndex ++ ; } } else $F1097 ( markerIndex , nmarkerbytematches ) } if ( nreads % NUM00 == NUM00 ) { if $F585 ( log ) $F8922 ( log , nreads , bytesRead ) } } if ( markerIndex != marker . length ) { $F51622 ( log ) return _BOOL ; } else { $F50717 ( log , nreads , nmarkerbytematches ) return _BOOL ; } }
public void parseLoggcFile ( InputStream loggcFileStream , DefaultMutableTreeNode root ) { $F58550 ( bis , loggcFileStream ) $F6518 ( histograms ) try { while ( bis . ready ( ) ) { bis . mark ( getMarkSize ( ) ) ; $F27015 ( nextLine , bis ) if $F3106 ( nextLine ) { $F2268 ( bis ) $F3761 ( histograms , parseNextClassHistogram , bis ) } } for ( $F5373 ( i , histograms ) ) { DefaultMutableTreeNode dump = getNextDumpForHistogram ( root ) ; if ( dump != null ) { addHistogramToDump ( dump , ( HistogramTableModel ) histograms . get ( i ) ) ; } } } $F12241 ( ex ) }
private void resolveTimeMacro ( StringBuffer result ) { Calendar $F13062 ( calendar ) ; result . append ( $F21621 ( calendar , Calendar ) + NUM00 ) ; String month = $F21623 ( calendar , Calendar ) + NUM00 + NUM00 ; if $F3599 ( month ) $F21679 ( month ) $F86403 ( result , month ) String day = $F21625 ( calendar , Calendar ) + NUM00 ; if $F3599 ( day ) $F21679 ( day ) $F86403 ( result , day ) int amPm = calendar . get ( Calendar . AM_PM ) ; String amPmString = amPm == Calendar . AM ? NUM00 : NUM00 ; $F86403 ( result , amPmString ) String hour = calendar . get ( Calendar . HOUR ) + NUM00 ; if $F3599 ( hour ) $F21679 ( hour ) $F86403 ( result , hour ) String minute = $F21629 ( calendar , Calendar ) + NUM00 ; if $F3599 ( minute ) $F21679 ( minute ) $F86403 ( result , minute ) String second = $F21631 ( calendar , Calendar ) + NUM00 ; if $F3599 ( second ) $F21679 ( second ) result . append ( second ) ; }
public boolean isEmpty $F72 { synchronized ( lock ) $F18905 ( annotationsDrawOrder ) }
default B append8bit ( $F1113 CharSequence cs , int start , int end ) throws IllegalArgumentException , BufferOverflowException , BufferUnderflowException , IndexOutOfBoundsException { if ( cs instanceof BytesStore ) { return write ( ( BytesStore ) cs , ( long ) start , end ) ; } for ( int i = start ; i < end ; i ++ ) { $F1280 ( c , cs , i ) if ( c > NUM00 ) c = NUM00 ; writeByte ( ( byte ) c ) ; } return ( B ) this ; }
static void zero ( $F101632 array ) { for ( $F5415 aFloat : array ) { $F99493 ( Arrays , aFloat ) } }
$F1 public boolean contains $F85239 ( p ) { RoundRectangle2D . Double r = ( RoundRectangle2D . Double ) roundrect . clone ( ) ; double grow = AttributeKeys . getPerpendicularHitGrowth ( this ) ; r . x -= grow ; r . y -= grow ; r . width += grow * NUM00 ; r . height += grow * NUM00 ; r . arcwidth += grow * NUM00 ; r . archeight += grow * NUM00 ; $F297 ( r , p ) }
private void downloadUpdateProp ( final boolean initialDownload ) { if ( bootProp != null ) { serverFolder = bootProp . getProperty ( $F28500 ( ClientGameConfiguration ) ) + NUM00 ; String updatePropertiesFile = bootProp . getProperty ( NUM00 , serverFolder + NUM00 ) ; final HttpClient httpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; updateProp = httpClient . fetchProperties ( ) ; if ( updateProp != null && updateProp . containsKey ( NUM00 ) ) $F932 } String updatePropertiesFile = ClientGameConfiguration . get ( NUM00 ) + NUM00 ; HttpClient httpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; updateProp = httpClient . fetchProperties ( ) ; if ( updateProp != null && updateProp . containsKey ( NUM00 ) ) $F932 updatePropertiesFile = ClientGameConfiguration . get ( NUM00 ) + NUM00 ; httpClient = new HttpClient ( updatePropertiesFile , initialDownload ) ; updateProp = httpClient . fetchProperties ( ) ; }
private void mergeMethodHandleStore ( final int index , final MethodHandle methodHandle ) { localVariables . merge ( index , new MethodHandle ( methodHandle ) , null ) ; }
public final int read ( $F68528 , int off , int len ) throws IOException $F48842 ( is , ba , off , len )
public ContextSuggestField ( String name , String value , int weight , CharSequence ... contexts ) { super ( name , value , weight ) ; validate ( value ) ; this . contexts = new $F9623 ( ( contexts != null ) ? contexts . length : NUM00 ) ; if ( contexts != null ) { Collections . addAll ( this . contexts , contexts ) ; } }
$F1 protected $F96 decrypt $F154001 ( type , fragment , offset , len ) { $F96 data = decCipher . update ( fragment , offset , len ) ; $F96 content ; if ( block_size != NUM00 ) { int padding_length = $F154004 ( data ) ; for ( $F119 ( i , padding_length ) ) { if ( ( $F154008 ( data , i ) & NUM00 ) != padding_length ) { throw new AlertException ( AlertProtocol . DECRYPTION_FAILED , new SSLProtocolException $F580 ) ; } } content = new byte [ data . length - hash_size - padding_length - NUM00 ] ; } else { $F154032 ( content , data , hash_size ) ; } $F96 mac_value ; mac_material_part [ NUM00 ] = type ; mac_material_part [ NUM00 ] = ( byte ) ( ( NUM00 & content . length ) > > NUM00 ) ; mac_material_part [ NUM00 ] = ( byte ) ( NUM00 & content . length ) ; messageDigest . update ( mac_read_secret ) ; messageDigest . update ( pad_1 ) ; messageDigest . update ( read_seq_num ) ; messageDigest . update ( mac_material_part ) ; messageDigest . update ( data , NUM00 , content . length ) ; $F14611 ( mac_value , messageDigest ) messageDigest . update ( mac_read_secret ) ; messageDigest . update ( pad_2 ) ; messageDigest . update ( mac_value ) ; $F14611 ( mac_value , messageDigest ) if ( logger != null ) { $F8438 ( logger ) logger . print ( data ) ; $F8438 ( logger ) logger . print ( mac_value ) ; } for ( $F119 ( i , hash_size ) ) { if ( mac_value [ i ] != data [ i + content . length ] ) { throw new AlertException ( AlertProtocol . BAD_RECORD_MAC , new SSLProtocolException $F580 ) ; } } $F5634 ( System , data , content ) incSequenceNumber ( read_seq_num ) ; return content ; }
public Activity put ( String key , Activity activity ) { return ( Activity ) m_map . put ( key , activity ) ; }
public boolean isAbstract $F72 { return Modifier . isAbstract ( getAccessFlags ( ) ) ; }
$F25527 ( redundantOpCompactThreshold , redundantOpCount , lruEntries )
public void clearCurrentRequestTimedOut $F72 { $F10834 ( currentRequestTimedOut ) currentRequestTimedOut = null ; }
protected void showPage ( int page ) { boolean isEmpty = page == PAGE_EMPTY ; Control control = isEmpty ? ( Control ) fEmptyPageLabel : getControl ( ) ; if ( isEmpty ) { setContentDescription ( NUM00 ) ; clearViewer ( ) ; } fPagebook . showPage ( control ) ; }
$F1 public boolean equals ( Object o ) { if ( this == o ) return _BOOL ; $F82512 ( o , getClass , _BOOL ) Insets insets = ( Insets ) o ; $F9906 ( bottom , insets , _BOOL ) $F9906 ( left , insets , _BOOL ) $F9906 ( right , insets , _BOOL ) $F9906 ( top , insets , _BOOL ) return _BOOL ; }
public void removeDocuments ( List < Query > queries ) { IndexWriter writer = getWriter ( ) ; for ( Query query : queries ) { try { writer . deleteDocuments ( query ) ; } catch ( Exception e ) { $F301 ( e ) closeWriter ( writer ) ; $F5301 ( e ) } } closeWriter ( writer ) ; }
protected String toString ( Object parameter ) { $F1933 ( parameter , NULL_STR ) try { String result = Misc . getAsString ( parameter ) ; if ( result . length ( ) > DEFAULT_ARG_ <missing ')'> NUM00 <missing ';'> _MAX_LENGTH ) { result = result . substring ( NUM00 , DEFAULT_ARG_ <missing ';'> NUM00 <missing ';'> _MAX_LENGTH ) + DEFAULT_MAX_ <missing ';'> NUM00 _ENDING ; } return result ; } catch ( Throwable e ) { return UNKNOWN ; } }
public static SecretKey generateSecretKey ( SecretKeyType secretKeyType , int keySize ) throws CryptoException { try { KeyGenerator keyGenerator = KeyGenerator . getInstance ( secretKeyType . jce ( ) , BOUNCY_CASTLE . jce ( ) ) ; keyGenerator . init ( keySize , SecureRandom . getInstance ( NUM00 ) ) ; return keyGenerator . generateKey ( ) ; } catch ( GeneralSecurityException ex ) { throw new CryptoException ( $F36702 ( MessageFormat , res , secretKeyType ) , ex ) ; } }
public CML deleteCML ( ISicresAbstractDocumentVO document ) { $F134526 ( id , document ) Reference reference = new Reference ( STORE , id , null ) ; Predicate predicate = new Predicate ( new Reference [ ] { reference } , null , null ) ; CMLDelete delete = new CMLDelete ( predicate ) ; CML cml = new CML $F72 ; cml . setDelete ( new CMLDelete [ ] { delete } ) ; return cml ; }
private synchronized void eval $F72 throws MetadataEvaluationException { if ( cacheStrategy == CacheStrategy . NEVER_CACHE || $F61922 ( internalValue ) ) { try { Object value = lazyValue . call ( ) ; $F13265 ( value , ACTUALLY_NULL ) internalValue = new SoftReference $F1432 ( value ) ; } catch ( Exception e ) { throw new MetadataEvaluationException ( e ) ; } } }
public void addEdgeToBounds ( S2Point from , S2Point to ) { if ( ! boundSet ) { boundSet = _BOOL ; xmin = xmax = from . x ; ymin = ymax = from . y ; zmin = zmax = from . z ; } xmin = Math . min ( xmin , $F150934 ( Math , to , from ) ) ; ymin = Math . min ( ymin , $F250296 ( Math , to , from ) ) ; zmin = Math . min ( zmin , Math . min ( to . z , from . z ) ) ; xmax = Math . max ( xmax , $F103491 ( Math , to , from ) ) ; ymax = Math . max ( ymax , Math . max ( to . y , from . y ) ) ; zmax = Math . max ( zmax , Math . max ( to . z , from . z ) ) ; double approxArcLen = Math . abs ( from . x - to . x ) + Math . abs ( from . y - to . y ) + Math . abs ( from . z - to . z ) ; if ( approxArcLen < NUM00 ) { maxDeformation = Math . max ( maxDeformation , approxArcLen * NUM00 ) ; } else if ( approxArcLen < NUM00 ) { maxDeformation = Math . max ( maxDeformation , approxArcLen * NUM00 ) ; } else { maxDeformation = approxArcLen * NUM00 ; } }
$F1 public void write $F24576 ( buffer , offset , length ) throws IOException { while $F73749 ( mByteToSkip , mByteToCopy , mState , STATE_JPEG_DATA , length ) { $F73751 ( mByteToSkip , byteToProcess , length , offset ) if ( mByteToCopy > NUM00 ) { int byteToProcess = length > mByteToCopy ? mByteToCopy : length ; out . write ( buffer , offset , byteToProcess ) ; length -= byteToProcess ; mByteToCopy -= byteToProcess ; offset += byteToProcess ; } $F32905 ( length ) switch ( mState ) { case STATE_SOI : int byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; offset += byteRead ; length -= byteRead ; $F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73759 ( mBuffer , JpegHeader ) $F73762 ( out , mBuffer ) mState = STATE_FRAME_HEADER ; $F23501 ( mBuffer ) writeExifData ( ) ; $F597 case STATE_FRAME_HEADER : byteRead = requestByteToBuffer ( NUM00 , buffer , offset , length ) ; offset += byteRead ; length -= byteRead ; if $F73765 ( mBuffer ) { $F73767 ( tag , mBuffer ) if ( tag == JpegHeader . EOI ) { $F73762 ( out , mBuffer ) $F23501 ( mBuffer ) } } $F73756 ( mBuffer ) $F23501 ( mBuffer ) $F73767 ( marker , mBuffer ) if ( marker == JpegHeader . APP1 ) $F125654 ( mByteToSkip , mBuffer , mState , STATE_JPEG_DATA ) else if $F125655 ( JpegHeader , marker ) { $F73762 ( out , mBuffer ) $F73777 ( mByteToCopy , mBuffer ) } else { $F73762 ( out , mBuffer ) mState = STATE_JPEG_DATA ; } $F23501 ( mBuffer ) } } if ( length > NUM00 ) $F21537 ( out , buffer , offset , length ) }
public static String hash ( String string ) { try { $F5348 ( sha1 , MessageDigest ) sha1 . update ( string . getBytes ( NUM00 ) ) ; return Base64 . encode ( sha1 . digest ( ) ) ; } catch ( Exception ex ) { $F5348 ( debug , Debug ) if $F12866 ( debug ) $F36502 ( debug , ex ) $F1274 } }
static $F3803 readExtensions ( final SubstringReader reader ) throws DecodeException { int length = NUM00 ; $F101494 ( values ) reader . skipWhitespaces ( ) ; $F115573 ( reader ) try { $F277866 ( c , reader ) if ( c == NUM00 ) { $F115573 ( reader ) while ( reader . read ( ) != NUM00 ) { length ++ ; } $F2268 ( reader ) values = Collections . singletonList ( reader . read ( length ) ) ; $F61262 ( reader ) } else if ( c == NUM00 ) { reader . skipWhitespaces ( ) ; $F115573 ( reader ) $F10201 ( c , reader ) if ( c == NUM00 ) $F254727 ( values , Collections ) else { $F9404 ( values ) do { $F2268 ( reader ) $F3761 ( values , readQuotedString , reader ) reader . skipWhitespaces ( ) ; $F115573 ( reader ) } while ( reader . read ( ) != NUM00 ) ; $F5939 ( values , Collections ) } } else { do { length ++ ; } while ( reader . read ( ) != NUM00 ) ; $F2268 ( reader ) values = Collections . singletonList ( reader . read ( length ) ) ; } return values ; } catch ( final StringIndexOutOfBoundsException e ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; } }
private void NV21toI420SemiPlanar ( $F96 nv21bytes , $F96 i420bytes , int width , int height ) { System . arraycopy ( nv21bytes , NUM00 , i420bytes , NUM00 , width * height ) ; for ( int i = width * height ; i < nv21bytes . length ; i += NUM00 ) { i420bytes [ i ] = nv21bytes [ i + NUM00 ] ; $F65884 ( i420bytes , i , nv21bytes ) } }
public int read ( ByteBuffer dst ) throws IOException { if $F116620 ( dst ) $F1082 if $F931 ( isHandShakeComplete ) { if ( isBlocking ( ) ) { while $F931 ( isHandShakeComplete ) $F5795 ( processHandshake ) } else { processHandshake ( ) ; if $F931 ( isHandShakeComplete ) $F1083 } } int purged = readRemaining ( dst ) ; $F74336 ( purged ) assert $F73765 ( inData ) ; $F725 ( inData ) if $F116620 ( inCrypt ) $F725 ( inCrypt ) else $F116630 ( inCrypt ) if ( isBlocking ( ) || readEngineResult . getStatus ( ) == Status . BUFFER_UNDERFLOW ) if ( socketChannel . read ( inCrypt ) == - NUM00 ) $F7629 $F14257 ( inCrypt ) unwrap ( ) ; int transfered = transfereTo ( inData , dst ) ; if $F116639 ( transfered , isBlocking ) $F4915 ( read , dst ) return transfered ; }
private $F422085 search $F72 throws IOException { DirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; IndexSearcher searcher = new IndexSearcher ( indexReader ) ; SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState ( indexReader ) ; FacetsCollector fc = new FacetsCollector $F72 ; FacetsCollector . search ( searcher , new MatchAllDocsQuery $F72 , NUM00 , fc ) ; Facets facets = new SortedSetDocValuesFacetCounts ( state , fc ) ; $F422085 $F204 ( results ) ; $F422106 ( results , facets ) $F422106 ( results , facets ) $F59 ( indexReader ) return results ; }
public Resource mapRelations ( Resource object , JSONObject jsonObject , $F77302 included ) throws Exception { $F12078 $F5998 ( relationshipNames , getRelationshipNames , object ) ; for ( $F3465 ( relationship , relationshipNames ) ) { JSONObject relationJsonObject = null ; try { relationJsonObject = jsonObject . getJSONObject ( relationship ) ; } catch ( JSONException e ) { $F630 ( Logger , relationship ) $F598 } JSONObject relationDataObject = null ; try { relationDataObject = relationJsonObject . getJSONObject ( NUM00 ) ; Resource relationObject = Factory . newObjectFromJSONObject ( relationDataObject , null ) ; relationObject = matchIncludedToRelation ( relationObject , included ) ; mDeserializer . setField ( object , relationshipNames . get ( relationship ) , relationObject ) ; } catch ( JSONException e ) $F981 ( Logger ) JSONArray relationDataArray = null ; try { relationDataArray = relationJsonObject . getJSONArray ( NUM00 ) ; $F77302 relationArray = Factory . newObjectFromJSONArray ( relationDataArray , null ) ; relationArray = matchIncludedToRelation ( relationArray , included ) ; mDeserializer . setField ( object , relationshipNames . get ( relationship ) , relationArray ) ; } catch ( JSONException e ) $F981 ( Logger ) } return object ; }
$F1654 ( rdns )
$F1 public void doInitialize ( UimaContext aContext ) throws ResourceInitializationException { DB db = mongoResource . getDB ( ) ; collection = db . getCollection ( collectionName ) ; collection . createIndex ( new BasicDBObject ( FIELD_UNIQUE_ID , NUM00 ) ) ; collection . createIndex ( new BasicDBObject ( FIELD_PUBLISHEDIDS , NUM00 ) ) ; $F21884 ( stopFeatures ) $F18793 ( stopFeatures ) $F18793 ( stopFeatures ) maxContentLength = ConfigUtils . stringToInteger ( maxContentLengthString , NUM00 ) ; }
protected void drawHighFarOut ( double aRadius , Graphics2D g2 , double xx , double m ) { double side = aRadius * NUM00 ; g2 . draw ( new $F69931 ( xx - side , m + side , xx + side , m + side ) ) ; g2 . draw ( new $F69931 ( xx - side , m + side , xx , m ) ) ; g2 . draw ( new $F69931 ( xx + side , m + side , xx , m ) ) ; }
private void findLargeItemSets $F72 throws Exception { $F3523 kMinusOneSets , kSets ; Hashtable < ItemSet , Integer > hashtable ; int necSupport , i = NUM00 ; necSupport = ( int ) ( m_minSupport * m_instances . numInstances ( ) + NUM00 ) ; kSets = AprioriItemSet . singletons ( m_instances , m_treatZeroAsMissing ) ; if ( m_treatZeroAsMissing ) { AprioriItemSet . upDateCountersTreatZeroAsMissing ( kSets , m_instances ) ; } else { AprioriItemSet . upDateCounters ( kSets , m_instances ) ; } kSets = AprioriItemSet . deleteItemSets ( kSets , necSupport , m_instances . numInstances ( ) ) ; $F110977 ( kSets ) do { m_Ls . add ( kSets ) ; kMinusOneSets = kSets ; kSets = AprioriItemSet . mergeAllItemSets ( kMinusOneSets , i , m_instances . numInstances ( ) ) ; hashtable = AprioriItemSet . getHashtable ( kMinusOneSets , kMinusOneSets . size ( ) ) ; m_hashtables . add ( hashtable ) ; kSets = AprioriItemSet . pruneItemSets ( kSets , hashtable ) ; if ( m_treatZeroAsMissing ) { AprioriItemSet . upDateCountersTreatZeroAsMissing ( kSets , m_instances ) ; } else { AprioriItemSet . upDateCounters ( kSets , m_instances ) ; } kSets = AprioriItemSet . deleteItemSets ( kSets , necSupport , m_instances . numInstances ( ) ) ; i ++ ; } while $F3817 ( kSets ) ; }
public boolean isInAllowed ( int x , int y ) { for ( Shape r : arrivingBarriers ) { if $F26905 ( r , x , y ) { return _BOOL ; } } return _BOOL ; }
public void removePluginInterface ( String interfacename ) throws $F16995 { SMSEntry . validateToken ( token ) ; validateServiceSchemaManagerImpl ( ) ; Document schemaDoc = ssm . getDocumentCopy ( ) ; Node schemaNode = XMLUtils . getRootNode ( schemaDoc , SMSUtils . SCHEMA ) ; Node pluginNode = XMLUtils . getNamedChildNode ( schemaNode , SMSUtils . PLUGIN_INTERFACE , SMSUtils . NAME , interfacename ) ; if ( pluginNode != null ) { schemaNode . removeChild ( pluginNode ) ; replaceSchema ( schemaDoc ) ; } }
public IPAddressName ( String name ) throws IOException { if $F6036 ( name ) $F14525 if $F50863 ( name ) $F3496 ( name ) if $F48846 ( name ) { parseIPv6 ( name ) ; isIPv4 = _BOOL ; } else if $F48846 ( name ) { parseIPv4 ( name ) ; isIPv4 = _BOOL ; } else $F3496 ( name ) }
private boolean isSameFile ( Path first , Path second ) throws IOException { boolean sameFileSize = Files . size ( first ) == Files . size ( second ) ; $F42316 ( sameFileSize , _BOOL ) $F96 firstBytes = Files . readAllBytes ( first ) ; $F96 secondBytes = Files . readAllBytes ( second ) ; return Arrays . equals ( firstBytes , secondBytes ) ; }
public static org . opcfoundation . ua . transport . security . KeyPair loadKeyPairFromProtectedStore $F19845 ( storeLocation , alias , storePW , privatePW ) throws KeyStoreException , IOException , NoSuchAlgorithmException , CertificateException , UnrecoverableKeyException { KeyStore store = null ; $F6161 ( store , KeyStore ) $F1705 ( keystoreFile , storeLocation ) $F4647 ( in , keystoreFile ) store . load ( in , storePW . toCharArray ( ) ) ; $F59 ( in ) X509Certificate cert = ( X509Certificate ) store . getCertificate ( alias ) ; RSAPrivateKey key = ( RSAPrivateKey ) store . getKey ( alias , privatePW . toCharArray ( ) ) ; return new org . opcfoundation . ua . transport . security . KeyPair ( new Cert ( cert ) , new PrivKey ( key ) ) ; }
$F1 public GraphQuery hasNot ( final String key , final Object value ) { criteria . add ( new HasNot ( key , value ) ) ; return this ; }
private void initComputeProgram $F72 { $F130812 ( workGroupSize , BufferUtils ) glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; $F36986 ( workGroupSizeX , workGroupSize ) $F36986 ( workGroupSizeY , workGroupSize ) int boxesResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , NUM00 ) ; $F130812 ( props , BufferUtils ) $F130812 ( params , BufferUtils ) $F130813 ( props , GL_BUFFER_BINDING ) glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , boxesResourceIndex , props , null , params ) ; $F36986 ( boxesSsboBinding , params ) int uniformsResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_UNIFORM_BLOCK , NUM00 ) ; glGetProgramResourceiv ( computeProgram , GL_UNIFORM_BLOCK , uniformsResourceIndex , props , null , params ) ; $F36986 ( computeUboBinding , params ) int loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( framebufferImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldPositionImageBinding , params ) loc = glGetUniformLocation ( computeProgram , NUM00 ) ; glGetUniformiv ( computeProgram , loc , params ) ; $F36986 ( worldNormalImageBinding , params ) }
TSResponse $F97 ( tsReply ) throws IOException { parse ( tsReply ) ; }
public static void executeCommand ( ProcessBuilder p ) throws IOException { $F111135 ( proc , p ) try ( $F114263 ( stdInput , proc ) ; BufferedReader stdError = new BufferedReader ( new InputStreamReader ( proc . getErrorStream ( ) ) ) ) { $F973 ( logger ) String s ; while $F443 ( s , stdInput ) { logger . info ( s ) ; } $F973 ( logger ) while $F443 ( s , stdError ) { logger . info ( s ) ; } } }
public boolean pageSetupDialog ( PrinterJob job ) { PrintRequestAttributeSet prats = getPrintRequestAttributeSet ( ) ; PageFormat pf = job . pageDialog ( prats ) ; setPrintRequestAttributeSet ( prats ) ; return _BOOL ; }
public static void assertNotEquals ( BufferedImage image1 , BufferedImage image2 ) $F228450 ( assertNotEquals , image1 , image2 )
public Depend ( PathImpl source , long digest , boolean requireSource ) { this ( source ) ; long newDigest = source . getCrc64 ( ) ; _requireSource = requireSource ; if ( newDigest == digest ) $F845 else if ( ! requireSource && newDigest == NUM00 ) $F845 else if ( newDigest == NUM00 ) { if $F6456 ( log , Level ) log . fine ( $F6457 ( _source ) ) ; _isDigestModified = _BOOL ; } else { _isDigestModified = _BOOL ; } }
public static boolean stringToFile ( final String data , final File targetFile , final boolean doAppend ) { if ( targetFile == null || ! isWritable ( targetFile , _BOOL ) ) $F277465 ( Log , _BOOL ) boolean isSucceed = _BOOL ; try { final FileWriter out = new FileWriter ( targetFile , doAppend ) ; out . write ( data ) ; $F1206 ( out ) $F59 ( out ) } $F25100 ( isSucceed , _BOOL ) return isSucceed ; }
$F1 public void cascadeRegisterNewIfRequired ( Object object , UnitOfWorkImpl uow , Map visitedObjects ) { cascadeRegisterNewIfRequired ( object , uow , visitedObjects , _BOOL ) ; }
public void initialize ( Map configParams ) throws PolicyException { if ( configParams == null ) { throw ( new PolicyException $F278179 ( ResBundleUtils ) ) ; } String configuredLdapServer = ( String ) configParams . get ( PolicyConfig . LDAP_SERVER ) ; if ( configuredLdapServer == null ) { debug . error ( $F40 ) ; throw ( new PolicyException $F278179 ( ResBundleUtils ) ) ; } $F21936 ( ldapServer , configuredLdapServer ) localDS = PolicyUtils . isLocalDS ( ldapServer ) ; aliasEnabled = Boolean . valueOf ( ( String ) configParams . get ( PolicyConfig . USER_ALIAS_ENABLED ) ) ; String authid = ( String ) configParams . get ( PolicyConfig . LDAP_BIND_DN ) ; String authpw = ( String ) configParams . get ( PolicyConfig . LDAP_BIND_PASSWORD ) ; if ( authpw != null ) { authpw = PolicyUtils . decrypt ( authpw ) ; } baseDN = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_BASE_DN ) ; userSearchFilter = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_SEARCH_FILTER ) ; String scope = ( String ) configParams . get ( PolicyConfig . LDAP_USERS_SEARCH_SCOPE ) ; if $F8397 ( scope , LDAP_SCOPE_BASE ) { userSearchScope = SearchScope . BASE_OBJECT ; } else if $F8397 ( scope , LDAP_SCOPE_ONE ) { userSearchScope = SearchScope . SINGLE_LEVEL ; } else { userSearchScope = SearchScope . WHOLE_SUBTREE ; } userRDNAttrName = ( String ) configParams . get ( PolicyConfig . LDAP_USER_SEARCH_ATTRIBUTE ) ; int minPoolSize ; int maxPoolSize ; try { timeLimit = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_SEARCH_TIME_OUT ) ) ; maxResults = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_SEARCH_LIMIT ) ) ; minPoolSize = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_CONNECTION_POOL_MIN_SIZE ) ) ; maxPoolSize = Integer . parseInt ( ( String ) configParams . get ( PolicyConfig . LDAP_CONNECTION_POOL_MAX_SIZE ) ) ; } catch ( NumberFormatException nfe ) { throw ( new PolicyException ( nfe ) ) ; } boolean sslEnabled = Boolean . valueOf ( ( String ) configParams . get ( PolicyConfig . LDAP_SSL_ENABLED ) ) ; Set orgNameSet = ( Set ) configParams . get ( PolicyManager . ORGANIZATION_NAME ) ; if $F13709 ( orgNameSet ) { $F10531 ( items , orgNameSet ) $F103384 ( orgName , items ) } if $F6299 ( debug ) { debug . message ( $F263731 ( ldapServer , authid , baseDN ) + userSearchFilter + NUM00 + userRDNAttrName + NUM00 + timeLimit + NUM00 + maxResults + NUM00 + minPoolSize + NUM00 + maxPoolSize + NUM00 + sslEnabled + NUM00 + orgName ) ; } LDAPConnectionPools . initConnectionPool ( ldapServer , authid , authpw , sslEnabled , minPoolSize , maxPoolSize ) ; connPool = LDAPConnectionPools . getConnectionPool ( ldapServer ) ; initialized = _BOOL ; }
public static boolean parseBool ( String s ) { if ( s != null ) { if ( $F132104 ( s ) ) { return _BOOL ; } if ( s . startsWith ( NUM00 ) || s . startsWith ( NUM00 ) || s . equals ( NUM00 ) ) { return _BOOL ; } } throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , NUM00 + s ) ; }
private static void readDNA ( String filename ) { try { LineNumberReader in = new LineNumberReader $F434 ( filename ) ; processOneLine ( in , NUM00 , compilationRates ) ; processOneLine ( in , NUM00 , speedupRates ) ; } catch ( Exception e ) { $F301 ( e ) VM . sysFail ( NUM00 ) ; } }
public void test_Of_EEEE $F72 { EnumSet < EnumWithInnerClass > enumSet = EnumSet . of ( EnumWithInnerClass . a , EnumWithInnerClass . b , EnumWithInnerClass . c , EnumWithInnerClass . d ) ; $F153255 ( assertEquals , enumSet ) assertTrue ( NUM00 , $F257441 ( enumSet , EnumWithInnerClass ) ) ; assertTrue ( NUM00 , enumSet . contains ( EnumWithInnerClass . d ) ) ; try { EnumSet . of ( ( EnumWithInnerClass ) null , null , null , null ) ; fail ( NUM00 ) ; } $F53531 EnumSet < HugeEnumWithInnerClass > hugeEnumSet = EnumSet . of ( HugeEnumWithInnerClass . a , HugeEnumWithInnerClass . b , HugeEnumWithInnerClass . c , HugeEnumWithInnerClass . d ) ; $F70108 ( assertEquals , hugeEnumSet ) assertTrue ( $F257441 ( hugeEnumSet , HugeEnumWithInnerClass ) ) ; assertTrue ( hugeEnumSet . contains ( HugeEnumWithInnerClass . d ) ) ; try { EnumSet . of ( ( HugeEnumWithInnerClass ) null , null , null , null ) ; fail ( NUM00 ) ; } $F53531 }
Builder ( URL swaggerUrl ) { try { this . swaggerLocation = swaggerUrl . toURI ( ) ; } catch ( URISyntaxException e ) $F78550 ( e ) this . swagger = $F17717 ( readSwagger , swaggerUrl ) ; }
$F1 public void onSaveInstanceState ( $F4170 Bundle savedInstanceState ) { savedInstanceState . putParcelable ( LOCATION_KEY , currentLocation ) ; if ( lastLocationUpdateTime != null ) { savedInstanceState . putLong ( LAST_LOCATION_UPDATE_TIME_ <missing ';'> NUM00 <missing ';'> _KEY , lastLocationUpdateTime . getTime ( ) ) ; } if ( lastWifiScanTime != null ) { savedInstanceState . putLong ( LAST_WIFI_SCAN_TIME_ <missing ';'> NUM00 <missing ';'> _KEY , lastWifiScanTime . getTime ( ) ) ; } savedInstanceState . putBoolean ( LOGGING_ENABLED_KEY , loggingEnabled ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public static String removeEmptyLines ( String text ) { text = text . replaceAll ( NUM00 + ChineseLanguageConstants . SPACE [ NUM00 ] + NUM00 , NUM00 ) ; text = text . replaceAll ( NUM00 + ChineseLanguageConstants . SPACE [ NUM00 ] + NUM00 , NUM00 ) ; return text ; }
public void keepOnly ( Set < IVarAbstraction > usefulPointers ) { Set < IVarAbstraction > reps = new HashSet < IVarAbstraction > $F72 ; for ( IVarAbstraction pn : usefulPointers ) { reps . add ( pn . getRepresentative ( ) ) ; } usefulPointers . addAll ( reps ) ; reps = null ; for ( IVarAbstraction pn : pointers ) { if $F2200 ( usefulPointers , pn ) pn . deleteAll ( ) ; } $F58463 ( System ) }
public static String encryptCFB ( final $F96 concatenatedHashValue , final Long turnoverCounter , final SecretKey symmetricKey , int turnOverCounterLengthInBytes ) throws NoSuchAlgorithmException , NoSuchProviderException , NoSuchPaddingException , InvalidKeyException , InvalidAlgorithmParameterException , IllegalBlockSizeException , BadPaddingException { $F120018 ( byteBufferIV , ByteBuffer ) byteBufferIV . put ( concatenatedHashValue ) ; $F45857 ( IV , byteBufferIV ) $F120018 ( byteBufferData , ByteBuffer ) byteBufferData . putLong ( turnoverCounter ) ; $F45857 ( data , byteBufferData ) $F33012 ( turnOverCounterByteRep , get2ComplementRepForLong , turnoverCounter , turnOverCounterLengthInBytes ) $F7057 ( System , turnOverCounterByteRep , data ) final IvParameterSpec ivSpec = new IvParameterSpec ( IV ) ; final Cipher cipher = Cipher . getInstance ( NUM00 , NUM00 ) ; $F20431 ( cipher , Cipher , symmetricKey , ivSpec ) $F120024 ( encryptedTurnOverValueComplete , cipher , data ) $F4727 ( encryptedTurnOverValue , turnOverCounterLengthInBytes ) $F135 ( System , encryptedTurnOverValueComplete , encryptedTurnOverValue , turnOverCounterLengthInBytes ) final String base64EncryptedTurnOverValue = CashBoxUtils . base64Encode ( encryptedTurnOverValue , _BOOL ) ; return base64EncryptedTurnOverValue ; }
public void resetLockoutAttempts ( String userDN , AMIdentity amIdentity , AccountLockoutInfo acInfo , boolean resetDuration ) { $F18126 ( debug ) $F36310 ( debug , resetDuration ) int fail_count = NUM00 ; long lastFailTime = NUM00 ; long locked_out_at = NUM00 ; long actualLockoutDuration = failureLockoutDuration ; long currentLockoutDuration = acInfo . getActualLockoutDuration ( ) ; if ( acInfo != null ) { fail_count = acInfo . getFailCount ( ) ; lastFailTime = acInfo . getLastFailTime ( ) ; locked_out_at = acInfo . getLockoutAt ( ) ; long now = currentTimeMillis ( ) ; if ( ! resetDuration ) { actualLockoutDuration = currentLockoutDuration ; $F36310 ( debug , locked_out_at ) if ( locked_out_at > NUM00 ) { $F19243 ( debug ) actualLockoutDuration = failureLockoutMultiplier * ( currentLockoutDuration ) ; } } } if ( storeInvalidAttemptsInDS ) { try { if ( ( fail_count != NUM00 ) || ( lastFailTime != NUM00 ) || ( locked_out_at != NUM00 ) || ( actualLockoutDuration != currentLockoutDuration ) ) { $F28017 ( attrMap ) $F19850 ( invalidAttempts ) String invalidXML = createInvalidAttemptsXML ( NUM00 , NUM00 , NUM00 , actualLockoutDuration ) ; invalidAttempts . add ( invalidXML ) ; attrMap . put ( invalidAttemptsDataAttrName , invalidAttempts ) ; setLockoutObjectClass ( amIdentity ) ; amIdentity . setAttributes ( attrMap ) ; $F18127 ( debug , invalidXML ) $F13765 ( amIdentity ) } $F18126 ( debug ) } catch ( Exception exp ) { $F18126 ( debug ) } } acInfo . setFailCount ( NUM00 ) ; acInfo . setLastFailTime ( NUM00 ) ; acInfo . setLockoutAt ( NUM00 ) ; acInfo . setLockout ( _BOOL ) ; acInfo . setActualLockoutDuration ( actualLockoutDuration ) ; }
String publicNameFromDiskName ( String diskName ) { if ( ! shouldDiskNameBeVisible ( diskName ) ) $F18931 ( diskName ) return diskName . substring ( mFilePrefix . length ( ) , diskName . length ( ) ) ; }
public $F1986 predict ( FVec feat ) $F8587 ( predict , feat , _BOOL )
public static $F20163 $F99842 append ( final $F99842 a , final $F99842 b ) { $F18832 ( alen , a ) $F18832 ( blen , b ) final $F99842 res = Arrays . copyOf ( a , alen + blen ) ; $F6483 ( System , b , res , alen , blen ) return res ; }
public boolean addListener ( $F1113 SoftWrapAwareDocumentParsingListener listener ) $F31974 ( myListeners , listener )
private void assertArrayEquals ( $F1986 expected , $F1986 actual , double delta , boolean checkNaN ) { Assert . assertEquals ( expected . length , actual . length ) ; for ( $F1139 ( index , actual ) ) { double d1 = expected [ index ] ; double d2 = actual [ index ] ; if $F89880 ( Double , d1 , d2 ) { if ( checkNaN ) { Assert . assertTrue ( Double . isNaN ( d1 ) == Double . isNaN ( d2 ) ) ; } Assert . assertTrue ( _BOOL ) ; } else { Assert . assertEquals ( d1 , d2 , delta ) ; } } }
protected void addToPopulation ( Solution newSolution ) { $F67791 ( dominates ) boolean dominated = _BOOL ; for ( $F2277 ( i , population ) ) { int flag = dominanceComparator . compare ( newSolution , population . get ( i ) ) ; if ( flag < NUM00 ) $F207 ( dominates , i ) else $F158341 ( flag , dominated , _BOOL ) } if $F5973 ( dominates ) { population . remove ( dominates . get ( PRNG . nextInt ( dominates . size ( ) ) ) ) ; population . add ( newSolution ) ; } else if ( ! dominated ) { population . remove ( PRNG . nextInt ( population . size ( ) ) ) ; population . add ( newSolution ) ; } }
public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { $F19410 ( mMaxRequiredWidth , Math , requiredWidth ) $F19410 ( mMaxMatchContentsWidth , Math , matchContentsWidth ) }
private String generateBlendModeImport ( BlendMode blendMode ) { if ( blendMode == BlendMode . COLOR ) $F1278 else if ( blendMode == BlendMode . COLORBURN ) $F1278 else if ( blendMode == BlendMode . COLORDODGE ) $F1278 else if ( blendMode == BlendMode . EXCLUSION ) $F1278 else if ( blendMode == BlendMode . HUE ) $F1278 else if ( blendMode == BlendMode . LUMINOSITY ) $F1278 else if ( blendMode == BlendMode . SATURATION ) $F1278 else if ( blendMode == BlendMode . SOFTLIGHT ) $F1278 else $F1274 }
public static String parseIntToMetricSuffix ( int x ) { $F2544 ( xint , String , x ) if $F8991 ( xint ) { $F2899 ( xint ) } else if $F8991 ( xint ) { $F2899 ( xint ) } return xint ; }
public SmAuthStatus query ( String parameter , String secret , SmAuthQueryCode request , SmAuthQueryResponse response ) { if ( null == response ) { return SmAuthStatus . SMAUTH_FAILURE ; } if ( SmAuthQueryCode . SMAUTH_QUERY_DESCRIPTION == request ) { response . setResponseBuffer ( SCHEME_DESCRIPTION ) ; response . setResponseCode ( SCHEME_VERSION ) ; } else if ( SmAuthQueryCode . SMAUTH_QUERY_CREDENTIALS_REQ == request ) { response . setResponseCode ( SmAuthQueryResponse . SMAUTH_CRED_BASIC ) ; } else { return SmAuthStatus . SMAUTH_FAILURE ; } return SmAuthStatus . SMAUTH_SUCCESS ; }
protected void addAllTransitiveJars ( WarArchiveMerger wam ) throws MojoExecutionException { DependencyCalculator dc = new DependencyCalculator ( artifactFactory , resolver , localRepository , remoteRepositories , mavenProject , mavenProjectBuilder , installer , container ) ; try { for ( File f : dc . execute ( ) ) { wam . addMergeItem ( f ) ; } } catch ( Exception ex ) { throw new MojoExecutionException ( NUM00 , ex ) ; } }
private void add ( int col , GraphicalNode graphicalNode ) { myGraphicalNodes . remove ( graphicalNode ) ; if ( nbCols - NUM00 < col ) { nbCols = col + NUM00 ; } int row = NUM00 ; while ( isOccupied ( row , col ) ) { row ++ ; } graphicalNode . row = row ; graphicalNode . col = col ; myGraphicalNodes . add ( graphicalNode ) ; }
private int addTonalComponents ( $F5415 spectrum , int numComponents , TonalComponent [ ] components ) { int lastPos = - NUM00 ; for ( $F119 ( i , numComponents ) ) { lastPos = Math . max ( components [ i ] . pos + components [ i ] . numCoefs , lastPos ) ; for ( int j = NUM00 ; j < components [ i ] . numCoefs ; j ++ ) { spectrum [ components [ i ] . pos + j ] += components [ i ] . coef [ j ] ; } } return lastPos ; }
public static List < UserLayer > extractUserLayers ( StyledLayerDescriptor sld ) { List < UserLayer > userLayerList = new ArrayList < UserLayer > $F72 ; if ( sld != null ) { for ( StyledLayer layer : sld . layers ( ) ) { if ( layer instanceof UserLayer ) { UserLayer userLayer = ( UserLayer ) layer ; userLayerList . add ( userLayer ) ; } } } return userLayerList ; }
public static void closeQuiet ( $F5466 Selector rsrc ) { if ( rsrc != null ) try { if $F23014 ( rsrc ) $F59 ( rsrc ) } $F20287 }
private $F16501 diff_main $F35621 ( text1 , text2 , checklines , deadline ) { $F3541 ( text1 , text2 ) $F16501 diffs ; if $F1238 ( text1 , text2 ) { diffs = new $F16501 $F72 ; if $F35625 ( text1 ) $F35630 ( diffs , Operation , text1 ) return diffs ; } int commonlength = diff_commonPrefix ( text1 , text2 ) ; $F11991 ( commonprefix , text1 , commonlength ) $F11978 ( text1 , commonlength ) $F11978 ( text2 , commonlength ) commonlength = diff_commonSuffix ( text1 , text2 ) ; String commonsuffix = $F35634 ( text1 , commonlength ) ; $F35641 ( text1 , commonlength ) $F35641 ( text2 , commonlength ) diffs = diff_compute ( text1 , text2 , checklines , deadline ) ; if $F35625 ( commonprefix ) { diffs . addFirst ( $F35627 ( Operation , commonprefix ) ) ; } if $F35625 ( commonsuffix ) { diffs . addLast ( $F35627 ( Operation , commonsuffix ) ) ; } diff_cleanupMerge ( diffs ) ; return diffs ; }
public static boolean createCompactionRequiredFile ( String metaFolderPath , CompactionType compactionType ) { String statusFile ; if ( compactionType . equals ( CompactionType . MINOR_COMPACTION ) ) { statusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . minorCompactionRequiredFile ; } else { statusFile = metaFolderPath + CarbonCommonConstants . FILE_SEPARATOR + CarbonCommonConstants . majorCompactionRequiredFile ; } try { if ( ! FileFactory . isFileExist ( statusFile , FileFactory . getFileType ( statusFile ) ) ) { if ( FileFactory . createNewFile ( statusFile , FileFactory . getFileType ( statusFile ) ) ) { $F556 ( LOGGER , statusFile ) return _BOOL ; } else $F124420 ( LOGGER , statusFile , _BOOL ) } else $F68974 ( LOGGER , statusFile ) } catch ( IOException e ) $F50614 ( LOGGER , e ) return _BOOL ; }
private boolean allowNotificationEmission ( ObjectName name , TargetedNotification tn ) { try { if ( checkNotificationEmission ) $F28986 ( checkMBeanPermission , name ) if ( notificationAccessController != null ) { notificationAccessController . fetchNotification ( connectionId , name , tn . getNotification ( ) , getSubject ( ) ) ; } return _BOOL ; } catch ( SecurityException e ) { if ( logger . debugOn ( ) ) { logger . debug ( NUM00 , NUM00 + tn . getNotification ( ) + NUM00 + NUM00 ) ; } return _BOOL ; } catch ( Exception e ) { if ( logger . debugOn ( ) ) { logger . debug ( NUM00 , NUM00 + tn . getNotification ( ) + NUM00 + NUM00 + e ) ; } return _BOOL ; } }
public void updateThroughput ( long currentTime ) { $F8934 ( throughputCalculationLock ) try { $F82462 ( interval , currentTime , lastThroughputCalculationTime ) long minInterval = getThroughputCalculationIntervalInMillis ( ) ; if ( ( minInterval == NUM00 ) || ( interval < minInterval ) ) $F932 long readBytes = this . readBytes ; long writtenBytes = this . writtenBytes ; long readMessages = this . readMessages ; long writtenMessages = this . writtenMessages ; readBytesThroughput = ( readBytes - lastReadBytes ) * NUM00 / interval ; writtenBytesThroughput = ( writtenBytes - lastWrittenBytes ) * NUM00 / interval ; readMessagesThroughput = ( readMessages - lastReadMessages ) * NUM00 / interval ; writtenMessagesThroughput = ( writtenMessages - lastWrittenMessages ) * NUM00 / interval ; $F12283 ( readBytesThroughput , largestReadBytesThroughput ) $F12283 ( writtenBytesThroughput , largestWrittenBytesThroughput ) $F12283 ( readMessagesThroughput , largestReadMessagesThroughput ) $F12283 ( writtenMessagesThroughput , largestWrittenMessagesThroughput ) lastReadBytes = readBytes ; lastWrittenBytes = writtenBytes ; lastReadMessages = readMessages ; lastWrittenMessages = writtenMessages ; lastThroughputCalculationTime = currentTime ; } $F796 ( throughputCalculationLock ) }
public List < VerificationOK > verify ( X509Certificate signCert , X509Certificate issuerCert , Date signDate ) throws GeneralSecurityException , IOException { RootStoreVerifier rootStoreVerifier = new RootStoreVerifier ( verifier ) ; rootStoreVerifier . setRootStore ( rootStore ) ; CRLVerifier crlVerifier = new CRLVerifier ( rootStoreVerifier , getCRLsFromDSS ( ) ) ; crlVerifier . setRootStore ( rootStore ) ; crlVerifier . setOnlineCheckingAllowed ( latestRevision || onlineCheckingAllowed ) ; OCSPVerifier ocspVerifier = new OCSPVerifier ( crlVerifier , getOCSPResponsesFromDSS ( ) ) ; ocspVerifier . setRootStore ( rootStore ) ; ocspVerifier . setOnlineCheckingAllowed ( latestRevision || onlineCheckingAllowed ) ; return ocspVerifier . verify ( signCert , issuerCert , signDate ) ; }
protected $F8748 testWRTZeroR ( Classifier classifier , Evaluation evaluation , Instances train , Instances test ) throws Exception { $F125783 ( result ) evaluation . evaluateModel ( classifier , test ) ; try { Classifier zeroR = new weka . classifiers . rules . ZeroR $F72 ; zeroR . buildClassifier ( train ) ; Evaluation zeroREval = new Evaluation ( train ) ; zeroREval . evaluateModel ( zeroR , test ) ; result [ NUM00 ] = Utils . grOrEq ( zeroREval . errorRate ( ) , evaluation . errorRate ( ) ) ; } catch ( Exception ex ) $F220112 ( ex ) return result ; }
public void println $F72 { if ( addNewlines ) { try $F12032 ( out ) catch ( IOException ioe ) { throw new GroovyRuntimeException ( ioe ) ; } } }
$F4058 ( doc , elementList , nameNode , child , childData , load , _BOOL , assertEquals )
public void deliveryComplete ( final IMqttDeliveryToken token ) { logger . trace ( NUM00 , token . getMessageId ( ) ) ; }
public DExportPublicKeyOpenSsl ( JFrame parent , String entryAlias ) { $F36748 ( super , parent , Dialog ) this . entryAlias = entryAlias ; initComponents ( ) ; }
public static String escapeUnicode ( String s ) { $F1749 ( len , s ) int i = NUM00 ; while ( i < len ) { $F1280 ( ch , s , i ) if ( ch > NUM00 ) { $F83 ( buf ) $F6937 ( buf , s , i ) while ( i < len ) { ch = s . charAt ( i ) ; if ( ch > NUM00 ) { $F84 ( buf ) buf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; buf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; buf . append ( Character . forDigit ( ( ch > > NUM00 ) % NUM00 , NUM00 ) ) ; buf . append ( Character . forDigit ( ( ch ) % NUM00 , NUM00 ) ) ; } else $F288 ( buf , ch ) i ++ ; } $F6947 ( s , buf ) } else { i ++ ; } } return s ; }
public void keyPressed ( final int keyCode ) { if ( impl . getCurrentForm ( ) == null ) $F932 addSingleArgumentEvent ( KEY_PRESSED , keyCode ) ; lastInteractionWasKeypad = lastInteractionWasKeypad || ( keyCode != MenuBar . leftSK && keyCode != MenuBar . clearSK && keyCode != MenuBar . backSK ) ; keyRepeatCharged = ( keyCode >= NUM00 || getGameAction ( keyCode ) > NUM00 ) || keyCode == impl . getClearKeyCode ( ) ; longPressCharged = keyRepeatCharged ; $F3224 ( longKeyPressTime , System ) keyRepeatValue = keyCode ; nextKeyRepeatEvent = System . currentTimeMillis ( ) + keyRepeatInitialIntervalTime ; previousKeyPressed = lastKeyPressed ; lastKeyPressed = keyCode ; }
public boolean isEmpty $F72 { return $F38237 ( filter , query , sort ) ; }
public $F806 readDirectory ( String dir ) { $F896 ( dir ) StringArrayOut listOut = new StringArrayOut $F72 ; try { checkResult ( LibIMobileDevice . afc_read_directory ( getRef ( ) , dir , listOut ) ) ; StringArray list = listOut . getValue ( ) ; $F8728 ( result ) if ( list != null ) { for ( $F26577 ( i ) ) { $F1729 ( s , list , i ) $F32472 ( s ) result . add ( s ) ; } } $F14862 ( result ) } finally { LibIMobileDevice . delete_StringArray_values_z ( listOut . getValue ( ) ) ; $F1900 ( listOut ) } }
public void registerInput ( String varName , JavaRDD $F4 rddIn , String format , long rlen , long clen , FileFormatProperties props , List < ValueType > schema ) throws DMLRuntimeException { if ( ! ( DMLScript . rtplatform == RUNTIME_PLATFORM . SPARK || DMLScript . rtplatform == RUNTIME_PLATFORM . HYBRID_SPARK ) ) { $F84329 } long nnz = - NUM00 ; if ( _variables == null ) _variables = new LocalVariableMap $F72 ; $F185359 ( _inVarnames ) JavaPairRDD < LongWritable , Text > rddText = rddIn . mapToPair ( new ConvertStringToLongTextPair $F72 ) ; int blksz = ConfigurationManager . getBlocksize ( ) ; MatrixCharacteristics mc = new MatrixCharacteristics ( rlen , clen , blksz , blksz , nnz ) ; FrameObject fo = null ; if $F3057 ( format ) { CSVFileFormatProperties csvprops = ( props != null ) ? ( CSVFileFormatProperties ) props : new CSVFileFormatProperties $F72 ; fo = new FrameObject ( OptimizerUtils . getUniqueTempFileName ( ) , new MatrixFormatMetaData ( mc , OutputInfo . CSVOutputInfo , InputInfo . CSVInputInfo ) ) ; fo . setFileFormatProperties ( csvprops ) ; } else if $F3057 ( format ) { if $F44600 ( rlen , clen ) { throw new DMLRuntimeException ( NUM00 + format ) ; } fo = new FrameObject ( null , new MatrixFormatMetaData ( mc , OutputInfo . TextCellOutputInfo , InputInfo . TextCellInputInfo ) ) ; } else { throw new DMLRuntimeException ( NUM00 + format ) ; } if ( props != null ) fo . setFileFormatProperties ( props ) ; fo . setRDDHandle ( new RDDObject ( rddText , varName ) ) ; fo . setSchema ( NUM00 ) ; _variables . put ( varName , fo ) ; _inVarnames . add ( varName ) ; checkIfRegisteringInputAllowed ( ) ; }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if ( argNum < NUM00 ) reportWrongNumberArgs ( ) ; }
public static String fixLineFeeds ( String sql ) { if $F8908 ( sql ) { return sql ; } boolean hasFixes = _BOOL ; $F7782 ( fixed , sql ) for ( $F1139 ( i , fixed ) ) { if ( fixed [ i ] == NUM00 && ( i == fixed . length - NUM00 || fixed [ i + NUM00 ] != NUM00 ) ) { fixed [ i ] = NUM00 ; hasFixes = _BOOL ; } } return hasFixes ? String . valueOf ( fixed ) : sql ; }
public int compareTo ( Object obj ) { int diff = - NUM00 ; if ( obj instanceof ParserNotice ) { ParserNotice p2 = ( ParserNotice ) obj ; diff = level - p2 . getLevel ( ) ; if ( diff == NUM00 ) { diff = line - p2 . getLine ( ) ; if ( diff == NUM00 ) { diff = message . compareTo ( p2 . getMessage ( ) ) ; } } } return diff ; }
public static String mergePath ( String current , String realPath ) throws MalformedURLException { String currDir ; if ( current == null || $F8907 ( current ) ) currDir = NUM00 ; else if $F8991 ( current ) currDir = current ; else currDir = current . substring ( NUM00 , $F31603 ( current ) ) ; String path ; if $F3106 ( realPath ) path = currDir + realPath . substring ( NUM00 ) ; else if $F3106 ( realPath ) path = realPath ; else if $F14943 ( realPath ) path = currDir + realPath ; else { while ( realPath . startsWith ( NUM00 ) || $F1276 ( currDir ) ) { $F3108 ( realPath ) $F8993 ( currDir ) $F24867 ( index , currDir ) if ( index == - NUM00 ) throw new MalformedURLException $F580 ; currDir = $F1399 ( currDir , index ) ; } path = currDir + realPath ; } return path ; }
public void rollback $F72 throws SQLException { if ( useConnection == null ) $F23406 ( LOG ) try $F21746 ( useConnection ) catch ( SQLException e ) { LOG . warning ( $F5351 ( e ) ) ; throw e ; } }
public $F96 toByteArray $F72 { if ( headerNonce_ == null || headerTag_ == null ) { throw new AwsCryptoException $F580 ; } final $F96 serializedFields = serializeAuthenticatedFields ( ) ; final int outLen = $F118127 ( serializedFields , headerNonce_ , headerTag_ ) ; $F14256 ( serializedBytes , ByteBuffer , outLen ) serializedBytes . put ( serializedFields ) ; serializedBytes . put ( headerNonce_ ) ; serializedBytes . put ( headerTag_ ) ; $F31057 ( serializedBytes ) }
public boolean containsKey ( Object key ) { return context . getAttribute ( ( String ) key ) != null ; }
private void updateLimit ( int limit ) { currentCycle . setLimit ( limit ) ; updatePlanCycles ( ) ; confirmUpdate . setTextColor ( resources . getColor ( R . color . light_gray ) ) ; }
$F1431 public Set $F50398 descendants $F72 { Set $F50398 $F9626 ( perms ) ; for ( S child : children ) { perms . add ( child ) ; perms . addAll ( child . descendants ( ) ) ; } return perms ; }
private String extractUrl ( String sharedUrl ) { String finalUrl ; $F206094 ( finalUrl , sharedUrl ) $F6542 ( possible_urls , finalUrl ) for ( String url : possible_urls ) { if ( NetworkManager . isUrl ( url ) ) $F3468 ( finalUrl , url ) } finalUrl = $F31604 ( finalUrl ) ; finalUrl = $F31604 ( finalUrl ) ; if ( NetworkManager . isUrl ( NUM00 + finalUrl ) && ! NetworkManager . isUrl ( finalUrl ) ) $F21679 ( finalUrl ) if $F3578 ( finalUrl ) { $F31601 ( finalUrl ) } if $F3578 ( finalUrl ) { $F31601 ( finalUrl ) } if $F3578 ( finalUrl ) { $F31601 ( finalUrl ) } return finalUrl ; }
public Set entrySet $F72 { return map . entrySet ( ) ; }
public static String encode ( String input ) { return Base64 . encodeBase64String ( $F43004 ( input , StandardCharsets ) ) ; }
$F31396 ( str , retval , ch , i , s , Integer )
public void addSplit ( String splitLabel ) { $F5453 ( mDisabled ) $F68120 ( now , SystemClock ) mSplits . add ( now ) ; mSplitLabels . add ( splitLabel ) ; }
protected String encode ( final String value ) { try $F31978 ( URLEncoder , value ) catch ( Exception exp ) { return value ; } }
private void checkConnectPermission $F72 throws SecurityException { $F8108 ( security , System ) $F8249 ( security ) if ( security != cacheSecurityManager ) { okContext = null ; authcache = new WeakHashMap < AccessControlContext , Reference < AccessControlContext > > $F72 ; cacheSecurityManager = security ; } AccessControlContext ctx = AccessController . getContext ( ) ; if ( okContext == null || ! ( okContext . equals ( ctx ) || authcache . containsKey ( ctx ) ) ) { security . checkConnect ( ep . getHost ( ) , ep . getPort ( ) ) ; authcache . put ( ctx , new SoftReference < AccessControlContext > ( ctx ) ) ; } okContext = ctx ; }
private boolean conditionL0 ( String value , int index ) { if ( $F19341 ( index , value ) && contains ( value , index - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ) { return _BOOL ; } else if ( ( contains ( value , index - NUM00 , NUM00 , NUM00 , NUM00 ) || contains ( value , $F1092 ( value ) , NUM00 , NUM00 , NUM00 ) ) && contains ( value , index - NUM00 , NUM00 , NUM00 ) ) { return _BOOL ; } else { return _BOOL ; } }
public static PaginationContext fromContext ( RoutingContext context ) { HttpServerRequest request = context . request ( ) ; String pageStr = request . getParam ( PaginationContext . CURRENT_PAGE_QUERY_PARAM ) ; String perPageStr = request . getParam ( PaginationContext . PER_PAGE_QUERY_PARAM ) ; Integer page = null ; Integer perPage = null ; try { if ( pageStr != null ) $F37473 ( page , Integer , pageStr ) if ( perPageStr != null ) $F37473 ( perPage , Integer , perPageStr ) } catch ( NumberFormatException e ) { DefaultErrorHandler . badRequest ( context , NUM00 ) ; } if ( perPage != null && perPage > PaginationContext . MAX_PER_PAGE ) { DefaultErrorHandler . badRequest ( context , NUM00 + PaginationContext . PER_PAGE_QUERY_PARAM + NUM00 + PaginationContext . MAX_PER_PAGE ) ; } return new PaginationContext ( page , perPage ) ; }
private void updateDataTypeState $F72 { boolean isSyncEnabled = mSyncSwitchPreference . isChecked ( ) ; boolean syncEverything = mSyncEverything . isChecked ( ) ; boolean passwordSyncConfigurable = mProfileSyncService . isBackendInitialized ( ) && mProfileSyncService . isCryptographerReady ( ) ; for ( CheckBoxPreference pref : mAllTypes ) { boolean canSyncType = pref != mSyncPasswords || passwordSyncConfigurable ; if ( ! isSyncEnabled ) { pref . setChecked ( _BOOL ) ; } else if ( syncEverything ) { pref . setChecked ( canSyncType ) ; } pref . setEnabled ( isSyncEnabled && ! syncEverything && canSyncType ) ; } if ( isSyncEnabled && ! syncEverything ) { $F11868 syncTypes = mProfileSyncService . getPreferredDataTypes ( ) ; mSyncAutofill . setChecked ( syncTypes . contains ( ModelType . AUTOFILL ) ) ; mSyncBookmarks . setChecked ( syncTypes . contains ( ModelType . BOOKMARKS ) ) ; mSyncOmnibox . setChecked ( syncTypes . contains ( ModelType . TYPED_URLS ) ) ; mSyncPasswords . setChecked ( passwordSyncConfigurable && syncTypes . contains ( ModelType . PASSWORDS ) ) ; mSyncRecentTabs . setChecked ( syncTypes . contains ( ModelType . PROXY_TABS ) ) ; mSyncSettings . setChecked ( syncTypes . contains ( ModelType . PRIORITY_PREFERENCES ) ) ; } }
public static void writeProteinBestMatchesToFile ( String filePath , Map $F186135 proteinIdBestMatchMap ) throws IOException { BufferedWriter writer = null ; try { File file = createTmpFile ( filePath ) ; if $F1906 ( file ) $F1155 ( filePath ) $F92873 ( writer , file ) for ( $F3465 ( proteinId , proteinIdBestMatchMap ) ) { PIRSFHmmer2RawMatch bestMatch = proteinIdBestMatchMap . get ( proteinId ) ; if ( bestMatch != null ) { writer . write ( proteinId ) ; $F3410 ( writer ) writer . write ( bestMatch . getModelId ( ) ) ; $F3410 ( writer ) writer . write ( bestMatch . getSignatureLibraryRelease ( ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationStart ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationEnd ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getEvalue ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getScore ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getHmmStart ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getHmmEnd ( ) ) ) ; $F3410 ( writer ) writer . write ( bestMatch . getHmmBounds ( ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationEvalue ( ) ) ) ; $F3410 ( writer ) writer . write ( String . valueOf ( bestMatch . getLocationScore ( ) ) ) ; $F3410 ( writer ) } } } $F14364 ( writer ) }
$F22713 ( newVector , Collections , super )
void refreshUI ( String xml , DOMTree m_tree ) { if ( $F130157 ( xml ) ) { setErrorMessage ( NUM00 , NUM00 ) ; $F665 } final Document newRoot = getRoot ( xml ) ; if ( newRoot == null ) { setErrorMessage ( NUM00 , NUM00 ) ; $F665 } m_tree . setDocument ( newRoot ) ; }
private void cleanupProtectionSetVolumes ( ProtectionSet protectionSet , $F3803 volumeIDs , boolean markProtectionSetForDeletion ) { if ( protectionSet != null ) { _log . info ( NUM00 , protectionSet . getLabel ( ) , volumeIDs . toString ( ) ) ; StringSet psetVolumes = protectionSet . getVolumes ( ) ; psetVolumes . removeAll ( volumeIDs ) ; protectionSet . setVolumes ( psetVolumes ) ; if ( markProtectionSetForDeletion ) { protectionSet . setInactive ( _BOOL ) ; } _dbClient . updateObject ( protectionSet ) ; } }
private static Normalization determineNormalization ( Element model ) { Normalization normMethod = Normalization . NONE ; $F9031 ( normName , model ) if $F3057 ( normName ) { normMethod = Normalization . SIMPLEMAX ; } else if $F3057 ( normName ) { normMethod = Normalization . SOFTMAX ; } else if $F3057 ( normName ) { normMethod = Normalization . LOGIT ; } else if $F3057 ( normName ) { normMethod = Normalization . PROBIT ; } else if $F3057 ( normName ) { normMethod = Normalization . CLOGLOG ; } else if $F3057 ( normName ) { normMethod = Normalization . EXP ; } else if $F3057 ( normName ) { normMethod = Normalization . LOGLOG ; } else if $F3057 ( normName ) { normMethod = Normalization . CAUCHIT ; } return normMethod ; }
Operand pop ( Register s ) { Stack < Operand > stack = get ( s ) ; if ( stack == null ) { throw new OptimizingCompilerException $F580 ; } else { return stack . pop ( ) ; } }
$F1 public void startElement $F42838 ( uri , localName , qName , attributes ) throws SAXException { elementValue = new StringBuilder $F580 ; elementOn = _BOOL ; if $F1238 ( localName , ITEM_TITLE ) { episode = new Episode $F72 ; isItem = _BOOL ; } if ( localName . equalsIgnoreCase ( MP3_1 ) && isItem ) { episode . setLength ( attributes . getValue ( LENGTH ) ) ; episode . setAudeoUrl ( attributes . getValue ( MP3_3 ) ) ; } }
public static void backAndForth ( HGSearchResult $F1011 rs , int windowSize , int iteration ) { boolean advance = _BOOL ; for ( $F119 ( i , iteration ) ) { Object x = rs . current ( ) ; int steps = random ( windowSize ) ; steps = forward ( rs , steps ) ; if ( back ( rs , steps ) != steps ) throw new RuntimeException ( NUM00 + steps + NUM00 ) ; if ( ! x . equals ( rs . current ( ) ) ) throw new RuntimeException ( NUM00 + steps + NUM00 + x ) ; if ( advance ) { forward ( rs , random ( windowSize ) ) ; if $F87568 ( rs ) { back ( rs , random ( windowSize ) ) ; advance = _BOOL ; } } else { back ( rs , random ( windowSize ) ) ; if ( ! rs . hasPrev ( ) ) { forward ( rs , random ( windowSize ) ) ; advance = _BOOL ; } } } }
$F1 public void close $F72 throws IOException { synchronized ( lock ) { $F195699 ( decoder ) decoder = null ; $F39863 ( in ) } }
public $F3803 provideWhiteList $F72 { $F127233 ( whiteList ) $F18793 ( whiteList ) return whiteList ; }
public boolean hasName ( final String name ) { for ( final String n : names ) $F72434 ( n , name , _BOOL ) return _BOOL ; }
$F1 public Double zincrby ( final String key , final double score , final String member ) { checkIsInMultiOrPipeline ( ) ; client . zincrby ( key , score , member ) ; String newscore = client . getBulkReply ( ) ; $F33236 ( Double , newscore ) }
private StringBuffer _toPattern ( StringBuffer result , boolean escapeUnprintable ) { if ( pat != null ) { int i ; int backslashCount = NUM00 ; for ( i = NUM00 ; i < pat . length ( ) ; ) { int c = UTF16 . charAt ( pat , i ) ; i += UTF16 . getCharCount ( c ) ; if ( escapeUnprintable && Utility . isUnprintable ( c ) ) { if $F91889 ( backslashCount ) { $F90455 ( result ) } Utility . escapeUnprintable ( result , c ) ; backslashCount = NUM00 ; } else { UTF16 . append ( result , c ) ; if ( c == NUM00 ) { ++ backslashCount ; } else { backslashCount = NUM00 ; } } } return result ; } return _generatePattern ( result , escapeUnprintable , _BOOL ) ; }
private static Version readWorkspaceVersion ( final URL workspace ) { final File versionFile = getVersionFile ( workspace , _BOOL ) ; if $F7108 ( versionFile ) $F1337 try { $F859 ( props ) $F197755 ( is , versionFile ) try $F46567 ( props , is ) $F3229 ( is ) $F7601 ( versionString , props , WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME ) if ( versionString != null ) { return Version . parseVersion ( versionString ) ; } versionString = props . getProperty ( WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME_LEGACY ) ; if ( versionString != null ) { return Version . parseVersion ( versionString ) ; } $F1274 } catch ( final IOException e ) { IDEWorkbenchPlugin . log ( NUM00 + versionFile , new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , IStatus . ERROR , e . getMessage ( ) == null ? NUM00 : e . getMessage ( ) , e ) ) ; $F1274 } catch ( final IllegalArgumentException e ) { IDEWorkbenchPlugin . log ( NUM00 + versionFile , new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , IStatus . ERROR , e . getMessage ( ) == null ? NUM00 : e . getMessage ( ) , e ) ) ; $F1274 } }
public VectorApproximation calculateApproximation ( DBID id , V dv ) { $F2027 approximation = new int [ dv . getDimensionality ( ) ] ; for ( $F1139 ( d , splitPositions ) ) { $F42661 ( val , dv , d ) final int lastBorderIndex = splitPositions [ d ] . length - NUM00 ; if ( val < splitPositions [ d ] [ NUM00 ] ) { approximation [ d ] = NUM00 ; if ( id != null ) $F18144 ( LOG ) } else if ( val > splitPositions [ d ] [ lastBorderIndex ] ) { approximation [ d ] = lastBorderIndex - NUM00 ; if ( id != null ) $F18144 ( LOG ) } else { int pos = Arrays . binarySearch ( splitPositions [ d ] , val ) ; pos = ( pos >= NUM00 ) ? pos : ( ( - pos ) - NUM00 ) ; approximation [ d ] = pos ; } } return new VectorApproximation ( id , approximation ) ; }
private boolean checkIfVolumeSizeExceedingPoolSize ( $F50603 inArgs , $F50603 outArgs ) { if ( getVolumeSize ( inArgs ) > getVolumeSize ( outArgs ) ) { return _BOOL ; } return _BOOL ; }
$F1431 private void log ( String label , ByteBuffer buffer ) { $F83 ( sb ) sb . append ( label ) ; $F84 ( sb ) $F189697 ( sb , buffer ) $F84 ( sb ) for ( $F6268 ( x ) ) { sb . append ( String . format ( NUM00 , ( int ) ( buffer . get ( x ) & NUM00 ) ) ) ; $F84 ( sb ) } $F62755 ( mLog , sb ) }
private void readObject ( ObjectInputStream ois ) throws $F125668 { $F6428 ( ois ) $F6622 ( hasFont , ois ) if ( hasFont ) { String $F128845 ( name , ois ) ; $F5952 ( size , ois ) $F5952 ( style , ois ) font = new Font ( name , style , size ) ; } else { font = OMText . DEFAULT_FONT ; } }
public void addFile ( String filename ) { if ( filename != null ) $F1250 ( addFile , filename ) ; }
public String format ( TemporalAccessor temporal ) { $F20818 ( buf ) formatTo ( temporal , buf ) ; $F92 ( buf ) }
public void paintToggleButtonBackground $F147434 ( context , g , x , y , w , h ) $F72336 ( paintBackground , context , g , x , y , w , h )
void saveDeviceProfile ( $F2304 String user , $F2304 String realm , $F2304 OathDeviceSettings deviceSettings ) throws AuthLoginException { Reject . ifNull ( user , realm , deviceSettings ) ; try { devicesDao . saveDeviceProfiles ( user , realm , jsonUtils . toJsonValues ( Collections . singletonList ( deviceSettings ) ) ) ; } catch ( IOException e ) { debug . error ( NUM00 , user , realm , e ) ; throw new AuthLoginException ( e ) ; } }
protected $F3803 parametersToStringList ( $F292037 parameters ) { $F24645 ( list ) for ( Parameter parameter : parameters ) { list . add ( String . format ( NUM00 , parameter . getName ( ) , parameter . getValue ( ) ) ) ; } return list ; }
public static boolean isMatchingName ( String nameA , String nameB ) { $F1749 ( a , nameA ) $F1749 ( b , nameB ) if ( a == b ) $F23588 ( nameA , nameB ) else if ( a < b - NUM00 ) { return nameB . endsWith ( nameA ) && nameB . charAt ( b - a - NUM00 ) == NUM00 ; } else if ( b < a - NUM00 ) { return nameA . endsWith ( nameB ) && nameA . charAt ( a - b - NUM00 ) == NUM00 ; } else { return _BOOL ; } }
private void validateWill ( String dest , Object payload ) { if $F54923 ( dest , payload ) $F26853 MqttAsyncClient . validateTopic ( dest ) ; }
public static float ccpCalcRotate ( final CGPoint from , final CGPoint to ) { float o = to . x - from . x ; float a = to . y - from . y ; float at = ccMacros . CC_RADIANS_TO_DEGREES ( ( float ) Math . atan ( o / a ) ) ; if ( a < NUM00 ) { if ( o < NUM00 ) at = NUM00 + Math . abs ( at ) ; else at = NUM00 - Math . abs ( at ) ; } return at ; }
public static String cleanTabs ( String yaml ) { if $F3578 ( yaml ) { LOGGER . warn ( $F38 , TAB_AS_SPACES . length ( ) ) ; $F3803 lines = NEWLINE_SPLITTER . splitToList ( yaml ) ; $F83 ( sb ) for ( String line : lines ) { String cleanLine = replaceStartingTabsWithSpaces ( line ) ; sb . append ( cleanLine ) ; $F84 ( sb ) } $F92 ( sb ) } else { return yaml ; } }
private static Paint darkerRadialGradientPaint ( RadialGradientPaint paint ) { final $F197086 paintColors = paint . getColors ( ) ; for ( $F1139 ( i , paintColors ) ) { paintColors [ i ] = darker ( paintColors [ i ] ) ; } return new RadialGradientPaint ( paint . getCenterPoint ( ) , paint . getRadius ( ) , paint . getFocusPoint ( ) , paint . getFractions ( ) , paintColors , paint . getCycleMethod ( ) , paint . getColorSpace ( ) , paint . getTransform ( ) ) ; }
private void checkAndSetFastPathStatus $F72 { boolean fastPathWasOn = isFastPath ; if ( ( roundingMode == RoundingMode . HALF_EVEN ) && ( isGroupingUsed ( ) ) && ( groupingSize == NUM00 ) && ( multiplier == NUM00 ) && ( ! decimalSeparatorAlwaysShown ) && ( ! useExponentialNotation ) ) { isFastPath = ( ( minimumIntegerDigits == NUM00 ) && ( maximumIntegerDigits >= NUM00 ) ) ; if ( isFastPath ) { if ( isCurrencyFormat ) { if $F264250 ( minimumFractionDigits , maximumFractionDigits ) isFastPath = _BOOL ; } else if $F264250 ( minimumFractionDigits , maximumFractionDigits ) isFastPath = _BOOL ; } } else isFastPath = _BOOL ; if ( isFastPath ) { if ( fastPathData == null ) fastPathData = new FastPathData $F72 ; fastPathData . zeroDelta = symbols . getZeroDigit ( ) - NUM00 ; fastPathData . groupingChar = symbols . getGroupingSeparator ( ) ; fastPathData . fractionalMaxIntBound = ( isCurrencyFormat ) ? NUM00 : NUM00 ; fastPathData . fractionalScaleFactor = ( isCurrencyFormat ) ? NUM00 : NUM00 ; fastPathData . positiveAffixesRequired = $F35625 ( positivePrefix ) || $F35625 ( positiveSuffix ) ; fastPathData . negativeAffixesRequired = $F35625 ( negativePrefix ) || $F35625 ( negativeSuffix ) ; int maxNbIntegralDigits = NUM00 ; int maxNbGroups = NUM00 ; int containerSize = Math . max ( positivePrefix . length ( ) , negativePrefix . length ( ) ) + maxNbIntegralDigits + maxNbGroups + NUM00 + maximumFractionDigits + Math . max ( positiveSuffix . length ( ) , negativeSuffix . length ( ) ) ; fastPathData . fastPathContainer = new char [ containerSize ] ; fastPathData . charsPositiveSuffix = positiveSuffix . toCharArray ( ) ; fastPathData . charsNegativeSuffix = negativeSuffix . toCharArray ( ) ; fastPathData . charsPositivePrefix = positivePrefix . toCharArray ( ) ; fastPathData . charsNegativePrefix = negativePrefix . toCharArray ( ) ; int longestPrefixLength = Math . max ( positivePrefix . length ( ) , negativePrefix . length ( ) ) ; int decimalPointIndex = maxNbIntegralDigits + maxNbGroups + longestPrefixLength ; fastPathData . integralLastIndex = decimalPointIndex - NUM00 ; fastPathData . fractionalFirstIndex = decimalPointIndex + NUM00 ; fastPathData . fastPathContainer [ decimalPointIndex ] = isCurrencyFormat ? symbols . getMonetaryDecimalSeparator ( ) : symbols . getDecimalSeparator ( ) ; } else if ( fastPathWasOn ) { fastPathData . fastPathContainer = null ; fastPathData . charsPositiveSuffix = null ; fastPathData . charsNegativeSuffix = null ; fastPathData . charsPositivePrefix = null ; fastPathData . charsNegativePrefix = null ; } fastPathCheckNeeded = _BOOL ; }
public void test_keyBuilder_ascii_order $F72 { KeyBuilder keyBuilder = ( KeyBuilder ) KeyBuilder . newInstance ( ) ; KVO $F4 [ ] a = new KVO [ ] { new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) , new KVO $F4 ( TestKeyBuilder . asSortKey ( NUM00 ) , null , NUM00 ) } ; Arrays . sort ( a ) ; assertEquals ( NUM00 , a [ NUM00 ] . obj ) ; assertEquals ( NUM00 , a [ NUM00 ] . obj ) ; assertEquals ( NUM00 , a [ NUM00 ] . obj ) ; assertEquals ( NUM00 , a [ NUM00 ] . obj ) ; }
public boolean isClickTouchScreen $F72 { String s = DeviceInfo . getSoftwareVersion ( ) ; if $F4012 ( s ) { $F215024 ( v , Integer , s ) return v <= NUM00 ; } return _BOOL ; }
public DOMTestDocumentBuilderFactory newInstance $F230110 ( newSettings ) throws DOMTestIncompatibleException { $F1933 ( newSettings , this ) $F230109 mergedSettings = mergeSettings ( newSettings ) ; return new LSDocumentBuilderFactory ( mergedSettings ) ; }
public void reset $F72 { index = NUM00 ; if ( file != null ) { listIndex = NUM00 ; if ( ! written ) $F62354 ( writeAllRows , written , _BOOL ) $F725 ( list ) file . seek ( FileStore . HEADER_LENGTH ) ; } }
public void add ( GeometryFunction func ) { functions . add ( func ) ; $F20063 ( sortedFunctions , func ) categorizedFunctions . put ( func . getCategory ( ) , func . getName ( ) , func ) ; if ( hasGeometryResult ( func ) ) categorizedGeometryFunctions . put ( func . getCategory ( ) , func . getName ( ) , func ) ; }
public void fireStateChanged $F72 { ChangeEvent e = new ChangeEvent ( this ) ; for ( ChangeListener listener : listeners ) { listener . stateChanged ( e ) ; } }
public static Clusters convertToClusters ( Graph clusterGraph , $F27878 measuredVariables ) { $F24645 ( latents ) Clusters clusters = new Clusters $F72 ; clusterGraph = GraphUtils . replaceNodes ( clusterGraph , measuredVariables ) ; for ( $F23283 ( node , clusterGraph ) ) { if $F2200 ( measuredVariables , node ) $F29791 ( latents , node ) } Collections . sort ( latents ) ; for ( $F2277 ( i , latents ) ) { $F1729 ( name , latents , i ) clusters . setClusterName ( i , name ) ; Node latent = clusterGraph . getNode ( name ) ; $F27878 measured = clusterGraph . getNodesOutTo ( latent , Endpoint . ARROW ) ; for ( Node _node : measured ) { if $F105 ( measuredVariables , _node ) { clusters . addToCluster ( i , _node . getName ( ) ) ; } } } return clusters ; }
final short rlshort ( DataInputStream dis ) throws IOException { short s = NUM00 ; short high , low ; $F11214 ( s , dis ) high = ( short ) $F74254 ( s ) ; low = ( short ) ( ( s & NUM00 ) > > > NUM00 ) ; s = ( short ) ( high | low ) ; return s ; }
public void encodeCell ( mxICell cell , Node node , boolean includeChildren ) { node . appendChild ( encode ( cell ) ) ; if ( includeChildren ) { $F192758 ( childCount , cell ) for ( $F119 ( i , childCount ) ) { encodeCell ( cell . getChildAt ( i ) , node , includeChildren ) ; } } }
public DateTimeFormatter withLocale ( Locale locale ) { if ( locale == getLocale ( ) || ( locale != null && $F19068 ( locale , getLocale ) ) ) { return this ; } return new DateTimeFormatter ( iPrinter , iParser , locale , iOffsetParsed , iChrono , iZone , iPivotYear , iDefaultYear ) ; }
public void testIterate $F72 { $F271415 ( range , createRange ) int next = NUM00 ; $F242733 ( iter , range ) while $F2921 ( iter ) { final Object value = iter . next ( ) ; assertEquals ( NUM00 , createValue ( next ++ ) , value ) ; } assertEquals ( NUM00 , NUM00 , next ) ; try { $F24630 ( iter ) fail ( NUM00 ) ; } catch ( NoSuchElementException ignore ) $F845 }
public String nextString ( char quote ) throws JSONException { char c ; $F83 ( sb ) for ( $F589 ) { c = next ( ) ; switch ( c ) { $F3366 $F1262 $F1262 throw syntaxError ( NUM00 ) ; $F1262 c = next ( ) ; switch ( c ) { $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F2999 ( sb ) $F1262 sb . append ( ( char ) Integer . parseInt ( next ( NUM00 ) , NUM00 ) ) ; $F597 $F1262 $F1262 $F1262 $F1262 sb . append ( c ) ; $F597 $F248192 ( syntaxError ) } $F597 $F1267 if ( c == quote ) $F2495 ( sb ) sb . append ( c ) ; } } }
public static Response parseXML ( String xml ) throws SAMLException { Document doc = XMLUtils . toDOMDocument ( xml , SAMLUtils . debug ) ; $F9029 ( root , doc ) return new Response ( root ) ; }
$F3874 ( tag , msg , args , sLevel , LEVEL_DEBUG , String , Log )
public CompiledSQL registerParamType ( String paramName , String dataType ) { $F12777 ( paramTypes ) paramTypes . put ( paramName , dataType ) ; return this ; }
public void beginStep ( int step , String stepTitle , Logging logger ) { setProcessed ( step - NUM00 ) ; this . stepTitle = stepTitle ; logger . progress ( this ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return _BOOL ; } else if ( ! ( obj instanceof MethodDesc ) ) { return _BOOL ; } MethodDesc od = ( MethodDesc ) obj ; return ( $F389590 ( name , od ) && $F3629 ( Arrays , types , od ) && $F389590 ( constraints , od ) ) ; }
public $F2689 addContent ( DialogueState newState ) { if ( ! paused ) { curState . addToState ( newState ) ; return update ( ) ; } else $F31719 ( log , newState , Collections ) }
public long removeIndex ( int index ) { if ( index >= size ) throw new IndexOutOfBoundsException $F45942 ( String , index ) ; $F2469 items = this . items ; long value = items [ index ] ; size -- ; if ( ordered ) $F108014 ( System , items , index , size ) else items [ index ] = items [ size ] ; return value ; }
public FDModel loadModel ( String filename , String cwd ) { String fn = filename ; $F1275 ( fn ) if ( ! fn . endsWith ( NUM00 + fileExtension ) ) { fn += NUM00 + fileExtension ; } ModelPersistenceHandler persistenceHandler = $F47063 ( createModelPersistenceHandler , resourceSetProvider ) ; return ( FDModel ) persistenceHandler . loadModel ( fn , cwd ) ; }
public boolean saveCurrentConfiguration $F72 { if ( currentConfig . toString ( ) == null ) $F3139 ( _BOOL ) int answer = JOptionPane . showConfirmDialog ( null , NUM00 , NUM00 , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , Icons . getImageIcon ( NUM00 ) ) ; if ( answer == JOptionPane . CANCEL_OPTION ) $F3139 ( _BOOL ) else if ( answer == JOptionPane . NO_OPTION ) $F3139 ( _BOOL ) return ( saveCurrentConfigurationAs ( _BOOL ) ) ; }
public static $F1986 normalise $F9830 ( initProbs ) { for ( $F1139 ( i , initProbs ) ) { if ( initProbs [ i ] < NUM00 ) $F5629 ( initProbs , i ) } double sum = NUM00 ; for ( double prob : initProbs ) { sum += prob ; } $F40939 ( result , initProbs ) if ( sum > NUM00 ) { for ( $F1139 ( i , initProbs ) ) { result [ i ] = initProbs [ i ] / sum ; } } else { for ( $F1139 ( i , initProbs ) ) { result [ i ] = NUM00 / initProbs . length ; } } return result ; }
public void track ( File file , Object marker , FileDeleteStrategy deleteStrategy ) { $F896 ( file ) addTracker ( file . getPath ( ) , marker , deleteStrategy ) ; }
protected StringBuilder appendSearchStringParamIfNecessary ( StringBuilder sb ) { String searchStringParam = getEncodedSearchStringParam ( ) ; if ( searchStringParam != null ) { if $F8908 ( sb ) $F86 ( sb ) else $F86 ( sb ) sb . append ( searchStringParam ) ; } return sb ; }
public static ClassInfo findOrCreateClass ( String fullName ) { ClassInfo u = findClass ( fullName ) ; if ( u == null ) { u = new ClassInfo ( fullName ) ; if $F6974 ( u ) { findOrCreateClass ( fullName . substring ( NUM00 ) ) ; } } return u ; }
PlaPointRational ( BigInteger p_x , BigInteger p_y , BigInteger p_z ) { rp_x = p_x ; rp_y = p_y ; rp_z = p_z ; is_nan = p_z . signum ( ) <= NUM00 ; }
public boolean isNullValue $F72 { return StringUtils . trimToNull ( value ) == null && StringUtils . trimToNull ( comment ) == null ; }
private Map < Long , Pair $F12294 > recoverPendingLargeMessages $F72 throws Exception { Map < Long , Pair $F12294 > $F8690 ( largeMessages ) ; $F3803 filenames = largeMessagesFactory . listFiles ( NUM00 ) ; $F27145 $F204 ( idList ) ; for ( String filename : filenames ) { Long id = getLargeMessageIdFromFilename ( filename ) ; if $F2200 ( largeMessagesToDelete , id ) { idList . add ( id ) ; SequentialFile seqFile = largeMessagesFactory . createSequentialFile ( filename ) ; $F14662 ( size , seqFile ) largeMessages . put ( id , $F24652 ( filename , size ) ) ; } } return largeMessages ; }
private void checkForFragmentID ( Attributes attributes ) { if ( ! m_shouldProcess ) { if ( $F272757 ( attributes , m_fragmentIDString ) ) { $F19322 ( n , attributes ) for ( $F119 ( i , n ) ) { String name = attributes . getQName ( i ) ; if ( name . equals ( Constants . ATTRNAME_ID ) ) { $F62203 ( val , attributes , i ) if $F8397 ( val , m_fragmentIDString ) { m_shouldProcess = _BOOL ; m_fragmentID = m_elementID ; } } } } } }
public void unparsedEntityDecl ( String name , XMLResourceIdentifier identifier , String notation , Augmentations augs ) throws XNIException { try { if ( fDTDHandler != null ) { String publicId = identifier . getPublicId ( ) ; String systemId = fResolveDTDURIs ? identifier . getExpandedSystemId ( ) : identifier . getLiteralSystemId ( ) ; fDTDHandler . unparsedEntityDecl ( name , publicId , systemId , notation ) ; } } $F122277 ( e ) }
public void waitForPaxosToFinish $F72 { $F8934 ( proposeLock ) canPropose . awaitUninterruptibly ( ) ; $F704 ( proposeLock ) }
public static ResponseData parse ( String responseData ) { $F1384 ( index , responseData ) String mainData , extraData ; $F151471 ( index , mainData , responseData , extraData ) $F151475 ( fields , TextUtils , mainData , Pattern ) if $F8830 ( fields ) $F825 $F151481 ( data ) data . extra = extraData ; $F151483 ( data , Integer , fields ) $F151485 ( data , Integer , fields ) $F151486 ( data , fields ) $F151487 ( data , fields ) $F151488 ( data , fields ) $F151490 ( data , Long , fields ) return data ; }
public static $F1986 vectorBoxCorner ( $F1986 center , $F1986 result , double distance , boolean upperRight ) { if ( result == null || result . length != center . length ) { $F14238 ( result , center ) } if ( upperRight == _BOOL ) $F52810 ( distance ) distance = SIN_PI_DIV_4 * distance ; for ( $F1139 ( i , center ) ) { result [ i ] = center [ i ] + distance ; } return result ; }
public void testSetLoginConfigAdding $F72 throws Exception { String xml = WEBAPP_TEST_HEADER + NUM00 ; $F168856 ( webXml , WebXmlIo , xml , getEntityResolver ) WebXmlUtils . setLoginConfig ( webXml , NUM00 , NUM00 ) ; assertTrue ( WebXmlUtils . hasLoginConfig ( webXml ) ) ; assertEquals ( NUM00 , WebXmlUtils . getLoginConfigAuthMethod ( webXml ) ) ; }
public void validate $F72 throws AMConsoleException { if ( isSelected ( ) ) { if ( isPersonalQuestion ( ) ) { if ( $F1277 ( question ) || $F1277 ( answer ) ) $F21549 } else { if $F1277 ( answer ) $F21549 } } }
public static void assertTrue ( boolean b , Object message ) { $F42258 ( b , throwError , message ) }
private $F806 spliterator ( String phrase ) { $F83044 ( split , phrase ) $F112797 ( out , split ) for ( $F1139 ( ix , split ) ) { String temp = split [ ix - NUM00 ] ; temp += NUM00 + split [ ix ] ; out [ ix - NUM00 ] = temp ; } return out ; }
protected Signature ( String algorithm ) $F6988 ( this , algorithm )
private final void augmentTokenList $F72 { Token [ ] temp = new Token [ size + increment ] ; $F135 ( System , tokenList , temp , size ) size += increment ; tokenList = temp ; for ( $F119 ( i , increment ) ) { tokenList [ size - i - NUM00 ] = createInternalUseOnlyToken ( ) ; } }
public String calculateFromString ( String data ) throws Exception { $F55588 ( log , algoURI , data ) return $F197037 ( calculateFromBytes , data , StandardCharsets ) ; }
public void addChannels ( $F447755 channels ) { for ( Channel channel : channels ) { addChannel ( channel ) ; } }
public static $F806 mergeStringArrays $F159246 ( array1 , array2 ) { $F46019 ( ObjectUtils , array1 , array2 ) $F46019 ( ObjectUtils , array2 , array1 ) $F10144 ( result ) $F9629 ( result , Arrays , array1 ) for ( String str : array2 ) $F2202 ( result , str ) return toStringArray ( result ) ; }
public void testRunAfterBoth_exceptionalCompletion $F72 throws Throwable { for ( $F40424 ( m , ExecutionMode ) ) for ( $F2703 ( fFirst , _BOOL ) ) for ( $F2703 ( failFirst , _BOOL ) ) for ( $F127409 ( v1 ) ) { $F127411 ( f ) $F127411 ( g ) $F181556 ( ex ) final Noop r1 = new Noop ( m ) ; final Noop r2 = new Noop ( m ) ; final Noop r3 = new Noop ( m ) ; final $F70219 fst = fFirst ? f : g ; final $F70219 snd = ! fFirst ? f : g ; $F159507 ( complete1 , failFirst ) $F159507 ( complete2 , failFirst ) final $F159508 h1 = m . runAfterBoth ( f , g , r1 ) ; $F159512 ( assertTrue , complete1 ) final $F159508 h2 = m . runAfterBoth ( f , g , r2 ) ; checkIncomplete ( h1 ) ; checkIncomplete ( h2 ) ; $F159512 ( assertTrue , complete2 ) final $F159508 h3 = m . runAfterBoth ( f , g , r3 ) ; checkCompletedWithWrappedException ( h1 , ex ) ; checkCompletedWithWrappedException ( h2 , ex ) ; checkCompletedWithWrappedException ( h3 , ex ) ; $F159513 ( r1 ) $F159513 ( r2 ) $F159513 ( r3 ) checkCompletedNormally ( failFirst ? snd : fst , v1 ) ; checkCompletedExceptionally ( failFirst ? fst : snd , ex ) ; } }
private double damp ( double value ) { $F41531 ( Math , value ) }
public void addMeasurement ( double measurement ) { double keepConstant = NUM00 - mDecayConstant ; if ( mCount > mCutover ) { mValue = Math . exp ( keepConstant * Math . log ( mValue ) + mDecayConstant * Math . log ( measurement ) ) ; } else if ( mCount > NUM00 ) { double retained = keepConstant * mCount / ( mCount + NUM00 ) ; double newcomer = NUM00 - retained ; mValue = Math . exp ( retained * Math . log ( mValue ) + newcomer * Math . log ( measurement ) ) ; } else { mValue = measurement ; } mCount ++ ; }
$F1431 private String nextUnquotedValue $F72 throws IOException { StringBuilder builder = null ; int i = NUM00 ; findNonLiteralCharacter : while ( _BOOL ) { for ( ; pos + i < limit ; i ++ ) { switch ( buffer [ pos + i ] ) { $F1262 $F1262 $F1262 $F1262 $F1262 checkLenient ( ) ; $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 break findNonLiteralCharacter ; } } if ( i < buffer . length ) { if ( fillBuffer ( i + NUM00 ) ) $F1448 else $F5153 } $F39896 ( builder ) builder . append ( buffer , pos , i ) ; pos += i ; i = NUM00 ; if $F39897 ( fillBuffer ) $F5153 } String result ; if ( builder == null ) { result = new String ( buffer , pos , i ) ; } else { builder . append ( buffer , pos , i ) ; $F6947 ( result , builder ) } pos += i ; return result ; }
public long arg_end $F72 $F12907 ( Long , fields )
static List < IRuntimeClasspathEntry > computeClasspath ( IJavaProject javaProject ) throws CoreException { IRuntimeClasspathEntry [ ] unresolvedRuntimeClasspath = JavaRuntime . computeUnresolvedRuntimeClasspath ( javaProject ) ; List < IRuntimeClasspathEntry > resolvedRuntimeClasspath = new ArrayList < IRuntimeClasspathEntry > $F72 ; for ( IRuntimeClasspathEntry unresolvedClasspathEntry : unresolvedRuntimeClasspath ) { if ( JavaRuntime . isVMInstallReference ( unresolvedClasspathEntry ) ) $F1448 resolvedRuntimeClasspath . addAll ( Arrays . asList ( JavaRuntime . resolveRuntimeClasspathEntry ( unresolvedClasspathEntry , javaProject ) ) ) ; } try { resolvedRuntimeClasspath . addAll ( NUM00 , GWTProjectUtilities . getGWTSourceFolderPathsFromProjectAndDependencies ( javaProject , _BOOL ) ) ; } catch ( SdkException e ) { throw new CoreException ( new Status ( IStatus . ERROR , GWTPlugin . PLUGIN_ID , e . getLocalizedMessage ( ) , e ) ) ; } GwtSdk gwtRuntime = GwtSdk . findSdkFor ( javaProject ) ; if ( gwtRuntime == null ) { GWTPluginLog . logWarning ( NUM00 + javaProject . getElementName ( ) + NUM00 ) ; return resolvedRuntimeClasspath ; } IStatus validationStatus = gwtRuntime . validate ( ) ; if ( ! validationStatus . isOK ( ) ) { GWTPluginLog . logWarning ( NUM00 + javaProject . getElementName ( ) + NUM00 + validationStatus . getMessage ( ) + NUM00 ) ; return resolvedRuntimeClasspath ; } try { File gwtDevJar = gwtRuntime . getDevJar ( ) ; resolvedRuntimeClasspath . add ( JavaRuntime . newArchiveRuntimeClasspathEntry ( Path . fromOSString ( gwtDevJar . getAbsolutePath ( ) ) ) ) ; } catch ( SdkException e ) { GWTPluginLog . logWarning ( e , NUM00 ) ; } return resolvedRuntimeClasspath ; }
$F1431 public ThrowingMockTokenFilterFactory $F3501 ( args ) { super ( args ) ; $F170151 ( exceptionClassName , args ) $F28724 ( exceptionClassName ) try { exceptionClass = ( Class < ? extends RuntimeException > ) Class . forName ( exceptionClassName ) ; } $F170159 ( e ) }
$F60342 ( mSmallestWidthDp , mInPortrait )
public PatternGuardExpr ( String namespace , String name , $F240647 parameters , PatternExpr guardedPattern ) { super ( namespace , name , parameters ) ; this . guarded = new ArrayList < PatternExpr > $F72 ; guarded . add ( guardedPattern ) ; }
private long startNewTrack $F72 { if ( isRecording ( ) ) { $F13527 ( Log , TAG ) $F150 } $F657 ( now , System ) trackTripStatisticsUpdater = new TripStatisticsUpdater ( now ) ; markerTripStatisticsUpdater = new TripStatisticsUpdater ( now ) ; Track track = new Track $F72 ; Uri uri = myTracksProviderUtils . insertTrack ( track ) ; long trackId = Long . parseLong ( uri . getLastPathSegment ( ) ) ; updateRecordingState ( trackId , _BOOL ) ; PreferencesUtils . setInt ( this , R . string . auto_resume_track_current_retry_key , NUM00 ) ; PreferencesUtils . setInt ( this , R . string . activity_recognition_type_key , PreferencesUtils . ACTIVITY_RECOGNITION_TYPE_DEFAULT ) ; track . setId ( trackId ) ; track . setName ( TrackNameUtils . getTrackName ( this , trackId , now , null ) ) ; String category = PreferencesUtils . getString ( this , R . string . default_activity_key , PreferencesUtils . DEFAULT_ACTIVITY_DEFAULT ) ; track . setCategory ( category ) ; track . setIcon ( TrackIconUtils . getIconValue ( this , category ) ) ; track . setTripStatistics ( trackTripStatisticsUpdater . getTripStatistics ( ) ) ; myTracksProviderUtils . updateTrack ( track ) ; insertWaypoint ( WaypointCreationRequest . DEFAULT_START_TRACK ) ; startRecording ( _BOOL ) ; return trackId ; }
protected AbstractMRMessage pollMessage $F72 { $F5972 ( disablePoll ) if $F5973 ( pollQueue ) { PollMessage pm = pollQueue . peek ( ) ; if ( pm != null ) { return pm . getMessage ( ) ; } } $F1274 }
public static $F96 readFully ( InputStream in ) throws IOException { $F11452 ( readFullyNoClose , in ) }
private boolean isSuppressWarningsTest ( String baseName ) { $F786 ( baseName ) }
protected static String applyLimitClause ( final String query , int limit , final int queryResultSetLimit ) { $F275 ( matcher , SELECT_EXPR_PATTERN , query ) if $F24133 ( matcher ) { $F1150 ( limit_matcher , SELECT_WITH_LIMIT_EXPR_PATTERN , query ) boolean queryAlreadyHasLimitClause = limit_matcher . matches ( ) ; if ( ! queryAlreadyHasLimitClause ) { $F153178 ( limit , queryResultSetLimit ) String result = query ; result += NUM00 + limit ; return result ; } } return query ; }
public void unmaximiseComponent $F72 { $F2329 ( maximisedComponent ) container . remove ( maximisedComponent ) ; container . add ( containerChild ) ; parentMaximisedComponent . add ( maximisedComponent ) ; $F1954 ( container ) containerChild = null ; parentMaximisedComponent = null ; maximisedComponent = null ; }
default CharSeq join ( CharSequence delimiter , CharSequence prefix , CharSequence suffix ) { $F7542 ( stringBuilder , prefix ) forEach ( null ) ; stringBuilder . append ( suffix ) ; return CharSeq . of ( stringBuilder . toString ( ) ) ; }
public void removeListener ( T listener ) { if ( listeners != null ) { $F237846 ( newlisteners ) newlisteners . addAll ( listeners ) ; newlisteners . remove ( listener ) ; listeners = newlisteners ; } }
public static void saveAsASCII ( NSArray root , File out ) throws IOException { $F15938 ( w , out ) w . write ( root . toASCIIPropertyList ( ) ) ; $F59 ( w ) }
public XSWildcardDecl performIntersectionWith ( XSWildcardDecl wildcard , short processContents ) { $F1275 ( wildcard ) XSWildcardDecl intersectWildcard = new XSWildcardDecl $F72 ; intersectWildcard . fProcessContents = processContents ; if ( areSame ( wildcard ) ) $F20755 ( intersectWildcard , fType , fNamespaceList ) else if ( ( fType == NSCONSTRAINT_ANY ) || ( wildcard . fType == NSCONSTRAINT_ANY ) ) { XSWildcardDecl other = this ; if ( fType == NSCONSTRAINT_ANY ) other = wildcard ; intersectWildcard . fType = other . fType ; intersectWildcard . fNamespaceList = other . fNamespaceList ; } else if ( ( ( fType == NSCONSTRAINT_NOT ) && ( wildcard . fType == NSCONSTRAINT_LIST ) ) || ( ( fType == NSCONSTRAINT_LIST ) && ( wildcard . fType == NSCONSTRAINT_NOT ) ) ) { $F10127 ( list ) $F10127 ( other ) if ( fType == NSCONSTRAINT_NOT ) { other = fNamespaceList ; list = wildcard . fNamespaceList ; } else { other = wildcard . fNamespaceList ; list = fNamespaceList ; } int listSize = list . length ; $F12914 ( intersect , listSize ) int newSize = NUM00 ; for ( $F119 ( i , listSize ) ) { if ( list [ i ] != other [ NUM00 ] && list [ i ] != ABSENT ) intersect [ newSize ++ ] = list [ i ] ; } intersectWildcard . fType = NSCONSTRAINT_LIST ; intersectWildcard . fNamespaceList = new String [ newSize ] ; System . arraycopy ( intersect , NUM00 , intersectWildcard . fNamespaceList , NUM00 , newSize ) ; } else if ( ( fType == NSCONSTRAINT_LIST ) && ( wildcard . fType == NSCONSTRAINT_LIST ) ) { intersectWildcard . fType = NSCONSTRAINT_LIST ; intersectWildcard . fNamespaceList = intersect2sets ( fNamespaceList , wildcard . fNamespaceList ) ; } else if ( fType == NSCONSTRAINT_NOT && wildcard . fType == NSCONSTRAINT_NOT ) { if ( fNamespaceList [ NUM00 ] != ABSENT && wildcard . fNamespaceList [ NUM00 ] != ABSENT ) $F1274 XSWildcardDecl other = this ; if ( fNamespaceList [ NUM00 ] == ABSENT ) other = wildcard ; intersectWildcard . fType = other . fType ; intersectWildcard . fNamespaceList = other . fNamespaceList ; } return intersectWildcard ; }
public static void filterOutbound ( StringBuilder message ) { for ( $F1088 ( i , message ) ) { $F1280 ( currentChar , message , i ) if $F85013 ( LEGAL_CHARACTERS , currentChar ) { if ( currentChar > NUM00 ) { int charAsInt = currentChar ; String stringVersion = Integer . toString ( charAsInt , NUM00 ) ; String replacement = NUM00 + stringVersion + NUM00 ; message . replace ( i , i + NUM00 , replacement ) ; i += $F1092 ( replacement ) ; } else { message . deleteCharAt ( i ) ; i -- ; } } } }
private void drawDays ( Canvas canvas ) { final TextPaint p = mDayPaint ; final int headerHeight = mMonthHeight + mDayOfWeekHeight ; final int rowHeight = mDayHeight ; final int colWidth = mCellWidth ; final float halfLineHeight = ( p . ascent ( ) + p . descent ( ) ) / NUM00 ; int rowCenter = headerHeight + rowHeight / NUM00 ; for ( int day = NUM00 , col = findDayOffset ( ) ; day <= mDaysInMonth ; day ++ ) { final int colCenter = colWidth * col + colWidth / NUM00 ; final int colCenterRtl ; if ( ViewCompatUtils . isLayoutRtl ( this ) ) { colCenterRtl = mPaddedWidth - colCenter ; } else { colCenterRtl = colCenter ; } int state = NUM00 ; final boolean isDayEnabled = isDayEnabled ( day ) ; final boolean isDayActivated = mActivatedDay == day ; if ( isDayActivated ) { state = VIEW_STATE_SELECTED ; canvas . drawCircle ( colCenterRtl , rowCenter , mDaySelectorRadius , mDaySelectorPaint ) ; } else if ( mTouchedItem == day ) { state = VIEW_STATE_PRESSED ; if ( isDayEnabled ) { canvas . drawCircle ( colCenterRtl , rowCenter , mDaySelectorRadius , mDayHighlightPaint ) ; } } final boolean isDayToday = mToday == day ; final int dayTextColor ; if ( isDayToday && ! isDayActivated ) { dayTextColor = mDaySelectorPaint . getColor ( ) ; } else { final $F2027 stateSet = buildState ( isDayEnabled , state ) ; dayTextColor = mDayTextColor . getColorForState ( stateSet , NUM00 ) ; } p . setColor ( dayTextColor ) ; canvas . drawText ( mDayFormatter . format ( day ) , colCenterRtl , rowCenter - halfLineHeight , p ) ; col ++ ; if ( col == DAYS_IN_WEEK ) { col = NUM00 ; rowCenter += rowHeight ; } } }
public void comment $F62353 ( start , length ) throws $F2253 { if ( ch == null || start < NUM00 || length >= ( ch . length - start ) || length < NUM00 ) $F665 $F150650 ( append , m_doc , ch , start , length ) }
$F18907 ( arrayList )
public ArbitraryLengthPathNode ( final TermNode left , final TermNode right , final VarNode tVarLeft , final VarNode tVarRight , final PathMod mod ) { this ( new BOp [ ] { new JoinGroupNode $F72 } , NV . asMap ( new NV ( Annotations . LEFT_TERM , left ) , new NV ( Annotations . RIGHT_TERM , right ) , new NV ( Annotations . TRANSITIVITY_VAR_LEFT , tVarLeft ) , new NV ( Annotations . TRANSITIVITY_VAR_RIGHT , tVarRight ) , new NV ( Annotations . LOWER_BOUND , mod == PathMod . ONE_OR_MORE ? NUM00 : NUM00 ) , new NV ( Annotations . UPPER_BOUND , mod == PathMod . ZERO_OR_ONE ? NUM00 : Long . MAX_VALUE ) ) ) ; final Set < VarNode > $F22304 ( dropVars ) ; dropVars . add ( tVarLeft ) ; dropVars . add ( tVarRight ) ; setProperty ( Annotations . DROP_VARS , dropVars ) ; }
static void checkFlags ( int flags ) { int allowedFlags = READ_ONLY_FLAG_MASK | EMPTY_FLAG_MASK | COMPACT_FLAG_MASK | ORDERED_FLAG_MASK ; int flagsMask = ~ allowedFlags ; if ( ( flags & flagsMask ) > NUM00 ) { throw new SketchesArgumentException ( NUM00 + Integer . toBinaryString ( flags ) ) ; } }
public boolean canGetInt $F72 { return canGet ( $F37010 ) ; }
public static $F3523 deleteItemSets ( $F3523 itemSets , int minSupport , int maxSupport ) { $F3523 newVector = new $F3523 $F716 ( itemSets ) ; for ( $F2277 ( i , itemSets ) ) { LabeledItemSet current = ( LabeledItemSet ) itemSets . get ( i ) ; if ( ( current . m_ruleSupCounter >= minSupport ) && ( current . m_ruleSupCounter <= maxSupport ) ) $F207 ( newVector , current ) } return newVector ; }
private static synchronized String makeDateString ( Date date ) $F35907 ( sdfDefault , date )
public static String generateNativeGuid ( DbClient dbClient , FileShare fileShare ) throws IOException { StorageSystem device = dbClient . queryObject ( $F41797 , fileShare . getStorageDevice ( ) ) ; return String . format ( NUM00 + FILESYSTEM + NUM00 , $F131294 ( _deviceTypeMap , device ) , device . getSerialNumber ( ) , fileShare . getNativeId ( ) ) ; }
public String toString $F72 { $F280 ( result ) int temp ; temp = ipAddress & NUM00 ; result . append ( temp ) ; $F84 ( result ) temp = $F11786 ( ipAddress ) ; result . append ( temp ) ; $F84 ( result ) temp = $F11786 ( ipAddress ) ; result . append ( temp ) ; $F84 ( result ) temp = $F11786 ( ipAddress ) ; result . append ( temp ) ; $F92 ( result ) }
public void logPurchase ( BigDecimal purchaseAmount , Currency currency , Bundle parameters ) { if ( purchaseAmount == null ) $F3602 ( notifyDeveloperError ) else $F25700 ( currency , notifyDeveloperError ) if ( parameters == null ) { $F53031 ( parameters ) ; } parameters . putString ( AppEventsConstants . EVENT_PARAM_CURRENCY , currency . getCurrencyCode ( ) ) ; logEvent ( AppEventsConstants . EVENT_NAME_PURCHASED , purchaseAmount . doubleValue ( ) , parameters ) ; eagerFlush ( ) ; }
private static double distance ( Point p1 , Point p2 ) { double x = p1 . x - p2 . x ; double y = p1 . y - p2 . y ; $F126355 ( Math , x , y ) }
public void addHyperedgeInNode ( HyperEdge hyperEdge ) { if ( hyperEdge != null ) { if ( null == hyperedges ) $F9404 ( hyperedges ) hyperedges . add ( hyperEdge ) ; semiringPlus ( hyperEdge ) ; } }
public RotatedProblems $F72 $F5795 ( super )
public DockerPortMapping withHostPort ( int hostPort ) { DockerPortMapping newMapping = new DockerPortMapping $F72 ; newMapping . protocol = protocol ; newMapping . containerPort = containerPort ; newMapping . hostIp = hostIp ; newMapping . hostPort = String . valueOf ( hostPort ) ; return newMapping ; }
$F20813 ( fieldId , ID1 , ID2 )
$F1 public int length $F72 $F55827 ( str )
public void clearAllHaptics $F72 $F9096 ( mHaptics )
public void encode ( final ActiveMQBuffer buffer ) { buffer . writeString ( name ) ; buffer . writeString ( factoryClassName ) ; buffer . writeInt ( $F2908 ( params ) ) ; $F12099 ( params , encodeMap , buffer ) $F12099 ( extraProps , encodeMap , buffer ) }
$F1 public void write $F24576 ( b , off , len ) throws IOException { flushBits ( ) ; out . write ( b , off , len ) ; }
public static double log2 ( double x ) { return Math . log ( x ) / LOG2 ; }
boolean isNameUsed ( String name ) { $F3807 columnsWithName = columnNames . get ( name ) ; $F6441 ( columnsWithName ) }
public StateInteractive complete $F72 { if ( return_state != this && actlog != null ) { actlog . start_scope ( LogfileScope . COMPLETE_SCOPE ) ; } return return_state ; }
private WorkQueue findNonEmptyStealQueue $F72 { $F17861 ws ; int wl ; int r = TLRandom . nextSecondarySeed ( ) ; if ( ( ws = workQueues ) != null && $F192564 ( wl , ws ) ) { int m = wl - NUM00 , origin = r & m ; for ( int k = origin , oldSum = NUM00 , checkSum = NUM00 ; ; ) { WorkQueue q ; int b ; if ( ( q = ws [ k ] ) != null ) { if ( ( b = q . base ) - q . top < NUM00 ) return q ; checkSum += b ; } if ( ( k = ( k + NUM00 ) & m ) == origin ) { if ( oldSum == ( oldSum = checkSum ) ) $F597 checkSum = NUM00 ; } } } $F1274 }
public void testPseudoLegalMoves $F72 throws ChessParseError { String fen = NUM00 ; Position pos = TextIO . readFEN ( fen ) ; assertEquals ( fen , TextIO . toFEN ( pos ) ) ; $F13406 ( strMoves , getMoveList , pos , _BOOL ) $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; assertTrue ( $F49413 ( strMoves ) ) ; $F196452 ( assertTrue , strMoves ) $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; $F196452 ( assertTrue , strMoves ) $F196452 ( assertTrue , strMoves ) $F70108 ( assertEquals , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BROOK ) ; strMoves = getMoveList ( pos , _BOOL ) ; assertTrue ( $F49413 ( strMoves ) ) ; assertTrue ( $F49413 ( strMoves ) ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BROOK ) ; strMoves = getMoveList ( pos , _BOOL ) ; assertTrue ( $F49413 ( strMoves ) ) ; $F196452 ( assertTrue , strMoves ) pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . BBISHOP ) ; strMoves = getMoveList ( pos , _BOOL ) ; $F196452 ( assertTrue , strMoves ) assertTrue ( $F49413 ( strMoves ) ) ; pos . setPiece ( Position . getSquare ( NUM00 , NUM00 ) , Piece . EMPTY ) ; pos . setCastleMask ( NUM00 < < Position . A1_CASTLE ) ; strMoves = getMoveList ( pos , _BOOL ) ; assertTrue ( $F49413 ( strMoves ) ) ; $F196452 ( assertTrue , strMoves ) }
private void doDdpOrientation ( Node d , Node a , Node b , Node c , Graph graph ) { $F27878 sepset = getSepset ( d , c ) ; $F2329 ( sepset ) if $F105 ( sepset , b ) { graph . setEndpoint ( c , b , Endpoint . TAIL ) ; if ( verbose ) { logger . log ( NUM00 , SearchLogUtils . edgeOrientedMsg ( NUM00 + d , graph . getEdge ( b , c ) ) ) ; out . println ( SearchLogUtils . edgeOrientedMsg ( NUM00 + d , graph . getEdge ( b , c ) ) ) ; } changeFlag = _BOOL ; } else { if ( ! isArrowpointAllowed ( a , b , graph ) ) $F932 if ( ! isArrowpointAllowed ( c , b , graph ) ) $F932 graph . setEndpoint ( a , b , Endpoint . ARROW ) ; graph . setEndpoint ( c , b , Endpoint . ARROW ) ; logger . log ( NUM00 , SearchLogUtils . colliderOrientedMsg ( NUM00 + d , a , b , c ) ) ; changeFlag = _BOOL ; } }
public void handleTblBootstrapResOffHrefActionRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; $F50322 ( setPageSessionAttribute , PROPERTY_ATTRIBUTE , values ) SMDiscoveryBootstrapRefOffEditViewBean vb = ( SMDiscoveryBootstrapRefOffEditViewBean ) getViewBean ( SMDiscoveryBootstrapRefOffEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . populateValues ( ( String ) getDisplayFieldValue ( TBL_BOOTSTRAP_RES_OFF_HREF_ACTION ) ) ; $F50333 ( vb , getRequestContext ) } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
$F1219 String postRequest ( long timestamp , String xml ) throws RequestFailureException { String response = null ; HttpURLConnection urlConnection = null ; try { urlConnection = createConnection ( ) ; setUpPostRequest ( timestamp , urlConnection , xml ) ; sendRequestToServer ( urlConnection , xml ) ; response = readResponseFromServer ( urlConnection ) ; } finally $F14107 ( urlConnection ) return response ; }
private void generateKey $F72 throws Exception { $F156 ( keygen , KeyGenerator , ALGO ) $F43927 ( key , keygen ) persistKey ( key ) ; }
public HttpRequestEvent fireHttpRequestEvent ( String request , OutputStream output ) throws IOException { HttpRequestEvent event = new HttpRequestEvent ( this , request , output ) ; HttpRequestListener listener ; Vector list = ( Vector ) listeners . clone ( ) ; $F8484 ( e , list ) while $F1444 ( e ) { listener = ( HttpRequestListener ) e . nextElement ( ) ; listener . httpRequest ( event ) ; } return event ; }
private void parseRecord ( Element unitNode ) { $F9040 ( nl , unitNode ) for ( $F85554 ( i , nl ) ) { $F61359 ( currNode , nl , i ) if ( currNode . getParentNode ( ) != unitNode ) $F1448 $F49528 ( nodeType , currNode ) if ( nodeType == Node . ELEMENT_NODE ) { $F48115 ( nodeName , currNode ) if $F8397 ( nodeName , UNIT ) { parseUnit ( ( Element ) currNode , entities ) ; } else if $F8397 ( nodeName , SURVIVORS ) { parseUnit ( ( Element ) currNode , survivors ) ; } else if $F8397 ( nodeName , ALLIES ) { parseUnit ( ( Element ) currNode , allies ) ; } else if $F8397 ( nodeName , SALVAGE ) { parseUnit ( ( Element ) currNode , salvage ) ; } else if $F8397 ( nodeName , DEVASTATED ) { parseUnit ( ( Element ) currNode , devastated ) ; } else if $F8397 ( nodeName , KILLS ) { parseKills ( ( Element ) currNode ) ; } else if $F8397 ( nodeName , ENTITY ) { parseUnit ( ( Element ) currNode , entities ) ; } else if $F8397 ( nodeName , PILOT ) { parsePilot ( ( Element ) currNode ) ; } } else $F1448 } }
public void cancel $F72 { synchronized ( lock ) { if ( this . latency == NO_TARGET ) { $F50706 } if $F40971 ( requests , this ) { throw new InternalError ( NUM00 + this + NUM00 ) ; } if $F2979 ( requests ) requests = null ; this . latency = NO_TARGET ; adjustLatencyIfNeeded ( ) ; } }
void mergeSuccess ( MergePolicy . OneMerge merge ) $F845
void startEventTracker $F72 { List < EventTrackingService > services = getEnabledServicesForType ( EventTrackingService . class ) ; if $F1032 ( services ) { if ( eventTracker == null ) { eventTracker = new EventTracker ( context , services , foamApiKeys . wifiOnly ( ) ) ; } if $F28174 ( eventTracker ) $F28175 ( eventTracker ) } }
$F1 public int preceding ( int offset ) { CharacterIterator text = getText ( ) ; checkOffset ( offset , text ) ; if ( cachedBreakPositions == null || offset <= cachedBreakPositions [ NUM00 ] || offset > $F8528 ( cachedBreakPositions ) ) { cachedBreakPositions = null ; return super . preceding ( offset ) ; } else { positionInCache = NUM00 ; while ( positionInCache < cachedBreakPositions . length && offset > cachedBreakPositions [ positionInCache ] ) { ++ positionInCache ; } -- positionInCache ; text . setIndex ( cachedBreakPositions [ positionInCache ] ) ; return text . getIndex ( ) ; } }
protected static boolean signedFitsInNibble ( int value ) { return ( value >= - NUM00 ) && ( value <= NUM00 ) ; }
$F1 public void mousePressed ( MouseEvent e ) { $F725 ( events ) if ( mapDragOperationFromModifiers ( e ) != DnDConstants . ACTION_NONE ) { try { motionThreshold = DragSource . getDragThreshold ( ) ; } catch ( Exception exc ) { motionThreshold = NUM00 ; } appendEvent ( e ) ; } }
public void simpleElement ( String name , String value ) throws IOException { simpleElement ( null , name , null , value ) ; }
public static boolean isValidIPv4 ( String address ) { $F25111 ( address , _BOOL ) int octet ; int octets = NUM00 ; String temp = address + NUM00 ; int pos ; int start = NUM00 ; while ( start < temp . length ( ) && $F64354 ( pos , temp , start ) > start ) { $F6482 ( octets , _BOOL ) try { $F64359 ( octet , Integer , temp , start , pos ) ; } catch ( NumberFormatException ex ) { return _BOOL ; } if $F19274 ( octet ) { return _BOOL ; } start = pos + NUM00 ; octets ++ ; } return octets == NUM00 ; }
private void validateDimensionCSV ( SchemaInfo schemaInfo , String factTableName , String dimTableName , CarbonFile dimFile , String partitionId , CarbonDataLoadSchema schema , String delimiter ) throws DataLoadingException { $F806 columnNames = getDimColumnNames ( schemaInfo , factTableName , dimTableName , partitionId , schema ) ; if ( null == columnNames || columnNames . length < NUM00 ) $F932 if ( ! checkAllColumnsPresent ( columnNames , dimFile . getAbsolutePath ( ) , delimiter ) ) { LOGGER . error ( NUM00 + NUM00 + dimFile . getName ( ) ) ; throw new DataLoadingException ( DataProcessorConstants . CSV_VALIDATION_ERRROR_CODE , NUM00 + NUM00 + dimFile . getName ( ) ) ; } }
private DataPoint isUnique ( Node from , DataPoint point , double tolerance ) { if $F585 ( logger ) $F8922 ( logger , tolerance , point ) while ( from . type == Type . branch ) { Branch branch = ( Branch ) from ; double d = point . get ( branch . splitDimension ) ; if ( Math . abs ( d - branch . midPoint ) < tolerance ) { $F130378 ( logger , branch ) DataPoint leftCheck = isUnique ( branch . left , point , tolerance ) ; DataPoint rightCheck = isUnique ( branch . right , point , tolerance ) ; if $F151516 ( leftCheck , rightCheck ) $F1337 else { if ( leftCheck != null ) { return leftCheck ; } else { return rightCheck ; } } } else if ( point . getVector ( ) [ branch . splitDimension ] < branch . midPoint ) { $F130378 ( logger , branch ) from = branch . left ; } else { $F130378 ( logger , branch ) from = branch . right ; } } Leaf leaf = ( Leaf ) from ; for ( DataPoint p : leaf . points ) { for ( int i = NUM00 ; i < p . getDimension ( ) ; i ++ ) { if ( Math . abs ( p . get ( i ) - point . get ( i ) ) >= tolerance ) $F5153 } if ( getDistance ( p , point ) < tolerance ) { return p ; } } $F1274 }
public boolean removeTuple ( Tuple t ) { Table table = t . getTable ( ) ; if $F105 ( m_sets , table ) { return table . removeTuple ( t ) ; } else { return _BOOL ; } }
private boolean isDarkThemeSet $F72 { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; String key = getString ( R . string . theme_preference_key ) ; String defaultValue = getString ( R . string . theme_preference_default_value ) ; return Integer . valueOf ( sharedPreferences . getString ( key , defaultValue ) ) != NUM00 ; }
public String visit ( Type t , Locale locale ) { return t . accept ( this , locale ) ; }
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
$F1309 public void addPrefixNSMapping ( String prefix , String nsURI ) { if $F1277 ( nsURI ) $F825 if $F1277 ( prefix ) $F825 if $F1238 ( prefix , NO_NS_PREFIX ) $F29526 ( prefix ) $F29527 ( prefixToNamespaceURILookup , prefix ) $F29527 ( namespaceURIToPrefixLookup , nsURI ) if $F1238 ( prefix , DEFAULT_NAMESPACE_PREFIX ) { this . defaultNS = nsURI ; } else { prefixToNamespaceURILookup . put ( prefix , nsURI ) ; namespaceURIToPrefixLookup . put ( nsURI , prefix ) ; } }
protected Message createResponseMessage $F72 { return new Message ( NUM00 , Version . CURRENT ) ; }
public static void o ( double a ) { o ( a , Parameters . OutputFieldWidth , Parameters . OutputFracPlaces ) ; }
public void writeField ( String name , String value ) throws IOException { $F826 ( name ) out . writeBytes ( PREFIX ) ; out . writeBytes ( boundary ) ; out . writeBytes ( NEWLINE ) ; out . writeBytes ( NUM00 + name + NUM00 ) ; out . writeBytes ( NEWLINE ) ; out . writeBytes ( NEWLINE ) ; if ( value != null ) { out . writeBytes ( value ) ; } out . writeBytes ( NEWLINE ) ; $F1206 ( out ) }
public int drainTo ( Collection < ? super E > c ) { int result = buffer . drainTo ( c ) ; if ( producer != null ) { producer . wakeUp ( ) ; } return result ; }
protected void grow $F72 { if ( dists == EMPTY_DISTS ) { $F10254 ( dists , INITIAL_SIZE ) $F3936 ( ids , INITIAL_SIZE ) $F665 } $F18832 ( len , dists ) final int newlength = $F28993 ( len ) ; $F1986 odists = dists ; $F10254 ( dists , newlength ) $F7057 ( System , odists , dists ) $F2027 oids = ids ; $F3936 ( ids , newlength ) $F7057 ( System , oids , ids ) }
IgfsInputStreamImpl ( IgfsContext igfsCtx , IgfsPath path , $F5466 IgfsEntryInfo fileInfo , int prefetchBlocks , int seqReadsBeforePrefetch , $F5466 IgfsSecondaryFileSystemPositionedReadable secReader , long len , int blockSize , long blocksCnt , boolean proxy ) { assert igfsCtx != null ; assert path != null ; this . igfsCtx = igfsCtx ; this . path = path ; this . fileInfo = fileInfo ; this . prefetchBlocks = prefetchBlocks ; this . seqReadsBeforePrefetch = seqReadsBeforePrefetch ; this . secReader = secReader ; this . len = len ; this . blockSize = blockSize ; this . blocksCnt = blocksCnt ; this . proxy = proxy ; log = igfsCtx . kernalContext ( ) . log ( IgfsInputStream . class ) ; maxLocCacheSize = ( prefetchBlocks > NUM00 ? prefetchBlocks : NUM00 ) * NUM00 / NUM00 ; locCache = new LinkedHashMap $F200 ( maxLocCacheSize , NUM00 ) ; pendingFuts = new GridConcurrentHashSet $F200 ( prefetchBlocks > NUM00 ? prefetchBlocks : NUM00 ) ; igfsCtx . metrics ( ) . incrementFilesOpenedForRead ( ) ; }
public AbstractScaleOutClientIndexView ( final AbstractScaleOutFederation fed , final String name , final long timestamp , final IMetadataIndex metadataIndex ) { $F10057 ( fed ) $F10057 ( name ) $F10057 ( metadataIndex ) this . fed = fed ; this . name = name ; this . timestamp = timestamp ; this . metadataIndex = metadataIndex ; this . metadataIndexMetadata = metadataIndex . getIndexMetadata ( ) ; final AbstractClient $F1011 client = fed . getClient ( ) ; this . capacity = client . getDefaultRangeQueryCapacity ( ) ; this . batchOnly = client . getBatchApiOnly ( ) ; this . taskTimeout = client . getTaskTimeout ( ) ; this . readConsistent = client . isReadConsistent ( ) ; }
public boolean canSendEvent $F72 { try $F27427 ( validateSendEvent , _BOOL ) $F7474 ( _BOOL ) }
public static final String capitalize ( String str , char ... delimiters ) { final int delimLen = delimiters == null ? - NUM00 : delimiters . length ; if ( TextUtils . isEmpty ( str ) || delimLen == NUM00 ) { return str ; } $F9609 ( buffer , str ) boolean capitalizeNext = _BOOL ; for ( $F1139 ( i , buffer ) ) { char ch = buffer [ i ] ; if ( isDelimiter ( ch , delimiters ) ) { capitalizeNext = _BOOL ; } else if ( capitalizeNext ) { buffer [ i ] = Character . toTitleCase ( ch ) ; capitalizeNext = _BOOL ; } } $F22269 ( buffer ) }
public void testCompareToNegZero $F72 { $F67214 int aSign = - NUM00 ; $F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ZERO ; $F67217 ( assertEquals , aNumber , bNumber ) }
public void write ( OutputStream out ) throws SocksException , IOException { if ( data == null ) { Socks5Message msg ; if ( addrType == SOCKS_ATYP_DOMAINNAME ) msg = new Socks5Message ( command , host , port ) ; else { if ( ip == null ) { try { ip = InetAddress . getByName ( host ) ; } catch ( UnknownHostException uh_ex ) { throw new SocksException ( SocksConstants . SOCKS_JUST_ERROR ) ; } } msg = new Socks5Message ( command , ip , port ) ; } data = msg . data ; } out . write ( data ) ; }
public boolean isConnected ( short nodeId ) { NodeConnection nc = connections . get ( nodeId ) ; return ( nc != null && nc . state == NodeConnectionState . CONNECTED ) ; }
TemplateSubPatternAssociation ( ElemTemplate template , StepPattern pattern , String pat ) { m_pattern = pat ; m_template = template ; m_stepPattern = pattern ; m_targetString = m_stepPattern . getTargetString ( ) ; m_wild = m_targetString . equals ( NUM00 ) ; }
public static $F96 compressForZlib $F97 ( bytesToCompress ) { Deflater deflater = new Deflater $F72 ; deflater . setInput ( bytesToCompress ) ; $F1571 ( deflater ) $F96 bytesCompressed = new byte [ Short . MAX_VALUE ] ; int numberOfBytesAfterCompression = deflater . deflate ( bytesCompressed ) ; $F2175 ( returnValues , numberOfBytesAfterCompression ) $F135 ( System , bytesCompressed , returnValues , numberOfBytesAfterCompression ) return returnValues ; }
private static ByteBuffer generateWavData ( int sampleCount , int freqHz ) { final int numDataBytes = sampleCount * NUM_CHANNELS * BITS_PER_SAMPLE / NUM00 ; final double freq = freqHz ; $F87627 ( buf , ByteBuffer , numDataBytes ) $F31290 ( buf , ByteOrder ) if ( BITS_PER_SAMPLE == NUM00 ) { final double peak = NUM00 ; for ( $F119 ( i , sampleCount ) ) { double timeSec = i / ( double ) SAMPLE_RATE ; double sinValue = Math . sin ( NUM00 * Math . PI * freq * timeSec ) ; if ( GameSurfaceRenderer . EXTRA_CHECK ) { int output = ( int ) ( peak * sinValue + NUM00 ) ; if $F44635 ( output ) $F11389 } buf . put ( ( byte ) ( peak * sinValue + NUM00 ) ) ; } } else if ( BITS_PER_SAMPLE == NUM00 ) { final double peak = NUM00 ; ShortBuffer sbuf = buf . asShortBuffer ( ) ; for ( $F119 ( i , sampleCount ) ) { double timeSec = i / ( double ) SAMPLE_RATE ; double sinValue = Math . sin ( NUM00 * Math . PI * freq * timeSec ) ; sbuf . put ( ( short ) ( peak * sinValue ) ) ; } } $F16709 ( buf ) return buf ; }
protected static String h2c ( String hyphenated , boolean studly ) { $F80469 ( b , hyphenated ) boolean capNext = studly ; for ( $F38840 ( i , hyphenated ) ) { $F1280 ( c , hyphenated , i ) if ( c == NUM00 ) capNext = _BOOL ; else { b . append ( capNext ? Character . toUpperCase ( c ) : c ) ; capNext = _BOOL ; } } $F92 ( b ) }
public synchronized void onWriteEvent $F72 throws IOException { LRMIInvocationTrace trace = null ; try { while $F5973 ( _contexts ) { Context current = _contexts . peek ( ) ; trace = current . getTrace ( ) ; if ( trace != null ) LRMIInvocationContext . updateContext ( trace , null , null , null , null , _BOOL , null , null ) ; noneBlockingWrite ( current ) ; if ( current . getPhase ( ) != Context . Phase . FINISH ) $F151805 ( setWriteInterest ) else { traceContextTotalWriteTime ( current ) ; $F56193 ( _contexts ) pendingWrites . decrement ( ) ; } } if $F2979 ( _contexts ) { removeWriteInterest ( _BOOL ) ; } } finally { if ( trace != null ) LRMIInvocationContext . resetContext ( ) ; } }
public static void add ( Object spy ) $F207 ( SPIES , spy )
void initLeafCalc $F97 ( seed0 ) { this . i = NUM00 ; this . j = NUM00 ; $F2175 ( dummy , mdsize ) System . arraycopy ( seed0 , NUM00 , dummy , NUM00 , seed . length ) ; this . seed = gmssRandom . nextSeed ( dummy ) ; }
$F1 public boolean downloadFile ( String path , String dest ) { try { FileOutputStream fos = new FileOutputStream $F15780 ( dest ) ; mDBApi . getFile ( path , null , fos , null ) ; $F59 ( fos ) return _BOOL ; } catch ( DropboxException e ) $F37158 ( e , _BOOL ) catch ( FileNotFoundException e ) $F37158 ( e , _BOOL ) $F132878 ( e , _BOOL ) }
boolean doesOccur ( QName refName ) $F298 ( m_refs , refName )
public long loop $F72 { $F42358 ( currentTimestamp , System ) final long timeDiff = currentTimestamp - lastRunTimestamp ; final int shutdownDiff = ( int ) $F32707 ( System , gameShutdownRequestTimestamp ) ; final float shutdownProgress = shutdownDiff >= FLYING_SUPERMAN_DELAY && gameState . equals ( GameState . SHUTDOWN_REQUESTED ) ? ( shutdownDiff - FLYING_SUPERMAN_DELAY ) / $F64550 ( GAME_SHUTDOWN_DELAY , FLYING_SUPERMAN_DELAY ) : NUM00 ; snowflakesCollection . onTimePassed ( timeDiff ) ; presentsCollection . onTimePassed ( timeDiff ) ; if ( gameState . equals ( GameState . SHUTDOWN_REQUESTED ) ) { player . setyPos ( getDefaultPlayerHeight ( ) * ( NUM00 - shutdownProgress ) - $F43072 ( player , shutdownProgress ) ) ; supermanClouds . setyPos ( supermanClouds . getHeight ( ) * ( NUM00 - shutdownProgress ) - ( ( supermanClouds . getHeight ( ) - fieldHeight ) * shutdownProgress ) ) ; if ( shutdownProgress >= NUM00 ) { gameState = GameState . STOPPED ; } } else { if ( player . isInState ( PlayerState . CHEWING ) && player . getChewingDuration ( ) >= PLAYER_CHEWING_DURATION_IN_MS ) { player . setState ( PlayerState . DEFAULT ) ; } if ( player . isInState ( PlayerState . HIT ) && player . getHitDuration ( ) >= PLAYER_HIT_DURATION_IN_MS ) { player . setState ( PlayerState . DEFAULT ) ; } if ( newPlayerLocation != null ) { player . setxPos ( newPlayerLocation . x ) ; player . setyPos ( newPlayerLocation . y ) ; newPlayerLocation = null ; } } boolean playerBelowObject = updateFallingObjects ( timeDiff , shutdownProgress , snowflakesCollection , _BOOL , _BOOL ) | updateFallingObjects ( timeDiff , shutdownProgress , presentsCollection , _BOOL , _BOOL ) ; if ( player . isInState ( PlayerState . DEFAULT ) || player . isInState ( PlayerState . LOOKING_UP ) ) { if ( playerBelowObject ) { player . setState ( PlayerState . LOOKING_UP ) ; } else { player . setState ( PlayerState . DEFAULT ) ; } } lastRunTimestamp = currentTimestamp ; return timeDiff ; }
public static DateFormat toDateFormat ( String dateFormat , TimeZone tz , Locale locale ) { DateFormat df = null ; if $F4329 ( UtilValidate , dateFormat ) { df = DateFormat . getDateInstance ( DateFormat . SHORT , locale ) ; } else { df = new SimpleDateFormat ( dateFormat , locale == null ? Locale . getDefault ( ) : locale ) ; } df . setTimeZone ( tz ) ; return df ; }
public Integer loadIdNameValues ( DbOutputStatement statement , Integer idx ) throws Exception { $F79839 ( index , idx ) $F51622 ( _logger ) _id = statement . getLongInteger ( index ++ ) ; _name = statement . getShortText ( index ++ ) ; return new Integer ( index ) ; }
private $F96 padPassword $F97 ( password ) { if ( password == null ) $F46946 ( password ) $F12496 ( padded ) final int numContributingPasswordBytes = password . length > padded . length ? padded . length : password . length ; $F135 ( System , password , padded , numContributingPasswordBytes ) if $F5624 ( password , padded ) { System . arraycopy ( PW_PADDING , NUM00 , padded , password . length , padded . length - password . length ) ; } return padded ; }
private double maxDistLevel ( DBID id , int level ) { final NumberVector obj = relation . get ( id ) ; final double r = NUM00 / ( NUM00 < < ( level - NUM00 ) ) ; double dist ; if ( t == NUM00 ) { dist = NUM00 ; for ( $F119 ( dim , d ) ) { final double p_m_r = getDimForObject ( obj , dim ) % r ; dist += Math . max ( p_m_r , r - p_m_r ) ; } } else if ( t == NUM00 ) { dist = NUM00 ; for ( $F119 ( dim , d ) ) { final double p_m_r = getDimForObject ( obj , dim ) % r ; double a = Math . max ( p_m_r , r - p_m_r ) ; dist += a * a ; } $F84202 ( dist , Math ) } else if ( ! Double . isInfinite ( t ) ) { dist = NUM00 ; for ( $F119 ( dim , d ) ) { final double p_m_r = getDimForObject ( obj , dim ) % r ; dist += Math . pow ( Math . max ( p_m_r , r - p_m_r ) , t ) ; } dist = Math . pow ( dist , NUM00 / t ) ; } else { dist = Double . NEGATIVE_INFINITY ; for ( $F119 ( dim , d ) ) { final double p_m_r = getDimForObject ( obj , dim ) % r ; dist = Math . max ( dist , Math . max ( p_m_r , r - p_m_r ) ) ; } } return dist * diameter ; }
public final int moveMade ( long now , boolean useIncrement ) { stopTimer ( now ) ; ArrayList < TimeControlField > tc = tcData . getTC ( whiteToMove ) ; $F121644 tcInfo = getCurrentTC ( whiteToMove ) ; int tcIdx = tcInfo . first ; int movesToTc = tcInfo . second ; int remaining = getRemainingTime ( whiteToMove , now ) ; if ( useIncrement ) { remaining += tc . get ( tcIdx ) . increment ; if ( movesToTc == NUM00 ) { if ( tcIdx + NUM00 < tc . size ( ) ) tcIdx ++ ; remaining += tc . get ( tcIdx ) . timeControl ; } } elapsed = NUM00 ; return remaining ; }
public static Properties prefixProperties ( Properties props , String prefix ) { $F2697 ( prefixProps ) for ( $F49930 ( key , props ) ) { if $F7311 ( key , prefix ) { $F130950 ( keyWithoutPrefix , key , prefix ) prefixProps . setProperty ( keyWithoutPrefix , props . getProperty ( key ) ) ; } } return prefixProps ; }
public final void testSetRegex $F72 { RegexConstraint regexConstraint = new RegexConstraint ( Pattern . compile ( NUM00 ) ) ; regexConstraint . setRegex ( REGEX ) ; assertEquals ( REGEX , regexConstraint . getRegex ( ) ) ; }
public synchronized void start $F72 { $F7254 ( isStarted ) $F4640 ( isStopped ) logger . info ( NUM00 + Tor . getFullVersion ( ) + NUM00 ) ; verifyUnlimitedStrengthPolicyInstalled ( ) ; directoryDownloader . start ( directory ) ; circuitManager . startBuildingCircuits ( ) ; if ( dashboard . isEnabledByProperty ( ) ) { dashboard . startListening ( ) ; } isStarted = _BOOL ; }
public static CipherParameters makePBEParameters ( PBEKeySpec keySpec , int type , int hash , int keySize , int ivSize ) { PBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; $F96 key ; CipherParameters param ; key = convertPassword ( type , keySpec ) ; generator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; if ( ivSize != NUM00 ) { param = generator . generateDerivedParameters ( keySize , ivSize ) ; } else { param = generator . generateDerivedParameters ( keySize ) ; } for ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; }
$F1 public double value ( int attIndex ) { int index = locateIndex ( attIndex ) ; if ( ( index >= NUM00 ) && ( m_Indices [ index ] == attIndex ) ) $F1083 else $F1083 }
private void fetchFilterSeeds $F72 { $F48075 ( seedList ) for ( Iterator < URI > it = seedList . iterator ( ) ; it . hasNext ( ) ; ) { URI seed = it . next ( ) ; for ( FetchFilter filter : controller . getFetchFilters ( ) ) { FetchStatus filterReason = filter . checkFilter ( seed ) ; if ( filterReason != FetchStatus . VALID ) { $F197555 ( log , seed , filterReason ) $F7042 ( it ) $F597 } } } }
public XYAreaRenderer2 ( XYToolTipGenerator labelGenerator , XYURLGenerator urlGenerator ) { super ( ) ; this . showOutline = _BOOL ; setBaseToolTipGenerator ( labelGenerator ) ; setURLGenerator ( urlGenerator ) ; $F13609 ( area ) area . moveTo ( $F29083 ) ; area . lineTo ( $F29083 ) ; area . lineTo ( NUM00 , NUM00 ) ; area . lineTo ( $F72322 ) ; area . lineTo ( $F64496 ) ; $F2272 ( area ) this . legendArea = area ; }
public static boolean isPrimitiveOrWrapper $F60993 ( clazz ) { $F18062 ( Assert , clazz ) return ( clazz . isPrimitive ( ) || isPrimitiveWrapper ( clazz ) ) ; }
private void assertFileContains $F72133 ( expected , filename ) throws Exception { try ( BufferedReader reader = new BufferedReader $F434 ( filename ) ) { $F24645 ( actual ) for ( $F589 ) { $F27015 ( line , reader ) $F32472 ( line ) actual . add ( line ) ; } assertEquals ( expected , actual ) ; } }
private void reportException ( Kind kind , Element element , Throwable t ) { $F29429 ( buf ) $F24477 ( t , buf ) buf . toString ( ) ; message ( kind , element , NUM00 , buf . toString ( ) ) ; }
public void add ( $F806 titles , $F1986 values ) { add ( $F37513 ( mCategories ) , titles , values ) ; }
static String parseAuthority ( String uriString , int ssi ) { $F115 ( length , uriString ) if ( length > ssi + NUM00 && $F10825 ( uriString , ssi ) && $F10825 ( uriString , ssi ) ) { int end = ssi + NUM00 ; LOOP : while ( end < length ) { switch $F31372 ( uriString , end ) { $F1262 $F1262 $F1262 break LOOP ; } end ++ ; } return uriString . substring ( ssi + NUM00 , end ) ; } else $F1337 }
public static void sort ( $F11654 list ) { if $F3817 ( list ) $F57005 ( Collections , list , INSTANCE ) }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F9007 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public void addDatatransferProgressListener ( OnDatatransferProgressListener listener , OCUpload ocUpload ) { $F57400 ( ocUpload , listener ) String targetKey = buildRemoteName ( ocUpload . getAccountName ( ) , ocUpload . getRemotePath ( ) ) ; mBoundListeners . put ( targetKey , listener ) ; }
$F52843 ( packed , map , i , j , count , value )
protected $F806 readNext ( LineNumberReader reader ) throws IOException { $F10127 ( rowDef ) do { $F27015 ( nextLine , reader ) if ( nextLine == null ) { hasNext = _BOOL ; return rowDef ; } $F806 r = parser . parseLineMulti ( nextLine ) ; if $F3305 ( r ) { if ( rowDef == null ) { rowDef = r ; } else { $F806 t = new String $F12348 ( rowDef , r ) ; $F7057 ( System , rowDef , t ) $F11244 ( System , r , t , rowDef ) rowDef = t ; } } } while ( parser . isPending ( ) ) ; return rowDef ; }
public $F6969 type $F72 { if ( isClass ) { return $F146471 ( object ) ; } else { return object . getClass ( ) ; } }
private void verifyPropertySourceValue ( ReloadablePropertySource reloadablePropertySource , String expectedValue ) { $F8922 ( logger , TEST_KEY , expectedValue ) logger . debug ( $F3846 ( properties , TEST_KEY ) + reloadablePropertySource . getProperty ( TEST_KEY ) ) ; String value = ( String ) reloadablePropertySource . getProperty ( TEST_KEY ) ; assertEquals ( expectedValue , value ) ; }
private void updateCenterPanel $F72 { $F657 ( now , System ) if ( _nextUpdateTime > now ) $F665 _nextUpdateTime = now + NUM00 * NUM00 ; $F7600 ( _centerPanel ) $F171121 ( _centerComponent ) $F45960 ( gbc ) gbc . gridx = NUM00 ; gbc . gridy = NUM00 ; gbc . weightx = NUM00 ; $F76546 ( gbc , GridBagConstraints ) $F76547 ( gbc , GridBagConstraints ) _centerPanel . add ( _centerComponent , gbc ) ; refresh ( ) ; }
public void serviceRequestQueue $F72 throws CLIException { if ( isVerbose ( ) ) { outputWriter . printlnMessage ( rbMessages . getString ( NUM00 ) ) ; } try { while $F5973 ( requestQueue ) { CLIRequest req = ( CLIRequest ) requestQueue . remove ( NUM00 ) ; try { req . process ( this ) ; if ( statusOS != null ) { String status = formatStatus ( req . getOptions ( ) , NUM00 ) ; $F60813 ( statusOS , status ) } } catch ( CLIException e ) { if ( isVerbose ( ) ) { $F156149 ( e , System ) } if ( statusOS != null ) { String status = formatStatus ( req . getOptions ( ) , e . getExitCode ( ) ) ; $F60813 ( statusOS , status ) } if ( bContinue ) { outputWriter . printlnError ( e . getMessage ( ) ) ; } else { throw e ; } } } } catch ( IOException e ) { $F145379 ( e , ExitCodes ) } finally { if ( statusOS != null ) { $F18072 ( statusOS ) statusOS = null ; } } }
AlwaysIdenticalKeyStoreState $F72 $F5795 ( super )
public static $F96 packByteBufferIntoSingleByteArray ( $F30903 byteBufferArr ) { if ( null == byteBufferArr || byteBufferArr . length == NUM00 ) $F1337 int noOfCol = byteBufferArr . length ; short offsetLen = ( short ) ( noOfCol * NUM00 ) ; int totalBytes = calculateTotalBytes ( byteBufferArr ) + offsetLen ; $F87627 ( buffer , ByteBuffer , totalBytes ) buffer . putShort ( offsetLen ) ; for ( $F21583 ( index , byteBufferArr ) ) { ByteBuffer individualCol = byteBufferArr [ index ] ; $F85980 ( noOfBytes , individualCol ) buffer . putShort ( $F15066 ( offsetLen , noOfBytes ) ) ; offsetLen += noOfBytes ; $F23501 ( individualCol ) } for ( $F1139 ( index , byteBufferArr ) ) { ByteBuffer individualCol = byteBufferArr [ index ] ; buffer . put ( individualCol . array ( ) ) ; } $F23501 ( buffer ) $F31057 ( buffer ) }
public void stop $F72 { mCancel = _BOOL ; if $F48405 ( mRunning , _BOOL ) { if ( mSampleDispatcherTask != null ) { mThreadPoolManager . cancel ( mSampleDispatcherTask ) ; mSampleDispatcherTask = null ; $F725 ( mFilledBuffers ) } } }
public void add ( SimpleName ref ) { String typeName = ref . getIdentifier ( ) ; $F13678 ( fImportsAdded , typeName ) IBinding binding = ref . resolveBinding ( ) ; if ( binding != null ) { if ( binding . getKind ( ) != IBinding . TYPE ) $F932 ITypeBinding typeBinding = ( ITypeBinding ) binding ; if $F6974 ( typeBinding ) { typeBinding = typeBinding . getElementType ( ) ; } typeBinding = typeBinding . getTypeDeclaration ( ) ; if ( ! typeBinding . isRecovered ( ) ) { if ( needsImport ( typeBinding , ref ) ) { fImpStructure . addImport ( typeBinding ) ; fImportsAdded . add ( typeName ) ; } $F665 } } else { if $F316063 ( fDoIgnoreLowerCaseNames , typeName ) { $F12685 ( ch , typeName ) if ( Strings . isLowerCase ( ch ) && Character . isLetter ( ch ) ) $F932 } } fImportsAdded . add ( typeName ) ; fUnresolvedTypes . put ( typeName , new UnresolvedTypeData ( ref ) ) ; }
private static boolean checkFont $F106000 ( fontName , newName , testString , force ) { boolean displayable = _BOOL ; Font f = UIManager . getFont ( fontName ) ; if ( f != null && ! newName . equalsIgnoreCase ( f . getName ( ) ) ) { if ( ! GUIUtils . canDisplay ( f , testString ) || force ) { f = new Font ( newName , f . getStyle ( ) , f . getSize ( ) ) ; if ( GUIUtils . canDisplay ( f , testString ) ) UIManager . put ( fontName , f ) ; else displayable = _BOOL ; } } else if ( f != null ) { displayable = GUIUtils . canDisplay ( f , testString ) ; } else { displayable = _BOOL ; } return displayable ; }
public void addAllSearchables ( ArrayList < ? extends SearchResult > searchable ) $F21926 ( mSearchableList , searchable )
public $F229682 addArgumentHotspots ( String signature , int arg ) { $F229682 sigSpots = StringAnalysis . getArgumentExpressions ( signature , arg ) ; return addArgumentHotspots ( signature , arg , sigSpots ) ; }
public boolean isFull $F72 { return counter . get ( ) == qSize ; }
public static String JQ ( String request ) throws Exception { $F1384 ( queryStartPos , request ) String query ; String path ; if ( - NUM00 == queryStartPos ) { query = NUM00 ; path = request ; } else $F181085 ( query , request , queryStartPos , path ) $F373826 ( query , setParam ) request = path + NUM00 + setParam ( query , NUM00 , NUM00 ) ; String response ; boolean failed = _BOOL ; try { response = restTestHarness . query ( request ) ; failed = _BOOL ; } finally { if ( failed ) $F17663 ( log , request ) } return response ; }
static void sort ( $F2027 a , int left , int right , $F2027 work , int workBase , int workLen ) { $F68994 ( right , left , QUICKSORT_THRESHOLD , sort , a , _BOOL ) $F65716 ( run , MAX_RUN_COUNT ) int count = NUM00 ; run [ NUM00 ] = left ; for ( int k = left ; k < right ; run [ count ] = k ) { $F164508 ( k , right , a ) $F67767 ( k , right ) if $F68996 ( a , k ) $F69000 ( k , right , a ) else if $F56227 ( a , k ) { $F69004 ( k , right , a ) for ( $F69005 ( lo , run , count , hi , k ) ) { int t = a [ lo ] ; a [ lo ] = a [ hi ] ; a [ hi ] = t ; } } if ( run [ count ] > left && a [ run [ count ] ] >= a [ run [ count ] - NUM00 ] ) { count -- ; } $F69018 ( count , MAX_RUN_COUNT , sort , a , left , right , _BOOL ) } if ( count == NUM00 ) $F932 else if ( count == NUM00 && run [ count ] > right ) $F932 right ++ ; if ( run [ count ] < right ) { run [ ++ count ] = right ; } byte odd = NUM00 ; $F69024 ( n , count , odd ) $F2027 b ; int ao , bo ; int blen = right - left ; if $F69026 ( work , workLen , blen , workBase ) { $F3936 ( work , blen ) workBase = NUM00 ; } $F69031 ( odd , System , a , left , work , workBase , blen , b , bo , ao ) for ( int last ; count > NUM00 ; count = last ) { $F69046 ( k , last , count , hi , run , mi , i , p , q , a , ao , b , bo ) $F69051 ( count , i , right , lo , run , b , bo , a , ao , last ) $F2027 t = a ; a = b ; b = t ; int o = ao ; ao = bo ; bo = o ; } }
protected void shiftEnd ( int newSize ) { int oldSize = getArrayLength ( ) ; int oldGapEnd = g1 ; int upperSize = oldSize - oldGapEnd ; int arrayLength = getNewArraySize ( newSize ) ; int newGapEnd = arrayLength - upperSize ; resize ( arrayLength ) ; g1 = newGapEnd ; if ( upperSize != NUM00 ) { $F69282 ( System , array , oldGapEnd , newGapEnd , upperSize ) } }
protected void processStyle12ExamineAndSetupAdjustment ( Game game , Style12Message message , GameService service , String entireMessage ) { $F35060 ( LOG ) if ( game . isInState ( Game . OBSERVING_EXAMINED_STATE ) && message . relation == Style12Message . EXAMINING_GAME_RELATION ) { $F35060 ( LOG ) $F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; } else if $F80721 ( entireMessage ) { $F35060 ( LOG ) Game examineGame = IcsUtils . createGame ( message , entireMessage ) ; if ( message . relation == Style12Message . EXAMINING_GAME_RELATION && ! examineGame . isInState ( Game . SETUP_STATE ) ) { $F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; } } else if ( game . isInState ( Game . EXAMINING_STATE ) && $F80721 ( entireMessage ) ) { $F35060 ( LOG ) processExaminedGameBecameSetup ( ) ; } else if $F80721 ( entireMessage ) { $F36239 ( examineGamesWaitingOnMoves , game , message ) connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; } else { IcsUtils . resetGame ( game , message ) ; service . fireGameStateChanged ( message . gameId , _BOOL ) ; connector . sendMessage ( NUM00 + message . gameId , _BOOL , ChatType . MOVES ) ; } }
public SamFilterChain ( Collection < SamFilter > filters ) { mFilters = filters . toArray ( new SamFilter $F2313 ( filters ) ) ; }
PreviousWordAction ( String nm , boolean select ) $F64660 ( super , nm , this , select )
static UnixStream $F4 cat ( final String filePath ) throws IOException { $F10578 ( Objects , filePath ) return new UnixStreamImpl $F200 $F26285 ( lines , Paths , filePath ) ; }
private static String encode_base64 ( byte $F3234 , int len ) throws IllegalArgumentException { int off = NUM00 ; $F280 ( rs ) int c1 , c2 ; if ( len <= NUM00 || len > d . length ) $F825 while ( off < len ) { c1 = d [ off ++ ] & NUM00 ; rs . append ( $F138727 ( base64_code , c1 ) ) ; c1 = ( c1 & NUM00 ) < < NUM00 ; $F3250 ( off , len , rs , base64_code , c1 ) c2 = d [ off ++ ] & NUM00 ; c1 |= $F11786 ( c2 ) ; $F3248 ( rs , base64_code , c1 ) $F3252 ( c1 , c2 ) $F3250 ( off , len , rs , base64_code , c1 ) c2 = d [ off ++ ] & NUM00 ; c1 |= $F11786 ( c2 ) ; $F3248 ( rs , base64_code , c1 ) $F3248 ( rs , base64_code , c2 ) } $F92 ( rs ) }
protected void eleminateRedundent ( ElemTemplateElement psuedoVarRecipient , Vector paths ) { $F2199 ( n , paths ) int numPathsEliminated = NUM00 ; int numUniquePathsEliminated = NUM00 ; for ( $F119 ( i , n ) ) { $F55733 ( owner , paths , i ) if ( null != owner ) { int found = findAndEliminateRedundant ( i + NUM00 , i , owner , psuedoVarRecipient , paths ) ; if ( found > NUM00 ) numUniquePathsEliminated ++ ; numPathsEliminated += found ; } } eleminateSharedPartialPaths ( psuedoVarRecipient , paths ) ; if ( DIAGNOSE1_PATHS_REDUCED ) diagnoseNumPaths ( paths , numPathsEliminated , numUniquePathsEliminated ) ; }
public void commercialResult ( String stream , String resultText , RequestResult result ) { setCommercialResult ( DateTime . currentTime ( ) + NUM00 + resultText ) ; $F3224 ( lastCommercialRunAttempt , System ) setLoadingCommercial ( _BOOL ) ; if ( result == TwitchApi . RequestResult . RUNNING_COMMERCIAL ) { lastCommercial . put ( stream , System . currentTimeMillis ( ) ) ; if $F1256 ( stream , currentChannel ) $F22067 ( lastCommercialRun , System ) } }
$F32569 ( panel , cols , rows , filler , filled_cell_11 , _BOOL , cc , Box , index )
public void done $F72 throws IOException { if ( ! initialStyles ) $F62354 ( writeInitialStyles , initialStyles , _BOOL ) $F256031 ( out ) out . flushBits ( ) ; if ( bout != null && glyphCount > NUM00 ) { $F1208 ( glyphBytes , bout ) glyphByteArrays . add ( glyphBytes ) ; } if ( glyphCount > NUM00 ) { $F1659 ( bout ) out = new OutStream ( bout ) ; glyphCount -- ; fill1Index = NUM00 ; lineIndex = NUM00 ; outstandingChanges = _BOOL ; initialStyles = _BOOL ; } else { $F60488 ( bout , finishFont ) writer . completeTag ( ) ; } }
private static DetachISOResponse checkDetachISOResponse ( DetachISOResponse detachISOResponse ) throws RpcException { $F10635 ( logger , detachISOResponse ) switch $F52729 ( detachISOResponse ) { case OK : $F597 case ISO_NOT_ATTACHED : $F18942 ( logger , detachISOResponse ) throw new IsoNotAttachedException $F52730 ( detachISOResponse ) ; case SYSTEM_ERROR : $F18942 ( logger , detachISOResponse ) throw new SystemErrorException $F52730 ( detachISOResponse ) ; case VM_NOT_FOUND : $F18942 ( logger , detachISOResponse ) throw new VmNotFoundException $F52730 ( detachISOResponse ) ; $F52745 ( String , detachISOResponse ) } return detachISOResponse ; }
public boolean is_terminal ( MethodOrMethodContext mc ) { Stack $F69372 sys_stack = new Stack $F69372 $F72 ; boolean result ; if ( ! is_system ( mc . method ( ) ) ) result = _BOOL ; else { if ( ! process_callbacks ) result = _BOOL ; else { if ( $F3817 ( stack ) && is_system ( stack . peek ( ) ) ) result = ! calls_app_method ( mc , sys_stack ) ; else { if ( can_have_callbacks ( mc . method ( ) ) ) result = ! calls_app_method ( mc , sys_stack ) ; else result = _BOOL ; } } } logger . info ( NUM00 , mc . method ( ) , result ) ; return result ; }
boolean tryMatch ( SNode s ) { if ( match == null && UNSAFE . compareAndSwapObject ( this , matchOffset , null , s ) ) { Thread w = waiter ; if ( w != null ) { waiter = null ; LockSupport . unpark ( w ) ; } return _BOOL ; } return match == s ; }
public void addItem ( int position , M model ) $F94473 ( mDatas , position , model , notifyItemInserted )
public final $F2689 aliases $F72 { return Collections . unmodifiableSet ( this . aliasesSet ) ; }
public void encode ( OutputStream out ) throws IOException { $F19904 ( tmp ) if $F73719 ( this ) { this . extensionId = PKIXExtensions . IssuingDistributionPoint_Id ; this . critical = _BOOL ; encodeThis ( ) ; } super . encode ( tmp ) ; $F1569 ( out , tmp ) }
public final void readChildren ( ObjectInputStream ois ) throws $F6427 { int count = serializable ; while ( count -- > NUM00 ) { Object child = null ; BeanContextSupport . BCSChild bscc = null ; try { $F215455 ( child , ois ) bscc = ( BeanContextSupport . BCSChild ) ois . readObject ( ) ; } catch ( IOException ioe ) $F1448 catch ( ClassNotFoundException cnfe ) $F1448 synchronized ( child ) { BeanContextChild bcc = null ; try { bcc = ( BeanContextChild ) child ; } catch ( ClassCastException cce ) $F845 if ( bcc != null ) { try { bcc . setBeanContext ( getBeanContextPeer ( ) ) ; $F146695 ( bcc , childPCL ) bcc . addVetoableChangeListener ( NUM00 , childVCL ) ; } catch ( PropertyVetoException pve ) $F1448 } childDeserializedHook ( child , bscc ) ; } } }
$F37100 ( fieldId , SUCCESS )
static boolean isChristmasTime ( Calendar cal ) { int month = $F21623 ( cal , Calendar ) ; $F187609 ( day , cal , Calendar ) if $F152867 ( month ) { return _BOOL ; } if ( month == NUM00 ) { return day <= NUM00 ; } if ( month == NUM00 ) { return day >= NUM00 ; } return _BOOL ; }
$F1 public void zoomRangeAxes ( double factor , PlotRenderingInfo info , Point2D source ) { zoomRangeAxes ( factor , info , source , _BOOL ) ; }
$F6802 ( esd , connectionAllowed )
private void boardSaveImage $F72 { if ( curfileImage == null ) $F10990 ( boardSaveAsImage ) JDialog waitD = new JDialog ( frame , Messages . getString ( NUM00 ) ) ; waitD . add ( new JLabel $F16961 ( Messages ) ) ; $F267778 ( waitD ) waitD . setLocation ( ( frame . getSize ( ) . width / NUM00 ) - ( waitD . getSize ( ) . width / NUM00 ) , ( frame . getSize ( ) . height / NUM00 ) - ( waitD . getSize ( ) . height / NUM00 ) ) ; waitD . setVisible ( _BOOL ) ; frame . setCursor ( $F92769 ( Cursor ) ) ; waitD . setCursor ( $F92769 ( Cursor ) ) ; try { ImageIO . write ( bv . getEntireBoardImage ( ) , NUM00 , curfileImage ) ; } $F12241 ( e ) waitD . setVisible ( _BOOL ) ; frame . setCursor ( Cursor . getDefaultCursor ( ) ) ; }
public boolean containsName ( String type , String name ) { $F43655 ( names , getNames , type ) $F297 ( names , name ) }
$F1431 public static < C extends Result > ArrayList $F37574 filterResults ( ResultHierarchy hier , Result r , Class < ? super C > restrictionClass ) { ArrayList $F37574 $F204 ( res ) ; if $F38790 ( restrictionClass , r ) { res . add ( ( C ) restrictionClass . cast ( r ) ) ; } for ( Hierarchy . Iter $F89732 iter = hier . iterDescendants ( r ) ; iter . valid ( ) ; iter . advance ( ) ) { Result result = iter . get ( ) ; if $F38790 ( restrictionClass , result ) { res . add ( ( C ) restrictionClass . cast ( result ) ) ; } } return res ; }
private boolean hasNextProxy $F72 $F231867 ( nextProxyIndex , proxies )
$F21175 @ CausesError ( { IncorrectPure4JImmutableCallException . class , PureMethodParameterNotImmutableException . class } ) public String testParam1Bad ( Object in1 , Object in2 ) { Object in3 = in2 ; Pure4J . immutable ( in1 , in2 ) ; $F92 ( in3 ) }
protected $F8748 canHandleMissing ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing , int missingLevel ) { if ( missingLevel == NUM00 ) $F1210 ( print ) print ( NUM00 ) ; if ( predictorMissing ) { print ( NUM00 ) ; $F29727 ( classMissing , print ) } $F29727 ( classMissing , print ) print ( NUM00 ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) $F51573 ( numTrain , getNumInstances , numClasses ) return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; }
public $F155343 pick_items ( PlaPoint p_location , int p_layer , ItemSelectionFilter p_filter ) { $F155343 result = new $F155359 $F72 ; ShapeTileBox point_shape = p_location . to_box ( ) ; Collection < AwtreeObject > overlaps = overlapping_objects ( point_shape , p_layer ) ; for ( AwtreeObject curr_object : overlaps ) { if ( ! ( curr_object instanceof BrdItem ) ) $F598 BrdItem curr_item = ( BrdItem ) curr_object ; if ( ! curr_item . is_selected_by_filter ( p_filter ) ) $F598 result . add ( curr_item ) ; } return result ; }
public boolean isCollinearWith ( Vector other ) { if ( x == NUM00 && y == NUM00 && z == NUM00 ) { return _BOOL ; } final double otherX = other . x ; final double otherY = other . y ; final double otherZ = other . z ; if ( otherX == NUM00 && otherY == NUM00 && otherZ == NUM00 ) { return _BOOL ; } if ( ( x == NUM00 ) != ( otherX == NUM00 ) ) return _BOOL ; if ( ( y == NUM00 ) != ( otherY == NUM00 ) ) return _BOOL ; if ( ( z == NUM00 ) != ( otherZ == NUM00 ) ) return _BOOL ; final double quotientX = otherX / x ; if $F2292 ( Double , quotientX ) $F139962 ( other , multiply , quotientX ) final double quotientY = otherY / y ; if $F2292 ( Double , quotientY ) $F139962 ( other , multiply , quotientY ) final double quotientZ = otherZ / z ; if $F2292 ( Double , quotientZ ) $F139962 ( other , multiply , quotientZ ) $F11388 }
public void receive $F74143 ( currentFFTBins ) { if ( Float . isInfinite ( currentFFTBins [ NUM00 ] ) || Float . isNaN ( currentFFTBins [ NUM00 ] ) ) { currentFFTBins = new float [ currentFFTBins . length ] ; } if ( mDisplayFFTBins == null || mDisplayFFTBins . length != currentFFTBins . length ) { mDisplayFFTBins = currentFFTBins ; } $F5415 smoothedBins = mSmoothingFilter . filter ( currentFFTBins ) ; if ( mAveraging > NUM00 ) { float gain = NUM00 / ( float ) mAveraging ; for ( $F1139 ( x , mDisplayFFTBins ) ) { mDisplayFFTBins [ x ] += $F17318 ( smoothedBins , x , mDisplayFFTBins ) * gain ; } } else { mDisplayFFTBins = smoothedBins ; } repaint ( ) ; }
$F1 public void executionUnitImported ( final ExecutionUnit process , final Element element ) { $F9040 ( children , element ) children = element . getChildNodes ( ) ; for ( $F85554 ( i , children ) ) { $F61359 ( child , children , i ) if ( child instanceof Element ) { $F6721 ( backgroundElement , child ) if ( XML_TAG_BACKGROUND . equals ( backgroundElement . getTagName ( ) ) ) { $F57219 ( xStr , backgroundElement , XML_ATTRIBUTE_X_POSITION ) $F57219 ( yStr , backgroundElement , XML_ATTRIBUTE_Y_POSITION ) $F57219 ( wStr , backgroundElement , XML_ATTRIBUTE_WIDTH ) $F57219 ( hStr , backgroundElement , XML_ATTRIBUTE_HEIGHT ) $F57219 ( imgLocStr , backgroundElement , XML_ATTRIBUTE_LOCATION ) try { $F27213 ( xLoc , Integer , xStr ) $F27213 ( yLoc , Integer , yStr ) $F27213 ( wLoc , Integer , wStr ) $F27213 ( hLoc , Integer , hStr ) ProcessBackgroundImage bgImg = new ProcessBackgroundImage ( xLoc , yLoc , wLoc , hLoc , imgLocStr , process ) ; setBackgroundImage ( bgImg ) ; } catch ( NullPointerException | IllegalArgumentException e ) $F845 } } } }
private void sendMailToQueue ( String to , String subject , String content , boolean isMultipart , boolean isHtml ) { EmailParams emailParams = new EmailParams ( to , subject , content , isMultipart , isHtml ) ; rabbitTemplate . convertAndSend ( RabbitmqConfiguration . QUEUE_SEND_EMAIL , emailParams ) ; }
public MersenneTwisterRNG $F3295 ( seed ) { if $F36221 ( seed , SEED_SIZE_BYTES ) $F825 $F256750 ( this , seed ) final $F2027 seedInts = convertBytesToInts ( this . seed ) ; mt [ NUM00 ] = BOOTSTRAP_SEED ; for ( mtIndex = NUM00 ; mtIndex < N ; mtIndex ++ ) { mt [ mtIndex ] = BOOTSTRAP_FACTOR * ( mt [ mtIndex - NUM00 ] ^ mt [ mtIndex - NUM00 ] > > > NUM00 ) + mtIndex ; } int i = NUM00 ; int j = NUM00 ; for ( int k = Math . max ( N , seedInts . length ) ; k > NUM00 ; k -- ) { mt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM00 ] ^ mt [ i - NUM00 ] > > > NUM00 ) * SEED_FACTOR1 ) + seedInts [ j ] + j ; i ++ ; j ++ ; if ( i >= N ) { mt [ NUM00 ] = mt [ N - NUM00 ] ; i = NUM00 ; } if ( j >= seedInts . length ) { j = NUM00 ; } } for ( $F96625 ( k , N ) ) { mt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM00 ] ^ mt [ i - NUM00 ] > > > NUM00 ) * SEED_FACTOR2 ) - i ; i ++ ; if ( i >= N ) { mt [ NUM00 ] = mt [ N - NUM00 ] ; i = NUM00 ; } } mt [ NUM00 ] = UPPER_MASK ; }
private Set < ObjectInstance > filterListOfObjectInstances ( Set < ObjectInstance > list , QueryExp query ) { if ( query == null ) { return list ; } else { Set < ObjectInstance > result = new HashSet < ObjectInstance > $F72 ; for ( ObjectInstance oi : list ) { boolean res = _BOOL ; MBeanServer oldServer = QueryEval . getMBeanServer ( ) ; query . setMBeanServer ( server ) ; try { res = query . apply ( oi . getObjectName ( ) ) ; } $F28453 ( res , _BOOL ) finally { query . setMBeanServer ( oldServer ) ; } $F46023 ( res , result , oi ) } return result ; } }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
$F2513 @ Timed @ ExceptionMetered @ GET public AutomationSecretResponse readSecretById ( @ Auth AutomationClient automationClient , @ PathParam ( NUM00 ) LongParam secretId ) { Optional < Secret > secret = secretController . getSecretById ( secretId . get ( ) ) ; if $F16476 ( secret ) { throw new NotFoundException $F580 ; } ImmutableList < Group > groups = ImmutableList . copyOf ( aclDAO . getGroupsFor ( secret . get ( ) ) ) ; return AutomationSecretResponse . fromSecret ( secret . get ( ) , groups ) ; }
protected void addActionExceptionWarning ( Exception e ) { $F105671 ( msg , e ) $F1140 ( msg , warnings ) }
private void generateFieldInfos ( IType type , IBinaryType typeInfo , HashMap newElements , ArrayList childrenHandles ) { IBinaryField [ ] fields = typeInfo . getFields ( ) ; $F2329 ( fields ) JavaModelManager manager = ( ( JavaElement ) type ) . manager ; for ( $F151668 ( i , fieldCount , fields ) ) { IBinaryField fieldInfo = fields [ i ] ; BinaryField field = new BinaryField ( ( JavaElement ) type , manager , manager . intern ( new String $F27949 ( fieldInfo ) ) ) ; newElements . put ( field , fieldInfo ) ; childrenHandles . add ( field ) ; generateAnnotationsInfos ( field , fieldInfo . getAnnotations ( ) , fieldInfo . getTagBits ( ) , newElements ) ; } }
public void testFormattingYear $F72 { FormatTester test = new FormatTester $F72 ; Calendar cal = new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 , NUM00 , NUM00 , NUM00 ) ; test . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , new GregorianCalendar ( NUM00 , Calendar . JUNE , NUM00 ) , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; test . test ( NUM00 , cal , NUM00 , DateFormat . YEAR_FIELD ) ; assertFalse ( test . testsFailed ) ; }
public $F3803 generateModel ( String schema , String table , String packageName , boolean annotateSchema , boolean trimStrings ) { try { $F3803 models = New . arrayList ( ) ; List < TableInspector > tables = getTables ( schema , table ) ; for ( TableInspector t : tables ) { t . read ( metaData ) ; String model = t . generateModel ( packageName , annotateSchema , trimStrings ) ; models . add ( model ) ; } return models ; } catch ( SQLException s ) $F9491 ( s ) }
public static Ed25519EncodedFieldElement toEncodedFieldElement ( final BigInteger b ) { return new Ed25519EncodedFieldElement ( toByteArray ( b ) ) ; }
private void mergeCollapse $F72 { while ( stackSize > NUM00 ) { int n = stackSize - NUM00 ; if ( n > NUM00 && runLen [ n - NUM00 ] <= runLen [ n ] + runLen [ n + NUM00 ] ) { if ( runLen [ n - NUM00 ] < runLen [ n + NUM00 ] ) n -- ; mergeAt ( n ) ; } else if ( runLen [ n ] <= runLen [ n + NUM00 ] ) { mergeAt ( n ) ; } else $F5153 } }
protected $F104317 loadRMAData ( int C_BPartner_ID ) { $F104317 list = new $F104317 $F72 ; $F44 ( sqlStmt ) PreparedStatement pstmt = null ; try { $F47577 ( pstmt , DB , sqlStmt ) $F47 ( pstmt , C_BPartner_ID ) $F49 ( rs , pstmt ) while $F1682 ( rs ) { list . add ( new KeyNamePair ( rs . getInt ( NUM00 ) , rs . getString ( NUM00 ) ) ) ; } $F59 ( rs ) } catch ( SQLException e ) { log . log ( Level . SEVERE , sqlStmt . toString ( ) , e ) ; } finally { if ( pstmt != null ) { try $F881 ( pstmt ) catch ( Exception ex ) { log . severe ( NUM00 ) ; } } } return list ; }
private void checkSendTrackToGoogle $F72 { if ( ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_maps ) ) || ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_fusion_tables ) ) || ! sendToGoogle ( activityMyTracks . getString ( R . string . export_google_spreadsheets ) ) ) $F932 assertTrue ( GoogleUtils . deleteMaps ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; assertTrue ( GoogleUtils . deleteFusionTables ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; assertTrue ( GoogleUtils . deleteSpreadsheetsRow ( activityMyTracks . getApplicationContext ( ) , GoogleUtils . ACCOUNT_1 , EndToEndTestUtils . trackName ) ) ; }
private void checkBoundedTypeParameter ( Method method ) { $F91854 ( typeParameter , getTypeParameter , method ) $F64976 ( assertEquals , typeParameter ) $F91862 ( assertEquals , method , typeParameter ) $F24901 bounds = typeParameter . getBounds ( ) ; assertLenghtOne ( bounds ) ; Type bound = bounds [ NUM00 ] ; assertEquals ( BoundedWildcardsGenericMethods . class , bound ) ; }
$F29770 ( entity , bytes , mPool , buffer , in , count , VolleyLog )
public void onDependencyChanged ( Preference dependency , boolean disableDependent ) { if ( mDependencyMet == disableDependent ) { mDependencyMet = ! disableDependent ; notifyDependencyChange ( shouldDisableDependents ( ) ) ; notifyChanged ( ) ; } }
$F1 public Double analyse $F9830 ( frame ) { if ( frame . length != getFrameLengthSamples ( ) ) throw new IllegalArgumentException ( NUM00 + getFrameLengthSamples ( ) + NUM00 + frame . length ) ; double totalEnergy = NUM00 ; for ( $F1139 ( i , frame ) ) { $F60596 ( totalEnergy , frame , i ) } rememberFrameEnergy ( totalEnergy ) ; return new Double ( totalEnergy ) ; }
public static Element firstChildElement ( Element element ) { $F1275 ( element ) $F15376 ( node , element ) if ( node != null ) { do { if $F61358 ( node , Node ) { $F6721 ( childElement , node ) return childElement ; } } while $F15388 ( node ) ; } $F1274 }
private static void partialMatch ( DimensionalNode node , $F8748 relevant , $F1986 keys , ArrayList < IMultiPoint > results ) { IMultiPoint pt = node . point ; boolean match = _BOOL ; for ( $F1139 ( i , relevant ) ) { if ( ! relevant [ i ] ) $F598 if ( ! FloatingPoint . same ( pt . getCoordinate ( i + NUM00 ) , keys [ i ] ) ) $F3468 ( match , _BOOL ) } $F46023 ( match , results , pt ) int d = node . dimension ; if ( relevant [ d - NUM00 ] ) { if ( FloatingPoint . lesserEquals ( keys [ d - NUM00 ] , pt . getCoordinate ( d ) ) ) { DimensionalNode below = node . getBelow ( ) ; if ( below != null ) { partialMatch ( below , relevant , keys , results ) ; } } if ( FloatingPoint . greaterEquals ( keys [ d - NUM00 ] , pt . getCoordinate ( d ) ) ) { DimensionalNode above = node . getAbove ( ) ; if ( above != null ) { partialMatch ( above , relevant , keys , results ) ; } } } else { DimensionalNode below = node . getBelow ( ) ; if ( below != null ) { partialMatch ( below , relevant , keys , results ) ; } DimensionalNode above = node . getAbove ( ) ; if ( above != null ) { partialMatch ( above , relevant , keys , results ) ; } } }
public int decryptBlock $F59451 ( in , inOff , out , outOff ) throws $F5278 { $F59453 ( inOff , blockSize , in ) $F59453 ( outOff , blockSize , out ) $F59455 ( cipher , cfbV , cfbOutV ) $F59464 ( System , cfbV , blockSize ) System . arraycopy ( in , inOff , cfbV , cfbV . length - blockSize , blockSize ) ; $F59461 ( i , blockSize , out , outOff , cfbOutV , in , inOff ) return blockSize ; }
public static String encodeForRedirect ( final String str ) { String classMethod = NUM00 ; $F96 input ; try { $F103791 ( input , str ) } catch ( UnsupportedEncodingException uee ) { $F69255 ( debug , classMethod , uee ) $F1274 } Deflater deflater = new Deflater ( Deflater . DEFAULT_COMPRESSION , _BOOL ) ; $F1538 ( out ) DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream ( out , deflater ) ; try $F4050 ( deflaterOutputStream , input ) catch ( IOException e ) { $F69255 ( debug , classMethod , e ) $F1274 } finally { IOUtils . closeIfNotNull ( deflaterOutputStream ) ; } String encoded = URLEncDec . encode ( Base64 . encode ( out . toByteArray ( ) ) ) ; if $F6299 ( debug ) { debug . message ( classMethod + NUM00 + encoded . length ( ) ) ; debug . message ( classMethod + NUM00 + encoded + NUM00 ) ; } return encoded ; }
private void saveTouchStart ( MotionEvent event ) { mSavedMatrix . set ( mMatrix ) ; mTouchStartPoint . set ( $F5048 ( event ) ) ; mClosestDataSetToTouch = mChart . getDataSetByTouchPoint ( $F5048 ( event ) ) ; }
public static boolean isNestedMapping ( String regex ) { return regex . startsWith ( NESTED_MAPPING_STARTS_SYMBOL ) && regex . endsWith ( NESTED_MAPPING_ENDS_SYMBOL ) ; }
$F31780 ( value , builder , this )
public static boolean nullEquals ( String s1 , String s2 ) $F66007 ( s1 , s2 )
public String toString $F72 { return $F5528 ( super ) + String . valueOf ( date ) ; }
private boolean hasImages ( IAction actionToCheck ) { return actionToCheck . getImageDescriptor ( ) != null || actionToCheck . getHoverImageDescriptor ( ) != null || actionToCheck . getDisabledImageDescriptor ( ) != null ; }
public double calcAngleBetweenLines ( Entry start1 , Entry end1 , Entry start2 , Entry end2 ) { double angle1 = calcAngleWithRatios ( start1 , end1 ) ; double angle2 = calcAngleWithRatios ( start2 , end2 ) ; $F107213 ( Math , angle1 , angle2 ) }
$F69921 ( b , off , len , length , data , enlarge , System , this )
public double convertToAttribX ( double scx ) { double temp = m_XaxisEnd - m_XaxisStart ; double temp2 = $F89524 ( scx , m_XaxisStart , m_maxX , m_minX ) / temp ; temp2 = temp2 + m_minX ; return temp2 ; }
public void completeExecutorTask $F72 { ExecutorQueueItem item = null ; synchronized ( _executorLock ) { _executorTaskCount -- ; assert ( _executorTaskCount >= NUM00 ) ; if ( _executorQueueHead != null ) { item = _executorQueueHead ; _executorQueueHead = item . _next ; if ( _executorQueueHead == null ) _executorQueueTail = null ; } } if ( item != null ) { Runnable task = item . getRunnable ( ) ; ClassLoader loader = item . getLoader ( ) ; boolean isPriority = _BOOL ; boolean isQueue = _BOOL ; boolean isWake = _BOOL ; scheduleImpl ( task , loader , MAX_EXPIRE , isPriority , isQueue , isWake ) ; } }
public static void forceMkdir ( File directory ) throws IOException { if $F3428 ( directory ) { if $F4926 ( directory ) { String message = NUM00 + directory + NUM00 + NUM00 ; $F5614 ( message ) } } else { if $F4928 ( directory ) { if $F4926 ( directory ) { String message = NUM00 + directory ; $F5614 ( message ) } } } }
private $F4203 int countClearedRefs ( List < WeakReference $F4203 > refs ) { final Iterator < WeakReference $F4203 > itr = refs . iterator ( ) ; int n = NUM00 ; while $F2921 ( itr ) { final WeakReference $F4203 ref = itr . next ( ) ; if $F61923 ( ref ) n ++ ; } return n ; }
protected void readImage $F72 { ix = readShort ( ) ; iy = readShort ( ) ; iw = readShort ( ) ; ih = readShort ( ) ; int packed = read ( ) ; $F161486 ( lctFlag , packed ) $F161486 ( interlace , packed ) lctSize = NUM00 < < ( packed & NUM00 ) ; if ( lctFlag ) { lct = readColorTable ( lctSize ) ; act = lct ; } else { act = gct ; if ( bgIndex == transIndex ) bgColor = NUM00 ; } int save = NUM00 ; if ( transparency ) { save = act [ transIndex ] ; act [ transIndex ] = NUM00 ; } $F20614 ( act , status , STATUS_FORMAT_ERROR ) $F140642 ( err ) decodeImageData ( ) ; skip ( ) ; $F140642 ( err ) frameCount ++ ; image = new BufferedImage ( width , height , BufferedImage . TYPE_INT_ARGB_PRE ) ; setPixels ( ) ; frames . add ( new GifFrame ( image , delay ) ) ; if ( transparency ) { act [ transIndex ] = save ; } resetFrame ( ) ; }
protected void addProjectedField ( String s ) { try { $F111040 ( f , inClazz , s ) TypeInfo t = new TypeInfo ( f . getName ( ) , ClassUtils . primitiveToWrapper ( f . getType ( ) ) ) ; t . getter = PojoUtils . createGetter ( inClazz , t . name , t . type ) ; t . setter = PojoUtils . createSetter ( projectedClazz , t . name , t . type ) ; projectedFields . add ( t ) ; } catch ( NoSuchFieldException e ) { throw new RuntimeException ( NUM00 + s + NUM00 + inClazz , e ) ; } }
protected Object evaluateLeftGreaterRight ( List elements , String lvalue , String rvalue ) { List array ; if ( elements instanceof $F11420 ) { array = new $F11420 $F72 ; } else $F13242 ( array ) for ( $F2774 ( e , elements ) ) { $F8877 ( o , e ) if ( o instanceof StructuredContent ) { if ( ( o = evaluateLeftGreaterRight ( ( StructuredContent ) o , lvalue , rvalue ) ) != null ) $F207 ( array , o ) } } if $F10471 ( array ) { return ( StructuredContent ) array . get ( NUM00 ) ; } return array ; }
public Optional $F12404 avg $F72 { if ( isEmpty ( ) ) $F21169 ( Optional ) return Optional . of ( sum ( ) / getEventCount ( ) ) ; }
public static boolean isSU ( String shell ) { $F1384 ( pos , shell ) $F384188 ( pos , shell ) $F96095 ( pos , shell ) if ( pos >= NUM00 ) $F31399 ( shell , pos ) $F786 ( shell ) }
private boolean isValid ( int type , String value ) { $F1933 ( value , _BOOL ) if ( ALLOWED_ <missing ')'> NUM00 <missing ';'> S [ type ] != null ) { return verifyStringGroup ( value , ALLOWED_ <missing ';'> NUM00 <missing ';'> S [ type ] ) ; } switch ( type ) { case TYPE1BER : return verify ( value , DIGITS , null ) ; case TYPE_PIXELS_OR_PERCENTAGE : if $F8991 ( value ) $F8994 ( value ) else $F8996 ( value ) return verify ( value , DIGITS , null ) ; case TYPE_CHAR : return verify ( value , DIGITS | ABC , null , NUM00 , NUM00 ) ; case TYPE_COLOR : $F25111 ( value , _BOOL ) if $F4435 ( value ) { return verifyStringGroup ( value , COLOR_ <missing ';'> NUM00 <missing ';'> S ) ; } else { return verify ( value . substring ( NUM00 ) , HEX , null , NUM00 , NUM00 ) ; } $F1267 return _BOOL ; } }
protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { Class c = findLoadedClass ( name ) ; $F192589 ( c , findClass , name ) if ( c == null ) $F102970 ( name ) if ( resolve ) resolveClass ( c ) ; return c ; }
private int parseStreams ( String json , Set < StreamInfo > streamInfos ) { try { $F16165 ( parser ) JSONArray streamsArray ; try { $F16169 ( root , parser , json ) streamsArray = ( JSONArray ) root . get ( NUM00 ) ; } catch ( ClassCastException ex ) { $F18143 ( LOGGER ) streamsRequestError ( streamInfos ) ; $F150 } if ( streamsArray == null ) { $F18143 ( LOGGER ) streamsRequestError ( streamInfos ) ; $F150 } for ( Object obj : streamsArray ) { if ( obj instanceof JSONObject ) { StreamInfo parsedInfo = parseStream ( ( JSONObject ) obj , streamInfos == null ) ; if ( parsedInfo == null ) { LOGGER . warning ( NUM00 + ( JSONObject ) obj ) ; } $F4578 ( streamInfos , parsedInfo ) } else $F37856 ( LOGGER , obj ) } if ( streamInfos != null ) { for ( StreamInfo info : streamInfos ) { info . setOffline ( ) ; } } $F1651 ( streamsArray ) } catch ( ParseException ex ) { LOGGER . warning ( $F9309 ( ex ) ) ; streamsRequestError ( streamInfos ) ; $F150 } }
public StrTokenizer reset ( String input ) { reset ( ) ; if ( input != null ) { this . chars = input . toCharArray ( ) ; } else { this . chars = null ; } return this ; }
public void runTest $F72 throws Throwable { Document doc ; EntityReference entRef ; CharacterData entText ; $F236 ( doc , load , _BOOL ) entRef = doc . createEntityReference ( NUM00 ) ; assertNotNull ( NUM00 , entRef ) ; $F241 ( entText , entRef ) assertNotNull ( NUM00 , entText ) ; { boolean success = _BOOL ; try { entText . setNodeValue ( NUM00 ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; } assertTrue ( NUM00 , success ) ; } }
public void removeListener ( final IVisualCoverageListener listener ) $F106 ( listeners , listener )
@ ObjectiveCName ( NUM00 ) public boolean isLargeDialogMessage ( ContentType contentType ) { switch ( contentType ) { case SERVICE : case SERVICE_AVATAR : case SERVICE_AVATAR_REMOVED : case SERVICE_CREATED : case SERVICE_TITLE : case SERVICE_LEAVE : case SERVICE_REGISTERED : case SERVICE_KICK : case SERVICE_ADD : case SERVICE_JOINED : case SERVICE_CALL_ENDED : case SERVICE_CALL_MISSED : case SERVICE_ABOUT : case SERVICE_TOPIC : return _BOOL ; $F1267 return _BOOL ; } }
public static boolean isLoggingBehaviorEnabled ( LoggingBehavior behavior ) { synchronized ( loggingBehaviors ) { return FacebookSdk . isDebugEnabled ( ) && loggingBehaviors . contains ( behavior ) ; } }
private void onAttacked ( final Entity attacker ) { attackers . remove ( attacker ) ; attackers . add ( attacker ) ; }
private void handleDisallow ( ParseState state , RobotToken token ) { if ( state . isSkipAgents ( ) ) $F932 state . setFinishedAgentFields ( _BOOL ) ; if ( ! state . isAddingRules ( ) ) $F932 $F136712 ( path , token ) try { path = URLDecoder . decode ( path , NUM00 ) ; if $F1277 ( path ) { state . clearRules ( ) ; } else { state . addRule ( path , _BOOL ) ; } } catch ( Exception e ) { reportWarning ( NUM00 + path , state . getUrl ( ) ) ; } }
public void hideColumn ( Object columnName ) { $F2329 ( columnName ) for ( $F90183 ( i , columnModel ) ) { TableColumn column = columnModel . getColumn ( i ) ; if ( columnName . equals ( column . getHeaderValue ( ) ) ) $F87181 ( hideColumn , column ) } }
public static $F4203 $F28904 toSet ( T obj1 , T obj2 , T obj3 , T obj4 , T obj5 , T obj6 ) { $F78907 ( theSet ) theSet . add ( obj1 ) ; theSet . add ( obj2 ) ; theSet . add ( obj3 ) ; theSet . add ( obj4 ) ; theSet . add ( obj5 ) ; theSet . add ( obj6 ) ; return theSet ; }
private boolean isASCIIDigit ( char c ) { return $F19295 ( c ) ; }
$F79402 ( path , UNIX_SEPARATOR , WINDOWS_SEPARATOR )
public void accumulateAll ( List < TaggedLogAPIEntity > entities ) throws Exception { for ( TaggedLogAPIEntity entity : entities ) { accumulate ( entity ) ; } }
protected void printIdentifier ( String identifier , StringBuilder ddl ) $F9821 ( ddl , getDelimitedIdentifier , identifier )
public static int darker ( int c ) { return rgba ( Math . max ( NUM00 , ( int ) ( scale * red ( c ) ) ) , Math . max ( NUM00 , ( int ) ( scale * green ( c ) ) ) , Math . max ( NUM00 , ( int ) ( scale * blue ( c ) ) ) , alpha ( c ) ) ; }
private String toString ( final int size ) { if ( size < NUM00 ) $F23891 ( String , size ) else if ( size < NUM00 * NUM00 ) { return String . format ( Locale . ENGLISH , NUM00 , NUM00 * size / NUM00 ) ; } else { return String . format ( Locale . ENGLISH , NUM00 , NUM00 * size / NUM00 / NUM00 ) ; } }
$F61852 public void test_getColumnsArbitrary $F72 throws SQLException { ResultSet setAllNull = null ; ResultSet setMixed = null ; ResultSet allArbitrary = null ; $F806 tablesName = { DatabaseCreator . TEST_TABLE1 , DatabaseCreator . TEST_TABLE3 } ; Arrays . sort ( tablesName ) ; int setSize = NUM00 ; try { allArbitrary = meta . getColumns ( $F61861 ) ; assertNotNull ( allArbitrary ) ; checkColumnsShape ( allArbitrary ) ; setSize = crossCheckGetColumnsAndResultSetMetaData ( allArbitrary , _BOOL ) ; assertEquals ( NUM00 , setSize ) ; setMixed = meta . getColumns ( null , null , NUM00 , NUM00 ) ; assertNotNull ( setMixed ) ; checkColumnsShape ( setMixed ) ; setSize = crossCheckGetColumnsAndResultSetMetaData ( setMixed , _BOOL ) ; assertEquals ( NUM00 , setSize ) ; } $F32310 ( fail , e ) $F59 ( conn ) try { meta . getColumns ( null , null , DatabaseCreator . TEST_TABLE1 , NUM00 ) ; fail ( NUM00 ) ; } $F31184 }
static public SdfMacro decodeInstruction ( SdfBuffer buff ) { SdfMacro m ; if ( ( m = ChannelStart . match ( buff ) ) != null ) { return m ; } else if ( ( m = SdlVersion . match ( buff ) ) != null ) { return m ; } else if ( ( m = SkemeStart . match ( buff ) ) != null ) { return m ; } else if ( ( m = GenerateTrigger . match ( buff ) ) != null ) { return m ; } else if ( ( m = EndSound . match ( buff ) ) != null ) { return m ; } else if ( ( m = DelaySound . match ( buff ) ) != null ) { return m ; } else if ( ( m = SkipOnTrigger . match ( buff ) ) != null ) { return m ; } else if ( ( m = InitiateSound . match ( buff ) ) != null ) { return m ; } else if ( ( m = MaskCompare . match ( buff ) ) != null ) { return m ; } else if ( ( m = LoadModifier . match ( buff ) ) != null ) { return m ; } else if ( ( m = BranchTo . match ( buff ) ) != null ) { return m ; } else if ( ( m = Play . match ( buff ) ) != null ) { return m ; } else if ( ( m = FourByteMacro . match ( buff ) ) != null ) { return m ; } else if ( ( m = TwoByteMacro . match ( buff ) ) != null ) { return m ; } $F10910 ( log ) $F1274 }
public SIPDate ( long timeMillis ) { javaCal = new GregorianCalendar ( TimeZone . getTimeZone ( NUM00 ) , Locale . getDefault ( ) ) ; $F22273 date = new $F22273 ( timeMillis ) ; javaCal . setTime ( date ) ; wkday = javaCal . get ( Calendar . DAY_OF_WEEK ) ; switch ( wkday ) { case Calendar . MONDAY : sipWkDay = MON ; $F597 case Calendar . TUESDAY : sipWkDay = TUE ; $F597 case Calendar . WEDNESDAY : sipWkDay = WED ; $F597 case Calendar . THURSDAY : sipWkDay = THU ; $F597 case Calendar . FRIDAY : sipWkDay = FRI ; $F597 case Calendar . SATURDAY : sipWkDay = SAT ; $F597 case Calendar . SUNDAY : sipWkDay = SUN ; $F597 $F1267 InternalErrorHandler . handleException ( NUM00 + wkday ) ; } $F232861 ( day , javaCal , Calendar ) $F36853 ( month , javaCal , Calendar ) switch ( month ) { case Calendar . JANUARY : sipMonth = JAN ; $F597 case Calendar . FEBRUARY : sipMonth = FEB ; $F597 case Calendar . MARCH : sipMonth = MAR ; $F597 case Calendar . APRIL : sipMonth = APR ; $F597 case Calendar . MAY : sipMonth = MAY ; $F597 case Calendar . JUNE : sipMonth = JUN ; $F597 case Calendar . JULY : sipMonth = JUL ; $F597 case Calendar . AUGUST : sipMonth = AUG ; $F597 case Calendar . SEPTEMBER : sipMonth = SEP ; $F597 case Calendar . OCTOBER : sipMonth = OCT ; $F597 case Calendar . NOVEMBER : sipMonth = NOV ; $F597 case Calendar . DECEMBER : sipMonth = DEC ; $F597 $F1267 InternalErrorHandler . handleException ( NUM00 + month ) ; } $F36851 ( year , javaCal , Calendar ) $F36857 ( hour , javaCal , Calendar ) $F36859 ( minute , javaCal , Calendar ) $F36861 ( second , javaCal , Calendar ) }
public static TypeMirror upperBound ( TypeMirror type ) { do { if ( type instanceof TypeVariable ) { TypeVariable tvar = ( TypeVariable ) type ; if ( tvar . getUpperBound ( ) != null ) { type = tvar . getUpperBound ( ) ; } else $F5153 } else if ( type instanceof WildcardType ) { WildcardType wc = ( WildcardType ) type ; if ( wc . getExtendsBound ( ) != null ) { type = wc . getExtendsBound ( ) ; } else $F5153 } else $F5153 } while ( _BOOL ) ; return type ; }
public synchronized Object remove ( Object key ) { removeBlanks ( ) ; WeakKeyReference keyRef = new WeakKeyReference ( key ) ; WeakReference ref = ( WeakReference ) table . remove ( keyRef ) ; $F1275 ( ref ) $F1521 ( ref ) }
public boolean removeElement ( Node s ) { $F132452 ( m_mutable , XSLMessages , XPATHErrorResources ) $F161848 ( m_map , _BOOL ) for ( $F119 ( i , m_firstFree ) ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( s ) ) { if ( i < m_firstFree - NUM00 ) $F15773 ( System , m_map , i , m_firstFree ) m_firstFree -- ; m_map [ m_firstFree ] = null ; return _BOOL ; } } return _BOOL ; }
$F1 public InetAddress addressLocal $F72 { Socket s = getSocket ( ) ; if ( s != null ) { return s . getLocalAddress ( ) ; } else $F1337 }
public boolean startConnection $F72 { State state = _state . get ( ) ; if $F80957 ( state ) { $F5224 ( _connectionCount ) return _BOOL ; } $F80733 ( now , CurrentTime ) long lastFailTime = _lastFailTime ; $F106670 ( recoverTimeout , _dynamicRecoverTimeout ) if ( now < lastFailTime + recoverTimeout ) { return _BOOL ; } int count ; do { $F16478 ( count , _connectionCount ) $F53954 ( count , _BOOL ) } while ( ! $F26080 ( _connectionCount , count ) ) ; return _BOOL ; }
public AbstractNaryOperator ( final Expr ... args ) $F81861 ( this , Arrays , args )
static boolean isRegistered ( ObjectName objectName ) { return mbeanServer != null && mbeanServer . isRegistered ( objectName ) ; }
public static int findBestSampleSize $F2026 ( actualWidth , actualHeight , desiredWidth , desiredHeight ) { $F67468 ( wr , actualWidth , desiredWidth ) $F67468 ( hr , actualHeight , desiredHeight ) $F59772 ( ratio , Math , wr , hr ) float n = NUM00 ; while ( ( n * NUM00 ) <= ratio ) { n *= NUM00 ; } $F23219 ( n ) }
public SocketReader ( final Socket socket ) throws IOException { $F1832 ( Preconditions , socket ) $F64193 ( m_InputStream , socket ) ; }
private boolean moveToFinalScrollerPosition ( Scroller scroller ) { scroller . forceFinished ( _BOOL ) ; if ( isHorizontalMode ( ) ) { int amountToScroll = scroller . getFinalX ( ) - scroller . getCurrX ( ) ; int futureScrollOffset = ( mCurrentScrollOffset + amountToScroll ) % mSelectorElementSize ; int overshootAdjustment = mInitialScrollOffset - futureScrollOffset ; if ( overshootAdjustment != NUM00 ) { if $F41056 ( Math , overshootAdjustment , mSelectorElementSize ) { if ( overshootAdjustment > NUM00 ) { overshootAdjustment -= mSelectorElementSize ; } else { overshootAdjustment += mSelectorElementSize ; } } amountToScroll += overshootAdjustment ; scrollBy ( amountToScroll , NUM00 ) ; return _BOOL ; } } else { int amountToScroll = scroller . getFinalY ( ) - scroller . getCurrY ( ) ; int futureScrollOffset = ( mCurrentScrollOffset + amountToScroll ) % mSelectorElementSize ; int overshootAdjustment = mInitialScrollOffset - futureScrollOffset ; if ( overshootAdjustment != NUM00 ) { if $F41056 ( Math , overshootAdjustment , mSelectorElementSize ) { if ( overshootAdjustment > NUM00 ) { overshootAdjustment -= mSelectorElementSize ; } else { overshootAdjustment += mSelectorElementSize ; } } amountToScroll += overshootAdjustment ; scrollBy ( NUM00 , amountToScroll ) ; return _BOOL ; } } return _BOOL ; }
public void addLonLine $F7635 ( minLat , maxLat , lon ) { String name = NUM00 + nextShape ; nextShape ++ ; $F286 ( b , name ) double lat ; int steps = getStepCount ( minLat , lon , maxLat , lon ) ; for ( lat = minLat ; lat <= maxLat ; lat += ( maxLat - minLat ) / steps ) $F57713 ( b , lat , lon ) $F45293 ( b , maxLat , lon ) lat -= ( maxLat - minLat ) / NUM00 ; for ( ; lat >= minLat ; lat -= ( maxLat - minLat ) / steps ) $F57713 ( b , lat , lon ) $F84 ( b ) $F286 ( b , name ) }
$F1 public double calculate_K ( $F2027 x_index , $F1986 x_att , $F2027 y_index , $F1986 y_att ) { double result = NUM00 ; double tmp ; $F40997 ( xpos , x_index ) $F40997 ( ypos , y_index ) int zeros = dim ; while ( ( xpos >= NUM00 ) && ( ypos >= NUM00 ) ) { if ( x_index [ xpos ] == y_index [ ypos ] ) { tmp = x_att [ xpos ] - y_att [ ypos ] ; result += Math . exp ( - sigma * tmp * tmp ) ; xpos -- ; ypos -- ; } else if ( x_index [ xpos ] > y_index [ ypos ] ) { tmp = x_att [ xpos ] ; result += Math . exp ( - sigma * tmp * tmp ) ; xpos -- ; } else { tmp = y_att [ ypos ] ; result += Math . exp ( - sigma * tmp * tmp ) ; ypos -- ; } zeros -- ; } while ( xpos >= NUM00 ) { tmp = x_att [ xpos ] ; result += Math . exp ( - sigma * tmp * tmp ) ; xpos -- ; zeros -- ; } while ( ypos >= NUM00 ) { tmp = y_att [ ypos ] ; result += Math . exp ( - sigma * tmp * tmp ) ; ypos -- ; zeros -- ; } result += zeros ; $F133936 ( Math , result , degree ) }
private float sweep $F9302 ( tan1X , tan1Y , tan2X , tan2Y ) { final float minorSweep = ( float ) Math . toDegrees ( NUM00 * ( Math . asin ( NUM00 * Geometry . distance ( tan1X , tan1Y , tan2X , tan2Y ) / mScaledTouchSlop ) ) ) ; return NUM00 - minorSweep ; }
SunCertPathBuilderResult ( CertPath certPath , TrustAnchor trustAnchor , PolicyNode policyTree , PublicKey subjectPublicKey , AdjacencyList adjList ) { super ( certPath , trustAnchor , policyTree , subjectPublicKey ) ; this . adjList = adjList ; }
public static void attach ( final JFrame parent , final IDebugger debugger , final CDebugEventNotifier notifier ) { try { $F2346 ( notifier ) $F2410 ( debugger ) } catch ( final DebugExceptionWrapper exception ) { $F5191 ( notifier ) CUtilityFunctions . logException ( exception ) ; $F21899 ( innerMessage ) final String innerDescription = CUtilityFunctions . createDescription ( NUM00 , $F21904 , new String [ ] { NUM00 + NUM00 } ) ; NaviErrorDialog . show ( parent , innerMessage , innerDescription , exception ) ; } }
public boolean checkAddrPattern ( final String theAddrPattern ) { return $F19068 ( theAddrPattern , addrPattern ) ; }
@ MediumTest public void testStabilityInSpace $F72 { $F657 ( t , System ) VelocityTracker vt = VelocityTracker . obtain ( ) ; drag ( vt , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , t , NUM00 ) ; $F163812 ( vt ) float firstX = vt . getXVelocity ( ) ; float firstY = vt . getYVelocity ( ) ; $F725 ( vt ) drag ( vt , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , t , NUM00 ) ; $F163812 ( vt ) float secondX = vt . getXVelocity ( ) ; float secondY = vt . getYVelocity ( ) ; assertEqualFuzzy ( firstX , secondX , NUM00 ) ; assertEqualFuzzy ( firstY , secondY , NUM00 ) ; $F17551 ( vt ) }
private View fillFromTop ( int nextTop ) { if ( DEBUG ) Log . i ( TAG , NUM00 + nextTop + M_FIRST_POSITION + mFirstPosition ) ; $F16700 ( mFirstPosition , Math , mSelectedPosition ) $F72086 ( mFirstPosition , Math , mItemCount ) $F17370 ( mFirstPosition ) mFirstPosition -= mFirstPosition % mNumColumns ; return fillDown ( mFirstPosition , nextTop ) ; }
public static String SITInfo ( EnumMap < SIT , EnumMap < CIT , Boolean > > shp ) { $F83 ( result ) for ( SIT key : shp . keySet ( ) ) { result . append ( $F369 ( key ) + CITInfo ( shp . get ( key ) ) + NUM00 ) ; } $F92 ( result ) }
public static $F529 updateBinaryFile $F71242 ( dctx , context ) { $F67631 ( result ) try { result = updateBinaryFileMethod ( dctx , context ) ; } catch ( GenericServiceException e ) $F34760 ( ServiceUtil , e ) return result ; }
public $F3510 write ( List < InternalLog > logs ) throws IOException { final List < Put > puts = new ArrayList < Put > $F716 ( logs ) ; final $F3510 result = new $F3511 $F716 ( logs ) ; for ( InternalLog log : logs ) { final $F96 rowkey = RowkeyBuilder . buildRowkey ( log ) ; final Put p = new Put ( rowkey ) ; populateColumnValues ( p , log ) ; puts . add ( p ) ; final $F3510 indexRowkeys = log . getIndexRowkeys ( ) ; $F189158 ( indexRowkeys , writeIndexes , rowkey , puts ) result . add ( rowkey ) ; } tbl . put ( puts ) ; return result ; }
public int read $F139836 ( fileOffset , buffer , offset , length ) throws IOException { log . info ( $F36004 ( Long , fileOffset ) + length + NUM00 ) ; return _file . read ( fileOffset , buffer , offset , length ) ; }
public boolean validateCurrentStep ( int currentStep , int newStep ) { return _BOOL ; }
$F4170 protected static $F147826 mustBeTrue ( boolean input , $F4170 ValidationContext validationContext ) { return input ? Collections . < RaveError > $F9639 : createNewList ( new RaveError ( validationContext , RaveErrorStrings . MUST_BE_TRUE_ERROR ) ) ; }
$F121106 ( putLock , this , notFull )
@ LogMessageDoc ( $F85045 , $F100217 , $F85047 , recommendation = LogMessageDoc . REPORT_CONTROLLER_BUG ) public void queueHint ( String storeName , ByteArray key , $F100220 value ) { try { HintKey hk = new HintKey ( storeName , key ) ; $F8934 ( hintLock ) try { boolean needed = ! hints . containsKey ( hk ) ; needed &= hints . doput ( hk , value ) ; if ( needed ) { hintQueue . add ( hk ) ; $F702 ( hintsAvailable ) } } $F796 ( hintLock ) } catch ( SyncException e ) $F30203 ( logger , storeName , e ) }
public static DBIDVar randomSample ( DBIDs ids , RandomFactory random ) { return randomSample ( ids , random . getSingleThreadedRandom ( ) ) ; }
public void testAddListener $F72 { SimpleListener listener1 = createMockSimpleListener ( NUM00 ) ; SimpleListener listener2 = createMockSimpleListener ( NUM00 ) ; assertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; adaptor . addListener ( listener1 ) ; assertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; adaptor . addListener ( listener2 ) ; assertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; adaptor . addListener ( listener1 ) ; assertEquals ( NUM00 , adaptor . getNumListeners ( ) ) ; List < SimpleListener > listeners = Lists . asList ( adaptor . getListeners ( ) ) ; $F70108 ( assertEquals , listeners ) $F195871 ( assertTrue , listeners , listener1 ) $F195871 ( assertTrue , listeners , listener2 ) EasyMock . verify ( listener1 , listener2 ) ; }
public void onResponse ( DiscoveryNode node ) { $F12396 ( found , pendingNodes , node ) assert found : NUM00 + node + NUM00 ; $F38783 ( latch ) }
$F1 public synchronized boolean add ( E object ) { if ( elementCount == elementData . length ) $F5795 ( growByOne ) elementData [ elementCount ++ ] = object ; modCount ++ ; return _BOOL ; }
private static long copy ( InputStream from , OutputStream to ) throws IOException { $F96 buf = new byte [ Settings . BUFFER_SIZE ] ; long total = NUM00 ; while ( _BOOL ) { $F83249 ( r , from , buf ) $F76065 ( r ) $F11584 ( to , buf , r ) total += r ; } return total ; }
$F69921 ( b , off , len , length , data , enlarge , System , this )
public void addValue ( String value ) { $F113304 ( _stringValues , setupStringValues ) $F2201 ( _stringValues , value ) }
public void writeRawLittleEndian32 ( final int value ) throws IOException { if $F8338 ( buffer ) { throw new OutOfSpaceException ( buffer . position ( ) , buffer . limit ( ) ) ; } buffer . putInt ( value ) ; }
private static $F52326 pathToURLs ( String path ) throws MalformedURLException { $F1338 ( path ) synchronized ( pathToURLsCache ) { $F131 v = ( $F131 ) pathToURLsCache . get ( path ) ; if ( v != null ) { return ( ( $F52326 ) v [ NUM00 ] ) ; } } $F70316 ( st , path ) $F52326 urls = new URL $F49889 ( st ) ; for ( int i = NUM00 ; st . hasMoreTokens ( ) ; i ++ ) { urls [ i ] = new URL $F52332 ( st ) ; } synchronized ( pathToURLsCache ) { pathToURLsCache . put ( path , new Object [ ] { urls , new SoftReference ( path ) } ) ; } return urls ; }
public static int hash4 ( int hash , Object x , Object y , Object z , Object w ) { return NUM00 | ( hash + NUM00 * System . identityHashCode ( x ) + NUM00 * System . identityHashCode ( y ) + NUM00 * System . identityHashCode ( z ) + NUM00 * System . identityHashCode ( w ) ) ; }
public long skip ( long n ) throws IOException { $F6853 ( n ) ensureOpen ( ) ; int max = ( int ) Math . min ( n , Integer . MAX_VALUE ) ; int total = NUM00 ; while ( total < max ) { int len = max - total ; if ( len > b . length ) $F9454 ( len , b ) len = read ( b , NUM00 , len ) ; if ( len == - NUM00 ) $F3468 ( reachEOF , _BOOL ) total += len ; } return total ; }
private V doPut ( K kkey , V value , boolean onlyIfAbsent ) { $F45430 ( key , comparable , kkey ) for ( $F589 ) { $F45432 ( b , findPredecessor , key ) $F35175 ( n , b ) for ( $F589 ) { if ( n != null ) { $F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; $F45440 ( v , n , b , f ) $F45442 ( v , n , b ) $F45446 ( c , key , n ) $F94836 ( c , b , n , f ) if ( c == NUM00 ) { if ( onlyIfAbsent || n . casValue ( v , value ) ) $F94847 ( v ) else $F597 } } $F9341 z = new $F9341 ( kkey , value , n ) ; $F397125 ( b , n , z ) int level = randomLevel ( ) ; if ( level > NUM00 ) insertIndex ( z , level ) ; $F1274 } } }
public void addFillOutsideLine ( FillOutsideLine fill ) $F207 ( mFillBelowLine , fill )
public void add ( final PositionChangeListener listener ) $F207 ( listeners , listener )
public void choose ( boolean enable , String what ) ;
public void testDuplicateEntries $F72 throws Exception { String name1 = NUM00 ; String name2 = NUM00 ; $F1538 ( baos ) $F65023 ( out , baos ) out . putNextEntry ( new ZipEntry ( name2 ) ) ; $F22108 ( out ) out . putNextEntry ( new ZipEntry ( name1 ) ) ; $F22108 ( out ) $F59 ( out ) $F1208 ( buffer , baos ) replaceBytes ( buffer , name2 . getBytes ( ) , name1 . getBytes ( ) ) ; File badZip = createTemporaryZipFile ( ) ; writeBytes ( badZip , buffer ) ; try { $F170751 ( bad , badZip ) fail ( ) ; } catch ( ZipException expected ) $F845 }
private void rehash $F72 { int size = _symbols . length ; int newSize = size + size ; if ( newSize > MAX_TABLE_SIZE ) { _size = NUM00 ; $F17838 ( Arrays , _symbols ) $F17838 ( Arrays , _buckets ) _dirty = _BOOL ; $F665 } $F806 oldSyms = _symbols ; Bucket [ ] oldBuckets = _buckets ; $F58180 ( _symbols , newSize ) _buckets = new Bucket [ newSize > > NUM00 ] ; _indexMask = newSize - NUM00 ; _sizeThreshold = _thresholdSize ( newSize ) ; int count = NUM00 ; int maxColl = NUM00 ; for ( $F1316 ( i , size ) ) { String symbol = oldSyms [ i ] ; if ( symbol != null ) { ++ count ; int index = _hashToIndex ( calcHash ( symbol ) ) ; if ( _symbols [ index ] == null ) { _symbols [ index ] = symbol ; } else { int bix = ( index > > NUM00 ) ; Bucket newB = new Bucket ( symbol , _buckets [ bix ] ) ; _buckets [ bix ] = newB ; maxColl = Math . max ( maxColl , newB . length ( ) ) ; } } } size >>= NUM00 ; for ( $F1316 ( i , size ) ) { Bucket b = oldBuckets [ i ] ; while ( b != null ) { ++ count ; String symbol = b . getSymbol ( ) ; int index = _hashToIndex ( calcHash ( symbol ) ) ; if ( _symbols [ index ] == null ) { _symbols [ index ] = symbol ; } else { int bix = ( index > > NUM00 ) ; Bucket newB = new Bucket ( symbol , _buckets [ bix ] ) ; _buckets [ bix ] = newB ; maxColl = Math . max ( maxColl , newB . length ( ) ) ; } $F224746 ( b ) } } _longestCollisionList = maxColl ; if ( count != _size ) { throw new Error $F6486 ( _size , count ) ; } }
private void checkSize ( final int i ) { if ( i >= max_size ) { final int old_size = max_size ; max_size += increment_size ; if ( max_size <= i ) { max_size = i + increment_size + NUM00 ; } $F92861 ( temp , items ) $F3936 ( items , max_size ) $F135 ( System , temp , items , old_size ) increment_size = incrementSize ( increment_size ) ; } }
public ComponentPrintService ( Component c , PageFormat format ) { setPageFormat ( format ) ; setPrintable ( this ) ; setComponent ( c ) ; Rectangle componentBounds = c . getBounds ( null ) ; setSize ( $F44316 ( componentBounds ) ) ; setScale ( NUM00 , NUM00 ) ; }
$F1 public void reconcileFlow ( OFMatchReconcile ofmRcIn , EventPriority priority ) { $F8249 ( ofmRcIn ) OFMatchReconcile myOfmRc = new OFMatchReconcile ( ofmRcIn ) ; flowQueue . offer ( myOfmRc , priority ) ; $F72375 ( ctrFlowReconcileRequest ) $F6357 ( currTime ) long delay = NUM00 ; if ( currTime . after ( new Date ( lastReconcileTime . getTime ( ) + NUM00 ) ) ) { delay = NUM00 ; } else { delay = FLOW_RECONCILE_DELAY_MILLISEC ; } flowReconcileTask . reschedule ( delay , TimeUnit . MILLISECONDS ) ; if $F8415 ( logger ) { logger . trace ( NUM00 , myOfmRc . toString ( ) , flowQueue . size ( ) ) ; } }
public static $F65632 createInputDialog ( final Window owner , final String title , final String label ) { final TextInputDialog dialog = new TextInputDialog $F72 ; dialog . setTitle ( title ) ; dialog . setHeaderText ( null ) ; dialog . setContentText ( label ) ; dialog . initOwner ( owner ) ; return dialog . showAndWait ( ) ; }
public void flush $F72 throws IOException { $F165012 ( writer ) $F1206 ( outstr ) }
$F1431 protected synchronized V removeInternal ( Object key , boolean countRemove ) { if ( key == null ) { if $F2907 ( Debug ) Debug . logVerbose ( NUM00 + this . name , module ) ; } Object nulledKey = fromKey ( key ) ; CacheLine $F2193 oldCacheLine ; V oldValue ; if ( fileTable != null ) { try { synchronized ( this ) { try $F6045 ( oldValue , fileTable , nulledKey ) catch ( IOException e ) { oldValue = null ; throw e ; } fileTable . remove ( nulledKey ) ; $F17621 ( jdbmMgr ) } } catch ( IOException e ) { oldValue = null ; Debug . logError ( e , module ) ; } oldCacheLine = memoryTable . remove ( nulledKey ) ; } else { oldCacheLine = memoryTable . remove ( nulledKey ) ; oldValue = oldCacheLine != null ? oldCacheLine . getValue ( ) : null ; } $F25302 ( oldCacheLine , cancel ) if ( oldValue != null ) { noteRemoval ( ( K ) key , oldValue ) ; if ( countRemove ) $F5224 ( removeHitCount ) return oldValue ; } else { if ( countRemove ) $F5224 ( removeMissCount ) $F1274 } }
public void remove ( double value ) { if $F35707 ( Double , value ) $F932 int index = findInsertIndex ( value ) ; if ( index == - NUM00 ) $F4639 $F47318 ( valueAtIndex , values , index ) if ( ( valueAtIndex != null ) && $F2137 ( valueAtIndex , value ) ) $F4639 values . remove ( index ) ; }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { $F33242 ( it , bcme ) $F7685 ( it , findAndUndo ) }
void lightweightPaint ( Graphics g ) { super . lightweightPaint ( g ) ; paintHeavyweightComponents ( g ) ; }
public JSONArray names $F72 { $F19928 ( ja ) Iterator keys = keys ( ) ; while $F2921 ( keys ) { ja . put ( keys . next ( ) ) ; } return $F1276 ( ja ) ? null : ja ; }
private final void removeChannel ( String channel ) { $F37156 ( channel ) $F23074 ( _channels , channel ) }
public void addChangeListener ( ChangeListener cl ) $F24128 ( listeners , cl )
public static void expandNumber ( String numberString , WordRelation wordRelation , Item tokenItem ) { $F1749 ( numDigits , numberString ) if ( numDigits == NUM00 ) $F845 else if ( numDigits == NUM00 ) { expandDigits ( numberString , wordRelation , tokenItem ) ; } else if ( numDigits == NUM00 ) { expand2DigitNumber ( numberString , wordRelation , tokenItem ) ; } else if ( numDigits == NUM00 ) { expand3DigitNumber ( numberString , wordRelation , tokenItem ) ; } else if ( numDigits < NUM00 ) { expandBelow7DigitNumber ( numberString , wordRelation , tokenItem ) ; } else if ( numDigits < NUM00 ) { expandBelow10DigitNumber ( numberString , wordRelation , tokenItem ) ; } else if ( numDigits < NUM00 ) { expandBelow13DigitNumber ( numberString , wordRelation , tokenItem ) ; } else { expandDigits ( numberString , wordRelation , tokenItem ) ; } }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
private int measureShort ( int measureSpec ) { int result = NUM00 ; $F20444 ( specMode , MeasureSpec , measureSpec ) $F23132 ( specSize , MeasureSpec , measureSpec ) if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( NUM00 * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + NUM00 ) ; $F23140 ( specMode , MeasureSpec , result , Math , specSize ) } return result ; }
protected boolean canTriggerWalking $F72 { return _BOOL ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public static String encryptECB ( final $F96 concatenatedHashValue , final Long turnoverCounter , final SecretKey symmetricKey , int turnOverCounterLengthInBytes ) throws NoSuchAlgorithmException , NoSuchProviderException , NoSuchPaddingException , InvalidKeyException , IllegalBlockSizeException , BadPaddingException { $F120018 ( byteBufferIV , ByteBuffer ) byteBufferIV . put ( concatenatedHashValue ) ; $F45857 ( IV , byteBufferIV ) $F120018 ( byteBufferData , ByteBuffer ) byteBufferData . putLong ( turnoverCounter ) ; $F45857 ( data , byteBufferData ) $F33012 ( turnOverCounterByteRep , get2ComplementRepForLong , turnoverCounter , turnOverCounterLengthInBytes ) $F7057 ( System , turnOverCounterByteRep , data ) final Cipher cipher = Cipher . getInstance ( NUM00 , NUM00 ) ; $F43929 ( cipher , Cipher , symmetricKey ) $F120024 ( intermediateResult , cipher , IV ) final $F96 $F14612 ( result , data ) ; for ( $F1139 ( i , data ) ) { result [ i ] = ( byte ) ( ( data [ i ] ) ^ ( intermediateResult [ i ] ) ) ; } $F4727 ( encryptedTurnOverValue , turnOverCounterLengthInBytes ) $F135 ( System , result , encryptedTurnOverValue , turnOverCounterLengthInBytes ) return CashBoxUtils . base64Encode ( encryptedTurnOverValue , _BOOL ) ; }
private static boolean isFrostWireOld ( String messageVersion ) { $F397 ( messageVersion , _BOOL ) String currentVersion = FrostWireUtils . getFrostWireVersion ( ) ; $F12418 ( currentVersion , messageVersion , _BOOL ) try { $F6542 ( fwVersionParts , currentVersion ) $F167151 ( fw_major , Integer , fwVersionParts ) $F167151 ( fw_release , Integer , fwVersionParts ) $F167151 ( fw_service , Integer , fwVersionParts ) $F6542 ( msgVersionParts , messageVersion ) $F167151 ( msg_major , Integer , msgVersionParts ) $F167151 ( msg_release , Integer , msgVersionParts ) $F167151 ( msg_service , Integer , msgVersionParts ) $F88060 ( fw_major , msg_major , _BOOL ) if ( fw_major == msg_major && fw_release < msg_release ) { return _BOOL ; } if ( fw_major == msg_major && fw_release == msg_release && fw_service < msg_service ) { return _BOOL ; } } $F7474 ( _BOOL ) return _BOOL ; }
public synchronized void drawMap $F72 { $F3224 ( lastDrawMapReq , System ) SwingUtilities . invokeLater ( drawMapable ) ; }
public void selectTable2Column ( Index column ) $F207 ( table2Columns , column )
public $F3803 extractURLs ( final String text ) { if $F6036 ( text ) $F12522 ( Collections ) final $F5 $F8726 ( urls ) ; for ( final Entity entity : extractURLsWithIndices ( text ) ) { urls . add ( entity . value ) ; } return urls ; }
public void findAndUndo ( Iterator it ) $F7686 ( it , findAndUndo )
public static $F2027 scaleDownInside $F2026 ( inWidth , inHeight , maxWidth , maxHeight ) { int scaledWidth ; int scaledHeight ; if ( inWidth <= maxWidth && inHeight <= maxHeight ) { scaledWidth = inWidth ; scaledHeight = inHeight ; } else { double widthRatio = $F10425 ( inWidth , maxWidth ) ; double heightRatio = $F10425 ( inHeight , maxHeight ) ; if ( widthRatio > heightRatio ) { scaledWidth = maxWidth ; scaledHeight = ( int ) Math . round ( ( double ) inHeight / widthRatio ) ; } else { scaledHeight = maxHeight ; scaledWidth = ( int ) Math . round ( ( double ) inWidth / heightRatio ) ; } } return $F10511 ( scaledWidth , scaledHeight ) ; }
public void rm ( String fileOrDir ) { $F83 ( buf ) String command = $F36702 ( String , ImageServerDialogProperties , fileOrDir ) ; sendWaitFor ( command , defaultTimeout , prompts , buf ) ; $F62755 ( log , buf ) }
private MGRSComponents breakMGRSString ( String MGRSString ) { int num_digits ; int num_letters ; int i = NUM00 ; int j = NUM00 ; long error_code = MGRS_NO_ERROR ; int zone = NUM00 ; $F11844 ( letters ) long easting = NUM00 ; long northing = NUM00 ; int precision = NUM00 ; while $F61616 ( i , MGRSString ) { i ++ ; } j = i ; while ( i < MGRSString . length ( ) && $F69553 ( Character , MGRSString , i ) ) { i ++ ; } num_digits = i - j ; if ( num_digits <= NUM00 ) if ( num_digits > NUM00 ) { $F64359 ( zone , Integer , MGRSString , j , i ) ; if $F61157 ( zone ) error_code |= MGRS_ <missing ';'> $F83088 } else error_code |= MGRS_ <missing ';'> $F83088 j = i ; while ( i < MGRSString . length ( ) && $F154919 ( Character , MGRSString , i ) ) { i ++ ; } num_letters = i - j ; if ( num_letters == NUM00 ) { letters [ NUM00 ] = alphabet . indexOf ( $F29169 ( Character , MGRSString , j ) ) ; if ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 letters [ NUM00 ] = alphabet . indexOf ( Character . toUpperCase ( MGRSString . charAt ( j + NUM00 ) ) ) ; if ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 letters [ NUM00 ] = alphabet . indexOf ( Character . toUpperCase ( MGRSString . charAt ( j + NUM00 ) ) ) ; if ( ( letters [ NUM00 ] == LETTER_I ) || ( letters [ NUM00 ] == LETTER_O ) ) error_code |= MGRS_ <missing ';'> $F83088 } else error_code |= MGRS_ <missing ';'> $F83088 j = i ; while ( i < MGRSString . length ( ) && $F69553 ( Character , MGRSString , i ) ) { i ++ ; } num_digits = i - j ; if ( ( num_digits <= NUM00 ) && ( num_digits % NUM00 == NUM00 ) ) { int n ; double multiplier ; n = num_digits / NUM00 ; precision = n ; if ( n > NUM00 ) { easting = Integer . parseInt ( MGRSString . substring ( j , j + n ) ) ; northing = Integer . parseInt ( MGRSString . substring ( j + n , j + n + n ) ) ; multiplier = Math . pow ( NUM00 , NUM00 - n ) ; easting *= multiplier ; northing *= multiplier ; } else $F18712 ( easting , northing ) } else error_code |= MGRS_ <missing ';'> $F83088 last_error = error_code ; if ( error_code == MGRS_NO_ERROR ) return new MGRSComponents ( zone , letters [ NUM00 ] , letters [ NUM00 ] , letters [ NUM00 ] , easting , northing , precision ) ; $F1274 }
public void putMap ( $F224310 ( m ) ) { for ( $F3465 ( key , m ) ) { $F44293 vals = get ( key ) ; if ( vals == null ) { vals = new $F32030 $F72 ; put ( key , vals ) ; } $F103980 ( vals , m , key ) } }
protected void throwParseException ( ParseException e ) throws ParseException { if ( locator != null ) { String elementLocation = NUM00 ; if ( curHandler != null ) { elementLocation += NUM00 + curHandler . qName ; } String location = NUM00 + String . valueOf ( locator . getLineNumber ( ) ) + NUM00 + String . valueOf ( locator . getColumnNumber ( ) ) + elementLocation + NUM00 ; LogUtils . logException ( logger , Level . FINE , location , e ) ; throw new ParseException ( location + e . getMessage ( ) , e ) ; } else { LogUtils . logException ( logger , Level . FINE , null , e ) ; throw e ; } }
public void addAssetListener ( $F1113 ActionListener listener ) $F207 ( myAssetListeners , listener )
public UndoableEdit insertString ( int where , String str ) throws BadLocationException { if ( where > length ( ) || where < NUM00 ) { throw new BadLocationException $F59470 ( length ) ; } $F7782 ( chars , str ) replace ( where , NUM00 , chars , chars . length ) ; return new InsertUndo ( where , str . length ( ) ) ; }
public static JavaPairRDD < MatrixIndexes , MatrixBlock > toMatrixJavaPairRDD ( JavaSparkContext sc , MatrixBlock src , int brlen , int bclen ) throws DMLRuntimeException { $F133040 ( t0 , DMLScript , System ) LinkedList < Tuple2 < MatrixIndexes , MatrixBlock > > list = new LinkedList < Tuple2 < MatrixIndexes , MatrixBlock > > $F72 ; if ( src . getNumRows ( ) <= brlen && src . getNumColumns ( ) <= bclen ) { list . addLast ( new Tuple2 < MatrixIndexes , MatrixBlock > ( new MatrixIndexes $F32532 , src ) ) ; } else { boolean sparse = src . isInSparseFormat ( ) ; for ( int blockRow = NUM00 ; blockRow < ( int ) Math . ceil ( src . getNumRows ( ) / ( double ) brlen ) ; blockRow ++ ) for ( int blockCol = NUM00 ; blockCol < ( int ) Math . ceil ( src . getNumColumns ( ) / ( double ) bclen ) ; blockCol ++ ) { int maxRow = ( blockRow * brlen + brlen < src . getNumRows ( ) ) ? brlen : src . getNumRows ( ) - blockRow * brlen ; int maxCol = ( blockCol * bclen + bclen < src . getNumColumns ( ) ) ? bclen : src . getNumColumns ( ) - blockCol * bclen ; MatrixBlock block = new MatrixBlock ( maxRow , maxCol , sparse ) ; int row_offset = blockRow * brlen ; int col_offset = blockCol * bclen ; src . sliceOperations ( row_offset , row_offset + maxRow - NUM00 , col_offset , col_offset + maxCol - NUM00 , block ) ; MatrixIndexes indexes = new MatrixIndexes ( blockRow + NUM00 , blockCol + NUM00 ) ; list . addLast ( new Tuple2 < MatrixIndexes , MatrixBlock > ( indexes , block ) ) ; } } JavaPairRDD < MatrixIndexes , MatrixBlock > result = sc . parallelizePairs ( list ) ; if ( DMLScript . STATISTICS ) { Statistics . accSparkParallelizeTime ( System . nanoTime ( ) - t0 ) ; Statistics . incSparkParallelizeCount ( NUM00 ) ; } return result ; }
public static boolean isYouTubeUrl ( String url ) { $F46019 ( TextUtils , url , _BOOL ) $F23375 ( uri , Uri , url ) String authority = uri . getAuthority ( ) ; if ( ! TextUtils . isEmpty ( authority ) && authority . contains ( NUM00 ) ) { return _BOOL ; } else { return _BOOL ; } }
public List < NamespaceVO > findNamespaces ( String appId , Env env , String clusterName ) { List < NamespaceDTO > namespaces = namespaceAPI . findNamespaceByCluster ( appId , env , clusterName ) ; if $F45555 ( namespaces ) { throw new BadRequestException $F580 ; } List < NamespaceVO > $F19827 ( namespaceVOs ) ; for ( NamespaceDTO namespace : namespaces ) { NamespaceVO namespaceVO = null ; try { namespaceVO = parseNamespace ( appId , env , clusterName , namespace ) ; namespaceVOs . add ( namespaceVO ) ; } catch ( Exception e ) { logger . error ( NUM00 , appId , env , clusterName , namespace . getNamespaceName ( ) , e ) ; throw e ; } } return namespaceVOs ; }
void unlink $F75141 ( p , trail ) { p . item = null ; $F33910 ( trail , p ) if ( last == p ) last = trail ; $F75143 ( count , capacity , notFull ) }
public static void openShareDialog ( Context context , String title , $F1431 String uri , String shareText , String shareSubject ) { Intent share = new Intent ( Intent . ACTION_SEND ) ; $F146148 ( share ) share . putExtra ( Intent . EXTRA_TEXT , shareText ) ; share . putExtra ( Intent . EXTRA_SUBJECT , shareSubject ) ; if $F20899 ( TextUtils , uri ) { $F146148 ( share ) share . putExtra ( Intent . EXTRA_STREAM , Uri . parse ( uri ) ) ; } context . startActivity ( Intent . createChooser ( share , title ) ) ; }
public void addMatching ( final ConversationStates state , final String triggerString , final ExpressionMatcher matcher , final ChatCondition condition , boolean secondary , final ConversationStates nextState , final String reply , final ChatAction action ) { $F296121 triggerExpressions = createUniqueTriggerExpressions ( state , Arrays . asList ( triggerString ) , matcher , condition , reply , action ) ; add ( triggerExpressions , state , condition , secondary , nextState , reply , action ) ; }
boolean dropItems ( final Player player , int itemCount ) { boolean result = _BOOL ; final ItemCollection itemsTodo = new ItemCollection $F72 ; itemsTodo . addFromQuestStateString ( player . getQuest ( questSlot ) ) ; if ( player . drop ( itemName , itemCount ) ) { if ( itemsTodo . removeItem ( itemName , itemCount ) ) { result = _BOOL ; } } else { final $F291208 items = player . getAllEquipped ( itemName ) ; if ( items != null ) { for ( final Item item : items ) { final int quantity = item . getQuantity ( ) ; $F50166 ( n , Math , itemCount , quantity ) if ( player . drop ( itemName , n ) ) { itemCount -= n ; if ( itemsTodo . removeItem ( itemName , n ) ) { result = _BOOL ; } } if ( itemCount == NUM00 ) $F3468 ( result , _BOOL ) } } } if ( result ) { player . setQuest ( questSlot , itemsTodo . toStringForQuestState ( ) ) ; } return result ; }
public void encodeOctetString ( byte tb [ ] , int tag , int tboffset , int length ) throws EncodeException { encodeByte ( tag ) ; encodeLength ( length ) ; if ( length > NUM00 ) { ensureFreeBytes ( length ) ; System . arraycopy ( tb , tboffset , buf , offset , length ) ; offset += length ; } }
private void swapBlocks $F14337 ( from , second , to ) { int len1 = second - from , len2 = to - second + NUM00 ; if ( len1 == NUM00 || len2 == NUM00 ) $F932 if ( len1 < temp . length ) { $F21535 ( System , data , from , temp , len1 ) $F69282 ( System , data , second , from , len2 ) System . arraycopy ( temp , NUM00 , data , from + len2 , len1 ) ; $F665 } else if ( len2 < temp . length ) { $F21535 ( System , data , second , temp , len2 ) $F271181 ( System , data , from , len2 , len1 ) $F6483 ( System , temp , data , from , len2 ) $F665 } reverseBlock ( from , second - NUM00 ) ; reverseBlock ( second , to ) ; reverseBlock ( from , to ) ; }
private static long totalSize ( $F12295 relPathToSize ) { long total = NUM00 ; for ( Long l : relPathToSize . values ( ) ) { total += l ; } return total ; }
public boolean hasNext $F72 { return iterator . hasNext ( ) ; }
public static boolean isValid ( Timestamp validFrom , Timestamp validTo , Timestamp testDate ) { $F397 ( testDate , _BOOL ) $F91730 ( validFrom , validTo , _BOOL ) if ( validFrom != null && validFrom . after ( testDate ) ) return _BOOL ; if ( validTo != null && validTo . before ( testDate ) ) return _BOOL ; return _BOOL ; }
public PatternTokenizer ( AttributeFactory factory , Pattern pattern , int group ) { super ( factory ) ; this . group = group ; matcher = pattern . matcher ( NUM00 ) ; if ( group >= NUM00 && group > matcher . groupCount ( ) ) { throw new IllegalArgumentException ( NUM00 + matcher . groupCount ( ) + NUM00 ) ; } }
$F1 public double totalEstimatedQuantityForPreviousREs ( final Long woActivityId , Long estimateId , final Long activityId , final WorkOrder workOrder ) { if ( estimateId == null ) estimateId = - NUM00 ; $F68541 ( params ) Double estQuantity = null ; params = new Object [ ] { estimateId , workOrder , workOrder , woActivityId , activityId } ; estQuantity = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; Double estQuantityRE = null ; params = new Object [ ] { estimateId , workOrder , workOrder , activityId } ; estQuantityRE = ( Double ) genericService . findByNamedQuery ( NUM00 , params ) ; if ( estQuantity != null && estQuantityRE != null ) estQuantity = estQuantity + estQuantityRE ; if ( estQuantity == null && estQuantityRE != null ) estQuantity = estQuantityRE ; if ( estQuantity == null ) $F1082 else $F12165 ( estQuantity ) }
protected long writeDataToFile ( NodeHolder nodeHolder , FileChannel channel ) throws CarbonDataWriterException { $F30974 compressedIndex = nodeHolder . getCompressedIndex ( ) ; $F30974 compressedIndexMap = nodeHolder . getCompressedIndexMap ( ) ; $F30974 compressedDataIndex = nodeHolder . getCompressedDataIndex ( ) ; int indexBlockSize = NUM00 ; int index = NUM00 ; for ( int i = NUM00 ; i < nodeHolder . getKeyBlockIndexLength ( ) . length ; i ++ ) { indexBlockSize += nodeHolder . getKeyBlockIndexLength ( ) [ index ++ ] + CarbonCommonConstants . INT_SIZE_IN_BYTE ; } for ( int i = NUM00 ; i < nodeHolder . getDataIndexMapLength ( ) . length ; i ++ ) { indexBlockSize += nodeHolder . getDataIndexMapLength ( ) [ i ] ; } ByteBuffer byteBuffer = ByteBuffer . allocate ( nodeHolder . getKeyArray ( ) . length + nodeHolder . getDataArray ( ) . length + indexBlockSize ) ; long offset = NUM00 ; try { $F8935 ( offset , channel ) byteBuffer . put ( nodeHolder . getKeyArray ( ) ) ; byteBuffer . put ( nodeHolder . getDataArray ( ) ) ; ByteBuffer buffer1 = null ; for ( $F1139 ( i , compressedIndex ) ) { buffer1 = ByteBuffer . allocate ( nodeHolder . getKeyBlockIndexLength ( ) [ i ] ) ; buffer1 . putInt ( compressedIndex [ i ] . length ) ; buffer1 . put ( compressedIndex [ i ] ) ; if ( compressedIndexMap [ i ] . length > NUM00 ) $F30132 ( buffer1 , compressedIndexMap , i ) $F23501 ( buffer1 ) byteBuffer . put ( buffer1 . array ( ) ) ; } for ( $F1139 ( i , compressedDataIndex ) ) $F30132 ( byteBuffer , compressedDataIndex , i ) $F14257 ( byteBuffer ) channel . write ( byteBuffer ) ; } catch ( IOException exception ) $F85378 ( exception ) return offset ; }
public boolean eval $F72 { if ( $F10470 ( sourceFileSets ) && $F10470 ( sourceResources ) && sourceFile == null ) { throw new BuildException $F580 ; } if ( ( $F3816 ( sourceFileSets ) || $F3816 ( sourceResources ) ) && sourceFile != null ) { throw new BuildException $F580 ; } if ( urlbase == null ) { throw new BuildException $F580 ; } if $F271542 ( sourceFile ) { throw new BuildException $F3885 ( sourceFile ) ; } boolean upToDate = _BOOL ; if ( sourceFile != null ) { Resource fileResource = new FileResource ( sourceFile ) ; upToDate = isUpToDate ( fileResource ) ; } if ( upToDate ) { $F8484 ( e , sourceFileSets ) while ( upToDate && e . hasMoreElements ( ) ) { FileSet fs = ( FileSet ) e . nextElement ( ) ; $F10531 ( it , fs ) while ( upToDate && it . hasNext ( ) ) { Resource r = ( Resource ) it . next ( ) ; upToDate = isUpToDate ( r ) ; } } } if ( upToDate ) { $F83495 r = sourceResources . listResources ( ) ; for ( int i = NUM00 ; upToDate && i < r . length ; i ++ ) { upToDate = isUpToDate ( r [ i ] ) ; } } return upToDate ; }
private int handleAggregationPacket ( Buffer input , Buffer output ) { $F96 bufferData = ( $F96 ) input . getData ( ) ; if ( aggregationPositon + NUM00 >= bufferData . length ) { aggregationPositon = NUM00 ; output . setDiscard ( _BOOL ) ; return BUFFER_PROCESSED_OK ; } int nalu_size = ( $F528005 ( bufferData , aggregationPositon ) | $F21296 ( bufferData , aggregationPositon ) ) ; aggregationPositon += NUM00 ; if ( aggregationPositon + nalu_size > bufferData . length ) $F139432 ( aggregationPositon , BUFFER_PROCESSED_FAILED ) extractNalUnitHeader ( aggregationPositon , input ) ; if ( mNalUnitHeader . isSingleNalUnitPacket ( ) ) { $F2175 ( data , nalu_size ) $F21535 ( System , bufferData , aggregationPositon , data , nalu_size ) aggregationPositon += nalu_size ; output . setData ( data ) ; $F5660 ( output , data ) $F5661 ( output ) output . setTimestamp ( input . getTimestamp ( ) ) ; output . setSequenceNumber ( input . getSequenceNumber ( ) ) ; output . setVideoOrientation ( input . getVideoOrientation ( ) ) ; output . setFormat ( input . getFormat ( ) ) ; output . setFlags ( input . getFlags ( ) ) ; return INPUT_BUFFER_NOT_CONSUMED ; } aggregationPositon = NUM00 ; return BUFFER_PROCESSED_FAILED ; }
public double calculateCostForStringAVM ( RegexGraph graph ) { final int ROWS = graph . getNumberOfRows ( ) ; final int COLUMNS = graph . getNumberOfColumns ( ) ; final double [ ] [ ] [ ] matrix = new double [ ROWS ] [ COLUMNS ] [ NUM00 ] ; calculateInsertionCostOnFirstRow ( graph , matrix ) ; for ( $F119 ( i , ROWS ) ) { for ( $F119 ( col , COLUMNS ) ) { matrix [ i ] [ col ] [ DEL ] = Double . MAX_VALUE ; matrix [ i ] [ col ] [ REP ] = Double . MAX_VALUE ; matrix [ i ] [ col ] [ INS ] = Double . MAX_VALUE ; for ( GraphTransition t : graph . getIncomingTransitions ( i , col ) ) { int otherCol = graph . getColumn ( t . fromState ) ; int otherRow = t . fromRow ; if ( t . type . equals ( GraphTransition . TransitionType . INSERTION ) ) { assert otherRow == i ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ INS ] , t . cost ) ) ; } else if ( t . type . equals ( GraphTransition . TransitionType . REPLACEMENT ) ) { matrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; matrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ REP ] , t . cost ) ) ; } else if ( t . type . equals ( GraphTransition . TransitionType . DELETION ) ) { matrix [ i ] [ col ] [ DEL ] = Math . min ( matrix [ i ] [ col ] [ DEL ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; matrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , getSubPathCost ( matrix [ otherRow ] [ otherCol ] [ DEL ] , t . cost ) ) ; } else if ( t . type . equals ( GraphTransition . TransitionType . PHANTOM ) ) { assert t . cost == NUM00 ; matrix [ i ] [ col ] [ DEL ] = Math . min ( matrix [ i ] [ col ] [ DEL ] , matrix [ otherRow ] [ otherCol ] [ DEL ] ) ; matrix [ i ] [ col ] [ REP ] = Math . min ( matrix [ i ] [ col ] [ REP ] , matrix [ otherRow ] [ otherCol ] [ REP ] ) ; matrix [ i ] [ col ] [ INS ] = Math . min ( matrix [ i ] [ col ] [ INS ] , matrix [ otherRow ] [ otherCol ] [ INS ] ) ; } } } } double min = Double . MAX_VALUE ; for ( double value : matrix [ ROWS - NUM00 ] [ COLUMNS - NUM00 ] ) { $F45132 ( value , min ) } return min ; }
protected int decodeLinePrefix ( PushbackInputStream inStream , OutputStream outStream ) throws IOException { int i ; int nLen , nSeq ; byte xtmp [ ] ; int c ; crc . value = NUM00 ; while ( _BOOL ) { $F3261 ( c , inStream , tmp ) if ( c == - NUM00 ) { throw new CEStreamExhausted $F72 ; } if ( tmp [ NUM00 ] == NUM00 ) $F5153 } $F2268 ( lineAndSeq ) decodeAtom ( inStream , lineAndSeq , NUM00 ) ; $F3031 ( xtmp , lineAndSeq ) nLen = xtmp [ NUM00 ] & NUM00 ; nSeq = xtmp [ NUM00 ] & NUM00 ; if ( nSeq != sequence ) $F241990 sequence = ( sequence + NUM00 ) & NUM00 ; return ( nLen ) ; }
public void appendNodes ( NodeSet nodes ) { $F2199 ( nNodes , nodes ) if ( null == m_map ) { m_mapSize = nNodes + m_blocksize ; m_map = new Node [ m_mapSize ] ; } else if ( ( m_firstFree + nNodes ) >= m_mapSize ) { m_mapSize += ( nNodes + m_blocksize ) ; Node newMap [ ] = new Node [ m_mapSize ] ; System . arraycopy ( m_map , NUM00 , newMap , NUM00 , m_firstFree + nNodes ) ; m_map = newMap ; } $F197780 ( System , nodes , m_map , m_firstFree , nNodes ) m_firstFree += nNodes ; }
protected void updateCachedAWTSizes ( final Dimension min , final Dimension pref , final Dimension max ) { assert EventQueue . isDispatchThread ( ) ; if ( verboseSizeLayout ) { System . err . println ( NUM00 + min + NUM00 + pref + NUM00 + max ) ; } lastValidatedAWTTime = ++ currentAWTTime ; boolean mustNotify ; synchronized ( this ) { mustNotify = cachedSizesInitialized == NUM00 ; if ( ! mustNotify ) { mustNotify = ! ( min . equals ( cachedMinSize ) && pref . equals ( cachedPrefSize ) && max . equals ( cachedMaxSize ) ) ; } $F85331 ( cachedSizesInitialized ) cachedMinSize = min ; cachedPrefSize = pref ; cachedMaxSize = max ; if ( INITIAL_CLIENT_AREA_WORKAROUND && initialClientArea != null ) { initialClientArea . width = cachedPrefSize . width ; initialClientArea . height = cachedPrefSize . height ; } } if ( mustNotify ) { final int onBehalfAWTTime = lastValidatedAWTTime ; ThreadingHandler . getInstance ( ) . asyncExec ( display , null ) ; } }
public boolean isDecimalPoint $F72 { if ( m_decimalPoint == null ) { DecimalFormatSymbols dfs = new DecimalFormatSymbols ( m_locale ) ; m_decimalPoint = new Boolean ( dfs . getDecimalSeparator ( ) == NUM00 ) ; } $F44652 ( m_decimalPoint ) }
public void removeLayer ( Layer layer ) { if ( layer != null && layer . isRemovable ( ) ) { $F108970 currentLayers = getLayerList ( ) ; currentLayers . remove ( layer ) ; setLayerList ( currentLayers ) ; } else { if ( layer != null ) { logger . warning ( $F2990 ( layer ) ) ; throw new com . bbn . openmap . util . HandleError $F18563 ( layer ) ; } } }
public Option [ ] findAllOptionTypes ( final Class optionClass ) { $F18062 ( Check , optionClass ) return findAllOptionTypes ( $F139647 ( optionClass ) ) ; }
public int via_padstack_count $F72 $F1652 ( via_padstacks )
public static boolean isEarlierTransaction ( MCostDetail cd , int C_AcctSchema_ID , int M_CostType_ID , int M_CostElement_ID , String costingLevel ) { MTransaction trx = new MTransaction ( cd . getCtx ( ) , cd . getM_Transaction_ID ( ) , cd . get_TrxName ( ) ) ; MCostDetail last_cd = getLastTransaction ( trx , C_AcctSchema_ID , M_CostType_ID , M_CostElement_ID , costingLevel ) ; $F397 ( last_cd , _BOOL ) if ( cd . getSeqNo ( ) <= last_cd . getSeqNo ( ) && cd . getM_Transaction_ID ( ) != last_cd . getM_Transaction_ID ( ) ) { return _BOOL ; } return _BOOL ; }
private void drawTranslatedRenderedImage ( RenderedImage img , Rectangle region , int i2uTransX , int i2uTransY ) { int tileGridXOffset = img . getTileGridXOffset ( ) ; int tileGridYOffset = img . getTileGridYOffset ( ) ; int tileWidth = img . getTileWidth ( ) ; int tileHeight = img . getTileHeight ( ) ; int minTileX = getTileIndex ( region . x , tileGridXOffset , tileWidth ) ; int minTileY = getTileIndex ( region . y , tileGridYOffset , tileHeight ) ; int maxTileX = getTileIndex ( $F6108 ( region ) - NUM00 , tileGridXOffset , tileWidth ) ; int maxTileY = getTileIndex ( $F6118 ( region ) - NUM00 , tileGridYOffset , tileHeight ) ; ColorModel colorModel = img . getColorModel ( ) ; $F47146 ( tileRect ) for ( int ty = minTileY ; ty <= maxTileY ; ty ++ ) { for ( int tx = minTileX ; tx <= maxTileX ; tx ++ ) { Raster raster = img . getTile ( tx , ty ) ; tileRect . x = tx * tileWidth + tileGridXOffset ; tileRect . y = ty * tileHeight + tileGridYOffset ; tileRect . width = tileWidth ; tileRect . height = tileHeight ; clipTo ( tileRect , region ) ; WritableRaster wRaster = null ; if ( raster instanceof WritableRaster ) { wRaster = ( WritableRaster ) raster ; } else { wRaster = Raster . createWritableRaster ( raster . getSampleModel ( ) , raster . getDataBuffer ( ) , null ) ; } wRaster = wRaster . createWritableChild ( tileRect . x , tileRect . y , tileRect . width , tileRect . height , NUM00 , NUM00 , null ) ; BufferedImage bufImg = new BufferedImage ( colorModel , wRaster , colorModel . isAlphaPremultiplied ( ) , null ) ; copyImage ( bufImg , tileRect . x + i2uTransX , tileRect . y + i2uTransY , NUM00 , NUM00 , tileRect . width , tileRect . height , null , null ) ; } } }
public void addOutOfContextMessage ( ConsensusMessage m ) { $F8934 ( outOfContextLock ) if ( m . getType ( ) == MessageFactory . PROPOSE ) { $F7957 ( Logger , m ) outOfContextProposes . put ( m . getNumber ( ) , m ) ; } else { List < ConsensusMessage > messages = outOfContext . get ( m . getNumber ( ) ) ; if ( messages == null ) { messages = new LinkedList < ConsensusMessage > $F72 ; outOfContext . put ( m . getNumber ( ) , messages ) ; } $F7957 ( Logger , m ) messages . add ( m ) ; } $F704 ( outOfContextLock ) }
private long calculateCapacity ( long minimumCapacity ) { long newCapacity = Math . min ( Math . max ( capacity , NUM00 ) , minimumCapacity ) ; while ( newCapacity < Math . min ( minimumCapacity , maxCapacity ) ) { newCapacity <<= NUM00 ; } $F95700 ( Math , newCapacity , maxCapacity ) }
protected Object createResource $F72 throws ResourceUnavailableException { Object resource = create ( ) ; freed . add ( resource ) ; numCreated ++ ; return ( resource ) ; }
public void upgrade $F72 throws Exception { $F933 ( checkUpgradePreconditions ) backupManager . createOpenDJBackup ( ) ; try ( BufferedWriter out = new BufferedWriter ( new FileWriter ( upgradeMarker ) ) ) { $F9826 ( out , currentVersion ) $F3410 ( out ) } if ( currentVersion . isOlderThan ( DJ_245_VERSION ) ) { backupFile ( NUM00 ) ; backupFile ( NUM00 ) ; backupFile ( NUM00 ) ; unpackZipFile ( _BOOL ) ; callOldDJUpgrade ( ) ; } else { unpackZipFile ( _BOOL ) ; if $F1238 ( currentVersion , DJ_246_VERSION ) { try { File badSchema = new File ( $F157313 ( installRoot , File ) + NUM00 + File . separator + NUM00 ) ; delete ( badSchema ) ; } catch ( RuntimeException e ) $F845 File goodSchema = new File ( servletCtx . getRealPath ( File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 + File . separator + NUM00 ) ) ; File moveTo = new File ( $F157313 ( installRoot , File ) + NUM00 + File . separator + NUM00 ) ; copy ( goodSchema . toPath ( ) , moveTo . toPath ( ) ) ; } int ret = callDJUpgradeMechanism ( ) ; if ( ret == NUM00 ) { message ( NUM00 ) ; delete ( upgradeMarker ) ; final String lockFile = LockFileManager . getServerLockFileName ( ) ; LockFileManager . releaseLock ( lockFile , new StringBuilder $F72 ) ; } else { throw new UpgradeException ( NUM00 + ret ) ; } } }
public static final Optional $F11299 findSteamVRManifest ( final $F14386 indexedSteamFolders ) { for ( final File f : indexedSteamFolders ) { final File currentFile = new File ( f . getAbsolutePath ( ) + SteamConstants . STEAM_VR_APPS_MANIFEST_FILE_LOCATION ) ; if $F3428 ( currentFile ) $F65633 ( Optional , currentFile ) } $F21169 ( Optional ) }
private static boolean isClose ( float value , float targetValue ) { return Math . abs ( value - targetValue ) < NUM00 ; }
$F1654 ( _myTcpClients )
public static MMovementCartBean addToMovementCart ( Properties ctx , StockMovementBean bean , MMovementCartBean cartBean , boolean isSales , boolean ifAdd ) throws OperationException , ProductNotFoundException , ProductNotOnPriceListException { ArrayList < ItemBean > oldItems ; if ( cartBean == null ) { cartBean = new MMovementCartBean $F72 ; oldItems = new ArrayList < ItemBean > $F72 ; } else { oldItems = cartBean . getItems ( ) ; } ArrayList < ItemBean > oldItemsClone = ( ArrayList ) oldItems . clone ( ) ; ArrayList itemsToBeAdded = getMMovementItems ( ctx , bean ) ; oldItems = addToMMovementList ( ctx , oldItemsClone , itemsToBeAdded , ifAdd ) ; Integer priceListId = POSTerminalManager . getPriceListId ( ctx , isSales ) ; oldItems = setMMovementItemCosts ( ctx , priceListId , oldItems , isSales ) ; cartBean . setItems ( oldItems ) ; cartBean . setPricelistId ( priceListId ) ; return cartBean ; }
private static $F221457 filterFieldList ( $F221457 fields , $F6969 filterClass ) { $F221457 $F19827 ( filteredFields ) ; for ( Field f : fields ) { if ( ( filterClass == null ) || filterClass . isAssignableFrom ( f . getType ( ) ) ) $F207 ( filteredFields , f ) } return filteredFields ; }
public static void renderPairwiseOrthogonal ( ComplexVector vec1 , ComplexVector vec2 ) { IncompatibleVectorsException . checkVectorsCompatible ( vec1 , vec2 ) ; if ( vec1 . getOpMode ( ) != ComplexVector . Mode . CARTESIAN ) vec1 . toCartesian ( ) ; if ( vec2 . getOpMode ( ) != ComplexVector . Mode . CARTESIAN ) vec2 . toCartesian ( ) ; $F5415 coordinates1 = vec1 . getCoordinates ( ) ; $F5415 coordinates2 = vec2 . getCoordinates ( ) ; for ( int i = NUM00 ; i < vec1 . getDimension ( ) * NUM00 ; i += NUM00 ) { double resultThisPair = coordinates1 [ i ] * coordinates2 [ i ] ; resultThisPair += coordinates1 [ i + NUM00 ] * coordinates2 [ i + NUM00 ] ; double norm1 = coordinates1 [ i ] * coordinates1 [ i ] ; norm1 += coordinates1 [ i + NUM00 ] * coordinates1 [ i + NUM00 ] ; double norm2 = coordinates2 [ i ] * coordinates2 [ i ] ; norm2 += coordinates2 [ i + NUM00 ] * coordinates2 [ i + NUM00 ] ; $F84202 ( norm1 , Math ) $F84202 ( norm2 , Math ) double cosine = NUM00 ; if ( norm1 > NUM00 && norm2 > NUM00 ) cosine = resultThisPair / ( norm1 * norm2 ) ; coordinates1 [ i ] = ( float ) ( coordinates1 [ i ] - cosine * coordinates2 [ i ] ) ; coordinates1 [ i + NUM00 ] = ( float ) ( coordinates1 [ i + NUM00 ] - cosine * coordinates2 [ i + NUM00 ] ) ; } }
protected SimpleJavaFileObject ( URI uri , Kind kind ) { uri . getClass ( ) ; kind . getClass ( ) ; if ( $F101354 ( uri ) ) $F11416 ( uri ) this . uri = uri ; this . kind = kind ; }
public int increment ( int val ) { if ( val < NUM00 ) { return decrement ( - val ) ; } $F790 ( lock ) int newValue = ( value += val ) ; $F704 ( lock ) return newValue ; }
protected void releaseInternal $F72 { ContextTranslator . pts_1cfa_map = null ; ContextTranslator . objs_1cfa_map = null ; }
public static void addConstraintViolationsRDF ( List < ConstraintViolation > cvs , Model result , boolean createSource ) { for ( ConstraintViolation cv : cvs ) { Resource r = result . createResource ( SPIN . ConstraintViolation ) ; $F105671 ( message , cv ) if $F22 ( message ) { r . addProperty ( RDFS . label , message ) ; } if ( cv . getRoot ( ) != null ) { r . addProperty ( SPIN . violationRoot , cv . getRoot ( ) ) ; } r . addProperty ( SPIN . violationLevel , cv . getLevel ( ) ) ; for ( SimplePropertyPath path : cv . getPaths ( ) ) { if ( path instanceof ObjectPropertyPath ) { r . addProperty ( SPIN . violationPath , path . getPredicate ( ) ) ; } else { Resource p = result . createResource ( SP . ReversePath ) ; p . addProperty ( SP . path , path . getPredicate ( ) ) ; r . addProperty ( SPIN . violationPath , p ) ; } } if ( createSource && cv . getSource ( ) != null ) { r . addProperty ( SPIN . violationSource , cv . getSource ( ) ) ; } if ( $F61599 ( cv ) ) { r . addProperty ( SPIN . violationValue , cv . getValue ( ) ) ; } } }
public Page copy ( long version ) { Page newPage = create ( map , version , keys , values , children , totalCount , getMemory ( ) ) ; removePage ( ) ; newPage . cachedCompare = cachedCompare ; return newPage ; }
public boolean startBusytone ( final String busytoneUriType ) { $F4975 ( busytoneUriType , _BOOL ) try { $F12258 ( Log , TAG , busytoneUriType ) if ( mBusytone != null ) { if ( mBusytone . isPlaying ( ) ) $F35346 ( Log , TAG , _BOOL ) else $F5795 ( stopBusytone ) } Uri busytoneUri ; Map data = $F532 ; $F16824 ( data ) if $F3057 ( busytoneUriType ) { mBusytone = new myToneGenerator ( myToneGenerator . BUSY ) ; mBusytone . startPlay ( data ) ; return _BOOL ; } else { busytoneUri = getBusytoneUri ( busytoneUriType ) ; if ( busytoneUri == null ) $F35346 ( Log , TAG , _BOOL ) } mBusytone = new myMediaPlayer $F72 ; $F545 ( data , busytoneUri ) $F545 ( data , _BOOL ) data . put ( NUM00 , AudioManager . STREAM_VOICE_CALL ) ; setMediaPlayerEvents ( ( MediaPlayer ) mBusytone , NUM00 ) ; mBusytone . startPlay ( data ) ; return _BOOL ; } catch ( Exception e ) { $F13527 ( Log , TAG ) Log . d ( TAG , e . getMessage ( ) ) ; return _BOOL ; } }
private String moveToFolder $F2236 ( file , folder ) { $F15885 ( source , file ) final File destination = new File ( folder + File . separator + source . getName ( ) ) ; Log . i ( TAG , file + NUM00 + destination . getAbsolutePath ( ) ) ; try { FileUtils . moveFile ( source , destination ) ; } catch ( final IOException e ) $F13955 ( Log , TAG ) $F33744 ( destination ) }
public void putAll ( Map m ) { $F304893 ( keys , m ) for ( $F2774 ( iter , keys ) ) { $F8877 ( key , iter ) $F299378 ( put , key , m ) } }
public void readOldFormat ( Reader reader ) throws Exception { StreamTokenizer tokenizer ; int currentToken ; double firstIndex , secondIndex , weight ; tokenizer = new StreamTokenizer ( reader ) ; initialize ( ) ; tokenizer . commentChar ( NUM00 ) ; tokenizer . eolIsSignificant ( _BOOL ) ; while ( StreamTokenizer . TT_EOF != ( currentToken = tokenizer . nextToken ( ) ) ) { if ( currentToken == StreamTokenizer . TT_EOL ) $F1448 if ( currentToken != StreamTokenizer . TT1BER ) { throw new Exception $F3487 ; } firstIndex = tokenizer . nval ; if ( ! Utils . eq ( ( int ) firstIndex , firstIndex ) ) { throw new Exception $F3487 ; } if ( ( int ) firstIndex >= size ( ) ) $F9451 if ( StreamTokenizer . TT_EOF == ( currentToken = tokenizer . nextToken ( ) ) ) $F9451 if ( currentToken == StreamTokenizer . TT_EOL ) $F9451 if ( currentToken != StreamTokenizer . TT1BER ) { throw new Exception $F3487 ; } secondIndex = tokenizer . nval ; if ( ! Utils . eq ( ( int ) secondIndex , secondIndex ) ) { throw new Exception $F3487 ; } if ( ( int ) secondIndex >= size ( ) ) $F9451 if ( ( int ) secondIndex == ( int ) firstIndex ) $F9451 if ( StreamTokenizer . TT_EOF == ( currentToken = tokenizer . nextToken ( ) ) ) $F9451 if ( currentToken == StreamTokenizer . TT_EOL ) $F9451 if ( currentToken != StreamTokenizer . TT1BER ) { throw new Exception $F3487 ; } weight = tokenizer . nval ; if ( ! Utils . gr ( weight , NUM00 ) ) $F9451 setCell ( ( int ) firstIndex , ( int ) secondIndex , new Double ( weight ) ) ; } }
protected String handleDate ( ResultSet rs , int columnIndex , String dateFormatString ) throws SQLException { $F212479 date = rs . getDate ( columnIndex ) ; String value = null ; if ( date != null ) { $F13438 ( dateFormat , dateFormatString ) value = dateFormat . format ( date ) ; } return value ; }
$F1 public RandomAccessStream openFileRandomAccess $F72 throws IOException { if ( _isWindows && isAux ( ) ) throw new FileNotFoundException $F3362 ( _file ) ; return new FileRandomAccessStream ( new RandomAccessFile $F111492 ( getFile ) ) ; }
public QDate ( TimeZone zone , long now ) { _timeZone = zone ; if ( zone == _gmtTimeZone ) { _stdName = _gmtStdName ; _dstName = _gmtDstName ; } else if ( zone == _localTimeZone ) { _stdName = _localStdName ; _dstName = _localDstName ; } else { _stdName = _timeZone . getDisplayName ( _BOOL , TimeZone . SHORT ) ; _dstName = _timeZone . getDisplayName ( _BOOL , TimeZone . SHORT ) ; } _calendar = new GregorianCalendar ( _timeZone ) ; if ( zone == _gmtTimeZone ) setGMTTime ( now ) ; else setLocalTime ( now ) ; }
public static void serialize ( Serializable obj , ByteArrayOutputStream bout ) { try { $F7054 ( out , bout ) out . writeObject ( obj ) ; $F59 ( out ) } catch ( IOException e ) { throw new IllegalStateException ( NUM00 + obj , e ) ; } }
$F117302 ( bits , result , i , edifactValue , bitsLeft )
public static Stream $F4 wordsOf ( String text ) { requireNonNull ( text ) ; return WORDS . splitAsStream ( text ) ; }
public static String upper ( String s ) { return $F65405 ( s , Locale ) ; }
private void accept ( Socket socket ) { log . info ( NUM00 , socket . getInetAddress ( ) ) ; try { InetAddress serverAddress = dns . getAddress ( NUM00 ) ; try ( Connection clientConnection = new Connection ( socket ) ; Connection serverConnection = new Connection ( new Socket ( serverAddress , CLASH_PORT ) ) ) { ProxySession session = ProxySession . newSession ( services . getMessageFactory ( ) , clientConnection , serverConnection , filterChain ) ; $F10635 ( log , socket ) VillageAnalyzer . logSession ( session ) ; } } catch ( IOException e ) { log . info ( NUM00 , socket . getInetAddress ( ) , e . toString ( ) ) ; } $F53155 ( socket ) }
public void removeProcessListener ( ProcessListener l ) $F106 ( listenerList , l )
public final static boolean isValidJavaIdentifier ( String s ) { $F32021 ( s , _BOOL ) $F7782 ( c , s ) if ( ! Character . isJavaIdentifierStart ( c [ NUM00 ] ) ) { return _BOOL ; } for ( $F1139 ( i , c ) ) { if ( ! Character . isJavaIdentifierPart ( c [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
final void sendHelp $F72 { $F5 help = help ( ) ; $F19233 ( help ) XmppMsg msg = new XmppMsg $F72 ; msg . addStringArray ( $F10148 ( help ) ) ; send ( msg ) ; }
protected void init $F72 { $F973 ( LOG ) $F657 ( startTime , System ) bughouseSoundKeys = getSoundsKeys ( NUM00 ) ; soundKeys = getSoundsKeys ( NUM00 ) ; initSoundPlayer ( ) ; initSpeech ( ) ; LOG . info ( $F81482 ( System , startTime ) ) ; }
private static void runConfClient ( final ProcessBuilder pb ) throws Exception { int exitCode = - NUM00 ; try { $F111135 ( process , pb ) exitCode = process . waitFor ( ) ; } catch ( IOException e ) { $F5197 ( log , e ) exitCode = NUM00 ; throw e ; } catch ( Exception e ) $F526539 ( log , e ) switch ( exitCode ) { case SUCCESS : $F597 case ERROR_CODE_CANNOT_DOWNLOAD_CONF : throw new Exception ( NUM00 + exitCode + NUM00 ) ; case ERROR_CODE_EXPIRED_CONF : throw new Exception ( NUM00 + exitCode + NUM00 ) ; case ERROR_CODE_INVALID_SIGNATURE_VALUE : throw new Exception ( NUM00 + exitCode + NUM00 ) ; case ERROR_CODE_INTERNAL : throw new Exception ( NUM00 + exitCode + NUM00 ) ; $F1267 throw new Exception ( NUM00 + NUM00 + exitCode + NUM00 + NUM00 + NUM00 ) ; } }
$F169786 ( mv , n , visibleTypeAnnotations , i , an , _BOOL , invisibleTypeAnnotations )
public boolean doCheckSiteStatus ( URL url ) { $F19232 ( debug , url ) URLChecker checker = getURLChecker ( url ) ; if ( checker != null && ( checker . getStatus ( ) == URLStatus . STATUS_UNKNOWN ) ) { synchronized ( checker ) { $F65148 ( checker ) $F8071 ( checker ) } synchronized ( urlCheckers ) { urlCheckers . remove ( getThreadName ( url ) ) ; } debug . error ( NUM00 + NUM00 + getThreadName ( url ) ) ; return _BOOL ; } else if ( ( checker != null ) && ( checker . getStatus ( ) == URLStatus . STATUS_AVAILABLE ) ) { return _BOOL ; } else { return _BOOL ; } }
protected void fill $F72 throws IOException { ensureOpen ( ) ; $F81136 ( len , in , buf ) if ( len == - NUM00 ) { throw new EOFException $F580 ; } $F81138 ( inf , buf , len ) }
@ Ignore ( NUM00 ) $F32043 public void testP2PViewChangeReject $F72 throws Exception { final Host host = Host . getHost ( NUM00 ) ; final VM peer2 = host . getVM ( NUM00 ) ; final VM peer3 = host . getVM ( NUM00 ) ; CredentialGenerator gen = new LdapUserCredentialGenerator $F72 ; $F10089 ( gen ) Properties extraProps = gen . getSystemProperties ( ) ; String authenticator = gen . getAuthenticator ( ) ; String authInit = gen . getAuthInit ( ) ; if ( extraProps == null ) { $F65625 ( extraProps ) } CredentialGenerator gen2 = new DummyCredentialGenerator $F72 ; $F10089 ( gen2 ) Properties extraProps2 = gen2 . getSystemProperties ( ) ; String authenticator2 = gen2 . getAuthenticator ( ) ; if ( extraProps2 == null ) { $F65625 ( extraProps2 ) } $F2697 ( props ) int port = getRandomAvailablePort ( SOCKET ) ; final String locators = getIPLiteral ( ) + NUM00 + port + NUM00 ; props . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; props . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator ) ; Properties credentials = gen . getValidCredentials ( NUM00 ) ; Properties javaProps = gen . getJavaProperties ( ) ; props . putAll ( credentials ) ; props . putAll ( extraProps ) ; startTheLocator ( props , javaProps , port ) ; try { $F65625 ( props ) $F9266 ( props , MCAST_PORT ) props . setProperty ( LOCATORS , locators ) ; props . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; props . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator2 ) ; credentials = gen . getValidCredentials ( NUM00 ) ; Properties javaProps2 = gen2 . getJavaProperties ( ) ; props . putAll ( credentials ) ; props . putAll ( extraProps2 ) ; createDS ( props , javaProps2 ) ; $F65625 ( props ) $F9266 ( props , MCAST_PORT ) props . setProperty ( LOCATORS , locators ) ; props . setProperty ( SECURITY_PEER_AUTH_INIT , authInit ) ; props . setProperty ( SECURITY_PEER_AUTHENTICATOR , authenticator ) ; credentials = gen . getValidCredentials ( NUM00 ) ; javaProps = gen . getJavaProperties ( ) ; props . putAll ( credentials ) ; props . putAll ( extraProps ) ; createDS ( peer2 , props , javaProps ) ; createDS ( peer3 , props , javaProps ) ; pause ( NUM00 ) ; $F188761 ( locatorVM ) verifyMembers ( NUM00 ) ; $F188761 ( peer2 ) $F188761 ( peer3 ) disconnectFromDS ( ) ; pause ( NUM00 ) ; $F188761 ( locatorVM ) $F188761 ( peer2 ) $F188761 ( peer3 ) $F188761 ( peer2 ) pause ( NUM00 ) ; $F188761 ( locatorVM ) $F188761 ( peer3 ) $F188761 ( peer3 ) pause ( NUM00 ) ; $F188761 ( locatorVM ) } finally { $F188761 ( locatorVM ) } }
private boolean overrides ( ExecutableElement e , $F6969 clazz , String method ) { TypeElement clazzElt = elements . getTypeElement ( clazz . getCanonicalName ( ) ) ; assert clazzElt != null ; for ( ExecutableElement elt : ElementFilter . methodsIn ( clazzElt . getEnclosedElements ( ) ) ) { if ( elt . getSimpleName ( ) . contentEquals ( method ) && elements . overrides ( e , elt , clazzElt ) ) { return _BOOL ; } } return _BOOL ; }
public Element signXML ( Document doc , String certAlias , String algorithm , String idAttrName , String id , boolean includeCert , String xpath ) throws XMLSignatureException { return signXMLUsingKeyPass ( doc , certAlias , null , algorithm , idAttrName , id , includeCert , xpath ) ; }
$F1654 ( attrs )
protected Socket __openPassiveDataConnection ( int command , String arg ) throws IOException , FtpExceptionCanNotHaveDataConnection { Socket socket ; if ( pasv ( ) != FTPReply . ENTERING_PASSIVE_MODE ) throw new FtpExceptionCanNotHaveDataConnection ( NUM00 + getReplyString ( ) ) ; try { __parsePassiveModeReply ( getReplyStrings ( ) [ NUM00 ] ) ; } catch ( MalformedServerReplyException e ) { throw new FtpExceptionCanNotHaveDataConnection $F1783 ( e ) ; } socket = _socketFactory_ . createSocket ( __passiveHost , __passivePort ) ; if ( ! FTPReply . isPositivePreliminary ( sendCommand ( command , arg ) ) ) { $F59 ( socket ) $F1274 } if ( __remoteVerificationEnabled && ! verifyRemote ( socket ) ) { InetAddress host1 , host2 ; host1 = socket . getInetAddress ( ) ; host2 = getRemoteAddress ( ) ; $F59 ( socket ) throw new FtpExceptionCanNotHaveDataConnection ( NUM00 + host1 . getHostAddress ( ) + NUM00 + host2 . getHostAddress ( ) + NUM00 ) ; } if ( __dataTimeout >= NUM00 ) socket . setSoTimeout ( __dataTimeout ) ; return socket ; }
public Object invoke ( Object proxy , Method method , $F131 args ) throws Throwable { Monitor mon = null ; if ( params . isInterfaceEnabled && params . isEnabled ) { mon = MonitorFactory . start ( labelerInt . getSummaryLabel ( method ) ) ; } try { if $F1238 ( method , EQUALS_METHOD ) return Boolean . valueOf ( equals ( args [ NUM00 ] ) ) ; else $F89561 ( method , monitoredObj , args ) } catch ( InvocationTargetException e ) { if ( params . isEnabled ) { String sqlMessage = NUM00 ; String detailStackTrace = null ; $F31570 ( rootCause , e ) if ( rootCause instanceof SQLException ) { SQLException sqlException = ( SQLException ) rootCause ; sqlMessage = NUM00 + sqlException . getErrorCode ( ) + NUM00 + sqlException . getSQLState ( ) ; } trackException ( rootCause , method , sqlMessage ) ; } throw e . getCause ( ) ; } finally { if ( mon != null ) $F5191 ( mon ) } }
public static void copyStream ( final InputStream fromStream , final OutputStream toStream ) throws IOException { $F12496 ( buffer ) int bytesRead ; $F29757 ( bytesRead , fromStream , buffer , toStream ) }
public static int probRound ( double value , Random rand ) { if ( value >= NUM00 ) { double lower = Math . floor ( value ) ; double prob = value - lower ; if ( rand . nextDouble ( ) < prob ) { return ( int ) lower + NUM00 ; } else $F23220 ( lower ) } else { double lower = Math . floor ( Math . abs ( value ) ) ; double prob = Math . abs ( value ) - lower ; if ( rand . nextDouble ( ) < prob ) { return - ( ( int ) lower + NUM00 ) ; } else { return - ( int ) lower ; } } }
private void loadStringValue ( JTextField comp , final String elementName ) { $F62203 ( propValue , properties , elementName ) if $F1032 ( propValue ) $F59925 ( comp , propValue ) }
public static Ed25519GroupElement toRepresentation ( final Ed25519GroupElement g , final CoordinateSystem newCoordinateSystem ) { final BigInteger x ; final BigInteger y ; final BigInteger gX = toBigInteger ( g . getX ( ) . encode ( ) ) ; final BigInteger gY = toBigInteger ( g . getY ( ) . encode ( ) ) ; final BigInteger gZ = toBigInteger ( g . getZ ( ) . encode ( ) ) ; final BigInteger gT = null == g . getT ( ) ? null : toBigInteger ( g . getT ( ) . encode ( ) ) ; switch ( g . getCoordinateSystem ( ) ) { case AFFINE : x = gX ; y = gY ; $F597 case P2 : case P3 : x = gX . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; y = gY . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; $F597 case P1xP1 : x = gX . multiply ( gZ . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; assert gT != null ; y = gY . multiply ( gT . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; $F597 case CACHED : x = gX . subtract ( gY ) . multiply ( gZ . multiply ( new BigInteger $F580 ) . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; y = gX . add ( gY ) . multiply ( gZ . multiply ( new BigInteger $F580 ) . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; $F597 case PRECOMPUTED : x = gX . subtract ( gY ) . multiply ( new BigInteger $F580 . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; y = gX . add ( gY ) . multiply ( new BigInteger $F580 . modInverse ( Ed25519Field . P ) ) . mod ( Ed25519Field . P ) ; $F597 $F1267 $F53552 } switch ( newCoordinateSystem ) { case AFFINE : return Ed25519GroupElement . affine ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE ) ; case P2 : return Ed25519GroupElement . p2 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE ) ; case P3 : return Ed25519GroupElement . p3 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE , toFieldElement ( x . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; case P1xP1 : return Ed25519GroupElement . p1xp1 ( toFieldElement ( x ) , toFieldElement ( y ) , Ed25519Field . ONE , Ed25519Field . ONE ) ; case CACHED : return Ed25519GroupElement . cached ( toFieldElement ( y . add ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( y . subtract ( x ) . mod ( Ed25519Field . P ) ) , Ed25519Field . ONE , toFieldElement ( D . multiply ( new BigInteger $F580 ) . multiply ( x ) . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; case PRECOMPUTED : return Ed25519GroupElement . precomputed ( toFieldElement ( y . add ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( y . subtract ( x ) . mod ( Ed25519Field . P ) ) , toFieldElement ( D . multiply ( new BigInteger $F580 ) . multiply ( x ) . multiply ( y ) . mod ( Ed25519Field . P ) ) ) ; $F1267 $F53552 } }
private void endFormals $F72 { $F430955 ( hasFormals , _BOOL , buf ) }
public Builder label ( char label ) { this . label = Character . toUpperCase ( label ) ; return this ; }
public static boolean isLetterOrDigit ( char c ) { return Character . isLetterOrDigit ( c ) ; }
public static int putLong ( $F96 bytes , int offset , long val ) { if ( littleEndian ) { $F410031 ( val , Long ) } theUnsafe . putLong ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; return offset + Bytes . SIZEOF_LONG ; }
private Instruction scheduleScalarDefsEarly ( $F75495 e , Instruction earlyPos , Instruction inst ) { while $F1444 ( e ) { $F75499 ( op , e ) Instruction def = definingInstruction ( op ) ; scheduleEarly ( def ) ; if ( def . isBranch ( ) ) def = dominanceSuccessor ( def , inst ) ; earlyPos = maxDominatorDepth ( def , earlyPos ) ; } return earlyPos ; }
public void makeUnique $F28786 ( columns , conflictPolicy ) { uniques . add ( CONSTRAINT_UNIQUE_ + TextUtils . join ( NUM00 , columns ) + _UNIQUE__ + TextUtils . join ( NUM00 , columns ) + __ON_CONFLICT_ + conflictPolicy + COMMA ) ; }
default $F4203 void forEachMatchingFieldNameWithBoolean ( String regex , BiConsumer $F91737 function ) { forEachMatchingFieldNameWithBoolean ( Pattern . compile ( regex ) , NUM00 , function ) ; }
protected boolean isValidDomain ( String domain ) { $F1150 ( ipDomainMatcher , IP_DOMAIN_PATTERN , domain ) if $F24133 ( ipDomainMatcher ) { $F4377 ( inetAddressValidator , InetAddressValidator ) return inetAddressValidator . isValid ( ipDomainMatcher . group ( NUM00 ) ) ; } $F156 ( domainValidator , DomainValidator , allowLocal ) return domainValidator . isValid ( domain ) || domainValidator . isValidTld ( domain ) ; }
public void exit $F72 { cancel ( ) ; final float radius = lerp ( NUM00 , mOuterRadius , mTweenRadius ) ; final float remaining ; if ( mAnimRadius != null && mAnimRadius . isRunning ( ) ) { remaining = mOuterRadius - radius ; } else { remaining = mOuterRadius ; } final int radiusDuration = ( int ) ( NUM00 * Math . sqrt ( remaining / ( WAVE_TOUCH_UP_ACCELERATION + WAVE_TOUCH_DOWN_ACCELERATION ) * mDensity ) + NUM00 ) ; final int opacityDuration = ( int ) ( NUM00 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + NUM00 ) ; exitSoftware ( radiusDuration , opacityDuration ) ; }
public void testSealedObject2 $F72 throws Exception { try { new SealedObject $F8320 $F845 ; fail ( NUM00 + NUM00 ) ; } $F1214 String secret = NUM00 ; Cipher $F83645 ( cipher ) ; SealedObject so1 = new SealedObject ( secret , cipher ) ; SealedObject so2 = new SealedObject ( so1 ) $F845 ; assertEquals ( NUM00 + NUM00 , secret , so2 . getObject ( cipher ) ) ; assertEquals ( $F38 , so1 . getAlgorithm ( ) , so2 . getAlgorithm ( ) ) ; }
$F1 public void handleRequestBody ( SolrQueryRequest req , SolrQueryResponse rsp ) throws ParseException , IOException , SyntaxError { String deletionQuery = getDeletionQuery ( ) ; $F10635 ( LOGGER , deletionQuery ) if ( olderDocumentsExists ( deletionQuery , req , rsp ) ) { UpdateRequestProcessor processor = getProcessor ( req , rsp ) ; deleteOldDocuments ( deletionQuery , processor , req ) ; commitDeletions ( processor , req ) ; } }
public < V extends Comparable $F42625 > OptionalLong maxBy ( LongFunction $F2193 keyExtractor ) { ObjLongBox $F2193 result = collect ( $F32718 ) ; return result . a == null ? OptionalLong . empty ( ) : OptionalLong . of ( result . b ) ; }
public void queryAndCompareShards ( SolrParams params ) throws Exception { updateMappingsFromZk ( jettys , clients ) ; $F72154 ( shards , shardToJetty ) for ( String shard : shards ) { queryAndCompareReplicas ( params , shard ) ; } }
public int indexOf ( int ch ) $F41330 ( indexOf , ch )
private Watcher initWatcher ( SolrZkClient zkClient ) { wrappedWatcher = new BufferStateWatcher $F72 ; return zkClient . wrapWatcher ( wrappedWatcher ) ; }
public Configuration $F72 $F5795 ( super )
public static $F9340 $F15228 of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 , K k5 , V v5 , K k6 , V v6 , K k7 , V v7 ) { Map map = of ( ) ; map . put ( k1 , v1 ) ; map . put ( k2 , v2 ) ; map . put ( k3 , v3 ) ; map . put ( k4 , v4 ) ; map . put ( k5 , v5 ) ; map . put ( k6 , v6 ) ; map . put ( k7 , v7 ) ; return map ; }
public long longAt ( int index ) { lb . position ( index ) ; $F1521 ( lb ) }
private String startSetToString $F72 { $F280 ( FString ) boolean didPrint ; $F318890 ( m_starting , getStartSet ) for ( $F1139 ( i , m_starting ) ) { didPrint = _BOOL ; if ( ( m_hasClass == _BOOL ) || ( m_hasClass == _BOOL && i != m_classIndex ) ) { FString . append ( ( m_starting [ i ] + NUM00 ) ) ; didPrint = _BOOL ; } if ( i == $F33765 ( m_starting ) ) $F86 ( FString ) else { $F12290 ( didPrint , FString ) } } $F92 ( FString ) }
public static String makeTagClassName ( String componentFamily , String rendererType ) { $F1338 ( componentFamily ) String tagClassName = componentFamily ; if ( rendererType != null ) { if $F2137 ( componentFamily , rendererType ) { tagClassName = tagClassName + rendererType ; } } return tagClassName + NUM00 ; }
public void registerService $F71526 ( serviceName , createTemplate , activate ) throws $F52710 { if $F6299 ( debug ) { debug . message ( NUM00 + serviceName + NUM00 + createTemplate + NUM00 + activate + NUM00 ) ; } dsServices . registerService ( super . token , super . entryDN , serviceName ) ; Set serviceStatus = getAttribute ( SERVICE_STATUS_ATTRIBUTE ) ; if ( ! serviceStatus . equals ( Collections . EMPTY_SET ) ) { $F10531 ( iter , serviceStatus ) while $F2921 ( iter ) { $F2778 ( status , iter ) if $F8397 ( status , serviceName ) { Object $F1868 = { serviceName } ; throw new AMException ( AMSDKBundle . getString ( NUM00 , args , super . locale ) , NUM00 , args ) ; } } } else { $F266988 ( serviceStatus ) } serviceStatus . add ( serviceName ) ; setAttribute ( SERVICE_STATUS_ATTRIBUTE , serviceStatus ) ; try $F5795 ( store ) catch ( AMException le ) { try { Set objectClass = getAttribute ( NUM00 ) ; $F19232 ( debug , objectClass ) if $F94439 ( objectClass ) { $F18793 ( objectClass ) setAttribute ( NUM00 , objectClass ) ; setAttribute ( SERVICE_STATUS_ATTRIBUTE , serviceStatus ) ; store ( ) ; } else { throw le ; } } catch ( Exception e ) { if $F6299 ( debug ) $F218635 ( debug , e ) throw le ; } } if ( createTemplate ) { try { if ( AMServiceUtils . serviceHasSubSchema ( super . token , serviceName , SchemaType . POLICY ) ) { createTemplate ( AMTemplate . POLICY_TEMPLATE , serviceName , null ) ; } if ( AMServiceUtils . serviceHasSubSchema ( super . token , serviceName , SchemaType . DYNAMIC ) ) { createTemplate ( AMTemplate . DYNAMIC_TEMPLATE , serviceName , null ) ; } } catch ( SMSException smsex ) { throw new AMException ( AMSDKBundle . getString ( NUM00 , super . locale ) , NUM00 ) ; } } }
public static void assertAlmostEquals ( double expected , double actual , int decimals ) { assertAlmostEquals ( null , new Double ( expected ) , new Double ( actual ) , decimals ) ; }
private static int snapVertical ( Collection < ConstraintWidget > widgets , ConstraintWidget widget , ConstraintAnchor anchor , int position , ArrayList < SnapCandidate > snapCandidates ) { SnapCandidate candidate = new SnapCandidate $F72 ; ConstraintHandle handle = WidgetInteractionTargets . constraintHandle ( anchor ) ; $F1933 ( handle , position ) handle . setDrawY ( position ) ; SnapPlacement . snapAnchor ( widgets , widget , anchor , candidate ) ; if ( candidate . target != null ) { ConstraintHandle targetHandle = WidgetInteractionTargets . constraintHandle ( candidate . target ) ; int ty = candidate . y ; if ( targetHandle != null ) { ty = targetHandle . getDrawY ( ) ; } position = ty + candidate . margin ; snapCandidates . add ( candidate ) ; } return position ; }
public int send ( OutputStream out ) throws IOException { out . write ( this . fileBuff , this . offset , this . length ) ; $F1082 }
private double sin ( double angle ) { while ( angle >= NUM00 ) { angle -= NUM00 ; } double value = ( angle / NUM00 * Math . PI ) ; return Math . sin ( value ) ; }
public static String last $F22381 ( list , delimiter , ignoreEmpty ) { if $F4329 ( StringUtil , list ) $F1278 $F1749 ( len , list ) $F1469 del ; if $F4329 ( StringUtil , delimiter ) { del = new char $F21902 ; } else del = delimiter . toCharArray ( ) ; int index ; int x ; while ( _BOOL ) { index = - NUM00 ; for ( $F1139 ( i , del ) ) { x = list . lastIndexOf ( del [ i ] ) ; $F15468 ( x , index ) } if ( index == - NUM00 ) { return list ; } else if ( index + NUM00 == len ) { if ( ! ignoreEmpty ) $F1278 $F198483 ( list , len ) len -- ; } else $F26088 ( list , index ) } }
private void tryParseTypeAttribute ( IDOMElement element ) { IDOMAttr typeAttr = ( IDOMAttr ) UiBinderXmlModelUtilities . getTypeAttribute ( element ) ; $F2329 ( typeAttr ) IRegion valueRegion = XmlUtilities . getAttributeValueRegion ( typeAttr ) ; $F2329 ( valueRegion ) $F61361 ( fqType , typeAttr ) $F2329 ( fqType ) final IType type = JavaModelSearch . findType ( javaProject , fqType ) ; if ( ! JavaModelSearch . isValidElement ( type ) ) { problemMarkerManager . setTypeUndefinedError ( valueRegion , fqType ) ; } else { if ( UiBinderXmlModelUtilities . isStyleElement ( element ) ) { IType cssResourceType = ClientBundleUtilities . findCssResourceType ( javaProject ) ; if ( cssResourceType != null ) { try { if ( ! JavaUtilities . isSubtype ( cssResourceType , type ) ) { problemMarkerManager . setNotCssResourceSubtypeError ( valueRegion , fqType ) ; } } catch ( JavaModelException e ) { GWTPluginLog . logWarning ( e , NUM00 ) ; } } } } javaTypeReferences . add ( fqType ) ; }
private void clearDictionaryCache $F72 { Map < String , Dictionary > dictionaryCaches = surrogateKeyGen . getDictionaryCaches ( ) ; List < Dictionary > $F159472 ( reverseDictionaries , dictionaryCaches ) ; for ( $F2277 ( i , reverseDictionaries ) ) { Dictionary dictionary = reverseDictionaries . get ( i ) ; $F725 ( dictionary ) } }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public static List < MRelationType > retrieveTypes ( final PO po , final int windowId ) { if ( po . get_KeyColumns ( ) . length != NUM00 ) { logger . severe ( po + NUM00 + po . get_KeyColumns ( ) . length + NUM00 ) ; PORelationException . throwWrongKeyColumnCount ( po ) ; } final String keyColumn = po . get_KeyColumns ( ) [ NUM00 ] ; final int colId = MColumn . getColumn_ID ( po . get_TableName ( ) , keyColumn ) ; final PreparedStatement pstmt = DB . prepareStatement ( SQL , po . get_TrxName ( ) ) ; ResultSet rs = null ; try { pstmt . setInt ( NUM00 , po . get_Table_ID ( ) ) ; $F47 ( pstmt , colId ) $F47578 ( rs , pstmt ) final List < MRelationType > result = evalResultSet ( po , windowId , rs ) ; logger . info ( $F26062 ( result , po ) ) ; return result ; } catch ( SQLException e ) { logger . severe ( e . getMessage ( ) ) ; throw new AdempiereException ( e ) ; } finally $F161384 ( DB , rs , pstmt ) }
public JdpJmxPacket $F97 ( data ) throws JdpException { JdpPacketReader reader ; reader = new JdpPacketReader ( data ) ; $F2539 p = reader . getDiscoveryDataAsMap ( ) ; $F1729 ( sId , p , UUID_KEY ) this . id = ( sId == null ) ? null : UUID . fromString ( sId ) ; this . jmxServiceUrl = p . get ( JMX_SERVICE_URL_KEY ) ; this . mainClass = p . get ( MAIN_CLASS_KEY ) ; this . instanceName = p . get ( INSTANCE_NAME_KEY ) ; this . processId = p . get ( PROCESS_ID_KEY ) ; this . rmiHostname = p . get ( RMI_HOSTNAME_KEY ) ; this . broadcastInterval = p . get ( BROADCAST_INTERVAL_KEY ) ; }
private UidRange parseUidRange ( String range ) throws DecodingException { $F1384 ( pos , range ) try { if ( pos == - NUM00 ) { if ( $F1276 ( range ) && $F4431 ( range ) ) { return new UidRange ( MessageUid . MAX_VALUE ) ; } else { long value = parseUnsignedInteger ( range ) ; return new UidRange ( MessageUid . of ( value ) ) ; } } else { long val1 = $F12723 ( parseUnsignedInteger , range , pos ) ; long $F172609 ( val2 , parseUnsignedInteger , range , pos ) ; if ( val1 == Long . MAX_VALUE && val2 == Long . MAX_VALUE ) { return new UidRange ( MessageUid . MAX_VALUE ) ; } else if ( val1 <= val2 ) { return new UidRange ( MessageUid . of ( val1 ) , MessageUid . of ( val2 ) ) ; } else if ( val1 == Long . MAX_VALUE ) { return new UidRange ( MessageUid . of ( val2 ) , MessageUid . MAX_VALUE ) ; } else { return new UidRange ( MessageUid . of ( val2 ) , MessageUid . of ( val1 ) ) ; } } } catch ( NumberFormatException e ) { throw new DecodingException ( HumanReadableText . INVALID_MESSAGESET , NUM00 , e ) ; } }
public void addFXGLListener ( FXGLListener listener ) $F207 ( systemListeners , listener )
public void addDefinition ( String definition ) { if $F20899 ( StringUtils , definition ) $F207 ( definitions , definition ) }
$F1 public void receiveEvent ( ClientStateInformation information ) { if ( information . getState ( ) != currentState ) { $F556 ( logger , information ) if ( information . getState ( ) == ClientState . SEARCH ) { $F3224 ( searchStartTime , System ) for ( SequenceOutputVariableFactory $F1011 factory : sequenceOutputVariableFactories . values ( ) ) { factory . setStartTime ( searchStartTime ) ; } } OutputVariable $F17803 time = new OutputVariable $F17803 ( $F2989 ( currentState ) , System . currentTimeMillis ( ) - currentStateStarted ) ; $F20063 ( outputVariables , time ) currentState = information . getState ( ) ; $F3224 ( currentStateStarted , System ) } }
public void testCase11 $F72 { $F70249 $F10679 int aSign = NUM00 ; int bSign = - NUM00 ; $F161334 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
public void addBugCode ( BugCode bugCode ) $F207 ( bugCodeList , bugCode )
$F1 public final void write ( int b ) { if ( this . ignoreWrites ) $F665 checkIfWritable ( ) ; ensureCapacity ( NUM00 ) ; $F180945 ( buffer , b ) }
public void testNestedAllocationContexts $F72 { final IAllocationContext context = manager . newAllocationContext ( _BOOL ) ; final String test = NUM00 ; final long addr1 = allocate ( manager , context , test ) ; final long addr2 = allocate ( manager , context , test ) ; assertTrue ( addr1 != addr2 ) ; final String res = getString ( addr1 ) ; $F28249 ( assertTrue , res , test ) manager . free ( addr1 , context ) ; final long addr3 = allocate ( manager , context , test ) ; assertTrue ( addr1 != addr3 ) ; manager . detachContext ( context ) ; final IAllocationContext context2 = manager . newAllocationContext ( _BOOL ) ; final long addr4 = allocate ( manager , context2 , test ) ; assertTrue ( addr1 == addr4 ) ; }
public static String underlinesToCamelCase ( String string ) { $F80469 ( sb , string ) $F1749 ( n , string ) int i = NUM00 ; boolean upcaseNext = _BOOL ; for ( ; i < n ; i ++ ) { $F1280 ( c , string , i ) if ( c == NUM00 ) { upcaseNext = _BOOL ; } else { if ( upcaseNext ) { $F186161 ( c , Character ) } upcaseNext = _BOOL ; sb . append ( c ) ; } } $F92 ( sb ) }
protected BestMatchFinder ( String pattern ) { $F21936 ( searchPattern , pattern ) }
public int indexOf ( Object key ) { return key == null ? indexOfNull ( ) : indexOf ( key , key . hashCode ( ) ) ; }
public long nextActionMillis ( long now , long nextRetryTimeMillis ) { for ( FileDownloadInfo info : downloads ) { long individualRetryTimeMillis = getNextActionMillisFor ( now , info ) ; $F106734 ( nextRetryTimeMillis , Math , individualRetryTimeMillis ) } return nextRetryTimeMillis ; }
$F73603 ( desc , c , pop , Type )
public Integer countPagesContainingTemplateNames $F24643 ( templateNames ) throws WikiApiException $F8587 ( countFilteredPages , templateNames , _BOOL )
static URL fixPureQueryTargets ( URL base , String target ) throws MalformedURLException { if $F14943 ( target ) $F260311 ( base , target ) $F14393 ( basePath , base ) String baseRightMost = NUM00 ; $F24867 ( baseRightMostIdx , basePath ) if ( baseRightMostIdx != - NUM00 ) $F78003 ( baseRightMost , basePath , baseRightMostIdx ) if $F3106 ( target ) target = baseRightMost + target ; $F260311 ( base , target ) }
synchronized void add ( Object obj ) { $F73441 ( objList , obj ) }
public void sort $F72 $F57005 ( Collections , individuals , PERFORMANCE_COMPARATOR )
void freeInterval ( SpillLocationInterval i ) $F207 ( freeIntervals , i )
private void checkAndWriteDictionaryChunkToFile $F72 throws IOException { if $F29395 ( oneDictionaryChunkList , dictionary_one_chunk_size ) $F9099 ( writeDictionaryFile , createChunkList ) }
private void ctrlSelect ( D nodeData ) { int insertionIndex = getInsertionIndex ( nodeData ) ; insertAndSelectNode ( nodeData , insertionIndex , ! $F115302 ( nodeData , selectedNodes , insertionIndex ) ) ; }
private void readObject ( ObjectInputStream ois ) throws $F6427 { $F96 asn1EncPrincipal = ( $F96 ) ois . readObject ( ) ; $F96 encRealm = ( $F96 ) ois . readObject ( ) ; try { Realm realmObject = new Realm ( new DerValue ( encRealm ) ) ; PrincipalName krb5Principal = new PrincipalName ( new DerValue ( asn1EncPrincipal ) , realmObject ) ; $F6947 ( realm , realmObject ) $F6947 ( fullName , krb5Principal ) nameType = krb5Principal . getNameType ( ) ; } catch ( Exception e ) $F5615 ( e ) }
private static int readSwappedInteger ( final DataInputStream input ) throws IOException { final int value1 = input . readByte ( ) ; final int value2 = input . readByte ( ) ; final int value3 = input . readByte ( ) ; final int value4 = input . readByte ( ) ; return $F74254 ( value1 ) + $F74254 ( value2 ) + $F74254 ( value3 ) + $F74254 ( value4 ) ; }
private void consumePreNestedScroll ( int dx , int dy , $F2027 consumed ) { if ( mOverScrollEffect == OverScrollEffect . BOUNCE && mUnconsumedOverScrollOffset != NUM00 ) { int destOffset = mUnconsumedOverScrollOffset - dy ; if ( ! MathUtils . sameSign ( destOffset , mUnconsumedOverScrollOffset ) ) { destOffset = NUM00 ; } else if $F45017 ( Math , destOffset , mUnconsumedOverScrollOffset ) { destOffset = mUnconsumedOverScrollOffset ; } consumed [ NUM00 ] = NUM00 ; consumed [ NUM00 ] = mUnconsumedOverScrollOffset - destOffset ; mUnconsumedOverScrollOffset = destOffset ; setScrollingOffset ( getUnconsumedScrollingOffset ( ) ) ; } }
$F91084
public StrBuilder replace ( final int startIndex , int endIndex , final String replaceStr ) { endIndex = validateRange ( startIndex , endIndex ) ; final int insertLen = ( replaceStr == null ? NUM00 : replaceStr . length ( ) ) ; replaceImpl ( startIndex , endIndex , endIndex - startIndex , replaceStr , insertLen ) ; return this ; }
$F172853 ( closeFile , _BOOL )
public boolean isValid ( int value ) { return min <= value && value <= max ; }
public PluginsInfo info $F72 { return info ; }
public void firePropertyChange $F36827 ( propertyName , oldValue , newValue ) $F71527 ( firePropertyChange , propertyName , Integer , oldValue , newValue )
static ArrayList < Field > allFields $F45488 ( clazz ) { final ArrayList < Field > $F204 ( res ) ; $F16270 ( cl , clazz ) while ( cl != null ) { final $F16271 fields = cl . getDeclaredFields ( ) ; Collections . addAll ( res , fields ) ; $F7852 ( cl ) } return res ; }
private void updateWeatherStates $F72 { boolean changed = temperature . update ( ) ; changed |= rain . update ( ) ; changed |= fog . update ( ) ; changed |= thunder . update ( ) ; $F8801 ( changed , updateZones ) }
public static RenderLoops makeRenderLoops ( SurfaceType src , CompositeType comp , SurfaceType dst ) { RenderLoops loops = new RenderLoops $F72 ; loops . drawLineLoop = DrawLine . locate ( src , comp , dst ) ; loops . fillRectLoop = FillRect . locate ( src , comp , dst ) ; loops . drawRectLoop = DrawRect . locate ( src , comp , dst ) ; loops . drawPolygonsLoop = DrawPolygons . locate ( src , comp , dst ) ; loops . drawPathLoop = DrawPath . locate ( src , comp , dst ) ; loops . fillPathLoop = FillPath . locate ( src , comp , dst ) ; loops . fillSpansLoop = FillSpans . locate ( src , comp , dst ) ; loops . fillParallelogramLoop = FillParallelogram . locate ( src , comp , dst ) ; loops . drawParallelogramLoop = DrawParallelogram . locate ( src , comp , dst ) ; loops . drawGlyphListLoop = DrawGlyphList . locate ( src , comp , dst ) ; loops . drawGlyphListAALoop = DrawGlyphListAA . locate ( src , comp , dst ) ; loops . drawGlyphListLCDLoop = DrawGlyphListLCD . locate ( src , comp , dst ) ; return loops ; }
public void edit ( Object plotCanvas ) { String _label = JOptionPane . showInputDialog ( ( PlotCanvas ) plotCanvas , NUM00 , label ) ; $F25302 ( _label , setLegend ) }
protected boolean excludeFile ( String file ) { $F397 ( excluded , _BOOL ) $F13712 ( iter , excluded ) while $F2921 ( iter ) if ( file . endsWith ( iter . next ( ) ) ) return _BOOL ; return _BOOL ; }
public Builder deleteUserType $F72 $F18794 ( deleteFields , this )
public final static boolean endsWithIgnoreCase ( String str , String end ) { $F80928 ( strLength , str ) $F80928 ( endLength , end ) if ( endLength > strLength ) return _BOOL ; for ( $F9993 ( i , endLength ) ) { if ( ScannerHelper . toLowerCase ( end . charAt ( endLength - i ) ) != ScannerHelper . toLowerCase ( str . charAt ( strLength - i ) ) ) return _BOOL ; } return _BOOL ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
$F130385 ( c , internalOut )
private < T extends ClientRequestResult > $F9884 executeRequest ( final Collection $F17803 ids , $F98259 ( clazz ) , final ClientRequestReportListener reportListener , final String requestQueue ) { $F980 ( LOGGER ) ClientRequestImpl $F4203 clientRequest = new ClientRequestImpl $F4203 ( clazz ) ; Iterator $F17803 it = ids . iterator ( ) ; Collection < Future < $F9884 > > results = new ArrayList < Future < $F9884 > > $F72 ; int counter = NUM00 ; while $F2921 ( it ) { while ( it . hasNext ( ) && counter < maxRequestSize ) { clientRequest . addTagId ( it . next ( ) ) ; counter ++ ; } RequestValuesTask $F4203 task = new RequestValuesTask $F4203 ( clientRequest , reportListener , requestQueue ) ; results . add ( executor . submit ( task ) ) ; clientRequest = new ClientRequestImpl $F4203 ( clazz ) ; counter = NUM00 ; } $F9884 finalCollection = new $F5676 $F72 ; for ( Future < $F9884 > result : results ) { try { finalCollection . addAll ( result . get ( ) ) ; } catch ( InterruptedException e ) $F202031 ( LOGGER , e ) catch ( ExecutionException e ) $F202031 ( LOGGER , e ) } $F980 ( LOGGER ) return finalCollection ; }
public static $F8435 classNamesToMapping $F24643 ( labels ) { $F139284 ( mapping ) for ( $F2277 ( i , labels ) ) { mapping . put ( labels . get ( i ) , i ) ; } return mapping ; }
public static String shortNumber ( int number ) { if ( number >= NUM00 ) { int hundred = number % NUM00 / NUM00 ; if ( hundred != NUM00 ) return String . format ( NUM00 , number / NUM00 ) + NUM00 ; else return ( number / NUM00 ) + NUM00 ; } else return number + NUM00 ; }
public static void putUnsignedShort ( ByteBuffer bb , int v ) { bb . putShort ( ( short ) ( v & NUM00 ) ) ; }
public static String readFileToString ( File f ) throws IOException { $F29429 ( sw ) IO . copyAndCloseBoth ( Common . asReaderUTF8Lenient ( new FileInputStream ( f ) ) , sw ) ; $F92 ( sw ) }
public void test_wrap_ByteBuffer$ByteBuffer_05 $F72 { String host = NUM00 ; int port = NUM00 ; $F30909 ( bb , ByteBuffer ) $F30907 ( bbA , ByteBuffer ) SSLEngine sse = getEngine ( host , port ) ; sse . setUseClientMode ( _BOOL ) ; try { SSLEngineResult res = sse . wrap ( bbA , bb ) ; $F128468 ( assertEquals , res ) $F128471 ( assertEquals , res ) } $F17395 ( fail , ex ) }
$F13436 ( node , count , capacity , _BOOL , l , last , first , notEmpty )
public void testTopicDinamicallyIncludedBehavior $F72 throws Exception { startAllBrokers ( ) ; Destination dest = createDestination ( NUM00 , _BOOL ) ; MessageConsumer clientA = createConsumer ( NUM00 , dest ) ; MessageConsumer clientB = createConsumer ( NUM00 , dest ) ; $F165308 ( Thread ) sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; MessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; msgsA . waitForMessagesToArrive ( MESSAGE_COUNT ) ; $F165310 ( assertEquals , MESSAGE_COUNT , msgsA ) MessageIdList msgsB = getConsumerMessages ( NUM00 , clientB ) ; msgsB . waitForMessagesToArrive ( MESSAGE_COUNT ) ; assertEquals ( NUM00 , msgsB . getMessageCount ( ) ) ; }
private File createCaptureFile ( int encodingType , String fileName ) { if $F2979 ( fileName ) { fileName = NUM00 ; } if ( encodingType == JPEG ) $F2365 ( fileName ) else if ( encodingType == PNG ) $F2365 ( fileName ) else $F18931 ( encodingType ) return new File ( getTempDirectoryPath ( ) , fileName ) ; }
$F1 public void actionPerformed ( ActionEvent e ) { Object o ; o = e . getSource ( ) ; if ( o == m_MenuFileOpen ) $F5795 ( loadFile ) else if ( o == m_MenuFileSave ) $F5795 ( saveFile ) else if ( o == m_MenuFileSaveAs ) $F5795 ( saveFileAs ) else if ( o == m_MenuFileClose ) $F5795 ( closeFile ) else if ( o == m_MenuFileCloseAll ) $F5795 ( closeAllFiles ) else if ( o == m_MenuFileProperties ) $F5795 ( showProperties ) else if ( o == m_MenuFileExit ) $F5795 ( close ) else if ( o == m_MenuEditUndo ) $F5795 ( undo ) else if ( o == m_MenuEditCopy ) $F5795 ( copyContent ) else if ( o == m_MenuEditSearch ) $F5795 ( search ) else if ( o == m_MenuEditClearSearch ) $F5795 ( clearSearch ) else if ( o == m_MenuEditDeleteAttribute ) { deleteAttribute ( _BOOL ) ; } else if ( o == m_MenuEditDeleteAttributes ) { deleteAttribute ( _BOOL ) ; } else if ( o == m_MenuEditRenameAttribute ) $F5795 ( renameAttribute ) else if ( o == m_MenuEditAttributeAsClass ) $F5795 ( attributeAsClass ) else if ( o == m_MenuEditDeleteInstance ) { deleteInstance ( _BOOL ) ; } else if ( o == m_MenuEditDeleteInstances ) { deleteInstance ( _BOOL ) ; } else if ( o == m_MenuEditSortInstances ) $F5795 ( sortInstances ) else if ( o == m_MenuViewAttributes ) $F5795 ( showAttributes ) else if ( o == m_MenuViewValues ) $F5795 ( showValues ) else $F83461 ( o , m_MenuViewOptimalColWidths , setOptimalColWidths ) updateMenu ( ) ; }
public boolean validateToken ( EndpointSpecification endpointSpecification , SecurityToken toBeValidatedToken ) throws SoapSTSConsumerException { STSClient client = getSTSClient ( stsInstanceWsdlUrl , endpointSpecification . serviceQName , endpointSpecification . portQName ) ; client . setTokenType ( STSConstants . STATUS ) ; try { client . validateSecurityToken ( toBeValidatedToken ) ; return _BOOL ; } catch ( TrustException e ) { return _BOOL ; } catch ( Exception e ) { throw new SoapSTSConsumerException $F2808 ( e ) ; } }
public static String stripFunctionTags ( String label ) { if $F56559 ( label ) return $F31599 ( label ) ; else return label ; }
$F1 public void playNewVideo ( MetaData currentItemMetaData , VideoPlayerView videoPlayerView , String videoUrl ) { if ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + mCurrentPlayer + NUM00 + videoPlayerView ) ; mPlayerHandler . pauseQueueProcessing ( TAG ) ; boolean currentPlayerIsActive = mCurrentPlayer == videoPlayerView ; boolean isAlreadyPlayingTheFile = mCurrentPlayer != null && videoUrl . equals ( mCurrentPlayer . getVideoUrlDataSource ( ) ) ; $F12265 ( SHOW_LOGS , Logger , TAG , isAlreadyPlayingTheFile ) $F12265 ( SHOW_LOGS , Logger , TAG , currentPlayerIsActive ) if ( currentPlayerIsActive ) { if ( isInPlaybackState ( ) && isAlreadyPlayingTheFile ) { if ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + mCurrentPlayerState ) ; } else { startNewPlayback ( currentItemMetaData , videoPlayerView , videoUrl ) ; } } else { startNewPlayback ( currentItemMetaData , videoPlayerView , videoUrl ) ; } mPlayerHandler . resumeQueueProcessing ( TAG ) ; if ( SHOW_LOGS ) Logger . v ( TAG , NUM00 + videoPlayerView + NUM00 + videoUrl ) ; }
private void addTraceAndType ( String name ) { if $F4257 ( tracesType , name ) { traces . add ( createTrace ( name , TraceType . REAL ) ) ; tracesType . put ( name , TraceType . REAL ) ; } else { traces . add ( createTrace ( name , tracesType . get ( name ) ) ) ; } }
public static boolean isReservedStreamName ( String name ) $F75994 ( name )
public static VolumeMount [ ] formatOriginalContainerVolumeMount ( LogDraft logDraft ) { List < VolumeMount > $F204 ( volumeMounts ) ; int idxSuffix = NUM00 ; for ( LogItemDraft logItemDraft : logDraft . getLogItemDrafts ( ) ) { if ( logItemDraft . isAutoCollect ( ) || logItemDraft . isAutoDelete ( ) ) { VolumeMount volumeMount = new VolumeMount $F72 ; $F145048 ( volumeMount , idxSuffix ) volumeMount . setMountPath ( LogItemDraft . getLogParentPath ( logItemDraft . getLogPath ( ) ) ) ; volumeMounts . add ( volumeMount ) ; idxSuffix ++ ; } } return volumeMounts . toArray ( new VolumeMount $F10277 ) ; }
public static double dnorm ( double x ) { return Math . exp ( - x * x / NUM00 ) * PSI ; }
public static long checksumCRC32 ( File file ) throws IOException { $F64750 ( crc ) checksum ( file , crc ) ; $F233317 ( crc ) }
private void cmd_annotateDifference $F72 { BigDecimal previousValue , actualValue , difference ; previousValue = ( BigDecimal ) v_previousBalance . getValue ( ) ; actualValue = ( BigDecimal ) v_ActualBalance . getValue ( ) ; difference = actualValue . subtract ( previousValue ) ; MCashBook cashBook = new MCashBook ( p_ctx , p_pos . getC_CashBook_ID ( ) , null ) ; Timestamp today = TimeUtil . getDay ( System . currentTimeMillis ( ) ) ; MCash cash = MCash . get ( p_ctx , cashBook . getC_CashBook_ID ( ) , today , null ) ; if ( cash != null && cash . get_ID ( ) != NUM00 && difference . compareTo ( cash . getStatementDifference ( ) ) != NUM00 ) { MCashLine cl = new MCashLine ( cash ) ; cl . setCashType ( MCashLine . CASHTYPE_Difference ) ; cl . setAmount ( difference ) ; cl . setDescription ( $F9206 ( Msg , p_pos ) + previousValue + NUM00 + actualValue ) ; $F45240 ( cl ) } cash = MCash . get ( p_pos . getCtx ( ) , p_pos . getC_CashBook_ID ( ) , today , null ) ; v_previousBalance . setValue ( cash . getEndingBalance ( ) ) ; v_ActualBalance . setValue ( Env . ZERO ) ; v_difference . setValue ( Env . ZERO ) ; }
public void write ( OutputStream out , java . util . List < Figure > figures ) throws IOException { $F1634 drawingRect = null ; for ( Figure f : figures ) { if ( drawingRect == null ) { drawingRect = f . getBounds ( ) ; } else { drawingRect . add ( f . getBounds ( ) ) ; } } $F34721 ( tx ) tx . translate ( - Math . min ( NUM00 , drawingRect . x ) , - Math . min ( NUM00 , drawingRect . y ) ) ; write ( out , figures , tx , new Dimension ( ( int ) ( $F67900 ( Math , drawingRect ) + drawingRect . width ) , ( int ) ( Math . abs ( drawingRect . y ) + drawingRect . height ) ) ) ; }
FixedAllocator ( final RWStore store , final int size ) { m_diskAddr = NUM00 ; m_store = store ; m_size = size ; m_bitSize = calcBitSize ( _BOOL , size , cMinAllocation , cModAllocation ) ; allocBlockRange = NUM00 * m_bitSize ; final int numBlocks = NUM00 / ( m_bitSize + NUM00 ) ; m_allocBlocks = new ArrayList < AllocBlock > ( numBlocks ) ; for ( $F119 ( i , numBlocks ) ) { m_allocBlocks . add ( new AllocBlock ( NUM00 , m_bitSize , this ) ) ; } m_freeTransients = NUM00 ; m_freeBits = NUM00 * m_bitSize * numBlocks ; }
private void buildGetStorageResponse ( MockCloseableHttpResponse response , URI uri ) throws JAXBException { $F26605 ( pattern , Pattern ) Matcher matcher = pattern . matcher ( uri . getPath ( ) ) ; if $F281 ( matcher ) { Storage storage = getNewStorage ( matcher . group ( NUM00 ) ) ; response . setEntity ( getHttpEntity ( storage ) ) ; } }
public void assertEquals $F1947 ( assertID , expected , actual ) { framework . assertEquals ( this , assertID , expected , actual ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { if ( Boolean . parseBoolean ( SystemProperties . get ( TelephonyProperties . PROPERTY_INECM_MODE ) ) ) $F845 else { setAirplaneModeOn ( ( Boolean ) newValue ) ; } return _BOOL ; }
public static int estimateBandPassOrder ( int sampleRate , int passBandStart , int passBandEnd , double passBandRippleDb , double stopBandRippleDb ) { double df = ( double ) Math . abs ( passBandEnd - passBandStart ) / ( double ) sampleRate ; double ddp = ( double ) Math . log10 ( passBandRippleDb ) ; double dds = ( double ) Math . log10 ( stopBandRippleDb ) ; double a1 = NUM00 ; double a2 = NUM00 ; double a3 = - NUM00 ; double a4 = NUM00 ; double a5 = - NUM00 ; double a6 = - NUM00 ; double t1 = a1 * ddp * ddp ; double t2 = a2 * ddp ; double t3 = a4 * ddp * ddp ; double t4 = a5 * ddp ; double cinf = dds * ( t1 + t2 + a3 ) + t3 + t4 + a6 ; double ginf = - NUM00 * ( double ) Math . log10 ( passBandRippleDb / stopBandRippleDb ) - NUM00 ; double n = cinf / df + ginf * df + NUM00 ; return $F63596 ( Math , n ) ; }
static public Object stringToValue ( String s ) { $F29942 ( s ) $F29944 ( s , Boolean ) $F29946 ( s , Boolean ) $F29948 ( s , JSONObject ) $F12685 ( b , s ) if ( $F19295 ( b ) || b == NUM00 || b == NUM00 || b == NUM00 ) { if ( b == NUM00 && $F20 ( s ) && $F66132 ( s ) ) { try { return new Integer ( $F30886 ( Integer , s ) ) ; } $F29977 } try { if $F29954 ( s ) $F62107 ( Double , s ) else { $F29962 ( myLong , s ) if ( myLong . longValue ( ) == myLong . intValue ( ) ) { $F29969 ( myLong ) } else { return myLong ; } } } $F29977 } return s ; }
$F49924 ( out , b , buffer )
private $F5415 calcBorderValues $F72 { float max = Integer . MIN_VALUE ; float min = Integer . MAX_VALUE ; for ( ChartSet set : chartView . data ) { for ( ChartEntry e : set . getEntries ( ) ) { if ( e . getValue ( ) >= max ) $F37891 ( max , e ) if ( e . getValue ( ) <= min ) $F37891 ( min , e ) } } return new float [ ] { min , max } ; }
private void parseName ( StringTokenizer st , boolean peer ) { List vals = new ArrayList $F989 ; outer : while ( _BOOL ) { String cls ; do { if $F49874 ( st ) { $F59811 } $F39710 ( cls , st ) } while $F3057 ( cls ) ; if ( ! peer && cls . equalsIgnoreCase ( NUM00 ) ) $F144211 ( parseName , st , _BOOL ) if $F3057 ( cls ) { if ( peer ) $F825 cls = null ; vals = null ; } String nm ; do { if $F49874 ( st ) $F825 $F39710 ( nm , st ) } while $F3057 ( nm ) ; if $F14943 ( nm ) $F825 while $F2364 ( nm ) { if $F49874 ( st ) $F825 nm = nm + st . nextToken ( ) ; } if $F3057 ( nm ) { if ( peer ) $F825 $F4322 ( cls ) nm = null ; } else if ( cls == null ) $F825 else $F8994 ( nm ) if ( vals != null ) { for ( $F2198 ( i , vals ) ; i > NUM00 ; ) { String onm = ( String ) vals . get ( -- i ) ; String ocls = ( String ) vals . get ( -- i ) ; if $F1238 ( cls , ocls ) { if ( onm == null || $F1256 ( onm , nm ) ) $F81010 else if ( nm == null ) { vals . remove ( i ) ; vals . remove ( i ) ; } } } vals . add ( cls ) ; vals . add ( nm ) ; } } $F10127 ( res ) if ( vals != null ) { $F27731 ( vals ) res = $F10149 ( vals ) ; } if ( peer ) { this . peer = res ; } else { this . me = res ; } }
public static Object applyOrCall ( boolean isApply , Context cx , Scriptable scope , Scriptable thisObj , $F131 args ) { int L = args . length ; Callable function = getCallable ( thisObj ) ; Scriptable callThis = null ; if ( L != NUM00 ) { callThis = toObjectOrNull ( cx , args [ NUM00 ] ) ; } $F5178 ( callThis , getTopCallScope , cx ) $F131 callArgs ; if ( isApply ) { callArgs = L <= NUM00 ? ScriptRuntime . emptyArgs : getApplyArguments ( cx , args [ NUM00 ] ) ; } else { if ( L <= NUM00 ) { callArgs = ScriptRuntime . emptyArgs ; } else { callArgs = new Object [ L - NUM00 ] ; System . arraycopy ( args , NUM00 , callArgs , NUM00 , L - NUM00 ) ; } } return function . call ( cx , scope , callThis , callArgs ) ; }
public void increment $F72 $F26160 ( counter )
public static void removeAllChildren ( Node node ) { $F9040 ( children , node ) for ( int i = NUM00 , length = children . getLength ( ) ; i < length ; i ++ ) { node . removeChild ( children . item ( i ) ) ; } }
$F32357 ( Class , _BOOL )
$F65837 ( node , count , capacity , _BOOL , f , first , last , notEmpty )
protected void deploy ( HttpServletResponse response , String contextPath , String warURL ) throws IOException { String context = contextPath ; boolean error = _BOOL ; if ( context == null ) { $F1705 ( file , warURL ) $F20605 ( fileName , file ) if $F8991 ( fileName ) { fileName = $F129389 ( fileName ) ; } context = NUM00 + fileName ; } if ( getContextHandler ( context ) != null ) { sendError ( response , NUM00 + context ) ; error = _BOOL ; } else if $F14943 ( context ) { sendError ( response , NUM00 ) ; error = _BOOL ; } if ( error ) $F932 else { $F57201 ( webappDest , webAppDirectory , context ) URI uri = null ; try { uri = new URI ( warURL ) ; } catch ( URISyntaxException e ) { sendError ( response , NUM00 + warURL ) ; Log . warn ( e ) ; $F665 } $F1705 ( webappSource , uri ) $F4647 ( fileInputStream , webappSource ) $F4649 ( fileOutputStream , webappDest ) $F7468 ( i , fileInputStream ) while ( i != - NUM00 ) { fileOutputStream . write ( i ) ; $F10201 ( i , fileInputStream ) } $F59 ( fileInputStream ) $F1206 ( fileOutputStream ) $F59 ( fileOutputStream ) WebAppContext webappcontext = new WebAppContext $F72 ; webappcontext . setContextPath ( context ) ; webappcontext . setWar ( webappDest . getPath ( ) ) ; chc . addHandler ( webappcontext ) ; try $F28175 ( webappcontext ) catch ( Exception e ) { sendError ( response , NUM00 ) ; Log . warn ( e ) ; $F665 } } sendMessage ( response , NUM00 + contextPath ) ; }
public OutlierResult run ( $F42616 relation ) { final DBIDs ids = relation . getDBIDs ( ) ; ArrayList $F2596 subspaceIndex = buildOneDimIndexes ( relation ) ; Set $F2590 subspaces = calculateSubspaces ( relation , subspaceIndex , rnd . getSingleThreadedRandom ( ) ) ; if ( LOG . isVerbose ( ) ) { LOG . verbose ( $F10532 ( subspaces ) ) ; } List < DoubleRelation > $F204 ( results ) ; FiniteProgress $F192797 ( prog , LOG , subspaces ) ; for ( HiCSSubspace dimset : subspaces ) { if ( LOG . isVerbose ( ) ) { LOG . verbose ( NUM00 + dimset ) ; } ProxyDatabase pdb = new ProxyDatabase ( ids ) ; pdb . addRelation ( new ProjectedView $F200 ( relation , new NumericalFeatureSelection $F2193 ( dimset ) ) ) ; OutlierResult result = outlierAlgorithm . run ( pdb ) ; results . add ( result . getScores ( ) ) ; LOG . incrementProcessed ( prog ) ; } LOG . ensureCompleted ( prog ) ; WritableDoubleDataStore scores = DataStoreUtil . makeDoubleStorage ( relation . getDBIDs ( ) , DataStoreFactory . HINT_STATIC ) ; DoubleMinMax minmax = new DoubleMinMax $F72 ; for ( $F42632 ( iditer , relation ) ) { double sum = NUM00 ; for ( DoubleRelation r : results ) { $F42661 ( s , r , iditer ) if $F2292 ( Double , s ) { sum += s ; } } scores . putDouble ( iditer , sum ) ; minmax . put ( sum ) ; } OutlierScoreMeta meta = new BasicOutlierScoreMeta ( minmax . getMin ( ) , minmax . getMax ( ) ) ; DoubleRelation scoreres = new MaterializedDoubleRelation ( NUM00 , NUM00 , scores , relation . getDBIDs ( ) ) ; return new OutlierResult ( meta , scoreres ) ; }
private void addUnitToExternalQualMap ( final $F26425 annoClass ) { AnnotationMirror mirror = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( processingEnv , annoClass ) ; if ( ! isAliasedAnnotation ( mirror ) ) { String unitClassName = annoClass . getCanonicalName ( ) ; if $F15257 ( externalQualsMap , unitClassName ) $F1717 ( externalQualsMap , unitClassName , annoClass ) } else { $F26425 baseUnitClass = getBaseUnitAnnoClass ( mirror ) ; if ( baseUnitClass != null ) { String baseUnitClassName = baseUnitClass . getCanonicalName ( ) ; if $F15257 ( externalQualsMap , baseUnitClassName ) { loadExternalUnit ( baseUnitClassName ) ; } aliasedAnnotation ( mirror ) ; } else $F845 } addUnitsRelations ( annoClass ) ; }
$F1 protected void onProgressUpdate ( Integer ... values ) { if ( parent != null ) { if ( values [ NUM00 ] == ON_CACHE_END ) { parent . onCacheEnd ( ) ; } else if ( values [ NUM00 ] == ON_CACHE_INTERRUPTED ) { $F1594 ( Log , TAG ) shouldBeStopped = _BOOL ; parent . onCacheInterrupted ( ) ; } else { parent . onCacheProgress ( taskCount , values [ NUM00 ] ) ; } } }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if ( argNum < NUM00 ) reportWrongNumberArgs ( ) ; }
public double dotProduct ( DoubleVector v ) { return x * v . x + y * v . y + z * v . z ; }
public TemporalOMScalingIcon ( Object id , int renderType , boolean interpolate , ImageIcon ii ) { this ( id , renderType , interpolate , ii . getImage ( ) , NUM00 ) ; setMaxScale ( NUM00 ) ; setMinScale ( NUM00 ) ; }
$F1 public void characters $F21196 ( ch , start , length ) throws SAXException $F92922 ( mStringBuilder , ch , start , length )
public int maxLength $F72 { if ( mIsPaired ) { return ( int ) Math . max ( mLeft . maxLength ( ) , mRight . maxLength ( ) ) ; } else { return ( int ) mSingle . maxLength ( ) ; } }
public boolean equalsIgnoreCase ( StrBuilder other ) { $F3627 ( this , other , _BOOL ) if ( this . size != other . size ) { return _BOOL ; } char thisBuf [ ] = this . buffer ; char otherBuf [ ] = other . buffer ; for ( $F18298 ( i , size ) ) { char c1 = thisBuf [ i ] ; char c2 = otherBuf [ i ] ; if ( c1 != c2 && Character . toUpperCase ( c1 ) != Character . toUpperCase ( c2 ) ) { return _BOOL ; } } return _BOOL ; }
public PathParser ( String pathString ) { this . pathString = pathString . toCharArray ( ) ; }
public LuaTable ( Varargs varargs , int firstarg ) { int nskip = firstarg - NUM00 ; int n = Math . max ( varargs . narg ( ) - nskip , NUM00 ) ; presize ( n , NUM00 ) ; set ( N , valueOf ( n ) ) ; for ( $F9993 ( i , n ) ) set ( i , varargs . arg ( i + nskip ) ) ; }
public ID3v24Frame ( ByteBuffer byteBuffer , String loggingFilename ) throws InvalidFrameException , InvalidDataTypeException $F19517 ( setLoggingFilename , loggingFilename , read , byteBuffer )
public void disablePan ( BluetoothAdapter adapter ) { if ( mPan == null ) mPan = ( BluetoothPan ) connectProxy ( adapter , BluetoothProfile . PAN ) ; assertNotNull ( mPan ) ; $F657 ( start , System ) mPan . setBluetoothTethering ( _BOOL ) ; $F657 ( stop , System ) assertFalse ( mPan . isTetheringOn ( ) ) ; writeOutput ( String . format ( NUM00 , ( stop - start ) ) ) ; }
$F189955 ( src , returnValue , System , values , top , this )
public boolean ready $F72 throws IOException { $F3576 ( _input ) $F437528 ( _index , _input , _BOOL ) return _BOOL ; }
private $F16501 diff_compute $F35621 ( text1 , text2 , checklines , deadline ) { $F16553 ( diffs ) if $F1277 ( text1 ) { $F16561 ( diffs , Operation , text2 ) return diffs ; } if $F1277 ( text2 ) { $F16557 ( diffs , Operation , text1 ) return diffs ; } String longtext = $F40307 ( text1 , text2 ) ? text1 : text2 ; String shorttext = $F40307 ( text1 , text2 ) ? text2 : text1 ; $F12747 ( i , longtext , shorttext ) if ( i != - NUM00 ) { Operation op = $F40316 ( text1 , text2 ) ? Operation . DELETE : Operation . INSERT ; diffs . add ( new Diff ( op , longtext . substring ( NUM00 , i ) ) ) ; $F35629 ( diffs , Operation , shorttext ) diffs . add ( new Diff ( op , $F29991 ( longtext , i , shorttext ) ) ) ; return diffs ; } if $F1277 ( shorttext ) { $F16557 ( diffs , Operation , text1 ) $F16561 ( diffs , Operation , text2 ) return diffs ; } $F31405 ( hm , diff_halfMatch , text1 , text2 ) if ( hm != null ) { String text1_a = hm [ NUM00 ] ; String text1_b = hm [ NUM00 ] ; String text2_a = hm [ NUM00 ] ; String text2_b = hm [ NUM00 ] ; String mid_common = hm [ NUM00 ] ; $F40337 ( diffs_a , diff_main , text1_a , text2_a , checklines , deadline ) $F40337 ( diffs_b , diff_main , text1_b , text2_b , checklines , deadline ) diffs = diffs_a ; $F35629 ( diffs , Operation , mid_common ) diffs . addAll ( diffs_b ) ; return diffs ; } if ( $F40340 ( checklines , text1 ) && $F20 ( text2 ) ) $F19580 ( diff_lineMode , text1 , text2 , deadline ) return diff_bisect ( text1 , text2 , deadline ) ; }
public static long sizeOfDirectory ( File directory ) { checkDirectory ( directory ) ; $F44946 ( files , directory ) $F1084 ( files ) long size = NUM00 ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size += sizeOf ( file ) ; $F29432 ( size ) } } $F62612 } return size ; }
protected void handleMatch ( T mapping , String lookupPath , ServerWebExchange exchange ) $F845
public boolean isUseSSL $F72 { return useSSL ; }
public void start $F72 { if ( ( mProxSensor == null ) || mIsActive ) $F932 mIsActive = _BOOL ; mShouldDropEvents = _BOOL ; mSensorManager . registerListener ( mListener , mProxSensor , SensorManager . SENSOR_DELAY_UI ) ; LogUtils . log ( this , Log . VERBOSE , NUM00 , System . currentTimeMillis ( ) ) ; mHandler . postDelayed ( mFilterRunnable , REGISTRATION_EVENT_FILTER_TIMEOUT ) ; }
public void testEntityDeclarations $F72 $F1941 ( assertNotNull , sp )
private Vector applyCSS ( HTMLElement element , HTMLComponent htmlC , CSSElement [ ] css , Vector nestedSelectors , Vector siblingSelectors ) { String id = element . getAttributeById ( HTMLElement . ATTR_ID ) ; String className = element . getAttributeById ( HTMLElement . ATTR_CLASS ) ; $F6518 ( nextNestedSelectors ) Vector nextSiblingSelectors = null ; if ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) { $F20637 ( nextSiblingSelectors ) } for ( $F1139 ( e , css ) ) { CSSElement currentSelector = css [ e ] ; checkSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; } if ( nestedSelectors != null ) { for ( $F44696 ( e , nestedSelectors ) ) { CSSElement currentSelector = ( CSSElement ) e . nextElement ( ) ; checkSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; } } if ( ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) && ( siblingSelectors != null ) ) { for ( $F44696 ( e , siblingSelectors ) ) { CSSElement currentSelector = ( CSSElement ) e . nextElement ( ) ; checkSelector ( currentSelector , element , htmlC , className , id , nextNestedSelectors , nextSiblingSelectors ) ; } } if $F10471 ( nextNestedSelectors ) { nextNestedSelectors = null ; } if ( ( ! HTMLComponent . PROCESS_HTML_MP1_ONLY ) && $F10471 ( nextSiblingSelectors ) ) { nextSiblingSelectors = null ; } applyStyleAttribute ( element , htmlC ) ; Vector curSiblingSelectors = null ; for ( int i = NUM00 ; i < element . getNumChildren ( ) ; i ++ ) { HTMLElement child = ( HTMLElement ) element . getChildAt ( i ) ; Vector v = applyCSS ( child , htmlC , css , nextNestedSelectors , curSiblingSelectors ) ; if ( ! child . isTextElement ( ) ) { curSiblingSelectors = v ; } } return nextSiblingSelectors ; }
$F5466 private TcpDiscoveryNode resolveCoordinator ( $F5466 Collection < TcpDiscoveryNode > filter ) { synchronized ( mux ) { Collection < TcpDiscoveryNode > excluded = F . concat ( _BOOL , failedNodes . keySet ( ) , leavingNodes ) ; if $F20899 ( F , filter ) excluded = F . concat ( _BOOL , excluded , filter ) ; return ring . coordinator ( excluded ) ; } }
public static $F806 splitc ( String src , String d ) { if ( $F1277 ( d ) || $F1277 ( src ) ) { $F80149 ( src ) } return splitc ( src , d . toCharArray ( ) ) ; }
public int deflateString2ByteArray ( $F96 input , int inputOffset , int inputLength , $F96 bytes ) { if ( inputLength >= MIN_SIZE_FOR_DEFLATION ) { deflater . setInput ( input , inputOffset , inputLength ) ; $F1571 ( deflater ) int compressedDataLength = deflater . deflate ( bytes ) ; $F2268 ( deflater ) return - compressedDataLength ; } else { $F21535 ( System , input , inputOffset , bytes , inputLength ) return inputLength ; } }
private void doubleCapacity $F72 { int p = head ; int n = elements . length ; int r = n - p ; int newCapacity = n < < NUM00 ; if ( newCapacity < NUM00 ) $F4638 $F133 ( a , newCapacity ) $F21535 ( System , elements , p , a , r ) $F6483 ( System , elements , a , r , p ) elements = a ; head = NUM00 ; tail = n ; }
public Marker backTo ( int idx ) throws AMConsoleException { $F115 ( size , trail ) if ( idx >= size ) $F21549 for ( int i = size - NUM00 ; i > idx ; -- i ) $F106 ( trail , i ) return ( Marker ) trail . get ( idx ) ; }
private static long copy ( InputStream source , OutputStream sink ) throws IOException { long nread = NUM00 ; $F2175 ( buf , BUFFER_SIZE ) int n ; while $F87061 ( n , source , buf ) $F18068 ( sink , buf , n , nread ) return nread ; }
public $F96 pack $F72 { if $F10471 ( entries ) $F1274 int entryLength = owner . getType ( ) . NODES_ENTRY_LENGTH ; $F96 buffer = new byte [ entries . size ( ) * entryLength ] ; $F30975 ( max_items , buffer ) int j = NUM00 ; for ( KBucketEntry e : entries ) { $F66497 ( j , max_items ) PackUtil . PackBucketEntry ( e , buffer , j * entryLength , owner . getType ( ) ) ; j ++ ; } return buffer ; }
public String toString $F72 { $F8755 ( sb ) for ( $F1139 ( i , permissions ) ) $F70285 ( i , sb , permissions ) $F84 ( sb ) $F92 ( sb ) }
public void testInvalidAfterClose $F72 throws IOException { Path tempPath = createTempDir ( ) ; Directory dir = getDirectory ( tempPath ) ; Lock l = dir . obtainLock ( NUM00 ) ; $F59 ( l ) expectThrows ( AlreadyClosedException . class , null ) ; $F59 ( dir ) }
public static GdsTypeRule excludes ( String ... excludedTypes ) { final $F2689 excludedTypesSet = $F202502 ( Arrays , excludedTypes ) ; return new GdsTypeRule ( not ( isIn ( excludedTypesSet ) ) ) ; }
public final $F2689 aliases $F72 { $F60730 ( aliasSet ) int n = aliases . length ; $F2690 $F45084 ( hs , n ) ; for ( $F119 ( i , n ) ) $F24616 ( hs , aliases , i ) aliasSet = Collections . unmodifiableSet ( hs ) ; return aliasSet ; }
public synchronized void unweave ( ByteString id ) { if $F1710 ( woven , id ) { removed . add ( woven . remove ( id ) ) ; } }
private static Map < String , VirtualFile > findSiblings ( $F5466 VirtualFile directory , Project project , Set $F85423 seen ) { if ( directory == null ) $F83145 ( Collections ) else { if $F105 ( seen , directory ) { return findSiblings ( null , project , seen ) ; } seen . add ( directory ) ; VirtualFile settings = directory . findChild ( SdkConstants . FN_SETTINGS_GRADLE ) ; if ( settings == null ) { return findSiblings ( directory . getParent ( ) , project , seen ) ; } else { return GradleModuleImporter . getSubProjects ( settings , project ) ; } } }
public AuthorityKeyIdentifierStructure ( X509Certificate certificate ) throws CertificateParsingException $F14373 ( super , fromCertificate , certificate )
$F1 public int hashCode $F72 { return Arrays . hashCode ( new ImmutablePair [ ] { ( ImmutablePair ) first , ( ImmutablePair ) second } ) ; }
$F52843 ( packed , map , i , j , count , value )
$F20664 public static String replaceUnicodeDigits ( String number ) { $F80469 ( normalizedDigits , number ) for ( $F2998 ( c , number ) ) { $F338099 ( digit , Character , c ) if ( digit != - NUM00 ) $F288 ( normalizedDigits , digit ) else $F288 ( normalizedDigits , c ) } $F92 ( normalizedDigits ) }
public String Frie_Name ( String value ) { if $F6036 ( value ) $F1278 String retValue = value ; String SQL = NUM00 ; try { $F46 ( pstmt , DB , SQL ) $F3916 ( pstmt , value ) $F49 ( rs , pstmt ) if $F1682 ( rs ) $F68584 ( retValue , rs ) $F59 ( rs ) $F59 ( pstmt ) } $F64 ( log , Level , SQL , e ) return retValue ; }
public static boolean isCompressed ( File file ) { InputStream fis = null ; try { if $F3428 ( file ) { $F5335 ( fis , file ) $F7468 ( mag1 , fis ) $F7468 ( mag2 , fis ) $F59 ( fis ) return selectCompressionProvider ( mag1 , mag2 ) != null ; } } catch ( IOException e ) { LOG . log ( Level . FINEST , NUM00 + file + NUM00 , e ) ; return _BOOL ; } $F19458 ( SafeClose , fis ) return _BOOL ; }
$F1 public int readInt ( String filePath ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , CarbonCommonConstants . INT_SIZE_IN_BYTE ) ; return byteBffer . getInt ( ) ; }
private synchronized void closeOutputStreamQuietly $F72 { if ( ! mClosed ) { try { $F59 ( mOutputStream ) reportDecodedSizeIfApplicable ( ) ; } catch ( IOException e ) { CLog . writeToConsole ( mNetworkPeerManager , Console . MessageLevel . ERROR , Console . MessageSource . NETWORK , NUM00 + e ) ; } finally { mClosed = _BOOL ; } } }
public void bind ( String address , ServiceRefAmp linkService ) { _linkServiceMap . put ( address , linkService ) ; _serviceCloseList . add ( linkService ) ; }
public boolean mightHaveMultiFontMetrics $F72 $F40347 ( fontConfig )
private static boolean checkOffset $F41200 ( value , offset , expected ) { return $F7007 ( offset , value ) && $F44927 ( value , offset , expected ) ; }
void addSplit ( String splitPath ) { $F6542 ( splits , splitPath ) for ( String split : splits ) { $F1382 ( split ) if $F3106 ( split ) $F1665 ( split ) if $F1277 ( split ) $F598 addField ( split , split , _BOOL , _BOOL ) ; } }
public void toLatLon ( double v0 , double h0 ) { final double GX = NUM00 ; $F175803 ( GY ) final double A = NUM00 ; $F175803 ( Q ) final double Q2 = NUM00 ; final double EPSILON = NUM00 ; double v = ( double ) v0 ; double h = ( double ) h0 ; double t1 = ( v - TRANSV ) / RADIUS ; double t2 = ( h - TRANSH ) / RADIUS ; double vhat = ROTC * t2 - ROTS * t1 ; double hhat = ROTS * t2 + ROTC * t1 ; double e = Math . cos ( $F25556 ( Math , vhat , hhat ) ) ; double w = Math . cos ( Math . sqrt ( vhat * vhat + $F94029 ( hhat ) ) ) ; double fx = EY * w - WY * e ; double fy = EX * w - WX * e ; double b = fx * GX + fy * GY ; double c = fx * fx + fy * fy - Q2 ; double disc = b * b - A * c ; double x , y , z , delta ; if $F7637 ( Math , disc , EPSILON ) { z = b / A ; x = ( GX * z - fx ) / Q ; y = ( fy - GY * z ) / Q ; } else { delta = Math . sqrt ( disc ) ; z = ( b + delta ) / A ; x = ( GX * z - fx ) / Q ; y = ( fy - GY * z ) / Q ; if ( vhat * ( PX * x + PY * y + PZ * z ) < NUM00 ) { z = ( b - delta ) / A ; x = ( GX * z - fx ) / Q ; y = ( fy - GY * z ) / Q ; } } double lat = Math . asin ( z ) ; final $F1986 bi = { NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , NUM00 } ; double lat2 = lat * lat ; double earthlat = lat * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] + lat2 * ( bi [ NUM00 ] ) ) ) ) ) ) ) ; earthlat = Math . toDegrees ( earthlat ) ; double lon = Math . toDegrees ( Math . atan2 ( x , y ) ) ; double earthlon = lon + NUM00 ; this . resultLat = earthlat ; this . resultLon = - earthlon ; }
public void sortArray ( $F10809 d , $F96239 c ) { this . data = d ; this . comp = c ; int len = Math . max ( ( int ) ( NUM00 * Math . log ( d . length ) ) , TEMP_SIZE ) ; len = Math . min ( d . length , len ) ; $F1431 $F10809 t = ( $F10809 ) new Object [ len ] ; this . temp = t ; mergeSort ( NUM00 , d . length - NUM00 ) ; }
$F141880 ( closeable , rethrown )
public void cacheUnit ( UnitInterface unit ) $F207 ( allUnits , unit )
public Component findByName ( String name , Component rootComponent ) { Component c = ( Component ) rootComponent . getClientProperty ( NUM00 + name + NUM00 ) ; if ( c == null ) { Container newRoot = getRootAncestor ( rootComponent ) ; if ( newRoot != null && rootComponent != newRoot ) $F8587 ( findByName , name , newRoot ) } return c ; }
protected void fetchMetadata $F72 throws IOException { remaining = period ; $F7468 ( size , in ) $F61236 ( size ) size <<= NUM00 ; if ( mbuffer . length < size ) { mbuffer = null ; $F1325 ( mbuffer , size ) $F63425 ( Log , LOG , size ) } size = readFully ( mbuffer , NUM00 , size ) ; for ( $F119 ( i , size ) ) { if ( mbuffer [ i ] == NUM00 ) $F3468 ( size , i ) } String s ; try { s = new String ( mbuffer , NUM00 , size , characterEncoding ) ; } catch ( Exception e ) $F17931 ( Log , LOG ) $F12258 ( Log , LOG , s ) parseMetadata ( s ) ; }
public void startElement $F72 { nss . pushContext ( ) ; inCollectingMode = _BOOL ; }
private V replaceNode ( Object key , V value , Object cv ) { int hash = hash ( ( K ) key ) ; for ( $F35154 ( tab , table ) ) { $F35155 ( f ) int n , i , fh ; if ( $F35157 ( tab , n ) || $F35160 ( f , tabAt , tab , i , n , hash ) ) $F5153 else if $F35162 ( fh , f , MOVED ) $F176272 ( tab , helpTransfer , f ) else { V oldVal = null ; boolean validated = _BOOL ; synchronized ( f ) { if ( tabAt ( tab , i ) == f ) { if ( fh >= NUM00 ) { validated = _BOOL ; for ( $F35163 ( e , f , pred ) ; ; ) { if ( e . hash == hash && isEqual ( ( K ) key , e . key ) ) { V ev = e . val ; if $F125165 ( cv , ev ) { oldVal = ev ; if ( value != null ) { e . val = value ; } else if ( pred != null ) { $F33910 ( pred , e ) } else { setTabAt ( tab , i , e . next ) ; } } $F597 } pred = e ; if ( ( e = e . next ) == null ) $F5153 } } else if ( f instanceof TreeBin ) { validated = _BOOL ; $F35192 ( t , f ) $F35195 ( r , p ) if $F35200 ( r , t , p , hash , key ) { V pv = p . val ; if $F125165 ( cv , pv ) { oldVal = pv ; if ( value != null ) { p . val = value ; } else if ( t . removeTreeNode ( p ) ) { setTabAt ( tab , i , untreeify ( t . first ) ) ; } } } } } } if ( validated ) { if ( oldVal != null ) { if ( value == null ) { addCount ( $F64496 ) ; } return oldVal ; } $F597 } } } $F1274 }
public final void removeHelperText $F134304 ( helperText ) { ensureNotNull ( helperText , NUM00 ) ; ensureNotEmpty ( helperText , NUM00 ) ; helperTexts . remove ( helperText ) ; verifyPasswordStrength ( ) ; }
public final synchronized int maxPV $F72 { $F74334 ( computerPlayer ) return computerPlayer . getMaxPV ( ) ; }
private void displaySimple ( PrintStream output ) { $F8438 ( output ) for ( $F119 ( j , P ) ) { $F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { a0 [ i ] = A [ i ] ; a1 [ i ] = C_A [ i ] [ j ] ; a2 [ i ] = B [ i ] ; } double value = computeFirstOrder ( a0 , a1 , a2 , N ) ; output . print ( value < NUM00 ? NUM00 : value ) ; if ( j < P - NUM00 ) $F21410 ( output ) } $F21416 ( output ) $F8438 ( output ) for ( $F119 ( j , P ) ) { $F9662 ( a0 , N ) $F9662 ( a1 , N ) $F9662 ( a2 , N ) for ( $F119 ( i , N ) ) { a0 [ i ] = A [ i ] ; a1 [ i ] = C_A [ i ] [ j ] ; a2 [ i ] = B [ i ] ; } double value = computeTotalOrder ( a0 , a1 , a2 , N ) ; output . print ( value < NUM00 ? NUM00 : value ) ; if ( j < P - NUM00 ) $F21410 ( output ) } $F21416 ( output ) }
public Object remove ( int index ) { RangeCheck ( index ) ; modCount ++ ; Object oldValue = elementData [ index ] ; int numMoved = size - index - NUM00 ; if ( numMoved > NUM00 ) $F173011 ( System , elementData , index , numMoved ) elementData [ -- size ] = null ; return oldValue ; }
public String readMatchingFlags ( String text ) { clear ( ) ; if $F7311 ( text , PM_SEPARATOR ) { final StringTokenizer tok = new StringTokenizer ( text , PM_SEPARATOR ) ; while $F14498 ( tok ) { $F49878 ( flag , tok ) if $F1238 ( flag , PM_TYPE_MATCH ) { typeMatching = _BOOL ; } else if $F1238 ( flag , PM_EXACT_MATCH ) { exactMatching = _BOOL ; } else if $F1238 ( flag , PM_SIMILAR_MATCH ) { similarMatching = _BOOL ; } else if $F1238 ( flag , PM_ICASE_MATCH ) { caseInsensitive = _BOOL ; } else if $F1238 ( flag , PM_JOKER_MATCH ) { jokerMatching = _BOOL ; } else $F5153 text = text . substring ( $F1285 ( flag ) ) ; } if ( isAnyFlagSet ( ) ) $F3109 ( text ) } return text ; }
private TinyPlanetImage createFinalTinyPlanet $F72 { $F8934 ( mResultLock ) try { $F17551 ( mResultBitmap ) mResultBitmap = null ; $F17551 ( mSourceBitmap ) mSourceBitmap = null ; } $F796 ( mResultLock ) Bitmap sourceBitmap = createPaddedSourceImage ( mSourceImageUri , _BOOL ) ; $F2049 ( width , sourceBitmap ) $F2047 ( height , sourceBitmap ) int outputSize = width / NUM00 ; Bitmap resultBitmap = Bitmap . createBitmap ( outputSize , outputSize , Bitmap . Config . ARGB_8888 ) ; TinyPlanetNative . process ( sourceBitmap , width , height , resultBitmap , outputSize , mCurrentZoom , mCurrentAngle ) ; $F17551 ( sourceBitmap ) sourceBitmap = null ; $F1538 ( jpeg ) resultBitmap . compress ( CompressFormat . JPEG , NUM00 , jpeg ) ; return new TinyPlanetImage ( addExif ( jpeg . toByteArray ( ) ) , outputSize ) ; }
private static int NewFloatArray ( JNIEnvironment env , int length ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { $F25850 ( newArray , length ) $F79069 ( env , newArray ) } $F4287 ( traceJNI , unexpected , System , env ) }
static int createShader ( String resource , int type ) throws IOException $F25228 ( createShader , resource , type )
public Model validateNodeAgainstShape ( Dataset dataset , URI shapesGraphURI , Node focusNode , Node shape , Resource minSeverity , Predicate < SHConstraint > constraintFilter , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) { Model results = JenaUtil . createMemoryModel ( ) ; Model oldResults = getCurrentResultsModel ( ) ; setCurrentResultsModel ( results ) ; addResourceViolations ( dataset , shapesGraphURI , focusNode , shape , SHACLUtil . getAllConstraintProperties ( _BOOL ) , minSeverity , constraintFilter , results , labelFunction , monitor ) ; setCurrentResultsModel ( oldResults ) ; return results ; }
$F1 public VolatileImage createBackBuffer ( WComponentPeer peer ) { Component target = ( Component ) peer . getTarget ( ) ; return new SunVolatileImage ( target , target . getWidth ( ) , target . getHeight ( ) , Boolean . TRUE ) ; }
public void test_singleResourceLocking_highConcurrency100 $F72 throws Exception { $F2697 ( properties ) $F154944 ( properties , TestOptions ) $F154946 ( properties , TestOptions ) $F130263 ( properties , TestOptions ) $F130265 ( properties , TestOptions ) $F130267 ( properties , TestOptions ) $F130271 ( properties , TestOptions ) $F130273 ( properties , TestOptions ) doComparisonTest ( properties ) ; }
public void push ( final double value ) { $F39428 ( bits , Double , value ) if $F2862 ( bits ) $F39432 ( mv , Opcodes , value ) else $F31345 ( mv , value ) }
protected abstract void assignResourceRequests $F72 ;
public synchronized void add ( int position , AbstractOption option ) { AbstractOption $F31993 ( search , getByName , option ) ; if ( search != null ) $F10911 ( LOG ) else { List < AbstractOption > oldOptions = new ArrayList < AbstractOption > ( options ) ; options . add ( position , option ) ; option . setCollection ( this ) ; List < AbstractOption > newOptions = getOptions ( ) ; fireIndexedPropertyChange ( PROP_OPTIONS , position , oldOptions , newOptions ) ; } }
$F99425 ( os , writeInt , CACHE_MAGIC , writeString , key , etag , writeLong , serverDate , lastModified , ttl , softTtl , writeStringStringMap , responseHeaders , _BOOL , VolleyLog , e )
$F125330 ( visitingMethod )
protected ByteArrayOutputStream parseBytes ( ByteArrayOutputStream bos ) throws IOException { int ch ; for ( ch = read ( ) ; ch >= NUM00 && ch != NUM00 ; ch = read ( ) ) { int b1 = ch ; int b2 = read ( ) ; int b3 = read ( ) ; int b4 = read ( ) ; if ( b4 != NUM00 ) { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] < < NUM00 ) + ( base64Decode [ b4 ] ) ) ; $F34529 ( bos , chunk ) $F34529 ( bos , chunk ) bos . write ( chunk ) ; } else if ( b3 != NUM00 ) { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] < < NUM00 ) + ( base64Decode [ b3 ] ) ) ; $F34529 ( bos , chunk ) bos . write ( chunk ) ; } else { int chunk = ( ( base64Decode [ b1 ] < < NUM00 ) + ( base64Decode [ b2 ] ) ) ; bos . write ( chunk ) ; } } if ( ch == NUM00 ) peek = ch ; return bos ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public static void startUploadActivityForResult ( Activity activity , Account account , int requestCode ) { Intent action = new Intent ( activity , UploadFilesActivity . class ) ; action . putExtra ( EXTRA_ACCOUNT , ( account ) ) ; activity . startActivityForResult ( action , requestCode ) ; }
public void addGenericAttr ( GenericAttr g ) $F6659 ( generic , g )
public void stopTraceSession ( int traceSessionId ) throws SQLException { try ( FbService service = attachServiceManager ( ) ) { service . startServiceAction ( getTraceSPB ( service , isc_action_svc_trace_stop , traceSessionId ) ) ; queueService ( service ) ; } catch ( IOException ioe ) { throw new SQLException ( ioe ) ; } }
String readSubstring ( String source , int ofs ) { return readSubstring ( $F180345 ( source , ofs ) ) ; }
private synchronized boolean expungeStaleEntries $F72 { if ( this . size == NUM00 ) return _BOOL ; Object r ; boolean result = _BOOL ; while $F22655 ( r , queue ) { result = _BOOL ; SingleEntry e = ( SingleEntry ) r ; this . size -= e . cleanupPkTable ( this . table ) ; this . nonDatedEntryCount -= e . cleanupSemiUniqueTable ( this . nonDatedTable ) ; } return result ; }
public void removeListener ( AbstractSerialTransportListener listener ) $F275325 ( listener , listeners )
private String restoreNBTTags ( String str , $F5 nbttags ) { int nbtidx = NUM00 ; for ( String capture : nbttags ) { str = str . replace ( NUM00 + nbtidx ++ , capture ) ; } return str ; }
private void drawOffsets ( final Graphics g ) { if ( isEnabled ( ) ) $F158293 ( g , m_fontColorOffsets ) else { g . setColor ( m_disabledColor != m_bgColorOffset ? m_disabledColor : Color . WHITE ) ; } final int x = ( - m_firstColumn * m_charWidth ) + NUM00 ; $F3666 ( bytesToDraw , getMaximumVisibleBytes ) final String formatString = m_addressMode == AddressMode . BIT32 ? NUM00 : NUM00 ; for ( int i = NUM00 ; i < bytesToDraw ; i += m_bytesPerRow ) { final long address = m_baseAddress + ( m_firstRow * m_bytesPerRow ) + i ; final String offsetString = String . format ( formatString , address ) ; final int currentRow = i / m_bytesPerRow ; g . drawString ( offsetString , x , m_paddingTop + ( currentRow * m_rowHeight ) ) ; } }
$F1 public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeDouble ( knnDistance ) ; }
public void touch ( Date date ) { lastSeen = ( Date ) date . clone ( ) ; }
public void testPolyline $F72 throws Exception { EsriLayer layer = new EsriLayer ( NUM00 , SHAPE_TYPE_POLYLINE , NUM00 ) ; DbfTableModel model = layer . getModel ( ) ; $F383003 ( model ) $F382996 ( model ) model . setColumnName ( NUM00 , NUM00 ) ; model . setType ( NUM00 , ( byte ) DbfTableModel . TYPE_CHARACTER ) ; $F383003 ( model ) $F382996 ( model ) model . setColumnName ( NUM00 , NUM00 ) ; model . setType ( NUM00 , ( byte ) DbfTableModel . TYPE1ERIC ) ; addPolylineRecord1 ( layer ) ; addPolylineRecord2 ( layer ) ; addPolylineRecord3 ( layer ) ; EsriGraphicList list = layer . getEsriGraphicList ( ) ; ShpOutputStream pos = new ShpOutputStream ( new FileOutputStream $F580 ) ; $F26352 indexData = pos . writeGeometry ( list ) ; ShxOutputStream xos = new ShxOutputStream ( new FileOutputStream $F580 ) ; xos . writeIndex ( indexData , list . getType ( ) , list . getExtents ( ) ) ; DbfOutputStream dos = new DbfOutputStream ( new FileOutputStream $F580 ) ; dos . writeModel ( model ) ; }
public static int random ( int i , int j ) { return i + ( int ) ( Math . random ( ) * ( j - i ) ) ; }
public void remove ( String name ) $F106 ( featureMap , name )
private List < ColumnModel > findColumnsToAdd $F72 { List < ColumnModel > columnsToAdd = new ArrayList < ColumnModel > $F72 ; for ( ColumnModel columnModel : mTableModel . getColumnModels ( ) ) { String columnName = columnModel . getColumnName ( ) ; if ( ! mTableModelDB . containsColumn ( columnName ) ) $F207 ( columnsToAdd , columnModel ) } return columnsToAdd ; }
$F1 public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { Uri uri = FmRadioStation . Station . CONTENT_URI ; String select = FmRadioStation . Station . COLUMN_STATION_TYPE + NUM00 ; String order = FmRadioStation . Station . COLUMN_STATION_TYPE + NUM00 + FmRadioStation . Station . COLUMN_STATION_FREQ ; CursorLoader cursorLoader = new CursorLoader ( this , uri , FmRadioStation . COLUMNS , select , new String [ ] { String . valueOf ( FmRadioStation . STATION_TYPE_FAVORITE ) , String . valueOf ( FmRadioStation . STATION_TYPE_SEARCHED ) } , order ) ; return cursorLoader ; }
protected $F529 convertNamedListToMap ( NamedList $F1011 args ) { $F529 $F161023 ( argsMap ) ; if ( args != null ) { for ( Map . Entry $F6251 entry : args ) { $F53096 ( argsMap , entry ) } } return argsMap ; }
$F1 public boolean equals ( final Object other ) { if ( this == other ) { return _BOOL ; } else if ( other == null ) { return _BOOL ; } else if ( other instanceof ExpressionMatcher ) { final ExpressionMatcher o = ( ExpressionMatcher ) other ; if ( typeMatching != o . typeMatching ) { return _BOOL ; } else if ( exactMatching != o . exactMatching ) { return _BOOL ; } else if ( similarMatching != o . similarMatching ) { return _BOOL ; } else if ( caseInsensitive != o . caseInsensitive ) { return _BOOL ; } else { return ( jokerMatching == o . jokerMatching ) ; } } else { return _BOOL ; } }
public boolean hasCapabilities $F24643 ( capabilities ) { $F5442 ( arr , capabilities ) capabilities . toArray ( arr ) ; return hasCapabilities ( arr ) ; }
private static double euclideanNorm ( double vector [ ] ) { int n = vector . length ; $F96078 ( n ) if ( n == NUM00 ) { return Math . abs ( vector [ NUM00 ] ) ; } double scale = NUM00 ; double sum = NUM00 ; for ( $F119 ( i , n ) ) { if ( vector [ i ] != NUM00 ) { double abs = Math . abs ( vector [ i ] ) ; if ( scale < abs ) { double t = scale / abs ; sum = NUM00 + sum * ( t * t ) ; scale = abs ; } else { double t = abs / scale ; sum += t * t ; } } } return scale * Math . sqrt ( sum ) ; }
public static void assignBucketsToPartitions ( Region $F5162 region ) { PartitionedRegion pr = isPartitionedCheck ( region ) ; RecoveryLock lock = null ; try { lock = pr . getRecoveryLock ( ) ; $F790 ( lock ) for ( int i = NUM00 ; i < getNumberOfBuckets ( pr ) ; i ++ ) { pr . createBucket ( i , NUM00 , null ) ; } } finally { if ( lock != null ) $F795 ( lock ) } }
public synchronized void addListener ( Listener l ) $F207 ( listeners , l )
public boolean endsWith ( final String str ) { $F1933 ( str , _BOOL ) $F22998 ( len , str ) $F6482 ( len , _BOOL ) $F8670 ( len , size , _BOOL ) int pos = size - len ; for ( $F116983 ( i , len , pos ) ) { if ( buffer [ pos ] != str . charAt ( i ) ) { return _BOOL ; } } return _BOOL ; }
public boolean find ( int start ) { if ( start < NUM00 || start > input . length ( ) ) { throw new IndexOutOfBoundsException ( NUM00 + start + NUM00 + input . length ( ) ) ; } synchronized ( this ) { matchFound = findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
public void applyPattern ( String pattern ) { this . pattern = pattern ; $F263153 ( patternTokens ) }
public int numberOfReplies ( final Resource comment ) { final Iterator $F25924 children = comment . listChildren ( ) ; int size = NUM00 ; while $F2921 ( children ) { $F24630 ( children ) size ++ ; } return size ; }
public static $F4203 String toString ( TreeDef $F4203 treeDef , T root , Function < $F11631 , String > toString , String indent ) { $F83 ( builder ) builder . append ( toString . apply ( root ) ) ; $F84 ( builder ) toStringHelper ( treeDef , root , toString , indent , builder , indent ) ; $F92 ( builder ) }
public void cleanUpRemoteSessions $F72 { synchronized ( remoteSessionSet ) { for ( $F2774 ( iter , remoteSessionSet ) ) { SessionID sessionID = ( SessionID ) iter . next ( ) ; String hostServer = null ; try { hostServer = getCurrentHostServer ( sessionID ) ; } $F15720 if ( ! serverConfig . isLocalServer ( hostServer ) ) $F38599 ( iter ) } } }
public boolean columnExistsCaseSensitive ( DatabaseMetaData dbMetaData , String tableName , String columnName ) throws SQLException { ResultSet rsTables = dbMetaData . getColumns ( null , null , tableName , columnName ) ; try $F43105 ( rsTables ) $F18632 ( closeJDBCResultSet , rsTables ) }
public void actionPerformed ( ActionEvent e ) { $F185684 ( c , textArea ) if ( c . getDot ( ) != c . getMark ( ) ) $F932 RSyntaxDocument doc = ( RSyntaxDocument ) textArea . getDocument ( ) ; doc . readLock ( ) ; try { removeHighlights ( ) ; int line = textArea . getCaretLineNumber ( ) ; $F48983 ( tokenList , textArea , line ) int dot = c . getDot ( ) ; Token t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; if ( t == null || ! isValidType ( t ) || isNonWordChar ( t ) ) { dot -- ; try { if ( dot >= textArea . getLineStartOffset ( line ) ) { t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; } } $F203264 ( ble ) } if ( t != null && isValidType ( t ) && ! isNonWordChar ( t ) ) { RSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; String lexeme = t . getLexeme ( ) ; int type = t . type ; for ( int i = NUM00 ; i < textArea . getLineCount ( ) ; i ++ ) { $F48983 ( temp , textArea , i ) while ( temp != null && temp . isPaintable ( ) ) { if ( temp . is ( type , lexeme ) ) { try { int end = temp . offset + temp . textCount ; Object tag = h . addMarkedOccurrenceHighlight ( temp . offset , end , p ) ; tags . add ( tag ) ; } $F203264 ( ble ) } temp = temp . getNextToken ( ) ; } } } } finally { doc . readUnlock ( ) ; } textArea . fireMarkedOccurrencesChanged ( ) ; }
public int read $F72 throws IOException { if $F116620 ( buf ) $F7629 return buf . get ( ) & NUM00 ; }
public void charactersRaw $F62353 ( start , length ) throws $F2253 { if ( isOutsideDocElem ( ) && XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) $F665 String s = new String ( ch , start , length ) ; append ( m_doc . createProcessingInstruction ( NUM00 , NUM00 ) ) ; append ( m_doc . createTextNode ( s ) ) ; }
private void handleRelease $F72 { float speed = Math . max ( dragHelper . getDragSpeed ( ) , animationSpeed ) ; if ( getTopMargin ( ) > initialMargin || ( dragHelper . getDragSpeed ( ) > animationSpeed && dragHelper . getDistance ( ) > NUM00 ) || ( getDeviceType ( getContext ( ) ) == DeviceType . TABLET && isMaximized ( ) && getTopMargin ( ) > minMargin ) ) { animateHideView ( parentHeight - getTopMargin ( ) , speed , new DecelerateInterpolator $F72 , _BOOL ) ; } else { animateShowView ( - ( getTopMargin ( ) - minMargin ) , speed , new DecelerateInterpolator $F72 ) ; } }
private String normalizeTypeValue ( String type ) { if $F1238 ( INSERT , type ) return INSERT ; if $F1238 ( REMOVE , type ) return REMOVE ; $F1274 }
$F1 public LogSeqNum writeToLog $F72 { List < Constant > rec = buildRecord ( ) ; return logMgr . append ( rec . toArray ( new Constant $F2313 ( rec ) ) ) ; }
public static double gaussian $F72 { double r , x , y ; do { x = uniform ( $F72322 ) ; y = uniform ( $F72322 ) ; r = x * x + y * y ; } while ( r >= NUM00 || r == NUM00 ) ; return x * Math . sqrt ( $F130364 ( Math , r ) / r ) ; }
public void doneWithParameters $F72 { if ( info . parameterCount == VAR_ARGS ) { $F2199 ( len , varArgs ) checkParameterCount ( len ) ; args = new Expression [ len ] ; varArgs . toArray ( args ) ; varArgs = null ; } else { int len = args . length ; if ( len > NUM00 && args [ len - NUM00 ] == null ) { throw DbException . get ( ErrorCode . INVALID_PARAMETER_COUNT_2 , info . name , NUM00 + len ) ; } } }
public void removeAllX509Certificates $F72 $F9096 ( x509Certificates )
public void updateCurrentState ( String whatHappened ) { UndoEvent undoEvent = createUndoEventForCurrentState ( whatHappened ) ; if ( undoEvent != null && undoStack != null ) { undoStack . setTheWayThingsAre ( undoEvent ) ; } }
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
protected void extendElement ( Element e ) $F845
$F238095 ( lock , this , a , count , k , p , first )
public DTMAxisIterator cloneIterator $F72 { _isRestartable = _BOOL ; try { final PrecedingIterator clone = ( PrecedingIterator ) super . clone ( ) ; $F49896 ( stackCopy , _stack ) $F7057 ( System , _stack , stackCopy ) clone . _stack = stackCopy ; return clone ; } catch ( CloneNotSupportedException e ) { throw new DTMException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_ITERATOR_CLONE_NOT_SUPPORTED , null ) ) ; } }
private String readResponseFromServer ( HttpURLConnection urlConnection ) throws RequestFailureException { try { InputStreamReader reader = new InputStreamReader ( urlConnection . getInputStream ( ) ) ; $F20481 ( in , reader ) try { $F83 ( response ) for ( String line = in . readLine ( ) ; line != null ; line = in . readLine ( ) ) $F288 ( response , line ) checkServerResponseCode ( urlConnection ) ; $F92 ( response ) } $F3229 ( in ) } catch ( IOException e ) $F49482 ( e ) }
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) $F18045 ( name ) $F18045 ( nodeType ) }
public int contains ( ValueStoreBase vsb ) { final Vector values = vsb . fValues ; $F10162 ( size1 , values ) if ( fFieldCount <= NUM00 ) { for ( $F1316 ( i , size1 ) ) { short val = vsb . getValueTypeAt ( i ) ; if ( ! valueTypeContains ( val ) || ! fValues . contains ( values . elementAt ( i ) ) ) { return i ; } else if ( val == XSConstants . LIST_DT || val == XSConstants . LISTOFUNION_DT ) { ShortList list1 = vsb . getItemValueTypeAt ( i ) ; $F38676 ( itemValueTypeContains , list1 , i ) } } } else { $F10162 ( size2 , fValues ) OUTER : for ( int i = NUM00 ; i < size1 ; i += fFieldCount ) { INNER : for ( int j = NUM00 ; j < size2 ; j += fFieldCount ) { for ( $F1316 ( k , fFieldCount ) ) { final Object value1 = values . elementAt ( i + k ) ; final Object value2 = fValues . elementAt ( j + k ) ; final short valueType1 = vsb . getValueTypeAt ( i + k ) ; final short valueType2 = getValueTypeAt ( j + k ) ; if ( value1 != value2 && ( valueType1 != valueType2 || value1 == null || ! value1 . equals ( value2 ) ) ) { continue INNER ; } else if ( valueType1 == XSConstants . LIST_DT || valueType1 == XSConstants . LISTOFUNION_DT ) { ShortList list1 = vsb . getItemValueTypeAt ( i + k ) ; ShortList list2 = getItemValueTypeAt ( j + k ) ; if ( list1 == null || list2 == null || ! list1 . equals ( list2 ) ) { continue INNER ; } } } continue OUTER ; } return i ; } } $F150 }
public boolean isSupportedOption ( String name ) { boolean isSupported = _BOOL ; for ( Iterator i = mandatoryOptions . iterator ( ) ; i . hasNext ( ) && ! isSupported ; ) { $F2778 ( opt , i ) isSupported = opt . equals ( name ) ; } for ( Iterator i = optionalOptions . iterator ( ) ; i . hasNext ( ) && ! isSupported ; ) { $F2778 ( opt , i ) isSupported = opt . equals ( name ) ; } return isSupported ; }
private boolean areAllNodeEnded $F72 { if ( protocol != null && protocol . hasProtocol ( ) ) { final Collection < ProtocolNode > protocolNodes = protocolNodeParticipantMap . values ( ) ; $F4975 ( protocolNodes , _BOOL ) for ( final ProtocolNode node : protocolNodes ) { if ( ! ( node != null && node . isTerminal ( ) ) ) { return _BOOL ; } } return _BOOL ; } final Collection < FIPAMessage > finalMsgs = noProtocolNodeParticipantMap . values ( ) ; $F4975 ( finalMsgs , _BOOL ) for ( final FIPAMessage finalMsg : finalMsgs ) { if ( finalMsg . getPerformative ( ) != FIPAConstants . Performatives . END_CONVERSATION ) { return _BOOL ; } } return _BOOL ; }
$F77358 ( retval , optionTag )
public void addLiteralResultAttribute ( AVT avt ) { if ( null == m_avts ) $F13241 ( m_avts ) m_avts . add ( avt ) ; }
protected void moveSelectionToFirstPosition $F72 { if ( selectionTable . getSelectionCount ( ) == NUM00 ) $F932 int index = NUM00 ; for ( final TableItem tableItem : selectionTable . getSelection ( ) ) { final DLItem item = ( DLItem ) tableItem . getData ( ) ; selection . remove ( item ) ; selection . add ( index ++ , item ) ; } redrawTables ( ) ; selectionTable . select ( NUM00 , index - NUM00 ) ; selectionTable . forceFocus ( ) ; }
private void itemsArrayToCombinedBuffer $F10810 ( itemsArray ) { final int extra = NUM00 ; minValue_ = itemsArray [ NUM00 ] ; maxValue_ = itemsArray [ NUM00 ] ; $F21535 ( System , itemsArray , extra , combinedBuffer_ , baseBufferCount_ ) long bits = bitPattern_ ; if ( bits > NUM00 ) { int index = extra + baseBufferCount_ ; for ( int level = NUM00 ; bits != NUM00 ; level ++ , bits >>>= NUM00 ) { if ( ( bits & NUM00 ) > NUM00 ) { System . arraycopy ( itemsArray , index , combinedBuffer_ , ( NUM00 + level ) * k_ , k_ ) ; index += k_ ; } } } }
public SQLQuery ( $F20474 type , String sqlExpression , QueryResultType queryResultType , Object ... parameters ) { this ( sqlExpression , type . getName ( ) , null , queryResultType , parameters ) ; }
public void bob ( MowzieModelRenderer box , float speed , float degree , boolean bounce , float f , float f1 ) { float bob = ( float ) ( Math . sin ( f * speed ) * f1 * degree - f1 * degree ) ; if ( bounce ) bob = ( float ) - Math . abs ( ( Math . sin ( f * speed ) * f1 * degree ) ) ; box . rotationPointY += bob ; }
private static void rejectUnsupportedOptions ( Properties p ) throws SQLFeatureNotSupportedException { if ( p . containsKey ( DataSourceFactory . JDBC_ROLE_NAME ) ) { throw new SQLFeatureNotSupportedException ( NUM00 + DataSourceFactory . JDBC_ROLE_NAME + NUM00 ) ; } if ( p . containsKey ( DataSourceFactory . JDBC_DATASOURCE_NAME ) ) { throw new SQLFeatureNotSupportedException ( NUM00 + DataSourceFactory . JDBC_DATASOURCE_NAME + NUM00 ) ; } }
public IOUtils $F72 $F5795 ( super )
$F184647 ( v , buf , name , av , i , b , readAnnotationValues , _BOOL , readConst , readUnsignedShort , readInt , items , Boolean , readUTF8 , Type , size , this , bv , zv , sv , cv , iv , lv , readLong , fv , Float , dv , Double )
private void decrementWorkerCount $F72 { do $F845 while ( ! $F47063 ( compareAndDecrementWorkerCount , ctl ) ) ; }
public static float buildFloat ( int mant , int exp ) { if ( exp < - NUM00 || mant == NUM00 ) $F1083 if ( exp >= NUM00 ) { return ( mant > NUM00 ) ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ; } $F6482 ( exp , mant ) if ( mant >= $F152872 ) { mant ++ ; } return ( float ) ( ( exp > NUM00 ) ? mant * pow10 [ exp ] : mant / pow10 [ - exp ] ) ; }
public void clearValues $F72 $F13478 ( mDataSets , notifyDataChanged )
public boolean hasModeSupport $F72 { return isAvailable ( ) && mCapabilities . intersects ( mAllModes ) ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList genderList ; Node genderNode ; EntityReference entRef ; Element entElement ; CharacterData entElementText ; int nodeType ; $F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entRef = ( EntityReference ) genderNode . getFirstChild ( ) ; assertNotNull ( NUM00 , entRef ) ; nodeType = ( int ) entRef . getNodeType ( ) ; if ( equals ( NUM00 , nodeType ) ) { entRef = doc . createEntityReference ( NUM00 ) ; assertNotNull ( NUM00 , entRef ) ; } entElement = ( Element ) entRef . getFirstChild ( ) ; assertNotNull ( NUM00 , entElement ) ; $F241 ( entElementText , entElement ) assertNotNull ( NUM00 , entElementText ) ; { boolean success = _BOOL ; try { entElementText . setNodeValue ( NUM00 ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; } assertTrue ( NUM00 , success ) ; } }
public void testConstrStringWithExponentWithPoint2 $F72 $F114473 ( a , aScale , bA , aNumber , assertEquals )
public static void updateItemInDatabase $F137071 ( context , item ) { $F248400 ( values ) item . onAddToDatabase ( context , values ) ; updateItemInDatabaseHelper ( context , values , item , NUM00 ) ; }
$F1 public String graph $F72 throws Exception { $F280 ( text ) $F84 ( text ) m_cobwebTree . graphTree ( text ) ; $F84 ( text ) $F92 ( text ) }
$F1 public $F987 listOptions $F72 { $F46582 ( result , enumToVector , super ) $F46588 ( result , defaultNumAttributes ) $F1000 ( result ) $F1000 ( result ) $F1000 ( result ) $F1007 ( result ) }
public synchronized $F152376 remove ( long timeoutMillis ) throws InterruptedException { $F20450 ( timeoutMillis ) if ( head != null ) $F2905 ( poll ) if ( timeoutMillis == NUM00 || ( timeoutMillis > Long . MAX_VALUE / NANOS_PER_MILLI ) ) { do $F73598 ( wait ) while ( head == null ) ; return poll ( ) ; } long nanosToWait = timeoutMillis * NANOS_PER_MILLI ; int timeoutNanos = NUM00 ; $F25238 ( startTime , System ) while ( _BOOL ) { wait ( timeoutMillis , timeoutNanos ) ; $F111836 ( head ) long nanosElapsed = System . nanoTime ( ) - startTime ; long nanosRemaining = nanosToWait - nanosElapsed ; $F65649 ( nanosRemaining ) timeoutMillis = nanosRemaining / NANOS_PER_MILLI ; $F210313 ( timeoutNanos , nanosRemaining , timeoutMillis , NANOS_PER_MILLI ) } return poll ( ) ; }
public PathImpl lookupImpl ( String userPath , $F2100 ( newAttributes ) , boolean isAllowRoot ) { if ( userPath == null ) { return lookupImpl ( getPath ( ) , newAttributes , isAllowRoot ) ; } if ( ! isAllowRoot ) { return schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; } String scheme = scanScheme ( userPath ) ; if ( scheme == null ) { return schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; } PathImpl path ; SchemeMap schemeMap = _schemeMap ; if ( isWindows ( ) ) { $F115 ( length , scheme ) char ch ; if ( length == NUM00 && ( NUM00 <= $F64777 ( ch , scheme ) && ch <= NUM00 || NUM00 <= ch && ch <= NUM00 ) ) { userPath = Character . toLowerCase ( ch ) + userPath . substring ( NUM00 ) ; if ( _isTestWindows ) return schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; $F178035 ( path , schemeMap ) if ( path != null ) return path . schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; else return schemeWalk ( userPath , newAttributes , NUM00 + userPath , NUM00 ) ; } } path = schemeMap . get ( scheme ) ; if ( path == null ) { return schemeWalk ( userPath , newAttributes , userPath , NUM00 ) ; } else { return path . schemeWalk ( userPath , newAttributes , userPath , $F1285 ( scheme ) ) ; } }
public void addColor ( int color ) { if ( mColors == null ) $F117818 ( mColors ) mColors . add ( color ) ; }
static Integer readRuleID ( final SubstringReader reader ) throws DecodeException { int length = NUM00 ; reader . skipWhitespaces ( ) ; $F115573 ( reader ) try { while ( reader . read ( ) != NUM00 ) { length ++ ; } if ( length == NUM00 ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_RULE_ID_NO_VALUE1 . get ( reader . pos ( ) - NUM00 ) ) ; } $F2268 ( reader ) final String ruleID = reader . read ( length ) ; try $F62107 ( Integer , ruleID ) catch ( final NumberFormatException e ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_RULE_ID_INVALID1 . get ( ruleID ) ) ; } } catch ( final StringIndexOutOfBoundsException e ) { throw DecodeException . error ( ERR_ATTR_SYNTAX_TRUNCATED_VALUE1 . get ( ) ) ; } }
public void removeIndex ( IIndex index ) $F275325 ( index , indices )
private AttributeActionSet processAttributeSection ( ModeUsage modeUsage , String ns , IntSet indexSet , Attributes attributes ) throws SAXException { Mode mode = modeUsage . getMode ( currentSection . context ) ; AttributeActionSet actions = mode . getAttributeActions ( ns ) ; if ( actions . getReject ( ) && ! attributeNamespaceRejected ) { attributeNamespaceRejected = _BOOL ; if ( eh != null ) eh . error ( new SAXParseException ( localizer . message ( NUM00 , ns ) , locator ) ) ; } Schema [ ] schemas = actions . getSchemas ( ) ; for ( $F1139 ( j , schemas ) ) { if $F152313 ( attributeSchemas , schemas , j ) $F598 $F24616 ( attributeSchemas , schemas , j ) if ( filteredAttributes == null ) filteredAttributes = filterAttributes ( indexSet , attributes ) ; validateAttributes ( schemas [ j ] , filteredAttributes ) ; } return actions ; }
public void initialize ( Context context , HapticFeedbackController hapticFeedbackController , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { $F17932 ( mTimeInitialized , Log , TAG ) mHapticFeedbackController = hapticFeedbackController ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) ? _BOOL : mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; $F5217 ( mCircleView ) if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < NUM00 ? AM : PM ) ; $F5217 ( mAmPmCirclesView ) } $F17934 ( res , context ) $F134655 ( hours ) $F134655 ( hours_24 ) $F134655 ( minutes ) $F808 ( hoursTexts ) $F808 ( innerHoursTexts ) $F808 ( minutesTexts ) for ( $F6268 ( i ) ) { hoursTexts [ i ] = is24HourMode ? $F134656 ( String , hours_24 , i ) : $F134656 ( String , hours , i ) ; innerHoursTexts [ i ] = $F134656 ( String , hours , i ) ; minutesTexts [ i ] = $F134656 ( String , minutes , i ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; $F5217 ( mHourRadialTextsView ) mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; $F5217 ( mMinuteRadialTextsView ) setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % NUM00 ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
$F1 public double conf ( double totalWeight , double delta ) { return inverseNormal ( NUM00 - delta / NUM00 ) / ( NUM00 * Math . sqrt ( totalWeight ) ) ; }
$F1 public final int readUnsignedByte $F72 throws IOException { return dis . readUnsignedByte ( ) ; }
public synchronized static void ensureSecurityManager ( $F1431 $F806 args ) { SecurityPolicyLoader . load ( SystemBoot . class , NUM00 ) ; System . setSecurityManager ( new RMISecurityManager $F72 ) ; }
$F58470 ( super )
public String ridgeTipText $F72 $F2455
public void updateEnableStateSwingItems $F72 { if ( SwingUtilities . isEventDispatchThread ( ) ) super . updateEnableState ( ) ; }
public void reset $F72 { $F7057 ( System , IV , cbcV ) $F26770 ( Arrays , cbcNextV ) $F2268 ( cipher ) }
protected final boolean _loadToHaveAtLeast ( int minAvailable ) throws IOException { $F1933 ( _inputStream , _BOOL ) int amount = _inputEnd - _inputPtr ; if ( amount > NUM00 && _inputPtr > NUM00 ) { _currInputProcessed += _inputPtr ; $F51886 ( System , _inputBuffer , _inputPtr , amount ) _inputEnd = amount ; } else { _inputEnd = NUM00 ; } _inputPtr = NUM00 ; while ( _inputEnd < minAvailable ) { $F7994 ( count , _inputStream , _inputBuffer , _inputEnd ) if ( count < NUM00 ) { _closeInput ( ) ; if ( count == NUM00 ) $F5244 ( amount ) return _BOOL ; } _inputEnd += count ; } return _BOOL ; }
public DataTypeParser register ( int jdbcType , String grammar ) { $F10578 ( Objects , grammar ) DataTypePattern pattern = parser . parse ( jdbcType , grammar ) ; pattern . forEachFirstToken ( null ) ; return this ; }
public void close $F72 throws GenericDataSourceException { if ( _manualTX ) { $F37492 ( Debug , _manualTX , module ) commit ( ) ; } _sql = null ; if ( _rs != null ) { try { $F59 ( _rs ) $F37492 ( Debug , _manualTX , module ) } catch ( SQLException sqle ) { $F102466 ( Debug , sqle , module ) } _rs = null ; } if ( _ps != null ) { try { $F59 ( _ps ) $F37492 ( Debug , _manualTX , module ) } catch ( SQLException sqle ) { $F102466 ( Debug , sqle , module ) } _ps = null ; } if ( ( _connection != null ) && _bDeleteConnection ) { try { $F59 ( _connection ) $F37492 ( Debug , _manualTX , module ) } catch ( SQLException sqle ) { $F102466 ( Debug , sqle , module ) } _connection = null ; } }
private DefaultMutableTreeNode copy ( TreeNode node ) { return new DefaultMutableTreeNode ( node ) ; }
public static void agentmain ( String args , Instrumentation inst ) throws Exception { $F973 ( logger ) checkTransformerState ( ) ; inst . addTransformer ( transformer , _BOOL ) ; instrumentation = inst ; }
public $F96 data $F72 { $F1538 ( bos ) try { toData ( bos ) ; } $F12153 ( e ) $F11316 ( bos ) }
$F28183 public static $F4203 ReactiveSeq $F4203 of ( final T ... elements ) { final ReversingArraySpliterator $F4203 array = new ReversingArraySpliterator $F4203 ( elements , _BOOL , NUM00 ) ; return StreamUtils . reactiveSeq ( StreamSupport . stream ( array , _BOOL ) , Optional . ofNullable ( array ) ) ; }
private void decodeLtp ( LongTermPrediction ltp , int maxSfb ) { ltp . lag = br . read ( NUM00 ) ; ltp . coef = ltp_coef [ br . read ( NUM00 ) ] ; for ( int sfb = NUM00 ; sfb < Math . min ( maxSfb , MAX_LTP_LONG_SFB ) ; sfb ++ ) { ltp . used [ sfb ] = br . readBool ( ) ; } }
public static $F4203 $F5675 instantiateAll ( $F806 classes , ClassLoader classLoader ) { $F237846 ( clazzes ) for ( String clazz : classes ) { if ( StringUtils . hasLength ( clazz ) ) { try { clazzes . add ( ClassUtils . $F4203 instantiate ( clazz , classLoader ) ) ; } catch ( Exception e ) { throw new CassandraMigrationException ( NUM00 + clazz , e ) ; } } } return clazzes ; }
static void clearInstanceCache $F72 { $F54044 ( INSTANCE_CACHE ) }
public static < E extends Enum $F11685 & BitmapableEnum > $F62484 toEnumSet ( $F48880 type , int bitmap ) { $F1149 ( type ) $F62484 s = EnumSet . noneOf ( type ) ; int allSetBitmap = NUM00 ; for ( E element : type . getEnumConstants ( ) ) { if ( Integer . bitCount ( element . getValue ( ) ) != NUM00 ) { String msg = String . format ( $F38 , element . toString ( ) , element . getValue ( ) , type . getName ( ) ) ; $F29415 ( msg ) } allSetBitmap |= element . getValue ( ) ; if ( ( bitmap & element . getValue ( ) ) != NUM00 ) s . add ( element ) ; } if ( ( ( ~ allSetBitmap ) & bitmap ) != NUM00 ) { String msg = String . format ( NUM00 + NUM00 , bitmap , type . getName ( ) ) ; $F29415 ( msg ) } return s ; }
public UndirectedGraphNode cloneGraphB ( UndirectedGraphNode node ) { Map < Integer , UndirectedGraphNode > $F8690 ( map ) ; return dfs ( node , map ) ; }
public synchronized void notifySessionBorrowed $F72 { if $F8415 ( LOGGER ) LOGGER . logTrace ( this + NUM00 ) ; currentContext = new TransactionContext ( resource , xaResource ) ; allContexts . add ( currentContext ) ; closed = _BOOL ; }
$F1 public synchronized void close $F72 throws SQLException { try { debugCodeCall ( NUM00 ) ; $F2329 ( session ) CloseWatcher . unregister ( watcher ) ; $F65148 ( session ) if ( executingStatement != null ) { try $F65149 ( executingStatement ) $F1214 } synchronized ( session ) { try { if $F81110 ( session ) { try { if ( session . hasPendingTransaction ( ) ) { if ( ! session . isReconnectNeeded ( _BOOL ) ) { try $F5795 ( rollbackInternal ) catch ( DbException e ) { if ( e . getErrorCode ( ) != ErrorCode . CONNECTION_BROKEN_1 ) { throw e ; } } } session . afterWriting ( ) ; } closePreparedCommands ( ) ; } $F3229 ( session ) } } $F14110 ( session ) } } catch ( Exception e ) $F34850 ( logAndConvert , e ) }
public void testPlusMathContextNegative $F72 { String a = NUM00 ; int aScale = NUM00 ; int precision = NUM00 ; RoundingMode rm = RoundingMode . CEILING ; $F9512 ( mc , precision , rm ) String c = NUM00 ; int cScale = NUM00 ; $F1918 ( aNumber , a , aScale ) BigDecimal res = aNumber . plus ( mc ) ; $F1925 ( assertEquals , c , res ) $F1928 ( assertEquals , cScale , res ) }
public static WKTGeometry createEmpty ( WKTType wktType ) { WKTGeometry wktGeometry = new WKTGeometry $F72 ; wktGeometry . setGeometryType ( wktType ) ; return wktGeometry ; }
public PeerLookupTask createPeerLookup $F97 ( info_hash ) { if $F931 ( isRunning ) $F1337 Key id = new Key ( info_hash ) ; RPCServer srv = serverManager . getRandomActiveServer ( _BOOL ) ; $F1275 ( srv ) PeerLookupTask lookupTask = new PeerLookupTask ( srv , node , id ) ; return lookupTask ; }
public void addChild ( Node ... nodes ) { for ( Node node : nodes ) { node . detachFromParent ( ) ; node . parentNode = this ; initChildNodes ( node ) ; childNodes . add ( node ) ; } reindexChildrenOnAdd ( nodes . length ) ; }
public static void writeStringASCII ( ByteBuf stream , String str ) throws UnsupportedEncodingException { final $F96 bytes = str . getBytes ( NUM00 ) ; $F284247 ( stream , str ) stream . writeBytes ( bytes ) ; }
$F18534 ( newcount , currentBufferIndex , buffers , filledBufferSum , currentBuffer , newBufferSize , Math )
public void testWrite3 $F72 throws Exception { $F1191 ( data ) $F1196 ( tos ) CipherOutputStream cos = new CipherOutputStream $F1200 ( tos ) ; for ( $F1139 ( i , data ) ) { cos . write ( data , i , NUM00 ) ; } $F1206 ( cos ) $F1208 ( result , tos ) $F1211 ( Arrays , result , data , fail ) }
public void addListener ( UpdateManagerListener listener ) $F207 ( listeners , listener )
$F1 public void onDetach $F72 { synchronized ( mThread ) { mProgressBar = null ; mReady = _BOOL ; $F8071 ( mThread ) } super . onDetach ( ) ; }
public void outputSource $F120580 ( module , line , s ) { $F83 ( sb ) appendSource ( sb , module , line , s , _BOOL ) ; $F31458 ( out , sb ) }
SortedMap $F2538 properties $F72 ;
public static String suppressWhiteSpace ( String str ) { $F1749 ( len , str ) $F7542 ( sb , len ) char c ; char buffer = NUM00 ; for ( $F119 ( i , len ) ) { c = str . charAt ( i ) ; if $F37111 ( c ) buffer = NUM00 ; else if ( isWhiteSpace ( c ) ) { if ( buffer == NUM00 ) buffer = c ; } else { if ( buffer != NUM00 ) { sb . append ( buffer ) ; buffer = NUM00 ; } sb . append ( c ) ; } } if ( buffer != NUM00 ) sb . append ( buffer ) ; $F92 ( sb ) }
private $F9341 findPredecessor $F154318 ( key ) { $F61745 ( key ) for ( $F589 ) { $F154321 ( q , head ) $F154323 ( r , q ) for ( $F589 ) { if ( r != null ) { $F154325 ( n , r ) K k = n . key ; $F61755 ( n , q , r ) if $F9032 ( key , k ) $F61756 ( q , r ) } $F154319 d = q . down ; if ( d != null ) { q = d ; r = d . right ; } else return q . node ; } } }
$F47733 ( reader , writer , buffer , count )
protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { $F8438 ( logger ) logger . println ( NUM00 + session . getCipherSuite ( ) ) ; $F7957 ( logger , algName ) $F7957 ( logger , hashName ) $F7957 ( logger , hash_size ) $F7957 ( logger , block_size ) $F7957 ( logger , iv_size ) $F7957 ( logger , key_size ) } $F56524 ( clientRandom , session ) $F56524 ( serverRandom , session ) $F96 key_block = new byte [ NUM00 * hash_size + NUM00 * key_size + NUM00 * iv_size ] ; $F148496 ( seed , clientRandom , serverRandom ) $F7057 ( System , serverRandom , seed ) $F11244 ( System , clientRandom , seed , serverRandom ) PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; $F2175 ( client_mac_secret , hash_size ) $F2175 ( server_mac_secret , hash_size ) $F2175 ( client_key , key_size ) $F2175 ( server_key , key_size ) boolean is_client = ! session . isServer ; $F135 ( System , key_block , client_mac_secret , hash_size ) $F30985 ( System , key_block , hash_size , server_mac_secret ) System . arraycopy ( key_block , NUM00 * hash_size , client_key , NUM00 , key_size ) ; System . arraycopy ( key_block , NUM00 * hash_size + key_size , server_key , NUM00 , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) $F12204 ( logger ) $F5348 ( md5 , MessageDigest ) md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; $F14611 ( client_key , md5 ) md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; $F14611 ( server_key , md5 ) key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != NUM00 ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , NUM00 , iv_size ) ; } } else if ( block_size != NUM00 ) { clientIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , NUM00 * hash_size + NUM00 * key_size + iv_size , iv_size ) ; } if ( logger != null ) { $F7957 ( logger , is_exportabe ) $F8438 ( logger ) logger . print ( session . master_secret ) ; $F8438 ( logger ) logger . print ( clientRandom ) ; $F8438 ( logger ) logger . print ( serverRandom ) ; $F8438 ( logger ) logger . print ( client_mac_secret ) ; $F8438 ( logger ) logger . print ( server_mac_secret ) ; $F8438 ( logger ) logger . print ( client_key , NUM00 , key_size ) ; $F8438 ( logger ) logger . print ( server_key , NUM00 , key_size ) ; if ( clientIV != null ) { $F8438 ( logger ) logger . print ( clientIV . getIV ( ) ) ; $F8438 ( logger ) logger . print ( serverIV . getIV ( ) ) ; } else $F12204 ( logger ) } if ( algName == null ) { $F83645 ( encCipher ) ; $F83645 ( decCipher ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , NUM00 , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , NUM00 , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if $F3057 ( hashName ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { $F301 ( e ) throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException $F580 ) ; } }
public static void cleanDirectory ( File directory ) throws IOException $F189472 ( directory , message , files , exception , file , forceDelete , ioe )
public void notIdle $F72 { if $F15855 ( idleTimeoutMsec ) lastActionMsec . set ( System . currentTimeMillis ( ) ) ; }
public static $F96 gzip ( final String input ) { final ByteArrayOutputStream baos = new FastByteArrayOutputStream $F72 ; GZIPOutputStream gzos = null ; try $F42214 ( gzos , baos , input ) catch ( final IOException e ) { MainUtil . handleError ( e ) ; } finally { if ( gzos != null ) { try $F881 ( gzos ) catch ( final IOException ignore ) $F845 } } $F11316 ( baos ) }
protected AbstractCompositeServiceBuilder $F72 $F845
$F1 public void endDocument $F72 throws SAXException { if ( resource != null ) { resource . addAllResource ( jsVector ) ; for ( Object object : resource . getResourceSet ( ) ) { Resource r = ( Resource ) object ; if ( r . getResource ( ) != null ) { parser . setResource ( ( Resource ) r ) ; $F21687 ( parser ) jsSet . add ( parser . getResult ( ) ) ; } } } }
public void addMethodToDisplay ( MethodIdent methodIdent ) $F207 ( methods , methodIdent )
$F174198 ( result , Collections , super )
private void selectConnectingEdges ( List < DisplayNode > displayNodes ) { $F933 ( isAllowNodeEdgeSelection ) $F252345 components = getComponents ( ) ; for ( Component comp : components ) { if ( comp instanceof IDisplayEdge ) { IDisplayEdge graphEdge = ( IDisplayEdge ) comp ; DisplayNode node1 = graphEdge . getComp1 ( ) ; DisplayNode node2 = graphEdge . getComp2 ( ) ; if ( node1 instanceof GraphNodeError ) $F1448 if ( node2 instanceof GraphNodeError ) $F1448 if ( node2 != null ) { boolean selected = displayNodes . contains ( node1 ) && displayNodes . contains ( node2 ) ; graphEdge . setSelected ( selected ) ; } } } }
public static String classNameOnly ( String typeName ) { String dotted = descriptorToDot ( typeName ) ; $F24867 ( start , dotted ) if ( start < NUM00 ) { return dotted ; } else $F26088 ( dotted , start ) }
public HyperGraph search $F72 { $F657 ( startTime , System ) Future future = new Future ( chart ) ; $F9404 ( stacks ) $F722 ( stacks ) ComputeNodeResult result = new ComputeNodeResult ( this . featureFunctions , Hypothesis . BEGIN_RULE , null , - NUM00 , NUM00 , null , this . sentence ) ; Stack firstStack = new Stack ( sentence , config ) ; firstStack . add ( new Hypothesis ( result . getDPStates ( ) , future . Full ( ) ) ) ; stacks . add ( firstStack ) ; for ( int source_words = NUM00 ; source_words <= sentence . length ( ) ; ++ source_words ) { Stack targetStack = new Stack ( sentence , config ) ; stacks . add ( targetStack ) ; for ( int phrase_length = NUM00 ; phrase_length <= Math . min ( source_words - NUM00 , chart . MaxSourcePhraseLength ( ) ) ; phrase_length ++ ) { int from_stack = source_words - phrase_length ; Stack tailStack = stacks . get ( from_stack ) ; LOG . debug ( NUM00 , source_words , chart . MaxSourcePhraseLength ( ) , from_stack , phrase_length ) ; for ( Coverage coverage : tailStack . getCoverages ( ) ) { ArrayList < Hypothesis > hypotheses = tailStack . get ( coverage ) ; int begin = coverage . firstZero ( ) ; int last_end = Math . min ( coverage . firstZero ( ) + config . reordering_limit , chart . SentenceLength ( ) ) ; int last_begin = ( last_end > phrase_length ) ? ( last_end - phrase_length ) : NUM00 ; for ( begin = coverage . firstZero ( ) ; begin <= last_begin ; begin ++ ) { if ( ! coverage . compatible ( begin , begin + phrase_length ) || ! permissible ( coverage , begin , begin + phrase_length ) ) $F1448 if ( $F19341 ( begin , sentence ) && source_words != sentence . length ( ) ) $F598 PhraseNodes phrases = chart . getRange ( begin , begin + phrase_length ) ; $F45557 ( phrases ) LOG . debug ( NUM00 , phrases . size ( ) , begin , begin + phrase_length ) ; float future_delta = future . Change ( coverage , begin , begin + phrase_length ) ; Candidate cand = new Candidate ( featureFunctions , sentence , hypotheses , phrases , future_delta , new int $F227065 ) ; targetStack . addCandidate ( cand ) ; } } } targetStack . search ( ) ; } LOG . info ( NUM00 , sentence . id ( ) , $F32708 ( System , startTime ) ) ; return createGoalNode ( ) ; }
$F1 public synchronized String toString $F72 { $F3239 ( sbResult ) $F84 ( sbResult ) $F6407 ( sbResult , getCredentialsStringRepresentation , proxyCred ) $F84 ( sbResult ) $F6407 ( sbResult , getCredentialsStringRepresentation , credMap ) $F84 ( sbResult ) $F6407 ( sbResult , getCookiesStringRepresentation , cookies ) $F84 ( sbResult ) $F52199 ( strResult , sbResult ) return strResult ; }
public static List < LibraryLocation > gatherAllLibraries $F4374 ( dirPaths ) { List < LibraryLocation > libraries = new ArrayList < LibraryLocation > $F72 ; for ( $F1139 ( i , dirPaths ) ) { File $F170883 ( extDir , dirPaths , i ) ; if $F3444 ( extDir ) { $F806 names = extDir . list ( fgArchiveFilter ) ; if ( names != null ) { for ( $F1139 ( j , names ) ) { File $F170887 ( jar , extDir , names , j ) ; if $F7110 ( jar ) { try { IPath libPath = new Path ( jar . getCanonicalPath ( ) ) ; IPath sourcePath = Path . EMPTY ; IPath packageRoot = Path . EMPTY ; URL javadocLocation = null ; URL indexLocation = null ; LibraryLocation library = new LibraryLocation ( libPath , sourcePath , packageRoot , javadocLocation , indexLocation ) ; libraries . add ( library ) ; } catch ( IOException e ) { Launching . log ( e ) ; } } } } } } return libraries ; }
public void requestClose $F72 { $F8934 ( mLock ) try { $F7254 ( mIsShutdown ) mTargetState = TargetState . CLOSED ; update ( ) ; } $F796 ( mLock ) }
private void reserveOneDoc $F72 { if ( pendingNumDocs . incrementAndGet ( ) > IndexWriter . getActualMaxDocs ( ) ) { $F15856 ( pendingNumDocs ) throw new IllegalArgumentException ( NUM00 + IndexWriter . getActualMaxDocs ( ) ) ; } }
public static void streamContentToBrowser ( HttpServletResponse response , InputStream in , int length , String contentType , String fileName ) throws IOException { setResponseBrowserProxyNoCache ( response ) ; response . setContentLength ( length ) ; if ( contentType != null ) { response . setContentType ( contentType ) ; } if ( fileName != null ) { response . setHeader ( NUM00 , NUM00 + fileName + NUM00 ) ; } $F147972 ( out , response ) try { streamContent ( out , in , length ) ; } catch ( IOException e ) { $F59 ( out ) throw e ; } $F1206 ( out ) $F59 ( out ) }
$F1 public String toString $F72 $F4915 ( toString , _BOOL )
private static boolean isValidMethodName ( String methodName ) { return methodName . matches ( NUM00 ) ; }
public static $F96 toUTF8 ( String s ) { $F96 result = new byte [ utfLength ( s ) ] ; int result_index = NUM00 ; for ( $F133333 ( i , n , s ) ) { $F1280 ( c , s , i ) if ( ( ( ! WRITE_PSEUDO_UTF8 ) || ( c >= NUM00 ) ) && ( c <= NUM00 ) ) { $F11740 ( result , result_index , c ) } else if ( c > NUM00 ) { result [ result_index ++ ] = ( byte ) ( NUM00 | $F8043 ( c ) ) ; result [ result_index ++ ] = ( byte ) ( NUM00 | $F84702 ( c ) ) ; $F152865 ( result , result_index , c ) } else { result [ result_index ++ ] = ( byte ) ( NUM00 | $F8043 ( c ) ) ; $F152865 ( result , result_index , c ) } } return result ; }
public void pln ( Object o ) throws IOException { $F31458 ( p , o ) pln ( ) ; }
public void testReduceTask $F72 throws Exception { HadoopJob gridJob = getHadoopJob ( igfsScheme ( ) + PATH_INPUT , igfsScheme ( ) + PATH_OUTPUT ) ; runTaskWithInput ( gridJob , HadoopTaskType . REDUCE , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; runTaskWithInput ( gridJob , HadoopTaskType . REDUCE , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 ) ; assertEquals ( NUM00 + NUM00 , readAndSortFile ( PATH_OUTPUT + NUM00 + getOutputFileNamePrefix ( ) + NUM00 ) ) ; assertEquals ( NUM00 + NUM00 , readAndSortFile ( PATH_OUTPUT + NUM00 + getOutputFileNamePrefix ( ) + NUM00 ) ) ; }
public static double expm1 ( double value ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . expm1 ( value ) : Math . expm1 ( value ) ; } if $F7637 ( Math , value , EXP_LO_DISTANCE_TO_ZERO ) { $F43289 ( i , value , EXP_LO_INDEXING ) double delta = value - i * ( NUM00 / EXP_LO_INDEXING ) ; return expLoPosTab [ i + EXP_LO_TAB_MID_INDEX ] * ( expLoNegTab [ i + EXP_LO_TAB_MID_INDEX ] + delta * ( NUM00 + delta * ( NUM00 / NUM00 + delta * ( NUM00 / NUM00 + delta * ( NUM00 / NUM00 + delta * $F52906 ) ) ) ) ) ; } else { return FastMath . exp ( value ) - NUM00 ; } }
public void deleteConditional ( Conditional c ) { deregister ( c ) ; }
public static void parseModelToContentValues ( Object model , ContentValues contentValues ) { if $F3817 ( contentValues ) $F725 ( contentValues ) $F20850 ( clazz , model ) $F16273 ( fields , clazz ) $F20126 ( fieldType ) Object fieldVal = null ; for ( Field field : fields ) { try { if ( field . isAccessible ( ) == _BOOL ) field . setAccessible ( _BOOL ) ; Column column = field . getAnnotation ( Column . class ) ; $F86218 ( fieldType , field ) fieldVal = field . get ( model ) ; if ( column == null || fieldVal == null ) $F598 if ( fieldType . equals ( $F37010 ) ) { contentValues . put ( column . name ( ) , field . getInt ( model ) ) ; } else if ( $F58949 ( fieldType ) ) { contentValues . put ( column . name ( ) , ( Integer ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F41260 ) ) { contentValues . put ( column . name ( ) , field . getShort ( model ) ) ; } else if ( $F326853 ( fieldType ) ) { contentValues . put ( column . name ( ) , ( Short ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F41237 ) ) { contentValues . put ( column . name ( ) , field . getLong ( model ) ) ; } else if ( $F58953 ( fieldType ) ) { contentValues . put ( column . name ( ) , ( Long ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F41248 ) ) { contentValues . put ( column . name ( ) , field . getFloat ( model ) ) ; } else if ( $F58951 ( fieldType ) ) { contentValues . put ( column . name ( ) , ( Float ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F41242 ) ) { contentValues . put ( column . name ( ) , field . getDouble ( model ) ) ; } else if ( $F326890 ( fieldType ) ) { contentValues . put ( column . name ( ) , ( Double ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F41254 ) ) { if ( field . getBoolean ( model ) == _BOOL ) { contentValues . put ( column . name ( ) , NUM00 ) ; } else { contentValues . put ( column . name ( ) , NUM00 ) ; } } else if ( $F326900 ( fieldType ) ) { if ( $F120097 ( field , model ) == _BOOL ) { contentValues . put ( column . name ( ) , NUM00 ) ; } else { contentValues . put ( column . name ( ) , NUM00 ) ; } } else if $F253730 ( fieldType ) { contentValues . put ( column . name ( ) , $F120 ( field , model ) ) ; } else if ( fieldType . equals ( $F144055 ) ) { contentValues . put ( column . name ( ) , ( $F96 ) field . get ( model ) ) ; } else if ( fieldType . equals ( $F271637 ) ) { Date date = ( Date ) field . get ( model ) ; contentValues . put ( column . name ( ) , DateUtils . formatDate2Str ( date ) ) ; } } catch ( IllegalArgumentException e ) $F302 ( e ) $F153656 ( e ) } }
private void addBlockToWorklist ( SsaBasicBlock ssaBlock ) { if ( ! executableBlocks . get ( ssaBlock . getIndex ( ) ) ) { cfgWorklist . add ( ssaBlock ) ; executableBlocks . set ( ssaBlock . getIndex ( ) ) ; } else $F207 ( cfgPhiWorklist , ssaBlock ) }
private static boolean is32BitJvm $F72 { Integer bits = Integer . getInteger ( NUM00 ) ; return bits != null && bits == NUM00 ; }
public float angle $F72 { return ( float ) Math . atan2 ( y ( ) , x ( ) ) ; }
public static String formatNumber ( double value , int numberOfDigits , boolean groupingCharacters ) { if $F35707 ( Double , value ) $F2455 int numberDigits = numberOfDigits ; if ( numberDigits < NUM00 ) { numberDigits = numberOfFractionDigits ; } NUMBER_FORMAT . setMinimumFractionDigits ( numberDigits ) ; NUMBER_FORMAT . setMaximumFractionDigits ( numberDigits ) ; NUMBER_FORMAT . setGroupingUsed ( groupingCharacters ) ; $F5330 ( NUMBER_FORMAT , value ) }
private JPanel createLegendPanel ( JPanel basePanel ) { final JPanel panel ; if ( basePanel != null ) { $F7600 ( basePanel ) basePanel . setLayout ( $F78335 ) ; panel = basePanel ; } else { panel = new JPanel ( $F78335 ) ; } panel . setBorder ( BorderFactory . createTitledBorder ( I18n . tr ( NUM00 ) ) ) ; $F45960 ( gbc ) $F98084 ( gbc , GridBagConstraints ) $F184708 ( gbc ) JCheckBox checkBox = new JCheckBox $F72 ; checkBox . setSelected ( _BOOL ) ; panel . add ( createIconLabel ( checkBox ) , gbc ) ; MultiLineLabel label = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; $F45960 ( labelGbc ) $F98084 ( labelGbc , GridBagConstraints ) $F45961 ( labelGbc , GridBagConstraints ) labelGbc . gridwidth = GridBagConstraints . REMAINDER ; labelGbc . gridx = NUM00 ; labelGbc . weightx = NUM00 ; panel . add ( label , labelGbc ) ; checkBox . setSelected ( _BOOL ) ; gbc . gridy = NUM00 ; panel . add ( createIconLabel ( checkBox ) , gbc ) ; label = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; labelGbc . gridy = NUM00 ; panel . add ( label , labelGbc ) ; checkBox . setIcon ( partiallyIncludedIcon ) ; gbc . gridy = NUM00 ; $F184708 ( gbc ) panel . add ( createIconLabel ( checkBox ) , gbc ) ; label = new MultiLineLabel ( I18n . tr ( NUM00 ) , _BOOL ) ; labelGbc . gridy = NUM00 ; gbc . insets = null ; panel . add ( label , labelGbc ) ; return panel ; }
private static boolean isTrashId ( IgniteUuid id ) { $F397 ( id , _BOOL ) UUID gid = id . globalId ( ) ; return id . localId ( ) == NUM00 && gid . getMostSignificantBits ( ) == NUM00 && gid . getLeastSignificantBits ( ) > NUM00 && gid . getLeastSignificantBits ( ) <= TRASH_CONCURRENCY ; }
private void onTimeElementEnd $F72 throws SAXException { try { timeMs = XML_DATE_TIME_FORMAT . parseMillis ( content . trim ( ) ) ; } catch ( IllegalArgumentException e ) { throw new SAXException ( createErrorMessage ( NUM00 + content ) , e ) ; } }
public void addChangeListener ( ChangeListener l ) $F207 ( m_ChangeListeners , l )
public static boolean isClassPresent ( String fullyQualifiedClassName ) { try { Class . forName ( fullyQualifiedClassName ) ; return _BOOL ; } $F17063 ( _BOOL ) }
void unlink $F75141 ( p , trail ) { p . setValue ( null ) ; $F33910 ( trail , p ) if ( last == p ) last = trail ; $F75143 ( count , capacity , notFull ) }
@ TargetApi ( Build . VERSION_CODES . JELLY_BEAN ) private int queueInputBuffer ( MediaCodec codec , $F30903 inputBuffers , int index , SpeechRecord speechRecord ) { if ( speechRecord == null || speechRecord . getRecordingState ( ) != SpeechRecord . RECORDSTATE_RECORDING ) $F7629 if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ) { ByteBuffer inputBuffer = inputBuffers [ index ] ; $F725 ( inputBuffer ) $F29501 ( size , inputBuffer ) $F2175 ( buffer , size ) int status = read ( speechRecord , buffer ) ; if ( status < NUM00 ) { handleError ( NUM00 + status ) ; $F150 } inputBuffer . put ( buffer ) ; codec . queueInputBuffer ( index , NUM00 , size , NUM00 , NUM00 ) ; return size ; } $F150 }
$F1 public final void sample $F72 { long count = _count . getAndSet ( NUM00 ) ; long time = _time . getAndSet ( NUM00 ) ; if ( count == NUM00 ) _value = NUM00 ; else _value = time / ( double ) count ; }
protected void validateProperties ( final Object entity , final EntityDataModel edm ) throws ODataException { final Type type = edm . getType ( entity . getClass ( ) ) ; if ( ! ( type instanceof StructuredType ) ) $F932 visitProperties ( edm , ( StructuredType ) type , null ) ; }
public static String formatNumber ( float number , int digitCount , boolean separateThousands , char separateChar ) { $F11577 ( out ) boolean neg = _BOOL ; $F40722 ( number ) boolean zero = _BOOL ; if ( number < NUM00 && number > - NUM00 ) { zero = _BOOL ; } if ( number < NUM00 ) $F385538 ( neg , _BOOL , number ) if ( digitCount > POW_10 . length ) $F65461 ( digitCount , POW_10 ) number *= POW_10 [ digitCount ] ; $F385541 ( lval , Math , number ) $F40997 ( ind , out ) int charCount = NUM00 ; boolean decimalPointAdded = _BOOL ; while ( lval != NUM00 || charCount < ( digitCount + NUM00 ) ) { $F273037 ( digit , lval ) lval = lval / NUM00 ; out [ ind -- ] = ( char ) ( digit + NUM00 ) ; charCount ++ ; if ( charCount == digitCount ) { out [ ind -- ] = NUM00 ; charCount ++ ; decimalPointAdded = _BOOL ; } else if ( separateThousands && lval != NUM00 && charCount > digitCount ) { if ( decimalPointAdded ) { if $F385546 ( charCount , digitCount ) { out [ ind -- ] = separateChar ; charCount ++ ; } } else { if $F385546 ( charCount , digitCount ) { out [ ind -- ] = separateChar ; charCount ++ ; } } } } $F385557 ( zero , out , ind , charCount ) $F385557 ( neg , out , ind , charCount ) int start = out . length - charCount ; return String . valueOf ( out , start , out . length - start ) ; }
static AdbResponse readAdbResponse ( SocketChannel chan , boolean readDiagString ) throws TimeoutException , IOException { AdbResponse resp = new AdbResponse $F72 ; $F12496 ( reply ) read ( chan , reply ) ; if ( isOkay ( reply ) ) { resp . okay = _BOOL ; } else { readDiagString = _BOOL ; resp . okay = _BOOL ; } try { while ( readDiagString ) { $F12496 ( lenBuf ) read ( chan , lenBuf ) ; String lenStr = replyToString ( lenBuf ) ; int len ; try $F123126 ( len , Integer , lenStr ) catch ( NumberFormatException nfe ) { Log . w ( NUM00 , NUM00 + lenStr + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] + NUM00 + lenBuf [ NUM00 ] ) ; Log . w ( NUM00 , NUM00 + replyToString ( reply ) ) ; $F597 } $F2175 ( msg , len ) read ( chan , msg ) ; resp . message = replyToString ( msg ) ; Log . v ( NUM00 , NUM00 + replyToString ( reply ) + NUM00 + resp . message + NUM00 ) ; $F597 } } $F3957 return resp ; }
public void removeMouseMode ( String id ) { for ( MapMouseMode med : mouseModes ) { if ( id . equals ( med . getID ( ) ) ) $F87181 ( removeMouseMode , med ) } }
private Boolean filterExistingItems ( List < PostItem > postItems , PostItem item ) { if $F105 ( postItems , item ) { $F12747 ( i , postItems , item ) postItems . remove ( i ) ; postItems . add ( i , item ) ; return _BOOL ; } return _BOOL ; }
DateRange buildShiftedRange ( DateRange rawRange , long cadence , long now ) { if ( rawRange . getStart ( ) > now ) $F825 final DateRange rounded = rawRange . rounded ( cadence ) ; final long nowDelta = now - rounded . getEnd ( ) ; $F8670 ( nowDelta , SHIFT_TOLERANCE , rounded ) final long diff = Math . abs ( Math . min ( nowDelta , NUM00 ) ) + SHIFT_TOLERANCE ; return rounded . shift ( - toleranceShiftPeriod ( diff , cadence ) ) ; }
public static void upto ( Date self , Date to , Closure closure ) { if $F348512 ( self , to ) { for ( Date i = ( Date ) self . clone ( ) ; i . compareTo ( to ) <= NUM00 ; i = next ( i ) ) $F50467 ( closure , i ) } else $F50472 ( to , self ) }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Element testEmployee ; Node firstC ; String childName ; int nodeType ; CharacterData employeeIDNode ; String employeeID ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F90846 ( testEmployee , elementList ) firstC = testEmployee . getFirstChild ( ) ; nodeType = ( int ) firstC . getNodeType ( ) ; while ( equals ( NUM00 , nodeType ) ) { $F21003 ( firstC ) nodeType = ( int ) firstC . getNodeType ( ) ; } $F89257 ( childName , firstC ) assertEqualsAutoCase ( NUM00 , NUM00 , NUM00 , childName ) ; $F241 ( employeeIDNode , firstC ) $F5900 ( employeeID , employeeIDNode ) assertEquals ( NUM00 , NUM00 , employeeID ) ; }
public InferenceContext ( N4JSTypeSystem ts , TypeSystemHelper tsh , CancelIndicator cancelIndicator , RuleEnvironment G , InferenceVariable ... inferenceVariables ) { Objects . requireNonNull ( ts ) ; Objects . requireNonNull ( tsh ) ; Objects . requireNonNull ( cancelIndicator ) ; Objects . requireNonNull ( G ) ; this . ts = ts ; this . tsh = tsh ; this . cancelIndicator = cancelIndicator ; this . G = G ; addInferenceVariables ( _BOOL , inferenceVariables ) ; this . reducer = new Reducer ( this , G , ts , tsh ) ; this . currentBounds = new BoundSet ( this , G , ts ) ; }
$F1 public void run $F72 throws InterruptedException , CameraAccessException , CameraCaptureSessionClosedException , ResourceAcquisitionFailedException { FrameServer . Session session = mFrameServer . tryCreateExclusiveSession ( ) ; $F2329 ( session ) try { AFTriggerResult afScanResult = new AFTriggerResult $F72 ; RequestBuilder idleBuilder = createAFIdleRequest ( null ) ; session . submitRequest ( Arrays . asList ( idleBuilder . build ( ) ) , FrameServer . RequestType . REPEATING ) ; RequestBuilder cancelBuilder = createAFCancelRequest ( null ) ; session . submitRequest ( Arrays . asList ( cancelBuilder . build ( ) ) , FrameServer . RequestType . NON_REPEATING ) ; idleBuilder = createAFIdleRequest ( afScanResult ) ; session . submitRequest ( Arrays . asList ( idleBuilder . build ( ) ) , FrameServer . RequestType . REPEATING ) ; RequestBuilder triggerBuilder = createAFTriggerRequest ( afScanResult ) ; session . submitRequest ( Arrays . asList ( triggerBuilder . build ( ) ) , FrameServer . RequestType . NON_REPEATING ) ; $F217726 ( afScanResult ) } $F3229 ( session ) }
protected $F27878 createDiscreteVariableList ( DiscreteVariableAnalysis variableAnalysis ) { $F27878 nodes = new $F201 ( variableAnalysis . getNumOfCols ( ) ) ; DiscreteVarInfo [ ] variables = variableAnalysis . getDiscreteVarInfos ( ) ; for ( DiscreteVarInfo variable : variables ) { if ( variable != null ) { nodes . add ( new DiscreteVariable ( variable . getName ( ) , variable . getCategories ( ) ) ) ; } } return nodes ; }
$F35762 ( newScrollValue , itemDimension , initialMotionValue , lastMotionValue , getPullToRefreshScrollDirection , HORIZONTAL , mInitialMotionX , mLastMotionX , VERTICAL , mInitialMotionY , mLastMotionY , mCurrentMode , PULL_FROM_END , Math , FRICTION , getFooterSize , PULL_FROM_START , getHeaderSize , setHeaderScroll , isRefreshing , scale , mFooterLayout , mHeaderLayout , mState , State , setState )
public synchronized void removeSeries ( XYSeries series ) $F106 ( mSeries , series )
private void synchronizeTables $F72 { resetDBObjects ( DBObject_Table . class ) ; s_logger . log ( Level . CONFIG , NUM00 ) ; s_logger . log ( Level . CONFIG , NUM00 , $F40356 ( m_objectTypes , m_direction ) ) ; $F110223 ( m_counterDrp ) $F110223 ( m_counterAdd ) $F110223 ( m_counterUpd ) $F110223 ( m_totalDrp ) $F110223 ( m_totalAdd ) $F110223 ( m_totalUpd ) for ( $F43656 ( tableIterator , m_objectList ) ) { $F13714 ( key , tableIterator ) DBObject sourceObj = m_sourceMap . get ( key ) ; DBObject targetObj = m_targetMap . get ( key ) ; if ( targetObj != null && sourceObj == null ) { if ( targetObj . getCustomizationLevel ( ) == s_parameters . CUSTOMNONE ) { if ( targetObj . drop ( ) ) m_counterDrp = new Integer ( m_counterDrp . intValue ( ) + NUM00 ) ; m_totalDrp = new Integer ( m_totalDrp . intValue ( ) + NUM00 ) ; } else { s_logger . log ( Level . WARNING , NUM00 , new Object [ ] { m_objectType , targetObj . getName ( ) } ) ; } } if ( targetObj != null && sourceObj != null ) { if ( targetObj . update ( sourceObj ) ) m_counterUpd = new Integer ( m_counterUpd . intValue ( ) + NUM00 ) ; m_totalUpd = new Integer ( m_totalUpd . intValue ( ) + NUM00 ) ; } if ( targetObj == null && sourceObj != null ) { if ( sourceObj . create ( m_target ) ) m_counterAdd = new Integer ( m_counterAdd . intValue ( ) + NUM00 ) ; m_totalAdd = new Integer ( m_totalAdd . intValue ( ) + NUM00 ) ; } } logResults ( ) ; }
public void remoteRestartCoordinator ( String nodeId , String type ) throws LocalRepositoryException { final String prefix = String . format ( NUM00 , type , nodeId ) ; _log . debug ( prefix ) ; final $F806 cmd = { _SYSTOOL_CMD , _SYSTOOL_REMOTE_SYSTOOL , nodeId , _SYSTOOL_RESTART_COORDINATOR , type } ; $F57430 ( result , Exec , _SYSTOOL_TIMEOUT , cmd ) checkFailure ( result , prefix ) ; }
private static String intToString ( int value , int digit ) { $F7542 ( stringBuilder , digit ) $F42779 ( stringBuilder , Integer , value ) while $F80353 ( stringBuilder , digit ) { $F2864 ( stringBuilder ) } $F92 ( stringBuilder ) }
void add ( int n ) { if ( v == null ) { $F3936 ( v , INIT_SIZE ) v [ NUM00 ] = n ; len = NUM00 ; $F665 } if ( len == v . length ) { $F69133 ( newv , len ) $F135 ( System , v , newv , len ) v = newv ; } if ( n > v [ len - NUM00 ] ) { v [ len ++ ] = n ; $F665 } int i = NUM00 ; for ( ; i < len ; i ++ ) { if ( n <= v [ i ] ) { if ( n == v [ i ] ) $F665 $F597 } } for ( int j = len ; j >= i ; j -- ) v [ j + NUM00 ] = v [ j ] ; v [ i ] = n ; ++ len ; }
public static String replace $F1947 ( source , target , replacement ) { $F280 ( output ) int n = NUM00 ; while ( _BOOL ) { $F204924 ( off , source , target , n ) if ( off == - NUM00 ) { $F13047 ( output , source , n ) $F597 } $F13037 ( output , source , n , off ) output . append ( replacement ) ; $F46880 ( n , off , target ) } $F92 ( output ) }
public void correctNullReceiver $F72 { if $F215333 ( args ) $F665 handle = handle . bindTo ( NullObject . getNullObject ( ) ) ; handle = MethodHandles . dropArguments ( handle , NUM00 , targetType . parameterType ( NUM00 ) ) ; if ( LOG_ENABLED ) $F973 ( LOG ) }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F131106 ( number , testValidity , string )
public static boolean isPairedEndDirectory ( final File dir ) { if ( $F7107 ( dir ) || $F4925 ( dir ) ) { return _BOOL ; } final File lDir = $F109794 ( dir ) ; final File rDir = $F109794 ( dir ) ; return lDir . exists ( ) && rDir . exists ( ) && lDir . isDirectory ( ) && rDir . isDirectory ( ) ; }
$F1431 private void checkClassNotFound $F72 throws Exception { initGar = _BOOL ; try { Ignite ignite1 = startGrid ( NUM00 ) ; Ignite ignite2 = startGrid ( NUM00 ) ; Class task = extLdr . loadClass ( TASK_NAME ) ; try { ignite1 . compute ( ) . execute ( task , ignite2 . cluster ( ) . localNode ( ) . id ( ) ) ; assert _BOOL ; } catch ( IgniteException e ) $F1328 ( info , e ) } finally { stopGrid ( NUM00 ) ; stopGrid ( NUM00 ) ; } }
public String dropEngine ( Engine engine ) { $F83 ( builder ) for ( String attribute : Setup . getDropEngineMessageFormat ( ) ) { builder . append ( getEngineAttribute ( engine , attribute , ! PICKUP ) ) ; } $F92 ( builder ) }
public Iterator $F115413 iterator $F72 $F16048 ( elements )
protected void popWriteContext $F72 { $F72676 ( writeContext_ , writeContextStack_ ) }
public long calculateEndTime $F72 { if ( endTime == NUM00 ) { $F21879 ( System ) } else if ( endTime < NUM00 ) { return System . currentTimeMillis ( ) - endTime ; } return endTime ; }
protected String extractAlternateOpenQuote ( String token ) $F1337
private boolean removeIndexEntry ( ServiceType resourceType , String resourceName , String policyName ) throws PolicyException { ResourceIndex resourceIndex = ( ResourceIndex ) $F22754 ( resourceIndices , resourceType ) ; $F5178 ( resourceIndex , refreshResourceIndexFromDataStore , resourceType ) return resourceIndex . removeIndexEntry ( resourceName , policyName ) ; }
public static TextBlock parseTextBlock ( ParseContext parseContext ) { return TextBlockSectionParser . parseTextBlock ( parseContext ) ; }
public final static boolean inLongRange ( $F1469 digitChars , int offset , int len , boolean negative ) { String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR ; $F1749 ( cmpLen , cmpStr ) if ( len < cmpLen ) return _BOOL ; if ( len > cmpLen ) return _BOOL ; for ( $F1316 ( i , cmpLen ) ) { if ( digitChars [ offset + i ] > cmpStr . charAt ( i ) ) { return _BOOL ; } } return _BOOL ; }
public static Collection < DebuggerException > mergeExceptionsSettings ( final DebugTargetSettings target , final Collection < DebuggerException > exceptions , final int debuggerId ) throws CouldntLoadDataException { final Map < Long , DebuggerException > exceptionsMap = getExceptionsMap ( exceptions ) ; for ( final DebuggerException dbgException : exceptions ) { final String setting = target . readSetting ( DebuggerException . getSettingKey ( dbgException , debuggerId ) ) ; if ( setting != null ) { final DebuggerExceptionHandlingAction handlingAction = DebuggerExceptionHandlingAction . convertToHandlingAction ( Integer . valueOf ( setting ) ) ; final DebuggerException newException = new DebuggerException ( dbgException . getExceptionName ( ) , dbgException . getExceptionCode ( ) , handlingAction ) ; exceptionsMap . put ( dbgException . getExceptionCode ( ) , newException ) ; } } $F214800 ( exceptionsMap ) }
public void verifyAnnotation ( String methodName , String annotationName ) throws Exception { $F63290 ( clazz , Class , className ) Method method = clazz . getDeclaredMethod ( methodName ) ; $F63290 ( annotationClazz , Class , annotationName ) java . lang . annotation . Annotation annotation = method . getAnnotation ( annotationClazz ) ; Assert . assertNotNull ( annotation ) ; }
$F2208 ( sourceList , entryList , isEmpty , sourceCount , entry )
public PublisherAmb $F4203 ambAdditionalSource ( $F40799 ( source ) ) { if ( array != null ) { int n = array . length ; $F1431 $F40798 [ ] $F48543 ( newArray , n ) ; $F135 ( System , array , newArray , n ) newArray [ n ] = source ; return new PublisherAmb $F200 ( newArray ) ; } $F1274 }
public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event ) ; $F59547 ( siteName , getPageSessionAttribute , PG_ATTR_SITE_NAME ) $F59551 ( model , getModel ) ptModel . setPageTitleText ( model . getEditSitePageTitle ( siteName ) ) ; try { setDisplayFieldValue ( TF_URL , model . getSitePrimaryURL ( siteName ) ) ; getFailoverURLs ( siteName , model ) ; getServers ( siteName , model ) ; } $F50339 ( setInlineAlertMessage , CCAlert , e ) }
public boolean add ( AccessibleState state ) { if ( states == null ) { $F20637 ( states ) } if $F2200 ( states , state ) $F20644 ( states , state , _BOOL ) else { return _BOOL ; } }
public static final String readFile ( File file ) throws IOException { BufferedInputStream in = null ; try { $F20278 ( in , file ) SimpleByteBuffer buffer = new SimpleByteBuffer $F72 ; $F12496 ( buf ) int len ; while $F18067 ( len , in , buf ) $F1717 ( buffer , buf , len ) return new String ( buffer . buffer , NUM00 , buffer . write ) ; } finally { $F162760 ( in ) } }
void addDecimalPoint $F72 { this . displayMode = DISPLAY_MODE . INPUT ; if ( this . clearOnNextDigit ) { setDisplayString ( EMPTY_ "STRING" ) ; } $F61105 ( inputString , getDisplayString ) if $F283026 ( inputString , DOT_CHARACTER ) { setDisplayString ( inputString + DOT_CHARACTER ) ; } }
public void close $F72 throws $F3258 $F881 ( m_os )
void show $F72 { $F5453 ( mIsVisible ) mIsVisible = _BOOL ; mHeightPx = Math . round ( mDefaultHeightPx ) ; invalidate ( ) ; }
public void recordMirrorOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; $F137633 ( evDesc , opType ) String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( NUM00 , opType . toString ( ) , $F5528 ( evType ) + evDesc ) ; recordBourneMirrorEvent ( dbClient , getId ( ) , evType , status , evDesc ) ; switch ( opType ) { case CREATE_FILE_MIRROR : case START_FILE_MIRROR : case SUSPEND_FILE_MIRROR : case DETACH_FILE_MIRROR : case PAUSE_FILE_MIRROR : case RESUME_FILE_MIRROR : case FAILOVER_FILE_MIRROR : case STOP_FILE_MIRROR : case FAILBACK_FILE_MIRROR : case RESYNC_FILE_MIRROR : case REFRESH_FILE_MIRROR : case MODIFY_FILE_MIRROR_RPO : auditFile ( dbClient , opType , opStatus , opStage , extParam ) ; $F597 $F37651 ( _logger ) } } catch ( Exception e ) { _logger . error ( $F89018 ( opType , e ) ) ; } }
private void cancelTakeImage $F72 { mShootedPicturePath = null ; $F725 ( mSelectedGalleryItemsList ) VectorApp . setSavedCameraImagePreview ( null ) ; startCameraPreview ( ) ; updateUiConfiguration ( UI_SHOW_CAMERA_PREVIEW , IMAGE_ORIGIN_CAMERA ) ; }
protected int nextGridToRestart $F72 { if ( currRestartGridId == serverCount ( ) ) currRestartGridId = NUM00 ; return ++ currRestartGridId ; }
public void charactersRaw $F62353 ( start , length ) throws $F2253 { if ( isOutsideDocElem ( ) && XMLCharacterRecognizer . isWhiteSpace ( ch , start , length ) ) $F665 String s = new String ( ch , start , length ) ; append ( m_doc . createProcessingInstruction ( NUM00 , NUM00 ) ) ; append ( m_doc . createTextNode ( s ) ) ; }
private void removeStaleIteratorReferences $F72 { removeStaleReferences ( iteratorReferenceQueue , iterators ) ; }
boolean destroyIGroup ( boolean force ) { NaElement $F89079 ( elem ) ; $F89084 ( elem , name ) $F89083 ( elem , Boolean , force ) try { server . invokeElem ( elem ) ; } catch ( Exception e ) { String msg = NUM00 + name ; log . error ( msg , e ) ; throw new NetAppException ( msg , e ) ; } return _BOOL ; }
$F1 public double finiteDifferenceEpsilon $F72 $F1083
public void remove ( final HttpConnection connection ) { log . debug ( NUM00 + connection . getID ( ) ) ; connectionToAdded . remove ( connection ) ; }
public void putByte ( long pos , byte val ) { unsafe . putByte ( pos + addr , val ) ; }
public void addReference ( MessagePart reference ) $F207 ( references , reference )
protected $F8748 datasetIntegrity ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing ) { Estimator estimator = null ; print ( NUM00 ) ; printAttributeSummary ( attrTypes , classType ) ; print ( NUM00 ) ; int numTrain = getNumInstances ( ) ; getNumInstances ( ) ; int numClasses = NUM00 , missingLevel = NUM00 ; $F125783 ( result ) Instances train = null ; boolean built = _BOOL ; try { train = makeTestDataset ( NUM00 , numTrain , NUM00 , attrTypes , numClasses , classType ) ; int attrIndex = NUM00 ; if ( missingLevel > NUM00 ) { addMissing ( train , missingLevel , attributeMissing , classMissing , attrIndex ) ; } estimator = Estimator . makeCopies ( getEstimator ( ) , NUM00 ) [ NUM00 ] ; } catch ( Exception ex ) $F220112 ( ex ) try { Instances trainCopy = new Instances ( train ) ; int attrIndex = NUM00 ; estimator . addValues ( trainCopy , attrIndex ) ; compareDatasets ( train , trainCopy ) ; built = _BOOL ; println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; } catch ( Exception ex ) { println ( NUM00 ) ; result [ NUM00 ] = _BOOL ; if ( m_Debug ) { println ( NUM00 ) ; print ( NUM00 ) ; if ( built ) $F1210 ( print ) else $F1210 ( print ) $F5354 ( println , ex ) println ( NUM00 ) ; println ( $F369 ( train ) ) ; } } return result ; }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; $F1749 ( len , str ) if ( $F4434 ( str ) || $F4434 ( str ) || $F4434 ( str ) ) { throw new SchemaDateTimeException $F580 ; } date . year = YEAR ; date . month = MONTH ; date . day = parseInt ( str , NUM00 , NUM00 ) ; if ( DAY_SIZE < len ) { if ( ! isNextCharUTCSign ( str , DAY_SIZE , len ) ) { throw new SchemaDateTimeException $F580 ; } else { getTimeZone ( str , date , DAY_SIZE , len ) ; } } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != NUM00 && date . utc != NUM00 ) { normalize ( date ) ; } date . position = NUM00 ; return date ; }
public static $F10651 parse ( final URI uri , boolean decodeQueryParam ) { $F10651 result = Collections . emptyMap ( ) ; final String query = uri . getRawQuery ( ) ; if $F22 ( query ) { $F23429 ( result ) parse ( result , new Scanner ( query ) , null , decodeQueryParam ) ; } return result ; }
private void updatePeriod $F72 { for ( $F2277 ( i , mConversion ) ) { int dateType = mConversion . keyAt ( i ) ; TimePeriodSlider slider = mTimePeriodSliders . get ( dateType ) ; slider . setValue ( mPeriod . get ( mConversion . valueAt ( i ) ) ) ; } mTime . setText ( getFormattedPeriod ( ) ) ; mDuration = mPeriod . toStandardDuration ( ) ; doValidation ( ) ; }
public long start_brk $F72 $F12907 ( Long , fields )
public static void validateParticipantIdsEqual ( String expectedParticipantId , String actualParticipantId ) throws CryptoException { if $F2137 ( expectedParticipantId , actualParticipantId ) { throw new CryptoException $F6486 ( actualParticipantId , expectedParticipantId ) ; } }
protected void encodeFields ( mxCodec enc , Object obj , Node node ) { $F121108 ( type , obj ) while ( type != null ) { $F16273 ( fields , type ) for ( $F1139 ( i , fields ) ) { Field f = fields [ i ] ; if ( ( f . getModifiers ( ) & Modifier . TRANSIENT ) != Modifier . TRANSIENT ) { $F20605 ( fieldname , f ) Object value = getFieldValue ( obj , fieldname ) ; encodeValue ( enc , obj , fieldname , value , node ) ; } } $F7852 ( type ) } }
$F36042 ( propertyName , in_vcl , beanContextChildSupport )
private void logMissingResource ( FacesContext ctx , String resourceId , Throwable t ) { Level level ; if ( ! ctx . isProjectStage ( ProjectStage . Production ) ) { level = Level . WARNING ; } else { level = ( ( t != null ) ? Level . WARNING : Level . FINE ) ; } if $F155449 ( LOGGER , level ) { LOGGER . log ( $F157217 ( level , resourceId ) ) ; if ( t != null ) { LOGGER . log ( level , NUM00 , t ) ; } } }
private void appendAliasedColumn $F43574 ( sb , colName , tAlias ) { $F43191 ( tAlias , sb ) $F84 ( sb ) sb . append ( colName ) ; $F84 ( sb ) }
private MidiEvent createScheduledEvent ( $F96 msg , int offset , int count , long timestamp ) { MidiEvent event ; if ( count > POOL_EVENT_SIZE ) { event = new MidiEvent ( msg , offset , count , timestamp ) ; } else { event = ( MidiEvent ) removeEventfromPool ( ) ; if ( event == null ) { event = new MidiEvent ( POOL_EVENT_SIZE ) ; } System . arraycopy ( msg , offset , event . data , NUM00 , count ) ; event . count = count ; event . setTimestamp ( timestamp ) ; } return event ; }
public void startElement $F42838 ( namespaceURI , localName , qName , atts ) throws SAXException { try { elemType = ( $F156857 ) elementTypes . get ( localName ) ; if ( gatherMode ) { if ( gatheringElement . gatherElement ( localName , atts ) ) { gatherBuffer . add ( new Object [ ] { elemType , new AttributesImpl ( atts ) } ) ; } } else { $F2329 ( elemType ) elemType . startElement ( atts ) ; } elems . add ( elemType ) ; } catch ( SAXException saxex ) { throw saxex ; } catch ( Exception ex ) { $F6287 ( ex ) } }
public static $F96 gzip ( String input ) { $F1538 ( baos ) GZIPOutputStream gzos = null ; try $F42214 ( gzos , baos , input ) $F12241 ( e ) $F42219 ( gzos ) $F11316 ( baos ) }
public static double logPdf $F7635 ( x , m , shape ) { double a = Math . sqrt ( shape / ( NUM00 * Math . PI * x * x * x ) ) ; double b = ( ( - shape ) * ( x - m ) * ( x - m ) ) / ( NUM00 * m * m * x ) ; return Math . log ( a ) + b ; }
public void addEdgeConnector $F72 { numEdgeConnectors ++ ; String name = NUM00 ; boolean duplicate = _BOOL ; while ( duplicate ) { name = NUM00 + numEdgeConnectors ; if ( finder . findPositionablePointByName ( name ) == null ) { duplicate = _BOOL ; } $F19814 ( duplicate , numEdgeConnectors ) } PositionablePoint o = new PositionablePoint ( name , PositionablePoint . EDGE_CONNECTOR , currentPoint , this ) ; pointList . add ( o ) ; setDirty ( _BOOL ) ; }
$F4585 ( RequestMethod ) $F4586 public RestWrapper list ( $F188477 ( startPage ) , $F188477 ( pageSize ) , Principal principal ) { RestWrapper restWrapper = null ; try { Integer counter = workflowTypeDAO . totalRecordCount ( ) ; List < WorkflowType > workflowTypes = new ArrayList < WorkflowType > $F72 ; List < com . wipro . ats . bdre . md . dao . jpa . WorkflowType > jpaWorkflowTypes = workflowTypeDAO . list ( startPage , pageSize ) ; for ( com . wipro . ats . bdre . md . dao . jpa . WorkflowType wfType : jpaWorkflowTypes ) { WorkflowType workflowType = new WorkflowType $F72 ; workflowType . setWorkflowId ( wfType . getWorkflowId ( ) ) ; workflowType . setWorkflowTypeName ( wfType . getWorkflowTypeName ( ) ) ; workflowType . setCounter ( counter ) ; workflowTypes . add ( workflowType ) ; } $F4608 ( restWrapper , workflowTypes , RestWrapper ) $F170638 ( LOGGER , principal ) } $F20495 ( LOGGER , e , restWrapper , RestWrapper ) return restWrapper ; }
$F95779 ( out , remaining , count , buf , buffers , c , Math )
public void parseForClass ( GenericDeclaration genericDecl , String signature ) { setInput ( genericDecl , signature ) ; if ( ! eof ) $F5795 ( parseClassSignature ) else { if ( genericDecl instanceof Class ) { Class c = ( Class ) genericDecl ; $F272049 ( this , EmptyArray ) this . superclassType = c . getSuperclass ( ) ; $F18547 interfaces = c . getInterfaces ( ) ; if $F9634 ( interfaces ) { this . interfaceTypes = ListOfTypes . EMPTY ; } else { this . interfaceTypes = new ListOfTypes ( interfaces ) ; } } else { $F272049 ( this , EmptyArray ) this . superclassType = $F12222 ; this . interfaceTypes = ListOfTypes . EMPTY ; } } }
static boolean tryExternalUnpush $F103299 ( t ) { ForkJoinPool p ; $F17861 ws ; WorkQueue q ; Submitter z ; $F103302 ( a ) int m , s ; if ( t != null && $F17863 ( z , submitters ) && ( p = commonPool ) != null && $F17865 ( ws , p ) && $F17868 ( m , ws ) && $F103310 ( q , ws , m , z , SQMASK ) && $F155476 ( s , q ) && $F103318 ( a , q ) ) { long j = ( ( $F33765 ( a ) & ( s - NUM00 ) ) < < ASHIFT ) + ABASE ; if ( U . getObject ( a , j ) == t && $F103312 ( U , q , QLOCK ) ) { if ( q . array == a && q . top == s && U . compareAndSwapObject ( a , j , t , null ) ) { q . top = s - NUM00 ; q . qlock = NUM00 ; return _BOOL ; } q . qlock = NUM00 ; } } return _BOOL ; }
public static $F1986 quantiles ( int n , $F1986 values ) { values = ( $F1986 ) values . clone ( ) ; Arrays . sort ( values ) ; $F107812 ( qtls , n ) for ( $F50176 ( i , n ) ) { qtls [ i ] = values [ ( $F33765 ( values ) * i ) / n ] ; } return qtls ; }
$F237470 ( doc , elementList , nameNode , child , badSubstring , load , _BOOL , success , ex , DOMException , assertTrue )
public QueryException ( String message , int errorCode , SqlStates sqlState , Throwable cause ) { super ( message , cause ) ; this . message = message ; this . errorCode = errorCode ; this . sqlState = sqlState . getSqlState ( ) ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public void testConstructorStringRadix16 $F72 { String value = NUM00 ; int radix = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3023 ( aNumber , value , radix ) $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
private CSVData ( List < CSVRecord > records ) $F36568 ( this , Objects , records )
private $F28319 untagVolumesMethod ( URI systemURI , $F28584 volumeURIs ) $F28323 ( systemURI , volumeURIs )
private $F96 SHA256hash $F97 ( tobeHashed ) { SHA256Digest digester = new SHA256Digest $F72 ; $F216093 ( retValue , digester ) $F6163 ( digester , tobeHashed ) $F137382 ( digester , retValue ) return retValue ; }
@ DataProvider private static $F29684 okResourceResponses $F72 { return new Object [ ] [ ] { { new Response ( OK ) } , { new Response ( FOUND ) } , { new Response ( MOVED_PERMANENTLY ) } , { new Response ( CREATED ) } } ; }
public synchronized void connect $F72 { if ( ! _zkConnection . isStarted ( ) ) $F28175 ( _zkConnection ) if $F4329 ( StringUtils , siteId ) $F5795 ( generateSiteId ) }
static Object convertJavaTimeToJavaSql ( Object x ) { if ( x instanceof LocalDate ) { return Date . valueOf ( ( LocalDate ) x ) ; } else if ( x instanceof LocalDateTime ) { return Timestamp . valueOf ( ( LocalDateTime ) x ) ; } else if ( x instanceof LocalTime ) { return Time . valueOf ( ( LocalTime ) x ) ; } return x ; }
$F1113 private static DefaultMutableTreeNode updateTreeStructure ( $F1113 DefaultMutableTreeNode treeNode , $F1113 ZipFile compressedApk ) { long compressedSize = NUM00 ; ApkEntry entry = ApkEntry . fromNode ( treeNode ) ; assert entry != null ; if ( $F162517 ( treeNode ) ) { for ( $F140290 ( i , treeNode ) ) { DefaultMutableTreeNode childNode = updateTreeStructure ( ( DefaultMutableTreeNode ) treeNode . getChildAt ( i ) , compressedApk ) ; compressedSize += ( ( ApkEntry ) childNode . getUserObject ( ) ) . getCompressedSize ( ) ; } } else { ZipEntry ze = compressedApk . getEntry ( ApkFileSystem . getInstance ( ) . getRelativePath ( entry . getFile ( ) ) ) ; if ( ze == null ) $F44867 ( compressedSize ) else { compressedSize = ze . getCompressedSize ( ) ; } } entry . setCompressedSize ( compressedSize ) ; return treeNode ; }
public long totalMemory $F72 $F2905 ( totalMemoryImpl )
public static void enableSync ( String accountName ) $F845
public static void scan $F72 { List < ScannerRegistration > scanners = getScannersToRun ( ) ; if $F3817 ( scanners ) { $F52326 urls = getSearchURLs ( ) ; if ( urls == null ) { urls = fiterLibs ( ScannerURLS . getURLsForSearch ( ) ) ; scan ( scanners , urls ) ; } else { scan ( scanners , urls ) ; } } }
public final void turnTo ( double angle ) { angle = Geometric . clampAngleDegree ( angle ) ; orientation = Geometric . clampAngleDegree ( angle ) ; Geometric . rotateTo ( velocity , Math . toRadians ( orientation ) ) ; }
$F30954 ( putLock , takeLock )
protected int startBridgeServer ( int port , boolean notifyBySubscription ) throws IOException { Cache cache = getCache ( ) ; CacheServer bridge = cache . addCacheServer ( ) ; bridge . setPort ( port ) ; bridge . setNotifyBySubscription ( notifyBySubscription ) ; $F2346 ( bridge ) bridgeServerPort = bridge . getPort ( ) ; return bridge . getPort ( ) ; }
public void addAction ( String action ) { $F131 args = $F382 ; SimpleDateFormat sdf = new SimpleDateFormat ( context . getString ( R . string . dateFormat ) ) ; args [ NUM00 ] = $F52170 ( sdf ) ; String timestamp = context . getString ( R . string . timestamp , args ) ; history . add ( action + timestamp ) ; notifyListeners ( new PropertyChangeEvent ( this , ActivityConstants . historyProperty , null , null ) ) ; }
$F410840 ( value )
protected F restoreLastFilter ( int dialogType ) { F result ; List $F355799 list ; int i ; result = null ; if ( dialogType == OPEN_DIALOG ) list = getOpenFileFilters ( ) ; else list = getSaveFileFilters ( ) ; if $F3817 ( list ) { result = getDefaultFileFilter ( dialogType ) ; setFileFilter ( result ) ; if ( m_LastFilter != null ) { for ( $F12002 ( i , list ) ) { if ( m_Comparator . compare ( list . get ( i ) , m_LastFilter ) == NUM00 ) { result = ( F ) m_LastFilter ; setFileFilter ( m_LastFilter ) ; $F597 } } } } return result ; }
public void testCharBasedCollisions $F72 { CharsToNameCanonicalizer sym = CharsToNameCanonicalizer . createRoot ( ) ; try { int firstHash = NUM00 ; for ( String str : CHAR_COLLISIONS ) { int hash = sym . calcHash ( str ) ; if ( firstHash == NUM00 ) { firstHash = hash ; } else { assertEquals ( firstHash , hash ) ; } sym . findSymbol ( str . toCharArray ( ) , NUM00 , str . length ( ) , hash ) ; } fail ( NUM00 ) ; } catch ( IllegalStateException e ) { verifyException ( e , NUM00 ) ; assertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . maxCollisionLength ( ) ) ; assertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . collisionCount ( ) ) ; assertEquals ( CharsToNameCanonicalizer . MAX_COLL_CHAIN_LENGTH + NUM00 , sym . size ( ) ) ; } }
public void handleTblDataSiteActionHrefRequest ( RequestInvocationEvent event ) throws ModelControlException { String siteName = hexToString ( ( String ) getDisplayFieldValue ( TBL_DATA_SITE_ACTION_HREF ) ) ; setPageSessionAttribute ( SiteEditViewBean . PG_ATTR_SITE_NAME , siteName ) ; SiteEditViewBean vb = ( SiteEditViewBean ) getViewBean ( SiteEditViewBean . class ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; $F50333 ( vb , getRequestContext ) }
public static void normalize $F280936 ( doubles , sum ) { if $F35707 ( Double , sum ) $F825 $F256058 ( sum ) for ( $F1139 ( i , doubles ) ) { doubles [ i ] /= sum ; } }
private void expandArray ( int shardId ) { int newNumShards = Math . max ( $F29907 ( Math , numShards , SHARD_GROWTH_FACTOR ) , shardId + NUM00 ) ; Preconditions . checkArgument ( newNumShards * shardLength < Integer . MAX_VALUE , NUM00 ) ; $F26352 newArray = new int [ newNumShards ] [ ] ; System . arraycopy ( readerAccessibleInfo . array , NUM00 , newArray , NUM00 , readerAccessibleInfo . array . length ) ; readerAccessibleInfo = new ReaderAccessibleInfo ( newArray ) ; numShards = newNumShards ; }
protected $F4203 T waitForPropertyValue ( String documentSelfLink , $F20474 type , String propName , Object propValue , boolean shouldMatch , AtomicInteger count ) throws Throwable { $F1431 $F6689 prop = propValue instanceof List ? $F128538 ( propValue ) : Arrays . asList ( propValue ) ; return waitForPropertyValue ( documentSelfLink , type , propName , prop , shouldMatch , count ) ; }
public static String fromIPv4AddressCollection ( $F2306 ipAddresses ) { $F1747 ( ipAddresses ) $F280 ( sb ) $F84 ( sb ) for ( Integer ip : ipAddresses ) { $F6407 ( sb , fromIPv4Address , ip ) $F84 ( sb ) } sb . replace ( $F1092 ( sb ) , sb . length ( ) , NUM00 ) ; $F92 ( sb ) }
public static final String makeJavaIdentifier ( String identifier ) { $F80469 ( modifiedIdentifier , identifier ) if ( ! Character . isJavaIdentifierStart ( identifier . charAt ( NUM00 ) ) ) $F86 ( modifiedIdentifier ) for ( $F1088 ( i , identifier ) ) { $F1280 ( ch , identifier , i ) if ( Character . isJavaIdentifierPart ( ch ) && ch != NUM00 ) $F288 ( modifiedIdentifier , ch ) else if ( ch == NUM00 ) $F86 ( modifiedIdentifier ) else $F9821 ( modifiedIdentifier , mangleChar , ch ) } if ( $F17717 ( isJavaKeyword , modifiedIdentifier ) ) $F86 ( modifiedIdentifier ) $F92 ( modifiedIdentifier ) }
public static String encrypt ( String input ) { if $F25900 ( encryptionService , input ) { return input ; } return ENCRYPTION_PREFIX + encryptionService . encrypt ( input ) ; }
public static void createFederatedNamespace ( URI namespace , ZooKeeperClient zkc ) throws InterruptedException , ZooKeeperClient . ZooKeeperConnectionException , KeeperException { String zkSubNamespacesPath = namespace . getPath ( ) + NUM00 + ZNODE_SUB_NAMESPACES ; Utils . zkCreateFullPathOptimistic ( zkc , zkSubNamespacesPath , $F10314 , zkc . getDefaultACL ( ) , CreateMode . PERSISTENT ) ; }
public static Executor createTaskDistributor $F72 { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; }
public String process $F72 { while ( off < count ) { while ( off < count ) { char ch = text [ off ] ; if ( ! isSpecial ( ch ) ) $F5153 off ++ ; } if $F931 ( acronym ) $F9099 ( token , number ) } $F92 ( builder ) }
public static String bytesToBinHex $F24576 ( data , nStartPos , nNumOfBytes ) { $F83 ( sbuf ) sbuf . setLength ( nNumOfBytes < < NUM00 ) ; int nPos = NUM00 ; for ( $F119 ( nI , nNumOfBytes ) ) { sbuf . setCharAt ( nPos ++ , HEXTAB [ ( data [ nI + nStartPos ] > > NUM00 ) & NUM00 ] ) ; sbuf . setCharAt ( nPos ++ , HEXTAB [ data [ nI + nStartPos ] & NUM00 ] ) ; } $F92 ( sbuf ) }
private static $F2027 mult128 $F22564 ( a , b ) { $F11844 ( result ) $F11844 ( a0 ) System . arraycopy ( a , NUM00 , a0 , NUM00 , $F121399 ( Math , a ) ) ; $F11844 ( a1 ) if $F3305 ( a ) { System . arraycopy ( a , NUM00 , a1 , NUM00 , Math . min ( NUM00 , a . length - NUM00 ) ) ; } $F11844 ( b0 ) System . arraycopy ( b , NUM00 , b0 , NUM00 , $F121399 ( Math , b ) ) ; $F11844 ( b1 ) if $F3305 ( b ) { System . arraycopy ( b , NUM00 , b1 , NUM00 , Math . min ( NUM00 , b . length - NUM00 ) ) ; } if ( a1 [ NUM00 ] == NUM00 && b1 [ NUM00 ] == NUM00 ) { if ( a1 [ NUM00 ] != NUM00 || b1 [ NUM00 ] != NUM00 ) { $F2027 c = mult32 ( a1 [ NUM00 ] , b1 [ NUM00 ] ) ; $F166091 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) } } else { $F36803 ( c , mult64 , a1 , b1 ) $F166091 ( result , c ) $F166091 ( result , c ) $F166100 ( result , c ) $F166100 ( result , c ) $F166091 ( result , c ) $F166091 ( result , c ) } $F166091 ( a1 , a0 ) $F166091 ( a1 , a0 ) $F166091 ( b1 , b0 ) $F166091 ( b1 , b0 ) if ( a1 [ NUM00 ] == NUM00 && b1 [ NUM00 ] == NUM00 ) { $F2027 d = mult32 ( a1 [ NUM00 ] , b1 [ NUM00 ] ) ; $F166091 ( result , d ) $F166091 ( result , d ) } else { $F36803 ( d , mult64 , a1 , b1 ) $F166091 ( result , d ) $F166091 ( result , d ) $F166091 ( result , d ) $F166091 ( result , d ) } if ( a0 [ NUM00 ] == NUM00 && b0 [ NUM00 ] == NUM00 ) { $F2027 e = mult32 ( a0 [ NUM00 ] , b0 [ NUM00 ] ) ; $F166091 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) } else { $F36803 ( e , mult64 , a0 , b0 ) $F166091 ( result , e ) $F166091 ( result , e ) $F166100 ( result , e ) $F166100 ( result , e ) $F166091 ( result , e ) $F166091 ( result , e ) } return result ; }
public static void updateLast $F72 { ClientUtils . lastUpdate = System . currentTimeMillis ( ) ; }
public ReplicaSets ( Collection < ReplicaSet > rsSpecs ) { if ( rsSpecs != null ) $F115274 ( rsSpecs ) Collections . sort ( nonReplicaSets ) ; }
static private String BYTE_Max $F72 { byte tempValue = Byte . MAX_VALUE ; $F33236 ( String , tempValue ) }
public static Executor createTaskDistributor $F72 { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; }
protected PathNode pathNode ( String pattern ) { final String seq [ ] = pattern . split ( NUM00 ) ; final PathElt elements [ ] = new PathElt [ seq . length ] ; PathMod mod = null ; for ( $F1139 ( i , seq ) ) { final String s = seq [ i ] ; boolean inverse = $F4431 ( s ) ; switch ( $F7792 ( s ) ) { $F1262 mod = PathMod . ZERO_OR_MORE ; $F597 $F1262 mod = PathMod . ONE_OR_MORE ; $F597 $F1262 mod = PathMod . ZERO_OR_ONE ; $F597 } String c = s . substring ( inverse ? NUM00 : NUM00 , s . length ( ) - ( mod != null ? NUM00 : NUM00 ) ) ; elements [ i ] = new PathElt ( constantNode ( c ) , inverse , mod ) ; } return new PathNode ( new PathAlternative ( new PathSequence ( elements ) ) ) ; }
$F1 public int startupNewWorker ( int priority ) { int actualWorkersStarted = startupNewWorker ( priority , null , null ) ; return actualWorkersStarted ; }
public void addImplInterface ( String iname ) $F207 ( implInterfaces , iname )
private static synchronized boolean checkFolderPermissions ( StringBuilder aStringBuilder , String aDirectory ) { $F1705 ( directory , aDirectory ) $F1909 ( directory ) if $F70404 ( directory ) { aStringBuilder . append ( NUM00 + directory + NUM00 + NUM00 ) ; return _BOOL ; } if $F14326 ( directory ) { aStringBuilder . append ( NUM00 + directory + NUM00 + NUM00 ) ; return _BOOL ; } return _BOOL ; }
protected QualifiedItem [ ] parseQualifiedItems ( final $F806 arguments , final VersionSpec defaultVersion , final boolean allowVersionRange , final int startIndex ) { $F18062 ( Check , arguments ) final List < QualifiedItem > items = new ArrayList < QualifiedItem > ( arguments . length ) ; for ( $F9958 ( i , startIndex , arguments ) ) { final String arg = arguments [ i ] ; if $F48189 ( StringUtil , arg ) { try { final QualifiedItem qi = new QualifiedItem ( arg , VersionControlConstants . AUTHENTICATED_USER , defaultVersion , allowVersionRange ) ; items . add ( qi ) ; } catch ( final VersionSpecParseException e ) { reportWrongArgument ( arg , e ) ; } catch ( final LabelSpecParseException e ) { reportWrongArgument ( arg , e ) ; } } } return items . toArray ( new QualifiedItem $F2313 ( items ) ) ; }
public EipEditor $F72 $F9099 ( super , initializeEditingDomain )
public boolean deleteEntry ( BasicPoolEntry entry ) { final boolean found = freeEntries . remove ( entry ) ; if ( found ) numEntries -- ; return found ; }
$F1309 public void requestContactCapabilities ( ContactId contact ) throws RcsServiceNotRegisteredException , RcsServiceNotAvailableException , RcsGenericException { $F161627 ( mApi ) try { List < ContactId > $F204 ( listOfContacts ) ; listOfContacts . add ( contact ) ; mApi . requestContactCapabilities2 ( listOfContacts ) ; } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; RcsServiceNotRegisteredException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
public ConversationService ( final String versionDate , String username , String password ) { this ( versionDate ) ; setUsernameAndPassword ( username , password ) ; }
public CustomOptional < KinesisRecord > next $F72 throws TransientKinesisException { readMoreIfNecessary ( ) ; if $F2979 ( data ) { return CustomOptional . absent ( ) ; } else { KinesisRecord record = data . removeFirst ( ) ; checkpoint = checkpoint . moveAfter ( record ) ; $F122628 ( CustomOptional , record ) } }
$F1 public final synchronized void addRemoveStatements ( Collection $F12621 added , Collection $F12621 removed ) throws IOException { MapOfListMaps < Resource , String , Statement > rsAdded = new MapOfListMaps < Resource , String , Statement > $F72 ; MapOfListMaps < Resource , String , Statement > rsRemoved = new MapOfListMaps < Resource , String , Statement > $F72 ; HashSet $F25924 resources = new HashSet $F25924 $F72 ; for ( Statement s : added ) { rsAdded . add ( s . getSubject ( ) , SearchFields . getContextID ( s . getContext ( ) ) , s ) ; resources . add ( s . getSubject ( ) ) ; } for ( Statement s : removed ) { rsRemoved . add ( s . getSubject ( ) , SearchFields . getContextID ( s . getContext ( ) ) , s ) ; resources . add ( s . getSubject ( ) ) ; } logger . debug ( $F78807 ( removed , added ) ) ; BulkUpdater updater = newBulkUpdate ( ) ; for ( Resource resource : resources ) { Map < String , $F373359 > stmtsToRemove = rsRemoved . get ( resource ) ; Map < String , $F373359 > stmtsToAdd = rsAdded . get ( resource ) ; $F2689 contextsToUpdate = new $F2690 $F57797 ( stmtsToAdd ) ; $F70469 ( contextsToUpdate , stmtsToRemove ) Map < String , SearchDocument > docsByContext = new HashMap < String , SearchDocument > $F72 ; String resourceId = SearchFields . getResourceID ( resource ) ; Iterable < ? extends SearchDocument > documents = getDocuments ( resourceId ) ; for ( SearchDocument doc : documents ) { docsByContext . put ( doc . getContext ( ) , doc ) ; } for ( String contextId : contextsToUpdate ) { String id = SearchFields . formIdString ( resourceId , contextId ) ; SearchDocument document = docsByContext . get ( contextId ) ; if ( document == null ) { document = newDocument ( id , resourceId , contextId ) ; $F373359 list = stmtsToAdd . get ( contextId ) ; if ( list != null ) { for ( Statement s : list ) { addProperty ( s , document ) ; } } updater . add ( document ) ; if $F1710 ( stmtsToRemove , contextId ) $F21153 ( logger , resource , contextId ) } else { $F10651 removedOfResource = null ; { $F373359 removedStatements = stmtsToRemove . get ( contextId ) ; if $F1032 ( removedStatements ) { $F122365 ( removedOfResource ) ; for ( Statement r : removedStatements ) { String val = SearchFields . getLiteralPropertyValueAsString ( r ) ; if ( val != null ) { String field = SearchFields . getPropertyField ( r . getPredicate ( ) ) ; $F48768 ( removedValues , removedOfResource , field ) if ( removedValues == null ) { $F21884 ( removedValues ) removedOfResource . put ( field , removedValues ) ; } removedValues . add ( val ) ; } } } } SearchDocument newDocument = newDocument ( id , resourceId , contextId ) ; boolean mutated = copyDocument ( newDocument , document , removedOfResource ) ; { $F373359 addedToResource = stmtsToAdd . get ( contextId ) ; String val ; if $F1032 ( addedToResource ) { PropertyCache propertyCache = new PropertyCache ( newDocument ) ; for ( Statement s : addedToResource ) { val = SearchFields . getLiteralPropertyValueAsString ( s ) ; if ( val != null ) { String field = SearchFields . getPropertyField ( s . getPredicate ( ) ) ; if ( ! propertyCache . hasProperty ( field , val ) ) { addProperty ( s , newDocument ) ; mutated = _BOOL ; } } } } } int nrProperties = countPropertyValues ( newDocument ) ; if ( nrProperties > NUM00 ) { if ( mutated ) $F7469 ( updater , newDocument ) } else $F11331 ( updater , document ) } } } $F87417 ( updater ) }
Object toType $F97551 ( value , pattern , locale ) { Calendar calendar = toCalendar ( value , pattern , locale ) ; return toType ( calendar ) ; }
private SnmpPduPacket executeSubRequest ( SnmpPduPacket req , Object userData ) { int errorStatus = SnmpDefinitions . snmpRspNoError ; int i ; if ( req . type == pduSetRequestPdu ) { i = NUM00 ; for ( Enumeration < SnmpSubRequestHandler > e = subs . elements ( ) ; e . hasMoreElements ( ) ; i ++ ) { SnmpSubRequestHandler sub = e . nextElement ( ) ; sub . setUserData ( userData ) ; sub . type = pduWalkRequest ; $F21687 ( sub ) sub . type = pduSetRequestPdu ; if ( sub . getErrorStatus ( ) != SnmpDefinitions . snmpRspNoError ) { if $F14148 ( SNMP_ADAPTOR_LOGGER , Level ) { SNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , NUM00 , NUM00 ) ; } return newErrorResponsePdu ( req , errorStatus , sub . getErrorIndex ( ) + NUM00 ) ; } } } i = NUM00 ; for ( Enumeration < SnmpSubRequestHandler > e = subs . elements ( ) ; e . hasMoreElements ( ) ; i ++ ) { SnmpSubRequestHandler sub = e . nextElement ( ) ; sub . setUserData ( userData ) ; $F21687 ( sub ) if ( sub . getErrorStatus ( ) != SnmpDefinitions . snmpRspNoError ) { if $F14148 ( SNMP_ADAPTOR_LOGGER , Level ) { SNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , NUM00 , NUM00 ) ; } return newErrorResponsePdu ( req , errorStatus , sub . getErrorIndex ( ) + NUM00 ) ; } } $F1274 }
Method ( MethodDoc methodDoc ) { this . methodDoc = methodDoc ; exceptionTypes = methodDoc . thrownExceptions ( ) ; Arrays . sort ( exceptionTypes , new ClassDocComparator $F72 ) ; operationString = computeOperationString ( ) ; nameAndDescriptor = methodDoc . name ( ) + Util . methodDescriptorOf ( methodDoc ) ; methodHash = computeMethodHash ( ) ; }
public DeterministicKey ( ImmutableList < ChildNumber > childNumberPath , $F96 chainCode , LazyECPoint publicAsPoint , $F5466 BigInteger priv , $F5466 DeterministicKey parent ) { super ( priv , compressPoint ( checkNotNull ( publicAsPoint ) ) ) ; checkArgument ( chainCode . length == NUM00 ) ; this . parent = parent ; this . childNumberPath = checkNotNull ( childNumberPath ) ; $F17879 ( this , Arrays , chainCode ) this . depth = parent == null ? NUM00 : parent . depth + NUM00 ; this . parentFingerprint = ( parent != null ) ? parent . getFingerprint ( ) : NUM00 ; }
private static void s_uaColSumLtGe ( MatrixBlock in , MatrixBlock out , $F1986 bv , BinaryOperator bOp ) throws DMLRuntimeException { int agg0 = sumRowSumGtLeColSumLtGe ( NUM00 , bv , bOp ) ; out . allocateDenseBlock ( _BOOL ) ; Arrays . fill ( out . getDenseBlock ( ) , NUM00 , out . getNumColumns ( ) , agg0 ) ; if ( agg0 != NUM00 ) out . setNonZeros ( out . getNumColumns ( ) ) ; if ( in . isEmptyBlock ( _BOOL ) ) $F665 SparseBlock sblock = in . getSparseBlock ( ) ; for ( int j = NUM00 ; j < sblock . numRows ( ) ; j ++ ) if $F20899 ( sblock , j ) { int apos = sblock . pos ( j ) ; $F64142 ( alen , sblock , j ) $F2027 aix = sblock . indexes ( j ) ; $F1986 avals = sblock . values ( j ) ; for ( $F5883 ( i , apos , alen ) ) { int cnt = sumRowSumGtLeColSumLtGe ( avals [ i ] , bv , bOp ) ; out . quickSetValue ( NUM00 , aix [ i ] , cnt ) ; } } }
public HeldLocksGrant ( BigInteger grantId ) { this . grantId = Preconditions . checkNotNull ( grantId ) ; $F3224 ( creationDateMs , System ) expirationDateMs = - NUM00 ; lockMap = LockCollections . of ( ) ; lockTimeout = null ; versionId = null ; }
public void testPosNegFirstShorter $F72 { $F50446 $F92469 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F37344 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public void removeFromAllListeners ( MapBean mapBean ) { if ( mapBean != null ) { removeZoomListener ( ( ZoomListener ) mapBean ) ; mapBean . removeProjectionListener ( this ) ; $F15121 ( scaleField ) } }
public void testBug19169 $F72 throws Exception { MysqlDataSource toSerialize = new MysqlDataSource $F72 ; toSerialize . setZeroDateTimeBehavior ( NUM00 ) ; boolean testBooleanFlag = ! toSerialize . getAllowLoadLocalInfile ( ) ; toSerialize . setAllowLoadLocalInfile ( testBooleanFlag ) ; int testIntFlag = toSerialize . getBlobSendChunkSize ( ) + NUM00 ; toSerialize . setBlobSendChunkSize ( String . valueOf ( testIntFlag ) ) ; $F1538 ( bOut ) $F7054 ( objOut , bOut ) objOut . writeObject ( toSerialize ) ; $F1206 ( objOut ) $F164856 ( objIn , bOut ) MysqlDataSource thawedDs = ( MysqlDataSource ) objIn . readObject ( ) ; assertEquals ( NUM00 , thawedDs . getZeroDateTimeBehavior ( ) ) ; assertEquals ( testBooleanFlag , thawedDs . getAllowLoadLocalInfile ( ) ) ; assertEquals ( testIntFlag , thawedDs . getBlobSendChunkSize ( ) ) ; }
public static $F4203 FutureW $F4203 ofSupplier ( final $F33802 s ) { return FutureW . of ( CompletableFuture . supplyAsync ( s ) ) ; }
$F1 public void toData ( DataOutput out ) throws IOException { super . toData ( out ) ; out . writeLong ( refreshInterval ) ; DataSerializer . writeObjectArray ( alertDefs , out ) ; }
public static boolean isString ( String str ) { return null != stringHashTable . get ( str ) ; }
$F34537 ( listener , changingListeners )
$F1 public boolean equals ( Object obj ) { $F3627 ( this , obj , _BOOL ) $F1933 ( obj , _BOOL ) $F34838 ( getClass , obj , _BOOL ) Diff other = ( Diff ) obj ; $F12734 ( operation , other , _BOOL ) $F56936 ( text , other , _BOOL ) return _BOOL ; }
protected abstract void performDeployerActionOnSingleDeployable ( org . codehaus . cargo . container . deployer . Deployer deployer , org . codehaus . cargo . container . deployable . Deployable deployable , org . codehaus . cargo . container . deployer . DeployableMonitor monitor ) ;
$F1 public Tree $F4 extractBestMaxRuleParse ( int start , int end , $F3803 sentence ) { return extractBestMaxRuleParse1 ( start , end , NUM00 , sentence ) ; }
$F1 public int hashCode $F72 { if ( hash == NUM00 ) { int result = NUM00 ; $F26525 ( result , range ) $F39428 ( bitsWeight , Double , weight ) $F14881 ( result , bitsWeight ) hash = result ; } return hash ; }
private Instances voteDataset ( Instances dataset ) throws Exception { for ( $F208679 ( i , dataset ) ) { Instance inst = dataset . firstInstance ( ) ; inst = votedReclassifyExample ( inst ) ; dataset . add ( inst ) ; dataset . delete ( NUM00 ) ; } return dataset ; }
public void testCompareToPosPos1 $F72 { $F67214 $F10679 int aSign = NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F79260 ( assertEquals , aNumber , bNumber ) }
$F1 public String chooseClientAlias ( final $F806 keyType , final Principal [ ] issuers , final Socket socket ) { if ( keyManager != null ) { return keyManager . chooseClientAlias ( keyType , issuers , socket ) ; } $F1274 }
CSSElement parseCSS ( InputStreamReader r , HTMLComponent htmlC ) throws IOException { ExtInputStreamReader er = new ExtInputStreamReader ( r ) ; $F37759 ( parseCSS , er , htmlC ) }
protected PooledConnection create ( boolean incrementCounter ) { if ( incrementCounter ) $F5224 ( size ) PooledConnection con = new PooledConnection ( getPoolProperties ( ) , this ) ; return con ; }
void release $F72 { if ( sdBuffer != null ) $F33833 ( sdBuffer ) if ( aclBuffer != null ) $F33833 ( aclBuffer ) if ( sidList != null ) { for ( Long sid : sidList ) { LocalFree ( sid ) ; } } }
public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = $F48364 ( data ) ; writeStringToFile ( file , str , encoding , append ) ; }
private void parseSessionExpirationTimeInfo ( Element sess ) { String sid = null ; Long expTime = null ; $F9031 ( temp , sess ) $F57733 ( temp , sid ) $F321395 ( temp , sess ) if ( temp != null ) { expTime = new Long ( temp ) ; } sessionResponse . addSessionForGivenUUID ( sid , expTime ) ; }
public static long generate ( String value ) { $F1749 ( len , value ) long crc = NUM00 ; for ( $F119 ( i , len ) ) crc = next ( crc , value . charAt ( i ) ) ; return crc ; }
public ReplaceDialog ( JTextComponent text , FindReplaceActions finderActions ) { super ( ActionUtils . getFrameFor ( text ) , _BOOL ) ; initComponents ( ) ; registerKeyAction ( this ) ; textComponent = text ; finder = finderActions ; textComponent . addCaretListener ( this ) ; setLocationRelativeTo ( text . getRootPane ( ) ) ; }
public String dump ( X509Certificate certificate ) throws $F31549 { try { return $F196480 ( dump , certificate ) ; } catch ( IOException ex ) { throw new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; } catch ( CertificateEncodingException ex ) { throw new Asn1Exception ( res . getString ( NUM00 ) , ex ) ; } }
$F3803 findInPackage ( Test test , String packageName ) { $F10144 ( localClsssOrPkgs ) $F2936 ( packageName ) $F104855 urls ; try { urls = classloader . getResources ( packageName ) ; if ( ! urls . hasMoreElements ( ) ) $F115541 ( log , packageName ) } catch ( IOException ioe ) { $F34419 ( log , packageName ) return localClsssOrPkgs ; } return findInPackageWithUrls ( test , packageName , urls ) ; }
protected abstract Element makeTooltip ( DBIDRef id , double x , double y , double dotsize ) ;
public CloudObject ( String type , int permissions ) { accessPermissions = permissions ; values . put ( CloudStorage . TYPE_FIELD , type ) ; }
private static DecoderResult createDecoderResultFromAmbiguousValues ( int ecLevel , $F2027 codewords , $F2027 erasureArray , $F2027 ambiguousIndexes , $F26353 ( ambiguousIndexValues ) ) throws FormatException , ChecksumException { $F22974 ( ambiguousIndexCount , ambiguousIndexes ) int tries = NUM00 ; while ( tries -- > NUM00 ) { for ( $F1139 ( i , ambiguousIndexCount ) ) { codewords [ ambiguousIndexes [ i ] ] = ambiguousIndexValues [ i ] [ ambiguousIndexCount [ i ] ] ; } try $F19580 ( decodeCodewords , codewords , ecLevel , erasureArray ) catch ( ChecksumException ignored ) $F845 if $F9634 ( ambiguousIndexCount ) $F159373 ( ChecksumException ) for ( $F1139 ( i , ambiguousIndexCount ) ) { if ( ambiguousIndexCount [ i ] < ambiguousIndexValues [ i ] . length - NUM00 ) { ambiguousIndexCount [ i ] ++ ; $F597 } else { ambiguousIndexCount [ i ] = NUM00 ; if $F74408 ( i , ambiguousIndexCount ) $F159373 ( ChecksumException ) } } } throw ChecksumException . getChecksumInstance ( ) ; }
public double distance ( DoubleVector v ) { double deltaX = v . x - x , deltaY = v . y - y , deltaZ = v . z - z ; $F100238 ( Math , deltaX , deltaY , deltaZ ) }
$F1 public $F987 listOptions $F72 { $F20795 ( newVector ) $F77737 ( newVector ) $F77737 ( newVector ) $F77737 ( newVector ) newVector . add ( new Option ( $F39 , NUM00 , NUM00 , NUM00 ) ) ; newVector . add ( new Option ( $F41 , NUM00 , NUM00 , NUM00 ) ) ; $F424068 ( newVector ) $F1000 ( newVector ) $F77735 ( newVector ) $F1007 ( newVector ) }
$F1 public void dropUser ( User user , boolean ignore ) throws SQLException { String sql = String . format ( NUM00 , user . getLogin ( ) ) ; try { execute ( sql ) ; } catch ( SQLException e ) { if ( ! ignore ) { throw e ; } else if $F585 ( logger ) { logger . debug ( NUM00 + sql , e ) ; } } }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case InformationModelPackage . FUNCTIONBLOCK_PROPERTY__NAME : $F6439 ( NAME_EDEFAULT , name ) case InformationModelPackage . FUNCTIONBLOCK_PROPERTY__DESCRIPTION : $F6439 ( DESCRIPTION_EDEFAULT , description ) case InformationModelPackage . FUNCTIONBLOCK_PROPERTY__TYPE : return type != null ; } $F6444 ( super , featureID ) }
public double normalizedDistance $F6762 ( point1 , point2 ) throws Exception { return Math . sqrt ( distance2 ( point1 , point2 ) ) / point1 . length ; }
public static $F4203 void onNextDropped ( T t ) { if ( t != null ) { Consumer $F1432 hook = Hooks . onNextDroppedHook ; if ( hook == null ) { throw Exceptions . failWithCancel ( ) ; } hook . accept ( t ) ; } }
public static $F2027 randomInts ( int max , int count ) { $F4120 ( vals , count ) for ( $F119 ( i , count ) ) vals [ i ] = SEEDED_RANDOM . nextInt ( max ) ; return vals ; }
void loadStrings $F72 throws IOException { int count = mHeaderItem . stringIdsSize ; int stringOffsets [ ] = new int [ count ] ; seek ( mHeaderItem . stringIdsOff ) ; $F58179 ( i , count , stringOffsets , readInt ) $F58180 ( mStrings , count ) seek ( stringOffsets [ NUM00 ] ) ; for ( $F119 ( i , count ) ) { seek ( stringOffsets [ i ] ) ; mStrings [ i ] = readString ( ) ; } }
$F25635 ( timestamp , t , buildTag , TAG_GPS_DATE_STAMP , mGPSDateStampFormat , _BOOL , setTag , mGPSTimeStampCalendar , TAG_GPS_TIME_STAMP , Calendar )
public void addArea ( final TimeSection AREA ) { $F77681 ( AREA ) areas . add ( AREA ) ; Collections . sort ( areas , new TimeSectionComparator $F72 ) ; fireUpdateEvent ( SECTION_EVENT ) ; }
public String toString $F72 { return Descriptor . toClassName ( Character . toString ( descriptor ) ) ; }
private void raiseIOException $F18289 ( host , port , protocol ) { IOExceptionEvent ioError = new IOExceptionEvent ( this , host , port , protocol ) ; sipProvider . handleEvent ( ioError , null ) ; setState ( SIPDialog . TERMINATED_STATE ) ; }
public static double incompleteGammaComplement ( double a , double x ) { double ans , ax , c , yc , r , t , y , z ; double pk , pkm1 , pkm2 , qk , qkm1 , qkm2 ; if ( x <= NUM00 || a <= NUM00 ) $F1082 if ( x < NUM00 || x < a ) return NUM00 - incompleteGamma ( a , x ) ; ax = a * Math . log ( x ) - x - lnGamma ( a ) ; if ( ax < - MAXLOG ) $F1082 ax = Math . exp ( ax ) ; y = NUM00 - a ; z = x + y + NUM00 ; c = NUM00 ; pkm2 = NUM00 ; qkm2 = x ; pkm1 = x + NUM00 ; qkm1 = z * x ; ans = pkm1 / qkm1 ; do { c += NUM00 ; y += NUM00 ; z += NUM00 ; yc = y * c ; pk = pkm1 * z - pkm2 * yc ; qk = qkm1 * z - qkm2 * yc ; if ( qk != NUM00 ) { r = pk / qk ; t = Math . abs ( ( ans - r ) / r ) ; ans = r ; } else t = NUM00 ; pkm2 = pkm1 ; pkm1 = pk ; qkm2 = qkm1 ; qkm1 = qk ; if $F34222 ( Math , pk , big ) $F149602 ( pkm2 , biginv , pkm1 , qkm2 , qkm1 ) } while ( t > MACHEP ) ; return ans * ax ; }
$F1 public Object deserializeTypedFromObject ( JsonParser jp , DeserializationContext ctxt ) throws IOException , JsonProcessingException { JsonToken t = jp . getCurrentToken ( ) ; if ( t == JsonToken . START_OBJECT ) { $F39710 ( t , jp ) } else if ( t == JsonToken . START_ARRAY ) $F25228 ( _deserializeTypedUsingDefaultImpl , jp , ctxt ) else if ( t != JsonToken . FIELD_NAME ) $F25228 ( _deserializeTypedUsingDefaultImpl , jp , ctxt ) TokenBuffer tb = null ; for ( ; t == JsonToken . FIELD_NAME ; t = jp . nextToken ( ) ) { String name = jp . getCurrentName ( ) ; $F89223 ( jp ) if $F1238 ( _typePropertyName , name ) { $F45667 ( typeId , jp ) $F80651 deser = _findDeserializer ( ctxt , typeId ) ; if ( tb != null ) { jp = JsonParserSequence . createFlattened ( tb . asParser ( jp ) , jp ) ; } $F89223 ( jp ) return deser . deserialize ( jp , ctxt ) ; } if ( tb == null ) { tb = new TokenBuffer $F8320 ; } tb . writeFieldName ( name ) ; tb . copyCurrentStructure ( jp ) ; } return _deserializeTypedUsingDefaultImpl ( jp , ctxt , tb ) ; }
$F60342 ( mSmallestWidthDp , mInPortrait )
protected int layoutRow ( FlowView fv , int rowIndex , int p0 ) { int p1 = super . layoutRow ( fv , rowIndex , p0 ) ; View row = fv . getView ( rowIndex ) ; $F47177 ( doc , fv ) Object i18nFlag = doc . getProperty ( AbstractDocument . I18NProperty ) ; if ( ( i18nFlag != null ) && i18nFlag . equals ( Boolean . TRUE ) ) { int n = row . getViewCount ( ) ; if ( n > NUM00 ) { AbstractDocument d = ( AbstractDocument ) fv . getDocument ( ) ; Element bidiRoot = d . getBidiRootElement ( ) ; $F2175 ( levels , n ) $F52429 reorder = new View [ n ] ; for ( $F119 ( i , n ) ) { View v = row . getView ( i ) ; int bidiIndex = bidiRoot . getElementIndex ( v . getStartOffset ( ) ) ; $F20231 ( bidiElem , bidiRoot , bidiIndex ) levels [ i ] = ( byte ) StyleConstants . getBidiLevel ( bidiElem . getAttributes ( ) ) ; reorder [ i ] = v ; } BidiUtils . reorderVisually ( levels , reorder ) ; row . replace ( NUM00 , n , reorder ) ; } } return p1 ; }
public Generator ( String propFile ) { try { BufferedInputStream bi = null ; try { $F20278 ( bi , propFile ) props . load ( bi ) ; } $F14364 ( bi ) } catch ( Exception e ) $F5795 ( setDefaultProps ) }
public static void clearLoggingBehaviors $F72 { $F54044 ( loggingBehaviors ) }
protected void auditOp ( URI tenantId , URI userId , OperationTypeEnum opType , boolean operationalStatus , String operationStage , Object ... descparams ) { _auditMgr . recordAuditLog ( tenantId , userId , EVENT_SERVICE_TYPE , opType , System . currentTimeMillis ( ) , operationalStatus ? AuditLogManager . AUDITLOG_SUCCESS : AuditLogManager . AUDITLOG_FAILURE , operationStage , descparams ) ; }
$F1219 protected Process startExecutorProcess ( int container ) { return ShellUtils . runASyncProcess ( getExecutorCommand ( container ) , new File ( LocalContext . workingDirectory ( config ) ) , Integer . toString ( container ) ) ; }
private boolean isItemAtPositionSelectable ( int position ) { $F78369 ( mUnselectableItems , position ) }
public Builder addEngineSettings ( final String engineName , $F20109 ( imports ) , $F20109 ( staticImports ) , $F20109 ( scripts ) , $F87266 ( config ) ) { if ( null == imports ) $F824 if ( null == staticImports ) $F824 if ( null == scripts ) $F824 final $F529 m = null == config ? Collections . emptyMap ( ) : config ; settings . put ( engineName , new EngineSettings ( imports , staticImports , scripts , m ) ) ; return this ; }
private void displayPopupMenu ( final MouseEvent event ) { final int selectedIndex = getSelectionIndex ( event ) ; if ( selectedIndex != - NUM00 ) { final JPopupMenu popupMenu = getPopupMenu ( event . getX ( ) , event . getY ( ) , selectedIndex ) ; if ( popupMenu != null ) $F268505 ( popupMenu , this , event ) } }
protected void handleSelected ( StructuredSelection selection ) { IStatus status = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , EMPTY_ <missing ';'> NUM00 , null ) ; $F131 lastSelection = currentSelection ; currentSelection = selection . toArray ( ) ; if $F10471 ( selection ) { status = new Status ( IStatus . ERROR , PlatformUI . PLUGIN_ID , IStatus . ERROR , EMPTY_ <missing ';'> NUM00 , null ) ; if ( lastSelection != null && getListSelectionLabelDecorator ( ) != null ) { list . update ( lastSelection , null ) ; } currentSelection = null ; } else { status = new Status ( IStatus . ERROR , PlatformUI . PLUGIN_ID , IStatus . ERROR , EMPTY_ <missing ';'> NUM00 , null ) ; List items = selection . toList ( ) ; Object item = null ; IStatus tempStatus = null ; for ( $F2774 ( it , items ) ) { $F8877 ( o , it ) if ( o instanceof ItemsListSeparator ) $F1448 item = o ; tempStatus = validateItem ( item ) ; if ( tempStatus . isOK ( ) ) { status = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , EMPTY_ <missing ';'> NUM00 , null ) ; } else $F3468 ( status , tempStatus ) } if ( lastSelection != null && getListSelectionLabelDecorator ( ) != null ) { list . update ( lastSelection , null ) ; } if $F89491 ( getListSelectionLabelDecorator ) { list . update ( currentSelection , null ) ; } } refreshDetails ( ) ; updateStatus ( status ) ; }
public $F16501 diff_main $F22381 ( text1 , text2 , checklines ) { long deadline ; if ( Diff_Timeout <= NUM00 ) $F7984 ( deadline , Long ) else { deadline = System . currentTimeMillis ( ) + $F139814 ( Diff_Timeout ) ; } return diff_main ( text1 , text2 , checklines , deadline ) ; }
private void updateAltDeviceid ( NetworkFCZoneInfo fabricInfo , String fabricId , String fabricWWN , String key , Map < String , NetworkLite > fabricId2Network ) { if ( fabricInfo != null && fabricInfo . getAltNetworkDeviceId ( ) == null ) { if $F4257 ( fabricId2Network , key ) { NetworkLite network = NetworkUtil . getNetworkLiteByFabricId ( fabricId , fabricWWN , _dbClient ) ; if ( network != null ) { fabricId2Network . put ( key , network ) ; URI id = fabricInfo . getNetworkDeviceId ( ) ; for ( String strUri : network . getNetworkSystems ( ) ) { if ( ! strUri . equals ( id . toString ( ) ) ) { id = URI . create ( strUri ) ; $F597 } } fabricInfo . setAltNetworkDeviceId ( id ) ; } } } }
public static NetworkInfo fromVersion ( final byte version ) { for ( final NetworkInfo info : KNOWN_NETWORKS ) { if ( version == info . getVersion ( ) ) { return info ; } } throw new IllegalArgumentException $F10797 ( String , version ) ; }
public static String lcfirst ( String input ) $F13736 ( withFirst , input )
public void write ( ByteCodeWriter out ) throws IOException { out . writeUTF8Const ( getName ( ) ) ; TempOutputStream ts = new TempOutputStream $F72 ; ByteCodeWriter o2 = new ByteCodeWriter ( ts , out . getJavaClass ( ) ) ; $F137196 ( o2 , _exceptions ) for ( $F2277 ( i , _exceptions ) ) { $F1729 ( exn , _exceptions , i ) o2 . writeClass ( exn ) ; } $F59 ( ts ) out . writeInt ( ts . getLength ( ) ) ; TempBuffer ptr = ts . getHead ( ) ; for ( ; ptr != null ; ptr = ptr . next ( ) ) out . write ( ptr . buffer ( ) , NUM00 , ptr . length ( ) ) ; $F17623 ( ts ) }
public synchronized AddressbookEntry remove $F205115 ( name , categoriesToRemove ) { $F33289 ( name , StringUtil ) AddressbookEntry currentEntry = entries . get ( name ) ; if ( currentEntry != null ) { $F2689 currentCategories = currentEntry . getCategories ( ) ; $F96731 ( category , categoriesToRemove , currentCategories ) AddressbookEntry changedEntry = new AddressbookEntry ( name , currentCategories ) ; entries . put ( name , changedEntry ) ; if ( ! currentEntry . equalsFully ( changedEntry ) ) $F5795 ( saveOnChange ) return changedEntry ; } $F1274 }
$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System )
public String shortestMatch ( String input ) { TrieNode node = root ; for ( $F186068 ( i , input ) ) { $F93781 ( node , input , i ) $F1275 ( node ) if $F93782 ( node ) $F32744 ( input , i ) } $F1274 }
public static boolean isWindows95 $F72 $F98764 ( osName , osVersion )
public static RHExtension hasRHExtensions ( ConfigImpl config , ExtensionDefintion ed ) throws PageException , SAXException , IOException { XMLConfigAdmin admin = new XMLConfigAdmin ( config , null ) ; return admin . _hasRHExtensions ( config , ed ) ; }
public void addQueryToHistory ( String sql ) { queryHistory . remove ( sql ) ; queryHistory . addFirst ( sql ) ; while ( historySize >= NUM00 && queryHistory . size ( ) > historySize ) $F165684 ( queryHistory ) }
public StringBuilder encodeBody ( StringBuilder retval ) { retval . append ( LESS_THAN ) ; errorInfo . encode ( retval ) ; retval . append ( GREATER_THAN ) ; $F122474 ( parameters , retval , SEMICOLON ) return retval ; }
public final $F23350 ParallelFlux $F23350 reduce ( Supplier $F23350 initialSupplier , BiFunction < R , T , R > reducer ) { $F10578 ( Objects , initialSupplier ) $F10578 ( Objects , reducer ) return onAssembly ( new ParallelReduce $F200 ( this , initialSupplier , reducer ) ) ; }
private void handleButtonEvent ( final Event event ) { switch ( event . type ) { case SWT . FocusIn : { handleFocusEvents ( SWT . FocusIn ) ; $F597 } case SWT . Selection : { changeVisibilityOfPopupWindow ( ! isDropped ( ) ) ; $F597 } } }
private void performUpdateOperations ( Context context , Request request , JsonValue afterValue , JsonValue beforeValue ) throws ResourceException { final String managedId = getManagedObjectId ( context ) ; activityLogger . log ( context , request , NUM00 , getManagedObjectPath ( context ) , beforeValue , afterValue , Status . SUCCESS ) ; managedObjectSetService . update ( context , newUpdateRequest ( managedId , afterValue ) , managedId , null , beforeValue , afterValue , $F202502 ( Arrays , propertyPtr ) , $F202502 ( Arrays , propertyPtr ) ) ; }
private boolean hasNextInetSocketAddress $F72 $F231867 ( nextInetSocketAddressIndex , inetSocketAddresses )
public static Boolean canStringBeInlineEncoded ( String skey ) { if ( skey . length ( ) > getMaxInlineStringKey ( MAX_LONGS_USED_FOR_ <missing ')'> NUM00 <missing ';'> _KEY , _BOOL ) ) $F1337 if ( isByteEncodingOk ( skey ) ) $F29943 ( Boolean ) else { if ( skey . length ( ) > getMaxInlineStringKey ( MAX_LONGS_USED_FOR_ <missing ')'> NUM00 <missing ';'> _KEY , _BOOL ) ) $F1337 else { return Boolean . FALSE ; } } }
public Builder ( Date created , Date lastModified ) { this . created = created != null ? $F207437 ( created ) : null ; this . lastModified = lastModified != null ? $F207437 ( lastModified ) : null ; }
$F1 public void writeByteStream ( InputStream is ) throws IOException { while ( _BOOL ) { int len = SIZE - _offset - NUM00 ; if ( len < NUM00 ) { flushBuffer ( ) ; len = SIZE - _offset - NUM00 ; } len = is . read ( _buffer , _offset + NUM00 , len ) ; if ( len <= NUM00 ) { _buffer [ _offset ++ ] = BC_BINARY_DIRECT ; $F665 } _buffer [ _offset + NUM00 ] = ( byte ) BC_BINARY_CHUNK ; _buffer [ _offset + NUM00 ] = $F8043 ( len ) ; $F76528 ( _buffer , _offset , len ) _offset += len + NUM00 ; } }
public void removeSelectionChangeListener ( final SelectionChangeListener listener ) { checkWidget ( ) ; $F234144 ( listener , SWT ) $F2329 ( selectionChangeListeners ) selectionChangeListeners . remove ( listener ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
public Track addTrack ( String name , String type ) { Track track = getTrackByName ( name , type ) ; if ( track == null ) { _IdNumber ++ ; String id = _id + NUM00 + Integer . toString ( _IdNumber ) ; log . debug ( NUM00 , type , getName ( ) , name , id ) ; track = new Track ( id , name , type , this ) ; register ( track ) ; } resetMoves ( ) ; return track ; }
SQLiteLoaderObserver registerLoader ( final SQLiteLoader loader , final String table ) { $F96563 ( Logger , TAG , table ) final SQLiteLoaderObserver entry = new SQLiteLoaderObserver ( loader , table ) ; mActiveLoaders . add ( entry ) ; return entry ; }
public void unbindTree ( Container ui ) { $F60281 ( componentCount , ui ) for ( $F119 ( iter , componentCount ) ) { Component c = ui . getComponentAt ( iter ) ; if ( c instanceof Container ) { unbindTree ( ( Container ) c ) ; $F598 } String bind = c . getCloudBoundProperty ( ) ; if $F22 ( bind ) { String attributeName = c . getCloudDestinationProperty ( ) ; if ( attributeName != null ) { unbindProperty ( c , bind ) ; } } } }
protected $F291208 toItems ( List < Model > models ) { $F79983 ( models , Collections ) $F115 ( size , models ) $F291208 $F10252 ( items , size ) ; for ( $F119 ( i , size ) ) { items . add ( toItem ( models . get ( i ) ) ) ; } return items ; }
public void apply ( FilterSet filterSet , FilterServiceGranularLockFactory lockFactory ) { for ( FilterSetEntry entry : filterSet . getFilters ( ) ) { add ( entry . getFilterValueSet ( ) , entry . getHandle ( ) , lockFactory ) ; } }
public void addConstraintCommand ( DefineCommand command ) { if ( command instanceof CreateIndex ) $F207 ( constraintCommands , command ) else { AlterTableAddConstraint con = ( AlterTableAddConstraint ) command ; boolean alreadySet ; if ( con . getType ( ) == CommandInterface . ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY ) { alreadySet = setPrimaryKeyColumns ( con . getIndexColumns ( ) ) ; } else { alreadySet = _BOOL ; } $F45123 ( alreadySet , constraintCommands , command ) } }
public void testInviteCancel $F72 { doCancelTest ( _BOOL ) ; }
private static $F96 lmv2Response ( final $F96 hash , final $F96 challenge , final $F96 clientData ) throws AuthenticationException { final HMACMD5 hmacMD5 = new HMACMD5 ( hash ) ; hmacMD5 . update ( challenge ) ; hmacMD5 . update ( clientData ) ; final $F96 mac = hmacMD5 . getOutput ( ) ; final $F96 lmv2Response = new byte $F12348 ( mac , clientData ) ; $F7057 ( System , mac , lmv2Response ) $F11244 ( System , clientData , lmv2Response , mac ) return lmv2Response ; }
static $F11685 E checkType ( E obj , Class $F22448 type ) { if ( obj != null && ! type . isInstance ( obj ) ) { throw new ClassCastException ( $F29695 ( obj ) + type ) ; } return obj ; }
public void testValueOfLongPositive1 $F72 { long longVal = NUM00 ; $F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { NUM00 , - NUM00 , - NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , aNumber ) }
public void destroy $F72 { m_filterConfig = null ; }
$F1 public Parcelable onSaveInstanceState $F72 { String path = mPhotoFilePath . get ( ) ; $F1275 ( path ) $F53033 ( bundle ) $F186974 ( bundle , path ) return bundle ; }
public static boolean createFolder ( String folderPath ) { if $F20899 ( TextUtils , folderPath ) { $F1705 ( folder , folderPath ) return createFolder ( folder ) ; } return _BOOL ; }
public void test_emptyJournal $F72 throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { final Future < Map $F498804 > f = src . warmUp ( null ) ; final Map $F498804 map = f . get ( ) ; $F70108 ( assertEquals , map ) } $F17625 ( src ) } $F105993 ( out ) }
$F1 public void keyReleased ( KeyEvent e ) { $F94141 ( password1 ) $F94141 ( password2 ) if ( passwordField != null ) { $F100094 ( password1 , passwordField ) } if ( repeatPasswordField != null ) { $F100094 ( password2 , repeatPasswordField ) } boolean tickLabelVisible = _BOOL ; if ( password1 != null && password2 != null ) { $F169223 ( Arrays , password1 , password2 , tickLabelVisible , _BOOL ) } tickLabel . setVisible ( tickLabelVisible ) ; clearMessages ( ) ; $F169226 ( i , password1 ) $F169226 ( i , password2 ) }
private static PeriodFormatterAndValue selectFormatter ( Period daysPeriod ) { int days = daysPeriod . getDays ( ) ; if ( days > NUM00 ) $F8587 ( pav , DAY_FORMATTER , days ) int hours = daysPeriod . getHours ( ) ; if ( hours > NUM00 ) $F8587 ( pav , HOUR_FORMATTER , hours ) int minutes = daysPeriod . getMinutes ( ) ; if ( minutes > NUM00 ) $F8587 ( pav , MINUTE_FORMATTER , minutes ) int seconds = daysPeriod . getSeconds ( ) ; if ( seconds > NUM00 ) $F8587 ( pav , SECOND_FORMATTER , seconds ) $F1274 }
void addArg ( String arg ) $F207 ( args , arg )
public $F21637 insert ( int offset , float f ) { internal . insert ( offset , f ) ; return this ; }
private void updateGwt27On ( IJavaProject javaProject , $F3803 programArgs , int indexDisabled , int indexEnabled , boolean superDevModeEnabled ) { if ( indexEnabled > - NUM00 ) $F106 ( programArgs , indexEnabled ) if ( indexDisabled > - NUM00 ) $F106 ( programArgs , indexDisabled ) if ( ! superDevModeEnabled ) $F6966 ( programArgs , SUPERDEVMODE_DISABLED_ARG ) }
default boolean smashBlock ( EntityPlayer player , World world , BlockPos pos , IBlockState state , ToolTier tier ) { ToolTier required = getRequiredTier ( state ) ; if ( required != null && tier . isGreaterThanOrEqualTo ( required ) ) { float luck = tier . ordinal ( ) * NUM00 ; List $F13970 drops = getDrops ( player , world , pos , state , luck ) ; if $F3817 ( drops ) { if ( ! world . isRemote ) { world . setBlockToAir ( pos ) ; for ( ItemStack drop : drops ) { spawnAsEntity ( world , pos , drop ) ; } } return _BOOL ; } } return _BOOL ; }
protected String fetchNativeId ( String nativeGuid ) { $F806 token = nativeGuid . split ( VNXFileConstants . PLUS_SEPERATOR ) ; return $F8528 ( token ) ; }
public static String toString ( final double value ) $F23210 ( Double , value )
public long rss $F72 $F12907 ( Long , fields )
public static void init ( Context context , boolean is_top ) { cameraManager = new CameraManager ( context , is_top ) ; }
public static PlainText plain ( float text ) $F21034 ( plain , Float , text )
public final void append ( char value ) { $F1469 chunk ; if ( m_firstFree < m_chunkSize ) chunk = m_array [ m_lastChunk ] ; else { int i = m_array . length ; if ( m_lastChunk + NUM00 == i ) { $F10849 newarray = new char $F10850 ( i ) ; $F135 ( System , m_array , newarray , i ) m_array = newarray ; } chunk = m_array [ ++ m_lastChunk ] ; if ( chunk == null ) { if ( m_lastChunk == NUM00 < < m_rebundleBits && m_chunkBits < m_maxChunkBits ) { m_innerFSB = new FastStringBuffer ( this ) ; } chunk = m_array [ m_lastChunk ] = new char [ m_chunkSize ] ; } m_firstFree = NUM00 ; } chunk [ m_firstFree ++ ] = value ; }
public Socket createSocket ( InetAddress address , int port , InetAddress myAddress , int myPort ) throws IOException { if ( myAddress != null ) { $F12832 ( sock ) sock . bind ( new InetSocketAddress ( myAddress , NUM00 ) ) ; try { sock . connect ( new InetSocketAddress ( address , port ) , NUM00 ) ; } catch ( SocketTimeoutException e ) { throw new ConnectException ( NUM00 + address + NUM00 + port ) ; } return sock ; } else { $F12832 ( sock ) if ( myPort != NUM00 ) { sock . bind ( new InetSocketAddress ( port ) ) ; } try { sock . connect ( new InetSocketAddress ( address , port ) , NUM00 ) ; } catch ( SocketTimeoutException e ) { throw new ConnectException ( NUM00 + address + NUM00 + port ) ; } return sock ; } }
private static void updateClusterTenant ( DbClient dbClient , URI dataCenterId , URI tenantId ) { List < NamedElement > clustersUris = listChildren ( dbClient , dataCenterId , Cluster . class , NUM00 , NUM00 ) ; for ( NamedElement clusterUri : clustersUris ) { Cluster cluster = dbClient . queryObject ( Cluster . class , clusterUri . getId ( ) ) ; if ( cluster != null ) { cluster . setTenant ( tenantId ) ; dbClient . persistObject ( cluster ) ; } } }
public static int prefixLength $F17564 ( s1 , s2 ) { int len = NUM00 ; $F31444 ( max , Math , s1 , s2 ) for ( int i = NUM00 ; i < max && s1 [ i ] == s2 [ i ] ; ++ i ) ++ len ; return len ; }
private static boolean isLessThanOneWeek ( Date date ) { $F4377 ( calendar , Calendar ) calendar . add ( Calendar . DAY_OF_MONTH , - NUM00 ) ; return date . after ( calendar . getTime ( ) ) ; }
private int colToLoc ( int col , Vector < MappingPair > vec ) { int loc = col ; for ( int i = NUM00 ; $F1765 ( i , vec ) && ( vec . elementAt ( i ) . col <= col ) ; i ++ ) { loc = loc + vec . elementAt ( i ) . inc ; } return loc ; }
protected $F8748 canHandleNClasses ( AttrTypes attrTypes , int numClasses ) { print ( NUM00 ) ; printAttributeSummary ( attrTypes , Attribute . NOMINAL ) ; print ( NUM00 ) ; $F8728 ( accepts ) $F18793 ( accepts ) $F18793 ( accepts ) int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , missingLevel = NUM00 ; boolean attributeMissing = _BOOL , classMissing = _BOOL ; int numAttr = NUM00 , attrIndex = NUM00 ; return runBasicTest ( attrTypes , numAttr , attrIndex , Attribute . NOMINAL , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
public TypeVariable typeVariable $F72 { $F2199 ( id , typeVariableList ) $F722 ( typeVariableList ) TypeVariable result = new TypeVariable ( id , this ) ; typeVariableList . set ( id , result ) ; return result ; }
public static $F1469 createTypeParameterSignature ( $F1469 typeParameterName , $F28330 ( boundSignatures ) ) { int length = boundSignatures . length ; if ( length == NUM00 ) { return CharOperation . append ( typeParameterName , C_COLON ) ; } int boundsSize = NUM00 ; for ( $F119 ( i , length ) ) { boundsSize += boundSignatures [ i ] . length + NUM00 ; } int nameLength = typeParameterName . length ; $F1469 result = new char [ nameLength + boundsSize ] ; $F135 ( System , typeParameterName , result , nameLength ) int index = nameLength ; for ( $F119 ( i , length ) ) { result [ index ++ ] = C_COLON ; int boundLength = boundSignatures [ i ] . length ; System . arraycopy ( boundSignatures [ i ] , NUM00 , result , index , boundLength ) ; index += boundLength ; } return result ; }
void cancelStatement ( String sessionId , int statementId ) { for ( TcpServerThread c : New . arrayList ( running ) ) { if ( c != null ) { c . cancelStatement ( sessionId , statementId ) ; } } }
public static double parseDouble ( String s ) { if $F1238 ( POSITIVE_INFINITY , s ) $F90685 ( Double ) else if $F1238 ( NEGATIVE_INFINITY , s ) $F86429 ( Double ) else if $F1238 ( NaN , s ) $F6623 ( Double ) else { s = trimPlusSign ( s ) ; return Double . parseDouble ( s ) ; } }
public void finishZombieTasksWithError $F72 { List < PollableTask > zombiePollableTasks ; do { $F980 ( logger ) PageRequest pageable = new PageRequest $F32532 ; zombiePollableTasks = pollableTaskRepository . findZombiePollableTasks ( pageable ) ; for ( PollableTask zombiePollableTask : zombiePollableTasks ) { markAsFinishedWithError ( zombiePollableTask ) ; } } while $F5973 ( zombiePollableTasks ) ; }
public CookieEntity ( URI uri , HttpCookie cookie ) { this . uri = $F48364 ( uri ) ; this . name = cookie . getName ( ) ; this . value = cookie . getValue ( ) ; this . comment = cookie . getComment ( ) ; this . commentURL = cookie . getCommentURL ( ) ; this . discard = cookie . getDiscard ( ) ; this . domain = cookie . getDomain ( ) ; long maxAge = cookie . getMaxAge ( ) ; if ( maxAge != - NUM00 && maxAge > NUM00 ) { this . expiry = ( maxAge * NUM00 ) + System . currentTimeMillis ( ) ; if ( this . expiry < NUM00 ) this . expiry = HeaderUtil . getMaxExpiryMillis ( ) ; } else this . expiry = - NUM00 ; this . path = cookie . getPath ( ) ; if ( ! TextUtils . isEmpty ( path ) && $F20 ( path ) && path . endsWith ( NUM00 ) ) { this . path = $F4019 ( path ) ; } this . portList = cookie . getPortlist ( ) ; this . secure = cookie . getSecure ( ) ; this . version = cookie . getVersion ( ) ; }
public void addValue ( T value ) { list . addFirst ( value ) ; total += $F173338 ( Double , value ) ; trim ( ) ; }
private void updateTrafficMask $F72 { $F2199 ( queueSize , trafficControllingSessions ) while ( queueSize > NUM00 ) { S session = trafficControllingSessions . poll ( ) ; $F2329 ( session ) SessionState state = getState ( session ) ; switch ( state ) { $F20998 ( OPENED , updateTrafficControl , session ) case CLOSING : $F597 case OPENING : trafficControllingSessions . add ( session ) ; $F597 $F1267 throw new IllegalStateException $F45942 ( String , state ) ; } queueSize -- ; } }
public Object createSoftWeakRef ( Object o ) { return new WeakReference ( o ) ; }
public boolean hasEntries $F72 $F3387 ( fEntries )
protected String convertToString ( Object value ) throws Throwable { String result = null ; if ( useLocaleFormat && value instanceof Number ) { NumberFormat format = getFormat ( ) ; format . setGroupingUsed ( _BOOL ) ; result = format . format ( value ) ; } else $F84156 ( result , value ) return result ; }
$F46370 ( bits , result , upperShift , _BOOL , cValues , shift , firstByte , parseTwoBytes , i , cValue , C40_BASIC_SET_CHARS , c40char , FormatException , C40_SHIFT2_SET_CHARS )
public EsriShapeExport ( OMGraphicList list , Projection proj , String pathToFile ) { setGraphicList ( list ) ; projection = proj ; filePath = pathToFile ; DEBUG = $F5288 ( logger , Level ) ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
private void checkLogFolder $F72 { $F1705 ( folder , folderPath ) $F1909 ( folder ) }
private void testCompleteOnTimeout_timesOut ( Integer v ) { long timeoutMillis = timeoutMillis ( ) ; $F70225 ( f ) $F25238 ( startTime , System ) assertSame ( f , f . completeOnTimeout ( v , timeoutMillis , MILLISECONDS ) ) ; assertSame ( v , f . join ( ) ) ; assertTrue ( millisElapsedSince ( startTime ) >= timeoutMillis ) ; f . complete ( NUM00 ) ; checkCompletedNormally ( f , v ) ; }
private synchronized void reschedule ( long millis ) { currentFut = null ; if ( ! closed ) { SCHEDULER . schedule ( null , millis , TimeUnit . MILLISECONDS ) ; } else { try $F881 ( underlying ) catch ( Exception ex ) { LOG . log ( Level . WARNING , NUM00 + underlying . configString ( ) , ex ) ; } } }
public static ContentVerifierProvider createDefaultContentVerifier ( PublicKey key ) throws OperatorCreationException { if ( NUM00 == key . getAlgorithm ( ) ) { return SUN_VERIFICATION_BUILDER . build ( key ) ; } else { return BC_VERIFICATION_BUILDER . build ( key ) ; } }
public static Uri fromFile ( File file ) { $F896 ( file ) PathPart path = PathPart . fromDecoded ( file . getAbsolutePath ( ) ) ; return new HierarchicalUri ( NUM00 , Part . EMPTY , path , Part . NULL , Part . NULL ) ; }
public void addRule ( final Rule rule ) { rule . setId ( ruleIdCounter ++ ) ; rules . add ( rule ) ; }
public static Object serializeClone ( final Object obj ) throws $F6427 { $F1538 ( memOut ) $F7054 ( objOut , memOut ) objOut . writeObject ( obj ) ; $F59 ( objOut ) $F153946 ( src , memOut ) $F67402 ( objIs , src ) $F287819 ( objIs ) }
private static String linkForClassName ( String name ) { return $F2934 ( name ) + NUM00 ; }
protected void handleElementDeleted ( IEditorInput fileEditorInput ) { fireElementDeleted ( fileEditorInput ) ; }
public void assertTextPresent ( String expected , String actual ) { if ( ( actual == null ) || $F2200 ( actual , expected ) ) { throw new AssertionFailedError $F6486 ( expected , actual ) ; } }
public void testUsingProxySelector $F72 throws Exception { $F14426 ( server ) $F14426 ( proxy ) URL url = new URL ( NUM00 + server . port ( ) ) ; $F24457 ( defPS , ProxySelector ) ProxySelector . setDefault ( new TestProxySelector ( server . port ( ) , proxy . port ( ) ) ) ; try { $F7963 ( connection , url ) $F14447 ( connection ) $F14448 ( connection ) $F2346 ( server ) $F14453 ( bound , server ) $F2346 ( proxy ) $F14453 ( bound , proxy ) $F2410 ( connection ) $F14454 ( server ) $F14454 ( proxy ) assertTrue ( NUM00 , connection . usingProxy ( ) ) ; assertTrue ( NUM00 , proxy . accepted ) ; $F8074 ( connection ) assertTrue ( NUM00 , connection . usingProxy ( ) ) ; } finally $F24465 ( ProxySelector , defPS ) }
public String codeCleanPipeline ( String contents ) { if ( contents == null ) { return Values . EMPTY "STRING" ; } $F83 ( indexContents ) $F1469 firstReplacements = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; for ( char c : firstReplacements ) { contents = contents . replace ( c , NUM00 ) ; } $F84 ( indexContents ) indexContents . append ( contents ) ; $F1469 $F167305 ( secondReplacements ) ; for ( char c : secondReplacements ) { contents = contents . replace ( c , NUM00 ) ; } $F84 ( indexContents ) indexContents . append ( contents ) ; $F1469 forthReplacements = $F4582 ; for ( char c : forthReplacements ) { contents = contents . replace ( c , NUM00 ) ; } $F84 ( indexContents ) indexContents . append ( contents ) ; $F1469 replacements = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; for ( char c : replacements ) { contents = contents . replace ( c , NUM00 ) ; } $F84 ( indexContents ) indexContents . append ( contents ) ; $F1469 thirdReplacements = $F21901 ; for ( char c : thirdReplacements ) { contents = contents . replace ( c , NUM00 ) ; } $F84 ( indexContents ) indexContents . append ( contents ) ; $F92 ( indexContents ) }
public static String mrpa2sampa ( String voicePhoneme ) { if $F1710 ( mrpa2sampa , voicePhoneme ) $F8313 ( mrpa2sampa , voicePhoneme ) else return voicePhoneme ; }
public static XPath2FilterContainer newInstanceIntersect ( Document doc , String xpath2filter ) { return new XPath2FilterContainer ( doc , xpath2filter , XPath2FilterContainer . _ATT_FILTER_VALUE_INTERSECT ) ; }
public int lineToY ( int line ) { $F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; }
public void removeItemChangedListener ( ItemChangedListener listener ) $F106 ( itemChangedListeners , listener )
public boolean hasAmbigPrefix $F72 { return $F7311 ( name , ambigPrefix ) ; }
public OrderedThreadPoolExecutor ( int maximumPoolSize ) { this ( DEFAULT_INITIAL_THREAD_POOL_SIZE , maximumPoolSize , DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , Executors . defaultThreadFactory ( ) , null ) ; }
private String parseMalformed ( String urlString ) { if $F1032 ( parts ) { String ret ; for ( URLPart part : parts ) { switch ( part ) { case PROTOCOL : ret = applyPattern ( REGEX_PROTOCOL , urlString ) ; $F597 case PORT : ret = applyPattern ( REGEX_PORT , urlString ) ; $F597 case QUERY : ret = applyPattern ( REGEX_QUERY , urlString ) ; $F597 case WHOLE : ret = urlString ; $F597 $F1267 ret = urlString ; } if $F48189 ( Strings , ret ) { return ret ; } } } return urlString ; }
private boolean relocate $F72 { boolean finished = _BOOL ; for ( Relocatable relocatable : this . relocatables ) { finished &= relocatable . relocate ( ) ; } return finished ; }
$F45923 private Map < K , EntryProcessorResult > updateWithBatch ( GridCacheOperation op , Collection < $F13144 > keys , $F5466 $F247465 vals , $F5466 $F131 invokeArgs , $F5466 ExpiryPolicy expiryPlc , GridCacheVersion ver , $F5466 CacheEntryPredicate [ ] filter , boolean keepBinary , UUID subjId , String taskName ) throws IgniteCheckedException { List < GridCacheEntryEx > locked = lockEntries ( keys ) ; try { $F115 ( size , locked ) $F276224 putMap = null ; $F5363 rmvKeys = null ; List < CacheObject > writeVals = null ; Map < K , EntryProcessorResult > invokeResMap = op == TRANSFORM ? U . < K , EntryProcessorResult > newHashMap ( size ) : null ; List < GridCacheEntryEx > $F10252 ( filtered , size ) ; CachePartialUpdateCheckedException err = null ; $F33240 valsIter = vals != null ? vals . iterator ( ) : null ; boolean intercept = ctx . config ( ) . getInterceptor ( ) != null ; for ( $F119 ( i , size ) ) { GridCacheEntryEx entry = locked . get ( i ) ; Object val = valsIter != null ? valsIter . next ( ) : null ; if ( val == null && op != DELETE ) $F894 try { try { if ( ! ctx . isAllLocked ( entry , filter ) ) { if $F585 ( log ) log . debug ( $F87168 ( entry , Arrays , filter ) ) ; $F598 } } catch ( IgniteCheckedException e ) { if ( err == null ) err = partialUpdateException ( ) ; err . add ( F . asList ( entry . key ( ) ) , e ) ; $F598 } if ( op == TRANSFORM ) { ctx . kernalContext ( ) . resource ( ) . inject ( val , GridResourceIoc . AnnotationSet . ENTRY_PROCESSOR , ctx . name ( ) ) ; EntryProcessor < Object , Object , Object > entryProcessor = ( EntryProcessor < Object , Object , Object > ) val ; CacheObject old = entry . innerGet ( null , null , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , subjId , entryProcessor , taskName , null , keepBinary ) ; Object oldVal = null ; CacheInvokeEntry $F75026 invokeEntry = new CacheInvokeEntry $F200 ( entry . key ( ) , old , entry . version ( ) , keepBinary , entry ) ; CacheObject updated ; Object updatedVal = null ; CacheInvokeResult invokeRes = null ; try { Object computed = entryProcessor . process ( invokeEntry , invokeArgs ) ; updatedVal = ctx . unwrapTemporary ( invokeEntry . getValue ( ) ) ; updated = ctx . toCacheObject ( updatedVal ) ; if ( computed != null ) invokeRes = CacheInvokeResult . fromResult ( ctx . unwrapTemporary ( computed ) ) ; } catch ( Exception e ) { invokeRes = CacheInvokeResult . fromError ( e ) ; updated = old ; } if ( invokeRes != null ) invokeResMap . put ( ( K ) entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) , invokeRes ) ; if ( updated == null ) { if ( intercept ) { IgniteBiTuple < Boolean , ? > interceptorRes = ctx . config ( ) . getInterceptor ( ) . onBeforeRemove ( new CacheLazyEntry ( ctx , entry . key ( ) , invokeEntry . key ( ) , old , oldVal , keepBinary ) ) ; if ( ctx . cancelRemove ( interceptorRes ) ) $F598 } if ( putMap != null ) { err = updatePartialBatch ( filtered , ver , writeVals , putMap , null , expiryPlc , keepBinary , err , subjId , taskName ) ; putMap = null ; writeVals = null ; $F9404 ( filtered ) } if ( rmvKeys == null ) $F10253 ( rmvKeys , size ) rmvKeys . add ( entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) ) ; } else { if ( intercept ) { Object interceptorVal = ctx . config ( ) . getInterceptor ( ) . onBeforePut ( new CacheLazyEntry ( ctx , entry . key ( ) , invokeEntry . getKey ( ) , old , oldVal , keepBinary ) , updatedVal ) ; $F45557 ( interceptorVal ) updated = ctx . toCacheObject ( ctx . unwrapTemporary ( interceptorVal ) ) ; } if ( rmvKeys != null ) { err = updatePartialBatch ( filtered , ver , null , null , rmvKeys , expiryPlc , keepBinary , err , subjId , taskName ) ; rmvKeys = null ; $F9404 ( filtered ) } if ( putMap == null ) { putMap = new LinkedHashMap $F200 ( size , NUM00 ) ; $F10253 ( writeVals , size ) } putMap . put ( CU . value ( entry . key ( ) , ctx , _BOOL ) , CU . value ( updated , ctx , _BOOL ) ) ; writeVals . add ( updated ) ; } } else if ( op == UPDATE ) { CacheObject cacheVal = ctx . toCacheObject ( val ) ; if ( intercept ) { CacheObject old = entry . innerGet ( null , null , _BOOL , ctx . loadPreviousValue ( ) , _BOOL , _BOOL , _BOOL , subjId , null , taskName , null , keepBinary ) ; Object interceptorVal = ctx . config ( ) . getInterceptor ( ) . onBeforePut ( new CacheLazyEntry ( ctx , entry . key ( ) , old , keepBinary ) , val ) ; $F45557 ( interceptorVal ) cacheVal = ctx . toCacheObject ( ctx . unwrapTemporary ( interceptorVal ) ) ; } if ( putMap == null ) { putMap = new LinkedHashMap $F200 ( size , NUM00 ) ; $F10253 ( writeVals , size ) } putMap . put ( CU . value ( entry . key ( ) , ctx , _BOOL ) , CU . value ( cacheVal , ctx , _BOOL ) ) ; writeVals . add ( cacheVal ) ; } else { assert op == DELETE ; if ( intercept ) { CacheObject old = entry . innerGet ( null , null , _BOOL , ctx . loadPreviousValue ( ) , _BOOL , _BOOL , _BOOL , subjId , null , taskName , null , keepBinary ) ; IgniteBiTuple < Boolean , ? > interceptorRes = ctx . config ( ) . getInterceptor ( ) . onBeforeRemove ( new CacheLazyEntry ( ctx , entry . key ( ) , old , keepBinary ) ) ; if ( ctx . cancelRemove ( interceptorRes ) ) $F598 } if ( rmvKeys == null ) $F10253 ( rmvKeys , size ) rmvKeys . add ( entry . key ( ) . value ( ctx . cacheObjectContext ( ) , _BOOL ) ) ; } filtered . add ( entry ) ; } catch ( IgniteCheckedException e ) { if ( err == null ) err = partialUpdateException ( ) ; err . add ( F . asList ( entry . key ( ) ) , e ) ; } catch ( GridCacheEntryRemovedException ignore ) { assert _BOOL : NUM00 ; } } if ( putMap != null || rmvKeys != null ) { err = updatePartialBatch ( filtered , ver , writeVals , putMap , rmvKeys , expiryPlc , keepBinary , err , subjId , taskName ) ; } else assert filtered . isEmpty ( ) ; $F84834 ( err ) return invokeResMap ; } $F18632 ( unlockEntries , locked ) }
private static Set < TypeElement > findAllMembersInjectorsRecursively ( Collection < TypeElement > membersInjectors ) { Set < TypeElement > $F9626 ( result ) ; for ( TypeElement element : membersInjectors ) $F42502 ( result , findAllMembersInjectorsRecursively , element ) return result ; }
public Builder addSubButton ( Context context , int drawable , $F2027 twoColors , String string ) { $F21432 ( drawables ) drawables . add ( ContextCompat . getDrawable ( context , drawable ) ) ; $F21432 ( colors ) colors . add ( twoColors ) ; $F21432 ( strings ) strings . add ( string ) ; return this ; }
private void initComponents $F72 { labelValue = new Label $F72 ; labelValue . setValue ( Util . cleanAmp ( $F9206 ( Msg , Env ) ) ) ; labelName = new Label $F72 ; labelName . setValue ( Util . cleanAmp ( $F9206 ( Msg , Env ) ) ) ; labelContact = new Label $F72 ; labelContact . setValue ( $F9206 ( Msg , Env ) ) ; labelEMail = new Label $F72 ; labelEMail . setValue ( $F83894 ( Msg , Env ) ) ; labelPostal = new Label $F72 ; labelPostal . setValue ( $F83894 ( Msg , Env ) ) ; labelPhone = new Label $F72 ; labelPhone . setValue ( $F9206 ( Msg , Env ) ) ; fieldID = NUM00 ; fieldValue = new Textbox $F72 ; fieldValue . setMaxlength ( NUM00 ) ; $F106626 ( fieldValue ) fieldValue . addEventListener ( Events . ON_CHANGE , this ) ; fieldName = new Textbox $F72 ; fieldName . setMaxlength ( NUM00 ) ; $F106626 ( fieldName ) fieldName . addEventListener ( Events . ON_CHANGE , this ) ; fieldContact = new Textbox $F72 ; fieldContact . setMaxlength ( NUM00 ) ; $F106626 ( fieldContact ) fieldContact . addEventListener ( Events . ON_CHANGE , this ) ; fieldEMail = new Textbox $F72 ; fieldEMail . setMaxlength ( NUM00 ) ; $F106626 ( fieldEMail ) fieldEMail . addEventListener ( Events . ON_CHANGE , this ) ; fieldPostal = new Textbox $F72 ; fieldPostal . setMaxlength ( NUM00 ) ; $F106626 ( fieldPostal ) fieldPostal . addEventListener ( Events . ON_CHANGE , this ) ; fieldPhone = new Textbox $F72 ; fieldPhone . setMaxlength ( NUM00 ) ; $F106626 ( fieldPhone ) fieldPhone . addEventListener ( Events . ON_CHANGE , this ) ; checkAND = new Checkbox $F72 ; $F405059 ( checkAND , Msg , Env ) $F87453 ( checkAND ) checkAND . setTooltiptext ( $F83894 ( Msg , Env ) ) ; checkAND . setSelected ( _BOOL ) ; checkAND . addActionListener ( this ) ; $F106626 ( checkAND ) checkCustomer = new Checkbox $F72 ; checkCustomer . addActionListener ( this ) ; $F106626 ( checkCustomer ) $F87453 ( checkCustomer ) if ( m_isSOTrx ) checkCustomer . setLabel ( $F83894 ( Msg , Env ) ) ; else checkCustomer . setLabel ( $F83894 ( Msg , Env ) ) ; checkCustomer . setSelected ( m_isSOMatch ) ; }
public static boolean isFMInstance $F72 { if ( instanceType == null ) { $F68570 ( instanceType , configTags ) } return $F153572 ( instanceType ) ; }
private boolean tryRelease ( long c , WorkQueue v , long inc ) { int sp = ( int ) c , ns = sp & ~ UNSIGNALLED ; if ( v != null ) { int vs = v . scanState ; long nc = ( v . stackPred & SP_MASK ) | ( UC_MASK & ( c + inc ) ) ; if ( sp == vs && U . compareAndSwapLong ( this , CTL , c , nc ) ) { v . scanState = ns ; LockSupport . unpark ( v . parker ) ; return _BOOL ; } } return _BOOL ; }
public boolean execute ( String sqlStatements , Connection conn ) { if ( conn == null ) $F4638 $F91090 ( sql , convert , sqlStatements ) m_exception = null ; if ( m_conversionError != null || sql == null ) return _BOOL ; boolean ok = _BOOL ; int i = NUM00 ; String statement = null ; try { if ( m_stmt == null ) $F2715 ( m_stmt , conn ) for ( i = NUM00 ; ok && i < sql . length ; i ++ ) { statement = sql [ i ] ; if $F1277 ( statement ) { if ( m_verbose ) log . finer ( NUM00 + i + NUM00 ) ; } else { if ( m_verbose ) $F8817 ( log , i , statement ) else $F556 ( log , i ) try { m_stmt . clearWarnings ( ) ; $F32305 ( no , m_stmt , statement ) SQLWarning warn = m_stmt . getWarnings ( ) ; if ( warn != null ) { if ( m_verbose ) $F556 ( log , warn ) else { $F8817 ( log , i , statement ) $F556 ( log , warn ) } } if ( m_verbose ) $F35577 ( log , no ) } catch ( SQLException ex ) { if $F14943 ( statement ) { ok = _BOOL ; m_exception = ex ; } if ( ! m_verbose ) $F8817 ( log , i , statement ) log . info ( $F15594 ( i , sql ) + ex ) ; } } } } catch ( SQLException e ) { m_exception = e ; if ( ! m_verbose ) $F8817 ( log , i , statement ) log . info ( $F15594 ( i , sql ) + e ) ; return _BOOL ; } return ok ; }
$F1 public Value sample ( Assignment condition ) { double prob = getProb ( condition ) ; if ( sampler . nextDouble ( ) < prob ) { return ValueFactory . create ( _BOOL ) ; } else { return ValueFactory . create ( _BOOL ) ; } }
private void initStyle ( AttributeSet attributeSet , int defStyleAttribute ) { TypedArray typedArray = mContext . obtainStyledAttributes ( attributeSet , R . styleable . MaterialSearchView , defStyleAttribute , NUM00 ) ; if ( typedArray != null ) { if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBackground ) ) { setBackground ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchBackground ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_textColor ) ) { setTextColor ( typedArray . getColor ( R . styleable . MaterialSearchView_android_textColor , ContextCompat . getColor ( mContext , R . color . black ) ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_textColorHint ) ) { setHintTextColor ( typedArray . getColor ( R . styleable . MaterialSearchView_android_textColorHint , ContextCompat . getColor ( mContext , R . color . gray_50 ) ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_hint ) ) { setHint ( typedArray . getString ( R . styleable . MaterialSearchView_android_hint ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchVoiceIcon ) ) { setVoiceIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchVoiceIcon ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchCloseIcon ) ) { setClearIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchCloseIcon ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBackIcon ) ) { setBackIcon ( typedArray . getDrawable ( R . styleable . MaterialSearchView_searchBackIcon ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchSuggestionBackground ) ) { setSuggestionBackground ( typedArray . getResourceId ( R . styleable . MaterialSearchView_searchSuggestionBackground , R . color . search_layover_bg ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_android_inputType ) ) { setInputType ( typedArray . getInteger ( R . styleable . MaterialSearchView_android_inputType , InputType . TYPE_CLASS_TEXT ) ) ; } if ( typedArray . hasValue ( R . styleable . MaterialSearchView_searchBarHeight ) ) { setSearchBarHeight ( typedArray . getDimensionPixelSize ( R . styleable . MaterialSearchView_searchBarHeight , getAppCompatActionBarHeight ( ) ) ) ; } else $F7429 ( setSearchBarHeight , getAppCompatActionBarHeight ) ViewCompat . setFitsSystemWindows ( this , typedArray . getBoolean ( R . styleable . MaterialSearchView_android_fitsSystemWindows , _BOOL ) ) ; $F17551 ( typedArray ) } }
boolean validate ( Set attrVals , String i18nFileName , boolean encodePassword ) throws SMSException { return validate ( attrVals , i18nFileName , encodePassword , Collections . EMPTY_MAP ) ; }
protected static void appendBigDecimalNumericType ( StringBuilder sb ) $F86 ( sb )
void removeAt ( final int removeIndex ) { $F48385 ( items , this ) if ( removeIndex == takeIndex ) { items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; } else { $F4711 ( putIndex , this ) for ( int i = removeIndex ; ; ) { int next = inc ( i ) ; if ( next != putIndex ) { items [ i ] = items [ next ] ; i = next ; } else { items [ i ] = null ; this . putIndex = i ; $F597 } } count -- ; if ( itrs != null ) itrs . removedAt ( removeIndex ) ; } $F702 ( notFull ) }
private AccessGrant createAccessGrant $F3501 ( params ) { AccessGrant accessGrant = new AccessGrant $F72 ; if $F139289 ( params ) { $F170151 ( accessToken , params ) Integer expires = null ; if $F139289 ( params ) { expires = Integer . valueOf ( params . get ( NUM00 ) ) ; } accessGrant . setKey ( accessToken ) ; $F34765 ( accessGrant , expires ) } accessGrant . setProviderId ( mProviderName . toString ( ) ) ; return accessGrant ; }
public double distance ( Vector other ) { return Math . sqrt ( Math . pow ( other . x - x , NUM00 ) + Math . pow ( other . y - y , NUM00 ) + Math . pow ( other . z - z , NUM00 ) ) ; }
private void parse ( File tmd ) throws IOException { $F18800 ( f , tmd ) $F927 ( f ) this . signatureType = f . readInt ( ) ; $F3259 ( f , signature ) ; $F927 ( f ) $F3259 ( f , issuer ) ; $F927 ( f ) this . version = f . readByte ( ) ; this . CACRLVersion = f . readByte ( ) ; this . signerCRLVersion = f . readByte ( ) ; $F927 ( f ) this . systemVersion = f . readLong ( ) ; this . titleID = f . readLong ( ) ; this . titleType = f . readInt ( ) ; this . groupID = f . readShort ( ) ; $F927 ( f ) $F3259 ( f , reserved ) ; $F927 ( f ) this . accessRights = f . readInt ( ) ; this . titleVersion = f . readShort ( ) ; this . contentCount = f . readShort ( ) ; this . bootIndex = f . readShort ( ) ; $F927 ( f ) $F3259 ( f , SHA2 ) ; $F927 ( f ) short indexOffset ; short commandCount ; for ( $F6268 ( i ) ) { f . seek ( NUM00 + ( NUM00 * i ) ) ; $F11214 ( indexOffset , f ) $F11214 ( commandCount , f ) $F12496 ( buffer ) $F3259 ( f , buffer ) ; this . contentInfos [ i ] = new ContentInfo ( indexOffset , commandCount , buffer ) ; } this . contents = new Content [ contentCount ] ; int ID ; short index ; short type ; long size ; for ( $F119 ( i , contentCount ) ) { f . seek ( NUM00 + ( NUM00 * i ) ) ; $F5961 ( ID , f ) $F11214 ( index , f ) $F11214 ( type , f ) $F33039 ( size , f ) $F12496 ( buffer ) $F3259 ( f , buffer ) ; this . contents [ i ] = new Content ( ID , index , type , size , buffer , this ) ; } if ( $F3259 ( f , cert2 ) != NUM00 ) { $F138169 ( Logger ) } if ( $F3259 ( f , cert1 ) != NUM00 ) { $F138169 ( Logger ) } $F59 ( f ) }
$F166447 ( propertyName , in_vcl , beanContextChildSupport )
public static void takeScreenshot ( final String tag ) { if ( scenario == null ) { throw new ScreenshotException $F580 ; } SpoonScreenshotAction . perform ( tag ) ; final File screenshot = SpoonScreenshotAction . getLastScreenshot ( ) ; if ( screenshot == null ) { throw new ScreenshotException $F580 ; } FileInputStream screenshotStream = null ; try { $F5335 ( screenshotStream , screenshot ) final byte fileContent [ ] = new byte [ $F5338 ( screenshot ) ] ; $F117439 ( readImageBytes , screenshotStream , fileContent ) if ( readImageBytes != - NUM00 ) { scenario . embed ( fileContent , NUM00 ) ; } } catch ( final IOException ioe ) { throw new ScreenshotException ( NUM00 + ioe ) ; } finally { try $F6399 ( screenshotStream ) catch ( final IOException ioe ) { throw new ScreenshotException ( NUM00 + ioe ) ; } } }
private void importRunnerEnvironment ( ImportProject importProject , FolderEntry baseProjectFolder ) throws ForbiddenException , ServerException , ConflictException , IOException $F16625 ( importRunnerEnvironment , importProject , baseProjectFolder )
$F1 public void doNotify $F72 throws Exception { $F973 ( log ) ScheduledExecutorService svc = service ; if ( svc != null ) { try { svc . schedule ( ( Callable $F1432 ) this , NUM00 , TimeUnit . MICROSECONDS ) ; } catch ( RejectedExecutionException ex ) { if $F155759 ( svc ) $F22715 ( log ) else { throw ex ; } } } else $F22715 ( log ) }
public boolean checkRootByBuildTags $F72 { String buildTags = android . os . Build . TAGS ; if $F5914 ( buildTags , SU_TAG ) { return _BOOL ; } return _BOOL ; }
public boolean isUserActive ( String realm ) { boolean active = _BOOL ; try { $F21551 ( user , IdUtils , ssoToken , userId ) boolean isUserActive = user . isActive ( ) ; String loginStatus = getUserAttributeValue ( user , USER_SERVICE_LOGIN_STATUS , ACTIVE ) ; String lockout = getUserAttributeValue ( user , USER_SERVICE_NS_LOCKOUT , NUM00 _FALSE ) ; if ( ! isUserActive || ! loginStatus . equalsIgnoreCase ( ACTIVE ) || ! lockout . equalsIgnoreCase ( NUM00 _FALSE ) ) { errorMsg = getLocalizedString ( NUM00 ) ; writeLog ( NUM00 , userId ) ; } else if ( isAccountExpired ( user ) ) { errorMsg = getLocalizedString ( NUM00 ) ; writeLog ( NUM00 , userId ) ; } else if ( isUserLockout ( userId , realm ) ) { String obj [ ] = { userId } ; informationMsg = getLocalizedString ( NUM00 ) ; writeLog ( NUM00 , userId ) ; } else { active = _BOOL ; } } catch ( SSOException e ) { $F21557 ( debug , e ) errorMsg = getErrorString ( e ) ; } catch ( IdRepoException e ) { $F21557 ( debug , e ) errorMsg = getErrorString ( e ) ; } return active ; }
$F1 public $F30939 CompletableFuture $F30939 foldRight ( final U seed , final BiFunction < $F11631 , U , U > function ) $F19292 ( CompletableFuture , exec )
private void algorithmDouglasPeucker ( $F14699 entries , double epsilon , int start , int end ) { if ( end <= start + NUM00 ) $F932 int maxDistIndex = NUM00 ; double distMax = NUM00 ; $F14726 ( firstEntry , entries , start ) $F14726 ( lastEntry , entries , end ) for ( $F2634 ( i , start , end ) ) { double dist = calcAngleBetweenLines ( firstEntry , lastEntry , firstEntry , entries . get ( i ) ) ; $F8399 ( dist , distMax , maxDistIndex , i ) } if ( distMax > epsilon ) { keep [ maxDistIndex ] = _BOOL ; algorithmDouglasPeucker ( entries , epsilon , start , maxDistIndex ) ; algorithmDouglasPeucker ( entries , epsilon , maxDistIndex , end ) ; } }
private void calcIntervalDis $F72 { $F2329 ( mMarkTextPaint ) String defaultText = NUM00 ; $F28883 ( temp ) int max = NUM00 ; if $F8841 ( mItems ) { for ( String i : mItems ) { $F77589 ( mMarkTextPaint , i , temp ) if ( temp . width ( ) > max ) { max = temp . width ( ) ; } } } else { $F77589 ( mMarkTextPaint , defaultText , temp ) max = temp . width ( ) ; } if $F20899 ( TextUtils , mAdditionCenterMark ) { mMarkTextPaint . setTextSize ( mNormalTextSize ) ; $F77589 ( mMarkTextPaint , mAdditionCenterMark , temp ) mAdditionCenterMarkWidth = temp . width ( ) ; max += temp . width ( ) ; } mIntervalDis = max * mIntervalFactor ; }
public static void sort ( AbstractList array , $F2027 indices ) { for ( $F1139 ( i , indices ) ) $F14245 ( indices , i ) int temp ; int j , n = array . size ( ) ; for ( j = n / NUM00 ; j > NUM00 ; j -- ) { adjust ( array , indices , j , n ) ; } for ( j = n - NUM00 ; j > NUM00 ; j -- ) { temp = indices [ NUM00 ] ; indices [ NUM00 ] = indices [ j ] ; indices [ j ] = temp ; adjust ( array , indices , NUM00 , j ) ; } }
$F41720 ( value , absMin , absMax , absValue , Math )
public static boolean saveStringToFile ( String dataInput , String path ) { String filename = path ; $F1705 ( file , filename ) FileOutputStream fos ; $F39526 ( data , dataInput ) try { $F10893 ( fos , file ) fos . write ( data ) ; $F1206 ( fos ) $F59 ( fos ) return _BOOL ; } $F35546 ( e ) $F12241 ( e ) return _BOOL ; }
public static String quote ( String input ) { if $F3578 ( input ) $F34654 ( input ) else { return input ; } }
$F43277 ( listener , mListeners )
public static void assertThrowsCompletionException ( final Consumer $F8317 consumer , $F6970 ( exceptionClass ) ) { try { consumer . accept ( null ) ; } catch ( final CompletionException completionEx ) { final Throwable ex = completionEx . getCause ( ) ; if ( ex . getClass ( ) == exceptionClass ) $F932 Assert . fail ( String . format ( NUM00 , ex . getClass ( ) ) ) ; } Assert . fail ( String . format ( NUM00 , exceptionClass ) ) ; }
public Object put ( Object key , Object value ) { Object oldValue = null ; synchronized ( map ) { oldValue = map . put ( key , value ) ; $F40608 ( oldValue , removeElement , key ) addElement ( key ) ; } return oldValue ; }
public double run $F72 { try { AudioInputStream inInput = AudioSystem . getAudioInputStream ( files [ NUM00 ] ) ; AudioFeature audioFeatureInput = ( AudioFeature ) featureExtractorInput . calculate ( inInput ) ; } $F3957 double avgDistance = NUM00 ; for ( $F2277 ( i , arrayFeatureExtractorTrainSet ) ) { double distance2DB = audioThreadDistance ( featureExtractorInput . getMFCC ( ) , arrayFeatureExtractorTrainSet . get ( i ) ) ; Log . i ( NUM00 , NUM00 + distance2DB ) ; avgDistance += distance2DB ; } Log . i ( NUM00 , NUM00 + ( avgDistance / arrayFeatureExtractorTrainSet . size ( ) ) ) ; return avgDistance / arrayFeatureExtractorTrainSet . size ( ) ; }
$F26827 ( w , h , oldw , oldh , super , setupBounds , setupPaints , invalidate )
public Predicate ( Term t ) $F207 ( terms , t )
private void addOperations $F32029 ( methodSignatures ) throws OperationParseException { for ( String sig : methodSignatures ) { TypedOperation operation = OperationParser . parse ( sig ) ; operations . add ( operation ) ; } }
private void writeLog ( String log ) { File file = new File ( CrashHandlerDefault . Log_Default_Path + NUM00 + $F52170 ( formatter ) + NUM00 ) ; try { $F4649 ( fileOutputStream , file ) $F39526 ( bytes , log ) fileOutputStream . write ( bytes ) ; $F59 ( fileOutputStream ) } $F12241 ( e ) }
public Rule ( String pattern , Object tokenType , String nextState ) { this . pattern = Pattern . compile ( pattern ) ; this . tokenType = tokenType ; this . nextState = nextState ; }
private void showPopup ( final MouseEvent event ) { $F2027 rows = getSelectedRows ( ) ; if ( $F9634 ( rows ) || $F9634 ( rows ) ) { final int row = $F32863 ( rowAtPoint , event ) ; final int column = $F32863 ( columnAtPoint , event ) ; if ( ( row == - NUM00 ) || ( column == - NUM00 ) ) $F932 changeSelection ( row , column , _BOOL , _BOOL ) ; rows = getSelectedRows ( ) ; } final JPopupMenu menu = new JPopupMenu $F72 ; menu . add ( new JMenuItem ( CActionProxy . proxy ( new CDeleteBookmarkAction ( m_bookmarkManager , rows ) ) ) ) ; $F121507 ( menu , event ) }
public int lineToY ( int line ) { $F319 ( fm , painter ) return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; }
public static boolean hasSpecialChars ( final String str ) { $F37142 ( matcher , SPL_CHAR_PATRN , str ) $F89398 ( matcher ) }
$F1 public int read $F1313 ( off , len ) throws IOException { $F31068 ( bb ) if ( b == null ) $F18044 else if ( off < NUM00 || len < NUM00 || len > b . length - off ) $F81129 else $F14826 ( len ) int length = Math . min ( bb . remaining ( ) , len ) ; $F7630 ( length ) bb . get ( b , off , length ) ; return length ; }
public void removeEventListener ( MultimediaMessagingSessionListener listener ) throws $F161622 { $F161627 ( mApi ) try { WeakReference < IMultimediaMessagingSessionListener > weakRef = mMultimediaMessagingSessionListeners . remove ( listener ) ; $F2329 ( weakRef ) IMultimediaMessagingSessionListener multimediaMessagingSessionListener = weakRef . get ( ) ; if ( multimediaMessagingSessionListener != null ) { mApi . removeEventListener2 ( multimediaMessagingSessionListener ) ; } } $F228550 ( RcsIllegalArgumentException , e ) }
private static boolean dateByMonth ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = _BOOL ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { bld . append ( Constants . ye ) ; if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendMonthOfYear ( NUM00 ) ; appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( NUM00 ) ; } else { $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; reducedPrec = _BOOL ; } } else { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { checkNotStrictISO ( fields , strictISO ) ; $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; } else { reducedPrec = _BOOL ; } } } else if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { $F188366 ( bld ) $F188366 ( bld ) bld . appendMonthOfYear ( NUM00 ) ; if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( NUM00 ) ; } else { reducedPrec = _BOOL ; } } else if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { $F188366 ( bld ) $F188366 ( bld ) $F188366 ( bld ) bld . appendDayOfMonth ( NUM00 ) ; } return reducedPrec ; }
public $F806 parseLine ( String line , boolean withLabel , boolean trace , boolean ignoreEmpty ) { if ( trace ) $F81293 ( log , line ) $F8728 ( list ) for ( $F2277 ( i , m_rows ) ) { ImpFormatRow row = ( ImpFormatRow ) m_rows . get ( i ) ; $F280 ( entry ) if ( withLabel ) { entry . append ( row . getColumnName ( ) ) ; $F84 ( entry ) if ( row . isString ( ) ) $F84 ( entry ) else if ( row . isDate ( ) ) $F84 ( entry ) } String info = null ; if ( row . isConstant ( ) ) info = NUM00 ; else if ( m_formatType . equals ( X_AD_ImpFormat . FORMATTYPE_FixedPosition ) ) { if ( row . getStartNo ( ) > NUM00 && row . getEndNo ( ) <= line . length ( ) ) info = line . substring ( row . getStartNo ( ) - NUM00 , row . getEndNo ( ) ) ; } else { info = parseFlexFormat ( line , m_formatType , row . getStartNo ( ) ) ; } if ( Util . isEmpty ( info , _BOOL ) ) { if ( row . getDefaultValue ( ) != null ) info = row . getDefaultValue ( ) ; else info = NUM00 ; } entry . append ( row . parse ( info ) ) ; if ( withLabel ) { if ( row . isString ( ) ) $F84 ( entry ) else if ( row . isDate ( ) ) $F84 ( entry ) } if ( ! ignoreEmpty || ( ignoreEmpty && $F35624 ( info ) ) ) $F40018 ( list , entry ) if ( trace ) log . fine ( $F31144 ( info , entry ) + NUM00 + info . length ( ) + NUM00 ) ; } $F5442 ( retValue , list ) list . toArray ( retValue ) ; return retValue ; }
public WidgetProposalComputer ( String text , int offset , Element rootElement , Element parentElement , IJavaProject javaProject ) throws JavaModelException , UiBinderException { super ( javaProject , text , offset , text . length ( ) ) ; this . rootElement = rootElement ; this . parentElement = parentElement ; packageManager . readFromElement ( rootElement ) ; }
public List < $F54596 > parse $F20110 ( queries ) throws QueryParseException { List < $F54596 > $F719 ( predicates , queries ) ; $F34103 ( query , queries , predicates , parse ) return predicates ; }
public static Object deserializeStream ( final String witness ) throws Exception { $F4647 ( fileIs , witness ) $F67402 ( objIs , fileIs ) $F287819 ( objIs ) }
public static void rollback ( boolean beganTransaction , String causeMessage , Throwable causeThrowable ) throws GenericTransactionException { if ( beganTransaction ) { TransactionUtil . rollback ( causeThrowable ) ; } else { TransactionUtil . setRollbackOnly ( causeMessage , causeThrowable ) ; } }
public LongArray ( LongArray array ) { this . ordered = array . ordered ; size = array . size ; $F11125 ( items , size ) System . arraycopy ( array . items , NUM00 , items , NUM00 , size ) ; }
private static $F4203 T reportGet ( Object r ) throws $F38232 { if ( r == null ) $F2757 if ( r instanceof AltResult ) { Throwable x , cause ; if ( ( x = ( ( AltResult ) r ) . ex ) == null ) $F1274 if ( x instanceof CancellationException ) throw ( CancellationException ) x ; if ( ( x instanceof CompletionException ) && ( cause = x . getCause ( ) ) != null ) x = cause ; throw new ExecutionException ( x ) ; } $F1431 T t = ( T ) r ; return t ; }
protected void garbageCollect ( VisualTable labels ) { Iterator iter = labels . tuples ( ) ; while $F2921 ( iter ) { $F163591 ( item , iter ) if ( ! item . isStartVisible ( ) && ! item . isEndVisible ( ) ) { labels . removeTuple ( item ) ; } } }
public boolean sharesVariableWith ( DefUse du ) $F12739 ( varName , du )
private void populateNavDrawer $F72 { $F725 ( mNavDrawerItems ) mNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY1 ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY2 ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR_SPECIAL ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_ACTIVITY3 ) ; createNavDrawerItems ( ) ; }
public ArtifactCoordinates ( final String groupId , final String artifactId , final String version , final String classifier ) $F90398 ( this , groupId , artifactId , version , classifier )
private CarbonIterator < BatchResult > executeBlockList ( $F8688 blockList ) throws QueryExecutionException { queryModel . setTableBlockInfos ( blockList ) ; this . queryExecutor = QueryExecutorFactory . getQueryExecutor ( ) ; CarbonIterator < BatchResult > iter = null ; try { iter = queryExecutor . execute ( queryModel ) ; } catch ( QueryExecutionException e ) { $F16391 ( LOGGER , e ) throw e ; } return iter ; }
public static boolean isJavaScriptEnabled ( HttpServletRequest request ) { $F27836 ( session , request ) Boolean javaScriptEnabled = ( Boolean ) session . getAttribute ( NUM00 ) ; if ( javaScriptEnabled != null ) { $F44652 ( javaScriptEnabled ) } return _BOOL ; }
protected Link createLink ( final String relation , final URI href ) { return new Link ( relation , href ) ; }
public void testFlipBitPositiveInside2 $F72 { $F17888 int aSign = NUM00 ; int number = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F103435 ( result , aNumber , number ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static Spannable createSpannableFromTextWithTemplate ( String text , CharSequence innerTemplate ) { SpannableString result = new SpannableString ( text ) ; if ( innerTemplate instanceof Spanned ) { int index = text . indexOf ( innerTemplate . toString ( ) ) ; if ( index >= NUM00 ) { copySpans ( result , ( Spanned ) innerTemplate , index ) ; } } return result ; }
$F1 public String toString $F72 { return xmlFile . getName ( ) ; }
public String toString $F72 { return String . valueOf ( stopTimeMillis - startTimeMillis ) + NUM00 ; }
public ObjectGraph plusGraph $F11546 ( activityScopeModules ) { $F826 ( activityScopeModules ) return graph . plus ( activityScopeModules . toArray ( ) ) ; }
public GroupCategorySet ( GroupCategory [ ] categories ) { Assert . isNotNull ( categories ) ; fContent = new ArrayList ( categories . length ) ; for ( $F1139 ( i , categories ) ) { if $F22209 ( fContent , categories , i ) $F24616 ( fContent , categories , i ) } }
private boolean inSamePackage $F140796 ( c1 , c2 ) { $F20605 ( nameC1 , c1 ) $F20605 ( nameC2 , c2 ) $F24867 ( indexDotC1 , nameC1 ) $F24867 ( indexDotC2 , nameC2 ) $F35938 ( indexDotC1 , indexDotC2 , _BOOL ) $F5881 ( indexDotC1 , _BOOL ) return nameC1 . regionMatches ( NUM00 , nameC2 , NUM00 , indexDotC1 ) ; }
private void writeConstraintsToXml ( XmlSerializer out , JobStatus jobStatus ) throws IOException { out . startTag ( null , XML_TAG_PARAMS_CONSTRAINTS ) ; if ( jobStatus . hasUnmeteredConstraint ( ) ) { $F18835 ( out , Boolean , _BOOL ) } if ( jobStatus . hasConnectivityConstraint ( ) ) { $F18835 ( out , Boolean , _BOOL ) } if ( jobStatus . hasIdleConstraint ( ) ) { $F18835 ( out , Boolean , _BOOL ) } if ( jobStatus . hasChargingConstraint ( ) ) { $F18835 ( out , Boolean , _BOOL ) } out . endTag ( null , XML_TAG_PARAMS_CONSTRAINTS ) ; }
public void fillConditionalHoles $F72 { ValueRange possibleCondPairs = new ValueRange $F57797 ( table ) ; if ( possibleCondPairs . getNbCombinations ( ) < NUM00 ) { Set $F2791 possibleCondAssignments = possibleCondPairs . linearise ( ) ; possibleCondAssignments . remove ( new Assignment $F72 ) ; for ( Assignment possibleCond : possibleCondAssignments ) { if $F15257 ( table , possibleCond ) { addRow ( possibleCond , ValueFactory . none ( ) , NUM00 ) ; } } } }
private boolean showAppMenu ( View view , boolean startDragging ) { if ( ! mMenuHandler . isAppMenuShowing ( ) && mMenuHandler . showAppMenu ( view , startDragging ) ) { if ( ! startDragging ) RecordUserAction . record ( NUM00 ) ; $F21689 ( mOnAppMenuShownListener ) return _BOOL ; } return _BOOL ; }
protected void writeNodeText ( Node node ) throws IOException { $F45667 ( text , node ) if $F23754 ( text ) { $F8577 ( escapeText , text , escapeElementEntities ) lastOutputNodeType = Node . TEXT_NODE ; writer . write ( text ) ; } }
public void insertRadians ( $F1986 latlons , int coordPairIndex , boolean replaceEndsOfInsertedAtJoin ) { int minPntsNeededForInsertion = NUM00 ; boolean atEnd = _BOOL ; boolean isClosed = isGeometryClosed ( ) ; int insertionPoint = coordPairIndex * NUM00 ; if ( insertionPoint >= rawllpts . length ) { if ( isClosed ) $F65461 ( insertionPoint , rawllpts ) else { insertionPoint = rawllpts . length ; atEnd = _BOOL ; } } else if ( insertionPoint <= NUM00 ) { if ( isClosed ) { insertionPoint = NUM00 ; } else { insertionPoint = NUM00 ; atEnd = _BOOL ; } } int newCoordStart = NUM00 ; int newCoordLength = latlons . length ; if ( replaceEndsOfInsertedAtJoin ) { newCoordStart = NUM00 ; minPntsNeededForInsertion = NUM00 ; if ( atEnd ) { minPntsNeededForInsertion -= NUM00 ; newCoordLength -= NUM00 ; $F78418 ( insertionPoint , newCoordStart ) } else { newCoordLength -= NUM00 ; } } if ( renderType == OMGraphic . RENDERTYPE_LATLON && latlons . length >= minPntsNeededForInsertion && latlons . length % NUM00 == NUM00 ) { $F1986 oldrawllpnts = rawllpts ; int oldCoordsRemaining = oldrawllpnts . length - insertionPoint ; rawllpts = new double [ oldrawllpnts . length + newCoordLength ] ; $F135 ( System , oldrawllpnts , rawllpts , insertionPoint ) System . arraycopy ( latlons , newCoordStart , rawllpts , insertionPoint , newCoordLength ) ; System . arraycopy ( oldrawllpnts , insertionPoint , rawllpts , insertionPoint + newCoordLength , oldCoordsRemaining ) ; setNeedToRegenerate ( _BOOL ) ; } }
public static boolean cancelPotentialWork ( Object data , ImageView imageView ) { final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask ( imageView ) ; if ( bitmapWorkerTask != null ) { final Object bitmapData = bitmapWorkerTask . data ; if $F87129 ( bitmapData , data ) { bitmapWorkerTask . cancel ( _BOOL ) ; if ( BuildConfig . DEBUG ) $F29023 ( Log , TAG , data ) } else { return _BOOL ; } } return _BOOL ; }
protected $F529 convertNamedListToMap ( NamedList $F1011 args ) { $F529 $F161023 ( argsMap ) ; if ( args != null ) { for ( Map . Entry $F6251 entry : args ) { $F53096 ( argsMap , entry ) } } return argsMap ; }
private T3 < Integer , Integer , $F96 > randomKey ( Random rnd ) { return $F342958 ( keys , rnd ) ; }
public String toString $F72 { $F280 ( buffer ) if ( override > NUM00 ) { $F286 ( buffer , override ) if ( lineno > NUM00 ) $F286 ( buffer , lineno ) } else { if ( locationName == null && lineno > NUM00 ) $F287 ( buffer , lineno ) else if ( locationName != null ) { $F86403 ( buffer , locationName ) if ( lineno > NUM00 ) $F86403 ( buffer , lineno ) } } buffer . append ( description ) ; $F92 ( buffer ) }
public void testSearchablesListReal $F72 { MyMockPackageManager mockPM = new MyMockPackageManager ( mContext . getPackageManager ( ) ) ; MyMockContext mockContext = new MyMockContext ( mContext , mockPM ) ; mockPM . setSearchablesMode ( MyMockPackageManager . SEARCHABLES_PASSTHROUGH ) ; Searchables searchables = new Searchables ( mockContext , NUM00 ) ; searchables . buildSearchableList ( ) ; ArrayList < SearchableInfo > searchablesList = searchables . getSearchablesList ( ) ; $F2199 ( count , searchablesList ) assertTrue ( count >= NUM00 ) ; checkSearchables ( searchablesList ) ; ArrayList < SearchableInfo > global = searchables . getSearchablesInGlobalSearchList ( ) ; checkSearchables ( global ) ; }
private void fillExampleTable ( DataSet dataSet , ProgressListener listener , $F2027 attributeColumns , MemoryExampleTable exampleTable ) throws DataSetException , ProcessStoppedException , ParseException { $F46131 attributes = exampleTable . getAttributes ( ) ; $F2268 ( dataSet ) int numberOfRows = dataSet . getNumberOfRows ( ) ; DataRowFactory factory = new DataRowFactory ( dataManagementType , DataRowFactory . POINT_AS_DECIMAL_CHARACTER ) ; boolean isRunningInProcess = isOperatorRunning ( ) ; while $F2921 ( dataSet ) { if ( isRunningInProcess ) { operator . checkForStop ( ) ; } if ( shouldStop ) { throw new ProcessStoppedException $F72 ; } DataSetRow currentRow = dataSet . nextRow ( ) ; if ( listener != null ) { updateProcess ( listener , dataSet . getCurrentRowIndex ( ) , numberOfRows ) ; } DataRow row = factory . create ( attributes . length ) ; exampleTable . addDataRow ( row ) ; int attributeIndex = NUM00 ; for ( Attribute attribute : attributes ) { if ( currentRow . isMissing ( attributeColumns [ attributeIndex ] ) ) { row . set ( attribute , Double . NaN ) ; } else { switch ( attribute . getValueType ( ) ) { case Ontology . INTEGER : case Ontology . NUMERICAL : case Ontology . REAL : row . set ( attribute , getNumber ( currentRow , attributeColumns [ attributeIndex ] ) ) ; $F597 case Ontology . DATE_TIME : case Ontology . TIME : case Ontology . DATE : row . set ( attribute , getDate ( currentRow , attributeColumns [ attributeIndex ] ) ) ; $F597 $F1267 row . set ( attribute , getStringIndex ( attribute , currentRow , attributeColumns [ attributeIndex ] ) ) ; } } attributeIndex ++ ; } } }
public boolean isSpurious ( int minClSize ) { return children . isEmpty ( ) && members . size ( ) < minClSize ; }
public AesDecryptor $F24576 ( key , off , len ) { this . key = new byte [ len ] ; $F76118 ( System , key , off , this , len ) }
static String extractNumberFromUriWithoutFormatting ( String uri ) { $F1338 ( uri ) $F12747 ( index0 , uri , URI_START_DELIMITER ) if ( index0 != - NUM00 ) { uri = uri . substring ( index0 + URI_START_DELIMITER . length ( ) , uri . indexOf ( URI_END_DELIMITER , index0 ) ) ; } $F12747 ( index1 , uri , TEL_URI_HEADER ) if ( index1 != - NUM00 ) { $F29993 ( uri , index1 , TEL_URI_HEADER ) } index1 = uri . indexOf ( SIP_URI_HEADER ) ; if ( index1 != - NUM00 ) { $F12712 ( index2 , uri , index1 ) uri = uri . substring ( index1 + SIP_URI_HEADER . length ( ) , index2 ) ; } $F1384 ( index2 , uri ) $F63871 ( index2 , uri ) $F49897 ( index2 , uri ) $F63871 ( index2 , uri ) return uri ; }
public RemoteMethodCallResults invokeAndWait ( final String endPointName , final RemoteMethodCall remoteCall ) { EndPoint local ; synchronized ( m_endPointMutex ) $F6045 ( local , m_localEndPoints , endPointName ) if ( local == null ) $F4915 ( invokeAndWaitRemote , remoteCall ) else { final long number = local . takeANumber ( ) ; final List < RemoteMethodCallResults > results = local . invokeLocal ( remoteCall , number , getLocalNode ( ) ) ; if $F10471 ( results ) { throw new RemoteNotFoundException ( NUM00 + endPointName ) ; } if $F3817 ( results ) $F1155 ( results ) $F38159 ( results ) } }
private void restoreFromKeypress ( final KeyEvent keyEvent , final int keyNumber ) { if ( keyEvent . isAltDown ( ) ) { final int arrayIndex = ( keyNumber > NUM00 ? keyNumber : MAX_RECENT_MESSAGES ) - NUM00 ; if $F1765 ( arrayIndex , recentMessages ) $F80218 ( displayMessage , recentMessages , arrayIndex ) $F60335 ( keyEvent ) } }
private void createElement ( Document doc , Element parentElement , String elementName , boolean value ) { $F16570 ( element , doc , elementName ) element . appendChild ( doc . createTextNode ( Boolean . toString ( value ) ) ) ; parentElement . appendChild ( element ) ; }
protected void annotationValueToString ( final StringBuilder sb , final BOp val , final int indent ) $F221418 ( sb , val )
public void runTest $F72 throws Throwable { Document doc ; NodeList emList ; Node emNode ; CharacterData emText ; Node nullChild ; $F236 ( doc , load , _BOOL ) $F237 ( emList , doc ) $F238 ( emNode , emList ) $F241 ( emText , emNode ) nullChild = emText . getLastChild ( ) ; assertNull ( NUM00 , nullChild ) ; }
$F140745 ( ordering )
$F1 $F529 extractFields ( String line ) { if ( ! initialized ) $F62354 ( init , initialized , _BOOL ) $F806 values = fixedWidthParser . parseLine ( line ) ; if ( hasHeader && Arrays . deepEquals ( values , header ) ) $F1337 $F529 map = Maps . newHashMap ( ) ; int i = NUM00 ; for ( FixedWidthField field : fields ) { map . put ( field . getName ( ) , getValue ( field , values [ i ++ ] ) ) ; } return map ; }
protected double ScalingFunction ( int iDistance ) { return Math . exp ( - Math . pow ( ( iDistance ) , NUM00 ) / ( $F124737 ( Math , CorrelationWindow ) ) ) ; }
protected void updateIdealPoint $F72 { for ( Solution solution : this ) { if ( solution . getNumberOfObjectives ( ) != numberOfObjectives ) { throw new FrameworkException $F580 ; } for ( $F119 ( i , numberOfObjectives ) ) { $F163952 ( idealPoint , i , Math , solution ) } } }
public SearchBuilder sort ( SortFieldBuilder ... builders ) $F73474 ( sort , Arrays , builders , this )
$F1 public final BufferedImage dataToRGB ( $F96 data , final int width , final int height ) { BufferedImage image ; data = dataToRGBByteArray ( data , width , height ) ; final DataBuffer db = new DataBufferByte ( data , data . length ) ; final $F2027 bands = $F79696 ; $F98898 ( image , width , height , BufferedImage ) ; final Raster raster = Raster . createInterleavedRaster ( db , width , height , width * NUM00 , NUM00 , bands , null ) ; image . setData ( raster ) ; return image ; }
protected void createFileChooser $F72 { m_FileChooser = new JFileChooser ( $F8450 ( System ) ) ; $F159615 ( m_FileChooser , JFileChooser ) }
private boolean isNoun ( String word ) { $F397 ( nouns , _BOOL ) return $F101864 ( nouns , word ) ; }
public static void writeDocument ( Document document , String encoding , OutputStream out , Writer writer , boolean omitXMLDeclaration ) throws IOException , XMLException { if ( writer == null ) { writer = new OutputStreamWriter ( out , encoding ) ; } transformer . setOutputProperty ( OutputKeys . ENCODING , encoding ) ; transformer . setOutputProperty ( OutputKeys . OMIT_XML_DECLARATION , omitXMLDeclaration ? NUM00 : NUM00 ) ; Source source = new DOMSource ( document ) ; Result result = new StreamResult ( writer ) ; try { transformer . transform ( source , result ) ; } catch ( TransformerException e ) { $F301 ( e ) throw new XMLException ( NUM00 , e ) ; } $F1206 ( writer ) }
public static String intToString ( int value , int nChars ) { $F4074 ( strValue , Integer , value ) $F7542 ( strBuf , nChars ) for ( $F1748 ( i , strValue ) ; i < nChars ; i ++ ) $F86 ( strBuf ) strBuf . append ( strValue ) ; $F92 ( strBuf ) }
public boolean isQuestCompleted ( final String name ) { return quests . isQuestCompleted ( name ) ; }
private void updateButtonState ( boolean dataChanged ) $F7715 ( btnApply , dataChanged , btnRevert )
private void buildMenu $F72 { setVisible ( _BOOL ) ; removeAll ( ) ; if $F171772 ( recentSearches ) { JMenuItem noRecent = new JMenuItem $F16961 ( UIManager ) ; noRecent . setEnabled ( _BOOL ) ; add ( noRecent ) ; } else { JMenuItem recent = new JMenuItem $F16961 ( UIManager ) ; recent . setEnabled ( _BOOL ) ; add ( recent ) ; for ( String searchString : recentSearches . getRecentSearches ( ) ) { JMenuItem mi = new JMenuItem ( searchString ) ; mi . addActionListener ( this ) ; add ( mi ) ; } addSeparator ( ) ; clear = new JMenuItem $F16961 ( UIManager ) ; clear . addActionListener ( this ) ; add ( clear ) ; } }
$F176524 ( u8 , Integer )
protected void Predicate $F72 throws $F1872 { if ( tokenIs ( NUM00 ) ) { nextToken ( ) ; PredicateExpr ( ) ; consumeExpected ( NUM00 ) ; } }
public static $F96 join ( $F96 arrayA , byte ... arrayB ) { $F118578 ( arrayB , arrayA ) $F118578 ( arrayA , arrayB ) $F148496 ( array , arrayA , arrayB ) $F7057 ( System , arrayA , array ) $F11244 ( System , arrayB , array , arrayA ) return array ; }
public void removeListener ( Listener listener ) $F106 ( mListeners , listener )
protected double constrictionCoefficient ( double c1 , double c2 ) { double rho = c1 + c2 ; if ( rho <= NUM00 ) $F1083 else { return NUM00 / ( NUM00 - rho - Math . sqrt ( Math . pow ( rho , NUM00 ) - NUM00 * rho ) ) ; } }
public ReplicatorCapabilities ( TungstenProperties props ) throws Exception { $F2689 keys = props . keyNames ( ) ; for ( String key : keys ) { if $F1238 ( key , ROLES ) { $F3803 tags = props . getStringList ( key ) ; for ( String tag : tags ) { if $F8397 ( tag , ROLE_MASTER ) { addRole ( ReplicatorCapabilities . ROLE_MASTER ) ; } else if $F8397 ( tag , ROLE_SLAVE ) { addRole ( ReplicatorCapabilities . ROLE_SLAVE ) ; } else if $F8397 ( tag , ROLE_RELAY ) { addRole ( ReplicatorCapabilities . ROLE_RELAY ) ; } else $F216876 ( tag ) } } else if $F1238 ( key , MODEL ) { $F19101 ( tag , props , key ) if $F8397 ( tag , MODEL_PUSH ) { setModel ( MODEL_PUSH ) ; } else if $F8397 ( tag , MODEL_PULL ) { setModel ( MODEL_PULL ) ; } else if $F8397 ( tag , MODEL_PEER ) { setModel ( MODEL_PEER ) ; } else if $F8397 ( tag , UNKNOWN ) { setModel ( UNKNOWN ) ; } else $F216876 ( tag ) } else if $F1238 ( key , CAP_CONSISTENCY ) { setConsistencyCheck ( props . getBoolean ( CAP_CONSISTENCY ) ) ; } else if $F1238 ( key , CAP_HEARTBEAT ) { setHeartbeat ( props . getBoolean ( CAP_HEARTBEAT ) ) ; } else if $F1238 ( key , CAP_FLUSH ) { setFlush ( props . getBoolean ( CAP_FLUSH ) ) ; } else if $F1238 ( key , PROVISION ) { $F19101 ( tag , props , key ) if $F8397 ( tag , PROVISION_DONOR ) { setProvisionDriver ( PROVISION_DONOR ) ; } else if $F8397 ( tag , PROVISION_JOINER ) { setProvisionDriver ( PROVISION_JOINER ) ; } else if $F8397 ( tag , UNKNOWN ) { setProvisionDriver ( UNKNOWN ) ; } else $F216876 ( tag ) } else $F216876 ( key ) } }
private void fitImageToView $F72 { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == NUM00 || drawable . getIntrinsicHeight ( ) == NUM00 ) $F932 $F5768 ( matrix , prevMatrix ) int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; $F5773 ( scaleX , viewWidth , drawableWidth ) $F5773 ( scaleY , viewHeight , drawableHeight ) switch ( mScaleType ) { case CENTER : scaleX = scaleY = NUM00 ; $F597 case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; $F597 case CENTER_INSIDE : scaleX = scaleY = Math . min ( NUM00 , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; $F597 case FIT_XY : $F597 $F5789 } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if $F931 ( isZoomed ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / NUM00 , redundantYSpace / NUM00 ) ; normalizedScale = NUM00 ; } else { prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; $F5797 ( transX , m , Matrix ) float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
public synchronized void close $F72 { if ( isAlive ) { isAlive = _BOOL ; $F725 ( taskQueue ) interrupt ( ) ; } }
public String removeAfter ( String original , String marker ) { $F12747 ( index , original , marker ) if ( index != - NUM00 ) $F35299 ( original , index ) return original ; }
public Address __sub__ ( final Object rhs ) { return new Address ( m_value . subtract ( getBigInteger ( rhs ) ) ) ; }
public static TestConfiguration buildDefaultConfiguration ( String testSourcePath , File testFile , String checkerName , $F3803 options , boolean shouldEmitDebugInfo ) { $F11300 javaFiles = Arrays . asList ( testFile ) ; $F140158 ( processors , Arrays , checkerName ) return buildDefaultConfiguration ( testSourcePath , javaFiles , processors , options , shouldEmitDebugInfo ) ; }
private static boolean eq ( Object o1 , Object o2 ) $F66007 ( o1 , o2 )
public void roll ( int field , int value ) { boolean increment = value >= NUM00 ; int count = increment ? value : - value ; for ( $F119 ( i , count ) ) { roll ( field , increment ) ; } }
public String clusterResultsToString $F72 $F2495 ( m_clusteringResults )
private void generateGetModuleMethod ( NewBindingKey key , NewDependencyInfo dependencyInfo ) { TypeElement scope = scopeCalculator . calculate ( key ) ; generateGetModuleMethod ( scope , dependencyInfo ) ; }
$F146169 ( summary , start , allDay , end , location , description , attendees , intent , Intent , startMilliseconds , _BOOL , endMilliseconds , rawLaunchIntent , Log , TAG , launchIntent )
private $F806 separatorAndEnclosuresToArray $F72 { $F6542 ( parts , m_Enclosures ) $F51228 ( result , parts ) result [ NUM00 ] = m_FieldSeparator ; int index = NUM00 ; for ( String e : parts ) { if ( $F20 ( e ) || $F1276 ( e ) ) $F825 result [ index ++ ] = e ; } return result ; }
private static void ReleaseStringChars $F61479 ( env , objJREF , bufAddress ) { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { sysCall . sysFree ( bufAddress ) ; } $F61482 ( traceJNI , unexpected , System , env ) }
private BusinessObjectDataNotificationRegistrationEntity createBusinessObjectDataNotificationEntity ( NamespaceEntity namespaceEntity , NotificationEventTypeEntity notificationEventTypeEntity , BusinessObjectDefinitionEntity businessObjectDefinitionEntity , FileTypeEntity fileTypeEntity , StorageEntity storageEntity , BusinessObjectDataStatusEntity newBusinessObjectDataStatusEntity , BusinessObjectDataStatusEntity oldBusinessObjectDataStatusEntity , NotificationRegistrationKey key , BusinessObjectDataNotificationFilter businessObjectDataNotificationFilter , List < JobAction > jobActions , NotificationRegistrationStatusEntity notificationRegistrationStatusEntity ) { BusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity = new BusinessObjectDataNotificationRegistrationEntity $F72 ; businessObjectDataNotificationRegistrationEntity . setNamespace ( namespaceEntity ) ; businessObjectDataNotificationRegistrationEntity . setName ( key . getNotificationName ( ) ) ; businessObjectDataNotificationRegistrationEntity . setNotificationEventType ( notificationEventTypeEntity ) ; businessObjectDataNotificationRegistrationEntity . setBusinessObjectDefinition ( businessObjectDefinitionEntity ) ; if ( StringUtils . isNotBlank ( businessObjectDataNotificationFilter . getBusinessObjectFormatUsage ( ) ) ) { businessObjectDataNotificationRegistrationEntity . setUsage ( businessObjectDataNotificationFilter . getBusinessObjectFormatUsage ( ) ) ; } businessObjectDataNotificationRegistrationEntity . setFileType ( fileTypeEntity ) ; businessObjectDataNotificationRegistrationEntity . setBusinessObjectFormatVersion ( businessObjectDataNotificationFilter . getBusinessObjectFormatVersion ( ) ) ; businessObjectDataNotificationRegistrationEntity . setStorage ( storageEntity ) ; businessObjectDataNotificationRegistrationEntity . setNewBusinessObjectDataStatus ( newBusinessObjectDataStatusEntity ) ; businessObjectDataNotificationRegistrationEntity . setOldBusinessObjectDataStatus ( oldBusinessObjectDataStatusEntity ) ; businessObjectDataNotificationRegistrationEntity . setNotificationRegistrationStatus ( notificationRegistrationStatusEntity ) ; List < NotificationActionEntity > $F204 ( notificationActionEntities ) ; businessObjectDataNotificationRegistrationEntity . setNotificationActions ( notificationActionEntities ) ; for ( JobAction jobAction : jobActions ) { JobDefinitionEntity jobDefinitionEntity = jobDefinitionDaoHelper . getJobDefinitionEntity ( jobAction . getNamespace ( ) , jobAction . getJobName ( ) ) ; NotificationJobActionEntity notificationJobActionEntity = new NotificationJobActionEntity $F72 ; notificationActionEntities . add ( notificationJobActionEntity ) ; notificationJobActionEntity . setJobDefinition ( jobDefinitionEntity ) ; notificationJobActionEntity . setCorrelationData ( jobAction . getCorrelationData ( ) ) ; notificationJobActionEntity . setNotificationRegistration ( businessObjectDataNotificationRegistrationEntity ) ; } return businessObjectDataNotificationRegistrationEntity ; }
void bind ( String jndiUrl , Hashtable $F5162 attributes , RMIServer rmiServer , boolean rebind ) throws NamingException , MalformedURLException { InitialContext ctx = new InitialContext ( attributes ) ; if ( rebind ) ctx . rebind ( jndiUrl , rmiServer ) ; else ctx . bind ( jndiUrl , rmiServer ) ; $F59 ( ctx ) }
public String toString $F72 { if $F154085 ( info , algId , signature ) $F1278 $F83 ( sb ) $F84 ( sb ) sb . append ( $F5528 ( info ) ) ; $F38468 ( sb , algId ) HexDumpEncoder encoder = new HexDumpEncoder $F72 ; sb . append ( NUM00 + encoder . encodeBuffer ( signature ) ) ; $F84 ( sb ) $F92 ( sb ) }
public void testObsoleteDstZoneName $F72 throws Exception { $F261 ( format , Locale ) Date normal = format . parse ( NUM00 ) ; Date dst = format . parse ( NUM00 ) ; assertEquals ( $F264 , $F265 ( normal , dst ) ) ; }
public final void XprintLatin1NoLf ( String string ) throws IOException { $F2329 ( _source ) $F23170 ( string ) $F96 writeBuffer = _writeBuffer ; int writeLength = _writeLength ; $F115 ( length , string ) int offset = NUM00 ; int charsLength = CHARS_LENGTH ; $F1469 chars = _chars ; while ( length > NUM00 ) { int sublen = Math . min ( charsLength , writeBuffer . length - writeLength ) ; if ( sublen <= NUM00 ) { $F71896 ( _source , writeBuffer , writeLength , _BOOL ) _position += writeLength ; _isFlushRequired = _BOOL ; writeLength = NUM00 ; sublen = Math . min ( charsLength , writeBuffer . length - writeLength ) ; } $F106734 ( sublen , Math , length ) string . getChars ( offset , sublen , chars , NUM00 ) ; for ( $F119 ( i , sublen ) ) { byte value = ( byte ) chars [ i ] ; if $F37111 ( value ) { length = NUM00 ; $F597 } writeBuffer [ writeLength ++ ] = value ; } offset += sublen ; length -= sublen ; } _writeLength = writeLength ; }
private int calculateStrokeWeight $F72 { int strokeWeight = ( int ) ( getStrokeWidth ( ) * NUM00 ) ; $F55609 ( LOGGER , strokeWidth ) return strokeWeight ; }
private static List $F247778 flattenResults ( List < List $F247778 > allResults ) { List $F247778 results = new ArrayList $F247778 $F72 ; results . addAll ( allResults . remove ( NUM00 ) ) ; for ( List $F247778 relResults : allResults ) { List $F247778 newResults = new ArrayList $F247778 $F72 ; for ( MatchResult curResult : results ) { for ( MatchResult relResult : relResults ) { MatchResult newResult = curResult . copy ( ) ; newResult . addAssignment ( relResult ) ; newResults . add ( newResult ) ; } } results = newResults ; } return results ; }
$F1 public void visit ( Mapping m , int line , int col , int nextLine , int nextCol ) throws IOException { if ( previousLine != line ) { previousColumn = NUM00 ; } if ( line != nextLine || col != nextCol ) { if ( line < maxLine ) { if ( previousLine == line ) $F86 ( out ) writeEntry ( m , col ) ; previousLine = line ; previousColumn = col ; } else { Preconditions . checkState ( m == null ) ; } } for ( int i = line ; i <= nextLine && i < maxLine ; i ++ ) { $F15290 ( i , nextLine ) closeLine ( _BOOL ) ; openLine ( _BOOL ) ; } }
public boolean onClick ( int position ) { if ( mMode == MODE_MULTIPLE_SELECT ) { if $F105 ( mSelectedItems , position ) { mSelectedItems . remove ( position ) ; if $F2979 ( mSelectedItems ) { setMode ( MODE_SINGLE_SELECT ) ; } } else $F207 ( mSelectedItems , position ) notifySelectionChanged ( position ) ; return _BOOL ; } return _BOOL ; }
public void addSessionEventURL ( String url , SessionID sid ) { Set < SessionID > sids = sessionEventURLs . get ( url ) ; if ( sids == null ) { sids = Collections . newSetFromMap ( new ConcurrentHashMap < SessionID , Boolean > $F72 ) ; Set < SessionID > previousValue = sessionEventURLs . putIfAbsent ( url , sids ) ; $F57733 ( previousValue , sids ) } if $F9793 ( sids , sid ) $F5795 ( notifyPersistenceManager ) }
abstract public long rangeCount $F72 ;
public final void addInstWithUnknown ( Instances source , int attIndex ) throws Exception { $F1986 probs ; double weight , newWeight ; int classIndex ; Instance instance ; int j ; $F14238 ( probs , m_perBag ) for ( $F6929 ( j , m_perBag ) ) { if ( Utils . eq ( totaL , NUM00 ) ) { probs [ j ] = NUM00 / probs . length ; } else { probs [ j ] = m_perBag [ j ] / totaL ; } } Enumeration $F90868 enu = source . enumerateInstances ( ) ; while $F1444 ( enu ) { $F1445 ( instance , enu ) if $F350681 ( instance , attIndex ) { classIndex = $F86158 ( instance ) ; $F54171 ( weight , instance ) $F183936 ( m_perClass , classIndex , weight ) totaL = totaL + weight ; for ( $F6929 ( j , m_perBag ) ) { newWeight = probs [ j ] * weight ; m_perClassPerBag [ j ] [ classIndex ] = m_perClassPerBag [ j ] [ classIndex ] + newWeight ; $F183936 ( m_perBag , j , newWeight ) } } } }
$F1 public void onItemClick ( AdapterView $F1011 parent , View view , int position , long id ) { setSelection ( position ) ; }
public void traverseFragment ( Node pos ) throws $F2253 { Node top = pos ; while ( null != pos ) { startNode ( pos ) ; $F15376 ( nextNode , pos ) while ( null == nextNode ) { endNode ( pos ) ; if $F1238 ( top , pos ) $F597 $F5901 ( nextNode , pos ) if ( null == nextNode ) { $F49512 ( pos ) ; if ( ( null == pos ) || $F1238 ( top , pos ) ) { if ( null != pos ) endNode ( pos ) ; nextNode = null ; $F597 } } } pos = nextNode ; } }
public void updateProcessorDuration ( Duration duration ) { processor_duration_ = Optional . of ( duration ) ; }
static Object invokeOrDie $F78752 ( method , object , params ) { try { $F89561 ( method , object , params ) } catch ( IllegalAccessException e ) { throw new RuntimeException ( NUM00 + NUM00 , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) $F220831 ( cause ) else if ( cause instanceof Error ) { $F106249 ( cause ) } else $F7077 ( cause ) } }
public void startElement $F42838 ( uri , localName , qName , atts ) throws SAXException { elementLevel ++ ; nsSupport . pushContext ( ) ; if ( forceDTD && ! hasOutputDTD ) startDTD ( localName == null ? qName : localName , NUM00 , NUM00 ) ; write ( NUM00 ) ; writeName ( uri , localName , qName , _BOOL ) ; writeAttributes ( atts ) ; if ( elementLevel == NUM00 ) $F5795 ( forceNSDecls ) writeNSDecls ( ) ; write ( NUM00 ) ; if ( htmlMode && $F40270 ( qName ) ) { cdataElement = _BOOL ; } super . startElement ( uri , localName , qName , atts ) ; }
void initProgram $F72 { glUseProgram ( this . program ) ; viewMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; projMatrixUniform = glGetUniformLocation ( this . program , NUM00 ) ; viewportSizeUniform = glGetUniformLocation ( this . program , NUM00 ) ; glUseProgram ( NUM00 ) ; }
public static $F806 sortCopy $F4374 ( objects ) { int len = objects . length ; $F12914 ( copy , len ) $F135 ( System , objects , copy , len ) sort ( copy ) ; return copy ; }
public $F92426 iterator $F72 $F16048 ( list )
private static boolean accepts ( String accept_header , String to_accept ) { $F6542 ( acceptValues , accept_header ) Arrays . sort ( acceptValues ) ; return Arrays . binarySearch ( acceptValues , to_accept ) > - NUM00 || Arrays . binarySearch ( acceptValues , $F2897 ( to_accept ) ) > - NUM00 || Arrays . binarySearch ( acceptValues , NUM00 ) > - NUM00 ; }
public $F806 tokenize ( String rawString ) { $F11973 ( result ) $F14497 ( tk , rawString , m_Seperator ) while $F14498 ( tk ) { result . addElement ( tk . nextToken ( ) ) ; } $F5442 ( newStrings , result ) for ( $F2277 ( i , result ) ) { newStrings [ i ] = result . elementAt ( i ) ; } return newStrings ; }
public synchronized void returnLogCursor ( LogCursor logCursor ) { logCursor . setLoaned ( _BOOL ) ; }
void unassignPolicies ( String serviceName , Set policyDNs , boolean toVerify ) throws $F52710 { if $F10122 ( policyDNs ) $F932 AMTemplate template = getTemplate ( serviceName , AMTemplate . POLICY_TEMPLATE ) ; unassignPolicies ( template , policyDNs , toVerify ) ; }
public boolean releaseLock ( String lockName ) { if $F4251 ( lockName ) $F53787 ( s_logger , _BOOL ) try { InterProcessLock lock = s_acquiredLocks . get ( lockName ) ; if ( lock != null ) { s_acquiredLocks . remove ( lockName ) ; $F33833 ( lock ) $F556 ( s_logger , lockName ) } else { return _BOOL ; } return _BOOL ; } catch ( Exception e ) { $F59427 ( s_logger , lockName , e ) return _BOOL ; } }
@ Parameterized . Parameters ( $F72755 ) public static Collection < PaymentChannelClient . VersionSelector > data $F72 { return Arrays . asList ( PaymentChannelClient . VersionSelector . VERSION_1 , PaymentChannelClient . VersionSelector . VERSION_2_ALLOW_1 ) ; }
private View findInterceptingView ( float pos , View v ) { for ( KeyButtonView otherView : mButtonViews ) { $F83608 ( otherView , v ) if ( ArrayUtils . contains ( SMALL_BUTTON_IDS , otherView . getId ( ) ) ) $F1448 otherView . getLocationOnScreen ( sLocation ) ; float otherPos = sLocation [ mVertical ? NUM00 : NUM00 ] ; float otherDimension = mVertical ? v . getHeight ( ) : v . getWidth ( ) ; if ( pos > ( otherPos + otherDimension / NUM00 ) && pos < ( otherPos + otherDimension ) ) { return otherView ; } } $F1274 }
public void detachDiskAsync ( final String vmId , VmDiskOperation vmDiskOperation , $F67201 ( responseCallback ) ) throws IOException { $F67207 ( path , String , getBasePath , vmId ) createObjectAsync ( path , serializeObjectAsJson ( vmDiskOperation ) , responseCallback ) ; }
public static void main $F4374 ( args ) { $F4375 ( Log ) try { int num_user = NUM00 ; $F4377 ( calendar , Calendar ) boolean trace_flag = _BOOL ; CloudSim . init ( num_user , calendar , trace_flag ) ; $F15317 ( datacenter0 , createDatacenter ) $F15317 ( datacenter1 , createDatacenter ) DatacenterBroker broker1 = createBroker ( NUM00 ) ; $F4379 ( brokerId1 , broker1 ) DatacenterBroker broker2 = createBroker ( NUM00 ) ; $F4379 ( brokerId2 , broker2 ) $F4385 ( vmlist1 ) $F4385 ( vmlist2 ) int vmid = NUM00 ; int mips = NUM00 ; long size = NUM00 ; int ram = NUM00 ; long bw = NUM00 ; int pesNumber = NUM00 ; String vmm = NUM00 ; $F4394 ( vm1 , vmid , brokerId1 , mips , pesNumber , ram , bw , size , vmm ) $F4394 ( vm2 , vmid , brokerId2 , mips , pesNumber , ram , bw , size , vmm ) vmlist1 . add ( vm1 ) ; vmlist2 . add ( vm2 ) ; broker1 . submitVmList ( vmlist1 ) ; broker2 . submitVmList ( vmlist2 ) ; $F4400 ( cloudletList1 ) $F4400 ( cloudletList2 ) int id = NUM00 ; long length = NUM00 ; long fileSize = NUM00 ; long outputSize = NUM00 ; $F4405 ( utilizationModel ) $F4410 ( cloudlet1 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet1 . setUserId ( brokerId1 ) ; $F4410 ( cloudlet2 , id , length , pesNumber , fileSize , outputSize , utilizationModel ) cloudlet2 . setUserId ( brokerId2 ) ; cloudletList1 . add ( cloudlet1 ) ; cloudletList2 . add ( cloudlet2 ) ; broker1 . submitCloudletList ( cloudletList1 ) ; broker2 . submitCloudletList ( cloudletList2 ) ; $F4417 ( CloudSim ) $F4420 ( newList1 , broker1 ) $F4420 ( newList2 , broker2 ) $F4421 ( CloudSim ) $F147974 ( Log , brokerId1 ) printCloudletList ( newList1 ) ; $F147974 ( Log , brokerId2 ) printCloudletList ( newList2 ) ; $F4375 ( Log ) } $F4424 ( e , Log ) }
public static boolean isFPZero ( $F1113 final String text ) { for ( $F1088 ( i , text ) ) { $F1090 ( c , text , i ) if ( Character . isDigit ( c ) && c != NUM00 ) return _BOOL ; final char d = Character . toUpperCase ( c ) ; if $F37111 ( d ) $F597 } return _BOOL ; }
public ConcurrentHashMapPro $F15182 ( m ) $F334729 ( this , Math , m , DEFAULT_LOAD_FACTOR , DEFAULT_INITIAL_CAPACITY , DEFAULT_CONCURRENCY_LEVEL , putAll )
static $F22664 void generate ( $F215316 list , UniversalHash $F22664 hash , int level , int seed , ByteArrayOutputStream out ) { $F115 ( size , list ) if ( size <= NUM00 ) { out . write ( size ) ; $F665 } if ( level > NUM00 ) { $F50706 } if ( size <= MAX_SIZE ) { int maxOffset = MAX_OFFSETS [ size ] ; $F4120 ( hashes , size ) for ( $F119 ( i , size ) ) { hashes [ i ] = hash . hashCode ( list . get ( i ) , level , seed ) ; } int testSize = size ; if ( size >= SPEEDUP ) { testSize ++ ; maxOffset /= testSize ; } nextOffset : for ( $F119 ( offset , maxOffset ) ) { int bits = NUM00 ; for ( $F119 ( i , size ) ) { int x = hashes [ i ] ; int h = hash ( x , level , offset , testSize ) ; if ( ( bits & ( NUM00 < < h ) ) != NUM00 ) { continue nextOffset ; } bits |= NUM00 < < h ; } if ( size >= SPEEDUP ) { int pos = Integer . numberOfTrailingZeros ( ~ bits ) ; writeSizeOffset ( out , size , offset * ( size + NUM00 ) + pos ) ; } else { writeSizeOffset ( out , size , offset ) ; } $F665 } } int split ; if ( size > NUM00 * DIVIDE ) { split = size / ( NUM00 * DIVIDE ) ; } else { split = ( size - NUM00 ) / DIVIDE ; } $F34970 ( split , Math ) boolean isRoot = level == NUM00 ; ArrayList < $F215316 > lists ; do { lists = new ArrayList < $F215316 > ( split ) ; for ( $F119 ( i , split ) ) { lists . add ( new $F215316 ( size / split ) ) ; } for ( $F119 ( i , size ) ) { K x = list . get ( i ) ; $F215316 l = lists . get ( hash ( x , hash , level , seed , NUM00 , split ) ) ; l . add ( x ) ; if ( isRoot && split >= SPLIT_MANY && l . size ( ) > NUM00 * DIVIDE * NUM00 ) { level ++ ; lists = null ; $F597 } } } while ( lists == null ) ; if ( split >= SPLIT_MANY ) $F4050 ( out , SPLIT_MANY ) writeVarInt ( out , split ) ; boolean multiThreaded = $F173700 ( isRoot , list ) ; $F725 ( list ) $F51919 ( list ) if ( multiThreaded ) { generateMultiThreaded ( lists , hash , level , seed , out ) ; } else { for ( $F215316 s2 : lists ) { generate ( s2 , hash , level + NUM00 , seed , out ) ; } } if ( isRoot && split >= SPLIT_MANY ) $F4050 ( out , level ) }
private void initialiseCommands $F72 { reward = new AchievementRewards ( this ) ; achievementDisplay = new AchievementDisplay ( this ) ; giveCommand = new GiveCommand ( this ) ; bookCommand = new BookCommand ( this ) ; topCommand = new TopCommand ( this ) ; statsCommand = new StatsCommand ( this ) ; infoCommand = new InfoCommand ( this ) ; listCommand = new ListCommand ( this ) ; helpCommand = new HelpCommand ( this ) ; checkCommand = new CheckCommand ( this ) ; deleteCommand = new DeleteCommand ( this ) ; }
public CreateCustomMetric ( Monitoring monitoringService , String projectResource ) { this . monitoringService = monitoringService ; this . projectResource = projectResource ; this . metricType = CUSTOM_METRIC_DOMAIN + NUM00 + DEFAULT_METRIC_TYPE ; this . metricName = projectResource + NUM00 + metricType ; }
$F25527 ( REDUNDANT_OP_COMPACT_THRESHOLD , redundantOpCount , lruEntries )
public static boolean deleteFilesInADirectory ( String directoryPath ) { if $F21545 ( directoryPath ) { return _BOOL ; } boolean isSuccessfulDelete = _BOOL ; $F11300 files = getListOfFilesInADirectory ( directoryPath ) ; $F1933 ( files , _BOOL ) try { for ( File file : files ) { boolean fileDeleteSuccess = $F142678 ( deleteFile , directoryPath , file ) ; if ( ! fileDeleteSuccess ) { isSuccessfulDelete = _BOOL ; } } } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) isSuccessfulDelete = _BOOL ; } return isSuccessfulDelete ; }
public AnnotationFS add ( AnnotationFS aOriginFs , AnnotationFS aTargetFs , JCas aJCas , int aStart , int aEnd , AnnotationFeature aFeature , Object aLabelValue ) throws BratAnnotationException { if ( crossMultipleSentence || isSameSentence ( aJCas , aOriginFs . getBegin ( ) , aTargetFs . getEnd ( ) ) ) { return interalAddToCas ( aJCas , aStart , aEnd , aOriginFs , aTargetFs , aLabelValue , aFeature ) ; } else { throw new ArcCrossedMultipleSentenceException $F580 ; } }
public void testEqualsNull $F72 { String a = NUM00 ; int aScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) assertFalse ( aNumber . equals ( null ) ) ; }
private String readLine $F72 { $F280 ( sb ) while $F45853 ( buf ) { char c = ( char ) buf . get ( ) ; if ( c == NUM00 ) { if $F45853 ( buf ) { char n = ( char ) buf . get ( buf . position ( ) ) ; if ( n == NUM00 ) $F217730 ( buf ) } $F597 } else $F41314 ( c ) sb . append ( c ) ; } $F92 ( sb ) }
protected void write ( DataOutputStream stream ) throws Exception $F33583 ( stream , value )
$F1 public int showOpenDialog ( Component parent ) { File selFile ; int result ; m_DialogType = OPEN_DIALOG ; initGUI ( OPEN_DIALOG ) ; result = super . showOpenDialog ( parent ) ; m_DialogType = UNHANDLED_DIALOG ; removePropertyChangeListener ( m_Listener ) ; selFile = getSelectedFile ( ) ; if ( ( result == APPROVE_OPTION ) && ( getFileMustExist ( ) ) && ( selFile == null ) ) { result = showOpenDialog ( parent ) ; } else if ( ( result == APPROVE_OPTION ) && ( getFileMustExist ( ) ) && ( selFile != null ) && $F7110 ( selFile ) && $F1906 ( selFile ) ) { int retVal = JOptionPane . showConfirmDialog ( parent , NUM00 + selFile + NUM00 ) ; if ( retVal == JOptionPane . OK_OPTION ) result = showOpenDialog ( parent ) ; else result = CANCEL_OPTION ; } if ( result == APPROVE_OPTION ) { if ( getFileFilter ( ) instanceof ExtensionFileFilter ) m_LastFilter = ( ExtensionFileFilter ) getFileFilter ( ) ; else m_LastFilter = null ; if $F89491 ( getSelectedFile ) configureCurrentHandlerHook ( OPEN_DIALOG ) ; } return result ; }
public boolean isNearlyEqualTo ( DoubleVector v , double tolerance ) { return $F46899 ( Math , v , x , tolerance ) && $F46899 ( Math , v , y , tolerance ) && $F46899 ( Math , v , z , tolerance ) ; }
private float colorToAngle ( int color ) { $F12457 ( colors ) Color . colorToHSV ( color , colors ) ; return ( float ) Math . toRadians ( - colors [ NUM00 ] ) ; }
void createVerticalSnapAnimation ( boolean visible ) { float translationY = visible ? NUM00 : mTotalHeight ; float yDifference = Math . abs ( translationY - getTranslationY ( ) ) / mTotalHeight ; long duration = $F109225 ( MS_ANIMATION_DURATION , yDifference ) ; createAnimation ( NUM00 , NUM00 , translationY , duration ) ; }
$F1 public int update $F107623 ( input , inputOffset , inputLen , output , outputOffset ) throws ShortBufferException { return cipher . update ( input , inputOffset , inputLen , output , outputOffset ) ; }
private String validateInputs $F72 { if ( jarRadio . getSelection ( ) ) { File f = new File ( jarPath . getText ( ) ) ; if $F1906 ( f ) $F2455 if $F70404 ( f ) $F2455 } else { File f = new File ( dirPath . getText ( ) ) ; if $F1906 ( f ) $F2455 if $F70404 ( f ) $F2455 } $F1274 }
public static double parseDoubleString ( String st , TExecutionContext context ) { double ret = NUM00 ; $F1150 ( m , DOUBLE_PATTERN , st ) if $F54321 ( m ) { String truncated = st . substring ( NUM00 , m . end ( ) ) ; if $F2137 ( truncated , st ) { context . reportTruncate ( st , truncated ) ; } try $F97478 ( ret , Double , truncated ) catch ( NumberFormatException e ) { context . reportBadValue ( e . getMessage ( ) ) ; } } else context . reportBadValue ( st ) ; return ret ; }
public ClassPath ( DexFile ... classPath ) throws IOException { this ( Lists . newArrayList ( classPath ) , NUM00 ) ; }
public double greatCircleAzimuth ( Location location ) { $F89853 ( location , Logger ) $F46307 ( lat1 , Math , this ) $F89861 ( lon1 , Math , this ) $F46307 ( lat2 , Math , location ) $F89861 ( lon2 , Math , location ) if ( lat1 == lat2 && lon1 == lon2 ) $F1083 if ( lon1 == lon2 ) { return lat1 > lat2 ? NUM00 : NUM00 ; } double y = Math . cos ( lat2 ) * Math . sin ( lon2 - lon1 ) ; double x = Math . cos ( lat1 ) * Math . sin ( lat2 ) - Math . sin ( lat1 ) * Math . cos ( lat2 ) * Math . cos ( lon2 - lon1 ) ; $F3567 ( azimuthRadians , Math , y , x ) return Double . isNaN ( azimuthRadians ) ? NUM00 : Math . toDegrees ( azimuthRadians ) ; }
private $F8748 defineIrrelevant ( Random random ) { $F8748 irr = new boolean [ getNumAttributes ( ) ] ; for ( $F1139 ( i , irr ) ) { irr [ i ] = _BOOL ; } int numIrr = NUM00 ; for ( int i = NUM00 ; ( numIrr < getNumIrrelevant ( ) ) && ( i < getNumAttributes ( ) * NUM00 ) ; i ++ ) { int maybeNext = ( int ) ( random . nextDouble ( ) * irr . length ) ; if ( irr [ maybeNext ] == _BOOL ) { irr [ maybeNext ] = _BOOL ; numIrr ++ ; } } return irr ; }
public void addDropItem ( final String name , final double probability , final int amount ) { dropsItems . add ( new DropItem ( name , probability , amount ) ) ; }
protected void unparsedEntDecl $F19845 ( name , pubid , sysid , notation ) throws SAXException { mHandDtd . unparsedEntityDecl ( name , pubid , sysid , notation ) ; }
public $F8110 elements $F72 { synchronized ( this ) { return Collections . enumeration ( permsMap . values ( ) ) ; } }
private static String formatList $F142640 ( stringList , listPattern , listCompositionPattern ) { if ( listPattern == null || listCompositionPattern == null ) { $F83 ( result ) for ( $F9808 ( i , stringList ) ) $F70285 ( i , result , stringList ) $F92 ( result ) } if $F3305 ( stringList ) { MessageFormat format = new MessageFormat ( listCompositionPattern ) ; stringList = composeList ( format , stringList ) ; } $F224767 ( args , stringList ) $F7057 ( System , stringList , args ) args [ NUM00 ] = $F59092 ( stringList ) ; MessageFormat format = new MessageFormat ( listPattern ) ; $F137119 ( format , args ) }
public JsonArray add ( Object value ) $F18637 ( list , value , this )
public String comment $F72 throws ParseException { $F280 ( retval ) if ( lookAhead ( NUM00 ) != NUM00 ) $F1274 consume ( NUM00 ) ; while ( _BOOL ) { char next = getNextChar ( ) ; if ( next == NUM00 ) $F5153 else if ( next == NUM00 ) { throw new ParseException ( this . buffer + NUM00 , this . ptr ) ; } else if ( next == NUM00 ) { retval . append ( next ) ; next = getNextChar ( ) ; if ( next == NUM00 ) throw new ParseException ( this . buffer + NUM00 , this . ptr ) ; retval . append ( next ) ; } else $F288 ( retval , next ) } $F92 ( retval ) }
public static boolean ignorableWhitespace ( String value ) { Matcher m ; m = whitespacePattern . matcher ( value ) ; if $F24133 ( m ) return _BOOL ; else return _BOOL ; }
public DelphiWorkgroup ( File xmlFile ) throws IOException { if ( xmlFile == null ) $F825 else if $F1906 ( xmlFile ) $F144276 ( xmlFile ) parseFile ( xmlFile ) ; }
public BufferedBlockCipher ( BlockCipher cipher ) { this . cipher = cipher ; buf = new byte [ cipher . getBlockSize ( ) ] ; bufOff = NUM00 ; String name = cipher . getAlgorithmName ( ) ; $F12710 ( idx , name ) pgpCFB = ( idx > NUM00 && name . startsWith ( NUM00 , idx ) ) ; if ( pgpCFB || cipher instanceof StreamCipher ) { partialBlockOkay = _BOOL ; } else { partialBlockOkay = ( idx > NUM00 && ( name . startsWith ( NUM00 , idx ) ) ) ; } }
public static int readInts ( final File f , final LongIndex a , final long offset , final long addend ) throws IOException { return readInts ( f , NUM00 , $F5338 ( f ) / NUM00 , a , offset , addend ) ; }
public void waitAllSitesDbStable $F72 { String prefix = NUM00 ; log . info ( prefix ) ; DbJmxClient geoInstance = getJmxClient ( LOCALHOST ) ; $F28584 vdcIdIter = queryByType ( VirtualDataCenter . class , _BOOL ) ; for ( URI vdcId : vdcIdIter ) { $F279664 ( log , vdcId ) VirtualDataCenter vdc = queryObject ( VirtualDataCenter . class , vdcId ) ; if ( ! shouldCheckDbStatus ( vdc ) ) { $F5197 ( log , vdcId ) $F598 } if ( vdc . getConnectionStatus ( ) != ConnectionStatus . DISCONNECTED ) { Site activeSite = drUtil . getActiveSite ( vdc . getShortId ( ) ) ; waitDbNodesStable ( geoInstance , vdc . getShortId ( ) , activeSite . getNodeCount ( ) ) ; } } }
public void saveHierarchyState ( Bundle container ) { dispatchSaveInstanceState ( container ) ; }
private static void pipe ( InputStream source , OutputStream dest ) throws IOException { $F12496 ( buf ) int read = NUM00 ; while ( $F29984 ( read , source , buf ) >= NUM00 ) { if ( null != dest ) $F11584 ( dest , buf , read ) } if ( null != dest ) $F1206 ( dest ) }
$F1 public void init ( FilterConfig config ) throws ServletException { try { expiry = Math . min ( Math . max ( MIN_EXPIRY , Long . parseLong ( config . getInitParameter ( CACHE_CONTROL ) ) ) , MAX_EXPIRY ) ; } catch ( NumberFormatException nfe ) { LOGGER . warn ( NUM00 + CACHE_CONTROL + NUM00 , nfe ) ; expiry = null ; } }
$F1 public int hashCode $F72 { int code = NUM00 ; $F156574 ( name , code ) $F156574 ( applicationName , code ) $F156574 ( resourceNames , code ) $F156574 ( actionValues , code ) $F156574 ( advices , code ) $F156574 ( attributes , code ) return code ; }
public static boolean substractTradingFee ( Player player , int price ) { BigDecimal fee = calculateFee ( player , price ) ; return player . drop ( NUM00 , fee . intValue ( ) ) ; }
public ComplexParameter ( MathExpression expression ) $F6988 ( this , expression )
$F1 public $F14937 enumerateMeasures $F72 { $F75150 ( newVector ) $F6519 ( newVector ) $F1007 ( newVector ) }
public SampleDriver $F72 { handlers = new ArrayList < SampleHandler > $F72 ; handlers . add ( new CertificateSampleHandler $F72 ) ; handlers . add ( new GroupSampleHandler $F72 ) ; handlers . add ( new SolutionUserSampleHandler $F72 ) ; handlers . add ( new UserSampleHandler $F72 ) ; }
public $F2469 readLongArray ( final int items , final JBBPByteOrder byteOrder ) throws IOException { int pos = NUM00 ; if ( items < NUM00 ) { $F12300 ( buffer , INITIAL_ARRAY_BUFFER_SIZE ) while ( hasAvailableData ( ) ) { final long next = readLong ( byteOrder ) ; if ( buffer . length == pos ) { final $F2469 newbuffer = new long [ buffer . length < < NUM00 ] ; $F7057 ( System , buffer , newbuffer ) buffer = newbuffer ; } buffer [ pos ++ ] = next ; } if ( buffer . length == pos ) { return buffer ; } final $F2469 result = new long [ pos ] ; $F135 ( System , buffer , result , pos ) return result ; } else { final $F2469 buffer = new long [ items ] ; for ( $F119 ( i , items ) ) $F202520 ( buffer , i , readLong , byteOrder ) return buffer ; } }
private void logGraphicalBufferOccupancy ( float bufferOccupancy ) { String title = NUM00 ; $F43289 ( used , bufferOccupancy , WIDTH ) $F83 ( sb ) sb . append ( START_END_CHAR ) ; $F84 ( sb ) sb . append ( title ) ; for ( int i = $F1285 ( title ) ; i < WIDTH ; i ++ ) $F86 ( sb ) sb . append ( START_END_CHAR ) ; $F17749 ( log , sb ) $F6932 ( sb ) sb . append ( START_END_CHAR ) ; $F103815 ( i , used , sb ) for ( int j = used ; j < WIDTH ; j ++ ) $F86 ( sb ) sb . append ( START_END_CHAR ) ; $F17749 ( log , sb ) $F6932 ( sb ) sb . append ( START_END_CHAR ) ; $F103815 ( i , WIDTH , sb ) sb . append ( START_END_CHAR ) ; $F17749 ( log , sb ) }
public boolean isTerminated $F72 { return threadPool . isTerminated ( ) ; }
public boolean isMatch ( String domain , List < UserMappingAttribute > attributes , $F3803 groups ) { return _domain . equalsIgnoreCase ( domain ) && attributesMatch ( attributes ) && groupsMatch ( groups ) ; }
public static void writeSpatialGridTable ( SpatialGrid grid , String fileName ) { $F9472 ( log , fileName ) SpatialGridTableWriter sgTableWriter = new SpatialGridTableWriter $F72 ; try { sgTableWriter . write ( grid , fileName ) ; $F973 ( log ) } $F12241 ( e ) }
$F1431 public OutputSocket linkedOutputSocket ( String hintIdentifier ) { final OutputSocket outSocket = outputSocketFactory . create ( new IdentiferOverridingSocketHintDecorator ( this , hintIdentifier ) ) ; controlledOutputSockets . add ( outSocket ) ; return outSocket ; }
public void cancel $F72 { cancelled = _BOOL ; Thread thread = this . thread ; $F36258 ( thread ) }
void _setText $F97 ( text ) { this . _text = text ; this . _props = null ; }
private String prepareURL $F72 { String str = NUM00 ; str += NUM00 ; for ( $F2277 ( i , symbolList ) ) { if ( i != NUM00 ) { str += NUM00 ; } str += symbolList . get ( i ) ; } str += NUM00 ; for ( String format : parameterList ) { str += format ; } str += NUM00 ; return str ; }
public void initialize $F72 { TextureState ts = new TextureState $F72 ; ts . setEnabled ( _BOOL ) ; setRenderState ( ts ) ; for ( $F3836 ( i , toolList ) ) { ToolState state = toolList . get ( i ) ; addTool ( state , _BOOL ) ; } zBufferState = new ZBufferState $F72 ; zBufferState . setFunction ( ZBufferState . TestFunction . LessThanOrEqualTo ) ; zBufferState . setEnabled ( _BOOL ) ; setRenderState ( zBufferState ) ; }
private static void init $F72 { $F12775 ( encoders ) $F16824 ( encoders ) $F16824 ( encoders ) }
public static boolean checkImageSize ( final InputStream stream , final IConfiguration conf ) throws IOException { $F31067 ( bi , ImageIO , stream ) $F59 ( stream ) $F1933 ( bi , _BOOL ) if ( bi . getHeight ( ) > conf . getImgHeight ( ) || bi . getWidth ( ) > conf . getImgWidth ( ) ) { return _BOOL ; } return _BOOL ; }
private static boolean compareArrayCase ( final String value , final int comparator , final $F131 array ) { for ( $F1139 ( i , array ) ) { final Object obj = array [ i ] ; if ( obj instanceof String ) { if ( compareStringCase ( value , comparator , ( String ) obj ) ) { return _BOOL ; } } else if ( obj instanceof Number ) { if ( compareNumber ( value . trim ( ) , comparator , ( Number ) obj ) ) { return _BOOL ; } } else { $F24922 ( compareReflective , value , comparator , obj , _BOOL ) } } return _BOOL ; }
public double valueAt ( double x ) { return constant * Math . pow ( NUM00 - x * x , outsideExp ) ; }
protected double generateWaitTime $F72 { if ( state == STATE_WALKING_ELSEWHERE ) { $F67935 ( location , latestBusStop , state , STATE_WAITING_FOR_BUS ) } if ( state == STATE_TRAVELLING_ON_BUS ) { state = STATE_WAITING_FOR_BUS ; } $F1082 }
$F1 public $F104855 findResources ( final String name ) throws IOException { $F1338 ( name ) $F188804 result = new $F188804 $F72 ; int n = NUM00 ; while ( _BOOL ) { URLHandler handler = getHandler ( n ++ ) ; $F32472 ( handler ) handler . findResources ( name , result ) ; } return Collections . enumeration ( result ) ; }
protected void writeGraphicCtrlExt $F72 throws IOException { $F25097 ( out ) $F25097 ( out ) $F25097 ( out ) int transp , disp ; if ( transparent == null ) $F18712 ( transp , disp ) else $F18712 ( transp , disp ) if ( dispose >= NUM00 ) { disp = dispose & NUM00 ; } disp <<= NUM00 ; out . write ( NUM00 | disp | NUM00 | transp ) ; writeShort ( delay ) ; out . write ( transIndex ) ; $F25097 ( out ) }
public static void writeElementList ( XMLOutput xmlOutput , String tagName , $F46406 listValues ) throws IOException { writeElementList ( xmlOutput , tagName , listValues . iterator ( ) ) ; }
public static Date stringToDate ( String dateAsString ) { try { DateFormat df = new SimpleDateFormat ( dateFormat ) ; df . setTimeZone ( utc ) ; $F5651 ( df , dateAsString ) } catch ( ParseException e ) $F1337 catch ( NullPointerException e ) $F1337 }
public SimpleHttpRequestBuilder content ( String chars , Charset charset ) { return content ( chars . getBytes ( charset ) ) ; }
private double adjustTransform $F72 { double xMin = Double . POSITIVE_INFINITY ; double xMax = Double . NEGATIVE_INFINITY ; double yMin = Double . POSITIVE_INFINITY ; double yMax = Double . NEGATIVE_INFINITY ; for ( Variable var : csp . getVariables ( ) ) { Point2D point = getPosition ( var ) ; xMin = Math . min ( xMin , point . getX ( ) ) ; xMax = Math . max ( xMax , point . getX ( ) ) ; yMin = Math . min ( yMin , point . getY ( ) ) ; yMax = Math . max ( yMax , point . getY ( ) ) ; } double scale = Math . min ( pane . getWidth ( ) / ( xMax - xMin + NUM00 ) , pane . getHeight ( ) / ( yMax - yMin + NUM00 ) ) ; pane . setTranslateX ( ( scale * ( pane . getWidth ( ) - xMin - xMax ) / NUM00 ) ) ; pane . setTranslateY ( ( scale * ( pane . getHeight ( ) - yMin - yMax ) / NUM00 ) ) ; pane . setScaleX ( scale ) ; pane . setScaleY ( scale ) ; return scale ; }
public void addTableModelListener ( WTableModelListener listener ) { $F2329 ( listener ) $F2201 ( m_listeners , listener ) $F665 }
public boolean canTraverseOutsideSubtree $F72 { if ( null != m_parts ) { $F2199 ( n , m_parts ) for ( $F119 ( i , n ) ) { $F97670 ( part , m_parts , i ) if ( part . canTraverseOutsideSubtree ( ) ) return _BOOL ; } } return _BOOL ; }
public static CipherParameters makePBEParameters ( PBEKeySpec keySpec , int type , int hash , int keySize , int ivSize ) { PBEParametersGenerator generator = makePBEGenerator ( type , hash ) ; $F96 key ; CipherParameters param ; key = convertPassword ( type , keySpec ) ; generator . init ( key , keySpec . getSalt ( ) , keySpec . getIterationCount ( ) ) ; if ( ivSize != NUM00 ) { param = generator . generateDerivedParameters ( keySize , ivSize ) ; } else { param = generator . generateDerivedParameters ( keySize ) ; } for ( $F15868 ( i , key ) ) $F5629 ( key , i ) return param ; }
private $F2027 parseYMD ( String string ) { $F1382 ( string ) try { if ( $F4434 ( string ) || $F4434 ( string ) ) $F825 $F11844 ( ymd ) ymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; ymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; ymd [ NUM00 ] = Integer . valueOf ( $F606 ( string ) ) ; return ymd ; } catch ( NumberFormatException ex ) $F78550 ( ex ) }
public AbstractPointRenderer $F72 { shape = new $F1634 $F89166 ; color = new SingleColor ( Color . BLACK ) ; valueVisible = _BOOL ; valueColumn = NUM00 ; valueLocation = Location . CENTER ; valueAlignmentX = NUM00 ; valueAlignmentY = NUM00 ; valueRotation = NUM00 ; valueDistance = NUM00 ; valueColor = new SingleColor ( Color . BLACK ) ; valueFont = Font . decode ( null ) ; errorVisible = _BOOL ; errorColumnTop = NUM00 ; errorColumnBottom = NUM00 ; errorColor = new SingleColor ( Color . BLACK ) ; errorShape = new $F69931 ( - NUM00 , NUM00 , NUM00 , NUM00 ) ; errorStroke = new BasicStroke $F989 ; }
public Object put ( String key , Object value ) { Object oldValue = context . getAttribute ( key , ENGINE_SCOPE ) ; context . setAttribute ( key , value , ENGINE_SCOPE ) ; return oldValue ; }
public void test_getLowestSetBitPos $F72 { $F123148 int aSign = NUM00 ; int iNumber = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) int result = aNumber . getLowestSetBit ( ) ; assertTrue ( NUM00 , result == iNumber ) ; $F96 aBytes_ = $F79696 ; iNumber = NUM00 ; aNumber = new BigInteger ( aSign , aBytes_ ) ; result = aNumber . getLowestSetBit ( ) ; assertTrue ( NUM00 , result == iNumber ) ; $F96 aBytes__ = $F101798 ; iNumber = NUM00 ; aNumber = new BigInteger ( aSign , aBytes__ ) ; result = aNumber . getLowestSetBit ( ) ; assertTrue ( NUM00 , result == iNumber ) ; }
private void executeAnotherRequest $F72 throws SQLException { $F6822 ( random ) $F8254 ( value , random ) PreparedStatement preparedStatement = sharedConnection . prepareStatement ( NUM00 + value ) ; $F49 ( rs , preparedStatement ) $F24630 ( rs ) assertEquals ( value , rs . getInt ( NUM00 ) ) ; }
private void statInit $F72 { $F405059 ( labelValue , Msg , Env ) $F405061 ( fieldValue , AdempierePLAF ) fieldValue . addActionListener ( this ) ; $F405059 ( labelName , Msg , Env ) $F405061 ( fieldName , AdempierePLAF ) fieldName . addActionListener ( this ) ; fBPartner_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( I_A_Asset . Table_Name , I_A_Asset . COLUMNNAME_C_BPartner_ID ) , DisplayType . Search ) ) ; lBPartner_ID . setLabelFor ( fBPartner_ID ) ; $F405061 ( fBPartner_ID , AdempierePLAF ) fBPartner_ID . addActionListener ( this ) ; fProduct_ID = new VLookup ( NUM00 , _BOOL , _BOOL , _BOOL , MLookupFactory . get ( Env . getCtx ( ) , p_WindowNo , NUM00 , MColumn . getColumn_ID ( I_A_Asset . Table_Name , I_A_Asset . COLUMNNAME_M_Product_ID ) , DisplayType . Search ) ) ; lProduct_ID . setLabelFor ( fProduct_ID ) ; $F405061 ( fProduct_ID , AdempierePLAF ) fProduct_ID . addActionListener ( this ) ; $F405134 ( p_criteriaGrid , labelValue ) $F103711 ( p_criteriaGrid , fieldValue ) $F103711 ( p_criteriaGrid , lBPartner_ID ) $F103711 ( p_criteriaGrid , fBPartner_ID ) $F405134 ( p_criteriaGrid , labelName ) $F103711 ( p_criteriaGrid , fieldName ) $F103711 ( p_criteriaGrid , lProduct_ID ) $F103711 ( p_criteriaGrid , fProduct_ID ) }
public static int hash $F5474 ( data , seed ) { return hash ( ByteBuffer . wrap ( data ) , seed ) ; }
public int parse ( char c , $F1469 ia , int ip , int il ) { assert ( ia [ ip ] == c ) ; if ( Surrogate . isHigh ( c ) ) { if ( il - ip < NUM00 ) { error = CoderResult . UNDERFLOW ; $F150 } char d = ia [ ip + NUM00 ] ; if ( Surrogate . isLow ( d ) ) { character = toUCS4 ( c , d ) ; isPair = _BOOL ; error = null ; return character ; } $F42589 ( error , CoderResult ) $F150 } if ( Surrogate . isLow ( c ) ) { $F42589 ( error , CoderResult ) $F150 } character = c ; isPair = _BOOL ; error = null ; return character ; }
public void performStartOperationAsync $F110257 ( vmId , responseCallback ) throws IOException { $F67207 ( path , String , getBasePath , vmId ) createObjectAsync ( path , null , responseCallback ) ; }
private RtpPacket parseRtpPacket $F97 ( data ) { RtpPacket packet = new RtpPacket $F72 ; packet . mLength = data . length ; packet . mReceivedAt = System . currentTimeMillis ( ) ; packet . extension = $F18896 ( data ) > NUM00 ; if ( ( byte ) ( $F18896 ( data ) & NUM00 ) == $F19905 ) { packet . marker = NUM00 ; } else { packet . marker = NUM00 ; } packet . payloadType = ( byte ) ( $F18896 ( data ) & NUM00 ) ; packet . seqnum = ( char ) ( $F42449 ( data ) | $F18896 ( data ) ) ; packet . timestamp = ( $F257717 ( data ) | $F18896 ( data ) ) ; packet . ssrc = ( $F257717 ( data ) | $F18896 ( data ) ) ; if ( packet . extension ) { int dataId = NUM00 ; int extensionHeaderId = ( ( data [ ++ dataId ] & NUM00 ) < < NUM00 ) | ( data [ ++ dataId ] & NUM00 ) ; int length = ( ( data [ ++ dataId ] & NUM00 ) < < NUM00 ) | ( data [ ++ dataId ] & NUM00 ) ; if ( extensionHeaderId == RtpExtensionHeader . RTP_EXTENSION_HEADER_ID ) { extractExtensionHeader ( data , length , dataId , packet ) ; } packet . payloadoffset = NUM00 + length * NUM00 ; } else { packet . payloadoffset = NUM00 ; } packet . payloadlength = packet . mLength - packet . payloadoffset ; packet . mData = new byte [ packet . payloadlength ] ; System . arraycopy ( data , packet . payloadoffset , packet . mData , NUM00 , packet . payloadlength ) ; return packet ; }
public String product $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F179073 ( M_Product_ID , value ) if ( M_Product_ID == null || $F179074 ( M_Product_ID ) ) $F1278 BigDecimal priceActual = null ; Timestamp DateExpense = Env . getContextAsDate ( ctx , WindowNo , NUM00 ) ; $F35 ( DateExpense , System ) String sql = null ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { boolean noPrice = _BOOL ; sql = $F40645 + NUM00 ; $F47577 ( pstmt , DB , sql ) $F179090 ( pstmt , M_Product_ID ) pstmt . setInt ( NUM00 , Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ) ; $F47578 ( rs , pstmt ) while ( rs . next ( ) && noPrice ) { $F212479 plDate = rs . getDate ( NUM00 ) ; if ( plDate == null || ! DateExpense . before ( plDate ) ) { noPrice = _BOOL ; priceActual = rs . getBigDecimal ( NUM00 ) ; if ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; if ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; Integer ii = new Integer ( rs . getInt ( NUM00 ) ) ; if ( ! rs . wasNull ( ) ) $F275044 ( mTab , ii ) } } if ( noPrice ) { sql = $F40645 + NUM00 + NUM00 ; DB . close ( rs , pstmt ) ; $F47577 ( pstmt , DB , sql ) $F179090 ( pstmt , M_Product_ID ) pstmt . setInt ( NUM00 , Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ) ; $F47578 ( rs , pstmt ) while ( rs . next ( ) && noPrice ) { $F212479 plDate = rs . getDate ( NUM00 ) ; if ( plDate == null || ! DateExpense . before ( plDate ) ) { noPrice = _BOOL ; priceActual = rs . getBigDecimal ( NUM00 ) ; if ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; if ( priceActual == null ) priceActual = rs . getBigDecimal ( NUM00 ) ; Integer ii = new Integer ( rs . getInt ( NUM00 ) ) ; if ( ! rs . wasNull ( ) ) $F275044 ( mTab , ii ) } } } } catch ( SQLException e ) { $F62 ( log , Level , sql , e ) $F179099 ( e ) } $F47585 ( DB , rs , pstmt ) $F307246 ( priceActual , Env ) $F275044 ( mTab , priceActual ) $F1278 }
public boolean thisDeviceSpeaksTo ( BluetoothDevice other ) throws NoSuchAlgorithmException , UnsupportedEncodingException { if ( MurmurService . USE_BACKOFF ) return _BOOL ; if ( other == null ) $F53787 ( log , _BOOL ) String otherAddr = other . getAddress ( ) ; if ( otherAddr == null ) { $F9472 ( log , other ) return _BOOL ; } String myAddr = mBluetoothSpeaker . getAddress ( ) ; if ( myAddr . equals ( whichInitiates ( myAddr , otherAddr ) ) ) { return _BOOL ; } else { return _BOOL ; } }
public static $F9340 List < KeyValue $F9340 > waitUntilMinKeyValueRecordsReceived ( Properties consumerConfig , String topic , int expectedNumRecords , long waitTime ) throws InterruptedException { List < KeyValue $F9340 > $F204 ( accumData ) ; $F657 ( startTime , System ) while ( _BOOL ) { List < KeyValue $F9340 > readData = readKeyValues ( topic , consumerConfig ) ; accumData . addAll ( readData ) ; if $F29395 ( accumData , expectedNumRecords ) return accumData ; if ( System . currentTimeMillis ( ) > startTime + waitTime ) throw new AssertionError ( $F57676 ( expectedNumRecords , accumData ) + waitTime + NUM00 ) ; Thread . sleep ( Math . min ( waitTime , NUM00 ) ) ; } }
public static $F4203 CombinedDownloadTask $F4203 single ( DownloadTask $F4203 task ) { Objects . requireNonNull ( task ) ; return new SingleCombinedTask $F4203 ( task ) ; }
public void addHexListener ( final IHexPanelListener listener ) { $F1832 ( Preconditions , listener ) $F2201 ( m_listeners , listener ) }
public static < T extends SerializableEntity > Deserializer roundtripSerializableEntityWithBinarySerializer ( final T originalEntity , final AccountLookup accountLookup ) { final BinarySerializer binarySerializer = new BinarySerializer $F72 ; originalEntity . serialize ( binarySerializer ) ; return new BinaryDeserializer ( binarySerializer . getBytes ( ) , new DeserializationContext ( accountLookup ) ) ; }
$F1309 public static String encode ( final String s , final String encoding , BitSet safeOctets , boolean plusForSpace ) throws UnsupportedEncodingException { StringBuilder out = new StringBuilder $F9484 ( s ) ; boolean needsEncoding ; try { needsEncoding = encode ( s , encoding , safeOctets , plusForSpace , out ) ; } catch ( UnsupportedEncodingException e ) { throw e ; } catch ( IOException e ) $F27253 ( e ) if ( needsEncoding ) $F2495 ( out ) else { return s ; } }
public static void fireClipboardChanged $F72 { for ( $F2774 ( i , listenerList ) ) { ClipboardListener listener = ( ClipboardListener ) i . next ( ) ; listener . clipboardChanged ( ) ; } }
$F18907 ( window )
public boolean contains ( T listener ) { if ( mListeners != null ) $F298 ( mListeners , listener ) else { return _BOOL ; } }
public SimpleDictionary ( String ... aWords ) { $F21884 ( words ) for ( String word : aWords ) $F9632 ( words , word ) }
public long readLongLE $F72 throws IOException { $F52634 ( inputStream , workSpace ) return $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | $F342689 ( workSpace ) | ( ( long ) $F18896 ( workSpace ) ) ; }
public void testSetPublicKey2 $F72 throws Exception { Identity i2 = new IdentityStub ( NUM00 , IdentityScope . getSystemScope ( ) ) ; new PublicKeyStub ( NUM00 , NUM00 , new byte [ ] { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ) ; try { i2 . setPublicKey ( null ) ; } catch ( KeyManagementException ok ) $F845 }
$F160927 static long elapsedRealtime $F72 { return System . currentTimeMillis ( ) - sBootTime ; }
$F1 public void fillAssignedKeys $F32029 ( keys ) { keys . add ( _keyColumn . name ( ) ) ; }
$F1 public void removeInstanceListener ( InstanceListener dsl ) $F106 ( m_instanceListeners , dsl )
public double eccentricity $F72 { return Math . sqrt ( NUM00 - ( semiMinorAxis ( ) * semiMinorAxis ( ) ) / ( semiMajorAxis ( ) * semiMajorAxis ( ) ) ) ; }
private void simpleApply ( IDocument document , String string , ConfigurableCompletionProposal proposal ) throws BadLocationException { proposal . setCursorPosition ( string . length ( ) ) ; document . replace ( proposal . getReplacementOffset ( ) , proposal . getReplacementLength ( ) , string ) ; }
public String pullDump2PC $F72 { String serial = device . getSerialNumber ( ) ; File dest = new File ( FileUtils . getTempDirectory ( ) , serial + NUM00 ) ; $F14393 ( path , dest ) $F7028 ( log , path ) CommandLine commandpull = adbCommand ( NUM00 , NUM00 , path ) ; String out = executeCommandQuietly ( commandpull ) ; $F7028 ( log , out ) return path ; }
$F92397 public void executeTest $F72 throws Throwable { try { testEnv . executeTest ( ) ; } catch ( AssertionError assertionError ) { if ( testEnv . hasBeenStopped ( ) ) { throw new AssertionError $F16296 ( assertionError ) ; } throw assertionError ; } }
public void init $F72 { $F30057 ( pubPanel ) topic = new JComboBox $F72 ; topic . setEditable ( _BOOL ) ; topic . setMaximumSize ( MQTTFrame . TEXT_FIELD_DIMENSION ) ; topic . setMaximumRowCount ( NUM00 ) ; qosList = new JComboBox ( qos ) ; $F53383 ( qosList ) qosList . setMaximumSize ( MQTTFrame . DROP_DOWN_DIMENSION ) ; pubData = new JTextArea $F32532 ; pubData . setBorder ( new BevelBorder ( BevelBorder . LOWERED ) ) ; pubData . setMargin ( MQTTFrame . TEXT_MARGINS ) ; $F58090 ( retained ) retained . setSelected ( _BOOL ) ; pubLabel = new JLabel ( PANEL_TITLE + NUM00 ) ; $F58112 ( f , pubLabel ) pubLabel . setFont ( new Font ( f . getName ( ) , Font . BOLD , f . getSize ( ) + NUM00 ) ) ; $F58099 ( topicBox ) $F58103 ( topicBox , BoxLayout ) $F58105 ( topicBox ) topicBox . add ( topic ) ; $F58105 ( topicBox ) topicBox . add ( qosList ) ; $F58105 ( topicBox ) topicBox . add ( retained ) ; $F58099 ( titleAndTopic ) $F58107 ( titleAndTopic ) titleAndTopic . add ( pubLabel ) ; titleAndTopic . add ( topicBox ) ; hexDisplay = _BOOL ; $F58123 ( hexButton ) hexButton . addActionListener ( this ) ; $F58123 ( fileButton ) fileButton . setEnabled ( _BOOL ) ; fileButton . addActionListener ( this ) ; $F58123 ( pubButton ) pubButton . setEnabled ( _BOOL ) ; pubButton . addActionListener ( this ) ; $F58099 ( buttons ) $F58107 ( buttons ) buttons . add ( pubButton ) ; buttons . add ( fileButton ) ; buttons . add ( hexButton ) ; $F58099 ( buttonLayout ) buttonLayout . add ( buttons ) ; $F58125 ( pubPanel , titleAndTopic , BorderLayout ) pubPanel . add ( new JScrollPane ( pubData ) , BorderLayout . CENTER ) ; $F40903 ( pubPanel , buttonLayout , BorderLayout ) }
public void validateEmrClusterDefinitionKey ( EmrClusterDefinitionKey key ) throws IllegalArgumentException { $F18062 ( Assert , key ) key . setNamespace ( alternateKeyHelper . validateStringParameter ( NUM00 , key . getNamespace ( ) ) ) ; key . setEmrClusterDefinitionName ( alternateKeyHelper . validateStringParameter ( NUM00 , NUM00 , key . getEmrClusterDefinitionName ( ) ) ) ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
@ TargetApi ( VERSION_CODES . KITKAT ) private void handleSmsReceived ( Intent intent ) { if ( BuildConfig . DEBUG ) Log . v ( NUM00 ) ; Bundle bundle = intent . getExtras ( ) ; if ( bundle != null ) { SmsMessage [ ] messages = null ; if ( SmsPopupUtils . hasKitKat ( ) ) { messages = Intents . getMessagesFromIntent ( intent ) ; } else { messages = SmsPopupUtils . getMessagesFromIntent ( intent ) ; } if ( messages != null ) { notifyMessageReceived ( new SmsMmsMessage ( context , messages , System . currentTimeMillis ( ) ) ) ; } } }
public static long installAge ( long currentTimestamp , long installTimestamp , boolean sendInstallEvent ) { if ( sendInstallEvent ) { return INSTALL_AGE_IMMEDIATELY_AFTER_INSTALLING ; } else { return Math . max ( NUM00 , ( currentTimestamp - installTimestamp ) / MS_PER_DAY ) ; } }
public boolean isDistributed $F72 { return ! isLocal ( ) ; }
public void testValueOfLongNegative1 $F72 { long longVal = - NUM00 ; $F2544 ( aNumber , BigInteger , longVal ) byte $F3018 = { - NUM00 , NUM00 , NUM00 , - NUM00 , NUM00 , NUM00 , - NUM00 , - NUM00 } ; $F3030 ( rBytes ) $F3031 ( resBytes , aNumber ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F7841 ( assertEquals , aNumber ) }
$F100892 ( zzStartRead , System , zzBuffer , zzEndRead , zzCurrentPos , zzMarkedPos , newBuffer , numRead , zzReader , _BOOL , c )
public synchronized boolean isConsumer ( ImageConsumer ic ) $F298 ( theConsumers , ic )
public static boolean verifySignature ( Signature initializedSignatureEngine , $F96 message , $F96 signature ) throws SignatureException { initializedSignatureEngine . update ( message ) ; return initializedSignatureEngine . verify ( signature ) ; }
public static void writeVarInt ( OutputStream out , int x ) throws IOException { while $F220175 ( x ) { out . write ( ( byte ) ( NUM00 | ( x & NUM00 ) ) ) ; x >>>= NUM00 ; } $F220182 ( out , x ) }
$F31396 ( str , retval , ch , i , s , Integer )
public SegmentPath complete ( EndType etype ) { SegmentPath result ; if ( data == null || w < NUM00 ) $F1337 if ( w == data . length ) { result = new SegmentPath ( data , etype ) ; reset ( NUM00 ) ; } else { $F9662 ( dataToAdopt , w ) $F135 ( System , data , dataToAdopt , w ) result = new SegmentPath ( dataToAdopt , etype ) ; reset ( NUM00 ) ; } return result ; }
$F25635 ( timestamp , t , buildTag , TAG_GPS_DATE_STAMP , mGPSDateStampFormat , _BOOL , setTag , mGPSTimeStampCalendar , TAG_GPS_TIME_STAMP , Calendar )
$F5466 public Bitmap cropImage $F72 { Bitmap viewBitmap = getViewBitmap ( ) ; if ( viewBitmap == null || viewBitmap . isRecycled ( ) ) $F1337 cancelAllAnimations ( ) ; setImageToWrapCropBounds ( _BOOL ) ; $F85496 ( currentImageRect , RectUtils , mCurrentImageCorners ) $F4892 ( currentImageRect ) float currentScale = getCurrentScale ( ) ; float currentAngle = getCurrentAngle ( ) ; if ( mMaxResultImageSizeX > NUM00 && mMaxResultImageSizeY > NUM00 ) { float cropWidth = mCropRect . width ( ) / currentScale ; float cropHeight = mCropRect . height ( ) / currentScale ; if ( cropWidth > mMaxResultImageSizeX || cropHeight > mMaxResultImageSizeY ) { float scaleX = mMaxResultImageSizeX / cropWidth ; float scaleY = mMaxResultImageSizeY / cropHeight ; $F77838 ( resizeScale , Math , scaleX , scaleY ) Bitmap resizedBitmap = Bitmap . createScaledBitmap ( viewBitmap , $F85502 ( viewBitmap , resizeScale ) , $F85503 ( viewBitmap , resizeScale ) , _BOOL ) ; $F85509 ( viewBitmap , resizedBitmap ) viewBitmap = resizedBitmap ; currentScale /= resizeScale ; } } if ( currentAngle != NUM00 ) { $F2268 ( mTempMatrix ) mTempMatrix . setRotate ( currentAngle , $F77576 ( viewBitmap ) , $F63370 ( viewBitmap ) ) ; Bitmap $F74324 ( rotatedBitmap , Bitmap , viewBitmap , mTempMatrix , _BOOL ) ; $F85509 ( viewBitmap , rotatedBitmap ) viewBitmap = rotatedBitmap ; } $F85525 ( top , mCropRect , currentImageRect , currentScale ) $F85525 ( left , mCropRect , currentImageRect , currentScale ) $F85534 ( width , mCropRect , currentScale ) $F85534 ( height , mCropRect , currentScale ) return Bitmap . createBitmap ( viewBitmap , left , top , width , height ) ; }
$F1309 public static Bundle parseUrl ( String url ) { $F2936 ( url ) try { $F9518 ( u , url ) Bundle b = decodeUrl ( u . getQuery ( ) ) ; b . putAll ( decodeUrl ( u . getRef ( ) ) ) ; return b ; } catch ( MalformedURLException e ) { return new Bundle $F72 ; } }
private static void createTmpFile ( CompletableFuture < NewFile > fileCreation , Path destDir , List < TSData > files ) { $F105262 ( LOG , Level ) try { Collections . sort ( files , Comparator . comparing ( null ) ) ; final FileChannel fd = FileUtil . createTempFile ( destDir , NUM00 , NUM00 ) ; try { final DateTime begin ; try ( ToXdrTables output = new ToXdrTables ( fd , Compression . DEFAULT_OPTIMIZED ) ) { while $F5973 ( files ) { TSData tsdata = files . remove ( NUM00 ) ; if ( fileCreation . isCancelled ( ) ) $F3575 output . addAll ( tsdata ) ; } begin = new DateTime ( output . getHdrBegin ( ) , DateTimeZone . UTC ) ; if ( fileCreation . isCancelled ( ) ) $F3575 } if ( fileCreation . isCancelled ( ) ) $F3575 $F62331 ( INSTALL_POOL ) } catch ( Error | RuntimeException | IOException ex ) { try $F881 ( fd ) catch ( Error | RuntimeException | IOException ex1 ) $F47950 ( ex , ex1 ) throw ex ; } } catch ( Error | RuntimeException | IOException ex ) { LOG . log ( Level . WARNING , NUM00 , ex ) ; $F23074 ( OUTSTANDING , fileCreation ) fileCreation . completeExceptionally ( ex ) ; } }
public void contentTag $F19845 ( tag , name , value , content ) { spacing ( ) ; $F21384 ( m_out ) m_out . print ( tag ) ; $F21384 ( m_out ) m_out . print ( name ) ; $F21384 ( m_out ) $F21384 ( m_out ) escapeString ( value ) ; $F21384 ( m_out ) $F21384 ( m_out ) escapeString ( content ) ; $F21384 ( m_out ) $F21384 ( m_out ) m_out . print ( tag ) ; $F21384 ( m_out ) println ( ) ; }
public static void closeOutputStream ( OutputStream stream , String tag ) $F144343 ( stream , Log , tag , e )
public void addChild ( Component child ) { components . add ( child ) ; child . setParent ( this ) ; }
public boolean open ( int maxRows ) { $F556 ( log , maxRows ) m_maxRows = maxRows ; if ( m_open ) { $F22806 ( log ) dataRefreshAll ( ) ; return _BOOL ; } $F8801 ( m_virtual , verifyVirtual ) createSelectSql ( ) ; if $F3581 ( m_SQL ) { $F81302 ( log , Level ) return _BOOL ; } m_loader = new Loader $F72 ; m_rowCount = m_loader . open ( maxRows ) ; if ( m_virtual ) { m_buffer = null ; m_virtualBuffer = new HashMap < Integer , $F131 > $F989 ; } else { m_buffer = new ArrayList $F60673 ( m_rowCount + NUM00 ) ; } m_sort = new ArrayList < MSort > ( m_rowCount + NUM00 ) ; if ( m_rowCount > NUM00 ) { if ( m_rowCount < NUM00 ) $F21687 ( m_loader ) else { $F40963 ( m_loaderThread , m_loader ) ; $F2346 ( m_loaderThread ) } } else $F59 ( m_loader ) m_open = _BOOL ; m_changed = _BOOL ; m_rowChanged = - NUM00 ; m_inserting = _BOOL ; return _BOOL ; }
public void addMessageListener ( IMessageListener listener ) $F207 ( listeners , listener )
protected void syncFlushVdcConfigToLocal $F72 throws Exception { if ( vdcPropBarrier == null ) { vdcPropBarrier = new VdcPropertyBarrier ( targetSiteInfo , VDC_OP_BARRIER_TIMEOUT ) ; } $F14811 ( vdcPropBarrier ) try $F5795 ( flushVdcConfigToLocal ) finally { boolean allLeft = vdcPropBarrier . leave ( ) ; if ( ! allLeft ) { $F973 ( log ) Thread . sleep ( IPSEC_RESTART_DELAY ) ; } } vdcPropBarrier = null ; }
public CorruptIndexException ( String message , DataInput input , Throwable cause ) { this ( message , Objects . toString ( input ) , cause ) ; }
protected void removeFromQuarantineQueue ( NodePortTuple npt ) { while $F16914 ( quarantineQueue , npt ) ; }
public boolean hasExpired $F72 { $F116 ( maxAge , _BOOL ) if ( maxAge == MAX_AGE_UNSPECIFIED ) return _BOOL ; long deltaSecond = $F32708 ( System , whenCreated ) ; if ( deltaSecond > maxAge ) return _BOOL ; else return _BOOL ; }
public static String repeatCharacter ( char c , int repetitions ) { $F7542 ( s , repetitions ) $F48485 ( i , repetitions , s , c ) $F92 ( s ) }
public static String checkAndReplaceLiterals ( String instStr ) { String tmp = instStr ; if $F105 ( tmp , COMPONENTS_DELIM ) { $F107746 ( tmp , COMPONENTS_DELIM ) $F28293 ( LOG , COMPONENTS_DELIM ) } if $F105 ( tmp , ELEMENT_DELIM ) { $F107746 ( tmp , ELEMENT_DELIM ) $F28293 ( LOG , ELEMENT_DELIM ) } if $F105 ( tmp , LEVELIN ) { $F107746 ( tmp , LEVELIN ) $F28293 ( LOG , LEVELIN ) } if $F105 ( tmp , LEVELOUT ) { $F107746 ( tmp , LEVELOUT ) $F28293 ( LOG , LEVELOUT ) } if $F105 ( tmp , PARFOR_CDATA_END ) { $F107746 ( tmp , PARFOR_CDATA_END ) $F28293 ( LOG , PARFOR_CDATA_END ) } return tmp ; }
protected void notifyHistoryChangedListeners $F72 { Iterator < HistoryChangedListener > iter ; HistoryChangedListener l ; $F18058 ( iter , m_HistoryChangedListeners ) while $F2921 ( iter ) { $F45366 ( l , iter ) l . historyChanged ( new HistoryChangedEvent ( this , HISTORY_NAME , getHistory ( ) ) ) ; } }
public final static $F10849 splitTypeLevelsSignature ( String typeSignature ) { $F1469 source = Signature . removeCapture ( typeSignature . toCharArray ( ) ) ; $F127812 ( CharOperation , source ) ; $F10849 signatures = new char $F57748 ; int signaturesCount = NUM00 ; int paramOpening = NUM00 ; for ( $F151668 ( idx , ln , source ) ) { switch ( source [ idx ] ) { $F1262 paramOpening -- ; if ( paramOpening == NUM00 ) { if ( signaturesCount == signatures . length ) { System . arraycopy ( signatures , NUM00 , signatures = new char $F10850 ( signaturesCount ) , NUM00 , signaturesCount ) ; } } $F597 $F188943 ( paramOpening ) $F1262 if ( paramOpening == NUM00 ) { if ( signaturesCount == signatures . length ) { System . arraycopy ( signatures , NUM00 , signatures = new char $F10850 ( signaturesCount ) , NUM00 , signaturesCount ) ; } signatures [ signaturesCount ] = new char [ idx + NUM00 ] ; System . arraycopy ( source , NUM00 , signatures [ signaturesCount ] , NUM00 , idx ) ; signatures [ signaturesCount ] [ idx ] = Signature . C_SEMICOLON ; signaturesCount ++ ; } $F597 $F1262 source [ idx ] = NUM00 ; $F597 } } $F10849 typeSignatures = new char $F10850 ( signaturesCount ) ; typeSignatures [ NUM00 ] = source ; for ( int i = NUM00 , j = signaturesCount - NUM00 ; i <= signaturesCount ; i ++ , j -- ) $F20651 ( typeSignatures , i , signatures , j ) return typeSignatures ; }
public static $F4203 T withWriter ( Writer writer , @ ClosureParams ( FirstParam . class ) $F158697 closure ) throws IOException { try { T result = closure . call ( writer ) ; try $F29882 ( writer ) $F29052 Writer temp = writer ; writer = null ; $F59 ( temp ) return result ; } $F18632 ( closeWithWarning , writer ) }
public static int round ( double value ) { int roundedValue = value > NUM00 ? $F127087 ( value ) : - ( int ) ( Math . abs ( value ) + NUM00 ) ; return roundedValue ; }
private ServiceRegistrar [ ] buildServiceRegistrar $F72 { int k = NUM00 ; ServiceRegistrar [ ] proxys = new ServiceRegistrar $F2313 ( discoveredLocators ) ; $F10531 ( iter , discoveredLocators ) while $F2921 ( iter ) { LocatorReg reg = ( LocatorReg ) iter . next ( ) ; proxys [ k ++ ] = reg . proxy ; } return proxys ; }
$F52843 ( packed , map , i , j , count , value )
public void rewindToWS $F72 { $F32905 ( nextOffset ) nextOffset -- ; while ( nextOffset > NUM00 && ! $F1750 ( Character , s , nextOffset ) ) { nextOffset -- ; } this . offset = nextOffset - NUM00 ; }
private static Permission [ ] flatten ( Permission [ ] pa ) { List l = new ArrayList ( pa . length ) ; for ( $F1139 ( i , pa ) ) { Permission p = pa [ i ] ; if ( p instanceof GrantPermission ) { l . addAll ( Arrays . asList ( ( ( GrantPermission ) p ) . grants ) ) ; } else $F207 ( l , p ) } return ( Permission [ ] ) l . toArray ( new Permission $F2313 ( l ) ) ; }
$F238095 ( lock , this , a , count , k , p , first )
protected void startDocumentInternal $F72 throws SAXException { if ( m_needToCallStartDocument ) { super . startDocumentInternal ( ) ; m_saxHandler . startDocument ( ) ; m_needToCallStartDocument = _BOOL ; } }
public static boolean isAnonymous ( String className ) { $F24867 ( i , className ) if ( i >= NUM00 && ++ i < className . length ( ) ) { while $F7007 ( i , className ) { if $F118383 ( Character , className , i ) { return _BOOL ; } i ++ ; } return _BOOL ; } return _BOOL ; }
String descriptor ( boolean includeThis ) { $F83 ( result ) $F84 ( result ) if ( includeThis ) { result . append ( declaringType . name ) ; } for ( TypeId t : parameters . types ) { result . append ( t . name ) ; } $F84 ( result ) result . append ( returnType . name ) ; $F92 ( result ) }
public void testSingleFile $F72 throws Exception { JFlexMojo mojo = newMojo ( NUM00 ) ; $F1699 ( mojo ) File produced = getExpectedOutputFile ( mojo ) ; assertTrue ( NUM00 + produced , produced . isFile ( ) ) ; $F6466 ( size , produced ) boolean correctSize = ( size > NUM00 ) && ( size < NUM00 ) ; assertTrue ( NUM00 + size , correctSize ) ; }
public final static boolean isPotentialZipArchive ( String name ) { $F24867 ( lastDot , name ) $F5881 ( lastDot , _BOOL ) if ( name . lastIndexOf ( File . separatorChar ) > lastDot ) { return _BOOL ; } $F115 ( length , name ) int extensionLength = length - lastDot - NUM00 ; if $F9615 ( extensionLength , EXTENSION_java ) { for ( $F18298 ( i , extensionLength ) ) { if ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_java . charAt ( i ) ) $F5153 $F6482 ( i , _BOOL ) } } if $F9615 ( extensionLength , EXTENSION_class ) { for ( $F18298 ( i , extensionLength ) ) { if ( Character . toLowerCase ( name . charAt ( length - extensionLength + i ) ) != EXTENSION_class . charAt ( i ) ) { return _BOOL ; } } return _BOOL ; } return _BOOL ; }
void addTerm ( MapBuilderTermType type , JClass jclass , String alias ) { MapBuilderTerm newTerm = new MapBuilderTerm $F72 ; newTerm . type = type ; newTerm . jclass = jclass ; newTerm . alias = alias ; terms . add ( newTerm ) ; }
public Collection engineGenerateCertificates ( InputStream inStream ) throws CertificateException { $F132633 cert ; $F19151 ( certs ) while $F2108 ( cert , engineGenerateCertificate , inStream ) $F207 ( certs , cert ) return certs ; }
$F1431 protected void writePath ( Shape s ) { $F38394 ( segments , s ) ; $F1993 ( coords ) for ( int i = NUM00 ; ! segments . isDone ( ) ; i ++ , segments . next ( ) ) { if ( i > NUM00 ) $F1210 ( write ) $F38403 ( segmentType , segments , coords ) switch ( segmentType ) { case PathIterator . SEG_MOVETO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; $F597 case PathIterator . SEG_LINETO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; $F597 case PathIterator . SEG_CUBICTO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; $F597 case PathIterator . SEG_QUADTO : write ( NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] , NUM00 , coords [ NUM00 ] ) ; $F597 case PathIterator . SEG_CLOSE : write ( NUM00 ) ; $F597 $F1267 $F4638 } } }
$F82267 ( expression , errorMessage , String )
$F128244 ( LockSupport , this , Thread )
$F1 public int portRemote $F72 { if ( _channel != null ) { try { SocketAddress addr = _channel . getRemoteAddress ( ) ; $F1082 } catch ( Exception e ) { $F301 ( e ) $F1082 } } else $F1082 }
public void addDropTarget ( DropTarget target ) $F207 ( mDropTargets , target )
$F1 public void startElement ( final String namespaceURI , final String localName , final String qName , final Attributes atts ) throws SAXException { Object objectToLoad = null ; if $F10471 ( openNodes ) objectToLoad = rootObject ; else objectToLoad = createChild ( qName , atts ) ; if ( objectToLoad != null ) { if ( atts . getIndex ( NUM00 ) < NUM00 ) ObjectGetSetter . set ( objectToLoad , NUM00 , qName ) ; ObjectGetSetter . setAll ( objectToLoad , atts ) ; } openNodes . push ( new StackedObject ( objectToLoad ) ) ; }
public final int put ( Object key , int value , boolean isReplace ) { int prime = _prime ; int hash = Math . abs ( System . identityHashCode ( key ) % prime ) ; $F131 keys = _keys ; while ( _BOOL ) { Object testKey = keys [ hash ] ; if ( testKey == null ) { keys [ hash ] = key ; _values [ hash ] = value ; _size ++ ; if ( keys . length <= NUM00 * _size ) resize ( NUM00 * keys . length ) ; return value ; } else if ( key != testKey ) { $F271125 ( hash , prime ) $F598 } else if ( isReplace ) { int old = _values [ hash ] ; _values [ hash ] = value ; return old ; } else $F269670 ( _values , hash ) } }
public int addAllAbsent ( Collection c ) { $F2199 ( numNew , c ) $F94561 ( numNew ) synchronized ( this ) { $F8867 ( elements , getArray ) int len = elements . length ; $F133 ( temp , numNew ) int added = NUM00 ; for ( $F2774 ( itr , c ) ) { $F8877 ( e , itr ) if ( indexOf ( e , elements , NUM00 , len ) < NUM00 && indexOf ( e , temp , NUM00 , added ) < NUM00 ) temp [ added ++ ] = e ; } if ( added != NUM00 ) { $F131 newElements = new Object [ len + added ] ; $F135 ( System , elements , newElements , len ) $F6483 ( System , temp , newElements , len , added ) setArray ( newElements ) ; } return added ; } }
private static final synchronized int nextPoolId $F72 $F124417 ( poolNumberSequence )
$F1 public void close $F72 throws IOException { if ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { if ( handshake_started ) { alertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; try { output . write ( alertProtocol . wrap ( ) ) ; } $F18071 alertProtocol . setProcessed ( ) ; } shutdown ( ) ; closeTransportLayer ( ) ; socket_was_closed = _BOOL ; } }
protected static void registerLibrary ( ILibraryManager externalLibraryManager , String dataverse , String libraryName ) throws Exception { ClassLoader classLoader = getLibraryClassLoader ( dataverse , libraryName ) ; externalLibraryManager . registerLibraryClassLoader ( dataverse , libraryName , classLoader ) ; }
public void autoSize $F72 { $F18748 ( autoResize ) }
public void testCase9 $F72 { $F15139 int aSign = NUM00 ; byte $F3018 = { NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) BigInteger bNumber = BigInteger . ONE ; $F7838 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public static String rawMD5 ( String s ) { return binl2rstr ( binl2md5 ( rstr2binl ( s ) , $F9483 ( s ) ) ) ; }
public boolean isQuestCompleted ( final String name ) { final String info = getQuest ( name , NUM00 ) ; $F1933 ( info , _BOOL ) $F786 ( info ) }
$F52843 ( packed , map , i , j , count , value )
public void testZeroZero $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
$F160927 static float ceil ( float value ) { return ( float ) Math . ceil ( value ) ; }
private final User removeUser ( String channel , String nick ) { $F37156 ( channel ) User user = new User ( NUM00 , nick ) ; synchronized ( _channels ) { Hashtable < User , User > users = _channels . get ( channel ) ; if ( users != null ) $F20067 ( users , user ) } $F1274 }
public static void translatePos ( $F36712 moveNodes , Map < GraphNode , Point2D > positions , Translater intoRegion ) { for ( GraphNode node : moveNodes ) { Point2D location = translateNode ( node , positions , intoRegion ) ; if ( null == location ) $F1448 positions . put ( node , location ) ; } }
public void ifPresentOrElse ( LongConsumer action , Runnable emptyAction ) { if ( isPresent ) $F17670 ( action , value ) else $F21688 ( emptyAction ) }
public void testToBigIntegerPos2 $F72 $F114431 ( a , bNumber , aNumber , result , assertTrue )
private String cleanupPath ( String fileName ) { $F1338 ( fileName ) $F2936 ( fileName ) $F2936 ( fileName ) if $F3106 ( fileName ) { return fileName ; } if $F3106 ( fileName ) $F1948 ( fileName ) return NUM00 + fileName ; }
public static $F6969 invocationHandlerReturnType $F60993 ( type ) { if $F41267 ( type ) return $F94727 ; if $F94715 ( type ) return $F62127 ; if $F41243 ( type ) return $F20774 ; if $F41249 ( type ) return $F58950 ; if $F41233 ( type ) return $F58948 ; if $F41238 ( type ) return $F10063 ; if $F41261 ( type ) return $F94724 ; if $F41255 ( type ) return $F61970 ; return type ; }
private $F9341 findNode $F154318 ( key ) { for ( $F589 ) { $F45432 ( b , findPredecessor , key ) $F35175 ( n , b ) for ( $F589 ) { $F1275 ( n ) $F35175 ( f , n ) $F45438 ( n , b ) Object v = n . value ; $F45440 ( v , n , b , f ) $F45442 ( v , n , b ) $F45446 ( c , key , n ) $F116 ( c , n ) $F94834 ( c ) b = n ; n = f ; } } }
private static Script scriptFromString ( String scriptString , ScriptType scriptType ) { return new Script ( scriptString , scriptType ) ; }
private void finishNestedMode $F72 throws SAXException { md = ( ModeData ) modeDataStack . pop ( ) ; }
public void addPropertyChangeListener ( final PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; }
protected int skipWhitespace ( int c ) throws IOException { while $F37111 ( c ) $F145798 ( c , reader ) return c ; }
public Builder noCache $F72 { this . noCache = _BOOL ; return this ; }
$F1431 public void computeClosestPoints $F72 { float centerX = contentRect . centerX ( ) ; float closestDistance = Float . MAX_VALUE ; for ( int i = NUM00 ; i < pointsCountWithinXRange * NUM00 ; i += NUM00 ) { float x = getDrawX ( xRangePoints [ i ] ) ; $F40429 ( distance , Math , x , centerX ) if ( distance <= closestDistance ) { if ( distance == closestDistance ) { closestPointsCount ++ ; } else { closestPointsCount = NUM00 ; } closestDistance = distance ; if ( closestPointsBuffer . length < ( closestPointsCount * NUM00 + NUM00 ) ) { closestPointsBuffer = new float $F10562 ( closestPointsBuffer ) ; } closestPointsBuffer [ closestPointsCount * NUM00 + NUM00 ] = xRangePoints [ i ] ; closestPointsBuffer [ closestPointsCount * NUM00 + NUM00 ] = xRangePoints [ i + NUM00 ] ; } } if ( pointsCountWithinXRange > NUM00 ) { closestPointsCount ++ ; } }
protected TransformedString stem ( String words ) { $F83 ( builder ) $F26691 $F8690 ( indexMap ) ; Integer index = NUM00 ; $F7876 ( content , words ) while $F5973 ( content ) { indexMap . put ( builder . length ( ) , index ) ; if ( Character . isAlphabetic ( content . charAt ( NUM00 ) ) ) { $F1150 ( m , WORD_PATTERN , content ) m . find ( ) ; $F45144 ( match , m ) CharSequence stemmedMatch = stemmer . stem ( match ) ; builder . append ( stemmedMatch ) ; $F90433 ( index , match ) $F11255 ( content , match ) } else { builder . append ( $F606 ( content ) ) ; $F3108 ( content ) index ++ ; } } indexMap . put ( builder . length ( ) , index ) ; return new TransformedString $F122301 ( words , builder , indexMap ) ; }
$F1 public void onLayoutChildren ( $F40828 recycler , RecyclerView . State state ) { if ( state . getItemCount ( ) == NUM00 ) $F14411 ( detachAndScrapAttachedViews , recycler ) if ( state . isPreLayout ( ) ) { if $F37713 ( getChildCount ) $F665 $F3666 ( childCount , getChildCount ) for ( $F119 ( i , childCount ) ) { View child = getChildAt ( i ) ; RecyclerView . LayoutParams lp = ( RecyclerView . LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isItemRemoved ( ) ) { removedTopAndBoundPositionCount ++ ; if ( firstChangedPosition == - NUM00 || firstAttachedItemPosition + i < firstChangedPosition ) { firstChangedPosition = firstAttachedItemPosition + i ; } } } if ( removedTopAndBoundPositionCount != NUM00 ) { layoutAttachedAndAppearingViews ( recycler , state ) ; } isBeforePreLayout = _BOOL ; $F665 } if $F37713 ( getChildCount ) { initializeLayoutParameters ( ) ; fillGrid ( recycler , state , _BOOL ) ; $F665 } if ( isNotifyDataSetChanged ) { detachAndScrapAttachedViews ( recycler ) ; initializeLayoutParameters ( ) ; fillGrid ( recycler , state , _BOOL ) ; isNotifyDataSetChanged = _BOOL ; $F665 } if ( firstChangedPosition == - NUM00 ) { mCurrentPosition = firstAttachedItemPosition ; lastAttachedItemPosition = firstAttachedItemPosition ; topBorder = getPaddingTop ( ) ; bottomBorder = getHeight ( ) - getPaddingBottom ( ) ; spanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; updateSpanBottomParameters ( ) ; detachAndScrapAttachedViews ( recycler ) ; fillGrid ( recycler , state , _BOOL ) ; isBeforePreLayout = _BOOL ; $F665 } for ( int i = firstChangedPosition ; i < state . getItemCount ( ) ; i ++ ) { if ( itemLayoutWidthCache . get ( i , NUM00 ) != NUM00 ) { itemLayoutWidthCache . delete ( i ) ; itemLayoutHeightCache . delete ( i ) ; itemOccupiedStartSpan . delete ( i ) ; } if ( fakeItemLayoutWidthCache . get ( i , NUM00 ) != NUM00 ) { itemLayoutWidthCache . put ( i , fakeItemLayoutWidthCache . get ( i ) ) ; itemLayoutHeightCache . put ( i , fakeItemLayoutHeightCache . get ( i ) ) ; itemOccupiedStartSpan . put ( i , fakeItemOccupiedStartSpan . get ( i ) ) ; } } $F725 ( fakeItemLayoutWidthCache ) $F725 ( fakeItemLayoutHeightCache ) $F725 ( fakeItemOccupiedStartSpan ) detachAndScrapAttachedViews ( recycler ) ; if ( firstChangedPosition < firstAttachedItemPosition ) { mCurrentPosition = firstAttachedItemPosition ; lastAttachedItemPosition = firstAttachedItemPosition ; topBorder = getPaddingTop ( ) ; bottomBorder = getHeight ( ) - getPaddingBottom ( ) ; spanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; updateSpanBottomParameters ( ) ; fillGrid ( recycler , state , _BOOL ) ; if ( spanBottomMax < bottomBorder ) { scrollBy ( spanBottomMax - bottomBorder , recycler , state ) ; } layoutDisappearingViews ( recycler , state ) ; } else { mCurrentPosition = firstAttachedItemPosition ; lastAttachedItemPosition = firstAttachedItemPosition ; topBorder = getPaddingTop ( ) ; bottomBorder = getHeight ( ) - getPaddingBottom ( ) ; spanBottom = Arrays . copyOf ( spanTop , mSpanCount ) ; updateSpanBottomParameters ( ) ; fillGrid ( recycler , state , _BOOL ) ; if ( spanBottomMax - bottomBorder < NUM00 ) { scrollBy ( spanBottomMax - bottomBorder , recycler , state ) ; } } isBeforePreLayout = _BOOL ; firstChangedPosition = - NUM00 ; removedTopAndBoundPositionCount = NUM00 ; $F725 ( disappearingViewCache ) }
void clear $F72 $F5122 ( valueNumbersUnconditionallyDereferenced , derefLocationSetMap )
$F31980 ( text , URLEncoder )
public $F806 list $F72 throws RemoteException { $F806 names ; synchronized ( bindings ) { $F2199 ( i , bindings ) $F58180 ( names , i ) $F42745 ( enum_ , bindings ) while ( ( -- i ) >= NUM00 ) names [ i ] = enum_ . nextElement ( ) ; } return names ; }
public static void assertQEx ( String message , SolrQueryRequest req , int code ) { try { ignoreException ( NUM00 ) ; h . query ( req ) ; fail ( message ) ; } catch ( SolrException sex ) { assertEquals ( code , sex . code ( ) ) ; } $F270358 ( e2 ) finally $F1210 ( unIgnoreException ) }
public static void copyFile ( String fromFile , String toFile ) throws IOException { copyFile ( new File ( fromFile ) , new File ( toFile ) ) ; }
protected synchronized void readAndVerify $F72 throws InvalidKeyException , IOException , FileEncryptionException , IllegalBlockSizeException , BadPaddingException , FileIntegrityException { if ( backingRandomAccessFile . length ( ) < headerSize ( ) ) $F112401 if ( shareKey == null || shareKey . getEncoded ( ) . length == NUM00 ) $F112401 else { $F2268 ( headerAuthHMac ) KeyParameter keyParameter = new KeyParameter $F4697 ( shareKey ) ; headerAuthHMac . init ( keyParameter ) ; } long oldpos = backingRandomAccessFile . getFilePointer ( ) ; $F927 ( backingRandomAccessFile ) $F96 header_data = new byte [ headerSize ( ) - FileHeader . AUTH_TAG_SIZE ] ; backingRandomAccessFile . read ( header_data ) ; backingRandomAccessFile . read ( headerAuthTag ) ; backingRandomAccessFile . seek ( oldpos ) ; $F6163 ( headerAuthHMac , header_data ) $F2175 ( hmacRef , AUTH_TAG_SIZE ) $F137382 ( headerAuthHMac , hmacRef ) if $F1209 ( Arrays , hmacRef , headerAuthTag ) { throw new FileIntegrityException $F580 ; } else { DataInputStream istream = new DataInputStream $F24702 ( header_data ) ; $F82619 ( tmpmagic , PANBOX_FILE_MAGIC ) istream . read ( tmpmagic ) ; if $F1209 ( Arrays , tmpmagic , PANBOX_FILE_MAGIC ) $F112401 $F82619 ( tmpversion , PANBOX_FILE_VERSION ) istream . read ( tmpversion ) ; if $F1209 ( Arrays , tmpversion , PANBOX_FILE_VERSION ) { throw new FileEncryptionException $F3943 ( PANBOX_FILE_VERSION ) ; } this . shareKeyVersion = istream . readInt ( ) ; $F96 tmpencryptedFileKey = new byte [ KeyConstants . SYMMETRIC_FILE_KEY_SIZE_BYTES ] ; istream . read ( tmpencryptedFileKey ) ; $F116470 ( filekeyCipher , Cipher , shareKey ) this . decryptedFileKey = new SecretKeySpec ( filekeyCipher . doFinal ( tmpencryptedFileKey ) , getAlgorithmIdentifier ( ) ) ; if ( implementsAuthentication ( ) ) { $F96 tmpFileAuthBuf = new byte [ AuthTagVerifier . AUTH_TAG_SIZE ] ; istream . read ( tmpFileAuthBuf ) ; $F96 zeroBuf = new byte [ AuthTagVerifier . AUTH_TAG_SIZE ] ; $F26770 ( Arrays , zeroBuf ) if $F12512 ( Arrays , zeroBuf , tmpFileAuthBuf ) $F82623 ( setFileAuthTag ) else { setFileAuthTag ( tmpFileAuthBuf ) ; } } $F59 ( istream ) } }
public void mouseReleased ( MouseEvent e ) { $F128225 vv = ( $F128225 ) e . getSource ( ) ; down = null ; vv . setCursor ( $F88367 ( Cursor ) ) ; }
$F3594 ( oredCriteria , orderByClause , distinct , _BOOL )
$F179160 public void changeLocoSpeed ( DccThrottle t , Section sec , float speed ) { if ( sec == referenced && speed == desiredSpeedStep ) { $F35060 ( log ) $F665 } float sectionLength = sec . getActualLength ( ) ; if $F585 ( log ) { log . debug ( $F16018 ( sec ) ) ; } if ( sec == referenced ) { distanceRemaining = distanceRemaining - getDistanceTravelled ( _throttle . getIsForward ( ) , _throttle . getSpeedSetting ( ) , ( ( float ) ( System . nanoTime ( ) - lastTimeTimerStarted ) / NUM00 ) ) ; sectionLength = distanceRemaining ; } else { referenced = sec ; } changeLocoSpeed ( t , sectionLength , speed ) ; }
private void drawOffsets ( final Graphics g ) { $F3666 ( linesToDraw , getNumberOfVisibleRows ) final String formatString = m_addressMode == AddressMode . BIT32 ? NUM00 : NUM00 ; final long elementSize = getElementSize ( ) ; final long baseAddress = m_model . getStartAddress ( ) == - NUM00 ? NUM00 : m_model . getStartAddress ( ) ; for ( $F119 ( i , linesToDraw ) ) { final int elementIndex = m_firstRow + i ; final long elementAddress = baseAddress + ( elementIndex * elementSize ) ; final String offsetString = String . format ( formatString , elementAddress ) ; if ( elementAddress == m_model . getStackPointer ( ) ) { highlightStackPointer ( g , i ) ; } if ( isEnabled ( ) ) $F158293 ( g , m_fontColorOffsets ) else { g . setColor ( m_disabledColor != m_bgColorOffset ? m_disabledColor : Color . WHITE ) ; } g . drawString ( offsetString , PADDING_LEFT - ( m_charWidth * m_firstColumn ) , m_paddingTop + ( i * m_rowHeight ) ) ; } }
public static final String crypt ( String salt , String original ) { while $F3599 ( salt ) salt += NUM00 ; $F4000 ( buffer ) $F12685 ( charZero , salt ) $F12685 ( charOne , salt ) buffer . setCharAt ( NUM00 , charZero ) ; buffer . setCharAt ( NUM00 , charOne ) ; int Eswap0 = con_salt [ charZero ] ; int Eswap1 = con_salt [ charOne ] < < NUM00 ; byte key [ ] = $F10314 ; for ( $F1139 ( i , key ) ) key [ i ] = $F19905 ; for ( int i = NUM00 ; i < key . length && i < original . length ( ) ; i ++ ) { $F8205 ( iChar , original , i ) key [ i ] = ( byte ) ( iChar < < NUM00 ) ; } int schedule [ ] = des_set_key ( key ) ; int out [ ] = body ( schedule , Eswap0 , Eswap1 ) ; byte $F1310 = $F10314 ; intToFourBytes ( out [ NUM00 ] , b , NUM00 ) ; intToFourBytes ( out [ NUM00 ] , b , NUM00 ) ; b [ NUM00 ] = NUM00 ; for ( int i = NUM00 , y = NUM00 , u = NUM00 ; i < NUM00 ; i ++ ) { for ( int j = NUM00 , c = NUM00 ; j < NUM00 ; j ++ ) { c <<= NUM00 ; if ( ( b [ y ] & u ) != NUM00 ) c |= NUM00 ; u >>>= NUM00 ; if ( u == NUM00 ) { y ++ ; u = NUM00 ; } buffer . setCharAt ( i , ( char ) cov_2char [ c ] ) ; } } $F27059 ( buffer ) }
public static boolean prefixedWith ( String a , String b ) { $F12418 ( a , b , _BOOL ) $F112225 ( a , b ) }
public static String readStream ( InputStream inputStream ) throws IOException { $F1338 ( inputStream ) $F1538 ( bout ) $F12496 ( buf ) int r ; $F29757 ( r , inputStream , buf , bout ) $F1662 ( bout ) }
private Instances makeHeader $F72 { $F53630 ( fv ) fv . add ( $F84263 ) ; fv . add ( $F84263 ) ; fv . add ( $F84263 ) ; return new Instances ( NUM00 , fv , NUM00 ) ; }
private static ICloseableIterator < IBindingSet > iterator ( final IRunningQuery runningQuery ) { final ICloseableIterator < IBindingSet [ ] > it1 = runningQuery . iterator ( ) ; final ICloseableIterator < IBindingSet > it2 = new Dechunkerator < IBindingSet > ( it1 ) ; final ICloseableIterator < IBindingSet > it3 = new RunningQueryCloseableIterator < IBindingSet > ( runningQuery , it2 ) ; return it3 ; }
public void makeImmutable $F72 { $F4246 ( isMutable , _BOOL ) }
public final double doOperation $F72 throws OperatorFailedException { $F62063 ( dim , parameter ) final int dim1 = MathUtils . nextInt ( dim ) ; int dim2 = dim1 ; while ( dim1 == dim2 ) { dim2 = MathUtils . nextInt ( dim ) ; } $F62068 ( scalar1 , parameter , dim1 ) $F62068 ( scalar2 , parameter , dim2 ) final double d = MathUtils . nextDouble ( ) * delta * scalar1 ; scalar1 -= d ; if ( parameterWeights [ dim1 ] != parameterWeights [ dim2 ] ) { scalar2 += d * ( double ) parameterWeights [ dim1 ] / ( double ) parameterWeights [ dim2 ] ; } else { scalar2 += d ; } parameter . setParameterValue ( dim1 , scalar1 ) ; parameter . setParameterValue ( dim2 , scalar2 ) ; return Math . log ( scalar2 / ( scalar1 + d ) ) ; }
$F1 public final boolean isOpen $F72 $F1522 ( isOpen )
private static StreamTokenizer createTokenizer ( String s ) { StreamTokenizer st = new StreamTokenizer $F33896 ( s ) ; $F61733 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) $F33902 ( st ) st . wordChars ( NUM00 + NUM00 , NUM00 ) ; st . whitespaceChars ( NUM00 , NUM00 ) ; st . lowerCaseMode ( _BOOL ) ; $F33903 ( st ) st . slashSlashComments ( _BOOL ) ; st . slashStarComments ( _BOOL ) ; return st ; }
public static String removeChars ( String str , String oldchars ) { int pos = indexOfChars ( str , oldchars ) ; $F5881 ( pos , str ) $F83 ( buf ) int start = NUM00 ; do { $F13037 ( buf , str , start , pos ) start = pos + NUM00 ; pos = indexOfChars ( str , oldchars , start ) ; } while ( pos != - NUM00 ) ; if $F7007 ( start , str ) { $F13047 ( buf , str , start ) } $F92 ( buf ) }
private void sortUnitsToMove ( final $F336297 units , final Route route ) { if $F4251 ( units ) $F932 else if ( route == null ) { final Exception nullRouteError = ( new IllegalArgumentException $F580 ) ; ClientLogger . logQuietly ( NUM00 , nullRouteError ) ; } final Comparator $F101 unitComparator ; if ( route . isUnload ( ) && Match . someMatch ( units , Matches . UnitIsLand ) ) { unitComparator = UnitComparator . getUnloadableUnitsComparator ( units , route , getUnitOwner ( units ) ) ; } else { unitComparator = UnitComparator . getMovableUnitsComparator ( units , route ) ; } Collections . sort ( units , unitComparator ) ; }
public boolean implementsInterface ( ReferenceBinding anInterface , boolean searchHierarchy ) { if ( this == anInterface ) return _BOOL ; $F262544 interfacesToVisit = null ; int nextPosition = NUM00 ; ReferenceBinding currentType = this ; do { $F262544 itsInterfaces = currentType . superInterfaces ( ) ; if ( itsInterfaces != null && itsInterfaces != Binding . NO_SUPERINTERFACES ) { if ( interfacesToVisit == null ) { interfacesToVisit = itsInterfaces ; nextPosition = interfacesToVisit . length ; } else { int itsLength = itsInterfaces . length ; if ( nextPosition + itsLength >= interfacesToVisit . length ) System . arraycopy ( interfacesToVisit , NUM00 , interfacesToVisit = new ReferenceBinding [ nextPosition + itsLength + NUM00 ] , NUM00 , nextPosition ) ; nextInterface : for ( $F119 ( a , itsLength ) ) { ReferenceBinding next = itsInterfaces [ a ] ; for ( $F119 ( b , nextPosition ) ) if ( next == interfacesToVisit [ b ] ) continue nextInterface ; interfacesToVisit [ nextPosition ++ ] = next ; } } } } while ( searchHierarchy && ( currentType = currentType . superclass ( ) ) != null ) ; for ( $F119 ( i , nextPosition ) ) { currentType = interfacesToVisit [ i ] ; if ( currentType . isEquivalentTo ( anInterface ) ) return _BOOL ; $F262544 itsInterfaces = currentType . superInterfaces ( ) ; if ( itsInterfaces != null && itsInterfaces != Binding . NO_SUPERINTERFACES ) { int itsLength = itsInterfaces . length ; if ( nextPosition + itsLength >= interfacesToVisit . length ) System . arraycopy ( interfacesToVisit , NUM00 , interfacesToVisit = new ReferenceBinding [ nextPosition + itsLength + NUM00 ] , NUM00 , nextPosition ) ; nextInterface : for ( $F119 ( a , itsLength ) ) { ReferenceBinding next = itsInterfaces [ a ] ; for ( $F119 ( b , nextPosition ) ) if ( next == interfacesToVisit [ b ] ) continue nextInterface ; interfacesToVisit [ nextPosition ++ ] = next ; } } } return _BOOL ; }
public Road ( int id , String name , Intersection from , Intersection to , RoadClass roadClass , RoadLayer roadLayer ) { this . id = id ; this . name = name ; this . roadLayer = roadLayer ; points = new Waypoint $F380 ; setIntersections ( from , to ) ; this . roadClass = roadClass ; createLines ( ) ; modified = _BOOL ; }
$F1 public void process ( WatchedEvent event ) { KeeperState eventState = event . getState ( ) ; EventType eventType = event . getType ( ) ; $F21153 ( log , eventState , eventType ) if ( eventState == KeeperState . SyncConnected ) { $F38783 ( connectedSignal ) $F10635 ( log , connectionString ) } }
private void initProperties ( String filePropertiesName ) { readFromClassPath ( filePropertiesName ) ; Path curDirPath = getFileInCurrentDir ( filePropertiesName ) ; if $F97092 ( Files , curDirPath ) { try ( InputStream curFolder = Files . newInputStream ( curDirPath ) ) { $F25302 ( curFolder , load ) } catch ( Exception e ) $F72290 ( filePropertiesName , e ) } }
private void resetBounds $F72 $F39233 ( bottomProteinId , topProteinId )
private String property $F1947 ( classId , key , instanceId ) { return PREFIX_OVF_PROP + makePropertyKey ( classId , key , instanceId ) ; }
public String list ( String dir ) throws IOException { passive ( ) ; send ( NUM00 + dir ) ; readCode ( NUM00 ) ; $F1538 ( out ) IOUtils . copyAndClose ( inData , out ) ; readCode ( NUM00 ) ; $F1208 ( data , out ) $F22269 ( data ) }
public static int convertPxToSp ( int pxSize ) { return Math . round ( ( float ) pxSize * getDisplayDensity4Fonts ( ) ) ; }
private void persistConsistencyGroups ( Collection < BlockConsistencyGroup > cgsToPersist ) { if $F45081 ( cgsToPersist ) { List < BlockConsistencyGroup > cgsToCreate = new ArrayList < BlockConsistencyGroup > $F72 ; List < BlockConsistencyGroup > cgsToUpdate = new ArrayList < BlockConsistencyGroup > $F72 ; for ( BlockConsistencyGroup cg : cgsToPersist ) { if ( null == cg . getCreationTime ( ) ) $F207 ( cgsToCreate , cg ) else $F207 ( cgsToUpdate , cg ) } if $F5973 ( cgsToCreate ) { _dbClient . createObject ( cgsToCreate ) ; } if $F5973 ( cgsToUpdate ) { _dbClient . updateObject ( cgsToUpdate ) ; } } }
public void requestPasswordChangedTime $F72 { operations . add ( PasswordPolicyStateOperationType . GET_PASSWORD_CHANGED_TIME ) ; }
public static $F96 encodeRegionName ( String regionName ) { $F96 metadata ; try { $F60661 ( jsonObject ) jsonObject . put ( JSON_FIELD_TAG , regionName ) ; $F1822 ( json , jsonObject ) metadata = json . getBytes ( JSON_CHARSET ) ; } catch ( Exception e ) { $F56767 ( Log , TAG , e ) metadata = null ; } return metadata ; }
public boolean isValid $F72 { boolean valid = _BOOL ; if ( endtime . getTime ( ) < System . currentTimeMillis ( ) ) { valid = _BOOL ; } else if ( starttime != null ) { if ( starttime . getTime ( ) > System . currentTimeMillis ( ) ) { valid = _BOOL ; } } else { if ( authtime . getTime ( ) > System . currentTimeMillis ( ) ) { valid = _BOOL ; } } return valid ; }
public void testGetElementsByTagNameNS1 $F72 throws Throwable { Document doc ; Document newDoc ; DocumentType docType = null ; DOMImplementation domImpl ; NodeList childList ; String nullNS = null ; $F236 ( doc , load , builder ) $F28589 ( domImpl , doc ) newDoc = domImpl . createDocument ( nullNS , NUM00 , docType ) ; $F103343 ( childList , newDoc ) assertEquals ( NUM00 , NUM00 , childList . getLength ( ) ) ; }
public static boolean addSeparatorIfNeeded ( JPopupMenu popupMenu ) { final int menuComponentCount = popupMenu . getComponentCount ( ) ; $F6482 ( menuComponentCount , _BOOL ) final Component lastMenuComponent = popupMenu . getComponent ( menuComponentCount - NUM00 ) ; $F46660 ( isPopupMenuSeparator , lastMenuComponent , _BOOL ) $F55657 ( popupMenu ) return _BOOL ; }
public int groupSize ( String grpName ) { int res = NUM00 ; for ( HadoopCounter counter : cntrs . values ( ) ) { if ( grpName . equals ( counter . group ( ) ) ) res ++ ; } return res ; }
public ResourceBundleEnumeration ( $F2689 set , $F14937 enumeration ) { this . set = set ; this . iterator = set . iterator ( ) ; this . enumeration = enumeration ; }
public static int toRGB ( ColorSpace colorSpace , float ... components ) { $F5415 rgb = colorSpace . toRGB ( components ) ; if ( rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] < NUM00 || rgb [ NUM00 ] > NUM00 || rgb [ NUM00 ] > NUM00 || rgb [ NUM00 ] > NUM00 ) $F1083 return NUM00 | ( ( int ) ( rgb [ NUM00 ] * NUM00 ) < < NUM00 ) | ( ( int ) ( rgb [ NUM00 ] * NUM00 ) < < NUM00 ) | ( int ) ( rgb [ NUM00 ] * NUM00 ) ; }
private static void skipNames ( ByteBuffer tableBuffer , int count ) { for ( $F1316 ( i , count ) ) { ByteUtil . forward ( tableBuffer , tableBuffer . getShort ( ) ) ; } }
private LogSource $F72 $F845
public Object2IntOpenHashMap $F9183 supportMap $F72 { List < ItemSet > itemSets = learn ( ) ; Object2IntOpenHashMap $F9183 confidenceMap = new Object2IntOpenHashMap $F200 $F716 ( itemSets ) ; for ( ItemSet itemSet : itemSets ) { confidenceMap . put ( itemSet . items , itemSet . support ) ; } return confidenceMap ; }
public static $F3803 makeFeatureIdListFromPrefixed $F4673 ( parameters ) { $F3803 featureIdList = FastList . newInstance ( ) ; $F397 ( parameters , featureIdList ) for ( $F150315 ( entry , parameters ) ) { $F3477 ( parameterName , entry ) if $F3106 ( parameterName ) { $F189249 ( productFeatureId , entry ) if $F35028 ( UtilValidate , productFeatureId ) $F207 ( featureIdList , productFeatureId ) } } return featureIdList ; }
private void updateOverscrollAnimation ( final int scrolledOffset ) { $F57400 ( mEdgeGlowLeft , mEdgeGlowRight ) int nextScrollPosition = mCurrentX + scrolledOffset ; if $F123959 ( mFlingTracker ) { if ( nextScrollPosition < NUM00 ) $F123967 ( overscroll , Math , scrolledOffset , mEdgeGlowLeft , getRenderWidth , mEdgeGlowRight ) else if ( nextScrollPosition > mMaxX ) $F123967 ( overscroll , Math , scrolledOffset , mEdgeGlowRight , getRenderWidth , mEdgeGlowLeft ) } }
public void addLongSelectionListener ( SelectionListener listener ) { $F10057 ( listener ) $F24127 ( longSelectionListeners , listener ) }
public void validate $F72 { final List < ValidationException > exceptionList = new ArrayList < ValidationException > $F72 ; validate ( exceptionList ) ; if $F5973 ( exceptionList ) throw exceptionList . get ( NUM00 ) ; }
protected void installComponents $F72 { if $F120134 ( rendererPane , createCellRendererPane ) $F207 ( tree , rendererPane ) }
private void runPendingRequests $F72 { int maxStartId = - NUM00 ; BillingRequest request ; while ( ( request = mPendingRequests . peek ( ) ) != null ) { if ( request . runIfConnected ( ) ) { $F7042 ( mPendingRequests ) if ( maxStartId < request . getStartId ( ) ) { maxStartId = request . getStartId ( ) ; } } else $F10990 ( bindToMarketBillingService ) } if ( maxStartId >= NUM00 ) { if ( Consts . DEBUG ) { $F26334 ( Log , TAG , maxStartId ) } stopSelf ( maxStartId ) ; } }
public CActionDifferenceTraces ( final JFrame parent , final ITraceListProvider traceProvider , final TraceList trace1 , final TraceList trace2 ) { super ( String . format ( NUM00 , trace1 . getName ( ) , trace2 . getName ( ) ) ) ; m_parent = parent ; m_traceProvider = traceProvider ; m_trace1 = trace1 ; m_trace2 = trace2 ; }
public static void copyFile ( File fromFile , File toFile ) throws IOException { $F4647 ( fileInputStream , fromFile ) $F4649 ( fileOutputStream , toFile ) int i ; byte $F75368 = $F10314 ; $F29757 ( i , fileInputStream , bytes , fileOutputStream ) $F59 ( fileInputStream ) $F59 ( fileOutputStream ) }
public final void updateTimeControlTitle $F72 { $F2027 tmpInfo = ctrl . getTimeLimit ( ) ; $F83 ( sb ) int tc = tmpInfo [ NUM00 ] ; int mps = tmpInfo [ NUM00 ] ; int inc = tmpInfo [ NUM00 ] ; if ( mps > NUM00 ) $F444 ( sb , mps ) $F6407 ( sb , timeToString , tc ) if ( ( inc > NUM00 ) || ( mps <= NUM00 ) ) { $F84 ( sb ) sb . append ( tmpInfo [ NUM00 ] / NUM00 ) ; } $F39858 ( summaryTitleText , sb ) }
public static boolean isInstalled ( PackageManager packageManager , String packageName ) { List < PackageInfo > packs = packageManager . getInstalledPackages ( NUM00 ) ; for ( $F2277 ( i , packs ) ) { if ( TextUtils . equals ( packs . get ( i ) . packageName , packageName ) ) return _BOOL ; } return _BOOL ; }
$F92397 public void after $F72 throws SQLException { Connection connection = null ; Statement statement = null ; try { connection = getNewConnection ( _BOOL ) ; $F2715 ( statement , connection ) statement . executeQuery ( NUM00 ) ; } $F85840 ( statement , connection ) }
private void attachHeader ( SIPHeader h ) { $F19273 ( h ) try { if ( h instanceof SIPHeaderList ) { SIPHeaderList $F1011 hl = ( SIPHeaderList $F1011 ) h ; $F19233 ( hl ) } attachHeader ( h , _BOOL , _BOOL ) ; } catch ( SIPDuplicateHeaderException ex ) $F845 }
@ Action ( $F3144 ) public String listWorkflow $F72 { if ( wfAction != null && wfAction . equals ( CollectionConstants . WF_ACTION_APPROVE ) ) fetchReceipts ( CollectionConstants . WF_ACTION_APPROVE ) ; else fetchReceipts ( CollectionConstants . WF_ACTION_SUBMIT ) ; return INDEX ; }
public static final List < Geo > polyNearPoly ( GeoArray s , GeoArray r , double near ) { $F17900 ( rlen , r ) $F17900 ( slen , s ) Geo pl0 = r . get ( rlen - NUM00 ) ; Geo pl1 = new Geo $F72 ; Geo sl0 = s . get ( slen - NUM00 ) ; Geo sl1 = new Geo $F72 ; List < Geo > list = null ; for ( $F119 ( j , rlen ) ) { pl1 = r . get ( j , pl1 ) ; for ( $F119 ( i , slen ) ) { sl1 = s . get ( i , sl1 ) ; Geo ret = segmentsIntersectOrNear ( sl0 , sl1 , pl0 , pl1 , near ) ; if ( ret != null ) { if ( list == null ) { list = new LinkedList < Geo > $F72 ; } list . add ( ret ) ; } sl0 = sl1 ; } pl0 = pl1 ; } return list ; }
public void initParam ( Object obj ) { paramObject = obj ; Enumeration < AbstractParamPanel > en = tablePanel . elements ( ) ; AbstractParamPanel panel = null ; while $F1444 ( en ) { $F1445 ( panel , en ) panel . initParam ( obj ) ; } }
public void updateTopic ( String topic , DbContextRule rule ) { topic = StringUtils . toLowerEnglish ( topic ) ; RuleHead head = ruleMap . get ( topic ) ; if ( head == null ) { head = new RuleHead ( NUM00 , topic , rule ) ; ruleMap . put ( topic , head ) ; statements . add ( head ) ; } else { head . setRule ( rule ) ; } }
public static double log10 ( double x ) { return Math . log ( x ) / LOG10 ; }
public static int isButtonOnScreen ( final String buttonKey ) { Component onScreen ; try { onScreen = BubbleWindow . findButton ( buttonKey , RapidMinerGUI . getMainFrame ( ) ) ; } catch ( NullPointerException e ) { return OBJECT_NOT_ON_SCREEN ; } $F1933 ( onScreen , OBJECT_NOT_ON_SCREEN ) int xposition = onScreen . getLocationOnScreen ( ) . x ; int yposition = onScreen . getLocationOnScreen ( ) . y ; int otherXposition = xposition + onScreen . getWidth ( ) ; int otherYposition = yposition + onScreen . getHeight ( ) ; Window frame = RapidMinerGUI . getMainFrame ( ) ; if ( otherXposition <= frame . getWidth ( ) && otherYposition <= frame . getHeight ( ) && xposition > NUM00 && yposition > NUM00 ) { return OBJECT_SHOWING_ON_SCREEN ; } else { return OBJECT_NOT_SHOWING ; } }
$F129060 ( views , direction , focusableMode , focusableCount , descendantFocusability , getDescendantFocusability , FOCUS_BLOCK_DESCENDANTS , i , getChildCount , child , getChildAt , VISIBLE , ii , infoForChild , mCurItem , FOCUS_AFTER_DESCENDANTS , isFocusable , FOCUSABLES_TOUCH_MODE , isInTouchMode , isFocusableInTouchMode , this )
public static boolean reachable ( InetAddress addr , int reachTimeout ) { try { return addr . isReachable ( reachTimeout ) ; } catch ( IOException ignore ) { return _BOOL ; } }
protected static String timestr ( long time_val , long total_time ) { boolean neg ; long ms = NUM00 ; long sec = NUM00 ; long percent10 ; String pad ; neg = time_val < NUM00 ; if ( neg ) time_val = - time_val ; ms = time_val % NUM00 ; sec = time_val / NUM00 ; if ( sec < NUM00 ) pad = NUM00 ; else if ( sec < NUM00 ) pad = NUM00 ; else if ( sec < NUM00 ) pad = NUM00 ; else pad = NUM00 ; percent10 = ( time_val * NUM00 ) / total_time ; return ( neg ? NUM00 : NUM00 ) + pad + sec + NUM00 + ( ( ms % NUM00 ) / NUM00 ) + ( ( ms % NUM00 ) / NUM00 ) + ( ms % NUM00 ) + NUM00 + NUM00 + percent10 / NUM00 + NUM00 + percent10 % NUM00 + NUM00 ; }
public static Tree rotateByName ( Tree tree ) { return new SimpleTree ( rotateNodeByName ( tree , tree . getRoot ( ) ) ) ; }
@ Subscribe public void onEvent ( SearchInPosition event ) { List < LatLng > list = MapHelper . getSearchArea ( event . getSteps ( ) , new LatLng ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude ) ) ; snackMe ( getString ( R . string . toast_searching ) ) ; nianticManager . getGyms ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; nianticManager . getPokeStops ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; nianticManager . getLuredPokemon ( event . getPosition ( ) . latitude , event . getPosition ( ) . longitude , NUM00 ) ; for ( LatLng p : list ) { nianticManager . getCatchablePokemon ( p . latitude , p . longitude , NUM00 ) ; } }
public void save ( OnSaveLogListener listener ) { File dir = getLogDir ( ) ; if ( dir == null ) { listener . onError ( NUM00 + NUM00 ) ; $F665 } FileWriter fileWriter = null ; try { File output = new File ( dir , getLogFileName ( ) ) ; fileWriter = new FileWriter ( output , _BOOL ) ; List < LogEntry > entries = bufferedLogs ( ) ; for ( LogEntry entry : entries ) { fileWriter . write ( entry . prettyPrint ( ) + NUM00 ) ; } listener . onSave ( output ) ; } catch ( IOException e ) { listener . onError ( e . getMessage ( ) ) ; $F301 ( e ) } finally { if ( fileWriter != null ) { try $F881 ( fileWriter ) catch ( IOException e ) { listener . onError ( e . getMessage ( ) ) ; $F301 ( e ) } } } }
protected StorageHADomain checkAdapterExistsInDB ( String nativeGuid ) throws IOException { StorageHADomain adapter = null ; List < StorageHADomain > adapterInDB = CustomQueryUtility . getActiveStorageHADomainByNativeGuid ( _dbClient , nativeGuid ) ; if $F1032 ( adapterInDB ) $F36987 ( adapter , adapterInDB ) return adapter ; }
public static Executor createTaskDistributor $F72 { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , NUM00 ) ) ; }
protected $F19578 toCoordinateArray ( Stack stack ) { $F19578 coordinates = new Coordinate $F2313 ( stack ) ; for ( $F2277 ( i , stack ) ) { Coordinate coordinate = ( Coordinate ) stack . get ( i ) ; coordinates [ i ] = coordinate ; } return coordinates ; }
private static void onEntityOpened ( KeyEvent event ) throws BadLocationException { JEditorPane editor = ( JEditorPane ) event . getSource ( ) ; $F47177 ( doc , editor ) int pos = editor . getCaretPosition ( ) ; String tag = getCurrentTag ( doc . getText ( NUM00 , pos ) ) ; $F59924 ( tag ) String remainder = doc . getText ( pos , doc . getLength ( ) - pos ) ; for ( $F1088 ( i , remainder ) ) { $F1280 ( c , remainder , i ) if ( c == NUM00 ) $F5153 else if $F32022 ( Character , c ) $F932 } $F280 ( buffer ) int newPosition = pos ; String indent = getIndent ( doc , pos ) ; if $F3057 ( tag ) { $F84 ( buffer ) newPosition += NUM00 ; } else if $F3057 ( tag ) { $F84 ( buffer ) newPosition += NUM00 ; } else if $F3057 ( tag ) { $F84 ( buffer ) newPosition += NUM00 ; } else if $F3057 ( tag ) { $F84 ( buffer ) $F86403 ( buffer , indent ) $F86403 ( buffer , indent ) newPosition += NUM00 ; } else if $F3057 ( tag ) { $F84 ( buffer ) $F86403 ( buffer , indent ) newPosition += NUM00 ; } else if $F3057 ( tag ) { $F84 ( buffer ) $F86403 ( buffer , indent ) $F86403 ( buffer , indent ) newPosition += $F63757 ( indent ) ; } else $F932 doc . insertString ( pos , buffer . toString ( ) , null ) ; editor . setCaretPosition ( newPosition ) ; $F60335 ( event ) }
$F1431 private String checkForWellKnownNamespacePrefix ( final String prefix ) { final String namespace ; if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = BD . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = BDS . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = QueryHints . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = RDF . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = RDFS . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = XSD . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = FOAFVocabularyDecl . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = FN . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = OWL . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = SESAME . NAMESPACE ) ; } else if $F3057 ( prefix ) { prefixMap . put ( NUM00 , namespace = GASService . Options . NAMESPACE ) ; } else { namespace = null ; } return namespace ; }
private void prepareUserForRanking ( User user ) { User updatedUser = userRepository . findOne ( user . getId ( ) , NUM00 ) ; if ( updatedUser . getImported ( ) == null || ! updatedUser . getImported ( ) ) { updatedUser . setImported ( _BOOL ) ; updatedUser . setPagerank ( null ) ; updatedUser . setLastPageRank ( null ) ; updatedUser . setCurrentRank ( null ) ; updatedUser . setPreviousRank ( null ) ; userRepository . save ( updatedUser , NUM00 ) ; } }
private static List < Comment > orderComments ( List < Comment > comments ) { Map < String , List < Comment > > $F8690 ( parentMap ) ; List < Comment > $F204 ( rootComments ) ; for ( Comment c : comments ) { String parentUuid = c . parentUuid ; List < Comment > l = parentMap . get ( parentUuid ) ; $F64950 ( l , parentMap , parentUuid ) l . add ( c ) ; if ( parentUuid == null ) $F207 ( rootComments , c ) } List < Comment > $F204 ( result ) ; addChildren ( parentMap , rootComments , result ) ; return result ; }
protected static final void logRawDiagnostic ( String msg ) { if ( diagnosticsStream != null ) { diagnosticsStream . println ( msg ) ; $F1206 ( diagnosticsStream ) } }
public void initialize ( Subject subject , CallbackHandler callbackHandler , $F6253 ( sharedState ) , $F6253 ( options ) ) { $F68570 ( unauthenticatedIdentity , options ) handler = callbackHandler ; this . subject = subject ; }
public Macro ( File file ) throws EOFException , FileNotFoundException , IOException { $F2218 ( dbf , DocumentBuilderFactory ) DocumentBuilder db = null ; Document doc = null ; try { $F6281 ( db , dbf ) InputSource is = new InputSource ( new UnicodeReader $F113801 ( file , FILE_ENCODING ) ) ; is . setEncoding ( FILE_ENCODING ) ; doc = db . parse ( is ) ; } catch ( Exception e ) { $F301 ( e ) $F105671 ( desc , e ) if ( desc == null ) $F84156 ( desc , e ) $F3495 ( desc ) } $F13241 ( macroRecords ) boolean parsedOK = initializeFromXMLFile ( doc . getDocumentElement ( ) ) ; if ( parsedOK == _BOOL ) { name = null ; $F725 ( macroRecords ) macroRecords = null ; $F3575 } }
public boolean contains ( symbol sym ) { return _all . containsKey ( sym . name ( ) ) ; }
private PieData generateDataPie ( int cnt ) { $F60075 entries = new $F60075 $F72 ; for ( $F6268 ( i ) ) { entries . add ( new Entry ( $F34940 ( Math ) + NUM00 , i ) ) ; } PieDataSet d = new PieDataSet ( entries , NUM00 ) ; d . setSliceSpace ( NUM00 ) ; d . setColors ( ColorTemplate . VORDIPLOM_COLORS ) ; PieData cd = new PieData ( getQuarters ( ) , d ) ; return cd ; }
public void sendUserDeleteNotification ( Map attributes ) { try { if $F1032 ( deleteNotifyList ) { sendEmail ( deleteNotifyList , attributes , NUM00 , NUM00 , NUM00 ) ; } } catch ( MessagingException e ) { if $F12866 ( debug ) { debug . warning ( $F38 + entryDN , e ) ; } } }
public void addMapsIdMapping ( DatabaseMapping mapping ) $F207 ( mapsIdMappings , mapping )
$F1 public final char readChar $F72 throws IOException { $F52634 ( dis , work ) return ( char ) ( $F169749 ( work ) | $F18896 ( work ) ) ; }
public int taskSize $F72 $F1652 ( tasks )
public void addMutedIp ( final String ip , final Date muteTill ) { if ( isIpMuted ( ip ) ) { removeMutedIp ( ip ) ; } Timestamp muteTillTs = null ; if ( muteTill != null ) { muteTillTs = $F16812 ( muteTill ) ; } $F35577 ( s_logger , ip ) final Connection con = Database . getConnection ( ) ; try { $F500803 ( ps , con ) $F3916 ( ps , ip ) ps . setTimestamp ( NUM00 , muteTillTs ) ; $F1699 ( ps ) $F59 ( ps ) $F17621 ( con ) } catch ( final SQLException sqle ) { if ( sqle . getErrorCode ( ) == NUM00 ) { s_logger . info ( $F6165 ( ip , sqle ) ) ; $F665 } s_logger . log ( Level . SEVERE , NUM00 + ip , sqle ) ; throw new IllegalStateException $F1783 ( sqle ) ; } finally { DbUtil . closeConnection ( con ) ; } }
public boolean isRslUrlSigned ( String url ) { $F1933 ( url , _BOOL ) return url . endsWith ( SIGNED_RSL_URL_DOT_EXTENSION ) ; }
public void removeUserLockoutEntry ( String userDN ) { pwResetFailHash . remove ( userDN ) ; userWarningCount = NUM00 ; }
public void createDatabaseEntitiesForBusinessObjectDataSearchTesting $F72 { businessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . VALID ) ; businessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . INVALID ) ; businessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE_2 , AbstractServiceTest . BDEF_NAME_2 , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION_2 , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . INVALID ) ; businessObjectDataDaoTestHelper . createBusinessObjectDataEntity ( AbstractServiceTest . NAMESPACE_2 , AbstractServiceTest . BDEF_NAME_2 , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE_2 , AbstractServiceTest . FORMAT_VERSION_2 , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . NO_SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . VALID ) ; }
@ SkipValidation @ Action ( $F3144 ) public String reset $F72 { if $F585 ( LOGGER ) LOGGER . debug ( $F3911 ( ownerName , zoneId , wardId , propertyType , noticeType , noticeNumber , noticeFromDate ) + noticeToDate + NUM00 + indexNumber + NUM00 + houseNumber ) ; ownerName = NUM00 ; zoneId = - NUM00 ; wardId = - NUM00 ; propertyType = NUM00 ; noticeType = NUM00 ; noticeNumber = NUM00 ; noticeFromDate = null ; noticeToDate = null ; indexNumber = NUM00 ; houseNumber = NUM00 ; $F51622 ( LOGGER ) return INDEX ; }
public void checkOptionsValid $F72 { if $F19274 ( alias_ratio ) $F11389 if $F19274 ( null_ratio ) $F11389 if ( maxsize <= NUM00 ) $F1666 ( maxsize ) if ( $F1030 ( literals_file ) && literals_level == ClassLiteralsMode . NONE ) $F11389 }
$F1 public UUID sessionId $F72 { if ( sessionId == null ) sessionId = UUID . randomUUID ( ) ; return sessionId ; }
private void readObject ( final ObjectInputStream in ) throws $F6427 { $F6428 ( in ) $F292347 ( definingCalendar , Calendar , timeZone , locale ) init ( definingCalendar ) ; }
$F1 public MemChunkHolder < BigDataPMemAllocator > createChunk ( long size , boolean autoreclaim ) { MemChunkHolder < BigDataPMemAllocator > ret = null ; Long addr = m_nvmasvc . allocate ( m_nid , size , _BOOL ) ; if ( ( null == addr || NUM00 == addr ) && m_activegc ) { forceGC ( ) ; addr = m_nvmasvc . allocate ( m_nid , size , _BOOL ) ; } if ( null != addr && NUM00 != addr ) { ret = new MemChunkHolder < BigDataPMemAllocator > ( this , addr , size ) ; ret . setCollector ( m_chunkcollector ) ; $F160288 ( autoreclaim , m_chunkcollector , ret ) } return ret ; }
public int hashCode $F72 { int result = NUM00 ; if ( tableName != null ) { result = NUM00 * tableName . hashCode ( ) ; } if ( repositoryName != null ) { result = NUM00 * repositoryName . hashCode ( ) ; } return result ; }
$F58902 ( name , threadId , mFinished , mMarkers , SystemClock )
private void toString ( StringBuilder acc , int prec , boolean expand ) { if ( this . meta != null && ! expand ) { acc . append ( this . meta ) ; $F665 } boolean paren = op . getPrec ( ) < prec ; $F19006 ( paren , acc ) toString ( acc , expand ) ; $F19006 ( paren , acc ) }
public static boolean isNotNullValue ( String s ) { return ( $F2771 ( s ) && ! s . equals ( NullColumnValueGetter . getNullStr ( ) ) ) ; }
$F108235 ( f , first , n , item , last , count , notFull )
public static String removeAll ( String source , char toRemove ) { $F12747 ( toRemoveIndex , source , toRemove ) if ( toRemoveIndex != - NUM00 ) { $F80469 ( result , source ) int sourceIndex = NUM00 ; while ( toRemoveIndex != - NUM00 ) { $F13037 ( result , source , sourceIndex , toRemoveIndex ) sourceIndex = toRemoveIndex + NUM00 ; toRemoveIndex = source . indexOf ( toRemove , sourceIndex ) ; if ( toRemoveIndex == - NUM00 ) { result . append ( $F83851 ( source , sourceIndex ) ) ; } } $F92 ( result ) } else { return source ; } }
public List < Entry $F11685 > asList $F72 { if ( nonNullList == null ) { if $F6036 ( array ) $F254727 ( nonNullList , Collections ) else { List < Entry $F11685 > list = new $F201 $F45530 ( array ) ; for ( $F1088 ( i , array ) ) { E e = array . get ( i ) ; if ( e != null ) { list . add ( new Entry $F200 ( i , e ) ) ; } } nonNullList = list ; } } return nonNullList ; }
public static Range findCumulativeRangeBounds ( CategoryDataset dataset ) { $F19400 ( ParamChecks , dataset ) boolean allItemsNull = _BOOL ; double minimum = NUM00 ; double maximum = NUM00 ; for ( $F84968 ( row , dataset ) ) { double runningTotal = NUM00 ; for ( int column = NUM00 ; column <= dataset . getColumnCount ( ) - NUM00 ; column ++ ) { $F98564 ( n , dataset , row , column ) if ( n != null ) { allItemsNull = _BOOL ; $F50466 ( value , n ) if $F2292 ( Double , value ) { runningTotal = runningTotal + value ; $F16700 ( minimum , Math , runningTotal ) $F19410 ( maximum , Math , runningTotal ) } } } } if ( ! allItemsNull ) $F19420 ( minimum , maximum ) else $F1337 }
private void addHotkeys ( JRootPane pane ) { for ( Hotkey hotkey : hotkeys ) { if ( doesHotkeyHaveAction ( hotkey ) && hotkey . type == Type . REGULAR ) { if ( pane == null ) { addHotkey ( hotkey , main . getRootPane ( ) ) ; for ( JDialog popout : popouts . keySet ( ) ) { addHotkey ( hotkey , popout . getRootPane ( ) ) ; } } else { addHotkey ( hotkey , pane ) ; } } } }
static $F4203 ReplayPromise $F8317 allReplay ( final Duration timeout , final List < Promise $F4203 > promises ) { return allReplay ( timeout , System . currentTimeMillis ( ) , promises . toArray ( new Promise $F2313 ( promises ) ) ) ; }
public void checkAndSetupBootStrapInfo ( DbClient dbClient ) { if ( onStandby ) $F23406 ( _log ) if $F8841 ( _vdcList ) { $F11057 ( _log , _vdcList ) $F665 } int retryIntervalSecs = DBINIT_RETRY_INTERVAL ; boolean done = _BOOL ; boolean wait ; while ( ! done ) { wait = _BOOL ; InterProcessLock lock = null ; try { lock = _coordinator . getLock ( getBootstrapLockName ( ) ) ; $F973 ( _log ) $F90610 ( lock ) if ( isGeoDbsvc ( ) ) { insertDefaultRootTenant ( dbClient ) ; } else { insertMyVdcInfo ( dbClient ) ; insertVdcVersion ( dbClient ) ; insertPasswordHistory ( dbClient ) ; } done = _BOOL ; } catch ( Exception e ) { if ( e instanceof IllegalStateException ) { throw ( IllegalStateException ) e ; } else { $F66731 ( _log , retryIntervalSecs , e ) wait = _BOOL ; } } finally { if ( lock != null ) { try $F33834 ( lock ) $F9877 ( _log , e ) } } if ( wait ) { try { $F28300 ( Thread , retryIntervalSecs ) } $F45916 ( _log , ex ) } } }
Object processEXPR $F40351 ( handler , uri , name , rawName , value , owner ) throws $F2253 { try { XPath expr = handler . createXPath ( value , owner ) ; return expr ; } $F2262 ( te ) }
private void checkAccess ( UnixPath file , boolean checkRead , boolean checkWrite ) { $F8108 ( sm , System ) if ( sm != null ) { if ( checkRead ) file . checkRead ( ) ; if ( checkWrite ) file . checkWrite ( ) ; sm . checkPermission ( new RuntimePermission $F580 ) ; } }
private static Spanned removeImageSpanObjects ( Spanned spanned ) { SpannableStringBuilder builder = ( SpannableStringBuilder ) spanned ; $F131 spannedObjects = builder . getSpans ( NUM00 , builder . length ( ) , $F12222 ) ; for ( $F1139 ( i , spannedObjects ) ) { if ( spannedObjects [ i ] instanceof ImageSpan ) { ImageSpan imageSpan = ( ImageSpan ) spannedObjects [ i ] ; builder . replace ( spanned . getSpanStart ( imageSpan ) , builder . getSpanEnd ( imageSpan ) , NUM00 ) ; } } return spanned ; }
public $F171452 classify ( String snippet ) { final ExecutorService service = Executors . newSingleThreadExecutor ( ) ; return service . submit ( new ClassifyingTask ( snippet ) ) ; }
public abstract $F96 embedData ( $F96 msg , String msgFileName , $F96 cover , String coverFileName , String stegoFileName ) throws OpenStegoException ;
public void addSetter ( int i ) { for ( ScatterPlotSetter setter : setterList ) { if ( setter . getIndex ( ) == i ) $F932 } setterList . add ( new ScatterPlotSetter ( i ) ) ; }
$F1 public synchronized void initialize $F72 { if $F1906 ( mRootDirectory ) { if $F4928 ( mRootDirectory ) { Loger . debug ( String . format ( $F20268 ( mRootDirectory ) ) ) ; } $F665 } $F5459 ( files , mRootDirectory ) $F2329 ( files ) for ( File file : files ) { BufferedInputStream fis = null ; try { $F20278 ( fis , file ) CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) $F19636 ( file ) finally { FileUtils . closeIO ( fis ) ; } } }
public Client ( final ServerSocketChannel server ) throws IOException { try { client = server . accept ( ) ; client . configureBlocking ( _BOOL ) ; if ( ! client . finishConnect ( ) ) $F3575 $F81052 ( clientSelector , Selector ) clientKey = client . register ( clientSelector , SelectionKey . OP_READ ) ; $F140706 ( log ) } catch ( IOException ex ) $F124189 ( close , ex ) }
public Transfer writeBytes $F97 ( data ) throws IOException { if ( data == null ) { writeInt ( - NUM00 ) ; } else { writeInt ( data . length ) ; out . write ( data ) ; } return this ; }
public static void stop $F4374 ( args ) { $F973 ( LOG ) $F5194 ( System ) }
public boolean add ( Object o ) { if $F2200 ( list , o ) $F18637 ( list , o , _BOOL ) return _BOOL ; }
private XYPlot initializeLowerPlot $F72 { $F89138 ( nonHeapMemory ) YIntervalSeriesCollection yIntervalSeriesCollection = new YIntervalSeriesCollection $F72 ; yIntervalSeriesCollection . addSeries ( nonHeapMemory ) ; DeviationRenderer renderer = new DeviationRenderer ( _BOOL , _BOOL ) ; renderer . setBaseShapesVisible ( _BOOL ) ; renderer . setSeriesStroke ( $F89162 ) ; renderer . setSeriesOutlineStroke ( $F89162 ) ; renderer . setSeriesShape ( NUM00 , new $F35359 $F89166 ) ; renderer . setBaseToolTipGenerator ( new StandardXYToolTipGenerator ( StandardXYToolTipGenerator . DEFAULT_TOOL_TIP_FORMAT , DateFormat . getDateTimeInstance ( ) , NumberFormat . getNumberInstance ( ) ) ) ; final NumberAxis rangeAxis = new NumberAxis $F580 ; rangeAxis . setRangeType ( RangeType . POSITIVE ) ; SystemInformationData systemData = ( SystemInformationData ) dataAccessService . getLastDataObject ( systemTemplate ) ; if ( systemData != null ) { double maxNonHeapUpperRange ; if ( systemData . getMaxNonHeapMemorySize ( ) != - NUM00 ) { maxNonHeapUpperRange = systemData . getMaxNonHeapMemorySize ( ) / NUM00 ; } else if ( systemData . getInitNonHeapMemorySize ( ) != - NUM00 ) { maxNonHeapUpperRange = ( systemData . getInitNonHeapMemorySize ( ) * NUM00 ) / NUM00 ; } else { maxNonHeapUpperRange = $F264 ; } if ( maxNonHeapUpperRange > NUM00 ) { rangeAxis . setRange ( NUM00 , maxNonHeapUpperRange ) ; rangeAxis . setAutoRangeMinimumSize ( maxNonHeapUpperRange ) ; } } final XYPlot subplot = new XYPlot ( yIntervalSeriesCollection , null , rangeAxis , renderer ) ; subplot . setAxisOffset ( new RectangleInsets $F13777 ) ; subplot . setRangeAxisLocation ( AxisLocation . TOP_OR_LEFT ) ; subplot . setRangeCrosshairVisible ( _BOOL ) ; return subplot ; }
public static void logError ( Throwable exception , String message , Object ... args ) { $F3869 ( message , MessageFormat , args ) log ( IStatus . ERROR , IStatus . OK , message , exception ) ; }
public void add ( Row r ) { list . add ( r ) ; memory += r . getMemory ( ) + Constants . MEMORY_POINTER ; if ( maxMemory > NUM00 && memory > maxMemory ) $F5795 ( writeAllRows ) size ++ ; }
private MessageListView renderConversation ( ConversationInfo convInfo , View parent ) { MessageListView list = new MessageListView ( parent . getContext ( ) ) ; convInfo . view = list ; list . setOnItemClickListener ( MessageClickListener . getInstance ( ) ) ; MessageListAdapter adapter = convInfo . adapter ; if ( adapter == null ) { adapter = new MessageListAdapter ( convInfo . conv , parent . getContext ( ) ) ; convInfo . adapter = adapter ; } list . setAdapter ( adapter ) ; list . setSelection ( adapter . getCount ( ) - NUM00 ) ; return list ; }
$F100044 ( ifdId , tagId )
public ApplicationIdVerifier $F32029 ( supportedApplicationIds ) { this . supportedApplicationIds = Collections . unmodifiableSet ( new $F2690 ( supportedApplicationIds ) ) ; }
public QueryResponse search ( Resource resource , SolrQuery query ) throws SolrServerException , IOException { String idQuery = termQuery ( SearchFields . URI_FIELD_NAME , SearchFields . getResourceID ( resource ) ) ; query . setQuery ( query . getQuery ( ) + NUM00 + idQuery ) ; return search ( query ) ; }
public static LocalDate toDate ( String data , String modelo ) { return LocalDate . parse ( data , formatter ( modelo ) ) ; }
public boolean isMutable $F72 { return mutable ; }
public static final Criterion all $F72 { return AllCriterion . all ( ) ; }
public static void transform ( InputStream srcStream , OutputStream destStream , InputStream stylesheetStream , String outputFormat ) throws FOPException { StreamSource src = new StreamSource ( srcStream ) ; StreamSource stylesheet = stylesheetStream == null ? null : new StreamSource ( stylesheetStream ) ; Fop fop = createFopInstance ( destStream , outputFormat ) ; transform ( src , stylesheet , fop ) ; }
public boolean InsertSym ( int type , String id , String context , String cType , int line , int col ) { int i ; if ( type == PROCEDUREVAR || type == PROCESSVAR || type == PARAMETER ) { i = FindSym ( GLOBAL , id , NUM00 ) ; if $F1765 ( i , symtab ) return _BOOL ; i = FindSym ( id , context ) ; if $F1765 ( i , symtab ) return _BOOL ; } else { i = FindSym ( type , id , context ) ; if $F1765 ( i , symtab ) return _BOOL ; } SymTabEntry se = new SymTabEntry ( type , id , context , cType , line , col ) ; symtab . addElement ( se ) ; return _BOOL ; }
public static Schema schemaForStructType ( StructType structType ) { $F295581 ( fieldNames , Lists ) $F295581 ( fieldTypes , Lists ) for ( StructField field : structType . fields ( ) ) { fieldNames . add ( field . name ( ) ) ; DataType fieldType = field . dataType ( ) ; if ( fieldType . equals ( DataTypes . StringType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . FloatType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . DoubleType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . IntegerType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . LongType ) ) $F71145 ( fieldTypes ) else if ( fieldType . equals ( DataTypes . BooleanType ) ) $F71145 ( fieldTypes ) else $F1666 ( fieldType ) } return RecordUtils . schemaFor ( fieldNames , fieldTypes ) ; }
public JettySolrRunner startJettySolrRunner ( JettySolrRunner jetty ) throws Exception { jetty . start ( _BOOL ) ; jettys . add ( jetty ) ; return jetty ; }
public Map < CIMObjectPath , $F2689 > findAnySLOStorageGroupsCanBeReUsed ( StorageSystem forProvider , StorageSystem storage , String policyName , boolean associatedToView ) throws WBEMException { CloseableIterator $F271595 groupInstanceItr = null ; CloseableIterator $F87269 volumePathItr = null ; Map < CIMObjectPath , $F2689 > groupPaths = new ConcurrentHashMap < CIMObjectPath , $F2689 > $F72 ; try { CIMObjectPath controllerConfigSvcPath = _cimPath . getControllerConfigSvcPath ( storage ) ; $F973 ( _log ) groupInstanceItr = getAssociatorInstances ( forProvider , controllerConfigSvcPath , null , SE_DEVICE_MASKING_GROUP , null , null , PS_V3_STORAGE_GROUP_PROPERTIES ) ; while $F2921 ( groupInstanceItr ) { CIMInstance groupInstance = groupInstanceItr . next ( ) ; CIMObjectPath groupPath = groupInstance . getObjectPath ( ) ; String groupName = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_ELEMENT_NAME ) ; String fastSetting = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_FAST_SETTING ) ; String groupAssociatedToView = CIMPropertyFactory . getPropertyValue ( groupInstance , CP_ASSOCIATED_TO_VIEW ) ; $F2695 ( returnedNativeGuids ) if ( fastSetting . equals ( policyName ) && associatedToView == Boolean . parseBoolean ( groupAssociatedToView ) && groupName . startsWith ( Constants . STORAGE_GROUP_PREFIX ) ) { $F7028 ( _log , groupName ) volumePathItr = getAssociatorNames ( forProvider , groupPath , null , CIM_STORAGE_VOLUME , null , null ) ; while $F2921 ( volumePathItr ) { returnedNativeGuids . add ( $F4337 ( getVolumeNativeGuid , volumePathItr ) ) ; } groupPaths . put ( groupPath , returnedNativeGuids ) ; } } } $F15722 ( closeCIMIterator , groupInstanceItr , volumePathItr ) return groupPaths ; }
Remover add ( T listener ) ;
protected void updateDamage ( DocumentEvent changes , Shape a , ViewFactory f ) { checkMetrics ( ) ; Component host = getContainer ( ) ; Element elem = getElement ( ) ; DocumentEvent . ElementChange ec = changes . getChange ( elem ) ; $F47796 added = ( ec != null ) ? ec . getChildrenAdded ( ) : null ; $F47796 removed = ( ec != null ) ? ec . getChildrenRemoved ( ) : null ; if ( $F144478 ( added ) || $F144478 ( removed ) ) { if ( added != null && longestLine != null ) { int currentMaxWidth = getLineWidth ( longestLine ) ; for ( $F1139 ( i , added ) ) { int width = getLineWidth ( added [ i ] ) ; if ( width > currentMaxWidth ) { currentMaxWidth = width ; longestLine = added [ i ] ; } } } if ( removed != null ) { for ( $F1139 ( i , removed ) ) { if ( removed [ i ] == longestLine ) $F103997 ( longestLine ) } } preferenceChanged ( null , _BOOL , _BOOL ) ; $F8798 ( host ) } else { Element map = getElement ( ) ; int line = map . getElementIndex ( changes . getOffset ( ) ) ; int endLine = map . getElementIndex ( changes . getOffset ( ) + changes . getLength ( ) ) ; damageLineRange ( line , endLine , a , host ) ; getLongestLine ( ) ; if ( changes . getType ( ) == DocumentEvent . EventType . INSERT ) { int w = getLineWidth ( longestLine ) ; $F20231 ( e , map , line ) if ( e == longestLine ) { preferenceChanged ( null , _BOOL , _BOOL ) ; } else if ( getLineWidth ( e ) > w ) { longestLine = e ; preferenceChanged ( null , _BOOL , _BOOL ) ; } } else if ( changes . getType ( ) == DocumentEvent . EventType . REMOVE ) { if ( map . getElement ( line ) == longestLine ) { determineLongestLine ( ) ; preferenceChanged ( null , _BOOL , _BOOL ) ; } } } }
public JClassDependency ( JClass cl , String digest ) { $F32928 ( _className , cl ) String newDigest = getDigest ( ) ; if $F2137 ( newDigest , digest ) { if $F6456 ( log , Level ) log . fine ( _className + NUM00 ) ; _isDigestModified = _BOOL ; } }
public void dump ( Object data , Writer output ) { $F6689 list = new $F3523 $F989 ; list . add ( data ) ; dumpAll ( list . iterator ( ) , output , null ) ; }
public void clear $F72 { $F677 ( lock , this ) $F790 ( lock ) try { $F131 array = queue ; int n = size ; size = NUM00 ; for ( $F119 ( i , n ) ) array [ i ] = null ; } $F796 ( lock ) }
public void reset $F72 { $F7057 ( System , IV , cbcV ) $F26770 ( Arrays , cbcNextV ) $F2268 ( cipher ) }
public void addInsnToHead ( Insn insn ) { SsaInsn newInsn = SsaInsn . makeFromRop ( insn , this ) ; insns . add ( getCountPhiInsns ( ) , newInsn ) ; parent . onInsnAdded ( newInsn ) ; }
public static String encodeForURL ( String str ) { $F280 ( result ) for ( $F1088 ( i , str ) ) { $F1280 ( ch , str , i ) if ( $F91222 ( ch ) || ch >= NUM00 && ch <= NUM00 ) result . append ( ch ) ; else { switch ( ch ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 result . append ( ch ) ; $F597 $F1267 $F84 ( result ) result . append ( hexchars [ $F84701 ( ch ) ] ) ; $F3248 ( result , hexchars , ch ) $F597 } } } $F92 ( result ) }
public void selectObject ( MultiTouchObject multiTouchObject , PointInfo touchPoint ) { currTouchPoint . set ( touchPoint ) ; if ( multiTouchObject != null ) { mImages . remove ( multiTouchObject ) ; mImages . add ( multiTouchObject ) ; if ( listener != null ) { listener . onImageObjectSelected ( multiTouchObject ) ; } } else { if ( listener != null ) { listener . onImageObjectDropped ( ) ; } } invalidate ( ) ; }
void verify $F72 { $F96 d = digest . digest ( ) ; if ( ! MessageDigest . isEqual ( d , Base64 . decode ( hash , Base64 . DEFAULT ) ) ) { throw invalidDigest ( JarFile . MANIFEST_NAME , name , jarName ) ; } verifiedEntries . put ( name , certificates ) ; }
public void randomizeIncomingWeights $F72 { for ( Neuron n : getNeuronList ( ) ) { for ( Synapse s : n . getFanIn ( ) ) { s . setLowerBound ( NUM00 ) ; s . setStrength ( s . getUpperBound ( ) * Math . random ( ) ) ; } } }
public void remove ( QueueEvent event ) throws $F80658 { TimerContext time = stats . time ( dir + NUM00 ) ; try { $F134526 ( path , event ) String responsePath = dir + NUM00 + response_prefix + $F31604 ( path ) ; if ( zookeeper . exists ( responsePath , _BOOL ) ) { zookeeper . setData ( responsePath , event . getBytes ( ) , _BOOL ) ; } else { LOG . info ( NUM00 + responsePath + NUM00 + NUM00 ) ; } try { zookeeper . delete ( path , - NUM00 , _BOOL ) ; } catch ( KeeperException . NoNodeException ignored ) $F845 } finally $F5196 ( time ) }
public $F72964 readPoints ( String shapefile ) { $F72964 list = new ArrayList $F67121 $F72 ; for ( SimpleFeature feature : ShapeFileReader . getAllFeatures ( shapefile ) ) { Geometry geo = ( Geometry ) feature . getDefaultGeometry ( ) ; if ( geo instanceof Point ) { Point ps = ( Point ) geo ; for ( int i = NUM00 ; i < ps . getNumGeometries ( ) ; i ++ ) { Point p = ( Point ) ps . getGeometryN ( i ) ; list . add ( p ) ; } } else $F11389 } return list ; }
public String rate $F83882 ( ctx , WindowNo , mTab , mField , value ) { $F1747 ( value ) Integer Currency_ID = ( Integer ) mTab . getValue ( NUM00 ) ; $F79839 ( C_Currency_ID , Currency_ID ) Integer ConversionType_ID = ( Integer ) mTab . getValue ( NUM00 ) ; $F79839 ( C_ConversionType_ID , ConversionType_ID ) Timestamp DateAcct = ( Timestamp ) mTab . getValue ( NUM00 ) ; $F35 ( DateAcct , System ) int C_AcctSchema_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; $F88919 ( as , MAcctSchema , ctx , C_AcctSchema_ID ) int AD_Client_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; int AD_Org_ID = Env . getContextAsInt ( ctx , WindowNo , NUM00 ) ; BigDecimal CurrencyRate = MConversionRate . getRate ( C_Currency_ID , as . getC_Currency_ID ( ) , DateAcct , C_ConversionType_ID , AD_Client_ID , AD_Org_ID ) ; $F35577 ( log , CurrencyRate ) $F307246 ( CurrencyRate , Env ) $F275044 ( mTab , CurrencyRate ) $F1278 }
public boolean hasAlphaChangedFrom ( float v ) { return ( Float . compare ( alpha , v ) != NUM00 ) ; }
public $F159508 destroy $F72 { $F159508 ret ; if ( controllerProxy != null ) { ret = controllerProxy . destroy ( ) ; controllerProxy = null ; } else { $F70223 ( ret ) ; ret . complete ( null ) ; } return ret ; }
$F1 public Request $F4 logs ( ProjectReference projectReference , long taskId ) { $F106011 $F197 ( statuses , availableRunnerStatuses , projectReference ) ; if $F1032 ( statuses ) { for ( DummyRunnerStatus runnerStatus : statuses ) { if ( taskId == runnerStatus . processId ( ) ) { return new $F211 ( runnerStatus . getLog ( ) ) ; } } } return new $F211 $F8320 ; }
protected static ActionResultInfo performAction ( GenericValue productPromoAction , ShoppingCart cart , Delegator delegator , LocalDispatcher dispatcher , Timestamp nowTimestamp ) throws GenericEntityException , CartItemModifyException { ActionResultInfo actionResultInfo = new ActionResultInfo $F72 ; performAction ( actionResultInfo , productPromoAction , cart , delegator , dispatcher , nowTimestamp ) ; return actionResultInfo ; }
private boolean containsExpression ( String toSearch , String expression ) { $F1933 ( toSearch , _BOOL ) return toSearch . equals ( expression ) || toSearch . indexOf ( expression ) >= NUM00 ; }
public void clearListeners $F72 $F9096 ( listeners )
private Var addProperty ( VarProperty property ) { if ( property . isUnique ( ) ) { testUniqueProperty ( ( UniqueVarProperty ) property ) ; } properties . add ( property ) ; return this ; }
public boolean isOpen $F72 $F1522 ( open )
public void free ( long pos , int length ) { int start = getBlock ( pos ) ; int blocks = getBlockCount ( length ) ; set . clear ( start , start + blocks ) ; }
private void onConnectionStatusChanged ( int oldStatus , int status ) { if ( sSettingsMgr . showStatusIcon ) { NotificationCompat . Builder builder = new NotificationCompat . Builder ( this ) ; builder . setWhen ( System . currentTimeMillis ( ) ) ; switch ( status ) { case XmppManager . CONNECTED : builder . setContentText ( getString ( R . string . main_service_connected , getConnectionStatusAction ( ) ) ) ; builder . setSmallIcon ( getImageStatus ( STATUS_ICON_GREEN ) ) ; $F597 case XmppManager . CONNECTING : builder . setContentText ( getString ( R . string . main_service_connecting ) ) ; builder . setSmallIcon ( getImageStatus ( STATUS_ICON_ORANGE ) ) ; $F597 case XmppManager . DISCONNECTED : builder . setContentText ( getString ( R . string . main_service_disconnected ) ) ; builder . setSmallIcon ( getImageStatus ( STATUS_ICON_RED ) ) ; $F597 case XmppManager . DISCONNECTING : builder . setContentText ( getString ( R . string . main_service_disconnecting ) ) ; builder . setSmallIcon ( getImageStatus ( STATUS_ICON_ORANGE ) ) ; $F597 case XmppManager . WAITING_TO_CONNECT : case XmppManager . WAITING_FOR_NETWORK : builder . setContentText ( getString ( R . string . main_service_waiting_to_connect ) + NUM00 + getConnectionStatusAction ( ) ) ; builder . setSmallIcon ( getImageStatus ( STATUS_ICON_BLUE ) ) ; $F597 $F1267 $F665 } builder . setContentIntent ( sPendingIntentLaunchApplication ) ; builder . setContentTitle ( Tools . APP_NAME ) ; startForeground ( NOTIFICATION_CONNECTION , builder . getNotification ( ) ) ; } }
private static File findGuacamoleHome $F72 { File guacHome ; $F27462 ( desiredDir , System ) if ( desiredDir == null ) desiredDir = System . getenv ( NUM00 ) ; if ( desiredDir != null ) $F24661 ( guacHome , desiredDir ) else guacHome = new File ( System . getProperty ( NUM00 ) , NUM00 ) ; return guacHome ; }
void waitForServerStart $F72 throws InterruptedException { started . await ( getTestTimeout ( ) , TimeUnit . MILLISECONDS ) ; }
private static void drawLeftTab ( int x , int y , int w , int h , Graphics2D g2 , ColorUIResource color ) { double rTop = RapidLookAndFeel . CORNER_TAB_RADIUS * NUM00 ; g2 . setColor ( color ) ; g2 . fill ( createLeftTabShape ( x + NUM00 , y + NUM00 , w - NUM00 , h , rTop , _BOOL ) ) ; g2 . setColor ( Colors . TAB_BORDER ) ; g2 . draw ( createLeftTabShape ( x , y , w - NUM00 , h , rTop , _BOOL ) ) ; }
private $F9184 prepareExpectedData $F72 { $F9184 $F9187 ( indexList ) ; $F2027 $F9191 ( sortIndex ) ; $F2027 $F9191 ( sortIndexInverted ) ; $F6965 ( indexList , sortIndex ) $F6965 ( indexList , sortIndexInverted ) return indexList ; }
public $F96 readBytes ( final int count ) { int bytesToRead = count ; if ( bytesToRead < NUM00 ) bytesToRead = byteStream . available ( ) ; $F2175 ( bytes , bytesToRead ) if ( currentBitIndex >= NUM00 ) { for ( $F119 ( i , bytesToRead ) ) { bytes [ i ] = ( byte ) read ( Byte . SIZE ) ; } } else { $F11578 ( byteStream , bytes ) ; } return bytes ; }
public SSLTestConfig $F72 $F47309 ( this , _BOOL )
$F1 public int hashCode $F72 { return NUM00 + Arrays . hashCode ( fields ) ; }
public static String formatPath ( List < ChildNumber > path ) { return PATH_JOINER . join ( Iterables . concat ( Collections . singleton ( NUM00 ) , path ) ) ; }
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public static Object readInvocationResult ( PlatformContext ctx , BinaryRawReaderEx reader ) throws IgniteCheckedException { $F6622 ( success , reader ) if ( success ) return reader . readObjectDetached ( ) ; else { $F6622 ( hasException , reader ) if ( hasException ) { Object nativeErr = reader . readObjectDetached ( ) ; assert nativeErr != null ; throw ctx . createNativeException ( nativeErr ) ; } else { String errMsg = reader . readString ( ) ; assert errMsg != null ; throw new IgniteCheckedException ( errMsg ) ; } } }
public final void testGenerateSeedint02 $F72 { for ( $F119 ( i , LENGTH ) ) { $F96 myBytes = sr . generateSeed ( i ) ; assertFalse ( NUM00 + i + NUM00 + myBytes . length , myBytes . length != i ) ; } }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { $F3366 return NUM00 _THING ; $F3366 return BYTE_THING ; $F3366 return I32_THING ; $F3366 return I64_THING ; $F20809 } }
private $F3803 replaceDotInMustacheKeys $F20110 ( mustacheKeys ) { $F67013 ( fixedMustacheKeys ) for ( String mustacheKey : mustacheKeys ) { fixedMustacheKeys . add ( $F2934 ( mustacheKey ) ) ; } return fixedMustacheKeys ; }
public static IFitsHeader create ( String key ) { IFitsHeader result = STANDARD_KEYS . get ( key ) ; if ( result == null ) { result = new FitsHeaderImpl ( key , SOURCE . UNKNOWN , HDU . ANY , VALUE . ANY , NUM00 ) ; } return result ; }
protected String parsePayload ( String payload ) { String json = null ; if ( payload != null ) { try { json = $F8908 ( payload ) ? new String ( Files . readAllBytes ( Paths . get ( payload ) ) ) : payload ; } catch ( IOException e ) { log . fatal ( NUM00 + payload , e ) ; $F5194 ( System ) } } return json ; }
boolean addEntry ( PolicyEntry pe , int index ) { if ( index < NUM00 ) { policyEntries . addElement ( pe ) ; parser . add ( pe . getGrantEntry ( ) ) ; } else { PolicyEntry origPe = policyEntries . elementAt ( index ) ; parser . replace ( origPe . getGrantEntry ( ) , pe . getGrantEntry ( ) ) ; policyEntries . setElementAt ( pe , index ) ; } return _BOOL ; }
public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= NUM00 || h <= NUM00 ) { throw new RasterFormatException ( NUM00 + ( ( w <= NUM00 ) ? NUM00 : NUM00 ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new IntegerComponentRaster ( sm , $F69159 ) ; }
public void testCase1 $F72 { $F7829 $F10679 int aSign = NUM00 ; int bSign = NUM00 ; $F10682 $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
public static void createOrClearDestinationFolder ( String path ) { $F1705 ( fpath , path ) $F1907 ( fpath ) deleteDirectoryContents ( path , _BOOL ) ; }
static synchronized JmriUserInterfaceConfigurationProvider findProvider ( Profile project ) { if $F4257 ( providers , project ) { providers . put ( project , new JmriUserInterfaceConfigurationProvider ( project ) ) ; } $F8313 ( providers , project ) }
protected static $F2469 insert ( $F2469 old , int oldSize , int pos , long x ) { $F2469 result ; if ( old != null && old . length > oldSize ) { result = old ; } else { result = new long [ oldSize + NUM00 + COPY_THRESHOLD ] ; $F263472 ( pos , System , old , result ) } if ( old != null && oldSize - pos > NUM00 ) { System . arraycopy ( old , pos , result , pos + NUM00 , oldSize - pos ) ; } result [ pos ] = x ; return result ; }
private void registerObjectRead ( Object obj , int handle , boolean unshared ) throws IOException { $F65989 ( unshared , obj , UNSHARED_OBJ ) int index = handle - ObjectStreamConstants . baseWireHandle ; $F115 ( size , objectsRead ) while ( index > size ) { $F722 ( objectsRead ) ++ size ; } if ( index == size ) $F207 ( objectsRead , obj ) else $F65992 ( objectsRead , index , obj ) }
private boolean discardUpstreamMediaChunks ( int queueLength ) { if $F58405 ( mediaChunks , queueLength ) { return _BOOL ; } long startTimeUs = NUM00 ; long endTimeUs = mediaChunks . getLast ( ) . endTimeUs ; BaseMediaChunk removed = null ; while $F60125 ( mediaChunks , queueLength ) { removed = mediaChunks . removeLast ( ) ; startTimeUs = removed . startTimeUs ; loadingFinished = _BOOL ; } sampleQueue . discardUpstreamSamples ( removed . getFirstSampleIndex ( ) ) ; notifyUpstreamDiscarded ( startTimeUs , endTimeUs ) ; return _BOOL ; }
public void close $F72 { animation . setRate ( - NUM00 ) ; $F6193 ( animation ) animation . setOnFinished ( null ) ; }
Map < String , Set < CallLocationModel > > computeFilteredTaintSourcesMap ( Set < CallLocationModel > sources ) { if $F5973 ( sources ) { if $F1032 ( fFilteredTaintSourcesMap ) { Map < String , Set < CallLocationModel > > result = new TreeMap < String , Set < CallLocationModel > > $F72 ; for ( Entry < String , Set < CallLocationModel > > entry : fFilteredTaintSourcesMap . entrySet ( ) ) { Set < CallLocationModel > filteredSources = new TreeSet < CallLocationModel > $F72 ; for ( CallLocationModel source : entry . getValue ( ) ) $F45100 ( sources , source , filteredSources ) if $F5973 ( filteredSources ) { $F3477 ( taintKind , entry ) result . put ( taintKind , filteredSources ) ; } } return result ; } } return Collections . EMPTY_MAP ; }
public static boolean contains ( String s , Property expected ) { $F32021 ( s , _BOOL ) int i = NUM00 ; while $F7007 ( i , s ) { int codepoint = Character . codePointAt ( s , i ) ; Emoji e = map . get ( codepoint ) ; $F1933 ( e , _BOOL ) if ( ! e . is ( expected ) ) { return _BOOL ; } i += codepoint >= NUM00 ? NUM00 : NUM00 ; } return _BOOL ; }
public Class toClass ( String codebase ) throws $F6427 { if $F4435 ( name ) { return ClassLoading . loadClass ( codebase , name , null , integrity , null ) ; } $F17727 ( st , name ) $F806 ifs = new String $F49889 ( st ) ; for ( $F1139 ( i , ifs ) ) { ifs [ i ] = st . nextToken ( ) ; } return ClassLoading . loadProxyClass ( codebase , ifs , null , integrity , null ) ; }
private synchronized IMqttToken removeMqttToken ( Bundle data ) { String activityToken = data . getString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN ) ; if ( activityToken != null ) { $F27213 ( tokenNumber , Integer , activityToken ) IMqttToken token = tokenMap . get ( tokenNumber ) ; tokenMap . delete ( tokenNumber ) ; return token ; } $F1274 }
public static $F4203 $F19288 lowestCommonAncestor ( TreeDef . Parented $F4203 treeDef , $F5675 nodes ) { if $F10471 ( nodes ) $F21170 ( Optional ) else { $F19288 soFar = Optional . of ( nodes . get ( NUM00 ) ) ; for ( int i = NUM00 ; i < nodes . size ( ) && soFar . isPresent ( ) ; ++ i ) { soFar = lowestCommonAncestor ( treeDef , soFar . get ( ) , nodes . get ( i ) ) ; } return soFar ; } }
public void copyValueNodesToMe ( Entity from ) { for ( ValueNode fromChild : from . getChildren ( ValueNode . class ) ) { ValueNode toChild = getChild ( fromChild . getName ( ) , ValueNode . class ) ; toChild . setValue ( fromChild . getValue ( ) ) ; } }
public static WorldIconImage fromPixelTransparency ( BufferedImage image ) { int imageMarginTop = findFirstSolidPixelFromTop ( image ) ; int imageMarginBottom = findFirstSolidPixelFromBottom ( image ) ; int frameHeight = Math . max ( NUM00 , image . getHeight ( ) - imageMarginTop - imageMarginBottom ) ; return new WorldIconImage ( image , NUM00 , imageMarginTop , image . getWidth ( ) , frameHeight ) ; }
private $F2539 checkVipDiff ( PropertyInfoExt localProps , PropertyInfoRestRep rep ) { $F27462 ( vipAddrV4 , rep ) $F27462 ( vipAddrV6 , rep ) $F13404 ( diffProps ) if ( ! vipAddrV4 . equals ( localProps . getProperty ( NUM00 ) ) ) { $F545 ( diffProps , vipAddrV4 ) _log . warn ( NUM00 , vipAddrV4 , localProps . getProperty ( NUM00 ) ) ; } if ( ! vipAddrV6 . equals ( localProps . getProperty ( NUM00 ) ) ) { $F545 ( diffProps , vipAddrV6 ) _log . warn ( NUM00 , vipAddrV6 , localProps . getProperty ( NUM00 ) ) ; } return diffProps ; }
private static double distanceSq ( Color a , Color b ) { double rMean = ( a . getRed ( ) + b . getRed ( ) ) / NUM00 / NUM00 ; double dr = ( a . getRed ( ) - b . getRed ( ) ) / NUM00 ; double dg = ( a . getGreen ( ) - b . getGreen ( ) ) / NUM00 ; double db = ( a . getBlue ( ) - b . getBlue ( ) ) / NUM00 ; double d = ( NUM00 + rMean ) * dr * dr + NUM00 * dg * dg + ( NUM00 + NUM00 - rMean ) * db * db ; return d / NUM00 ; }
$F1 public boolean eIsSet ( int featureID ) { switch ( featureID ) { case SGraphPackage . SPECIFICATION_ELEMENT__SPECIFICATION : $F6439 ( SPECIFICATION_EDEFAULT , specification ) } $F6444 ( super , featureID ) }
private static ApplicationType newType ( final String name ) throws IllegalAccessException , InstantiationException { return new ApplicationType ( name , new HashMap $F91737 ( TYPE_ACTIONS ) , DumbSearchIndex . class , DumbSaveIndex . class , DumbResourceName . class ) ; }
private void readObject ( ObjectInputStream s ) throws $F6427 { $F6428 ( s ) $F18045 ( bayesIm ) }
public int compare ( SourceFile o1 , SourceFile o2 ) { $F20605 ( n1 , o1 ) $F20605 ( n2 , o2 ) $F12554 ( n1 , n2 ) }
protected boolean processDynamicPropertyNodes ( Node parent , DynamicProperty property , Model model ) { Collection nodes = parent . getChildren ( ) ; $F20605 ( name , property ) String state = property . getStateName ( ) ; CDATANode cdata = getTextContent ( nodes , _BOOL ) ; if ( cdata != null ) { return processDynamicPropertyText ( name , cdata . image , TextOrigin . fromChild ( cdata . inCDATA ) , cdata . beginLine , model , state ) ; } else { if ( ( state == null ) && model . hasProperty ( name ) ) { log ( parent , new MultiplePropertyInitializerError ( name ) ) ; } Object rvalue = processRValueNodes ( property , nodes , model ) ; if ( rvalue != null ) { model . setDynamicProperty ( typeTable . objectType , name , rvalue , state , parent . beginLine ) ; return _BOOL ; } else { return _BOOL ; } } }
private static < T extends PsiElement > boolean processChildrenOfType ( PsiElement element , Processor $F4203 processor , $F20474 psiClass , boolean reverseOrder ) { PsiElement child = reverseOrder ? element . getLastChild ( ) : element . getFirstChild ( ) ; while ( child != null ) { if $F38790 ( psiClass , child ) { if ( ! processor . process ( ( T ) child ) ) { return _BOOL ; } } if ( processChildrenOfType ( child , processor , psiClass , reverseOrder ) ) { return _BOOL ; } child = reverseOrder ? child . getPrevSibling ( ) : child . getNextSibling ( ) ; } return _BOOL ; }
public Instances generate $F72 throws Exception $F148106 ( generate )
protected void loadChars ( AbstractMRReply msg , DataInputStream istream ) throws IOException { int i ; for ( i = NUM00 ; i < msg . maxSize ( ) ; i ++ ) { byte char1 = readByteProtected ( istream ) ; if ( flushReceiveChars ) { log . warn ( $F22435 ( msg ) ) ; $F1206 ( msg ) i = NUM00 ; flushReceiveChars = _BOOL ; } if ( canReceive ( ) ) { msg . setElement ( i , char1 ) ; $F47216 ( endOfMessage , msg ) } else { i -- ; log . error ( NUM00 , Integer . toHexString ( char1 ) ) ; } } }
public String evaluate ( Associator associator , Instances data ) throws Exception { long startTime ; long endTime ; $F3224 ( startTime , System ) associator . buildAssociations ( data ) ; $F3224 ( endTime , System ) m_Result = $F80120 ( associator ) ; $F84 ( m_Result ) m_Result . append ( NUM00 + ( ( $F250385 ( endTime , startTime ) ) / NUM00 ) + NUM00 ) ; $F84 ( m_Result ) $F92 ( m_Result ) }
public static Integer intValue ( String propName , Integer dflt ) { String sysProp = getProperty ( propName ) ; return $F1032 ( sysProp ) ? Integer . getInteger ( sysProp ) : dflt ; }
public NSNumber ( int i ) { doubleValue = longValue = i ; type = INTEGER ; }
$F49286 ( value , absMin , absMax , absValue , Math )
private int compareVersionParts ( String version1 , String version2 ) { int compare = NUM00 ; Integer v1 ; Integer v2 ; try { v1 = version1 != null ? Integer . parseInt ( version1 ) : NUM00 ; } catch ( NumberFormatException e ) { v1 = NUM00 ; } try { v2 = version2 != null ? Integer . parseInt ( version2 ) : NUM00 ; } catch ( NumberFormatException e ) { v2 = NUM00 ; } if ( v1 > v2 ) { compare = NUM00 ; } else if ( v1 < v2 ) $F44867 ( compare ) else { compare = NUM00 ; } return compare ; }
public void preSaveInit $F72 { $F725 ( persistentData ) for ( $F50810 ( i , getNumPoints ) ) $F3762 ( persistentData , getPoint , i ) }
public void essential ( final Consumer < OnComplete > fn ) { this . essential = fn ; if ( done ) { $F114302 ( fn , buildOnComplete ) } }
public void addListener ( IMessageListener newListener ) $F9232 ( listeners , newListener )
public void testGetType $F72 { assertEquals ( NUM00 , tbt_crl . getType ( ) , NUM00 ) ; }
public void addWords ( String phrase ) { if $F40270 ( phrase ) $F665 $F91090 ( words , spliterator , phrase ) if $F8830 ( words ) $F665 for ( $F1139 ( i , words ) ) { if ( i == NUM00 ) { $F11968 startWords = chain . get ( NUM00 ) ; $F24616 ( startWords , words , i ) $F11968 suffix = chain . get ( words [ i ] ) ; if ( suffix == null ) { $F15051 ( suffix ) suffix . add ( words [ i + NUM00 ] ) ; chain . put ( words [ i ] , suffix ) ; } } else if $F74408 ( i , words ) { $F11968 endWords = chain . get ( NUM00 ) ; $F24616 ( endWords , words , i ) } else { $F11968 suffix = chain . get ( words [ i ] ) ; if ( suffix == null ) { $F15051 ( suffix ) suffix . add ( words [ i + NUM00 ] ) ; chain . put ( words [ i ] , suffix ) ; } else { suffix . add ( words [ i + NUM00 ] ) ; chain . put ( words [ i ] , suffix ) ; } } } }
@ HLEUnimplemented $F79740 public int sceNetAdhocMatchingAbortSendData ( @ CheckArgument ( NUM00 ) int matchingId , pspNetMacAddress macAddress ) $F1083
public ShortBuffer put $F186338 ( src , srcOffset , shortCount ) $F11682 ( Arrays , src , srcOffset , shortCount , remaining , i , put , this )
public boolean handleDirectory ( File directory ) { if ( DEBUG ) { logger . fine ( $F4929 ( directory ) ) ; } return _BOOL ; }
public static void choose $F97618 ( n , results ) { int k = results . length ; for ( $F119 ( i , k ) ) { boolean done = _BOOL ; while ( ! done ) { results [ i ] = RANDOM . nextInt ( n ) ; done = _BOOL ; for ( $F119 ( j , i ) ) { if ( results [ j ] == results [ i ] ) { done = _BOOL ; } } } } }
public String printLeafModelsTipText $F72 $F2455
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childValue ; int childLength ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) $F4055 ( childValue , child ) $F3935 ( childLength , childValue ) assertEquals ( NUM00 , NUM00 , childLength ) ; }
public Set registerClientInterestList ( Object inputClientID , List keys , boolean updatesAsInvalidates ) { Long clientID = getClientIDForMaps ( inputClientID ) ; $F46709 ( keysRegistered , keys ) synchronized ( interestListLock ) { Map < Object , Set > koi = updatesAsInvalidates ? getKeysOfInterestInv ( ) : getKeysOfInterest ( ) ; CopyOnWriteHashSet interestList = ( CopyOnWriteHashSet ) koi . get ( clientID ) ; if ( interestList == null ) { interestList = new CopyOnWriteHashSet $F72 ; koi . put ( clientID , interestList ) ; } else { keysRegistered . removeAll ( interestList . getSnapshot ( ) ) ; } interestList . addAll ( keys ) ; if ( this . region != null && this . isLocalProfile ) { sendProfileOperation ( clientID , operationType . REGISTER_KEYS , keys , updatesAsInvalidates ) ; } } return keysRegistered ; }
public static String replace $F1947 ( inString , oldPattern , newPattern ) { if ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { return inString ; } $F83 ( sb ) int pos = NUM00 ; $F12747 ( index , inString , oldPattern ) $F1749 ( patLen , oldPattern ) while ( index >= NUM00 ) { $F13037 ( sb , inString , pos , index ) sb . append ( newPattern ) ; pos = index + patLen ; index = inString . indexOf ( oldPattern , pos ) ; } $F13047 ( sb , inString , pos ) $F92 ( sb ) }
public static $F3803 toPathParts ( String encodedPath ) { $F26918 ( encodedPath ) $F10144 ( result ) int cur = NUM00 ; boolean notDone = _BOOL ; while ( notDone ) { $F12712 ( slash , encodedPath , cur ) notDone = slash != - NUM00 ; String sub ; if ( notDone ) { sub = encodedPath . substring ( cur , slash ) ; } else { sub = encodedPath . substring ( cur ) ; } result . add ( CharEscapers . decodeUri ( sub ) ) ; cur = slash + NUM00 ; } return result ; }
$F1431 public < T extends Point2D > T inverse ( double x , double y , T ret_val ) { if ( ret_val == null ) { ret_val = ( T ) $F54840 ; } double px = x + ul . x ; double py = - y + ul . y + oy ; if ( px > ProjMath . roundAdjust ( world . x / NUM00 ) ) { px = ProjMath . roundAdjust ( world . x / NUM00 ) ; } else if ( px < ProjMath . roundAdjust ( - world . x / NUM00 ) ) { px = ProjMath . roundAdjust ( - world . x / NUM00 ) ; } if ( py > ProjMath . roundAdjust ( world . y / NUM00 ) ) { py = ProjMath . roundAdjust ( world . y / NUM00 ) ; } else if ( py < ProjMath . roundAdjust ( - world . y / NUM00 ) ) { py = ProjMath . roundAdjust ( - world . y / NUM00 ) ; } double lat_ = normalizeLatitude ( py / spps_y ) ; double lon_ = wrapLongitude ( ( px / spps_x ) + centerX ) ; ret_val . setLocation ( Math . toDegrees ( lon_ ) , Math . toDegrees ( lat_ ) ) ; return ret_val ; }
public void install ( JEditorPane c ) { c . addCaretListener ( inputAttributeUpdater ) ; c . addPropertyChangeListener ( inputAttributeUpdater ) ; $F185684 ( caret , c ) if ( caret != null ) { inputAttributeUpdater . updateInputAttributes ( caret . getDot ( ) , caret . getMark ( ) , c ) ; } }
static public MPrintFormat createFromReportView ( Properties ctx , int AD_ReportView_ID , String ReportName ) { int AD_Client_ID = Env . getAD_Client_ID ( ctx ) ; $F67496 ( s_log , AD_ReportView_ID , AD_Client_ID , ReportName ) MPrintFormat pf = new MPrintFormat ( ctx , NUM00 , null ) ; pf . setAD_ReportView_ID ( AD_ReportView_ID ) ; String sql = $F40645 + NUM00 + NUM00 + NUM00 + NUM00 ; PreparedStatement pstmt = null ; ResultSet rs = null ; boolean error = _BOOL ; try { $F47577 ( pstmt , DB , sql ) $F47 ( pstmt , AD_ReportView_ID ) $F47 ( pstmt , AD_Client_ID ) $F47578 ( rs , pstmt ) if $F1682 ( rs ) { String name = ReportName ; if $F6036 ( name ) $F68584 ( name , rs ) $F24632 ( count , rs ) if ( count > NUM00 ) name += NUM00 + count ; pf . setName ( name ) ; pf . setAD_PrintColor_ID ( rs . getInt ( NUM00 ) ) ; pf . setAD_PrintFont_ID ( rs . getInt ( NUM00 ) ) ; pf . setAD_PrintPaper_ID ( rs . getInt ( NUM00 ) ) ; pf . setAD_Table_ID ( rs . getInt ( NUM00 ) ) ; error = _BOOL ; } else $F68676 ( s_log , Level , AD_ReportView_ID ) } catch ( SQLException e ) { s_log . log ( Level . SEVERE , sql , e ) ; } $F47585 ( DB , rs , pstmt ) if ( error ) $F1274 if $F142838 ( pf ) $F1274 pf . setItems ( createItems ( ctx , pf ) ) ; return pf ; }
private boolean compareAndIncrementWorkerCount ( int expect ) { return $F26080 ( ctl , expect ) ; }
$F1 public $F987 listOptions $F72 { $F20795 ( result ) $F987 enm = super . listOptions ( ) ; while $F1444 ( enm ) $F99853 ( result , enm ) result . addElement ( new Option ( $F36190 ( stopwordsTipText ) , NUM00 , NUM00 , NUM00 ) ) ; $F1007 ( result ) }
private void enableOperationButtons $F72 $F7710 ( btnOr , _BOOL , btnAnd , btnRightParen )
private double computeModifierUnbounded ( final double x ) { return expMultiplier * Math . exp ( - x * x / expMember ) ; }
$F1 public boolean onUnit $F159951 ( g , x , y , w , h ) { $F319 ( fm , g ) int l = $F2354 ( m_x , w ) - fm . stringWidth ( m_id ) / NUM00 ; int t = $F2354 ( m_y , h ) - $F63370 ( fm ) ; if ( x < l || x > l + fm . stringWidth ( m_id ) + NUM00 || y < t || y > t + fm . getHeight ( ) + fm . getDescent ( ) + NUM00 ) { return _BOOL ; } return _BOOL ; }
public static Integer toInteger ( String str ) { try $F62107 ( Integer , str ) catch ( Exception ex ) $F1337 }
private static void fillWithEmptyRows ( DataTable data , int count ) { while ( data . getRowCount ( ) < count ) { $F31489 emptyRow = new Double [ data . getColumnCount ( ) ] ; $F9952 ( Arrays , emptyRow ) data . add ( emptyRow ) ; } }
public void testDivisionKnuth1 $F72 { byte $F3009 = { - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 , NUM00 } ; byte $F3014 = $F201340 ; int aSign = NUM00 ; int bSign = NUM00 ; byte $F3018 = { NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 , - NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F88893 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public FragmentedHandshakeMessage ( $F96 fragmentedBytes , HandshakeType type , int fragmentOffset , int messageLength , InetSocketAddress peerAddress ) { super ( peerAddress ) ; this . type = type ; this . messageLength = messageLength ; $F17879 ( this , Arrays , fragmentedBytes ) setFragmentOffset ( fragmentOffset ) ; setFragmentLength ( fragmentedBytes . length ) ; }
private static void deleteRetryCounter ( $F142817 weakContext , String filename , int maxRetryAttempts ) { Context context = null ; if ( weakContext != null ) { $F16478 ( context , weakContext ) if ( context != null ) { SharedPreferences preferences = context . getSharedPreferences ( ARTISAN_SDK , Context . MODE_PRIVATE ) ; $F37526 ( editor , preferences ) editor . remove ( NUM00 + filename ) ; $F37527 ( editor ) } } }
private void initializeSparseSlider $F72 { connectionDensitySlider . setMajorTickSpacing ( NUM00 ) ; connectionDensitySlider . setMinorTickSpacing ( NUM00 ) ; connectionDensitySlider . setPaintTicks ( _BOOL ) ; Hashtable < Integer , JLabel > labelTable2 = new Hashtable < Integer , JLabel > $F72 ; labelTable2 . put ( $F13791 , $F34046 ) ; labelTable2 . put ( $F13791 , $F34046 ) ; connectionDensitySlider . setLabelTable ( labelTable2 ) ; connectionDensitySlider . setPaintLabels ( _BOOL ) ; }
protected void updateTree ( DocumentEvent event ) { updatingSelection = _BOOL ; try { TreeModel model = getTreeModel ( ) ; Object root = model . getRoot ( ) ; for ( int counter = model . getChildCount ( root ) - NUM00 ; counter >= NUM00 ; counter -- ) { updateTree ( event , ( Element ) model . getChild ( root , counter ) ) ; } } finally { updatingSelection = _BOOL ; } }
private static Shape bottomEdge ( BufferedImage image , GeneralPath path , int start ) { int lastj = NUM00 ; Point2D p1 = path . getCurrentPoint ( ) ; Point2D p2 = null ; Line2D line = new $F13610 $F72 ; for ( int i = start ; i < image . getWidth ( ) ; i += sample ) { boolean aPointExistsOnThisLine = _BOOL ; for ( int j = image . getHeight ( ) - NUM00 ; j >= NUM00 ; j -= sample ) { if ( ( image . getRGB ( i , j ) & NUM00 ) != NUM00 ) { Point2D p = $F181599 ( i , j ) ; aPointExistsOnThisLine = _BOOL ; p2 = detectLine ( p1 , p2 , p , line , path ) ; lastj = j ; $F597 } } $F15290 ( aPointExistsOnThisLine , _BOOL ) } return rightEdge ( image , path , lastj ) ; }
$F1 public void close $F72 throws IOException { if ( logger != null ) $F7958 ( logger , socket_was_closed ) if ( ! socket_was_closed ) { if ( handshake_started ) { alertProtocol . alert ( AlertProtocol . WARNING , AlertProtocol . CLOSE_NOTIFY ) ; try { output . write ( alertProtocol . wrap ( ) ) ; } $F18071 alertProtocol . setProcessed ( ) ; } shutdown ( ) ; closeTransportLayer ( ) ; socket_was_closed = _BOOL ; } }
@ FormUrlEncoded @ POST ( NUM00 ) Call < AuthenticationResponse > authorize ( @ FieldMap $F2539 authMap ) ;
private boolean repeatingPreview ( Object tag ) { try { CaptureRequest . Builder builder = mDevice . createCaptureRequest ( CameraDevice . TEMPLATE_PREVIEW ) ; builder . addTarget ( mPreviewSurface ) ; builder . set ( CaptureRequest . CONTROL_MODE , CameraMetadata . CONTROL_MODE_AUTO ) ; addBaselineCaptureKeysToRequest ( builder ) ; mCaptureSession . setRepeatingRequest ( builder . build ( ) , mCaptureCallback , mCameraHandler ) ; Log . v ( TAG , String . format ( NUM00 , mZoomValue ) ) ; return _BOOL ; } catch ( CameraAccessException ex ) { Log . e ( TAG , NUM00 , ex ) ; return _BOOL ; } }
private XMLElement newElement ( String name , String value , ArrayList attributes ) throws Exception $F33971 ( newElement , name , value , attributes , _BOOL )
public void mousePressed ( MouseEvent e ) { if $F585 ( log ) { log . debug ( NUM00 + ( e . getModifiers ( ) & MouseEvent . BUTTON1_MASK ) + NUM00 + e . isPopupTrigger ( ) + NUM00 + ( e . getModifiers ( ) & ( MouseEvent . ALT_MASK + MouseEvent . META_MASK + MouseEvent . CTRL_MASK ) ) + ( NUM00 + MouseEvent . ALT_MASK + NUM00 + MouseEvent . META_MASK + NUM00 + MouseEvent . CTRL_MASK ) ) ; } if ( e . isPopupTrigger ( ) && parentFrame . isSelected ( ) ) { try { $F121507 ( _menu , e ) } catch ( java . awt . IllegalComponentStateException cs ) $F845 $F60335 ( e ) } }
public void defineFillStyle ( $F197086 colors , $F2027 ratios , Transform matrix , boolean radial ) { GradientFill fill = new GradientFill ( colors , ratios , matrix , radial ) ; elements . add ( fill ) ; for ( $F1139 ( i , colors ) ) { if ( colors [ i ] == null ) $F1448 if ( colors [ i ] instanceof AlphaColor ) { hasAlpha = _BOOL ; } } }
public boolean isOrphan ( Sha256Hash block ) { $F790 ( lock ) try $F69736 ( orphanBlocks , block ) $F796 ( lock ) }
protected BooleanVal ( boolean b ) $F6988 ( this , b )
private void relocateFromHeaders ( ByteBuffer f , SceModule module , int baseAddress , Elf32 elf , int elfOffset ) throws IOException { int i = NUM00 ; for ( Elf32ProgramHeader phdr : elf . getProgramHeaderList ( ) ) { if ( phdr . getP_type ( ) == NUM00 ) { int RelCount = phdr . getP_filesz ( ) / Elf32Relocate . sizeof ( ) ; if $F585 ( log ) { log . debug ( String . format ( NUM00 , i , RelCount ) ) ; } f . position ( elfOffset + phdr . getP_offset ( ) ) ; relocateFromBuffer ( f , module , baseAddress , elf , RelCount , _BOOL ) ; $F665 } else if ( phdr . getP_type ( ) == NUM00 ) { if $F585 ( log ) { log . debug ( String . format ( NUM00 , i , phdr . getP_filesz ( ) ) ) ; } f . position ( elfOffset + phdr . getP_offset ( ) ) ; relocateFromBufferA1 ( f , elf , baseAddress , i , phdr . getP_filesz ( ) ) ; $F665 } i ++ ; } for ( Elf32SectionHeader shdr : elf . getSectionHeaderList ( ) ) { if ( mustRelocate ( elf , shdr ) ) { int RelCount = shdr . getSh_size ( ) / Elf32Relocate . sizeof ( ) ; if $F585 ( log ) { log . debug ( shdr . getSh_namez ( ) + NUM00 + RelCount + NUM00 ) ; } f . position ( elfOffset + shdr . getSh_offset ( ) ) ; relocateFromBuffer ( f , module , baseAddress , elf , RelCount , shdr . getSh_type ( ) != Elf32SectionHeader . SHT_REL ) ; } } }
public $F47942 validateVolumes ( StorageSystem storageSystem , $F47942 volumes , boolean delete , boolean remediate , ValCk ... checks ) { try { client = VPlexControllerUtils . getVPlexAPIClient ( VPlexApiFactory . getInstance ( ) , storageSystem , getDbClient ( ) ) ; for ( Volume volume : volumes ) { try { log . info ( String . format ( NUM00 , volume . getLabel ( ) , volume . getNativeId ( ) , volume . getId ( ) , checks . toString ( ) ) ) ; validateVolume ( volume , delete , remediate , checks ) ; } catch ( Exception ex ) { log . error ( $F73839 ( volume ) , ex ) ; } } } catch ( Exception ex ) { log . error ( $F73839 ( storageSystem ) , ex ) ; } return remediatedVolumes ; }
private void drawXAxisMarker ( Canvas canvas , double value , NumberFormat numberFormat , int spacing ) { String marker = chartByDistance ? numberFormat . format ( value ) : StringUtils . formatElapsedTime ( ( long ) value ) ; Rect rect = getRect ( xAxisMarkerPaint , marker ) ; canvas . drawText ( marker , getX ( value ) , topBorder + effectiveHeight + spacing + rect . height ( ) , xAxisMarkerPaint ) ; }
public static $F11685 $F84864 list ( E ... elements ) { $F91915 ( list ) for ( E element : elements ) list . add ( element ) ; return list ; }
public static String encode ( $F162971 polyline , int precision ) { $F83 ( encodedPoints ) int prev_lat = NUM00 , prev_lng = NUM00 ; for ( GeoPoint trackpoint : polyline ) { int lat = trackpoint . getLatitudeE6 ( ) / precision ; int lng = trackpoint . getLongitudeE6 ( ) / precision ; encodedPoints . append ( encodeSignedNumber ( lat - prev_lat ) ) ; encodedPoints . append ( encodeSignedNumber ( lng - prev_lng ) ) ; prev_lat = lat ; prev_lng = lng ; } $F92 ( encodedPoints ) }
private static boolean isTextObscured ( JComponent c , String s ) { $F27516 ( g , c ) FontMetrics fm = g . getFontMetrics ( c . getFont ( ) ) ; int sw = fm . stringWidth ( s ) ; return ( sw > c . getWidth ( ) ) ; }
public void add ( Permission permission ) $F48801 ( perms , permission )
$F1 public $F12622 sum ( $F12625 ( state ) , final $F12622 left , final $F12622 right ) { final $F12622 tmp = new LinkedHashSet $F12621 ( left ) ; tmp . addAll ( right ) ; return tmp ; }
public static int prefixLength $F17564 ( s1 , s2 ) { int len = NUM00 ; $F31444 ( max , Math , s1 , s2 ) for ( int i = NUM00 ; i < max && s1 [ i ] == s2 [ i ] ; ++ i ) ++ len ; return len ; }
public void testAllConnectedBrokerNetwork $F72 throws Exception { bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; bridgeBrokers ( NUM00 , NUM00 ) ; startAllBrokers ( ) ; Destination dest = createDestination ( NUM00 , _BOOL ) ; MessageConsumer clientA = createConsumer ( NUM00 , dest ) ; MessageConsumer clientB = createConsumer ( NUM00 , dest ) ; MessageConsumer clientC = createConsumer ( NUM00 , dest ) ; $F9470 ( Thread ) sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; sendMessages ( NUM00 , dest , MESSAGE_COUNT ) ; MessageIdList msgsA = getConsumerMessages ( NUM00 , clientA ) ; MessageIdList msgsB = getConsumerMessages ( NUM00 , clientB ) ; MessageIdList msgsC = getConsumerMessages ( NUM00 , clientC ) ; $F394993 ( msgsA , MESSAGE_COUNT ) $F394993 ( msgsB , MESSAGE_COUNT ) $F394993 ( msgsC , MESSAGE_COUNT ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsA ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsB ) $F394996 ( assertEquals , MESSAGE_COUNT , msgsC ) }
private int encryptedColumnLength ( int colLength ) { String str = NUM00 ; for ( $F119 ( i , colLength ) ) { str += NUM00 ; } str = SecureEngine . encrypt ( str ) ; $F55826 ( str ) }
private CnATreeElement unifyLinks ( CnATreeElement sourceElement , CnATreeElement destinationElement ) throws CommandException { for ( CnALink linkDown : sourceElement . getLinksDown ( ) ) { createLink ( destinationElement , linkDown . getDependency ( ) , linkDown . getRelationId ( ) ) ; } for ( CnALink linkUp : sourceElement . getLinksUp ( ) ) { createLink ( linkUp . getDependant ( ) , destinationElement , linkUp . getRelationId ( ) ) ; } return destinationElement ; }
private boolean flushAccumulatedRegion $F72 { boolean success = _BOOL ; if ( accumulatedX != Integer . MAX_VALUE ) { SubRegionShowable bsSubRegion = ( SubRegionShowable ) bufferStrategy ; $F36356 ( contentsLost , bufferStrategy ) if ( ! contentsLost ) { bsSubRegion . show ( accumulatedX , accumulatedY , accumulatedMaxX , accumulatedMaxY ) ; $F54171 ( contentsLost , bufferStrategy ) } if ( contentsLost ) { if $F935 ( LOGGER , PlatformLogger ) $F102497 ( LOGGER ) bufferInfo . setInSync ( _BOOL ) ; success = _BOOL ; } } resetAccumulated ( ) ; return success ; }
public void testBitLengthPositive1 $F72 { $F67214 int aSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F6961 ( assertEquals , aNumber ) }
public void clearPieSegments $F72 $F9096 ( mPieSegmentList )
$F1 public PatchResult applyPatch ( PatchData patchData ) { String typeName = patchData . getTypeName ( ) ; String applyVersion = patchData . getApplyToVersion ( ) ; TypesDef updatedTypeDef ; PatchResult result ; try { if ( checkIfTypeExists ( typeName , metadataService ) ) { TypesDef typesDef = getTypeDef ( typeName ) ; String currentVersion = getTypeVersion ( typeName ) ; if ( currentVersion == null || currentVersion . equalsIgnoreCase ( applyVersion ) || currentVersion . startsWith ( applyVersion + NUM00 ) ) { updatedTypeDef = updateTypesDef ( typesDef , patchData ) ; if ( updatedTypeDef != null ) { metadataService . updateType ( TypesSerialization . toJson ( updatedTypeDef ) ) ; LOG . info ( NUM00 + patchData . getTypeName ( ) + NUM00 + patchData . getApplyToVersion ( ) + NUM00 + patchData . getUpdateToVersion ( ) ) ; result = new PatchResult ( NUM00 , PatchStatus . SUCCESS ) ; } else { LOG . error ( NUM00 + typeName + NUM00 + applyVersion + NUM00 + patchData . getUpdateToVersion ( ) ) ; result = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; } } else { LOG . info ( NUM00 + patchData . getTypeName ( ) ) ; result = new PatchResult ( NUM00 , PatchStatus . SKIPPED ) ; } } else { LOG . error ( NUM00 + typeName + NUM00 + applyVersion + NUM00 + patchData . getUpdateToVersion ( ) + NUM00 ) ; result = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; } } catch ( AtlasException e ) { LOG . error ( NUM00 + patchData . getTypeName ( ) ) ; result = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; } catch ( JSONException e ) { LOG . error ( NUM00 + patchData . getTypeName ( ) ) ; result = new PatchResult ( NUM00 , PatchStatus . FAILED ) ; } return result ; }
public static String randomAlphanumerical ( final int len ) { $F94214 ( sb , len ) for ( $F119 ( i , len ) ) { $F37726 ( sb , AB , random ) } $F92 ( sb ) }
static int svd_imax ( int a , int b ) { $F85710 ( Math , a , b ) }
public void actionPerformed ( ActionEvent e ) { $F185684 ( c , textArea ) if ( c . getDot ( ) != c . getMark ( ) ) $F932 RSyntaxDocument doc = ( RSyntaxDocument ) textArea . getDocument ( ) ; doc . readLock ( ) ; try { removeHighlights ( ) ; int line = textArea . getCaretLineNumber ( ) ; $F48983 ( tokenList , textArea , line ) int dot = c . getDot ( ) ; Token t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; if ( t == null || ! isValidType ( t ) || isNonWordChar ( t ) ) { dot -- ; try { if ( dot >= textArea . getLineStartOffset ( line ) ) { t = RSyntaxUtilities . getTokenAtOffset ( tokenList , dot ) ; } } $F203264 ( ble ) } if ( t != null && isValidType ( t ) && ! isNonWordChar ( t ) ) { RSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; String lexeme = t . getLexeme ( ) ; int type = t . type ; for ( int i = NUM00 ; i < textArea . getLineCount ( ) ; i ++ ) { $F48983 ( temp , textArea , i ) while ( temp != null && temp . isPaintable ( ) ) { if ( temp . is ( type , lexeme ) ) { try { int end = temp . offset + temp . textCount ; Object tag = h . addMarkedOccurrenceHighlight ( temp . offset , end , p ) ; tags . add ( tag ) ; } $F203264 ( ble ) } temp = temp . getNextToken ( ) ; } } } } finally { doc . readUnlock ( ) ; } textArea . fireMarkedOccurrencesChanged ( ) ; }
public boolean restoreAccessibilityFocus ( CalendarDay day ) { if ( ( day . year != mYear ) || ( day . month != mMonth ) || ( day . day > mNumCells ) ) { return _BOOL ; } mTouchHelper . setFocusedVirtualView ( day . day ) ; return _BOOL ; }
private boolean isMimeFormat ( long format , String primaryType ) { String nat = getNativeForFormat ( format ) ; $F1933 ( nat , _BOOL ) try { DataFlavor df = new DataFlavor ( nat ) ; if ( primaryType . equals ( df . getPrimaryType ( ) ) ) { return _BOOL ; } } $F3957 return _BOOL ; }
private static String convertRelevance ( int relevance ) { $F83 ( sb ) while ( relevance > NUM00 ) { sb . insert ( NUM00 , REVERSE_CHAR_MAP [ relevance % NUM00 ] ) ; relevance = relevance / NUM00 ; } $F92 ( sb ) }
public synchronized AlphabeticIndex addLabels ( Locale locale ) { $F10665 ( addLabels , peer , locale ) return this ; }
public void sort $F72 $F57005 ( Collections , individuals , PERFORMANCE_COMPARATOR )
int extractVersionFromFilename ( final File file ) { final Matcher matcher = versionedPattern . matcher ( file . getAbsolutePath ( ) ) ; matcher . find ( ) ; return $F13289 ( Integer , matcher ) ; }
static int measureChildForCells $F19021 ( child , cellSize , cellsRemaining , parentHeightMeasureSpec , parentHeightPadding ) { $F3670 ( lp , child ) final int childHeightSize = MeasureSpec . getSize ( parentHeightMeasureSpec ) - parentHeightPadding ; $F19025 ( childHeightMode , MeasureSpec , parentHeightMeasureSpec ) final int childHeightSpec = MeasureSpec . makeMeasureSpec ( childHeightSize , childHeightMode ) ; int cellsUsed = NUM00 ; if ( cellsRemaining > NUM00 ) { final int childWidthSpec = MeasureSpec . makeMeasureSpec ( cellSize * cellsRemaining , MeasureSpec . AT_MOST ) ; child . measure ( childWidthSpec , childHeightSpec ) ; final int measuredWidth = child . getMeasuredWidth ( ) ; cellsUsed = measuredWidth / cellSize ; if ( measuredWidth % cellSize != NUM00 ) cellsUsed ++ ; } final ActionMenuItemView itemView = child instanceof ActionMenuItemView ? ( ActionMenuItemView ) child : null ; final boolean expandable = ! lp . isOverflowButton && itemView != null && itemView . hasText ( ) ; lp . expandable = expandable ; lp . cellsUsed = cellsUsed ; final int targetWidth = cellsUsed * cellSize ; child . measure ( $F19050 ( MeasureSpec , targetWidth ) , childHeightSpec ) ; return cellsUsed ; }
public void runTest $F72 throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String badString ; $F236 ( doc , load , _BOOL ) $F237 ( elementList , doc ) $F238 ( nameNode , elementList ) $F241 ( child , nameNode ) { boolean success = _BOOL ; try { badString = child . substringData ( $F72322 ) ; } $F250 ( success , ex , DOMException ) assertTrue ( NUM00 , success ) ; } }
private boolean isSpecializedHandlerAvailable ( Intent intent ) { $F45547 ( pm , mActivity ) $F45549 handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; $F45556 ( handlers , _BOOL ) for ( ResolveInfo resolveInfo : handlers ) { IntentFilter filter = resolveInfo . filter ; $F4322 ( filter ) if ( filter . countDataAuthorities ( ) == NUM00 && filter . countDataPaths ( ) == NUM00 ) $F1448 return _BOOL ; } return _BOOL ; }
private void convertError ( CharBuffer buf , int line ) { String srcFilename = null ; int destLine = NUM00 ; int srcLine = NUM00 ; int srcTailLine = Integer . MAX_VALUE ; for ( $F2277 ( i , _lines ) ) { Line map = ( Line ) _lines . get ( i ) ; if ( map . _dstLine <= line && line <= map . getLastDestinationLine ( ) ) { srcFilename = map . _srcFilename ; destLine = map . _dstLine ; srcLine = map . getSourceLine ( line ) ; $F597 } } if ( srcFilename != null ) $F845 else if $F3817 ( _lines ) srcFilename = ( ( Line ) _lines . get ( NUM00 ) ) . _srcFilename ; else srcFilename = NUM00 ; buf . append ( srcFilename ) ; if ( line >= NUM00 ) { $F84 ( buf ) buf . append ( srcLine + ( line - destLine ) ) ; } }
public static String slurpGBURLNoExceptions ( URL u ) { try $F4915 ( slurpGBURL , u ) $F84580 ( e ) }
public void undo $F72 { if $F5973 ( undoStack ) { UndoableAction lastEvent = undoStack . pop ( ) ; lastEvent . undo ( ) ; redoStack . push ( lastEvent ) ; } }
private void emitListAdd $F6406 ( method , fieldName , builder ) { $F84 ( builder ) $F6407 ( builder , getListAdderName , fieldName ) $F84 ( builder ) builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , NUM00 ) ) ; $F84 ( builder ) $F6407 ( builder , getEnsureName , fieldName ) $F84 ( builder ) builder . append ( fieldName ) ; $F84 ( builder ) $F84 ( builder ) }
public Pair < SolrCore , SolrCore > replicateToDestination ( SolrCore bestsrcCore , SolrCore destinationCore ) throws Exception { Pair < SolrCore , SolrCore > replicationRequestPair = null ; try { SolrInteractionUtils . replicateIndex ( destinationCore . host , destinationCore . name , bestsrcCore . host , bestsrcCore . name ) ; String fullReplication = NUM00 ; String replicator = String . format ( fullReplication , destinationCore . host , SolrInteractionUtils . DEFAULT_SOLR_PORT , destinationCore . name , bestsrcCore . host , SolrInteractionUtils . DEFAULT_SOLR_PORT , bestsrcCore . name ) ; $F556 ( logger , replicator ) replicationRequestPair = new Pair < SolrCore , SolrCore > ( destinationCore , bestsrcCore ) ; logger . info ( NUM00 + destinationCore . host + NUM00 + destinationCore . name + NUM00 + bestsrcCore . host + NUM00 + bestsrcCore . name ) ; } catch ( Exception e ) { logger . info ( NUM00 + destinationCore . host + NUM00 + bestsrcCore . host ) ; if ( ! replicatorConfig . shouldSkipReplicationFailures ( ) ) { throw new ReplicationFailureException ( NUM00 + destinationCore . host + NUM00 + bestsrcCore . host ) ; } } return replicationRequestPair ; }
public static OSType calculateOS $F72 { $F27462 ( osName , System ) osName = $F91593 ( osName , Locale ) ; if $F3106 ( osName ) { return OSType . APPLE ; } if $F3106 ( osName ) { return OSType . WINDOWS ; } if $F3106 ( osName ) { return OSType . LINUX ; } if $F3106 ( osName ) { return OSType . SUN ; } return OSType . UNKNOWN ; }
private static int countDuplicates ( $F11340 currentStack , $F11340 parentStack ) { int duplicates = NUM00 ; int parentIndex = parentStack . length ; for ( int i = currentStack . length ; -- i >= NUM00 && -- parentIndex >= NUM00 ; ) { StackTraceElement parentFrame = parentStack [ parentIndex ] ; if $F145 ( parentFrame , currentStack , i ) { duplicates ++ ; } else $F5153 } return duplicates ; }
public void recycle $F72 { synchronized ( sPool ) { if $F10255 ( sPool , MAX_POOL_SIZE ) $F207 ( sPool , this ) } }
private String buildInsert ( boolean disableReturning ) { $F4910 ( sb ) $F84 ( sb ) appendTable ( sb ) ; $F84 ( sb ) sb . append ( options . keyColumnName ) ; $F84 ( sb ) if ( options . doctypeColumnName != null ) { sb . append ( options . doctypeColumnName ) ; $F84 ( sb ) } sb . append ( options . contentColumnName ) ; $F84 ( sb ) if ( options . timestampColumnName != null ) { $F84 ( sb ) sb . append ( options . timestampColumnName ) ; $F84 ( sb ) } if ( options . creationColumnName != null ) { $F84 ( sb ) sb . append ( options . creationColumnName ) ; $F84 ( sb ) } if ( ( options . versionColumnName != null ) && ( options . versioningMethod ) != CollectionDescriptor . VERSION_NONE ) { $F84 ( sb ) sb . append ( options . versionColumnName ) ; $F84 ( sb ) } $F84 ( sb ) if ( ( options . keySequenceName != null ) && ( ! disableReturning ) ) { switch ( options . keyDataType ) { case CollectionDescriptor . INTEGER_KEY : $F84 ( sb ) sb . append ( options . keySequenceName ) ; $F84 ( sb ) $F597 case CollectionDescriptor . RAW_KEY : $F84 ( sb ) sb . append ( options . keySequenceName ) ; $F84 ( sb ) $F597 case CollectionDescriptor . NUM00 <missing ';'> _KEY : case CollectionDescriptor . NCHAR_KEY : default : $F84 ( sb ) sb . append ( options . keySequenceName ) ; $F84 ( sb ) $F597 } } else if ( ( options . keyAssignmentMethod == CollectionDescriptor . KEY_ASSIGN_GUID ) && ( ! disableReturning ) ) { switch ( options . keyDataType ) { case CollectionDescriptor . INTEGER_KEY : $F84 ( sb ) $F84 ( sb ) $F84 ( sb ) $F597 case CollectionDescriptor . RAW_KEY : $F84 ( sb ) $F597 case CollectionDescriptor . NUM00 <missing ';'> _KEY : case CollectionDescriptor . NCHAR_KEY : default : $F84 ( sb ) $F597 }
public final boolean exists $F72 $F40347 ( config )
$F1 public synchronized void removeTestSetListener ( TestSetListener tsl ) $F130709 ( m_testListeners , tsl )
private boolean has_colinear ( ArrayList $F137739 corners_list , PlaPointInt a_point ) { $F2199 ( count , corners_list ) $F12655 ( count , _BOOL ) for ( $F4864 ( index , count ) ) { PlaPointInt start = corners_list . get ( index ) ; PlaPointInt end = corners_list . get ( index + NUM00 ) ; if ( a_point . side_of ( start , end ) != PlaSide . COLLINEAR ) $F598 $F12662 ( d_start_p , start , a_point ) $F12662 ( d_p_end , a_point , end ) $F12662 ( d_start_end , start , end ) if ( d_start_end >= d_start_p ) { if ( d_start_end >= d_p_end ) { return _BOOL ; } else $F12663 ( corners_list , index , a_point , _BOOL ) } else { if ( d_start_end >= d_p_end ) { $F12666 ( corners_list , index , a_point ) return _BOOL ; } else $F12663 ( corners_list , index , a_point , _BOOL ) } } return _BOOL ; }
public boolean contains ( String key ) $F69736 ( myProperties , key )
protected SnmpCachedData updateCachedDatas ( Object userData ) { final $F806 path = JvmRuntimeImpl . getLibraryPath ( userData ) ; $F42358 ( time , System ) $F18832 ( len , path ) SnmpOid indexes [ ] = new SnmpOid [ len ] ; for ( $F119 ( i , len ) ) { indexes [ i ] = new SnmpOid ( i + NUM00 ) ; } return new SnmpCachedData ( time , indexes , path ) ; }
public static $F96 decodeHex ( String hexString ) { $F115 ( length , hexString ) if $F69047 ( length ) $F825 boolean badHex = _BOOL ; $F96 out = new byte [ length > > NUM00 ] ; for ( int i = NUM00 , j = NUM00 ; j < length ; i ++ ) { $F52835 ( c1 , hexString , j ) if ( c1 > NUM00 ) $F3468 ( badHex , _BOOL ) final byte d1 = DIGITS [ c1 ] ; if ( d1 == - NUM00 ) $F3468 ( badHex , _BOOL ) $F52835 ( c2 , hexString , j ) if ( c2 > NUM00 ) $F3468 ( badHex , _BOOL ) final byte d2 = DIGITS [ c2 ] ; if ( d2 == - NUM00 ) $F3468 ( badHex , _BOOL ) out [ i ] = $F112580 ( d1 , d2 ) ; } if ( badHex ) $F18931 ( hexString ) return out ; }
public static void deletePlayer ( PlayerAccountData accData ) { if ( accData . getDeletionDate ( ) != null ) $F932 accData . setDeletionDate ( new Timestamp ( System . currentTimeMillis ( ) + $F264 ) ) ; storeDeletionTime ( accData ) ; }
public int eval ( INode state ) { EightPuzzleNode node = ( EightPuzzleNode ) state ; int Pn = NUM00 ; for ( int r = NUM00 ; r <= EightPuzzleNode . MaxR ; r ++ ) { for ( int c = NUM00 ; c <= EightPuzzleNode . MaxC ; c ++ ) { if ( node . isEmpty ( r , c ) ) $F1448 int digit = node . cell ( r , c ) ; Pn += Math . abs ( diffs [ digit ] [ NUM00 ] - r ) ; Pn += Math . abs ( diffs [ digit ] [ NUM00 ] - c ) ; } } int Sn = NUM00 ; if ( ! node . isEmpty ( NUM00 , NUM00 ) ) { Sn = NUM00 ; } for ( int r = NUM00 ; r <= EightPuzzleNode . MaxR ; r ++ ) { for ( int c = NUM00 ; c <= EightPuzzleNode . MaxC ; c ++ ) { int idx = r * NUM00 + c ; if ( r == NUM00 && c == NUM00 ) $F1448 if ( node . cell ( r , c ) == EightPuzzleNode . EmptyMark ) $F1448 if ( succ [ node . cell ( r , c ) ] != node . cell ( succs [ idx ] [ NUM00 ] , succs [ idx ] [ NUM00 ] ) ) { Sn += NUM00 ; } } } int gn = NUM00 ; DepthTransition t = ( DepthTransition ) state . storedData ( ) ; if ( t != null ) { gn = t . depth ; } return gn + Pn + NUM00 * Sn ; }
public void testBuffered $F72 { Instances icopy = new Instances ( m_Instances ) ; Instances result = null ; try { m_Filter . setInputFormat ( icopy ) ; } catch ( Exception ex ) { $F301 ( ex ) $F13951 ( fail , ex ) } try { result = Filter . useFilter ( icopy , m_Filter ) ; assertNotNull ( result ) ; } catch ( Exception ex ) { $F301 ( ex ) $F13951 ( fail , ex ) } StringWriter sw = new StringWriter $F989 ; $F9826 ( sw , result ) assertTrue ( icopy . equalHeaders ( m_Instances ) ) ; assertEquals ( icopy . numInstances ( ) , m_Instances . numInstances ( ) ) ; Instances result2 = null ; try { m_Filter . setInputFormat ( icopy ) ; } catch ( Exception ex ) { $F301 ( ex ) $F13951 ( fail , ex ) } try { result2 = Filter . useFilter ( icopy , m_Filter ) ; assertNotNull ( result2 ) ; } catch ( Exception ex ) { $F301 ( ex ) $F13951 ( fail , ex ) } assertTrue ( icopy . equalHeaders ( m_Instances ) ) ; assertEquals ( icopy . numInstances ( ) , m_Instances . numInstances ( ) ) ; assertTrue ( result . equalHeaders ( result2 ) ) ; assertEquals ( result . numInstances ( ) , result2 . numInstances ( ) ) ; }
private String parseCss ( final String css ) { final $F2539 map = $F12080 ; $F3239 ( sb ) $F66059 ( m , PATTERN_VARIABLES_DEFINITION , css ) while $F281 ( m ) { $F356510 ( variablesBody , m ) map . putAll ( extractVariables ( variablesBody ) ) ; m . appendReplacement ( sb , NUM00 ) ; } m . appendTail ( sb ) ; $F38747 ( replaceVariables , sb , map ) }
private void shutdown $F72 { if ( execSvc != null ) execSvc . shutdown ( NUM00 ) ; if ( msgExecSvc != null ) $F5832 ( msgExecSvc ) try { job . dispose ( _BOOL ) ; } catch ( IgniteCheckedException e ) { U . error ( log , NUM00 , e ) ; } }
$F130716 ( m_inCData , _BOOL , append , m_doc )
public void addAll ( List < Fragment > aSplits ) $F21926 ( splits , aSplits )
protected synchronized int currentchunkoffset $F72 throws IOException { long fp = backingRandomAccessFile . getFilePointer ( ) ; if ( fp < fHeader . headerSize ( ) ) $F7629 else { fp -= fHeader . headerSize ( ) ; if ( fp == NUM00 ) $F1083 else { return ( int ) ( ( fp % CHUNK_ENC_SIZE ) - CHUNK_IV_SIZE ) ; } } }
private int parseIntValue ( String input ) throws NumberFormatException { int value = NUM00 ; if $F3106 ( input ) { $F28924 ( temp , input ) $F15516 ( Integer , temp ) } else if $F3106 ( input ) { $F28924 ( temp , input ) $F7782 ( chars , temp ) if $F3305 ( chars ) { $F21291 } else { for ( $F1139 ( i , chars ) ) { int index = chars . length - i - NUM00 ; switch ( chars [ i ] ) { $F1262 value += NUM00 ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1262 $F1262 value += NUM00 * getBase ( index ) ; $F597 $F1267 throw new NumberFormatException $F580 ; } } } if ( value < NUM00 ) $F101477 } else $F37473 ( value , Integer , input ) return value ; }
protected int decodeLinePrefix ( PushbackInputStream aStream , OutputStream bStream ) throws IOException { return ( bytesPerLine ( ) ) ; }
private static LookupLocator [ ] unmarshalLocators ( ObjectInputStream in ) throws $F6427 { $F19151 ( l ) MarshalledInstance mi ; while ( ( mi = ( MarshalledInstance ) in . readObject ( ) ) != null ) { try { l . add ( ( LookupLocator ) mi . get ( _BOOL ) ) ; } catch ( Throwable e ) { if ( e instanceof Error && ThrowableConstants . retryable ( e ) == ThrowableConstants . BAD_OBJECT ) { $F106249 ( e ) } logger . log ( Level . WARNING , NUM00 , e ) ; } } return ( LookupLocator [ ] ) l . toArray ( new LookupLocator $F2313 ( l ) ) ; }
public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( $F48125 ( i , values ) ) { $F123 ( name , values , i ) Object value = values . get ( i + NUM00 ) ; accept ( av , name , value ) ; } } $F110334 ( av ) } }
static public String numberToString ( Number n ) throws JSONException { if ( n == null ) $F19954 testValidity ( n ) ; $F1822 ( s , n ) if ( s . indexOf ( NUM00 ) > NUM00 && $F1730 ( s ) && $F1730 ( s ) ) { while $F8991 ( s ) $F8994 ( s ) $F8996 ( s ) } return s ; }
public int children $F72 $F1652 ( children )
public void createVVset ( String displayName ) throws Exception { $F973 ( _log ) ClientResponse clientResp = null ; String payload = NUM00 + displayName + NUM00 ; _log . info ( $F89018 ( URI_CREATE_CG , payload ) ) ; try { clientResp = post ( URI_CREATE_CG , payload ) ; if ( clientResp == null ) { $F9464 ( _log ) throw new HP3PARException $F580 ; } else if ( clientResp . getStatus ( ) != NUM00 ) { String errResp = getResponseDetails ( clientResp ) ; $F5197 ( _log , errResp ) throw new HP3PARException ( errResp ) ; } else $F22715 ( _log ) } $F91522 ( e ) finally { $F2727 ( clientResp ) $F973 ( _log ) } }
protected void connectionFailed ( Channel failedChannel , IOException cause ) { failureCause = IOExceptionSupport . create ( cause ) ; channel = failedChannel ; connected . set ( _BOOL ) ; handshakeFuture . setFailure ( cause ) ; }
$F195241 ( uint8 , hexString , Integer , low , high , result )
$F130385 ( c , internalOut )
$F35402 ( context , cameraManager )
public void addAttribute ( String uri , String localName , String rawName , String type , String value , boolean XSLAttribute ) throws SAXException { if ( m_elemContext . m_startTagOpen ) { ensurePrefixIsDeclared ( uri , rawName ) ; addAttributeAlways ( uri , localName , rawName , type , value , _BOOL ) ; } }
private String markdownBlockquote ( String value ) { return NUM00 + $F2934 ( value ) ; }
protected String hash ( String key ) { try { MessageDigest gen = HASH_GENERATOR . get ( ) ; $F151317 ( keyBytes , key ) $F6163 ( gen , keyBytes ) $F294889 ( binaryhash , gen ) return ENCODER . encodeToString ( binaryhash ) ; } catch ( Exception e ) $F66732 ( LOG , key , e ) $F1274 }
public static boolean isInputType ( String typeString ) $F298 ( INPUT_TYPES , typeString )
public static Point destination ( Point point1 , double distance , double bearing , String units ) throws TurfException { double degrees2radians = Math . PI / NUM00 ; double radians2degrees = NUM00 / Math . PI ; Position coordinates1 = point1 . getCoordinates ( ) ; double longitude1 = degrees2radians * coordinates1 . getLongitude ( ) ; double latitude1 = degrees2radians * coordinates1 . getLatitude ( ) ; double bearingRad = degrees2radians * bearing ; double radians = TurfHelpers . distanceToRadians ( distance , units ) ; double latitude2 = Math . asin ( Math . sin ( latitude1 ) * Math . cos ( radians ) + Math . cos ( latitude1 ) * Math . sin ( radians ) * Math . cos ( bearingRad ) ) ; double longitude2 = longitude1 + Math . atan2 ( Math . sin ( bearingRad ) * Math . sin ( radians ) * Math . cos ( latitude1 ) , Math . cos ( radians ) - Math . sin ( latitude1 ) * Math . sin ( latitude2 ) ) ; return Point . fromCoordinates ( Position . fromCoordinates ( radians2degrees * longitude2 , radians2degrees * latitude2 ) ) ; }
public void clear $F72 { synchronized ( mLock ) { $F725 ( mGraphics ) mFirstGraphic = null ; } postInvalidate ( ) ; }
$F1431 public NodePanel ( ShaderNodeVariable singleOut , NodePanel . NodeType type ) { super ( ) ; List < ShaderNodeVariable > outputs = new ArrayList < ShaderNodeVariable > $F72 ; outputs . add ( singleOut ) ; this . type = type ; init ( new ArrayList < ShaderNodeVariable > $F72 , outputs ) ; addKeyListener ( this ) ; toolBar = new NodeToolBar ( this ) ; }
public static String stringifyException ( Throwable e ) { $F29429 ( stm ) $F80496 ( wrt , stm ) e . printStackTrace ( wrt ) ; $F59 ( wrt ) $F92 ( stm ) }
private HeronReefUtils $F72 $F845
public static boolean isSolaris $F72 $F48848 ( OS )
public double SumInlinkHubScore ( Page page ) { $F3803 inLinks = page . getInlinks ( ) ; double hubScore = NUM00 ; for ( $F2277 ( i , inLinks ) ) { Page inLink = $F67701 ( pTable , inLinks , i ) ; if ( inLink != null ) { hubScore += inLink . hub ; } else $F1448 } return hubScore ; }
$F1 public void addUndoPoint $F72 { File tempFile ; ObjectOutputStream oos ; $F933 ( isUndoEnabled ) if $F89491 ( getInstances ) { try { tempFile = File . createTempFile ( NUM00 , null ) ; $F60829 ( tempFile ) oos = $F20341 ( tempFile ) ; oos . writeObject ( getInstances ( ) ) ; $F1206 ( oos ) $F59 ( oos ) m_UndoList . add ( tempFile ) ; } $F1516 ( e ) } }
$F73354 ( curViewBound , curViewWidth , right , mClipPadding )
private void preserveParentLink ( String brokenTableName , String brokenColumnName , String brokenDefaultValue , $F5 brokenCompareColumns , String hintTableName , String hintColumnName , $F5 hintCompareColumns ) { String vendorName = m_target . getVendor ( ) ; String catalogName = m_target . getCatalog ( ) ; String schemaName = m_target . getSchema ( ) ; if ( m_source . isObjectExists ( brokenTableName , m_source . getTables ( ) ) ) { boolean columnToPreserveLinkExists = _BOOL ; DBObject tableToPreserveLink = m_source . getObjectByName ( brokenTableName , m_source . getTables ( ) ) ; HashMap < Integer , DBObjectDefinition > columns = tableToPreserveLink . getContents ( ) ; $F24610 vc = new $F24610 $F57797 ( columns ) ; for ( Iterator $F2305 ic = vc . iterator ( ) ; ic . hasNext ( ) ; ) { $F128162 ( kc , ic ) DBObject_Table_Column columnDetail = ( DBObject_Table_Column ) columns . get ( kc ) ; $F20605 ( columnName , columnDetail ) if $F8397 ( columnName , brokenColumnName ) columnToPreserveLinkExists = _BOOL ; } if ( columnToPreserveLinkExists ) { s_logger . log ( Level . FINE , NUM00 , $F42238 ( m_objectType , brokenTableName , m_direction ) ) ; String sqlCommand = s_dbEngine . sqlAction_preserveParentLinks ( vendorName , catalogName , schemaName , brokenTableName , brokenColumnName , brokenDefaultValue , brokenCompareColumns , hintTableName , hintColumnName , hintCompareColumns ) ; if ( sqlCommand != null ) { Savepoint sp = m_target . setSavepoint ( NUM00 ) ; Statement stmt = m_target . setStatement ( ) ; Integer sqlResult = m_target . executeUpdate ( stmt , sqlCommand , _BOOL , _BOOL ) ; if ( sqlResult != null ) { logUpdateDetail ( sqlResult , null ) ; m_counterUpd = new Integer ( m_counterUpd . intValue ( ) + NUM00 ) ; } m_target . releaseStatement ( stmt ) ; m_totalUpd = new Integer ( m_totalUpd . intValue ( ) + NUM00 ) ; m_target . releaseSavepoint ( sp ) ; } } } }
public ShortBandedRaster $F235065 ( sampleModel , dataBuffer , origin ) $F235073 ( this , sampleModel , dataBuffer , origin )
public void remapMappedTypes $F72 $F19529 ( clearMappedTypes , mapPossibleTypes , mItems )
public void initialize $F72 throws ExecutionException $F845
public int numChildren ( int row ) { int count = NUM00 ; $F725 ( nextValidRowPositions ) for ( $F119 ( i , n ) ) { board [ row ] [ i ] = _BOOL ; if ( valid ( row , i ) ) { count ++ ; nextValidRowPositions . add ( i ) ; } board [ row ] [ i ] = _BOOL ; } return count ; }
public void testNegNegSameLength $F72 $F9149 ( numA , numB , res , aNumber , bNumber , result , assertTrue )
public static IJavaSearchScope createRelatedProjectsScope ( IJavaProject project , int includeMask ) throws CoreException { IJavaProject [ ] projects = getRelatedProjects ( project ) ; return SearchEngine . createJavaSearchScope ( projects , includeMask ) ; }
public Confirmation $F72 { this ( null , null ) ; }
public VcsRevisionNumber originalRevision ( int lineNumber ) $F4915 ( getLineRevisionNumber , lineNumber )
private void checkPausedOrCanceled ( State state ) throws StopRequest { if ( mService . getControl ( ) == DownloaderService . CONTROL_PAUSED ) { int status = mService . getStatus ( ) ; switch ( status ) { case DownloaderService . STATUS_PAUSED_BY_APP : throw new StopRequest ( mService . getStatus ( ) , NUM00 ) ; } } }
void trace $F72 { glUseProgram ( computeProgram ) ; invProjMatrix . transformProject ( tmpVector . set ( - NUM00 , - NUM00 , NUM00 ) ) ; glUniform3f ( ray00Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; invProjMatrix . transformProject ( tmpVector . set ( - NUM00 , NUM00 , NUM00 ) ) ; glUniform3f ( ray01Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; invProjMatrix . transformProject ( tmpVector . set ( NUM00 , - NUM00 , NUM00 ) ) ; glUniform3f ( ray10Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; invProjMatrix . transformProject ( tmpVector . set ( $F25460 ) ) ; glUniform3f ( ray11Uniform , tmpVector . x , tmpVector . y , tmpVector . z ) ; glBindBufferBase ( GL_SHADER_STORAGE_BUFFER , trianglesSsboBinding , ssbo ) ; glBindImageTexture ( framebufferImageBinding , raytraceTexture , NUM00 , _BOOL , NUM00 , GL_WRITE_ONLY , GL_RGBA8 ) ; int worksizeX = mathRoundPoT ( width ) ; int worksizeY = mathRoundPoT ( height ) ; glDispatchCompute ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 ) ; glMemoryBarrier ( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ) ; $F224834 ( glBindImageTexture , framebufferImageBinding , _BOOL , GL_WRITE_ONLY , GL_RGBA8 ) glBindBufferBase ( GL_SHADER_STORAGE_BUFFER , trianglesSsboBinding , NUM00 ) ; glUseProgram ( NUM00 ) ; }
public void removeAllActionFireListeners $F72 $F9096 ( mActionFiredListeners )
public static String millisToString ( long millis ) { boolean negative = millis < NUM00 ; $F15467 ( millis , Math ) millis /= NUM00 ; $F273037 ( sec , millis ) millis /= NUM00 ; $F273037 ( min , millis ) millis /= NUM00 ; $F29204 ( hours , millis ) String time ; DecimalFormat format = ( DecimalFormat ) NumberFormat . getInstance ( Locale . US ) ; $F125027 ( format ) if ( millis > NUM00 ) { time = ( negative ? NUM00 : NUM00 ) + hours + NUM00 + format . format ( min ) + NUM00 + format . format ( sec ) ; } else { time = ( negative ? NUM00 : NUM00 ) + min + NUM00 + format . format ( sec ) ; } return time ; }
@ Inline public static void toUTF8 ( String s , ByteBuffer b ) { int result_index = NUM00 ; for ( $F133333 ( i , n , s ) ) { $F1280 ( c , s , i ) if ( ( ( ! WRITE_PSEUDO_UTF8 ) || ( c >= NUM00 ) ) && ( c <= NUM00 ) ) $F180946 ( b , c ) else if ( c > NUM00 ) { b . put ( ( byte ) ( NUM00 | $F8043 ( c ) ) ) ; b . put ( ( byte ) ( NUM00 | $F84702 ( c ) ) ) ; b . put ( ( byte ) ( NUM00 | ( c & NUM00 ) ) ) ; } else { b . put ( ( byte ) ( NUM00 | $F8043 ( c ) ) ) ; b . put ( ( byte ) ( NUM00 | ( c & NUM00 ) ) ) ; } } }
public CopyOnWriteArrayList $F102871 ( toCopyIn ) { setArray ( Arrays . copyOf ( toCopyIn , toCopyIn . length , $F22453 ) ) ; }
$F1 public StringBuffer format ( long number , StringBuffer toAppendTo , FieldPosition pos ) { return toAppendTo . append ( getDirectionCode ( number ) ) ; }
public static void main $F4374 ( args ) throws Exception { digestCommandLineArguments ( args ) ; boolean inHeadlessMode = GraphicsEnvironment . isHeadless ( ) ; boolean inConvertMode = isinConvertMode ( ) ; SCXMLGraphEditor editor = startEditor ( inConvertMode || inHeadlessMode ) ; if ( isinConvertMode ( ) ) { SCXMLEditorActions . convertNoGUI ( editor ) ; } else if ( ! inHeadlessMode ) { String input = getPresetInput ( ) ; if ( ! StringUtils . isEmptyString ( input ) ) { OpenAction open = new OpenAction $F15780 ( input ) ; open . actionPerformed ( new ActionEvent ( editor , NUM00 , NUM00 ) ) ; } } }
public void testEqualsUnequal2 $F72 { String a = NUM00 ; int aScale = - NUM00 ; String b = NUM00 ; int bScale = NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) $F28249 ( assertFalse , aNumber , bNumber ) }
protected void enableRetransmissionTimer ( int tickCount ) { if ( isInviteTransaction ( ) && ( this instanceof SIPClientTransaction ) ) { retransmissionTimerTicksLeft = tickCount ; } else { retransmissionTimerTicksLeft = $F102434 ( Math , tickCount , getTimerT2 ) ; } retransmissionTimerLastTickCount = retransmissionTimerTicksLeft ; }
private void scheduleMsgForAllConsumers ( JetstreamMessage msg ) { if $F585 ( LOGGER ) $F101275 ( LOGGER , msg ) EventConsumerInfo info = null ; ArrayList < LinkedList < Selection > > weightedList = m_eventTopicRegistry . get ( msg . getTopic ( ) ) ; if ( weightedList != null ) { Iterator < LinkedList < Selection > > weightedItr = weightedList . iterator ( ) ; while $F2921 ( weightedItr ) { LinkedList < Selection > consumerList = weightedItr . next ( ) ; Iterator < Selection > itr = consumerList . iterator ( ) ; while $F2921 ( itr ) { info = ( EventConsumerInfo ) itr . next ( ) ; $F45557 ( info ) dispatch ( info , msg ) ; } } } else { if ( m_advisoryListener != null ) { postResendAdvisory ( msg ) ; $F72375 ( m_noConsumerAdvisories ) } else { $F72375 ( m_totalMsgsDropped ) $F72375 ( m_dropsForNoConsumer ) } } }
$F1 public Void visitDeclared ( AnnotatedDeclaredType declaredType , Void aVoid ) { $F5972 ( pause ) parents . push ( declaredType ) ; super . visitDeclared ( declaredType , aVoid ) ; $F34454 ( parents ) $F1274 }
public Class create $F72 { setUseCache ( _BOOL ) ; return ( Class ) super . create ( this ) ; }
public static $F4203 $F5675 tuple ( T ... objects ) { return Collections . unmodifiableList ( list ( objects ) ) ; }
protected static Set stringArrayToSet $F4374 ( strs ) { int count = strs . length ; Set set = ( ( count > NUM00 ) ? new HashSet ( count ) : new HashSet $F72 ) ; $F117265 ( i , count , set , strs ) return set ; }
public boolean authenticate ( final OddCallback < AuthToken > callback ) { synchronized ( syncLock ) { $F58185 ( isExpired , _BOOL ) if ( ! authenticating ) { authenticating = _BOOL ; timer = new Timer $F72 ; TimerTask task = getPollTask ( callback ) ; timer . schedule ( task , $F4094 , interval ) ; TimerTask expiredTask = getExpiredTask ( callback ) ; timer . schedule ( expiredTask , expirationDate ) ; } return _BOOL ; } }
public static void cancelNotificationsForRoomId ( String accountId , String roomId ) { $F17544 ( Log , LOG_TAG , accountId , roomId ) if ( null != mActiveEventStreamService ) { mActiveEventStreamService . cancelNotifications ( accountId , roomId ) ; } }
public static Optional < PlayerProfile > lookup ( UUID id ) { if ( Bukkit . getPlayer ( id ) != null ) { return Optional . of ( fromPlayer ( Bukkit . getPlayer ( id ) ) ) ; } return lookupProperties ( id ) ; }
static double svd_dmin ( double a , double b ) { $F95700 ( Math , a , b ) }
private StoragePort selectStoragePort ( $F42521 spList ) { Collections . shuffle ( spList ) ; $F38159 ( spList ) }
private void assimilateContext ( NestingException nestingException ) { Enumeration < ExceptionContext > enumExeptions = nestingException . getExceptionContexts ( ) ; if $F1444 ( enumExeptions ) { while $F1444 ( enumExeptions ) { addExceptionContext ( enumExeptions . nextElement ( ) ) ; } nestingException . clearContexts ( ) ; } }
public boolean equals ( Object o ) { if ( o instanceof AMIdentitySubject ) { AMIdentitySubject subject = ( AMIdentitySubject ) o ; return $F52920 ( subjectValues , subject ) ; } return ( _BOOL ) ; }
public void updateKeyinfo ( String realm , String entityName , $F24190 ( extValues ) , $F24190 ( stdValues ) , boolean isIDP ) throws AMConsoleException { String keysize = getResult ( stdValues , TF_KEY_NAME ) ; String algorithm = getResult ( stdValues , TF_ALGORITHM ) ; $F42356 ( signingCertAliases ) $F42356 ( encryptionCertAliases ) if ( isIDP ) { encryptionCertAliases = extValues . get ( IDP_ENCRYPT_CERT_ALIAS ) ; signingCertAliases = extValues . get ( IDP_SIGN_CERT_ALIAS ) ; } else { encryptionCertAliases = extValues . get ( SP_ENCRYPT_CERT_ALIAS ) ; signingCertAliases = extValues . get ( SP_SIGN_CERT_ALIAS ) ; } int keysi = ! StringUtils . isEmpty ( keysize ) ? Integer . parseInt ( keysize ) : NUM00 ; String alg = StringUtils . isEmpty ( algorithm ) ? XMLCipher . AES_128 : algorithm ; try { SAML2MetaSecurityUtils . updateProviderKeyInfo ( realm , entityName , signingCertAliases , _BOOL , isIDP , alg , keysi ) ; SAML2MetaSecurityUtils . updateProviderKeyInfo ( realm , entityName , encryptionCertAliases , _BOOL , isIDP , alg , keysi ) ; } catch ( SAML2MetaException e ) { $F21557 ( debug , e ) $F21559 ( getErrorString , e ) } }
public void updateSlider ( final double p , final boolean n ) { checkWidget ( ) ; double percentage = p ; if ( step != null ) { percentage = Math . round ( percentage / step ) * step ; } this . notify = n ; if ( percentage < NUM00 ) { percentage = NUM00 ; } else $F127479 ( percentage ) final int usefulWidth = getClientArea ( ) . width - thumbWidth ; final int $F22510 ( width , Math , usefulWidth , percentage ) ; moveThumbHorizontally ( width ) ; previousPosition = percentage ; this . notify = _BOOL ; }
$F1 public boolean contains ( String identifier ) $F298 ( whitelist , identifier )
public static final Action [ ] augmentList ( Action [ ] list1 , Action [ ] list2 ) { Hashtable < String , Action > h = new Hashtable < String , Action > $F72 ; for ( Action a : list1 ) { String value = ( String ) a . getValue ( Action . NAME ) ; h . put ( $F134738 ( value ) , a ) ; } for ( Action a : list2 ) { String value = ( String ) a . getValue ( Action . NAME ) ; h . put ( $F134738 ( value ) , a ) ; } Action [ ] actions = new Action $F2313 ( h ) ; int index = NUM00 ; for ( $F44696 ( e , h ) ) { actions [ index ++ ] = ( Action ) e . nextElement ( ) ; } return actions ; }
public MVMap $F9340 openVersion ( long version ) { if ( readOnly ) { throw DataUtils . newUnsupportedOperationException ( NUM00 + NUM00 ) ; } DataUtils . checkArgument ( version >= createVersion , NUM00 , version , createVersion ) ; Page newest = null ; Page r = root ; if ( version >= r . getVersion ( ) && ( version == writeVersion || r . getVersion ( ) >= NUM00 || version <= createVersion || store . getFileStore ( ) == null ) ) { newest = r ; } else { Page last = oldRoots . peekFirst ( ) ; if ( last == null || version < last . getVersion ( ) ) { return store . openMapVersion ( version , id , this ) ; } Iterator < Page > it = oldRoots . iterator ( ) ; while $F2921 ( it ) { Page p = it . next ( ) ; if ( p . getVersion ( ) > version ) $F5153 last = p ; } newest = last ; } MVMap $F9340 m = openReadOnly ( ) ; m . root = newest ; return m ; }
public DTMDefaultBase ( DTMManager mgr , Source source , int dtmIdentity , DTMWSFilter whiteSpaceFilter , XMLStringFactory xstringfactory , boolean doIndexing , int blocksize , boolean usePrevsib , boolean newNameTable ) { int numblocks ; if ( blocksize <= NUM00 ) { numblocks = DEFAULT1BLOCKS_SMALL ; m_dtmIdent = new SuballocatedIntVector $F32532 ; } else { numblocks = DEFAULT1BLOCKS ; $F78588 ( m_dtmIdent ) } $F521423 ( m_exptype , blocksize , numblocks ) $F521423 ( m_firstch , blocksize , numblocks ) $F521423 ( m_nextsib , blocksize , numblocks ) $F521423 ( m_parent , blocksize , numblocks ) if ( usePrevsib ) $F521423 ( m_prevsib , blocksize , numblocks ) m_mgr = mgr ; if ( mgr instanceof DTMManagerDefault ) m_mgrDefault = ( DTMManagerDefault ) mgr ; m_documentBaseURI = ( null != source ) ? source . getSystemId ( ) : null ; m_dtmIdent . setElementAt ( dtmIdentity , NUM00 ) ; m_wsfilter = whiteSpaceFilter ; m_xstrf = xstringfactory ; m_indexing = doIndexing ; if ( doIndexing ) { m_expandedNameTable = new ExpandedNameTable $F72 ; } else { m_expandedNameTable = m_mgrDefault . getExpandedNameTable ( this ) ; } if ( null != whiteSpaceFilter ) { m_shouldStripWhitespaceStack = new BoolStack $F72 ; pushShouldStripWhitespace ( _BOOL ) ; } }
private boolean lessThanOrEqual $F7233 ( a , b ) { $F31444 ( len , Math , a , b ) for ( $F31445 ( i , len ) ) { if $F14614 ( a , i , b ) { return ( a [ i ] & NUM00 ) < ( b [ i ] & NUM00 ) ; } } return len == a . length ; }
protected $F40512 ( parts_ )
public static boolean isNumber ( String s ) { try { Integer . valueOf ( s ) ; return _BOOL ; } $F7474 ( _BOOL ) }
private boolean isOuterGState $F72 { $F214965 ( mGStateStack ) }
public void testCase24 $F72 { $F15143 BigInteger aNumber = BigInteger . ONE ; BigInteger bNumber = BigInteger . ONE ; $F10683 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F10686 ( assertEquals , result ) }
void add ( SuperCardToast superCardToast ) $F207 ( mList , superCardToast )
static public Tasker create $F72 { return new Tasker $F72 ; }
public static String concernStackString ( BlockInfo blockInfo ) { String result = NUM00 ; for ( String stackEntry : blockInfo . threadStackEntries ) { if ( $F22878 ( Character , stackEntry ) ) { $F806 lines = stackEntry . split ( BlockInfo . SEPARATOR ) ; for ( String line : lines ) { String keyStackString = concernStackString ( line ) ; $F21525 ( keyStackString ) } return classSimpleName ( lines [ NUM00 ] ) ; } } return result ; }
static String gravityToString ( @ EdgeGravity int gravity ) { if ( ( gravity & Gravity . LEFT ) == Gravity . LEFT ) $F2455 if ( ( gravity & Gravity . RIGHT ) == Gravity . RIGHT ) $F2455 if ( ( gravity & Gravity . BOTTOM ) == Gravity . BOTTOM ) $F2455 return Integer . toHexString ( gravity ) ; }
public void removeAllRenderers $F72 $F9096 ( mRenderers )
public static int writeSpeexHeader ( $F96 buf , int offset , int sampleRate , int mode , int channels , boolean vbr , int nframes , int packetlength ) { writeString ( buf , offset , NUM00 ) ; writeString ( buf , offset + NUM00 , NUM00 ) ; System . arraycopy ( $F10314 , NUM00 , buf , offset + NUM00 , NUM00 ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; writeInt ( buf , offset + NUM00 , sampleRate ) ; writeInt ( buf , offset + NUM00 , mode ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; writeInt ( buf , offset + NUM00 , channels ) ; writeInt ( buf , offset + NUM00 , - NUM00 ) ; writeInt ( buf , offset + NUM00 , NUM00 < < mode ) ; writeInt ( buf , offset + NUM00 , vbr ? NUM00 : NUM00 ) ; writeInt ( buf , offset + NUM00 , nframes ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; writeInt ( buf , offset + NUM00 , packetlength ) ; writeInt ( buf , offset + NUM00 , NUM00 ) ; $F1082 }
private static File igniteHadoopConfig ( String igniteHome ) { Path path = Paths . get ( igniteHome , NUM00 , NUM00 , NUM00 ) ; if $F33270 ( Files , path ) path = Paths . get ( igniteHome , NUM00 , NUM00 ) ; if $F97092 ( Files , path ) return path . toFile ( ) ; else return $F109794 ( igniteHome ) ; }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
protected ApproximationLine conservativeKnnDistanceApproximation ( int k_max ) { int k_0 = k_max ; double y_1 = Double . NEGATIVE_INFINITY ; double y_kmax = Double . NEGATIVE_INFINITY ; for ( $F50810 ( i , getNumEntries ) ) { MkCoPEntry entry = getEntry ( i ) ; ApproximationLine approx = entry . getConservativeKnnDistanceApproximation ( ) ; k_0 = Math . min ( approx . getK_0 ( ) , k_0 ) ; } for ( $F50810 ( i , getNumEntries ) ) { MkCoPEntry entry = getEntry ( i ) ; ApproximationLine approx = entry . getConservativeKnnDistanceApproximation ( ) ; double entry_y_1 = approx . getValueAt ( k_0 ) ; double entry_y_kmax = approx . getValueAt ( k_max ) ; if ( ! Double . isInfinite ( entry_y_1 ) ) { $F28619 ( y_1 , Math , entry_y_1 ) } if ( ! Double . isInfinite ( entry_y_kmax ) ) { $F28619 ( y_kmax , Math , entry_y_kmax ) } } double m = ( y_kmax - y_1 ) / ( Math . log ( k_max ) - Math . log ( k_0 ) ) ; double t = y_1 - m * Math . log ( k_0 ) ; return new ApproximationLine ( k_0 , m , t ) ; }
public final boolean shares_layer ( BrdItem p_other ) { int max_first_layer = Math . max ( $F120503 ( first_layer , p_other ) ) ; int min_last_layer = $F203679 ( Math , last_layer , p_other ) ; return max_first_layer <= min_last_layer ; }
$F2146 ( progressLabel , progress , myHost , previousProgress , previousProgressLabel )
$F16994 ( buf )
public CoapClient ( URI uri ) $F94311 ( this , uri )
private void zero $F72 throws JSONException { if ( probe ) $F73598 ( log ) write ( NUM00 , NUM00 ) ; }
public static boolean beenDone ( TimeUnit timeUnit , long amount , String tag , CountChecker numberOfTimes ) { long timeInMillis = timeUnit . toMillis ( amount ) ; return beenDone ( timeInMillis , tag , numberOfTimes ) ; }
public static String normalize ( String oid ) { return $F3390 ( oid ) ; }
public RtcpPacket parseRtcpPacket ( Packet packet ) { RtcpCompoundPacket compoundPacket = new RtcpCompoundPacket ( packet ) ; Vector < RtcpPacket > subpackets = new Vector < RtcpPacket > $F72 ; DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( compoundPacket . data , compoundPacket . offset , compoundPacket . length ) ) ; try { rtcpSession . updateavgrtcpsize ( compoundPacket . length ) ; int length = NUM00 ; for ( int offset = NUM00 ; offset < compoundPacket . length ; offset += length ) { $F34181 ( firstbyte , in ) if $F69047 ( firstbyte ) $F1337 $F34181 ( type , in ) $F89921 ( length , in ) length = length + NUM00 < < NUM00 ; int padlen = NUM00 ; if ( offset + length > compoundPacket . length ) $F1337 if ( offset + length == compoundPacket . length ) { if $F69047 ( firstbyte ) { padlen = compoundPacket . data [ $F24941 ( compoundPacket ) - NUM00 ] & NUM00 ; $F38155 ( padlen ) } } else if $F69047 ( firstbyte ) $F1337 int inlength = length - padlen ; firstbyte &= NUM00 ; RtcpPacket subpacket ; switch ( type ) { case RtcpPacket . RTCP_SR : stats . numSrPkts ++ ; if ( inlength != NUM00 + NUM00 * firstbyte ) { stats . numMalformedRtcpPkts ++ ; $F1274 } RtcpSenderReportPacket srp = new RtcpSenderReportPacket ( compoundPacket ) ; subpacket = srp ; srp . ssrc = in . readInt ( ) ; srp . ntptimestampmsw = $F247606 ( in ) & NUM00 ; srp . ntptimestamplsw = $F247606 ( in ) & NUM00 ; srp . rtptimestamp = $F247606 ( in ) & NUM00 ; srp . packetcount = $F247606 ( in ) & NUM00 ; srp . octetcount = $F247606 ( in ) & NUM00 ; srp . reports = new RtcpReport [ firstbyte ] ; RtpSource sourceSR = rtcpSession . getMySource ( ) ; if ( sourceSR != null ) { sourceSR . receivedSenderReport ( srp ) ; } for ( int i = NUM00 ; i < srp . reports . length ; i ++ ) { RtcpReport report = new RtcpReport $F72 ; srp . reports [ i ] = report ; report . ssrc = in . readInt ( ) ; long val = in . readInt ( ) ; val &= NUM00 ; report . fractionlost = $F13506 ( val ) ; report . packetslost = $F76474 ( val ) ; report . lastseq = $F247606 ( in ) & NUM00 ; report . jitter = in . readInt ( ) ; report . lsr = $F247606 ( in ) & NUM00 ; report . dlsr = $F247606 ( in ) & NUM00 ; } notifyRtcpListeners ( new RtcpSenderReportEvent ( srp ) ) ; $F597 case RtcpPacket . RTCP_RR : if ( inlength != NUM00 + NUM00 * firstbyte ) { stats . numMalformedRtcpPkts ++ ; $F1274 } RtcpReceiverReportPacket rrp = new RtcpReceiverReportPacket ( compoundPacket ) ; subpacket = rrp ; rrp . ssrc = in . readInt ( ) ; rrp . reports = new RtcpReport [ firstbyte ] ; for ( int i = NUM00 ; i < rrp . reports . length ; i ++ ) { RtcpReport report = new RtcpReport $F72 ; rrp . reports [ i ] = report ; report . ssrc = in . readInt ( ) ; long val = in . readInt ( ) ; val &= NUM00 ; report . fractionlost = $F13506 ( val ) ; report . packetslost = $F76474 ( val ) ; report . lastseq = $F247606 ( in ) & NUM00 ; report . jitter = in . readInt ( ) ; report . lsr = $F247606 ( in ) & NUM00 ; report . dlsr = $F247606 ( in ) & NUM00 ; } notifyRtcpListeners ( new RtcpReceiverReportEvent ( rrp ) ) ; $F597 case RtcpPacket . RTCP_SDES : RtcpSdesPacket sdesp = new RtcpSdesPacket ( compoundPacket ) ; subpacket = sdesp ; sdesp . sdes = new RtcpSdesBlock [ firstbyte ] ; int sdesoff = NUM00 ; for ( int i = NUM00 ; i < sdesp . sdes . length ; i ++ ) { RtcpSdesBlock chunk = new RtcpSdesBlock $F72 ; sdesp . sdes [ i ] = chunk ; chunk . ssrc = in . readInt ( ) ; sdesoff += NUM00 ; Vector < RtcpSdesItem > items = new Vector < RtcpSdesItem > $F72 ; boolean gotcname = _BOOL ; int j ; while ( ( j = in . readUnsignedByte ( ) ) != NUM00 ) { if $F19274 ( j ) { stats . numMalformedRtcpPkts ++ ; $F1274 } $F126526 ( j , gotcname , _BOOL ) RtcpSdesItem item = new RtcpSdesItem $F72 ; items . addElement ( item ) ; item . type = j ; $F34181 ( sdeslen , in ) item . data = new byte [ sdeslen ] ; in . readFully ( item . data ) ; sdesoff += NUM00 + sdeslen ; } if ( ! gotcname ) { stats . numMalformedRtcpPkts ++ ; $F1274 } chunk . items = new RtcpSdesItem $F2313 ( items ) ; items . copyInto ( chunk . items ) ; if $F69047 ( sdesoff ) { if ( in . skip ( NUM00 - ( sdesoff & NUM00 ) ) != NUM00 - ( sdesoff & NUM00 ) ) $F1337 sdesoff = sdesoff + NUM00 & - NUM00 ; } } if ( inlength != sdesoff ) { stats . numMalformedRtcpPkts ++ ; $F1274 } notifyRtcpListeners ( new RtcpSdesEvent ( sdesp ) ) ; $F597 case RtcpPacket . RTCP_BYE : RtcpByePacket byep = new RtcpByePacket ( compoundPacket ) ; subpacket = byep ; byep . ssrc = new int [ firstbyte ] ; for ( int i = NUM00 ; i < byep . ssrc . length ; i ++ ) { byep . ssrc [ i ] = in . readInt ( ) ; } int reasonlen ; if ( inlength > NUM00 + NUM00 * firstbyte ) { $F269619 ( reasonlen , in ) byep . reason = new byte [ reasonlen ] ; reasonlen ++ ; } else { reasonlen = NUM00 ; byep . reason = $F10314 ; } reasonlen = reasonlen + NUM00 & - NUM00 ; if ( inlength != NUM00 + NUM00 * firstbyte + reasonlen ) { stats . numMalformedRtcpPkts ++ ; $F1274 } in . readFully ( byep . reason ) ; int skipBye = reasonlen - byep . reason . length ; if ( in . skip ( skipBye ) != skipBye ) $F1337 notifyRtcpListeners ( new RtcpByeEvent ( byep ) ) ; $F597 case RtcpPacket . RTCP_APP : $F6664 ( inlength ) RtcpAppPacket appp = new RtcpAppPacket ( compoundPacket ) ; subpacket = appp ; appp . ssrc = in . readInt ( ) ; appp . name = in . readInt ( ) ; appp . subtype = firstbyte ; appp . data = new byte [ inlength - NUM00 ] ; in . readFully ( appp . data ) ; int skipApp = inlength - NUM00 - appp . data . length ; if ( in . skip ( skipApp ) != skipApp ) $F1337 notifyRtcpListeners ( new RtcpApplicationEvent ( appp ) ) ; $F597 $F1267 stats . numUnknownTypes ++ ; $F1274 } subpacket . offset = offset ; subpacket . length = length ; subpackets . addElement ( subpacket ) ; if ( in . skipBytes ( padlen ) != padlen ) $F1337 } } $F34300 compoundPacket . packets = new RtcpPacket $F2313 ( subpackets ) ; subpackets . copyInto ( compoundPacket . packets ) ; return compoundPacket ; }
public void reset $F72 $F5795 ( initialize )
private static void addListenersForReal ( final Service service , final Set < Listener > existingListeners , final Listener listener , final Executor executor ) { if $F2200 ( existingListeners , listener ) { existingListeners . add ( listener ) ; service . addListener ( listener , executor ) ; } }
public void prepend ( CharSequence s ) { $F34005 ( text , s ) }
public static void sendResponseWithStatus ( HttpServletRequest request , HttpServletResponse response , PrintWriter out , String idpMetaAlias , String idpEntityID , String realm , AuthnRequest authnReq , String relayState , String spEntityID , String firstlevelStatusCodeValue , String secondlevelStatusCodeValue ) throws SAML2Exception { Response res = SAML2Utils . getErrorResponse ( authnReq , firstlevelStatusCodeValue , secondlevelStatusCodeValue , null , idpEntityID ) ; $F280 ( returnedBinding ) String acsURL = IDPSSOUtil . getACSurl ( spEntityID , realm , authnReq , request , returnedBinding ) ; $F1822 ( acsBinding , returnedBinding ) sendResponse ( request , response , out , acsBinding , spEntityID , idpEntityID , idpMetaAlias , realm , relayState , acsURL , res , null ) ; }
protected void validateDTDattribute ( QName element , String attValue , XMLAttributeDecl attributeDecl ) throws XNIException { switch ( attributeDecl . simpleType . type ) { case XMLSimpleType . TYPE_ENTITY : { boolean isAlistAttribute = attributeDecl . simpleType . list ; try { if ( isAlistAttribute ) { fValENTITIES . validate ( attValue , fValidationState ) ; } else { fValENTITY . validate ( attValue , fValidationState ) ; } } catch ( InvalidDatatypeValueException ex ) { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; } $F597 } case XMLSimpleType . TYPE_NOTATION : case XMLSimpleType . TYPE_ENUMERATION : { boolean found = _BOOL ; $F806 enumVals = attributeDecl . simpleType . enumeration ; if ( enumVals == null ) { found = _BOOL ; } else for ( $F1139 ( i , enumVals ) ) { if ( attValue == enumVals [ i ] || attValue . equals ( enumVals [ i ] ) ) $F3468 ( found , _BOOL ) } if ( ! found ) { $F280 ( enumValueString ) if ( enumVals != null ) for ( $F1139 ( i , enumVals ) ) { enumValueString . append ( enumVals [ i ] + NUM00 ) ; } fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , new Object [ ] { attributeDecl . name . rawname , attValue , enumValueString } , XMLErrorReporter . SEVERITY_ERROR ) ; } $F597 } case XMLSimpleType . TYPE_ID : { try { fValID . validate ( attValue , fValidationState ) ; } catch ( InvalidDatatypeValueException ex ) { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; } $F597 } case XMLSimpleType . TYPE_IDREF : { boolean isAlistAttribute = attributeDecl . simpleType . list ; try { if ( isAlistAttribute ) { fValIDRefs . validate ( attValue , fValidationState ) ; } else { fValIDRef . validate ( attValue , fValidationState ) ; } } catch ( InvalidDatatypeValueException ex ) { if ( isAlistAttribute ) { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; } else { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , ex . getKey ( ) , ex . getArgs ( ) , XMLErrorReporter . SEVERITY_ERROR ) ; } } $F597 } case XMLSimpleType . TYPE_NMTOKEN : { boolean isAlistAttribute = attributeDecl . simpleType . list ; try { if ( isAlistAttribute ) { fValNMTOKENS . validate ( attValue , fValidationState ) ; } else { fValNMTOKEN . validate ( attValue , fValidationState ) ; } } catch ( InvalidDatatypeValueException ex ) { if ( isAlistAttribute ) { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; } else { fErrorReporter . reportError ( XMLMessageFormatter . XML_DOMAIN , NUM00 , $F8844 ( attValue ) , XMLErrorReporter . SEVERITY_ERROR ) ; } } $F597 } } }
public static double mean2 ( Connection conn , double ... values ) { conn . getClass ( ) ; double sum = NUM00 ; for ( double x : values ) { sum += x ; } return sum / values . length ; }
public boolean hasLongColumnInfo $F72 { return this . hasLongColumnInfo ; }
public static String domToString ( Document domDoc ) { return domToString ( domDoc . getDocumentElement ( ) , _BOOL ) ; }
public static $F4203 T assertAndCast ( $F10050 clazz , Object o ) { assertNotNull ( clazz ) ; assertNotNull ( o ) ; assertTrue ( clazz . isInstance ( o ) ) ; $F123138 ( clazz , o ) }
private String createMismatchMessage ( String mismatch , MigrationVersion version , Object applied , Object resolved ) { return String . format ( NUM00 + mismatch + NUM00 + NUM00 + NUM00 , version , applied , resolved ) ; }
$F37100 ( fieldId , IDS )
public int compareTo ( Object o ) { Split split = ( Split ) o ; BitSet P = getFirstPart ( ) ; BitSet Q = split . getFirstPart ( ) ; $F304395 ( a , P ) ; $F304395 ( b , Q ) ; while ( a > - NUM00 && b > - NUM00 ) { if ( a < b ) $F150 else if ( a > b ) $F1082 $F304396 ( a , P ) ; $F304396 ( b , Q ) ; } if ( a < b ) $F150 else if ( a > b ) $F1082 P = getSecondPart ( ) ; Q = split . getSecondPart ( ) ; a = P . nextSetBit ( NUM00 ) ; b = Q . nextSetBit ( NUM00 ) ; while ( a > - NUM00 && b > - NUM00 ) { if ( a < b ) $F150 else if ( a > b ) $F1082 $F304396 ( a , P ) ; $F304396 ( b , Q ) ; } if ( a < b ) $F150 else if ( a > b ) $F1082 else $F1082 }
public boolean isMatchingTalkgroup ( LTRNetMessage message ) { String talkgroup = message . getTalkgroupID ( ) ; if ( talkgroup != null && getToID ( ) != null && talkgroup . contentEquals ( getToID ( ) ) ) { return _BOOL ; } return isMatchingTalkgroup ( message . getTalkgroupID ( ) ) ; }
public void put $F24576 ( source , index , length ) { if ( mBuffer . capacity ( ) < ( mLength + length ) ) { expandBuffer ( mLength + length + ADDITIONAL_BUFFER_SIZE ) ; } mBuffer . put ( source , index , length ) ; mLength += length ; }
public void testSetBitNegativeInside4 $F72 { String as = NUM00 ; int number = NUM00 ; $F9144 ( aNumber , as ) $F43462 ( result , aNumber , number ) $F10665 ( assertEquals , as , result ) }
public Shape modelToView ( int pos , Shape a , $F48960 b ) throws BadLocationException { return m_view . modelToView ( pos , a , b ) ; }
private static int applyPrecision ( int decExp , $F1469 digits , int nDigits , int prec ) { if ( prec >= nDigits || prec < NUM00 ) { return decExp ; } if ( prec == NUM00 ) { if ( digits [ NUM00 ] >= NUM00 ) { digits [ NUM00 ] = NUM00 ; Arrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; return decExp + NUM00 ; } else { Arrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; return decExp ; } } int q = digits [ prec ] ; if ( q >= NUM00 ) { int i = prec ; q = digits [ -- i ] ; if ( q == NUM00 ) { while ( q == NUM00 && i > NUM00 ) { q = digits [ -- i ] ; } if ( q == NUM00 ) { digits [ NUM00 ] = NUM00 ; Arrays . fill ( digits , NUM00 , nDigits , NUM00 ) ; return decExp + NUM00 ; } } digits [ i ] = $F46343 ( q ) ; Arrays . fill ( digits , i + NUM00 , nDigits , NUM00 ) ; } else { Arrays . fill ( digits , prec , nDigits , NUM00 ) ; } return decExp ; }
protected void drawCubic ( Canvas c , LineDataSet dataSet , $F14699 entries ) { Transformer trans = mChart . getTransformer ( dataSet . getAxisDependency ( ) ) ; Entry entryFrom = dataSet . getEntryForXIndex ( mMinX ) ; Entry entryTo = dataSet . getEntryForXIndex ( mMaxX ) ; int diff = ( entryFrom == entryTo ) ? NUM00 : NUM00 ; int minx = Math . max ( dataSet . getEntryPosition ( entryFrom ) - diff , NUM00 ) ; int maxx = Math . min ( Math . max ( minx + NUM00 , dataSet . getEntryPosition ( entryTo ) + NUM00 ) , entries . size ( ) ) ; float phaseX = mAnimator . getPhaseX ( ) ; float phaseY = mAnimator . getPhaseY ( ) ; float intensity = dataSet . getCubicIntensity ( ) ; $F2268 ( cubicPath ) int size = ( int ) Math . ceil ( ( maxx - minx ) * phaseX + minx ) ; if ( size - minx >= NUM00 ) { float prevDx = NUM00 ; float prevDy = NUM00 ; float curDx = NUM00 ; float curDy = NUM00 ; $F14726 ( prevPrev , entries , minx ) $F14726 ( prev , entries , minx ) $F14726 ( cur , entries , minx ) Entry next = entries . get ( minx + NUM00 ) ; cubicPath . moveTo ( cur . getXIndex ( ) , cur . getVal ( ) * phaseY ) ; $F14736 ( prevDx , cur , prev , intensity ) $F14741 ( prevDy , cur , prev , intensity ) $F14736 ( curDx , next , cur , intensity ) $F14741 ( curDy , next , cur , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) for ( int j = minx + NUM00 , count = Math . min ( size , $F2281 ( entries ) ) ; j < count ; j ++ ) { prevPrev = entries . get ( j == NUM00 ? NUM00 : j - NUM00 ) ; $F14758 ( prev , entries , j ) cur = entries . get ( j ) ; $F14759 ( next , entries , j ) $F14736 ( prevDx , cur , prevPrev , intensity ) $F14741 ( prevDy , cur , prevPrev , intensity ) $F14736 ( curDx , next , prev , intensity ) $F14741 ( curDy , next , prev , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) } if ( size > $F2281 ( entries ) ) { prevPrev = entries . get ( $F14765 ( entries ) ? $F2281 ( entries ) : $F2281 ( entries ) ) ; $F14770 ( prev , entries ) $F14770 ( cur , entries ) next = cur ; $F14736 ( prevDx , cur , prevPrev , intensity ) $F14741 ( prevDy , cur , prevPrev , intensity ) $F14736 ( curDx , next , prev , intensity ) $F14741 ( curDy , next , prev , intensity ) $F14748 ( cubicPath , prev , prevDx , prevDy , phaseY , cur , curDx , curDy ) } } if ( dataSet . isDrawFilledEnabled ( ) ) { $F2268 ( cubicFillPath ) cubicFillPath . addPath ( cubicPath ) ; drawCubicFill ( mBitmapCanvas , dataSet , cubicFillPath , trans , entryFrom . getXIndex ( ) , entryFrom . getXIndex ( ) + size ) ; } $F14782 ( mRenderPaint , dataSet ) mRenderPaint . setStyle ( Paint . Style . STROKE ) ; trans . pathValueToPixel ( cubicPath ) ; mBitmapCanvas . drawPath ( cubicPath , mRenderPaint ) ; mRenderPaint . setPathEffect ( null ) ; }
public void delete ( $F4170 Key key ) { final ReentrantReadWriteLock . WriteLock lock = guard . writeLock ( ) ; $F790 ( lock ) try { if $F40971 ( readKeys , key ) $F824 Files . delete ( key . getFile ( ) ) ; } catch ( IOException ex ) { LOG . log ( Level . WARNING , NUM00 + key . getFile ( ) , ex ) ; } $F796 ( lock ) }
$F410840 ( value )
public boolean onTouchEvent ( MotionEvent event ) { try { int pointerCount = multiTouchSupported ? ( Integer ) m_getPointerCount . invoke ( event ) : NUM00 ; if ( DEBUG ) Log . i ( NUM00 , NUM00 + multiTouchSupported + NUM00 + mMode + NUM00 + handleSingleTouchEvents + NUM00 + pointerCount ) ; if ( mMode == MODE_NOTHING && ! handleSingleTouchEvents && pointerCount == NUM00 ) return _BOOL ; if ( DEBUG ) $F16229 ( Log ) int action = event . getAction ( ) ; int histLen = event . getHistorySize ( ) / pointerCount ; for ( $F9993 ( histIdx , histLen ) ) { boolean processingHist = histIdx < histLen ; if ( ! multiTouchSupported || pointerCount == NUM00 ) { if ( DEBUG ) $F16229 ( Log ) xVals [ NUM00 ] = processingHist ? event . getHistoricalX ( histIdx ) : event . getX ( ) ; yVals [ NUM00 ] = processingHist ? event . getHistoricalY ( histIdx ) : event . getY ( ) ; pressureVals [ NUM00 ] = processingHist ? event . getHistoricalPressure ( histIdx ) : event . getPressure ( ) ; } else { if ( DEBUG ) $F16229 ( Log ) $F17565 ( numPointers , Math , pointerCount , MAX_TOUCH_POINTS ) if ( DEBUG && pointerCount > MAX_TOUCH_POINTS ) $F16229 ( Log ) for ( $F119 ( ptrIdx , numPointers ) ) { int ptrId = ( Integer ) m_getPointerId . invoke ( event , ptrIdx ) ; pointerIds [ ptrIdx ] = ptrId ; xVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalX . invoke ( event , ptrIdx , histIdx ) : m_getX . invoke ( event , ptrIdx ) ) ; yVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalY . invoke ( event , ptrIdx , histIdx ) : m_getY . invoke ( event , ptrIdx ) ) ; pressureVals [ ptrIdx ] = ( Float ) ( processingHist ? m_getHistoricalPressure . invoke ( event , ptrIdx , histIdx ) : m_getPressure . invoke ( event , ptrIdx ) ) ; } } decodeTouchEvent ( pointerCount , xVals , yVals , pressureVals , pointerIds , processingHist ? MotionEvent . ACTION_MOVE : action , processingHist ? _BOOL : action != MotionEvent . ACTION_UP && ( action & ( $F76927 ( ACTION_POINTER_INDEX_SHIFT ) ) ) != ACTION_POINTER_UP && action != MotionEvent . ACTION_CANCEL , processingHist ? event . getHistoricalEventTime ( histIdx ) : event . getEventTime ( ) ) ; } return _BOOL ; } catch ( Exception e ) { Log . e ( NUM00 , NUM00 , e ) ; return _BOOL ; } }
public static void storeLocation ( Context context , LatLng location ) { $F111887 ( prefs , PreferenceManager , context ) $F37526 ( editor , prefs ) editor . putLong ( PREFERENCES_LAT , Double . doubleToRawLongBits ( location . latitude ) ) ; editor . putLong ( PREFERENCES_LNG , Double . doubleToRawLongBits ( location . longitude ) ) ; $F37527 ( editor ) }
public void writeToFile ( String fileName ) throws IOException { PrintWriter outfile = new PrintWriter $F4443 ( fileName ) ; $F8438 ( outfile ) $F8438 ( outfile ) $F7957 ( outfile , m_nbins ) $F7957 ( outfile , m_min ) $F7957 ( outfile , m_max ) $F7957 ( outfile , m_entries ) $F7957 ( outfile , m_underflow ) $F7957 ( outfile , m_overflow ) $F8438 ( outfile ) for ( $F119 ( i , m_nbins ) ) { outfile . println ( i + NUM00 + m_binCenters [ i ] + NUM00 + m_hist [ i ] ) ; } $F8438 ( outfile ) $F59 ( outfile ) }
public void outdent $F72 { $F11550 ( length , indent ) $F256058 ( length ) indent . delete ( length - NUM00 , length ) ; }
public static String extractFromDataMatrix ( String code ) { if $F3599 ( code ) $F1337 if $F3106 ( code ) { return $F606 ( code ) ; } $F1274 }
public void paintCurrentValue ( Graphics g , Rectangle bounds , boolean hasFocus ) { XPStyle xp = XPStyle . getXP ( ) ; if ( xp != null ) { bounds . x += NUM00 ; bounds . y += NUM00 ; bounds . width -= NUM00 ; bounds . height -= NUM00 ; } else { bounds . x += NUM00 ; bounds . y += NUM00 ; bounds . width -= NUM00 ; bounds . height -= NUM00 ; } if ( ! comboBox . isEditable ( ) && xp != null && xp . isSkinDefined ( comboBox , Part . CP_READONLY ) ) { ListCellRenderer renderer = comboBox . getRenderer ( ) ; Component c ; if ( hasFocus && ! isPopupVisible ( comboBox ) ) { c = renderer . getListCellRendererComponent ( listBox , comboBox . getSelectedItem ( ) , - NUM00 , _BOOL , _BOOL ) ; } else { c = renderer . getListCellRendererComponent ( listBox , comboBox . getSelectedItem ( ) , - NUM00 , _BOOL , _BOOL ) ; } $F252172 ( c , comboBox ) if $F34496 ( comboBox ) { c . setForeground ( comboBox . getForeground ( ) ) ; c . setBackground ( comboBox . getBackground ( ) ) ; } else { c . setForeground ( DefaultLookup . getColor ( comboBox , this , NUM00 , null ) ) ; c . setBackground ( DefaultLookup . getColor ( comboBox , this , NUM00 , null ) ) ; } boolean shouldValidate = _BOOL ; if ( c instanceof JPanel ) { shouldValidate = _BOOL ; } currentValuePane . paintComponent ( g , c , comboBox , bounds . x , bounds . y , bounds . width , bounds . height , shouldValidate ) ; } else { super . paintCurrentValue ( g , bounds , hasFocus ) ; } }
$F1 public AudioInputStream synthesiseOneSection ( String festivalUtt , Voice voice ) throws IOException { writeRelationFiles ( festivalUtt ) ; File audioFile = new File ( festivalDir . getPath ( ) + File . separator + NUM00 ) ; String festivalVoiceCmd = $F2990 ( voice ) ; AudioInputStream sound = festivalSynthesise ( audioFile , festivalVoiceCmd ) ; return sound ; }
JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { Scope context = peek ( ) ; if ( context != nonempty && context != empty ) $F19954 $F30606 ( stack ) $F83461 ( context , nonempty , newline ) out . append ( closeBracket ) ; return this ; }
public int read $F24576 ( buffer , offset , length ) throws IOException { log . finest ( NUM00 + $F26213 ( Long , getFilePointer ) + NUM00 + length + NUM00 ) ; return _file . read ( buffer , offset , length ) ; }
public static Pattern createPattern ( $F806 patterns , boolean isCaseSensitive , boolean isRegexSearch ) throws PatternSyntaxException { $F280 ( pattern ) for ( $F1139 ( i , patterns ) ) { $F34674 ( i , pattern ) if ( isRegexSearch ) $F40727 ( pattern , patterns , i ) else $F218373 ( asRegEx , patterns , i , pattern ) } return createPattern ( pattern . toString ( ) , isCaseSensitive , _BOOL ) ; }
public void addArc ( float latPoint , float lonPoint , int w , int h , float s , float e , LinkProperties properties ) throws IOException { LinkArc . write ( latPoint , lonPoint , NUM00 , NUM00 , w , h , s , e , properties , link . dos ) ; }
public void onUndeploy ( ClassLoader ldr ) { for ( $F6969 cls : descByCls . keySet ( ) ) { if ( ldr . equals ( cls . getClassLoader ( ) ) ) descByCls . remove ( cls ) ; } U . clearClassCache ( ldr ) ; }
$F1 public boolean containsClass ( String className ) throws IOException { boolean containsClass = _BOOL ; String resourceName = $F139654 ( className ) ; if ( getResource ( resourceName ) != null ) { containsClass = _BOOL ; } for ( String resource : getResources ( NUM00 ) ) { JarArchive jar = new DefaultJarArchive ( getResource ( resource ) ) ; if ( jar . containsClass ( className ) ) { containsClass = _BOOL ; } } return containsClass ; }
public $F416167 clearInternal $F72 { $F416167 t = new Tuple [ getTupleCount ( ) ] ; Iterator iter = tuples ( ) ; for ( int i = NUM00 ; iter . hasNext ( ) ; ++ i ) { t [ i ] = ( Tuple ) iter . next ( ) ; } $F725 ( m_tuples ) return t ; }
public synchronized void removeTextListener ( TextListener cl ) $F106 ( m_textListeners , cl )
private void ensureCapacity ( int desiredLongCount ) { if ( desiredLongCount <= bits . length ) $F932 int newLength = Math . max ( desiredLongCount , bits . length * NUM00 ) ; $F12300 ( newBits , newLength ) $F135 ( System , bits , newBits , longCount ) this . bits = newBits ; }
public boolean matches ( String query , String text ) $F298 ( text , query )
private void findCollapsesFromExistingVertices ( List collapsedVertexIndexes ) { for ( $F2665 ( i , edge ) ) { Coordinate p0 = edge . getCoordinate ( i ) ; Coordinate p1 = edge . getCoordinate ( i + NUM00 ) ; Coordinate p2 = edge . getCoordinate ( i + NUM00 ) ; if ( p0 . equals2D ( p2 ) ) { collapsedVertexIndexes . add ( new Integer ( i + NUM00 ) ) ; } } }
public void close $F72 throws IOException { $F254545 ( Debug ) try $F1823 ( inputFile ) $F1516 ( e ) inputFile = null ; }
public static boolean checkPoolPropertiesChanged ( $F2689 existingValue , $F2689 newValue ) { boolean propertyChanged = _BOOL ; if ( existingValue == null && $F1032 ( newValue ) ) { propertyChanged = _BOOL ; } else if ( newValue == null && $F1032 ( existingValue ) ) { propertyChanged = _BOOL ; } else if ( existingValue != null && newValue != null ) { if ( $F15255 ( existingValue , newValue ) || ! ( existingValue . containsAll ( newValue ) ) ) { propertyChanged = _BOOL ; } } return propertyChanged ; }
public static OutputStream leftShift ( OutputStream self , InputStream in ) throws IOException { $F12496 ( buf ) while ( _BOOL ) { int $F18803 ( count , in , buf ) ; $F167039 ( count ) if ( count == NUM00 ) { $F5756 ( Thread ) $F598 } $F11584 ( self , buf , count ) } $F1206 ( self ) return self ; }
public static boolean gitLocalConfig ( final AtomicReference $F4 path ) throws IOException { return gitLocalConfig ( Environment . getCurrentDirectory ( ) , path ) ; }
public void verify $F72 { super . verify ( ) ; assertEquals ( NUM00 , confirmed , collection ) ; assertEquals ( NUM00 , confirmed . hashCode ( ) , collection . hashCode ( ) ) ; Collection set = makeConfirmedCollection ( ) ; $F19402 ( iterator , collection ) while $F2921 ( iterator ) { assertTrue ( NUM00 , set . add ( iterator . next ( ) ) ) ; } }
public static CGPoint ccpRotateByAngle ( CGPoint v , CGPoint pivot , float angle ) { CGPoint r = ccpSub ( v , pivot ) ; float t = r . x ; float cosa = $F148722 ( Math , angle ) ; float sina = $F148723 ( Math , angle ) ; r . x = t * cosa - r . y * sina ; r . y = t * sina + r . y * cosa ; r = ccpAdd ( r , pivot ) ; return r ; }
private void openContextMenu ( MouseEvent e ) { if $F264788 ( e ) { $F6877 $F9626 ( streams ) ; $F2027 selectedRows = table . getSelectedRows ( ) ; for ( int selectedRow : selectedRows ) { Follower selected = followers . get ( selectedRow ) ; streams . add ( StringUtil . toLowerCase ( selected . name ) ) ; } if $F5973 ( streams ) { StreamsContextMenu m = new StreamsContextMenu ( streams , contextMenuListener ) ; $F255135 ( m , table , e ) } } }
public static $F28319 expandVolumesMethod ( URI storage , URI pool , URI volume , Long size ) { return new $F28319 ( NUM00 , storage , pool , volume , size ) ; }
void closeSilently ( Socket socket ) $F87767 ( socket )
public static boolean equals $F7233 ( array1 , array2 ) { if ( array1 == array2 ) return _BOOL ; if ( array1 == null || array2 == null || array1 . length != array2 . length ) return _BOOL ; for ( $F1139 ( i , array1 ) ) { $F35941 ( array1 , i , array2 , _BOOL ) } return _BOOL ; }
private static String createIdFromJndiLocationIfNotNull ( String jndiLocation ) { String id = null ; if ( jndiLocation != null ) { id = createIdFromJndiLocation ( jndiLocation ) ; } return id ; }
protected $F6870 closure ( DependencyKind ... depKinds ) { boolean progress = _BOOL ; $F6870 closure = new $F6871 $F72 ; closure . add ( this ) ; while ( progress ) { progress = _BOOL ; for ( Node n1 : new $F6871 ( closure ) ) { progress = closure . addAll ( n1 . getDependencies ( depKinds ) ) ; } } return closure ; }
public Vector ( Collection c ) { $F8935 ( elementCount , c ) elementData = new Object [ ( int ) Math . min ( ( elementCount * NUM00 ) / NUM00 , Integer . MAX_VALUE ) ] ; c . toArray ( elementData ) ; }
$F25545 ( i , count , buf , newbuf , mPool , System )
public static $F67888 A createAnnotation ( $F26426 ( annotationType ) , AnnotationMember [ ] elements ) { AnnotationFactory factory = new AnnotationFactory ( annotationType , elements ) ; return ( A ) Proxy . newProxyInstance ( annotationType . getClassLoader ( ) , $F139647 ( annotationType ) , factory ) ; }
public LinkingMorphemes ( String ... aMorphemes ) { $F30598 ( morphemes ) $F42002 ( string , aMorphemes , morphemes ) }
$F1 public void execute ( MetricTimeSeries timeSeries , FunctionValueMap functionValueMap ) { if $F119130 ( timeSeries ) { functionValueMap . add ( this , Double . NaN ) ; $F665 } $F112999 ( timeSeries ) double firstValue = timeSeries . getValue ( NUM00 ) ; double lastValue = timeSeries . getValue ( $F2281 ( timeSeries ) ) ; functionValueMap . add ( this , Math . abs ( firstValue - lastValue ) ) ; }
public static $F52326 findResourceBases ( String baseResource , ClassLoader loader ) { $F188804 list = new $F188804 $F72 ; try { $F104855 urls = loader . getResources ( baseResource ) ; while $F1444 ( urls ) { URL url = urls . nextElement ( ) ; $F12366 ( list , findResourceBase , url , baseResource ) } } $F12153 ( e ) return list . toArray ( new URL $F2313 ( list ) ) ; }
public WritableRaster createWritableChild ( int x , int y , int width , int height , int x0 , int y0 , int bandList [ ] ) { $F238725 ( x , this ) $F238726 ( y , this ) if ( ( x + width < x ) || ( x + width > this . width + this . minX ) ) { throw new RasterFormatException $F580 ; } if ( ( y + height < y ) || ( y + height > this . height + this . minY ) ) { throw new RasterFormatException $F580 ; } SampleModel sm ; $F238739 ( bandList , sm , sampleModel ) int deltaX = x0 - x ; int deltaY = y0 - y ; return new ByteBandedRaster $F238741 ( sm , dataBuffer , x0 , y0 , width , height , sampleModelTranslateX , deltaX , sampleModelTranslateY , deltaY , this ) ; }
protected void moveUpItem $F72 { if ( selectionTable . getSelectionCount ( ) == NUM00 ) $F932 for ( final int index : selectionTable . getSelectionIndices ( ) ) { if ( index == NUM00 ) { selectionTable . forceFocus ( ) ; $F665 } } final $F2027 newSelection = new int [ selectionTable . getSelectionCount ( ) ] ; int newSelectionIndex = NUM00 ; for ( final TableItem tableItem : selectionTable . getSelection ( ) ) { final int position = selection . indexOf ( tableItem . getData ( ) ) ; swap ( position , position - NUM00 ) ; newSelection [ newSelectionIndex ++ ] = position - NUM00 ; } redrawTables ( ) ; selectionTable . select ( newSelection ) ; selectionTable . forceFocus ( ) ; }
protected void maybeFireBoundsInvalidated ( Rectangle invalidatedArea ) { Drawing d = getDrawing ( ) ; $F1634 canvasBounds = new $F1634 $F13777 ; if $F26935 ( d , CANVAS_WIDTH ) { canvasBounds . width += d . get ( CANVAS_WIDTH ) ; } if $F26935 ( d , CANVAS_HEIGHT ) { canvasBounds . height += d . get ( CANVAS_HEIGHT ) ; } if $F2200 ( canvasBounds , invalidatedArea ) { fireBoundsInvalidated ( invalidatedArea ) ; } }
public DatagramPacket responseReceive $F72 throws IOException { $F12496 ( buf ) $F135794 ( dp , buf ) datagramSocket . receive ( dp ) ; return dp ; }
public void suspend ( String id ) { TraceState ts = traceState . get ( ) ; if $F14148 ( log , Level ) $F224661 ( log , ts , id ) if ( ts != null ) { setExpire ( ts ) ; try { $F8934 ( suspendedStateLock ) if ( suspendedState . containsKey ( id ) && log . isLoggable ( Level . FINEST ) ) { log . finest ( $F3846 ( suspendedState , id ) + id ) ; } suspendedState . put ( id , ts ) ; $F7042 ( traceState ) } $F796 ( suspendedStateLock ) } }
public static int hashCode ( final Object obj ) { return $F50584 ( obj ) ; }
public static int maxLevel $F72 $F143681 ( LEVELS )
public void propertyChange ( PropertyChangeEvent evt ) $F5795 ( repaint )
public static boolean removeBeanOrFolder ( String path ) { return removePath ( path . split ( PATH_SEPARATOR ) , s_directory , NUM00 ) > NUM00 ; }
private void updateSelection ( Mode mode , Projection2D proj , SVGPoint p1 , SVGPoint p2 ) { DBIDSelection selContext = context . getSelection ( ) ; HashSetModifiableDBIDs selection ; if ( selContext == null || mode == Mode . REPLACE ) { selection = DBIDUtil . newHashSet ( ) ; } else { selection = DBIDUtil . newHashSet ( selContext . getSelectedIds ( ) ) ; } for ( $F42632 ( iditer , rel ) ) { $F1986 vec = proj . fastProjectDataToRenderSpace ( rel . get ( iditer ) ) ; if ( vec [ NUM00 ] >= Math . min ( p1 . getX ( ) , p2 . getX ( ) ) && vec [ NUM00 ] <= Math . max ( p1 . getX ( ) , p2 . getX ( ) ) && vec [ NUM00 ] >= Math . min ( p1 . getY ( ) , p2 . getY ( ) ) && vec [ NUM00 ] <= Math . max ( p1 . getY ( ) , p2 . getY ( ) ) ) { if ( mode == Mode . INVERT ) { if $F2200 ( selection , iditer ) $F207 ( selection , iditer ) else $F106 ( selection , iditer ) } else $F207 ( selection , iditer ) } } context . setSelection ( new DBIDSelection ( selection ) ) ; }
public EclipseIniLauncher ( File installationRoot ) throws $F27136 { FileMisc . assertMacApp ( installationRoot ) ; Objects . requireNonNull ( installationRoot ) ; eclipseIni = EclipseIni . parseFrom ( new File ( installationRoot , FileMisc . macContentsEclipse ( ) + NUM00 ) ) ; }
public boolean canAddMember $F1947 ( realmName , idType , containerIDType ) throws AMConsoleException { boolean can = _BOOL ; try { IdType type = IdUtils . getType ( idType ) ; Set canAdd = type . canAddMembers ( ) ; IdType ctype = IdUtils . getType ( containerIDType ) ; can = canAdd . contains ( ctype ) ; } catch ( IdRepoException e ) { $F21557 ( debug , e ) $F21559 ( getErrorString , e ) } return can ; }
private static Node locateAttrParent ( Element elem , Node attr ) { Node parent = null ; Attr check = elem . getAttributeNode ( attr . getNodeName ( ) ) ; if ( check == attr ) parent = elem ; if ( null == parent ) { for ( Node node = elem . getFirstChild ( ) ; null != node ; node = node . getNextSibling ( ) ) { if ( Node . ELEMENT_NODE == node . getNodeType ( ) ) { parent = locateAttrParent ( ( Element ) node , attr ) ; if ( null != parent ) $F597 } } } return parent ; }
private void defineInternalFrames ( UIDefaults d ) { $F91114 ( d ) d . put ( NUM00 , new DimensionUIResource $F32532 ) ; $F91114 ( d ) $F91114 ( d ) $F16824 ( d ) $F91114 ( d ) $F91114 ( d ) $F91114 ( d ) $F91114 ( d ) if ( PlatformUtils . isMac ( ) ) { $F82500 ( d ) } else { $F82500 ( d ) } $F82500 ( d ) $F82500 ( d ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F82500 ( d ) $F91121 ( d , _BOOL ) $F91121 ( d , _BOOL ) $F82500 ( d ) String p = NUM00 ; String c = PAINTER_PREFIX + NUM00 ; d . put ( p + NUM00 , new DerivedFont ( NUM00 , NUM00 , _BOOL , null ) ) ; $F70531 ( d , p ) d . put ( p + NUM00 , new TitlePaneWindowFocusedState $F72 ) ; d . put ( p + NUM00 , new InternalFrameWindowFocusedState $F72 ) ; $F13870 ( d , p , c , FrameAndRootPainter ) d . put ( p + NUM00 , new LazyPainter ( c , FrameAndRootPainter . Which . BACKGROUND_ENABLED_WINDOWFOCUSED ) ) ; p = NUM00 ; d . put ( p + NUM00 , NUM00 ) ; p = NUM00 ; $F13787 ( d , p ) d . put ( p + NUM00 , Color . BLACK ) ; }
public static double cosQuick ( double angle ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . cos ( angle ) : Math . cos ( angle ) ; } return cosTab [ ( ( int ) ( Math . abs ( angle ) * SIN_COS_INDEXER + NUM00 ) ) & ( SIN_COS_TABS_SIZE - NUM00 ) ] ; }
$F52428 ( tag , msg , args , sLevel , LEVEL_WARNING , String , Log )
public void readSecurityHeader ( SipResponse response ) throws PayloadException { $F38126 ( wwwHeader , response , WWWAuthenticateHeader ) $F38126 ( infoHeader , response , AuthenticationInfoHeader ) if ( wwwHeader != null ) { mDigest . setRealm ( wwwHeader . getRealm ( ) ) ; mDigest . setOpaque ( wwwHeader . getOpaque ( ) ) ; mDigest . setQop ( wwwHeader . getQop ( ) ) ; mDigest . setNextnonce ( wwwHeader . getNonce ( ) ) ; } else if ( infoHeader != null ) { if ( infoHeader . getNextNonce ( ) != null ) { mDigest . setNextnonce ( infoHeader . getNextNonce ( ) ) ; } } }
private void layoutPanel $F72 { setBorder ( $F171654 ( BorderFactory ) ) ; $F9898 ( setLayout ) add ( new LabelledItem ( NUM00 , cbDistribution ) , BorderLayout . NORTH ) ; add ( cardPanel , BorderLayout . CENTER ) ; cbItemListener . itemStateChanged ( new ItemEvent ( cbDistribution , ItemEvent . SELECTED , cardPanel , ItemEvent . ITEM_STATE_CHANGED ) ) ; repaint ( ) ; revalidate ( ) ; }
$F1 public int compareTo ( DoubleDoublePair other ) { int fdiff = Double . compare ( this . first , other . first ) ; $F73569 ( fdiff ) return Double . compare ( this . second , other . second ) ; }
private static boolean fileExists ( String filePath ) { $F1705 ( file , filePath ) $F2948 ( file ) }
public static String classVersionToJdk ( int version ) { return NUM00 + Integer . toString ( version - NUM00 ) ; }
private BitSet createBitSet ( final String binaryString ) { final BitSet bset = new BitSet $F45530 ( binaryString ) ; boolean bitTrue = _BOOL ; for ( $F1088 ( i , binaryString ) ) { if $F11983 ( binaryString , i ) { bitTrue = _BOOL ; } else { bitTrue = _BOOL ; } bset . set ( i , bitTrue ) ; } return bset ; }
public void flush $F72 { buffer . force ( ) ; }
public void remove ( Product product ) { try { $F10194 ( solrDao , product ) } catch ( IOException | SolrServerException ex ) { LOGGER . error ( NUM00 + product . getIdentifier ( ) + NUM00 , ex ) ; } }
public void startBackgroundFetchService $F72 { LocalNotification n = new LocalNotification $F72 ; n . setId ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; cancelLocalNotification ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; scheduleLocalNotification ( n , System . currentTimeMillis ( ) + getPreferredBackgroundFetchInterval ( ) * NUM00 , NUM00 ) ; }
protected void showModels ( boolean show , EpoxyModel $F1011 ... models ) { showModels ( Arrays . asList ( models ) , show ) ; }
static void check ( PublicKey key , X509CRL crl ) throws CertPathValidatorException { X509CRLImpl x509CRLImpl = null ; try { x509CRLImpl = X509CRLImpl . toImpl ( crl ) ; } catch ( CRLException ce ) { $F8021 ( ce ) } AlgorithmId algorithmId = x509CRLImpl . getSigAlgId ( ) ; check ( key , algorithmId ) ; }
public void testUserDataHandlerNotifiedOfOnlyShallowAdoptions $F72 throws Exception { domToString ( document ) ; RecordingHandler handler = new RecordingHandler $F72 ; $F104177 ( name , handler ) $F104177 ( name , handler ) $F104177 ( standard , handler ) $F104177 ( waffles , handler ) Document newDocument = builder . newDocument ( ) ; assertSame ( name , newDocument . adoptNode ( name ) ) ; assertSame ( newDocument , name . getOwnerDocument ( ) ) ; assertSame ( newDocument , standard . getOwnerDocument ( ) ) ; assertSame ( newDocument , waffles . getOwnerDocument ( ) ) ; $F2695 ( expected ) expected . add ( notification ( NODE_ADOPTED , NUM00 , NUM00 , name , null ) ) ; expected . add ( notification ( NODE_ADOPTED , NUM00 , NUM00 , name , null ) ) ; assertEquals ( expected , handler . calls ) ; }
public void reset $F72 $F9096 ( node_list )
public String nameList ( String dir ) throws IOException { passive ( ) ; send ( NUM00 + dir ) ; readCode ( NUM00 ) ; $F1538 ( out ) IOUtils . copyAndClose ( inData , out ) ; readCode ( NUM00 ) ; $F1208 ( data , out ) $F22269 ( data ) }
public VNXeCommandResult addLunsToLunGroup $F13322 ( lunGroupId , luns ) { LunGroupModifyParam param = new LunGroupModifyParam $F72 ; List $F42136 lunAdds = new ArrayList $F42136 $F72 ; for ( String lunId : luns ) { VNXeBase lun = new VNXeBase ( lunId ) ; LunAddParam lunAdd = new LunAddParam $F72 ; lunAdd . setLun ( lun ) ; lunAdds . add ( lunAdd ) ; } param . setLunAdd ( lunAdds ) ; LunGroupRequests req = new LunGroupRequests ( _khClient ) ; return req . modifyLunGroupSync ( lunGroupId , param ) ; }
$F38750 ( input , encoding , toInputStream )
public static ConstantExpression constant ( Object value , Class constantType ) { return new ConstantExpression ( value , constantType . getName ( ) ) ; }
public static final String toFEN ( Position pos ) { $F83 ( ret ) for ( $F183017 ( r ) ) { int numEmpty = NUM00 ; for ( $F6268 ( c ) ) { int p = pos . getPiece ( Position . getSquare ( c , r ) ) ; if ( p == Piece . EMPTY ) { numEmpty ++ ; } else { if ( numEmpty > NUM00 ) { ret . append ( numEmpty ) ; numEmpty = NUM00 ; } switch ( p ) { case Piece . WKING : $F84 ( ret ) $F597 case Piece . WQUEEN : $F84 ( ret ) $F597 case Piece . WROOK : $F84 ( ret ) $F597 case Piece . WBISHOP : $F84 ( ret ) $F597 case Piece . WKNIGHT : $F84 ( ret ) $F597 case Piece . WPAWN : $F84 ( ret ) $F597 case Piece . BKING : $F84 ( ret ) $F597 case Piece . BQUEEN : $F84 ( ret ) $F597 case Piece . BROOK : $F84 ( ret ) $F597 case Piece . BBISHOP : $F84 ( ret ) $F597 case Piece . BKNIGHT : $F84 ( ret ) $F597 case Piece . BPAWN : $F84 ( ret ) $F597 $F1267 $F62078 } } } if ( numEmpty > NUM00 ) $F288 ( ret , numEmpty ) $F34674 ( r , ret ) } ret . append ( pos . whiteMove ? NUM00 : NUM00 ) ; boolean anyCastle = _BOOL ; if ( pos . h1Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . a1Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . h8Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) if ( pos . a8Castle ( ) ) $F19003 ( ret , anyCastle , _BOOL ) $F48750 ( anyCastle , ret ) { $F84 ( ret ) if ( pos . getEpSquare ( ) >= NUM00 ) { int x = Position . getX ( pos . getEpSquare ( ) ) ; int y = Position . getY ( pos . getEpSquare ( ) ) ; $F159538 ( ret , x ) $F159538 ( ret , y ) } else $F86 ( ret ) } $F84 ( ret ) ret . append ( pos . halfMoveClock ) ; $F84 ( ret ) ret . append ( pos . fullMoveCounter ) ; $F92 ( ret ) }
public void endElement $F1947 ( uri , localName , qName ) throws SAXException { if ( ! ( htmlMode && $F40270 ( uri ) && ( $F154247 ( qName ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) || qName . equals ( NUM00 ) ) ) ) { write ( NUM00 ) ; writeName ( uri , localName , qName , _BOOL ) ; write ( NUM00 ) ; } if ( elementLevel == NUM00 ) $F1210 ( write ) cdataElement = _BOOL ; super . endElement ( uri , localName , qName ) ; nsSupport . popContext ( ) ; elementLevel -- ; }
static void findAllVisibleChilds ( final ViewGroup viewGroup , final $F183286 ordoredChilds ) { for ( $F140290 ( childViewIndex , viewGroup ) ) { final View childView = viewGroup . getChildAt ( childViewIndex ) ; if ( childView instanceof ViewGroup ) { findAllVisibleChilds ( ( ViewGroup ) childView , ordoredChilds ) ; $F598 } if ( childView . getVisibility ( ) == View . VISIBLE ) $F207 ( ordoredChilds , childView ) } }
public boolean logModified ( Logger log ) { if ( isModified ( ) ) { $F60651 ( log , _className ) return _BOOL ; } else return _BOOL ; }
public final void push ( Node value ) { int ff = m_firstFree ; if $F11078 ( ff , m_mapSize ) { if ( null == m_map ) $F132454 ( m_map , m_blocksize , m_mapSize ) else $F132458 ( m_mapSize , m_blocksize , System , m_map , newMap , ff ) } m_map [ ff ] = value ; ff ++ ; m_firstFree = ff ; }
public String serialize ( Object obj ) throws ApiException { try { if ( obj != null ) return mapper . writeValueAsString ( obj ) ; else $F1274 } catch ( Exception e ) { throw new ApiException ( NUM00 , e . getMessage ( ) ) ; } }
private void initializeSparseSlider $F72 { sparsitySlider . setMajorTickSpacing ( NUM00 ) ; sparsitySlider . setMinorTickSpacing ( NUM00 ) ; sparsitySlider . setPaintTicks ( _BOOL ) ; Hashtable < Integer , JLabel > labelTable2 = new Hashtable < Integer , JLabel > $F72 ; labelTable2 . put ( $F13791 , $F34046 ) ; labelTable2 . put ( $F13791 , $F34046 ) ; sparsitySlider . setLabelTable ( labelTable2 ) ; sparsitySlider . setPaintLabels ( _BOOL ) ; }
$F1 protected void autoAdjustRange $F72 { Plot plot = getPlot ( ) ; $F2329 ( plot ) if ( plot instanceof ValueAxisPlot ) { ValueAxisPlot vap = ( ValueAxisPlot ) plot ; Range r = vap . getDataRange ( this ) ; $F22771 ( r , getDefaultAutoRange ) $F35253 ( upper , r ) double lower = Math . max ( r . getLowerBound ( ) , this . smallestValue ) ; double range = upper - lower ; double fixedAutoRange = getFixedAutoRange ( ) ; if ( fixedAutoRange > NUM00 ) { lower = Math . max ( upper - fixedAutoRange , this . smallestValue ) ; } else { double minRange = getAutoRangeMinimumSize ( ) ; if ( range < minRange ) { $F67927 ( expand , minRange , range ) upper = upper + expand ; lower = lower - expand ; } double logUpper = calculateLog ( upper ) ; double logLower = calculateLog ( lower ) ; double logRange = logUpper - logLower ; logUpper = logUpper + getUpperMargin ( ) * logRange ; logLower = logLower - getLowerMargin ( ) * logRange ; upper = calculateValueNoINF ( logUpper ) ; lower = calculateValueNoINF ( logLower ) ; } setRange ( new Range ( lower , upper ) , _BOOL , _BOOL ) ; } }
public synchronized void add ( long value ) { long res = get ( ) + value ; $F130813 ( lb , res ) }
public void addIVCombination $F14337 ( attackIV , defenseIV , staminaIV ) { int sumIV = attackIV + defenseIV + staminaIV ; int percentPerfect = Math . round ( sumIV / NUM00 * NUM00 ) ; if ( ( percentPerfect < lowPercent ) || ( percentPerfect == lowPercent ) && ( attackIV < lowAttack ) ) { lowPercent = percentPerfect ; lowAttack = attackIV ; lowDefense = defenseIV ; lowStamina = staminaIV ; } if ( ( percentPerfect > highPercent ) || ( percentPerfect == highPercent ) && ( attackIV > highAttack ) ) { highPercent = percentPerfect ; highAttack = attackIV ; highDefense = defenseIV ; highStamina = staminaIV ; } iVCombinations . add ( new IVCombination ( attackIV , defenseIV , staminaIV ) ) ; }
$F806 qualify ( String cppName ) { if $F6036 ( cppName ) { return $F382 ; } $F8728 ( names ) $F299414 ( ns , namespace ) while ( ns != null ) { String name = $F20 ( ns ) ? ns + NUM00 + cppName : cppName ; TemplateMap map = templateMap ; while ( map != null ) { if $F3175 ( name , map ) { String args = NUM00 , separator = NUM00 ; for ( String s : map . values ( ) ) { args += separator + s ; separator = NUM00 ; } names . add ( name + args + ( args . endsWith ( NUM00 ) ? NUM00 : NUM00 ) ) ; $F597 } map = map . parent ; } names . add ( name ) ; ns = InfoMap . normalize ( ns , _BOOL , _BOOL ) ; $F24867 ( i , ns ) ns = i >= NUM00 ? ns . substring ( NUM00 , i ) : $F20 ( ns ) ? NUM00 : null ; } for ( String s : usingList ) { String prefix = InfoMap . normalize ( cppName , _BOOL , _BOOL ) ; int i = $F31603 ( s ) ; $F14493 ( ns , s , i ) $F12716 ( suffix , s , i ) if ( $F1276 ( suffix ) || prefix . equals ( suffix ) ) $F128607 ( names , ns , cppName ) } $F14862 ( names ) }
$F5466 public Bitmap generateIconForUrl ( String url , boolean includePrivateRegistries ) { $F190062 ( TextUtils , url ) String text = getIconTextForUrl ( url , includePrivateRegistries ) ; $F190062 ( TextUtils , text ) return generateIconForText ( text ) ; }
public boolean containsPrefix ( final CharSequence prefix ) $F127468 ( containsPrefix , prefix )
public int compareTo ( Object p_other ) { $F74334 ( p_other ) if ( p_other instanceof BrdComponent ) { return name . compareToIgnoreCase ( ( ( BrdComponent ) p_other ) . name ) ; } $F1082 }
public void fatal ( String message ) throws SAXException { SAXParseException spe = new SAXParseException ( message , this ) ; if ( errorHandler != null ) { errorHandler . fatalError ( spe ) ; } throw spe ; }
$F1 public void close $F72 throws IOException { closed = _BOOL ; $F87417 ( def ) $F59 ( in ) }
protected final void firePropertyChange $F71526 ( propertyName , oldValue , newValue ) { PropertyChangeSupport aChangeSupport = this . changeSupport ; $F2329 ( aChangeSupport ) aChangeSupport . firePropertyChange ( propertyName , oldValue , newValue ) ; }
$F115149 ( listener , scrollingListeners )
private Iterator $F143607 joinBindingSetEntry ( Map . Entry < String , BindingSet > entry ) { List < Collection $F143607 > $F204 ( matches ) ; if ( type == HashJoinType . CONSTANT_JOIN_VAR ) { if ( bindingJoinVarHash . containsKey ( entry . getKey ( ) ) ) { matches . add ( $F22339 ( bindingJoinVarHash , entry ) ) ; } } else { $F3803 valOrders = getValueOrders ( entry . getKey ( ) ) ; for ( String s : valOrders ) { if $F1710 ( bindingJoinVarHash , s ) $F62006 ( matches , bindingJoinVarHash , s ) } } if $F10471 ( matches ) { return Collections . emptyIterator ( ) ; } else { return new BindingSetCollectionsJoinIterator ( entry . getValue ( ) , matches ) ; } }
$F1 public void test ( Number t ) throws ParameterException { if ( t . doubleValue ( ) >= constraintValue . doubleValue ( ) ) { throw new WrongParameterValueException ( $F153865 ( constraintValue ) + t . doubleValue ( ) + NUM00 ) ; } }
public void testFindUsersActiveDirectory $F72 throws Exception { LdapManager mgr = getLdapAD ( ) ; List ret = null ; $F209855 ( filter ) filter . and ( new LikeFilter ( mgr . getUsersReturningAttribute ( LdapUserAttributeConstants . LDAP_USER_ATTRIBUTE_GIVEN_NAME ) , NUM00 ) ) ; try { $F209867 ( searchMgrVO ) searchMgrVO . setFilter ( filter ) ; searchMgrVO . setAddUserClasses ( _BOOL ) ; ret = mgr . findUsers ( searchMgrVO ) ; } $F3957 $F70108 ( assertEquals , ret ) }
public boolean reserve ( Object object ) { $F8934 ( reservedIdsLock ) if $F105 ( reservedObjects , object ) { $F704 ( reservedIdsLock ) return _BOOL ; } reservedObjects . add ( object ) ; $F704 ( reservedIdsLock ) return _BOOL ; }
private boolean saveStoredJPEGImage ( String file_name , final BufferedImage image , final boolean file_name_is_path ) { if ( ! file_name_is_path ) { file_name = temp_dir + key + file_name ; } final String s = file_name . toLowerCase ( ) ; if ( $F2363 ( s ) && $F2363 ( s ) ) { file_name += NUM00 ; } try { $F107416 ( DefaultImageHelper , image , file_name ) $F111652 ( tempFileNames , file_name ) } catch ( final Exception e ) { LogWriter . writeLog ( NUM00 + e + NUM00 + image + NUM00 + file_name ) ; } return _BOOL ; }
public static ScheduledExecutorService createScheduler $F72 { final ScheduledExecutorService scheduler = Executors . newScheduledThreadPool ( NUM00 , new DaemonThreadFactory ( DEFAULT_SCHEDULER_NAME ) ) ; SCHEDULERS . add ( scheduler ) ; return scheduler ; }
public LinkedList $F89473 patch_make ( String text1 , String text2 ) { $F3541 ( text1 , text2 ) $F16501 diffs = diff_main ( text1 , text2 , _BOOL ) ; if $F3817 ( diffs ) $F86383 ( diff_cleanupSemantic , diffs , diff_cleanupEfficiency ) return patch_make ( text1 , diffs ) ; }
protected static void fail $F72 $F63967 ( System )
$F28896 ( index , paint , bounds , title , getTitle )
private void printArguments ( $F240647 args , Object arg ) { $F21384 ( printer ) if ( args != null ) { for ( Iterator $F185096 i = args . iterator ( ) ; i . hasNext ( ) ; ) { Expression e = i . next ( ) ; e . accept ( this , arg ) ; if $F2921 ( i ) $F21410 ( printer ) } } $F21384 ( printer ) }
private void calculateDelta $F9830 ( b ) { double numerator = NUM00 ; double denominator = NUM00 ; double sign = NUM00 ; for ( $F1139 ( k , b ) ) { if $F1765 ( k , mExtremalIndices ) { $F85651 ( extremalIndex , mExtremalIndices , k ) numerator += ( b [ k ] * mGrid . getDesiredResponse ( ) [ extremalIndex ] ) ; denominator += b [ k ] * sign / mGrid . getWeight ( ) [ extremalIndex ] ; sign = - sign ; } else $F21338 ( mLog ) } mDelta = numerator / denominator ; }
public static float buildFloat ( int mant , int exp ) { if ( exp < - NUM00 || mant == NUM00 ) $F1083 if ( exp >= NUM00 ) { return ( mant > NUM00 ) ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ; } $F6482 ( exp , mant ) if ( mant >= $F152872 ) { mant ++ ; } return ( float ) ( ( exp > NUM00 ) ? mant * pow10 [ exp ] : mant / pow10 [ - exp ] ) ; }
private void addFallbackSelector ( Properties settings , ProtocolDispatchSelector ps ) { $F27462 ( proxy , settings ) if ( proxy != null ) { ps . setFallbackSelector ( ProxyUtil . parseProxySettings ( proxy ) ) ; } }
private void readData $F72 throws IOException { while ( ! isClosed ) { $F7468 ( code , is ) switch ( code ) { $F1262 $F1262 $F1262 $F1262 $F597 $F1262 { int channel = $F82091 ( is ) + is . read ( ) ; inputReady [ channel ] = _BOOL ; $F665 } $F1262 { int channel = $F82091 ( is ) + is . read ( ) ; int status = $F82091 ( is ) + is . read ( ) ; inputReady [ channel ] = _BOOL ; $F665 } $F52533 close ( ) ; $F665 $F1267 close ( ) ; $F665 } } $F665 }
$F1 protected boolean validateConnection ( Connection conn ) { try { return $F81110 ( conn ) ; } catch ( SQLException e ) { return _BOOL ; } }
public static $F96 decode ( String s ) $F36684 ( decode , s )
public PacProxySelector ( String pacUrl ) { $F18045 ( pacUrl ) this . pacUrl = pacUrl ; }
public void deleteAlertingDefinition ( AlertingDefinition alertingDefinition ) throws IOException { $F134526 ( id , alertingDefinition ) AlertingDefinition local = existingAlertingDefinitions . remove ( id ) ; if ( local != null ) { Files . deleteIfExists ( pathResolver . getAlertingDefinitionFilePath ( local ) ) ; eventPublisher . publishEvent ( new AbstractAlertingDefinitionEvent . AlertingDefinitionDeletedEvent ( this , local ) ) ; } }
public void addFile ( File file ) { fileList . addFirst ( file ) ; }
private void pullEvent $F72 { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; $F597 case VERTICAL : $F1267 initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; $F597 } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; $F597 case PULL_FROM_START : $F1267 newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , NUM00 ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; $F597 } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != NUM00 && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; $F597 case PULL_FROM_START : $F1267 mHeaderLayout . onPull ( scale ) ; $F597 } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState != State . RELEASE_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
public boolean requiresConnection $F72 { return _BOOL ; }
public static double tile2lat ( int y , int z ) { double n = Math . PI - ( NUM00 * Math . PI * y ) / Math . pow ( NUM00 , z ) ; return Math . toDegrees ( Math . atan ( Math . sinh ( n ) ) ) ; }
$F1 public synchronized TimeSeriesCollection updateCollection $F72 { return super . updateCollection ( ) ; }
public char skip ( int n ) { _pos += n ; if ( _length <= _pos ) { $F3935 ( _pos , _string ) return DONE ; } else return _string . charAt ( _pos ) ; }
public void writeToObject ( Object object ) { try { Method method = BeanUtils . getWriteMethod ( object . getClass ( ) , getName ( ) , getType ( ) ) ; if ( method != null ) { method . invoke ( object , new Object $F57620 ( getValue ) ) ; } } $F12237 ( e ) }
private boolean shouldInform ( LocalClientInfo info ) { $F657 ( now , System ) if ( now < _nextAllowedTime ) return _BOOL ; Long allowed = BUG_TIMES . get ( info . getParsedBug ( ) ) ; return allowed == null || now >= allowed . longValue ( ) ; }
public void post ( Runnable runnable ) { synchronized ( mQueue ) { mQueue . add ( runnable ) ; $F355523 ( mQueue , scheduleNextLocked ) } }
public static void clear $F72 { _clearCount ++ ; _stateCount = NUM00 ; _state = NUM00 ; $F725 ( _featureMap ) }
public static String toStringPretty ( JsonObject jsonObj , int level ) { $F280 ( buf ) $F84 ( buf ) buf . append ( fieldsToStringPretty ( jsonObj , level + NUM00 ) ) ; $F84 ( buf ) $F92 ( buf ) }
public boolean isLaunchedFromJar $F72 { $F46495 ( lstJarFile ) }
protected void savePassCodeAndExit $F72 { Intent $F192736 ( resultIntent ) ; resultIntent . putExtra ( KEY_PASSCODE , $F2065 ( mPassCodeDigits ) + mPassCodeDigits [ NUM00 ] + mPassCodeDigits [ NUM00 ] ) ; setResult ( RESULT_OK , resultIntent ) ; finish ( ) ; }
public LogStream print ( double d ) { if ( ps != null ) { indent ( ) ; lineBuffer . append ( d ) ; } return this ; }
public static void deleteDirectoryRecursively ( Context context , File f , Boolean onlyContent ) throws IOException { if $F3444 ( f ) { for ( $F3445 ( c , f ) ) { deleteDirectoryRecursively ( context , c , _BOOL ) ; } } if ( ! onlyContent ) { if $F7119 ( f ) $F3496 ( f ) context . sendBroadcast ( new Intent ( Intent . ACTION_MEDIA_SCANNER_SCAN_FILE , Uri . parse ( $F4929 ( f ) ) ) ) ; } }
public static String nodeSubTypeToString ( int subType ) { String val = NUM00 ; switch ( subType ) { case NodeRepresentation . AND_TYPE : val = NUM00 ; $F597 case NodeRepresentation . OR_TYPE : val = NUM00 ; $F597 case NodeRepresentation . IMPLIES_TYPE : val = NUM00 ; $F597 case NodeRepresentation . FORALL_TYPE : val = NUM00 ; $F597 case NodeRepresentation . EXISTS_TYPE : val = NUM00 ; $F597 case NodeRepresentation . SQSUB_TYPE : val = NUM00 ; $F597 case NodeRepresentation . OTHER_TYPE : val = NUM00 ; $F597 } return val ; }
public static void disposeGraphicsConfig ( long pConfigInfo ) { OGLRenderQueue rq = getInstance ( ) ; $F8934 ( rq ) try { OGLContext . setScratchSurface ( pConfigInfo ) ; RenderBuffer buf = rq . getBuffer ( ) ; rq . ensureCapacityAndAlignment ( NUM00 , NUM00 ) ; buf . putInt ( DISPOSE_CONFIG ) ; buf . putLong ( pConfigInfo ) ; rq . flushNow ( ) ; } $F796 ( rq ) }
private void addTerm ( String term ) { $F99426 ( index , termToIndex , term ) if ( index == null ) { synchronized ( this ) { index = termToIndex . get ( term ) ; if ( index == null ) { index = Integer . valueOf ( termIndexCounter . getAndIncrement ( ) ) ; termToIndex . put ( term , index ) ; } } } }
private void safeBottomView $F72 { Status status = getOpenStatus ( ) ; ViewGroup bottom = getBottomView ( ) ; if ( status == Status . Close ) $F141296 ( bottom , INVISIBLE ) else $F141296 ( bottom , VISIBLE ) }
public static String revertNewLines ( String string ) { int index ; $F280 ( newStringBuffer ) while $F48458 ( index , string ) { $F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } newStringBuffer . append ( string ) ; $F6947 ( string , newStringBuffer ) $F7398 ( newStringBuffer ) while $F48458 ( index , string ) { $F52803 ( index , newStringBuffer , string ) $F84 ( newStringBuffer ) $F52804 ( index , string ) } newStringBuffer . append ( string ) ; $F92 ( newStringBuffer ) }
$F1 public $F37278 generatePeriods ( DateTimeUnit dateTimeUnit ) { Calendar cal = getCalendar ( ) ; boolean past = dateTimeUnit . getMonth ( ) >= $F106703 ( getBaseMonth ) ; $F37282 ( periods , Lists ) dateTimeUnit = cal . minusYears ( dateTimeUnit , past ? NUM00 : NUM00 ) ; dateTimeUnit . setMonth ( getBaseMonth ( ) + NUM00 ) ; $F37280 ( dateTimeUnit ) Calendar calendar = getCalendar ( ) ; for ( $F6268 ( i ) ) { $F12366 ( periods , createPeriod , dateTimeUnit , cal ) dateTimeUnit = calendar . plusYears ( dateTimeUnit , NUM00 ) ; } return periods ; }
public final boolean isDragging $F72 { return dragging ; }
$F1 public void escape ( $F1469 buffer , int start , int length , boolean isAttributeValue , Writer outputWriter ) throws IOException { for ( $F5883 ( i , start , length ) ) { char ch = buffer [ i ] ; if ( ch == NUM00 ) { $F3410 ( outputWriter ) $F598 } if ( ch == NUM00 ) { $F3410 ( outputWriter ) $F598 } if ( ch == NUM00 ) { $F3410 ( outputWriter ) $F598 } if ( ch == NUM00 && isAttributeValue ) { $F3410 ( outputWriter ) $F598 } if ( ch == NUM00 && isAttributeValue ) { $F3410 ( outputWriter ) $F598 } if ( isXml11RestrictedCharacter ( ch ) ) { $F3410 ( outputWriter ) outputWriter . write ( Integer . toHexString ( ch ) ) ; $F3410 ( outputWriter ) $F598 } outputWriter . write ( ch ) ; } }
void encrypt ( ByteBuffer src ) throws SSLException { $F56572 ( handshakeComplete ) if $F116620 ( src ) { $F13265 ( outNetBuffer , emptyBuffer ) $F665 } createOutNetBuffer ( src . remaining ( ) ) ; while $F5720 ( src ) { SSLEngineResult result = sslEngine . wrap ( src , outNetBuffer . buf ( ) ) ; if ( result . getStatus ( ) == SSLEngineResult . Status . OK ) { if ( result . getHandshakeStatus ( ) == SSLEngineResult . HandshakeStatus . NEED_TASK ) $F5795 ( doTasks ) } else if ( result . getStatus ( ) == SSLEngineResult . Status . BUFFER_OVERFLOW ) { outNetBuffer . capacity ( $F238996 ( outNetBuffer ) ) ; $F239000 ( outNetBuffer ) } else { throw new SSLException ( $F203080 ( result ) + src + NUM00 + outNetBuffer ) ; } } $F14257 ( outNetBuffer ) }
public boolean codeMatches ( String queryCode ) { $F115 ( length , id ) if $F22503 ( Debug ) { Debug . output ( NUM00 + queryCode + NUM00 + id + NUM00 + startIndex + NUM00 + length ) ; } return queryCode . regionMatches ( _BOOL , startIndex , id , NUM00 , length ) ; }
private static int parseNotificationId ( String id ) { try $F75349 ( Integer , id ) catch ( NumberFormatException nfe ) { $F248237 ( Log , TAG , id ) $F150 } }
private $F4203 Property $F4203 prepare ( String key , Property $F4203 property , T initialValue ) { final ChangeListener $F4203 change = null ; property . setValue ( initialValue ) ; property . addListener ( change ) ; change . changed ( property , null , initialValue ) ; return property ; }
protected void readTillEOL $F72 throws IOException { while ( m_Tokenizer . nextToken ( ) != StreamTokenizer . TT_EOL ) $F845 m_Tokenizer . pushBack ( ) ; }
$F1 public void clearAnswer $F72 { DateTime ldt = new DateTime $F72 ; mTimePicker . setCurrentHour ( ldt . getHourOfDay ( ) ) ; mTimePicker . setCurrentMinute ( ldt . getMinuteOfHour ( ) ) ; }
public String readLine $F72 throws IOException { return keepCarriageReturns ? readUntilNewline ( ) : reader . readLine ( ) ; }
$F1 public void doWork $F72 throws OperatorException { super . doWork ( ) ; runVectorOutput . deliver ( runVector ) ; }
public Shape createArrowUp $F22855 ( x , y , w , h ) { $F2268 ( path ) path . moveTo ( x , y + h ) ; path . lineTo ( x + w / NUM00 , y ) ; path . lineTo ( x + w , y + h ) ; $F2272 ( path ) return path ; }
protected int generateBinomial ( int n , double p ) { final double C1_3 = NUM00 ; final double C5_8 = NUM00 ; final double C1_6 = NUM00 ; final int DMAX_KM = NUM00 ; int bh , i , K , Km , nK ; double f , rm , U , V , X , T , E ; if ( n != n_last || p != p_last ) { n_last = n ; p_last = p ; par = Math . min ( p , NUM00 - p ) ; q = NUM00 - par ; np = n * par ; if ( np <= NUM00 ) $F150 rm = np + par ; m = ( int ) rm ; if ( np < NUM00 ) { p0 = Math . exp ( n * Math . log ( q ) ) ; bh = ( int ) ( np + NUM00 * Math . sqrt ( np * q ) ) ; b = Math . min ( n , bh ) ; } else { rc = ( n + NUM00 ) * ( pq = par / q ) ; ss = np * q ; i = ( int ) ( NUM00 * Math . sqrt ( ss ) - NUM00 * q ) ; xm = m + NUM00 ; xl = $F250385 ( m , i ) ; xr = ( double ) ( m + i + NUM00 ) ; f = ( rm - xl ) / ( rm - xl * par ) ; ll = f * ( NUM00 + NUM00 * f ) ; f = ( xr - rm ) / ( xr * q ) ; lr = f * ( NUM00 + NUM00 * f ) ; c = NUM00 + NUM00 / ( NUM00 + ( double ) m ) ; p1 = i + NUM00 ; p2 = p1 * ( NUM00 + c + c ) ; p3 = p2 + c / ll ; p4 = p3 + c / lr ; } } if ( np < NUM00 ) { double pk ; K = NUM00 ; pk = p0 ; $F76340 ( U , randomGenerator ) while ( U > pk ) { ++ K ; if ( K > b ) { $F76340 ( U , randomGenerator ) K = NUM00 ; pk = p0 ; } else { U -= pk ; pk = ( double ) ( ( ( n - K + NUM00 ) * par * pk ) / ( K * q ) ) ; } } return ( ( p > NUM00 ) ? ( n - K ) : K ) ; } for ( $F589 ) { $F76340 ( V , randomGenerator ) if ( ( U = randomGenerator . raw ( ) * p4 ) <= p1 ) { K = ( int ) ( xm - U + p1 * V ) ; return ( p > NUM00 ) ? ( n - K ) : K ; } if ( U <= p2 ) { X = xl + ( U - p1 ) / c ; if ( ( V = V * c + NUM00 - Math . abs ( xm - X ) / p1 ) >= NUM00 ) $F598 K = ( int ) X ; } else if ( U <= p3 ) { if ( ( X = xl + Math . log ( V ) / ll ) < NUM00 ) $F598 K = ( int ) X ; V *= ( U - p2 ) * ll ; } else { if ( ( K = ( int ) ( xr - Math . log ( V ) / lr ) ) > n ) $F598 V *= ( U - p3 ) * lr ; } if ( ( Km = Math . abs ( K - m ) ) <= DMAX_KM || Km + Km + NUM00 >= ss ) { f = NUM00 ; if ( m < K ) { for ( i = m ; i < K ; ) { if ( ( f *= ( rc / ++ i - pq ) ) < V ) $F597 } } else { for ( i = K ; i < m ; ) { if ( ( V *= ( rc / ++ i - pq ) ) > f ) $F597 } } if ( V <= f ) $F597 } else { V = Math . log ( V ) ; T = - Km * Km / ( ss + ss ) ; E = ( Km / ss ) * ( ( Km * ( Km * C1_3 + C5_8 ) + C1_6 ) / ss + NUM00 ) ; if ( V <= T - E ) $F597 if ( V <= T + E ) { if ( n != n_prev || par != p_prev ) { n_prev = n ; p_prev = par ; nm = n - m + NUM00 ; ch = xm * Math . log ( ( m + NUM00 ) / ( pq * nm ) ) + Arithmetic . stirlingCorrection ( m + NUM00 ) + Arithmetic . stirlingCorrection ( nm ) ; } nK = n - K + NUM00 ; if ( V <= ch + ( n + NUM00 ) * Math . log ( $F10425 ( nm , nK ) ) + ( K + NUM00 ) * Math . log ( nK * pq / ( K + NUM00 ) ) - Arithmetic . stirlingCorrection ( K + NUM00 ) - Arithmetic . stirlingCorrection ( nK ) ) $F597 } } } return ( p > NUM00 ) ? ( n - K ) : K ; }
public SimpleUserContext ( AuthenticationProvider authProvider , String username , Map < String , GuacamoleConfiguration > configs ) { $F6877 $F37973 ( connectionIdentifiers , configs ) ; $F6877 connectionGroupIdentifiers = Collections . singleton ( ROOT_IDENTIFIER ) ; Collection $F238202 connections = new $F279444 $F716 ( configs ) ; for ( Map . Entry < String , GuacamoleConfiguration > configEntry : configs . entrySet ( ) ) { $F3477 ( identifier , configEntry ) GuacamoleConfiguration config = configEntry . getValue ( ) ; Connection connection = new SimpleConnection ( identifier , identifier , config ) ; connection . setParentIdentifier ( ROOT_IDENTIFIER ) ; connections . add ( connection ) ; connectionIdentifiers . add ( identifier ) ; } this . rootGroup = new SimpleConnectionGroup ( ROOT_IDENTIFIER , ROOT_IDENTIFIER , connectionIdentifiers , $F70465 ( Collections ) ) ; this . self = new SimpleUser ( username , connectionIdentifiers , connectionGroupIdentifiers ) ; this . userDirectory = new SimpleUserDirectory ( self ) ; this . connectionDirectory = new SimpleConnectionDirectory ( connections ) ; this . connectionGroupDirectory = new SimpleConnectionGroupDirectory ( Collections . singleton ( this . rootGroup ) ) ; this . authProvider = authProvider ; }
public void reset $F72 { $F725 ( visitedGet ) $F725 ( visitedPost ) for ( SpiderParser parser : parsers ) { parser . removeSpiderParserListener ( this ) ; } }
private static float CallStaticFloatMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { Object returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Float ) ; return Reflection . unwrapFloat ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
public $F40262 toNamedList $F72 { final SimpleOrderedMap $F1432 result = new SimpleOrderedMap $F200 $F72 ; for ( $F13710 it = getParameterNamesIterator ( ) ; it . hasNext ( ) ; ) { $F206353 ( name , it ) final $F806 values = getParams ( name ) ; if $F9634 ( values ) { result . add ( name , values [ NUM00 ] ) ; } else $F42308 ( result , name , values ) } return result ; }
private boolean isRepresentingTab ( String text ) { $F397 ( text , _BOOL ) if ( isInsertingSpacesForTab ( ) ) { if ( $F1276 ( text ) || text . length ( ) > getVisualTabLengthPreference ( ) ) return _BOOL ; for ( $F1088 ( i , text ) ) { if $F20317 ( text , i ) return _BOOL ; } return _BOOL ; } else return $F1276 ( text ) && $F4431 ( text ) ; }
public MonitorThread ( String name ) { super ( name ) ; }
public void removeDragListener ( DragListener l ) $F106 ( mListeners , l )
$F1 public UnitsRelations init ( ProcessingEnvironment env ) { elements = env . getElementUtils ( ) ; m = UnitsRelationsTools . buildAnnoMirrorWithDefaultPrefix ( env , m . class ) ; km = UnitsRelationsTools . buildAnnoMirrorWithSpecificPrefix ( env , m . class , Prefix . kilo ) ; mm = UnitsRelationsTools . buildAnnoMirrorWithSpecificPrefix ( env , m . class , Prefix . milli ) ; m2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , m2 . class ) ; km2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , km2 . class ) ; mm2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mm2 . class ) ; s = UnitsRelationsTools . buildAnnoMirrorWithDefaultPrefix ( env , s . class ) ; h = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , h . class ) ; mPERs = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mPERs . class ) ; kmPERh = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , kmPERh . class ) ; mPERs2 = UnitsRelationsTools . buildAnnoMirrorWithNoPrefix ( env , mPERs2 . class ) ; return this ; }
public static $F806 toStringArray $F34102 ( collection ) { $F1338 ( collection ) $F14862 ( collection ) }
public void persist ( RepositoryProxyCache proxyCache ) { persist ( proxyCache , proxyCache . getFileName ( ) ) ; }
public $F130209 prepareAnimation ( ChartView chartView , $F243564 start , $F243564 end ) { $F10162 ( nSets , start ) final int nEntries = start . get ( NUM00 ) . length ; mChartView = chartView ; $F11125 ( mCurrentDuration , nEntries ) if ( mOrder == null ) { $F3936 ( mOrder , nEntries ) for ( $F1139 ( i , mOrder ) ) mOrder [ i ] = i ; } float noOverlapDuration = mGlobalDuration / nEntries ; mDuration = ( int ) ( noOverlapDuration + ( mGlobalDuration - noOverlapDuration ) * mOverlapingFactor ) ; Path path ; mPathMeasures = new PathMeasure [ nSets ] [ nEntries ] ; for ( $F119 ( i , nSets ) ) { for ( $F119 ( j , nEntries ) ) { path = new Path $F72 ; path . moveTo ( start . get ( i ) [ j ] [ NUM00 ] , start . get ( i ) [ j ] [ NUM00 ] ) ; path . lineTo ( end . get ( i ) [ j ] [ NUM00 ] , end . get ( i ) [ j ] [ NUM00 ] ) ; mPathMeasures [ i ] [ j ] = new PathMeasure ( path , _BOOL ) ; } } $F11125 ( mInitTime , nEntries ) $F3224 ( mGlobalInitTime , System ) long noOverlapInitTime ; for ( $F119 ( i , nEntries ) ) { noOverlapInitTime = mGlobalInitTime + ( i * ( mGlobalDuration / nEntries ) ) ; mInitTime [ mOrder [ i ] ] = ( noOverlapInitTime - ( ( long ) ( mOverlapingFactor * ( noOverlapInitTime - mGlobalInitTime ) ) ) ) ; } mPlaying = _BOOL ; return $F119303 ( getUpdate , mChartView ) ; }
public IOUtils $F72 $F5795 ( super )
public String formatDeleteNfsExportCmd ( String dataMover , String path ) { $F83 ( cmd ) $F84 ( cmd ) cmd . append ( dataMover ) ; $F84 ( cmd ) $F84 ( cmd ) cmd . append ( path ) ; $F92 ( cmd ) }
public final String matchCategories $F32029 ( categories ) { $F1338 ( categories ) $F13712 ( it , categories ) if ( mCategories == null ) { return $F81711 ( it ) ; } while $F2921 ( it ) { $F206353 ( category , it ) if $F2200 ( mCategories , category ) { return category ; } } $F1274 }
$F1 public void run $F72 { try { ClassReader reader = new ClassReader ( new FileInputStream ( this . classFile ) ) ; AsmClassVisitor visitor = new AsmClassVisitor ( this . dataProvider , this . config ) ; reader . accept ( visitor , ClassReader . SKIP_DEBUG ) ; } catch ( Exception e ) { LOGGER . log ( Level . SEVERE , e . getMessage ( ) , e ) ; } }
private void addLocationAndTrackPropertyChange $F72 { for ( Location loc : locationManager . getList ( ) ) { loc . addPropertyChangeListener ( this ) ; for ( Track track : loc . getTrackList ( ) ) { track . addPropertyChangeListener ( this ) ; Schedule schedule = track . getSchedule ( ) ; if ( schedule != null ) { schedule . addPropertyChangeListener ( this ) ; } } } }
private void handleJsonSignIn ( RequestAndResponse requestAndResponse ) throws $F47978 { requestAndResponse . setResponseContentTypeJson ( ) ; String userName ; String password ; String csrft ; try { final JsonNodeHelper json = getJsonNode ( requestAndResponse ) ; $F35515 ( userName , json ) $F35515 ( password , json ) $F35515 ( csrft , json ) } catch ( final IOException e ) { returnJson400 ( requestAndResponse , servletText . errorJson ( ) ) ; $F665 } if ( userName != null ) { $F37156 ( userName ) } if ( isTheCsrftWrong ( requestAndResponse , csrft ) ) { returnJson400 ( requestAndResponse , servletText . errorWrongCsrft ( ) ) ; $F665 } if $F4251 ( userName ) { returnJson400 ( requestAndResponse , servletText . errorUsernameMustNotBeBlank ( ) ) ; $F665 } if $F4251 ( password ) { returnJson400 ( requestAndResponse , servletText . errorPasswordMustNotBeBlank ( ) ) ; $F665 } if ( ! AccountAttributeValidator . isUserNameValid ( userName ) ) { returnJson400 ( requestAndResponse , servletText . errorUserNameIsNotValid ( ) ) ; $F665 } if ( ! AccountAttributeValidator . isPasswordValid ( password ) ) { returnJson400 ( requestAndResponse , servletText . errorPasswordIsNotValid ( ) ) ; $F665 } try { final User user = dbLogic . getUserByUserName ( userName ) ; if ( user == null ) { returnJson400 ( requestAndResponse , servletText . errorNoAccountFound ( ) ) ; $F665 } if ( user . getIsAccountClosed ( ) ) { returnJson400 ( requestAndResponse , servletText . errorAccountIsClosed ( ) ) ; $F665 } final String realPassword = user . getPassword ( ) ; if ( realPassword == null || ! realPassword . equals ( DigestUtils . sha1Hex ( password ) ) ) { returnJson400 ( requestAndResponse , servletText . errorPasswordIsIncorrect ( ) ) ; $F665 } mapSessionToUser ( requestAndResponse , user . getId ( ) ) ; $F17621 ( dbLogic ) returnJson200 ( requestAndResponse ) ; } catch ( final PersistenceException e ) { logger . log ( Level . INFO , NUM00 , e ) ; returnJson500 ( requestAndResponse , servletText . errorInternalDatabase ( ) ) ; } }
private void _schedule ( Activity a , long startTime ) { if ( a . isScheduled ( ) ) { try $F5795 ( notifyAll ) $F3957 $F665 } a . setStartTime ( startTime ) ; synchronized ( this ) { m_activities . add ( a ) ; a . setScheduled ( _BOOL ) ; if ( startTime < m_nextTime ) $F21847 ( m_nextTime , startTime , notify ) } }
void unregisterCallback ( BluetoothCallback callback ) $F23075 ( mCallbacks , callback )
public void testHashCodeUnequal $F72 { String a = NUM00 ; int aScale = NUM00 ; String b = NUM00 ; int bScale = - NUM00 ; $F1918 ( aNumber , a , aScale ) $F1918 ( bNumber , b , bScale ) assertTrue ( NUM00 , aNumber . hashCode ( ) != bNumber . hashCode ( ) ) ; }
$F120210 ( maximumPullScroll , getMaximumPullScroll , pLeft , getPaddingLeft , pTop , getPaddingTop , pRight , getPaddingRight , pBottom , getPaddingBottom , getPullToRefreshScrollDirection , HORIZONTAL , mMode , mHeaderLayout , mFooterLayout , VERTICAL , DEBUG , Log , LOG_TAG , String , setPadding )
$F1219 static String escapeSqlString ( String string ) $F8480 ( string )
public static $F806 toArray ( String arg ) { if ( arg == null ) { return $F382 ; } $F17727 ( tok , arg ) $F806 array = new String $F49889 ( tok ) ; int i = NUM00 ; while $F14498 ( tok ) { array [ i ] = tok . nextToken ( ) ; i ++ ; } return ( array ) ; }
private void appendUploadedEntryToLog ( String id ) throws IOException { FileWriter writer = new FileWriter ( mLogfile , _BOOL ) ; $F83 ( sb ) sb . append ( $F165576 ( System ) ) ; $F84 ( sb ) sb . append ( id ) ; $F84 ( sb ) try { $F9826 ( writer , sb ) } $F3229 ( writer ) }
private void renderLeafNode ( final CNodeNode treeNode ) { final NaviNode graphNode = treeNode . getNode ( ) ; if ( graphNode . isSelected ( ) && graphNode . isVisible ( ) ) { setForeground ( SELECTED_FONT_COLOR ) ; } else if ( $F181253 ( graphNode ) ) { setForeground ( INVISIBLE_FONT_COLOR ) ; } setToolTipText ( buildToolTip ( graphNode ) ) ; }
public static final void writeValueXml ( Object v , String name , XmlSerializer out ) throws $F18821 { String typeStr ; if ( v == null ) { $F18823 ( out ) $F18831 ( name , out ) $F18825 ( out ) $F665 } else if ( v instanceof String ) $F154622 ( out , name , v ) else if ( v instanceof Integer ) { typeStr = NUM00 ; } else if ( v instanceof Long ) { typeStr = NUM00 ; } else if ( v instanceof Float ) { typeStr = NUM00 ; } else if ( v instanceof Double ) { typeStr = NUM00 ; } else if ( v instanceof Boolean ) { typeStr = NUM00 ; } else if $F2456 ( v ) { writeByteArrayXml ( $F2457 ( v ) , name , out ) ; $F665 } else if $F25705 ( v ) { writeIntArrayXml ( $F25706 ( v ) , name , out ) ; $F665 } else if ( v instanceof Map ) { writeMapXml ( ( Map ) v , name , out ) ; $F665 } else if ( v instanceof List ) { writeListXml ( ( List ) v , name , out ) ; $F665 } else if ( v instanceof Set ) { writeSetXml ( ( Set ) v , name , out ) ; $F665 } else if ( v instanceof CharSequence ) $F154622 ( out , name , v ) else $F1666 ( v ) out . startTag ( null , typeStr ) ; $F18831 ( name , out ) out . attribute ( null , NUM00 , v . toString ( ) ) ; out . endTag ( null , typeStr ) ; }
public Sector union ( double latitude , double longitude ) { if ( this . minLatitude < this . maxLatitude && this . minLongitude < this . maxLongitude ) { this . maxLatitude = Math . max ( this . maxLatitude , latitude ) ; this . minLatitude = Math . min ( this . minLatitude , latitude ) ; this . maxLongitude = Math . max ( this . maxLongitude , longitude ) ; this . minLongitude = Math . min ( this . minLongitude , longitude ) ; } else if ( ! Double . isNaN ( this . minLatitude ) && ! Double . isNaN ( this . minLongitude ) ) { this . maxLatitude = Math . max ( this . minLatitude , latitude ) ; this . maxLongitude = Math . max ( this . minLongitude , longitude ) ; this . minLatitude = Math . min ( this . minLatitude , latitude ) ; this . minLongitude = Math . min ( this . minLongitude , longitude ) ; } else { this . minLatitude = latitude ; this . minLongitude = longitude ; this . maxLatitude = Double . NaN ; this . maxLongitude = Double . NaN ; } return this ; }
public DAuthorityKeyIdentifier ( JDialog parent , PublicKey authorityPublicKey , X500Name authorityCertName , BigInteger authorityCertSerialNumber ) { super ( parent ) ; $F15426 ( setTitle , res ) this . authorityPublicKey = authorityPublicKey ; initComponents ( ) ; prepopulateWithAuthorityCertDetails ( authorityCertName , authorityCertSerialNumber ) ; }
static void writeUTF ( OutputStream out , String str ) throws IOException { for ( $F51284 ( i , len , str ) ) { $F8205 ( c , str , i ) if ( ( c >= NUM00 ) && ( c <= NUM00 ) ) $F4050 ( out , c ) else { if ( c > NUM00 ) { out . write ( NUM00 | $F11787 ( c ) ) ; out . write ( NUM00 | $F11787 ( c ) ) ; out . write ( NUM00 | $F11787 ( c ) ) ; } else { out . write ( NUM00 | $F11787 ( c ) ) ; out . write ( NUM00 | $F11787 ( c ) ) ; } } } }
public void test_getIterator $F72 { String test = NUM00 ; try { AttributedString attrString = new AttributedString ( test ) ; AttributedCharacterIterator it = attrString . getIterator ( ) ; assertEquals ( NUM00 , it . first ( ) , test . charAt ( NUM00 ) ) ; } $F53525 ( fail , e ) }
private void handleNormalUnassociated $F72 { int szSsaRegs = ssaMeth . getRegCount ( ) ; for ( $F119 ( ssaReg , szSsaRegs ) ) { if $F73204 ( ssaRegsMapped , ssaReg ) $F1448 RegisterSpec ssaSpec = getDefinitionSpecForSsaReg ( ssaReg ) ; $F45557 ( ssaSpec ) int category = ssaSpec . getCategory ( ) ; int ropReg = findNextUnreservedRopReg ( paramRangeEnd , category ) ; while ( ! canMapReg ( ssaSpec , ropReg ) ) { ropReg = findNextUnreservedRopReg ( ropReg + NUM00 , category ) ; } addMapping ( ssaSpec , ropReg ) ; } }
public void addSeriesRenderer ( int index , SimpleSeriesRenderer renderer ) $F42308 ( mRenderers , index , renderer )
$F108235 ( f , first , n , item , last , count , notFull )
public void createUnderlying $F72 { if ( Platform . isFxApplicationThread ( ) ) { options . createUnderlying ( ) ; this . marker = new com . lynden . gmapsfx . javascript . object . Marker ( options . convert ( ) ) ; } }
private void onActionUp ( MotionEvent event ) { if ( isDown ) { this . startX = NUM00 ; this . startY = NUM00 ; this . isDown = _BOOL ; } }
private Rectangle2D createAlignedRectangle2D ( Size2D dimensions , Rectangle2D frame , HorizontalAlignment hAlign , VerticalAlignment vAlign ) { double x = Double . NaN ; double y = Double . NaN ; if ( hAlign == HorizontalAlignment . LEFT ) { $F25145 ( x , frame ) } else if ( hAlign == HorizontalAlignment . CENTER ) { x = frame . getCenterX ( ) - $F511692 ( dimensions ) ; } else if ( hAlign == HorizontalAlignment . RIGHT ) { x = frame . getMaxX ( ) - dimensions . width ; } if ( vAlign == VerticalAlignment . TOP ) { $F130222 ( y , frame ) } else if ( vAlign == VerticalAlignment . CENTER ) { y = frame . getCenterY ( ) - $F130196 ( dimensions ) ; } else if ( vAlign == VerticalAlignment . BOTTOM ) { y = frame . getMaxY ( ) - dimensions . height ; } return new $F1634 ( x , y , dimensions . width , dimensions . height ) ; }
public MailAddress ( InternetAddress address ) throws AddressException { this ( address . getAddress ( ) ) ; }
public $F3789 confusionMatrix $F72 { $F3789 newMatrix = new double [ m_ConfusionMatrix . length ] [ NUM00 ] ; for ( $F1139 ( i , m_ConfusionMatrix ) ) { newMatrix [ i ] = new double [ m_ConfusionMatrix [ i ] . length ] ; System . arraycopy ( m_ConfusionMatrix [ i ] , NUM00 , newMatrix [ i ] , NUM00 , m_ConfusionMatrix [ i ] . length ) ; } return newMatrix ; }
public void print ( int x ) $F7523 ( out , x )
public static void beginStartingService ( Context context , Intent intent ) { synchronized ( mStartingServiceSync ) { if ( mStartingService == null ) { PowerManager pm = ( PowerManager ) context . getSystemService ( Context . POWER_SERVICE ) ; mStartingService = pm . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , NUM00 ) ; mStartingService . setReferenceCounted ( _BOOL ) ; } $F90610 ( mStartingService ) context . startService ( intent ) ; } }
public ScannerException ( ErrorMessages message , int line ) { this ( null , ErrorMessages . get ( message ) , message , line , - NUM00 ) ; }
$F11730 ( logPrefix , request , exception , retryPolicy , oldTimeout , String , e )
private void informUponSimilarName ( final StringBuffer messageBuffer , final String name , final String candidate ) { $F7224 ( name , candidate ) if ( name . regionMatches ( _BOOL , NUM00 , candidate , NUM00 , PKG_LEN + NUM00 ) ) $F7227 ( messageBuffer , candidate ) }
public synchronized void co_exit ( int thisCoroutine ) { m_activeIDs . clear ( thisCoroutine ) ; m_nextCoroutine = NOBODY ; notify ( ) ; }
private int findSchemeSeparator $F72 { return cachedSsi == NOT_CALCULATED ? cachedSsi = uriString . indexOf ( NUM00 ) : cachedSsi ; }
$F1 public boolean test ( Object receiver , String property , $F131 args , Object expectedValue ) { if $F1238 ( IS_ANGULAR_CLI_PROJECT_PROPERTY , property ) $F4915 ( testIsAngularCLIProject , receiver ) return _BOOL ; }
public void refresh $F72 { label . setText ( String . valueOf ( MathHelper . round ( val , NUM00 ) ) ) ; if ( val == min ) minus . setEnabled ( _BOOL ) ; else minus . setEnabled ( _BOOL ) ; if ( val == max ) plus . setEnabled ( _BOOL ) ; else plus . setEnabled ( _BOOL ) ; if ( cb != null ) cb . callback ( val ) ; $F8798 ( plus ) $F8798 ( minus ) if ( progress != null ) { progress . setValue ( val / max ) ; } }
public $F806 readAllLines $F72 { $F8728 ( lines ) while ( hasNextLine ( ) ) $F33452 ( lines , readLine ) $F16105 ( lines ) }
public void removeCallback ( Callback callback ) $F106 ( mCallbacks , callback )
public void error ( SourceLocator srcLctr , String msg ) throws TransformerException { error ( srcLctr , null , null , msg , null ) ; }
private boolean expectVlvResponse $F72 { Boolean expected = Boolean . FALSE ; try { expected = ( Boolean ) get ( EXPECT_VLV_RESPONSE ) ; } $F3957 return expected == null ? _BOOL : expected . booleanValue ( ) ; }
public void layoutContainer ( final Container parent ) { checkLayout ( getModel ( ) ) ; final Insets insets = parent . getInsets ( ) ; final Dimension size = parent . getSize ( ) ; final int width = size . width - $F151527 ( insets ) ; final int height = size . height - $F151531 ( insets ) ; final Rectangle bounds = new Rectangle ( insets . left , insets . top , width , height ) ; layout1 ( getModel ( ) , bounds ) ; layout2 ( getModel ( ) , bounds ) ; }
private String readUntil ( $F1469 delimiter , boolean returnText ) throws $F139192 { int start = position ; StringBuilder result = null ; if ( returnText && text != null ) { $F6932 ( result ) result . append ( text ) ; } search : while ( _BOOL ) { if ( position + delimiter . length > limit ) { if ( start < position && returnText ) { $F39896 ( result ) $F14090 ( result , buffer , start , position ) } if ( ! fillBuffer ( delimiter . length ) ) { checkRelaxed ( UNEXPECTED_EOF ) ; type = COMMENT ; $F1274 } start = position ; } for ( $F1139 ( i , delimiter ) ) { if $F219258 ( buffer , position , i , delimiter ) { position ++ ; continue search ; } } $F597 } int end = position ; position += delimiter . length ; if ( ! returnText ) $F1337 else $F139251 ( result , stringPool , buffer , start , end ) }
$F1 public Invocation . Builder accept ( String ... mediaTypes ) { clientRequestContext . setAcceptResponseTypesStr ( Arrays . asList ( mediaTypes ) ) ; return this ; }
public StreamConsumer ( InputStream stream ) { $F189568 ( in , stream ) $F2346 ( thread ) }
public static String subString $F36827 ( string , beginIndex , length ) { $F1338 ( string ) final int endIndex = beginIndex + length ; if $F11984 ( beginIndex , string ) { return EMPTY ; } if $F9605 ( endIndex , string ) { return $F83851 ( string , beginIndex ) ; } $F6669 ( string , beginIndex , endIndex ) }
private static SocketImpl createSocketImpl $F72 { try $F171631 ( socketImplCtor ) catch ( InstantiationException x ) $F27253 ( x ) $F180169 ( x ) catch ( InvocationTargetException x ) $F27253 ( x ) }
$F1 public String encode $F72 { return $F606 ( name ) ; }
private $F97251 ( d , imageView , getImageView , viewWidth , getImageViewWidth , viewHeight , getImageViewHeight , drawableWidth , drawableHeight , mBaseMatrix , widthScale , heightScale , mScaleType , ScaleType , scale , Math , mTempSrc , mTempDst , mBaseRotation , FIT_CENTER , ScaleToFit , FIT_START , FIT_END , FIT_XY , resetMatrix )
void cancelAll $F72 { synchronized ( currentRequests ) { for ( DownloadRequest request : currentRequests ) $F65149 ( request ) } $F725 ( currentRequests ) }
protected void addDocs $F68141 ( index , type , number ) throws JsonProcessingException { $F44214 ( mapper ) for ( $F119 ( i , number ) ) { index ( index , type , NUM00 + i , mapper . writeValueAsString ( TestDocument . createSimpleDoc ( i ) ) ) ; } flush ( ) ; }
public void testPowNegativeNumToZeroExp $F72 { $F12762 int aSign = - NUM00 ; int exp = NUM00 ; $F15143 $F3023 ( aNumber , aSign , aBytes ) $F12767 ( result , aNumber , exp ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public final $F69963 doOnError ( Consumer < $F3204 > onError ) { $F10578 ( Objects , onError ) return doOnSignal ( this , null , null , onError , null , null , null , null , null ) ; }
public void simulateMethod $F5498 ( method , thisVar , returnVar ) { $F5500 ( subSignature , method ) if $F3057 ( subSignature ) $F5501 ( java_lang_System_arraycopy , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_System_setIn0 , method , thisVar , returnVar , params ) else if $F3057 ( subSignature ) $F5501 ( java_lang_System_setOut0 , method , thisVar , returnVar , params ) else $F166632 ( subSignature , java_lang_System_setErr0 , method , thisVar , returnVar , params , java_lang_System_initProperties , java_lang_System_mapLibraryName , java_lang_System_getCallerClass , defaultMethod ) }
protected void loadValue ( String sValue ) { try { value = Long . parseLong ( sValue . trim ( ) ) ; } catch ( NumberFormatException nfe ) $F5795 ( revertToDefault ) }
public void checkBounds $F72 { $F84694 ( tfLowBound , tsClipping ) $F84694 ( tfUpBound , tsClipping ) }
public void remove ( int index ) $F27228 ( mCategories , index , mTitles , mValues )
public static boolean deleteFilesAndDirsRecursive ( final File directory ) { if ( directory == null || $F4925 ( directory ) ) $F277465 ( Log , _BOOL ) return deleteFilesAndDirs ( directory ) ; }
void render ( GraphicsContext g , Point2D viewportOrigin ) { g . setGlobalAlpha ( life ) ; g . setGlobalBlendMode ( blendMode ) ; if ( image != null ) { $F72208 ( g ) g . translate ( x - viewportOrigin . getX ( ) , y - viewportOrigin . getY ( ) ) ; g . scale ( radiusX * NUM00 / image . getWidth ( ) , radiusY * NUM00 / image . getHeight ( ) ) ; g . drawImage ( image , NUM00 , NUM00 ) ; $F72213 ( g ) } else { g . setFill ( color ) ; g . fillOval ( x - viewportOrigin . getX ( ) , y - viewportOrigin . getY ( ) , radiusX * NUM00 , radiusY * NUM00 ) ; } }
public int position $F72 { return buff . position ( ) ; }
$F1 public void write $F36827 ( str , off , len ) throws IOException { final int off_plus_len = off + len ; for ( int i = off ; i < off_plus_len ; ) { $F52837 ( c , str , i ) if ( c < NUM00 ) { $F8214 ( _bytes , _index , c ) if ( ++ _index >= _bytes . length ) $F5795 ( flushBuffer ) } else { write ( c ) ; } } }
public void writeToNBT ( final NBTTagCompound nbt ) { final NBTTagList modulesNbt = new NBTTagList $F72 ; for ( final Module module : modules ) { final NBTTagCompound moduleNbt = new NBTTagCompound $F72 ; if ( module != null ) { module . writeToNBT ( moduleNbt ) ; } modulesNbt . appendTag ( moduleNbt ) ; } nbt . setTag ( TAG_MODULES , modulesNbt ) ; lock . ifPresent ( null ) ; lock . ifPresent ( null ) ; }
void sendBufferIfNotEmpty $F72 throws IOException { if ( buf != null && buf . position ( ) > NUM00 ) sendBuffer ( ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( key . equals ( getString ( R . string . pref_key_notification ) ) ) { setNotification ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; } else if ( key . equals ( getString ( R . string . pref_key_gmail_signature ) ) ) { setGmailSignaturePrefDescription ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; } else if ( key . equals ( getString ( R . string . pref_key_sms_signature ) ) ) { setSmsSignaturePrefDescription ( sharedPreferences . getBoolean ( key , _BOOL ) ) ; } }
public void initPortParameters ( SerialPort port ) { initialized = _BOOL ; if ( port != null ) { cbPort . setSelectedItem ( port . getName ( ) ) ; cbBaudrate . setSelectedItem ( String . valueOf ( port . getBaudRate ( ) ) ) ; cbParity . setSelectedIndex ( port . getParity ( ) ) ; cbDataBits . setSelectedIndex ( port . getDataBits ( ) - NUM00 ) ; cbStopBits . setSelectedIndex ( port . getStopBits ( ) - NUM00 ) ; int prt = port . getFlowControlMode ( ) ; cbProtocolRx . setSelectedIndex ( ( prt & SerialPort . FLOWCONTROL_RTSCTS_IN ) != NUM00 ? NUM00 : ( prt & SerialPort . FLOWCONTROL_XONXOFF_IN ) != NUM00 ? NUM00 : NUM00 ) ; cbProtocolTx . setSelectedIndex ( ( prt & SerialPort . FLOWCONTROL_RTSCTS_OUT ) != NUM00 ? NUM00 : ( prt & SerialPort . FLOWCONTROL_XONXOFF_OUT ) != NUM00 ? NUM00 : NUM00 ) ; btnDSR . setSelected ( port . isDSR ( ) ) ; btnCTS . setSelected ( port . isCTS ( ) ) ; btnCD . setSelected ( port . isCD ( ) ) ; btnDTR . setSelected ( port . isDTR ( ) ) ; btnRTS . setSelected ( port . isRTS ( ) ) ; } initialized = _BOOL ; }
public void addPreloadEntry ( GridCacheEntryInfo info ) { $F21432 ( preloadEntries ) preloadEntries . add ( info ) ; }
private void putOffUniform ( final Player player ) { if ( UNIFORM . isPartOf ( player . getOutfit ( ) ) ) { player . returnToOriginalOutfit ( ) ; } }
public static void moveFile $F46288 ( srcFile , destFile ) throws IOException { $F896 ( srcFile ) $F896 ( destFile ) $F130782 ( srcFile ) $F130783 ( srcFile ) if $F3428 ( destFile ) $F5244 ( destFile ) $F130783 ( destFile ) final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if $F7119 ( srcFile ) { ParseFileUtils . deleteQuietly ( destFile ) ; $F42873 ( srcFile , destFile ) } } }
public synchronized ScanManagerConfig readFromFile $F72 throws IOException { $F15885 ( f , file ) if $F1906 ( f ) $F3495 ( file ) if $F70404 ( f ) $F3495 ( file ) try $F4915 ( read , f ) catch ( JAXBException x ) { final IOException io = new IOException ( NUM00 + file + NUM00 + x , x ) ; throw io ; } }
public void delete ( String name ) throws IOException { $F219378 ( name , ISSUER , names ) encodeThis ( ) ; }
$F41720 ( value , absMin , absMax , absValue , Math )
public CompileClassNotFound ( Exception cause ) { $F3270 ( super , cause ) _cause = cause ; }
public SymGraph ( Motif motif ) { this . motif = motif ; $F87077 ( colorsToRecheck ) ; topMotifnodeToColor = new int [ motif . getNrMotifNodes ( ) ] ; colorToBottomMotifnode = new HashMap < Integer , $F3807 > $F72 ; colorToTopMotifnode = new HashMap < Integer , $F3807 > $F72 ; $F15277 ( list1 ) $F15277 ( list2 ) for ( $F1139 ( i , topMotifnodeToColor ) ) $F437553 ( list1 , i , list2 ) $F130813 ( colorToBottomMotifnode , list2 ) $F130813 ( colorToTopMotifnode , list1 ) }
public static boolean anyDimensionHasItems ( Collection < DimensionalObject > dimensions ) { $F34929 ( dimensions , _BOOL ) for ( DimensionalObject dim : dimensions ) { if ( dim . hasItems ( ) ) { return _BOOL ; } } return _BOOL ; }
private void openCurrentAndMaybeNext ( final boolean openNext ) { $F973 ( LOG ) synchronized ( this ) { $F973 ( LOG ) closeCursor ( ) ; if ( mPlayListLen == NUM00 || mPlayList == null ) $F932 stop ( _BOOL ) ; mPlayPos = Math . min ( mPlayPos , mPlayList . length - NUM00 ) ; updateCursor ( mPlayList [ mPlayPos ] ) ; while ( _BOOL ) { if ( $F31240 ( mCursor ) && openFile ( MediaStore . Audio . Media . EXTERNAL_CONTENT_URI + NUM00 + mCursor . getLong ( IDCOLIDX ) ) ) $F5153 closeCursor ( ) ; if ( mOpenFailedCounter ++ < NUM00 && mPlayListLen > NUM00 ) { final int pos = getNextPosition ( _BOOL ) ; if ( scheduleShutdownAndNotifyPlayStateChange ( pos ) ) $F665 mPlayPos = pos ; stop ( _BOOL ) ; mPlayPos = pos ; updateCursor ( mPlayList [ mPlayPos ] ) ; } else { mOpenFailedCounter = NUM00 ; $F10910 ( LOG ) scheduleDelayedShutdown ( ) ; if ( mIsSupposedToBePlaying ) { mIsSupposedToBePlaying = _BOOL ; notifyChange ( PLAYSTATE_CHANGED ) ; } $F665 } } $F8801 ( openNext , setNextTrack ) } }
protected OMNode createDTD $F72 throws OMException { throw new OMException $F580 ; }
private IVGenerator $F72 $F845
private void createOverviewPage $F72 { RemapOverview overview = new RemapOverview ( migrationTask , getContainer ( ) ) ; int index = addPage ( overview . getControl ( ) ) ; setPageText ( index , NUM00 ) ; taskListeners . add ( overview ) ; }
public void warning2 ( final String filename , int ln , int col , Object msg , String source ) { warning ( filename , ln , col , msg . toString ( ) , source ) ; }
public SOAPConnection openSOAPConnection $F72 throws SOAPException { return soapConnectionFactory . createConnection ( ) ; }
public static < U , V > String printMap ( final Map < U , V > map , final Converter $F30939 keyConverter , final Converter $F2193 valueConverter ) { $F64605 ( sb ) String separator = NUM00 ; for ( final Entry < U , V > entry : map . entrySet ( ) ) { sb . append ( separator ) ; sb . append ( keyConverter . convert ( entry . getKey ( ) ) ) ; $F84 ( sb ) sb . append ( valueConverter . convert ( entry . getValue ( ) ) ) ; separator = NUM00 ; } $F84 ( sb ) $F92 ( sb ) }
public void findAndInit ( Object someObj ) { if ( someObj instanceof com . bbn . openmap . MapBean ) { $F36253 ( Debug ) setSourceMap ( ( MapBean ) someObj ) ; } }
public static double cdf $F7635 ( x , mu , shape ) { if $F102905 ( x ) $F1083 final double v0 = x / mu ; final double v1 = Math . sqrt ( shape / x ) ; if ( v1 == NUM00 ) { return v0 > NUM00 ? NUM00 : NUM00 ; } double c1 = NormalDistribution . standardNormalCDF ( v1 * ( v0 - NUM00 ) ) ; double c2 = NormalDistribution . standardNormalCDF ( - v1 * ( v0 + NUM00 ) ) ; return ( c2 > NUM00 ) ? c1 + Math . exp ( NUM00 * shape / mu ) * c2 : c1 ; }
public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; ldapLogin ( ) ; SSOToken adminSSOToken = getAdminSSOToken ( ) ; String serviceName = getStringOptionValue ( IArgument . SERVICE_NAME ) ; String interfaceName = getStringOptionValue ( ARGUMENT_INTERFACE_NAME ) ; String pluginName = getStringOptionValue ( ARGUMENT_PLUGIN_NAME ) ; String i18nKey = getStringOptionValue ( ARGUMENT_I18N_KEY ) ; String i18nName = getStringOptionValue ( ARGUMENT_I18N_NAME ) ; String className = getStringOptionValue ( ARGUMENT_CLASS_NAME ) ; ServiceManager sm = null ; try { sm = new ServiceManager ( adminSSOToken ) ; } catch ( SMSException smse ) { $F145379 ( smse , ExitCodes ) } catch ( SSOException ssoe ) { $F145379 ( ssoe , ExitCodes ) } IOutput outputWriter = getOutputWriter ( ) ; try { $F806 params = { serviceName , interfaceName , pluginName , i18nKey , i18nName , className } ; $F28013 ( writeLog , LogWriter , Level , params ) Document pluginDoc = createPluginSchemaXML ( serviceName , interfaceName , pluginName , i18nKey , i18nName , className ) ; if ( pluginDoc != null ) { sm . addPluginSchema ( pluginDoc ) ; $F105633 ( params2 , serviceName , pluginName ) $F28013 ( writeLog , LogWriter , Level , params2 ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( params ) ) ) ; } else { $F806 args = { serviceName , pluginName , NUM00 } ; debugError ( NUM00 ) ; $F28035 ( writeLog , LogWriter , Level , args ) throw new CLIException ( NUM00 , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } } catch ( SSOException ssoe ) { $F806 args = { serviceName , pluginName , ssoe . getMessage ( ) } ; debugError ( NUM00 , ssoe ) ; $F28035 ( writeLog , LogWriter , Level , args ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( args ) ) ) ; $F145379 ( ssoe , ExitCodes ) } catch ( SMSException smse ) { $F806 args = { serviceName , pluginName , smse . getMessage ( ) } ; debugError ( NUM00 , smse ) ; $F28035 ( writeLog , LogWriter , Level , args ) outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( NUM00 ) , $F2486 ( args ) ) ) ; $F145379 ( smse , ExitCodes ) } }
protected void bflash $F72 throws SAXException { if ( mBuffIdx >= NUM00 ) { mHandCont . characters ( mBuff , NUM00 , ( mBuffIdx + NUM00 ) ) ; mBuffIdx = - NUM00 ; } }
protected Mac ( MacSpi macSpi , Provider provider , String algorithm ) { this . spi = macSpi ; this . provider = provider ; this . algorithm = algorithm ; serviceIterator = null ; lock = null ; }
public static String pathToString $F8306 ( dim , path ) { $F806 fullPath = new String [ NUM00 + path . length ] ; fullPath [ NUM00 ] = dim ; $F7057 ( System , path , fullPath ) $F135820 ( pathToString , fullPath ) }
public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
public static CdcSession createCdcSessionViaDomainAuth $F1947 ( serverName , userName , userPassword ) { $F20313 ( serverName ) $F20313 ( userName ) return new CdcSession ( serverName , userName , userPassword ) ; }
protected static Dfp expInternal ( final Dfp a ) { Dfp y = a . getOne ( ) ; Dfp x = a . getOne ( ) ; Dfp fact = a . getOne ( ) ; Dfp py = new Dfp ( y ) ; for ( $F6268 ( i ) ) { x = x . multiply ( a ) ; fact = fact . divide ( i ) ; y = y . add ( x . multiply ( fact ) ) ; if $F1238 ( y , py ) $F5153 py = new Dfp ( y ) ; } return y ; }
public URLConnection openConnection $F72 throws IOException { return streamHandler . openConnection ( this ) ; }
public static $F99006 linesToArray $F39268 ( inLine ) { $F99006 $F204 ( framesEnTab ) ; for ( $F2277 ( i , inLine ) ) { framesEnTab . add ( lineToArray ( inLine . get ( i ) ) ) ; } return framesEnTab ; }
$F1 public int LA ( int i ) { int la = super . LA ( i ) ; return Character . toLowerCase ( la ) ; }
public void deselect_all $F72 { Arrays . fill ( sel_array , _BOOL ) ; }
$F1 public boolean canTransferCriticals ( int loc ) { return _BOOL ; }
private void calculateSizes ( final Graphics g ) { m_rowHeight = getRowHeight ( g ) ; m_charHeight = getCharHeight ( g ) ; m_charWidth = getCharacterWidth ( g ) ; }
public static Iterable < GatewayMetaState . IndexMetaWriteInfo > resolveStatesToBeWritten ( ImmutableSet $F4 previouslyWrittenIndices , $F2689 potentiallyUnwrittenIndices , MetaData previousMetaData , MetaData newMetaData ) { List < GatewayMetaState . IndexMetaWriteInfo > $F204 ( indicesToWrite ) ; for ( String index : potentiallyUnwrittenIndices ) { IndexMetaData newIndexMetaData = newMetaData . index ( index ) ; IndexMetaData previousIndexMetaData = previousMetaData == null ? null : previousMetaData . index ( index ) ; String writeReason = null ; if ( previouslyWrittenIndices . contains ( index ) == _BOOL || previousIndexMetaData == null ) { writeReason = NUM00 ; } else if ( previousIndexMetaData . getVersion ( ) != newIndexMetaData . getVersion ( ) ) { writeReason = NUM00 + previousIndexMetaData . getVersion ( ) + NUM00 + newIndexMetaData . getVersion ( ) + NUM00 ; } if ( writeReason != null ) { indicesToWrite . add ( new GatewayMetaState . IndexMetaWriteInfo ( newIndexMetaData , previousIndexMetaData , writeReason ) ) ; } } return indicesToWrite ; }
protected double applyFunction ( double value ) { switch ( m_operator ) { $F1262 return Math . log ( value ) ; $F1262 $F12286 ( Math , value ) $F1262 return Math . cos ( value ) ; $F1262 return Math . exp ( value ) ; $F1262 $F41531 ( Math , value ) $F1262 return Math . floor ( value ) ; $F1262 return Math . ceil ( value ) ; $F1262 return Math . rint ( value ) ; $F1262 return Math . tan ( value ) ; $F1262 return Math . sin ( value ) ; } return Double . NaN ; }
private Object _deserializeStruct ( Element elStruct ) throws ConverterException { $F9031 ( type , elStruct ) Struct struct = new StructImpl $F72 ; $F9040 ( list , elStruct ) $F19322 ( len , list ) for ( $F119 ( i , len ) ) { $F61359 ( node , list , i ) if ( node instanceof Element ) { $F6721 ( var , node ) Element value = getChildElement ( ( Element ) node ) ; if ( value != null ) { struct . setEL ( var . getAttribute ( NUM00 ) , _deserialize ( value ) ) ; } } } if ( $F10470 ( struct ) && type != null && $F20 ( type ) ) $F2455 return struct ; }
public RemoteEvent dequeue $F72 { Uuid uuid = _readyEvents . poll ( ) ; $F1275 ( uuid ) SingleProducer producer = getProducer ( uuid ) ; return producer . popNextReadyEvent ( ) ; }
public TcpDiscoveryVmIpFinder $F72 $F845
public InvalidPropertiesFormatException ( String message ) { super ( message ) ; }
public SubCommand ( IDefinition definition , ResourceBundle rb , String name , List mandatoryOptions , List optionalOptions , List optionAliases , String implClassName , boolean webSupport , String deprecationWarning ) throws CLIException { this . definition = definition ; this . name = name ; this . rb = rb ; this . implClassName = implClassName ; this . webSupport = webSupport ; this . deprecationWarning = deprecationWarning ; $F19850 ( shortOptions ) parseOptions ( mandatoryOptions , this . mandatoryOptions , shortOptions ) ; parseOptions ( optionalOptions , this . optionalOptions , shortOptions ) ; parseAliases ( optionAliases ) ; }
public static boolean canAddClassInPackageOf $F60993 ( cls ) { final Package beanPackage = cls . getPackage ( ) ; if ( beanPackage != null ) { if ( beanPackage . isSealed ( ) ) { return _BOOL ; } $F20605 ( pname , beanPackage ) if $F418 ( pname ) { return _BOOL ; } } return _BOOL ; }
public static JsonToken deserialize ( final String jwt ) throws Exception { JsonTokenParser parser = new JsonTokenParser ( verifierProviders , new AbelanaTokenAudienceChecker ( BackendConstants . TOKEN_ISSUER ) ) ; return parser . deserialize ( jwt ) ; }
public void swapSuggestions ( final List < ? extends SearchSuggestion > newSearchSuggestions ) { Collections . reverse ( newSearchSuggestions ) ; swapSuggestions ( newSearchSuggestions , _BOOL ) ; }
boolean shouldAnimateSearchProviderIcon ( SelectionType selectionType , boolean isShowing ) { if ( isShowing || ContextualSearchFieldTrial . areExtraSearchBarAnimationsDisabled ( ) ) { return _BOOL ; } if ( selectionType == SelectionType . TAP ) { $F14662 ( currentTimeMillis , System ) long lastAnimatedTimeMillis = mPreferenceManager . getContextualSearchLastAnimationTime ( ) ; if $F19505 ( Math , currentTimeMillis , lastAnimatedTimeMillis , ONE_DAY_IN_MILLIS ) { mPreferenceManager . setContextualSearchLastAnimationTime ( currentTimeMillis ) ; return _BOOL ; } else { return _BOOL ; } } else if ( selectionType == SelectionType . LONG_PRESS ) { return getPromoOpenCount ( ) == NUM00 ; } return _BOOL ; }
public void waitFor $F72 { checkStarted ( ) ; try { if ( myInputProcessor != null && myProcess != null ) { myInputProcessor . process ( myProcess . getOutputStream ( ) ) ; } } $F49978 ( waitForProcess ) }
public static String extractUriFromAddress ( String addr ) { String uri = addr ; $F1384 ( index , addr ) if ( index != - NUM00 ) { uri = addr . substring ( index + NUM00 , addr . indexOf ( NUM00 , index ) ) ; } return uri ; }
PBKDF2KeyImpl ( PBEKeySpec keySpec , String prfAlgo ) throws InvalidKeySpecException { $F1469 passwd = keySpec . getPassword ( ) ; if ( passwd == null ) { this . passwd = $F11574 ; } else { $F256750 ( this , passwd ) } $F96 passwdBytes = getPasswordBytes ( this . passwd ) ; this . salt = keySpec . getSalt ( ) ; if ( salt == null ) { $F109061 } this . iterCount = keySpec . getIterationCount ( ) ; if ( iterCount == NUM00 ) { $F109061 } else if ( iterCount < NUM00 ) { $F109061 } int keyLength = keySpec . getKeyLength ( ) ; if ( keyLength == NUM00 ) { $F109061 } else if ( keyLength < NUM00 ) { $F109061 } try { this . prf = Mac . getInstance ( prfAlgo , SunJCE . getInstance ( ) ) ; } catch ( NoSuchAlgorithmException nsae ) { InvalidKeySpecException ike = new InvalidKeySpecException $F72 ; ike . initCause ( nsae ) ; throw ike ; } this . key = deriveKey ( prf , passwdBytes , salt , iterCount , keyLength ) ; }
private static void showDirectoryCreationError ( final String directory ) { $F21899 ( message ) final String description = CUtilityFunctions . createDescription ( String . format ( NUM00 , directory ) , $F21904 , $F78037 ) ; NaviErrorDialog . show ( null , message , description ) ; }
static $F96 pad $F97 ( data ) { int len ; if $F8830 ( data ) len = data . length ; else len = data . length % NUM00 ; if ( len == NUM00 ) return data ; else { $F96 padding = new byte [ NUM00 - len + data . length ] ; for ( int i = padding . length - NUM00 ; i > data . length - NUM00 ; i -- ) $F5629 ( padding , i ) $F7057 ( System , data , padding ) return padding ; } }
public void serialize ( DataOutput out ) throws IOException { out . writeUTF ( id ) ; out . writeUTF ( version ) ; $F27636 ( out , sourceFiles ) for ( Entry < String , List < RevisionFile > > e : sourceFiles . entrySet ( ) ) { out . writeUTF ( e . getKey ( ) ) ; List < RevisionFile > files = e . getValue ( ) ; $F27636 ( out , files ) for ( RevisionFile file : files ) { out . writeUTF ( file . fileName ) ; out . writeLong ( file . size ) ; } } }
public NamedColumnProjection $F9816 ( names , include ) { $F266988 ( m_names ) for ( $F9808 ( i , names ) ) $F24616 ( m_names , names , i ) m_include = include ; }
public static TimeSeriesData serializableInstance $F72 { $F24645 ( varNames ) $F18793 ( varNames ) $F18793 ( varNames ) return new TimeSeriesData ( new TetradMatrix $F32532 , varNames ) ; }
$F1 public void writeVertices ( final OutputStream outputStream , final Iterator $F130408 vertexIterator , final Direction direction ) throws IOException { final BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( outputStream ) ) ; try ( final ByteArrayOutputStream baos = $F1535 ) { if ( wrapAdjacencyList ) writer . write ( NUM00 + GraphSONTokens . VERTICES + NUM00 ) ; while $F2921 ( vertexIterator ) { writeVertex ( baos , vertexIterator . next ( ) , direction ) ; writer . write ( new String $F87573 ( baos ) ) ; if ( wrapAdjacencyList ) { if $F2921 ( vertexIterator ) $F3410 ( writer ) } else { $F1769 ( writer ) } $F2268 ( baos ) } if ( wrapAdjacencyList ) $F3410 ( writer ) } $F1206 ( writer ) }
Collection < ? extends ClientRequestResult > handleRetrieveConfigurationsRequest ( final ClientRequest configurationRequest , final Session session , final Destination replyDestination ) { if ( configurationRequest . getRequestParameter ( ) != null ) { return configurationLoader . getConfigurationReports ( configurationRequest . getRequestParameter ( ) ) ; } else { return configurationLoader . getConfigurationReports ( ) ; } }
public static boolean containsClass ( $F1113 File file , String className ) { $F182960 ( entryPath , className ) return containsEntry ( file , entryPath ) ; }
private double sin ( double angle ) { while ( angle >= NUM00 ) { angle -= NUM00 ; } double value = angle / NUM00 * Math . PI ; return Math . sin ( value ) ; }
public void remove ( T graphic ) $F15768 ( mLock , mGraphics , graphic , postInvalidate )
private static void launchDebugger ( String dmlScriptStr , String fnameOptConfig , $F2540 ( argVals ) , boolean parsePyDML ) throws ParseException , IOException , DMLRuntimeException , DMLDebuggerException , LanguageException , HopsException , LopsException { DMLDebuggerProgramInfo dbprog = new DMLDebuggerProgramInfo $F72 ; DMLConfig conf = DMLConfig . readConfigurationFile ( fnameOptConfig ) ; ConfigurationManager . setGlobalConfig ( conf ) ; AParserWrapper parser = AParserWrapper . createParser ( parsePyDML ) ; DMLProgram prog = parser . parse ( DML_FILE_PATH_ANTLR_PARSER , dmlScriptStr , argVals ) ; DMLTranslator dmlt = new DMLTranslator ( prog ) ; dmlt . liveVariableAnalysis ( prog ) ; dmlt . validateParseTree ( prog ) ; dmlt . constructHops ( prog ) ; dmlt . rewriteHopsDAG ( prog ) ; dmlt . constructLops ( prog ) ; dbprog . rtprog = prog . getRuntimeProgram ( conf ) ; try { initHadoopExecution ( conf ) ; DMLDebugger SystemMLdb = new DMLDebugger ( dbprog , dmlScriptStr ) ; SystemMLdb . runSystemMLDebugger ( ) ; } $F18632 ( cleanupHadoopExecution , conf ) }
public static final Index createTestBankIndexApprovedOn $F72 { $F176225 ( lastname ) lastname . isUnique ( _BOOL ) ; ArrayList < IndexField > $F9187 ( fields ) ; fields . add ( new IndexField ( NUM00 , FieldDataType . DATE_TIME ) ) ; lastname . setFields ( fields ) ; lastname . setTable ( Fixtures . createTestWorldBankTable ( ) ) ; return lastname ; }
$F112611 ( encoded , base64Data , len , removeWhiteSpace , FOURBYTE , numberQuadruple , b1 , b2 , b3 , b4 , d1 , d2 , d3 , d4 , i , encodedIndex , dataIndex , decodedData , isData , base64Alphabet , isPad , tmp , System )
public synchronized void accessed ( Object object ) { historyList . remove ( object ) ; historyList . add ( object ) ; }
public static boolean isEmpty ( String string ) { return string == null || $F41726 ( string ) ; }
$F1 $F1431 protected void heapifyUpComparable ( int pos , Object elem ) { final $F62936 cur = ( $F62936 ) elem ; while ( pos > NUM00 ) { final int parent = $F62939 ( pos ) ; Object par = queue [ parent ] ; if $F62945 ( cur , par ) $F5153 queue [ pos ] = par ; index . put ( par , pos ) ; pos = parent ; } queue [ pos ] = cur ; index . put ( cur , pos ) ; }
private void updateReleaseLocks $F72 throws CacheException { if ( numLocks . addAndGet ( - NUM00 ) < NUM00 ) { throw new CacheException $F580 ; } if ( evictionPolicy == EvictionPolicy . LRU ) { timestamp . set ( System . nanoTime ( ) ) ; } else if ( evictionPolicy == EvictionPolicy . LFU ) { timestamp . addAndGet ( NUM00 ) ; } else if ( evictionPolicy == EvictionPolicy . MIN_EVICT ) $F845 else { throw new CacheException ( NUM00 + evictionPolicy . name ( ) ) ; } }
public static Short toShort ( char c ) $F18816 ( Short , toShortValue , c )
protected $F316817 findCrossings ( final PlanetModel planetModel , final Plane q , final Membership [ ] bounds , final Membership [ ] moreBounds ) { $F140850 ( lineVectorX , y , q , z ) $F140850 ( lineVectorY , z , q , x ) $F140850 ( lineVectorZ , x , q , y ) if ( $F140851 ( Math , lineVectorX , MINIMUM_RESOLUTION , lineVectorY ) && Math . abs ( lineVectorZ ) < MINIMUM_RESOLUTION ) { return NO_POINTS ; } double x0 ; double y0 ; double z0 ; final double denomYZ = this . y * q . z - this . z * q . y ; final double denomXZ = this . x * q . z - this . z * q . x ; final double denomXY = this . x * q . y - this . y * q . x ; if ( $F140867 ( Math , denomYZ , denomXZ ) && $F140867 ( Math , denomYZ , denomXY ) ) { if $F7637 ( Math , denomYZ , MINIMUM_RESOLUTION_SQUARED ) { return NO_POINTS ; } final double denom = NUM00 / denomYZ ; x0 = NUM00 ; y0 = ( - this . D * q . z - this . z * - q . D ) * denom ; z0 = ( this . y * - q . D + this . D * q . y ) * denom ; } else if ( $F140867 ( Math , denomXZ , denomXY ) && $F140867 ( Math , denomXZ , denomYZ ) ) { if $F7637 ( Math , denomXZ , MINIMUM_RESOLUTION_SQUARED ) { return NO_POINTS ; } final double denom = NUM00 / denomXZ ; x0 = ( - this . D * q . z - this . z * - q . D ) * denom ; y0 = NUM00 ; z0 = ( this . x * - q . D + this . D * q . x ) * denom ; } else { if $F7637 ( Math , denomXY , MINIMUM_RESOLUTION_SQUARED ) { return NO_POINTS ; } final double denom = NUM00 / denomXY ; x0 = ( - this . D * q . y - this . y * - q . D ) * denom ; y0 = ( this . x * - q . D + this . D * q . x ) * denom ; z0 = NUM00 ; } final double A = lineVectorX * lineVectorX * planetModel . inverseAbSquared + lineVectorY * lineVectorY * planetModel . inverseAbSquared + lineVectorZ * lineVectorZ * planetModel . inverseCSquared ; final double B = NUM00 * ( lineVectorX * x0 * planetModel . inverseAbSquared + lineVectorY * y0 * planetModel . inverseAbSquared + lineVectorZ * z0 * planetModel . inverseCSquared ) ; final double C = x0 * x0 * planetModel . inverseAbSquared + y0 * y0 * planetModel . inverseAbSquared + z0 * z0 * planetModel . inverseCSquared - NUM00 ; final double BsquaredMinus = B * B - NUM00 * A * C ; if $F7637 ( Math , BsquaredMinus , MINIMUM_RESOLUTION_SQUARED ) { return NO_POINTS ; } else if ( BsquaredMinus > NUM00 ) { final double inverse2A = NUM00 / ( NUM00 * A ) ; final double sqrtTerm = Math . sqrt ( BsquaredMinus ) ; final double t1 = ( - B + sqrtTerm ) * inverse2A ; final double t2 = ( - B - sqrtTerm ) * inverse2A ; final double point1X = lineVectorX * t1 + x0 ; final double point1Y = lineVectorY * t1 + y0 ; final double point1Z = lineVectorZ * t1 + z0 ; final double point2X = lineVectorX * t2 + x0 ; final double point2Y = lineVectorY * t2 + y0 ; final double point2Z = lineVectorZ * t2 + z0 ; boolean point1Valid = _BOOL ; boolean point2Valid = _BOOL ; for ( final Membership bound : bounds ) { if $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } if ( point1Valid ) { for ( final Membership bound : moreBounds ) { if $F416704 ( bound , point1X , point1Y , point1Z ) $F3468 ( point1Valid , _BOOL ) } } for ( final Membership bound : bounds ) { if $F416704 ( bound , point2X , point2Y , point2Z ) $F3468 ( point2Valid , _BOOL ) } if ( point2Valid ) { for ( final Membership bound : moreBounds ) { if $F416704 ( bound , point2X , point2Y , point2Z ) $F3468 ( point2Valid , _BOOL ) } } if ( point1Valid && point2Valid ) { return new GeoPoint [ ] { new GeoPoint ( point1X , point1Y , point1Z ) , new GeoPoint ( point2X , point2Y , point2Z ) } ; } if ( point1Valid ) { return new GeoPoint [ ] { new GeoPoint ( point1X , point1Y , point1Z ) } ; } if ( point2Valid ) { return new GeoPoint [ ] { new GeoPoint ( point2X , point2Y , point2Z ) } ; } return NO_POINTS ; } else { return NO_POINTS ; } }
public static void encodeDimension ( float value , byte $F341876 , int offset ) { NumericUtils . intToSortableBytes ( NumericUtils . floatToSortableInt ( value ) , dest , offset ) ; }
public long minflt $F72 $F12907 ( Long , fields )
public static String toString ( final float value ) $F23210 ( Float , value )
public void endFilterInterval $F72 { $F3224 ( endMillis , System ) totalFilterMillis += ( endMillis - intervalStartMillis ) ; state = TaskState . other ; }
public String process ( String to_process ) { if $F6036 ( to_process ) $F1278 String tmp = NUM00 ; $F8093 ( st , to_process , _BOOL ) StringBuffer $F1289 ( newValue , to_process ) ; while $F14498 ( st ) { $F39710 ( tmp , st ) if ( hasAttribute ( tmp ) ) newValue . append ( ( String ) get ( tmp ) ) ; else newValue . append ( tmp ) ; } $F92 ( newValue ) }
@ Benchmark public long test2_UsingForEachAndMapEntry $F72 throws IOException { long i = NUM00 ; for ( Map . Entry $F15329 pair : map . entrySet ( ) ) { i += pair . getKey ( ) + pair . getValue ( ) ; } return i ; }
public static final void writeListXml ( List val , String name , XmlSerializer out ) throws $F52182 { $F18827 ( val , out ) $F18823 ( out ) $F18831 ( name , out ) $F2199 ( n , val ) int i = NUM00 ; while ( i < n ) { writeValueXml ( val . get ( i ) , null , out ) ; i ++ ; } $F18825 ( out ) }
public static String convertToRGB ( int color ) { $F21676 ( red , Integer , Color , color ) $F21676 ( green , Integer , Color , color ) $F21676 ( blue , Integer , Color , color ) $F21680 ( red ) $F21680 ( green ) $F21680 ( blue ) return NUM00 + red + green + blue ; }
$F76441 ( key , cacheKey , mDigest , MessageDigest , bytesToHexString , String )
private void changePassword $F1947 ( userType , oldPassword , newPassword ) throws Exception { String fileEncPassword = getUserPassword ( userType ) ; String userDN = getUserDN ( userType ) ; if ( $F29136 ( fileEncPassword ) || ( userDN == null ) || $F1277 ( userDN ) ) { $F88360 ( debug , userType , configFile ) throw new XMLException $F16961 ( i18n ) ; } if ( ! oldPassword . equals ( AccessController . doPrivileged ( new DecodeAction ( fileEncPassword ) ) ) ) $F65933 ( i18n ) if ( isAMSDKConfigured ) { try { new AuthContext ( new AuthPrincipal ( userDN ) , newPassword . toCharArray ( ) ) ; if $F6299 ( debug ) $F235771 ( debug , userDN ) } catch ( LoginException lee ) { try { AuthContext ac = new AuthContext ( new AuthPrincipal ( userDN ) , oldPassword . toCharArray ( ) ) ; PersistentObject user = UMSObject . getObject ( ac . getSSOToken ( ) , new Guid ( userDN ) ) ; if $F6299 ( debug ) $F235771 ( debug , userDN ) user . setAttribute ( new Attr ( NUM00 , newPassword ) ) ; $F72208 ( user ) } catch ( LoginException le ) { if $F12866 ( debug ) { $F30524 ( debug , userDN ) } throw new Exception ( $F241237 ( i18n ) + le . getMessage ( ) ) ; } } } setUserPassword ( userType , newPassword ) ; }
public int hashCode ( Object key ) { return ( key . hashCode ( ) & NUM00 ) % this . keyTable . length ; }
public AtomicArrayBase $F102871 ( array ) { this . array = Arrays . copyOf ( array , array . length , $F22453 ) ; }
public void apply $F72 $F9099 ( setSpeedMap , setNXdata )
$F108235 ( f , first , n , item , last , count , notFull )
public void push ( final String value ) { if ( value == null ) { mv . visitInsn ( Opcodes . ACONST_NULL ) ; } else $F31345 ( mv , value ) }
public void init $F72 { m_projectTree . setSelectionPath ( new TreePath ( m_projectTree . getRootNode ( ) ) ) ; }
public $F267501 ( is )
private void displayCalendar $F72 { KeyNamePair pp = ( KeyNamePair ) fieldResource . getSelectedItem ( ) ; $F8249 ( pp ) int S_Resource_ID = pp . getKey ( ) ; m_mAssignment . setS_Resource_ID ( S_Resource_ID ) ; Timestamp date = fieldDate . getTimestamp ( ) ; $F89756 ( index , timePane ) log . config ( NUM00 + index + NUM00 + S_Resource_ID + NUM00 + date ) ; m_loading = _BOOL ; if ( index == NUM00 ) daySchedule . recreate ( S_Resource_ID , date ) ; else if ( index == NUM00 ) weekSchedule . recreate ( S_Resource_ID , date ) ; else monthSchedule . recreate ( S_Resource_ID , date ) ; m_loading = _BOOL ; repaint ( ) ; }
public static void assertException ( RuntimeException exception , Runnable expression , String errorMessage ) { if ( verbose ) { log ( NUM00 + exception + NUM00 + expression + NUM00 + errorMessage + NUM00 ) ; } try $F21688 ( expression ) catch ( RuntimeException failure ) { if ( exception . getClass ( ) != failure . getClass ( ) ) { TestUtils . fail ( errorMessage ) ; } $F665 } TestUtils . fail ( errorMessage ) ; }
public boolean isParityCorrect ( $F31427 ( shards ) , int firstByte , int byteCount ) { checkBuffersAndSizes ( shards , firstByte , byteCount ) ; $F57503 ( toCheck , parityShardCount ) $F21535 ( System , shards , dataShardCount , toCheck , parityShardCount ) return codingLoop . checkSomeShards ( parityRows , shards , dataShardCount , toCheck , parityShardCount , firstByte , byteCount , null ) ; }
protected void onSendSuccess ( $F228084 buffer ) { $F5224 ( sendSuccess ) logger . trace ( NUM00 , name ( ) , buffer ) ; try { checkpointer . saveCheckpoint ( buffer ) ; } catch ( Exception e ) { logger . error ( NUM00 , name ( ) , buffer , e ) ; } }
$F95779 ( out , remaining , count , buf , buffers , c , Math )
public void test_service_004 $F72 throws Exception { $F195929 ( serviceURI , valueFactory ) $F195934 ( groupNode ) $F195943 ( groupNode ) $F14136 ( exprImage , serviceURI ) $F195948 ( prefixDecls , PrefixDeclProcessor ) $F195956 ( serviceNode , makeIV , serviceURI , groupNode ) $F195968 ( projectedVars , Var , serviceNode , exprImage , prefixDecls ) $F195974 ( bindingSets ) { $F195979 ( bset ) bset . addBinding ( NUM00 , $F195981 ) ; bindingSets . add ( bset ) ; } $F195992 ( a , bindingSets ) final IRemoteSparqlQueryBuilder fixture = newFixture ( serviceNode , a ) ; $F195994 ( queryStr , fixture , a ) $F195999 ( expected , QueryType ) { expected . setPrefixDecls ( prefixDecls ) ; $F196004 ( projection ) $F196006 ( projection ) $F196006 ( projection ) $F196006 ( projection ) expected . setProjection ( projection ) ; $F196008 ( whereClause ) $F196014 ( whereClause , Scope ) expected . setWhereClause ( whereClause ) ; { final $F195959 vars = new $F195959 $F72 ; $F73066 ( solutionsIn ) final BindingsClause bindingsClause = new BindingsClause ( vars , solutionsIn ) ; expected . setBindingsClause ( bindingsClause ) ; { $F195966 ( vars , Var ) } $F221451 ( bset , solutionsIn ) } } final QueryRoot actual = parse ( queryStr , baseURI ) ; assertSameAST ( queryStr , expected , actual ) ; }
private boolean isDirty $F72 { return ! Objects . equals ( inputList . keySet ( ) , cmrRepositoryManager . getCmrRepositoryDefinitions ( ) ) ; }
public void write $F36827 ( s , off , len ) { if ( text != null ) { $F36829 ( text , s , off , len ) if ( ( col += len ) > wrap ) println ( ) ; } else { super . write ( s , off , len ) ; flush ( ) ; } }
public Zoneset showActiveZoneset ( Integer vsanId ) throws NetworkDeviceControllerException { List < Zoneset > zonesets = showZoneset ( vsanId , _BOOL , null , _BOOL , _BOOL ) ; return zonesets . isEmpty ( ) ? null : zonesets . get ( NUM00 ) ; }
private final short validatePermSplitFactor ( String splitFactor ) throws AdeFlowException { short permSplitFactor = Short . parseShort ( splitFactor ) ; if ( permSplitFactor <= NUM00 || ( ( m_outerFramingFlow . getDuration ( ) / permSplitFactor ) < MILLISECONDS_IN_ONE_MINUTE ) ) { throw new AdeFlowException $F580 ; } return permSplitFactor ; }
public static Calendar toCalendar ( String datestring , String format ) { Date d = parse ( datestring , format ) ; $F4377 ( cal , Calendar ) $F176384 ( cal , d ) return cal ; }
public void testCompareToDiffSigns2 $F72 { $F67214 $F10679 int aSign = - NUM00 ; int bSign = NUM00 ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F67217 ( assertEquals , aNumber , bNumber ) }
private static void translateCompatibilityToPaths ( RPAction action ) { if ( action . has ( EquipActionConsts . BASE_OBJECT ) ) { $F3803 path = Arrays . asList ( action . get ( EquipActionConsts . BASE_OBJECT ) , action . get ( EquipActionConsts . BASE_SLOT ) , action . get ( EquipActionConsts . BASE_ITEM ) ) ; action . put ( EquipActionConsts . SOURCE_PATH , path ) ; } else { $F3803 path = Arrays . asList ( action . get ( EquipActionConsts . BASE_ITEM ) ) ; action . put ( EquipActionConsts . SOURCE_PATH , path ) ; } }
public Builder addMenuItem ( $F4170 String label , $F4170 PendingIntent pendingIntent ) { $F21432 ( mMenuItems ) $F53033 ( bundle ) bundle . putString ( KEY_MENU_ITEM_TITLE , label ) ; bundle . putParcelable ( KEY_PENDING_INTENT , pendingIntent ) ; mMenuItems . add ( bundle ) ; return this ; }
public SparseFloatVector ( TIntFloatMap values , int dimensionality ) throws IllegalArgumentException { if $F60125 ( values , dimensionality ) $F825 this . indexes = $F2315 ( values ) ; this . values = new float $F2313 ( values ) ; { TIntFloatIterator iter = values . iterator ( ) ; for ( $F60135 ( i , iter ) ) { $F60136 ( iter ) this . indexes [ i ] = iter . key ( ) ; } Arrays . sort ( this . indexes ) ; } { for ( $F2277 ( i , values ) ) { this . values [ i ] = values . get ( this . indexes [ i ] ) ; } } this . dimensionality = dimensionality ; $F3666 ( maxdim , getMaxDim ) if ( maxdim > dimensionality ) $F60154 ( dimensionality , maxdim ) }
public $F96 canonSerializeToByteArray ( Node node ) throws Exception { $F1538 ( baos ) canon . setWriter ( baos ) ; canon . notReset ( ) ; canon . canonicalizeSubtree ( node ) ; $F11316 ( baos ) }
public DefinedMethod addDescription ( String description ) { this . description = Optional . of ( description ) ; return this ; }
public int addFlattenedColumn ( Object o , $F2027 dims ) throws FitsException $F19580 ( addFlattenedColumn , o , dims , _BOOL )
public final void writeToStream ( DataOutputStream dos ) throws IOException { dos . writeUTF ( event ) ; dos . writeUTF ( site ) ; dos . writeUTF ( date ) ; dos . writeUTF ( round ) ; dos . writeUTF ( white ) ; dos . writeUTF ( black ) ; dos . writeUTF ( TextIO . toFEN ( startPos ) ) ; dos . writeUTF ( timeControl ) ; dos . writeUTF ( whiteTimeControl ) ; dos . writeUTF ( blackTimeControl ) ; $F2199 ( nTags , tagPairs ) dos . writeInt ( nTags ) ; for ( $F119 ( i , nTags ) ) { dos . writeUTF ( tagPairs . get ( i ) . tagName ) ; dos . writeUTF ( tagPairs . get ( i ) . tagValue ) ; } Node . writeToStream ( dos , rootNode ) ; $F15272 pathFromRoot = currentNode . getPathFromRoot ( ) ; $F2199 ( pathLen , pathFromRoot ) dos . writeInt ( pathLen ) ; for ( $F119 ( i , pathLen ) ) dos . writeInt ( pathFromRoot . get ( i ) ) ; }
public void registerSource ( ProgressSource pi ) { synchronized ( progressSourceList ) { $F153626 ( progressSourceList , pi ) progressSourceList . add ( pi ) ; } if $F3817 ( progressListenerList ) { ArrayList $F314324 listeners = new ArrayList $F314324 $F72 ; synchronized ( progressListenerList ) { for ( Iterator $F314324 iter = progressListenerList . iterator ( ) ; iter . hasNext ( ) ; ) { listeners . add ( iter . next ( ) ) ; } } for ( Iterator $F314324 iter = listeners . iterator ( ) ; iter . hasNext ( ) ; ) { ProgressListener pl = iter . next ( ) ; ProgressEvent pe = new ProgressEvent ( pi , pi . getURL ( ) , pi . getMethod ( ) , pi . getContentType ( ) , pi . getState ( ) , pi . getProgress ( ) , pi . getExpected ( ) ) ; pl . progressStart ( pe ) ; } } }
private static $F2539 extractKeyValuePairs ( String props , ObjectName mbean ) { $F2539 map = new LinkedHashMap $F2538 $F72 ; $F1384 ( eq , props ) while ( eq != - NUM00 ) { $F11991 ( key , props , eq ) String value = mbean . getKeyProperty ( key ) ; map . put ( key , value ) ; props = props . substring ( $F1285 ( key ) + value . length ( ) ) ; $F3110 ( props ) $F49897 ( eq , props ) } return map ; }
protected void paintContentBorderLeftEdge ( Graphics g , int tabPlacement , int selectedIndex , int x , int y , int w , int h ) { Rectangle selRect = selectedIndex < NUM00 ? null : getTabBounds ( selectedIndex , calcRect ) ; g . setColor ( selectHighlight ) ; if ( tabPlacement != LEFT || selectedIndex < NUM00 || ( $F6108 ( selRect ) + NUM00 < x ) || ( selRect . y < y || selRect . y > y + h ) ) { g . drawLine ( x , y , x , y + h - NUM00 ) ; } else { g . drawLine ( x , y , x , selRect . y + NUM00 ) ; if ( $F6118 ( selRect ) < y + h - NUM00 ) g . drawLine ( x , $F6118 ( selRect ) + NUM00 , x , y + h - NUM00 ) ; } }
public final Flux $F4203 sample ( Duration timespan ) { return sampleMillis ( timespan . toMillis ( ) ) ; }
$F1 public boolean hasValuesDescription $F72 { return restrictionClass != null && restrictionClass != $F12222 ; }
public SmbFile ( String url ) throws MalformedURLException { this ( new URL ( null , url , Handler . SMB_HANDLER ) ) ; }
public static boolean isAudio ( String mimeType ) { if ( mimeType != null ) { if $F3106 ( mimeType ) return _BOOL ; else return _BOOL ; } else return _BOOL ; }
private void restoreWidget ( Key key , $F96 buffer , int dataSize ) throws IOException { if ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; Widget widget = unpackProto ( new Widget $F72 , buffer , dataSize ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + widget . provider ) ; if ( widget . icon . data != null ) { Bitmap icon = BitmapFactory . decodeByteArray ( widget . icon . data , NUM00 , widget . icon . data . length ) ; if ( icon == null ) { Log . w ( TAG , NUM00 + key . name ) ; } else { IconCache . preloadIcon ( mContext , ComponentName . unflattenFromString ( widget . provider ) , icon , widget . icon . dpi ) ; } } }
protected int assertLineTerminates ( int c ) throws IOException , RDFParseException { $F10201 ( c , reader ) c = skipWhitespace ( c ) ; if ( c != - NUM00 && c != NUM00 && c != NUM00 ) $F1210 ( reportFatalError ) return c ; }
static private XMLEvent constructEvent ( int eventType , WbXmlStreamReader stream ) throws XMLStreamException { $F37599 ( log , Level ) XMLEvent event ; switch ( eventType ) { case XMLStreamConstants . START_DOCUMENT : event = new WbXmlStartDocumentEvent ( stream ) ; $F597 case XMLStreamConstants . END_DOCUMENT : event = new WbXmlEndDocumentEvent ( stream ) ; $F597 case XMLStreamConstants . START_ELEMENT : event = new WbXmlStartElementEvent ( stream ) ; $F597 case XMLStreamConstants . END_ELEMENT : event = new WbXmlEndElementEvent ( stream ) ; $F597 case XMLStreamConstants . CHARACTERS : case XMLStreamConstants . CDATA : event = new WbXmlCharactersEvent ( stream ) ; $F597 $F1267 throw new UnsupportedOperationException $F10797 ( String , eventType ) ; } log . log ( Level . FINE , NUM00 , event ) ; return event ; }
private void verifyGridState $F72 { Integer rowLength = null ; int rowPos = NUM00 ; for ( $F6689 row : grid ) { if ( rowLength != null && rowLength != row . size ( ) ) { throw new IllegalStateException ( $F57676 ( rowLength , row ) + rowPos ) ; } rowPos ++ ; $F8935 ( rowLength , row ) } }
public static String readStringAndClose ( Reader in , int length ) throws IOException { try { if ( length <= NUM00 ) $F7984 ( length , Integer ) int block = Math . min ( Constants . IO_BUFFER_SIZE , length ) ; StringWriter out = new StringWriter ( block ) ; copyAndCloseInput ( in , out , length ) ; $F92 ( out ) } $F3229 ( in ) }
protected void beginPath $F72 { prepDrawing ( ) ; mPSStream . println ( NEWPATH_STR ) ; mPenX = NUM00 ; mPenY = NUM00 ; }
private boolean inSamePackage $F140796 ( c1 , c2 ) { $F20605 ( nameC1 , c1 ) $F20605 ( nameC2 , c2 ) $F24867 ( indexDotC1 , nameC1 ) $F24867 ( indexDotC2 , nameC2 ) $F35938 ( indexDotC1 , indexDotC2 , _BOOL ) $F5881 ( indexDotC1 , _BOOL ) return nameC1 . regionMatches ( NUM00 , nameC2 , NUM00 , indexDotC1 ) ; }
private void sendTcpRequest ( Socket socket , String request ) throws ApiException { try { LogUtils . LOGD ( TAG , NUM00 + request ) ; BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( socket . getOutputStream ( ) ) ) ; writer . write ( request ) ; $F1206 ( writer ) } catch ( Exception e ) { LogUtils . LOGW ( TAG , NUM00 , e ) ; disconnect ( ) ; throw new ApiException ( ApiException . IO_EXCEPTION_WHILE_SENDING_REQUEST , e ) ; } }
public static String cleanString ( String src ) { $F1338 ( src ) boolean foundBad = _BOOL ; final CharacterIterator it = new StringCharacterIterator ( src ) ; for ( char c = it . first ( ) ; c != CharacterIterator . DONE ; c = it . next ( ) ) { if ( c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI ) $F3468 ( foundBad , _BOOL ) } $F42316 ( foundBad , src ) $F1121 ( res ) for ( char c = it . first ( ) ; c != CharacterIterator . DONE ; c = it . next ( ) ) { if ( c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI ) $F288 ( res , ASCII_SPACE ) else $F288 ( res , c ) } $F92 ( res ) }
public static ManualLagGraph serializableInstance $F72 { return new ManualLagGraph ( ManualLagGraphParams . serializableInstance ( ) ) ; }
public void updateActions $F72 { String text ; Action a = RTextArea . getAction ( RTextArea . UNDO_ACTION ) ; if ( canUndo ( ) ) { a . setEnabled ( _BOOL ) ; text = getUndoPresentationName ( ) ; $F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; } else { if $F34496 ( a ) { a . setEnabled ( _BOOL ) ; text = cantUndoText ; $F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; } } a = RTextArea . getAction ( RTextArea . REDO_ACTION ) ; if ( canRedo ( ) ) { a . setEnabled ( _BOOL ) ; text = getRedoPresentationName ( ) ; $F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; } else { if $F34496 ( a ) { a . setEnabled ( _BOOL ) ; text = cantRedoText ; $F59297 ( a , Action , text ) a . putValue ( Action . SHORT_DESCRIPTION , text ) ; } } }
public void elementType $F21324 ( name , model , memberOf , flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
private static $F39277 generateValidPreviewSizeList ( Camera camera ) { $F39278 parameters = camera . getParameters ( ) ; $F39283 supportedPreviewSizes = parameters . getSupportedPreviewSizes ( ) ; $F39283 supportedPictureSizes = parameters . getSupportedPictureSizes ( ) ; $F39277 $F204 ( validPreviewSizes ) ; for ( $F39290 ( previewSize , supportedPreviewSizes ) ) { $F39296 ( previewAspectRatio , previewSize ) for ( $F39290 ( pictureSize , supportedPictureSizes ) ) { $F39296 ( pictureAspectRatio , pictureSize ) if $F39297 ( Math , previewAspectRatio , pictureAspectRatio , ASPECT_RATIO_TOLERANCE ) { validPreviewSizes . add ( new SizePair ( previewSize , pictureSize ) ) ; $F597 } } } if $F10471 ( validPreviewSizes ) { $F6173 ( Log , TAG ) for ( $F39290 ( previewSize , supportedPreviewSizes ) ) { validPreviewSizes . add ( new SizePair ( previewSize , null ) ) ; } } return validPreviewSizes ; }
$F7480 ( listener , scrollingListeners )
public static boolean hasDependency ( MavenProject project , String groupId ) { Set < Artifact > artifacts = project . getArtifacts ( ) ; if ( artifacts != null ) { for ( Artifact artifact : artifacts ) { String scope = artifact . getScope ( ) ; if ( Objects . equal ( NUM00 , scope ) ) $F1448 if ( Objects . equal ( groupId , artifact . getGroupId ( ) ) ) { return _BOOL ; } } } return _BOOL ; }
public ContourGenerator ( URL url , float modelMean , float modelStddev ) throws IOException { this . modelMean = modelMean ; this . modelStddev = modelStddev ; $F19151 ( termsList ) String line ; BufferedReader $F275615 ( reader , url ) ; $F36243 ( line , reader ) while ( line != null ) { if $F14943 ( line ) { parseAndAdd ( termsList , line ) ; } $F36243 ( line , reader ) } terms = ( F0ModelTerm [ ] ) termsList . toArray ( terms ) ; $F59 ( reader ) }
public void addComment ( String comment ) { if ( frame != null ) { chatTab . addComment ( comment ) ; } if ( tabbedPane . getSelectedIndex ( ) == NUM00 ) { editorTab . displayComment ( comment ) ; } }
public static $F96 hexStringToBytes ( String hexString ) { if $F3581 ( hexString ) $F1337 $F47567 ( hexString ) int length = $F8196 ( hexString ) ; $F7782 ( hexChars , hexString ) $F2175 ( d , length ) for ( $F119 ( i , length ) ) { int pos = i * NUM00 ; d [ i ] = ( byte ) ( charToByte ( hexChars [ pos ] ) < < NUM00 | charToByte ( hexChars [ pos + NUM00 ] ) ) ; } return d ; }
private void decompose ( $F6689 elementPairs , $F6689 printerList , $F6689 parserList ) { $F115 ( size , elementPairs ) for ( $F6225 ( i , size ) ) { $F16628 ( element , elementPairs , i ) if ( element instanceof DateTimePrinter ) { if ( element instanceof Composite ) { addArrayToList ( printerList , ( ( Composite ) element ) . iPrinters ) ; } else $F207 ( printerList , element ) } $F14759 ( element , elementPairs , i ) if ( element instanceof DateTimeParser ) { if ( element instanceof Composite ) { addArrayToList ( parserList , ( ( Composite ) element ) . iParsers ) ; } else $F207 ( parserList , element ) } } }
private String processIntegerToken ( String token ) { String result = token . replaceAll ( NUM00 + groupSeparator , NUM00 ) ; boolean isNegative = _BOOL ; $F1749 ( preLen , negativePrefix ) if ( ( preLen > NUM00 ) && result . startsWith ( negativePrefix ) ) { isNegative = _BOOL ; $F11978 ( result , preLen ) } $F1749 ( sufLen , negativeSuffix ) if ( ( sufLen > NUM00 ) && result . endsWith ( negativeSuffix ) ) { isNegative = _BOOL ; result = result . substring ( result . length ( ) - sufLen , result . length ( ) ) ; } if ( isNegative ) result = NUM00 + result ; return result ; }
public void writeGraphics ( String graphicsSaveFile ) throws IOException { $F4649 ( ostream , graphicsSaveFile ) $F7054 ( objectstream , ostream ) writeGraphics ( objectstream ) ; $F59 ( objectstream ) }
$F1 public void addInputNode ( BNode inputNode ) { super . addInputNode ( inputNode ) ; }
public void removeDependency ( TaskDependency dep ) { Node srcNode = myNodeMap . get ( dep . getDependee ( ) ) ; Node dstNode = myNodeMap . get ( dep . getDependant ( ) ) ; if ( srcNode == null && dstNode == null ) $F932 assert ( srcNode != null && dstNode != null ) : NUM00 + dep + NUM00 ; DependencyEdge diedEdge = findExplicitDependency ( dep , srcNode , dstNode ) ; $F2329 ( diedEdge ) removeEdge ( diedEdge ) ; for ( DependencyEdge edge : Lists . newArrayList ( srcNode . getOutgoing ( ) ) ) { if ( edge instanceof ImplicitInheritedDependency ) { if ( ( ( ImplicitInheritedDependency ) edge ) . myExplicitDep == diedEdge ) { removeEdge ( edge ) ; } } } fireGraphChanged ( ) ; }
$F13429 ( criteria , createCriteriaInternal , oredCriteria )
$F227258 ( filename , extensions , _BOOL , indexOfExtension , fileExt , getExtension , extension )
public VNXeCommandJob modifyConsistencyGroupAsync ( String id , LunGroupModifyParam param ) { $F7542 ( urlBld , URL_MODIFY1 ) urlBld . append ( id ) ; urlBld . append ( URL_MODIFY2 ) ; $F6947 ( _url , urlBld ) return postRequestAsync ( param ) ; }
public Object readRemote $F72 throws IOException { String type = readType ( ) ; String url = readString ( ) ; return resolveRemote ( type , url ) ; }
private static JFreeChart createChart $F72 { $F38363 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) $F38365 ( series1 ) XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory . createTimeSeriesChart ( NUM00 , NUM00 , NUM00 , dataset , _BOOL , _BOOL , _BOOL ) ; }
private void DTDprolog $F72 throws $F55616 { $F42851 ( writer , m_writer ) if ( m_needToOutputDocTypeDecl ) { outputDocTypeDecl ( m_elemContext . m_elementName , _BOOL ) ; m_needToOutputDocTypeDecl = _BOOL ; } if ( m_inDoctype ) { $F3410 ( writer ) $F11584 ( writer , m_lineSep , m_lineSepLen ) m_inDoctype = _BOOL ; } }
public CacheSet querySequential ( Predicate ... selectors ) { checkNotNull ( selectors ) ; $F5363 $F10252 ( resultCollection , items ) ; $F5363 $F19827 ( filterCollection ) ; $F5363 tempCollection ; int i = NUM00 ; while ( ( i < selectors . length ) && $F3817 ( resultCollection ) ) { CollectionUtils . select ( resultCollection , selectors [ i ] , filterCollection ) ; tempCollection = resultCollection ; resultCollection = filterCollection ; filterCollection = tempCollection ; $F725 ( filterCollection ) i ++ ; } return new CacheSet ( resultCollection ) ; }
$F1 public boolean isErrorEnabled $F72 { return logger . isLoggable ( Level . SEVERE ) ; }
public static $F20163 SetTValue $F20163 fromStream ( final AnyMValue < Stream $F20163 > monads ) { return of ( monads . map ( null ) ) ; }
public static CCBitmapFontConfiguration FNTConfigLoadFile ( String fntFile ) { CCBitmapFontConfiguration ret = null ; if ( configurations == null ) configurations = new HashMap < String , CCBitmapFontConfiguration > $F72 ; ret = configurations . get ( fntFile ) ; if ( ret == null ) { ret = CCBitmapFontConfiguration . configuration ( fntFile ) ; configurations . put ( fntFile , ret ) ; } return ret ; }
public void addCriteria ( Criteria otherCriteria ) { if ( otherCriteria instanceof AdvancedCriteria || otherCriteria instanceof Criterion ) $F11813 Map otherMap = otherCriteria . getValues ( ) ; $F304893 ( otherKeys , otherMap ) for ( $F2774 ( i , otherKeys ) ) { $F2778 ( field , i ) $F16628 ( value , otherMap , field ) JSOHelper . setAttribute ( jsObj , field , value ) ; } }
public DNetscapeSslServerName $F157465 ( parent , value ) throws IOException $F157466 ( super , parent , setTitle , res , initComponents , prepopulateWithValue , value )
public static $F80820 resizeArray ( $F80820 oldArray , int newSize ) { $F1338 ( oldArray ) if ( oldArray . length == newSize ) { return oldArray ; } $F80820 newArray = new EventBean [ newSize ] ; int preserveLength = Math . min ( oldArray . length , newSize ) ; $F263472 ( preserveLength , System , oldArray , newArray ) return newArray ; }
public static SpannableString spanText ( CharSequence text , Object ... spans ) { SpannableString spannableString = new SpannableString ( text ) ; for ( Object span : spans ) { spannableString . setSpan ( span , NUM00 , text . length ( ) , Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } return spannableString ; }
$F1431 protected $F4203 $F5675 query ( $F20474 modelClass , $F806 columns , String selection , $F806 selectionArgs , String groupBy , String having , String orderBy , String limit , List < AssociationsInfo > foreignKeyAssociations ) { $F237846 ( dataList ) Cursor cursor = null ; try { $F221457 $F31993 ( supportedFields , getSupportedFields , modelClass ) ; String tableName = getTableName ( modelClass ) ; $F31405 ( customizedColumns , getCustomizedColumns , columns , foreignKeyAssociations ) cursor = mDatabase . query ( tableName , customizedColumns , selection , selectionArgs , groupBy , having , orderBy , limit ) ; if $F17816 ( cursor ) { SparseArray < QueryInfoCache > queryInfoCacheSparseArray = new SparseArray < QueryInfoCache > $F72 ; do { T modelInstance = ( T ) createInstanceFromClass ( modelClass ) ; giveBaseObjIdValue ( ( DataSupport ) modelInstance , cursor . getLong ( cursor . getColumnIndexOrThrow ( NUM00 ) ) ) ; setValueToModel ( modelInstance , supportedFields , foreignKeyAssociations , cursor , queryInfoCacheSparseArray ) ; if ( foreignKeyAssociations != null ) { setAssociatedModel ( ( DataSupport ) modelInstance ) ; } dataList . add ( modelInstance ) ; } while $F12260 ( cursor ) ; $F725 ( queryInfoCacheSparseArray ) } return dataList ; } catch ( Exception e ) { $F301 ( e ) throw new DataSupportException $F1783 ( e ) ; } $F14364 ( cursor ) }
private MLTResult buildQueryForField ( String fieldName , PriorityQueue < MLTTerm > q , BooleanQuery query , boolean contentStreamQuery ) { List < MLTTerm > interestingTerms = new ArrayList < MLTTerm > $F72 ; int qterms = NUM00 ; int maxTerms = maxQueryTermsPerField ; if ( maxTerms <= NUM00 ) $F7984 ( maxTerms , Integer ) BooleanQuery tmpQuery = new BooleanQuery $F72 ; double sumQuaredBoost = NUM00 ; MLTTerm cur ; while ( ( cur = q . pop ( ) ) != null ) { Query tq = null ; final Term term = new Term ( cur . getFieldName ( ) , cur . getWord ( ) ) ; if ( isPayloadField ( cur . getFieldName ( ) ) ) { tq = new PayloadTermQuery ( term , new AveragePayloadFunction $F72 , _BOOL ) ; } else { tq = new TermQuery ( term ) ; } if ( boost ) { float boost = cur . getScore ( ) ; tq . setBoost ( boost ) ; sumQuaredBoost += boost * boost ; } else { sumQuaredBoost += NUM00 ; } try { tmpQuery . add ( tq , BooleanClause . Occur . SHOULD ) ; interestingTerms . add ( cur ) ; qterms ++ ; } catch ( BooleanQuery . TooManyClauses ignore ) $F5153 $F66497 ( qterms , maxTerms ) } $F96817 ( vectorLength , Math , sumQuaredBoost ) if ( vectorLength <= NUM00 ) { return new MLTResult ( interestingTerms , query ) ; } buildBoostedNormalizedQuery ( fieldName , tmpQuery , query , vectorLength , contentStreamQuery ) ; return new MLTResult ( interestingTerms , query ) ; }
$F1431 protected void sequentially ( Consumer < Marker > ... functions ) { if $F12414 ( functions ) $F665 Collection < ParsingException > $F204 ( errors ) ; Marker marker = tokens . mark ( ) ; for ( Consumer < Marker > function : functions ) { try { function . accept ( marker ) ; $F665 } catch ( ParsingException e ) { errors . add ( e ) ; tokens . rewind ( marker ) ; } } parsingFailed ( marker . position ( ) , errors , NUM00 ) ; }
public PidFile ( final File file ) throws FileNotFoundException { if $F170765 ( file ) { throw new FileNotFoundException ( NUM00 + file + NUM00 ) ; } this . pidFile = file ; }
public void addChildNode ( ExecNode childNode ) $F207 ( childNodes , childNode )
static private double quickSelect ( IDoubleVector x , int k , int start , int end ) { if ( k < start || k > end ) { throw new AdeCoreIllegalArgumentException $F580 ; } final int pivotIndex = ( ( int ) Math . random ( ) * ( end - start + NUM00 ) ) + start ; final int pivotPosition = partition ( x , start , end , pivotIndex ) ; if ( pivotPosition == k ) $F8314 ( x , k ) else if ( pivotPosition < k ) { return quickSelect ( x , k , pivotPosition + NUM00 , end ) ; } else { return quickSelect ( x , k , start , pivotPosition - NUM00 ) ; } }
public BayesImEditorObs ( BayesImWrapperObs bayesImWrapperObs ) { this ( bayesImWrapperObs , bayesImWrapperObs . getBayesIm ( ) ) ; }
private $F3803 convertByteArrayListToStringValueList ( $F4358 ( dictionaryByteArrayList ) ) { $F4361 ( valueList , dictionaryByteArrayList ) for ( $F96 value : dictionaryByteArrayList ) { valueList . add ( new String ( value , Charset . forName ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ) ; } return valueList ; }
public FileTreeNode ( File parent , String name ) throws SecurityException , FileNotFoundException { this ( parent . toPath ( ) , name ) ; }
private $F27878 possibleParents ( Node x , $F27878 adjx , IKnowledge knowledge ) { $F27878 $F19827 ( possibleParents ) ; $F20605 ( _x , x ) for ( Node z : adjx ) { $F20605 ( _z , z ) if ( possibleParentOf ( _z , _x , knowledge ) ) $F207 ( possibleParents , z ) } return possibleParents ; }
public synchronized void remove ( AbstractOption option ) { if $F105 ( options , option ) { int position = indexOf ( option ) ; List < AbstractOption > oldOptions = new ArrayList < AbstractOption > ( options ) ; options . remove ( option ) ; List < AbstractOption > newOptions = getOptions ( ) ; option . setCollection ( null ) ; fireIndexedPropertyChange ( PROP_OPTIONS , position , oldOptions , newOptions ) ; } }
private $F5415 calculatePointerPosition ( float angle ) { float x = ( float ) $F68927 ( mColorWheelRadius , Math , angle ) ; float y = ( float ) $F68922 ( mColorWheelRadius , Math , angle ) ; return new float [ ] { x , y } ; }
public ResourceNode locate ( String sessionID , String path , ResourceNode startNode ) throws DirectoryNotFoundException { if ( path == null ) $F4915 ( getCurrentNode , sessionID ) else if $F7311 ( path , PROTOCOL ) $F262837 ( path , PROTOCOL ) else if ( path . startsWith ( ROOT_ELEMENT ) && $F40307 ( path , ROOT_ELEMENT ) ) { startNode = getRootNode ( ) ; $F11255 ( path , ROOT_ELEMENT ) } if $F1238 ( path , CURRENT_ELEMENT ) return getCurrentNode ( sessionID ) ; else if $F1238 ( path , ROOT_ELEMENT ) return getRootNode ( ) ; ResourceNode foundNode = null ; ResourceNode nodeToSearch = startNode ; String pathElements [ ] = path . split ( PATH_SEPARATOR ) ; if $F9634 ( pathElements ) $F2905 ( getRootNode ) for ( String element : pathElements ) { if $F1277 ( element ) $F598 if $F1238 ( element , PARENT_ELEMENT ) { if ( ( foundNode = nodeToSearch . getParent ( ) ) != null ) $F10338 ( nodeToSearch ) else { throw new DirectoryNotFoundException $F10797 ( String , path ) ; } } else { Map < String , ResourceNode > children = nodeToSearch . getChildren ( ) ; if $F1238 ( element , ANY_ELEMENT ) { if ( nodeToSearch . getType ( ) == ResourceType . CLUSTER ) $F6045 ( foundNode , children , memberName ) else if $F3817 ( children ) { foundNode = getFirst ( children ) ; } else { throw new DirectoryNotFoundException $F4456 ( String , element , path ) ; } } else $F6045 ( foundNode , children , element ) if ( foundNode == null ) { throw new DirectoryNotFoundException ( String . format ( NUM00 , element , formatPath ( getAbsolutePath ( getRootNode ( ) , nodeToSearch , _BOOL ) , _BOOL ) , path ) ) ; } nodeToSearch = foundNode ; } } return foundNode ; }
private void handleProcessError ( JobDefinition job , Process process ) throws IOException { $F280 ( sb ) $F114263 ( in , process ) ; int data = NUM00 ; while ( data != - NUM00 && ! isInterrupted ( ) ) { $F10201 ( data , in ) if ( data != - NUM00 ) $F46352 ( sb , data ) } logger . warn ( NUM00 + job . cut + NUM00 + sb . toString ( ) ) ; }
$F5761 ( clazz , registeredClasses , isCurrentlySendingSemaphor , Thread , _BOOL )
$F9749 ( namespace , attName , attValue , xmlWriter , registerPrefix )
private static int calculateDisplayedWidth ( String string ) { final int tabWidth = DEFAULT_TAB_WIDTH ; int column = NUM00 ; for ( $F1088 ( i , string ) ) { if ( NUM00 == string . charAt ( i ) ) { column += tabWidth - ( column % tabWidth ) ; } else { column ++ ; } } return column ; }
private static GeneralizedTime finishDecodingFraction ( final String value , final int startPos , final int year , final int month , final int day , final int hour , final int minute , final int second , final int multiplier ) { $F11550 ( length , value ) final StringBuilder fractionBuffer = new StringBuilder ( ( NUM00 + length ) - startPos ) ; $F84 ( fractionBuffer ) TimeZone timeZone = null ; outerLoop : for ( int i = startPos ; i < length ; i ++ ) { $F1090 ( c , value , i ) switch ( c ) { $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 $F1262 fractionBuffer . append ( c ) ; $F597 $F1262 $F1262 if ( i != $F45793 ( value ) ) { final LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR . get ( value , String . valueOf ( c ) ) ; throw new LocalizedIllegalArgumentException ( message ) ; } timeZone = TIME_ZONE_UTC_OBJ ; break outerLoop ; $F1262 $F1262 timeZone = getTimeZoneForOffset ( value , i ) ; break outerLoop ; $F1267 final LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR . get ( value , String . valueOf ( c ) ) ; throw new LocalizedIllegalArgumentException ( message ) ; } } if $F1277 ( fractionBuffer ) { $F206930 ( message , WARN_ATTR_SYNTAX_GENERALIZED_TIME_EMPTY_FRACTION , value ) throw new LocalizedIllegalArgumentException ( message ) ; } if ( timeZone == null ) { $F206930 ( message , WARN_ATTR_SYNTAX_GENERALIZED_TIME_NO_TIME_ZONE_INFO , value ) throw new LocalizedIllegalArgumentException ( message ) ; } final Double fractionValue = Double . parseDouble ( fractionBuffer . toString ( ) ) ; final int $F22510 ( additionalMilliseconds , Math , fractionValue , multiplier ) ; try { final GregorianCalendar $F13062 ( calendar ) ; calendar . setLenient ( _BOOL ) ; calendar . setTimeZone ( timeZone ) ; calendar . set ( year , month , day , hour , minute , second ) ; calendar . set ( Calendar . MILLISECOND , additionalMilliseconds ) ; return new GeneralizedTime ( calendar , null , Long . MIN_VALUE , value ) ; } catch ( final Exception e ) { final LocalizableMessage message = WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME . get ( value , String . valueOf ( e ) ) ; throw new LocalizedIllegalArgumentException ( message , e ) ; } }
$F1 public int read $F72 { if $F11984 ( idx , charSequence ) $F7629 else $F7626 ( charSequence , idx ) }
public void test_getClientAliases $F72 { init ( CLIENT ) ; assertNull ( manager . getClientAliases ( null , null ) ) ; assertNull ( manager . getClientAliases ( NUM00 , null ) ) ; $F806 resArray = manager . getClientAliases ( TYPE_RSA , null ) ; assertNotNull ( resArray ) ; $F351896 ( assertEquals , resArray ) assertKnownAliases ( resArray ) ; }
$F27745 ( mUpdateListeners )
$F1431 E transfer ( E e , boolean timed , long nanos ) { QNode s = null ; boolean isData = ( e != null ) ; for ( $F589 ) { QNode t = tail ; QNode h = head ; if ( t == null || h == null ) $F598 if ( h == t || t . isData == isData ) { QNode tn = t . next ; if ( t != tail ) $F598 if ( tn != null ) $F171537 ( advanceTail , t , tn ) if ( timed && nanos <= NUM00 ) $F1274 if ( s == null ) s = new QNode ( e , isData ) ; if ( ! t . casNext ( null , s ) ) $F598 advanceTail ( t , s ) ; Object x = awaitFulfill ( s , e , timed , nanos ) ; if ( x == s ) { clean ( t , s ) ; $F1274 } if ( ! s . isOffList ( ) ) { advanceHead ( t , s ) ; if ( x != null ) s . item = s ; s . waiter = null ; } return ( x != null ) ? ( E ) x : e ; } else { QNode m = h . next ; if ( t != tail || m == null || h != head ) $F598 Object x = m . item ; if ( isData == ( x != null ) || x == m || ! m . casItem ( x , e ) ) $F171537 ( advanceHead , h , m ) advanceHead ( h , m ) ; $F139937 ( LockSupport , m ) return ( x != null ) ? ( E ) x : e ; } } }
public static void println ( char x ) $F18992 ( out , x )
private boolean shouldPositionAvatarOnRight $F72 { final boolean isRtl = Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR1 ? getLayoutDirection ( ) == LAYOUT_DIRECTION_RTL : _BOOL ; final boolean assignedPosition = mAvatarPosition == AVATAR_POSITION_END ; return isRtl ? ! assignedPosition : assignedPosition ; }
$F127810 ( charset , Charset )
public static void fail ( String message ) { throw new IllegalStateException $F81465 ( message ) ; }
public void memsetBuffer ( ByteBuffer buffer ) { memsetBuffer ( buffer , buffer . limit ( ) ) ; }
static double fabs ( double a ) $F170694 ( Math , a )
protected List < ITEM_TYPE > selectFoldTestItems ( List < ITEM_TYPE > items , int nFolds , int fold ) { List < ITEM_TYPE > testItems = new ArrayList < ITEM_TYPE > $F72 ; for ( $F3836 ( i , items ) ) { if ( i % nFolds == fold ) $F62006 ( testItems , items , i ) } return testItems ; }
private void endFormals $F72 { $F430955 ( hasFormals , _BOOL , buf ) }
public final CharSequenceTranslator with ( final CharSequenceTranslator ... translators ) { final $F126041 $F126044 ( newArray , translators ) ; newArray [ NUM00 ] = this ; $F7057 ( System , translators , newArray ) $F126047 ( newArray ) }
$F1 public boolean equals ( Object other ) { if ( ! ( other instanceof Sha256Hash ) ) return _BOOL ; return Arrays . equals ( bytes , ( ( Sha256Hash ) other ) . bytes ) ; }
$F73303 ( axis , trans , prevImageSize , imageSize , prevViewSize , viewSize , drawableSize , m , Matrix , percentage , Math )
public Config ( SolrResourceLoader loader , String name ) throws ParserConfigurationException , IOException , SAXException { this ( loader , name , null , null ) ; }
private static HashMap < String , Field > buildFieldCache $F60993 ( cls ) { final HashMap < String , Field > $F8690 ( cache ) ; final $F221457 fields = getAllFields ( cls ) ; for ( Field fld : fields ) { String name = null ; final Reference refAnn = fld . getAnnotation ( Reference . class ) ; if ( refAnn != null ) name = selectColumnName ( refAnn , fld ) ; if ( name == null ) { final Column colAnn = fld . getAnnotation ( Column . class ) ; if ( colAnn != null ) name = selectColumnName ( colAnn , fld ) ; } $F45557 ( name ) cache . put ( name , fld ) ; } return cache ; }
public static long convertDuration ( final String fromUnit , final String toUnit , long value ) { TimeUnit fromTimeUnit = toTimeUnit ( fromUnit ) ; TimeUnit toTimeUnit = toTimeUnit ( toUnit ) ; if ( fromTimeUnit != null && toTimeUnit != null ) { return toTimeUnit . convert ( value , fromTimeUnit ) ; } else { throw new DSSException $F212372 ( fromUnit , toUnit , value ) ; } }
public static File searchForGroovyScriptFile ( String input ) { $F9652 ( scriptFileName , input ) $F1705 ( scriptFile , scriptFileName ) $F806 $F167305 ( standardExtensions ) ; int i = NUM00 ; while ( i < standardExtensions . length && $F1905 ( scriptFile ) ) { scriptFile = new File ( scriptFileName + standardExtensions [ i ] ) ; i ++ ; } if $F1906 ( scriptFile ) $F94463 ( scriptFile , scriptFileName ) return scriptFile ; }
public XObject execute ( XPathContext xctxt ) throws $F1872 { if ( xctxt . isSecureProcessing ( ) ) throw new $F1872 ( XPATHMessages . createXPATHMessage ( XPATHErrorResources . ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED , new Object $F57620 ( toString ) ) ) ; XObject result ; $F6518 ( argVec ) $F2199 ( nArgs , m_argVec ) for ( $F119 ( i , nArgs ) ) { $F11427 ( arg , m_argVec , i ) XObject xobj = arg . execute ( xctxt ) ; xobj . allowDetachToRelease ( _BOOL ) ; argVec . addElement ( xobj ) ; } ExtensionsProvider extProvider = ( ExtensionsProvider ) xctxt . getOwnerObject ( ) ; Object val = extProvider . extFunction ( this , argVec ) ; if ( null != val ) { result = XObject . create ( val , xctxt ) ; } else { result = new XNull $F72 ; } return result ; }
private Header createSecurityHeader $F72 { return new BasicHeader ( NUM00 , NUM00 + createAuth ( ) ) ; }
public Picture ( File file ) { try $F616 ( image , ImageIO , file ) catch ( IOException e ) { $F301 ( e ) $F1665 ( file ) } $F268943 ( image , file ) width = image . getWidth ( null ) ; height = image . getHeight ( null ) ; $F32928 ( filename , file ) }
static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , NUM00 ) ; $F26425 annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( annotationType . getDeclaredMethods ( ) . length == NUM00 ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( annotation ) ; }
public static String encode $F97 ( input ) { $F193057 ( input ) int zeros = NUM00 ; $F107776 ( zeros , input ) input = $F17877 ( Arrays , input ) ; $F10567 ( encoded , input ) int outputStart = encoded . length ; for ( $F107777 ( inputStart , zeros , input ) ) { encoded [ -- outputStart ] = ALPHABET [ divmod ( input , inputStart , NUM00 , NUM00 ) ] ; $F107780 ( input , inputStart ) } while $F304435 ( outputStart , encoded , ENCODED_ZERO ) { ++ outputStart ; } while ( -- zeros >= NUM00 ) { encoded [ -- outputStart ] = ENCODED_ZERO ; } return new String $F218 ( encoded , outputStart ) ; }
private void addVolumeToBlockConsistencyGroup ( URI cgUri , Volume volume ) { volume . addConsistencyGroup ( cgUri . toString ( ) ) ; _dbClient . persistObject ( volume ) ; }
public static boolean lazyGaussianElimination ( final int var2Eq [ ] [ ] , final $F2469 c , final $F2027 variable , final $F2469 solution ) { return lazyGaussianElimination ( null , var2Eq , c , variable , solution ) ; }
private static int analyze ( Compiler compiler , int stepOpCodePos , int stepIndex ) throws $F1872 { int stepType ; int stepCount = NUM00 ; int analysisResult = NUM00 ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { stepCount ++ ; boolean predAnalysis = analyzePredicate ( compiler , stepOpCodePos , stepType ) ; if ( predAnalysis ) analysisResult |= BIT_PREDICATE ; switch ( stepType ) { case OpCodes . OP_VARIABLE : case OpCodes . OP_EXTFUNCTION : case OpCodes . OP_FUNCTION : case OpCodes . OP_GROUP : analysisResult |= BIT_FILTER ; $F597 case OpCodes . FROM_ROOT : analysisResult |= BIT_ROOT ; $F597 case OpCodes . FROM_ANCESTORS : analysisResult |= BIT_ANCESTOR ; $F597 case OpCodes . FROM_ANCESTORS_OR_SELF : analysisResult |= BIT_ANCESTOR_OR_SELF ; $F597 case OpCodes . FROM_ATTRIBUTES : analysisResult |= BIT_ATTRIBUTE ; $F597 case OpCodes . FROM_NAMESPACE : analysisResult |= BIT_NAMESPACE ; $F597 case OpCodes . FROM_CHILDREN : analysisResult |= BIT_CHILD ; $F597 case OpCodes . FROM_DESCENDANTS : analysisResult |= BIT_DESCENDANT ; $F597 case OpCodes . FROM_DESCENDANTS_OR_SELF : if ( NUM00 == stepCount && BIT_ROOT == analysisResult ) { analysisResult |= BIT_ANY_DESCENDANT_FROM_ROOT ; } analysisResult |= BIT_DESCENDANT_OR_SELF ; $F597 case OpCodes . FROM_FOLLOWING : analysisResult |= BIT_FOLLOWING ; $F597 case OpCodes . FROM_FOLLOWING_SIBLINGS : analysisResult |= BIT_FOLLOWING_SIBLING ; $F597 case OpCodes . FROM_PRECEDING : analysisResult |= BIT_PRECEDING ; $F597 case OpCodes . FROM_PRECEDING_SIBLINGS : analysisResult |= BIT_PRECEDING_SIBLING ; $F597 case OpCodes . FROM_PARENT : analysisResult |= BIT_PARENT ; $F597 case OpCodes . FROM_SELF : analysisResult |= BIT_SELF ; $F597 case OpCodes . MATCH_ATTRIBUTE : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ATTRIBUTE ) ; $F597 case OpCodes . MATCH_ANY_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_ANCESTOR ) ; $F597 case OpCodes . MATCH_IMMEDIATE_ANCESTOR : analysisResult |= ( BIT_MATCH_PATTERN | BIT_PARENT ) ; $F597 $F1267 throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NULL_ERROR_HANDLER , $F19685 ( Integer , stepType ) ) ) ; } if ( OpCodes . NODETYPE_NODE == compiler . getOp ( stepOpCodePos + NUM00 ) ) { analysisResult |= BIT_NODETEST_ANY ; } stepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; $F7995 ( stepOpCodePos ) } analysisResult |= ( stepCount & BITS_COUNT ) ; return analysisResult ; }
public void compressMyOwnWay $F23416 ( indexes ) { $F3807 list = new $F15272 ( CarbonCommonConstants . CONSTANT_SIZE_TEN ) ; $F3807 map = new $F15272 ( CarbonCommonConstants . CONSTANT_SIZE_TEN ) ; int k = NUM00 ; int i = NUM00 ; for ( $F255681 ( i , indexes ) ) { if ( $F52395 ( indexes , i ) == NUM00 ) { k ++ ; } else { if ( k > NUM00 ) { map . add ( $F716 ( list ) ) ; list . add ( indexes [ i - k - NUM00 ] ) ; list . add ( indexes [ i - NUM00 ] ) ; } else { list . add ( indexes [ i - NUM00 ] ) ; } k = NUM00 ; } } if ( k > NUM00 ) { map . add ( $F716 ( list ) ) ; list . add ( indexes [ i - k - NUM00 ] ) ; list . add ( indexes [ i - NUM00 ] ) ; } else { list . add ( indexes [ i - NUM00 ] ) ; } dataAfterComp = convertToArray ( list ) ; if $F6763 ( indexes , dataAfterComp ) { $F4470 ( indexMap ) } else { indexMap = convertToArray ( map ) ; } if ( dataAfterComp . length == NUM00 && indexMap . length == NUM00 ) { alreadySorted = _BOOL ; } }
private void prependDecrement ( BasicBlock bb , IR ir ) { if ( DEBUG ) VM . sysWrite ( NUM00 + bb + NUM00 ) ; RegisterOperand use = cbsReg . copyRO ( ) ; RegisterOperand def = use . copyU2D ( ) ; Instruction inc = Binary . create ( INT_ADD , def , use , IRTools . IC ( - NUM00 ) ) ; bb . prependInstruction ( inc ) ; }
public void addListener ( ConnectableDeviceListener listener ) $F2202 ( listeners , listener )
private static final String toHexString $F3295 ( bs ) { String hex = NUM00 ; $F83 ( res ) for ( byte b : bs ) { res . append ( hex . charAt ( $F97528 ( b ) ) ) ; res . append ( hex . charAt ( ( b & NUM00 ) ) ) ; } $F92 ( res ) }
$F46593 ( checkNotClosed , trimToSize , journalWriter )
public double distance_to_the_left ( PlaLineInt p_line ) { double result = Integer . MAX_VALUE ; for ( $F2010 ( index , border_line_count ) ) { PlaPointFloat curr_corner = corner_approx ( index ) ; PlaSide line_side = p_line . side_of ( curr_corner , NUM00 ) ; if ( line_side == PlaSide . COLLINEAR ) { line_side = p_line . side_of ( corner ( index ) ) ; } if ( line_side == PlaSide . ON_THE_RIGHT ) $F150 result = Math . min ( result , p_line . distance_signed ( curr_corner ) ) ; } return result ; }
$F192509 ( is , close , b , len , _BOOL , n , c , System , last )
public boolean displayTopicFromNames $F4374 ( names ) { if $F9634 ( names ) return displayTopic ( DEFAULT ) ; else { $F280 ( helpName ) for ( String name : names ) { $F275070 ( helpName ) helpName . append ( name ) ; } $F17718 ( displayTopic , helpName ) } }
public boolean acceptIdentical ( String filePath , String fileName ) { $F397 ( fileNameGlob , _BOOL ) if $F45007 ( fileName , fileNameGlob ) return _BOOL ; if ( filePath != null ) { $F24867 ( lastUnixPos , filePath ) $F24867 ( lastWindowsPos , filePath ) $F17432 ( index , Math , lastUnixPos , lastWindowsPos ) $F36289 ( filename , filePath , index ) return filename != null && filename . equalsIgnoreCase ( fileNameGlob ) ; } return _BOOL ; }
private void validateNumCoresBlockSort $F72 { String numCoresStr = carbonProperties . getProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; try { $F27213 ( numCores , Integer , numCoresStr ) if ( numCores < CarbonCommonConstants . NUM_CORES_BLOCK_SORT_MIN_VAL || numCores > CarbonCommonConstants . NUM_CORES_BLOCK_SORT_MAX_VAL ) { LOGGER . info ( NUM00 + numCoresStr + NUM00 + CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; } } catch ( NumberFormatException e ) { LOGGER . info ( NUM00 + numCoresStr + NUM00 + CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; carbonProperties . setProperty ( CarbonCommonConstants . NUM_CORES_BLOCK_SORT , CarbonCommonConstants . NUM_CORES_BLOCK_SORT_DEFAULT_VAL ) ; } }
public static MemoryMatchFragment newInstance $F72 { return new MemoryMatchFragment $F72 ; }
static void createFileFromResource ( String resource , Resource file ) throws IOException $F16625 ( createFileFromResource , resource , file )
public int endObject $F72 { if ( vtable == null || ! nested ) $F38997 addInt ( NUM00 ) ; int vtableloc = offset ( ) ; for ( $F18298 ( i , vtable_in_use ) ) { short off = ( short ) ( vtable [ i ] != NUM00 ? vtableloc - vtable [ i ] : NUM00 ) ; addShort ( off ) ; } final int standard_fields = NUM00 ; addShort ( ( short ) ( vtableloc - object_start ) ) ; addShort ( ( short ) ( ( vtable_in_use + standard_fields ) * SIZEOF_SHORT ) ) ; int existing_vtable = NUM00 ; outer_loop : for ( $F119 ( i , num_vtables ) ) { int vt1 = bb . capacity ( ) - vtables [ i ] ; int vt2 = space ; short len = bb . getShort ( vt1 ) ; if ( len == bb . getShort ( vt2 ) ) { for ( int j = SIZEOF_SHORT ; j < len ; j += SIZEOF_SHORT ) { if ( bb . getShort ( vt1 + j ) != bb . getShort ( vt2 + j ) ) { continue outer_loop ; } } existing_vtable = vtables [ i ] ; break outer_loop ; } } if ( existing_vtable != NUM00 ) { space = bb . capacity ( ) - vtableloc ; bb . putInt ( space , existing_vtable - vtableloc ) ; } else { if ( num_vtables == vtables . length ) vtables = Arrays . copyOf ( vtables , num_vtables * NUM00 ) ; vtables [ num_vtables ++ ] = offset ( ) ; bb . putInt ( bb . capacity ( ) - vtableloc , offset ( ) - vtableloc ) ; } nested = _BOOL ; return vtableloc ; }
private void endList ( boolean orderedList ) { if $F5973 ( mParagraphStyles ) { AccumulatedParagraphStyle style = mParagraphStyles . peek ( ) ; ParagraphType type = style . getType ( ) ; if ( ( orderedList && ( type . isNumbering ( ) || type == ParagraphType . INDENTATION_OL ) ) || ( ! orderedList && ( type . isBullet ( ) || type == ParagraphType . INDENTATION_UL ) ) ) { int indent = style . getRelativeIndent ( ) ; if ( indent > NUM00 ) { style . setRelativeIndent ( indent - NUM00 ) ; style . setAbsoluteIndent ( style . getAbsoluteIndent ( ) - NUM00 ) ; } else $F89427 ( mParagraphStyles ) } else { $F34454 ( mParagraphStyles ) endList ( orderedList ) ; } } }
public static void perspectiveM ( $F1986 m , int offset , double fovy , double aspect , double zNear , double zFar ) { double f = NUM00 / $F122199 ( Math , fovy ) ; double rangeReciprocal = NUM00 / ( zNear - zFar ) ; m [ offset + NUM00 ] = f / aspect ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = f ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = ( zFar + zNear ) * rangeReciprocal ; m [ offset + NUM00 ] = - NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 ; m [ offset + NUM00 ] = NUM00 * zFar * zNear * rangeReciprocal ; m [ offset + NUM00 ] = NUM00 ; }
protected double compute ( String value ) { if ( value != null ) { try $F2404 ( Double , value ) catch ( NumberFormatException e ) { if ( POSITIVE_INFINITY_ <missing ')'> $F94540 ( value ) ) $F90685 ( Double ) <missing '}'> else if ( NEGATIVE_INFINITY_ <missing ')'> $F94540 ( value ) ) $F86429 ( Double ) return Double . NaN ; }
protected int readBlock $F72 { blockSize = read ( ) ; int n = NUM00 ; if ( blockSize > NUM00 ) { try { int count = NUM00 ; while ( n < blockSize ) { count = in . read ( block , n , blockSize - n ) ; $F167039 ( count ) n += count ; } } $F29052 if ( n < blockSize ) { status = STATUS_FORMAT_ERROR ; } } return n ; }
boolean isDuplicateRoleColumn ( int column ) $F298 ( duplicateRoleColumn , column )
public TimestampSpeechletRequestVerifier ( long tolerance , TimeUnit unit ) { $F6853 ( tolerance ) toleranceInMilliseconds = unit . toMillis ( tolerance ) ; }
private boolean isOutsideDocElem $F72 { return ( null == m_docFrag ) && $F10470 ( m_elemStack ) && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; }
public void shutdown $F72 { CountDownLatch wait_l ; $F37039 ( this , wait_l , waitShutdown ) Shutdown_ind = _BOOL ; try { if ( wait_l != null ) { if ( wait_l . await ( NUM00 , TimeUnit . MILLISECONDS ) ) $F973 ( LOG ) else $F10910 ( LOG ) } else $F22715 ( LOG ) } catch ( InterruptedException int_exc ) $F10911 ( LOG ) }
void paintStrokes ( Rectangle r , Graphics g , int axis , $F2027 lengthPattern , $F197086 colorPattern ) { boolean xAxis = ( axis == View . X_AXIS ) ; int start = NUM00 ; int end = ( xAxis ? r . width : r . height ) ; while ( start < end ) { for ( $F1139 ( i , lengthPattern ) ) { $F66497 ( start , end ) int length = lengthPattern [ i ] ; Color c = colorPattern [ i ] ; if ( c != null ) { int x = r . x + ( xAxis ? start : NUM00 ) ; int y = r . y + ( xAxis ? NUM00 : start ) ; int width = xAxis ? length : r . width ; int height = xAxis ? r . height : length ; g . setColor ( c ) ; g . fillRect ( x , y , width , height ) ; } start += length ; } } }
private void deleteChildren ( Element container ) { while $F49521 ( container ) { container . removeChild ( container . getLastChild ( ) ) ; } }
public String fillParamWithEventAttrib ( String paramData , Event event ) { if $F57476 ( database ) { throw new IllegalStateException ( TAG + NUM00 ) ; } $F83 ( retVal ) int cursor = NUM00 ; while $F7007 ( cursor , paramData ) { $F12712 ( openBracketIdx , paramData , cursor ) $F12712 ( closeBracketIdx , paramData , cursor ) if ( openBracketIdx == - NUM00 || closeBracketIdx == - NUM00 || openBracketIdx + NUM00 >= closeBracketIdx ) { $F13047 ( retVal , paramData , cursor ) $F597 } $F129846 ( attr , paramData , openBracketIdx , closeBracketIdx ) String param = paramData . substring ( openBracketIdx , closeBracketIdx + NUM00 ) ; String paramAttr ; try { paramAttr = event . getAttribute ( attr ) ; } catch ( IllegalArgumentException e ) { paramAttr = param ; } $F13037 ( retVal , paramData , cursor , openBracketIdx ) retVal . append ( paramAttr ) ; cursor = closeBracketIdx + NUM00 ; } Log . d ( NUM00 , $F31144 ( paramData , retVal ) ) ; $F92 ( retVal ) }
public static double twoPow ( int power ) { if ( power <= - MAX_DOUBLE_EXPONENT ) { if ( power >= MIN_DOUBLE_EXPONENT ) { return Double . longBitsToDouble ( NUM00 > > ( - ( power + MAX_DOUBLE_EXPONENT ) ) ) ; } else $F1083 } else if ( power > MAX_DOUBLE_EXPONENT ) $F90685 ( Double ) else { return Double . longBitsToDouble ( ( ( long ) ( power + MAX_DOUBLE_EXPONENT ) ) < < NUM00 ) ; } }
$F1431 public static Type resolveTypeVariable ( TypeVariable name , Class declaringClass , Class topClass ) { Type type = resolveTypeVariable ( name , declaringClass , $F4190 , topClass ) ; if ( type == null ) { type = $F12222 ; } return type ; }
private ResourceImpl aggregate ( ResourceImpl resourceA , ResourceImpl resourceB ) throws NotFoundException { final String typeId = resourceA . getType ( ) ; final ResourceType resourceType = getResourceType ( typeId ) ; return resourceType . aggregate ( resourceA , resourceB ) ; }
public static boolean renameFile $F1947 ( filePath , oldFilename , newFilename ) { if ( ( filePath == null ) || filePath . isEmpty ( ) || ( oldFilename == null ) || oldFilename . isEmpty ( ) || ( newFilename == null ) || newFilename . isEmpty ( ) ) { return _BOOL ; } File oldFile = new File ( filePath + File . separator + oldFilename ) ; File newFile = new File ( filePath + File . separator + newFilename ) ; boolean isSuccessfulRename ; try { isSuccessfulRename = oldFile . renameTo ( newFile ) ; } catch ( Exception e ) { $F246959 ( logger , e , System , StackTrace ) isSuccessfulRename = _BOOL ; } return isSuccessfulRename ; }
$F22609 public void startImageScan ( String dataStore , Long scanRate , Long timeout , AsyncMethodCallback < Host . AsyncClient . start_image_scan_call > handler ) throws RpcException { ensureClient ( ) ; StartImageScanRequest request = new StartImageScanRequest ( dataStore ) ; if ( null != scanRate ) { request . setScan_rate ( scanRate ) ; } if ( null != timeout ) { request . setTimeout ( timeout ) ; } try { $F22629 ( logger , getHostIp , request ) clientProxy . setTimeout ( START_IMAGE_SCAN_TIMEOUT_MS ) ; clientProxy . start_image_scan ( request , handler ) ; } $F22635 ( e ) }
public static String format ( int n , String col ) { String res = padd + n ; return res . substring ( $F15171 ( res , col ) ) ; }
public GitConflictException ( String message ) { super ( message ) ; }
private void trace $F72 { glUseProgram ( photonTraceProgram ) ; $F25238 ( thisTime , System ) $F188873 ( elapsedSeconds , thisTime , firstTime ) glUniform1f ( timeUniform , elapsedSeconds ) ; glBindBufferBase ( GL_SHADER_STORAGE_BUFFER , boxesSsboBinding , ssbo ) ; glBindBufferBase ( GL_UNIFORM_BUFFER , imagesUboBinding , imageHandlesUbo ) ; int invocationsPerDimension = photonsPerFrame ; int worksizeX = mathRoundPoT ( invocationsPerDimension ) ; int worksizeY = mathRoundPoT ( invocationsPerDimension ) ; if ( variableGroupSize ) { ARBComputeVariableGroupSize . glDispatchComputeGroupSizeARB ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 , workGroupSizeX , workGroupSizeY , NUM00 ) ; } else { glDispatchCompute ( worksizeX / workGroupSizeX , worksizeY / workGroupSizeY , NUM00 ) ; } glMemoryBarrier ( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ) ; glBindBufferBase ( GL_SHADER_STORAGE_BUFFER , boxesSsboBinding , NUM00 ) ; glBindBufferBase ( GL_UNIFORM_BUFFER , imagesUboBinding , NUM00 ) ; glUseProgram ( NUM00 ) ; }
public caption addElement ( String element ) { addElementToRegistry ( Integer . toString ( element . hashCode ( ) ) , element ) ; return ( this ) ; }
protected void doResetCurrentPosition $F72 { this . currentPosition = this . position ; }
public FloatBuffer put $F11671 ( src , srcOffset , floatCount ) $F11682 ( JTranscArrays , src , srcOffset , floatCount , remaining , i , put , this )
public String readLine $F72 { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
private boolean messageChanged ( String oldMessage , String newMessage ) { return ( ( newMessage == null ) && ( oldMessage != null ) ) || ( ( newMessage != null ) && ! newMessage . equals ( oldMessage ) ) ; }
public static int copy ( InputStream in , OutputStream out ) throws IOException { $F18062 ( Assert , in ) $F18062 ( Assert , out ) try { return StreamUtils . copy ( in , out ) ; } finally { $F18072 ( in ) $F18072 ( out ) } }
private MultiLineString readMultiLine ( OraGeom oraGeom ) { int nElem = oraGeom . numElements ( ) ; $F19151 ( geoms ) for ( $F119 ( i , nElem ) ) { int etype = oraGeom . eType ( i ) ; if ( etype != OraGeom . ETYPE . LINE ) $F597 $F12366 ( geoms , readLine , oraGeom , i ) } MultiLineString lines = geometryFactory . createMultiLineString ( GeometryFactory . toLineStringArray ( geoms ) ) ; return lines ; }
public boolean isCalledMethod ( String className , String methodName ) { if $F2979 ( toTestMethods ) computeInterestingClasses ( graph ) ; if ( toTestMethods . contains ( className + methodName ) ) { return _BOOL ; } return _BOOL ; }
public Explanation idfExplain ( CollectionStatistics collectionStats , TermStatistics termStats [ ] ) { final long docCount = collectionStats . docCount ( ) == - NUM00 ? collectionStats . maxDoc ( ) : collectionStats . docCount ( ) ; float idf = NUM00 ; List < Explanation > $F204 ( details ) ; for ( final TermStatistics stat : termStats ) { final long df = stat . docFreq ( ) ; final float termIdf = idf ( df , docCount ) ; details . add ( Explanation . match ( termIdf , NUM00 + df + NUM00 + docCount + NUM00 ) ) ; idf += termIdf ; } return Explanation . match ( idf , NUM00 , details ) ; }
public void removeArea ( final Section AREA ) { $F77681 ( AREA ) areas . remove ( AREA ) ; Collections . sort ( areas , new SectionComparator $F72 ) ; fireUpdateEvent ( SECTION_EVENT ) ; }
public void testEmptyRunIndex $F72 { String rs = NUM00 ; Settings s = new Settings $F580 ; s . setSecondaryNamespace ( NUM00 ) ; assertEquals ( s . getInt ( rs ) , NUM00 ) ; Settings . setRunIndex ( NUM00 ) ; assertEquals ( s . getInt ( rs ) , NUM00 ) ; Settings . setRunIndex ( NUM00 ) ; assertEquals ( s . getInt ( rs ) , NUM00 ) ; Settings . setRunIndex ( NUM00 ) ; assertEquals ( s . getInt ( rs ) , NUM00 ) ; }
public void clear $F72 { $F101536 ( mLock , mGraphics ) postInvalidate ( ) ; }
$F1431 public void connect ( final BluetoothDevice device , final ILogSession session ) { $F153626 ( mManagedDevices , device ) mManagedDevices . add ( device ) ; BleManager < BleManagerCallbacks > manager = mBleManagers . get ( device ) ; if ( manager != null ) { if ( session != null ) manager . setLogger ( session ) ; manager . connect ( device ) ; } else { mBleManagers . put ( device , manager = initializeManager ( ) ) ; manager . setGattCallbacks ( BleMulticonnectProfileService . this ) ; manager . setLogger ( session ) ; manager . connect ( device ) ; } }
public void testCase19 $F72 { $F221347 $F221350 int aSign = NUM00 ; int bSign = - NUM00 ; byte $F3018 = { NUM00 , - NUM00 , NUM00 , NUM00 , NUM00 } ; $F3023 ( aNumber , aSign , aBytes ) $F3023 ( bNumber , bSign , bBytes ) $F221355 ( result , aNumber , bNumber ) $F3030 ( rBytes ) $F3031 ( resBytes , result ) $F3034 ( i , resBytes , assertTrue , rBytes ) $F3037 ( assertEquals , result ) }
public ScannerException ( ErrorMessages message ) { this ( null , ErrorMessages . get ( message ) , message , - NUM00 , - NUM00 ) ; }
$F60342 ( mSmallestWidthDp , mInPortrait )
$F49286 ( value , absMin , absMax , absValue , Math )
private static void formatTimeZone ( Calendar cal , StringBuilder buf ) { TimeZone tz = cal . getTimeZone ( ) ; $F8249 ( tz ) int offset ; if ( tz . inDaylightTime ( cal . getTime ( ) ) ) { offset = tz . getRawOffset ( ) + ( tz . useDaylightTime ( ) ? NUM00 : NUM00 ) ; } else { offset = tz . getRawOffset ( ) ; } if ( offset == NUM00 ) { $F84 ( buf ) $F665 } if ( offset >= NUM00 ) $F84 ( buf ) else { $F84 ( buf ) offset *= - NUM00 ; } offset /= NUM00 * NUM00 ; formatTwoDigits ( offset / NUM00 , buf ) ; $F84 ( buf ) formatTwoDigits ( offset % NUM00 , buf ) ; }
$F21351 ( l , last , p , item , first , count , notFull )
public MutableString ( final MutableString s ) { $F43187 ( makeCompactMutableString , s ) System . arraycopy ( s . array , NUM00 , array , NUM00 , array . length ) ; }
private void request $F72 { if ( isVisible ( ) && stream != null && $F1030 ( stream ) ) { loading = _BOOL ; if ( type == Type . FOLLOWERS ) { api . getFollowers ( stream ) ; } else if ( type == Type . SUBSCRIBERS ) { api . getSubscribers ( stream ) ; } } }
public $F373359 mungedStyle $F72 { $F373359 st = built ( ) ; if ( includeBasicEntityForSubject ) { st . remove ( entityDataAboutDecl ) ; st . remove ( entityDataVersionDecl ) ; st . remove ( entityDataDateModifiedDecl ) ; statement ( st , uris . entity ( ) + entity , SchemaDotOrg . VERSION , version ) ; statement ( st , uris . entity ( ) + entity , SchemaDotOrg . DATE_MODIFIED , dateModified ) ; } st . remove ( statementTypeDecl ) ; for ( ExtraInfo e : extraInfo ) { e . munge ( st ) ; } return st ; }
private void writeRequest ( final NextFilter nextFilter , final SocksProxyRequest request , int step ) { try { IoBuffer buf = null ; if ( step == SocksProxyConstants . SOCKS5_GREETING_STEP ) { buf = encodeInitialGreetingPacket ( request ) ; } else if ( step == SocksProxyConstants . SOCKS5_AUTH_STEP ) { buf = encodeAuthenticationPacket ( request ) ; if ( buf == null ) { step = SocksProxyConstants . SOCKS5_REQUEST_STEP ; } } if ( step == SocksProxyConstants . SOCKS5_REQUEST_STEP ) { buf = encodeProxyRequestPacket ( request ) ; } $F14257 ( buf ) writeData ( nextFilter , buf ) ; } $F19456 ( closeSession , ex ) }
public synchronized void putAsInt ( Object key , int value ) { put ( key , new Integer ( value ) ) ; }
public void close $F72 throws IOException { if ( writer != null ) $F881 ( writer ) else { cb = null ; closed = _BOOL ; } }
private CertPath buildCertPath ( X509Certificate endCert ) throws CertificatePathBuildingException { CertPathBuilder cpb = null ; try $F14527 ( cpb , CertPathBuilder ) catch ( NoSuchAlgorithmException e ) { throw new CertificatePathBuildingException $F11592 ( e ) ; } PKIXBuilderParameters params = CreatePKIXBuilderParameters ( endCert ) ; CertPathBuilderResult cpbResult ; try { cpbResult = cpb . build ( params ) ; } catch ( CertPathBuilderException e ) { throw new CertificatePathBuildingException ( e . getMessage ( ) , e . getCause ( ) ) ; } catch ( InvalidAlgorithmParameterException e ) { throw new CertificatePathBuildingException $F2808 ( e ) ; } CertPath cp = cpbResult . getCertPath ( ) ; return cp ; }
public void addConfiguration ( InputStream in ) throws $F16995 { ServiceManager sm = new ServiceManager ( token ) ; Document doc = SMSSchema . getXMLDocument ( in ) ; NodeList nodes = doc . getElementsByTagName ( SMSUtils . SERVICE ) ; for ( int i = NUM00 ; ( nodes != null ) && ( i < nodes . getLength ( ) ) ; i ++ ) { $F61359 ( serviceNode , nodes , i ) String sName = XMLUtils . getNodeAttributeValue ( serviceNode , SMSUtils . NAME ) ; String sVersion = XMLUtils . getNodeAttributeValue ( serviceNode , SMSUtils . VERSION ) ; Node configNode ; if ( sName . equals ( serviceName ) && $F1238 ( sVersion , version ) && ( ( configNode = XMLUtils . getChildNode ( serviceNode , SMSUtils . CONFIGURATION ) ) != null ) ) { CreateServiceConfig . createService ( sm , sName , sVersion , configNode , null ) ; } } }
public static int stringToDictId ( String str ) { try { $F151317 ( bytes , str ) return BytesUtil . readUnsigned ( bytes , NUM00 , bytes . length ) ; } catch ( UnsupportedEncodingException e ) $F1083 }
public void start $F72 throws IOException , MqttException { final String methodName = NUM00 ; try { log . fine ( CLASS_NAME , methodName , NUM00 , new Object [ ] { host , new Integer ( port ) , new Long ( conTimeout * NUM00 ) } ) ; SocketAddress sockaddr = new InetSocketAddress ( host , port ) ; socket = factory . createSocket ( ) ; socket . connect ( sockaddr , conTimeout * NUM00 ) ; } catch ( ConnectException ex ) { log . fine ( CLASS_NAME , methodName , NUM00 , null , ex ) ; throw new MqttException ( MqttException . REASON_CODE_SERVER_CONNECT_ERROR , ex ) ; } }
public void callSeriallyAndWait ( Runnable r ) { if ( isEdt ( ) ) $F11389 RunnableWrapper c = new RunnableWrapper ( r , NUM00 ) ; callSerially ( c ) ; flushEdt ( ) ; synchronized ( lock ) { while $F38402 ( c ) { try $F34522 ( lock ) catch ( InterruptedException err ) $F845 } } }
public List $F249696 find $F72 { $F27145 $F204 ( ids ) ; if ( innerQueries != null ) { for ( Query query : innerQueries ) { ids . addAll ( query . findInner ( ) ) ; } } else { if $F2979 ( mimeWhere ) $F15127 ( find ) for ( Map . Entry < String , Where > entry : mimeWhere . entrySet ( ) ) { ids = findIds ( ids , entry . getKey ( ) , entry . getValue ( ) ) ; } } return find ( ids ) ; }
public void persistBeanData ( Object bean , boolean printOnly ) $F19517 ( persistBeanTryCatch , bean , callPersistEmittedKeyValue , printOnly )
private void refill $F72 throws IOException { offset += usableLength ; int leftover = length - usableLength ; $F51886 ( System , buffer , usableLength , leftover ) int requested = buffer . length - leftover ; int returned = read ( input , buffer , leftover , requested ) ; length = returned < NUM00 ? leftover : returned + leftover ; if ( returned < requested ) usableLength = length ; else { usableLength = findSafeEnd ( ) ; if ( usableLength < NUM00 ) usableLength = length ; } wrapper . setText ( buffer , NUM00 , Math . max ( NUM00 , usableLength ) ) ; iterator . setText ( wrapper ) ; }
protected void fireInsertUpdate ( DocumentEvent evt ) { if ( tokenMarker != null ) { DocumentEvent . ElementChange ch = evt . getChange ( getDefaultRootElement ( ) ) ; if ( ch != null ) { tokenMarker . insertLines ( ch . getIndex ( ) + NUM00 , ch . getChildrenAdded ( ) . length - ch . getChildrenRemoved ( ) . length ) ; } } super . fireInsertUpdate ( evt ) ; }
final void push ( final Object object ) $F207 ( stack , object )
int pending $F72 $F1522 ( pending )
private boolean isIncluded ( final HttpServletRequest request ) { String uri = ( String ) request . getAttribute ( NUM00 ) ; boolean includeRequest = ! ( uri == null ) ; if $F7383 ( includeRequest , log ) { log . debug ( NUM00 + NUM00 , request . getRequestURL ( ) ) ; } return includeRequest ; }
public void drawDomainMarker ( Graphics2D g2 , ContourPlot plot , ValueAxis domainAxis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; $F10704 ( value , vm ) $F10706 ( range , domainAxis ) $F10707 ( range , value ) double x = domainAxis . valueToJava2D ( value , dataArea , RectangleEdge . BOTTOM ) ; Line2D line = new $F69931 ( x , dataArea . getMinY ( ) , x , dataArea . getMaxY ( ) ) ; Paint paint = marker . getOutlinePaint ( ) ; Stroke stroke = marker . getOutlineStroke ( ) ; g2 . setPaint ( paint != null ? paint : Plot . DEFAULT_OUTLINE_PAINT ) ; g2 . setStroke ( stroke != null ? stroke : Plot . DEFAULT_OUTLINE_STROKE ) ; g2 . draw ( line ) ; } }
$F66520 ( msg , startpos , count , sb , initialSubmode , tmp , submode , idx , _BOOL , ch , SUBMODE_ALPHA , isAlphaUpper , isAlphaLower , SUBMODE_LOWER , isMixed , SUBMODE_MIXED , PUNCTUATION , MIXED , next , isPunctuation , SUBMODE_PUNCTUATION , h , len , i , odd )
public void remove ( String attrName , String delValue ) { int index = indexOf ( attrName ) ; if ( index != - NUM00 ) { Attr attr = ( Attr ) _attrs . get ( index ) ; attr . removeValue ( delValue ) ; if $F10471 ( attr ) $F106 ( _attrs , index ) } }
private AppliedMigration createAppliedSchemaMigration $F72 { return new AppliedMigration ( NUM00 , NUM00 , MigrationVersion . fromVersion ( Integer . toString ( NUM00 ) ) , NUM00 , MigrationType . SCHEMA , NUM00 , null , $F4094 , NUM00 , NUM00 , _BOOL ) ; }
public static String makeSigAlg ( String digAlg , String encAlg ) { $F2936 ( digAlg ) if $F21935 ( encAlg ) encAlg = NUM00 ; return digAlg + NUM00 + encAlg ; }
public Table sample ( double proportion ) { int tableCount = ( int ) Math . round ( rowCount ( ) * proportion ) ; $F290678 ( table1Selection ) $F2027 selectedRecords = generateUniformBitmap ( tableCount , rowCount ( ) ) ; for ( int selectedRecord : selectedRecords ) $F207 ( table1Selection , selectedRecord ) return selectWhere ( table1Selection ) ; }
public static int indexOf $F214410 ( src , target , fromIdx ) { final int to = src . length - target . length + NUM00 ; for ( int i = fromIdx ; i < to ; i ++ ) { if ( src [ i ] == target [ NUM00 ] ) { boolean equals = _BOOL ; for ( int j = NUM00 , k = i + NUM00 ; j < target . length && equals ; j ++ , k ++ ) { if ( src [ k ] != target [ j ] ) { equals = _BOOL ; } } $F9303 ( equals , i ) } } $F150 }
$F1 public int read $F24576 ( buf , offset , length ) throws IOException { try { $F14469 ( _channel ) $F115 ( remaining , _readBuffer ) if ( remaining > NUM00 ) { _readBuffer . get ( buf , offset , remaining ) ; return remaining ; } $F725 ( _readBuffer ) $F83249 ( channelRead , _channel , _readBuffer ) $F14257 ( _readBuffer ) $F125151 ( channelRead ) _readBuffer . get ( buf , offset , channelRead ) ; return channelRead ; } catch ( InterruptedIOException e ) { if ( _throwReadInterrupts ) throw e ; $F120634 ( log , Level , e ) } catch ( IOException e ) { if ( _throwReadInterrupts ) throw e ; log . log ( Level . FINER , e . toString ( ) , e ) ; } $F150 }
String readUTF ( $F97523 , int off , int len ) { int offset = off ; $F280 ( buf ) for ( int end = offset + len ; offset < end ; ) { $F1473 ( ch , data , offset ) switch ( ch > > NUM00 ) { $F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F3366 $F597 $F3366 $F3366 if ( offset >= len ) $F1337 ch = $F74254 ( ch ) | $F44579 ( data , offset ) ; $F597 $F3366 if ( offset + NUM00 >= len ) $F1337 ch = $F74254 ( ch ) | $F196796 ( data , offset ) | $F44579 ( data , offset ) ; $F597 $F1267 if ( offset + NUM00 >= len ) $F1337 ch = $F74254 ( ch ) | $F44579 ( data , offset ) ; $F597 } $F36813 ( buf , ch ) } $F92 ( buf ) }
public TurtleWriter ( OutputStream out ) { this ( new OutputStreamWriter $F28311 ( out , Charset ) ) ; }
private char lookahead $F72 { return $F1093 ( curCharIndex , pattern ) ? pattern . charAt ( curCharIndex + NUM00 ) : EOF ; }
public static boolean isNumber ( String s ) { $F25111 ( s , _BOOL ) for ( $F2998 ( c , s ) ) { if ( ! Character . isDigit ( c ) ) { return _BOOL ; } } return _BOOL ; }
private State ( CircuitState circuitState , Duration timeoutDuration , EventCounter counter ) { this . circuitState = circuitState ; this . counter = counter ; if ( timeoutDuration . isZero ( ) || timeoutDuration . isNegative ( ) ) { timedOutTimeNanos = NUM00 ; } else { timedOutTimeNanos = ticker . read ( ) + timeoutDuration . toNanos ( ) ; } }
public void cleanup ( ButtonGroup bg ) { $F4578 ( bg , layerName ) cleanup ( ) ; }
public static Map < MetaKey , String > union ( final Map < MetaKey , String > providedMetaData , final Map < MetaKey , String > extractedMetaData ) { final int size1 = providedMetaData != null ? providedMetaData . size ( ) : NUM00 ; final int size2 = extractedMetaData != null ? extractedMetaData . size ( ) : NUM00 ; if ( size1 + size2 == NUM00 ) $F83145 ( Collections ) final Map < MetaKey , String > result = new $F4188 ( size1 + size2 ) ; if ( extractedMetaData != null ) $F96492 ( result , extractedMetaData ) if ( providedMetaData != null ) $F96492 ( result , providedMetaData ) $F20711 ( Collections , result ) }
public static $F1469 fix83600 $F53421 ( signature ) { if ( signature == null || signature . length < NUM00 ) return signature ; return Signature . removeCapture ( signature ) ; }
public static void formatDouble ( double source , int decimals , int precision , StringBuffer target ) { int scale = ( Math . abs ( source ) >= NUM00 ) ? decimals : precision ; if ( tooManyDigitsUsed ( source , scale ) || tooCloseToRound ( source , scale ) ) { formatDoublePrecise ( source , decimals , precision , target ) ; } else { formatDoubleFast ( source , decimals , precision , target ) ; } }
$F48363 ( input , offset , len , flags , decoder , _BOOL , temp , System )
protected View createChild ( String name ) { View view = null ; if $F22081 ( name , TF_PARENTID , TF_CLIENT_TYPE ) { view = new CCTextField ( this , name , NUM00 ) ; } else if $F1238 ( name , SEC_MH_COMMON ) { view = new CCSecondaryMasthead ( this , name ) ; } else if $F1238 ( name , PGTITLE ) { view = new CCPageTitle ( this , ptModel , name ) ; } else if $F55391 ( ptModel , name ) $F55392 ( view , ptModel , this , name ) else if $F1238 ( name , PROPERTY_ATTRIBUTE ) { view = new AMPropertySheet ( this , propertySheetModel , name ) ; } else if $F55391 ( propertySheetModel , name ) { view = propertySheetModel . createChild ( this , name , getModel ( ) ) ; } else { view = super . createChild ( name ) ; } return view ; }
public synchronized void draw ( final Graphics2D gfx , final float x , final float y ) { if $F931 ( isEmpty ) { m_textLayout . draw ( gfx , x , y ) ; for ( final CHighlighting highlighting : new ArrayList < CHighlighting > ( m_highlighting ) ) { final double bpX = ( x + highlighting . getStart ( ) ) - NUM00 ; final double bpY = ( y - m_charHeight ) + NUM00 ; final double bpW = highlighting . getEnd ( ) + NUM00 ; final double bpH = m_charHeight - NUM00 ; drawHighlighting ( gfx , bpX , bpY , bpW , bpH , highlighting . getColor ( ) ) ; } } }
public void writeMapEnd $F72 throws IOException $F12032 ( os )
public boolean isAbstract $F72 { return Modifier . isAbstract ( flags ) ; }
public static File relativeFile ( File f ) { if ( f . isAbsolute ( ) ) { f = relativeFile ( $F8806 , f ) ; } return f ; }
public XMLParser $F41327 ( namespace , schemas ) throws XMLException $F2248 ( jc , JAXBContext , namespace , marshaller , XMLSchemaUtils , schemas , unmarshaller , e )
private ArrayList < SpinnerLanguageElement > createSpinnerLanguages ( int avoidLanguage ) { ArrayList < SpinnerLanguageElement > result = new ArrayList < SpinnerLanguageElement > $F72 ; $F3803 languages = mSessionOptions . allLanguages ( ) ; for ( $F3836 ( i , languages ) ) { if ( i != avoidLanguage ) { result . add ( new SpinnerLanguageElement ( languages . get ( i ) , i ) ) ; } } return result ; }
public $F806 splitResourceName ( String serviceTypeName , String resourceName ) throws NameNotFoundException , SSOException , PolicyException { ServiceType st = getServiceType ( serviceTypeName ) ; Set prefixes = getManagedResourceNames ( serviceTypeName ) ; $F808 ( retVal ) if $F2979 ( prefixes ) { retVal [ NUM00 ] = NUM00 ; retVal [ NUM00 ] = resourceName ; return retVal ; } $F10531 ( iter , prefixes ) String tmp = null ; ResourceMatch matchResult = null ; boolean foundSuperMatch = _BOOL ; boolean foundExactMatch = _BOOL ; while $F2921 ( iter ) { $F103384 ( tmp , iter ) matchResult = st . compare ( resourceName , tmp ) ; if ( matchResult . equals ( ResourceMatch . SUPER_RESOURCE_MATCH ) ) $F3468 ( foundSuperMatch , _BOOL ) if ( matchResult . equals ( ResourceMatch . EXACT_MATCH ) ) $F3468 ( foundExactMatch , _BOOL ) } if ( foundSuperMatch ) { retVal [ NUM00 ] = tmp ; retVal [ NUM00 ] = st . getSubResource ( resourceName , tmp ) ; return retVal ; } if ( foundExactMatch ) { retVal [ NUM00 ] = tmp ; retVal [ NUM00 ] = NUM00 ; return retVal ; } retVal [ NUM00 ] = NUM00 ; retVal [ NUM00 ] = resourceName ; return retVal ; }
void materialize $F72 { $F44858 ( cachefill ) double min = Double . MAX_VALUE , max = Double . MIN_VALUE ; for ( $F119 ( i , cachefill ) ) { $F37717 ( min , Math , cachec , i ) $F37717 ( max , Math , cachec , i ) } LinearScale scale = new LinearScale ( min , max ) ; min = scale . getMin ( ) ; $F268954 ( max , scale ) this . base = min ; this . max = max ; this . binsize = ( max - min ) / this . destsize ; this . data = new long [ this . destsize < < NUM00 ] ; size = destsize ; final int end = cachefill ; cachefill = - NUM00 ; for ( $F119 ( i , end ) ) $F66563 ( increment , cachec , i , cachev ) cachec = null ; cachev = null ; }
$F32632 ( criteria , createCriteriaInternal , oredCriteria )
public ArrayFieldVector ( Field $F4203 field , $F10809 v1 , $F10809 v2 ) throws MathIllegalArgumentException , NullArgumentException { MathUtils . checkNotNull ( v1 ) ; MathUtils . checkNotNull ( v2 ) ; if ( v1 . length + v2 . length == NUM00 ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT ) ; } data = MathArrays . buildArray ( field , v1 . length + v2 . length ) ; $F7057 ( System , v1 , data ) $F11244 ( System , v2 , data , v1 ) this . field = field ; }
private void verifyTargetSessionIsLocalOrStateless ( SessionRequest req , SessionID sid ) throws SessionException , SessionRequestException , ForwardSessionRequestException { if ( statelessSessionManager . containsJwt ( sid ) ) $F932 String hostServerID = foreignSessionHandler . getCurrentHostServer ( sid ) ; if ( ! serverConfig . isLocalServer ( hostServerID ) ) { try { throw new ForwardSessionRequestException ( forward ( SESSION_SERVICE_URL_SERVICE . getSessionServiceURL ( hostServerID ) , req ) ) ; } catch ( SessionException se ) { if ( ! sessionService . checkServerUp ( hostServerID ) ) { String retryHostServerID = foreignSessionHandler . getCurrentHostServer ( sid ) ; if $F1238 ( retryHostServerID , hostServerID ) { throw se ; } else { if ( ! serverConfig . isLocalServer ( retryHostServerID ) ) { throw new ForwardSessionRequestException ( forward ( SESSION_SERVICE_URL_SERVICE . getSessionServiceURL ( hostServerID ) , req ) ) ; } } } else { throw se ; } } } if ( ! sessionService . checkSessionLocal ( sid ) ) { throw new SessionRequestException ( sid , SessionBundle . getString ( NUM00 ) ) ; } }
public static boolean isJavaBuiltinDataType ( Class clazz ) { $F1933 ( clazz , _BOOL ) Class clazzBoxed = getBoxedType ( clazz ) ; $F46660 ( isNumeric , clazzBoxed , _BOOL ) $F46660 ( isBoolean , clazzBoxed , _BOOL ) if $F253730 ( clazzBoxed ) { return _BOOL ; } if ( ( clazzBoxed . equals ( $F94714 ) ) || ( clazzBoxed . equals ( $F62127 ) ) ) { return _BOOL ; } if ( clazzBoxed . equals ( $F78753 ) ) { return _BOOL ; } return _BOOL ; }
protected boolean isControlChar ( char ch ) { return Character . isISOControl ( ch ) && ! Character . isWhitespace ( ch ) ; }
public void encode ( OutputStream out ) throws IOException { $F19904 ( tmp ) if ( extensionValue == null ) { extensionId = PKIXExtensions . PolicyConstraints_Id ; critical = _BOOL ; encodeThis ( ) ; } super . encode ( tmp ) ; $F1569 ( out , tmp ) }
$F4203 $F5675 onFindAll ( $F20474 modelClass , boolean isEager , long ... ids ) { $F5675 dataList ; if ( isAffectAllLines ( ids ) ) { dataList = query ( modelClass , null , null , null , null , null , NUM00 , null , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; } else { dataList = query ( modelClass , null , getWhereOfIdsWithOr ( ids ) , null , null , null , NUM00 , null , $F19610 ( getForeignKeyAssociations , modelClass , isEager ) ) ; } return dataList ; }
public boolean isCached $F36827 ( requestUrl , maxWidth , maxHeight ) { return isCached ( requestUrl , maxWidth , maxHeight , ScaleType . CENTER_INSIDE ) ; }
public Style addStyle ( String nm , Style parent ) { StyleContext styles = ( StyleContext ) getAttributeContext ( ) ; return styles . addStyle ( nm , parent ) ; }
public static TextWithMnemonic parseText ( final String textWithMnemonic ) { $F826 ( textWithMnemonic ) int index = - NUM00 ; $F3239 ( plainText ) for ( $F1088 ( i , textWithMnemonic ) ) { $F1280 ( ch , textWithMnemonic , i ) if ( ch == NUM00 ) { i ++ ; if $F11984 ( i , textWithMnemonic ) $F5153 ch = textWithMnemonic . charAt ( i ) ; if ( ch != NUM00 ) $F12713 ( index , plainText ) } plainText . append ( ch ) ; } return new TextWithMnemonic ( plainText . toString ( ) , index ) ; }
public void checkPermissions ( NamespaceEntity namespaceEntity , String ... requestedIamRoleNames ) $F254297 ( checkPermissions , namespaceEntity , Arrays , requestedIamRoleNames )
private static AnnotatedTypeMirror asOuterSuper ( Types types , AnnotatedTypeFactory atypeFactory , AnnotatedTypeMirror type , AnnotatedTypeMirror superType ) { if ( type . getKind ( ) == TypeKind . DECLARED ) { AnnotatedDeclaredType dt = ( AnnotatedDeclaredType ) type ; AnnotatedDeclaredType enclosingType = dt ; TypeMirror superTypeMirror = types . erasure ( superType . getUnderlyingType ( ) ) ; while ( enclosingType != null ) { TypeMirror enclosingTypeMirror = types . erasure ( enclosingType . getUnderlyingType ( ) ) ; if ( types . isSubtype ( enclosingTypeMirror , superTypeMirror ) ) $F3468 ( dt , enclosingType ) enclosingType = enclosingType . getEnclosingType ( ) ; } $F1933 ( enclosingType , superType ) return asSuper ( atypeFactory , dt , superType ) ; } return asSuper ( atypeFactory , type , superType ) ; }
public void reload ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { $F973 ( LOG ) if ( dictionary == null && storeDir != null ) { FileInputStream is = new FileInputStream ( new File ( storeDir , factory . storeFileName ( ) ) ) ; try { if ( lookup . load ( is ) ) $F932 } finally { IOUtils . closeWhileHandlingException ( is ) ; } $F980 ( LOG ) } build ( core , searcher ) ; }
public static String asString $F77499 ( jsonPath , json ) { return pathAs ( $F10062 , jsonPath , json ) ; }
$F1 public ServerHeartbeat serverDyn ( String address , int port , boolean isSSL , String clusterId , String displayName ) { Objects . requireNonNull ( address ) ; Objects . requireNonNull ( clusterId ) ; ClusterHeartbeat cluster = createCluster ( clusterId ) ; ServerHeartbeat server = cluster . createServer ( address , port , isSSL ) ; if ( displayName != null ) { server . setDisplayName ( displayName ) ; } cluster . addDynamicServer ( server ) ; return server ; }
public void paintComponentBackground ( Object nativeGraphics , int x , int y , int width , int height , Style s ) { if ( width <= NUM00 || height <= NUM00 ) $F932 Image bgImageOrig = s . getBgImage ( ) ; if ( bgImageOrig == null ) { if ( s . getBackgroundType ( ) >= Style . BACKGROUND_GRADIENT_LINEAR_VERTICAL ) { drawGradientBackground ( s , nativeGraphics , x , y , width , height ) ; $F665 } setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; } else { $F2049 ( iW , bgImageOrig ) $F2047 ( iH , bgImageOrig ) Object bgImage = bgImageOrig . getImage ( ) ; switch ( s . getBackgroundType ( ) ) { case Style . BACKGROUND_NONE : if ( s . getBgTransparency ( ) != NUM00 ) { setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; } $F665 case Style . BACKGROUND_IMAGE_SCALED : if ( isScaledImageDrawingSupported ( ) ) { drawImage ( nativeGraphics , bgImage , x , y , width , height ) ; } else { if ( iW != width || iH != height ) { bgImageOrig = bgImageOrig . scaled ( width , height ) ; s . setBgImage ( bgImageOrig , _BOOL ) ; bgImage = bgImageOrig . getImage ( ) ; } drawImage ( nativeGraphics , bgImage , x , y ) ; } $F665 case Style . BACKGROUND_IMAGE_SCALED_FILL : float r = Math . max ( $F61779 ( width ) / $F61779 ( iW ) , $F61779 ( height ) / $F61779 ( iH ) ) ; int bwidth = ( int ) ( $F61779 ( iW ) * r ) ; int bheight = ( int ) ( $F61779 ( iH ) * r ) ; if ( isScaledImageDrawingSupported ( ) ) { drawImage ( nativeGraphics , bgImage , x + ( width - bwidth ) / NUM00 , y + ( height - bheight ) / NUM00 , bwidth , bheight ) ; } else { if ( iW != bwidth || iH != bheight ) { bgImageOrig = bgImageOrig . scaled ( bwidth , bheight ) ; s . setBgImage ( bgImageOrig , _BOOL ) ; bgImage = bgImageOrig . getImage ( ) ; } drawImage ( nativeGraphics , bgImage , x + ( width - bwidth ) / NUM00 , y + ( height - bheight ) / NUM00 ) ; } $F665 case Style . BACKGROUND_IMAGE_SCALED_FIT : if ( s . getBgTransparency ( ) != NUM00 ) { setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; } float r2 = Math . min ( $F61779 ( width ) / $F61779 ( iW ) , $F61779 ( height ) / $F61779 ( iH ) ) ; int awidth = ( int ) ( $F61779 ( iW ) * r2 ) ; int aheight = ( int ) ( $F61779 ( iH ) * r2 ) ; if ( isScaledImageDrawingSupported ( ) ) { drawImage ( nativeGraphics , bgImage , x + ( width - awidth ) / NUM00 , y + ( height - aheight ) / NUM00 , awidth , aheight ) ; } else { if ( iW != awidth || iH != aheight ) { bgImageOrig = bgImageOrig . scaled ( awidth , aheight ) ; s . setBgImage ( bgImageOrig , _BOOL ) ; bgImage = bgImageOrig . getImage ( ) ; } drawImage ( nativeGraphics , bgImage , x + ( width - awidth ) / NUM00 , y + ( height - aheight ) / NUM00 , awidth , aheight ) ; } $F665 case Style . BACKGROUND_IMAGE_TILE_BOTH : tileImage ( nativeGraphics , bgImage , x , y , width , height ) ; $F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_TOP : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; tileImage ( nativeGraphics , bgImage , x , y , width , iH ) ; $F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; tileImage ( nativeGraphics , bgImage , x , y + ( height / NUM00 - iH / NUM00 ) , width , iH ) ; $F665 case Style . BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_BOTTOM : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; tileImage ( nativeGraphics , bgImage , x , y + ( height - iH ) , width , iH ) ; $F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; for ( int yPos = NUM00 ; yPos <= height ; yPos += iH ) { drawImage ( nativeGraphics , bgImage , x , y + yPos ) ; } $F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; for ( int yPos = NUM00 ; yPos <= height ; yPos += iH ) { drawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + yPos ) ; } $F665 case Style . BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; for ( int yPos = NUM00 ; yPos <= height ; yPos += iH ) { drawImage ( nativeGraphics , bgImage , x + width - iW , y + yPos ) ; } $F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + ( height - iH ) ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x , y + ( height / NUM00 - iH / NUM00 ) ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + width - iW , y + ( height / NUM00 - iH / NUM00 ) ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_CENTER : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + ( width / NUM00 - iW / NUM00 ) , y + ( height / NUM00 - iH / NUM00 ) ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x , y ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_TOP_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + width - iW , y ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM_LEFT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x , y + ( height - iH ) ) ; $F665 case Style . BACKGROUND_IMAGE_ALIGNED_BOTTOM_RIGHT : setColor ( nativeGraphics , s . getBgColor ( ) ) ; fillRect ( nativeGraphics , x , y , width , height , s . getBgTransparency ( ) ) ; drawImage ( nativeGraphics , bgImage , x + width - iW , y + ( height - iH ) ) ; $F665 case Style . BACKGROUND_GRADIENT_LINEAR_HORIZONTAL : case Style . BACKGROUND_GRADIENT_LINEAR_VERTICAL : case Style . BACKGROUND_GRADIENT_RADIAL : drawGradientBackground ( s , nativeGraphics , x , y , width , height ) ; $F665 } } }
public void runTest $F72 throws Throwable { Document doc ; NodeList genderList ; Node genderNode ; CharacterData entText ; EntityReference entReference ; Node appendedNode ; $F236 ( doc , load , _BOOL ) $F237 ( genderList , doc ) $F238 ( genderNode , genderList ) entReference = doc . createEntityReference ( NUM00 ) ; assertNotNull ( NUM00 , entReference ) ; appendedNode = genderNode . appendChild ( entReference ) ; $F241 ( entText , entReference ) assertNotNull ( NUM00 , entText ) ; { boolean success = _BOOL ; try { entText . replaceData ( $F21567 ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; } assertTrue ( NUM00 , success ) ; } }
public void removeAll $F72 $F9096 ( mParts )
protected abstract void handleLostEntry ( HttpRoute route ) ;
$F13735 ( prefix , namespace , attName , attValue , xmlWriter )
public static boolean executableExists ( String executable ) { $F1705 ( directFile , executable ) if ( directFile . exists ( ) && directFile . canExecute ( ) ) { return _BOOL ; } for ( String pathString : getSystemPath ( ) ) { $F77510 ( path , Paths , pathString ) if ( Files . exists ( path . resolve ( executable ) ) && Files . isExecutable ( path . resolve ( executable ) ) ) { return _BOOL ; } } return _BOOL ; }
$F1 public String toString $F72 { $F83 ( buf ) int i = NUM00 ; for ( PseudoOp op : contents ) { buf . append ( String . format ( NUM00 , i ++ , op ) ) ; } $F92 ( buf ) }
private $F11300 combine ( $F11300 listA , $F11300 listB ) { LinkedHashSet $F11299 combinedProjects = Sets . newLinkedHashSet ( listA ) ; combinedProjects . addAll ( listB ) ; return $F7044 ( combinedProjects ) ; }
public long generateNewPingId $F72 { PreferenceStore prefs = getPreferenceStore ( ) ; $F6822 ( rnd ) $F167119 ( id , rnd ) synchronized ( DdmsPreferenceStore . class ) { prefs . setValue ( PING_ID , id ) ; try { $F72208 ( prefs ) } $F29052 } return id ; }
public boolean isValid $F72 { return System . currentTimeMillis ( ) < creationTime + lifetime + ( lifetime / NUM00 ) ; }
public static Model readFrom ( VirtualFile file ) throws ServerException , ForbiddenException , IOException { requireNonNull ( file , NUM00 ) ; return fetchModel ( XMLTree . from ( file . getContent ( ) ) ) ; }
public boolean isValueExistForKey ( String key ) { boolean isValueExists ; try { String string = getString ( key , NUM00 ) ; isValueExists = $F14071 ( string ) ; } catch ( ClassCastException e ) { try { int anInt = getInt ( key , NUM00 ) ; isValueExists = anInt != NUM00 ; } catch ( ClassCastException e1 ) { try { long aLong = getLong ( key , NUM00 ) ; isValueExists = aLong != NUM00 ; } catch ( ClassCastException e2 ) { try { float aFloat = getFloat ( key , NUM00 ) ; isValueExists = aFloat != NUM00 ; } catch ( ClassCastException e3 ) { try { boolean aBoolean = getBoolean ( key , _BOOL ) ; isValueExists = ! aBoolean ; } catch ( Exception e4 ) { isValueExists = _BOOL ; $F301 ( e ) } } } } } $F28453 ( isValueExists , _BOOL ) return isValueExists ; }
public void updateViewport $F72 { setToOrtho ( _BOOL , virtualViewport . getWidth ( ) , virtualViewport . getHeight ( ) ) ; }
public String toString $F72 { $F1747 ( keyUsages ) String usage = NUM00 ; boolean first = _BOOL ; for ( ObjectIdentifier oid : keyUsages ) { if ( ! first ) { usage += NUM00 ; } $F1729 ( result , map , oid ) if ( result != null ) { usage += result ; } else { usage += oid . toString ( ) ; } first = _BOOL ; } return $F5528 ( super ) + usage + NUM00 ; }
public static void writeBoxplot ( TDoubleObjectHashMap $F42619 table , String file ) throws IOException { int maxSize = NUM00 ; TDoubleObjectIterator $F42619 it = table . iterator ( ) ; for ( $F2277 ( i , table ) ) { $F60136 ( it ) maxSize = Math . max ( maxSize , it . value ( ) . length ) ; } double keys [ ] = table . keys ( ) ; Arrays . sort ( keys ) ; $F1764 ( writer , file ) for ( $F1139 ( k , keys ) ) { writer . write ( String . valueOf ( keys [ k ] ) ) ; if ( k + NUM00 < keys . length ) writer . write ( TAB ) ; } $F1769 ( writer ) for ( $F119 ( i , maxSize ) ) { for ( $F1139 ( k , keys ) ) { $F1986 list = table . get ( keys [ k ] ) ; if ( i < list . length ) { writer . write ( String . valueOf ( list [ i ] ) ) ; } else $F4050 ( writer , NA ) if ( k + NUM00 < keys . length ) writer . write ( TAB ) ; } $F1769 ( writer ) } $F59 ( writer ) }
public void testClearBitNegativeInside3 $F72 { String as = NUM00 ; int number = NUM00 ; $F9144 ( aNumber , as ) $F32957 ( result , aNumber , number ) $F10665 ( assertEquals , as , result ) }
@ Theory public void logEntriesHaveSameOrderAsIndexes $F22194 ( dataPoint ) { $F43606 ( index1 , dataPoint ) $F43606 ( index2 , dataPoint ) LogEntry first = logEntries [ index1 ] ; LogEntry second = logEntries [ index2 ] ; $F39971 ( LOG , index1 , index2 ) $F21645 ( result , tested , first , second ) $F21645 ( expected , Integer , index1 , index2 ) assertThatHaveSameSignum ( expected , result ) ; }
public static void copyAll ( File root , File dest ) throws IOException { if $F3444 ( root ) { for ( $F3445 ( child , root ) ) { $F5259 ( childDest , dest , child ) if $F3444 ( child ) { if ( $F1905 ( childDest ) && ! mkdirs ( childDest ) ) $F314650 ( childDest ) copyAll ( child , childDest ) ; } else { Files . copy ( child . toPath ( ) , childDest . toPath ( ) , StandardCopyOption . COPY_ATTRIBUTES ) ; } } } else { $F5259 ( childDest , dest , root ) if ( $F1905 ( dest ) && ! mkdirs ( dest ) ) $F314650 ( dest ) Files . copy ( root . toPath ( ) , childDest . toPath ( ) , StandardCopyOption . COPY_ATTRIBUTES ) ; } }
public void paintLine ( Point2D pt1 , Point2D pt2 ) { if ( pt1 != null && pt2 != null ) { OMLine cLine = new OMLine ( pt1 . getY ( ) , pt1 . getX ( ) , pt2 . getY ( ) , pt2 . getX ( ) , OMGraphic . LINETYPE_GREATCIRCLE ) ; Projection proj = theMap . getProjection ( ) ; cLine . generate ( proj ) ; distanceList . add ( cLine ) ; } }
public static boolean hasExportMaskForStorageAndVArray ( DbClient dbClient , ExportGroup exportGroup , URI storageURI ) { $F2689 storagePortURIsAssociatedWithVArrayAndStorageArray = ExportMaskUtils . getStoragePortUrisAssociatedWithVarrayAndStorageArray ( storageURI , exportGroup . getVirtualArray ( ) , dbClient ) ; StringSet maskUriSet = exportGroup . getExportMasks ( ) ; if ( maskUriSet != null ) { for ( String maskUriString : maskUriSet ) { ExportMask mask = dbClient . queryObject ( ExportMask . class , URI . create ( maskUriString ) ) ; URI maskStorageURI = mask . getStorageDevice ( ) ; if $F1238 ( maskStorageURI , storageURI ) { for ( String storagePort : mask . getStoragePorts ( ) ) { $F12651 ( storagePortURIsAssociatedWithVArrayAndStorageArray , storagePort , _BOOL ) } } } } return _BOOL ; }
private void preload ( int first , boolean increasing ) { final int start ; final int end ; if ( increasing ) { start = Math . max ( first , mLastEnd ) ; end = Math . min ( first + mLoadAheadItems , mItemSource . getCount ( ) ) ; } else { start = Math . max ( NUM00 , first - mLoadAheadItems ) ; end = Math . min ( first , mLastStart ) ; } Log . v ( TAG , NUM00 + first + NUM00 + increasing + NUM00 + start + NUM00 + end ) ; mLastEnd = end ; mLastStart = start ; if ( start == NUM00 && end == NUM00 ) $F932 final $F5675 items = mItemSource . getItemsInRange ( start , end ) ; if ( ! increasing ) { Collections . reverse ( items ) ; } registerLoadTokens ( mItemLoader . preloadItems ( items ) ) ; }
Builder addLenient ( String line ) { $F129840 ( index , line ) if ( index != - NUM00 ) { return addLenient ( line . substring ( NUM00 , index ) , line . substring ( index + NUM00 ) ) ; } else if $F3106 ( line ) { return addLenient ( NUM00 , line . substring ( NUM00 ) ) ; } else $F195829 ( addLenient , line ) }
private void initRMIParameters $F72 throws Exception { if ( rmiHostMaster == null || rmiPortMaster == null ) { File confDir = ReplicatorRuntimeConf . locateReplicatorConfDir ( ) ; File propsFile = new File ( confDir , ReplicationServiceManager . CONFIG_SERVICES ) ; $F14354 ( println , String , propsFile ) TungstenProperties serviceProps = PropertiesManager . loadProperties ( propsFile ) ; if ( rmiPortMaster == null ) rmiPortMaster = serviceProps . getString ( ReplicatorConf . RMI_PORT , ReplicatorConf . RMI_DEFAULT_PORT , _BOOL ) ; if ( rmiHostMaster == null ) rmiHostMaster = ReplicationServiceManager . getHostName ( serviceProps ) ; } }
public String encodeKey ( final String key ) { if $F4329 ( StringUtils , key ) $F825 try { return Hex . encodeHexString ( key . getBytes ( NUM00 ) ) ; } catch ( UnsupportedEncodingException uee ) $F48927 ( uee ) }
private static void globalUnionTest ( final ISchemaVersion schemaVersion ) throws IOException { final Writer output = openOutput ( schemaVersion , NUM00 , TestType . UNION ) ; $F23769 ( hll , newHLL , HLLType ) $F23769 ( emptyHLL , newHLL , HLLType ) cumulativeUnionLine ( output , hll , emptyHLL , schemaVersion ) ; for ( $F6268 ( i ) ) { final HLL randomHLL = generateRandomHLL ( ) ; cumulativeUnionLine ( output , hll , randomHLL , schemaVersion ) ; } $F1206 ( output ) $F59 ( output ) }
public static boolean restore $F72 { $F1705 ( restoreConfig , RESTORATION_PROPERTIES ) if $F60822 ( restoreConfig ) { $F973 ( logger ) try $F31304 ( stream , restoreConfig ) { $F2697 ( properties ) properties . load ( stream ) ; restoreDatabase ( properties ) ; restoreSolrIndex ( properties ) ; } catch ( UnsupportedOperationException e ) { $F5197 ( logger , e ) $F2699 ( System ) } catch ( Exception e ) { logger . fatal ( NUM00 , e ) ; return _BOOL ; } $F105993 ( restoreConfig ) } return _BOOL ; }
public void testSetBitPositiveInside4 $F72 $F105940 ( aSign , number , aNumber , aBytes , result , rBytes , resBytes , i , assertTrue , assertEquals )
$F1 public void writeComment ( String data ) throws XMLStreamException { log . log ( Level . FINE , NUM00 , data ) ; }
public static File fromDataURI ( String dataURI , String fileName ) { return File . createIfSupported ( fromDataURI ( dataURI ) , fileName ) ; }
protected List extractDiscoveryInformation ( XRDS xrds , XriIdentifier identifier , Resolver xriResolver ) throws DiscoveryException { $F12181 ( endpoints ) XRD xrd = xrds . getFinalXRD ( ) ; extractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID2_OP , _BOOL ) ; extractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID2 , _BOOL ) ; extractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID11 , _BOOL ) ; extractDiscoveryInformationOpenID ( xriResolver , endpoints , xrd , identifier , DiscoveryInformation . OPENID10 , _BOOL ) ; if $F10471 ( endpoints ) $F973 ( _log ) return endpoints ; }
public static void clearRecentFiles $F72 { String str = ProgramProperties . get ( RECENTFILES , NUM00 ) ; if $F35625 ( str ) { $F111652 ( ProgramProperties , RECENTFILES ) notifyListChange ( RECENTFILES ) ; } }
public static boolean areEquivalent ( final TypeReference a , final TypeReference b ) $F19580 ( areEquivalent , a , b , _BOOL )
private static char CallStaticCharMethodV $F4272 ( env , classJREF , methodID , argAddress ) throws Exception { $F4274 ( traceJNI , VM ) $F4275 ( RuntimeEntrypoints ) try { Object returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Char ) ; return Reflection . unwrapChar ( returnObj ) ; } $F4287 ( traceJNI , unexpected , System , env ) }
private boolean initXSettingsIfNeeded ( final String propName ) { if ( ! loadedXSettings && ( propName . startsWith ( NUM00 ) || propName . equals ( SunToolkit . DESKTOPFONTHINTS ) || propName . startsWith ( dndPrefix ) ) ) { loadedXSettings = _BOOL ; if ( ! GraphicsEnvironment . isHeadless ( ) ) { loadXSettings ( ) ; if ( desktopProperties . get ( SunToolkit . DESKTOPFONTHINTS ) == null ) { if ( XWM . isKDE2 ( ) ) { Object hint = fcManager . getFontConfigAAHint ( ) ; if ( hint != null ) { desktopProperties . put ( UNIXToolkit . FONTCONFIGAAHINT , hint ) ; } } desktopProperties . put ( SunToolkit . DESKTOPFONTHINTS , SunToolkit . getDesktopFontHints ( ) ) ; } return _BOOL ; } } return _BOOL ; }
private void updateSortingIcons $F72 { for ( $F40424 ( type , SortingType ) ) { SortingDirection direction = model . getSortingDirection ( type ) ; ImageIcon icon ; switch ( direction ) { case DESCENDING : icon = ICON_ARROW_DOWN ; $F597 case ASCENDING : icon = ICON_ARROW_UP ; $F597 case UNDEFINED : icon = null ; $F597 $F1267 icon = null ; } switch ( type ) { case NAME : sortingLabelAttName . setIcon ( icon ) ; $F597 case TYPE : sortingLabelAttType . setIcon ( icon ) ; $F597 case MISSING : sortingLabelAttMissings . setIcon ( icon ) ; $F597 $F1267 sortingLabelAttName . setIcon ( null ) ; sortingLabelAttType . setIcon ( null ) ; sortingLabelAttMissings . setIcon ( null ) ; } } }
$F66632 ( files , mRootDirectory , file , mEntries , mTotalSize , VolleyLog )
private void restoreIcon ( Key key , $F96 buffer , int dataSize ) throws IOException { if ( VERBOSE ) Log . v ( TAG , NUM00 + key . id ) ; if ( DEBUG ) Log . d ( TAG , NUM00 + buffer . length + NUM00 + Base64 . encodeToString ( buffer , NUM00 , dataSize , Base64 . NO_WRAP ) ) ; Resource res = unpackProto ( $F6325 , buffer , dataSize ) ; if ( DEBUG ) { Log . d ( TAG , NUM00 + res . dpi + NUM00 ) ; } Bitmap icon = BitmapFactory . decodeByteArray ( res . data , NUM00 , res . data . length ) ; if ( icon == null ) { Log . w ( TAG , NUM00 + key . name ) ; } if ( VERBOSE ) Log . v ( TAG , NUM00 + key . name ) ; IconCache . preloadIcon ( mContext , ComponentName . unflattenFromString ( key . name ) , icon , res . dpi ) ; }
public boolean isExpired $F72 { return paymentDetails . hasExpires ( ) && $F165576 ( System ) > paymentDetails . getExpires ( ) ; }
private void endFormals $F72 { $F430955 ( hasFormals , _BOOL , buf ) }
public static void readBytes ( InputStream is , $F96 b , int offset , int len ) { $F7546 ( len ) try { int read = NUM00 ; while ( read < len ) { int n = is . read ( b , offset + read , len - read ) ; if ( n < NUM00 ) throw new PngjInputException ( NUM00 + n + NUM00 + len ) ; read += n ; } } catch ( IOException e ) { throw new PngjInputException ( NUM00 , e ) ; } }
public CharacterMatch $F53421 ( chars ) { Assert . isNotNull ( chars ) ; Assert . isTrue ( chars . length > NUM00 ) ; fChars = chars ; Arrays . sort ( chars ) ; }
public void addActionListener ( ActionListener newA ) $F207 ( m_Listeners , newA )
$F74047 ( container , mContainers , mRequest , _BOOL )
public static $F96 encode $F24576 ( data , off , length ) { $F1538 ( bOut ) $F39025 ( encoder , data , off , length , bOut , e ) $F11316 ( bOut ) }
public double distanceToLineSegment ( LatLong A , LatLong B ) { double Ax = ( A . lng - lng ) * Math . cos ( NUM00 * radians * ( A . lat + lat ) ) ; double Ay = ( A . lat - lat ) ; double Bx = ( B . lng - lng ) * Math . cos ( NUM00 * radians * ( B . lat + lat ) ) ; double By = ( B . lat - lat ) ; if ( Ay == By ) { if ( ( Ax < NUM00 && Bx < NUM00 ) || ( Ax > NUM00 && Bx > NUM00 ) ) return Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * EarthRadius * radians ; if ( Ax == Bx ) return $F25556 ( Math , Ax , Ay ) * EarthRadius * radians ; } else { double Ix = ( ( By - Ay ) * ( Ax * By - Ay * Bx ) ) / ( $F127638 ( Ax , Bx ) + $F127638 ( Ay , By ) ) ; if ( ( Ix < Ax && Ix < Bx ) || ( Ix > Ax && Ix > Bx ) ) { return Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * EarthRadius * radians ; } } return Math . abs ( ( Bx - Ax ) * Ay - Ax * ( By - Ay ) ) / $F127640 ( Math , Bx , Ax , By , Ay ) * EarthRadius * radians ; }
$F1113 public List < PlayerNbt > createMultiplayerPlayerNbts $F72 { List < PlayerNbt > result = new ArrayList < PlayerNbt > $F72 ; for ( File playerdataFile : getPlayerdataFiles ( ) ) { if $F7110 ( playerdataFile ) { result . add ( createPlayerdataPlayerNbt ( getPlayerUUIDFromPlayerdataFile ( playerdataFile ) ) ) ; } } if $F5973 ( result ) { $F2980 ( Log ) return result ; } for ( File playersFile : getPlayersFiles ( ) ) { if $F7110 ( playersFile ) { result . add ( createPlayersPlayerNbt ( getPlayerNameFromPlayersFile ( playersFile ) ) ) ; } } if $F5973 ( result ) { $F2980 ( Log ) return result ; } $F2980 ( Log ) return result ; }
$F74047 ( container , mContainers , mRequest , _BOOL )
private void show ( SetupWindow window ) { window . handleWindowOpeningEvent ( ) ; _setupWindowHolder . show ( window . getKey ( ) ) ; _currentWindow = window ; }
public $F21637 append $F93065 ( str ) $F21638 ( internal , str , this )
private static String replaceStars ( String init ) { $F83 ( builder ) $F7782 ( chars , init ) for ( $F1139 ( i , chars ) ) { if ( chars [ i ] == NUM00 && i == NUM00 && chars . length > NUM00 && chars [ i + NUM00 ] == NUM00 ) $F312159 ( builder , i ) else if ( chars [ i ] == NUM00 && i < $F33765 ( chars ) && i > NUM00 && chars [ i + NUM00 ] == NUM00 && chars [ i - NUM00 ] == NUM00 ) { $F50865 ( builder ) $F84 ( builder ) } else if ( chars [ i ] == NUM00 && i == $F33765 ( chars ) && i > NUM00 && chars [ i - NUM00 ] == NUM00 ) { $F50865 ( builder ) $F84 ( builder ) } else if ( chars [ i ] == NUM00 ) $F86 ( builder ) else $F40727 ( builder , chars , i ) } $F92 ( builder ) }
public void startOptionGroup ( String description ) { optionGroups . put ( optionList . size ( ) , description ) ; }
private $F96 encrypt ( $F96 m , NTRUEncryptionPublicKeyParameters pubKey ) { IntegerPolynomial pub = pubKey . h ; int N = params . N ; int q = params . q ; int maxLenBytes = params . maxMsgLenBytes ; int db = params . db ; int bufferLenBits = params . bufferLenBits ; int dm0 = params . dm0 ; int pkLen = params . pkLen ; int minCallsMask = params . minCallsMask ; boolean hashSeed = params . hashSeed ; $F56524 ( oid , params ) int l = m . length ; if ( maxLenBytes > NUM00 ) $F825 if ( l > maxLenBytes ) { throw new DataLengthException ( NUM00 + l + NUM00 + maxLenBytes ) ; } while ( _BOOL ) { $F96 b = new byte [ db / NUM00 ] ; random . nextBytes ( b ) ; $F96 p0 = new byte [ maxLenBytes + NUM00 - l ] ; $F96 M = new byte [ bufferLenBits / NUM00 ] ; $F7057 ( System , b , M ) M [ b . length ] = ( byte ) l ; System . arraycopy ( m , NUM00 , M , b . length + NUM00 , m . length ) ; System . arraycopy ( p0 , NUM00 , M , b . length + NUM00 + m . length , p0 . length ) ; IntegerPolynomial mTrin = IntegerPolynomial . fromBinary3Sves ( M , N ) ; $F96 bh = pub . toBinary ( q ) ; $F96 hTrunc = copyOf ( bh , pkLen / NUM00 ) ; $F96 sData = buildSData ( oid , m , l , b , hTrunc ) ; Polynomial r = generateBlindingPoly ( sData , M ) ; IntegerPolynomial R = r . mult ( pub , q ) ; IntegerPolynomial R4 = ( IntegerPolynomial ) R . clone ( ) ; R4 . modPositive ( NUM00 ) ; $F96 oR4 = R4 . toBinary ( NUM00 ) ; IntegerPolynomial mask = MGF ( oR4 , N , minCallsMask , hashSeed ) ; mTrin . add ( mask ) ; mTrin . mod3 ( ) ; if ( mTrin . count ( - NUM00 ) < dm0 ) $F1448 if ( mTrin . count ( NUM00 ) < dm0 ) $F1448 if ( mTrin . count ( NUM00 ) < dm0 ) $F1448 R . add ( mTrin , q ) ; R . ensurePositive ( q ) ; return R . toBinary ( q ) ; } }
public final void expectAtLeastOneResult ( ResultSet rs ) throws AdeInternalException , SQLException { if $F17350 ( rs ) { throw new AdeInternalException ( NUM00 + m_sql ) ; } }
public Sequence $F72 { this ( INITIAL_VALUE ) ; }
public static Optional < MongoCredential > createCredentials $F1947 ( username , password , database ) { if ( ! Strings . isNullOrEmpty ( username ) && ! Strings . isNullOrEmpty ( password ) && ! Strings . isNullOrEmpty ( database ) ) { return Optional . of ( MongoCredential . createMongoCRCredential ( username , database , password . toCharArray ( ) ) ) ; } else { return Optional . absent ( ) ; } }
$F41325 ( in , result , _BOOL , c , length )
$F1 public void stop $F72 { $F21333 ( executorService ) restTemplate = null ; }
public void writeExif ( InputStream jpegStream , String exifOutFileName ) throws $F27136 { $F26831 ( jpegStream , exifOutFileName , NULL_ARGUMENT_ ) OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; doExifStreamIO ( jpegStream , s ) ; $F1206 ( s ) } $F27615 ( closeSilently , s , e ) $F59 ( s ) }
public ResultRecord ( DirectoryScannerConfig scan , Action [ ] actions , File f ) { $F32928 ( directoryScanner , scan ) this . actions = actions ; $F68535 ( date ) $F24536 ( filename , f ) }
private MethodDoc findImplMethod ( MethodDoc interfaceMethod ) { String name = interfaceMethod . name ( ) ; String desc = Util . methodDescriptorOf ( interfaceMethod ) ; for ( MethodDoc implMethod : implClass . methods ( ) ) { if ( name . equals ( implMethod . name ( ) ) && desc . equals ( Util . methodDescriptorOf ( implMethod ) ) ) { return implMethod ; } } $F1274 }
protected static $F3803 extractBootClassPath $F20110 ( args ) $F19580 ( extractOptWithPattern , BOOT_CLASS_PATH_REGEX , _BOOL , args )
public abstract Object fromOpenValue ( Object openValue ) throws InvalidObjectException ;
public ContourPath ( ContourAttrib attr , int levelIndex , $F1986 x , $F1986 y ) { xArr = x ; yArr = y ; this . levelIndex = levelIndex ; attributes = attr ; int np = xArr . length ; if ( Math . abs ( x [ NUM00 ] - x [ np - NUM00 ] ) < kSmallX && Math . abs ( y [ NUM00 ] - y [ np - NUM00 ] ) < kSmallY ) { closed = _BOOL ; x [ np - NUM00 ] = x [ NUM00 ] ; y [ np - NUM00 ] = y [ NUM00 ] ; } else closed = _BOOL ; }
$F49286 ( value , absMin , absMax , absValue , Math )
protected void print $F8306 ( mnemonic , args ) { printer . print ( indent + NUM00 ) ; writePaddedString ( mnemonic + NUM00 , NUM00 ) ; if ( args != null ) { for ( $F1139 ( i , args ) ) { if ( i > NUM00 ) $F21410 ( printer ) printer . print ( args [ i ] ) ; } } $F21416 ( printer ) }
$F1 public void removeConnectionEventListener ( ConnectionEventListener listener ) { debugCode ( NUM00 ) ; listeners . remove ( listener ) ; }
public boolean isDownloadable $F72 { $F53443 ( topics , getExactTopics ) for ( String xt : topics ) if $F3106 ( xt ) return _BOOL ; if ( getDefaultURLs ( ) . length > NUM00 ) { return _BOOL ; } return _BOOL ; }
public boolean isSatisfiedBy ( Date date ) { Calendar $F85420 ( testDateCal , Calendar , getTimeZone ) ; testDateCal . setTime ( date ) ; $F104560 ( testDateCal , Calendar ) $F9110 ( originalDate , testDateCal ) testDateCal . add ( Calendar . SECOND , - NUM00 ) ; Date timeAfter = $F62627 ( getTimeAfter , testDateCal ) ; return ( ( timeAfter != null ) && $F1238 ( timeAfter , originalDate ) ) ; }
public static $F11968 scanForDirLogs ( final String currentPath ) { if ( Cfg . DEBUG ) { Check . requires ( currentPath != null , NUM00 ) ; } File fc ; final $F11968 vector = new $F11968 $F72 ; try { $F24661 ( fc , currentPath ) if $F3444 ( fc ) { final $F806 fileLogs = fc . list ( ) ; for ( final String dir : fileLogs ) { final File fdir = new File ( currentPath + dir ) ; if $F3444 ( fdir ) { vector . addElement ( dir + NUM00 ) ; $F44970 ( Cfg , Check , TAG , dir ) } } } } catch ( final Exception e ) { $F44960 ( Cfg , Check , e ) $F44970 ( Cfg , Check , TAG , e ) } if ( Cfg . DEBUG ) { Check . log ( TAG + NUM00 + vector . size ( ) ) ; } return vector ; }
private static $F5 flattenRows ( Cursor cursor , int limit ) { Util . throwIfNot ( limit >= NUM00 ) ; $F22547 ( flatList ) final int numColumns = cursor . getColumnCount ( ) ; for ( int row = NUM00 ; row < limit && cursor . moveToNext ( ) ; row ++ ) { for ( $F119 ( column , numColumns ) ) { switch ( cursor . getType ( column ) ) { case Cursor . FIELD_TYPE_NULL : $F722 ( flatList ) $F597 case Cursor . FIELD_TYPE_INTEGER : flatList . add ( String . valueOf ( cursor . getLong ( column ) ) ) ; $F597 case Cursor . FIELD_TYPE_FLOAT : flatList . add ( String . valueOf ( cursor . getDouble ( column ) ) ) ; $F597 case Cursor . FIELD_TYPE_BLOB : flatList . add ( blobToString ( cursor . getBlob ( column ) ) ) ; $F597 case Cursor . FIELD_TYPE_ NUM00 : default : flatList . add ( cursor . getString ( column ) ) ; $F597 } } } if ( ! cursor . isAfterLast $F72 ) { for ( $F119 ( column , numColumns ) ) $F71145 ( flatList ) } return flatList ;
$F4562 ( view , deltaX , scrollX , deltaY , scrollY , scrollRange , fuzzyThreshold , scaleFactor , isTouchEvent , deltaValue , currentScrollValue , scrollValue , HORIZONTAL , VERTICAL , mode , newScrollValue , PullToRefreshBase , Log , LOG_TAG , State , Math )
private Process executeCompiler ( $F5 argList , $F5 envList , boolean chdir ) throws IOException { $F806 args ; if ( chdir ) { $F110602 ( cb ) $F84 ( cb ) cb . append ( _compiler . getSourceDirName ( ) ) ; $F84 ( cb ) for ( $F2277 ( i , argList ) ) { $F84 ( cb ) $F89 ( cb , argList , i ) } $F384 ( args ) args [ NUM00 ] = NUM00 ; args [ NUM00 ] = NUM00 ; args [ NUM00 ] = cb . toString ( ) ; } else { $F252761 ( args , argList ) argList . toArray ( args ) ; } $F5442 ( envp , envList ) envList . toArray ( envp ) ; if $F6456 ( log , Level ) { CharBuffer cb = CharBuffer . allocate ( ) ; for ( $F1139 ( i , args ) ) { $F28333 ( i , cb ) $F6939 ( cb , args , i ) } log . fine ( cb . close ( ) ) ; } $F43316 ( runtime , Runtime ) try { return runtime . exec ( args ) ; } catch ( Exception e ) { throw new JavaCompileException ( L . l ( NUM00 , args [ NUM00 ] , String . valueOf ( e ) ) ) ; } }
public void collapseAllParents $F72 { if $F1032 ( mDataList ) { $F3523 expandableListItems = getParents ( _BOOL ) ; if $F1032 ( expandableListItems ) { $F10162 ( expandedItemSize , expandableListItems ) if ( expandedItemSize > NUM00 ) { for ( $F119 ( i , expandedItemSize ) ) { $F16628 ( o , expandableListItems , i ) $F59912 ( indexOf , mDataList , o ) if ( indexOf >= NUM00 ) collapseListItem ( indexOf , ( BaseExpandableObservable ) o , _BOOL ) ; } } } } }
$F1309 protected PdfFormXObject drawPushButtonAppearance ( float width , float height , String text , PdfFont font , int fontSize ) { return drawPushButtonAppearance ( width , height , text , font , ( float ) fontSize ) ; }
public NBTTagCompound loadFile ( File saveDirectory , String filename ) { return loadFile ( new File ( saveDirectory , filename + NUM00 ) ) ; }
public boolean dnsDomainIs ( String host , String domain ) { return host . endsWith ( domain ) ; }
$F1431 public SelectionBuilder reset $F72 { mTable = null ; $F44159 ( mProjectionMap ) if ( mSelection != null ) $F357905 ( mSelection ) $F44159 ( mSelectionArgs ) return this ; }
private final synchronized Enumeration < PolicyEntry > elements $F72 $F10806 ( policyEntries )
public String format ( Calendar calendar , Calendar smscCalendar ) { $F13264 ( calendar , smscCalendar ) long diffTimeInMillis = calendar . getTimeInMillis ( ) - smscCalendar . getTimeInMillis ( ) ; $F6853 ( diffTimeInMillis ) $F156 ( offsetEpoch , Calendar , utcTimeZone ) offsetEpoch . setTimeInMillis ( diffTimeInMillis ) ; int years = $F21621 ( offsetEpoch , Calendar ) - NUM00 ; int months = $F21623 ( offsetEpoch , Calendar ) ; int days = $F21625 ( offsetEpoch , Calendar ) - NUM00 ; int hours = $F13065 ( offsetEpoch , Calendar ) ; int minutes = $F21629 ( offsetEpoch , Calendar ) ; int seconds = $F21631 ( offsetEpoch , Calendar ) ; if ( years >= NUM00 ) $F29526 ( years ) return format ( years , months , days , hours , minutes , seconds ) ; }
private void calculateEntropy ( double scale , KStarWrapper params ) { int i , j , k ; double actent = NUM00 , randent = NUM00 ; double pstar , tprob , avgprob = NUM00 , minprob = NUM00 ; double actClassProb , randClassProb ; $F3789 pseudoClassProbs = new double [ NUM_RAND_COLS + NUM00 ] [ m_NumClasses ] ; for ( j = NUM00 ; j <= NUM_RAND_COLS ; j ++ ) { for ( i = NUM00 ; i < m_NumClasses ; i ++ ) $F211213 ( pseudoClassProbs , j , i ) } for ( i = NUM00 ; i < m_NumInstances ; i ++ ) { if ( m_Distances [ i ] < NUM00 ) $F1448 else { pstar = PStar ( m_Distances [ i ] , scale ) ; tprob = pstar / m_ActualCount ; avgprob += tprob ; $F45132 ( pstar , minprob ) for ( k = NUM00 ; k <= NUM_RAND_COLS ; k ++ ) { pseudoClassProbs [ k ] [ m_RandClassCols [ k ] [ i ] ] += tprob ; } } } for ( $F157662 ( j , m_NumClasses ) ) { actClassProb = pseudoClassProbs [ NUM_RAND_COLS ] [ j ] / avgprob ; if ( actClassProb > NUM00 ) { actent -= actClassProb * Math . log ( actClassProb ) / LOG2 ; } } for ( k = NUM00 ; k < NUM_RAND_COLS ; k ++ ) { for ( $F157662 ( i , m_NumClasses ) ) { randClassProb = pseudoClassProbs [ k ] [ i ] / avgprob ; if ( randClassProb > NUM00 ) { randent -= randClassProb * Math . log ( randClassProb ) / LOG2 ; } } } randent /= NUM_RAND_COLS ; params . actEntropy = actent ; params . randEntropy = randent ; params . avgProb = avgprob ; params . minProb = minprob ; }
public static void initCause ( Throwable throwable , Throwable cause ) { if ( INIT_CAUSE_METHOD != null ) { try { $F226025 ( INIT_CAUSE_METHOD , throwable , cause ) } $F3957 } }
public void testBug20685022 $F72 throws Exception { $F933 ( isCommunityEdition ) $F859 ( props ) $F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) getConnectionWithProps ( props ) ; $F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) getConnectionWithProps ( props ) ; $F725 ( props ) $F2699 ( props ) $F2699 ( props ) $F2699 ( props ) String trustStorePath = NUM00 ; $F48491 ( System , trustStorePath ) $F2699 ( System ) $F48491 ( System , trustStorePath ) $F2699 ( System ) getConnectionWithProps ( props ) ; }
public static boolean canRun ( final File file ) { return manager . getEngineByExtension ( FileUtils . getFileExtension ( file ) ) != null ; }
public void parseElement $F77499 ( tagName , attrs ) { if ( canvas == null && tagName . equalsIgnoreCase ( NUM00 ) ) { scale = mxUtils . getDouble ( attrs , NUM00 , NUM00 ) ; canvas = createCanvas ( attrs ) ; if ( canvas != null ) { canvas . setScale ( scale ) ; } } else if ( canvas != null ) { boolean drawLabel = _BOOL ; if $F141797 ( tagName ) { drawVertex ( attrs ) ; drawLabel = _BOOL ; } else if $F21935 ( tagName ) { drawEdge ( attrs ) ; drawLabel = _BOOL ; } if ( drawLabel ) { drawLabel ( tagName . equalsIgnoreCase ( NUM00 ) , attrs ) ; } } }
private void startPrecaching $F72 { $F27746 ( Log , TAG ) prepareNativeLibraries ( ) ; sIsPrecaching = _BOOL ; acquirePrecachingWakeLock ( ) ; $F2346 ( mPrecacheLauncher ) }
$F1 public $F987 listOptions $F72 { $F994 ( newVector ) $F1000 ( newVector ) $F1000 ( newVector ) $F1007 ( newVector ) }
public WordAlignmentState ( final Rule rule , final int start ) { $F19919 ( trgPoints ) srcLength = rule . getFrench ( ) . length ; numNT = rule . getArity ( ) ; srcStart = start ; final Map < Integer , $F3807 > alignmentMap = rule . getAlignmentMap ( ) ; final $F2027 nonTerminalSourcePositions = rule . getNonTerminalSourcePositions ( ) ; final $F2027 trg = rule . getEnglish ( ) ; for ( $F1139 ( trgIndex , trg ) ) { final AlignedSourceTokens trgPoint = new AlignedSourceTokens $F72 ; if ( trg [ trgIndex ] >= NUM00 ) { if $F1710 ( alignmentMap , trgIndex ) { for ( int srcIdx : alignmentMap . get ( trgIndex ) ) $F128607 ( trgPoint , srcStart , srcIdx ) } else { trgPoint . setNull ( ) ; } } else { trgPoint . setNonTerminal ( ) ; final int absoluteNonTerminalSourcePosition = srcStart + nonTerminalSourcePositions [ Math . abs ( trg [ trgIndex ] ) - NUM00 ] ; trgPoint . add ( absoluteNonTerminalSourcePosition ) ; } trgPoints . add ( trgPoint ) ; } }
protected void configureImageReaderLoaders $F72 { imageReaderLoaders = new Vector < ImageReaderLoader > $F72 ; ImageReaderLoader idl = ( ImageReaderLoader ) ComponentFactory . create ( NUM00 ) ; if ( idl != null ) $F207 ( imageReaderLoaders , idl ) else $F18144 ( logger ) idl = ( ImageReaderLoader ) ComponentFactory . create ( NUM00 ) ; if ( idl != null ) $F207 ( imageReaderLoaders , idl ) else $F18144 ( logger ) }
protected void handleSpecialSubstitution ( String replace , String replaceWith , int startPos , String description ) { if $F3057 ( replace ) { if $F4432 ( replaceWith ) $F228450 ( error , startPos , description ) ignoreChars = CharSet . parseString ( replaceWith ) ; } }
$F1 public void countExample ( Example example ) { double plabel ; double label = example . getValue ( labelAttribute ) ; if ( ! predictedAttribute . isNominal ( ) ) { plabel = example . getValue ( predictedAttribute ) ; } else { String labelS = example . getValueAsString ( labelAttribute ) ; plabel = example . getConfidence ( labelS ) ; label = NUM00 ; } double weight = NUM00 ; if ( weightAttribute != null ) { weight = example . getValue ( weightAttribute ) ; } double diff = weight * Math . abs ( label - plabel ) ; deviationSum += diff ; double relDiff = Math . abs ( weight * label - ( trueLabelSum / exampleCounter ) ) ; relativeSum += relDiff ; }
public static void unzip ( String zipFile , String location ) throws IOException { final int BUFFER_SIZE = NUM00 ; int size ; $F2175 ( buffer , BUFFER_SIZE ) try { if $F2364 ( location ) { location += NUM00 ; } $F1705 ( f , location ) if $F4926 ( f ) $F1908 ( f ) ZipInputStream zin = new ZipInputStream ( new BufferedInputStream $F113801 ( zipFile , BUFFER_SIZE ) ) ; try { ZipEntry ze = null ; while $F78823 ( ze , zin ) { String path = location + ze . getName ( ) ; $F1705 ( unzipFile , path ) if $F3444 ( ze ) { if $F4926 ( unzipFile ) $F1908 ( unzipFile ) } else { $F4924 ( parentDir , unzipFile ) if ( null != parentDir ) { if $F4926 ( parentDir ) $F1908 ( parentDir ) } $F46293 ( out , unzipFile , _BOOL ) ; BufferedOutputStream fout = new BufferedOutputStream ( out , BUFFER_SIZE ) ; try { while ( ( size = zin . read ( buffer , NUM00 , BUFFER_SIZE ) ) != - NUM00 ) $F29756 ( fout , buffer , size ) $F22108 ( zin ) } finally $F12238 ( fout ) } } } $F3229 ( zin ) } $F102303 ( Log , TAG , e ) }
private void addDeclAnnotations ( Map < String , $F77231 > declAnnos , Element elt ) { if ( fromStubFile != null ) { $F77231 annos = declAnnos . get ( ElementUtils . getVerboseName ( elt ) ) ; if ( annos == null ) { annos = AnnotationUtils . createAnnotationSet ( ) ; putOrAddToMap ( declAnnos , ElementUtils . getVerboseName ( elt ) , annos ) ; } annos . add ( fromStubFile ) ; } }
private void inspectConditionsWithBooleans ( LinkedList $F265759 objBranchConditions ) { for ( PsiElement objExpression : objBranchConditions ) { if ( ! ( objExpression instanceof ConstantReference ) ) $F1448 if ( ExpressionSemanticUtil . isBoolean ( ( ConstantReference ) objExpression ) ) { holder . registerProblem ( objExpression , strProblemDescriptionBooleans , ProblemHighlightType . GENERIC_ERROR_OR_WARNING ) ; } } }
public static XContentType xContentType ( CharSequence content ) { int length = content . length ( ) < GUESS_HEADER_LENGTH ? content . length ( ) : GUESS_HEADER_LENGTH ; $F38155 ( length ) $F12685 ( first , content ) if ( first == NUM00 ) { return XContentType . JSON ; } if ( length > NUM00 && first == SmileConstants . HEADER_BYTE_1 && content . charAt ( NUM00 ) == SmileConstants . HEADER_BYTE_2 && content . charAt ( NUM00 ) == SmileConstants . HEADER_BYTE_3 ) { return XContentType . SMILE ; } if ( length > NUM00 && first == NUM00 && $F4431 ( content ) && $F4431 ( content ) ) { return XContentType . YAML ; } for ( $F119 ( i , length ) ) { $F1280 ( c , content , i ) if ( c == NUM00 ) { return XContentType . JSON ; } if ( Character . isWhitespace ( c ) == _BOOL ) $F5153 } $F1274 }
$F13914 ( RequestMethod ) public ResponseEntity < Bookmark > deleteBookmark ( @ PathVariable ( $F3144 ) String username , @ PathVariable ( $F3144 ) int bookmarkId ) throws BookmarkNotFoundException { Optional < Bookmark > optional = bookmarksRepository . findByIdAndUserUsername ( bookmarkId , username ) ; if $F16464 ( optional ) { bookmarksRepository . delete ( optional . get ( ) ) ; return new $F151149 ( optional . get ( ) , HttpStatus . OK ) ; } else { throw new BookmarkNotFoundException ( NUM00 + bookmarkId ) ; } }
public static Object loadInstance ( Class clazz , Object defaultValue ) { try $F171631 ( clazz ) catch ( Throwable t ) { return defaultValue ; } }
public static String toJSONString ( Object value ) $F82771 ( writer , writeJSONString , value , e )
public static final $F20163 CollectionX $F20163 toLazyCollection ( final Stream $F20163 stream ) { return SeqUtils . toLazyCollection ( stream . iterator ( ) ) ; }
$F32186 ( reader , this , _BOOL )
static Unit valueOf ( String name , boolean horizontal ) { if $F1277 ( name ) { Unit defaultUnit = Sizes . getDefaultUnit ( ) ; $F21525 ( defaultUnit ) return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y ; } else if $F3057 ( name ) { return PIXEL ; } else if $F3057 ( name ) { return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y ; } else if $F3057 ( name ) { return POINT ; } else if $F3057 ( name ) { return INCH ; } else if $F3057 ( name ) { return MILLIMETER ; } else if $F3057 ( name ) { return CENTIMETER ; } else { throw new IllegalArgumentException $F70412 ( name ) ; } }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if $F61157 ( argNum ) reportWrongNumberArgs ( ) ; }
