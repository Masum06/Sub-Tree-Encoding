[{"code": "private NumberFormat parseFormatter ( Context context , Arguments args ) { \n\t$F358736 ( format , args , FORMAT_PARAM_NAME ) final Locale $F199 ( locale , context , LOCALE ) ; \n\tif $F268 ( format ) { \n\t\treturn new DecimalFormat ( format , $F30623 ( DecimalFormatSymbols , locale ) ) ; \n\t\t} \n\tfinal Mode mode = Mode . loadFromContext ( args , this . defaultMode ) ; \n\tif ( Mode . INTEGER . equals ( mode ) ) { \n\t\treturn NumberFormat . getIntegerInstance ( locale ) ; \n\t\t} \n\tif ( Mode . CURRENCY . equals ( mode ) ) { \n\t\treturn NumberFormat . getCurrencyInstance ( locale ) ; \n\t\t} \n\tif ( Mode . PERCENT . equals ( mode ) ) { \n\t\treturn NumberFormat . getPercentInstance ( locale ) ; \n\t\t} \n\t$F46209 ( NumberFormat , locale ) } \n"}, {"code": "public static void register ( $F410888 String name , $F410888 Lexicon lexicon ) { \n\tlexiconCache . put ( $F1703283 ( name , lexicon ) ) ; \n\t} \n"}, {"code": "public static Element getEnvelope ( SOAPMessage m ) { \n\ttry { \n\t\treturn m . getSOAPPart ( ) . getEnvelope ( ) ; \n\t\t} \n\tcatch ( Exception e ) $F6096546 ( S1SystemError , e ) } \n"}, {"code": "public static SOAPMessage createSoapFromStream ( $F7168 ( headers ) , InputStream is ) $F123435 ( createSoapFromStream , headers , is ) "}, {"code": "public static void validateMessage ( String basePath , Document wsdl , SOAPMessage msg ) throws XSDFormatException , XSDValidationException { \n\t$F45360 ( LOG ) NodeList schemaNodes = wsdl . getElementsByTagNameNS ( XMLConstants . W3C_XML_SCHEMA_NS_URI , STRING00 ) ; \n\t$F215169 ( nrSchemas , schemaNodes ) Source [ ] schemas = new Source [ nrSchemas ] ; \n\tfor ( $F6610 ( i , nrSchemas ) ) { \n\t\tschemas [ i ] = new DOMSource ( $F12268 ( schemaNodes , i ) ) ; \n\t\t} \n\t$F356674 ( body ) try { \n\t\tbody = msg . getSOAPBody ( ) ; \n\t\t} \n\tcatch ( SOAPException e ) $F6096546 ( S1SystemError , e ) if ( $F1496567 ( msg ) . hasNext ( ) ) { \n\t\tbody = ( Element ) body . cloneNode ( true ) ; \n\t\tNodeList nl = body . getElementsByTagNameNS ( $F1286 ) ; \n\t\tfor ( $F12267 ( i , nl ) ) { \n\t\t\t$F356721 ( n , nl , i ) $F384092 ( n ) . removeChild ( n ) ; \n\t\t\t} \n\t\t} \n\tfor ( Element el : XMLFormat . getChildElementList ( $F69770 ( body ) ) ) { \n\t\t$F2620838 ( XMLFormat , basePath , schemas , el ) ; \n\t\t} \n\t} \n"}, {"code": "public static SOAPMessage send ( String endpoint , SOAPMessage data ) throws SOAPException { \n\tSOAPConnection soapConnection = null ; \n\ttry { \n\t\t$F117558 ( soapConnectionFactory , SOAPConnectionFactory ) soapConnection = soapConnectionFactory . createConnection ( ) ; \n\t\tSOAPMessage soapResponse = $F1450526 ( soapConnection , data , endpoint ) ; \n\t\tif $F19100 ( LOG ) { \n\t\t\tLOG . trace ( $F263970 ( endpoint ) + ( data != null ? $F18256 ( SOAPHelper , data ) : null ) + STRING00 + STRING00 + ( soapResponse != null ? $F18256 ( SOAPHelper , soapResponse ) : null ) ) ; \n\t\t\t} \n\t\telse if $F3507 ( LOG ) { \n\t\t\tLOG . trace ( $F10216 ( endpoint ) ) ; \n\t\t\t} \n\t\treturn soapResponse ; \n\t\t} \n\tcatch ( SOAPException e ) { \n\t\tif $F19100 ( LOG ) { \n\t\t\tLOG . trace ( $F27282 ( e ) + STRING00 + STRING00 + endpoint + STRING00 + STRING00 + ( data != null ? $F18256 ( SOAPHelper , data ) : null ) + STRING00 , e ) ; \n\t\t\t} \n\t\telse if $F3507 ( LOG ) { \n\t\t\tLOG . debug ( $F27282 ( e ) + STRING00 + STRING00 + endpoint , e ) ; \n\t\t\t} \n\t\tthrow e ; \n\t\t} \n\tfinally { \n\t\ttry $F94250 ( soapConnection ) $F165638 } \n\t} \n"}, {"code": "public static $F1975 readFile ( SOAPMessage msg , Element el ) { \n\tElement include = XMLFormat . getFirstChildElement ( $F3725 ( el ) ) ; \n\t$F96071 ( data ) if $F268 ( include ) { \n\t\tString id = STRING00 + $F12252 ( include ) . substring ( $F35341 ) + STRING00 ; \n\t\tIterator < AttachmentPart > it = $F1496567 ( msg ) ; \n\t\twhile $F11310 ( it ) { \n\t\t\tAttachmentPart $F11312 ( att , it ) ; \n\t\t\tif ( id . equals ( $F664248 ( att ) ) ) { \n\t\t\t\ttry { \n\t\t\t\t\tdata = att . getRawContentBytes ( ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( SOAPException e ) $F6096546 ( S1SystemError , e ) $F332 } \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F581926 ( b , el ) try { \n\t\t\t$F142712 ( data , Base64 , b ) ; \n\t\t\t} \n\t\tcatch ( Base64FormatException e ) $F6096546 ( S1SystemError , e ) } \n\tif $F3507 ( LOG ) LOG . debug ( STRING00 + ( data == null ? $F3745 : data . length ) ) ; \n\treturn data ; \n\t} \n"}, {"code": "public static void writeDataHandler ( boolean mtom , SOAPMessage msg , Element el , DataHandler dh ) { \n\tLOG . debug ( $F320 ( mtom ) + $F11800 ( dh ) ) ; \n\tif ( mtom ) { \n\t\tElement inc = $F2492441 ( el ) . createElementNS ( $F1286 ) ; \n\t\t$F309728 ( el , inc ) String id = $F4786 ( UUID ) + STRING00 ; \n\t\tAttachmentPart ap = msg . createAttachmentPart ( ) ; \n\t\tap . setDataHandler ( dh ) ; \n\t\tap . setContentId ( $F320 ( id ) ) ; \n\t\tmsg . addAttachmentPart ( ap ) ; \n\t\tinc . setAttribute ( $F6265 ( id ) ) ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tel . setTextContent ( Base64 . encode ( IOUtils . toBytes ( $F7587 ( dh ) ) ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F6096546 ( S1SystemError , e ) } \n\t} \n"}, {"code": "public static InputStream toInputStream ( SOAPMessage msg ) { \n\t$F90659 ( msg ) $F21492 ( os ) try { \n\t\t$F15804 ( msg , os ) } \n\tcatch ( Exception e ) $F6096546 ( S1SystemError , e ) return $F21502 ( os ) ; \n\t} \n"}, {"code": "public VmConfig getDefaultVmConfig $F2 { \n\treturn new Builder ( $F11851 ( System ) ) . addAllOptions ( Collections2 . filter ( $F5716 ( ManagementFactory ) . getInputArguments ( ) , new $F642 $F2 { \n\t\t$F1 public boolean apply $F624 ( input ) { \n\t\t\treturn $F12497 ( input ) ; \n\t\t\t} \n\t\t} \n\t) ) . addAllOptions ( $F159039 ( getArgs , subgroupMap , properties ) ) . build ( ) ; \n\t} \n"}, {"code": "private static File getJdkHomeDir ( $F623 String baseDirectoryPath , $F623 String homeDirPath , String vmConfigName ) throws InvalidConfigurationException { \n\tif $F112 ( homeDirPath ) { \n\t\t$F5765 ( baseDirectory , getBaseDirectory , baseDirectoryPath ) $F2501 ( homeDir , baseDirectory , vmConfigName ) checkConfiguration ( $F2602 ( homeDir ) , STRING00 , homeDir ) ; \n\t\treturn homeDir ; \n\t\t} \n\telse { \n\t\t$F2595 ( potentialHomeDir , homeDirPath ) if $F208934 ( potentialHomeDir ) { \n\t\t\tcheckConfiguration ( $F2602 ( potentialHomeDir ) , STRING00 , potentialHomeDir ) ; \n\t\t\treturn potentialHomeDir ; \n\t\t\t} \n\t\telse { \n\t\t\t$F5765 ( baseDirectory , getBaseDirectory , baseDirectoryPath ) $F2501 ( homeDir , baseDirectory , homeDirPath ) checkConfiguration ( $F2602 ( homeDir ) , STRING00 , potentialHomeDir ) ; \n\t\t\treturn homeDir ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public M joins $F30965 ( join ) { \n\tthis . delegate = Optional . of ( join ( join ) ) ; \n\t$F24894 ( THIS ) } \n"}, {"code": "public M joinsWith $F27155 ( separator , join ) { \n\tthis . delegate = Optional . of ( joinWith ( separator , join ) ) ; \n\t$F24894 ( THIS ) } \n"}, {"code": "public String joinWith $F27155 ( separator , join ) { \n\treturn $F462139 ( Joiner , separator ) . join ( $F57584 ( delegate , EMPTY , join ) ) ; \n\t} \n"}, {"code": "public M update ( String asNewDelegate ) { \n\tthis . delegate = $F326 ( Optional , asNewDelegate ) ; \n\tupdateHandle ( ) ; \n\t$F24894 ( THIS ) } \n"}, {"code": "public boolean containAll $F996 ( containWith ) { \n\tfor ( String contain : containWith ) { \n\t\tif ( ! contain ( contain ) ) $F1668 } \n\t$F232 } \n"}, {"code": "public boolean containsAll $F14585 ( containWith ) { \n\treturn containAll ( checkNotNull ( containWith ) . toArray ( $F90532 ( containWith ) ) ) ; \n\t} \n"}, {"code": "public boolean contains $F14585 ( containWith ) { \n\treturn contain ( checkNotNull ( containWith ) . toArray ( $F90532 ( containWith ) ) ) ; \n\t} \n"}, {"code": "public int indexs ( final Integer fromIndex , String ... indexWith ) { \n\tint index = INDEX_NONE_EXISTS ; \n\tfinal String target = ignoreCase ? $F144 ( delegate ) . toLowerCase ( ) : $F144 ( delegate ) ; \n\tfor ( String input : indexWith ) { \n\t\tString target2 = ignoreCase ? $F9283 ( input ) : input ; \n\t\tif ( ( $F36089 ( index , target , target2 , fromIndex ) ) >= INT00 ) $F356 ( index ) } \n\treturn index ; \n\t} \n"}, {"code": "public boolean isEmpty $F996 ( specialValueAsEmpty ) { \n\tif ( Strings . isNullOrEmpty ( $F144 ( delegate ) ) ) $F233 if ( null == specialValueAsEmpty || $F15456 ( specialValueAsEmpty ) ) $F1668 if ( Gather . from ( Arrays . asList ( checkNotNull ( specialValueAsEmpty ) ) ) . filter ( new Decision $F641 $F2 { \n\t\t$F1 public boolean apply ( String input ) { \n\t\t\treturn $F227390 ( isEqual , input , delegate ) ; \n\t\t\t} \n\t\t} \n\t) . noneNullList ( ) . size ( ) > INT00 ) $F233 return $F384 ( Decisions ) . apply ( $F144 ( delegate ) ) ; \n\t} \n"}, {"code": "public static $F96 toMap ( LoggingEvent e ) { \n\tfinal $F96 m = Objects . newHashMap ( STRING00 , $F9793 ( e ) , STRING00 , new Date ( $F962855 ( e ) ) , STRING00 , $F5227 ( e ) . toString ( ) , STRING00 , $F189987 ( e ) , STRING00 , $F5962 ( e ) , STRING00 , e . getLocationInformation ( ) . getFileName ( ) , STRING00 , e . getLocationInformation ( ) . getMethodName ( ) , STRING00 , e . getLocationInformation ( ) . getLineNumber ( ) , STRING00 , e . getMDC ( STRING00 ) , STRING00 , e . getMDC ( STRING00 ) , STRING00 , $F22867 ( Runtime ) . freeMemory ( ) , STRING00 , null ) ; \n\tif ( e . getThrowableInformation ( ) != null && e . getThrowableInformation ( ) . getThrowable ( ) != null ) { \n\t\tThrowable t = e . getThrowableInformation ( ) . getThrowable ( ) ; \n\t\tm . put ( STRING00 , Objects . newHashMap ( STRING00 , $F2443 ( t ) , STRING00 , $F6291 ( t ) , STRING00 , getStackTrace ( t ) ) ) ; \n\t\t} \n\treturn m ; \n\t} \n"}, {"code": "public static $F96 getLogClasses $F2 { \n\tSortedMap $F95 loggers = new $F385598 $F2 ; \n\t$F96 res = Objects . newHashMap ( STRING00 , $F189939 ( LogManager ) . getLevel ( ) . toString ( ) . toUpperCase ( ) , STRING00 , loggers ) ; \n\tEnumeration $F3670195 en = LogManager . getCurrentLoggers ( ) ; \n\twhile $F5506 ( en ) { \n\t\tCategory $F5508 ( e , en ) ; \n\t\tloggers . put ( $F507 ( e ) , e . getEffectiveLevel ( ) . toString ( ) . toUpperCase ( ) ) ; \n\t\t} \n\treturn res ; \n\t} \n"}, {"code": "public static void setLogLevel $F1195 ( cls , level ) { \n\tLogger l = null ; \n\tif $F309775 ( Objects , cls ) l = $F189939 ( LogManager ) ; \n\telse $F53602 ( l , LogManager , cls ) ; \n\tif $F187691 ( level ) l . setLevel ( Level . TRACE ) ; \n\telse if $F187691 ( level ) l . setLevel ( Level . DEBUG ) ; \n\telse if $F187691 ( level ) l . setLevel ( Level . INFO ) ; \n\telse if $F187691 ( level ) l . setLevel ( Level . WARN ) ; \n\telse if $F187691 ( level ) l . setLevel ( Level . ERROR ) ; \n\t} \n"}, {"code": "public static synchronized LogStorage getLogStorage $F2 { \n\tif $F112 ( storage ) { \n\t\tString cls = $F46221 ( Options ) . getSystem ( STRING00 , LogStorage . class . getName ( ) ) ; \n\t\ttry { \n\t\t\tstorage = ( LogStorage ) $F45914 ( Class , cls ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) $F6096546 ( S1SystemError , e ) } \n\treturn storage ; \n\t} \n"}, {"code": "$F762 public $F1372 T get ( Descriptor $F1372 descriptor ) { \n\tHttpServletRequest $F9005 ( request , WebFilter ) ; \n\tif $F112 ( request ) $F30911 ( super , descriptor ) Map < Descriptor $F45 , Object > components = ( Map < Descriptor $F45 , Object > ) $F25201 ( request , COMPONENTS ) ; \n\t$F84610 ( components , descriptor ) } \n"}, {"code": "$F762 public void deassociate ( HttpServletRequest context ) { \n\tMap < Descriptor $F45 , Object > components = ( Map < Descriptor $F45 , Object > ) $F25201 ( context , COMPONENTS ) ; \n\tfor ( $F5590 ( component , components ) ) { \n\t\ttry { \n\t\t\tEvent . of ( Passivated . class ) . on ( component ) . fire ( ) ; \n\t\t\t} \n\t\t$F148617 } \n\t$F47927 ( context , COMPONENTS ) for ( $F5590 ( component , components ) ) { \n\t\ttry { \n\t\t\tEvent . of ( Destroyed . class ) . on ( component ) . fire ( ) ; \n\t\t\t} \n\t\t$F148617 } \n\t} \n"}, {"code": "public boolean has $F61019 ( values ) { \n\tlong $F24330 ( p , pur , values ) ; \n\tfor ( $F75289 ( i , l , values ) ) { \n\t\tp += $F44691 ( pur , values , i ) ; \n\t\t} \n\treturn p == ( this . delegate & p ) ; \n\t} \n"}, {"code": "public Object read $F2 throws IOException { \n\t$F44616 ( buffer , BUFFER_LENGTH ) $F1697681 ( reader , BUFFER_LENGTH ) $F1987 ( count ) int textEnd ; \n\twhile $F38432 { \n\t\tint r = $F101709 ( reader , buffer , count ) ; \n\t\tif $F9467 ( r ) $F67525 ( textEnd , count ) count += r ; \n\t\t$F12232 ( possibleMarker , findPossibleMarker , buffer , count ) if $F319 ( possibleMarker ) $F67525 ( textEnd , possibleMarker ) if $F16084 ( count , marker ) $F42718 $F7296 ( reader ) String json = $F57850 ( reader ) . substring ( $F1203 ( marker ) ) ; \n\t\t$F47343 ( jsonParser , json ) } \n\t$F45672 ( count ) $F7296 ( reader ) $F169731 ( count , reader , buffer , textEnd ) ; \n\t$F96120 ( buffer , count ) } \n"}, {"code": "int findPossibleMarker $F92299 ( chars , limit ) { \n\tsearch : for ( int i = INT00 ; \n\ttrue ; \n\ti ++ ) { \n\t\tfor ( int m = INT00 ; \n\t\t$F8124 ( m , marker ) && i + m < limit ; \n\t\tm ++ ) { \n\t\t\tif ( chars [ i + m ] != $F14212 ( marker , m ) ) { \n\t\t\t\tcontinue search ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn i ; \n\t\t} \n\t} \n"}, {"code": "private File subDirForId ( String id ) { \n\tFile subDir = new File ( objs , $F2529 ( id , SUBDIR_POLICY ) ) ; \n\t$F11859 ( subDir ) return subDir ; \n\t} \n"}, {"code": "private File fileForItem ( String id ) { \n\t$F5765 ( subDir , subDirForId , id ) $F6994 ( fileName , id , SUBDIR_POLICY ) $F461630 ( subDir , fileName ) } \n"}, {"code": "private void createRepositoryDirectoryStructure ( File rootDir ) { \n\tthis . objs = $F2498 ( rootDir , OBJECT_DIR ) ; \n\tif $F11857 ( objs ) { \n\t\tif $F187040 ( objs ) { \n\t\t\tthrow new RuntimeException $F189660 ( objs ) ; \n\t\t\t} \n\t\t} \n\tthis . refs = $F2498 ( rootDir , REFERENCE_DIR ) ; \n\tif $F11857 ( refs ) { \n\t\tif $F187040 ( refs ) { \n\t\t\tthrow new RuntimeException $F189660 ( refs ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String replaceAllBetweenDelimiter ( final String source , final String startStr , final String endStr , final String replaceSrc , final String replaceDest ) { \n\t$F9439 ( str , source ) for ( int procPointer = INT00 ; \n\tprocPointer >= INT00 ; \n\t) { \n\t\t$F145457 ( start , str , startStr , procPointer ) $F3747 ( end ) if $F9869 ( start ) { \n\t\t\t$F162225 ( end , str , endStr , start ) } \n\t\tif $F2523 ( end ) $F16052 ( procPointer ) else { \n\t\t\tString midStr = str . substring ( $F6103 ( start , startStr ) , end ) . replaceAll ( replaceSrc , replaceDest ) ; \n\t\t\tstr . replace ( $F6103 ( start , startStr ) , end , midStr ) ; \n\t\t\tprocPointer = $F6103 ( start , startStr ) + $F1203 ( midStr ) + $F1203 ( endStr ) ; \n\t\t\t} \n\t\t} \n\t$F1226 ( str ) } \n"}, {"code": "protected void build ( List xmlElements , boolean interpreteAsXHTML ) throws ParseException { \n\t$F1357 ( this , interpreteAsXHTML ) $F23123 ( nrofElements , xmlElements ) for ( $F6610 ( i , nrofElements ) ) { \n\t\t$F2744 ( element , xmlElements , i ) if $F1513914 ( element ) { \n\t\t\tthis . addNode ( ( Node ) element ) ; \n\t\t\t} \n\t\telse if ( element instanceof Tag ) { \n\t\t\tTag subtag = ( Tag ) element ; \n\t\t\tif ( subtag . type == Tag . START_TAG ) { \n\t\t\t\tif ( subtag . correspondingTag != null ) { \n\t\t\t\t\t$F989674 ( elementsInbetween ) int endTagPos = xmlElements . indexOf ( subtag . correspondingTag ) ; \n\t\t\t\t\tfor ( i ++ ; \n\t\t\t\t\ti < endTagPos ; \n\t\t\t\t\ti ++ ) $F96011 ( elementsInbetween , xmlElements , i ) Node newNode = new Node ( this instanceof Node ? ( Node ) this : null , subtag , elementsInbetween , interpreteAsXHTML ) ; \n\t\t\t\t\tif ( ! newNode . isEmptyXHTMLMarkupNode ( ) ) { \n\t\t\t\t\t\t$F528 ( contents , newNode ) if ( interpreteAsXHTML && $F2696 ( isHTMLMarkupTag , getName ) ) $F24354 ( containsMarkupText ) } \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( interpreteAsXHTML ) { \n\t\t\t\t\t\tNode newNode = new Node ( this instanceof Node ? ( Node ) this : null , subtag , true , interpreteAsXHTML ) ; \n\t\t\t\t\t\tif ( ! newNode . isEmptyXHTMLMarkupNode ( ) ) $F529 ( contents , newNode ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\tthrow new ParseException ( STRING00 + subtag . tagname + STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( subtag . type == Tag . SINGLE_TAG ) { \n\t\t\t\tNode newNode = new Node ( this instanceof Node ? ( Node ) this : null , subtag , true , interpreteAsXHTML ) ; \n\t\t\t\tif ( ! newNode . isEmptyXHTMLMarkupNode ( ) ) $F529 ( contents , newNode ) } \n\t\t\telse if ( subtag . type == Tag . END_TAG ) $F1645 else $F529 ( contents , element ) } \n\t\telse if $F4380 ( element ) { \n\t\t\t$F528 ( contents , element ) if ( $F100248 ( element ) . length ( ) > INT00 ) { \n\t\t\t\tif $F3415 ( contents ) $F24354 ( containsSingleString ) else { \n\t\t\t\t\tcontainsSingleString = false ; \n\t\t\t\t\tcontainsMarkupText = true ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tthrow new IllegalStateException $F85647 ( element ) ; \n\t\t\t} \n\t\t} \n\tif ( interpreteAsXHTML && $F3414 ( contents ) ) { \n\t\tObject o = $F3417 ( contents ) ; \n\t\tif $F1513914 ( o ) { \n\t\t\tNode $F1954627 ( node , o ) ; \n\t\t\tif ( $F508 ( node ) ( getName ( ) ) && $F2696 ( isHTMLMarkupTag , getName ) ) { \n\t\t\t\tif $F112 ( nodeAttributes ) $F141030 ( nodeAttributes , node ) else { \n\t\t\t\t\tnodeAttributes . putAll ( node . nodeAttributes ) ; \n\t\t\t\t\t} \n\t\t\t\t$F3817 ( contents , node ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void renameNodesInTree $F1195 ( oldName , newName ) { \n\t$F94036 nodes = getNodesFromTreeByName ( oldName ) ; \n\t$F680835 ( i , nodes ) while $F11310 ( i ) { \n\t\tNode n = ( Node ) $F11311 ( i ) ; \n\t\t$F13102 ( n , newName ) } \n\t} \n"}, {"code": "public void renameNodesWithAttributeValue $F1245 ( oldName , newName , attributeName , attributeValue ) { \n\t$F94036 nodes = getNodesFromTreeByName ( oldName ) ; \n\t$F680835 ( i , nodes ) while $F11310 ( i ) { \n\t\tNode n = ( Node ) $F11311 ( i ) ; \n\t\t$F13102 ( n , newName ) } \n\t} \n"}, {"code": "public void setValue ( String value ) { \n\t$F1955127 ( contents ) $F528 ( contents , value ) if $F100166 ( value ) $F24354 ( containsSingleString ) } \n"}, {"code": "public void addValue ( String value ) { \n\t$F528 ( contents , value ) if $F100166 ( value ) { \n\t\tif $F3415 ( contents ) $F24354 ( containsSingleString ) else { \n\t\t\tcontainsSingleString = false ; \n\t\t\tcontainsMarkupText = true ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void setContents ( ArrayList contents ) { \n\t$F1357 ( this , contents ) containsMarkupText = false ; \n\tcontainsSingleString = false ; \n\t$F680835 ( i , contents ) while $F11310 ( i ) { \n\t\t$F58862 ( o , i ) if ( ! $F1513914 ( o ) ) { \n\t\t\tif ( o instanceof String && $F100248 ( o ) . length ( ) > INT00 ) { \n\t\t\t\tif $F3415 ( contents ) $F24354 ( containsSingleString ) else { \n\t\t\t\t\tcontainsSingleString = false ; \n\t\t\t\t\tcontainsMarkupText = true ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tNode $F1954627 ( node , o ) ; \n\t\t\tnode . parentNode = this instanceof Node ? ( Node ) this : null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Node addNode ( Node subNode ) { \n\tif $F1513914 ( this ) { \n\t\tsubNode . parentNode = ( Node ) this ; \n\t\t} \n\t$F528 ( contents , subNode ) return subNode ; \n\t} \n"}, {"code": "$F1 public ActivityData call $F2 throws ActivityException { \n\ttry { \n\t\tlogger . trace ( STRING00 , $F2893925 ( info ) . getId ( ) , index ) ; \n\t\treturn $F2893925 ( info ) . perform ( $F20708 ( info ) , $F200493 ( info ) ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlogger . error ( STRING00 , $F2893925 ( info ) . getId ( ) , index ) ; \n\t\tthrow new ActivityException ( STRING00 + $F2893925 ( info ) . getId ( ) + STRING00 + index , e ) ; \n\t\t} \n\tfinally { \n\t\tlogger . trace ( STRING00 , $F2893925 ( info ) . getId ( ) , index , $F3413 ( queue ) ) ; \n\t\t$F109302 ( queue , index ) } \n\t} \n"}, {"code": "$F1 public void execute ( final Object context , int backgroundTaskId , final Object ... args ) { \n\ttry { \n\t\t$F68542 methods = MethodUtils . getAllMethods ( context , Async . class ) ; \n\t\tAsync backgroundTask ; \n\t\tfor ( Method method : methods ) { \n\t\t\tbackgroundTask = method . getAnnotation ( Async . class ) ; \n\t\t\tif ( $F11145 ( backgroundTask ) == backgroundTaskId ) { \n\t\t\t\tTaskExecutor . CACHED_THREAD_POOL . execute ( context , method , args ) ; \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F1200 ( stringBuilder ) $F1218 ( stringBuilder ) $F1212 ( stringBuilder , backgroundTaskId ) $F1218 ( stringBuilder ) stringBuilder . append ( $F6291 ( context ) ) ; \n\t\t$F1218 ( stringBuilder ) $F1964139 ( stringBuilder , Arrays , args ) $F1218 ( stringBuilder ) Log . e ( AsyncTaskService . class . getName ( ) , $F797 ( stringBuilder ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tContext context = ContextUtils . discover ( $F20708 ( config ) ) ; \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . SYSTEM_SERVICE ) ; \n\t$F263365 contextFields = $F1412586 . getDeclaredFields ( ) ; \n\tfor ( Field field : fields ) { \n\t\ttry { \n\t\t\tfor ( Field contextField : contextFields ) { \n\t\t\t\tif ( $F494819 ( contextField ) ( $F507 ( field ) ) ) { \n\t\t\t\t\tString identifier = ( String ) $F43132 ( contextField ) ; \n\t\t\t\t\tif $F498138 ( field ) $F10869 ( field ) field . set ( $F20708 ( config ) , context . getSystemService ( identifier ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public Trace $F47188 createTrace ( TraceType traceType , String ... args ) { \n\tswitch ( traceType ) { \n\t\tcase email : return new EmailTrace ( $F88881 ( emailConfiguration , args ) ) ; \n\t\tcase file : return new FileTrace ( $F88881 ( fileConfiguration , args ) ) ; \n\t\t$F2377 $F101144 ( String , traceType ) } \n\t} \n"}, {"code": "public static RuntimeException wrap ( Throwable throwable ) { \n\tRuntimeException result ; \n\tif $F41890 ( throwable ) { \n\t\tresult = ( RuntimeException ) throwable ; \n\t\t} \n\telse { \n\t\tresult = new RuntimeException ( $F9272 ( throwable ) , throwable ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void open ( AudioFormat format , int bufferSize ) throws LineUnavailableException { \n\topening ( ) ; \n\t$F111870 ( sourceDataLine , format , bufferSize ) ; \n\t} \n"}, {"code": "$F1 public int write $F9459 ( b , off , len ) { \n\tif ( isMutable ) { \n\t\treturn $F120433 ( sourceDataLine , b , off , len ) ; \n\t\t} \n\telse { \n\t\tif ( isMutedFromSystem ) { \n\t\t\t$F62488 ( newArr , b ) return $F120433 ( sourceDataLine , newArr , off , len ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn $F120433 ( sourceDataLine , b , off , len ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F1975 getIntoByteArray ( Cache cache , String resource , CacheMissHandler ... handlers ) throws CacheException { \n\tif $F112 ( cache ) { \n\t\t$F15466 ( logger ) throw new CacheException $F6 ; \n\t\t} \n\t$F99950 ( input ) $F1453880 ( output ) try { \n\t\t$F183995 ( input , cache , resource , handlers ) if $F268 ( input ) { \n\t\t\t$F295555 ( output ) long copied = $F47448 ( Streams , input , output ) ; \n\t\t\t$F176425 ( logger , copied ) $F40825 ( output ) } \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F5572 ( logger , e ) throw new CacheException $F2756 ( e ) ; \n\t\t} \n\tfinally { \n\t\tStreams . safelyClose ( input ) ; \n\t\tStreams . safelyClose ( output ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static long putFromByteArray ( Cache cache , String resource , $F1975 data ) throws CacheException { \n\tif $F112 ( cache ) { \n\t\t$F15466 ( logger ) throw new CacheException $F6 ; \n\t\t} \n\tByteArrayInputStream input = null ; \n\t$F101988 ( output ) try { \n\t\toutput = $F45609 ( cache , resource ) ; \n\t\tif $F268 ( output ) { \n\t\t\t$F226897 ( input , data ) ; \n\t\t\tlong copied = $F47448 ( Streams , input , output ) ; \n\t\t\t$F176425 ( logger , copied ) return copied ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F5572 ( logger , e ) throw new CacheException $F2756 ( e ) ; \n\t\t} \n\tfinally { \n\t\tStreams . safelyClose ( input ) ; \n\t\tStreams . safelyClose ( output ) ; \n\t\t} \n\t$F16096 } \n"}, {"code": "public static $F211176 getSqlDate $F65855 ( year , month , date ) { \n\t$F13217 ( cal , Calendar ) cal . setTime ( new $F343628 $F1415 ) ; \n\t$F134926 ( cal , Calendar , year ) cal . set ( Calendar . MONTH , month - INT00 ) ; \n\tcal . set ( Calendar . DATE , date ) ; \n\t$F1723701 ( cal , Calendar ) $F1723703 ( cal , Calendar ) $F1723706 ( cal , Calendar ) $F1905394 ( cal , Calendar ) return getSqlDate ( $F31809 ( cal ) ) ; \n\t} \n"}, {"code": "public static $F211176 getSqlDate ( $F343629 ( date ) ) { \n\t$F13217 ( cal , Calendar ) $F134938 ( cal , date ) return new $F211176 ( $F396645 ( cal ) ) ; \n\t} \n"}, {"code": "public static $F281391 getSqlTime $F65855 ( hour , minute , second ) { \n\t$F13217 ( cal , Calendar ) cal . setTime ( new $F343628 $F1415 ) ; \n\tcal . set ( Calendar . HOUR_OF_DAY , hour ) ; \n\tcal . set ( Calendar . MINUTE , minute ) ; \n\tcal . set ( Calendar . SECOND , second ) ; \n\t$F1905394 ( cal , Calendar ) return getSqlTime ( $F31809 ( cal ) ) ; \n\t} \n"}, {"code": "public static $F281391 getSqlTime ( $F343629 ( date ) ) { \n\t$F13217 ( cal , Calendar ) $F134938 ( cal , date ) return new $F281391 ( $F396645 ( cal ) ) ; \n\t} \n"}, {"code": "public static $F343875 getSqlTimeStamp ( $F343629 ( date ) ) { \n\t$F13217 ( cal , Calendar ) $F134938 ( cal , date ) return new $F343875 ( $F396645 ( cal ) ) ; \n\t} \n"}, {"code": "private $F197020 Collection < FirewallRule > toFirewallRules ( $F197020 List < com . google . api . services . compute . model . Firewall > rules ) { \n\tArrayList < FirewallRule > firewallRules = new ArrayList < FirewallRule > $F2 ; \n\tfor ( com . google . api . services . compute . model . Firewall googleRule : rules ) { \n\t\tList < RuleTarget > sources = new ArrayList < RuleTarget > $F2 ; \n\t\tif ( googleRule . getSourceRanges ( ) != null ) for ( String source : googleRule . getSourceRanges ( ) ) { \n\t\t\tif ( InetAddressUtils . isIPv4Address ( source ) ) $F35691 ( source ) sources . add ( RuleTarget . getCIDR ( source ) ) ; \n\t\t\t} \n\t\telse if ( googleRule . getSourceTags ( ) != null ) for ( String source : googleRule . getSourceTags ( ) ) { \n\t\t\tsources . add ( RuleTarget . getVirtualMachine ( source ) ) ; \n\t\t\t} \n\t\telse return firewallRules ; \n\t\tfor ( RuleTarget sourceTarget : sources ) { \n\t\t\t$F19733 ( tail ) if $F4340 ( sources ) tail = STRING00 + sourceTarget . getCidr ( ) ; \n\t\t\tString vLanId = googleRule . getNetwork ( ) . substring ( googleRule . getNetwork ( ) . lastIndexOf ( STRING00 ) + INT00 ) ; \n\t\t\tfor ( Allowed allowed : googleRule . getAllowed ( ) ) { \n\t\t\t\tProtocol protocol = Protocol . ANY ; \n\t\t\t\ttry { \n\t\t\t\t\tprotocol = Protocol . valueOf ( allowed . getIPProtocol ( ) . toUpperCase ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( IllegalArgumentException ex ) $F1645 RuleTarget destinationTarget ; \n\t\t\t\t$F1987 ( portStart ) $F1987 ( portEnd ) if ( protocol != Protocol . ICMP ) { \n\t\t\t\t\tif ( $F206761 ( allowed ) && ( null != allowed . getPorts ( ) ) ) { \n\t\t\t\t\t\tfor ( String portString : allowed . getPorts ( ) ) { \n\t\t\t\t\t\t\tif $F101512 ( portString ) { \n\t\t\t\t\t\t\t\t$F30789 ( parts , portString ) $F93285 ( portStart , Integer , parts ) ; \n\t\t\t\t\t\t\t\t$F93285 ( portEnd , Integer , parts ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse portStart = $F19398 ( portEnd , Integer , portString ) ; \n\t\t\t\t\t\t\tif ( googleRule . getTargetTags ( ) != null ) { \n\t\t\t\t\t\t\t\tfor ( String targetTag : googleRule . getTargetTags ( ) ) { \n\t\t\t\t\t\t\t\t\tdestinationTarget = RuleTarget . getVirtualMachine ( targetTag ) ; \n\t\t\t\t\t\t\t\t\tFirewallRule rule = FirewallRule . getInstance ( $F627197 ( googleRule , tail ) , STRING00 + vLanId , sourceTarget , Direction . INGRESS , protocol , Permission . ALLOW , destinationTarget , portStart , portEnd ) ; \n\t\t\t\t\t\t\t\t\t$F528 ( firewallRules , rule ) } \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\tdestinationTarget = RuleTarget . getVlan ( vLanId ) ; \n\t\t\t\t\t\t\t\tFirewallRule rule = FirewallRule . getInstance ( $F627197 ( googleRule , tail ) , STRING00 + vLanId , sourceTarget , Direction . INGRESS , protocol , Permission . ALLOW , destinationTarget , portStart , portEnd ) ; \n\t\t\t\t\t\t\t\t$F528 ( firewallRules , rule ) } \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( googleRule . getTargetTags ( ) != null ) { \n\t\t\t\t\t\tfor ( String targetTag : googleRule . getTargetTags ( ) ) { \n\t\t\t\t\t\t\tdestinationTarget = RuleTarget . getVirtualMachine ( targetTag ) ; \n\t\t\t\t\t\t\tFirewallRule rule = FirewallRule . getInstance ( $F627197 ( googleRule , tail ) , STRING00 + vLanId , sourceTarget , Direction . INGRESS , protocol , Permission . ALLOW , destinationTarget , portStart , portEnd ) ; \n\t\t\t\t\t\t\t$F528 ( firewallRules , rule ) } \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tdestinationTarget = RuleTarget . getVlan ( vLanId ) ; \n\t\t\t\t\t\tFirewallRule rule = FirewallRule . getInstance ( $F627197 ( googleRule , tail ) , STRING00 + vLanId , sourceTarget , Direction . INGRESS , protocol , Permission . ALLOW , destinationTarget , portStart , portEnd ) ; \n\t\t\t\t\t\t$F528 ( firewallRules , rule ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn firewallRules ; \n\t} \n"}, {"code": "$F1 public Type getGenericType $F2 { \n\tType resultType ; \n\tif ( CheckUtil . checkBounds ( this . param , this . method . getGenericParameterTypes ( ) ) ) { \n\t\tresultType = this . method . getGenericParameterTypes ( ) [ this . param ] ; \n\t\t} \n\telse { \n\t\tresultType = this . method . getGenericReturnType ( ) ; \n\t\t} \n\treturn resultType ; \n\t} \n"}, {"code": "$F197020 public static String trimLeft $F6904982 ( value ) { \n\tfinal StringBuilder result = new StringBuilder ( assertNotNull ( value ) . length ( ) ) ; \n\t$F1987 ( index ) for ( ; \n\t$F8124 ( index , value ) ; \n\tindex ++ ) { \n\t\t$F143056 ( chr , value , index ) if ( ! ( $F108020 ( Character , chr ) || Character . isISOControl ( chr ) ) ) $F332 } \n\tif $F16084 ( index , value ) { \n\t\tresult . append ( $F84345 ( value , index ) ) ; \n\t\t} \n\t$F1226 ( result ) } \n"}, {"code": "$F762 public static < T extends Levenshtein > T of $F1195 ( baseTarget , compareTarget ) { \n\treturn ( T ) new LevenshteinEditDistance ( baseTarget ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T weightedLevenshtein ( String baseTarget , CharacterSubstitution characterSubstitution ) $F35506 ( weightedLevenshtein , baseTarget , characterSubstitution ) "}, {"code": "$F762 public static < T extends Levenshtein > T weightedLevenshtein ( String baseTarget , String compareTarget , CharacterSubstitution characterSubstitution ) { \n\treturn ( T ) new WeightedLevenshtein ( baseTarget , characterSubstitution ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "$F762 public static < T extends Levenshtein > T damerau $F1195 ( baseTarget , compareTarget ) { \n\treturn ( T ) new Damerau ( baseTarget ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "$F762 public static < T extends Levenshtein > T jaroWinkler $F1195 ( baseTarget , compareTarget ) { \n\treturn ( T ) new JaroWinkler ( baseTarget ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "$F762 public static < T extends Levenshtein > T longestCommonSubsequence $F1195 ( baseTarget , compareTarget ) { \n\treturn ( T ) new LongestCommonSubsequence ( baseTarget ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T QGram $F1195 ( baseTarget , compareTarget ) $F22720 ( QGram , baseTarget , compareTarget ) "}, {"code": "$F762 public static < T extends Levenshtein > T QGram ( String baseTarget , String compareTarget , Integer k ) { \n\treturn ( T ) new QGram ( baseTarget , k ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T NGram $F1195 ( baseTarget , compareTarget ) $F22720 ( NGram , baseTarget , compareTarget ) "}, {"code": "$F762 public static < T extends Levenshtein > T NGram ( String baseTarget , String compareTarget , Integer n ) { \n\treturn ( T ) new NGram ( baseTarget , n ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T jaccard $F1195 ( baseTarget , compareTarget ) $F22720 ( jaccard , baseTarget , compareTarget ) "}, {"code": "$F762 public static < T extends Levenshtein > T jaccard ( String baseTarget , String compareTarget , Integer k ) { \n\treturn ( T ) new Jaccard ( baseTarget , k ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T sorensenDice $F1195 ( baseTarget , compareTarget ) $F22720 ( sorensenDice , baseTarget , compareTarget ) "}, {"code": "$F762 public static < T extends Levenshtein > T sorensenDice ( String baseTarget , String compareTarget , Integer k ) { \n\treturn ( T ) new SorensenDice ( baseTarget , k ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public static < T extends Levenshtein > T cosine $F1195 ( baseTarget , compareTarget ) $F22720 ( cosine , baseTarget , compareTarget ) "}, {"code": "$F762 public static < T extends Levenshtein > T cosine ( String baseTarget , String compareTarget , Integer k ) { \n\treturn ( T ) new Cosine ( baseTarget , k ) . update ( compareTarget ) ; \n\t} \n"}, {"code": "public synchronized void take ( long bytes ) throws ScriptLimitException { \n\tif $F3730 ( limit ) { \n\t\tmemory -= bytes ; \n\t\tif $F2523 ( memory ) throw new ScriptLimitException ( ScriptLimitException . Limits . MEMORY , limit ) ; \n\t\t} \n\t} \n"}, {"code": "public void checkPermission ( Permission perm , AddOnModel addOnModel ) throws IzouPermissionException { \n\ttry { \n\t\trootPermission . checkPermission ( perm , addOnModel ) ; \n\t\t$F254 } \n\tcatch ( IzouPermissionException ignored ) $F1645 $F6151 ( standardCheck ) ( permissionModule - > permissionModule . canCheckPermission ( perm ) ) . forEach ( permissionModule - > permissionModule . checkPermission ( perm , addOnModel ) ) ; \n\t} \n"}, {"code": "$F1 public void put ( String key , String groupId , String templateId , String version , Template $F45 template ) { \n\tif $F112 ( key ) { \n\t\tMap < String , Template $F45 > $F2197 ( vMap , gtvTable , groupId , templateId ) ; \n\t\tif $F112 ( vMap ) { \n\t\t\tvMap = new HashMap < String , Template $F45 > $F2 ; \n\t\t\t$F84556 ( gtvTable , groupId , templateId , vMap ) } \n\t\telse if $F33656 ( vMap , version ) { \n\t\t\tthrow new IllegalStateException ( $F234052 ( groupId , templateId , version , key ) ) ; \n\t\t\t} \n\t\t$F2725 ( vMap , version , template ) } \n\telse if $F101512 ( key ) { \n\t\tStringTokenizer tokenizer = new StringTokenizer ( $F16411 ( key ) ) ; \n\t\t$F651269 ( groupId , tokenizer ) $F651269 ( templateId , tokenizer ) $F651269 ( version , tokenizer ) Map < String , Template $F45 > $F2197 ( vMap , gtvTable , groupId , templateId ) ; \n\t\tif $F112 ( vMap ) { \n\t\t\tvMap = new HashMap < String , Template $F45 > $F2 ; \n\t\t\t$F84556 ( gtvTable , groupId , templateId , vMap ) } \n\t\telse if $F33656 ( vMap , version ) { \n\t\t\tthrow new IllegalStateException ( $F234052 ( groupId , templateId , version , key ) ) ; \n\t\t\t} \n\t\t$F2725 ( vMap , version , template ) } \n\telse { \n\t\tif $F33656 ( kMap , key ) $F4979 ( key ) $F2725 ( kMap , key , template ) } \n\t} \n"}, {"code": "public List < ResourceModel > generateResources ( EventModel $F45 event ) { \n\tif ( ! event . getAllInformations ( ) . stream ( ) . anyMatch ( eventSubscribers : : containsKey ) ) return $F35087 ; \n\tList < ResourceBuilderModel > resourceBuilders = event . getAllInformations ( ) . stream ( ) . map ( eventSubscribers : : <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 $F161 ( flatMap , Collection ) $F65583 distinct ( ) . collect ( $F1507 ( Collectors ) ) ; \n\t$F4282 ( generateResources , resourceBuilders , event ) } \n"}, {"code": "private List < ResourceModel > generateResources ( List < ResourceBuilderModel > resourceBuilders , EventModel event ) { \n\tOptional < EventModel > parameter = event != null ? $F326 ( Optional , event ) : $F9162 ( Optional ) ; \n\tList < CompletableFuture < List < ResourceModel > > > futures = $F5026 ( resourceBuilders ) ( $F1775144 ( resourceB , submit ) - > resourceB . provideResource ( resourceB . announceResources ( ) , parameter ) ) ) . $F5032 ( collect , Collectors ) try { \n\t\t$F317507 ( futures , timeOut ) } \n\tcatch ( InterruptedException e ) $F182041 ( debug , e ) return $F476934 ( futures , future ) <missing ';'> { \n\t\ttry $F2975 ( future ) catch ( $F213657 e ) { \n\t\t\t$F62615 ( debug , e ) $F724 } \n\t\t} \n\t) . $F161 ( filter , Objects ) $F29989 $F161 ( flatMap , Collection ) $F65583 $F5032 ( collect , Collectors ) } \n"}, {"code": "$F15734 public void generatedResource ( ResourceModel resource , Consumer < List < ResourceModel > > consumer ) throws IllegalIDException { \n\t$F349304 ( generateResource , resource ) ( completableFuture - > completableFuture . thenAccept ( consumer ) ) ; \n\t} \n"}, {"code": "public Optional < CompletableFuture < List < ResourceModel > > > generateResource ( ResourceModel resource ) throws IllegalIDException { \n\tif ( resourceIDs . get ( resource . getResourceID ( ) ) == null ) $F9163 ( Optional ) return resourceIDs . get ( resource . getResourceID ( ) ) . stream ( ) . filter ( resourceS - > ! resource . hasProvider ( ) || resourceS . isOwner ( $F33606 ( resource ) ) ) . findFirst ( ) . map ( $F1775144 ( resourceB , submit ) - > resourceB . provideResource ( $F15177 ( Collections , resource ) , $F9162 ( Optional ) ) ) ) ; \n\t} \n"}, {"code": "private void registerResourceIDsForResourceBuilder ( ResourceBuilderModel resourceBuilder ) { \n\tList < ? extends ResourceModel > resources = resourceBuilder . announceResources ( ) ; \n\t$F88368 ( resources ) $F5027 ( resources , this ) <missing ';'> getRegisteredListForResource ) . forEach ( list - $F364879 ( list , resourceBuilder ) ) ; \n\t} \n"}, {"code": "private List < ResourceBuilderModel > getRegisteredListForResource ( ResourceModel resource ) { \n\tif ( resourceIDs . containsKey ( resource . getResourceID ( ) ) ) { \n\t\treturn resourceIDs . get ( resource . getResourceID ( ) ) ; \n\t\t} \n\telse { \n\t\tLinkedList < ResourceBuilderModel > $F35088 ( tempList ) ; \n\t\tresourceIDs . put ( resource . getResourceID ( ) , tempList ) ; \n\t\treturn tempList ; \n\t\t} \n\t} \n"}, {"code": "private void registerEventsForResourceBuilder ( ResourceBuilderModel resourceBuilder ) { \n\tList < ? extends EventModel $F45 > events = resourceBuilder . announceEvents ( ) ; \n\t$F88368 ( events ) $F6151 ( events ) ( event - > event . getAllInformations ( ) != null ) . flatMap ( event - > event . getAllInformations ( ) . stream ( ) ) . map ( this : : <missing ';'> getRegisteredListForEvent ) . forEach ( list - $F364879 ( list , resourceBuilder ) ) ; \n\t} \n"}, {"code": "private List < ResourceBuilderModel > getRegisteredListForEvent ( String event ) { \n\tif $F33656 ( eventSubscribers , event ) $F30911 ( eventSubscribers , event ) else { \n\t\tLinkedList < ResourceBuilderModel > $F35088 ( tempList ) ; \n\t\t$F2725 ( eventSubscribers , event , tempList ) return tempList ; \n\t\t} \n\t} \n"}, {"code": "private void unregisterResourceIDForResourceBuilder ( ResourceBuilderModel resourceBuilder ) { \n\tList < ? extends ResourceModel > resources = resourceBuilder . announceResources ( ) ; \n\t$F5026 ( resources ) ( resource - > resourceIDs . get ( resource . getResourceID ( ) ) ) . filter ( Objects : : <missing ';'> $F29989 forEach ( list - > list . remove ( resourceBuilder ) ) ; \n\t} \n"}, {"code": "private void unregisterEventsForResourceBuilder ( ResourceBuilderModel resourceBuilder ) { \n\tresourceBuilder . announceEvents ( ) . stream ( ) . map ( eventSubscribers : : <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 forEach ( list - > list . remove ( resourceBuilder ) ) ; \n\t} \n"}, {"code": "public Response buildResponse ( String samlResponse ) throws MnoException { \n\ttry { \n\t\treturn Response . loadFromBase64XML ( this , samlResponse ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new MnoException $F5148 ( samlResponse , e ) ; \n\t\t} \n\t} \n"}, {"code": "protected Object process $F844 ( operation , data ) { \n\tClosure $F38765 $F199 ( cl , operations , operation ) ; \n\tif $F268 ( cl ) { \n\t\treturn $F391338 ( cl , data ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public $F53004 toMap $F2 { \n\t$F53004 result = new $F77681 $F2 ; \n\t$F2725 ( result , key , value ) return result ; \n\t} \n"}, {"code": "public static String concatenate ( Collection < HttpParameter > parameters ) throws HttpClientException { \n\t$F1200 ( buffer ) for ( HttpParameter parameter : parameters ) { \n\t\tif ( $F511 ( parameter ) == Type . FILE ) { \n\t\t\tlogger . error ( STRING00 , $F507 ( parameter ) , $F444560 ( parameter ) ) ; \n\t\t\tthrow new HttpClientException $F6 ; \n\t\t\t} \n\t\tbuffer . append ( $F1215 ( buffer ) ? STRING00 : STRING00 ) ; \n\t\ttry { \n\t\t\tbuffer . append ( URLEncoder . encode ( ( ( HttpTextParameter ) parameter ) . getName ( ) , STRING00 ) ) . append ( STRING00 ) . append ( URLEncoder . encode ( ( ( HttpTextParameter ) parameter ) . getValue ( ) . toString ( ) , STRING00 ) ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException e ) $F5573 ( logger , e ) } \n\t$F1226 ( buffer ) } \n"}, {"code": "public static int length ( String str ) { \n\tif $F1931 ( StringUtils , str ) $F8383 $F101721 ( str ) $F133651 ( str ) } \n"}, {"code": "public static boolean matchMobile ( String str ) { \n\tif $F1931 ( StringUtils , str ) $F213 return Pattern . matches ( REG_MOBILE , $F5445 ( str ) ) ; \n\t} \n"}, {"code": "public $F16845591 process ( $F16845591 soilsData ) { \n\t$F3567120 ( previousSoil ) ; \n\t$F16845591 aggregatedSoilsData ; \n\t$F3567120 ( aggregatedSoil ) ; \n\tboolean aggregate ; \n\tboolean enforceAggregation ; \n\tpreviousSoil = null ; \n\taggregate = true ; \n\tenforceAggregation = false ; \n\taggregatedSoilsData = new $F16845591 $F2 ; \n\t$F16845591 normalizedSoilsData = normalizeSoilLayers ( soilsData ) ; \n\t$F15610 ( log , normalizedSoilsData ) $F1987 ( i ) for ( $F129099 currentSoil : normalizedSoilsData ) { \n\t\ti ++ ; \n\t\tif $F268 ( previousSoil ) { \n\t\t\tif ( $F3413 ( aggregatedSoilsData ) == getMaxSoilLayers ( ) ) $F24354 ( enforceAggregation ) aggregate = decorator . shouldAggregateSoils ( currentSoil , previousSoil ) || enforceAggregation ; \n\t\t\tif ( aggregate ) { \n\t\t\t\tlog . debug ( $F320 ( i ) + $F60967 ( i ) ) ; \n\t\t\t\t$F13173 ( log , i , currentSoil ) log . debug ( $F96105 ( i ) + STRING00 + previousSoil ) ; \n\t\t\t\taggregatedSoil = decorator . computeSoil ( currentSoil , previousSoil ) ; \n\t\t\t\tif $F8674 ( aggregatedSoilsData , previousSoil ) $F6954 ( aggregatedSoilsData , previousSoil ) previousSoil = aggregatedSoil ; \n\t\t\t\t$F528 ( aggregatedSoilsData , aggregatedSoil ) } \n\t\t\telse { \n\t\t\t\tpreviousSoil = currentSoil ; \n\t\t\t\t$F45360 ( log ) $F13173 ( log , i , currentSoil ) $F528 ( aggregatedSoilsData , currentSoil ) } \n\t\t\t} \n\t\telse { \n\t\t\tpreviousSoil = currentSoil ; \n\t\t\t$F528 ( aggregatedSoilsData , currentSoil ) } \n\t\t} \n\t$F45360 ( log ) $F432872 ( log , soilsData ) $F432872 ( log , aggregatedSoilsData ) return aggregatedSoilsData ; \n\t} \n"}, {"code": "public $F16845591 normalizeSoilLayers ( $F16845591 soilsData ) { \n\t$F3567120 ( referenceSoil ) ; \n\t$F16845591 newSoilsData ; \n\t$F110050 ( referenceSoil , soilsData ) newSoilsData = new $F16845591 $F2 ; \n\tif $F268 ( referenceSoil ) { \n\t\tfor ( $F129099 currentSoil : soilsData ) { \n\t\t\t$F129099 fullCurrentSoil = new $F129099 ( referenceSoil ) ; \n\t\t\tfor ( $F88222 ( key , referenceSoil ) ) { \n\t\t\t\tif $F33656 ( currentSoil , key ) $F382001 ( fullCurrentSoil , key , currentSoil ) } \n\t\t\t$F528 ( newSoilsData , fullCurrentSoil ) } \n\t\t} \n\treturn newSoilsData ; \n\t} \n"}, {"code": "public static String getAsString ( Type type ) { \n\t$F4728 ( result ) if $F540 ( isSimple , type ) { \n\t\tresult = $F85804 ( type ) . getCanonicalName ( ) ; \n\t\t} \n\telse if $F540 ( isGeneric , type ) { \n\t\t$F1200 ( buffer ) $F271629 ( container , type ) String containerType = ( $F76667 ( container ) ) . getCanonicalName ( ) ; \n\t\t$F6790 ( buffer , containerType ) $F71289 ( generics , container ) $F48974 ( first ) for ( Type generic : generics ) { \n\t\t\t$F8494 ( genericType , getAsString , generic ) $F963440 ( buffer , first ) . append ( genericType ) ; \n\t\t\tfirst = false ; \n\t\t\t} \n\t\t$F1218 ( buffer ) $F34965 ( result , buffer ) } \n\treturn result ; \n\t} \n"}, {"code": "public static String getAsParametricType ( Type type ) { \n\t$F4728 ( result ) if $F540 ( isSimple , type ) { \n\t\tresult = $F85804 ( type ) . getCanonicalName ( ) ; \n\t\t} \n\telse if $F540 ( isGeneric , type ) { \n\t\t$F1200 ( buffer ) $F271629 ( container , type ) String containerType = ( $F76667 ( container ) ) . getCanonicalName ( ) ; \n\t\t$F6790 ( buffer , containerType ) $F71289 ( generics , container ) for ( $F61008 ( i , generics ) ) { \n\t\t\tbuffer . append ( $F241460 ( i ) ) . append ( STRING00 ) ; \n\t\t\t} \n\t\t$F1218 ( buffer ) $F34965 ( result , buffer ) } \n\treturn result ; \n\t} \n"}, {"code": "public static String getAsRawType ( Type type ) { \n\t$F4728 ( result ) if $F540 ( isSimple , type ) { \n\t\tresult = $F85804 ( type ) . getCanonicalName ( ) ; \n\t\t} \n\telse if $F540 ( isGeneric , type ) { \n\t\t$F271629 ( container , type ) result = ( $F76667 ( container ) ) . getCanonicalName ( ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static $F71242 getParameterTypes ( Type generic ) { \n\t$F71242 types = null ; \n\tif $F540 ( isGeneric , generic ) { \n\t\ttypes = $F66135 ( generic ) ; \n\t\t} \n\treturn types ; \n\t} \n"}, {"code": "public static boolean isOfClass ( Type type , $F2613 ( clazz ) ) { \n\tif $F540 ( isSimple , type ) { \n\t\tlogger . trace ( STRING00 , $F85804 ( type ) ) ; \n\t\treturn $F85804 ( type ) == clazz ; \n\t\t} \n\telse if $F540 ( isGeneric , type ) { \n\t\tlogger . trace ( STRING00 , ( $F178825 ( type ) ) ) ; \n\t\treturn ( $F178825 ( type ) ) == clazz ; \n\t\t} \n\t$F213 } \n"}, {"code": "public static boolean isOfSubClassOf $F70590 ( object , clazz ) { \n\t$F34165 ( object , clazz ) try { \n\t\t$F298 ( object ) . asSubclass ( clazz ) ; \n\t\t$F232 } \n\tcatch ( ClassCastException e ) $F1668 } \n"}, {"code": "public static boolean isOfSuperClassOf $F70590 ( object , clazz ) { \n\t$F34165 ( object , clazz ) return $F714727 ( object ) ( clazz ) ; \n\t} \n"}, {"code": "public static IntTuple zero ( int size ) { \n\tif $F73194 ( size , ZERO_POOL_SIZE ) $F12383 ( ZEROS , size ) $F867 ( createZero , size ) } \n"}, {"code": "static IntTuple createSubTuple ( IntTuple parent , int fromIndex , int toIndex ) { \n\treturn new SubIntTuple $F2144 ( parent , fromIndex , toIndex ) ; \n\t} \n"}, {"code": "static MutableIntTuple createSubTuple ( MutableIntTuple parent , int fromIndex , int toIndex ) { \n\treturn new MutableSubIntTuple $F2144 ( parent , fromIndex , toIndex ) ; \n\t} \n"}, {"code": "public static $F57272 toArray ( IntTuple t ) { \n\t$F252342 ( d , t ) int result [ ] = $F57237 ( d ) ; \n\tfor ( $F6610 ( i , d ) ) $F44601 ( result , i , t ) return result ; \n\t} \n"}, {"code": "public static $F87249 asList ( final IntTuple t ) { \n\t$F38495 ( t ) return new AbstractList $F60867 $F2 { \n\t\t$F1 public Integer get ( int index ) $F30911 ( t , index ) $F1 public int size $F2 { \n\t\t\treturn $F1976 ( t ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F87249 asList ( final MutableIntTuple t ) { \n\t$F38495 ( t ) return new AbstractList $F60867 $F2 { \n\t\t$F1 public Integer get ( int index ) $F30911 ( t , index ) $F1 public int size $F2 { \n\t\t\treturn $F1976 ( t ) ; \n\t\t\t} \n\t\t$F1 public Integer set $F492662 ( index , element ) { \n\t\t\t$F90858 ( oldValue , t , index ) $F52836 ( t , index , element ) return oldValue ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static void set ( MutableIntTuple t , int v ) { \n\tfor ( int i = INT00 ; \n\t$F43999 ( i , t ) ; \n\ti ++ ) $F106750 ( t , i , v ) } \n"}, {"code": "public static MutableIntTuple reverse ( IntTuple t , MutableIntTuple result ) { \n\t$F1964 ( result , validate , t ) if ( t == result ) { \n\t\t$F252342 ( n , t ) $F69329 ( nh , n ) for ( $F6610 ( i , nh ) ) { \n\t\t\t$F90858 ( temp , result , i ) result . set ( i , result . get ( n - INT00 - i ) ) ; \n\t\t\tresult . set ( n - INT00 - i , temp ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F252342 ( n , t ) for ( $F6610 ( i , n ) ) { \n\t\t\tresult . set ( i , t . get ( n - INT00 - i ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static IntTuple reversed ( IntTuple t ) { \n\t$F292612 ( Objects , t ) return new AbstractIntTuple $F2 { \n\t\t$F1 public int getSize $F2 { \n\t\t\treturn $F1976 ( t ) ; \n\t\t\t} \n\t\t$F1 public int get ( int index ) { \n\t\t\treturn t . get ( $F1976 ( t ) - INT00 - index ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static MutableIntTuple reversed ( MutableIntTuple t ) { \n\t$F292612 ( Objects , t ) return new AbstractMutableIntTuple $F2 { \n\t\t$F1 public int getSize $F2 { \n\t\t\treturn $F1976 ( t ) ; \n\t\t\t} \n\t\t$F1 public int get ( int index ) { \n\t\t\treturn t . get ( $F1976 ( t ) - INT00 - index ) ; \n\t\t\t} \n\t\t$F1 public void set $F12004 ( index , value ) { \n\t\t\tt . set ( $F1976 ( t ) - INT00 - index , value ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static MutableIntTuple insertElementAt ( IntTuple t , int index , int value , MutableIntTuple result ) { \n\tif $F2523 ( index ) { \n\t\tthrow new IndexOutOfBoundsException $F500 ( index ) ; \n\t\t} \n\tif ( index > $F1976 ( t ) ) { \n\t\tthrow new IndexOutOfBoundsException ( $F320 ( index ) + $F1976 ( t ) ) ; \n\t\t} \n\tif $F112 ( result ) { \n\t\tresult = IntTuples . create ( $F1976 ( t ) + INT00 ) ; \n\t\t} \n\telse if ( $F1976 ( result ) != $F1976 ( t ) + INT00 ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + ( $F1976 ( t ) + INT00 ) + STRING00 + $F1976 ( result ) ) ; \n\t\t} \n\t$F1987 ( counter ) for ( $F6610 ( i , index ) ) { \n\t\tresult . set ( $F33691 ( counter , t , i ) ) ; \n\t\tcounter ++ ; \n\t\t} \n\t$F52836 ( result , counter , value ) counter ++ ; \n\tfor ( int i = index ; \n\t$F43999 ( i , t ) ; \n\ti ++ ) { \n\t\tresult . set ( $F33691 ( counter , t , i ) ) ; \n\t\tcounter ++ ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple removeElementAt ( IntTuple t , int index , MutableIntTuple result ) { \n\tUtils . checkForValidIndex ( index , $F1976 ( t ) ) ; \n\tif $F112 ( result ) { \n\t\tresult = IntTuples . create ( $F1976 ( t ) - INT00 ) ; \n\t\t} \n\telse if ( $F1976 ( result ) != $F1976 ( t ) - INT00 ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + ( $F1976 ( t ) - INT00 ) + STRING00 + $F1976 ( result ) ) ; \n\t\t} \n\t$F1987 ( counter ) for ( $F6610 ( i , index ) ) { \n\t\tresult . set ( $F33691 ( counter , t , i ) ) ; \n\t\tcounter ++ ; \n\t\t} \n\tfor ( $F68134 ( i , index ) ; \n\t$F43999 ( i , t ) ; \n\ti ++ ) { \n\t\tresult . set ( $F33691 ( counter , t , i ) ) ; \n\t\tcounter ++ ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple clamp ( IntTuple t , int min , int max , MutableIntTuple result ) { \n\t$F1964 ( result , validate , t ) for ( int i = INT00 ; \n\t$F43999 ( i , result ) ; \n\ti ++ ) { \n\t\t$F90858 ( v , t , i ) int r = Math . min ( max , $F63638 ( Math , min , v ) ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple clamp ( IntTuple t , IntTuple min , IntTuple max , MutableIntTuple result ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\t$F1964 ( result , validate , t ) for ( int i = INT00 ; \n\t$F43999 ( i , result ) ; \n\ti ++ ) { \n\t\t$F90858 ( v , t , i ) $F90858 ( minV , min , i ) $F90858 ( maxV , max , i ) int r = Math . min ( maxV , $F63638 ( Math , minV , v ) ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple negate ( IntTuple t0 , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , ( a ) - > ( - a ) , result ) ; \n\t} \n"}, {"code": "public static MutableIntTuple add ( IntTuple t0 , IntTuple t1 , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , t1 , <missing ')'> ( a , b ) - > ( a + b ) , result ) ; \n\t} \n"}, {"code": "public static MutableIntTuple add ( IntTuple t0 , int value , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , ( a ) - > ( a + value ) , result ) ; \n\t} \n"}, {"code": "public static MutableIntTuple multiply ( IntTuple t0 , int factor , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , ( a ) - > ( a * factor ) , result ) ; \n\t} \n"}, {"code": "public static MutableIntTuple addScaled ( IntTuple t0 , int factor , IntTuple t1 , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , t1 , <missing ')'> ( a , b ) - > $F229001 ( a , factor , b ) , result ) ; \n\t} \n"}, {"code": "public static int min ( IntTuple t ) { \n\treturn IntTupleFunctions . reduce ( t , Integer . MAX_VALUE , Math : : <missing ';'> min ) ; \n\t} \n"}, {"code": "public static int max ( IntTuple t ) { \n\treturn IntTupleFunctions . reduce ( t , Integer . MIN_VALUE , Math : : <missing ';'> max ) ; \n\t} \n"}, {"code": "public static MutableIntTuple min ( IntTuple t0 , IntTuple t1 , MutableIntTuple result ) { \n\treturn IntTupleFunctions . apply ( t0 , t1 , Math : : <missing ';'> min , result ) ; \n\t} \n"}, {"code": "public static int compareLexicographically ( IntTuple t0 , IntTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tfor ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tif ( $F198 ( t0 , i ) < $F198 ( t1 , i ) ) $F17551 else if ( $F198 ( t0 , i ) > $F198 ( t1 , i ) ) $F17553 } \n\t$F8383 } \n"}, {"code": "public static boolean areElementsGreaterThan ( IntTuple t0 , IntTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tfor ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tif ( $F198 ( t0 , i ) <= $F198 ( t1 , i ) ) $F1668 } \n\t$F232 } \n"}, {"code": "static MutableIntTuple validate ( IntTuple t , MutableIntTuple result ) { \n\tif $F112 ( result ) { \n\t\tresult = create ( $F1976 ( t ) ) ; \n\t\t} \n\telse { \n\t\tUtils . checkForEqualSize ( t , result ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableDoubleTuple toDoubleTuple ( IntTuple intTuple ) { \n\t$F252342 ( d , intTuple ) MutableDoubleTuple $F50260 ( doubleTuple , DoubleTuples , d ) ; \n\tfor ( $F6610 ( i , d ) ) { \n\t\tdoubleTuple . set ( $F8220 ( i , intTuple ) ) ; \n\t\t} \n\treturn doubleTuple ; \n\t} \n"}, {"code": "public static MutableIntTuple of $F60826 ( x , y , z , w ) { \n\treturn new DefaultIntTuple ( new int $F60828 ( x , y , z , w ) ) ; \n\t} \n"}, {"code": "public static boolean incrementLexicographically ( IntTuple t , IntTuple min , IntTuple max , MutableIntTuple result ) { \n\tUtils . checkForEqualSize ( t , min ) ; \n\tUtils . checkForEqualSize ( t , max ) ; \n\tUtils . checkForEqualSize ( t , result ) ; \n\tif ( result != t ) $F128255 ( result , t ) return incrementLexicographically ( result , min , max , $F1976 ( result ) - INT00 ) ; \n\t} \n"}, {"code": "private static boolean incrementLexicographically ( MutableIntTuple current , IntTuple min , IntTuple max , int index ) { \n\t$F52455 ( index ) $F90858 ( oldValue , current , index ) $F68266 ( newValue , oldValue ) $F52836 ( current , index , newValue ) if ( newValue >= $F198 ( max , index ) ) { \n\t\tcurrent . set ( $F8220 ( index , min ) ) ; \n\t\treturn incrementLexicographically ( current , min , max , index - INT00 ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public static boolean incrementColexicographically ( IntTuple t , IntTuple min , IntTuple max , MutableIntTuple result ) { \n\tUtils . checkForEqualSize ( t , min ) ; \n\tUtils . checkForEqualSize ( t , max ) ; \n\tUtils . checkForEqualSize ( t , result ) ; \n\tif ( result != t ) $F128255 ( result , t ) return $F102503 ( incrementColexicographically , result , min , max ) ; \n\t} \n"}, {"code": "public static $F1043 process ( CopyResourcesMojo copyResourcesMojo , $F8237 ( excludes ) , $F8237 ( files ) ) { \n\t$F476080 ( copyResourcesMojo ) . debug ( STRING00 ) ; \n\tif $F7430 ( excludes , files ) $F356 ( files ) $F130047 ( retval ) AntPathMatcher antPathMatcher = new AntPathMatcher $F2 ; \n\tfor ( String pattern : excludes ) { \n\t\t$F476080 ( copyResourcesMojo ) . debug ( $F320 ( pattern ) ) ; \n\t\tfor ( String path : files ) { \n\t\t\tboolean match = antPathMatcher . match ( pattern , FileUtils . normalizePath ( path ) ) ; \n\t\t\t$F476080 ( copyResourcesMojo ) . debug ( $F6035 ( path , match ) ) ; \n\t\t\t$F210158 ( match , retval , path ) } \n\t\t} \n\treturn retval ; \n\t} \n"}, {"code": "static void assertReflectionEquals $F396150 ( expected , actual ) { \n\tfinal List < Comparator > comparators = getComparators ( ) ; \n\tfinal ReflectionComparator reflectionComparator = new ReflectionComparator ( comparators ) ; \n\tfinal Difference difference = reflectionComparator . getDifference ( expected , actual ) ; \n\tif $F268 ( difference ) $F354178 ( fail , getFailureMessage , difference ) } \n"}, {"code": "public boolean restricted ( Filter $F45 filter ) { \n\tif ( ! filter . property ( ) . metamodel ( ) . isRoot ( ) ) $F233 if ( filter instanceof ComparableFilter $F45 ) { \n\t\tComparableFilter $F45 comparableFilter = ( ComparableFilter $F45 ) filter ; \n\t\tOperator $F9005 ( operator , comparableFilter ) ; \n\t\tif ( operator != Operator . EQUAL_TO ) { \n\t\t\tif ( this . filter != null && this . filter . property ( ) != filter . property ( ) ) $F233 $F1357 ( this , filter ) } \n\t\t} \n\t$F213 } \n"}, {"code": "public boolean restricted ( Order $F19378 order ) { \n\tif ( ! order . property ( ) . metamodel ( ) . isRoot ( ) ) { \n\t\trestricted = true ; \n\t\t$F232 } \n\t$F148730 ( restricted ) if ( this . order == null ) { \n\t\tif ( filter != null && filter . property ( ) != order . property ( ) ) { \n\t\t\trestricted = true ; \n\t\t\t$F232 } \n\t\t$F1357 ( this , order ) } \n\t$F213 } \n"}, {"code": "static $F19185 List < List $F19185 > cartesianProduct ( List < ? extends List < $F66800 > > lists ) $F66808 ( CartesianList , lists ) "}, {"code": "static boolean equalsImpl ( $F10911 ( list ) , $F623 Object object ) { \n\tif ( object == checkNotNull ( list ) ) $F233 if ( $F69637 ( object ) ) $F1668 $F69642 ( o , object ) return $F89753 ( list , o ) && Iterators . elementsEqual ( $F16599 ( list ) , $F16599 ( o ) ) ; \n\t} \n"}, {"code": "static int indexOfImpl ( $F10911 ( list ) , $F623 Object element ) { \n\tListIterator $F45 $F9005 ( listIterator , list ) ; \n\twhile $F11310 ( listIterator ) { \n\t\tif ( Objects . equal ( $F71919 ( element , listIterator ) ) ) { \n\t\t\treturn listIterator . previousIndex ( ) ; \n\t\t\t} \n\t\t} \n\t$F16096 } \n"}, {"code": "public void string $F996 ( strs ) { \n\tfor ( String str : strs ) { \n\t\tif ( first ) { \n\t\t\tindent ( ) ; \n\t\t\tfirst = false ; \n\t\t\t} \n\t\twrite ( str ) ; \n\t\t} \n\t} \n"}, {"code": "private void write ( String str ) { \n\t$F65498 ( muted ) try $F125961 ( dest , str ) catch ( IOException e ) $F529 ( exceptions , e ) } \n"}, {"code": "public static String urlEncode ( String input ) { \n\t$F45711 ( input ) try { \n\t\treturn $F572448 ( URLEncoder , input ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException uee ) { \n\t\tString result = StringSupport . replaceAll ( $F3725 ( input ) ) ; \n\t\tresult = StringSupport . replaceAll ( $F3725 ( result ) ) ; \n\t\tresult = StringSupport . replaceAll ( $F3725 ( result ) ) ; \n\t\tresult = StringSupport . replaceAll ( $F3725 ( result ) ) ; \n\t\tresult = StringSupport . replaceAll ( $F3725 ( result ) ) ; \n\t\treturn result ; \n\t\t} \n\t} \n"}, {"code": "public static String htmlEncode ( String input ) { \n\t$F45711 ( input ) $F2111077 ( retval , input ) StringSupport . replaceAll ( $F3725 ( retval ) ) ; \n\tStringSupport . replaceAll ( $F3725 ( retval ) ) ; \n\tStringSupport . replaceAll ( $F3725 ( retval ) ) ; \n\tStringSupport . replaceAll ( $F3725 ( retval ) ) ; \n\t$F1226 ( retval ) } \n"}, {"code": "$F1 protected Object getOptionValue ( $F109288 argq ) { \n\treturn Float . parseFloat ( $F16604 ( argq ) ) ; \n\t} \n"}, {"code": "public void mergeFrom ( Input input , final Object owner ) throws IOException { \n\tfinal int first = input . readFieldNumber ( this ) ; \n\tif ( first != ID_POJO ) throw new ProtostuffException $F6 ; \n\tdoMergeFrom ( input , strategy . resolvePojoFrom ( input , ID_POJO ) . getSchema ( ) , owner ) ; \n\t} \n"}, {"code": "$F762 public void writeTo ( final Output output , final Object value ) throws IOException { \n\tfinal Schema $F282 schema = strategy . writePojoIdTo ( output , ID_POJO , ( $F379693 ) $F298 ( value ) ) ; \n\tif ( output instanceof StatefulOutput ) { \n\t\t( ( StatefulOutput ) output ) . updateLast ( schema , this ) ; \n\t\t} \n\t$F800405 ( schema , output , value ) } \n"}, {"code": "public static $F1372 T invokeGetter $F816803 ( target , name ) { \n\tString getterMethodName = GETTER_PREFIX + $F50143 ( StringUtils , name ) ; \n\treturn ( T ) invokeMethod ( target , getterMethodName , $F4528367 , $F389221 ) ; \n\t} \n"}, {"code": "public static void invokeSetter ( final Object target , final String name , final Object value ) { \n\tString setterMethodName = SETTER_PREFIX + $F50143 ( StringUtils , name ) ; \n\tinvokeMethodByName ( target , setterMethodName , $F128901 ( value ) ) ; \n\t} \n"}, {"code": "public static $F1372 T getFieldValue $F816803 ( target , name ) { \n\tField field = FieldUtils . getDeclaredField ( $F298 ( target ) , name , true ) ; \n\tif $F112 ( field ) $F131586 ( name , target ) $F67491 ( result ) try { \n\t\t$F390317 ( result , field , target ) ; \n\t\t} \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new ImpossibleException ( e ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static void setFieldValue ( final Object target , final String name , final Object value ) { \n\tField field = FieldUtils . getDeclaredField ( $F298 ( target ) , name , true ) ; \n\tif $F112 ( field ) $F131586 ( name , target ) try $F106750 ( field , target , value ) catch ( IllegalAccessException e ) { \n\t\tthrow new ImpossibleException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1372 T invokeMethod ( final Object target , final String name , $F209135 ( parameterTypes ) , $F60785 ( parameterValues ) ) { \n\tMethod $F2207 ( method , getAccessibleMethod , target , name , parameterTypes ) ; \n\tif $F112 ( method ) $F131586 ( name , target ) try { \n\t\treturn ( T ) $F61682 ( method , target , parameterValues ) ; \n\t\t} \n\tcatch ( ReflectiveOperationException e ) { \n\t\tthrow new ReflectionRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1372 T invokeMethodByName ( final Object target , final String name , $F60785 ( parameterValues ) ) { \n\t$F1103827 ( method , getAccessibleMethodByName , target , name ) if $F112 ( method ) $F131586 ( name , target ) try { \n\t\treturn ( T ) $F61682 ( method , target , parameterValues ) ; \n\t\t} \n\tcatch ( ReflectiveOperationException e ) { \n\t\tthrow new ReflectionRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static Field getAccessibleField $F816803 ( target , name ) { \n\tfor ( $F43476 ( superClass , target ) ; \n\t$F47971 ( superClass ) ; \n\t$F7915 ( superClass ) ) { \n\t\ttry { \n\t\t\t$F43283 ( field , superClass , name ) makeAccessible ( field ) ; \n\t\t\treturn field ; \n\t\t\t} \n\t\tcatch ( NoSuchFieldException e ) $F442640 ( LOG , e ) } \n\t$F724 } \n"}, {"code": "public static Method getAccessibleMethod ( final Object target , final String name , $F137836 ( parameterTypes ) ) { \n\tfor ( $F43476 ( searchType , target ) ; \n\t$F47971 ( searchType ) ; \n\t$F7915 ( searchType ) ) { \n\t\ttry { \n\t\t\tMethod method = $F555252 ( searchType , name , parameterTypes ) ; \n\t\t\tmakeAccessible ( method ) ; \n\t\t\treturn method ; \n\t\t\t} \n\t\tcatch ( NoSuchMethodException e ) $F442640 ( LOG , e ) } \n\t$F724 } \n"}, {"code": "public static Method getAccessibleMethodByName $F816803 ( target , name ) { \n\tfor ( $F43476 ( searchType , target ) ; \n\t$F47971 ( searchType ) ; \n\t$F7915 ( searchType ) ) { \n\t\t$F335362 ( methods , searchType ) for ( Method method : methods ) { \n\t\t\tif $F26397 ( method , name ) { \n\t\t\t\tmakeAccessible ( method ) ; \n\t\t\t\treturn method ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static Class getClassGenricType ( final Class clazz , final int index ) { \n\tType $F178811 ( genType , clazz ) ; \n\tif ( ! $F71325 ( genType ) ) { \n\t\tLOG . warn ( $F940303 ( clazz ) ) ; \n\t\t$F178816 } \n\t$F71242 params = $F66135 ( genType ) ; \n\tif ( index >= params . length || index < INT00 ) { \n\t\tLOG . warn ( STRING00 , index , $F19101 ( clazz ) , params . length ) ; \n\t\t$F178816 } \n\tif ( ! ( params [ index ] instanceof Class ) ) { \n\t\tLOG . warn ( $F940303 ( clazz ) ) ; \n\t\t$F178816 } \n\treturn ( Class ) params [ index ] ; \n\t} \n"}, {"code": "final D6ModelClassFieldInfo getFieldInfo ( String columnName ) { \n\tfinal D6ModelClassFieldInfo $F199 ( fieldInfo , mColumnNameFieldInfoMap , columnName ) ; \n\treturn fieldInfo ; \n\t} \n"}, {"code": "final $F1043 getAllColumnNames $F2 { \n\tfinal $F1043 $F62016 ( columnNameSet , mColumnNameFieldInfoMap ) ; \n\treturn new $F95622 ( columnNameSet ) ; \n\t} \n"}, {"code": "final $F1043 getPrimaryColumnNames $F2 { \n\tfinal List < DBColumn > primaryKeyColumnList = getPrimaryKeyColumnList ( ) ; \n\tfinal $F1043 $F95625 ( primaryKeyColumnNameSet ) ; \n\tfor ( DBColumn col : primaryKeyColumnList ) { \n\t\tprimaryKeyColumnNameSet . add ( col . columnName ( ) ) ; \n\t\t} \n\treturn primaryKeyColumnNameSet ; \n\t} \n"}, {"code": "void setValue ( int parameterIndex , PreparedStatement preparedStatement , $F2613 ( fieldType ) , Object fieldValue ) throws Exception { \n\ttry { \n\t\tif $F4870 ( fieldType ) { \n\t\t\tpreparedStatement . setString ( $F11504 ( parameterIndex , fieldValue ) ) ; \n\t\t\t} \n\t\telse if ( fieldType == $F343875 . class ) { \n\t\t\tpreparedStatement . setTimestamp ( parameterIndex , ( $F343875 ) fieldValue ) ; \n\t\t\t} \n\t\telse if ( fieldType == $F380322 ) { \n\t\t\tpreparedStatement . setDate ( parameterIndex , ( $F211176 ) fieldValue ) ; \n\t\t\t} \n\t\telse if ( fieldType == $F281391 . class ) { \n\t\t\tpreparedStatement . setTime ( parameterIndex , ( $F281391 ) fieldValue ) ; \n\t\t\t} \n\t\telse if ( $F455033 ( fieldType ) || $F4876 ( fieldType ) ) { \n\t\t\tif $F268 ( fieldValue ) { \n\t\t\t\tboolean boolValue = ( boolean ) ( Boolean ) fieldValue ; \n\t\t\t\tpreparedStatement . setInt ( parameterIndex , $F115480 ( boolValue ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpreparedStatement . setInt ( parameterIndex , INT00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( $F455012 ( fieldType ) || $F4894 ( fieldType ) ) { \n\t\t\tif $F268 ( fieldValue ) { \n\t\t\t\tpreparedStatement . setInt ( parameterIndex , ( int ) ( Integer ) fieldValue ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpreparedStatement . setNull ( parameterIndex , $F343777 ( java ) . INTEGER ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( $F455019 ( fieldType ) || $F4885 ( fieldType ) ) { \n\t\t\tif $F268 ( fieldValue ) { \n\t\t\t\tpreparedStatement . setLong ( parameterIndex , ( long ) ( Long ) fieldValue ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpreparedStatement . setNull ( parameterIndex , $F343777 ( java ) . INTEGER ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( $F455040 ( fieldType ) || $F4921 ( fieldType ) ) { \n\t\t\tif $F268 ( fieldValue ) { \n\t\t\t\tpreparedStatement . setFloat ( parameterIndex , ( float ) ( Float ) fieldValue ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpreparedStatement . setNull ( parameterIndex , $F343777 ( java ) . FLOAT ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( $F455047 ( fieldType ) || $F4912 ( fieldType ) ) { \n\t\t\tif $F268 ( fieldValue ) { \n\t\t\t\tpreparedStatement . setDouble ( parameterIndex , ( double ) ( Double ) fieldValue ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpreparedStatement . setNull ( parameterIndex , $F343777 ( java ) . DOUBLE ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfinal String $F133800 ( msg , fieldType , fieldValue ) ; \n\t\t\tloge ( msg ) ; \n\t\t\t$F11567 ( msg ) } \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F62615 ( loge , e ) throw e ; \n\t\t} \n\t} \n"}, {"code": "final $F351058 getPrimaryKeyFieldList $F2 { \n\tfinal $F351058 $F351820 ( fieldList ) ; \n\tfinal $F1043 columnNameSet = getAllColumnNames ( ) ; \n\tfor ( String columnName : columnNameSet ) { \n\t\tfinal D6ModelClassFieldInfo fieldInfo = getFieldInfo ( columnName ) ; \n\t\tfinal Field field = fieldInfo . field ; \n\t\tfinal DBColumn dbColumn = field . getAnnotation ( DBColumn . class ) ; \n\t\tif ( dbColumn . isPrimaryKey ( ) ) $F529 ( fieldList , field ) } \n\treturn fieldList ; \n\t} \n"}, {"code": "final List < DBColumn > getPrimaryKeyColumnList $F2 { \n\tfinal List < DBColumn > primaryKeyColumnList = new ArrayList < DBColumn > $F2 ; \n\tfinal $F1043 columnNameSet = getAllColumnNames ( ) ; \n\tfor ( String columnName : columnNameSet ) { \n\t\tfinal D6ModelClassFieldInfo fieldInfo = getFieldInfo ( columnName ) ; \n\t\tfinal Field field = fieldInfo . field ; \n\t\tfinal DBColumn dbColumn = field . getAnnotation ( DBColumn . class ) ; \n\t\tif ( dbColumn . isPrimaryKey ( ) ) $F529 ( primaryKeyColumnList , dbColumn ) } \n\treturn primaryKeyColumnList ; \n\t} \n"}, {"code": "$F1 public List $F1721617 getDashboards $F2 { \n\tJAXBContext context ; \n\ttry { \n\t\tcontext = JAXBContext . newInstance ( Dashboard . class . getPackage ( ) . getName ( ) ) ; \n\t\t} \n\tcatch ( JAXBException e ) $F61624 ( e ) List $F1721617 dashboards = new ArrayList $F1721617 $F2 ; \n\ttry { \n\t\tConfiguration config = ( Configuration ) $F560593 ( context ) . unmarshal ( $F7587 ( sourceXml ) ) ; \n\t\tdashboards . addAll ( config . getDashboard ( ) ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new IllegalStateException $F292123 ( sourceXml , e ) ; \n\t\t} \n\t$F5223 ( Collections , dashboards ) return dashboards ; \n\t} \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tActivity injectionActivity = ContextUtils . asActivity ( $F20708 ( config ) ) ; \n\tconfigureTitle ( injectionActivity ) ; \n\tconfigureWindowFeatures ( injectionActivity ) ; \n\tconfigureFullscreen ( injectionActivity ) ; \n\t} \n"}, {"code": "private void configureTitle ( Activity injectionActivity ) { \n\tTitle title = TypeUtils . getAnnotation ( injectionActivity , Title . class ) ; \n\tif $F268 ( title ) { \n\t\tif ( $F11145 ( title ) != INT00 ) injectionActivity . setTitle ( $F11145 ( title ) ) ; \n\t\telse if ( ! $F123195 ( title ) . equals ( STRING00 ) ) injectionActivity . setTitle ( $F123195 ( title ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void configureFullscreen ( Activity injectionActivity ) { \n\tif ( $F298 ( injectionActivity ) . isAnnotationPresent ( Fullscreen . class ) ) { \n\t\tinjectionActivity . requestWindowFeature ( Window . FEATURE_NO_TITLE ) ; \n\t\t$F293728 ( injectionActivity ) . setFlags ( WindowManager . LayoutParams . FLAG_FULLSCREEN , WindowManager . LayoutParams . FLAG_FULLSCREEN ) ; \n\t\t} \n\t} \n"}, {"code": "private void configureWindowFeatures ( Activity injectionActivity ) { \n\tWindowFeatures windowFeatures = TypeUtils . getAnnotation ( injectionActivity , WindowFeatures . class ) ; \n\tif $F268 ( windowFeatures ) { \n\t\t$F57272 $F105040 ( features , windowFeatures ) ; \n\t\tfor ( int feature : features ) injectionActivity . requestWindowFeature ( feature ) ; \n\t\t} \n\t} \n"}, {"code": "public Entity get ( Transaction transaction , Key key ) { \n\ttry $F67862 ( datastore , transaction , key ) catch ( EntityNotFoundException e ) $F2200 } \n"}, {"code": "public Key put ( Transaction transaction , Entity entity ) $F80917 ( datastore , transaction , entity ) "}, {"code": "public $F1636110 put ( Transaction transaction , $F2408299 entities ) $F80917 ( datastore , transaction , entities ) "}, {"code": "public void delete ( Transaction transaction , Iterable $F653121 keys ) { \n\t$F661510 ( datastore , transaction , keys ) } \n"}, {"code": "public Transaction beginTransaction $F2 { \n\tif ( datastoreType == DatastoreType . HIGH_REPLICATION ) { \n\t\treturn datastore . beginTransaction ( TransactionOptions . Builder . withXG ( true ) ) ; \n\t\t} \n\treturn $F326234 ( datastore ) ; \n\t} \n"}, {"code": "public $F388606 query ( Query query ) { \n\treturn query ( query , FetchOptions . Builder . withOffset ( INT00 ) ) ; \n\t} \n"}, {"code": "public $F388606 query ( Transaction transaction , Query query ) { \n\treturn query ( transaction , query , FetchOptions . Builder . withOffset ( INT00 ) ) ; \n\t} \n"}, {"code": "public $F388606 query ( Query query , FetchOptions options ) { \n\treturn $F46200 ( datastore , query ) . asList ( options ) ; \n\t} \n"}, {"code": "$F1 public int add ( $F623 E element , int occurrences ) { \n\tif $F2015 ( occurrences ) $F3342 ( count , element ) checkArgument ( occurrences > INT00 , STRING00 , occurrences ) ; \n\tCount $F199 ( frequency , backingMap , element ) ; \n\tint oldCount ; \n\tif $F112 ( frequency ) { \n\t\toldCount = INT00 ; \n\t\tbackingMap . put ( element , new Count ( occurrences ) ) ; \n\t\t} \n\telse { \n\t\t$F60141 ( oldCount , frequency ) long newCount = ( long ) oldCount + ( long ) occurrences ; \n\t\tcheckArgument ( newCount <= Integer . MAX_VALUE , STRING00 , newCount ) ; \n\t\tfrequency . getAndAdd ( occurrences ) ; \n\t\t} \n\tsize += occurrences ; \n\treturn oldCount ; \n\t} \n"}, {"code": "public static String readNullTerminatedString ( InputStream in ) throws IOException , EOFException { \n\treturn readNullTerminatedString ( ( DataInput ) $F80518 ( in ) ) ; \n\t} \n"}, {"code": "public static String readNullTerminatedString ( DataInput in ) throws IOException , EOFException { \n\t$F1200 ( s ) while $F38432 { \n\t\t$F142380 ( b , in ) $F90730 ( b ) $F82681 ( s , b ) } \n\t$F1226 ( s ) } \n"}, {"code": "public static void writeStream $F34940 ( in , out ) throws IOException { \n\tint c ; \n\twhile ( $F152362 ( c , in ) >= INT00 ) { \n\t\tout . write ( ( byte ) c ) ; \n\t\t} \n\t} \n"}, {"code": "public static void writeBytes ( ByteBuffer bytes , OutputStream out ) throws IOException { \n\t$F75199 ( BUFFER_LENGTH ) $F108364 ( buffer ) if ( $F58025 ( bytes ) >= BUFFER_LENGTH ) { \n\t\t$F96074 ( buffer , BUFFER_LENGTH ) do { \n\t\t\t$F118747 ( bytes , buffer ) $F21494 ( out , buffer ) } \n\t\twhile ( $F58025 ( bytes ) >= BUFFER_LENGTH ) ; \n\t\t} \n\telse { \n\t\t$F189793 ( buffer , bytes ) ; \n\t\t} \n\t$F40810 ( remaining , bytes ) if $F3730 ( remaining ) { \n\t\t$F166153 ( bytes , buffer , remaining ) $F34945 ( out , buffer , remaining ) } \n\t} \n"}, {"code": "public Corpus process ( $F410888 Corpus input , $F410888 ProcessorContext context ) throws Exception { \n\tCorpus corpus = input ; \n\tfor ( ProcessingModule processor : processors ) { \n\t\tlogInfo ( $F407498 ( processor ) ) ; \n\t\tif ( processor . getOverrideStatus ( ) ) { \n\t\t\tcorpus = $F205047 ( processor , corpus , context ) ; \n\t\t\t$F29218 ( logInfo ) } \n\t\telse { \n\t\t\tProcessingState temp = processor . loadPreviousState ( corpus , context ) ; \n\t\t\tif ( temp . isLoaded ( ) ) { \n\t\t\t\t$F29218 ( logInfo ) corpus = temp . getCorpus ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tcorpus = $F205047 ( processor , corpus , context ) ; \n\t\t\t\t$F29218 ( logInfo ) } \n\t\t\t} \n\t\t} \n\treturn corpus ; \n\t} \n"}, {"code": "$F2893853 @ Configuration public Properties getProperties ( InjectionPoint injectionPoint ) { \n\t$F472 ( properties ) ConfigurationWrapper configuration = this . getConfigurationWrapper ( injectionPoint ) ; \n\tList < ISource > found = this . locate ( configuration ) ; \n\tList < ISource > copy = new ArrayList < ISource > ( found ) ; \n\tif ( configuration . merge ( ) ) { \n\t\t$F16921 ( Collections , copy ) } \n\tthis . logger . trace ( $F99278 ( copy ) ) ; \n\tfor ( ISource source : copy ) { \n\t\tSupportedType type = MimeGuesser . guess ( source ) ; \n\t\tif ( ! $F88338 ( source ) ) $F42718 InputStream $F9005 ( stream , source ) ; \n\t\t$F472 ( local ) try { \n\t\t\tif ( SupportedType . XML . equals ( type ) ) { \n\t\t\t\tlocal . loadFromXML ( stream ) ; \n\t\t\t\t} \n\t\t\telse $F130036 ( local , stream ) this . logger . trace ( STRING00 , $F3413 ( local ) , $F2941 ( type ) ) ; \n\t\t\t$F7171 ( properties , local ) } \n\t\tcatch ( IOException e ) { \n\t\t\t$F36833 ( this ) ( $F4298 ( e ) ) ; \n\t\t\t} \n\t\ttry $F2453 ( stream ) catch ( IOException e ) { \n\t\t\tthis . logger . trace ( STRING00 , stream ) ; \n\t\t\t} \n\t\tif ( ! configuration . merge ( ) ) $F333 } \n\treturn properties ; \n\t} \n"}, {"code": "static public boolean coinToss ( Probability probability ) { \n\tdouble p = probability . value ; \n\tdouble toss = RandomUtils . pickRandomProbability ( ) ; \n\treturn p > toss ; \n\t} \n"}, {"code": "static public Probability and ( Probability probability1 , Probability probability2 ) { \n\tdouble p1 = probability1 . value ; \n\tdouble p2 = probability2 . value ; \n\treturn new Probability ( p1 * p2 ) ; \n\t} \n"}, {"code": "static public Probability sans ( Probability probability1 , Probability probability2 ) { \n\tdouble p1 = probability1 . value ; \n\tdouble p2 = probability2 . value ; \n\treturn new Probability ( p1 * $F91405 ( p2 ) ) ; \n\t} \n"}, {"code": "static public Probability or ( Probability probability1 , Probability probability2 ) { \n\tdouble p1 = probability1 . value ; \n\tdouble p2 = probability2 . value ; \n\treturn new Probability ( p1 + p2 - ( p1 * p2 ) ) ; \n\t} \n"}, {"code": "static public Probability xor ( Probability probability1 , Probability probability2 ) { \n\tdouble p1 = probability1 . value ; \n\tdouble p2 = probability2 . value ; \n\treturn new Probability ( p1 * $F91405 ( p2 ) + p2 * $F91405 ( p1 ) ) ; \n\t} \n"}, {"code": "$F1 public Set < IProcessor > getProcessors $F2 { \n\tfinal Set < IProcessor > $F6940 ( processors ) ; \n\tprocessors . add ( new Bootstrap2FieldAttrProcessor $F2 ) ; \n\tprocessors . add ( new Bootstrap2NameAttrProcessor $F2 ) ; \n\treturn processors ; \n\t} \n"}, {"code": "$F1 protected void setup $F2 throws MojoExecutionException { \n\tif ( verbose ) $F4865280 ( getLog ) if $F103871 ( roxActive , roxConfig ) { \n\t\tif ( $F11856 ( roxConfig ) || $F9040 ( roxConfig ) || ! $F11868 ( roxConfig ) . endsWith ( STRING00 ) ) { \n\t\t\t$F18273 ( getLog ) ( $F320 ( ROX_PROPERTIES_FILENAME ) ) ; \n\t\t\troxActive = false ; \n\t\t\t} \n\t\telse { \n\t\t\ttry { \n\t\t\t\tResource r = new Resource $F2 ; \n\t\t\t\tr . setFiltering ( true ) ; \n\t\t\t\tr . setDirectory ( $F1152 ( roxConfig ) ) ; \n\t\t\t\tr . setIncludes ( Arrays . asList ( new String $F619444 ( roxConfig ) ) ) ; \n\t\t\t\tMavenResourcesExecution mre = new MavenResourcesExecution ( Arrays . asList ( new Resource $F21535 ( r ) ) , getWorkingDirectory ( ) , project , encoding , null , null , session ) ; \n\t\t\t\tmavenResourcesFiltering . filterResources ( mre ) ; \n\t\t\t\t} \n\t\t\tcatch ( MavenFilteringException mfe ) { \n\t\t\t\t$F18273 ( getLog ) ( $F4488 ( ROX_PROPERTIES_FILENAME , mfe ) ) ; \n\t\t\t\troxActive = false ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F53878 ( getLog ) roxActive = false ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void cleanup $F2 throws MojoExecutionException { \n\tif ( verbose ) $F4865280 ( getLog ) if ( roxActive ) { \n\t\tuseCleanPlugin ( element ( STRING00 , element ( STRING00 , element ( STRING00 , $F47409 ( getWorkingDirectory ) ) , $F27375 ( element ) , element ( STRING00 , $F4501 ( element , ROX_PROPERTIES_FILENAME ) ) ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F26212 E get ( $F52984 ( clazz ) , Object key ) throws ConcurrentModificationException , IndoubtException { \n\tKey k = Keys . create ( Translation . toKind ( clazz ) , key ) ; \n\tunlock ( k ) ; \n\t$F388606 entities = null ; \n\tif $F9152565 ( local ) { \n\t\tentities = datastore . query ( new Query ( k ) ) ; \n\t\t} \n\telse { \n\t\tentities = datastore . query ( local , new Query ( k ) ) ; \n\t\t} \n\tfor ( Entity entity : entities ) { \n\t\tif ( $F255533 ( entity ) ( Translation . LOCK_KIND ) ) { \n\t\t\tthrow new ConcurrentModificationException $F500 ( k ) ; \n\t\t\t} \n\t\t} \n\tE object = Translation . toObject ( clazz , entities , new HashMap $F6361231 $F2 , datastore ) ; \n\tentity = object ; \n\toperation = Log . Operation . GET ; \n\treturn object ; \n\t} \n"}, {"code": "$F1 public void put ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) if $F268 ( operation ) { \n\t\tthrow new IllegalStateException ( $F320 ( operation ) + Log . Operation . PUT + STRING00 ) ; \n\t\t} \n\tKey id = Keys . create ( Translation . toKind ( $F298 ( entity ) ) , Entities . keyValue ( entity ) ) ; \n\tEntity $F2197 ( e , datastore , local , id ) ; \n\tif $F268 ( e ) { \n\t\tthrow new EntityExistsException ( id ) ; \n\t\t} \n\t$F1357 ( this , entity ) operation = Log . Operation . PUT ; \n\t} \n"}, {"code": "$F1 public void update ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) if ( operation != Log . Operation . GET ) { \n\t\tthrow new IllegalStateException ( $F320 ( operation ) + Log . Operation . UPDATE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t} \n\toperation = Log . Operation . UPDATE ; \n\t} \n"}, {"code": "$F1 public void delete ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) if ( operation != Log . Operation . GET ) { \n\t\tthrow new IllegalStateException ( $F320 ( operation ) + Log . Operation . DELETE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t} \n\toperation = Log . Operation . DELETE ; \n\t} \n"}, {"code": "$F1 public void prepare $F2 { \n\tList < Log > $F9005 ( logs , global ) ; \n\t$F105146 ( parent ) for ( $F84725 ( i , logs ) ) { \n\t\tif ( $F198 ( logs , i ) . operation ( ) != Log . Operation . GET ) { \n\t\t\tparent = $F198 ( logs , i ) . entity ( ) ; \n\t\t\t$F332 } \n\t\t} \n\tLock lock = new Lock ( $F13745 ( global ) , KeyFactory . createKeyString ( Keys . create ( Translation . toKind ( $F298 ( parent ) ) , Entities . keyValue ( parent ) ) , Translation . TRANSACTION_KIND , $F13745 ( global ) ) , $F6239 ) ; \n\tdatastore . put ( local , Translation . toEntity ( lock , Keys . create ( Translation . toKind ( $F298 ( entity ) ) , Entities . keyValue ( entity ) ) ) ) ; \n\t$F374904 ( local ) $F1357 ( this , lock ) } \n"}, {"code": "$F1 public void commit $F2 { \n\t$F1636110 deletes = new ArrayList $F653121 $F2 ; \n\tdeletes . add ( Translation . toEntity ( lock , Keys . create ( Translation . toKind ( $F298 ( entity ) ) , Entities . keyValue ( entity ) ) ) . getKey ( ) ) ; \n\tKey transactionKey = KeyFactory . stringToKey ( $F4649399 ( lock ) ) ; \n\tif ( Keys . ancestor ( transactionKey ) . equals ( Keys . create ( Translation . toKind ( $F298 ( entity ) ) , Entities . keyValue ( entity ) ) ) ) { \n\t\t$F528 ( deletes , transactionKey ) for ( Entity entity : datastore . query ( new Query ( transactionKey ) . setKeysOnly ( ) ) ) $F92275 ( deletes , entity ) } \n\tKey parent = Keys . create ( Translation . toKind ( $F298 ( entity ) ) , Entities . keyValue ( entity ) ) ; \n\tapply ( operation , entity , Translation . toEntity ( lock , parent ) . getKey ( ) , deletes ) ; \n\t} \n"}, {"code": "$F762 public < T extends Operator > T geInstance ( Opcode opcode ) { \n\tOperator operator = this . operators . get ( opcode ) ; \n\tif $F112 ( operator ) { \n\t\tthrow new TemplateException $F2756 ( opcode ) ; \n\t\t} \n\t$F21676 ( operator ) } \n"}, {"code": "private void setRecords ( $F116882 ( data ) ) { \n\tif $F44788 ( data ) { \n\t\tthis . records = EMPTY_DATA ; \n\t\t$F254 } \n\tthis . records = new byte $F101019 ( data ) ; \n\tfor ( $F2674 ( i , data ) ) { \n\t\tif $F97124 ( data , i ) { \n\t\t\tthis . records [ i ] = data [ i ] ; \n\t\t\t} \n\t\telse { \n\t\t\tthis . records [ i ] = EMPTY_BYTES ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Object intercept ( final Object object , Method method , $F60785 ( args ) , final MethodProxy proxy ) throws Throwable { \n\tif ( ! descriptor . joinpoints ( ) . contains ( method ) ) { \n\t\treturn proxy . invokeSuper ( object , args ) ; \n\t\t} \n\tMap < Descriptor $F45 , Object > aspects = new HashMap < Descriptor $F45 , Object > $F2 ; \n\tList < Descriptor $F45 > descriptors = new ArrayList < Descriptor $F45 > $F2 ; \n\tListMultimap < Descriptor $F45 , Method > $F25309 ( before , ArrayListMultimap ) ; \n\tListMultimap < Descriptor $F45 , Method > $F25309 ( around , ArrayListMultimap ) ; \n\tListMultimap < Descriptor $F45 , Method > $F25309 ( after , ArrayListMultimap ) ; \n\tListMultimap < Descriptor $F45 , Method > $F25309 ( throwing , ArrayListMultimap ) ; \n\tfor ( $F489254 ( annotation , method ) ) { \n\t\tif ( $F26817 ( annotation ) . isAnnotationPresent ( Pointcut . class ) ) { \n\t\t\tfor ( Descriptor $F45 descriptor : container . pointcuts ( ) . get ( annotation ) ) { \n\t\t\t\taspects . put ( descriptor , container . component ( descriptor ) ) ; \n\t\t\t\t$F528 ( descriptors , descriptor ) before . putAll ( descriptor , descriptor . advices ( ) . get ( Before . class ) ) ; \n\t\t\t\taround . putAll ( descriptor , descriptor . advices ( ) . get ( Around . class ) ) ; \n\t\t\t\tafter . putAll ( descriptor , descriptor . advices ( ) . get ( After . class ) ) ; \n\t\t\t\tthrowing . putAll ( descriptor , descriptor . advices ( ) . get ( Throwing . class ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tnew Invoke ( $F582742 ( logger , descriptors , before , aspects ) ) . apply ( args ) ; \n\tInvocation $F45 invocation = new Invocation $F282 $F2144 ( method , object , args ) { \n\t\t$F1 public Object proceed $F2 throws Throwable { \n\t\t\treturn proxy . invokeSuper ( object , args ) ; \n\t\t\t} \n\t\t} \n\t; \n\t$F335290 $F1986198 ( methods ) ; \n\tMap < Method , Descriptor $F45 > descs = new HashMap < Method , Descriptor $F45 > $F2 ; \n\tfor ( Descriptor $F45 descriptor : descriptors ) { \n\t\tif $F33656 ( around , descriptor ) { \n\t\t\tfor ( Method m : $F198 ( around , descriptor ) ) { \n\t\t\t\t$F498139 ( m ) $F528 ( methods , m ) $F2725 ( descs , m , descriptor ) } \n\t\t\t} \n\t\t} \n\tfor ( Method m : $F16920 ( Lists , methods ) ) { \n\t\tif ( $F351687 ( m ) && $F351708 ( m ) . isAssignableFrom ( Invocation . class ) ) { \n\t\t\tinvocation = new Invocation $F282 ( m , $F644644 ( aspects , descs , m ) , $F128901 ( invocation ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ConfigurationException $F20645 ( m ) ; \n\t\t\t} \n\t\t} \n\t$F105146 ( result ) try { \n\t\t$F937589 ( result , invocation ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\tif $F6132 ( around ) $F231891 ( logger , method , t ) else $F5573 ( logger , t ) if $F6132 ( throwing ) $F4760 ( t ) new Invoke ( $F582742 ( logger , descriptors , throwing , aspects ) ) . apply ( $F128901 ( t ) ) ; \n\t\t} \n\tnew Invoke ( $F582742 ( logger , descriptors , after , aspects ) ) . apply ( $F128901 ( result ) ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static ComparableEqu compile $F62952 ( valueStr ) throws Exception { \n\tfinal ComparableEqu cp = new ComparableEqu $F2 ; \n\tcp . delegate = Equ . getInstance ( true ) ; \n\tcp . delegate . compile ( valueStr ) ; \n\treturn cp ; \n\t} \n"}, {"code": "static protected String quote $F62952 ( value ) { \n\t$F102635 ( out ) AbstractCLA . uncompileQuoter ( out , value ) ; \n\t$F1226 ( out ) } \n"}, {"code": "protected void buildCommandLine ( final StringBuilder out , final List < NodeOc > depth , final List < NodeOc > line , final String value ) { \n\tfor ( $F10914 ( n , line ) ) { \n\t\tif $F134332 ( depth , n ) { \n\t\t\t$F96010 ( depth , line , n ) if ( $F198 ( line , n ) . key . length ( ) > INT00 ) out . append ( STRING00 + $F198 ( line , n ) . key ) ; \n\t\t\tif $F285370 ( n , line ) $F1212 ( out , OPEN_GROUP ) } \n\t\telse if ( $F198 ( depth , n ) . key . equalsIgnoreCase ( $F198 ( line , n ) . key ) ) { \n\t\t\tif ( $F198 ( depth , n ) . occurrance == $F198 ( line , n ) . occurrance ) $F23605 for ( $F58460 ( d , depth ) ; \n\t\t\td > n ; \n\t\t\td -- ) { \n\t\t\t\t$F6953 ( depth , d ) $F1212 ( out , CLOSE_GROUP ) } \n\t\t\t$F198 ( depth , n ) . occurrance = $F198 ( line , n ) . occurrance ; \n\t\t\tif $F285370 ( n , line ) $F1212 ( out , OPEN_GROUP ) $F23605 } \n\t\telse { \n\t\t\tfor ( $F58460 ( d , depth ) ; \n\t\t\td > n ; \n\t\t\td -- ) { \n\t\t\t\t$F6953 ( depth , d ) $F1212 ( out , CLOSE_GROUP ) } \n\t\t\t$F198 ( depth , n ) . key = $F198 ( line , n ) . key ; \n\t\t\t$F198 ( depth , n ) . occurrance = $F198 ( line , n ) . occurrance ; \n\t\t\tif ( $F198 ( line , n ) . key . length ( ) > INT00 ) out . append ( STRING00 + $F198 ( line , n ) . key ) ; \n\t\t\tif $F285370 ( n , line ) $F1212 ( out , OPEN_GROUP ) $F23605 } \n\t\t} \n\tif $F1216 ( value ) $F157482 ( out , quote , value ) } \n"}, {"code": "protected void buildTokens ( final char commandPrefix , $F5761289 ( tokens ) , final List < NodeOc > depth , final List < NodeOc > line , final String value ) { \n\tfor ( $F10914 ( n , line ) ) { \n\t\tif $F134332 ( depth , n ) { \n\t\t\t$F96010 ( depth , line , n ) if ( $F198 ( line , n ) . key . length ( ) > INT00 ) { \n\t\t\t\ttokens . add ( new Token ( commandPrefix , dashed ( commandPrefix , $F198 ( line , n ) . key ) , INT00 , INT00 , false ) ) ; \n\t\t\t\t} \n\t\t\tif $F285370 ( n , line ) tokens . add ( new Token ( commandPrefix , OPEN_GROUP , INT00 , INT00 , false ) ) ; \n\t\t\t} \n\t\telse if ( $F198 ( depth , n ) . key . equalsIgnoreCase ( $F198 ( line , n ) . key ) ) { \n\t\t\tif ( $F198 ( depth , n ) . occurrance == $F198 ( line , n ) . occurrance ) $F23605 for ( $F58460 ( d , depth ) ; \n\t\t\td > n ; \n\t\t\td -- ) { \n\t\t\t\t$F6953 ( depth , d ) tokens . add ( new Token ( commandPrefix , CLOSE_GROUP , INT00 , INT00 , false ) ) ; \n\t\t\t\t} \n\t\t\t$F198 ( depth , n ) . occurrance = $F198 ( line , n ) . occurrance ; \n\t\t\tif $F285370 ( n , line ) tokens . add ( new Token ( commandPrefix , OPEN_GROUP , INT00 , INT00 , false ) ) ; \n\t\t\t$F23605 } \n\t\telse { \n\t\t\tfor ( $F58460 ( d , depth ) ; \n\t\t\td > n ; \n\t\t\td -- ) { \n\t\t\t\t$F6953 ( depth , d ) tokens . add ( new Token ( commandPrefix , CLOSE_GROUP , INT00 , INT00 , false ) ) ; \n\t\t\t\t} \n\t\t\t$F198 ( depth , n ) . key = $F198 ( line , n ) . key ; \n\t\t\t$F198 ( depth , n ) . occurrance = $F198 ( line , n ) . occurrance ; \n\t\t\tif ( $F198 ( line , n ) . key . length ( ) > INT00 ) tokens . add ( new Token ( commandPrefix , dashed ( commandPrefix , $F198 ( line , n ) . key ) , INT00 , INT00 , false ) ) ; \n\t\t\tif $F285370 ( n , line ) tokens . add ( new Token ( commandPrefix , OPEN_GROUP , INT00 , INT00 , false ) ) ; \n\t\t\t$F23605 } \n\t\t} \n\tif $F108359 ( value ) { \n\t\ttokens . add ( new Token ( commandPrefix , value , INT00 , INT00 , true ) ) ; \n\t\t} \n\t} \n"}, {"code": "public Bus $F70275 addDestination ( Destination $F70275 destination ) { \n\tif $F268 ( destination ) { \n\t\tlogger . info ( STRING00 , $F6210 ( destination ) , $F9272 ( destination ) ) ; \n\t\t$F528 ( destinations , destination ) } \n\treturn this ; \n\t} \n"}, {"code": "public boolean removeDestination ( String id ) { \n\t$F176425 ( logger , id ) for ( Destination $F70275 destination : destinations ) { \n\t\tif $F590177 ( destination , id ) { \n\t\t\t$F6953 ( destinations , destination ) $F232 } \n\t\t} \n\t$F213 } \n"}, {"code": "$F1 protected $F27567 resolve ( String fqtn ) throws Exception { \n\tif $F3507 ( supportLogger ) supportLogger . debug ( Logs . LOG_01 , ansiString ( GREEN , fqtn ) ) ; \n\tStringTokenizer tokenizer = new StringTokenizer ( $F16411 ( fqtn ) ) ; \n\t$F201502 ( groupId , tokenizer ) $F201502 ( templateId , tokenizer ) $F201502 ( version , tokenizer ) return mvnDependencyResolver . resolve ( groupId , templateId , version ) ; \n\t} \n"}, {"code": "$F1 public void close $F2 throws IOException { \n\t$F189248 ( inputStream ) if $F268 ( buffer ) $F67413 ( buffer ) } \n"}, {"code": "public List < Tokenizer . Token > tokenize ( String sentence ) { \n\tSequence seq = Sequence . create ( Chars . asList ( $F17783 ( sentence ) ) . stream ( ) . map ( Object : : toString ) ) ; \n\tLabeling labels = model . label ( seq ) ; \n\t$F12039 ( n , sentence ) $F91609 spans = new int [ n + INT00 ] [ INT00 ] ; \n\t$F79106 best = new double $F93608 ( n ) ; \n\tbest [ INT00 ] = NUM00 ; \n\tfor ( $F88761 ( i , n ) ) { \n\t\tfor ( int j = $F86010 ( Math , i , maxSpanSize ) ; \n\t\tj < i ; \n\t\tj ++ ) { \n\t\t\t$F62358 ( w , i , j ) String span = $F520662 ( sentence , j , w ) ; \n\t\t\tdouble score = scoreWord ( j , j + w , span , labels ) ; \n\t\t\tdouble segmentScore = multi ( best [ i - w ] , score ) ; \n\t\t\tlogFiner ( STRING00 , sentence . substring ( spans [ i - w ] [ INT00 ] , spans [ i - w ] [ INT00 ] ) , span , segmentScore , best [ i ] ) ; \n\t\t\tif ( segmentScore >= best [ i ] ) { \n\t\t\t\t$F62115 ( best , i , segmentScore ) $F3117761 ( spans , i , j ) $F95689 ( spans , i ) = j + w ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tint i = n ; \n\tLinkedList < Tokenizer . Token > $F35088 ( tokens ) ; \n\twhile $F3730 ( i ) { \n\t\tString token = StringUtils . trim ( sentence . substring ( $F95689 ( spans , i ) , $F95689 ( spans , i ) ) ) ; \n\t\tif ( ! StringUtils . isNullOrBlank ( token ) ) { \n\t\t\ttokens . addFirst ( new Tokenizer . Token ( token , TokenType . UNKNOWN , $F95689 ( spans , i ) , $F95689 ( spans , i ) + $F1203 ( token ) , INT00 ) ) ; \n\t\t\t} \n\t\ti = i - ( $F95689 ( spans , i ) - $F95689 ( spans , i ) ) ; \n\t\t} \n\ti = INT00 ; \n\tfor ( Tokenizer . Token token : tokens ) { \n\t\t$F107137 ( token , i ) i ++ ; \n\t\t} \n\treturn tokens ; \n\t} \n"}, {"code": "$F1 public V checkedGet $F2 throws X { \n\ttry $F24895 ( get ) catch ( InterruptedException e ) { \n\t\t$F3537 ( Thread ) $F157851 ( mapException , e ) } \n\tcatch ( CancellationException e ) $F157852 ( mapException , e ) catch ( ExecutionException e ) $F157852 ( mapException , e ) } \n"}, {"code": "public static Set $F186495 compareAndExtractEvents $F16060 ( pre , post , ids ) throws JSONException , IllegalArgumentException { \n\tObject preObject = null , postObject = null , idsObject = null ; \n\tif $F268 ( pre ) { \n\t\tpreObject = JSONParser . parseJSON ( pre ) ; \n\t\t} \n\tif $F45435 ( post , ids ) { \n\t\tpostObject = JSONParser . parseJSON ( post ) ; \n\t\tidsObject = JSONParser . parseJSON ( ids ) ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F209 ( getErrorSignature , pre , post , ids ) ) ; \n\t\t} \n\tif ( ! ( preObject == null || $F272829 ( preObject , postObject ) ) || ! $F272829 ( postObject , idsObject ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F209 ( getErrorSignature , pre , post , ids ) ) ; \n\t\t} \n\tif ( ! $F146775 ( postObject ) ( JSONArray . class ) && ! $F146775 ( postObject ) ( JSONObject . class ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F209 ( getErrorSignature , pre , post , ids ) ) ; \n\t\t} \n\t$F210 ( compareAndGetEvents , preObject , postObject , idsObject ) } \n"}, {"code": "public static Set $F186495 compareAndGetEvents ( JSONObject pre , JSONObject post , JSONObject ids ) throws JSONException { \n\tSet $F186495 $F6940 ( result ) ; \n\t$F63081 $F11501 ( keysIterator , ids ) ; \n\twhile $F11310 ( keysIterator ) { \n\t\t$F93978 ( key , keysIterator ) if ( $F198 ( post , key ) instanceof JSONObject || $F198 ( post , key ) instanceof JSONArray ) { \n\t\t\tObject preObject = $F112 ( pre ) ? null : $F45673 ( pre , key ) ; \n\t\t\tSet $F186495 events = compareAndGetEvents ( preObject , $F198 ( post , key ) , $F198 ( ids , key ) ) ; \n\t\t\tfor ( Event event : events ) { \n\t\t\t\tfor ( Identity identity : $F235770 ( event ) ) { \n\t\t\t\t\tidentity . setField ( key + STRING00 + $F10139 ( identity ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F9391 ( result , crossMultiplySets , events ) } \n\t\telse { \n\t\t\tIdentity i = new Identity $F2 ; \n\t\t\ti . setField ( key ) ; \n\t\t\ti . setValue ( $F457286 ( post , key ) ) ; \n\t\t\tOperation operation = $F112 ( pre ) ? Operation . INSERT : Operation . UPDATE ; \n\t\t\tif $F3415 ( result ) { \n\t\t\t\tEvent event = new Event $F2 ; \n\t\t\t\tevent . setOperation ( operation ) ; \n\t\t\t\t$F528 ( result , event ) } \n\t\t\tfor ( Event event : result ) { \n\t\t\t\t$F235770 ( event ) . add ( i ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static Set $F186495 compareAndGetEvents ( JSONArray pre , JSONArray post , JSONArray ids ) throws JSONException { \n\tSet $F186495 $F6940 ( result ) ; \n\tMap < JSONWrapper , JSONWrapper > $F304 ( preMap , getJSONComparisionMap , ids , pre ) ; \n\tMap < JSONWrapper , JSONWrapper > $F304 ( postMap , getJSONComparisionMap , ids , post ) ; \n\tfor ( JSONWrapper key : $F7837 ( postMap ) ) { \n\t\tif ( $F28585 ( preMap , key ) || ! $F89759 ( preMap , key ) ( $F198 ( postMap , key ) ) ) { \n\t\t\tObject preJsonObject = $F67753 ( preMap , key ) ? null : $F81627 ( preMap , key ) ; \n\t\t\tSet $F186495 arrayChildResults = compareAndGetEvents ( preJsonObject , $F81627 ( postMap , key ) , $F269 ( key ) ) ; \n\t\t\tfor ( Event arrayChildResult : arrayChildResults ) { \n\t\t\t\tif $F28586 ( preMap , key ) { \n\t\t\t\t\tarrayChildResult . setOperation ( Operation . INSERT ) ; \n\t\t\t\t\t} \n\t\t\t\t$F528 ( result , arrayChildResult ) } \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static boolean areAllGranted ( Object context , $F8237 ( permissions ) ) { \n\tfor ( String permission : permissions ) { \n\t\tif ( ContextUtils . discover ( context ) . checkCallingOrSelfPermission ( permission ) == PackageManager . PERMISSION_DENIED ) $F1668 } \n\t$F232 } \n"}, {"code": "public static boolean areAnyGranted ( Object context , $F8237 ( permissions ) ) { \n\tfor ( String permission : permissions ) { \n\t\tif ( ContextUtils . discover ( context ) . checkCallingOrSelfPermission ( permission ) == PackageManager . PERMISSION_GRANTED ) $F233 } \n\t$F213 } \n"}, {"code": "public static boolean isGranted $F2317 ( context , permission ) { \n\tif ( ContextUtils . discover ( context ) . checkCallingOrSelfPermission ( permission ) == PackageManager . PERMISSION_GRANTED ) $F233 else $F1668 } \n"}, {"code": "public static $F96 escapeInjections $F2763 ( m ) { \n\t$F90659 ( m ) return Objects . iterate ( m , new Closure < ObjectIterator . IterateBean , Object > $F2 { \n\t\t$F1 public Object call ( ObjectIterator . IterateBean input ) { \n\t\t\tif ( $F269 ( input ) instanceof Map ) { \n\t\t\t\t$F96 o = ( $F96 ) $F269 ( input ) ; \n\t\t\t\t$F176161 ( o ) } \n\t\t\t$F75456 ( input ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "private static $F1975 digest ( $F117585 ( input ) , final String algorithm , $F117585 ( salt ) , final int iterations ) { \n\ttry { \n\t\t$F75347 ( digest , MessageDigest , algorithm ) if $F268 ( salt ) $F217864 ( digest , salt ) $F1975 $F137029 ( result , digest , input ) ; \n\t\tfor ( $F6610 ( i , iterations ) ) { \n\t\t\t$F7296 ( digest ) result = $F137028 ( digest , result ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tthrow new ImpossibleException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private static $F1975 digest ( final InputStream input , final String algorithm ) throws IOException { \n\ttry { \n\t\t$F75347 ( messageDigest , MessageDigest , algorithm ) final int $F149495 ( bufferLength ) ; \n\t\t$F9435 ( buffer , bufferLength ) int read = $F169730 ( input , buffer , bufferLength ) ; \n\t\twhile $F157547 ( read ) { \n\t\t\t$F380247 ( messageDigest , buffer , read ) read = $F169730 ( input , buffer , bufferLength ) ; \n\t\t\t} \n\t\treturn $F15653 ( messageDigest ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tthrow new ImpossibleException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void setNoCache $F13010 ( request , response ) { \n\tString protocol = $F5162 ( request ) . trim ( ) ; \n\t{ \n\t\t$F462877 ( response ) } \n\t{ \n\t\t$F462877 ( response ) } \n\t$F1645 $F24610 ( now , System ) response . setDateHeader ( STRING00 , now ) ; \n\tresponse . setDateHeader ( STRING00 , now ) ; \n\tresponse . setDateHeader ( STRING00 , now ) ; \n\t} \n"}, {"code": "public static long readMultipartUpload ( ServletRequest request , String uploadDir ) throws IOException { \n\tServletInputStream $F142882 ( input , request ) ; \n\t$F9435 ( line , BUFFER_SIZE ) int len = input . readLine ( line , INT00 , BUFFER_SIZE ) ; \n\t$F348820 ( len ) long postDataSize = len ; \n\tint nrofMegabytesUploaded = $F456576 ( postDataSize ) ; \n\tString boundary = new String ( line , INT00 , len - INT00 ) ; \n\twhile ( ( len = input . readLine ( line , INT00 , BUFFER_SIZE ) ) != $F3745 ) { \n\t\t$F4728 ( propertyName ) $F4728 ( fullFileName ) $F4728 ( contentType ) for ( ; \n\t\tlen > INT00 ; \n\t\tlen = input . readLine ( line , INT00 , BUFFER_SIZE ) ) { \n\t\t\tpostDataSize += len ; \n\t\t\tString newLine = $F9447 ( line , len ) ; \n\t\t\tif $F5667 ( newLine ) { \n\t\t\t\tpropertyName = newLine . substring ( $F155690 ( newLine ) , newLine . indexOf ( STRING00 , $F155690 ( newLine ) ) ) ; \n\t\t\t\tif $F483311 ( newLine ) { \n\t\t\t\t\tfullFileName = newLine . substring ( $F155690 ( newLine ) , newLine . indexOf ( STRING00 , $F155690 ( newLine ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif $F5667 ( newLine ) { \n\t\t\t\tcontentType = newLine . substring ( $F155690 ( newLine ) , $F1204 ( newLine ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tpostDataSize += len ; \n\t\tlen = input . readLine ( line , INT00 , BUFFER_SIZE ) ; \n\t\t$F101988 ( partialCopy ) if $F45435 ( fullFileName , uploadDir ) { \n\t\t\tFileData file = new FileData ( fullFileName , contentType ) ; \n\t\t\tFile uploadFile = new File ( uploadDir + STRING00 + $F11790 ( file ) ) ; \n\t\t\tif $F2486 ( uploadFile ) { \n\t\t\t\t$F1987 ( i ) File existingUploadFile = uploadFile ; \n\t\t\t\twhile $F2486 ( uploadFile ) { \n\t\t\t\t\tuploadFile = new File ( uploadDir + STRING00 + file . getFileNameWithoutExtension ( ) + STRING00 + i ++ + STRING00 + $F6420 ( file ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F241928 ( existingUploadFile , uploadFile ) uploadFile = new File ( uploadDir + STRING00 + $F11790 ( file ) ) ; \n\t\t\t\t} \n\t\t\t$F101991 ( partialCopy , uploadFile ) } \n\t\telse { \n\t\t\t$F295555 ( partialCopy ) } \n\t\t$F9435 ( line2 , BUFFER_SIZE ) $F1987 ( len2 ) $F9435 ( line3 , BUFFER_SIZE ) $F1987 ( len3 ) LOOP : for ( ; \n\t\tlen != $F3745 ; \n\t\tlen = input . readLine ( line , INT00 , BUFFER_SIZE ) ) { \n\t\t\tpostDataSize += len ; \n\t\t\tint temp = nrofMegabytesUploaded ; \n\t\t\tnrofMegabytesUploaded = $F456576 ( postDataSize ) ; \n\t\t\tif ( nrofMegabytesUploaded > temp ) { \n\t\t\t\t$F1292 ( System ) ( new LogEntry ( $F6258 ( String , nrofMegabytesUploaded ) + STRING00 ) ) ; \n\t\t\t\t} \n\t\t\tString newLine = $F9447 ( line , len ) ; \n\t\t\tif $F19401 ( newLine , boundary ) { \n\t\t\t\tif ( $F2015 ( len2 ) && $F3730 ( len3 ) ) { \n\t\t\t\t\tpartialCopy . write ( line3 , INT00 , len3 - INT00 ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F9869 ( len2 ) { \n\t\t\t\t\t$F34945 ( partialCopy , line3 , len3 ) partialCopy . write ( line2 , INT00 , len2 - INT00 ) ; \n\t\t\t\t\t} \n\t\t\t\tbreak LOOP ; \n\t\t\t\t} \n\t\t\t$F34945 ( partialCopy , line3 , len3 ) len3 = len2 ; \n\t\t\tline3 = line2 ; \n\t\t\tlen2 = len ; \n\t\t\tline2 = line ; \n\t\t\t$F96074 ( line , BUFFER_SIZE ) } \n\t\tpostDataSize += len ; \n\t\tif $F268 ( fullFileName ) { \n\t\t\tif $F112 ( uploadDir ) { \n\t\t\t\tFileData file = new FileData ( fullFileName , contentType ) ; \n\t\t\t\tfile . setDescription ( STRING00 + fullFileName ) ; \n\t\t\t\tfile . setRawData ( ( ( ByteArrayOutputStream ) partialCopy ) . toByteArray ( ) ) ; \n\t\t\t\t$F47921 ( request , propertyName , file ) $F1292 ( System ) ( new LogEntry $F2821 ( file ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F13374 ( propertyValue , partialCopy ) $F47921 ( request , propertyName , propertyValue ) $F1292 ( System ) ( new LogEntry $F61905 ( propertyName , propertyValue ) ) ; \n\t\t\t} \n\t\t$F1109 ( partialCopy ) } \n\t$F1292 ( System ) ( new LogEntry $F500 ( postDataSize ) ) ; \n\treturn postDataSize ; \n\t} \n"}, {"code": "public static String getRequestURLBaseWithoutProtocol ( HttpServletRequest req ) { \n\treturn $F629644 ( req ) + ( $F263637 ( req ) != INT00 ? STRING00 + $F263637 ( req ) : STRING00 ) ; \n\t} \n"}, {"code": "public static User getUserByBasicAuthentication ( Request applicationRequest , HttpServletRequest request , HttpServletResponse response , String realmDescription ) throws IOException , ServletRequestAlreadyRedirectedException { \n\t$F14196 ( applicationRequest ) User $F22502 ( user , applicationRequest ) ; \n\tif $F112 ( user ) { \n\t\t$F51313 ( header , request ) if $F112 ( header ) { \n\t\t\tresponse . addHeader ( STRING00 , STRING00 + $F2502005 ( realmDescription ) + STRING00 ) ; \n\t\t\tresponse . sendError ( INT00 ) ; \n\t\t\tthrow new ServletRequestAlreadyRedirectedException $F6 ; \n\t\t\t} \n\t\telse { \n\t\t\t$F308866 ( credentials , header ) $F1292 ( System ) ( new LogEntry $F6 ) ; \n\t\t\ttry { \n\t\t\t\tuser = applicationRequest . login ( new Base64EncodedCredentials ( credentials ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( AuthenticationException ae ) { \n\t\t\t\t$F1292 ( System ) ( new LogEntry $F26312 ( ae ) ) ; \n\t\t\t\tresponse . addHeader ( STRING00 , STRING00 + $F2502005 ( realmDescription ) + STRING00 ) ; \n\t\t\t\tresponse . sendError ( INT00 ) ; \n\t\t\t\tthrow new ServletRequestAlreadyRedirectedException $F6 ; \n\t\t\t\t} \n\t\t\t$F1292 ( System ) ( new LogEntry $F659553 ( user ) ) ; \n\t\t\t} \n\t\t} \n\treturn user ; \n\t} \n"}, {"code": "public static void forward ( String url , ServletRequest req , ServletResponse res ) throws $F26611 { \n\tRequestDispatcher dispatch = req . getRequestDispatcher ( url ) ; \n\t$F1292 ( System ) ( new LogEntry $F2821 ( url ) ) ; \n\tdispatch . forward ( req , res ) ; \n\t} \n"}, {"code": "public static void redirect ( String url , boolean copyParameters , ServletRequest req , ServletResponse res ) { \n\t$F24434 ( url ) String redirectUrl = url ; \n\t$F95272 ( separator ) if $F483311 ( redirectUrl ) $F24706 ( separator ) if ( copyParameters ) { \n\t\tEnumeration $F589116 ( e , req ) ; \n\t\twhile $F5506 ( e ) { \n\t\t\t$F356796 ( name , e ) $F380462 ( value , req , name ) redirectUrl += $F462116 ( separator , name , value ) ; \n\t\t\tseparator = STRING00 ; \n\t\t\t} \n\t\t$F397792 ( e , req ) ; \n\t\t} \n\t$F1292 ( System ) ( new LogEntry $F2821 ( redirectUrl ) ) ; \n\ttry { \n\t\t( ( HttpServletResponse ) res ) . sendRedirect ( redirectUrl ) ; \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new ResourceException $F193002 ( redirectUrl , ioe ) ; \n\t\t} \n\t} \n"}, {"code": "public static String getCookieValue ( ServletRequest request , String key ) { \n\t$F161168 cookies = $F554453 ( request ) . getCookies ( ) ; \n\tif $F268 ( cookies ) { \n\t\tfor ( $F2674 ( i , cookies ) ) { \n\t\t\tif ( $F432788 ( cookies , i ) ( key ) ) { \n\t\t\t\treturn $F62538 ( cookies , i ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static void setCookieValue ( HttpServletResponse response , String key , String value ) { \n\tsetCookieValue ( response , key , value , STRING00 , $F3745 ) ; \n\t} \n"}, {"code": "public static void writeClassPathResource ( HttpServletResponse response , String path , String contentType ) throws IOException { \n\t$F35358 ( path ) InputStream input = ServletSupport . class . getClassLoader ( ) . getResourceAsStream ( path ) ; \n\tif $F268 ( input ) { \n\t\t$F380642 ( response , contentType ) $F176314 ( out , response ) $F40810 ( available , input ) while $F3730 ( available ) { \n\t\t\t$F9435 ( buf , available ) $F33779 ( input , buf ) $F21494 ( out , buf ) $F58904 ( available , input ) } \n\t\t} \n\telse { \n\t\t$F1292 ( System ) ( new LogEntry $F500 ( path ) ) ; \n\t\t} \n\t} \n"}, {"code": "public $F1372 T get ( String name , Closure $F7903 closure ) { \n\t$F67491 ( obj ) lock ( name ) ; \n\ttry { \n\t\t$F390317 ( obj , cache , name ) ; \n\t\tif $F268 ( obj ) { \n\t\t\tif ( ttl > INT00 && ( $F198 ( created , name ) + $F139742 ( tu , ttl ) < $F13205 ( System ) ) ) $F67413 ( obj ) } \n\t\tif $F268 ( obj ) { \n\t\t\t$F71154 ( gets , name ) return obj ; \n\t\t\t} \n\t\t} \n\t$F26192 ( unlock , name ) $F621646 ( obj , closure , name ) ; \n\tlock ( name ) ; \n\ttry { \n\t\tcreated . put ( $F285551 ( name , System ) ) ; \n\t\tgets . put ( name , NUM00 ) ; \n\t\t$F2725 ( cache , name , obj ) } \n\t$F26192 ( unlock , name ) checkSize ( ) ; \n\treturn obj ; \n\t} \n"}, {"code": "public $F1372 T get ( $F7906 ( cls ) , String name , Closure $F7903 closure ) { \n\treturn Objects . cast ( $F782 ( get , name , closure , cls ) ) ; \n\t} \n"}, {"code": "public void invalidate ( String name ) { \n\tlock ( name ) ; \n\ttry { \n\t\t$F6953 ( cache , name ) $F6953 ( created , name ) $F6953 ( gets , name ) } \n\t$F26192 ( unlock , name ) } \n"}, {"code": "private $F4357 getCache $F1195 ( projectName , projectVersion ) { \n\tif ( ! caches . containsKey ( getCacheKey ( projectName , projectVersion ) ) ) { \n\t\tcaches . put ( getCacheKey ( projectName , projectVersion ) , loadOrCreateCache ( projectName , projectVersion ) ) ; \n\t\t} \n\treturn $F487180 ( caches , getCacheKey , projectName , projectVersion ) ; \n\t} \n"}, {"code": "$F762 private $F4357 loadOrCreateCache $F1195 ( projectName , projectVersion ) { \n\tif $F45435 ( projectName , projectVersion ) { \n\t\tFile projectDir = $F2549 ( getCacheDir , projectName ) ; \n\t\tif $F11857 ( projectDir ) $F11937 ( projectDir ) $F2501 ( versionFile , projectDir , projectVersion ) if $F2486 ( versionFile ) { \n\t\t\t$F101612 ( ois ) try { \n\t\t\t\tois = new ObjectInputStream $F47438 ( versionFile ) ; \n\t\t\t\treturn ( $F4357 ) $F32241 ( ois ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException ioe ) $F131443 ( LOGGER , projectName , projectVersion ) catch ( ClassNotFoundException cnfe ) $F131443 ( LOGGER , projectName , projectVersion ) finally { \n\t\t\t\tif $F268 ( ois ) { \n\t\t\t\t\ttry $F2453 ( ois ) $F188590 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn $F1175 ; \n\t} \n"}, {"code": "private File getCacheDir $F2 { \n\tFile cacheDir = new File ( configuration . getOptimizerCacheDir ( ) ) ; \n\tif $F11857 ( cacheDir ) $F11937 ( cacheDir ) File roxCacheDir = new File ( cacheDir , configuration . getServerConfiguration ( ) . getBaseUrlFootprint ( ) ) ; \n\t$F11859 ( roxCacheDir ) return roxCacheDir ; \n\t} \n"}, {"code": "private void persistCaches $F2 { \n\tfor ( Entry < CacheKey , $F4357 > cacheEntry : $F708 ( caches ) ) { \n\t\tpersistCache ( $F712 ( cacheEntry ) . projectName , $F712 ( cacheEntry ) . projectVersion , $F269 ( cacheEntry ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void persistCache $F129140 ( projectName , projectVersion , cache ) { \n\tFile cacheFile = new File ( getCacheDir ( ) , projectName + STRING00 + projectVersion ) ; \n\t$F94339 ( oos ) try { \n\t\toos = new ObjectOutputStream $F41183 ( cacheFile ) ; \n\t\t$F40824 ( oos , cache ) } \n\tcatch ( IOException ioe ) { \n\t\tLOGGER . warn ( STRING00 , getCacheDir ( ) . getAbsoluteFile ( ) , projectName , projectVersion ) ; \n\t\t} \n\tfinally { \n\t\tif $F268 ( oos ) { \n\t\t\ttry $F2453 ( oos ) $F188590 } \n\t\t} \n\t} \n"}, {"code": "public static void initializeMessages ( List < DajlabControllerExtensionInterface < DajlabModelInterface > > controllers ) { \n\tResourceBundle resourceD = ResourceBundle . getBundle ( MESSAGES_PATH + STRING00 + MESSAGES_EXT ) ; \n\tgetInstance ( ) . resources . put ( STRING00 , resourceD ) ; \n\tif $F268 ( controllers ) { \n\t\tfor ( DajlabControllerExtensionInterface < DajlabModelInterface > controller : controllers ) { \n\t\t\tString resourceName = controller . getLocalization ( ) ; \n\t\t\tif $F268 ( resourceName ) { \n\t\t\t\t$F101335 ( path , MESSAGES_PATH , resourceName , MESSAGES_EXT ) try { \n\t\t\t\t\tResourceBundle resource = $F4623167 ( ResourceBundle , path ) ; \n\t\t\t\t\tgetInstance ( ) . resources . put ( resourceName , resource ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( MissingResourceException e ) { \n\t\t\t\t\tlogger . error ( $F608490 ( path ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String getString $F62952 ( key ) { \n\t$F9662 ( ret , key ) if $F268 ( key ) { \n\t\t$F20850 ( els , key ) if $F4389 ( els ) { \n\t\t\t$F26395 ( resourceName , els ) ResourceBundle resource = getInstance ( ) . resources . get ( resourceName ) ; \n\t\t\tif $F268 ( resource ) { \n\t\t\t\ttry { \n\t\t\t\t\tret = resource . getString ( els [ INT00 ] ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( MissingResourceException e ) $F3510 ( logger , key ) } \n\t\t\telse $F3510 ( logger , resource ) } \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public Writer extractData ( final ClientHttpResponse response ) throws IOException { \n\tIoUtil . copy ( new InputStreamReader ( $F32234 ( response ) ) , _writer ) ; \n\treturn _writer ; \n\t} \n"}, {"code": "public String getAccessId $F2 { \n\t$F35473 ( accessId , getAsNullableString ) accessId = accessId != null ? accessId : getAsNullableString ( STRING00 ) ; \n\treturn accessId ; \n\t} \n"}, {"code": "public String getAccessKey $F2 { \n\t$F35473 ( accessKey , getAsNullableString ) accessKey = accessKey != null ? accessKey : getAsNullableString ( STRING00 ) ; \n\treturn accessKey ; \n\t} \n"}, {"code": "public static CredentialParams fromString ( String line ) { \n\t$F85456 ( map , StringValueMap , line ) return new CredentialParams ( map ) ; \n\t} \n"}, {"code": "public static List < CredentialParams > manyFromConfig ( ConfigParams config , boolean configAsDefault ) { \n\tList < CredentialParams > result = new ArrayList < CredentialParams > $F2 ; \n\tConfigParams credentials = config . getSection ( STRING00 ) ; \n\tif $F4340 ( credentials ) { \n\t\t$F5033 sectionsNames = credentials . getSectionNames ( ) ; \n\t\tfor ( String section : sectionsNames ) { \n\t\t\tConfigParams credential = credentials . getSection ( section ) ; \n\t\t\tresult . add ( new CredentialParams ( credential ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tConfigParams credential = config . getSection ( STRING00 ) ; \n\t\tif $F4340 ( credential ) result . add ( new CredentialParams ( credential ) ) ; \n\t\telse if ( configAsDefault ) result . add ( new CredentialParams ( config ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static $F28723 Aggregation $F1372 max ( Property < ? , T > property ) { \n\treturn new Max $F1372 ( property ) ; \n\t} \n"}, {"code": "public static $F28723 Aggregation $F1372 min ( Property < ? , T > property ) { \n\treturn new Min $F1372 ( property ) ; \n\t} \n"}, {"code": "public static < T extends Number & $F28721 > Aggregation $F1372 sum ( Property < ? , T > property ) { \n\treturn new Sum $F1372 ( property ) ; \n\t} \n"}, {"code": "protected boolean setConnector $F2 { \n\tif ( this . host == null ) { \n\t\t$F15466 ( log ) $F213 } \n\tif ( this . port < INT00 || this . port > INT00 ) { \n\t\tlog . error ( STRING00 , Integer . valueOf ( this . port ) ) ; \n\t\t$F213 } \n\tif ( this . connector != null ) { \n\t\tboolean tmp = this . stayConnected ; \n\t\tthis . stayConnected = false ; \n\t\tthis . _disconnect ( ) ; \n\t\tthis . stayConnected = tmp ; \n\t\t} \n\tthis . executors = new ExecutorFilter $F1415 ; \n\tthis . connector = new NioSocketConnector $F2 ; \n\tthis . connector . getSessionConfig ( ) . setTcpNoDelay ( true ) ; \n\tif ( ! this . connector . getFilterChain ( ) . contains ( AggregatorSensorProtocolCodecFactory . CODEC_NAME ) ) { \n\t\tthis . connector . getFilterChain ( ) . addLast ( AggregatorSensorProtocolCodecFactory . CODEC_NAME , new ProtocolCodecFilter ( new AggregatorSensorProtocolCodecFactory $F590 ) ) ; \n\t\t} \n\tthis . connector . getFilterChain ( ) . addLast ( STRING00 , this . executors ) ; \n\tthis . connector . setHandler ( this . ioHandler ) ; \n\t$F45360 ( log ) $F232 } \n"}, {"code": "public boolean connect ( long maxWait ) { \n\tlong timeout = maxWait ; \n\tif $F9104 ( timeout ) { \n\t\ttimeout = this . connectionTimeout ; \n\t\t} \n\tif ( this . connector == null ) { \n\t\tif ( ! this . setConnector ( ) ) { \n\t\t\t$F15466 ( log ) $F213 } \n\t\t} \n\tif ( this . session != null ) { \n\t\t$F15466 ( log ) $F213 } \n\tlong waitTime = timeout ; \n\tdo { \n\t\t$F24610 ( startAttempt , System ) this . connector . setConnectTimeoutMillis ( waitTime - INT00 ) ; \n\t\tif ( this . _connect ( waitTime ) ) { \n\t\t\t$F45360 ( log ) $F232 } \n\t\tif ( this . stayConnected ) { \n\t\t\tlong retryDelay = this . connectionRetryDelay ; \n\t\t\tif ( timeout < this . connectionRetryDelay * INT00 ) { \n\t\t\t\t$F317508 ( retryDelay , timeout ) $F12287 ( retryDelay ) } \n\t\t\ttry { \n\t\t\t\tlog . warn ( String . format ( STRING00 , this . host , Integer . valueOf ( this . port ) , $F6258 ( Long , retryDelay ) ) ) ; \n\t\t\t\t$F12418 ( Thread , retryDelay ) } \n\t\t\t$F188572 waitTime = waitTime - $F101254 ( System , startAttempt ) ; \n\t\t\t} \n\t\t} \n\twhile ( this . stayConnected && waitTime > INT00 ) ; \n\tthis . _disconnect ( ) ; \n\tthis . finishConnection ( ) ; \n\t$F213 } \n"}, {"code": "protected void _disconnect $F2 { \n\tIoSession currentSession = this . session ; \n\tif $F268 ( currentSession ) { \n\t\tif ( ! currentSession . isClosing ( ) ) { \n\t\t\tlog . info ( STRING00 , $F53553 ( currentSession ) ) ; \n\t\t\tcurrentSession . close ( true ) ; \n\t\t\t} \n\t\tthis . session = null ; \n\t\tthis . sentHandshake = null ; \n\t\tthis . receivedHandshake = null ; \n\t\tthis . canSendSamples = false ; \n\t\tfor ( ConnectionListener listener : this . connectionListeners ) { \n\t\t\tlistener . connectionInterrupted ( this ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void handshakeMessageReceived ( IoSession session , HandshakeMessage handshakeMessage ) { \n\t$F3509 ( log , handshakeMessage ) this . receivedHandshake = handshakeMessage ; \n\tBoolean handshakeCheck = this . checkHandshake ( ) ; \n\t$F15530 ( handshakeCheck ) if $F136484 ( Boolean , handshakeCheck ) { \n\t\tthis . canSendSamples = true ; \n\t\tfor ( ConnectionListener listener : this . connectionListeners ) { \n\t\t\tlistener . readyForSamples ( this ) ; \n\t\t\t} \n\t\t} \n\telse if ( $F28979 ( Boolean ) ( handshakeCheck ) ) { \n\t\t$F16516 ( log ) this . _disconnect ( ) ; \n\t\t} \n\t} \n"}, {"code": "protected void finishConnection $F2 { \n\tthis . connector . dispose ( ) ; \n\tthis . connector = null ; \n\tfor ( ConnectionListener listener : this . connectionListeners ) { \n\t\tlistener . connectionEnded ( this ) ; \n\t\t} \n\tif ( this . executors != null ) { \n\t\tthis . executors . destroy ( ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean sendSample ( SampleMessage sampleMessage ) { \n\tif ( ! this . canSendSamples ) $F443135 ( log ) if ( this . session . getScheduledWriteMessages ( ) > this . maxOutstandingSamples ) $F443135 ( log ) this . session . write ( sampleMessage ) ; \n\t$F232 } \n"}, {"code": "protected void exceptionCaught ( IoSession session , Throwable cause ) { \n\t$F204704 ( log , this , cause ) if ( cause instanceof OutOfMemoryError ) $F812746 ( System ) if ( this . disconnectOnException ) { \n\t\tthis . _disconnect ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F119188 toArray $F1328205 ( byteArray , sizeLimit ) { \n\tfinal int numBufs = ( int ) Math . ceil ( ( double ) byteArray . length / ( double ) sizeLimit ) ; \n\tfinal $F119188 bufs = new ByteBuffer [ numBufs ] ; \n\t$F1987 ( byteIndex ) for ( $F6610 ( i , numBufs ) ) { \n\t\tfinal int numBytes ; \n\t\tfinal int $F112916 ( remaining , byteArray , byteIndex ) ; \n\t\tif ( remaining < sizeLimit ) $F1619 ( numBytes , remaining ) else $F1619 ( numBytes , sizeLimit ) bufs [ i ] = $F61476 ( ByteBuffer , byteArray , byteIndex , numBytes ) ; \n\t\tbyteIndex += sizeLimit ; \n\t\t} \n\treturn bufs ; \n\t} \n"}, {"code": "public static Collection $F131632 split ( final ByteBuffer buffer , final int chunkSize ) { \n\tfinal Collection $F131632 buffers = new LinkedList $F131632 $F2 ; \n\t$F119109 ( limit , buffer ) $F1987 ( totalSent ) while ( ( totalSent + chunkSize ) < limit ) { \n\t\tLOG . trace ( STRING00 + ( totalSent + chunkSize ) ) ; \n\t\tbuffer . limit ( totalSent + chunkSize ) ; \n\t\t$F5219 ( buffers , createBuffer , buffer ) totalSent += chunkSize ; \n\t\t} \n\t$F893 ( buffer , limit ) $F5219 ( buffers , createBuffer , buffer ) return buffers ; \n\t} \n"}, {"code": "public static ByteBuffer combine ( final Collection $F131632 buffers ) { \n\tfinal ByteBuffer buf = ByteBuffer . allocate ( remaining ( buffers ) ) ; \n\tfor ( final Iterator $F60361 ( iter , buffers ) ; \n\t$F11309 ( iter ) ; \n\t) { \n\t\tfinal ByteBuffer curBuf = ( ByteBuffer ) $F11311 ( iter ) ; \n\t\t$F45610 ( buf , curBuf ) } \n\t$F33783 ( buf ) return buf ; \n\t} \n"}, {"code": "public static String getHexdump $F124759 ( in ) { \n\t$F118743 ( size , in ) $F212178 ( size ) final StringBuilder out = new StringBuilder ( ( $F58025 ( in ) * INT00 ) - INT00 ) ; \n\tfinal int $F63765 ( mark , in ) ; \n\tint $F2479584 ( byteValue , in ) ; \n\tout . append ( $F225053 ( highDigits , byteValue ) ) ; \n\tout . append ( $F225053 ( lowDigits , byteValue ) ) ; \n\tsize -- ; \n\tfor ( ; \n\tsize > INT00 ; \n\tsize -- ) { \n\t\t$F1218 ( out ) $F2479584 ( byteValue , in ) ; \n\t\tout . append ( $F225053 ( highDigits , byteValue ) ) ; \n\t\tout . append ( $F225053 ( lowDigits , byteValue ) ) ; \n\t\t} \n\t$F63769 ( in , mark ) $F1226 ( out ) } \n"}, {"code": "public static $F1372 $F58399 unmodifiableIterable ( $F58577 ( iterable ) ) { \n\tcheckNotNull ( iterable ) ; \n\tif ( iterable instanceof UnmodifiableIterable || iterable instanceof ImmutableCollection ) $F356 ( iterable ) return new UnmodifiableIterable $F1372 ( iterable ) ; \n\t} \n"}, {"code": "public static boolean removeAll ( $F58426 ( removeFrom ) , $F37418 ( elementsToRemove ) ) { \n\treturn $F5624 ( removeFrom ) ? $F58428 ( removeFrom ) . removeAll ( checkNotNull ( elementsToRemove ) ) : Iterators . removeAll ( $F58450 ( removeFrom , elementsToRemove ) ) ; \n\t} \n"}, {"code": "public static boolean retainAll ( $F58426 ( removeFrom ) , $F37418 ( elementsToRetain ) ) { \n\treturn $F5624 ( removeFrom ) ? $F58428 ( removeFrom ) . retainAll ( checkNotNull ( elementsToRetain ) ) : Iterators . retainAll ( $F58450 ( removeFrom , elementsToRetain ) ) ; \n\t} \n"}, {"code": "$F5446012 public static $F1372 $F58224 toArray ( $F8943 ( iterable ) , $F7906 ( type ) ) { \n\t$F37185 collection = toCollection ( iterable ) ; \n\t$F58224 array = ObjectArrays . newArray ( $F53175 ( type , collection ) ) ; \n\t$F58520 ( collection , array ) } \n"}, {"code": "public static $F1372 $F58399 concat ( $F8943 ( a ) , $F8943 ( b ) , $F8943 ( c ) , $F8943 ( d ) ) { \n\treturn concat ( ImmutableList . of ( a , b , c , d ) ) ; \n\t} \n"}, {"code": "public static $F1372 $F58399 concat ( final Iterable < ? extends $F8942 > inputs ) { \n\tcheckNotNull ( inputs ) ; \n\treturn new FluentIterable $F1372 $F2 { \n\t\t$F1 public $F58580 iterator $F2 { \n\t\t\treturn Iterators . concat ( iterators ( inputs ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "private static $F1372 Iterator < $F58696 > iterators ( Iterable < ? extends $F8942 > iterables ) { \n\treturn new TransformedIterator < $F8942 , $F58696 > ( $F16599 ( iterables ) ) { \n\t\t$F1 $F58696 transform $F58777 ( from ) $F58779 ( from ) } \n\t; \n\t} \n"}, {"code": "public static $F1372 $F58399 filter ( $F58577 ( unfiltered ) , $F65588 ( predicate ) ) { \n\tcheckNotNull ( unfiltered ) ; \n\tcheckNotNull ( predicate ) ; \n\treturn new FluentIterable $F1372 $F2 { \n\t\t$F1 public $F58580 iterator $F2 { \n\t\t\treturn Iterators . filter ( $F58450 ( unfiltered , predicate ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "static public String createCamelCapVersionOfKeyword $F62952 ( _keyword ) { \n\tif $F433318 ( _keyword ) $F724 $F102635 ( sb ) if ( Character . isLowerCase ( $F20069 ( _keyword ) ) ) sb . append ( $F35733 ( Character , _keyword ) ) ; \n\t$F231081 ( matcher , CAMELCAPS , _keyword ) while $F14102 ( matcher ) sb . append ( $F93425 ( matcher ) ) ; \n\t$F1226 ( sb ) } \n"}, {"code": "static public String createMetaphoneVersionOfKeyword $F62952 ( _keyword ) { \n\tif $F433318 ( _keyword ) $F724 return new Metaphone $F2 . metaphone ( _keyword ) ; \n\t} \n"}, {"code": "static public void uncompileQuoter ( final StringBuilder out , final String value ) { \n\t$F1218 ( out ) if $F268 ( value ) out . append ( $F12759 ( value ) ) ; \n\t$F1218 ( out ) } \n"}, {"code": "$F1 public Object asEnum ( final String name , $F60785 ( possibleConstants ) ) throws ParseException { \n\tthrow new ParseException ( $F39055 ( this ) , INT00 ) ; \n\t} \n"}, {"code": "$F1 public $F34817 [ ] asEnumArray ( final String _name , $F60785 ( _possibleConstants ) ) throws ParseException { \n\tthrow new ParseException ( $F39055 ( this ) , INT00 ) ; \n\t} \n"}, {"code": "$F1 public E convert $F62952 ( valueStr ) throws ParseException , IOException { \n\t$F90659 ( valueStr ) return convert ( valueStr , isCaseSensitive ( ) , null ) ; \n\t} \n"}, {"code": "$F1 public void exportCommandLine $F968436 ( out ) { \n\tif $F7301 ( isPositional ) if ( keychar != null && keychar != STRING00 ) { \n\t\t$F1218 ( out ) out . append ( keychar . charValue ( ) ) ; \n\t\t} \n\telse if $F610214 ( keyword ) $F105011 ( out , keyword ) for ( $F81130 ( d , size ) ) { \n\t\tif ( d > INT00 || isPositional ( ) || keychar == null || keychar == STRING00 ) $F1218 ( out ) $F564 ( exportCommandLineData , out , d ) } \n\t} \n"}, {"code": "$F1 public void exportNamespace ( final String prefix , final StringBuilder out ) { \n\tfor ( $F81130 ( d , size ) ) { \n\t\t$F102635 ( pre ) $F1212 ( pre , prefix ) if $F560 ( isPositional ) $F1218 ( pre ) else if $F268 ( keychar ) pre . append ( keychar . charValue ( ) ) ; \n\t\telse if $F268 ( keyword ) $F1212 ( pre , keyword ) if $F560 ( isMultiple ) $F41421 ( pre , d ) $F386064 ( exportNamespaceData , pre , out , d ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void exportXml $F968436 ( out ) { \n\tfor ( $F81130 ( d , size ) ) { \n\t\t$F1218 ( out ) if $F560 ( isPositional ) $F1218 ( out ) else if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\t\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) $F564 ( exportXmlData , out , d ) $F1218 ( out ) if $F560 ( isPositional ) $F1218 ( out ) else if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\t\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) } \n\t} \n"}, {"code": "$F1 public E getValue $F63043 ( index ) { \n\tif ( index < INT00 || values == null || $F3414 ( values ) ) if ( defaultValues != null && $F100140 ( defaultValues , index ) ) { \n\t\tif $F2523 ( index ) $F24494 ( defaultValues ) $F30910 ( defaultValues , index ) } \n\tif $F9869 ( index ) if $F100141 ( values , index ) $F30910 ( values , index ) $F724 } \n"}, {"code": "$F1 public int salience ( final Token token ) { \n\tif ( token . isCharCommand ( this ) ) $F8383 if ( token . isWordCommand ( this ) ) return token . getWordCommand ( ) . length ( ) ; \n\t$F8383 } \n"}, {"code": "$F1 public ICmdLineArg $F26212 setDefaultValue $F62952 ( defaultValue ) throws ParseException , IOException { \n\t$F63192 ( getDefaultValues ) ( $F11465 ( convert , defaultValue , caseSensitive ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public ICmdLineArg $F26212 setDefaultValues $F139806 ( defaults ) throws ParseException , IOException { \n\tfor ( final String default1 : defaults ) $F63192 ( getDefaultValues ) ( $F11465 ( convert , default1 , caseSensitive ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setEnumCriteria $F62952 ( _enumClassName ) throws ParseException , IOException { \n\tthis . enumClassName = _enumClassName ; \n\t$F124810 ( enumClass ) try { \n\t\tenumClass = CmdLine . ClassLoader . loadClass ( _enumClassName ) ; \n\t\t} \n\tcatch ( final ClassNotFoundException e ) { \n\t\tthrow new ParseException ( $F5962 ( e ) , INT00 ) ; \n\t\t} \n\tfinal $F26217 $F54 ( list ) ; \n\tif ( $F7911 ( enumClass ) ) throw new ParseException ( $F2282 ( enumClass ) , INT00 ) ; \n\tfinal $F3244 $F83347 ( constants , enumClass ) ; \n\tfor ( final Object constant : constants ) { \n\t\t$F127965 ( econst , constant ) list . add ( convert ( econst , true , null ) ) ; \n\t\t} \n\tsetCriteria ( new EnumCriteria $F50 ( list ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setEnumCriteriaAllowError $F62952 ( _enumClassName ) { \n\ttry $F3342 ( setEnumCriteria , _enumClassName ) catch ( final Exception e ) $F303410 ( logger , _enumClassName ) } \n"}, {"code": "$F1 public ICmdLineArg $F26212 setKeyword $F62952 ( _keyword ) { \n\tthis . keyword = _keyword ; \n\t$F10937 ( camelCaps , createCamelCapVersionOfKeyword , _keyword ) $F10937 ( metaphone , createMetaphoneVersionOfKeyword , _keyword ) return this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setListCriteria $F139806 ( arrayOfValidValues ) throws ParseException , IOException { \n\tfinal $F26217 $F54 ( list ) ; \n\tfor ( final String arrayOfValidValue : arrayOfValidValues ) list . add ( $F11465 ( convert , arrayOfValidValue , caseSensitive ) ) ; \n\tsetCriteria ( new ListCriteria $F50 ( list ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setMultiple $F132136 ( bool ) throws ParseException { \n\tif ( bool ) return setMultiple ( INT00 , Integer . MAX_VALUE ) ; \n\t$F5237391 ( setMultiple ) } \n"}, {"code": "$F1 public ICmdLineArg $F26212 setMultiple $F63043 ( _multipleMin ) throws ParseException { \n\treturn setMultiple ( _multipleMin , Integer . MAX_VALUE ) ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setMultiple $F197107 ( _multipleMin , _multipleMax ) throws ParseException { \n\tthis . multipleMin = _multipleMin ; \n\tthis . multipleMax = _multipleMax ; \n\tmultiple = $F141995 ( _multipleMin , _multipleMax ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F762 $F1 public void setObject $F80574 ( valueAsObject ) { \n\t$F31376 ( setParsed ) $F63192 ( getValues ) ( ( E ) valueAsObject ) ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setRangeCriteria $F96892 ( min , max ) throws ParseException , IOException { \n\tsetCriteria ( new RangedCriteria $F50 ( $F63468 ( convert , min , max ) ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setRegxCriteria $F62952 ( pattern ) throws ParseException { \n\tsetCriteria ( new RegxCriteria $F26212 ( pattern ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F26212 setRequiredValue $F132136 ( bool ) throws ParseException { \n\tif ( ! bool ) throw new ParseException ( $F264213 ( getClass ) , $F3745 ) ; \n\trequiredValue = bool ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public void setValue ( final int index , final E value ) { \n\t$F31376 ( setParsed ) $F79308 ( getValues ) ( index , value ) ; \n\t} \n"}, {"code": "boolean valuesAreTheSameAsDefault $F2 { \n\tif ( $F46454 ( getDefaultValues ) || $F33007 ( getDefaultValues ) == INT00 ) $F213 if ( $F46454 ( getValues ) || $F33007 ( getValues ) == INT00 ) $F213 if ( $F33007 ( getDefaultValues ) != $F33007 ( getValues ) ) $F213 for ( int v = INT00 ; \n\tv < $F33007 ( getDefaultValues ) ; \n\tv ++ ) if ( ! $F68899 ( getDefaultValues , v ) . equals ( $F68899 ( getValues , v ) ) ) $F213 $F232 } \n"}, {"code": "protected void xmlEncode ( final String in , final StringBuilder builder ) { \n\tif $F164606 ( CDATA_NOTNEEDED , in ) $F41421 ( builder , in ) else $F1212 ( builder , in ) } \n"}, {"code": "public CreateOnceOnetimeTokenResult createOnceOnetimeToken ( CreateOnceOnetimeTokenRequest request ) { \n\tObjectNode body = JsonNodeFactory . instance . objectNode ( ) . put ( STRING00 , request . getScriptName ( ) ) ; \n\tif ( request . getGrant ( ) != null ) body . put ( STRING00 , request . getGrant ( ) ) ; \n\tif ( $F2094 ( request ) != null ) body . put ( STRING00 , $F2094 ( request ) ) ; \n\tHttpPost post = createHttpPost ( Gs2Constant . ENDPOINT_HOST + STRING00 , credential , ENDPOINT , CreateOnceOnetimeTokenRequest . Constant . MODULE , CreateOnceOnetimeTokenRequest . Constant . FUNCTION , $F797 ( body ) ) ; \n\tif ( $F247757 ( request ) != null ) { \n\t\tpost . setHeader ( STRING00 , $F247757 ( request ) ) ; \n\t\t} \n\treturn doRequest ( post , CreateOnceOnetimeTokenResult . class ) ; \n\t} \n"}, {"code": "public CreateTimeOnetimeTokenResult createTimeOnetimeToken ( CreateTimeOnetimeTokenRequest request ) { \n\tObjectNode body = JsonNodeFactory . instance . objectNode ( ) . put ( STRING00 , request . getScriptName ( ) ) ; \n\tHttpPost post = createHttpPost ( Gs2Constant . ENDPOINT_HOST + STRING00 , credential , ENDPOINT , CreateTimeOnetimeTokenRequest . Constant . MODULE , CreateTimeOnetimeTokenRequest . Constant . FUNCTION , $F797 ( body ) ) ; \n\tif ( $F247757 ( request ) != null ) { \n\t\tpost . setHeader ( STRING00 , $F247757 ( request ) ) ; \n\t\t} \n\treturn doRequest ( post , CreateTimeOnetimeTokenResult . class ) ; \n\t} \n"}, {"code": "public LoginResult login ( LoginRequest request ) { \n\tObjectNode body = JsonNodeFactory . instance . objectNode ( ) . put ( STRING00 , $F429555 ( request ) ) . put ( STRING00 , $F663739 ( request ) ) ; \n\tHttpPost post = createHttpPost ( Gs2Constant . ENDPOINT_HOST + STRING00 , credential , ENDPOINT , LoginRequest . Constant . MODULE , LoginRequest . Constant . FUNCTION , $F797 ( body ) ) ; \n\tif ( $F247757 ( request ) != null ) { \n\t\tpost . setHeader ( STRING00 , $F247757 ( request ) ) ; \n\t\t} \n\treturn doRequest ( post , LoginResult . class ) ; \n\t} \n"}, {"code": "public LoginWithSignResult loginWithSign ( LoginWithSignRequest request ) { \n\tObjectNode body = JsonNodeFactory . instance . objectNode ( ) . put ( STRING00 , $F429555 ( request ) ) . put ( STRING00 , $F663739 ( request ) ) . put ( STRING00 , request . getKeyName ( ) ) . put ( STRING00 , request . getSign ( ) ) ; \n\tHttpPost post = createHttpPost ( Gs2Constant . ENDPOINT_HOST + STRING00 , credential , ENDPOINT , LoginWithSignRequest . Constant . MODULE , LoginWithSignRequest . Constant . FUNCTION , $F797 ( body ) ) ; \n\tif ( $F247757 ( request ) != null ) { \n\t\tpost . setHeader ( STRING00 , $F247757 ( request ) ) ; \n\t\t} \n\treturn doRequest ( post , LoginWithSignResult . class ) ; \n\t} \n"}, {"code": "$F1 protected HttpRequestBase process ( InvocationContext context , HttpRequestBase request ) { \n\ttry { \n\t\tif ( request instanceof HttpEntityEnclosingRequestBase ) { \n\t\t\t$F432709 nameValuePairs = new LinkedList $F432708 $F2 ; \n\t\t\tList $F3625205 constantFormParams = RequestUtils . findStaticFormParams ( context ) ; \n\t\t\tfor ( Param param : constantFormParams ) { \n\t\t\t\tnameValuePairs . add ( new BasicNameValuePair ( $F2941 ( param ) , $F11145 ( param ) ) ) ; \n\t\t\t\t} \n\t\t\tList < Entry < FormParam , Object > > formParams = Metadata . onParams ( FormParam . class , context ) ; \n\t\t\tfor ( Entry < FormParam , Object > entry : formParams ) { \n\t\t\t\tString name = $F712 ( entry ) . value ( ) ; \n\t\t\t\t$F4379 ( value , entry ) if ( ! $F27895 ( value ) ) { \n\t\t\t\t\tStringBuilder errorContext = $F171524 ( $F33472 . getName ( ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( STRING00 ) ; \n\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t} \n\t\t\t\tnameValuePairs . add ( new BasicNameValuePair ( $F120302 ( name , String , value ) ) ) ; \n\t\t\t\t} \n\t\t\tList < Entry < FormParams , Object > > queryParamMaps = Metadata . onParams ( FormParams . class , context ) ; \n\t\t\tfor ( Entry < FormParams , Object > entry : queryParamMaps ) { \n\t\t\t\tParam [ ] constantParams = $F712 ( entry ) . value ( ) ; \n\t\t\t\tif $F124033 ( constantParams ) { \n\t\t\t\t\tfor ( Param param : constantParams ) { \n\t\t\t\t\t\tnameValuePairs . add ( new BasicNameValuePair ( $F2941 ( param ) , $F11145 ( param ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F4379 ( map , entry ) if $F457550 ( map ) { \n\t\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) ; \n\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F34560 ( nameAndValues , map ) for ( $F63175 nameAndValue : $F708 ( nameAndValues ) ) { \n\t\t\t\t\t$F457558 ( name , nameAndValue ) $F4379 ( value , nameAndValue ) if ( ! ( name instanceof CharSequence && ( value instanceof CharSequence || value instanceof Collection ) ) ) { \n\t\t\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) . append ( STRING00 ) ; \n\t\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif $F27895 ( value ) { \n\t\t\t\t\t\tnameValuePairs . add ( new BasicNameValuePair ( ( ( CharSequence ) name ) . toString ( ) , ( ( CharSequence ) value ) . toString ( ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F37414 ( multivalues , value ) for ( Object multivalue : multivalues ) { \n\t\t\t\t\t\t\tif ( ! $F27895 ( multivalue ) ) { \n\t\t\t\t\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) ; \n\t\t\t\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tnameValuePairs . add ( new BasicNameValuePair ( ( ( CharSequence ) name ) . toString ( ) , ( ( CharSequence ) multivalue ) . toString ( ) ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tUrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity ( nameValuePairs ) ; \n\t\t\turlEncodedFormEntity . setContentType ( ContentType . APPLICATION_FORM_URLENCODED . getMimeType ( ) ) ; \n\t\t\trequest . setHeader ( HttpHeaders . CONTENT_TYPE , ContentType . APPLICATION_FORM_URLENCODED . getMimeType ( ) ) ; \n\t\t\t( ( HttpEntityEnclosingRequestBase ) request ) . setEntity ( new UrlEncodedFormEntity ( nameValuePairs ) ) ; \n\t\t\t} \n\t\treturn request ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow ( e instanceof RequestProcessorException ) ? ( RequestProcessorException ) e : new RequestProcessorException $F209248 ( context , getClass , e ) ; \n\t\t} \n\t} \n"}, {"code": "private Pattern compile $F536555 ( tagIdentifiers , ignoreCase ) { \n\ttry { \n\t\t$F159660 ( tags ) if $F28022 ( tagIdentifiers ) { \n\t\t\t$F308974 ( tags , tagIdentifiers ) } \n\t\telse { \n\t\t\t$F38650 ( tags , StringUtils , tagIdentifiers ) ; \n\t\t\t} \n\t\t$F95965 ( regexps ) for ( $F2674 ( i , tags ) ) { \n\t\t\t$F129108 ( tag , tags , i ) if $F206736 ( StringUtils , tag ) { \n\t\t\t\t$F1200 ( actual ) if ( Character . isLetterOrDigit ( $F20069 ( tag ) ) ) $F8284 ( actual , WORD_BOUNDARY ) $F1212 ( actual , tag ) if ( Character . isLetterOrDigit ( $F14825 ( tag ) ) ) $F8284 ( actual , WORD_BOUNDARY ) $F18418 ( regexps , actual ) } \n\t\t\t} \n\t\tint flags ; \n\t\tif ( ignoreCase ) { \n\t\t\tflags = Pattern . CASE_INSENSITIVE ; \n\t\t\t} \n\t\telse $F12286 ( flags ) return Pattern . compile ( STRING00 + StringUtils . join ( $F16599 ( regexps ) , STRING00 ) + STRING00 , flags ) ; \n\t\t} \n\tcatch ( PatternSyntaxException exception ) { \n\t\tisInvalidPattern = true ; \n\t\terrorMessage . append ( Messages . Tasks_PatternError ( $F429828 ( tagIdentifiers , exception ) ) ) ; \n\t\t$F1218 ( errorMessage ) $F724 } \n\t} \n"}, {"code": "public Collection $F254905 scan $F711914 ( reader ) throws IOException { \n\ttry { \n\t\tif ( isInvalidPattern ) { \n\t\t\tthrow new AbortException $F5478 ( errorMessage ) ; \n\t\t\t} \n\t\tLineIterator $F22378 ( lineIterator , IOUtils , reader ) ; \n\t\t$F587583 tasks = new ArrayList $F254905 $F2 ; \n\t\tfor ( int lineNumber = INT00 ; \n\t\t$F11309 ( lineIterator ) ; \n\t\tlineNumber ++ ) { \n\t\t\t$F11431 ( line , lineIterator ) for ( $F46272 ( priority , Priority ) ) { \n\t\t\t\tif $F33656 ( patterns , priority ) { \n\t\t\t\t\tMatcher matcher = $F198 ( patterns , priority ) . matcher ( line ) ; \n\t\t\t\t\tif ( $F129112 ( matcher ) && $F187903 ( matcher ) == INT00 ) { \n\t\t\t\t\t\tString message = $F15644 ( matcher ) ; \n\t\t\t\t\t\ttasks . add ( new Task ( priority , lineNumber , $F14103 ( matcher ) , StringUtils . remove ( message , STRING00 ) . trim ( ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\treturn tasks ; \n\t\t} \n\t$F2454 ( reader ) } \n"}, {"code": "$F1 public void onCreate ( Bundle savedInstanceState ) { \n\t$F568580 ( super , savedInstanceState ) INJECTOR_CONFIGURATION = Injector . Configuration . newInstance ( this ) ; \n\t} \n"}, {"code": "$F1 public void onViewCreated $F8935058 ( view , savedInstanceState ) { \n\t$F2340321 ( super , view , savedInstanceState ) $F700186 ( InjectionUtils , INJECTOR_CONFIGURATION ) } \n"}, {"code": "private void init $F2 { \n\t$F991 paths = StringSupport . split ( $F16411 ( classpath ) ) ; \n\tfor ( String location : paths ) { \n\t\tlocation = FileSupport . convertToUnixStylePath ( location ) ; \n\t\tif $F35596 ( location ) $F890 ( mapFilesInZip , location ) else { \n\t\t\t$F2595 ( dir , location ) if $F15346 ( dir ) { \n\t\t\t\t$F482647 ( location ) $F213060 classFiles = FileSupport . getFilesInDirectoryTree ( dir ) ; \n\t\t\t\tfor ( File file : classFiles ) { \n\t\t\t\t\t$F2518 ( fileName , file ) if ( $F35596 ( fileName ) && $F323986 ( file ) ) $F890 ( mapFilesInZip , fileName ) else { \n\t\t\t\t\t\tmapClassResourceEntry ( $F242391 ( file ) ( $F1203 ( location ) ) , file ) ; \n\t\t\t\t\t\tfileCreationTimes . put ( file , new Long ( $F105890 ( file ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F1645 } \n\t\t} \n\t} \n"}, {"code": "private void mapFilesInZip ( String fileName ) { \n\t$F2595 ( file , fileName ) fileCreationTimes . put ( file , new Long ( $F105890 ( file ) ) ) ; \n\tZipFile zipfile ; \n\ttry { \n\t\t$F612693 ( zipfile , fileName ) ; \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new NoClassDefFoundError $F61905 ( fileName , ioe ) ; \n\t\t} \n\t$F437117 $F243469 ( e , zipfile ) ; \n\twhile $F5506 ( e ) { \n\t\t$F437124 ( entry , e ) if $F11928 ( entry ) { \n\t\t\t$F22744 ( mapClassResourceEntry , entry , fileName ) ; \n\t\t\t} \n\t\t} \n\ttry $F2453 ( zipfile ) catch ( IOException ioe ) { \n\t\tthrow new NoClassDefFoundError $F61905 ( fileName , ioe ) ; \n\t\t} \n\t} \n"}, {"code": "public Map < String , $F25566 > getMultipleLocationsForResources $F2 { \n\treturn new TreeMap < String , $F25566 > ( multipleLocationsForResource ) ; \n\t} \n"}, {"code": "private void mapClassResourceEntry $F844 ( fileName , location ) { \n\t$F2744 ( previouslyFoundLocation , mixedResourceLocations , fileName ) if $F253280 ( previouslyFoundLocation , location ) $F47902 ( registerMultipleLocations , fileName , location ) if $F1202 ( fileName ) { \n\t\t$F8494 ( className , convertFileNameToClassName , fileName ) $F2725 ( propertiesResourceLocations , className , fileName ) } \n\telse if $F1202 ( fileName ) { \n\t\t$F8494 ( className , convertFileNameToClassName , fileName ) $F2725 ( classResourceLocations , className , location ) } \n\t$F2725 ( mixedResourceLocations , fileName , location ) } \n"}, {"code": "public synchronized $F2612 loadClass $F1693 ( className , resolve ) throws ClassNotFoundException { \n\t$F2612 retval = super . findLoadedClass ( className ) ; \n\tif $F112 ( retval ) { \n\t\tif ( ! this . belongsToExcludedPackage ( className ) ) { \n\t\t\ttry { \n\t\t\t\t$F10937 ( retval , findClass , className ) if ( retval == ResourceBundle . class ) { \n\t\t\t\t\tthrow new ClassNotFoundException $F2821 ( className ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F7943 ( resolve , resolveClass , retval ) return retval ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( ClassNotFoundException e ) { \n\t\t\t\tif ( retval == ResourceBundle . class ) $F4760 ( e ) retval = $F20654 ( super , className , resolve ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tretval = $F20654 ( super , className , resolve ) ; \n\t\t\t} \n\t\t} \n\treturn retval ; \n\t} \n"}, {"code": "public $F2612 findClass ( String className ) throws ClassNotFoundException { \n\t$F2744 ( location , classResourceLocations , className ) if ( location == null && this . propertiesResourceLocations . containsKey ( className ) ) { \n\t\t$F194836 ( fileName , propertiesResourceLocations , className ) if $F1202 ( fileName ) { \n\t\t\treturn ResourceBundle . class ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ClassNotFoundException $F24635 ( fileName , className ) ; \n\t\t\t} \n\t\t} \n\tif $F5667 ( className ) { \n\t\treturn super . findClass ( className ) ; \n\t\t} \n\tif $F112 ( location ) { \n\t\tthrow new ClassNotFoundException $F61905 ( className , classpath ) ; \n\t\t} \n\tString fileName = $F20675 ( className ) ; \n\t$F108364 ( data ) try $F14068 ( data , getData , fileName , location ) catch ( IOException ioe ) { \n\t\tthrow new NoClassDefFoundError $F74619 ( className , location , ioe ) ; \n\t\t} \n\treturn $F48107 ( defineClass , className , data ) ; \n\t} \n"}, {"code": "private static $F1975 getData $F844 ( fileName , location ) throws IOException { \n\t$F108364 ( data ) if $F4380 ( location ) { \n\t\tdata = FileSupport . getBinaryFromJar ( $F11504 ( fileName , location ) ) ; \n\t\t} \n\telse if $F2651 ( location ) { \n\t\tInputStream in = new FileInputStream ( ( File ) location ) ; \n\t\tdata = StreamSupport . absorbInputStream ( in ) ; \n\t\t$F1109 ( in ) } \n\telse { \n\t\tthrow new NoClassDefFoundError $F24635 ( fileName , location ) ; \n\t\t} \n\treturn data ; \n\t} \n"}, {"code": "public URL findResource ( String fileName ) { \n\tObject location = this . mixedResourceLocations . get ( fileName ) ; \n\tif $F112 ( location ) { \n\t\treturn super . findResource ( fileName ) ; \n\t\t} \n\tString url ; \n\tif $F2651 ( location ) { \n\t\turl = STRING00 + FileSupport . convertToUnixStylePath ( ( ( File ) location ) . getAbsolutePath ( ) ) ; \n\t\t} \n\telse { \n\t\turl = STRING00 + FileSupport . convertToUnixStylePath ( ( String ) location ) + STRING00 + fileName ; \n\t\t} \n\ttry $F35968 ( url ) catch ( MalformedURLException e ) { \n\t\tthrow new ResourceException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public InputStream getResourceAsStream ( String fileName ) { \n\t$F39440 ( retval , super , fileName ) if $F112 ( retval ) { \n\t\tObject location = this . mixedResourceLocations . get ( fileName ) ; \n\t\t$F2201 ( location ) $F108364 ( data ) try $F14068 ( data , getData , fileName , location ) catch ( IOException ioe ) $F2200 $F2201 ( data ) $F689612 ( data ) } \n\treturn retval ; \n\t} \n"}, {"code": "public synchronized boolean checkResources $F2 { \n\tnrofResourcesDeleted = INT00 ; \n\tnrofResourcesUpdated = INT00 ; \n\tfor ( File file : $F7837 ( fileCreationTimes ) ) { \n\t\tif $F11857 ( file ) $F16091 ( nrofResourcesDeleted ) else if ( $F105890 ( file ) != ( $F375948 ( fileCreationTimes , file ) ) . longValue ( ) ) $F16091 ( nrofResourcesUpdated ) } \n\treturn $F141994 ( nrofResourcesDeleted , nrofResourcesUpdated ) ; \n\t} \n"}, {"code": "public static $F1372 void mergeFrom ( $F1975 data , T message , $F931805 schema ) { \n\tIOUtil . mergeFrom ( data , INT00 , data . length , message , schema , true ) ; \n\t} \n"}, {"code": "public static $F1372 int writeListTo ( final OutputStream out , $F598407 ( messages ) , final $F931805 schema , final LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 $F119109 ( size , messages ) $F97264 ( size ) final ProtostuffOutput output = new ProtostuffOutput ( buffer , out ) ; \n\toutput . sink . writeVarInt32 ( size , output , buffer ) ; \n\tfor ( T m : messages ) { \n\t\t$F800405 ( schema , output , m ) output . sink . writeByte ( ( byte ) WireFormat . WIRETYPE_TAIL_DELIMITER , output , buffer ) ; \n\t\t} \n\t$F800405 ( LinkedBuffer , out , buffer ) return output . size ; \n\t} \n"}, {"code": "public static $F1372 $F23339 parseListFrom ( final InputStream in , final $F931805 schema ) throws IOException { \n\t$F61221 ( size , in ) if $F9467 ( size ) $F4423 ( Collections ) if $F3730 ( size ) size = CodedInput . readRawVarint32 ( in , size ) ; \n\tfinal $F164118 list = $F354335 ( size ) ; \n\tfinal CodedInput input = new CodedInput $F21334 ( in ) ; \n\tfor ( $F6610 ( i , size ) ) { \n\t\tfinal T message = schema . newMessage ( ) ; \n\t\t$F528 ( list , message ) schema . mergeFrom ( input , message ) ; \n\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t} \n\tassert $F24551 ( in ) == $F3745 ; \n\treturn list ; \n\t} \n"}, {"code": "$F1 public void checkPermission ( Permission permission , AddOnModel addon ) throws IzouPermissionException { \n\t$F88449 ( isRegistered , addon ) if ( permission instanceof FilePermission && ! $F597700 ( permission ) . intern ( ) . toLowerCase ( ) . equals ( STRING00 ) ) { \n\t\tString canonicalName = $F507 ( permission ) . intern ( ) . toLowerCase ( ) ; \n\t\tgetSecurityManager ( ) . getPermissionManager ( ) . getFilePermissionModule ( ) . fileWriteCheck ( canonicalName , addon ) ; \n\t\t} \n\tFunction < PluginDescriptor , Boolean > checkPermission = descriptor - > <missing ';'> { \n\t\ttry { \n\t\t\treturn descriptor . getAddOnProperties ( ) . get ( STRING00 ) . equals ( STRING00 ) ; \n\t\t\t} \n\t\tcatch ( NullPointerException e ) $F1668 } \n\t; \n\tString exceptionMessage = $F7207 ( addon ) ; \n\t$F518007 ( registerOrThrow , addon ) - > new IzouSocketPermissionException ( exceptionMessage ) , checkPermission ) ; \n\t} \n"}, {"code": "public static boolean clearDirectory ( File directory ) { \n\tif $F15346 ( directory ) { \n\t\tfor ( $F22048 ( file , directory ) ) $F76060 ( deleteRecursive , file ) } \n\t$F232 } \n"}, {"code": "public static $F1975 getFileContents ( File file ) throws IOException { \n\t$F1100 ( stream , file ) $F1975 contents = new byte [ $F94230 ( file ) ] ; \n\t$F33779 ( stream , contents ) $F1109 ( stream ) return contents ; \n\t} \n"}, {"code": "public static void setFileContents ( File file , $F1975 contents , boolean createDirectory ) throws IOException { \n\tif ( createDirectory ) { \n\t\t$F31782 ( directory , file ) $F11859 ( directory ) } \n\t$F80655 ( stream , file ) $F21494 ( stream , contents ) $F1109 ( stream ) } \n"}, {"code": "public static void setFileContents ( File file , ByteBuffer contents ) throws IOException $F144166 ( setFileContents , file , contents ) "}, {"code": "public static void setFileContents ( File file , ByteBuffer contents , boolean createDirectory ) throws IOException { \n\tif ( createDirectory ) { \n\t\t$F31782 ( directory , file ) $F11859 ( directory ) } \n\t$F80655 ( stream , file ) StreamUtil . writeBytes ( contents , stream ) ; \n\t$F1109 ( stream ) } \n"}, {"code": "public static void writeObjectToFile ( File file , Object object ) throws IOException { \n\t$F80655 ( fs , file ) $F40822 ( os , fs ) $F40824 ( os , object ) $F1109 ( os ) } \n"}, {"code": "public static Object readObjectFromFile ( File file ) throws $F41220 { \n\t$F1100 ( fs , file ) $F98139 ( os , fs ) $F60640 ( object , os ) $F1109 ( os ) return object ; \n\t} \n"}, {"code": "public static boolean isAncestor $F24631 ( file , ancestor ) throws IOException { \n\tfile = $F38014 ( file ) ; \n\tancestor = $F38014 ( ancestor ) ; \n\tdo { \n\t\t$F47098 ( file , ancestor ) $F53514 ( file ) } \n\twhile $F268 ( file ) ; \n\t$F213 } \n"}, {"code": "public static void prune $F24631 ( file , root ) { \n\twhile ( $F27658 ( file , root ) && $F11954 ( file ) ) { \n\t\t$F53514 ( file ) } \n\t} \n"}, {"code": "public static boolean postOrderTraversal ( File root , FileVisitor visitor ) throws Exception { \n\tif $F15346 ( root ) { \n\t\tfor ( $F22048 ( child , root ) ) { \n\t\t\t$F64960 ( postOrderTraversal , child , visitor ) } \n\t\t} \n\t$F1566579 ( visitor , root ) } \n"}, {"code": "public static boolean preOrderTraversal ( File root , FileVisitor visitor ) throws Exception { \n\tif ( ! $F823009 ( visitor , root ) ) $F1668 if $F15346 ( root ) { \n\t\tfor ( $F22048 ( child , root ) ) { \n\t\t\t$F64960 ( preOrderTraversal , child , visitor ) } \n\t\t} \n\t$F232 } \n"}, {"code": "public static void zip ( File zipFile , final File contents ) throws IOException { \n\t$F160891 ( os , zipFile ) final ZipOutputStream zs = $F474200 ( os ) ; \n\ttry { \n\t\tpreOrderTraversal ( contents , new FileVisitor $F2 { \n\t\t\tpublic boolean visit ( File file ) throws IOException { \n\t\t\t\tif $F2503 ( file ) { \n\t\t\t\t\t$F5618 ( name , getRelativePath , file , contents ) zs . putNextEntry ( $F289818 ( name ) ) ; \n\t\t\t\t\t$F1100 ( fs , file ) StreamUtil . writeStream ( fs , zs ) ; \n\t\t\t\t\t$F1109 ( fs ) $F11940 ( zs ) } \n\t\t\t\t$F232 } \n\t\t\t} \n\t\t) ; \n\t\t} \n\t$F49439 ( e ) catch ( Exception e ) { \n\t\tthrow new UnexpectedException ( e ) ; \n\t\t} \n\t$F1109 ( zs ) } \n"}, {"code": "public static String getRelativePath $F24631 ( file , base ) throws IOException { \n\t$F6364 ( path ) while $F12600 ( isAncestor , file , base ) $F1219 ( path ) $F300984 ( fileName , file ) $F300984 ( baseName , base ) $F12039 ( prefixLength , baseName ) if $F198048 ( baseName ) $F16091 ( prefixLength ) $F377176 ( path , fileName , prefixLength ) $F1226 ( path ) } \n"}, {"code": "public static File getApplicationDataDirectory $F62952 ( applicationName ) { \n\tfinal String $F52287 ( userHome , System ) ; \n\tfinal File workingDirectory ; \n\tfinal String osName = $F52286 ( System ) . toLowerCase ( ) ; \n\tif $F23577 ( osName ) { \n\t\tfinal String $F180370 ( applicationData , System ) ; \n\t\tif $F268 ( applicationData ) $F305200 ( workingDirectory , applicationData , applicationName ) ; \n\t\telse workingDirectory = new File $F372262 ( userHome , applicationName ) ; \n\t\t} \n\telse if $F23577 ( osName ) { \n\t\tworkingDirectory = new File $F376468 ( userHome , applicationName ) ; \n\t\t} \n\telse { \n\t\tworkingDirectory = new File $F372262 ( userHome , applicationName ) ; \n\t\t} \n\tif $F11857 ( workingDirectory ) if $F187040 ( workingDirectory ) $F96540 ( workingDirectory ) return workingDirectory ; \n\t} \n"}, {"code": "public static String getExtension ( String fileName ) { \n\t$F6990 ( pos , fileName ) if $F2523 ( pos ) $F4801 $F115346 ( fileName , pos ) } \n"}, {"code": "public static < F , S > Success < F , S > success ( final S x ) { \n\treturn new Success < F , S > ( x ) ; \n\t} \n"}, {"code": "public void setUpBenchmark ( Object benchmarkInstance ) throws UserCodeException { \n\t$F2233 ( setupSuccess ) try $F63557 ( callSetUp , benchmarkInstance , setupSuccess ) finally { \n\t\t$F65112 ( setupSuccess , callTearDown , benchmarkInstance ) } \n\t} \n"}, {"code": "void _prepareResponseDataOnlyOnce ( HttpServletRequest req ) { \n\tif ( $F25201 ( req , KEY_FILE ) == null ) { \n\t\t$F25217 ( pathInfo , req ) $F95338 ( pathInfo ) $F111 ( fileSeparator , System ) String filePath = pathInfo . replaceAll ( $F885427 ( Pattern ) , fileSeparator ) ; \n\t\t$F4771 ( mappedDirPath , getMappedDirPath ) $F2501 ( file , mappedDirPath , filePath ) $F64856 ( isDirectory , file ) $F47921 ( req , KEY_IS_DIR , isDirectory ) if ( isDirectory ) file = new File $F46456 ( mappedDirPath , getIndexFilename ) ; \n\t\t$F47921 ( req , KEY_FILE , file ) req . setAttribute ( KEY_MIME , __getMimeType ( file ) ) ; \n\t\treq . setAttribute ( KEY_LAST_MODIFIED , $F2475 ( file ) ? $F105890 ( file ) : INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "public Object getFragment $F136219 ( address , jsonPath , jsonFragment ) { \n\t$F105146 ( jsonFragment2 ) if $F28586 ( fragmentCache , address ) { \n\t\t$F14067 ( jsonFragment2 , read , jsonPath , jsonFragment ) $F2725 ( fragmentCache , address , jsonFragment2 ) } \n\telse $F13003 ( jsonFragment2 , fragmentCache , address ) return jsonFragment2 ; \n\t} \n"}, {"code": "public void init $F2 { \n\tnodeState = StateHelper . getStateImpl ( ) ; \n\ttry { \n\t\t$F9885 ( nodeState ) } \n\t$F11569 ( ex ) $F1170800 ( nodesSet , nodeState ) ; \n\t$F680835 ( it , nodesSet ) allNodes = new Node $F31920 ( nodesSet ) ; \n\t$F1987 ( i ) while $F11310 ( it ) { \n\t\tallNodes [ i ++ ] = ( Node ) $F11311 ( it ) ; \n\t\t} \n\tisInit = true ; \n\t} \n"}, {"code": "public Node currentNode $F2 { \n\t$F64896 ( isInit , init ) if ( ( lastUUIDTimeStored + nodeState . getSynchInterval ( ) ) > ( findMaxTimestamp ( ) / Clock . INTERVALS_PER_MILLI ) ) { \n\t\ttry { \n\t\t\t$F2718919 ( nodeState , nodesSet ) } \n\t\t$F188590 } \n\t$F12382 ( allNodes , currentNodeIndex ) } \n"}, {"code": "public Node nextAvailableNode $F2 { \n\t$F64896 ( isInit , init ) currentNodeIndex ++ ; \n\tif $F101546 ( currentNodeIndex , allNodes ) $F12286 ( currentNodeIndex ) $F24894 ( currentNode ) } \n"}, {"code": "private long findMaxTimestamp $F2 { \n\t$F64896 ( isInit , init ) $F57820 ( max ) for ( $F2674 ( i , allNodes ) ) { \n\t\tif ( $F18572 ( allNodes , i ) && allNodes [ i ] . getLastTimestamp ( ) > max ) { \n\t\t\tmax = allNodes [ i ] . getLastTimestamp ( ) ; \n\t\t\t} \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "private void position ( long newPosition ) throws IOException { \n\tcheck ( ) ; \n\tcheckPosition ( newPosition ) ; \n\tthis . getRandomAccessFile ( ) . seek ( newPosition + getHeaderLength ( ) ) ; \n\t} \n"}, {"code": "public void close $F2 throws IOException { \n\tif $F268 ( raf ) { \n\t\ttry { \n\t\t\tif ( this . fileLock != null ) { \n\t\t\t\tif ( ! $F118193 ( fileLock ) ) $F52772 ( LOG ) } \n\t\t\telse $F52772 ( LOG ) } \n\t\tfinally { \n\t\t\tthis . fileLock = null ; \n\t\t\t$F1109 ( raf ) raf = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F1975 read ( int length ) throws IOException { \n\tcheck ( ) ; \n\tcheckRead ( length ) ; \n\tif ( length >= Integer . MAX_VALUE ) { \n\t\tthrow new IOException ( STRING00 + Integer . MAX_VALUE ) ; \n\t\t} \n\tif ( $F122698 ( this , length ) > this . getCommittedSize ( ) ) { \n\t\tthrow new IOException ( STRING00 + this . getCommittedSize ( ) ) ; \n\t\t} \n\tint intLength = $F6258 ( Long , length ) . intValue ( ) ; \n\t$F9435 ( buffer , intLength ) if $F560 ( isClose ) $F9471 long retVal = this . getRandomAccessFile ( ) . read ( buffer , INT00 , intLength ) ; \n\tif $F2523 ( retVal ) { \n\t\tthrow new IOException ( STRING00 + ( position ( ) + intLength ) ) ; \n\t\t} \n\treturn buffer ; \n\t} \n"}, {"code": "public void write $F2665 ( buffer ) throws IOException { \n\tcheck ( ) ; \n\tif $F560 ( isClose ) $F9471 long $F63765 ( currentPosition , this ) ; \n\tthis . raf . write ( buffer ) ; \n\tassert $F118178 ( this , currentPosition ) == buffer . length : STRING00 + currentPosition + buffer . length + STRING00 + $F57991 ( this ) ; \n\t} \n"}, {"code": "public void reset $F2 throws IOException { \n\tcheck ( ) ; \n\t$F134189 ( this ) $F374904 ( this ) this . getRandomAccessFile ( ) . getChannel ( ) . truncate ( TAEnabledRandomAccessFile . HEADER_LENGTH ) ; \n\t} \n"}, {"code": "private void restoreCommittedSize $F2 throws IOException { \n\tcheck ( ) ; \n\t$F156021 ( privCommittedSize ) this . getRandomAccessFile ( ) . seek ( INT00 ) ; \n\tif ( this . raf . length ( ) < HEADER_LENGTH ) { \n\t\tthis . getRandomAccessFile ( ) . writeLong ( INT00 ) ; \n\t\tprivCommittedSize = INT00 ; \n\t\t} \n\telse { \n\t\tprivCommittedSize = this . getRandomAccessFile ( ) . readLong ( ) ; \n\t\t} \n\t$F63769 ( this , privCommittedSize ) this . committedSize = privCommittedSize ; \n\t} \n"}, {"code": "public void dragAndDropToObject $F1195 ( locator , targetLocator ) { \n\tjtCore . waitForElementPresent ( locator ) ; \n\t( new Actions ( jtCore . getWebDriver ( ) ) ) . dragAndDrop ( $F1195662 ( jtCore , locator ) , $F1195662 ( jtCore , targetLocator ) ) . perform ( ) ; \n\t} \n"}, {"code": "public void dragAndDropWithPause $F157451 ( locator , targetLocator , pause ) { \n\t$F564 ( dragAndDropToObject , locator , targetLocator ) $F893 ( jtCore , pause ) } \n"}, {"code": "public static InetAddress getLocalHost $F2 { \n\tif $F112 ( localHost ) { \n\t\ttry { \n\t\t\tlocalHost = java . net . InetAddress . getLocalHost ( ) ; \n\t\t\t} \n\t\tcatch ( UnknownHostException e ) { \n\t\t\t$F201489 ( LOGGER , e ) localHost = null ; \n\t\t\thostName = STRING00 ; \n\t\t\tipAddress = STRING00 ; \n\t\t\t} \n\t\t} \n\treturn localHost ; \n\t} \n"}, {"code": "private Map < $F2612 , Formatter > findFormatMethods $F2 { \n\tfinal Map < $F2612 , Formatter > formats = new HashMap < $F2612 , Formatter > $F2 ; \n\tfor ( Method method : $F346799 ( this ) ) { \n\t\tFormat formatAnnotation = method . getAnnotation ( Format . class ) ; \n\t\tif $F268 ( formatAnnotation ) { \n\t\t\t$F75735 ( parameterTypes , method ) if $F4389 ( parameterTypes ) { \n\t\t\t\tthrow new InvalidFormatMethodException ( getClass ( ) , method , STRING00 ) ; \n\t\t\t\t} \n\t\t\tformats . put ( parameterTypes [ INT00 ] , createFormatter ( method , parameterTypes , $F11145 ( formatAnnotation ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn formats ; \n\t} \n"}, {"code": "private Formatter createFormatter ( Method method , $F3704 ( sig ) , int prio ) { \n\tif ( $F20027 ( method ) != Component . class ) { \n\t\tthrow new InvalidFormatMethodException ( getClass ( ) , method , STRING00 ) ; \n\t\t} \n\tfinal Invoker invoker ; \n\tif $F4389 ( sig ) { \n\t\tinvoker = new InputOnly $F2 ; \n\t\t} \n\telse if $F4389 ( sig ) { \n\t\tif ( sig [ INT00 ] == $F1412586 ) { \n\t\t\tinvoker = new ContextOnly $F2 ; \n\t\t\t} \n\t\telse if ( sig [ INT00 ] == Arguments . class ) { \n\t\t\tinvoker = new ArgsOnly $F2 ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new InvalidFormatMethodException ( getClass ( ) , method , STRING00 ) ; \n\t\t\t} \n\t\t} \n\telse if $F4389 ( sig ) { \n\t\tif ( sig [ INT00 ] == $F1412586 && sig [ INT00 ] == Arguments . class ) { \n\t\t\tinvoker = new CompleteContextFirst $F2 ; \n\t\t\t} \n\t\telse if ( sig [ INT00 ] == Arguments . class && sig [ INT00 ] == $F1412586 ) { \n\t\t\tinvoker = new CompleteArgsFirst $F2 ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new InvalidFormatMethodException ( getClass ( ) , method , STRING00 ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tthrow new InvalidFormatMethodException ( getClass ( ) , method , STRING00 ) ; \n\t\t} \n\treturn new Formatter $F3192 ( this , method , prio , invoker ) ; \n\t} \n"}, {"code": "public boolean wasKeyTyped ( int keyCode ) { \n\tif ( this . isKeyDown ( keyCode ) && ! this . checked . contains ( keyCode ) ) { \n\t\tthis . checked . add ( keyCode ) ; \n\t\t$F232 } \n\t$F213 } \n"}, {"code": "$F1 public void mouseClicked ( MouseEvent e ) { \n\tmouseEvents . add ( MouseInputEvent . fromMouseEvent ( MouseAction . CLICKED , e ) ) ; \n\t} \n"}, {"code": "public void addSort $F366384 ( object , sort , priority ) { \n\tkey . addPrimitiveValue ( $F4182 ( String , SORT_LABEL , priority ) , object , sort , priority ) ; \n\t} \n"}, {"code": "public void addSort ( WritableComparable $F45 writable , int sort , int priority ) { \n\tkey . addHadoopValue ( $F4182 ( String , SORT_LABEL , priority ) , writable , sort , priority ) ; \n\t} \n"}, {"code": "public String getGroupingString ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . STRING , STRING00 ) ; \n\t$F2201 ( o ) return ( String ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Byte getGroupingByte ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . BYTE , STRING00 ) ; \n\t$F2201 ( o ) return ( Byte ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Integer getGroupingInteger ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . INTEGER , STRING00 ) ; \n\t$F2201 ( o ) return ( Integer ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Long getGroupingLong ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . LONG , STRING00 ) ; \n\t$F2201 ( o ) return ( Long ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Double getGroupingDouble ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . DOUBLE , STRING00 ) ; \n\t$F2201 ( o ) return ( Double ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Float getGroupingFloat ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . FLOAT , STRING00 ) ; \n\t$F2201 ( o ) return ( Float ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Boolean getGroupingBoolean ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( KEY , label , ObjectUtil . BOOLEAN , STRING00 ) ; \n\t$F2201 ( o ) return ( Boolean ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Text getGroupingText ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . STRING , STRING00 ) ; \n\t$F2201 ( o ) return ( Text ) $F463 ( o ) ; \n\t} \n"}, {"code": "public ByteWritable getGroupingByteWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . BYTE , STRING00 ) ; \n\t$F2201 ( o ) return ( ByteWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public IntWritable getGroupingIntWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . INTEGER , STRING00 ) ; \n\t$F2201 ( o ) return ( IntWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public LongWritable getGroupingLongWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . LONG , STRING00 ) ; \n\t$F2201 ( o ) return ( LongWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public DoubleWritable getGroupingDoubleWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . DOUBLE , STRING00 ) ; \n\t$F2201 ( o ) return ( DoubleWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public FloatWritable getGroupingFloatWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . FLOAT , STRING00 ) ; \n\t$F2201 ( o ) return ( FloatWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public BooleanWritable getGroupingBooleanWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( KEY , label , ObjectUtil . BOOLEAN , STRING00 ) ; \n\t$F2201 ( o ) return ( BooleanWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public String getValueString ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . STRING , STRING00 ) ; \n\t$F2201 ( o ) return ( String ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Byte getValueByte ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . BYTE , STRING00 ) ; \n\t$F2201 ( o ) return ( Byte ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Integer getValueInteger ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . INTEGER , STRING00 ) ; \n\t$F2201 ( o ) return ( Integer ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Long getValueLong ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . LONG , STRING00 ) ; \n\t$F2201 ( o ) return ( Long ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Double getValueDouble ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . DOUBLE , STRING00 ) ; \n\t$F2201 ( o ) return ( Double ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Float getValueFloat ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . FLOAT , STRING00 ) ; \n\t$F2201 ( o ) return ( Float ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Boolean getValueBoolean ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . BOOLEAN , STRING00 ) ; \n\t$F2201 ( o ) return ( Boolean ) $F463 ( o ) ; \n\t} \n"}, {"code": "public $F3406 getValueList ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . ARRAY , STRING00 ) ; \n\t$F2201 ( o ) return ( $F3406 ) $F463 ( o ) ; \n\t} \n"}, {"code": "public $F19379 getValueMap ( String label ) { \n\tPrimitiveObject o = getPrimitiveObject ( VALUE , label , ObjectUtil . MAP , STRING00 ) ; \n\t$F2201 ( o ) return ( $F19379 ) $F463 ( o ) ; \n\t} \n"}, {"code": "public Text getValueText ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . STRING , STRING00 ) ; \n\t$F2201 ( o ) return ( Text ) $F463 ( o ) ; \n\t} \n"}, {"code": "public ByteWritable getValueByteWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . BYTE , STRING00 ) ; \n\t$F2201 ( o ) return ( ByteWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public IntWritable getValueIntWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . INTEGER , STRING00 ) ; \n\t$F2201 ( o ) return ( IntWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public LongWritable getValueLongWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . LONG , STRING00 ) ; \n\t$F2201 ( o ) return ( LongWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public DoubleWritable getValueDoubleWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . DOUBLE , STRING00 ) ; \n\t$F2201 ( o ) return ( DoubleWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public FloatWritable getValueFloatWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . FLOAT , STRING00 ) ; \n\t$F2201 ( o ) return ( FloatWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public BooleanWritable getValueBooleanWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . BOOLEAN , STRING00 ) ; \n\t$F2201 ( o ) return ( BooleanWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public ArrayWritable getValueArrayWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . ARRAY , STRING00 ) ; \n\t$F2201 ( o ) return ( ArrayWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public MapWritable getValueMapWritable ( String label ) { \n\tHadoopObject o = getHadoopObject ( VALUE , label , ObjectUtil . MAP , STRING00 ) ; \n\t$F2201 ( o ) return ( MapWritable ) $F463 ( o ) ; \n\t} \n"}, {"code": "public static void checkForEqualDimensions ( ArrayND a0 , ArrayND a1 ) { \n\tif ( $F1976 ( a0 ) . getSize ( ) != $F1976 ( a1 ) . getSize ( ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( a0 ) . getSize ( ) + STRING00 + $F1976 ( a1 ) . getSize ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void checkForEqualSizes ( ArrayND a0 , ArrayND a1 ) { \n\tif ( ! $F1976 ( a0 ) . equals ( $F1976 ( a1 ) ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( a0 ) + STRING00 + $F1976 ( a1 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void checkForNonNegativeElements ( IntTuple t ) { \n\tfor ( int i = INT00 ; \n\t$F43999 ( i , t ) ; \n\ti ++ ) { \n\t\tif ( $F198 ( t , i ) < INT00 ) $F65844 ( t ) } \n\t} \n"}, {"code": "public static void checkForValidSubArrayIndices ( IntTuple parentSize , IntTuple fromIndices , IntTuple toIndices ) { \n\tif ( $F1976 ( fromIndices ) != $F1976 ( parentSize ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( parentSize ) + STRING00 + STRING00 + $F1976 ( fromIndices ) + STRING00 ) ; \n\t\t} \n\tif ( $F1976 ( toIndices ) != $F1976 ( parentSize ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( parentSize ) + STRING00 + STRING00 + $F1976 ( toIndices ) + STRING00 ) ; \n\t\t} \n\t$F252342 ( n , parentSize ) for ( $F6610 ( i , n ) ) { \n\t\t$F90858 ( p , parentSize , i ) $F90858 ( f , fromIndices , i ) $F90858 ( t , toIndices , i ) if ( f < INT00 || t > p || f > t ) $F154411 ( fromIndices , toIndices , parentSize ) } \n\t} \n"}, {"code": "public static int countDifferences ( IntTuple t0 , IntTuple t1 ) { \n\tif ( $F1976 ( t0 ) != $F1976 ( t1 ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t0 ) + STRING00 + $F1976 ( t1 ) ) ; \n\t\t} \n\t$F252342 ( n , t0 ) $F1987 ( differences ) for ( $F6610 ( i , n ) ) { \n\t\tif ( $F198 ( t0 , i ) != $F198 ( t1 , i ) ) $F16091 ( differences ) } \n\treturn differences ; \n\t} \n"}, {"code": "$F1 public void close $F2 throws Exception { \n\tMimeBodyPart $F408274 ( part ) ; \n\t$F1200 ( sb ) $F12039 ( len , buffer ) for ( $F6610 ( i , len ) ) { \n\t\tILoggingEvent $F145 ( event , buffer ) ; \n\t\tsb . append ( layout . doLayout ( event ) ) ; \n\t\t} \n\tpart . setText ( $F797 ( sb ) , STRING00 , STRING00 ) ; \n\tMultipart mp = new MimeMultipart $F2 ; \n\t$F408283 ( mp , part ) $F128853 ( mimeMsg , mp ) mimeMsg . setSentDate ( $F6239 ) ; \n\t$F179957 ( Transport , mimeMsg ) } \n"}, {"code": "public InjectorConfiguration withDefined ( Class classDefinition ) { \n\treturn new InjectorConfiguration ( scopes , definedClasses . withModified ( value - > value . withPut ( classDefinition , new ImmutableArrayList $F50 ( Arrays . asList ( $F28076 ( classDefinition ) ) ) ) ) , factories , factoryClasses , sharedClasses , sharedInstances , aliases , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "public InjectorConfiguration withDefined ( Constructor constructorDefinition ) { \n\treturn new InjectorConfiguration ( scopes , definedClasses . withModified ( scopeValue - > scopeValue . withCompute ( $F65121 ( constructorDefinition ) , <missing ')'> ( key , currentValue ) - > ( currentValue == null ? new ImmutableArrayList < Constructor > $F2 : currentValue ) . withAdd ( constructorDefinition ) ) ) , factories , factoryClasses , sharedClasses , sharedInstances , aliases , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "public ImmutableList < Constructor > getConstructors ( Class classDefinition ) { \n\tif ( definedClasses . getRootValue ( ) . containsKey ( classDefinition ) ) { \n\t\treturn definedClasses . getRootValue ( ) . get ( classDefinition ) ; \n\t\t} \n\treturn new ImmutableArrayList $F50 $F2 ; \n\t} \n"}, {"code": "public ImmutableList < Constructor > getScopedConstructors ( Class scope , Class classDefinition ) throws ScopeNotFound { \n\tImmutableList < Constructor > constructors = getConstructors ( classDefinition ) ; \n\tImmutableList < Constructor > scopedConstructors = definedClasses . getScope ( scope ) . get ( classDefinition ) ; \n\tif $F268 ( scopedConstructors ) { \n\t\tconstructors = constructors . withAddAll ( scopedConstructors ) ; \n\t\t} \n\treturn constructors ; \n\t} \n"}, {"code": "public $F1372 InjectorConfiguration withFactory ( $F7906 ( classDefinition ) , $F618439 factory ) { \n\tif ( classDefinition . equals ( Injector . class ) ) { \n\t\tthrow new DependencyInjectionFailedException $F6 ; \n\t\t} \n\treturn new InjectorConfiguration ( scopes , definedClasses , factories . withModified ( ( value ) - > value . with ( classDefinition , factory ) ) , factoryClasses , sharedClasses , sharedInstances , aliases , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "$F623 public $F1372 $F618439 getScopedFactory ( Class scope , $F7906 ( classDefinition ) ) { \n\treturn factories . getScope ( scope ) . get ( classDefinition ) ; \n\t} \n"}, {"code": "$F623 public $F1372 $F618439 getFactory $F7907 ( classDefinition ) { \n\treturn factories . getRootValue ( ) . get ( classDefinition ) ; \n\t} \n"}, {"code": "$F623 public $F1372 Class < $F618439 > getScopedFactoryClass ( Class scope , $F7906 ( classDefinition ) ) { \n\treturn ( Class ) factoryClasses . getScope ( scope ) . get ( classDefinition ) ; \n\t} \n"}, {"code": "$F623 public $F1372 Class < $F618439 > getFactoryClass $F7907 ( classDefinition ) { \n\treturn ( Class ) factoryClasses . getRootValue ( ) . get ( classDefinition ) ; \n\t} \n"}, {"code": "public InjectorConfiguration withScopeShared ( Class scope , Class classDefinition ) { \n\treturn new InjectorConfiguration ( scopes , definedClasses , factories , factoryClasses , sharedClasses . withModified ( scope , ( value ) - > value . withAdd ( classDefinition ) ) , sharedInstances , aliases , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "public $F1372 InjectorConfiguration withShared ( T instance ) { \n\treturn new InjectorConfiguration ( scopes , definedClasses , factories , factoryClasses , sharedClasses , sharedInstances . withPut ( $F298 ( instance ) , instance ) , aliases , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "public < TAbstract , TImplementation extends TAbstract > InjectorConfiguration withScopedAlias ( Class scope , Class < TAbstract > abstractDefinition , Class < TImplementation > implementationDefinition ) { \n\tif ( abstractDefinition . equals ( Injector . class ) ) { \n\t\tthrow new DependencyInjectionFailedException $F6 ; \n\t\t} \n\treturn new InjectorConfiguration ( scopes , definedClasses , factories , factoryClasses , sharedClasses , sharedInstances , aliases . withModified ( scope , ( value ) - > value . with ( abstractDefinition , implementationDefinition ) ) , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "public < ABS , IMPL extends ABS > InjectorConfiguration withAlias ( Class scope , Executable forExecutable , Class < ABS > abstractDefinition , Class < IMPL > implementationDefinition ) { \n\treturn new InjectorConfiguration ( scopes , definedClasses , factories , factoryClasses , sharedClasses , sharedInstances , aliases . withModified ( scope , ( value ) - > value . with ( forExecutable , abstractDefinition , implementationDefinition ) ) , collectedAliases , namedParameterValues ) ; \n\t} \n"}, {"code": "$F623 public < T , K extends T > $F53008 getScopedAlias ( Class scope , $F7906 ( abstractClass ) ) { \n\treturn aliases . getScope ( scope ) . get ( abstractClass ) ; \n\t} \n"}, {"code": "$F623 public < T , K extends T > $F53008 getAlias $F7907 ( abstractClass ) { \n\treturn aliases . getRootValue ( ) . get ( abstractClass ) ; \n\t} \n"}, {"code": "public < ABS , IMPL extends ABS > InjectorConfiguration withScopedCollectedAlias ( Class scope , Class < ABS > abstractDefinition , Class < IMPL > implementationDefinition ) { \n\tImmutableScope < Class , ImmutableMap < Class , ImmutableList $F627715 > > newCollectedAliases = collectedAliases . withModified ( scope , $F3355 ( value ) <missing ';'> { \n\t\tvalue = value . withPutIfAbsent ( abstractDefinition , new ImmutableArrayList $F50 $F2 ) ; \n\t\treturn value . withPut ( abstractDefinition , $F198 ( value , abstractDefinition ) . withAdd ( implementationDefinition ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void downloadFile $F327473 ( hostname , username , password , remoteSource , localDestination ) throws Exception { \n\tFTPClient ftp = new FTPClient $F2 ; \n\t$F175739 ( ftp , hostname ) ftp . login ( username , password ) ; \n\tftp . setFileType ( FTP . BINARY_FILE_TYPE ) ; \n\tftp . enterLocalPassiveMode ( ) ; \n\t$F80655 ( fos , localDestination ) ftp . retrieveFile ( remoteSource , fos ) ; \n\t$F722226 ( ftp ) $F176338 ( ftp ) } \n"}, {"code": "public static String getSourceFolder ( Resource resource , CopyResourcesMojo copyResourcesMojo , File workspacePlugin ) throws ResourceExecutionException { \n\tString hostname = $F31116 ( resource ) . getHost ( ) ; \n\tString $F54105 ( username , resource ) ; \n\tString $F22535 ( password , resource ) ; \n\tString remoteSource = $F31116 ( resource ) . getPath ( ) ; \n\tStringBuilder retval = new StringBuilder $F93516 ( workspacePlugin ) ; \n\tPathUtils . addEndingSlashIfNeeded ( retval ) ; \n\tretval . append ( $F2074 ( Calendar ) . getTimeInMillis ( ) ) ; \n\tPathUtils . addEndingSlashIfNeeded ( retval ) ; \n\ttry { \n\t\tFileUtils . createIntermediateFolders ( $F797 ( retval ) ) ; \n\t\t$F476080 ( copyResourcesMojo ) . debug ( $F39054 ( retval ) ) ; \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tthrow new ResourceExecutionException $F5148 ( resource , e ) ; \n\t\t} \n\tString localDestination = $F797 ( retval ) . concat ( remoteSource ) ; \n\ttry $F277 ( downloadFile , hostname , username , password , remoteSource , localDestination ) catch ( Exception e ) { \n\t\tthrow new ResourceExecutionException $F4243 ( localDestination , resource , e ) ; \n\t\t} \n\t$F11706 ( String , retval ) } \n"}, {"code": "public MimeMessage getMessage ( Session session ) { \n\t$F975 ( Assert , emails ) $F4357 recipients = emails . get ( Message . RecipientType . TO ) ; \n\tAssert . isTrue ( $F98945 ( recipients ) , STRING00 ) ; \n\t$F2233 ( found ) for ( $F88222 ( email , recipients ) ) { \n\t\tif $F17162 ( excluded , email ) $F86851 ( found ) } \n\tAssert . isTrue ( found , STRING00 ) ; \n\tif ( StringUtils . isNullOrEmptyTrimmed ( fromName ) ) $F1619 ( fromName , fromEmail ) Assert . notNullOrEmptyTrimmed ( fromEmail , STRING00 ) ; \n\tAssert . notNullOrEmptyTrimmed ( subject , STRING00 ) ; \n\tAssert . isTrue ( ! StringUtils . isNullOrEmptyTrimmed ( content ) || ! StringUtils . isNullOrEmptyTrimmed ( htmlContent ) , STRING00 ) ; \n\t$F35682 ( subject ) content = content != null ? $F5445 ( content ) : null ; \n\thtmlContent = htmlContent != null ? $F5445 ( htmlContent ) : null ; \n\t$F105723 ( log , fromEmail , fromName ) MimeMessage msg = new MimeMessage ( session ) ; \n\ttry { \n\t\tmsg . setFrom ( new InternetAddress $F2144 ( fromEmail , fromName , UTF_8 ) ) ; \n\t\taddRecipients ( Message . RecipientType . TO , msg ) ; \n\t\taddRecipients ( Message . RecipientType . CC , msg ) ; \n\t\taddRecipients ( Message . RecipientType . BCC , msg ) ; \n\t\tmsg . setSubject ( MimeUtility . encodeText ( subject , UTF_8 , STRING00 ) ) ; \n\t\tif $F98946 ( headers ) { \n\t\t\tfor ( $F88222 ( name , headers ) ) { \n\t\t\t\tmsg . addHeader ( $F8220 ( name , headers ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\ttry { \n\t\t\tif ( $F98509 ( attachments ) && ( $F16029 ( htmlContent , content ) || $F54606 ( htmlContent , content ) ) ) { \n\t\t\t\tif ( StringUtils . isNullOrEmptyTrimmed ( content ) ) { \n\t\t\t\t\t$F604924 ( msg ) msg . setContent ( htmlContent , STRING00 + UTF_8 ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tmsg . setContent ( content , STRING00 + UTF_8 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tMultipart multipart = new MimeMultipart $F2 ; \n\t\t\t\tif ( ! StringUtils . isNullOrEmptyTrimmed ( content ) ) { \n\t\t\t\t\tMimeBodyPart $F408274 ( contentPart ) ; \n\t\t\t\t\tcontentPart . setContent ( content , STRING00 + UTF_8 ) ; \n\t\t\t\t\t$F408283 ( multipart , contentPart ) } \n\t\t\t\tif ( ! StringUtils . isNullOrEmptyTrimmed ( htmlContent ) ) { \n\t\t\t\t\tMimeBodyPart $F408274 ( htmlPart ) ; \n\t\t\t\t\thtmlPart . setContent ( htmlContent , STRING00 + UTF_8 ) ; \n\t\t\t\t\t$F408283 ( multipart , htmlPart ) } \n\t\t\t\tif $F98946 ( attachments ) { \n\t\t\t\t\tfor ( MailAttachment attachment : attachments ) { \n\t\t\t\t\t\tMimeBodyPart $F408274 ( part ) ; \n\t\t\t\t\t\tif ( attachment . fileName != null ) { \n\t\t\t\t\t\t\tpart . setFileName ( attachment . fileName ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tDataSource src = new ByteArrayDataSource ( attachment . content , attachment . type ) ; \n\t\t\t\t\t\tpart . setDataHandler ( new DataHandler ( src ) ) ; \n\t\t\t\t\t\t$F408283 ( multipart , part ) } \n\t\t\t\t\t} \n\t\t\t\t$F128853 ( msg , multipart ) } \n\t\t\tmsg . saveChanges ( ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\t$F5572 ( log , e ) throw new IllegalArgumentException $F18430 ( e ) ; \n\t\t\t} \n\t\t} \n\tcatch ( MessagingException | UnsupportedEncodingException e ) { \n\t\t$F5572 ( log , e ) throw new IllegalArgumentException $F18430 ( e ) ; \n\t\t} \n\treturn msg ; \n\t} \n"}, {"code": "public MailMessage defaultFrom $F1195 ( email , name ) { \n\tif ( StringUtils . isNullOrEmptyTrimmed ( fromEmail ) ) $F565 ( from , email , name ) if ( ! StringUtils . isNullOrEmptyTrimmed ( email ) && StringUtils . equals ( fromEmail , $F5445 ( email ) , true ) && StringUtils . isNullOrEmptyTrimmed ( fromName ) ) $F565 ( from , email , name ) return this ; \n\t} \n"}, {"code": "private $F4357 getEmails $F7169 ( emails ) { \n\tif $F98509 ( emails ) $F2200 $F5688 ( out ) for ( $F88222 ( email , emails ) ) { \n\t\t$F184044 ( excluded , email ) $F382000 ( out , email , emails ) } \n\treturn out ; \n\t} \n"}, {"code": "$F5446012 public static int fromBytes ( byte b1 , byte b2 , byte b3 , byte b4 ) { \n\treturn b1 < < INT00 | $F74482 ( b2 ) | $F74482 ( b3 ) | $F18692 ( b4 ) ; \n\t} \n"}, {"code": "$F1 public LocalDateTime [ ] getValueAsLocalDateTimeArray $F2 throws ParseException { \n\tfinal LocalDateTime [ ] result = new LocalDateTime $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "public void configure ( ConfigParams config ) { \n\t_interval = config . getAsLongWithDefault ( STRING00 , _defaultInterval ) ; \n\t_resetTimeout = config . getAsLongWithDefault ( STRING00 , _resetTimeout ) ; \n\t} \n"}, {"code": "public void dump $F2 throws InvocationException { \n\tif ( _updated ) { \n\t\tList < Counter > $F546090 ( counters , this ) ; \n\t\tsave ( counters ) ; \n\t\tsynchronized ( _lock ) { \n\t\t\t_updated = false ; \n\t\t\t$F100464 ( _lastDumpTime , System ) } \n\t\t} \n\t} \n"}, {"code": "protected void update $F2 { \n\t_updated = true ; \n\tif ( $F13205 ( System ) > _lastDumpTime + _interval ) { \n\t\ttry $F4537 ( dump ) catch ( InvocationException ex ) $F1645 } \n\t} \n"}, {"code": "public Counter get $F11348 ( name , type ) { \n\tif $F90672 ( name ) $F38493 synchronized ( _lock ) { \n\t\tresetIfNeeded ( ) ; \n\t\tCounter $F199 ( counter , _cache , name ) ; \n\t\tif ( counter == null || $F511 ( counter ) != type ) { \n\t\t\tcounter = new Counter ( name , type ) ; \n\t\t\t$F2725 ( _cache , name , counter ) } \n\t\treturn counter ; \n\t\t} \n\t} \n"}, {"code": "public void endTiming $F259552 ( name , elapsed ) { \n\tCounter counter = get ( name , CounterType . Interval ) ; \n\t$F564 ( calculateStats , counter , elapsed ) update ( ) ; \n\t} \n"}, {"code": "public void stats $F259552 ( name , value ) { \n\tCounter counter = get ( name , CounterType . Statistics ) ; \n\t$F564 ( calculateStats , counter , value ) update ( ) ; \n\t} \n"}, {"code": "public void last $F259552 ( name , value ) { \n\tCounter counter = get ( name , CounterType . LastValue ) ; \n\tcounter . setLast ( value ) ; \n\tupdate ( ) ; \n\t} \n"}, {"code": "public void timestamp ( String name , ZonedDateTime value ) { \n\tCounter counter = get ( name , CounterType . Timestamp ) ; \n\tcounter . setTime ( value != null ? value : ZonedDateTime . now ( $F281450 ( ZoneId ) ) ) ; \n\tupdate ( ) ; \n\t} \n"}, {"code": "public void increment $F11348 ( name , value ) { \n\tCounter counter = get ( name , CounterType . Increment ) ; \n\tcounter . setCount ( $F61277 ( counter ) != null ? $F61277 ( counter ) + value : value ) ; \n\tupdate ( ) ; \n\t} \n"}, {"code": "public static < L extends Lexer > LexerOption lexer ( final Class $F71542 lexerClass , final LexerSetup $F71542 setup ) { \n\treturn new LexerOption ( lexerClass , setup ) ; \n\t} \n"}, {"code": "public static < P extends Parser > ParserOption parser ( final $F303878 parserClass , final ParserSetup $F213672 setup ) { \n\treturn new ParserOption ( parserClass , setup ) ; \n\t} \n"}, {"code": "public static < T extends TreeParser > TreeParserOption walker ( $F58638 ( treeParserClass ) , final TreeParserSetup $F1372 setup ) { \n\treturn new TreeParserOption ( treeParserClass , setup ) ; \n\t} \n"}, {"code": "public void register ( ReloadableFile reloadableFile , FileSubscriber fileSubscriber , Identification identification ) throws IllegalIDException { \n\tIdentificationSet < FileSubscriber > $F199 ( subscribers , fileSubscribers , reloadableFile ) ; \n\tif $F112 ( subscribers ) { \n\t\tsubscribers = new IdentificationSet $F50 $F590 ; \n\t\t$F2725 ( fileSubscribers , reloadableFile , subscribers ) } \n\t$F373 ( subscribers , fileSubscriber , identification ) } \n"}, {"code": "public void register ( FileSubscriber fileSubscriber , Identification identification ) throws IllegalIDException $F26822 ( defaultFileSubscribers , fileSubscriber , identification ) "}, {"code": "public void unregister ( FileSubscriber fileSubscriber ) { \n\tfor ( IdentificationSet < FileSubscriber > subList : $F387 ( fileSubscribers ) ) $F6954 ( subList , fileSubscriber ) $F6953 ( defaultFileSubscribers , fileSubscriber ) } \n"}, {"code": "public synchronized void notifyFileSubscribers ( ReloadableFile reloadableFile ) { \n\tnotifyDefaultFileSubscribers ( ) ; \n\tIdentificationSet < FileSubscriber > $F199 ( subList , fileSubscribers , reloadableFile ) ; \n\t$F15530 ( subList ) for ( FileSubscriber sub : subList ) { \n\t\tCompletableFuture . runAsync ( sub : : <missing ';'> update , main . getThreadPoolManager ( ) . getAddOnsThreadPool ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized void notifyAllFileSubcribers $F2 { \n\tfor ( IdentificationSet < FileSubscriber > subList : $F387 ( fileSubscribers ) ) { \n\t\tfor ( FileSubscriber sub : subList ) { \n\t\t\tCompletableFuture . runAsync ( sub : : <missing ';'> update , main . getThreadPoolManager ( ) . getAddOnsThreadPool ( ) ) ; \n\t\t\t} \n\t\t} \n\tnotifyDefaultFileSubscribers ( ) ; \n\t} \n"}, {"code": "public synchronized void notifyDefaultFileSubscribers $F2 { \n\tfor ( FileSubscriber sub : defaultFileSubscribers ) { \n\t\tCompletableFuture . runAsync ( sub : : <missing ';'> update , main . getThreadPoolManager ( ) . getAddOnsThreadPool ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static Iterator < MutableIntTuple > iterator ( Order order , IntTuple min , IntTuple max ) { \n\t$F2201 ( order ) IntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\treturn new IntTupleIterator ( localMin , localMax , IntTupleIncrementors . incrementor ( order ) ) ; \n\t} \n"}, {"code": "public static Iterator < MutableIntTuple > lexicographicalIterator ( IntTuple min , IntTuple max ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\tIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\treturn new IntTupleIterator ( localMin , localMax , IntTupleIncrementors . lexicographicalIncrementor ( ) ) ; \n\t} \n"}, {"code": "public static Iterator < MutableIntTuple > colexicographicalIterator ( IntTuple min , IntTuple max ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\tIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\treturn new IntTupleIterator ( localMin , localMax , IntTupleIncrementors . colexicographicalIncrementor ( ) ) ; \n\t} \n"}, {"code": "static Iterator < MutableIntTuple > wrappingIterator ( IntTuple bounds , Iterator < ? extends MutableIntTuple > delegate ) { \n\treturn wrappingIteratorInternal ( $F106730 ( IntTuples , bounds ) , delegate ) ; \n\t} \n"}, {"code": "static Iterator < MutableIntTuple > wrappingIteratorInternal ( IntTuple bounds , Iterator < ? extends MutableIntTuple > delegate ) { \n\treturn new Iterator < MutableIntTuple > $F2 { \n\t\t$F58993 ( delegate ) $F1 public MutableIntTuple next $F2 { \n\t\t\treturn IntTupleUtils . wrap ( $F70256 ( delegate , bounds ) ) ; \n\t\t\t} \n\t\t$F58913 ( delegate ) } \n\t; \n\t} \n"}, {"code": "public static Iterator < MutableIntTuple > clampingIterator ( IntTuple min , IntTuple max , Iterator < ? extends MutableIntTuple > delegate ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\tIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\t$F210 ( clampingIteratorInternal , localMin , localMax , delegate ) } \n"}, {"code": "static Iterator < MutableIntTuple > clampingIteratorInternal ( IntTuple min , IntTuple max , Iterator < ? extends MutableIntTuple > delegate ) { \n\treturn new FilteringIterator < MutableIntTuple > ( delegate , t - > IntTuples . areElementsGreaterThanOrEqual ( t , min ) && IntTuples . areElementsLessThan ( t , max ) ) ; \n\t} \n"}, {"code": "public static ListeningExecutorService executor $F2 { \n\tfinal ExecutorService svc = Executors . newCachedThreadPool ( MoreExecutors . platformThreadFactory ( ) ) ; \n\treturn MoreExecutors . listeningDecorator ( svc ) ; \n\t} \n"}, {"code": "public static $F1372 $F65735 future ( final Async $F1372 async ) { \n\treturn executor ( ) . submit ( async ) ; \n\t} \n"}, {"code": "public static < T , X extends Exception > CheckedFuture $F359199 checkedFuture ( final CheckedAsync $F359199 async ) { \n\treturn Futures . makeChecked ( $F1024 ( future , async ) ) ; \n\t} \n"}, {"code": "public < T , K extends T > void alias ( $F7906 ( abstraction ) , $F53009 ( implementation ) ) { \n\tinjectorConfiguration = injectorConfiguration . withAlias ( abstraction , implementation ) ; \n\t} \n"}, {"code": "public < T , K extends T > void bind ( $F7906 ( abstraction ) , $F53009 ( implementation ) ) { \n\tinjectorConfiguration = injectorConfiguration . withAlias ( abstraction , implementation ) ; \n\t} \n"}, {"code": "public $F1372 void define ( $F7906 ( classDefinition ) , $F2731 ( namedParameterValues ) ) { \n\tinjectorConfiguration = injectorConfiguration . withDefined ( classDefinition ) ; \n\t$F1939 ( namedParameterValues , key , value ) { \n\t\tinjectorConfiguration = injectorConfiguration . withNamedParameterValue ( classDefinition , key , value ) ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public $F1372 void define ( $F7906 ( classDefinition ) , ObjectFactory $F1372 factory ) { \n\tinjectorConfiguration = injectorConfiguration . withFactory ( classDefinition , factory ) ; \n\t} \n"}, {"code": "private Type getParametrizedTypeOfJobListener $F2614 ( listenerClass ) { \n\t$F71242 interfaces = $F351189 ( listenerClass ) ; \n\t$F71242 typeParameters = null ; \n\tfor ( Type anInterface : interfaces ) { \n\t\tif ( ! $F71325 ( anInterface ) ) $F42718 Class interfaceClass = ( Class ) ( ( ParameterizedType ) anInterface ) . getRawType ( ) ; \n\t\tif ( TaskListener . class . isAssignableFrom ( interfaceClass ) ) { \n\t\t\ttypeParameters = $F66135 ( anInterface ) ; \n\t\t\t$F332 } \n\t\t} \n\tif $F44788 ( typeParameters ) { \n\t\tthrow SeedException . createNew ( SchedulerErrorCode . MISSING_TYPE_PARAMETER ) . put ( STRING00 , listenerClass ) ; \n\t\t} \n\t$F23691 ( typeParameters ) } \n"}, {"code": "public static $F26212 LinkedBlockingDeque $F26212 newLinkedBlockingDeque ( Iterable $F39164 elements ) { \n\tif $F5624 ( elements ) { \n\t\treturn new LinkedBlockingDeque $F26212 ( $F14239 ( Collections2 , elements ) ) ; \n\t\t} \n\tLinkedBlockingDeque $F26212 deque = new LinkedBlockingDeque $F26212 $F2 ; \n\t$F26089 ( Iterables , deque , elements ) return deque ; \n\t} \n"}, {"code": "public static < E extends Comparable > PriorityBlockingQueue $F26212 newPriorityBlockingQueue ( Iterable $F39164 elements ) { \n\tif $F5624 ( elements ) { \n\t\treturn new PriorityBlockingQueue $F26212 ( $F14239 ( Collections2 , elements ) ) ; \n\t\t} \n\tPriorityBlockingQueue $F26212 queue = new PriorityBlockingQueue $F26212 $F2 ; \n\t$F26089 ( Iterables , queue , elements ) return queue ; \n\t} \n"}, {"code": "$F57800 public static $F26212 int drain ( BlockingQueue $F26212 q , Collection $F59476 buffer , int numElements , long timeout , TimeUnit unit ) throws InterruptedException { \n\t$F57921 ( Preconditions , buffer ) long deadline = $F15034 ( System ) + $F60078 ( unit , timeout ) ; \n\t$F1987 ( added ) while ( added < numElements ) { \n\t\tadded += q . drainTo ( buffer , numElements - added ) ; \n\t\tif ( added < numElements ) { \n\t\t\tE e = q . poll ( deadline - $F15034 ( System ) , TimeUnit . NANOSECONDS ) ; \n\t\t\t$F334 ( e ) $F528 ( buffer , e ) added ++ ; \n\t\t\t} \n\t\t} \n\treturn added ; \n\t} \n"}, {"code": "public HttpClient setURI $F62952 ( uri ) throws HibiscusException { \n\ttry { \n\t\tsetURI ( $F12572 ( uri ) ) ; \n\t\t} \n\tcatch ( URISyntaxException e ) { \n\t\tthrow new HibiscusException ( e ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public HttpClient setURI $F334154 ( uri ) { \n\tfinal URIBuilder builder = new URIBuilder ( uri ) ; \n\tthis . scheme = $F125783 ( builder ) ; \n\tthis . host = $F7130 ( builder ) ; \n\tthis . port = $F7133 ( builder ) ; \n\tthis . path = $F2515 ( builder ) ; \n\tthis . fragment = $F94597 ( builder ) ; \n\tthis . resetQueryParameters ( ) ; \n\tfor ( NameValuePair nvp : $F713905 ( builder ) ) { \n\t\tthis . queryParameters . add ( new BasicNameValuePair ( $F447537 ( nvp ) ) ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public final HttpClient addNameValuePair $F96892 ( param , value ) { \n\tnameValuePairs . add ( new BasicNameValuePair ( param , value ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public final HttpClient addNameValuePair ( final String param , final Integer value ) { \n\treturn $F101693 ( addNameValuePair , param , value ) ; \n\t} \n"}, {"code": "public final HttpClient addNameValuePair ( final String param , final Double value ) { \n\treturn $F101693 ( addNameValuePair , param , value ) ; \n\t} \n"}, {"code": "public HttpClient execute $F2 throws HibiscusException { \n\tHttpWorkerAbstract httpWorker = HttpWorkerAbstract . getWorkerStrategy ( requestMethod , this ) ; \n\t$F77072 ( httpWorker ) $F15038 ( lastResponse , httpWorker ) ; \n\tlastResponse . setElapsedTime ( httpWorker . getResponseTime ( ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClient setRequestMethod $F62952 ( rMethod ) throws HibiscusException { \n\tif ( null == rMethod || false == $F6948 ( validHttpRequestMethods , rMethod ) ) { \n\t\tthrow new HibiscusException $F13407 ( rMethod ) ; \n\t\t} \n\trequestMethod = rMethod ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 protected void onPrepareDialogBuilder ( Builder builder ) { \n\tif ( ! ( ( $F233607 ( getEntries ) == $F233607 ( getEntryValues ) ) && ( $F233607 ( getEntries ) == colors . length ) ) ) $F67128 int index = findIndexOfValue ( $F581231 ( getSharedPreferences ) ( $F10032 ( getKey ) ) ) ; \n\tListAdapter listAdapter = new ColorArrayAdapter ( getContext ( ) , R . layout . listitem_row , getEntries ( ) , resourceIds , index ) ; \n\tbuilder . setAdapter ( listAdapter , this ) ; \n\tsuper . onPrepareDialogBuilder ( builder ) ; \n\t} \n"}, {"code": "$F1 protected void doInitialize $F2 throws IOException { \n\tString path = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . getPath ( ) ; \n\t$F6990 ( index , path ) if $F3752 ( index ) { \n\t\tbasePath = $F346197 ( path , index ) ; \n\t\tsettingsPath = $F346197 ( path , index ) ; \n\t\tlibrariesPath = $F346197 ( path , index ) ; \n\t\trepositoryPath = $F346197 ( path , index ) ; \n\t\t} \n\telse { \n\t\t$F205532 ( path , System ) $F125780 ( basePath , path ) $F125780 ( settingsPath , path ) $F125780 ( librariesPath , path ) $F125780 ( repositoryPath , path ) } \n\t$F10937 ( initialized , readAppTemplates , templateRepository ) } \n"}, {"code": "$F1 public boolean contains $F1245 ( key , groupId , templateId , version ) { \n\treturn templateRepository . contains ( key , groupId , templateId , version ) ; \n\t} \n"}, {"code": "public Settings load ( String file , CommandBuilder builder ) throws CommandLineException { \n\tScanner scanner = null ; \n\ttry { \n\t\t$F2595 ( config , file ) Assert . isTrue ( $F2475 ( config ) , $F320 ( file ) ) ; \n\t\tAssert . isFalse ( $F2602 ( config ) , $F320 ( file ) ) ; \n\t\tAssert . isTrue ( $F6713 ( config ) , $F320 ( file ) ) ; \n\t\tscanner = $F460952 ( config ) ; \n\t\t$F340694 ( list ) while $F984917 ( scanner ) { \n\t\t\tlist . add ( $F88625 ( scanner ) ) ; \n\t\t\t} \n\t\t$F4282 ( parse , list , builder ) } \n\tcatch ( FileNotFoundException e ) { \n\t\t$F433908 ( log , e ) throw new CommandLineException $F500 ( file ) ; \n\t\t} \n\t$F116932 ( scanner ) } \n"}, {"code": "private Settings parse ( $F252701 ( list ) , CommandBuilder builder ) throws CommandLineException { \n\tSettings settings = new Settings $F2 ; \n\tif $F98946 ( list ) { \n\t\tfor ( String line : list ) { \n\t\t\t$F4875946 ( line , StringUtils ) if ( line != null && ! isComment ( line ) ) { \n\t\t\t\t$F30789 ( items , line ) if $F4389 ( items ) { \n\t\t\t\t\t$F26395 ( name , items ) $F26395 ( value , items ) Pair $F95 $F2207 ( found , parseAndAdd , builder , name , value ) ; \n\t\t\t\t\tif $F268 ( found ) $F97606 ( settings , found ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn settings ; \n\t} \n"}, {"code": "static public $F1372 $F13804 getClass ( T obj ) { \n\treturn ( $F13804 ) $F298 ( obj ) ; \n\t} \n"}, {"code": "static public $F28644 $F53004 map $F19381 ( map ) { \n\treturn ( $F53004 ) map ; \n\t} \n"}, {"code": "public static void addEndingSlashIfNeeded ( StringBuilder src ) { \n\tif ( src == null || StringUtils . isEmptyOrNull ( $F6258 ( String , src ) ) ) $F255 if ( src != null && $F14825 ( src ) != File . separator . charAt ( INT00 ) ) { \n\t\tsrc . append ( File . separator ) ; \n\t\t} \n\t$F254 } \n"}, {"code": "public static File getWorkspace ( CopyResourcesMojo copyResourcesMojo ) { \n\t$F476080 ( copyResourcesMojo ) . debug ( STRING00 ) ; \n\tStringBuilder retval = new StringBuilder ( $F586286 ( copyResourcesMojo ) . getBuild ( ) . getDirectory ( ) ) ; \n\taddEndingSlashIfNeeded ( retval ) ; \n\tretval . append ( Constants . WORKSPACE_TARGET_DIR ) ; \n\t$F476080 ( copyResourcesMojo ) . debug ( $F320 ( retval ) ) ; \n\treturn new File $F5478 ( retval ) ; \n\t} \n"}, {"code": "public static String getAbsoluteProjectPath ( Project project , String rootLocation ) { \n\t$F9439 ( retval , rootLocation ) PathUtils . addEndingSlashIfNeeded ( retval ) ; \n\tretval . append ( GitHelper . extractRepositoryNameFromUrl ( String . valueOf ( $F31116 ( project ) ) ) ) ; \n\tPathUtils . addEndingSlashIfNeeded ( retval ) ; \n\t$F1226 ( retval ) } \n"}, {"code": "protected void wrappedWrite ( int b ) throws IOException { \n\tcheckState ( ) ; \n\ttry $F125961 ( out , b ) catch ( IOException e ) $F87140 ( error , e ) } \n"}, {"code": "protected void uncheckedWriteBits $F12004 ( numAddBits , addBits ) throws IOException { \n\tint chunks ; \n\tif ( numAddBits < numBitsLeft ) { \n\t\taddBits &= ( INT00 > > > $F70882 ( numAddBits ) ) ; \n\t\taddBits <<= numBitsLeft - numAddBits ; \n\t\tcurrentBits |= addBits ; \n\t\tnumBitsLeft -= numAddBits ; \n\t\t$F254 } \n\taddBits <<= Integer . SIZE - numAddBits ; \n\tcurrentBits |= addBits > > > ( Integer . SIZE - numBitsLeft ) ; \n\tnumAddBits -= numBitsLeft ; \n\taddBits <<= numBitsLeft ; \n\twriteCurrent ( ) ; \n\t$F3535542 ( chunks , numAddBits ) for ( $F6610 ( i , chunks ) ) { \n\t\tint tmpBits = addBits > > > ( Integer . SIZE - Byte . SIZE ) ; \n\t\twrappedWrite ( tmpBits ) ; \n\t\taddBits <<= Byte . SIZE ; \n\t\t} \n\tif ( ( numAddBits &= INT00 ) == INT00 ) $F254 currentBits = addBits > > > ( Integer . SIZE - Byte . SIZE ) ; \n\tnumBitsLeft = Byte . SIZE - numAddBits ; \n\t} \n"}, {"code": "$F1 public void writeBits $F12004 ( num , bits ) throws IOException { \n\tif ( num > Integer . SIZE ) throw new IllegalArgumentException ( $F320 ( num ) + Integer . SIZE + STRING00 ) ; \n\tif $F9104 ( num ) $F9653 ( num ) checkState ( ) ; \n\t$F564 ( uncheckedWriteBits , num , bits ) } \n"}, {"code": "$F1 public void flush $F2 throws IOException { \n\tcheckState ( ) ; \n\t$F6863 ( uncheckedWriteTillByte ) try $F82687 ( out ) catch ( IOException e ) $F87140 ( error , e ) } \n"}, {"code": "$F1 public void close $F2 throws IOException { \n\t$F190203 ( closed ) checkState ( ) ; \n\t$F6863 ( uncheckedWriteTillByte ) closed = true ; \n\ttry $F2453 ( out ) catch ( IOException e ) $F87140 ( error , e ) $F67414 ( out ) } \n"}, {"code": "public static $F216173 T deserializeFromStream ( InputStream in , $F7906 ( type ) ) throws $F41231 { \n\tObjectInputStream objIn ; \n\tT obj ; \n\tif ( in instanceof ObjectInputStream ) objIn = ( ObjectInputStream ) in ; \n\telse $F98137 ( objIn , in ) ; \n\tobj = type . cast ( $F32241 ( objIn ) ) ; \n\t$F1109 ( objIn ) return obj ; \n\t} \n"}, {"code": "public static $F216173 void serializeToStream ( T obj , OutputStream out ) throws IOException { \n\tObjectOutputStream objOut ; \n\tif ( out instanceof ObjectOutputStream ) objOut = ( ObjectOutputStream ) out ; \n\telse $F238571 ( objOut , out ) $F40824 ( objOut , obj ) $F1109 ( objOut ) } \n"}, {"code": "public static $F216173 File serializeToTempFile ( T obj ) throws IOException { \n\tFile file = File . createTempFile ( Serializer . class . getName ( ) . replace ( $F1286 ) , null ) ; \n\t$F21243 ( file ) $F564 ( serializeToFile , obj , file ) return file ; \n\t} \n"}, {"code": "public $F1372 String write ( final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) { \n\ttry { \n\t\treturn $F120433 ( jsonFormat , object , descriptor , indent ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 void write ( final OutputStream stream , final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) { \n\ttry { \n\t\tjsonFormat . write ( stream , object , descriptor , indent ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 void write ( final PrintWriter writer , final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) { \n\ttry { \n\t\tjsonFormat . write ( writer , object , descriptor , indent ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 T read ( final String s , final DataTypeDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn $F12225 ( jsonFormat , s , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 T read ( final InputStream stream , final DataTypeDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn $F12225 ( jsonFormat , stream , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 T read ( final Reader reader , final DataTypeDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn $F12225 ( jsonFormat , reader , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "$F762 public < T extends Message > $F96 writeMessage ( final T message , final MessageDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn ( $F96 ) $F123853 ( objectFormat , message , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 Object writeObject ( final T object , final DataTypeDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn $F123853 ( objectFormat , object , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "public $F1372 T readObject ( final Object object , final DataTypeDescriptor $F1372 descriptor ) { \n\ttry { \n\t\treturn $F12225 ( objectFormat , object , descriptor ) ; \n\t\t} \n\t$F494864 ( propagate , e ) } \n"}, {"code": "private void initialiseProviders $F2 { \n\tfinal RESTTopicProvider topicProvider = new RESTTopicProvider ( this ) ; \n\tproviderMap . put ( RESTTopicProvider . class , topicProvider ) ; \n\tproviderMap . put ( TopicProvider . class , topicProvider ) ; \n\tfinal RESTTagProvider tagProvider = new RESTTagProvider ( this ) ; \n\tproviderMap . put ( RESTTagProvider . class , tagProvider ) ; \n\tproviderMap . put ( TagProvider . class , tagProvider ) ; \n\tfinal RESTTagInCategoryProvider tagInCategoryProvider = new RESTTagInCategoryProvider ( this ) ; \n\tproviderMap . put ( RESTTagInCategoryProvider . class , tagInCategoryProvider ) ; \n\tfinal RESTTranslatedTopicProvider translatedTopicProvider = new RESTTranslatedTopicProvider ( this ) ; \n\tproviderMap . put ( RESTTranslatedTopicProvider . class , translatedTopicProvider ) ; \n\tproviderMap . put ( TranslatedTopicProvider . class , translatedTopicProvider ) ; \n\tfinal RESTTranslatedTopicStringProvider translatedTopicStringProvider = new RESTTranslatedTopicStringProvider ( this ) ; \n\tproviderMap . put ( RESTTranslatedTopicStringProvider . class , translatedTopicStringProvider ) ; \n\tproviderMap . put ( TranslatedTopicStringProvider . class , translatedTopicStringProvider ) ; \n\tfinal RESTUserProvider userProvider = new RESTUserProvider ( this ) ; \n\tproviderMap . put ( RESTUserProvider . class , userProvider ) ; \n\tproviderMap . put ( UserProvider . class , userProvider ) ; \n\tfinal RESTStringConstantProvider stringConstantProvider = new RESTStringConstantProvider ( this ) ; \n\tproviderMap . put ( RESTStringConstantProvider . class , stringConstantProvider ) ; \n\tproviderMap . put ( StringConstantProvider . class , stringConstantProvider ) ; \n\tfinal RESTBlobConstantProvider blobConstantProvider = new RESTBlobConstantProvider ( this ) ; \n\tproviderMap . put ( RESTBlobConstantProvider . class , blobConstantProvider ) ; \n\tproviderMap . put ( BlobConstantProvider . class , blobConstantProvider ) ; \n\tfinal RESTFileProvider fileProvider = new RESTFileProvider ( this ) ; \n\tproviderMap . put ( RESTFileProvider . class , fileProvider ) ; \n\tproviderMap . put ( FileProvider . class , fileProvider ) ; \n\tfinal RESTLanguageFileProvider languageFileProvider = new RESTLanguageFileProvider ( this ) ; \n\tproviderMap . put ( RESTLanguageFileProvider . class , languageFileProvider ) ; \n\tproviderMap . put ( LanguageFileProvider . class , languageFileProvider ) ; \n\tfinal RESTImageProvider imageProvider = new RESTImageProvider ( this ) ; \n\tproviderMap . put ( RESTImageProvider . class , imageProvider ) ; \n\tproviderMap . put ( ImageProvider . class , imageProvider ) ; \n\tfinal RESTLanguageImageProvider languageImageProvider = new RESTLanguageImageProvider ( this ) ; \n\tproviderMap . put ( RESTLanguageImageProvider . class , languageImageProvider ) ; \n\tproviderMap . put ( LanguageImageProvider . class , languageImageProvider ) ; \n\tfinal RESTCategoryProvider categoryProvider = new RESTCategoryProvider ( this ) ; \n\tproviderMap . put ( RESTCategoryProvider . class , categoryProvider ) ; \n\tproviderMap . put ( CategoryProvider . class , categoryProvider ) ; \n\tfinal RESTCategoryInTagProvider categoryInTagProvider = new RESTCategoryInTagProvider ( this ) ; \n\tproviderMap . put ( RESTCategoryInTagProvider . class , categoryInTagProvider ) ; \n\tfinal RESTTopicSourceURLProvider topicSourceURLProvider = new RESTTopicSourceURLProvider ( this ) ; \n\tproviderMap . put ( RESTTopicSourceURLProvider . class , topicSourceURLProvider ) ; \n\tproviderMap . put ( TopicSourceURLProvider . class , topicSourceURLProvider ) ; \n\tfinal RESTPropertyTagProvider propertyTagProvider = new RESTPropertyTagProvider ( this ) ; \n\tproviderMap . put ( RESTPropertyTagProvider . class , propertyTagProvider ) ; \n\tproviderMap . put ( PropertyTagProvider . class , propertyTagProvider ) ; \n\tfinal RESTPropertyTagInTopicProvider propertyTagInTopicProvider = new RESTPropertyTagInTopicProvider ( this ) ; \n\tproviderMap . put ( RESTPropertyTagInTopicProvider . class , propertyTagInTopicProvider ) ; \n\tfinal RESTPropertyTagInTagProvider propertyTagInTagProvider = new RESTPropertyTagInTagProvider ( this ) ; \n\tproviderMap . put ( RESTPropertyTagInTagProvider . class , propertyTagInTagProvider ) ; \n\tfinal RESTPropertyTagInContentSpecProvider propertyTagInContentSpecProvider = new RESTPropertyTagInContentSpecProvider ( this ) ; \n\tproviderMap . put ( RESTPropertyTagInContentSpecProvider . class , propertyTagInContentSpecProvider ) ; \n\tfinal RESTPropertyTagInPropertyCategoryProvider propertyTagInPropertyCategoryProvider = new RESTPropertyTagInPropertyCategoryProvider ( this ) ; \n\tproviderMap . put ( RESTPropertyTagInPropertyCategoryProvider . class , propertyTagInPropertyCategoryProvider ) ; \n\tfinal RESTContentSpecProvider contentSpecProvider = new RESTContentSpecProvider ( this ) ; \n\tproviderMap . put ( RESTContentSpecProvider . class , contentSpecProvider ) ; \n\tproviderMap . put ( ContentSpecProvider . class , contentSpecProvider ) ; \n\tfinal RESTTextContentSpecProvider textContentSpecProvider = new RESTTextContentSpecProvider ( this ) ; \n\tproviderMap . put ( RESTTextContentSpecProvider . class , textContentSpecProvider ) ; \n\tproviderMap . put ( TextContentSpecProvider . class , textContentSpecProvider ) ; \n\tfinal RESTCSNodeProvider csNodeProvider = new RESTCSNodeProvider ( this ) ; \n\tproviderMap . put ( RESTCSNodeProvider . class , csNodeProvider ) ; \n\tproviderMap . put ( CSNodeProvider . class , csNodeProvider ) ; \n\tfinal RESTCSRelatedNodeProvider csRelatedNodeProvider = new RESTCSRelatedNodeProvider ( this ) ; \n\tproviderMap . put ( RESTCSRelatedNodeProvider . class , csRelatedNodeProvider ) ; \n\tfinal RESTCSInfoNodeProvider csNodeInfoProvider = new RESTCSInfoNodeProvider ( this ) ; \n\tproviderMap . put ( RESTCSInfoNodeProvider . class , csNodeInfoProvider ) ; \n\tproviderMap . put ( CSInfoNodeProvider . class , csNodeInfoProvider ) ; \n\tfinal RESTTranslatedContentSpecProvider translatedContentSpecProvider = new RESTTranslatedContentSpecProvider ( this ) ; \n\tproviderMap . put ( RESTTranslatedContentSpecProvider . class , translatedContentSpecProvider ) ; \n\tproviderMap . put ( TranslatedContentSpecProvider . class , translatedContentSpecProvider ) ; \n\tfinal RESTTranslatedCSNodeProvider translatedCSNodeProvider = new RESTTranslatedCSNodeProvider ( this ) ; \n\tproviderMap . put ( RESTTranslatedCSNodeProvider . class , translatedCSNodeProvider ) ; \n\tproviderMap . put ( TranslatedCSNodeProvider . class , translatedCSNodeProvider ) ; \n\tfinal RESTTranslatedCSNodeStringProvider translatedCSNodeStringProvider = new RESTTranslatedCSNodeStringProvider ( this ) ; \n\tproviderMap . put ( RESTTranslatedCSNodeStringProvider . class , translatedCSNodeStringProvider ) ; \n\tproviderMap . put ( TranslatedCSNodeStringProvider . class , translatedCSNodeStringProvider ) ; \n\tfinal RESTLogMessageProvider logMessageProvider = new RESTLogMessageProvider ( this ) ; \n\tproviderMap . put ( RESTLogMessageProvider . class , logMessageProvider ) ; \n\tproviderMap . put ( LogMessageProvider . class , logMessageProvider ) ; \n\tfinal RESTServerSettingsProvider serverSettingsProvider = new RESTServerSettingsProvider ( this ) ; \n\tproviderMap . put ( RESTServerSettingsProvider . class , serverSettingsProvider ) ; \n\tproviderMap . put ( ServerSettingsProvider . class , serverSettingsProvider ) ; \n\tfinal RESTLocaleProvider localeProvider = new RESTLocaleProvider ( this ) ; \n\tproviderMap . put ( RESTLocaleProvider . class , localeProvider ) ; \n\tproviderMap . put ( LocaleProvider . class , localeProvider ) ; \n\tfinal RESTTranslationServerProvider translationServerProvider = new RESTTranslationServerProvider ( this ) ; \n\tproviderMap . put ( RESTTranslationServerProvider . class , translationServerProvider ) ; \n\t} \n"}, {"code": "public < T extends RESTDataProvider > void registerProvider ( $F7906 ( providerClass ) , $F2613 ( providerInterface ) ) { \n\ttry { \n\t\tfinal $F48912 constructor = providerClass . getConstructor ( RESTProviderFactory . class ) ; \n\t\tfinal T $F29331 ( instance , constructor , this ) ; \n\t\t$F2725 ( providerMap , providerClass , instance ) $F303779 ( providerInterface , providerMap , instance ) } \n\tcatch ( NoSuchMethodException e ) $F11568 ( e ) catch ( InvocationTargetException e ) $F11568 ( e ) $F552905 ( e ) $F61685 ( e ) } \n"}, {"code": "public static SystemMail createSystemMail $F2 throws IllegalAccessException { \n\tif ( ! exists ) { \n\t\tSystemMail permissionManager = new SystemMail $F2 ; \n\t\texists = true ; \n\t\treturn permissionManager ; \n\t\t} \n\tthrow new IllegalAccessException $F6 ; \n\t} \n"}, {"code": "public void sendMail $F327473 ( toAddress , subject , content , attachmentName , attachmentPath ) { \n\t$F224720 ( SSL_FACTORY ) $F45360 ( logger ) $F431808 ( props , System ) $F12100 ( props ) $F12116 ( props , SSL_FACTORY ) $F12100 ( props ) $F12100 ( props ) $F12100 ( props ) $F4395 ( props ) $F4395 ( props ) $F4395 ( props ) $F4395 ( props ) $F224720 ( username ) $F224720 ( password ) try { \n\t\tSession session = Session . getDefaultInstance ( props , new Authenticator $F2 { \n\t\t\tprotected PasswordAuthentication getPasswordAuthentication $F2 { \n\t\t\t\treturn new PasswordAuthentication ( username , password ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\tMimeMessage message = new MimeMessage ( session ) ; \n\t\tmessage . setFrom ( new InternetAddress ( username ) ) ; \n\t\tmessage . addRecipient ( Message . RecipientType . TO , new InternetAddress ( toAddress ) ) ; \n\t\t$F428299 ( message , subject ) BodyPart $F408274 ( messageBodyPart ) ; \n\t\t$F30691 ( messageBodyPart , content ) Multipart multipart = new MimeMultipart $F2 ; \n\t\t$F408283 ( multipart , messageBodyPart ) $F408274 ( messageBodyPart ) ; \n\t\tDataSource source = new FileDataSource ( attachmentPath ) ; \n\t\tmessageBodyPart . setDataHandler ( new DataHandler ( source ) ) ; \n\t\tmessageBodyPart . setFileName ( attachmentName ) ; \n\t\t$F408283 ( multipart , messageBodyPart ) $F128853 ( message , multipart ) $F179957 ( Transport , message ) $F45360 ( logger ) } \n\tcatch ( MessagingException e ) $F5573 ( logger , e ) } \n"}, {"code": "public void sendMail $F16060 ( toAddress , subject , content ) { \n\t$F224720 ( SSL_FACTORY ) $F45360 ( logger ) $F431808 ( props , System ) $F12100 ( props ) $F12116 ( props , SSL_FACTORY ) $F12100 ( props ) $F12100 ( props ) $F12100 ( props ) $F4395 ( props ) $F4395 ( props ) $F4395 ( props ) $F4395 ( props ) $F224720 ( username ) $F224720 ( password ) try { \n\t\tSession session = Session . getDefaultInstance ( props , new Authenticator $F2 { \n\t\t\tprotected PasswordAuthentication getPasswordAuthentication $F2 { \n\t\t\t\treturn new PasswordAuthentication ( username , password ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\tMimeMessage message = new MimeMessage ( session ) ; \n\t\tmessage . setFrom ( new InternetAddress ( username ) ) ; \n\t\tmessage . addRecipient ( Message . RecipientType . TO , new InternetAddress ( toAddress ) ) ; \n\t\t$F428299 ( message , subject ) $F30691 ( message , content ) $F179957 ( Transport , message ) $F45360 ( logger ) } \n\tcatch ( MessagingException e ) $F5573 ( logger , e ) } \n"}, {"code": "$F1 public Object newGroupVariable ( final CmdLineCLA group , final Object target , final ICmdLineArg $F45 factoryValueArg ) throws ParseException $F2200 "}, {"code": "public final NodeModel $F1372 build $F2 { \n\tfor ( Map . Entry < NodeState $F1372 , List < ElementHandler $F1372 > > e : $F708 ( statesWithHandlers ) ) { \n\t\tNodeState $F1372 $F14625 ( state , e ) ; \n\t\tNodeModel $F1372 subModel = new NodeModel $F1372 ( state ) ; \n\t\tNodeModelBuilder $F1372 subBuilder = new NodeModelBuilder $F1372 ( subModel ) ; \n\t\tfor ( ElementHandler $F1372 handler : $F269 ( e ) ) { \n\t\t\t$F88973 ( handler , subBuilder ) } \n\t\t$F90720 ( subBuilder ) } \n\treturn model ; \n\t} \n"}, {"code": "public void register $F80574 ( listener ) { \n\tfor ( $F110705 ( clazz , listener ) ; \n\tclazz != null ; \n\t$F7915 ( clazz ) ) { \n\t\t$F428411 ( methods , clazz ) for ( Method m : methods ) { \n\t\t\tif ( ! m . isAnnotationPresent ( Subscribe . class ) ) $F23605 $F586539 ( params , m ) if $F15480 ( params ) throw new IllegalArgumentException ( $F7207 ( m ) + params . length + STRING00 ) ; \n\t\t\tClass $F26393 ( event , params ) ; \n\t\t\tEventHandler handler = new EventHandler ( listener , m ) ; \n\t\t\tthis . handlersByEventType . put ( event , handler ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void unregister $F80574 ( listener ) { \n\tfor ( $F110705 ( clazz , listener ) ; \n\tclazz != null ; \n\t$F7915 ( clazz ) ) { \n\t\tthis . handlersByEventType . removeAll ( clazz ) ; \n\t\t} \n\t} \n"}, {"code": "public void post $F80574 ( event ) { \n\t$F627861 $F75710 ( eventTypes , flattenHierarchy , event ) ; \n\t$F2233 ( handled ) for ( Class c : eventTypes ) { \n\t\tfor ( EventHandler h : this . handlersByEventType . get ( c ) ) { \n\t\t\ttry { \n\t\t\t\t$F98280 ( h , event ) handled = true ; \n\t\t\t\t} \n\t\t\tcatch ( EventException e ) { \n\t\t\t\tif ( event instanceof EventException ) $F23605 $F466034 ( this , e ) } \n\t\t\t} \n\t\t} \n\tif ( ! handled && ! ( event instanceof DeadEvent ) ) { \n\t\tthis . post ( new DeadEvent ( event ) ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized static String getLocalizedProperty $F430081 ( namespace , key , defaultValue ) { \n\tif $F198046 ( namespace ) return getProperty ( STRING00 , hostname + STRING00 + key , defaultValue ) ; \n\treturn getProperty ( hostname + STRING00 + namespace , key , defaultValue ) ; \n\t} \n"}, {"code": "private static synchronized void initDEVTESTPROD $F2 { \n\t$F547418 ( IS_DEV ) IS_DEV = false ; \n\tIS_TEST = false ; \n\tIS_PROD = false ; \n\tfinal $F5033 envs = singletonInstance . getSearchEnvironments ( ) ; \n\tfor ( final String env : envs ) { \n\t\tif $F187691 ( env ) $F24354 ( IS_DEV ) } \n\tfor ( final String env : envs ) { \n\t\tif $F187691 ( env ) { \n\t\t\tIS_DEV = false ; \n\t\t\tIS_TEST = true ; \n\t\t\t} \n\t\t} \n\tfor ( final String env : envs ) { \n\t\tif $F187691 ( env ) { \n\t\t\tIS_DEV = false ; \n\t\t\tIS_TEST = false ; \n\t\t\tIS_PROD = true ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static String stripEnvironmentPrefix $F62952 ( key ) { \n\tif $F312902 ( key ) return key ; \n\tfinal String $F242175 ( prefix , key ) ; \n\tif ( ! $F89435 ( prefix ) . equals ( prefix ) ) return key ; \n\tfinal String newKey = $F17884 ( key , prefix ) ; \n\t$F347579 ( value , PropertyManager , newKey ) $F92286 ( value , key ) return newKey ; \n\t} \n"}, {"code": "private List $F393211 getInputStreamsForFile $F62952 ( filename ) throws IOException { \n\t$F19431 urls = PropertyManager . class . getClassLoader ( ) . getResources ( filename ) ; \n\tfinal List $F393211 ioStreams = new ArrayList $F393211 $F2 ; \n\twhile $F5506 ( urls ) { \n\t\tioStreams . add ( $F5507 ( urls ) . openStream ( ) ) ; \n\t\t} \n\tif $F4340 ( ioStreams ) return ioStreams ; \n\turls = $F3944 ( Thread ) . getResources ( filename ) ; \n\twhile $F5506 ( urls ) { \n\t\tioStreams . add ( $F5507 ( urls ) . openConnection ( ) . getInputStream ( ) ) ; \n\t\t} \n\tif $F4340 ( ioStreams ) return ioStreams ; \n\tfinal URL filePathURL = PropertyManager . class . getResource ( filename ) ; \n\tif $F268 ( filePathURL ) { \n\t\tioStreams . add ( $F5759 ( filePathURL ) . getInputStream ( ) ) ; \n\t\treturn ioStreams ; \n\t\t} \n\tioStreams . add ( new ClassPathResource ( filename ) . getInputStream ( ) ) ; \n\treturn ioStreams ; \n\t} \n"}, {"code": "private void loadProperties $F133249 ( filename , depth ) { \n\t$F89059 ( logger , filename ) $F339544 ( properties ) try { \n\t\tfor ( final InputStream io : getInputStreamsForFile ( filename ) ) { \n\t\t\t$F29433 ( properties , io ) $F2117 ( logger , filename ) $F1109 ( io ) } \n\t\t} \n\tcatch ( final java . io . FileNotFoundException ex ) $F89060 ( logger , filename ) catch ( final $F61842 ex ) { \n\t\tlogger . warning ( $F5962 ( ex ) ) ; \n\t\tlogger . log ( Logging . Priority . FATAL . getLevel ( ) , $F320 ( filename ) , ex ) ; \n\t\t} \n\t$F7171 ( allProperties , properties ) final String includeFiles [ ] = readIncludeFiles ( filename , depth ) ; \n\tfor ( final String includeFile : includeFiles ) { \n\t\t$F29464 ( loadProperties , includeFile , depth ) } \n\t} \n"}, {"code": "private $F21 readIncludeFiles $F133249 ( filename , depth ) { \n\t$F12095 ( logger , filename , depth ) if $F3730 ( depth ) { \n\t\tlogger . log ( Logging . Priority . ERROR . getLevel ( ) , $F4241 ( depth , filename ) ) ; \n\t\t$F100893 } \n\t$F172635 ( filenames ) $F1665826 in = null ; \n\ttry { \n\t\tfinal List $F393211 ioStreams = getInputStreamsForFile ( filename ) ; \n\t\tfor ( $F10914 ( i , ioStreams ) ) { \n\t\t\ttry { \n\t\t\t\t$F13002 ( in , ioStreams , i ) $F61221 ( currentChar , in ) $F19733 ( currentLine ) while $F3752 ( currentChar ) { \n\t\t\t\t\tif $F38390 ( currentChar ) { \n\t\t\t\t\t\tif ( $F1708661 ( currentLine ) ) { \n\t\t\t\t\t\t\tfinal String includeFile = $F391975 ( replaceVariables , currentLine ) ; \n\t\t\t\t\t\t\tif $F42444 ( includeFile ) { \n\t\t\t\t\t\t\t\t$F2109 ( logger ) $F100893 } \n\t\t\t\t\t\t\tlogger . info ( $F9972 ( currentLine , includeFile , filename ) ) ; \n\t\t\t\t\t\t\t$F528 ( filenames , includeFile ) } \n\t\t\t\t\t\tcurrentLine = STRING00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tfinal byte temp [ ] = $F18715 ; \n\t\t\t\t\t\t$F291533 ( temp , currentChar ) currentLine += new String $F141829 ( temp ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F61917 ( currentChar , in ) } \n\t\t\t\t} \n\t\t\tcatch ( final $F61842 ex ) { \n\t\t\t\tlogger . log ( Logging . Priority . ERROR . getLevel ( ) , $F320 ( filename ) , ex ) ; \n\t\t\t\t} \n\t\t\tfinally { \n\t\t\t\ttry $F116931 ( in ) catch ( final $F61842 ignored ) $F1645 } \n\t\t\t} \n\t\t} \n\tcatch ( final $F61842 ex ) { \n\t\tlogger . log ( Logging . Priority . ERROR . getLevel ( ) , $F320 ( filename ) , ex ) ; \n\t\t} \n\t$F255441 ( filenames ) } \n"}, {"code": "private String replaceVariables ( String inString ) { \n\tif ( inString == null || inString == STRING00 ) return inString ; \n\tString outString = inString ; \n\toutString = $F8253 ( stringReplace , outString , defaultEnvironment ) ; \n\t$F19733 ( currentToken ) $F19733 ( replacedString ) $F2233 ( inToken ) for ( $F8125 ( i , outString ) ) { \n\t\t$F143056 ( currentChar , outString , i ) if ( ! inToken && currentChar != STRING00 ) $F409823 ( replacedString , currentChar ) else if ( inToken && currentChar == STRING00 ) { \n\t\t\t$F372501 ( replacedString , currentToken ) currentToken = STRING00 ; \n\t\t\t} \n\t\telse if ( inToken && currentChar != STRING00 ) $F409823 ( currentToken , currentChar ) else if ( inToken && currentChar == STRING00 ) { \n\t\t\tinToken = false ; \n\t\t\t$F4728 ( replacement ) if $F268 ( singletonInstance ) { \n\t\t\t\treplacement = PropertyManager . getProperty ( $F397334 ( currentToken ) ) ; \n\t\t\t\t} \n\t\t\tif $F268 ( replacement ) $F57826 ( replacedString , replacement ) else $F6060 ( replacedString , currentToken ) currentToken = STRING00 ; \n\t\t\t} \n\t\telse if ( ! inToken && currentChar == STRING00 ) { \n\t\t\tinToken = true ; \n\t\t\tcurrentToken = STRING00 ; \n\t\t\t} \n\t\t} \n\tif $F14428 ( currentToken ) $F372502 ( replacedString , currentToken ) outString = replacedString ; \n\tif $F8962 ( outString , inString ) { \n\t\tif $F71521 ( inString ) { \n\t\t\tfinal String $F71522 ( obfuscatedText , inString ) ; \n\t\t\tinString = ObfuscationManager . clarify ( obfuscatedText ) ; \n\t\t\t} \n\t\treturn inString ; \n\t\t} \n\t$F867 ( replaceVariables , outString ) } \n"}, {"code": "private String stringReplace $F430081 ( source , find , replace ) { \n\tif $F102513 ( source , find , replace ) return source ; \n\t$F231079 ( index , source , find ) $F101824 ( index , source ) if $F2015 ( index ) return replace + $F13097 ( source , find ) ; \n\treturn $F42014 ( source , index , replace ) + $F6104 ( source , index , find ) ; \n\t} \n"}, {"code": "boolean isEnvKeyInteresting $F62952 ( key ) { \n\tfinal $F5033 disallowedKeys = Arrays . asList ( STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 ) ; \n\tif $F90672 ( key ) $F213 if ( $F89435 ( key ) . equals ( key ) ) $F213 if $F8674 ( disallowedKeys , key ) $F213 $F232 } \n"}, {"code": "private void loadOverridesFromCommandLine $F2 { \n\tfinal $F5033 disallowedKeys = Arrays . asListn\tfinal Properties $F227619 ( sysProperties , System ) ; \n\tfor ( final Object obj : $F7837 ( sysProperties ) ) { \n\t\t$F1951471 ( key , obj ) $F112188 ( disallowedKeys , key ) $F347579 ( value , sysProperties , key ) final boolean $F289968 ( doSecurely , key ) ; \n\t\tif ( doSecurely ) $F89060 ( logger , key ) else { \n\t\t\tlogger . warning ( $F6035 ( key , value ) ) ; \n\t\t\t} \n\t\t$F564 ( setOverride , key , value ) } \n\t} \n"}, {"code": "private void setOverride $F96892 ( key , value ) { \n\tfinal boolean $F289968 ( doSecurely , key ) ; \n\t$F382977 ( fullKey , defaultEnvironment , key ) if $F268 ( value ) { \n\t\tfinal String oldValue = _getProperty ( $F397334 ( key ) ) ; \n\t\tif $F8962 ( value , oldValue ) { \n\t\t\tif ( doSecurely ) $F89060 ( logger , fullKey ) else { \n\t\t\t\tlogger . warning ( $F6035 ( fullKey , value ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F93941 ( logger , fullKey ) if ( doSecurely ) { \n\t\t\t\t$F97654 ( logger ) $F89059 ( logger , oldValue ) } \n\t\t\telse { \n\t\t\t\t$F89059 ( logger , value ) $F89059 ( logger , oldValue ) } \n\t\t\t$F26648 ( allProperties , fullKey , value ) } \n\t\t} \n\t} \n"}, {"code": "private static String obfuscatePropertyValue $F62952 ( value ) { \n\tif ( value == null || $F1313916 ( value ) ) return value ; \n\treturn STRING00 + ObfuscationManager . obfuscate ( value ) + STRING00 ; \n\t} \n"}, {"code": "public static void addMessage ( final HttpServletRequest request , final String message ) { \n\tStringBuilder sb = ( StringBuilder ) $F25201 ( request , MESSAGE_KEY ) ; \n\tif $F112 ( sb ) { \n\t\t$F38418 ( sb ) $F47921 ( request , MESSAGE_KEY , sb ) } \n\t$F1212 ( sb , message ) } \n"}, {"code": "public static String getMessage $F715695 ( request ) { \n\tStringBuilder sb = ( StringBuilder ) $F25201 ( request , MESSAGE_KEY ) ; \n\t$F45711 ( sb ) $F1226 ( sb ) } \n"}, {"code": "public static void addError ( final HttpServletRequest request , final String message ) { \n\tStringBuilder sb = ( StringBuilder ) $F25201 ( request , ERROR_KEY ) ; \n\tif $F112 ( sb ) { \n\t\t$F38418 ( sb ) $F47921 ( request , ERROR_KEY , sb ) } \n\t$F1212 ( sb , message ) } \n"}, {"code": "public static String getError $F715695 ( request ) { \n\tStringBuilder sb = ( StringBuilder ) $F25201 ( request , ERROR_KEY ) ; \n\t$F45711 ( sb ) $F1226 ( sb ) } \n"}, {"code": "public static void setRequestURI ( final HttpServletRequest request , final String requestURI ) { \n\trequest . getSession ( true ) . setAttribute ( STORE_URI_KEY , requestURI ) ; \n\t} \n"}, {"code": "public static void storeRequestURI $F715695 ( request ) { \n\trequest . getSession ( true ) . setAttribute ( STORE_URI_KEY , $F47985 ( request ) ) ; \n\t} \n"}, {"code": "public static String getRequestURI $F715695 ( request ) { \n\treturn ( String ) request . getSession ( true ) . getAttribute ( STORE_URI_KEY ) ; \n\t} \n"}, {"code": "public static String getParameter ( final HttpServletRequest request , final String name ) { \n\t$F380462 ( value , request , name ) $F45711 ( value ) return value ; \n\t} \n"}, {"code": "public static Integer getIntegerParameter ( final HttpServletRequest request , final String name ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) $F11706 ( Integer , value ) } \n"}, {"code": "public static Long getLongParameter ( final HttpServletRequest request , final String name ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) $F11706 ( Long , value ) } \n"}, {"code": "public static BigDecimal getBigDecimalParameter ( final HttpServletRequest request , final String name ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) $F341258 ( value ) } \n"}, {"code": "public static Date getDateParameter ( final HttpServletRequest request , final String name , final String format ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) return new Date ( DateTimeFormat . forPattern ( format ) . parseMillis ( value ) ) ; \n\t} \n"}, {"code": "public static Calendar getCalendarParameter ( final HttpServletRequest request , final String name , final String format ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) $F28106 ( DateFormatHelper , value , format ) } \n"}, {"code": "public static DateTime getDateTimeParameter ( final HttpServletRequest request , final String name , final String format ) { \n\t$F380462 ( value , request , name ) $F378352 ( StringUtils , value ) return DateTimeFormat . forPattern ( format ) . parseDateTime ( value ) ; \n\t} \n"}, {"code": "public static $F96 getParametersStartingWith ( final HttpServletRequest request , String prefix ) { \n\t$F24707 ( prefix ) Enumeration $F589116 ( paramNames , request ) ; \n\t$F96 $F9859 ( params ) ; \n\tfor ( String paramName : new IterableEnumeration $F641 ( paramNames ) ) { \n\t\tif ( $F17184 ( prefix ) || $F11899 ( paramName , prefix ) ) { \n\t\t\t$F13100 ( unprefixed , paramName , prefix ) $F21 values = $F715676 ( request , paramName ) ; \n\t\t\tif $F44788 ( values ) $F1645 else if $F5678 ( values ) $F2726 ( params , unprefixed , values ) else { \n\t\t\t\tparams . put ( $F88881 ( unprefixed , values ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn params ; \n\t} \n"}, {"code": "public $F2666 toCharacterArray $F2 { \n\t$F44616 ( copy , size ) for ( $F6610 ( i , size ) ) $F79113 ( copy , i , elements ) return copy ; \n\t} \n"}, {"code": "$F1 public Character set ( int index , Character element ) { \n\treturn set ( index , element . charValue ( ) ) ; \n\t} \n"}, {"code": "public boolean add $F66102 ( items , start , length ) { \n\t$F107359 ( ensureCapacity , size , length ) for ( int i = start , n = start + length ; \n\ti < n ; \n\ti ++ ) $F2013926 ( elements , size , items , i ) $F118254 ( length ) } \n"}, {"code": "public boolean addAll ( CharacterArray items ) { \n\tensureCapacity ( size + items . size ) ; \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ size ++ ] = items . elements [ i ] ; \n\t\t} \n\treturn items . size > INT00 ; \n\t} \n"}, {"code": "$F1 public boolean addAll ( Collection < ? extends Character > c ) { \n\tensureCapacity ( size + $F3413 ( c ) ) ; \n\tfor ( char e : c ) $F58394 ( elements , size , e ) return $F4339 ( c ) ; \n\t} \n"}, {"code": "private void _buildStatement ( final List $F242474 orders , final Limit limit , final StringBuilder stmt ) { \n\t$F201467 ( stmt , _selectClause , _fromClause , _whereClause ) ; \n\tif $F112 ( orders ) $F8284 ( stmt , _orderClause ) else $F565 ( _buildOrderClause , orders , stmt ) if $F560 ( isLimitEnabled ) { \n\t\tif $F112 ( limit ) $F8284 ( stmt , _limitClause ) else $F565 ( _buildLimit , limit , stmt ) } \n\t} \n"}, {"code": "public String getStatement $F2 { \n\t$F1200 ( stmt ) _buildStatement ( $F125296 ( stmt ) ) ; \n\t$F1226 ( stmt ) } \n"}, {"code": "public String getCountStatement $F2 { \n\t$F1200 ( stmt ) $F201467 ( stmt , _SELECT_COUNT_ , _fromClause , _whereClause ) ; \n\t$F1226 ( stmt ) } \n"}, {"code": "public $F3244 getParameterValues $F2 { \n\t$F140474 ( empty ) if $F98509 ( _paramVlaues ) $F356 ( empty ) $F58520 ( _paramVlaues , empty ) } \n"}, {"code": "private void _buildLimit ( final Limit limit , final StringBuilder stmt ) { \n\t$F15530 ( limit ) $F1212 ( stmt , _LIMIT_ ) stmt . append ( $F61277 ( limit ) ) ; \n\t$F1212 ( stmt , _OFFSET_ ) stmt . append ( $F97700 ( limit ) ) ; \n\t} \n"}, {"code": "private void _buildOrderClause ( final List $F242474 orders , final StringBuilder stmt ) { \n\tint n_orders = ( $F269442 ( orders ) ) ; \n\t$F120791 ( n_orders ) $F1212 ( stmt , _ORDER_BY_ ) for ( $F6610 ( i , n_orders ) ) { \n\t\t$F277317 ( i , stmt ) final Order $F199 ( order , orders , i ) ; \n\t\t_buildProperty ( $F6163 ( order ) , stmt ) ; \n\t\tif ( order . isDescending ( ) ) $F8284 ( stmt , _DESC_ ) } \n\t} \n"}, {"code": "private void _buildWhere ( final SearchCriteria criteria , final StringBuilder stmt , $F306272 ( params ) ) { \n\tBinding binding = ( criteria == null ? null : $F763322 ( criteria ) ) ; \n\tif $F268 ( binding ) { \n\t\t$F1212 ( stmt , _WHERE_ ) $F5605 ( _buildBinding , binding , stmt , params ) } \n\t} \n"}, {"code": "private void _buildLogicalBinding ( final LogicalBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\t$F119109 ( size , binding ) $F90723 ( size ) final String logic = ( binding instanceof AndBinding ) ? _AND_ : _OR_ ; \n\t$F1218 ( stmt ) for ( $F6610 ( i , size ) ) { \n\t\t$F1675673 ( i , stmt , logic ) _buildBinding ( binding . getElementAt ( i ) , stmt , params ) ; \n\t\t} \n\t$F1218 ( stmt ) } \n"}, {"code": "private void _buildNotBinding ( final NotBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\t$F1218 ( stmt ) $F5605 ( _buildBinding , binding , stmt , params ) $F1218 ( stmt ) } \n"}, {"code": "private void _buildPropertyBinding ( final PropertyBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\tif ( binding instanceof RelationalBinding ) { \n\t\t_buildRelationalBinding ( ( RelationalBinding ) binding , stmt , params ) ; \n\t\t} \n\telse if ( binding instanceof InBinding ) { \n\t\t_buildInBinding ( ( InBinding ) binding , stmt , params ) ; \n\t\t} \n\telse if ( binding instanceof LikeBinding ) { \n\t\t_buildLikeBinding ( ( LikeBinding ) binding , stmt , params ) ; \n\t\t} \n\telse if ( binding instanceof TextMatchBinding ) { \n\t\t_buildTextMatchBinding ( ( TextMatchBinding ) binding , stmt , params ) ; \n\t\t} \n\telse if ( binding instanceof NullBinding ) { \n\t\t_buildNullBinding ( ( NullBinding ) binding , stmt ) ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException ( $F917164 ( String , binding ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void _buildNullBinding ( final NullBinding binding , final StringBuilder stmt ) { \n\tString $F13868 ( property , binding ) ; \n\tif ( binding . isNotNull ( ) ) $F1219 ( stmt ) else $F1219 ( stmt ) $F564 ( _buildProperty , property , stmt ) $F1218 ( stmt ) } \n"}, {"code": "private void _buildRelationalBinding ( final RelationalBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\tString $F13868 ( property , binding ) ; \n\t$F4379 ( value , binding ) Relation rel = $F1143587 ( binding ) ; \n\tif $F112 ( value ) { \n\t\tNullBinding nullBinding = new NullBinding $F2 ; \n\t\tnullBinding . setProperty ( property ) ; \n\t\tif ( Relation . EQUAL == rel ) { \n\t\t\tnullBinding . setNotNull ( false ) ; \n\t\t\t} \n\t\telse if ( Relation . NOT_EQUAL == rel ) { \n\t\t\tnullBinding . setNotNull ( true ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new IllegalArgumentException ( $F917164 ( String , binding ) ) ; \n\t\t\t} \n\t\t$F564 ( _buildNullBinding , nullBinding , stmt ) } \n\telse { \n\t\t$F564 ( _buildProperty , property , stmt ) $F1212 ( stmt , _SPACE_ ) stmt . append ( rel . operator ( ) ) ; \n\t\t$F1212 ( stmt , _SPACE_ ) $F5605 ( _buildParameter , value , stmt , params ) } \n\t} \n"}, {"code": "private void _buildLikeBinding ( final LikeBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\t_buildProperty ( $F6163 ( binding ) , stmt ) ; \n\t$F1212 ( stmt , _LIKE_ ) _buildParameter ( $F364141 ( binding ) , stmt , params ) ; \n\t} \n"}, {"code": "private void _buildInBinding ( final InBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\t_buildProperty ( $F6163 ( binding ) , stmt ) ; \n\t$F6790 ( stmt , _IN_LIST_ ) $F2233 ( containsNull ) $F1987 ( n_valuesAdded ) for ( Object value : $F6534 ( binding ) ) { \n\t\tif $F112 ( value ) $F24354 ( containsNull ) else { \n\t\t\t$F277317 ( n_valuesAdded , stmt ) $F5605 ( _buildParameter , value , stmt , params ) n_valuesAdded ++ ; \n\t\t\t} \n\t\t} \n\tif ( binding . isNullContained ( ) || containsNull ) { \n\t\t$F277317 ( n_valuesAdded , stmt ) $F1212 ( stmt , _NIL_ ) } \n\t$F1218 ( stmt ) } \n"}, {"code": "private void _buildParameter ( final Object value , final StringBuilder stmt , $F306272 ( params ) ) { \n\t$F528 ( params , value ) $F6788 ( stmt , _PARAM_SIGN_ ) ( $F3413 ( params ) ) ; \n\t} \n"}, {"code": "private void _buildFrom ( final String alias , final StringBuilder stmt ) { \n\t$F6788 ( stmt , _FROM_ ) ( $F40175 ( getType ) ) ; \n\t$F11223 ( stmt , _SPACE_ , alias ) } \n"}, {"code": "private void _buildSelect ( final SearchCriteria criteria , final StringBuilder stmt ) { \n\tfinal List < Projection > projections = ( criteria == null ? null : criteria . getProjections ( ) ) ; \n\tfinal int n_projections = ( $F269442 ( projections ) ) ; \n\tfinal boolean distinct = ( criteria == null ? true : criteria . isDistinct ( ) ) ; \n\t$F1212 ( stmt , _SELECT_ ) $F606184 ( distinct , stmt , _DISTINCT_ ) if $F2015 ( n_projections ) $F8284 ( stmt , _alias ) else { \n\t\tfor ( $F6610 ( i , n_projections ) ) { \n\t\t\t$F277317 ( i , stmt ) $F1071920 ( _buildProjection , projections , i , stmt ) } \n\t\t} \n\t} \n"}, {"code": "private void _buildProjection ( final Projection p , final StringBuilder stmt ) { \n\tif ( p instanceof Aggregation ) { \n\t\tAggregation aggr = ( Aggregation ) p ; \n\t\tstmt . append ( $F957624 ( aggr ) . name ( ) ) ; \n\t\t$F1218 ( stmt ) String $F28271 ( expr , aggr ) ; \n\t\tif ( Aggregation . WHOLE_OBJECT_EXPRESSION . equals ( expr ) ) $F8284 ( stmt , expr ) else $F565 ( _buildProperty , expr , stmt ) $F1218 ( stmt ) } \n\telse if ( p instanceof PropertyProjection ) { \n\t\tPropertyProjection pp = ( PropertyProjection ) p ; \n\t\t_buildProperty ( $F6163 ( pp ) , stmt ) ; \n\t\t} \n\telse $F65844 ( p ) } \n"}, {"code": "private void _buildProperty ( final String property , final StringBuilder stmt ) { \n\tif $F90672 ( property ) $F24432 $F437650 ( stmt , _alias , property ) } \n"}, {"code": "private void _buildTextMatchBinding ( final TextMatchBinding binding , final StringBuilder stmt , $F306272 ( params ) ) { \n\tint size = $F48418 ( binding ) . size ( ) ; \n\tif $F2015 ( size ) { \n\t\tString pattern = _WILDCARD_ + $F48418 ( binding ) . iterator ( ) . next ( ) + _WILDCARD_ ; \n\t\tLikeBinding like = new LikeBinding ( $F6163 ( binding ) , pattern ) ; \n\t\t$F5605 ( _buildLikeBinding , like , stmt , params ) } \n\telse if $F3730 ( size ) { \n\t\tLogicalBinding logic = null ; \n\t\tif ( binding . isMatchAll ( ) ) { \n\t\t\tlogic = new AndBinding $F2 ; \n\t\t\t} \n\t\telse { \n\t\t\tlogic = new OrBinding $F2 ; \n\t\t\t} \n\t\tString $F13868 ( prop , binding ) ; \n\t\tfor ( String w : $F48418 ( binding ) ) { \n\t\t\tString pattern = _WILDCARD_ + w + _WILDCARD_ ; \n\t\t\tLikeBinding like = new LikeBinding ( prop , pattern ) ; \n\t\t\t$F281790 ( logic , like ) } \n\t\t$F5605 ( _buildLogicalBinding , logic , stmt , params ) } \n\telse $F24432 } \n"}, {"code": "public static BigInteger numericStringToBigInteger $F1693 ( numeric , round ) { \n\tBigDecimal decimal ; \n\ttry { \n\t\t$F438272 ( decimal , numeric ) ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 if ( round ) { \n\t\tdecimal = decimal . setScale ( INT00 , BigDecimal . ROUND_HALF_UP ) ; \n\t\t} \n\tBigInteger integer = decimal . toBigInteger ( ) ; \n\treturn integer ; \n\t} \n"}, {"code": "public synchronized static Date convertFromAgmipDateString ( String agmipDate ) { \n\ttry $F47344 ( dateFormatter , agmipDate ) catch ( Exception ex ) $F2200 } \n"}, {"code": "public synchronized static String convertToAgmipDateString ( Date date ) { \n\tif $F268 ( date ) { \n\t\t$F281474 ( dateFormatter , date ) } \n\telse $F2200 } \n"}, {"code": "public synchronized static String formatAgmipDateString $F1195 ( agmipDate , format ) { \n\ttry { \n\t\t$F277225 ( fmt , format ) $F171411 ( d , dateFormatter , agmipDate ) $F281474 ( fmt , d ) } \n\tcatch ( Exception ex ) $F2200 } \n"}, {"code": "public static String dateOffset $F1195 ( initial , offset ) { \n\t$F575719 ( date , convertFromAgmipDateString , initial ) BigInteger iOffset ; \n\t$F2201 ( date ) $F594820 ( cal ) $F134938 ( cal , date ) try { \n\t\tiOffset = $F146954 ( offset ) ; \n\t\tcal . add ( GregorianCalendar . DAY_OF_MONTH , $F4896 ( iOffset ) ) ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 return convertToAgmipDateString ( $F31809 ( cal ) ) ; \n\t} \n"}, {"code": "public static String numericOffset $F1195 ( initial , offset ) { \n\tBigDecimal number ; \n\tBigDecimal dOffset ; \n\ttry { \n\t\t$F438272 ( number , initial ) ; \n\t\t$F438272 ( dOffset , offset ) ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 return $F527 ( number , dOffset ) . toString ( ) ; \n\t} \n"}, {"code": "public static String multiply $F1195 ( f1 , f2 ) { \n\tBigDecimal factor1 ; \n\tBigDecimal factor2 ; \n\ttry { \n\t\t$F438272 ( factor1 , f1 ) ; \n\t\t$F438272 ( factor2 , f2 ) ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 return $F157952 ( factor1 , factor2 ) . toString ( ) ; \n\t} \n"}, {"code": "public static String sum $F996 ( addends ) { \n\t$F152080 ( addends ) BigDecimal sum ; \n\ttry { \n\t\tsum = new BigDecimal $F88565 ( addends ) ; \n\t\tfor ( $F2674 ( i , addends ) ) { \n\t\t\tsum = sum . add ( new BigDecimal $F77504 ( addends , i ) ) ; \n\t\t\t} \n\t\t$F1226 ( sum ) } \n\t$F94354 } \n"}, {"code": "public static String substract $F3019 ( minuend , subtrahends ) { \n\t$F3446 ( subtrahends , minuend ) BigDecimal difference ; \n\ttry { \n\t\t$F438272 ( difference , minuend ) ; \n\t\tfor ( $F2674 ( i , subtrahends ) ) { \n\t\t\tdifference = difference . subtract ( new BigDecimal $F77504 ( subtrahends , i ) ) ; \n\t\t\t} \n\t\t$F1226 ( difference ) } \n\t$F94354 } \n"}, {"code": "public static String product $F996 ( factors ) { \n\t$F152080 ( factors ) BigDecimal prodcut ; \n\ttry { \n\t\tprodcut = new BigDecimal $F88565 ( factors ) ; \n\t\tfor ( $F2674 ( i , factors ) ) { \n\t\t\tprodcut = prodcut . multiply ( new BigDecimal $F77504 ( factors , i ) ) ; \n\t\t\t} \n\t\t$F1226 ( prodcut ) } \n\t$F94354 } \n"}, {"code": "public static String divide $F1195 ( dividend , divisor ) { \n\ttry { \n\t\t$F1075172 ( bdDividend , dividend ) $F1075172 ( bdDivisor , divisor ) try { \n\t\t\treturn $F575281 ( bdDividend , bdDivisor ) . toString ( ) ; \n\t\t\t} \n\t\tcatch ( ArithmeticException ae ) { \n\t\t\tint scale = Math . max ( $F182292 ( bdDividend ) , $F182292 ( bdDivisor ) ) + INT00 ; \n\t\t\t$F210 ( divide , dividend , divisor , scale ) } \n\t\t} \n\tcatch ( Exception ex ) $F2200 } \n"}, {"code": "public static String divide $F157451 ( dividend , divisor , scale ) { \n\tBigDecimal bdDividend ; \n\tBigDecimal bdDivisor ; \n\ttry { \n\t\t$F438272 ( bdDividend , dividend ) ; \n\t\t$F438272 ( bdDivisor , divisor ) ; \n\t\treturn bdDividend . divide ( bdDivisor , scale , RoundingMode . HALF_UP ) . toString ( ) ; \n\t\t} \n\t$F94354 } \n"}, {"code": "public static String average $F996 ( values ) { \n\tif $F268 ( values ) { \n\t\treturn divide ( sum ( values ) , values . length + STRING00 ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String exp ( String exponent ) { \n\tBigDecimal bd ; \n\ttry { \n\t\t$F438272 ( bd , exponent ) ; \n\t\treturn Math . exp ( $F4914 ( bd ) ) + STRING00 ; \n\t\t} \n\t$F94354 } \n"}, {"code": "public static String log ( String val ) { \n\tBigDecimal bd ; \n\ttry { \n\t\t$F438272 ( bd , val ) ; \n\t\treturn Math . log ( $F4914 ( bd ) ) + STRING00 ; \n\t\t} \n\t$F94354 } \n"}, {"code": "public static String min $F996 ( values ) { \n\tBigDecimal bd ; \n\tBigDecimal bd2 ; \n\ttry { \n\t\t$F1987 ( start ) while $F32580 ( values , start ) $F16091 ( start ) bd = new BigDecimal $F77504 ( values , start ) ; \n\t\tfor ( $F544747 ( i , start , values ) ) { \n\t\t\tif $F32580 ( values , i ) $F42718 bd2 = new BigDecimal $F77504 ( values , i ) ; \n\t\t\tif $F621960 ( bd , bd2 ) $F1619 ( bd , bd2 ) } \n\t\t$F1226 ( bd ) } \n\t$F94354 } \n"}, {"code": "public static String pow $F1195 ( base , exponent ) { \n\ttry { \n\t\t$F1075172 ( bdBase , base ) $F1075172 ( bdExp , exponent ) return Math . pow ( $F4914 ( bdBase ) , $F4914 ( bdExp ) ) + STRING00 ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 } \n"}, {"code": "public static String sqrt ( String value ) { \n\ttry { \n\t\t$F1075172 ( bd , value ) return Math . sqrt ( $F4914 ( bd ) ) + STRING00 ; \n\t\t} \n\tcatch ( Exception ex ) $F2200 } \n"}, {"code": "public static String round $F11348 ( value , scale ) { \n\tBigDecimal bd ; \n\ttry { \n\t\t$F438272 ( bd , value ) ; \n\t\tbd = bd . setScale ( scale , RoundingMode . HALF_UP ) ; \n\t\t$F1226 ( bd ) } \n\t$F94354 } \n"}, {"code": "public static boolean compare ( String v1 , String v2 , CompareMode mode ) { \n\tBigDecimal bd1 ; \n\tBigDecimal bd2 ; \n\ttry { \n\t\t$F438272 ( bd1 , v1 ) ; \n\t\t$F438272 ( bd2 , v2 ) ; \n\t\t$F68214 ( ret , bd1 , bd2 ) switch ( mode ) { \n\t\t\tcase LESS : return ret < INT00 ; \n\t\t\tcase NOTLESS : return ret >= INT00 ; \n\t\t\tcase GREATER : $F118254 ( ret ) case NOTGREATER : return ret <= INT00 ; \n\t\t\tcase EQUAL : $F145019 ( ret ) $F122348 } \n\t\t} \n\t$F67892 } \n"}, {"code": "public static $F21 removeNull $F22 ( in ) { \n\tif $F112 ( in ) $F242556 $F88216 $F8444 ( arr ) ; \n\tfor ( $F2674 ( i , in ) ) { \n\t\tif $F97124 ( in , i ) $F40275 ( arr , in , i ) } \n\tif ( in . length == $F3413 ( arr ) ) $F356 ( in ) else { \n\t\t$F28562 ( arr ) } \n\t} \n"}, {"code": "public static String revisePath ( String path ) { \n\tif ( $F2200116 ( path ) ) { \n\t\t$F2595 ( f , path ) if ( f != null && $F11856 ( f ) ) $F11858 ( f ) if $F11928 ( f ) { \n\t\t\t$F53514 ( f ) $F264804 ( path , f ) } \n\t\tif ( ! $F1717589 ( path , File ) ) { \n\t\t\tpath += File . separator ; \n\t\t\t} \n\t\t} \n\treturn path ; \n\t} \n"}, {"code": "private ITemplateSourceEntry addFileEntry ( Map < String , ITemplateSourceEntry > entries , final File file ) throws IOException { \n\tString name = $F11884 ( file ) . substring ( mainEntryPathLength ) . replace ( FILE_SEPARATOR , STRING00 ) ; \n\tITemplateSourceEntry entry = new FileTemplateSourceEntry ( name , file ) ; \n\t$F2725 ( entries , name , entry ) return entry ; \n\t} \n"}, {"code": "public static Object runGetter ( Object object , Field field ) throws IllegalAccessException , IllegalArgumentException , InvocationTargetException { \n\t$F178778 ( clazz , object ) $F213834 ( fieldName , field ) $F2141314 fieldMethodMap = METHOD_FIELD_MAP_CACHE . get ( $F195318 ( object ) ) ; \n\tif $F268 ( fieldMethodMap ) { \n\t\tfinal Method $F199 ( fieldMethod , fieldMethodMap , fieldName ) ; \n\t\tif $F268 ( fieldMethod ) $F383371 ( fieldMethod , object ) } \n\telse $F384190 ( fieldMethodMap ) try { \n\t\tfinal Method method = clazz . getMethod ( JStringUtils . GET + JStringUtils . upperCaseFirst ( fieldName ) , null ) ; \n\t\t$F2725 ( fieldMethodMap , fieldName , method ) METHOD_FIELD_MAP_CACHE . put ( $F195318 ( object ) , fieldMethodMap ) ; \n\t\t$F383370 ( method , object ) } \n\t$F148617 for ( $F68547 ( method , clazz ) ) { \n\t\t$F213834 ( methodName , method ) if ( ( ( methodName . startsWith ( JStringUtils . GET ) ) && ( $F1203 ( methodName ) == ( $F1203 ( fieldName ) + JStringUtils . GET . length ( ) ) ) ) || ( ( methodName . startsWith ( JStringUtils . IS ) ) && ( $F1203 ( methodName ) == ( $F1203 ( fieldName ) + JStringUtils . IS . length ( ) ) ) ) ) { \n\t\t\tif ( $F921859 ( methodName ) ( $F9283 ( fieldName ) ) ) { \n\t\t\t\t$F2725 ( fieldMethodMap , fieldName , method ) METHOD_FIELD_MAP_CACHE . put ( $F195318 ( object ) , fieldMethodMap ) ; \n\t\t\t\t$F383370 ( method , object ) } \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static Object runSetter ( Object object , String method , Object arg , $F502965 argClazz ) throws JException { \n\ttry { \n\t\tif $F112 ( argClazz ) { \n\t\t\t$F384363 ( argClazz , arg ) } \n\t\tfinal Method m = $F289328 ( object ) ( method , argClazz ) ; \n\t\t$F61683 ( m , object , arg ) } \n\tcatch ( Exception e ) { \n\t\tthrow new JException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static Object runMethod $F271442 ( object , method , args ) throws JException { \n\ttry { \n\t\tfinal Method m = $F289328 ( object ) ( method ) ; \n\t\t$F61683 ( m , object , args ) } \n\tcatch ( Exception e ) { \n\t\tthrow new JException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F351058 getAllFields ( $F351848 ( fields ) , $F2613 ( clazz ) ) { \n\tfor ( $F243264 ( field , clazz ) ) $F529 ( fields , field ) if $F243268 ( clazz ) { \n\t\tfields = getAllFields ( fields , $F7914 ( clazz ) ) ; \n\t\t} \n\treturn fields ; \n\t} \n"}, {"code": "public static $F335290 getAllMethods ( $F335290 methods , $F2613 ( clazz ) ) { \n\tfor ( $F159648 ( method , clazz ) ) $F529 ( methods , method ) if $F243268 ( clazz ) { \n\t\tmethods = getAllMethods ( methods , $F7914 ( clazz ) ) ; \n\t\t} \n\treturn methods ; \n\t} \n"}, {"code": "public static Method getMethodByName $F43279 ( clazz , name ) { \n\tfinal $F335290 methods = JReflectionUtils . getAllMethods ( $F1986197 , clazz ) ; \n\tfor ( Method method : methods ) $F351843 ( method , name ) $F724 } \n"}, {"code": "public static void create ( int dimensions , int numElements , Collection < ? super MutableDoubleTuple > target ) { \n\tfor ( $F6610 ( i , numElements ) ) { \n\t\ttarget . add ( $F4018 ( DoubleTuples , dimensions ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static List < MutableDoubleTuple > create $F12004 ( dimensions , numElements ) { \n\tList < MutableDoubleTuple > list = new ArrayList < MutableDoubleTuple > ( numElements ) ; \n\t$F5605 ( create , dimensions , numElements , list ) return list ; \n\t} \n"}, {"code": "public static List < MutableDoubleTuple > deepCopy ( Collection < ? extends DoubleTuple > tuples ) { \n\tList < MutableDoubleTuple > result = new ArrayList < MutableDoubleTuple > $F4371 ( tuples ) ; \n\tfor ( DoubleTuple t : tuples ) { \n\t\tif $F112 ( t ) $F399094 ( result ) else { \n\t\t\tresult . add ( $F106730 ( DoubleTuples , t ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableDoubleTuple min ( Collection < ? extends DoubleTuple > tuples , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) DoubleTuple identity = DoubleTuples . constant ( size , Double . POSITIVE_INFINITY ) ; \n\tMutableDoubleTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > DoubleTuples . copy ( identity ) , ( r , t ) - > DoubleTuples . min ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > DoubleTuples . min ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "public static MutableDoubleTuple add ( Collection < ? extends DoubleTuple > tuples , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) MutableDoubleTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > DoubleTuples . create ( size ) , ( r , t ) - > DoubleTuples . add ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > DoubleTuples . add ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "private static int getSize ( Tuple t , Iterable < ? extends Tuple > tuples ) { \n\tif $F268 ( t ) { \n\t\treturn $F1976 ( t ) ; \n\t\t} \n\tIterator < ? extends Tuple > $F9005 ( iterator , tuples ) ; \n\tif $F11310 ( iterator ) { \n\t\tTuple $F11312 ( first , iterator ) ; \n\t\tif $F268 ( first ) { \n\t\t\treturn $F1976 ( first ) ; \n\t\t\t} \n\t\t} \n\t$F16096 } \n"}, {"code": "public static List < MutableDoubleTuple > standardize ( Collection < ? extends DoubleTuple > inputs , List < MutableDoubleTuple > results ) { \n\t$F1964 ( results , validate , inputs ) MutableDoubleTuple $F368035 ( mean , arithmeticMean , inputs ) ; \n\tMutableDoubleTuple $F11466 ( standardDeviation , standardDeviationFromMean , inputs , mean ) ; \n\t$F1987 ( index ) for ( DoubleTuple input : inputs ) { \n\t\tMutableDoubleTuple $F199 ( result , results , index ) ; \n\t\tDoubleTuples . subtract ( input , mean , result ) ; \n\t\tDoubleTuples . divide ( result , standardDeviation , result ) ; \n\t\tindex ++ ; \n\t\t} \n\t$F2233 ( printResults ) if ( printResults ) { \n\t\tMutableDoubleTuple $F368035 ( newMean , arithmeticMean , results ) ; \n\t\tMutableDoubleTuple $F11466 ( newStandardDeviation , standardDeviationFromMean , results , newMean ) ; \n\t\tDoubleTuple min = $F26716 ( min , results ) ; \n\t\tDoubleTuple max = $F26716 ( max , results ) ; \n\t\t$F1294 ( System ) $F8479 ( System , newMean ) $F8479 ( System , newStandardDeviation ) $F8479 ( System , min ) $F8479 ( System , max ) } \n\treturn results ; \n\t} \n"}, {"code": "private static List < MutableDoubleTuple > validate ( Collection < ? extends DoubleTuple > inputs , List < MutableDoubleTuple > results ) { \n\tif $F112 ( results ) { \n\t\tresults = new ArrayList < MutableDoubleTuple > $F4371 ( inputs ) ; \n\t\tfor ( DoubleTuple input : inputs ) { \n\t\t\tresults . add ( DoubleTuples . create ( $F1976 ( input ) ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F58479 ( inputs , results ) { \n\t\t\tthrow new IllegalArgumentException ( $F89126 ( inputs ) + STRING00 + STRING00 + $F3413 ( results ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static List < MutableDoubleTuple > normalize ( Collection < ? extends DoubleTuple > inputs , List < MutableDoubleTuple > results ) { \n\t$F1964 ( results , validate , inputs ) $F1987 ( index ) for ( DoubleTuple input : inputs ) { \n\t\tMutableDoubleTuple $F199 ( result , results , index ) ; \n\t\tDoubleTuples . normalize ( input , result ) ; \n\t\tindex ++ ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static MutableDoubleTuple arithmeticMean ( Collection < ? extends DoubleTuple > tuples , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) $F1964 ( result , add , tuples ) return DoubleTuples . multiply ( result , FLOAT00 / $F3413 ( tuples ) , result ) ; \n\t} \n"}, {"code": "public static MutableDoubleTuple variance ( Collection < ? extends DoubleTuple > tuples , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) DoubleTuple $F368035 ( mean , arithmeticMean , tuples ) ; \n\t$F210 ( variance , tuples , mean , result ) } \n"}, {"code": "public static MutableDoubleTuple variance ( Collection < ? extends DoubleTuple > tuples , DoubleTuple mean , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) DoubleTuple $F252853 ( first , tuples ) ; \n\tresult = $F360706 ( DoubleTuples , first , result ) ; \n\tDoubleTuples . set ( result , FLOAT00 ) ; \n\t$F252342 ( d , result ) for ( DoubleTuple tuple : tuples ) { \n\t\tfor ( $F6610 ( i , d ) ) { \n\t\t\tdouble difference = $F198 ( tuple , i ) - $F198 ( mean , i ) ; \n\t\t\t$F637610 ( v , result , i ) result . set ( i , v + difference * difference ) ; \n\t\t\t} \n\t\t} \n\treturn DoubleTuples . multiply ( result , FLOAT00 / $F3413 ( tuples ) , result ) ; \n\t} \n"}, {"code": "public static MutableDoubleTuple standardDeviation ( Collection < ? extends DoubleTuple > tuples , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) DoubleTuple $F368035 ( mean , arithmeticMean , tuples ) ; \n\t$F210 ( standardDeviationFromMean , tuples , mean , result ) } \n"}, {"code": "public static MutableDoubleTuple standardDeviationFromMean ( Collection < ? extends DoubleTuple > tuples , DoubleTuple mean , MutableDoubleTuple result ) { \n\t$F6156 ( tuples ) $F34267 ( result , variance , tuples , mean ) return DoubleTuples . standardDeviationFromVariance ( result , result ) ; \n\t} \n"}, {"code": "public void Write ( OutputStream output ) throws IOException { \n\tBitUtils . WriteString ( output , STRING00 ) ; \n\tScreenDescriptor sd = new ScreenDescriptor $F2144 ( width_ , height_ , numColors_ ) ; \n\tsd . Write ( output ) ; \n\t$F133812 ( output , colors_ ) ImageDescriptor id = new ImageDescriptor $F56253 ( width_ , height_ ) ; \n\tid . Write ( output ) ; \n\tbyte codesize = BitUtils . BitsNeeded ( numColors_ ) ; \n\tif $F2015 ( codesize ) ++ codesize ; \n\t$F21494 ( output , codesize ) LZWCompressor . LZWCompress ( output , codesize , pixels_ ) ; \n\t$F18676 ( output ) id = new ImageDescriptor ( $F62338 , $F62338 , STRING00 ) ; \n\tid . Write ( output ) ; \n\t$F6369 ( output ) } \n"}, {"code": "$F1118812 ( RequestMethod ) public $F11619 ListingContext getListing ( HttpServletRequest servletRequest , Model model ) throws IOException { \n\t$F8494 ( path , extractPathFromPattern , servletRequest ) $F3509 ( LOG , path ) $F1112021 ( contextPath , servletRequest ) try { \n\t\tListingContext listingContext = new ListingContext $F2 ; \n\t\tlistingContext . setAllowCustomImageSizes ( allowCustomImageSizes ) ; \n\t\tlistingContext . setImageFormats ( imageFormats ) ; \n\t\tlistingContext . setVideoFormats ( galleryService . getAvailableVideoModes ( ) ) ; \n\t\tif $F109626 ( StringUtils , path ) { \n\t\t\tlistingContext . setDirectories ( generateUrlsFromDirectoryPaths ( path , contextPath , galleryService . getRootDirectories ( ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlistingContext . setCurrentPathDisplay ( path ) ; \n\t\t\tlistingContext . setPreviousPath ( getPreviousPath ( contextPath , path ) ) ; \n\t\t\tList < GalleryFile > directoryListing = galleryService . getDirectoryListingFiles ( path ) ; \n\t\t\tif $F112 ( directoryListing ) { \n\t\t\t\tthrow new ResourceNotFoundException $F2 ; \n\t\t\t\t} \n\t\t\t$F717967 ( LOG , directoryListing ) List < GalleryFile > galleryImages = $F6151 ( directoryListing ) ( gi - > GalleryFileType . IMAGE . equals ( $F511 ( gi ) ) ) . collect ( $F1507 ( Collectors ) ) ; \n\t\t\tList < GalleryFileHolder > $F304 ( listing , convertToGalleryFileHolders , contextPath , galleryImages ) ; \n\t\t\tlistingContext . setImages ( listing ) ; \n\t\t\tList < GalleryFile > galleryVideos = $F6151 ( directoryListing ) ( gi - > GalleryFileType . VIDEO . equals ( $F511 ( gi ) ) ) . collect ( $F1507 ( Collectors ) ) ; \n\t\t\tList < GalleryFileHolder > $F304 ( videoHolders , convertToGalleryFileHolders , contextPath , galleryVideos ) ; \n\t\t\tlistingContext . setVideos ( videoHolders ) ; \n\t\t\tlistingContext . setDirectories ( generateUrlsFromDirectoryPaths ( path , contextPath , galleryService . getDirectories ( path ) ) ) ; \n\t\t\t} \n\t\treturn listingContext ; \n\t\t} \n\tcatch ( NotAllowedException noe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( FileNotFoundException fnfe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( IOException ioe ) $F186047 ( LOG , ioe ) } \n"}, {"code": "$F1118812 ( RequestMethod ) public ResponseEntity < InputStreamResource > getImage ( WebRequest request , HttpServletRequest servletRequest , @ PathVariable ( $F27109 ) String imageFormatCode ) throws IOException { \n\t$F8494 ( path , extractPathFromPattern , servletRequest ) $F133680 ( LOG , imageFormatCode , path ) try { \n\t\tImageFormat imageFormat = getImageFormatForCode ( imageFormatCode ) ; \n\t\tif $F112 ( imageFormat ) { \n\t\t\tthrow new ResourceNotFoundException $F2 ; \n\t\t\t} \n\t\tGalleryFile galleryFile = galleryService . getImage ( path , $F12288 ( imageFormat ) , $F12294 ( imageFormat ) ) ; \n\t\t$F4282 ( returnResource , request , galleryFile ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( NotAllowedException nae ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( IOException ioe ) $F186047 ( LOG , ioe ) } \n"}, {"code": "$F1118812 ( RequestMethod ) public ResponseEntity < InputStreamResource > getCustomImage ( WebRequest request , HttpServletRequest servletRequest , @ PathVariable ( $F27109 ) String width , @ PathVariable ( $F27109 ) String height ) throws IOException { \n\tif ( ! allowCustomImageSizes ) { \n\t\t$F45360 ( LOG ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\t$F8494 ( path , extractPathFromPattern , servletRequest ) $F154363 ( LOG , width , height , path ) try { \n\t\t$F62296 ( widthInt , Integer , width ) $F62296 ( heightInt , Integer , height ) if $F277883 ( widthInt , heightInt ) { \n\t\t\t$F3509 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t\t} \n\t\tGalleryFile galleryFile = galleryService . getImage ( path , widthInt , heightInt ) ; \n\t\t$F4282 ( returnResource , request , galleryFile ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( NotAllowedException nae ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( NumberFormatException nfe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( IOException ioe ) $F186047 ( LOG , ioe ) } \n"}, {"code": "$F1118812 ( RequestMethod ) public ResponseEntity < InputStreamResource > getVideo ( WebRequest request , HttpServletRequest servletRequest , @ PathVariable ( $F27109 ) String conversionFormat ) throws IOException { \n\t$F8494 ( path , extractPathFromPattern , servletRequest ) $F133680 ( LOG , path , conversionFormat ) try { \n\t\tGalleryFile galleryFile = galleryService . getVideo ( path , conversionFormat ) ; \n\t\tif ( ! GalleryFileType . VIDEO . equals ( $F511 ( galleryFile ) ) ) { \n\t\t\tLOG . warn ( STRING00 , path , $F511 ( galleryFile ) ) ; \n\t\t\tthrow new ResourceNotFoundException $F2 ; \n\t\t\t} \n\t\t$F4282 ( returnResource , request , galleryFile ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( NotAllowedException nae ) { \n\t\t$F26016 ( LOG , path ) throw new ResourceNotFoundException $F2 ; \n\t\t} \n\tcatch ( IOException ioe ) $F186047 ( LOG , ioe ) } \n"}, {"code": "private ResponseEntity < InputStreamResource > returnResource ( WebRequest request , GalleryFile galleryFile ) throws IOException { \n\t$F45360 ( LOG ) if ( request . checkNotModified ( galleryFile . getActualFile ( ) . lastModified ( ) ) ) $F2200 File file = galleryFile . getActualFile ( ) ; \n\t$F176319 ( contentType , galleryFile ) String rangeHeader = request . getHeader ( HttpHeaders . RANGE ) ; \n\t$F55422 ranges = getRangesFromHeader ( rangeHeader ) ; \n\t$F401814 ( startPosition , ranges ) $F118477 ( fileTotalSize , file ) long endPosition = $F113291 ( ranges ) ? ranges [ INT00 ] : fileTotalSize - INT00 ; \n\tlong $F107480 ( contentLength , endPosition , startPosition ) ; \n\t$F133680 ( LOG , contentLength , fileTotalSize ) LOG . debug ( STRING00 , $F11884 ( file ) , startPosition ) ; \n\tInputStream boundedInputStream = new BoundedInputStream ( $F1097 ( file ) , endPosition + INT00 ) ; \n\tInputStream is = new BufferedInputStream $F42253 ( boundedInputStream ) ; \n\tInputStreamResource inputStreamResource = new InputStreamResource ( is ) ; \n\t$F639394 ( responseHeaders ) responseHeaders . setContentLength ( contentLength ) ; \n\tresponseHeaders . setContentType ( $F6258 ( MediaType , contentType ) ) ; \n\tresponseHeaders . add ( HttpHeaders . ACCEPT_RANGES , STRING00 ) ; \n\tif $F206736 ( StringUtils , rangeHeader ) { \n\t\t$F354007 ( is , startPosition ) String $F183785 ( contentRangeResponseHeader , startPosition , endPosition , fileTotalSize ) ; \n\t\tresponseHeaders . add ( HttpHeaders . CONTENT_RANGE , contentRangeResponseHeader ) ; \n\t\tLOG . debug ( STRING00 , HttpHeaders . RANGE , rangeHeader , HttpHeaders . CONTENT_RANGE , contentRangeResponseHeader ) ; \n\t\t} \n\tHttpStatus status = $F59514 ( startPosition , contentLength , fileTotalSize ) ? HttpStatus . OK : HttpStatus . PARTIAL_CONTENT ; \n\tLOG . debug ( STRING00 , file , status , contentType , HttpHeaders . CONTENT_RANGE , responseHeaders . get ( HttpHeaders . CONTENT_RANGE ) , contentLength ) ; \n\treturn new ResponseEntity < InputStreamResource > $F2144 ( inputStreamResource , responseHeaders , status ) ; \n\t} \n"}, {"code": "private $F55422 getRangesFromHeader ( String rangeHeader ) { \n\t$F3509 ( LOG , rangeHeader ) $F55422 $F377203 ( result ) ; \n\t$F224720 ( headerPrefix ) if ( $F36128 ( StringUtils , rangeHeader , headerPrefix ) ) { \n\t\t$F21 splitRange = $F13097 ( rangeHeader , headerPrefix ) . split ( STRING00 ) ; \n\t\ttry { \n\t\t\tresult [ INT00 ] = $F42494 ( Long , splitRange ) ; \n\t\t\tif $F5678 ( splitRange ) { \n\t\t\t\tresult [ INT00 ] = $F42494 ( Long , splitRange ) ; \n\t\t\t\t} \n\t\t\tif ( $F297303 ( result ) || ( $F113291 ( result ) && result [ INT00 ] > result [ INT00 ] ) ) { \n\t\t\t\tthrow new RangeException $F2 ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( NumberFormatException nfe ) { \n\t\t\tthrow new RangeException $F2 ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private String getPreviousPath $F1195 ( contextPath , path ) { \n\t$F378352 ( StringUtils , path ) $F6990 ( lastIndexOfSlash , path ) $F10230 ( lastIndexOfSlash ) return contextPath + DIR_LISTING_PREFIX + $F2529 ( path , lastIndexOfSlash ) ; \n\t} \n"}, {"code": "private $F4357 generateUrlsFromDirectoryPaths $F89026 ( currentPath , contextPath , directoryPaths ) { \n\t$F579961 ( urls ) for ( String oneDir : directoryPaths ) { \n\t\tString oneDirName = $F206735 ( StringUtils , currentPath ) && $F36128 ( StringUtils , oneDir , currentPath ) ? $F17884 ( oneDir , currentPath ) : oneDir ; \n\t\turls . put ( oneDirName , contextPath + DIR_LISTING_PREFIX + oneDir ) ; \n\t\t} \n\treturn urls ; \n\t} \n"}, {"code": "private List < GalleryFileHolder > convertToGalleryFileHolders ( String contextPath , List < GalleryFile > galleryFiles ) { \n\tList < GalleryFileHolder > $F54 ( galleryFileHolders ) ; \n\tfor ( GalleryFile oneGalleryFile : galleryFiles ) { \n\t\tGalleryFileHolder oneGalleryFileHolder = new GalleryFileHolder $F2 ; \n\t\toneGalleryFileHolder . setFilename ( oneGalleryFile . getActualFile ( ) . getName ( ) ) ; \n\t\toneGalleryFileHolder . setFreeSizePath ( generateCustomImageUrlTemplate ( contextPath , oneGalleryFile ) ) ; \n\t\toneGalleryFileHolder . setFormatPath ( generateDynamicImageUrl ( contextPath , oneGalleryFile ) ) ; \n\t\tif ( GalleryFileType . VIDEO . equals ( $F511 ( oneGalleryFile ) ) ) { \n\t\t\toneGalleryFileHolder . setVideoPath ( contextPath + STRING00 + oneGalleryFile . getPublicPath ( ) ) ; \n\t\t\t} \n\t\toneGalleryFileHolder . setContentType ( $F11800 ( oneGalleryFile ) ) ; \n\t\t$F528 ( galleryFileHolders , oneGalleryFileHolder ) } \n\treturn galleryFileHolders ; \n\t} \n"}, {"code": "private String extractPathFromPattern $F715695 ( request ) { \n\tString path = ( String ) request . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ; \n\tString bestMatchPattern = ( String ) request . getAttribute ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE ) ; \n\tAntPathMatcher apm = new AntPathMatcher $F2 ; \n\tString finalPath = apm . extractPathWithinPattern ( bestMatchPattern , path ) ; \n\treturn finalPath ; \n\t} \n"}, {"code": "private ImageFormat getImageFormatForCode ( String code ) { \n\t$F37371 ( code , imageFormats ) for ( ImageFormat oneImageFormat : imageFormats ) { \n\t\tif ( code . equalsIgnoreCase ( $F17744 ( oneImageFormat ) ) ) $F356 ( oneImageFormat ) } \n\t$F724 } \n"}, {"code": "public static Double asDouble ( Object value ) { \n\tdouble doubleValue ; \n\tswitch ( $F195318 ( value ) ) { \n\t\t$F21776 doubleValue = $F459110 ( value ) . doubleValue ( ) ; \n\t\t$F332 $F21776 doubleValue = $F200999 ( value ) . doubleValue ( ) ; \n\t\t$F332 $F2377 doubleValue = ( Double ) value ; \n\t\t$F332 } \n\treturn doubleValue ; \n\t} \n"}, {"code": "public static Integer asInteger ( Object value ) { \n\tint intValue ; \n\tswitch ( $F195318 ( value ) ) { \n\t\t$F21776 intValue = $F459110 ( value ) . intValue ( ) ; \n\t\t$F332 $F21776 intValue = ( Boolean ) value ? INT00 : INT00 ; \n\t\t$F332 $F21776 $F184694 ( intValue , value ) ; \n\t\t$F332 $F2377 $F184694 ( intValue , value ) ; \n\t\t$F332 } \n\treturn intValue ; \n\t} \n"}, {"code": "public static String compressNumber ( String value , CompressionLevel compressionLevel ) { \n\t$F101721 ( value ) if ( compressionLevel . equals ( CompressionLevel . NORMAL ) ) $F445291 ( value ) else if ( compressionLevel . equals ( CompressionLevel . WITHOUT_TRAILING_ZEROS ) ) $F445291 ( value ) return value ; \n\t} \n"}, {"code": "public static synchronized void deployment $F2614 ( deployment ) { \n\tPreconditions . checkArgument ( deployment != null , $F320 ( deployment ) ) ; \n\tPreconditions . checkArgument ( deployment . getAnnotation ( Deployment . class ) != null , $F320 ( deployment ) ) ; \n\t$F1357 ( Jaguar , deployment ) logger . info ( $F19103 ( deployment ) ) ; \n\t} \n"}, {"code": "public static synchronized void bootstrap $F2 { \n\tif $F268 ( container ) $F56199 ( logger ) logger . info ( $F21245 ( Environment ) + STRING00 ) ; \n\ttry { \n\t\tcontainer = new Container $F2 ; \n\t\t$F21992 ( container ) } \n\tcatch ( Exception e ) { \n\t\tcontainer = null ; \n\t\tthrow new UncheckedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static synchronized void shutdown $F2 { \n\tif $F112 ( container ) $F56199 ( logger ) try $F12217 ( container ) finally { \n\t\tcontainer = null ; \n\t\tdeployment = null ; \n\t\t$F2109 ( logger ) } \n\t} \n"}, {"code": "public static synchronized void install $F2614 ( component ) { \n\t$F185183 ( Preconditions , container ) if $F17162 ( installed , component ) { \n\t\tcontainer . install ( component ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean installed $F2614 ( component ) { \n\tPreconditions . checkState ( container != null , $F3902 ) ; \n\treturn container . installed ( component ) ; \n\t} \n"}, {"code": "public static $F1372 T component $F7907 ( component ) { \n\t$F185183 ( Preconditions , container ) $F55359 ( container , component ) } \n"}, {"code": "public static $F1372 T assemble ( T component ) { \n\t$F185183 ( Preconditions , container ) return container . assemble ( component ) ; \n\t} \n"}, {"code": "public ParallelEngine setWaitMode ( WaitMode mode , long timeout , TimeUnit unit ) { \n\t$F1357 ( this , mode ) $F1357 ( this , timeout ) $F1357 ( this , unit ) return this ; \n\t} \n"}, {"code": "$F1 public Vector execute ( TypedVector < ActivityInfo > infos ) throws ActivityException { \n\tif $F14587 ( infos ) { \n\t\tlogger . trace ( $F99278 ( infos ) ) ; \n\t\t$F1987 ( i ) TypedVector < Future < ActivityData > > futures = new TypedVector < Future < ActivityData > > $F2 ; \n\t\tfor ( ActivityInfo info : infos ) { \n\t\t\tActivityCallable callable = new ActivityCallable ( i ++ , queue , info ) ; \n\t\t\t$F5219 ( futures , submit , callable ) } \n\t\t$F867 ( wait , futures ) } \n\telse $F16517 ( logger ) $F724 } \n"}, {"code": "public Vector wait ( TypedVector < Future < ActivityData > > futures ) throws ActivityException { \n\t$F1997400 ( results ) results . setSize ( $F3413 ( futures ) ) ; \n\ttry { \n\t\t$F23123 ( count , futures ) $F176425 ( logger , count ) long newTimeout = timeout ; \n\t\twhile ( count -- > INT00 && newTimeout > INT00 ) { \n\t\t\t$F24610 ( start , System ) Integer id = queue . poll ( newTimeout , unit ) ; \n\t\t\tnewTimeout = newTimeout - unit . convert ( $F101254 ( System , start ) , TimeUnit . MILLISECONDS ) ; \n\t\t\tif ( id == null || newTimeout < INT00 ) { \n\t\t\t\t$F42520 ( logger ) throw new TimedOutException $F6 ; \n\t\t\t\t} \n\t\t\tlogger . debug ( STRING00 , id , count , $F3413 ( queue ) ) ; \n\t\t\tActivityData result = $F550008 ( futures , id ) ; \n\t\t\tif ( result instanceof Scalar ) { \n\t\t\t\tresults . set ( id , ( ( Scalar ) result ) . get ( ) ) ; \n\t\t\t\t} \n\t\t\telse $F106750 ( results , id , result ) if ( this . mode == WaitMode . WAIT_FOR_ANY ) $F356 ( results ) } \n\t\t$F45360 ( logger ) return results ; \n\t\t} \n\tcatch ( ExecutionException e ) { \n\t\t$F5572 ( logger , e ) throw new ActivityException $F2756 ( e ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\t$F5572 ( logger , e ) throw new ActivityException $F6 ; \n\t\t} \n\t} \n"}, {"code": "$F1 public synchronized T get $F2 { \n\tT val ; \n\tsynchronized ( this ) { \n\t\tif ( valRef == null || $F563071 ( val , valRef ) == null ) { \n\t\t\t$F10411 ( val , make ) valRef = new WeakReference $F1372 ( val ) ; \n\t\t\t} \n\t\t} \n\treturn val ; \n\t} \n"}, {"code": "$F1 public MachineImage capture ( $F197020 ImageCreateOptions options , $F623 AsynchronousTask $F22299065 task ) throws $F22199250 { \n\tCompute gce = provider . getGoogleCompute ( ) ; \n\tServerSupport server = new ServerSupport ( provider ) ; \n\tImage imageContent = new Image $F2 ; \n\ttry { \n\t\tVirtualMachine vm = server . getVirtualMachine ( options . getVirtualMachineId ( ) ) ; \n\t\t$F21 disks = vm . getProviderVolumeIds ( provider ) ; \n\t\tserver . terminateVm ( options . getVirtualMachineId ( ) ) ; \n\t\tDisk disk = gce . disks ( ) . get ( $F20708 ( provider ) . getAccountNumber ( ) , vm . getProviderDataCenterId ( ) , disks [ INT00 ] ) . execute ( ) ; \n\t\timageContent . setName ( getCapabilities ( ) . getImageNamingConstraints ( ) . convertToValidName ( $F507 ( options ) , Locale . US ) ) ; \n\t\timageContent . setKind ( STRING00 ) ; \n\t\timageContent . setSourceDisk ( disk . getSelfLink ( ) ) ; \n\t\tString derivedFrom = disk . getSourceImage ( ) . replaceAll ( $F1286 ) ; \n\t\tif ( Platform . guess ( derivedFrom ) == Platform . UNKNOWN ) { \n\t\t\t$F505200 ( done ) try { \n\t\t\t\twhile ( ! done ) { \n\t\t\t\t\tImage imagePrior = gce . images ( ) . get ( $F20708 ( provider ) . getAccountNumber ( ) , derivedFrom ) . execute ( ) ; \n\t\t\t\t\tif ( $F6483 ( imagePrior ) . startsWith ( STRING00 ) ) { \n\t\t\t\t\t\tderivedFrom = $F6483 ( imagePrior ) . replaceAll ( $F1286 ) ; \n\t\t\t\t\t\tif ( Platform . guess ( derivedFrom ) != Platform . UNKNOWN ) { \n\t\t\t\t\t\t\tdone = true ; \n\t\t\t\t\t\t\t$F28607 ( imageContent , imagePrior ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\t$F44483 ( imageContent , derivedFrom ) } \n\t\t\t} \n\t\telse { \n\t\t\timageContent . setDescription ( STRING00 + derivedFrom ) ; \n\t\t\t} \n\t\tOperation job = gce . images ( ) . insert ( $F20708 ( provider ) . getAccountNumber ( ) , imageContent ) . execute ( ) ; \n\t\tGoogleMethod method = new GoogleMethod ( provider ) ; \n\t\tmethod . getOperationComplete ( $F20708 ( provider ) , job , GoogleOperationType . GLOBAL_OPERATION , STRING00 , STRING00 ) ; \n\t\tString zone = $F308271 ( disk ) ; \n\t\t$F51172 ( zone ) job = gce . disks ( ) . delete ( $F20708 ( provider ) . getAccountNumber ( ) , zone , $F507 ( disk ) ) . execute ( ) ; \n\t\tmethod . getOperationComplete ( $F20708 ( provider ) , job , GoogleOperationType . ZONE_OPERATION , STRING00 , zone ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F429327 ( logger , ex ) if ( $F298 ( ex ) == GoogleJsonResponseException . class ) { \n\t\t\tGoogleJsonResponseException gjre = ( GoogleJsonResponseException ) ex ; \n\t\t\tthrow new GoogleException ( CloudErrorType . GENERAL , $F24713 ( gjre ) , $F6001 ( gjre ) , $F56162 ( gjre ) . getMessage ( ) ) ; \n\t\t\t} \n\t\telse $F22214710 ( ex ) } \n\treturn getImage ( $F20708 ( provider ) . getAccountNumber ( ) + STRING00 + $F507 ( options ) ) ; \n\t} \n"}, {"code": "private void tidy $F2 { \n\t$F34230 ( nonPermanent ) ( entry - > <missing ';'> { \n\t\tList < WeakReference < IzouSoundLineBaseClass > > collect = $F269 ( entry ) . stream ( ) . filter ( izouSoundLineWeakReference - $F227504 ( izouSoundLineWeakReference ) != null ) . collect ( $F1507 ( Collectors ) ) ; \n\t\tif $F386 ( collect ) { \n\t\t\t$F99456 ( nonPermanent , entry , collect ) $F724 } \n\t\telse $F356 ( entry ) } \n\t) . $F161 ( filter , Objects ) $F29989 forEach ( entry - > nonPermanent . remove ( $F712 ( entry ) ) ) ; \n\t} \n"}, {"code": "public void addIzouSoundLine ( AddOnModel addOnModel , IzouSoundLineBaseClass izouSoundLine ) { \n\t$F35513 ( debug , izouSoundLine , addOnModel ) if $F71515 ( permanentAddOn , addOnModel ) $F890 ( addPermanent , izouSoundLine ) else $F565 ( addNonPermanent , addOnModel , izouSoundLine ) izouSoundLine . registerCloseCallback ( voit - $F6635 ( closeCallback , addOnModel , izouSoundLine ) ) ; \n\tizouSoundLine . registerMuteCallback ( voit - $F6635 ( muteCallback , addOnModel , izouSoundLine ) ) ; \n\t} \n"}, {"code": "private void closeCallback ( AddOnModel addOnModel , IzouSoundLine izouSoundLine ) { \n\t$F35513 ( debug , izouSoundLine , addOnModel ) Predicate < WeakReference < IzouSoundLineBaseClass > > removeFromList = weakReference - $F227504 ( weakReference ) != null && $F338952 ( weakReference ) ( izouSoundLine ) ; \n\tsynchronized ( permanentUserReadWriteLock ) { \n\t\tif ( $F71514 ( permanentAddOn , addOnModel ) && permanentLines != null ) { \n\t\t\tpermanentLines . removeIf ( removeFromList ) ; \n\t\t\tif $F6132 ( permanentLines ) { \n\t\t\t\tpermanentLines = null ; \n\t\t\t\tpermissionWithoutUsage ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tList < WeakReference < IzouSoundLineBaseClass > > $F199 ( weakReferences , nonPermanent , addOnModel ) ; \n\tif $F268 ( weakReferences ) { \n\t\tweakReferences . removeIf ( removeFromList ) ; \n\t\tsynchronized ( mutingLock ) { \n\t\t\tif ( mutingManager != null && mutingManager . getMuting ( ) . equals ( addOnModel ) ) { \n\t\t\t\tmutingManager = $F6952 ( mutingManager , izouSoundLine ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F161 ( submit , this ) tidy ) ; \n\t} \n"}, {"code": "private void permissionWithoutUsage $F2 { \n\t$F190203 ( isUsingNonJava ) synchronized ( permanentUserReadWriteLock ) { \n\t\tpermissionWithoutUsageLimit = $F37782 ( LocalDateTime ) . plus ( $F149193 ( ChronoUnit ) ) ; \n\t\tpermissionWithoutUsageCloseThread = getMain ( ) . getThreadPoolManager ( ) . getAddOnsThreadPool ( ) . submit ( ( Runnable ) ( ) - <missing ')'> > <missing ';'> { \n\t\t\ttry { \n\t\t\t\t$F15578 ( Thread ) fireLineAccessEndedNotification ( ) ; \n\t\t\t\tendPermanent ( permanentAddOn ) ; \n\t\t\t\t} \n\t\t\tcatch ( InterruptedException ignored ) $F1645 } \n\t\t) ; \n\t\t} \n\t} \n"}, {"code": "private void endWaitingForUsage $F2 { \n\tsynchronized ( permanentUserReadWriteLock ) { \n\t\tif $F268 ( permissionWithoutUsageLimit ) permissionWithoutUsageLimit = null ; \n\t\tif $F268 ( permissionWithoutUsageCloseThread ) { \n\t\t\t$F68483 ( permissionWithoutUsageCloseThread ) permissionWithoutUsageLimit = null ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void addPermanent ( IzouSoundLineBaseClass izouSoundLine ) { \n\t$F224400 ( debug , izouSoundLine ) if ( ! izouSoundLine . isPermanent ( ) ) izouSoundLine . setToPermanent ( ) ; \n\tsynchronized ( permanentUserReadWriteLock ) { \n\t\tendWaitingForUsage ( ) ; \n\t\tif $F112 ( permanentLines ) { \n\t\t\tpermanentLines = Collections . synchronizedList ( $F53 ) ; \n\t\t\t} \n\t\tpermanentLines . add ( $F195533 ( izouSoundLine ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void addNonPermanent ( AddOnModel addOnModel , IzouSoundLineBaseClass izouSoundLine ) { \n\t$F224403 ( debug , izouSoundLine , addOnModel ) if ( izouSoundLine . isPermanent ( ) ) izouSoundLine . setToNonPermanent ( ) ; \n\tList < WeakReference < IzouSoundLineBaseClass > > $F199 ( weakReferences , nonPermanent , addOnModel ) ; \n\tif $F112 ( weakReferences ) weakReferences = Collections . synchronizedList ( $F53 ) ; \n\t$F2725 ( nonPermanent , addOnModel , weakReferences ) weakReferences . add ( $F195533 ( izouSoundLine ) ) ; \n\t} \n"}, {"code": "public void requestPermanent ( AddOnModel addOnModel , Identification source , boolean nonJava ) { \n\t$F10467 ( debug , addOnModel ) boolean notUsing = $F4534 ( isUsing ) ; \n\tif ( ! notUsing ) { \n\t\t$F10467 ( debug , permanentAddOn ) synchronized ( permanentUserReadWriteLock ) { \n\t\t\tif $F71515 ( permanentAddOn , addOnModel ) { \n\t\t\t\t$F103706 ( knownIdentification , source ) $F254 } \n\t\t\telse { \n\t\t\t\tendPermanent ( permanentAddOn ) ; \n\t\t\t\t$F5605 ( addAsPermanent , addOnModel , source , nonJava ) } \n\t\t\t} \n\t\t} \n\telse $F5704 ( addAsPermanent , addOnModel , source , nonJava ) } \n"}, {"code": "public void endPermanent ( AddOnModel addOnModel ) { \n\tif ( $F150724 ( isUsing ) || $F253280 ( permanentAddOn , addOnModel ) ) $F254 synchronized ( permanentUserReadWriteLock ) { \n\t\tpermanentAddOn = null ; \n\t\tIdentification tempID = this . knownIdentification ; \n\t\tthis . knownIdentification = null ; \n\t\tif $F268 ( permanentLines ) { \n\t\t\t$F224247 ( permanentLines , weakReferenceLine ) { \n\t\t\t\tif $F281285 ( weakReferenceLine ) $F144 ( weakReferenceLine ) . setToNonPermanent ( ) ; \n\t\t\t\t} \n\t\t\t) ; \n\t\t\t$F2725 ( nonPermanent , addOnModel , permanentLines ) permanentLines = null ; \n\t\t\t} \n\t\tstopAddon ( tempID ) ; \n\t\tendWaitingForUsage ( ) ; \n\t\t$F150736 ( isUsing ) } \n\t} \n"}, {"code": "void muteOthers ( AddOnModel addOnModel ) { \n\tSet < AddOnModel > toMute = $F8147 ( nonPermanent ) ( entry - > ! $F220727 ( entry , addOnModel ) ) . flatMap ( entry - $F3057 ( entry ) . stream ( ) ) . map ( Reference : : <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 peek ( izouSoundLineBaseClass - > izouSoundLineBaseClass . setMutedFromSystem ( true ) ) . map ( IzouSoundLine : : <missing ';'> getAddOnModel ) . $F53196 ( collect , Collectors ) if ( $F253279 ( permanentAddOn , addOnModel ) && permanentLines != null ) { \n\t\t$F528 ( toMute , addOnModel ) $F5027 ( permanentLines , Reference ) <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 forEach ( izouSoundLineBaseClass - > izouSoundLineBaseClass . setMutedFromSystem ( true ) ) ; \n\t\t} \n\t$F8955 ( toMute , this ) mute ) ; \n\tList < WeakReference < IzouSoundLineBaseClass > > $F199 ( weakReferences , nonPermanent , addOnModel ) ; \n\tif $F268 ( weakReferences ) { \n\t\t$F5027 ( weakReferences , Reference ) <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 forEach ( izouSoundLine - > izouSoundLine . setMutedFromSystem ( false ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void mute ( AddOnModel model ) { \n\t$F2074 ( IdentificationManager ) . getIdentification ( this ) . map ( id - > new EventMinimalImpl ( SoundIDs . MuteEvent . type , id , SoundIDs . MuteEvent . descriptors ) ) . map ( eventMinimal - > eventMinimal . addResource ( new ResourceMinimalImpl $F50 ( SoundIDs . MuteEvent . resourceSelector , $F1186 ( eventMinimal ) , model , null ) ) ) . ifPresent ( event - > getMain ( ) . getEventDistributor ( ) . fireEventConcurrently ( event ) ) ; \n\t} \n"}, {"code": "void unmute $F2 { \n\t$F8146 ( nonPermanent ) . flatMap ( entry - $F3057 ( entry ) . stream ( ) ) . map ( Reference : : <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 forEach ( izouSoundLineBaseClass - > izouSoundLineBaseClass . setMutedFromSystem ( false ) ) ; \n\tif $F268 ( permanentLines ) $F5027 ( permanentLines , Reference ) <missing ';'> $F55662 $F161 ( filter , Objects ) $F29989 forEach ( izouSoundLineBaseClass - > izouSoundLineBaseClass . setMutedFromSystem ( false ) ) ; \n\t$F2074 ( IdentificationManager ) . getIdentification ( this ) . map ( id - > new EventMinimalImpl ( SoundIDs . UnMuteEvent . type , id , SoundIDs . UnMuteEvent . descriptors ) ) . ifPresent ( event - > getMain ( ) . getEventDistributor ( ) . fireEventConcurrently ( event ) ) ; \n\t} \n"}, {"code": "$F1 public void eventFired ( EventModel event ) { \n\tif ( event . containsDescriptor ( SoundIDs . StartRequest . descriptor ) ) { \n\t\tIdentification identification = event . getListResourceContainer ( ) . provideResource ( STRING00 ) . stream ( ) . map ( ResourceModel : : <missing ';'> getResource ) . filter ( resource - > resource instanceof Identification ) . map ( resource - > ( Identification ) resource ) . findFirst ( ) . orElseGet ( event : : <missing ';'> getSource ) ; \n\t\tAddOnModel addonModel = getMain ( ) . getAddOnInformationManager ( ) . getAddonModel ( identification ) ; \n\t\tif $F268 ( addonModel ) { \n\t\t\trequestPermanent ( addonModel , $F1186 ( event ) , event . containsDescriptor ( SoundIDs . StartEvent . isUsingNonJava ) ) ; \n\t\t\t} \n\t\t} \n\telse if ( event . containsDescriptor ( SoundIDs . StartEvent . descriptor ) ) { \n\t\tcheckAndUpdateIdentification ( $F1186 ( event ) ) ; \n\t\t} \n\telse { \n\t\tIdentification identification = event . getListResourceContainer ( ) . provideResource ( STRING00 ) . stream ( ) . map ( ResourceModel : : <missing ';'> getResource ) . filter ( resource - > resource instanceof Identification ) . map ( resource - > ( Identification ) resource ) . findFirst ( ) . orElseGet ( event : : <missing ';'> getSource ) ; \n\t\tAddOnModel addonModel = getMain ( ) . getAddOnInformationManager ( ) . getAddonModel ( identification ) ; \n\t\t$F20969 ( addonModel , endPermanent ) } \n\t} \n"}, {"code": "public static void set ( MutableDoubleArrayND a0 , DoubleSupplier s ) { \n\ta0 . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\ta0 . set ( t , s . getAsDouble ( ) ) ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public static MutableDoubleArrayND apply ( DoubleArrayND a0 , DoubleArrayND a1 , DoubleBinaryOperator op , MutableDoubleArrayND result ) { \n\tUtils . checkForEqualSizes ( a0 , a1 ) ; \n\tMutableDoubleArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F637610 ( operand0 , a0 , t ) $F637610 ( operand1 , a1 , t ) double r = op . applyAsDouble ( operand0 , operand1 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "public static MutableDoubleArrayND apply ( DoubleArrayND a0 , DoubleUnaryOperator op , MutableDoubleArrayND result ) { \n\tMutableDoubleArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F637610 ( operand0 , a0 , t ) double r = $F2356498 ( op , operand0 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "private static MutableDoubleArrayND validate ( DoubleArrayND a , MutableDoubleArrayND result ) { \n\tif $F112 ( result ) { \n\t\tresult = DoubleArraysND . create ( $F1976 ( a ) ) ; \n\t\t} \n\telse { \n\t\tUtils . checkForEqualSizes ( a , result ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static URL makeURL ( String specification ) throws MalformedURLException { \n\t$F176425 ( logger , specification ) if $F5667 ( specification ) { \n\t\t$F42520 ( logger ) return new URL ( null , specification , new ClassPathURLStreamHandler $F2 ) ; \n\t\t} \n\t$F42520 ( logger ) $F35967 ( specification ) } \n"}, {"code": "@ Autowired ( $F462100 ) public void setTemplateProviderElements ( List < ITemplateProviderElement > providers ) { \n\tthis . elements = new ArrayList < ITemplateProviderElement > ( providers ) ; \n\tCollections . sort ( this . elements , new Comparator < ITemplateProviderElement > $F2 { \n\t\t$F1 public int compare ( ITemplateProviderElement e1 , ITemplateProviderElement e2 ) { \n\t\t\tint o1 = $F30898 ( e1 ) , o2 = $F30898 ( e2 ) ; \n\t\t\treturn ( ( o1 < o2 ) ? $F3745 : ( $F2329442 ( o1 , o2 ) ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\tfor ( ITemplateProviderElement provider : elements ) { \n\t\tif $F3507 ( coreLogger ) coreLogger . debug ( Logs . LOG_01 , ansiString ( GREEN , $F9272 ( provider ) ) , ansiString ( GREEN , $F30898 ( provider ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void initialize $F2763 ( properties ) throws IOException { \n\tfor ( $F84725 ( index , elements ) ) { \n\t\tITemplateProviderElement $F199 ( provider , elements , index ) ; \n\t\tif $F19100 ( coreLogger ) coreLogger . trace ( Logs . LOG_02 , ansiString ( GREEN , $F9272 ( provider ) ) , ansiString ( GREEN , $F30898 ( provider ) ) ) ; \n\t\t$F4357 providerProperties = $F21991 ( provider ) ; \n\t\tif $F268 ( providerProperties ) { \n\t\t\t$F7171 ( properties , providerProperties ) properties . put ( $F10754 ( provider ) , $F26238 ( Collections , providerProperties ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public int compareTo ( ItemAndSupport other ) { \n\tif ( other . support == this . support ) { \n\t\treturn this . item - other . item ; \n\t\t} \n\telse { \n\t\treturn other . support - this . support ; \n\t\t} \n\t} \n"}, {"code": "public $F57272 get $F2 { \n\tif $F51323 ( capacity , buffer ) $F85302 ( capacity , buffer ) $F57272 $F60895 ( res , buffer ) ; \n\t$F207133 ( buffer , capacity ) return res ; \n\t} \n"}, {"code": "$F1 public int getPartition ( Key key , Writable value , int numPartitions ) { \n\treturn Math . abs ( $F817900 ( key ) . hashCode ( ) ) % numPartitions ; \n\t} \n"}, {"code": "public static HtmlPage toHtmlPage ( String string ) { \n\ttry { \n\t\tURL url = new URL $F6 ; \n\t\treturn HTMLParser . parseHtml ( new StringWebResponse ( string , url ) , new WebClient $F2 . getCurrentWindow ( ) ) ; \n\t\t} \n\t$F52054 ( e ) } \n"}, {"code": "public static HtmlPage toHtmlPage ( InputStream inputStream ) { \n\ttry { \n\t\treturn toHtmlPage ( $F18256 ( IOUtils , inputStream ) ) ; \n\t\t} \n\t$F52054 ( e ) } \n"}, {"code": "public static HtmlPage toHtmlPage ( Reader reader ) { \n\ttry { \n\t\treturn toHtmlPage ( $F18256 ( IOUtils , reader ) ) ; \n\t\t} \n\t$F52054 ( e ) } \n"}, {"code": "public static HtmlPage toHtmlPage ( URL url ) { \n\ttry { \n\t\treturn ( HtmlPage ) new WebClient $F2 . getPage ( url ) ; \n\t\t} \n\t$F52054 ( e ) } \n"}, {"code": "public static HtmlPage toHtmlPage ( WebDriver webDriver ) { \n\ttry { \n\t\treturn HTMLParser . parseHtml ( new StringWebResponse ( $F466441 ( webDriver ) , new URL ( webDriver . getCurrentUrl ( ) ) ) , new WebClient $F2 . getCurrentWindow ( ) ) ; \n\t\t} \n\t$F52054 ( e ) } \n"}, {"code": "public static $F1372 HtmlPage toHtmlPage ( T item ) { \n\tif ( item instanceof HtmlPage ) { \n\t\treturn ( HtmlPage ) item ; \n\t\t} \n\tif $F4380 ( item ) { \n\t\t$F68996 ( toHtmlPage , item ) } \n\tif ( item instanceof Reader ) { \n\t\treturn toHtmlPage ( ( Reader ) item ) ; \n\t\t} \n\tif ( item instanceof URL ) { \n\t\treturn toHtmlPage ( ( URL ) item ) ; \n\t\t} \n\tif ( item instanceof InputStream ) { \n\t\treturn toHtmlPage ( ( InputStream ) item ) ; \n\t\t} \n\tif ( item instanceof WebDriver ) { \n\t\treturn toHtmlPage ( ( WebDriver ) item ) ; \n\t\t} \n\tthrow new UnsupportedOperationException $F318111 ( item ) ; \n\t} \n"}, {"code": "public String getV4Authorization ( String accessKey , String secretKey , String action , String url , String serviceId , $F7168 ( headers ) , String bodyHash ) throws InternalException { \n\t$F90983 ( serviceId ) $F19733 ( regionId ) $F215028 ( host , url ) if $F101512 ( host ) { \n\t\thost = host . substring ( INT00 , $F142926 ( host ) ) ; \n\t\t} \n\tif ( ! IAMMethod . SERVICE_ID . equalsIgnoreCase ( serviceId ) ) { \n\t\t$F30789 ( urlParts , host ) if $F5678 ( urlParts ) { \n\t\t\t$F83675 ( regionId , urlParts ) $F35358 ( regionId ) } \n\t\t} \n\t$F8494 ( amzDate , extractV4Date , headers ) $F16027 ( credentialScope , getV4CredentialScope , amzDate , regionId , serviceId ) $F8494 ( signedHeaders , getV4SignedHeaders , headers ) String $F125836 ( signature , signV4 , secretKey , action , url , regionId , serviceId , headers , bodyHash ) ; \n\treturn $F252621 ( V4_ALGORITHM , accessKey ) + STRING00 + credentialScope + STRING00 + STRING00 + signedHeaders + STRING00 + STRING00 + signature ; \n\t} \n"}, {"code": "private String getOwnerId $F2 { \n\t$F11106846 ( APITrace , this ) try { \n\t\tProviderContext ctx = getContext ( ) ; \n\t\t$F2201 ( ctx ) $F4357 parameters = getStandardParameters ( getContext ( ) , EC2Method . DESCRIBE_SECURITY_GROUPS ) ; \n\t\tEC2Method method ; \n\t\tNodeList blocks ; \n\t\tDocument doc ; \n\t\tmethod = new EC2Method ( EC2Method . SERVICE_ID , this , parameters ) ; \n\t\ttry $F875790 ( doc , method ) $F22782929 ( logger , e ) $F12121463 ( blocks , doc ) for ( $F12267 ( i , blocks ) ) { \n\t\t\tNodeList items = $F12268 ( blocks , i ) . getChildNodes ( ) ; \n\t\t\tfor ( $F12267 ( j , items ) ) { \n\t\t\t\t$F4490555 ( item , items , j ) if $F2486380 ( item ) { \n\t\t\t\t\t$F356718 ( attrs , item ) for ( $F12267 ( k , attrs ) ) { \n\t\t\t\t\t\t$F356721 ( attr , attrs , k ) if $F2486380 ( attr ) { \n\t\t\t\t\t\t\treturn $F7696943 ( attr ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F724 } \n\tcatch ( InternalException e ) $F1645 catch ( CloudException e ) $F1645 $F133621 ( APITrace ) $F724 } \n"}, {"code": "public static long getTimestampValue ( Node node ) throws CloudException { \n\t$F37812 ( fmt ) $F460836 ( fmt , TimeZone ) $F8494 ( value , getTextValue , node ) try { \n\t\treturn $F42850 ( fmt , value ) . getTime ( ) ; \n\t\t} \n\tcatch ( ParseException e ) { \n\t\t$F27417 ( logger , e ) $F7453 ( e ) $F22213712 ( e ) } \n\t} \n"}, {"code": "public static void addIndexedParameters ( $F197020 $F4357 parameters , $F197020 String prefix , String ... values ) { \n\tif $F44788 ( values ) $F255 $F1987 ( i ) $F482647 ( prefix ) for ( String value : values ) { \n\t\tparameters . put ( $F187868 ( String , prefix , i , value ) ) ; \n\t\ti ++ ; \n\t\t} \n\t} \n"}, {"code": "public static void addIndexedParameters ( $F197020 $F4357 parameters , $F197020 String prefix , $F7168 ( extraParameters ) ) { \n\tif $F98509 ( extraParameters ) $F255 $F1987 ( i ) for ( $F24106 ( entry , extraParameters ) ) { \n\t\tparameters . put ( prefix + i + STRING00 , $F712 ( entry ) ) ; \n\t\tif $F711 ( entry ) { \n\t\t\tparameters . put ( prefix + i + STRING00 , $F269 ( entry ) ) ; \n\t\t\t} \n\t\ti ++ ; \n\t\t} \n\t} \n"}, {"code": "public static void addValueIfNotNull ( $F197020 $F4357 parameters , $F197020 String key , Object value ) { \n\t$F15530 ( value ) $F5648 ( parameters , key , value ) } \n"}, {"code": "public static Object getBean $F45652 ( name , waitTime ) { \n\t$F564 ( checkBeanFactory , waitTime , name ) return $F449928 ( beanFactory , name ) ; \n\t} \n"}, {"code": "public static $F1372 T getBean $F7907 ( type ) { \n\tcheckBeanFactory ( INT00 , $F507 ( type ) ) ; \n\treturn $F449928 ( beanFactory , type ) ; \n\t} \n"}, {"code": "private static void checkBeanFactory $F708176 ( waitTime , bean ) { \n\t$F231138 ( beanFactory ) if $F319 ( waitTime ) { \n\t\tlong endTime = currentTimeMillis ( ) + $F43930 ( waitTime ) ; \n\t\twhile ( beanFactory == null && ( waitTime < INT00 || currentTimeMillis ( ) < endTime ) ) { \n\t\t\t$F136997 ( Thread ) } \n\t\t} \n\tif $F112 ( beanFactory ) { \n\t\tthrow new BeanRetrievalException $F5777 ( bean ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void usageDetail ( final char commandPrefix , final ICmdLineArg $F45 arg , final int _indentLevel ) { \n\t$F564 ( nameIt , commandPrefix , arg ) $F46535 ( allign ) final String help = ( ( AbstractCLA $F45 ) arg ) . getHelp ( ) ; \n\tif $F610214 ( help ) append ( help ) ; \n\t$F29218 ( append ) $F106652 ( usageDetailModifiers , commandPrefix , arg , _indentLevel ) ; \n\tif ( ( ( AbstractCLA $F45 ) arg ) . getFormat ( ) != null ) append ( STRING00 ) . append ( ( ( AbstractCLA $F45 ) arg ) . getFormat ( ) + STRING00 ) ; \n\tunallign ( ) ; \n\tnewLine ( ) ; \n\t} \n"}, {"code": "$F1 protected void write ( LogLevel level , String correlationId , Exception ex , String message ) { \n\tErrorDescription error = ex != null ? $F64470 ( ErrorDescriptionFactory , ex , correlationId ) : null ; \n\t$F4771 ( source , getComputerName ) LogMessage logMessage = new LogMessage $F11487 ( level , source , correlationId , error , message ) ; \n\tsynchronized ( _lock ) $F529 ( _cache , logMessage ) update ( ) ; \n\t} \n"}, {"code": "public void dump $F2 throws InvocationException { \n\tif ( _updated ) { \n\t\tsynchronized ( _lock ) { \n\t\t\t$F544983 ( _updated ) List < LogMessage > messages = _cache ; \n\t\t\t_cache = new ArrayList < LogMessage > $F2 ; \n\t\t\tsave ( messages ) ; \n\t\t\t_updated = false ; \n\t\t\t$F100464 ( _lastDumpTime , System ) } \n\t\t} \n\t} \n"}, {"code": "public static void generateSecretKey ( KeyConfig config ) throws NoSuchAlgorithmException , KeyStoreException , CertificateException , IOException { \n\tif ( config == null || config . getKeyStoreFile ( ) == null || StringUtils . isEmpty ( config . getKeyEntryName ( ) ) || $F60699 ( config ) == null ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\tSecureRandom $F1716183 ( random ) ; \n\tKeyGenerator keygen = KeyGenerator . getInstance ( $F60699 ( config ) . getName ( ) , new BouncyCastleProvider $F2 ) ; \n\tkeygen . init ( config . getKeySize ( ) , random ) ; \n\tSecretKey key = keygen . generateKey ( ) ; \n\t$F14492 ( keyStore , KeyStore ) $F101163 ( fis ) if ( config . getKeyStoreFile ( ) . exists ( ) && FileUtils . sizeOf ( config . getKeyStoreFile ( ) ) > INT00 ) { \n\t\tfis = new FileInputStream ( config . getKeyStoreFile ( ) ) ; \n\t\t} \n\tkeyStore . load ( fis , config . getKeyStorePassword ( ) . toCharArray ( ) ) ; \n\tKeyStore . ProtectionParameter protectionParameter = new KeyStore . PasswordProtection ( config . getKeyStorePassword ( ) . toCharArray ( ) ) ; \n\tKeyStore . SecretKeyEntry secretKeyEntry = new KeyStore . SecretKeyEntry ( key ) ; \n\tkeyStore . setEntry ( config . getKeyEntryName ( ) , secretKeyEntry , protectionParameter ) ; \n\t$F26010 ( fis ) FileOutputStream fos = new FileOutputStream ( config . getKeyStoreFile ( ) ) ; \n\tkeyStore . store ( fos , config . getKeyStorePassword ( ) . toCharArray ( ) ) ; \n\t$F1109 ( fos ) } \n"}, {"code": "public static SecretKey getSecretKey ( File keystore , String entryName , String keyStorePassword ) throws KeyStoreException , NoSuchAlgorithmException , CertificateException , FileNotFoundException , IOException , UnrecoverableEntryException { \n\t$F14492 ( keyStore , KeyStore ) $F101163 ( fis ) if ( $F16883 ( keystore ) || FileUtils . sizeOf ( keystore ) == INT00 ) { \n\t\tthrow new FileNotFoundException $F2 ; \n\t\t} \n\tif $F1931 ( StringUtils , keyStorePassword ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\tif $F1931 ( StringUtils , entryName ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\t$F101168 ( fis , keystore ) $F210 ( getSecretKey , fis , entryName , keyStorePassword ) } \n"}, {"code": "public static SecretKey getSecretKey ( InputStream keyInputStream , String entryName , String keyStorePassword ) throws KeyStoreException , NoSuchAlgorithmException , CertificateException , IOException , UnrecoverableEntryException { \n\t$F14492 ( keyStore , KeyStore ) if $F112 ( keyInputStream ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\tif $F1931 ( StringUtils , keyStorePassword ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\tif $F1931 ( StringUtils , entryName ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\tkeyStore . load ( $F110609 ( keyInputStream , keyStorePassword ) ) ; \n\tKeyStore . ProtectionParameter protectionParameter = new KeyStore . PasswordProtection ( $F17783 ( keyStorePassword ) ) ; \n\tKeyStore . SecretKeyEntry pkEntry = ( KeyStore . SecretKeyEntry ) keyStore . getEntry ( entryName , protectionParameter ) ; \n\ttry { \n\t\treturn pkEntry . getSecretKey ( ) ; \n\t\t} \n\t$F2454 ( keyInputStream ) } \n"}, {"code": "public static SupportedType guess ( ISource source ) { \n\tLogger logger = LoggerFactory . getLogger ( MimeGuesser . class ) ; \n\tSupportedType type = SupportedType . TEXT ; \n\tif ( ! $F88338 ( source ) ) $F356 ( type ) InputStream $F9005 ( stream , source ) ; \n\ttry { \n\t\tif ( $F88338 ( stream ) <= INT00 ) { \n\t\t\t$F42520 ( logger ) return type ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e1 ) { \n\t\tlogger . debug ( $F4298 ( e1 ) ) ; \n\t\treturn type ; \n\t\t} \n\ttry { \n\t\tString typeString = URLConnection . guessContentTypeFromStream ( stream ) ; \n\t\t; \n\t\tif $F28525 ( typeString ) { \n\t\t\ttypeString = URLConnection . guessContentTypeFromName ( $F2515 ( source ) ) ; \n\t\t\t} \n\t\tif $F28525 ( typeString ) { \n\t\t\ttypeString = $F6420 ( source ) . toLowerCase ( ) ; \n\t\t\t} \n\t\t$F21194 ( logger , typeString ) if $F23577 ( typeString ) { \n\t\t\ttype = SupportedType . XML ; \n\t\t\t} \n\t\telse if $F23577 ( typeString ) { \n\t\t\ttype = SupportedType . JSON ; \n\t\t\t} \n\t\telse if $F23577 ( typeString ) { \n\t\t\ttype = SupportedType . YAML ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) $F242194 ( logger , e ) catch ( Exception ex ) { \n\t\t$F242193 ( logger , ex ) type = SupportedType . TEXT ; \n\t\t$F7453 ( ex ) } \n\tfinally { \n\t\ttry $F2453 ( stream ) catch ( IOException e ) { \n\t\t\tlogger . trace ( $F4298 ( e ) ) ; \n\t\t\t} \n\t\t} \n\treturn type ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal char chr = values . popString ( ) . charAt ( INT00 ) ; \n\t\tfinal String target = values . popString ( ) ; \n\t\tvalues . push ( new Double ( ( $F3748 ( target , chr ) ) ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public final DataModel fromJson $F605604 ( resource ) { \n\t$F239858 ( mapper ) mapper . addMixInAnnotations ( DataType . class , DataTypeConfigMixin . class ) ; \n\tmapper . addMixInAnnotations ( ObjectDataType . class , ObjectDataTypeConfigMixin . class ) ; \n\ttry { \n\t\treturn mapper . readValue ( resource , DataModel . class ) ; \n\t\t} \n\t$F11569 ( e ) } \n"}, {"code": "$F1 public void delete ( String path ) throws $F372272 { \n\t$F2595 ( deletePath , path ) for ( $F22048 ( f , deletePath ) ) $F51522 ( f ) $F21241 ( deletePath ) } \n"}, {"code": "$F1 public long getFileSize ( String path ) throws $F372272 { \n\t$F2595 ( file , path ) if $F11857 ( file ) $F17551 $F133651 ( file ) } \n"}, {"code": "$F1 public Map < $F5033 , $F21 > getSimpleColumnsMaster ( $F21 masterLabels , $F57272 joinColumnNo , String path , String separator ) throws $F372272 { \n\tMap < $F5033 , $F21 > m = new HashMap < $F5033 , $F21 > $F2 ; \n\t$F2595 ( file , path ) if $F11857 ( file ) $F2200 BufferedReader br = new BufferedReader ( new InputStreamReader $F47438 ( file ) ) ; \n\tString line ; \n\twhile $F57865 ( line , br ) { \n\t\t$F21 strings = StringUtil . split ( line , separator , false ) ; \n\t\tif $F250577 ( masterLabels , strings ) $F42718 $F95965 ( joinData ) for ( int i : joinColumnNo ) $F40275 ( joinData , strings , i ) $F21685 ( data , strings ) $F104473 ( i , strings , data ) $F2725 ( m , joinData , data ) } \n\t$F1109 ( br ) return m ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal String target = values . popString ( ) ; \n\t\tvalues . push ( $F89435 ( target ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void register ( TaskExecutor taskExecutor ) { \n\t$F64946 ( lock ) try { \n\t\tIterator < TaskExecutor > $F60361 ( it , taskExecutors ) ; \n\t\twhile $F11310 ( it ) { \n\t\t\tTaskExecutor $F11312 ( e , it ) ; \n\t\t\tif ( $F162815 ( e ) && e . hasTask ( ) == false ) $F51479 ( it ) } \n\t\tif ( $F6948 ( taskExecutors , taskExecutor ) == false ) $F529 ( taskExecutors , taskExecutor ) } \n\t$F64936 ( lock ) } \n"}, {"code": "public static EnglishLemmatizer getInstance $F2 { \n\tif $F112 ( INSTANCE ) { \n\t\tsynchronized ( EnglishLemmatizer . class ) { \n\t\t\t$F3279 ( INSTANCE ) INSTANCE = new EnglishLemmatizer $F2 ; \n\t\t\t} \n\t\t} \n\treturn INSTANCE ; \n\t} \n"}, {"code": "public static RelationGraph from ( $F410888 Collection < RelationEdge > edges ) { \n\tRelationGraph gPrime = new RelationGraph $F2 ; \n\t$F224247 ( edges , e ) { \n\t\tif ( ! gPrime . containsVertex ( e . getFirstVertex ( ) ) ) { \n\t\t\tgPrime . addVertex ( e . getFirstVertex ( ) ) ; \n\t\t\t} \n\t\tif ( ! gPrime . containsVertex ( e . getSecondVertex ( ) ) ) { \n\t\t\tgPrime . addVertex ( e . getSecondVertex ( ) ) ; \n\t\t\t} \n\t\tgPrime . addEdge ( e ) ; \n\t\t} \n\t) ; \n\treturn gPrime ; \n\t} \n"}, {"code": "public RelationGraph filterByEdge ( $F410888 Predicate < RelationEdge > edgePredicate ) { \n\tRelationGraph gPrime = new RelationGraph $F2 ; \n\t$F227558 ( edges ) ( edgePredicate ) . forEach ( e - > <missing ';'> { \n\t\tif ( ! gPrime . containsVertex ( e . getFirstVertex ( ) ) ) { \n\t\t\tgPrime . addVertex ( e . getFirstVertex ( ) ) ; \n\t\t\t} \n\t\tif ( ! gPrime . containsVertex ( e . getSecondVertex ( ) ) ) { \n\t\t\tgPrime . addVertex ( e . getSecondVertex ( ) ) ; \n\t\t\t} \n\t\tgPrime . addEdge ( e ) ; \n\t\t} \n\t) ; \n\treturn gPrime ; \n\t} \n"}, {"code": "public RelationGraph filterByVertex ( $F410888 Predicate < ? super Annotation > vertexPredicate ) { \n\tRelationGraph gPrime = new RelationGraph $F2 ; \n\t$F227558 ( vertices ) ( vertexPredicate ) . forEach ( gPrime : : <missing ';'> addVertex ) ; \n\t$F227558 ( edges ) ( e - > gPrime . containsVertex ( e . getFirstVertex ( ) ) && gPrime . containsVertex ( e . getSecondVertex ( ) ) ) . forEach ( gPrime : : <missing ';'> addEdge ) ; \n\treturn gPrime ; \n\t} \n"}, {"code": "public void render ( $F410888 Resource output ) throws IOException { \n\trender ( output , GraphViz . Format . PNG ) ; \n\t} \n"}, {"code": "public void render ( $F410888 Resource output , $F410888 GraphViz . Format format ) throws IOException { \n\tGraphViz $F26725 graphViz = new GraphViz $F50 $F2 ; \n\tgraphViz . setVertexEncoder ( v - > new Vertex ( $F28055 ( v ) + v . getPOS ( ) . toString ( ) , $F2745 ( Collections ) ) ) ; \n\tgraphViz . setEdgeEncoder ( e - > map ( STRING00 , Cast . < RelationEdge > as ( e ) . getRelation ( ) ) ) ; \n\tgraphViz . setFormat ( format ) ; \n\t$F9151 ( graphViz , this , output ) ; \n\t} \n"}, {"code": "public $F222356 getSubTreeNodes ( $F410888 Annotation node , String ... childRelations ) { \n\t$F222356 $F6940 ( children ) ; \n\t$F1043 targetRel = childRelations == null ? $F8946 ( Collections ) : Sets . asSet ( $F998 ( Arrays , childRelations ) ) ; \n\tPredicate < RelationEdge > keep = edge - > targetRel . size ( ) == INT00 || targetRel . contains ( $F1143587 ( edge ) ) ; \n\tQueue < RelationEdge > queue = new $F16954 ( $F340806 ( getInEdges , node ) . filter ( keep ) . collect ( $F1507 ( Collectors ) ) ) ; \n\twhile $F386 ( queue ) { \n\t\tRelationEdge $F72068 ( n , queue ) ; \n\t\tif ( ! $F5755 ( $F1143587 ( n ) ) && ! $F5755 ( $F1143587 ( n ) ) ) { \n\t\t\tchildren . add ( n . getFirstVertex ( ) ) ; \n\t\t\tqueue . addAll ( getInEdges ( n . getFirstVertex ( ) ) . stream ( ) . filter ( e - > ! children . contains ( e . getFirstVertex ( ) ) ) . collect ( $F2946 ( Collectors ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn children ; \n\t} \n"}, {"code": "static void assertConstructorIsPrivateAndCall $F2614 ( cls ) { \n\t$F76583 ( constructor ) ; \n\ttry { \n\t\t$F37020 ( constructor , cls ) ; \n\t\t} \n\tcatch ( NoSuchMethodException e1 ) $F52053 ( e1 ) catch ( SecurityException e1 ) $F11568 ( e1 ) assertTrue ( STRING00 , Modifier . isPrivate ( $F19994 ( constructor ) ) ) ; \n\t$F10869 ( constructor ) try { \n\t\t$F6892 ( constructor ) ; \n\t\t} \n\t$F552905 ( e ) $F61685 ( e ) catch ( IllegalArgumentException e ) $F11568 ( e ) catch ( InvocationTargetException e ) $F1645 } \n"}, {"code": "private void registerOrThrow ( AddOnModel addOn , String permissionMessage ) throws IzouSoundPermissionException { \n\tFunction < PluginDescriptor , Boolean > checkPlayPermission = descriptor - > <missing ';'> { \n\t\tif ( descriptor . getAddOnProperties ( ) == null ) throw new IzouPermissionException $F2821 ( addOn ) ; \n\t\ttry { \n\t\t\treturn descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) != null && descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . equals ( STRING00 ) && descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) != null && ! descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . equals ( STRING00 ) && ! descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . isEmpty ( ) ; \n\t\t\t} \n\t\tcatch ( NullPointerException e ) $F1668 } \n\t; \n\t$F518007 ( registerOrThrow , addOn ) - > new IzouSoundPermissionException ( permissionMessage ) , checkPlayPermission ) ; \n\t} \n"}, {"code": "public static int xmx2MB ( String xmx ) { \n\t$F1987 ( size ) $F30096 ( xmx , size ) String s = xmx . substring ( $F90368 ( xmx ) ) ; \n\t$F3747 ( unit ) $F3747 ( localSize ) if $F67753 ( unitMap , s ) { \n\t\tlocalSize = Integer . valueOf ( $F436379 ( xmx ) ) ; \n\t\treturn localSize / INT00 / INT00 ; \n\t\t} \n\telse { \n\t\t$F13002 ( unit , unitMap , s ) localSize = Integer . valueOf ( $F1206 ( xmx ) ) ; \n\t\t} \n\tswitch ( unit ) { \n\t\tcase K : $F317508 ( size , localSize ) $F332 $F574756 ( M , size , localSize ) case G : $F342908 ( size , localSize ) $F332 } \n\treturn size ; \n\t} \n"}, {"code": "public static boolean isValidDate $F120581 ( year , month , day ) { \n\ttry { \n\t\t$F5605 ( buildDate , year , month , day ) $F232 } \n\tcatch ( IllegalFieldValueException e ) { \n\t\t$F442641 ( LOG , e ) $F213 } \n\t} \n"}, {"code": "public Object eval ( Node node , Context ctx ) { \n\t$F105146 ( evalResult ) if ( node instanceof AstRoot ) { \n\t\t$F105146 ( ret ) $F2004817 $F60361 ( it , node ) ; \n\t\twhile $F11310 ( it ) { \n\t\t\tNode $F11312 ( n , it ) ; \n\t\t\t$F14067 ( ret , eval , n , ctx ) } \n\t\tevalResult = ret ; \n\t\t} \n\telse if ( node instanceof Block ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\t$F2004817 $F60361 ( it , node ) ; \n\t\twhile $F11310 ( it ) { \n\t\t\tNode $F11312 ( n , it ) ; \n\t\t\t$F564 ( eval , n , ctx1 ) } \n\t\t} \n\telse if ( node instanceof DoLoop ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\tdo { \n\t\t\ttry { \n\t\t\t\teval ( ( ( DoLoop ) node ) . getBody ( ) , ctx ) ; \n\t\t\t\t} \n\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\twhile ( condition ( ( ( DoLoop ) node ) . getCondition ( ) , ctx1 ) ) ; \n\t\t} \n\telse if ( node instanceof WhileLoop ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\twhile ( condition ( ( ( WhileLoop ) node ) . getCondition ( ) , ctx1 ) ) { \n\t\t\ttry { \n\t\t\t\teval ( ( ( WhileLoop ) node ) . getBody ( ) , ctx1 ) ; \n\t\t\t\t} \n\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\t} \n\telse if ( node instanceof ForInLoop ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\tObject o = get ( ( ( ForInLoop ) node ) . getIteratedObject ( ) , ctx ) ; \n\t\tif $F5619 ( o ) { \n\t\t\tfor ( String s : $F252744 ( o ) . keySet ( ) ) { \n\t\t\t\tAstNode it = ( ( ForInLoop ) node ) . getIterator ( ) ; \n\t\t\t\tif ( it instanceof VariableDeclaration ) { \n\t\t\t\t\tString name = ( ( Name ) ( ( VariableDeclaration ) it ) . getVariables ( ) . get ( INT00 ) . getTarget ( ) ) . getIdentifier ( ) ; \n\t\t\t\t\t$F659620 ( ctx1 ) . put ( name , s ) ; \n\t\t\t\t\t} \n\t\t\t\ttry { \n\t\t\t\t\teval ( ( ( ForInLoop ) node ) . getBody ( ) , ctx1 ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\t\t} \n\t\telse if $F44389 ( o ) { \n\t\t\tfor ( double i = NUM00 ; \n\t\t\ti < ( $F5591 ( o ) ) . size ( ) ; \n\t\t\ti ++ ) { \n\t\t\t\tAstNode it = ( ( ForInLoop ) node ) . getIterator ( ) ; \n\t\t\t\tif ( it instanceof VariableDeclaration ) { \n\t\t\t\t\tString name = ( ( Name ) ( ( VariableDeclaration ) it ) . getVariables ( ) . get ( INT00 ) . getTarget ( ) ) . getIdentifier ( ) ; \n\t\t\t\t\t$F659620 ( ctx1 ) . put ( name , i ) ; \n\t\t\t\t\t} \n\t\t\t\ttry { \n\t\t\t\t\teval ( ( ( ForInLoop ) node ) . getBody ( ) , ctx1 ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\t\t} \n\t\t} \n\telse if ( node instanceof ForLoop ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\tfor ( eval ( ( ( ForLoop ) node ) . getInitializer ( ) , ctx1 ) ; \n\t\tcondition ( ( ( ForLoop ) node ) . getCondition ( ) , ctx1 ) ; \n\t\teval ( ( ( ForLoop ) node ) . getIncrement ( ) , ctx1 ) ) { \n\t\t\ttry { \n\t\t\t\teval ( ( ( ForLoop ) node ) . getBody ( ) , ctx1 ) ; \n\t\t\t\t} \n\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\t} \n\telse if ( node instanceof NewExpression ) $F1645 else if ( node instanceof IfStatement ) { \n\t\tboolean c = condition ( ( ( IfStatement ) node ) . getCondition ( ) , ctx ) ; \n\t\tif ( c ) { \n\t\t\teval ( ( ( IfStatement ) node ) . getThenPart ( ) , ctx . createChild ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ( ( IfStatement ) node ) . getElsePart ( ) != null ) { \n\t\t\t\teval ( ( ( IfStatement ) node ) . getElsePart ( ) , ctx . createChild ( ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse if ( node instanceof SwitchStatement ) { \n\t\tObject o = get ( ( ( SwitchStatement ) node ) . getExpression ( ) , ctx ) ; \n\t\tfor ( SwitchCase sc : ( ( SwitchStatement ) node ) . getCases ( ) ) { \n\t\t\t$F2233 ( b ) if ( $F551055 ( sc ) ) $F24354 ( b ) else { \n\t\t\t\tObject o2 = get ( $F856026 ( sc , ctx ) ) ; \n\t\t\t\tif $F230091 ( Objects , o , o2 ) $F24354 ( b ) } \n\t\t\tif ( b ) { \n\t\t\t\ttry { \n\t\t\t\t\tfor ( AstNode s : $F28280 ( sc ) ) $F565 ( eval , s , ctx ) } \n\t\t\t\tcatch ( LoopContinueException e ) $F1645 catch ( LoopBreakException e ) $F333 } \n\t\t\t} \n\t\t} \n\telse if ( node instanceof WithStatement ) $F1645 else if ( node instanceof VariableDeclaration ) { \n\t\tfor ( VariableInitializer vi : ( ( VariableDeclaration ) node ) . getVariables ( ) ) { \n\t\t\tString name = ( ( Name ) $F4287 ( vi ) ) . getIdentifier ( ) ; \n\t\t\t$F659620 ( ctx ) . put ( name , get ( $F2177210 ( vi ) , ctx ) ) ; \n\t\t\t} \n\t\t} \n\telse if ( node instanceof TryStatement ) { \n\t\ttry { \n\t\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\t\teval ( ( ( TryStatement ) node ) . getTryBlock ( ) , ctx1 ) ; \n\t\t\t} \n\t\tcatch ( ScriptException e ) { \n\t\t\tfor ( CatchClause cc : ( ( TryStatement ) node ) . getCatchClauses ( ) ) { \n\t\t\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\t\t\t$F659620 ( ctx1 ) . put ( $F949174 ( cc ) . getIdentifier ( ) , $F200493 ( e ) ) ; \n\t\t\t\tif ( cc . getCatchCondition ( ) == null || condition ( cc . getCatchCondition ( ) , ctx1 ) ) { \n\t\t\t\t\teval ( $F575620 ( cc , ctx1 ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tfinally { \n\t\t\teval ( ( ( TryStatement ) node ) . getFinallyBlock ( ) , ctx ) ; \n\t\t\t} \n\t\t} \n\telse if ( node instanceof ThrowStatement ) { \n\t\tthrow new ScriptException ( get ( ( ( ThrowStatement ) node ) . getExpression ( ) , ctx ) ) ; \n\t\t} \n\telse if ( node instanceof ReturnStatement ) { \n\t\tthrow new FunctionReturnException ( get ( ( ( ReturnStatement ) node ) . getReturnValue ( ) , ctx ) ) ; \n\t\t} \n\telse if ( node instanceof BreakStatement ) { \n\t\tthrow new LoopBreakException $F2 ; \n\t\t} \n\telse if ( node instanceof ContinueStatement ) { \n\t\tthrow new LoopContinueException $F2 ; \n\t\t} \n\telse if ( node instanceof Scope && ! ( node instanceof FunctionNode ) ) { \n\t\tContext ctx1 = ctx . createChild ( ) ; \n\t\tfor ( AstNode n : ( ( Scope ) node ) . getStatements ( ) ) $F565 ( eval , n , ctx1 ) } \n\telse { \n\t\tevalResult = get ( ( AstNode ) node , ctx ) ; \n\t\t} \n\treturn evalResult ; \n\t} \n"}, {"code": "public XMLElement [ ] getChildren ( String name ) { \n\tjava . util . List < XMLElement > list = new java . util . ArrayList < XMLElement > $F2 ; \n\tfor ( XMLElement child : getChildren ( ) ) { \n\t\tif $F26397 ( child , name ) $F529 ( list , child ) } \n\treturn ( INT00 < $F3413 ( list ) ) ? list . toArray ( new XMLElement $F1478 ) : null ; \n\t} \n"}, {"code": "public static $F1043 getTags ( $F8237 ( baseTags ) , RoxableTest methodAnnotation , RoxableTestClass classAnnotation ) { \n\t$F602221 ( tags ) if $F112 ( baseTags ) $F398329 ( tags ) else { \n\t\ttags = populateTags ( baseTags , $F97908 ) ; \n\t\t} \n\tif ( classAnnotation != null && $F93841 ( classAnnotation ) != null ) { \n\t\ttags = populateTags ( new $F3376 ( Arrays . asList ( $F93841 ( classAnnotation ) ) ) , tags ) ; \n\t\t} \n\tif ( methodAnnotation != null && $F93841 ( methodAnnotation ) != null ) { \n\t\ttags = populateTags ( new $F3376 ( Arrays . asList ( $F93841 ( methodAnnotation ) ) ) , tags ) ; \n\t\t} \n\treturn tags ; \n\t} \n"}, {"code": "private static $F1043 populateTags ( $F8237 ( source ) , $F8237 ( destination ) ) { \n\tfor ( String tag : source ) { \n\t\tif $F164606 ( tagPattern , tag ) { \n\t\t\tLOGGER . warn ( STRING00 , tag , $F745107 ( tagPattern ) ) ; \n\t\t\t} \n\t\telse if $F8674 ( destination , tag ) $F187720 ( LOGGER , tag ) else $F529 ( destination , tag ) } \n\treturn destination ; \n\t} \n"}, {"code": "public static $F1043 getTickets ( $F8237 ( basedTickets ) , RoxableTest methodAnnotation , RoxableTestClass classAnnotation ) { \n\t$F602221 ( tickets ) if $F112 ( basedTickets ) $F398329 ( tickets ) else { \n\t\ttickets = populateTickets ( basedTickets , $F97908 ) ; \n\t\t} \n\tif ( classAnnotation != null && classAnnotation . tickets ( ) != null ) { \n\t\ttickets = populateTickets ( new $F3376 ( Arrays . asList ( classAnnotation . tickets ( ) ) ) , tickets ) ; \n\t\t} \n\tif ( methodAnnotation != null && methodAnnotation . tickets ( ) != null ) { \n\t\ttickets = populateTickets ( new $F3376 ( Arrays . asList ( methodAnnotation . tickets ( ) ) ) , tickets ) ; \n\t\t} \n\treturn tickets ; \n\t} \n"}, {"code": "private static $F1043 populateTickets ( $F8237 ( source ) , $F8237 ( destination ) ) { \n\tfor ( String ticket : source ) { \n\t\tif $F8674 ( destination , ticket ) $F187720 ( LOGGER , ticket ) else $F529 ( destination , ticket ) } \n\treturn destination ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String expression , Object ... arguments ) throws TemplateException { \n\tConditionalExpression conditionalExpression = new ConditionalExpression $F2144 ( content , scope , expression ) ; \n\t$F327656 ( conditionalExpression ) } \n"}, {"code": "$F12506 public final TaskExecutor $F1372 addObservers ( TaskObserver $F1372 ... observers ) { \n\tif $F268 ( observers ) { \n\t\tfor ( TaskObserver $F1372 observer : observers ) { \n\t\t\tthis . observers . add ( observer ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public List $F320292 execute ( $F762 Task $F1372 ... tasks ) { \n\tList $F320292 futures = new ArrayList $F320292 $F2 ; \n\tif $F268 ( tasks ) { \n\t\tsynchronized ( queue ) { \n\t\t\t$F1987 ( i ) for ( Task $F1372 task : tasks ) { \n\t\t\t\tif $F268 ( task ) { \n\t\t\t\t\tthis . tasks . add ( task ) ; \n\t\t\t\t\tTaskCallable $F1372 callable = new TaskCallable $F1372 ( i ++ , queue , task ) ; \n\t\t\t\t\tfor ( TaskObserver $F1372 observer : observers ) { \n\t\t\t\t\t\tobserver . onTaskStarting ( task ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tfutures . add ( $F65736 ( executor , callable ) ) ; \n\t\t\t\t\tfor ( TaskObserver $F1372 observer : observers ) { \n\t\t\t\t\t\tobserver . onTaskStarted ( task ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn futures ; \n\t} \n"}, {"code": "public $F23339 waitForAll ( List $F320292 futures ) throws $F78770 { \n\tMap $F261159 results = new HashMap $F261159 $F2 ; \n\t$F23123 ( count , futures ) while $F132200 ( count ) { \n\t\tint $F146732 ( id , queue ) ; \n\t\tlogger . trace ( STRING00 , id , count , $F3413 ( queue ) ) ; \n\t\tT result = $F550008 ( futures , id ) ; \n\t\t$F2725 ( results , id , result ) for ( TaskObserver $F1372 observer : observers ) { \n\t\t\tobserver . onTaskComplete ( $F94142 ( tasks , id , result ) ) ; \n\t\t\t} \n\t\t} \n\t$F45360 ( logger ) $F1488180 ( values ) for ( $F90834 ( i , results ) ) $F96011 ( values , results , i ) return values ; \n\t} \n"}, {"code": "public T waitForAny ( List $F320292 futures , $F762 TaskObserver $F1372 ... observers ) throws $F78770 { \n\t$F23123 ( count , futures ) while $F132200 ( count ) { \n\t\tint $F146732 ( id , queue ) ; \n\t\tlogger . debug ( STRING00 , id , count , $F3413 ( queue ) ) ; \n\t\tT result = $F550008 ( futures , id ) ; \n\t\tfor ( TaskObserver $F1372 observer : observers ) { \n\t\t\tobserver . onTaskComplete ( $F94142 ( tasks , id , result ) ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static final Color fromString ( String value ) { \n\tif ( $F127290 ( Strings , value ) ) { \n\t\tRegex regex = new Regex $F21420 ( COLOR_REGEX ) ; \n\t\tif ( regex . matches ( $F5445 ( value ) ) ) { \n\t\t\tint r = $F3745 , g = $F3745 , b = $F3745 ; \n\t\t\t$F21 matches = regex . getAllMatches ( value ) . get ( INT00 ) ; \n\t\t\tif ( $F180808 ( matches ) && $F1826 ( matches ) ) { \n\t\t\t\tif ( $F94012 ( matches ) == INT00 ) { \n\t\t\t\t\tr = Integer . decode ( $F111776 ( matches ) + matches [ INT00 ] ) ; \n\t\t\t\t\tg = Integer . decode ( $F111776 ( matches ) + matches [ INT00 ] ) ; \n\t\t\t\t\tb = Integer . decode ( $F111776 ( matches ) + matches [ INT00 ] ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( $F94012 ( matches ) == INT00 ) { \n\t\t\t\t\tr = Integer . decode ( $F111776 ( matches ) ) ; \n\t\t\t\t\tg = Integer . decode ( $F111776 ( matches ) ) ; \n\t\t\t\t\tb = Integer . decode ( $F111776 ( matches ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if ( $F180808 ( matches ) && $F1305352 ( matches ) ) { \n\t\t\t\t$F200823 ( r , Integer , matches ) $F200823 ( g , Integer , matches ) $F200823 ( b , Integer , matches ) } \n\t\t\tif ( $F114226 ( r ) && INT00 <= g && g <= INT00 && INT00 <= b && b <= INT00 ) { \n\t\t\t\treturn new Color $F2144 ( r , g , b ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static String toRGB ( Color color ) { \n\tif $F268 ( color ) { \n\t\treturn STRING00 + Integer . toString ( $F12394 ( color ) ) + STRING00 + Integer . toString ( $F12399 ( color ) ) + STRING00 + Integer . toString ( $F12404 ( color ) ) + STRING00 ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String toHex ( Color color ) { \n\tif $F268 ( color ) { \n\t\treturn STRING00 + Integer . toHexString ( $F12394 ( color ) ) + Integer . toHexString ( $F12399 ( color ) ) + Integer . toHexString ( $F12404 ( color ) ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static long copy ( final File input , final OutputStream output ) throws IOException { \n\t$F58269 ( size ) $F99950 ( file_input ) try { \n\t\t$F101168 ( file_input , input ) $F14067 ( size , copy , file_input , output ) } \n\tfinally { \n\t\ttry $F2453 ( file_input ) $F1646 } \n\treturn size ; \n\t} \n"}, {"code": "public static long copy ( final InputStream input , final File output ) throws IOException { \n\t$F101988 ( stream_output ) $F58269 ( size ) try { \n\t\t$F101991 ( stream_output , output ) $F14067 ( size , copy , input , stream_output ) } \n\tfinally { \n\t\ttry $F2453 ( stream_output ) $F1646 } \n\treturn size ; \n\t} \n"}, {"code": "public static long copy ( final InputStream input , final OutputStream output ) throws IOException { \n\t$F45360 ( _LOG_ ) $F762 BufferedInputStream b_input = ( BufferedInputStream . class . isInstance ( input ) ? BufferedInputStream . class . cast ( input ) : $F72276 ( input ) ) ; \n\t$F762 BufferedOutputStream b_output = ( BufferedOutputStream . class . isInstance ( output ) ? BufferedOutputStream . class . cast ( output ) : $F59641 ( output ) ) ; \n\t$F18718 ( buffer ) $F57820 ( size ) try { \n\t\twhile $F38432 { \n\t\t\t$F33798 ( n , b_input , buffer ) $F84338 ( n ) $F34945 ( b_output , buffer , n ) size += n ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\ttry $F82687 ( b_output ) $F1646 } \n\t$F15610 ( _LOG_ , size ) return size ; \n\t} \n"}, {"code": "public static long copy ( final Reader input , final Writer output ) throws IOException { \n\t$F45360 ( _LOG_ ) $F762 BufferedReader b_input = ( BufferedReader . class . isInstance ( input ) ? BufferedReader . class . cast ( input ) : $F57794 ( input ) ) ; \n\t$F762 BufferedWriter b_output = ( BufferedWriter . class . isInstance ( output ) ? BufferedWriter . class . cast ( output ) : $F65364 ( output ) ) ; \n\t$F85664 ( buffer ) $F57820 ( size ) try { \n\t\twhile $F38432 { \n\t\t\t$F33798 ( n , b_input , buffer ) $F84338 ( n ) $F34945 ( b_output , buffer , n ) size += n ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\ttry $F82687 ( b_output ) $F1646 } \n\t$F15610 ( _LOG_ , size ) return size ; \n\t} \n"}, {"code": "public static String readCharacters $F347039 ( file ) throws IOException { \n\tReader reader = new BufferedReader ( new InputStreamReader ( $F1097 ( file ) , $F13269 ( Charset ) ) ) ; \n\t$F6364 ( sw ) Writer $F1969405 ( writer , sw ) ; \n\t$F564 ( copy , reader , writer ) $F13374 ( characters , sw ) return characters ; \n\t} \n"}, {"code": "public static $F21571 Will $F21571 of ( A value ) { \n\treturn forListenableFuture ( Futures . immediateFuture ( value ) ) ; \n\t} \n"}, {"code": "public static $F21571 Will $F21571 failedWill ( Throwable throwable ) { \n\treturn forListenableFuture ( Futures . $F21571 immediateFailedFuture ( throwable ) ) ; \n\t} \n"}, {"code": "public static $F21571 Will $F21571 forFuture ( Future $F21571 future ) { \n\treturn forListenableFuture ( JdkFutureAdapters . listenInPoolThread ( future ) ) ; \n\t} \n"}, {"code": "public static $F21571 FutureCallback $F21571 futureCallback ( final Action $F21571 success , final Action $F61632 failure ) { \n\treturn new FutureCallback $F21571 $F2 { \n\t\t$F1 public void onSuccess ( A result ) { \n\t\t\tcheckNotNull ( success ) . apply ( result ) ; \n\t\t\t} \n\t\t$F1 public void onFailure ( Throwable t ) { \n\t\t\tcheckNotNull ( failure ) . apply ( t ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public VpnGateway createVpnGateway ( String endpoint , String name , String description , VpnProtocol protocol , String bgpAsn ) throws $F22199250 { \n\tif $F19100 ( logger ) { \n\t\tlogger . trace ( STRING00 + AzureVPNSupport . class . getName ( ) + STRING00 ) ; \n\t\t} \n\ttry { \n\t\t$F22251746 ( ctx , provider ) if $F112 ( ctx ) { \n\t\t\tthrow new AzureConfigException $F6 ; \n\t\t\t} \n\t\tAzureMethod method = new AzureMethod ( provider ) ; \n\t\t$F1200 ( xml ) $F1218 ( xml ) $F1218 ( xml ) $F1218 ( xml ) $F1218 ( xml ) $F90492 ( xml , name ) $F1218 ( xml ) xml . append ( $F7207 ( endpoint ) ) ; \n\t\t$F1218 ( xml ) $F90492 ( xml , endpoint ) $F1218 ( xml ) $F1218 ( xml ) $F1218 ( xml ) $F1218 ( xml ) if $F3507 ( logger ) { \n\t\t\ttry { \n\t\t\t\tmethod . parseResponse ( $F797 ( xml ) , false ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\t$F292972 ( logger , e ) $F16516 ( logger ) $F53214 ( logger , xml ) } \n\t\t\t} \n\t\t$F13091 ( resourceDir , NETWORKING_SERVICES ) method . post ( $F1726155 ( ctx ) , resourceDir , $F797 ( xml ) ) ; \n\t\t$F724 } \n\tfinally { \n\t\tif $F19100 ( logger ) { \n\t\t\tlogger . trace ( STRING00 + AzureVPNSupport . class . getName ( ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F26726 getAnnotations ( Multimap < String , Annotation > groups , TokenMatcher matcher ) { \n\tif $F112 ( relationType ) { \n\t\treturn getAnnotationStream ( groups , matcher ) . filter ( constraint ) . collect ( $F1507 ( Collectors ) ) ; \n\t\t} \n\treturn getAnnotationStream ( groups , matcher ) . flatMap ( a - > <missing ';'> { \n\t\tif ( relationType . equals ( Types . DEPENDENCY ) ) { \n\t\t\treturn $F117860 ( a ) . stream ( ) . filter ( a2 - > a2 . dependencyRelation ( ) . v1 . equals ( relationValue ) ) ; \n\t\t\t} \n\t\treturn a . sources ( relationType , relationValue ) . stream ( ) ; \n\t\t} \n\t) . $F213364 ( flatMap , a ) { \n\t\tif $F112 ( annotationType ) $F59066 ( Stream , a ) return $F198 ( a , annotationType ) . stream ( ) ; \n\t\t} \n\t) . filter ( constraint ) . collect ( $F1507 ( Collectors ) ) ; \n\t} \n"}, {"code": "static double computeDynamicTimeWarpingDistance ( DoubleTuple u , DoubleTuple v ) { \n\t$F252342 ( m , u ) $F252342 ( n , v ) double matrix [ ] [ ] = $F144 ( threadLocalMatrix ) ; \n\tif ( matrix . length < m || $F94011 ( matrix ) < n ) { \n\t\t$F99642 ( matrix , m , n ) ; \n\t\t$F57566 ( threadLocalMatrix , matrix ) } \n\tdouble $F22442 ( u0 , u ) ; \n\tdouble $F22442 ( v0 , v ) ; \n\t$F97938 ( matrix ) = $F111189 ( Math , u0 , v0 ) ; \n\tfor ( $F6610 ( j , n ) ) { \n\t\t$F90139 ( matrix , j ) = Math . abs ( u0 - $F198 ( v , j ) ) + matrix [ INT00 ] [ j - INT00 ] ; \n\t\t} \n\tfor ( $F6610 ( i , m ) ) { \n\t\t$F95689 ( matrix , i ) = Math . abs ( $F198 ( u , i ) - v0 ) + $F12139 ( matrix , i ) [ INT00 ] ; \n\t\t} \n\tfor ( $F6610 ( i , m ) ) { \n\t\t$F637610 ( ui , u , i ) for ( $F6610 ( j , n ) ) { \n\t\t\t$F637610 ( vj , v , j ) double min = $F12139 ( matrix , i ) [ j - INT00 ] ; \n\t\t\tmin = min ( min , $F112591 ( matrix , i , j ) ) ; \n\t\t\tmin = min ( min , $F95694 ( matrix , i , j ) ) ; \n\t\t\t$F63674 ( d , ui , vj ) $F65270 ( matrix , i , j ) = min + ( d < INT00 ? - d : d ) ; \n\t\t\t} \n\t\t} \n\treturn $F12139 ( matrix , m ) [ n - INT00 ] ; \n\t} \n"}, {"code": "public static Version valueOf ( String versionString ) throws IllegalArgumentException { \n\t$F34959 ( matcher , versionPattern , versionString ) if $F168122 ( matcher ) $F9654 ( versionRegExp ) $F182071 ( majorVersion , Integer , matcher ) $F182071 ( minorVersion , Integer , matcher ) $F182071 ( patchVersion , Integer , matcher ) $F34962 ( preReleaseInformation , matcher ) $F34962 ( buildMetadata , matcher ) return new Version $F11487 ( majorVersion , minorVersion , patchVersion , preReleaseInformation , buildMetadata ) ; \n\t} \n"}, {"code": "$F1 public int compareTo ( Version other ) { \n\tif $F94496 ( major , other ) { \n\t\treturn $F61567 ( Integer , major , other ) ; \n\t\t} \n\tif $F94496 ( minor , other ) { \n\t\treturn $F61567 ( Integer , minor , other ) ; \n\t\t} \n\tif $F94496 ( patch , other ) { \n\t\treturn $F61567 ( Integer , patch , other ) ; \n\t\t} \n\tif $F112 ( preReleaseInformation ) { \n\t\tif ( other . preReleaseInformation == null ) $F17553 else $F17553 } \n\telse { \n\t\tif ( other . preReleaseInformation == null ) $F17551 $F867 ( comparePreReleaseInformation , other ) } \n\t} \n"}, {"code": "public static $F1372 SNAXParser $F1372 createParser ( XMLInputFactory factory , NodeModel $F1372 model ) { \n\treturn new SNAXParser $F1372 ( factory , model ) ; \n\t} \n"}, {"code": "public void startParsing ( Reader reader , T data ) throws XMLStreamException { \n\t$F185465 ( checkState , model ) $F564 ( init , reader , data ) isIncremental = true ; \n\t} \n"}, {"code": "public XMLEvent processEvent $F2 throws XMLStreamException , SNAXUserException { \n\t$F185465 ( checkState , xmlReader ) $F2755 ( checkState , isIncremental ) return processEvent ( $F3425819 ( xmlReader ) ) ; \n\t} \n"}, {"code": "public void parse ( Reader reader , T data ) throws XMLStreamException , SNAXUserException { \n\t$F564 ( init , reader , data ) for ( $F3425821 ( event , xmlReader ) ; \n\t$F11309 ( xmlReader ) ; \n\t$F3425820 ( event , xmlReader ) ) $F890 ( processEvent , event ) } \n"}, {"code": "$F1 public void checkClientTrusted ( $F123953 arg0 , String arg1 , String arg2 , String arg3 ) throws CertificateException $F1645 "}, {"code": "$F1 protected BasicHttpProcessor createHttpProcessor $F2 { \n\tBasicHttpProcessor httpproc = new BasicHttpProcessor $F2 ; \n\thttpproc . addInterceptor ( new RequestDefaultHeaders $F2 ) ; \n\thttpproc . addInterceptor ( new RequestContent $F38432 ) ; \n\thttpproc . addInterceptor ( new RequestTargetHost $F2 ) ; \n\thttpproc . addInterceptor ( new RequestClientConnControl $F2 ) ; \n\thttpproc . addInterceptor ( new RequestUserAgent $F2 ) ; \n\thttpproc . addInterceptor ( new RequestExpectContinue $F2 ) ; \n\thttpproc . addInterceptor ( new RequestAddCookies $F2 ) ; \n\thttpproc . addInterceptor ( new ResponseProcessCookies $F2 ) ; \n\thttpproc . addInterceptor ( new RequestAuthCache $F2 ) ; \n\thttpproc . addInterceptor ( new RequestTargetAuthentication $F2 ) ; \n\thttpproc . addInterceptor ( new RequestProxyAuthentication $F2 ) ; \n\treturn httpproc ; \n\t} \n"}, {"code": "public static boolean isParseable ( Object input ) { \n\treturn $F206761 ( input ) && ( $F75709 ( isWrapperType , input ) || $F58312 ( allPrimitiveTypes ) ( $F298 ( input ) ) || ( $F4868 . isInstance ( input ) && ( Strs . inRange ( $F1286 ) . matchesAllOf ( MINUS_STRING . matcher ( ( String ) input ) . replaceFirst ( Strs . EMPTY ) ) ) ) ) ; \n\t} \n"}, {"code": "public static String defaultTostring $F431380 ( input , appends ) { \n\t$F380017 ( input , NULL_STR ) StringBuilder bul = new StringBuilder ( $F6291 ( input ) ) ; \n\t$F1232 ( bul ) ( $F1962187 ( Integer , input ) ) ; \n\tfor ( Object a : appends ) { \n\t\tbul . append ( null != a ? $F797 ( a ) : NULL_STR ) ; \n\t\t} \n\t$F1226 ( bul ) } \n"}, {"code": "public static $F1372 T checkNotEmpty ( T reference , String errorMessageTemplate , Object ... errorMessageArgs ) { \n\t$F5605 ( checkNotNull , reference , errorMessageTemplate , errorMessageArgs ) checkArgument ( not ( $F384 ( Decisions ) ) . apply ( reference ) , errorMessageTemplate , errorMessageArgs ) ; \n\treturn reference ; \n\t} \n"}, {"code": "public static $F1372 T checkNotEmpty ( T reference , Object errorMessage ) { \n\tcheckNotNull ( reference , STRING00 , reference ) ; \n\tcheckNotEmpty ( reference , $F6258 ( String , errorMessage ) , Arrays2 . EMPTY_ARRAY ) ; \n\treturn reference ; \n\t} \n"}, {"code": "public static $F1372 T checkNotEmpty ( T reference ) { \n\tcheckNotNull ( reference , STRING00 , reference ) ; \n\tcheckNotEmpty ( reference , STRING00 , reference ) ; \n\treturn reference ; \n\t} \n"}, {"code": "$F1 public final ProcessorResult processAttribute ( final Arguments arguments , final Element element , final String attributeName ) { \n\tNestableNode $F7085 ( parent , element ) ; \n\t$F5035194 ( fieldNameExpr , element , attributeName ) final String fieldName ; \n\tif $F9289 ( fieldNameExpr ) $F14068 ( fieldName , parse , arguments , fieldNameExpr ) else $F1619 ( fieldName , fieldNameExpr ) if ( validFieldNodes . contains ( element . getNormalizedName ( ) ) ) $F565 ( addAttributesToInputElement , element , fieldName ) $F47927 ( element , attributeName ) $F5063245 ( labelExpr , element , BS_LABEL ) $F24580 ( labelExpr , createLabelExpression , fieldName ) final String label ; \n\tif $F9289 ( labelExpr ) $F14068 ( label , parse , arguments , labelExpr ) else $F1619 ( label , labelExpr ) $F47927 ( element , BS_LABEL ) final Node newNode = $F145900 ( createBootstrapField , fieldName , label , element , showError ) ; \n\tparent . insertAfter ( element , newNode ) ; \n\t$F2115396 ( parent , element ) $F8489 ( ProcessorResult ) } \n"}, {"code": "private Node createBootstrapField ( String fieldName , String labelText , Element input , boolean showError ) { \n\t$F975 ( Validate , input ) $F975 ( Validate , fieldName ) $F176425 ( LOG , fieldName ) final Element $F1353045 ( controlgroup ) ; \n\tcontrolgroup . setAttribute ( ATTR_CLASS , STRING00 ) ; \n\tif ( showError ) { \n\t\tcontrolgroup . setAttribute ( $F44311 ( fieldName ) ) ; \n\t\t} \n\tfinal Element $F1353045 ( label ) ; \n\tlabel . setAttribute ( ATTR_CLASS , STRING00 ) ; \n\tlabel . setAttribute ( $F44311 ( fieldName ) ) ; \n\tlabel . addChild ( $F953440 ( labelText ) ) ; \n\tfinal Element $F1353045 ( controls ) ; \n\tcontrols . setAttribute ( ATTR_CLASS , STRING00 ) ; \n\tfinal Node newInput = input . cloneNode ( $F254111 ) ; \n\t$F16215 ( controls , newInput ) if ( showError ) { \n\t\t$F3160377 ( help ) help . setAttribute ( ATTR_CLASS , STRING00 ) ; \n\t\thelp . setAttribute ( $F6265 ( fieldName ) ) ; \n\t\thelp . setAttribute ( $F44311 ( fieldName ) ) ; \n\t\thelp . setAttribute ( $F44311 ( fieldName ) ) ; \n\t\t$F16215 ( controls , help ) } \n\t$F16215 ( controlgroup , label ) $F16215 ( controlgroup , controls ) return controlgroup ; \n\t} \n"}, {"code": "protected void init ( $F7906 ( cls ) , Key ... keys ) { \n\treadDataSource = Execution . getDataSourceName ( $F507 ( cls ) , true ) ; \n\twriteDataSource = Execution . getDataSourceName ( $F507 ( cls ) , false ) ; \n\t$F1620 ( readDataSource , writeDataSource ) $F1620 ( writeDataSource , readDataSource ) $F472 ( props ) try { \n\t\tInputStream is = DaseinSequencer . class . getResourceAsStream ( DaseinSequencer . PROPERTIES ) ; \n\t\tif $F268 ( is ) $F130036 ( props , is ) } \n\tcatch ( Exception e ) { \n\t\tlogger . error ( STRING00 + DaseinSequencer . PROPERTIES + STRING00 + $F2443 ( e ) , e ) ; \n\t\t} \n\t$F205532 ( database , props ) $F205532 ( handlerSocketHost , props ) port = Integer . valueOf ( $F108 ( props ) ) ; \n\tpoolSize = Integer . valueOf ( $F108 ( props ) ) ; \n\t$F95965 ( targetColumns ) $F7909 ( clazz , cls ) while ( clazz != null && $F554308 ( clazz ) ) { \n\t\t$F271609 ( fields , clazz ) for ( Field f : fields ) { \n\t\t\t$F352575 ( m , f ) if ( Modifier . isTransient ( m ) || $F381185 ( Modifier , m ) ) $F42718 if ( $F28230 ( f ) . equals ( $F23401 . getName ( ) ) ) $F42718 if ( ! $F28230 ( f ) . equals ( Translator . class . getName ( ) ) ) { \n\t\t\t\t$F6945 ( targetColumns , f ) types . put ( $F507 ( f ) , $F511 ( f ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F7916 ( clazz ) } \n\t$F111040 ( columns , targetColumns ) $F111040 ( databaseColumns , targetColumns ) for ( $F10914 ( i , targetColumns ) ) { \n\t\t$F44600 ( columns , i , targetColumns ) databaseColumns [ i ] = $F39020 ( getSqlName , targetColumns , i ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public T create ( Transaction xaction , $F2731 ( state ) ) throws PersistenceException { \n\tstate . put ( STRING00 , getPrimaryKey ( ) . getFields ( ) [ INT00 ] ) ; \n\txaction . execute ( $F67830 ( getCreator , state , writeDataSource ) ) ; \n\treturn $F539110 ( getCache ) ( state ) ; \n\t} \n"}, {"code": "$F1 public T get ( Object primaryKeyValue ) throws PersistenceException { \n\ttry { \n\t\tCacheLoader $F1372 loader ; \n\t\tloader = new CacheLoader $F1372 $F2 { \n\t\t\tpublic T load $F30965 ( args ) { \n\t\t\t\tSearchTerm [ ] terms = new SearchTerm $F1478 ; \n\t\t\t\t$F58535 ( list ) ; \n\t\t\t\tterms [ INT00 ] = new SearchTerm ( $F276081 ( args ) , Operator . EQUALS , args [ INT00 ] ) ; \n\t\t\t\ttry { \n\t\t\t\t\tlist = RelationalHSCache . this . load ( $F26716 ( getLoader , terms ) , null , toParams ( terms ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( PersistenceException e ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\ttry $F8848 ( Thread ) $F147063 list = RelationalHSCache . this . load ( $F26716 ( getLoader , terms ) , null , toParams ( terms ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( Throwable forgetIt ) { \n\t\t\t\t\t\t$F428173 ( logger , forgetIt ) $F11567 ( e ) } \n\t\t\t\t\t} \n\t\t\t\t$F6156 ( list ) $F69463 ( list ) } \n\t\t\t} \n\t\t; \n\t\t$F45360 ( logger ) try { \n\t\t\treturn $F539110 ( getCache ) ( getPrimaryKeyField ( ) , primaryKeyValue , loader , getPrimaryKeyField ( ) , primaryKeyValue ) ; \n\t\t\t} \n\t\tcatch ( CacheManagementException e ) $F5070055 ( e ) catch ( RuntimeException e ) { \n\t\t\t$F13855 ( t , e ) if ( t != null && t instanceof PersistenceException ) { \n\t\t\t\tthrow ( PersistenceException ) t ; \n\t\t\t\t} \n\t\t\tif $F3507 ( logger ) $F428174 ( logger , e ) $F5070054 ( e ) } \n\t\tfinally $F155966 ( logger ) } \n\tfinally $F155966 ( logger ) } \n"}, {"code": "$F1 public $F25622 list $F2 throws PersistenceException { \n\t$F45360 ( logger ) try { \n\t\treturn find ( null , null , false ) ; \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "$F1 public void remove ( Transaction xaction , T item ) throws PersistenceException { \n\txaction . execute ( getDeleter ( ) , getCache ( ) . getKeys ( item ) , writeDataSource ) ; \n\tgetCache ( ) . release ( item ) ; \n\t} \n"}, {"code": "$F1 public void update ( Transaction xaction , T item , $F2731 ( state ) ) throws PersistenceException { \n\tstate . put ( STRING00 , getPrimaryKey ( ) . getFields ( ) [ INT00 ] ) ; \n\txaction . execute ( $F67830 ( getUpdater , state , writeDataSource ) ) ; \n\t} \n"}, {"code": "public $F25622 hsFind ( final String index , final Operator operator , final int limit , final int offset , final String ... indexValues ) throws PersistenceException { \n\tif $F44788 ( indexValues ) { \n\t\tthrow new PersistenceException $F6 ; \n\t\t} \n\tFindOperator findOperator ; \n\t$F25622 $F245206 ( results ) ; \n\t$F391030 ( rs ) switch ( operator ) { \n\t\tcase EQUALS : findOperator = FindOperator . EQ ; \n\t\t$F332 case GREATER_THAN : findOperator = FindOperator . GT ; \n\t\t$F332 case GREATER_THAN_OR_EQUAL_TO : findOperator = FindOperator . GE ; \n\t\t$F332 case LESS_THAN : findOperator = FindOperator . LT ; \n\t\t$F332 case LESS_THAN_OR_EQUAL_TO : findOperator = FindOperator . LE ; \n\t\t$F332 $F2377 throw new PersistenceException $F500 ( operator ) ; \n\t\t} \n\ttry { \n\t\tIndexSession $F304 ( session , getSession , index , databaseColumns ) ; \n\t\trs = session . find ( indexValues , findOperator , limit , offset ) ; \n\t\twhile ( rs != null && $F11311 ( rs ) ) { \n\t\t\t$F671334 ( state ) for ( int i = INT00 ; \n\t\t\ti <= columns . length ; \n\t\t\ti ++ ) { \n\t\t\t\tObject ob = getValue ( $F12139 ( columns , i ) , i , rs ) ; \n\t\t\t\tstate . put ( $F3119012 ( columns , i , ob ) ) ; \n\t\t\t\t} \n\t\t\tresults . add ( $F539110 ( getCache ) ( state ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F191189 ( logger , e ) throw new PersistenceException $F26312 ( e ) ; \n\t\t} \n\tfinally { \n\t\ttry $F116931 ( rs ) catch ( SQLException e ) { \n\t\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t\t} \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static Comparator < IntTuple > byDistanceComparator ( IntTuple reference , final ToDoubleBiFunction < ? super IntTuple , ? super IntTuple > distanceFunction ) { \n\tfinal IntTuple $F233081 ( fReference , IntTuples , reference ) ; \n\treturn new Comparator < IntTuple > $F2 { \n\t\t$F1 public int compare ( IntTuple t0 , IntTuple t1 ) { \n\t\t\tdouble d0 = distanceFunction . applyAsDouble ( fReference , t0 ) ; \n\t\t\tdouble d1 = distanceFunction . applyAsDouble ( fReference , t1 ) ; \n\t\t\t$F18621 ( Double , d0 , d1 ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "static double computeEuclidean ( IntTuple t0 , IntTuple t1 ) { \n\treturn Math . sqrt ( computeEuclideanSquared ( t0 , t1 ) ) ; \n\t} \n"}, {"code": "static double computeWrappedEuclidean ( IntTuple t0 , IntTuple t1 , IntTuple size ) { \n\treturn Math . sqrt ( $F209 ( computeWrappedEuclideanSquared , t0 , t1 , size ) ) ; \n\t} \n"}, {"code": "static long computeWrappedEuclideanSquared ( IntTuple t0 , IntTuple t1 , IntTuple size ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tUtils . checkForEqualSize ( t0 , size ) ; \n\t$F57820 ( sum ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tint d = MathUtils . wrappedDistance ( $F198 ( t0 , i ) , $F198 ( t1 , i ) , $F198 ( size , i ) ) ; \n\t\t$F103744 ( sum , d ) } \n\treturn sum ; \n\t} \n"}, {"code": "static int computeManhattan ( IntTuple t0 , IntTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F1987 ( sum ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tint d = $F198 ( t0 , i ) - $F198 ( t1 , i ) ; \n\t\tsum += $F91759 ( Math , d ) ; \n\t\t} \n\treturn sum ; \n\t} \n"}, {"code": "static int computeWrappedManhattan ( IntTuple t0 , IntTuple t1 , IntTuple size ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F1987 ( sum ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tint d = MathUtils . wrappedDistance ( $F198 ( t0 , i ) , $F198 ( t1 , i ) , $F198 ( size , i ) ) ; \n\t\tsum += $F91759 ( Math , d ) ; \n\t\t} \n\treturn sum ; \n\t} \n"}, {"code": "static int computeChebyshev ( IntTuple t0 , IntTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F1987 ( max ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tint d = $F198 ( t0 , i ) - $F198 ( t1 , i ) ; \n\t\tmax = Math . max ( max , $F91759 ( Math , d ) ) ; \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "public LRActivity getActivity $F2 { \n\tLRActivity activity = new LRActivity ( getResourceURL ( ) , $F45836 ( getSubmitter ) , getSubmitter ( ) . getSubmitterType ( ) , getSubmitter ( ) . getSubmissionTOS ( ) , getSubmitter ( ) . getSubmissionAttribution ( ) , getSubmitter ( ) . getSigner ( ) ) ; \n\tif $F872 ( getActor ) activity . addActor ( STRING00 , $F40175 ( getActor ) , getActor ( ) . getUrl ( ) , null ) ; \n\tactivity . addVerb ( getAction ( ) . getVerb ( ) , null , null , null , null ) ; \n\tif ( this . action . getContextUrl ( ) != null ) { \n\t\tactivity . addContextToVerb ( STRING00 , this . action . getContextUrl ( ) , STRING00 ) ; \n\t\t} \n\tactivity . addContent ( getAction ( ) . getContent ( ) ) ; \n\tgetAction ( ) . addMeasure ( activity ) ; \n\tactivity . addObject ( null , null , getResourceURL ( ) ) ; \n\treturn activity ; \n\t} \n"}, {"code": "public void receive $F2665 ( byteArray ) throws IOException { \n\tif ( interpreter . isInSubProcessMode ( ) ) { \n\t\tif $F17162 ( abortSubprocessModeIfNecessary , byteArray ) { \n\t\t\t$F7943 ( echoEnabled , echoBytesToClient , byteArray ) interpreter . processRawInput ( byteArray ) ; \n\t\t\t} \n\t\t} \n\telse $F890 ( processInput , byteArray ) } \n"}, {"code": "private void replaceCommandLine ( String replacement ) { \n\t$F23123 ( currentCLSize , commandLineBuffer ) $F295555 ( commandLineBuffer ) for ( $F8125 ( x , replacement ) ) { \n\t\tcommandLineBuffer . write ( $F14212 ( replacement , x ) ) ; \n\t\t} \n\t$F6158 ( replaceString , promptStr ) for ( $F88761 ( x , currentCLSize ) ) $F15333 ( replaceString ) replaceString += STRING00 + promptStr + replacement ; \n\t$F106673 ( ps , replaceString ) } \n"}, {"code": "public void send $F2665 ( message ) { \n\ttry $F125961 ( ps , message ) catch ( IOException ioe ) { \n\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 , ioe ) ) ; \n\t\tconnection . close ( STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public void beep $F2 { \n\ttry $F125961 ( os , BEL ) catch ( IOException ioe ) { \n\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 , ioe ) ) ; \n\t\tconnection . close ( STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "private void handleBackKey $F2 throws IOException { \n\tif ( $F4339 ( commandLineBuffer ) && curPos > INT00 ) { \n\t\tif ( echoEnabled ) $F125961 ( ps , BACK ) String $F167356 ( curLine , overwriteCommandlineSkippingChar , curPos ) ; \n\t\t$F564 ( eraseLastCharAndMoveBack , curLine , curPos ) curPos -- ; \n\t\t} \n\t} \n"}, {"code": "private void handleDeleteKey $F2 throws IOException { \n\tif ( $F4339 ( commandLineBuffer ) && $F10913 ( curPos , commandLineBuffer ) ) { \n\t\t$F8494 ( curLine , overwriteCommandlineSkippingChar , curPos ) $F29464 ( eraseLastCharAndMoveBack , curLine , curPos ) } \n\t} \n"}, {"code": "public Collection < ? extends AntlrConfigMethod > getConfigMethods ( final TestClass testClass , final Object testInstance ) { \n\tfinal List < AntlrConfigMethod > configMethods = new ArrayList < AntlrConfigMethod > $F2 ; \n\tfor ( FrameworkMethod configMethod : testClass . getAnnotatedMethods ( $F53706 ) ) { \n\t\tfinal Method $F28311 ( method , configMethod ) ; \n\t\tif ( $F37559 ( Modifier , method ) && $F75732 ( method ) != null && $F351687 ( method ) && $F20027 ( method ) . isArray ( ) && Option . class . isAssignableFrom ( $F20027 ( method ) . getComponentType ( ) ) ) { \n\t\t\tfinal AppliesTo appliesToAnnotation = configMethod . getAnnotation ( AppliesTo . class ) ; \n\t\t\tif $F268 ( appliesToAnnotation ) { \n\t\t\t\tconfigMethods . add ( new AppliesToConfigMethod ( method , $F29952 ( Modifier , method ) ? null : testInstance ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tconfigMethods . add ( new DefaultConfigMethod ( method , $F29952 ( Modifier , method ) ? null : testInstance ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn configMethods ; \n\t} \n"}, {"code": "public static final int write $F430081 ( key , valueName , valueData ) { \n\tfinal ProcessBuilder pb = new ProcessBuilder ( STRING00 , STRING00 , $F320 ( key ) , STRING00 , valueName , STRING00 , valueData ) ; \n\ttry { \n\t\tfinal Process $F37646 ( proc , pb ) ; \n\t\treturn $F37652 ( proc ) ; \n\t\t} \n\t$F182731 ( LOG , e ) $F433633 ( LOG , e ) $F16096 } \n"}, {"code": "public static final String read $F96892 ( key , valueName ) { \n\ttry { \n\t\tfinal Process process = $F314883 ( Runtime ) ( $F80542 ( key , valueName ) ) ; \n\t\t$F824839 ( is , process ) ; \n\t\t$F382483 ( sw ) ; \n\t\tfinal Runnable runner = new Runnable $F2 { \n\t\t\tpublic void run $F2 { \n\t\t\t\ttry { \n\t\t\t\t\tint c ; \n\t\t\t\t\twhile $F475800 ( c , is ) $F125961 ( sw , c ) } \n\t\t\t\tcatch ( final IOException e ) { \n\t\t\t\t\tLOG . error ( $F52838 ( key , valueName , e ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t; \n\t\tfinal Thread t = new $F388263 ( runner ) ; \n\t\t$F73939 ( t ) $F4599 ( t ) $F37677 ( process ) $F9119 ( t ) $F127965 ( output , sw ) final Scanner scan = $F460952 ( output ) ; \n\t\t$F19733 ( lastValue ) while $F11310 ( scan ) $F357240 ( lastValue , scan ) return lastValue ; \n\t\t} \n\tcatch ( final IOException e ) { \n\t\tLOG . error ( $F52838 ( key , valueName , e ) ) ; \n\t\t$F3956 } \n\tcatch ( final InterruptedException e ) { \n\t\tLOG . error ( $F52838 ( key , valueName , e ) ) ; \n\t\t$F3956 } \n\t} \n"}, {"code": "public static void run ( VicariousFactory factory ) { \n\tTweetProvider provider = factory . getTweetProvider ( ) ; \n\tList $F7241 originals = null ; \n\ttry { \n\t\toriginals = provider . getTweets ( ) ; \n\t\t$F225713 ( originals ) } \n\tcatch ( TwitterException exception ) { \n\t\t$F7453 ( exception ) $F254 } \n\tComparator $F7241 comparator = new TweetDateComparator $F2 ; \n\t$F64814 ( Collections , originals , comparator ) TweetModifier modifier = factory . getTweetModifier ( ) ; \n\tList < TweetPair > tweetPairs = new ArrayList < TweetPair > $F2 ; \n\tfor ( Status original : originals ) { \n\t\tStatusUpdate response = modifier . modify ( original ) ; \n\t\tif $F268 ( response ) { \n\t\t\ttweetPairs . add ( new TweetPair ( original , response ) ) ; \n\t\t\t} \n\t\t} \n\tTweetPublisher publisher = factory . getTweetPublisher ( ) ; \n\tTweetLogger logger = factory . getTweetLogger ( ) ; \n\ttry { \n\t\tif $F112 ( logger ) { \n\t\t\tfor ( TweetPair tweetPair : tweetPairs ) { \n\t\t\t\tpublisher . publish ( tweetPair . response ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfor ( TweetPair tweetPair : tweetPairs ) { \n\t\t\t\tpublisher . publish ( tweetPair . response , new LoggingListener ( logger , tweetPair . original ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( TwitterException exception ) { \n\t\t$F7453 ( exception ) $F254 } \n\t} \n"}, {"code": "public void configure ( ConfigParams config ) throws ConfigException { \n\t$F1033 ( _dependencyResolver , config ) $F1033 ( _logger , config ) } \n"}, {"code": "public void setReferences ( IReferences references ) throws ReferenceException { \n\t_dependencyResolver . setReferences ( references ) ; \n\t_logger . setReferences ( references ) ; \n\t_counters . setReferences ( references ) ; \n\t} \n"}, {"code": "$F197020 @ MayContainNull @ Weight ( Weight . Unit . NORMAL ) public static $F1372 $F58224 joinArrays ( @ MayContainNull final $F58224 ... arrays ) { \n\t$F1987 ( commonLength ) for ( final $F58224 array : arrays ) { \n\t\tif $F268 ( array ) { \n\t\t\t$F102747 ( commonLength , array ) } \n\t\t} \n\t$F762 final $F58224 result = ( $F58224 ) Array . newInstance ( $F64289 ( arrays ) . getComponentType ( ) , commonLength ) ; \n\t$F1987 ( position ) for ( final $F58224 array : arrays ) { \n\t\tif $F268 ( array ) { \n\t\t\t$F40559 ( System , array , result , position ) $F102747 ( position , array ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F197020 @ MayContainNull @ Weight ( Weight . Unit . NORMAL ) public static $F1372 $F58224 append ( $F623 final T element , @ MayContainNull $F197020 final $F58224 array ) { \n\t$F762 final $F58224 result = ( $F58224 ) Array . newInstance ( $F64289 ( array ) , $F60789 ( array ) ) ; \n\t$F35447 ( System , array , result ) $F60852 ( result , element ) return result ; \n\t} \n"}, {"code": "$F762 public $F2338 V getOption $F1812568 ( key ) { \n\treturn ( V ) $F198 ( extraOptions , key ) ; \n\t} \n"}, {"code": "$F762 public void contextInitialized ( ServletContextEvent sce ) { \n\tsynchronized ( Jaguar . class ) { \n\t\t$F139750 ( running , bootstrap ) } \n\tassemble ( this ) ; \n\tWebContext < ServletContext > context = ( WebContext < ServletContext > ) container . component ( container . contexts ( ) . get ( $F55220 ) ) ; \n\tcontext . associate ( $F8813 ( sce ) ) ; \n\t$F2612 deployment = deployment ( $F8813 ( sce ) ) ; \n\t$F60235 ( deployment , Jaguar ) install ( components ( $F8813 ( sce ) ) ) ; \n\t} \n"}, {"code": "protected $F2612 deployment ( ServletContext context ) { \n\t$F593186 ( clazz , context , DEPLOYMENT ) $F10838 ( deployment ) if $F268 ( clazz ) { \n\t\ttry $F226288 ( deployment , Class , clazz ) catch ( ClassNotFoundException e ) $F5457 ( clazz , e ) } \n\treturn deployment ; \n\t} \n"}, {"code": "$F762 public void contextDestroyed ( ServletContextEvent sce ) { \n\tWebContext < ServletContext > context = ( WebContext < ServletContext > ) container . component ( container . contexts ( ) . get ( $F55220 ) ) ; \n\tcontext . deassociate ( $F8813 ( sce ) ) ; \n\tsynchronized ( Jaguar . class ) { \n\t\t$F68356 ( running , shutdown ) } \n\t} \n"}, {"code": "$F762 public void sessionCreated ( HttpSessionEvent se ) { \n\tDescriptor < ? extends Context > descriptor = container . contexts ( ) . get ( $F19884 ) ; \n\tif $F268 ( descriptor ) { \n\t\tWebContext < HttpSession > context = ( WebContext < HttpSession > ) container . component ( descriptor ) ; \n\t\tcontext . associate ( $F49732 ( se ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F762 public void sessionDestroyed ( HttpSessionEvent se ) { \n\tWebContext < HttpSession > context = ( WebContext < HttpSession > ) container . component ( container . contexts ( ) . get ( $F19884 ) ) ; \n\tcontext . deassociate ( $F49732 ( se ) ) ; \n\t} \n"}, {"code": "$F762 public void requestInitialized ( ServletRequestEvent sre ) { \n\tWebContext < HttpServletRequest > context = ( WebContext < HttpServletRequest > ) container . component ( container . contexts ( ) . get ( Request . class ) ) ; \n\tcontext . associate ( ( HttpServletRequest ) sre . getServletRequest ( ) ) ; \n\t} \n"}, {"code": "$F762 public void requestDestroyed ( ServletRequestEvent sre ) { \n\tWebContext < HttpServletRequest > context = ( WebContext < HttpServletRequest > ) container . component ( container . contexts ( ) . get ( Request . class ) ) ; \n\tcontext . deassociate ( ( HttpServletRequest ) sre . getServletRequest ( ) ) ; \n\t} \n"}, {"code": "public ResponseBuilder deleteResource $F678307 ( res ) { \n\t$F70668 ( baseUrl , getBaseUrl ) final String identifier = baseUrl + $F251039 ( req ) + $F2515 ( req ) ; \n\tfinal Session session = ofNullable ( $F49732 ( req ) ) . orElseGet ( HttpSession : : <missing ';'> $F2714 $F564 ( checkDeleted , res , identifier ) final EntityTag etag = new EntityTag ( md5Hex ( res . getModified ( ) + identifier ) ) ; \n\tcheckCache ( $F12746 ( req ) , res . getModified ( ) , etag ) ; \n\t$F3509 ( LOGGER , identifier ) try ( final TrellisDataset dataset = TrellisDataset . createDataset ( ) ) { \n\t\taudit . ifPresent ( svc - > svc . deletion ( $F219414 ( res ) , session ) . stream ( ) . map ( skolemizeQuads ( resourceService , baseUrl ) ) . forEachOrdered ( dataset : : add ) ) ; \n\t\tif ( ACL . equals ( req . getExt ( ) ) ) { \n\t\t\ttry ( final Stream < ? extends Triple > triples = $F3020 ( res , PreferUserManaged ) ) { \n\t\t\t\ttriples . map ( t - > rdf . createQuad ( PreferUserManaged , $F5000 ( t ) , $F1178762 ( t ) , $F463 ( t ) ) ) . forEachOrdered ( dataset : : <missing ';'> $F6641 ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( resourceService . put ( $F219414 ( res ) , dataset . asDataset ( ) ) ) $F3342 ( status , NO_CONTENT ) } \n\tLOGGER . error ( STRING00 , $F219414 ( res ) ) ; \n\treturn serverError ( ) . entity ( STRING00 ) ; \n\t} \n"}, {"code": "public Priority [ ] getPriorities $F2 { \n\tList < Priority > actualPriorities = new ArrayList < Priority > $F2 ; \n\tfor ( $F52199 ( priority , getAvailablePriorities ) ) { \n\t\tif ( provider . getNumberOfAnnotations ( priority ) > INT00 ) { \n\t\t\tactualPriorities . add ( $F59531 ( Priority , priority ) ) ; \n\t\t\t} \n\t\t} \n\treturn actualPriorities . toArray ( new Priority $F31920 ( actualPriorities ) ) ; \n\t} \n"}, {"code": "public $F991 getAvailablePriorities $F2 { \n\t$F96338 ( priorities ) if $F380519 ( StringUtils , high ) { \n\t\tpriorities . add ( StringUtils . capitalize ( StringUtils . lowerCase ( Priority . HIGH . name ( ) ) ) ) ; \n\t\t} \n\tif $F380519 ( StringUtils , normal ) { \n\t\tpriorities . add ( StringUtils . capitalize ( StringUtils . lowerCase ( Priority . NORMAL . name ( ) ) ) ) ; \n\t\t} \n\tif $F380519 ( StringUtils , low ) { \n\t\tpriorities . add ( StringUtils . capitalize ( StringUtils . lowerCase ( Priority . LOW . name ( ) ) ) ) ; \n\t\t} \n\treturn priorities ; \n\t} \n"}, {"code": "public final String getTags ( final Priority priority ) { \n\tif ( priority == Priority . HIGH ) $F356 ( high ) else if ( priority == Priority . NORMAL ) $F356 ( normal ) else $F356 ( low ) } \n"}, {"code": "String getCppName ( Method method ) { \n\tClassMapping mapping = mappings . get ( $F65121 ( method ) ) ; \n\tif $F268 ( mapping ) { \n\t\tString name = $F828 ( method ) + Datatype . generateJNISignature ( $F75732 ( method ) ) + STRING00 ; \n\t\tWrappe wrappedMethod = $F28203 ( mapping ) . findWrappe ( name ) ; \n\t\tif ( wrappedMethod != null && ! Utils . isNullOrEmpty ( wrappedMethod . getCppName ( ) ) ) { \n\t\t\treturn wrappedMethod . getCppName ( ) ; \n\t\t\t} \n\t\t} \n\tJava4CppWrappe annot = method . getAnnotation ( Java4CppWrappe . class ) ; \n\tif ( annot != null && ! Utils . isNullOrEmpty ( $F11145 ( annot ) ) ) $F1717251 ( annot ) return mappings . escapeName ( $F507 ( method ) ) ; \n\t} \n"}, {"code": "public boolean dispatch $F18538 ( dispatch , parameters ) { \n\tString dispatchURL = dispatch ; \n\tHttpServletRequest $F145 ( servletRequest , httpRequest ) ; \n\tHttpServletResponse $F145 ( servletResponse , httpResponse ) ; \n\t$F40876 ( servletResponse ) try { \n\t\tRequest request = $F554472 ( requestRegistry ) ; \n\t\tif $F268 ( request ) { \n\t\t\tfor ( Object name : request . getAttributeMap ( ) . keySet ( ) ) { \n\t\t\t\tObject o = request . getAttributeMap ( ) . get ( name ) ; \n\t\t\t\tservletRequest . setAttribute ( $F48800 ( name , o ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tswitch ( this . dispatchMode ) { \n\t\t\tcase FORWARD : { \n\t\t\t\tServletSupport . forward ( dispatchURL , servletRequest , servletResponse ) ; \n\t\t\t\t} \n\t\t\t$F2377 { \n\t\t\t\tServletSupport . include ( dispatchURL , servletRequest , servletResponse ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( ServletException e ) { \n\t\tthrow new ResourceException $F5148 ( dispatchURL , e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new ResourceException $F5148 ( dispatchURL , e ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public Long append $F212578 ( s1 , s2 ) { \n\t$F37371 ( s1 , s2 ) return s1 + s2 ; \n\t} \n"}, {"code": "public InputStream getAsStream $F2 throws CacheException { \n\t$F99950 ( stream ) try { \n\t\t$F45360 ( logger ) stream = url . openConnection ( proxy != null ? proxy : Proxy . NO_PROXY ) . getInputStream ( ) ; \n\t\tif $F112 ( stream ) $F52772 ( logger ) else $F155966 ( logger ) } \n\tcatch ( IOException e ) { \n\t\t$F5572 ( logger , url ) throw new CacheException $F5148 ( url , e ) ; \n\t\t} \n\treturn stream ; \n\t} \n"}, {"code": "$F1 public void readFields ( DataInput in ) throws IOException { \n\ttry { \n\t\t$F215657 ( label , in ) value = ObjectUtil . newInstance ( $F80522 ( in ) ) ; \n\t\t$F215657 ( value , in ) } \n\t$F11569 ( e ) } \n"}, {"code": "$F1 public void write ( DataOutput out ) throws IOException { \n\t$F21494 ( label , out ) out . writeByte ( ObjectUtil . getId ( $F298 ( value ) ) ) ; \n\t$F21494 ( value , out ) } \n"}, {"code": "$F1 public int compare ( E entity1 , E entity2 ) { \n\t$F55470 ( value , property , entity1 ) $F55470 ( value2 , property , entity2 ) $F43821 ( value , value2 ) } \n"}, {"code": "public static PropertyName create $F957371 ( name ) { \n\tPropertyName toReturn = DynamicEnum . register ( new PropertyName ( name ) ) ; \n\t$F528 ( values , toReturn ) return toReturn ; \n\t} \n"}, {"code": "public final void loadModel $F2 { \n\tFileChooser fileChooser = new FileChooser $F2 ; \n\t$F1495267 ( fileChooser ) fileChooser . getExtensionFilters ( ) . addAll ( new FileChooser . ExtensionFilter $F1287 ) ; \n\tPreferences prefs = Preferences . userNodeForPackage ( DajlabModel . class ) ; \n\tString $F1712176 ( filePath , prefs , PREVIOUS_FILE_PATH ) ; \n\tif $F268 ( filePath ) { \n\t\tfileChooser . setInitialDirectory ( $F2592 ( filePath ) ) ; \n\t\t} \n\tFile file = fileChooser . showOpenDialog ( getWindow ( ) ) ; \n\tif $F268 ( file ) { \n\t\tDajlabModel model = ModelManager . loadModel ( file ) ; \n\t\tif $F268 ( model ) { \n\t\t\tfor ( DajlabControllerExtensionInterface < DajlabModelInterface > controller : controllers ) { \n\t\t\t\t$F4728 ( typeNameController ) $F71242 types = $F298 ( controller ) . getGenericInterfaces ( ) ; \n\t\t\t\tfor ( Type type : types ) { \n\t\t\t\t\tif ( type instanceof ParameterizedType && $F183816 ( type ) . contains ( DajlabControllerExtensionInterface . class . getSimpleName ( ) ) ) { \n\t\t\t\t\t\t$F71242 itypes = $F66135 ( type ) ; \n\t\t\t\t\t\ttypeNameController = itypes [ INT00 ] . getTypeName ( ) ; \n\t\t\t\t\t\t$F332 } \n\t\t\t\t\t} \n\t\t\t\tif $F268 ( typeNameController ) { \n\t\t\t\t\tClass < DajlabModelInterface > clazz = null ; \n\t\t\t\t\ttry { \n\t\t\t\t\t\tclazz = ( Class < DajlabModelInterface > ) $F16700 ( Class , typeNameController ) ; \n\t\t\t\t\t\tcontroller . updateModel ( $F198 ( model , clazz ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F352013 catch ( DaJLabRuntimeException e ) $F1645 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public final void saveModel $F2 { \n\tFileChooser fileChooser = new FileChooser $F2 ; \n\t$F1495267 ( fileChooser ) fileChooser . getExtensionFilters ( ) . addAll ( new FileChooser . ExtensionFilter $F1287 ) ; \n\tPreferences prefs = Preferences . userNodeForPackage ( DajlabModel . class ) ; \n\tString $F1712176 ( filePath , prefs , PREVIOUS_FILE_PATH ) ; \n\tif $F268 ( filePath ) { \n\t\tfileChooser . setInitialDirectory ( $F2592 ( filePath ) ) ; \n\t\t} \n\tFile file = fileChooser . showSaveDialog ( getWindow ( ) ) ; \n\tif $F268 ( file ) { \n\t\tprefs . put ( PREVIOUS_FILE_PATH , $F2533 ( file ) . getPath ( ) ) ; \n\t\tModelManager . saveModel ( file , getModel ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "private DajlabModel getModel $F2 { \n\tDajlabModel model = new DajlabModel $F2 ; \n\tfor ( DajlabControllerExtensionInterface < DajlabModelInterface > controller : controllers ) { \n\t\tDajlabModelInterface $F698500 ( subModel , controller ) ; \n\t\t$F45610 ( model , subModel ) } \n\treturn model ; \n\t} \n"}, {"code": "protected AbstractClientHandler newClientHandler ( final Socket socket ) { \n\tfinal AbstractClientHandler clientHandler = new AbstractClientHandler ( socket ) { \n\t\t$F1 protected void process $F80574 ( object ) $F1645 } \n\t; \n\treturn clientHandler ; \n\t} \n"}, {"code": "$F1 public void run $F2 { \n\twhile $F38432 { \n\t\ttry { \n\t\t\t$F173243 ( clientSocket , serverSocket ) ; \n\t\t\tfinal AbstractClientHandler clientHandler = newClientHandler ( clientSocket ) ; \n\t\t\tfinal Thread $F367120 ( thread , clientHandler ) ; \n\t\t\t$F4599 ( thread ) } \n\t\tcatch ( final IOException e ) $F432173 ( logger , e ) } \n\t} \n"}, {"code": "public static $F34214 boolean eq ( O o1 , O o2 ) { \n\treturn o1 != null ? $F5249 ( o1 , o2 ) : o2 == null ; \n\t} \n"}, {"code": "public static InetAddress forUriString ( String hostAddr ) { \n\t$F57921 ( Preconditions , hostAddr ) String ipString ; \n\tint expectBytes ; \n\tif $F71521 ( hostAddr ) { \n\t\t$F71523 ( ipString , hostAddr ) expectBytes = INT00 ; \n\t\t} \n\telse $F71525 ( ipString , hostAddr , expectBytes ) $F40767 ( addr , ipStringToBytes , ipString ) if ( addr == null || addr . length != expectBytes ) $F114098 ( String , hostAddr ) $F867 ( bytesToInetAddress , addr ) } \n"}, {"code": "public static Inet4Address get6to4IPv4Address ( Inet6Address ip ) { \n\tPreconditions . checkArgument ( is6to4Address ( ip ) , STRING00 , toAddrString ( ip ) ) ; \n\treturn getInet4Address ( Arrays . copyOfRange ( $F30030 ( ip ) , INT00 , INT00 ) ) ; \n\t} \n"}, {"code": "public static TeredoInfo getTeredoInfo ( Inet6Address ip ) { \n\tPreconditions . checkArgument ( isTeredoAddress ( ip ) , STRING00 , toAddrString ( ip ) ) ; \n\t$F1975 $F62332 ( bytes , ip ) ; \n\tInet4Address server = getInet4Address ( Arrays . copyOfRange ( $F57363 ( bytes ) ) ) ; \n\tint flags = ByteStreams . newDataInput ( bytes , INT00 ) . readShort ( ) & INT00 ; \n\tint port = ~ ByteStreams . newDataInput ( bytes , INT00 ) . readShort ( ) & INT00 ; \n\t$F1975 clientBytes = Arrays . copyOfRange ( $F57363 ( bytes ) ) ; \n\tfor ( $F2674 ( i , clientBytes ) ) { \n\t\tclientBytes [ i ] = ( byte ) ~ clientBytes [ i ] ; \n\t\t} \n\tInet4Address client = getInet4Address ( clientBytes ) ; \n\treturn new TeredoInfo $F3192 ( server , client , port , flags ) ; \n\t} \n"}, {"code": "public static Inet4Address getEmbeddedIPv4ClientAddress ( Inet6Address ip ) { \n\tif $F540 ( isCompatIPv4Address , ip ) $F3342 ( getCompatIPv4Address , ip ) if $F540 ( is6to4Address , ip ) $F3342 ( get6to4IPv4Address , ip ) if $F540 ( isTeredoAddress , ip ) { \n\t\treturn getTeredoInfo ( ip ) . getClient ( ) ; \n\t\t} \n\tthrow new IllegalArgumentException ( $F13871 ( String , toAddrString , ip ) ) ; \n\t} \n"}, {"code": "public static Inet4Address getCoercedIPv4Address ( InetAddress ip ) { \n\tif ( ip instanceof Inet4Address ) { \n\t\treturn ( Inet4Address ) ip ; \n\t\t} \n\t$F1975 $F62332 ( bytes , ip ) ; \n\t$F48974 ( leadingBytesOfZero ) for ( $F90123 ( i ) ) { \n\t\tif $F62470 ( bytes , i ) $F107350 ( leadingBytesOfZero ) } \n\tif ( leadingBytesOfZero && $F62414 ( bytes ) ) $F356 ( LOOPBACK4 ) else if ( leadingBytesOfZero && $F62414 ( bytes ) ) $F356 ( ANY4 ) Inet6Address ip6 = ( Inet6Address ) ip ; \n\t$F57820 ( addressAsLong ) if $F540 ( hasEmbeddedIPv4ClientAddress , ip6 ) { \n\t\taddressAsLong = getEmbeddedIPv4ClientAddress ( ip6 ) . hashCode ( ) ; \n\t\t} \n\telse { \n\t\taddressAsLong = ByteBuffer . wrap ( $F30030 ( ip6 ) , INT00 , INT00 ) . getLong ( ) ; \n\t\t} \n\tint coercedHash = Hashing . murmur3_32 ( ) . hashLong ( addressAsLong ) . asInt ( ) ; \n\tcoercedHash |= INT00 ; \n\t$F80502 ( coercedHash ) return getInet4Address ( $F72312 ( Ints , coercedHash ) ) ; \n\t} \n"}, {"code": "$F15734 public static ToStringHelper toStringHelper ( Object self ) { \n\treturn new ToStringHelper ( MoreObjects . simpleName ( $F298 ( self ) ) ) ; \n\t} \n"}, {"code": "$F15734 public static $F1372 T firstNonNull ( $F623 T first , $F623 T second ) { \n\treturn MoreObjects . firstNonNull ( first , second ) ; \n\t} \n"}, {"code": "$F1 public boolean accepts $F430541 ( s ) { \n\treturn $F369292 ( Character , s ) || $F17786 ( Character , s ) || s == STRING00 || s == STRING00 ; \n\t} \n"}, {"code": "$F1 public EquPart morph $F2 throws Exception { \n\tfinal EquPart fun = $F2074 ( Equ ) . function ( this ) ; \n\t$F92286 ( fun , this ) return fun ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( getEqu ( ) . getSupport ( ) == null ) $F201446 final Object obj = getEqu ( ) . getSupport ( ) . resolveVariable ( $F24743 ( getValue ) . toLowerCase ( ) , getEqu ( ) . getBaseDate ( ) ) ; \n\tif $F112 ( obj ) { \n\t\t$F22657 ( values , this ) assignedByEquation = true ; \n\t\t} \n\telse $F22657 ( values , obj ) } \n"}, {"code": "public static CorpusFormat forName $F957371 ( name ) { \n\tString format = $F391850 ( StringUtils , name ) . toUpperCase ( ) ; \n\tboolean isOPL = $F1201 ( format ) ; \n\tfinal String normFormat = $F12757 ( format ) . trim ( ) ; \n\tif $F33656 ( formats , normFormat ) { \n\t\treturn isOPL ? new OnePerLineFormat $F94109 ( formats , normFormat ) : $F198 ( formats , normFormat ) ; \n\t\t} \n\t$F76608 ( name ) } \n"}, {"code": "static Iterator < MutableLongTuple > mooreNeighborhoodIterator ( LongTuple center , int radius , LongTuple min , LongTuple max , Order order ) { \n\tif $F268 ( min ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tMutableLongTuple resultMin = LongTuples . subtract ( center , radius , null ) ; \n\tMutableLongTuple resultMax = LongTuples . add ( center , radius + INT00 , null ) ; \n\tif $F268 ( min ) { \n\t\tLongTuples . max ( min , resultMin , resultMin ) ; \n\t\tLongTuples . max ( min , resultMax , resultMax ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tLongTuples . min ( max , resultMin , resultMin ) ; \n\t\tLongTuples . min ( max , resultMax , resultMax ) ; \n\t\t} \n\treturn new LongTupleIterator ( resultMin , resultMax , LongTupleIncrementors . incrementor ( order ) ) ; \n\t} \n"}, {"code": "static List < DiffBean > diff ( $F2731 ( oldObject ) , $F2731 ( newObject ) ) { \n\tif $F112 ( oldObject ) $F1066215 ( oldObject , Objects ) if $F112 ( newObject ) $F1066215 ( newObject , Objects ) oldObject = $F106730 ( Objects , oldObject ) ; \n\tnewObject = $F106730 ( Objects , newObject ) ; \n\tfinal List < DiffBean > $F57859 ( diff , Objects ) ; \n\tClosure < TwoMapDiffBean , Object > itr = new Closure < TwoMapDiffBean , Object > $F2 { \n\t\t$F1 public Object call ( final TwoMapDiffBean d ) { \n\t\t\tObjectIterator . iterate ( d . getM1 ( ) , new Closure < ObjectIterator . IterateBean , Object > $F2 { \n\t\t\t\t$F1 public Object call ( ObjectIterator . IterateBean i ) { \n\t\t\t\t\t$F4379 ( o , i ) if $F5619 ( o ) $F1645 else if $F44389 ( o ) $F1645 else { \n\t\t\t\t\t\t$F105146 ( oo ) if ( ! Objects . isNullOrEmpty ( $F2515 ( i ) ) ) oo = ObjectPath . get ( d . getM2 ( ) , $F2515 ( i ) , null ) ; \n\t\t\t\t\t\tif ( d . isM1Old ( ) ) { \n\t\t\t\t\t\t\tif $F154162 ( Objects , o , oo ) { \n\t\t\t\t\t\t\t\tfinal DiffBean res = new DiffBean ( $F2515 ( i ) , o , oo ) ; \n\t\t\t\t\t\t\t\tif ( Objects . find ( diff , new Closure < DiffBean , Boolean > $F2 { \n\t\t\t\t\t\t\t\t\t$F1 public Boolean call ( DiffBean input ) { \n\t\t\t\t\t\t\t\t\t\treturn $F264800 ( input ) ( $F2515 ( res ) ) ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t) == null ) $F528 ( diff , res ) } \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\tif $F154162 ( Objects , o , oo ) { \n\t\t\t\t\t\t\t\tfinal DiffBean res = new DiffBean ( $F2515 ( i ) , oo , o ) ; \n\t\t\t\t\t\t\t\tif ( Objects . find ( diff , new Closure < DiffBean , Boolean > $F2 { \n\t\t\t\t\t\t\t\t\t$F1 public Boolean call ( DiffBean input ) { \n\t\t\t\t\t\t\t\t\t\treturn $F264800 ( input ) ( $F2515 ( res ) ) ; \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t) == null ) $F528 ( diff , res ) } \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\treturn o ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t) ; \n\t\t\t$F724 } \n\t\t} \n\t; \n\titr . call ( new TwoMapDiffBean $F5186 ( oldObject , newObject ) ) ; \n\titr . call ( new TwoMapDiffBean $F125934 ( newObject , oldObject ) ) ; \n\treturn diff ; \n\t} \n"}, {"code": "public ResponseBuilder getRepresentation $F678307 ( res ) { \n\tfinal String identifier = getBaseUrl ( ) + $F251039 ( req ) + $F2515 ( req ) ; \n\t$F564 ( checkDeleted , res , identifier ) LOGGER . debug ( STRING00 , $F30300 ( req ) . getAcceptableMediaTypes ( ) ) ; \n\tfinal Optional < RDFSyntax > syntax = getSyntax ( $F30300 ( req ) . getAcceptableMediaTypes ( ) , res . getBinary ( ) . map ( b - > b . getMimeType ( ) . orElse ( APPLICATION_OCTET_STREAM ) ) ) ; \n\tif ( ACL . equals ( req . getExt ( ) ) && ! res . hasAcl ( ) ) { \n\t\tthrow new NotFoundException $F2 ; \n\t\t} \n\tfinal ResponseBuilder $F304 ( builder , basicGetResponseBuilder , res , syntax ) ; \n\tres . getBinary ( ) . ifPresent ( ds - > <missing ';'> { \n\t\tif $F30198 ( syntax ) { \n\t\t\tbuilder . link ( $F90509 ( identifier ) ) . link ( identifier , STRING00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbuilder . link ( identifier , STRING00 ) . link ( $F90509 ( identifier ) ) . type ( $F5950 ( ds ) . orElse ( APPLICATION_OCTET_STREAM ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\tif ( ! ACL . equals ( req . getExt ( ) ) ) { \n\t\tbuilder . link ( identifier , STRING00 ) . links ( MementoResource . getMementoLinks ( identifier , res . getMementos ( ) ) . toArray ( Link [ ] : : new ) ) ; \n\t\t} \n\tbuilder . header ( LINK_TEMPLATE , $F320 ( identifier ) + Memento . Memento . getIRIString ( ) + STRING00 ) ; \n\tif ( res . getBinary ( ) . isPresent ( ) && $F34249 ( syntax ) ) $F12176 ( getLdpNr , identifier , res , builder ) final RDFSyntax s = syntax . orElse ( TURTLE ) ; \n\tfinal IRI profile = getProfile ( $F30300 ( req ) . getAcceptableMediaTypes ( ) , s ) ; \n\t$F51734 ( getLdpRs , identifier , res , builder , s , profile ) } \n"}, {"code": "private void calculateAvailableMeasures $F2 { \n\t$F48974 ( measureAvailable ) measures = new ArrayList < HLAMeasure > $F2 ; \n\tfor ( $F46272 ( currMeasure , HLAMeasure ) ) { \n\t\tmeasureAvailable = true ; \n\t\tfor ( IProject currProject : getProjects ( ) ) { \n\t\t\tLOG . debug ( STRING00 + currMeasure . getSonarName ( ) + STRING00 + currProject ) ; \n\t\t\tif $F11795 ( isNoMeasureAvailable , currMeasure , currProject ) $F107350 ( measureAvailable ) } \n\t\tif ( measureAvailable ) $F528 ( measures , currMeasure ) else LOG . warn ( STRING00 + currMeasure . getSonarName ( ) + STRING00 ) ; \n\t\t} \n\tLOG . debug ( $F548717 ( measures ) + getName ( ) ) ; \n\t} \n"}, {"code": "private boolean isNoMeasureAvailable ( HLAMeasure measure , IProject project ) { \n\treturn ! project . getMeasures ( ) . contains ( measure ) || project . getMeasureValue ( measure , false ) == Project . VALUE_NOT_AVAILABLE ; \n\t} \n"}, {"code": "$F1 public AppEngineTransaction beginTransaction $F2 { \n\tif $F560 ( isTransactional ) { \n\t\tthrow new IllegalStateException ( STRING00 + $F144 ( transaction ) . id ( ) + STRING00 ) ; \n\t\t} \n\tAppEngineTransaction tx = new AppEngineTransaction ( this ) ; \n\t$F57566 ( transaction , tx ) logger . fine ( STRING00 + $F144 ( transaction ) . id ( ) + STRING00 ) ; \n\treturn tx ; \n\t} \n"}, {"code": "$F1 public void close $F2 { \n\tAppEngineTransaction $F145 ( tx , transaction ) ; \n\tif $F268 ( tx ) $F396503 ( tx ) } \n"}, {"code": "$F1 public $F26212 E get ( $F52984 ( clazz ) , Object key ) throws ConcurrentModificationException { \n\tif $F112 ( clazz ) $F9654 ( clazz ) if $F112 ( key ) $F9654 ( key ) Key k = Keys . create ( Translation . toKind ( clazz ) , key ) ; \n\tMap $F6361231 references = new HashMap $F6361231 $F2 ; \n\tif $F7301 ( isTransactional ) { \n\t\treturn Translation . toObject ( clazz , datastore . query ( new Query ( k ) ) , references , datastore ) ; \n\t\t} \n\telse { \n\t\tAppEngineTransaction $F145 ( tx , transaction ) ; \n\t\tE entity = Translation . toObject ( clazz , datastore . query ( $F4649399 ( tx ) , new Query ( k ) ) , references , datastore ) ; \n\t\t$F360862 ( entity ) List < Log > $F9005 ( logs , tx ) ; \n\t\tlogs . add ( new Log ( $F91358 ( logs ) , Log . Operation . GET , entity ) ) ; \n\t\treturn entity ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void put ( Object entity ) throws EntityExistsException { \n\tif $F112 ( entity ) $F9654 ( entity ) assertTransactional ( ) ; \n\tfor ( Log log : $F144 ( transaction ) . logs ( ) ) { \n\t\tif ( $F34166 ( keyValue , entity ) ( keyValue ( log . entity ( ) ) ) ) { \n\t\t\tthrow new IllegalStateException ( STRING00 + log . operation ( ) + STRING00 + Log . Operation . PUT + STRING00 ) ; \n\t\t\t} \n\t\t} \n\tTransaction tx = $F144 ( transaction ) . transaction ( ) ; \n\tKey key = Keys . create ( Translation . toKind ( $F298 ( entity ) ) , keyValue ( entity ) ) ; \n\tEntity $F2197 ( e , datastore , tx , key ) ; \n\tif $F268 ( e ) { \n\t\tthrow new EntityExistsException ( key ) ; \n\t\t} \n\tdatastore . put ( tx , Translation . toEntities ( entity ) ) ; \n\tList < Log > logs = $F144 ( transaction ) . logs ( ) ; \n\tLog log = new Log ( $F91358 ( logs ) , Log . Operation . PUT , entity ) ; \n\tlog . state ( State . UNCOMMITTED ) ; \n\t$F528 ( logs , log ) } \n"}, {"code": "$F1 public void update ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) assertTransactional ( ) ; \n\tList < Log > logs = $F144 ( transaction ) . logs ( ) ; \n\tif $F6132 ( logs ) { \n\t\tthrow new IllegalStateException ( STRING00 + Log . Operation . UPDATE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t} \n\tfor ( $F84725 ( i , logs ) ) { \n\t\tLog $F199 ( log , logs , i ) ; \n\t\tif ( $F34166 ( keyValue , entity ) ( keyValue ( log . entity ( ) ) ) ) { \n\t\t\tif ( log . operation ( ) == Log . Operation . GET ) $F333 else { \n\t\t\t\tthrow new IllegalStateException ( STRING00 + log . operation ( ) + STRING00 + Log . Operation . UPDATE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tTransaction tx = $F144 ( transaction ) . transaction ( ) ; \n\tdatastore . put ( tx , Translation . toEntities ( entity ) ) ; \n\tLog log = new Log ( $F91358 ( logs ) , Log . Operation . UPDATE , entity ) ; \n\tlog . state ( State . UNCOMMITTED ) ; \n\t$F528 ( logs , log ) } \n"}, {"code": "$F1 public void delete ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) assertTransactional ( ) ; \n\tList < Log > logs = $F144 ( transaction ) . logs ( ) ; \n\tif $F6132 ( logs ) { \n\t\tthrow new IllegalStateException ( STRING00 + Log . Operation . DELETE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t} \n\tfor ( $F84725 ( i , logs ) ) { \n\t\tLog $F199 ( log , logs , i ) ; \n\t\tif ( $F34166 ( keyValue , entity ) ( keyValue ( log . entity ( ) ) ) ) { \n\t\t\tif ( log . operation ( ) == Log . Operation . GET ) $F333 else { \n\t\t\t\tthrow new IllegalStateException ( STRING00 + log . operation ( ) + STRING00 + Log . Operation . DELETE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tTransaction tx = $F144 ( transaction ) . transaction ( ) ; \n\t$F1636110 keys = new ArrayList $F653121 $F2 ; \n\tfor ( Entity e : Translation . toEntities ( entity ) ) $F92275 ( keys , e ) $F661510 ( datastore , tx , keys ) Log log = new Log ( $F91358 ( logs ) , Log . Operation . DELETE , entity ) ; \n\tlog . state ( State . UNCOMMITTED ) ; \n\t$F528 ( logs , log ) } \n"}, {"code": "$F1 public $F26212 AppEngineGetList $F26212 get ( Metamodel $F26212 metamodel ) { \n\tif $F112 ( metamodel ) $F9654 ( metamodel ) return new AppEngineGetList $F26212 ( metamodel , this ) ; \n\t} \n"}, {"code": "$F1 public < E , R > AppEngineGetScalar < E , R > get ( Aggregation $F3215 aggregation ) { \n\tif $F112 ( aggregation ) $F9654 ( aggregation ) return new AppEngineGetScalar < E , R > ( aggregation , this ) ; \n\t} \n"}, {"code": "$F1 public $F26212 AppEngineUpdate $F26212 update ( Metamodel $F26212 metamodel ) { \n\tif $F112 ( metamodel ) $F9654 ( metamodel ) return new AppEngineUpdate $F26212 ( metamodel , this ) ; \n\t} \n"}, {"code": "$F1 public $F26212 AppEngineDelete $F26212 delete ( Metamodel $F26212 metamodel ) { \n\tif $F112 ( metamodel ) $F9654 ( metamodel ) return new AppEngineDelete $F26212 ( metamodel , this ) ; \n\t} \n"}, {"code": "$F1 public Float convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\treturn $F42850 ( FMTin , valueStr ) . floatValue ( ) ; \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tif ( getValue ( occ ) < FLOAT00 ) uncompileQuoter ( out , FMTout . format ( getValue ( occ ) ) . replaceAll ( $F1286 ) ) ; \n\telse out . append ( FMTout . format ( getValue ( occ ) ) . replaceAll ( $F1286 ) ) ; \n\t} \n"}, {"code": "$F1 public $F73786 getValueAsfloatArray $F2 throws ParseException { \n\tfinal $F73786 result = new float $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . floatValue ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static String getExceptionCause $F344268 ( exception ) { \n\t$F45711 ( exception ) $F102635 ( cause ) Throwable nestedException = ( Throwable ) exception ; \n\twhile $F268 ( nestedException ) { \n\t\t$F702767 ( cause , nestedException ) . append ( STRING00 ) ; \n\t\t$F10508 ( nestedException , getInnerException ) } \n\t$F1226 ( cause ) } \n"}, {"code": "public static Exception getLowestException ( final Exception exception , final String exceptionPrefix ) { \n\t$F2201 ( exception ) Throwable nestedException = ( Throwable ) exception ; \n\t$F208565 ( lastLowException ) while $F268 ( nestedException ) { \n\t\tif ( $F308047 ( nestedException ) . startsWith ( STRING00 + exceptionPrefix ) ) { \n\t\t\tlastLowException = ( Exception ) nestedException ; \n\t\t\t} \n\t\t$F10508 ( nestedException , getInnerException ) } \n\treturn lastLowException ; \n\t} \n"}, {"code": "private static Throwable getInnerException ( Throwable exception ) { \n\tfinal Throwable tmpException = exception ; \n\t$F10937 ( exception , getExceptionCauseUsingWellKnownTypes , tmpException ) if $F112 ( exception ) { \n\t\tfor ( $F46272 ( methodName , CauseMethodName ) ) { \n\t\t\t$F14067 ( exception , getExceptionCauseUsingMethodName , tmpException , methodName ) $F351018 ( exception ) } \n\t\t} \n\treturn exception ; \n\t} \n"}, {"code": "private static Throwable getExceptionCauseUsingMethodName ( final Throwable throwable , final CauseMethodName methodName ) { \n\t$F289127 ( method ) try { \n\t\tmethod = $F289328 ( throwable ) ( $F797 ( methodName ) , ( $F33567 ) null ) ; \n\t\t} \n\tcatch ( NoSuchMethodException exception ) $F1645 catch ( SecurityException exception ) $F1645 if ( method != null && $F76296 . isAssignableFrom ( $F20027 ( method ) ) ) { \n\t\ttry { \n\t\t\treturn ( Throwable ) method . invoke ( throwable , $F389221 ) ; \n\t\t\t} \n\t\tcatch ( IllegalAccessException exception ) $F1645 catch ( IllegalArgumentException exception ) $F1645 catch ( InvocationTargetException exception ) $F1645 } \n\t$F724 } \n"}, {"code": "$F12506 public static $F1372 $F25622 apply ( $F398462 filter , T ... elements ) { \n\t$F1488180 ( list ) if $F268 ( elements ) { \n\t\t$F289412 ( element , elements , list ) } \n\t$F4282 ( apply , filter , list ) } \n"}, {"code": "public static $F1372 $F25622 apply ( $F398462 filter , $F58535 ( elements ) ) { \n\t$F25622 $F245206 ( result ) ; \n\tif $F268 ( elements ) { \n\t\tfor ( T element : elements ) { \n\t\t\t$F176425 ( logger , element ) if $F19772 ( filter , element ) { \n\t\t\t\t$F176425 ( logger , element ) $F528 ( result , element ) } \n\t\t\telse $F442640 ( logger , element ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public Optional < Identification > getIdentification ( Identifiable identifiable ) { \n\tif ( ! registered . containsKey ( $F181913 ( identifiable ) ) ) $F22427 ( Optional ) AddOnModel registered = addOnInformationManager . getAddonModel ( this . registered . get ( $F181913 ( identifiable ) ) ) ; \n\tAddOnModel requested = addOnInformationManager . getAddonModel ( identifiable ) ; \n\tif ( ! ( registered == requested ) ) $F22427 ( Optional ) return Optional . of ( IdentificationImpl . createIdentification ( identifiable , true ) ) ; \n\t} \n"}, {"code": "$F1 public Optional < Identification > getIdentification ( String id ) { \n\treturn $F314212 ( Optional , registered , id ) . map ( IdentificationImpl : : <missing ';'> createIdentification ) ; \n\t} \n"}, {"code": "$F1 public boolean registerIdentification ( Identifiable identifiable ) { \n\tif ( identifiable == null || $F181913 ( identifiable ) == null || $F181913 ( identifiable ) . isEmpty ( ) ) $F213 if ( $F81771 ( registered , identifiable ) || registered . containsKey ( $F181913 ( identifiable ) ) ) $F1668 registered . put ( $F181913 ( identifiable ) , identifiable ) ; \n\t$F232 } \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . ICKLE_SERVICE ) ; \n\t$F502965 implementationClass = null ; \n\tfor ( Field field : fields ) { \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) $F502965 $F2251 ( contractClass , field ) ; \n\t\t\tIckleService ickleService = contractClass . getAnnotation ( IckleService . class ) ; \n\t\t\t$F294768 ( implementationClass , ickleService ) try { \n\t\t\t\tfield . set ( $F20708 ( config ) , $F6892 ( implementationClass ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( InstantiationException ie ) { \n\t\t\t\tConstructor $F405312 constructor = implementationClass . getConstructor ( $F1412586 ) ; \n\t\t\t\tif $F112 ( constructor ) { \n\t\t\t\t\tStringBuilder errorContext = $F171524 ( $F19101 ( implementationClass ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( $F1412586 . getName ( ) ) . append ( STRING00 ) ; \n\t\t\t\t\tthrow new InjectionException ( new InstantiationException $F5478 ( errorContext ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tContext baseContext = ContextUtils . discover ( $F20708 ( config ) ) ; \n\t\t\t\t\tfield . set ( $F20708 ( config ) , $F29330 ( constructor , baseContext ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tStringBuilder errorContext = $F63087 ; \n\t\t\tif $F268 ( implementationClass ) { \n\t\t\t\t$F175467 ( errorContext , implementationClass ) ; \n\t\t\t\t} \n\t\t\telse $F1219 ( errorContext ) Log . e ( $F40175 ( getClass ) , $F797 ( errorContext ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F762 public $F1372 $F560674 fromJSON ( String response , $F560674 target ) { \n\ttry { \n\t\tresponse = StandardizationUtil . getJSONStandardizer ( target ) . normalize ( response ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new SerializationException ( e ) ; \n\t\t} \n\ttry { \n\t\t$F560674 fromJson = gson . fromJson ( $F3247 ( response , target ) ) ; \n\t\t$F1620 ( fromJson , target ) return fromJson ; \n\t\t} \n\tcatch ( JsonSyntaxException jse ) { \n\t\tthrow new SerializationException ( jse ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public ComparableSimpleDateFormat convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\ttry { \n\t\treturn $F627 ( ComparableSimpleDateFormat , valueStr ) ; \n\t\t} \n\tcatch ( final IllegalArgumentException pse ) { \n\t\tthrow new ParseException ( $F2443 ( pse ) , INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tuncompileQuoter ( out , getValue ( occ ) . pattern ) ; \n\t} \n"}, {"code": "$F1 protected void exportXmlData ( final StringBuilder out , final int occ ) { \n\txmlEncode ( getValue ( occ ) . pattern , out ) ; \n\t} \n"}, {"code": "$F1 public SimpleDateFormat [ ] getValueAsSimpleDateFormatArray $F2 throws ParseException { \n\tfinal SimpleDateFormat [ ] result = new SimpleDateFormat $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . delegate ; \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void run $F2 { \n\t$F101612 ( ois ) try { \n\t\tois = new ObjectInputStream ( new BufferedInputStream $F29811 ( socket ) ) ; \n\t\tclientAddress = $F431777 ( socket ) . getHostAddress ( ) ; \n\t\tinetAddressFromClient = $F431777 ( socket ) ; \n\t\twhile $F38432 { \n\t\t\tfinal Object $F60638 ( object , ois ) ; \n\t\t\tprocess ( object ) ; \n\t\t\t} \n\t\t} \n\tcatch ( final IOException e ) { \n\t\tlogger . error ( $F39054 ( e ) , e ) ; \n\t\t} \n\tcatch ( final ClassNotFoundException cnfe ) $F291297 ( logger , cnfe ) finally { \n\t\ttry $F164360 ( ois , socket ) catch ( final IOException e ) { \n\t\t\tlogger . error ( $F39054 ( e ) , e ) ; \n\t\t\t} \n\t\t} \n\t$F29452 ( logger , socket ) } \n"}, {"code": "protected void initialize $F1693 ( pFileName , parse ) { \n\tthis . fileName = pFileName ; \n\t$F289832 ( path ) try { \n\t\t$F10937 ( path , getPath , pFileName ) $F5033 lines = Files . readAllLines ( $F330182 ( path , Charset ) ) ; \n\t\t$F1987 ( i ) for ( String line : lines ) $F5704 ( processLine , line , i , parse ) } \n\tcatch ( URISyntaxException | IOException | FileSystemNotFoundException ex ) { \n\t\tLOGGER . severe ( $F19001 ( String , pFileName , path ) ) ; \n\t\tLOGGER . severe ( $F589439 ( ex ) ) ; \n\t\t} \n\t} \n"}, {"code": "public Integer lookup ( String entry ) { \n\tif $F28586 ( data , entry ) { \n\t\t$F23123 ( oldsize , data ) data . put ( entry , $F91358 ( data ) ) ; \n\t\tString msg = String . format ( STRING00 , entry , oldsize , $F3413 ( data ) ) ; \n\t\t$F1201149 ( fileName , msg ) $F29873 ( LOGGER , msg ) } \n\t$F30910 ( data , entry ) } \n"}, {"code": "public void save ( String fileName ) throws FileNotFoundException , UnsupportedEncodingException { \n\ttry ( PrintWriter writer = new PrintWriter $F5777 ( fileName ) ) { \n\t\tfor ( $F93737 ( entry , data ) ) { \n\t\t\twriter . println ( String . format ( STRING00 , $F269 ( entry ) , $F712 ( entry ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private Path getPath ( String fileName ) throws $F372272 { \n\tPath path ; \n\tURL url = $F14 ( getClass ) . getResource ( fileName ) ; \n\tif $F112 ( url ) { \n\t\tthrow new IOException $F7261 ( String , fileName ) ; \n\t\t} \n\tURI uri = $F5740 ( url ) ; \n\t$F5688 ( env ) if ( $F1136580 ( uri ) ) { \n\t\t$F21 parts = $F507796 ( uri ) ; \n\t\tif $F112 ( fs ) { \n\t\t\tfs = FileSystems . newFileSystem ( URI . create ( parts [ INT00 ] ) , env ) ; \n\t\t\t} \n\t\tpath = fs . getPath ( parts [ INT00 ] ) ; \n\t\t} \n\telse $F13003 ( path , Paths , uri ) return path ; \n\t} \n"}, {"code": "public void addMeasure ( LRActivity activity ) { \n\t$F448399 ( values ) values . put ( STRING00 , this . getDownloads ( ) ) ; \n\tvalues . put ( STRING00 , this . getEmbeds ( ) ) ; \n\tvalues . put ( STRING00 , this . getLikes ( ) ) ; \n\tvalues . put ( STRING00 , $F330138 ( this ) ) ; \n\tactivity . addMeasureToVerb ( values ) ; \n\t} \n"}, {"code": "static public final Sequencer getInstance ( String name ) { \n\t$F45360 ( logger ) try { \n\t\tSequencer seq = null ; \n\t\tif $F33656 ( sequencers , name ) $F13003 ( seq , sequencers , name ) $F3279 ( seq ) synchronized ( sequencers ) { \n\t\t\tif $F28586 ( sequencers , name ) { \n\t\t\t\ttry $F179139 ( seq , defaultSequencer ) catch ( Exception e ) { \n\t\t\t\t\t$F428173 ( logger , e ) $F724 } \n\t\t\t\t$F13102 ( seq , name ) $F2725 ( sequencers , name , seq ) return seq ; \n\t\t\t\t} \n\t\t\telse $F30911 ( sequencers , name ) } \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "public SparkDocumentStream annotate ( $F410888 AnnotatableType ... types ) { \n\treturn new SparkDocumentStream ( source . map ( json - <missing ')'> > <missing ')'> { \n\t\tHermes <missing '}'> . initializeWorker ( $F11145 ( configBroadcast ) ) ; \n\t\tif ( Document . hasAnnotations ( json , types ) ) $F356 ( json ) Document document = $F481723 ( Document , json ) ; \n\t\t$F283966 ( Pipeline , document , types ) return $F434730 ( document ) ; \n\t\t} \n\t"}, {"code": "public void cli $F22 ( args ) { \n\tCommandLineParser cli = new CommandLineParser $F2 ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . required ( true ) . type ( $F57000 ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . defaultValue ( STRING00 ) . type ( $F4868 ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . defaultValue ( STRING00 ) . type ( CorpusType . class ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . defaultValue ( STRING00 ) . type ( Mode . class ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . type ( $F57000 ) . required ( true ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . type ( $F3292 ) . required ( false ) . defaultValue ( false ) . build ( ) ) ; \n\tcli . addOption ( $F330241 ( NamedOption ) ( STRING00 ) . description ( STRING00 ) . type ( $F3292 ) . required ( false ) . defaultValue ( false ) . build ( ) ) ; \n\t$F184476 ( cli , args ) Hermes . initializeApplication ( args ) ; \n\tDataset $F88926 data = getDataset ( $F1169 ( cli ) , $F1169 ( cli ) , $F1169 ( cli ) , $F1169 ( cli ) , $F1169 ( cli ) ) ; \n\tMode $F1170 ( mode , cli ) ; \n\tswitch ( mode ) { \n\t\tcase TEST : try { \n\t\t\tthis . classifier = Cast . < BasicTextClassifier > as ( TextClassifier . read ( $F1169 ( cli ) ) ) . classifier ; \n\t\t\t} \n\t\t$F183999 ( Throwables , e ) test ( data ) ; \n\t\t$F332 case SPLIT : TrainTestSplit $F88926 split = Iterables . getFirst ( data . split ( FLOAT00 ) , null ) ; \n\t\ttrain ( split . getTrain ( ) ) ; \n\t\ttest ( $F3158658 ( split ) ) ; \n\t\t$F332 case TRAIN : train ( data ) ; \n\t\ttry { \n\t\t\t$F9207 ( write , cli ) ; \n\t\t\t} \n\t\t$F183999 ( Throwables , e ) $F332 case CV3 : case CV10 : TrainTestSet $F88926 folds = data . fold ( mode == Mode . CV3 ? INT00 : INT00 ) ; \n\t\tClassifierEvaluation evaluation = new ClassifierEvaluation $F2 ; \n\t\tfor ( TrainTestSplit $F88926 fold : folds ) { \n\t\t\ttrain ( fold . getTrain ( ) ) ; \n\t\t\tevaluation . merge ( test ( $F3158658 ( fold ) , false ) ) ; \n\t\t\t} \n\t\tevaluation . output ( System . out ) ; \n\t\t$F332 $F2377 $F88650 ( System ) } \n\t} \n"}, {"code": "protected Dataset $F88926 getDataset ( Resource data , String format , CorpusType corpusType , boolean undersample , boolean oversample ) { \n\tCorpus corpus = $F216998 ( Corpus , format ) . source ( data ) . corpusType ( corpusType ) . build ( ) ; \n\tAnnotatableType [ ] $F57803 ( required ) ; \n\tif $F124033 ( required ) { \n\t\tcorpus = corpus . annotate ( required ) ; \n\t\t} \n\tCorpus filtered = corpus ; \n\tSerializablePredicate < HString > predicate = getTextFilter ( ) ; \n\tif $F268 ( predicate ) { \n\t\tfiltered = corpus . filter ( getTextFilter ( ) ) ; \n\t\t} \n\tDataset $F88926 dataset = Dataset . classification ( ) . featureEncoder ( getFeatureEncoder ( ) ) . type ( corpus . getDataSetType ( ) ) . source ( filtered . asLabeledStream ( getOracle ( ) ) . map ( getFeaturizer ( ) : : extractInstance ) ) ; \n\tif ( undersample ) { \n\t\tdataset = dataset . undersample ( ) ; \n\t\t} \n\tif ( oversample ) { \n\t\tdataset = dataset . oversample ( ) ; \n\t\t} \n\treturn dataset . shuffle ( $F787867 ) ; \n\t} \n"}, {"code": "private String fetchRemoteIfNecessary ( String s ) { \n\tif $F5667 ( s ) { \n\t\t$F22194 ( bucketAndKey , parseBucketKeyAndFileName , s ) $F26395 ( bucket , bucketAndKey ) $F26395 ( key , bucketAndKey ) $F26395 ( fileName , bucketAndKey ) $F29452 ( log , s ) S3Object obj = $F124779 ( s3Client , bucket , key ) ; \n\t\t$F29452 ( log , s ) $F45871 ( quickState , s ) $F2501 ( f , _keyDir , fileName ) $F118447 ( os ) $F187045 ( log , f ) try { \n\t\t\tS3ObjectInputStream is = obj . getObjectContent ( ) ; \n\t\t\t$F29452 ( log , s ) $F101991 ( os , f ) $F47449 ( IOUtils , is , os ) $F187045 ( log , f ) $F194971 ( f ) } \n\t\tcatch ( Exception ex ) { \n\t\t\t$F187045 ( log , f ) $F11567 ( ex ) } \n\t\tfinally { \n\t\t\tif $F268 ( os ) $F191052 ( IOUtils , os ) } \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "private $F21 parseBucketKeyAndFileName ( String s ) { \n\t$F235538 ( ret ) $F35357 ( s ) $F6110 ( index , s ) $F2532 ( bucket , s , index ) $F100656 ( key , s , index ) $F588436 ( fn , s ) $F60852 ( ret , bucket ) $F60852 ( ret , key ) $F60852 ( ret , fn ) return ret ; \n\t} \n"}, {"code": "$F52901 $F2391971 public Response getPartitions ( $F647548 final UriInfo uriInfo , $F647548 final HttpHeaders headers ) { \n\tfinal IRI identifier = rdf . createIRI ( properties . getProperty ( STRING00 , $F12454173 ( uriInfo ) . toString ( ) ) ) ; \n\tLOGGER . debug ( STRING00 , identifier . getIRIString ( ) ) ; \n\tfinal List $F2207140 $F54 ( graph ) ; \n\t$F34230 ( partitions ) ( e - > rdf . createIRI ( $F269 ( e ) + $F712 ( e ) ) ) . map ( obj - > rdf . createTriple ( identifier , LDP . contains , obj ) ) . forEach ( graph : : <missing ';'> $F6641 ; \n\t$F5550 ( properties ) . stream ( ) . filter ( propMapping : : <missing ';'> containsKey ) . map ( name - > rdf . createTriple ( identifier , $F198 ( propMapping , name ) , isUrl ( $F767 ( properties , name ) ) ? rdf . createIRI ( $F767 ( properties , name ) ) : rdf . createLiteral ( $F767 ( properties , name ) ) ) ) . forEach ( graph : : <missing ';'> $F6641 ; \n\tfinal RDFSyntax syntax = getSyntax ( headers . getAcceptableMediaTypes ( ) , empty ( ) ) . orElseThrow ( NotAcceptableException : : <missing ';'> $F2714 final IRI profile = ofNullable ( getProfile ( headers . getAcceptableMediaTypes ( ) , syntax ) ) . orElseGet ( ( ) - $F6635 ( getDefaultProfile , syntax , identifier ) ) ; \n\tfinal StreamingOutput stream = new StreamingOutput $F2 { \n\t\t$F1 public void write $F204444 ( out ) throws IOException { \n\t\t\tioService . write ( $F5025 ( graph ) , out , syntax , profile ) ; \n\t\t\t} \n\t\t} \n\t; \n\treturn ok ( ) . header ( ALLOW , join ( STRING00 , HttpMethod . GET , HEAD , OPTIONS ) ) . link ( LDP . Resource . getIRIString ( ) , STRING00 ) . link ( LDP . RDFSource . getIRIString ( ) , STRING00 ) . type ( syntax . mediaType ) . entity ( stream ) . build ( ) ; \n\t} \n"}, {"code": "static DoubleStream stream ( DoubleTuple tuple , int startInclusive , int endExclusive ) { \n\tDoubleTupleSpliterator doubleTupleSpliterator = new DoubleTupleSpliterator $F2144 ( tuple , startInclusive , endExclusive ) ; \n\treturn StreamSupport . doubleStream ( doubleTupleSpliterator , false ) ; \n\t} \n"}, {"code": "public static String encryptToMD5 ( String info ) { \n\t$F96071 ( digesta ) try { \n\t\t$F14492 ( alga , MessageDigest ) $F2060016 ( alga , info ) $F429252 ( digesta , alga ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) $F7454 ( e ) $F867 ( byte2hex , digesta ) } \n"}, {"code": "public static SecretKey createSecretKey ( String algorithm ) { \n\tKeyGenerator keygen ; \n\tSecretKey deskey = null ; \n\ttry { \n\t\t$F125544 ( keygen , KeyGenerator , algorithm ) deskey = keygen . generateKey ( ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) $F7454 ( e ) return deskey ; \n\t} \n"}, {"code": "public static String encryptToDES ( SecretKey key , String info ) { \n\t$F19733 ( Algorithm ) SecureRandom $F1716183 ( sr ) ; \n\t$F96071 ( cipherByte ) try { \n\t\t$F75347 ( c1 , Cipher , Algorithm ) c1 . init ( Cipher . ENCRYPT_MODE , key , sr ) ; \n\t\tcipherByte = c1 . doFinal ( $F15649 ( info ) ) ; \n\t\t} \n\t$F153429 ( e ) $F867 ( byte2hex , cipherByte ) } \n"}, {"code": "public static String decryptByDES ( SecretKey key , String sInfo ) { \n\t$F19733 ( algorithm ) SecureRandom $F1716183 ( sr ) ; \n\t$F96071 ( cipherByte ) try { \n\t\t$F75347 ( c1 , Cipher , algorithm ) c1 . init ( Cipher . DECRYPT_MODE , key , sr ) ; \n\t\tcipherByte = c1 . doFinal ( hex2byte ( sInfo ) ) ; \n\t\t} \n\t$F153429 ( e ) $F2692 ( cipherByte ) } \n"}, {"code": "public static void createPairKey $F2 { \n\ttry { \n\t\t$F14492 ( keygen , KeyPairGenerator ) SecureRandom $F1716183 ( random ) ; \n\t\trandom . setSeed ( INT00 ) ; \n\t\tkeygen . initialize ( INT00 , random ) ; \n\t\tKeyPair keys = keygen . generateKeyPair ( ) ; \n\t\tPublicKey pubkey = $F131832 ( keys ) ; \n\t\tPrivateKey prikey = $F131779 ( keys ) ; \n\t\tdoObjToFile ( $F455267 ( prikey , pubkey ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException e ) $F7454 ( e ) } \n"}, {"code": "public static void signToInfo $F1195 ( info , signfile ) { \n\tPrivateKey myprikey = ( PrivateKey ) $F549816 ( getObjFromFile ) ; \n\tPublicKey mypubkey = ( PublicKey ) $F549816 ( getObjFromFile ) ; \n\ttry { \n\t\t$F14492 ( signet , Signature ) signet . initSign ( myprikey ) ; \n\t\t$F2060016 ( signet , info ) $F1975 signed = signet . sign ( ) ; \n\t\tdoObjToFile ( signfile , $F610406 ( signed , mypubkey , info ) ) ; \n\t\t} \n\t$F153429 ( e ) } \n"}, {"code": "public static boolean validateSign ( String signfile ) { \n\tPublicKey mypubkey = ( PublicKey ) $F52478 ( getObjFromFile , signfile ) ; \n\t$F1975 signed = ( $F1975 ) $F52478 ( getObjFromFile , signfile ) ; \n\tString info = ( String ) $F52478 ( getObjFromFile , signfile ) ; \n\ttry { \n\t\t$F14492 ( signetcheck , Signature ) signetcheck . initVerify ( mypubkey ) ; \n\t\t$F2060016 ( signetcheck , info ) $F1299 ( System , info ) return $F380378 ( signetcheck , signed ) ; \n\t\t} \n\tcatch ( Exception e ) $F98158 ( e ) } \n"}, {"code": "public static String byte2hex $F2665 ( b ) { \n\t$F19733 ( hs ) $F19733 ( stmp ) for ( $F2674 ( n , b ) ) { \n\t\tstmp = ( $F196799 ( java ) . toHexString ( $F2675 ( b , n ) ) ) ; \n\t\tif $F43975 ( stmp ) $F33262 ( hs , stmp ) else $F409823 ( hs , stmp ) } \n\treturn $F89435 ( hs ) ; \n\t} \n"}, {"code": "public static $F1975 hex2byte ( String hex ) { \n\t$F18718 ( ret ) $F182281 ( tmp , hex ) for ( $F62468 ( i ) ) { \n\t\tret [ i ] = uniteBytes ( $F2679 ( tmp , i ) , $F2685 ( tmp , i ) ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static byte uniteBytes ( byte src0 , byte src1 ) { \n\tbyte _b0 = Byte . decode ( STRING00 + new String ( new byte $F21535 ( src0 ) ) ) . byteValue ( ) ; \n\t_b0 = ( byte ) $F14003 ( _b0 ) ; \n\tbyte _b1 = Byte . decode ( STRING00 + new String ( new byte $F21535 ( src1 ) ) ) . byteValue ( ) ; \n\tbyte ret = ( byte ) ( _b0 ^ _b1 ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static void doObjToFile $F379663 ( file , objs ) { \n\t$F94339 ( oos ) try { \n\t\t$F80655 ( fos , file ) $F238571 ( oos , fos ) for ( $F2674 ( i , objs ) ) { \n\t\t\toos . writeObject ( objs [ i ] ) ; \n\t\t\t} \n\t\t} \n\t$F153429 ( e ) finally $F650219 ( oos , e ) } \n"}, {"code": "public static Object getObjFromFile $F11348 ( file , i ) { \n\t$F101612 ( ois ) $F105146 ( obj ) try { \n\t\t$F1100 ( fis , file ) $F98137 ( ois , fis ) ; \n\t\tfor ( $F6610 ( j , i ) ) { \n\t\t\t$F383977 ( obj , ois ) } \n\t\t} \n\t$F153429 ( e ) finally $F650219 ( ois , e ) return obj ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) { \n\t$F24610 ( t1 , System ) $F1292 ( System ) ( STRING00 + encryptToMD5 ( STRING00 ) ) ; \n\t$F1292 ( System ) ( $F24611 ( System , t1 ) ) ; \n\tSecretKey $F16172 ( key , createSecretKey ) ; \n\t$F100464 ( t1 , System ) $F6377 ( str1 , encryptToDES , key ) $F1292 ( System ) ( $F24611 ( System , t1 ) ) ; \n\t$F8479 ( System , str1 ) $F100464 ( t1 , System ) $F5618 ( str2 , decryptByDES , key , str1 ) $F1292 ( System ) ( $F24611 ( System , t1 ) ) ; \n\t$F8479 ( System , str2 ) createPairKey ( ) ; \n\t$F43247 ( signToInfo ) if $F5091 ( validateSign ) $F113711 ( System ) else $F113711 ( System ) } \n"}, {"code": "public Double append ( Double s1 , Double s2 ) { \n\t$F37371 ( s1 , s2 ) return s1 + s2 ; \n\t} \n"}, {"code": "@ Action ( domainEvent = DownloadLayoutEvent . class , semantics = SemanticsOf . SAFE , restrictTo = RestrictTo . PROTOTYPING ) @ ActionLayout ( contributed = Contributed . AS_ACTION , cssClassFa = STRING00 ) @ MemberOrder ( $F19098653 ) public Clob downloadLayout $F80574 ( domainObject ) { \n\treturn developerUtilitiesService . downloadLayout ( domainObject ) ; \n\t} \n"}, {"code": "private static int getIdentifier ( String resourcetype , Context context , String resourceName ) { \n\treturn $F47664 ( context ) . getIdentifier ( resourceName , resourcetype , $F76244 ( context ) ) ; \n\t} \n"}, {"code": "public synchronized void throttle $F2 throws InterruptedException { \n\t$F15037 ( currentTimeNanos , System ) if ( ! firstCall ) { \n\t\tlong remainingTimeNanos = $F120905 ( cycleTimeNanos , currentTimeNanos , lastTimeNanos ) ; \n\t\tif $F3730 ( remainingTimeNanos ) { \n\t\t\t$F446895 ( milliPause , remainingTimeNanos ) int nanoPause = ( int ) $F62853 ( remainingTimeNanos ) ; \n\t\t\tThread . sleep ( milliPause , nanoPause ) ; \n\t\t\t} \n\t\t} \n\telse $F57412 ( firstCall ) $F126508 ( lastTimeNanos , System ) } \n"}, {"code": "public static final synchronized ProfileManager getInstance ( Object context ) { \n\treturn $F112 ( instance ) ? ( instance = new ProfileService ( ContextUtils . asApplication ( context ) ) ) : instance ; \n\t} \n"}, {"code": "$F1 public boolean isActive ( Object context , Profile profile ) { \n\tif $F7430 ( context , profile ) { \n\t\tStringBuilder builder = $F63087 ; \n\t\tif $F112 ( context ) $F1218 ( builder ) if $F112 ( profile ) $F1218 ( builder ) $F206576 ( builder ) } \n\tif ( $F298 ( context ) . isAnnotationPresent ( IncludeProfiles . class ) ) { \n\t\tIncludeProfiles profiles = $F208510 ( context ) ( IncludeProfiles . class ) ; \n\t\tProfile [ ] $F105040 ( activeProfiles , profiles ) ; \n\t\tfor ( Profile currentProfile : activeProfiles ) $F993214 ( currentProfile , profile ) $F213 } \n\tif ( $F298 ( context ) . isAnnotationPresent ( ExcludeProfiles . class ) ) { \n\t\tExcludeProfiles profiles = $F208510 ( context ) ( ExcludeProfiles . class ) ; \n\t\tProfile [ ] $F105040 ( inactiveProfiles , profiles ) ; \n\t\tfor ( Profile currentProfile : inactiveProfiles ) if $F8962 ( currentProfile , profile ) $F213 $F232 } \n\telse $F233 } \n"}, {"code": "$F1 protected Image createImage ( PdfContentByte canvas , Dataset data , float opacity ) throws VectorPrintException , BadElementException { \n\tChartBuilder cb = new ChartBuilder ( getType ( ) , data , getTitle ( ) , getTitle ( ) , getValLabel ( ) , isVertical ( ) , isLegend ( ) , getValue ( THEMEBUILDER , ChartThemeBuilder . class ) , getSettings ( ) ) ; \n\tImage img = ItextChartHelper . getChartImage ( cb . getChart ( ) , canvas , getWidth ( ) , getHeight ( ) , opacity ) ; \n\tapplySettings ( img ) ; \n\treturn img ; \n\t} \n"}, {"code": "$F1 public Dataset convert ( Object s ) { \n\tif ( s instanceof Dataset ) { \n\t\treturn ( Dataset ) s ; \n\t\t} \n\telse { \n\t\tthrow new VectorPrintRuntimeException ( String . format ( STRING00 , $F268 ( s ) ? $F6291 ( s ) : null , $F6258 ( String , s ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public InputStream stream $F2 { \n\tInputStream stream ; \n\ttry $F636649 ( stream , file ) catch ( FileNotFoundException e ) { \n\t\tstream = new ByteArrayInputStream ( $F18715 ) ; \n\t\t} \n\tstream = $F72276 ( stream ) ; \n\treturn stream ; \n\t} \n"}, {"code": "void prepareForWrite ( long xaDataRecorderId ) throws $F10627 { \n\tthis . dataLogger . reopen ( AccessMode . WRITE ) ; \n\tthis . writeStartSequence ( xaDataRecorderId ) ; \n\t} \n"}, {"code": "private void writeStartSequence ( long xaDataRecorderId ) throws $F10627 { \n\t$F1453880 ( byteOut ) try { \n\t\t$F295555 ( byteOut ) $F314297 ( dos , byteOut ) $F118923 ( dos , xaDataRecorderId ) $F6369 ( dos ) } \n\tfinally { \n\t\tif $F268 ( byteOut ) $F191052 ( IOUtils , byteOut ) } \n\t$F116881 startSequence = new byte $F89980 ; \n\tstartSequence [ INT00 ] = $F21499 ( byteOut ) ; \n\tthis . dataLogger . write ( XALogRecordType . USER . getType ( ) , startSequence ) ; \n\t} \n"}, {"code": "$F1 protected void exportNamespaceData ( final String prefix , final StringBuilder out , final int occ ) { \n\tsynchronized ( TemporalHelper . getOutputSDF ( ) ) { \n\t\t$F1212 ( out , prefix ) $F1218 ( out ) out . append ( TemporalHelper . getOutputSDF ( ) . format ( getValue ( occ ) . getTime ( ) ) ) ; \n\t\t$F1218 ( out ) } \n\t} \n"}, {"code": "$F1 public Calendar [ ] getValueAsCalendarArray $F2 throws ParseException { \n\tfinal Calendar [ ] result = new Calendar $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "public $F1372 T eval ( String name , final String script , $F2731 ( data ) ) throws ScriptException , ScriptLimitException , SyntaxException { \n\t$F24610 ( t , System ) if $F112 ( data ) $F1066215 ( data , Objects ) if $F42465 ( script , sizeLimit ) throw new ScriptLimitException ( ScriptLimitException . Limits . SIZE , getSizeLimit ( ) ) ; \n\t$F13175 ( LOG , script , data ) AstRoot _root = null ; \n\tif $F309775 ( Objects , name ) $F24579 ( _root , parseScript , script ) else { \n\t\t_root = astCache . get ( name , new Closure < String , AstRoot > $F2 { \n\t\t\t$F1 public AstRoot call ( String input ) $F3342 ( parseScript , script ) } \n\t\t) ; \n\t\t} \n\tfinal AstRoot root = _root ; \n\tfinal Context ctx = new Context $F560 ( getMemoryLimit ) ; \n\t$F659620 ( ctx ) . putAll ( data ) ; \n\tfor ( final $F96 f : functions ) { \n\t\tString $F1714085 ( clName , Objects , f ) ; \n\t\tString ns = Objects . get ( $F3725 ( f ) ) ; \n\t\t$F96 set_cfg = Objects . get ( f , STRING00 , Objects . newSOHashMap ( ) ) ; \n\t\tClass < ? extends ScriptFunctionSet > cls = null ; \n\t\ttry { \n\t\t\tcls = ( Class < ? extends ScriptFunctionSet > ) $F16700 ( Class , clName ) ; \n\t\t\tScriptFunctionSet $F117556 ( set , cls ) ; \n\t\t\t$F453064 ( set , set_cfg ) set . setContext ( new Context $F560 ( getMemoryLimit ) ) ; \n\t\t\tObjects . set ( $F659620 ( ctx ) , ns , set ) ; \n\t\t\t} \n\t\tcatch ( Throwable e ) { \n\t\t\tLOG . warn ( $F193001 ( cls , e ) ) ; \n\t\t\t} \n\t\t} \n\tScriptFunctionSet set = new SystemFunctionSet $F2 ; \n\tset . setContext ( new Context $F560 ( getMemoryLimit ) ) ; \n\tObjects . set ( $F659620 ( ctx ) , SYSTEM_FUNCTION_NS , set ) ; \n\tfinal Session . SessionBean sb = Session . getSessionBean ( ) ; \n\t$F131309 f = null ; \n\tif ( $F153162 ( isInside ) || $F150724 ( isInside ) ) { \n\t\tif $F268 ( sb ) { \n\t\t\tf = getService ( ) . submit ( new $F41490 $F2 { \n\t\t\t\t$F1 public Object call $F2 throws Exception { \n\t\t\t\t\t$F4728 ( id ) try { \n\t\t\t\t\t\t$F78483 ( isInside ) id = Session . start ( $F6210 ( sb ) ) ; \n\t\t\t\t\t\tASTEvaluator ast = new ASTEvaluator $F2 ; \n\t\t\t\t\t\tObject o = $F393435 ( ast , root , ctx ) ; \n\t\t\t\t\t\treturn o ; \n\t\t\t\t\t\t} \n\t\t\t\t\tfinally { \n\t\t\t\t\t\t$F1255553 ( Session , id ) ; \n\t\t\t\t\t\t$F150736 ( isInside ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t) ; \n\t\t\t} \n\t\telse { \n\t\t\tf = getService ( ) . submit ( new $F41490 $F2 { \n\t\t\t\t$F1 public Object call $F2 throws Exception { \n\t\t\t\t\ttry { \n\t\t\t\t\t\t$F78483 ( isInside ) ASTEvaluator ast = new ASTEvaluator $F2 ; \n\t\t\t\t\t\tObject o = $F393435 ( ast , root , ctx ) ; \n\t\t\t\t\t\treturn o ; \n\t\t\t\t\t\t} \n\t\t\t\t\tfinally $F452852 ( isInside ) } \n\t\t\t\t} \n\t\t\t) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\t$F24610 ( l , System ) $F67491 ( result ) if ( f == null || getTimeLimit ( ) <= INT00 ) { \n\t\t\tASTEvaluator ast = new ASTEvaluator $F2 ; \n\t\t\tresult = ( T ) $F393435 ( ast , root , ctx ) ; \n\t\t\t} \n\t\telse { \n\t\t\twhile $F38432 { \n\t\t\t\tif ( $F24611 ( System , l ) > getTimeLimit ( ) ) { \n\t\t\t\t\t$F68483 ( f ) throw new ScriptLimitException ( ScriptLimitException . Limits . TIME , getTimeLimit ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif $F73004 ( f ) $F333 $F15578 ( Thread ) } \n\t\t\tresult = ( T ) $F144 ( f ) ; \n\t\t\t} \n\t\tif $F3507 ( LOG ) { \n\t\t\tLOG . debug ( $F376969 ( System , t ) + result ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\tcatch ( InterruptedException e ) $F6096546 ( S1SystemError , e ) catch ( ExecutionException e ) { \n\t\tif $F13518 ( e ) { \n\t\t\tif ( $F6278 ( e ) instanceof ScriptLimitException ) throw ( ScriptLimitException ) $F6278 ( e ) ; \n\t\t\tif ( $F6278 ( e ) instanceof ScriptException ) { \n\t\t\t\tScriptException se = ( ScriptException ) $F6278 ( e ) ; \n\t\t\t\tint line = $F186503 ( se ) ; \n\t\t\t\tif $F9869 ( line ) { \n\t\t\t\t\tString arr [ ] = $F93319 ( script ) ; \n\t\t\t\t\tString m = ( arr . length > line ? $F77504 ( arr , line ) : STRING00 ) ; \n\t\t\t\t\t$F781463 ( se , m ) throw se ; \n\t\t\t\t\t} \n\t\t\t\tthrow se ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F6096545 ( S1SystemError , e ) } \n\tcatch ( ScriptException se ) { \n\t\tint line = $F186503 ( se ) ; \n\t\tif $F9869 ( line ) { \n\t\t\tString arr [ ] = $F93319 ( script ) ; \n\t\t\tString m = ( arr . length > line ? $F77504 ( arr , line ) : STRING00 ) ; \n\t\t\t$F781463 ( se , m ) throw se ; \n\t\t\t} \n\t\tthrow se ; \n\t\t} \n\t} \n"}, {"code": "public String template $F11167 ( template , data ) throws ScriptException , ScriptLimitException , SyntaxException { \n\treturn template ( null , template , data ) ; \n\t} \n"}, {"code": "$F1 public $F26212 E get ( $F52984 ( clazz ) , Object key ) { \n\tResourceManager $F1865930 manager = new AppEngineResourceManager ( datastore , $F326234 ( datastore ) , transaction ) ; \n\tE $F2197 ( entity , manager , clazz , key ) ; \n\t$F2725 ( managers , key , manager ) transaction . logs ( ) . add ( new Log ( transaction . logs ( ) . size ( ) + INT00 , Log . Operation . GET , entity ) ) ; \n\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 + entity + STRING00 ) ; \n\treturn entity ; \n\t} \n"}, {"code": "$F1 public void put ( Object entity ) { \n\tResourceManager $F1865930 manager = new AppEngineResourceManager ( datastore , $F326234 ( datastore ) , transaction ) ; \n\t$F45610 ( manager , entity ) Log log = new Log ( transaction . logs ( ) . size ( ) + INT00 , Log . Operation . PUT , entity ) ; \n\tlog . state ( State . UNCOMMITTED ) ; \n\ttransaction . logs ( ) . add ( log ) ; \n\t$F478625 ( managers , keyValue , entity , manager ) logger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 + entity + STRING00 ) ; \n\t} \n"}, {"code": "$F1 public void update ( Object entity ) { \n\tResourceManager $F1865930 $F509996 ( manager , managers , keyValue , entity ) ; \n\tif $F112 ( manager ) { \n\t\tthrow new IllegalStateException ( STRING00 + Log . Operation . UPDATE + STRING00 + Log . Operation . GET + STRING00 ) ; \n\t\t} \n\t$F98647 ( manager , entity ) Log log = new Log ( transaction . logs ( ) . size ( ) + INT00 , Log . Operation . UPDATE , entity ) ; \n\tlog . state ( State . UNCOMMITTED ) ; \n\ttransaction . logs ( ) . add ( log ) ; \n\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 + entity + STRING00 ) ; \n\t} \n"}, {"code": "$F1 public void commit $F2 throws IndoubtException { \n\tList < Log > $F9005 ( logs , transaction ) ; \n\t$F1987 ( group ) $F1987 ( last ) for ( $F10914 ( i , logs ) ) { \n\t\tif ( $F198 ( logs , i ) . operation ( ) != Log . Operation . GET ) { \n\t\t\tgroup ++ ; \n\t\t\tlast = i ; \n\t\t\t} \n\t\t} \n\t$F120791 ( group ) if $F2015 ( group ) { \n\t\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 ) ; \n\t\tLog $F199 ( log , logs , last ) ; \n\t\t$F604505 ( entity , log ) ResourceManager $F1865930 $F509996 ( manager , managers , keyValue , entity ) ; \n\t\t$F388606 entities = Translation . toEntities ( entity ) ; \n\t\tif ( log . operation ( ) != Log . Operation . DELETE ) { \n\t\t\tdatastore . put ( $F4649399 ( manager ) , entities ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F1636110 deletes = new ArrayList $F653121 $F2 ; \n\t\t\tfor ( Entity e : entities ) $F92275 ( deletes , e ) datastore . delete ( $F4649399 ( manager ) , deletes ) ; \n\t\t\t} \n\t\t$F4649399 ( manager ) . commit ( ) ; \n\t\tlog . state ( State . COMMITTED ) ; \n\t\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 ) ; \n\t\t$F254 } \n\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 ) ; \n\tfor ( $F10914 ( i , logs ) ) { \n\t\tLog $F199 ( log , logs , i ) ; \n\t\tif ( log . operation ( ) != Log . Operation . GET ) { \n\t\t\t$F604505 ( entity , log ) ResourceManager $F1865930 $F509996 ( manager , managers , keyValue , entity ) ; \n\t\t\ttry { \n\t\t\t\tif ( i == last ) { \n\t\t\t\t\t$F388606 entities = Translation . toEntities ( transaction , Keys . create ( Translation . toKind ( $F298 ( entity ) ) , keyValue ( entity ) ) ) ; \n\t\t\t\t\tdatastore . put ( $F4649399 ( manager ) , entities ) ; \n\t\t\t\t\t} \n\t\t\t\t$F438723 ( manager ) ; \n\t\t\t\tlog . state ( State . PREPARED ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new UncheckedException ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 ) ; \n\tfor ( Log log : logs ) { \n\t\tif ( log . operation ( ) != Log . Operation . GET ) { \n\t\t\tResourceManager $F1865930 manager = managers . get ( keyValue ( log . entity ( ) ) ) ; \n\t\t\ttry { \n\t\t\t\t$F374904 ( manager ) log . state ( State . COMMITTED ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tlogger . warning ( STRING00 + $F13745 ( transaction ) + STRING00 + e + STRING00 ) ; \n\t\t\t\t$F7453 ( e ) $F254 } \n\t\t\t} \n\t\t} \n\tlogger . fine ( STRING00 + $F13745 ( transaction ) + STRING00 ) ; \n\t} \n"}, {"code": "$F1 public void rollback $F2 { \n\tfor ( ResourceManager $F1865930 manager : $F387 ( managers ) ) { \n\t\tTransaction $F9005 ( transaction , manager ) ; \n\t\tif $F22115 ( transaction ) { \n\t\t\ttry $F396503 ( transaction ) catch ( Exception e ) { \n\t\t\t\tlogger . warning ( $F694120 ( transaction , e ) + STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected static SQLEnum value ( Class < ? extends SQLEnum > clazz , String value ) { \n\t$F2201 ( value ) $F35682 ( value ) if $F33656 ( valuesCache , clazz ) { \n\t\tMap < String , SQLEnum > $F199 ( map2 , valuesCache , clazz ) ; \n\t\t$F47966 ( map2 , value ) } \n\t$F724 } \n"}, {"code": "protected Object callNativeFunction $F13010 ( request , response ) { \n\tServletWebRequest servletWebRequest = new ServletWebRequest ( request ) ; \n\tAtmosRequest atmosRequest = new AtmosRequest ( servletWebRequest ) ; \n\tAtmosResponse atmosResponse = new AtmosResponse $F2 ; \n\tContext context = $F74628 ( Context ) ; \n\tScriptableObject scope = ( ScriptableObject ) context . initStandardObjects ( global ) ; \n\t$F564 ( injectPathVariables , servletWebRequest , scope ) atmosFunction . setParentScope ( scope ) ; \n\tObject result = atmosFunction . call ( context , scope , atmosFunction , $F84202 ( atmosRequest , atmosResponse ) ) ; \n\t$F5605 ( processCookie , atmosResponse , response , scope ) $F5605 ( processSession , atmosRequest , request , scope ) $F564 ( processRedirectOrForwardPath , atmosResponse , scope ) return result ; \n\t} \n"}, {"code": "void map ( D6Model mModelObj , PreparedStatement preparedStatement , D6Inex includeExcludeColumnNames ) throws D6Exception { \n\t$F10467 ( log , mModelObj ) final $F1043 columnNameSet = getAllColumnNames ( ) ; \n\t$F1987 ( parameterIndex ) if $F268 ( includeExcludeColumnNames ) { \n\t\tincludeExcludeColumnNames . manipulate ( columnNameSet ) ; \n\t\t} \n\tfor ( String columnName : columnNameSet ) { \n\t\tfinal D6ModelClassFieldInfo fieldInfo = getFieldInfo ( columnName ) ; \n\t\tfinal boolean isAutoIncrement = fieldInfo . isAutoIncrement ; \n\t\tfinal boolean isNullable = fieldInfo . isNullable ; \n\t\tfinal Field field = fieldInfo . field ; \n\t\t$F213834 ( fieldName , field ) final $F2612 $F2251 ( type , field ) ; \n\t\t$F105146 ( fieldValue ) try $F13003 ( fieldValue , field , mModelObj ) catch ( IllegalArgumentException e ) { \n\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t} \n\t\tcatch ( IllegalAccessException e ) { \n\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t} \n\t\tif ( fieldValue == null && isNullable == false && isAutoIncrement == false ) { \n\t\t\tthrow new D6Exception ( $F282202 ( fieldName , columnName ) ) ; \n\t\t\t} \n\t\tif $F385413 ( isAutoIncrement ) { \n\t\t\ttry { \n\t\t\t\tlog ( $F234052 ( parameterIndex , columnName , fieldValue , type ) ) ; \n\t\t\t\t$F12601 ( setValue , parameterIndex , preparedStatement , type , fieldValue ) } \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t\t} \n\t\t\tparameterIndex ++ ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "String createInsertPreparedSQLStatement $F2 { \n\tfinal D6Inex includeExcludeColumnNames = null ; \n\t$F2233 ( ignoreDuplicate ) $F4282 ( createInsertPreparedSQLStatement , includeExcludeColumnNames , ignoreDuplicate ) } \n"}, {"code": "String createInsertPreparedSQLStatement ( D6Inex includeExcludeColumnNames , boolean ignoreDuplicate ) { \n\tfinal $F1043 columnNameSet = getAllColumnNames ( ) ; \n\tfinal StringGrabber sgSQL = new StringGrabber $F2 ; \n\tfinal DBTable table = mModelClazz . getAnnotation ( DBTable . class ) ; \n\t$F128456 ( tableName , table ) if ( ignoreDuplicate ) $F90493 ( sgSQL , tableName ) else $F90493 ( sgSQL , tableName ) final StringGrabber sgColumnNames = new StringGrabber $F2 ; \n\tfinal StringGrabber sgValues = new StringGrabber $F2 ; \n\tif $F268 ( includeExcludeColumnNames ) { \n\t\tincludeExcludeColumnNames . manipulate ( columnNameSet ) ; \n\t\t} \n\tfor ( String columnName : columnNameSet ) { \n\t\tfinal D6ModelClassFieldInfo fieldInfo = getFieldInfo ( columnName ) ; \n\t\tfinal boolean isAutoIncrement = fieldInfo . isAutoIncrement ; \n\t\tif $F385413 ( isAutoIncrement ) { \n\t\t\t$F1212 ( sgColumnNames , columnName ) $F1218 ( sgColumnNames ) $F1218 ( sgValues ) $F1218 ( sgValues ) } \n\t\telse $F1645 } \n\tif $F1216 ( sgColumnNames ) { \n\t\tsgColumnNames . removeTail ( INT00 ) ; \n\t\t} \n\tif $F1216 ( sgValues ) { \n\t\tsgValues . removeTail ( INT00 ) ; \n\t\t} \n\t$F7255 ( sgSQL , sgColumnNames ) $F1218 ( sgSQL ) $F1218 ( sgSQL ) $F7255 ( sgSQL , sgValues ) $F1218 ( sgSQL ) $F127965 ( sql , sgSQL ) $F10467 ( log , sql ) return sql ; \n\t} \n"}, {"code": "public static String getMessage $F27155 ( code , args ) { \n\treturn getMessage ( $F600772 ( I18nUtils ) , code , args ) ; \n\t} \n"}, {"code": "public String getRedirectUrl $F2 throws XMLStreamException , IOException { \n\tString url = this . settings . getIdpSsoTargetUrl ( ) ; \n\turl += STRING00 ; \n\turl += URLEncoder . encode ( this . getXmlBase64Request ( ) , STRING00 ) ; \n\tif ( this . parameters != null ) { \n\t\tfor ( $F11301 param : this . parameters . entrySet ( ) ) { \n\t\t\tString key = URLEncoder . encode ( $F393918 ( param ) ) ; \n\t\t\tString val = URLEncoder . encode ( $F436754 ( param ) ) ; \n\t\t\turl += $F4241 ( key , val ) ; \n\t\t\t} \n\t\t} \n\treturn url ; \n\t} \n"}, {"code": "void connect ( SocketAddress socketAddress , boolean useSSL ) { \n\tChannelFactory channelFactory = new NioClientSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ; \n\tChannelPipeline clientPipeline = NettyChannelPipeline . newPipeline ( connection ) ; \n\tSslHandler sslHandler = null ; \n\tif ( useSSL ) { \n\t\t$F10411 ( sslHandler , getClientSSLHandler ) clientPipeline . addFirst ( STRING00 , sslHandler ) ; \n\t\t} \n\tbootstrap = new ClientBootstrap ( channelFactory ) ; \n\tbootstrap . setOption ( $F6503 ) ; \n\tbootstrap . setPipeline ( clientPipeline ) ; \n\t$F417341 ( connectedLatch ) ConnectionStateListener connectedListener = new ConnectionStateListener $F2 { \n\t\t$F1 public void onConnectionConnected $F2 $F4601 ( connectedLatch ) $F1 public void onConnectionClosing $F2 $F1645 $F1 public void onConnectionClosed $F2 $F1645 } \n\t; \n\tconnection . addConnectionStateListener ( connectedListener ) ; \n\ttry { \n\t\tChannelFuture future = $F133153 ( bootstrap , socketAddress ) ; \n\t\t$F45360 ( log ) $F4542 ( future ) if $F126624 ( future ) { \n\t\t\t$F4542 ( connectedLatch ) $F45360 ( log ) $F7943 ( useSSL , doSSLHandshake , sslHandler ) connected = true ; \n\t\t\t} \n\t\telse { \n\t\t\t$F45360 ( log ) throw new ConnectionException $F78905 ( future ) ; \n\t\t\t} \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow new ConnectionException $F6 ; \n\t\t} \n\tfinally { \n\t\tconnection . removeConnectionStateListener ( connectedListener ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void quit ( String reason ) { \n\tif ( ! connected ) { \n\t\tthrow new NotConnectedException $F2 ; \n\t\t} \n\tMessage quit = new Message ( MessageType . QUIT , reason ) ; \n\tChannelFuture future = $F179956 ( connection , quit ) ; \n\tfuture . addListener ( new ChannelFutureListener $F2 { \n\t\t$F1 public void operationComplete ( ChannelFuture future ) throws Exception $F2453 ( connection ) } \n\t) ; \n\t} \n"}, {"code": "$F1 public Channel join ( String channelName ) { \n\tif ( ! connected ) { \n\t\tthrow new NotConnectedException $F2 ; \n\t\t} \n\tChannelImpl channel = new ChannelImpl ( this , channelName ) ; \n\tif ( $F9118 ( channel ) ) $F356 ( channel ) $F724 } \n"}, {"code": "public NegateMultiPos < S , Integer , Integer > before ( int rightIndex ) { \n\treturn new NegateMultiPos < S , Integer , Integer > $F97292 ( rightIndex ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn aQueue ( STRING00 , left , right , pos , position , null , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public NegateMultiPos < S , Integer , Character > after ( int leftIndex ) { \n\treturn new NegateMultiPos < S , Integer , Character > $F10548 ( leftIndex ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn aQueue ( STRING00 , left , right , pos , position , null , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public S betns $F1195 ( left , right ) { \n\treturn betn ( left , right ) . late ( ) ; \n\t} \n"}, {"code": "public AsymmMultiPos < S , String , String > betn $F1195 ( left , right ) { \n\treturn new AsymmMultiPos < S , String , String > ( left , right ) { \n\t\t$F1 protected S result $F2 { \n\t\t\tif $F1931 ( Strs , asymmLR ) { \n\t\t\t\treturn aQueue ( STRING00 , left , right , pos , position , inclusive , plusminus , filltgt ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn aQueue ( STRING00 , left , right , pos , asymmLR , inclusive , plusminus , filltgt ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public InclusMultiPos < S , String , String > before ( String right ) { \n\treturn new InclusMultiPos < S , String , String > $F10548 ( right ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn aQueue ( STRING00 , left , right , pos , position , inclusive , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public S lookups $F996 ( lookups ) { \n\tfor ( $F24293 ( lookup , checkNotNull , lookups ) ) { \n\t\tlookup ( lookup ) . late ( ) ; \n\t\t} \n\t$F24894 ( THIS ) } \n"}, {"code": "public NegateMultiPos < S , String , String > lookup ( String lookups ) { \n\treturn new NegateMultiPos < S , String , String > $F10548 ( lookups ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn aQueue ( STRING00 , left , right , pos , position , null , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public S setBetn $F12004 ( leftIndex , rightIndex ) { \n\treturn set ( Indexer . of ( $F144 ( delegate ) ) . between ( leftIndex , rightIndex ) ) ; \n\t} \n"}, {"code": "public NegateMultiPos < S , Integer , Integer > setBetns $F12004 ( leftIndex , rightIndex ) { \n\treturn new NegateMultiPos < S , Integer , Integer > ( leftIndex , rightIndex ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn delegateQueue ( STRING00 , left , right , pos , position , null , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public S setBefore ( int rightIndex ) { \n\treturn set ( Indexer . of ( $F144 ( delegate ) ) . before ( rightIndex ) ) ; \n\t} \n"}, {"code": "public S setAfter ( int leftIndex ) { \n\treturn set ( Indexer . of ( $F144 ( delegate ) ) . after ( leftIndex ) ) ; \n\t} \n"}, {"code": "public InclusMultiPos < S , String , String > setBefore ( String right ) { \n\treturn new InclusMultiPos < S , String , String > $F85113 ( right ) { \n\t\t$F1 protected S result $F2 { \n\t\t\treturn delegateQueue ( STRING00 , left , right , pos , position , inclusive , plusminus , filltgt ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public AsymmMultiPos < S , String , String > setBetnNext ( String leftSameWithRight ) { \n\treturn new AsymmMultiPos < S , String , String > $F85113 ( leftSameWithRight ) { \n\t\t$F1 protected S result $F2 { \n\t\t\tif $F1931 ( Strs , asymmLR ) { \n\t\t\t\treturn delegateQueue ( STRING00 , left , right , pos , position , inclusive , plusminus , filltgt ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\treturn delegateQueue ( STRING00 , left , left , pos , asymmLR , inclusive , plusminus , filltgt ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static void main ( $F2613 ( benchmarkClass ) , $F21 args ) { \n\tmain ( $F13128 ( concat , args , benchmarkClass ) ) ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) { \n\tPrintWriter stdout = new PrintWriter ( System . out , true ) ; \n\tPrintWriter stderr = new PrintWriter ( System . err , true ) ; \n\t$F1987 ( code ) try { \n\t\t$F5605 ( exitlessMain , args , stdout , stderr ) code = INT00 ; \n\t\t} \n\tcatch ( InvalidCommandException e ) { \n\t\te . display ( stderr ) ; \n\t\tcode = e . exitCode ( ) ; \n\t\t} \n\tcatch ( InvalidBenchmarkException e ) { \n\t\te . display ( stderr ) ; \n\t\t} \n\tcatch ( InvalidConfigurationException e ) { \n\t\te . display ( stderr ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\t$F49958 ( t , stderr ) $F9812 ( stdout ) $F10279 ( stdout ) $F10279 ( stdout ) } \n\t$F6369 ( stdout ) $F6369 ( stderr ) $F22020 ( System , code ) } \n"}, {"code": "public static StringIdentifierGenerator getInstance ( StringIdentifierGenerator [ ] generators ) { \n\t$F24434 ( generators ) $F90724 ( generators ) StringIdentifierGenerator [ ] generatorsCopy = new StringIdentifierGenerator $F13558 ( generators ) ; \n\tfor ( $F2674 ( i , generators ) ) { \n\t\tif $F32580 ( generators , i ) $F24432 $F79112 ( generatorsCopy , i , generators ) } \n\treturn new CompositeIdentifierGenerator ( generatorsCopy ) ; \n\t} \n"}, {"code": "public static StringIdentifierGenerator getInstance ( Collection generators ) { \n\t$F24434 ( generators ) if $F3415 ( generators ) $F24432 StringIdentifierGenerator [ ] generatorsCopy = new StringIdentifierGenerator $F31920 ( generators ) ; \n\t$F1987 ( i ) $F680835 ( it , generators ) while $F11310 ( it ) { \n\t\tgeneratorsCopy [ i ] = ( StringIdentifierGenerator ) $F11311 ( it ) ; \n\t\tif $F32580 ( generatorsCopy , i ) $F24432 i ++ ; \n\t\t} \n\treturn new CompositeIdentifierGenerator ( generatorsCopy ) ; \n\t} \n"}, {"code": "public StringIdentifierGenerator [ ] getIdentifierGenerators $F2 { \n\t$F58133 ( len , identifierGenerators ) StringIdentifierGenerator [ ] out = new StringIdentifierGenerator [ len ] ; \n\t$F63624 ( System , identifierGenerators , out , len ) return out ; \n\t} \n"}, {"code": "public static boolean hasSameComparator ( Comparator $F45 comparator , $F58426 ( elements ) ) { \n\tcheckNotNull ( comparator ) ; \n\tcheckNotNull ( elements ) ; \n\tComparator $F45 comparator2 ; \n\tif ( elements instanceof SortedSet ) { \n\t\tcomparator2 = comparator ( ( SortedSet $F45 ) elements ) ; \n\t\t} \n\telse if ( elements instanceof SortedIterable ) { \n\t\tcomparator2 = ( ( SortedIterable $F45 ) elements ) . comparator ( ) ; \n\t\t} \n\telse $F1668 $F66747 ( comparator , comparator2 ) } \n"}, {"code": "$F762 private void setCookie ( NativeObject result , HttpServletResponse response ) { \n\t$F4357 cookieMap = ScriptableObject . getTypedProperty ( result , STRING00 , $F29028 ) ; \n\t$F15530 ( cookieMap ) Iterator $F125826 $F11306 ( iterator , cookieMap ) ; \n\twhile $F11310 ( iterator ) { \n\t\tString name = $F11311 ( iterator ) . getKey ( ) ; \n\t\tCookie cookie = new Cookie ( $F8220 ( name , cookieMap ) ) ; \n\t\t$F194566 ( response , cookie ) } \n\t} \n"}, {"code": "public void handle ( Object event ) throws EventException { \n\ttry { \n\t\tthis . handler . invoke ( listener , event ) ; \n\t\t} \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new Error $F4489 ( handler , e ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tthrow new Error $F4243 ( handler , event , e ) ; \n\t\t} \n\tcatch ( InvocationTargetException e ) { \n\t\tif ( $F6278 ( e ) instanceof Error ) throw ( Error ) $F6278 ( e ) ; \n\t\tthrow new EventException $F2144 ( this , event , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static int queryInt ( PreparedStatement stmt , int def ) throws SQLException { \n\t$F391030 ( rs ) try { \n\t\t$F359656 ( rs , stmt ) if $F88402 ( rs ) { \n\t\t\t$F289944 ( value , rs ) if ( ! $F541414 ( rs ) ) $F356 ( value ) } \n\t\treturn def ; \n\t\t} \n\t$F26192 ( close , rs ) } \n"}, {"code": "public static String queryString ( Connection con , String def , String query , Object ... param ) throws SQLException { \n\t$F403331 ( stmt ) try { \n\t\t$F1754961 ( stmt , con , query ) stmt . setMaxRows ( INT00 ) ; \n\t\tfor ( $F2674 ( i , param ) ) { \n\t\t\tstmt . setObject ( i + INT00 , param [ i ] ) ; \n\t\t\t} \n\t\t$F4282 ( queryString , stmt , def ) } \n\t$F26192 ( close , stmt ) } \n"}, {"code": "public static String queryString ( PreparedStatement stmt , String def ) throws SQLException { \n\t$F391030 ( rs ) try { \n\t\t$F359656 ( rs , stmt ) return $F11311 ( rs ) ? $F57199 ( rs ) : def ; \n\t\t} \n\t$F26192 ( close , rs ) } \n"}, {"code": "public static $F1975 queryBinary ( DataSource ds , $F1975 def , String query , Object ... param ) throws SQLException { \n\t$F380799 ( con ) try { \n\t\t$F380801 ( con , ds ) $F4845 ( queryBinary , con , def , query , param ) } \n\t$F26192 ( close , con ) } \n"}, {"code": "public static $F1975 queryBinary ( PreparedStatement stmt , $F1975 def ) throws SQLException { \n\t$F391030 ( rs ) try { \n\t\t$F359656 ( rs , stmt ) return $F11311 ( rs ) ? $F963713 ( rs ) : def ; \n\t\t} \n\t$F26192 ( close , rs ) } \n"}, {"code": "public static int update ( Connection con , String query , Object ... param ) throws SQLException { \n\t$F403331 ( stmt ) try { \n\t\t$F1754961 ( stmt , con , query ) for ( $F2674 ( i , param ) ) { \n\t\t\tstmt . setObject ( i + INT00 , param [ i ] ) ; \n\t\t\t} \n\t\treturn $F403332 ( stmt ) ; \n\t\t} \n\t$F26192 ( close , stmt ) } \n"}, {"code": "public static void close ( ResultSet rs , Statement stmt , Connection con ) { \n\tclose ( rs ) ; \n\tclose ( stmt ) ; \n\tclose ( con ) ; \n\t} \n"}, {"code": "public static String getTypeName ( int type , int length , DataSource ds ) throws SQLException { \n\t$F380799 ( con ) try { \n\t\t$F380801 ( con , ds ) $F210 ( getTypeName , type , length , con ) } \n\t$F26192 ( close , con ) } \n"}, {"code": "public static String getTypeName ( int type , int length , Connection con ) throws SQLException { \n\treturn getTypeName ( type , length , $F30922 ( con ) ) ; \n\t} \n"}, {"code": "public static String getTypeName ( int type , int length , DatabaseMetaData meta ) throws SQLException { \n\t$F391030 ( typeInfo ) try { \n\t\ttypeInfo = $F295187 ( meta ) ; \n\t\t$F210 ( getTypeName , type , length , typeInfo ) } \n\t$F26192 ( close , typeInfo ) } \n"}, {"code": "private static String getTypeName ( int type , int length , ResultSet typeInfo ) throws SQLException { \n\tint dataTypeColumn = typeInfo . findColumn ( STRING00 ) ; \n\twhile $F88402 ( typeInfo ) { \n\t\tif ( $F105606 ( typeInfo , dataTypeColumn ) == type ) { \n\t\t\t$F3276 ( typeName , typeInfo ) if $F3730 ( length ) { \n\t\t\t\tif $F23577 ( typeName ) { \n\t\t\t\t\treturn typeName . replaceAll ( $F44311 ( length ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\treturn $F55709 ( typeName , length ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F356 ( typeName ) } \n\t\t} \n\t$F724 } \n"}, {"code": "public static void print ( ResultSet rs , PrintStream out ) throws SQLException { \n\t$F391053 ( meta , rs ) $F391055 ( columns , meta ) for ( $F6610 ( i , columns ) ) { \n\t\tif $F3730 ( i ) $F12348 ( out ) $F10273 ( out ) out . print ( meta . getColumnName ( i + INT00 ) ) ; \n\t\t$F10273 ( out ) } \n\t$F9812 ( out ) while $F88402 ( rs ) { \n\t\tfor ( $F6610 ( i , columns ) ) { \n\t\t\tif $F3730 ( i ) $F12348 ( out ) String value = rs . getString ( i + INT00 ) ; \n\t\t\tif $F268 ( value ) { \n\t\t\t\t$F10273 ( out ) out . print ( $F12757 ( value ) ) ; \n\t\t\t\t$F10273 ( out ) } \n\t\t\telse $F12348 ( out ) } \n\t\t$F9812 ( out ) } \n\t} \n"}, {"code": "$F762 public static < M extends Metamodel $F26212 , E > M metamodel $F52985 ( entity ) { \n\tif $F33656 ( metamodels , entity ) { \n\t\treturn ( M ) $F198 ( metamodels , entity ) ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tint i = $F601997 ( entity ) ; \n\t\t\tM metamodel = null ; \n\t\t\tif $F2523 ( i ) { \n\t\t\t\tmetamodel = ( M ) Class . forName ( $F2282 ( entity ) ) . newInstance ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tmetamodel = ( M ) Class . forName ( $F336881 ( entity ) ( INT00 , $F601997 ( entity ) + INT00 ) + STRING00 + $F336881 ( entity ) ( $F601997 ( entity ) + INT00 ) ) . newInstance ( ) ; \n\t\t\t\t} \n\t\t\t$F2725 ( metamodels , entity , metamodel ) return metamodel ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new UncheckedException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void run $F2 { \n\ttry { \n\t\twhile $F132845 ( expires ) { \n\t\t\tsleep ( sysInterval ) ; \n\t\t\tsynchronized ( ThreadClockImpl . class ) $F57826 ( currentTimeMillis , sysInterval ) } \n\t\t} \n\tcatch ( InterruptedException e ) $F113711 ( System ) } \n"}, {"code": "private synchronized long getTimeSynchronized $F2 throws OverClockedException { \n\t$F57820 ( current ) synchronized ( ThreadClockImpl . class ) $F1619 ( current , currentTimeMillis ) if ( current != lastTimeMs ) { \n\t\tgeneratedThisInterval = INT00 ; \n\t\tlastTimeMs = current ; \n\t\t} \n\tif ( generatedThisInterval + INT00 >= ( INTERVALS_PER_MILLI * sysInterval ) ) { \n\t\tthrow new OverClockedException $F2 ; \n\t\t} \n\treturn ( $F579515 ( current , GREGORIAN_CHANGE_OFFSET , INTERVALS_PER_MILLI ) ) + generatedThisInterval ++ ; \n\t} \n"}, {"code": "public long getUUIDTime $F2 throws OverClockedException { \n\tif ( $F139745 ( worker ) ) { \n\t\tsynchronized ( SystemClockImpl . class ) { \n\t\t\t$F58904 ( currentTimeMillis , System ) $F4599 ( worker ) } \n\t\tgeneratedThisInterval = INT00 ; \n\t\t} \n\t$F24894 ( getTimeSynchronized ) } \n"}, {"code": "public static String fileKeyToPathName ( final ByteBuffer fileKey , final String digestAlgorithm , final int tokenLength , final String tokenDelimiter ) throws NoSuchAlgorithmException { \n\t$F38495 ( fileKey ) if $F148461 ( fileKey ) $F24432 $F38495 ( digestAlgorithm ) if $F9104 ( tokenLength ) $F9654 ( tokenLength ) $F38495 ( tokenDelimiter ) $F1706800 ( digest , MessageDigest , digestAlgorithm ) digest . update ( fileKey . asReadOnlyBuffer ( ) ) ; \n\tfinal $F1975 $F145037 ( digested , digest ) ; \n\tfinal String hexed = IntStream . range ( $F174491 ( digested ) ) . collect ( ( ) - > new StringBuilder $F39966 ( digested ) , ( b , i ) - > new Formatter ( b ) . format ( STRING00 , $F2675 ( digested , i ) ) , StringBuilder : : append ) . toString ( ) ; \n\tfinal String joined = Stream . of ( hexed . split ( $F320 ( tokenLength ) ) ) . collect ( Collectors . joining ( tokenDelimiter ) ) ; \n\treturn joined ; \n\t} \n"}, {"code": "$F63111 ReferenceEntry $F28644 newEntry ( K key , int hash , $F623 ReferenceEntry $F28644 next ) { \n\treturn segmentFor ( hash ) . newEntry ( key , hash , next ) ; \n\t} \n"}, {"code": "$F63111 ValueReference $F28644 newValueReference ( ReferenceEntry $F28644 entry , V value ) { \n\tint hash = $F75089 ( entry ) ; \n\treturn valueStrength . referenceValue ( $F78174 ( segmentFor , hash , entry , value ) ) ; \n\t} \n"}, {"code": "V getLiveValue ( ReferenceEntry $F28644 entry ) { \n\tif ( $F712 ( entry ) == null ) $F2200 V value = entry . getValueReference ( ) . get ( ) ; \n\t$F2201 ( value ) if ( expires ( ) && isExpired ( entry ) ) $F2200 return value ; \n\t} \n"}, {"code": "static $F28644 void connectExpirables ( ReferenceEntry $F28644 previous , ReferenceEntry $F28644 next ) { \n\tprevious . setNextExpirable ( next ) ; \n\tnext . setPreviousExpirable ( previous ) ; \n\t} \n"}, {"code": "static $F28644 void nullifyExpirable ( ReferenceEntry $F28644 nulled ) { \n\tReferenceEntry $F28644 $F57803 ( nullEntry ) ; \n\tnulled . setNextExpirable ( nullEntry ) ; \n\tnulled . setPreviousExpirable ( nullEntry ) ; \n\t} \n"}, {"code": "static $F28644 void connectEvictables ( ReferenceEntry $F28644 previous , ReferenceEntry $F28644 next ) { \n\tprevious . setNextEvictable ( next ) ; \n\tnext . setPreviousEvictable ( previous ) ; \n\t} \n"}, {"code": "static $F28644 void nullifyEvictable ( ReferenceEntry $F28644 nulled ) { \n\tReferenceEntry $F28644 $F57803 ( nullEntry ) ; \n\tnulled . setNextEvictable ( nullEntry ) ; \n\tnulled . setPreviousEvictable ( nullEntry ) ; \n\t} \n"}, {"code": "protected $F26212 void journalize ( Character l , $F26215 ( collection ) , Decision $F26212 decision ) { \n\tjournalize ( collection , decision , l , isLogEnabled ( l ) , null , $F3745 ) ; \n\t} \n"}, {"code": "public static $F1372 T exploreObject ( Object rootObject , ObjectVisitor $F1372 visitor ) { \n\treturn exploreObject ( rootObject , visitor , EnumSet . noneOf ( Feature . class ) ) ; \n\t} \n"}, {"code": "public static $F1372 T exploreObject ( Object rootObject , ObjectVisitor $F1372 visitor , EnumSet $F802519 features ) { \n\tDeque $F6766355 stack = new ArrayDeque $F6766355 $F1415 ; \n\tif $F268 ( rootObject ) stack . push ( Chain . root ( rootObject ) ) ; \n\twhile $F386 ( stack ) { \n\t\tChain $F22659 ( chain , stack ) ; \n\t\tTraversal traversal = $F823009 ( visitor , chain ) ; \n\t\tswitch ( traversal ) { \n\t\t\tcase SKIP : $F23605 $F117276 ( EXPLORE ) $F60239 } \n\t\t$F197020 Object $F4377 ( value , chain ) ; \n\t\t$F43477 ( valueClass , value ) if $F76445 ( valueClass ) { \n\t\t\tboolean isPrimitive = $F53053 ( valueClass ) . isPrimitive ( ) ; \n\t\t\tfor ( int i = $F6606 ( Array , value ) - INT00 ; \n\t\t\ti >= INT00 ; \n\t\t\ti -- ) { \n\t\t\t\t$F555928 ( childValue , Array , value , i ) if ( isPrimitive ) { \n\t\t\t\t\tif ( features . contains ( Feature . VISIT_PRIMITIVES ) ) { \n\t\t\t\t\t\tvisitor . visit ( chain . appendArrayIndex ( i , childValue ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse if $F112 ( childValue ) { \n\t\t\t\t\tif ( features . contains ( Feature . VISIT_NULL ) ) { \n\t\t\t\t\t\tvisitor . visit ( chain . appendArrayIndex ( i , childValue ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tstack . push ( chain . appendArrayIndex ( i , childValue ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfor ( Field field : Lists . reverse ( getAllFields ( value ) ) ) { \n\t\t\t\t$F105146 ( childValue ) try $F13003 ( childValue , field , value ) catch ( Exception e ) $F60682 ( e ) if $F112 ( childValue ) { \n\t\t\t\t\tif ( features . contains ( Feature . VISIT_NULL ) ) { \n\t\t\t\t\t\tvisitor . visit ( chain . appendField ( field , childValue ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tboolean isPrimitive = $F330451 ( field ) ; \n\t\t\t\t\tChain extendedChain = chain . appendField ( field , childValue ) ; \n\t\t\t\t\tif ( isPrimitive ) { \n\t\t\t\t\t\tif ( features . contains ( Feature . VISIT_PRIMITIVES ) ) $F1971073 ( visitor , extendedChain ) } \n\t\t\t\t\telse $F22707 ( stack , extendedChain ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn $F330770 ( visitor ) ; \n\t} \n"}, {"code": "public void updateParameterCount ( final EquPart [ ] equParts , final int myLocInArray ) { \n\t$F46535 ( setParameterCount ) for ( $F544747 ( p , myLocInArray , equParts ) ) { \n\t\tfinal EquPart part = equParts [ p ] ; \n\t\tif ( $F5227 ( part ) <= getLevel ( ) ) $F332 if ( ( $F5227 ( part ) == ( $F132887 ( getLevel ) ) ) && part instanceof OpComma ) setParameterCount ( $F132887 ( getParameterCount ) ) ; \n\t\t} \n\tif $F170954 ( getParameterCount ) setParameterCount ( $F132887 ( getParameterCount ) ) ; \n\t} \n"}, {"code": "$F1 public String onVariable ( String variable ) { \n\t$F4728 ( value ) if $F34964 ( variables , variable ) { \n\t\t$F2744 ( val , variables , variable ) value = $F268 ( val ) ? $F797 ( val ) : null ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "public boolean notifyMeasurementEnding ( Iterable $F2357373 measurements ) throws IOException { \n\tprintln ( controlLogMessageRenderer . render ( new StopMeasurementLogMessage ( measurements ) ) ) ; \n\tfor ( Measurement measurement : measurements ) { \n\t\tprintln ( String . format ( STRING00 , $F104967 ( measurement ) , $F11145 ( measurement ) . magnitude ( ) / $F3072849 ( measurement ) , $F11145 ( measurement ) . unit ( ) ) ) ; \n\t\t} \n\t$F6369 ( writer ) $F24894 ( shouldKeepMeasuring ) } \n"}, {"code": "public $F5021 scan $F2 { \n\ttry { \n\t\tClassResolver $F3040051 resolver = new CtClassClassResolver ( paths ) ; \n\t\tlogger . info ( STRING00 + resolver . paths ( ) + STRING00 ) ; \n\t\tSet $F3040051 ctClasses = resolver . resolve ( new Matcher $F3040051 $F2 { \n\t\t\tpublic boolean matches ( CtClass ctClass ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F352575 ( modifiers , ctClass ) if ( $F77483 ( ctClass ) || $F352576 ( Modifier , modifiers ) || ! $F555370 ( Modifier , modifiers ) || ctClass . hasAnnotation ( Builtin . class ) ) { \n\t\t\t\t\t\t$F712584 ( ctClass ) $F213 } \n\t\t\t\t\tfor ( CtClass i : $F28258 ( ctClass ) ) { \n\t\t\t\t\t\tif ( $F508 ( i ) ( Provider . class . getName ( ) ) ) $F233 } \n\t\t\t\t\tfor ( Object object : $F292 ( ctClass ) ) { \n\t\t\t\t\t\t$F12510 annotationType = ( ( Annotation ) object ) . annotationType ( ) ; \n\t\t\t\t\t\tif ( annotationType . isAnnotationPresent ( Stereotype . class ) || annotationType . isAnnotationPresent ( Deployment . class ) || annotationType . isAnnotationPresent ( Binding . class ) || annotationType . isAnnotationPresent ( Scope . class ) ) $F233 } \n\t\t\t\t\t} \n\t\t\t\t$F148617 $F712584 ( ctClass ) $F213 } \n\t\t\t} \n\t\t) ; \n\t\t$F12507 classes = new TreeSet $F5020 ( new Comparator $F5020 $F2 { \n\t\t\t$F1 public int compare $F43483 ( o1 , o2 ) $F446654 ( o1 , o2 ) } \n\t\t) ; \n\t\tfor ( CtClass ctClass : ctClasses ) { \n\t\t\ttry { \n\t\t\t\tclasses . add ( Class . forName ( $F507 ( ctClass ) , true , $F3944 ( Thread ) ) ) ; \n\t\t\t\t} \n\t\t\t$F5574 ( logger , e ) } \n\t\t$F89128 ( logger , classes ) return classes ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F187773 ( logger , e ) $F11597 ( Collections ) } \n\t} \n"}, {"code": "public static ComparablePattern compile $F62952 ( valueStr ) { \n\tfinal ComparablePattern cp = new ComparablePattern $F2 ; \n\tcp . delegate = $F627 ( Pattern , valueStr ) ; \n\treturn cp ; \n\t} \n"}, {"code": "private void printTitle ( HtmlPage htmlPage , PrintWriter out ) { \n\tout . println ( String . format ( STRING00 , getBitvUnitVersion ( ) , $F2960 ( htmlPage ) , getFormattedDate ( ) ) ) ; \n\t} \n"}, {"code": "private void printViolations ( Violations violations , PrintWriter out ) { \n\t$F10279 ( out ) if ( violations . hasViolations ( ) ) { \n\t\tfor ( Violation violation : $F59466 ( violations ) ) { \n\t\t\t$F601964 ( out , violation ) } \n\t\t} \n\telse $F602649 ( out ) } \n"}, {"code": "public static long next $F62952 ( name ) { \n\t$F4728 ( id ) try { \n\t\tid = Locks . lockEntityQuite ( new StorageId ( NumberSequence . class , null , null , name ) , INT00 , TimeUnit . SECONDS ) ; \n\t\tlong l = getLocalStorage ( ) . read ( name ) ; \n\t\tl ++ ; \n\t\tDDSCluster . call ( new MessageBean ( NumberSequence . class , null , null , name , STRING00 , Objects . newHashMap ( $F4868 , $F23415 , STRING00 , l ) ) ) ; \n\t\treturn l ; \n\t\t} \n\tfinally { \n\t\tLocks . releaseLock ( id ) ; \n\t\t} \n\t} \n"}, {"code": "public NegateMultiPos < E , L , R > fnegate ( Object filler ) { \n\tthis . filltgt = $F43698 ( checkNotNull , filler ) ; \n\tnegmark ( $F214148 . isInstance ( filler ) ? STRING00 : NEGATE ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static < WorkingType > WorkingType fromBagAsType ( Bag bag , Class type ) { \n\treturn $F268 ( bag ) ? ( WorkingType ) $F22744 ( deserialize , type , bag ) : null ; \n\t} \n"}, {"code": "public static CaduceusProgram read ( $F410888 Resource resource ) throws IOException { \n\tCaduceusProgram program = new CaduceusProgram $F2 ; \n\ttry ( Reader reader = resource . reader ( ) ) { \n\t\t$F619 rules = ensureList ( new Yaml $F2 . load ( reader ) , STRING00 ) ; \n\t\tfor ( Object entry : rules ) { \n\t\t\t$F96 $F6248 ( ruleMap , ensureMap , entry ) ; \n\t\t\tString ruleName = Val . of ( $F1169 ( ruleMap ) ) . asString ( ) ; \n\t\t\tString pattern = Val . of ( $F1169 ( ruleMap ) ) . asString ( ) ; \n\t\t\tif ( StringUtils . isNullOrBlank ( pattern ) ) $F63324 ( entry ) if ( StringUtils . isNullOrBlank ( ruleName ) ) $F63324 ( entry ) List < CaduceusAnnotationProvider > $F35088 ( annotationProviders ) ; \n\t\t\tif $F55319 ( ruleMap ) { \n\t\t\t\t$F619 annotationList = ensureList ( $F670829 ( ruleMap ) ) ; \n\t\t\t\tfor ( Object o : annotationList ) { \n\t\t\t\t\tannotationProviders . add ( CaduceusAnnotationProvider . fromMap ( $F2754 ( ensureMap , o ) , $F2408329 ( resource ) , ruleName ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tList < CaduceusRelationProvider > $F35088 ( relationProviders ) ; \n\t\t\tif $F55319 ( ruleMap ) { \n\t\t\t\t$F619 relations = ensureList ( $F670829 ( ruleMap ) ) ; \n\t\t\t\tfor ( Object o : relations ) { \n\t\t\t\t\trelationProviders . add ( CaduceusRelationProvider . fromMap ( $F2754 ( ensureMap , o ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\ttry { \n\t\t\t\tprogram . rules . add ( new CaduceusRule ( $F2408329 ( resource ) , ruleName , $F627 ( TokenRegex , pattern ) , annotationProviders , relationProviders ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( ParseException e ) $F63324 ( ruleName ) } \n\t\t} \n\treturn program ; \n\t} \n"}, {"code": "public void execute ( $F410888 Document document ) { \n\tfor ( CaduceusRule rule : rules ) { \n\t\tTokenMatcher matcher = rule . getRegex ( ) . matcher ( document ) ; \n\t\twhile $F14102 ( matcher ) { \n\t\t\tArrayListMultimap < String , Annotation > $F25309 ( groups , ArrayListMultimap ) ; \n\t\t\tArrayListMultimap < CaduceusAnnotationProvider , Annotation > $F25309 ( providers , ArrayListMultimap ) ; \n\t\t\trule . getAnnotationProviders ( ) . forEach ( ap - > <missing ';'> { \n\t\t\t\tif ( $F31800 ( ap ) . equals ( STRING00 ) ) { \n\t\t\t\t\tAnnotation annotation = createOrGet ( document , $F35115 ( ap ) , $F93425 ( matcher ) , $F13548 ( ap ) ) ; \n\t\t\t\t\tgroups . put ( $F31800 ( ap ) , annotation ) ; \n\t\t\t\t\t$F2725 ( providers , ap , annotation ) } \n\t\t\t\telse { \n\t\t\t\t\tmatcher . group ( $F31800 ( ap ) ) . forEach ( g - > <missing ';'> { \n\t\t\t\t\t\tAnnotation annotation = createOrGet ( document , $F35115 ( ap ) , g , $F13548 ( ap ) ) ; \n\t\t\t\t\t\tgroups . put ( $F31800 ( ap ) , annotation ) ; \n\t\t\t\t\t\t$F2725 ( providers , ap , annotation ) } \n\t\t\t\t\t) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t) ; \n\t\t\tif $F473375 ( groups ) { \n\t\t\t\tgroups . putAll ( STRING00 , $F93425 ( matcher ) . tokens ( ) ) ; \n\t\t\t\t} \n\t\t\tHashMultimap < String , Tuple2 < Annotation , Relation > > $F25309 ( relations , HashMultimap ) ; \n\t\t\tfor ( CaduceusRelationProvider rp : rule . getRelationProviders ( ) ) { \n\t\t\t\t$F26726 sourceAnnotations = $F1186 ( rp ) . getAnnotations ( groups , matcher ) ; \n\t\t\t\t$F26726 targetAnnotations = $F4287 ( rp ) . getAnnotations ( groups , matcher ) ; \n\t\t\t\tfor ( Annotation source : sourceAnnotations ) { \n\t\t\t\t\tfor ( Annotation target : targetAnnotations ) { \n\t\t\t\t\t\trelations . put ( $F507 ( rp ) , Tuple2 . of ( source , new Relation ( rp . getRelationType ( ) , rp . getRelationValue ( ) , $F6210 ( target ) ) ) ) ; \n\t\t\t\t\t\tif ( rp . isReciprocal ( ) ) { \n\t\t\t\t\t\t\trelations . put ( $F507 ( rp ) , Tuple2 . of ( target , new Relation ( rp . getRelationType ( ) , rp . getRelationValue ( ) , $F6210 ( source ) ) ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F6942 ( finalRelations ) rule . getRelationProviders ( ) . stream ( ) . filter ( rp - > StringUtils . isNullOrBlank ( rp . getRequires ( ) ) || relations . containsKey ( rp . getRequires ( ) ) ) . forEach ( rp - > <missing ';'> { \n\t\t\t\t$F145074 ( relations , rp ) . forEach ( t - > <missing ';'> { \n\t\t\t\t\tt . getV1 ( ) . add ( t . getV2 ( ) ) ; \n\t\t\t\t\t$F6945 ( finalRelations , rp ) } \n\t\t\t\t) ; \n\t\t\t\t} \n\t\t\t) ; \n\t\t\t$F21320 ( providers ) . stream ( ) . filter ( entry - > ! finalRelations . containsAll ( $F712 ( entry ) . getRequires ( ) ) ) . forEach ( entry - > document . remove ( $F269 ( entry ) ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F2666 ensureCapacity $F66102 ( array , minLength , padding ) { \n\tcheckArgument ( minLength >= INT00 , STRING00 , minLength ) ; \n\tcheckArgument ( padding >= INT00 , STRING00 , padding ) ; \n\treturn $F58369 ( array , minLength ) ? $F64125 ( copyOf , array , minLength , padding ) : array ; \n\t} \n"}, {"code": "private static $F2666 copyOf $F92299 ( original , length ) { \n\t$F44616 ( copy , length ) System . arraycopy ( original , INT00 , copy , INT00 , Math . min ( original . length , length ) ) ; \n\treturn copy ; \n\t} \n"}, {"code": "public final void registerTaskExecutor ( TaskExecutor taskExecutor ) { \n\tif $F112 ( taskExecutor ) { \n\t\tthrow new TaskExeception ( TaskExecutor . class . getSimpleName ( ) + STRING00 ) ; \n\t\t} \n\t$F1357 ( this , taskExecutor ) } \n"}, {"code": "public static AcceptDatetime valueOf $F62952 ( value ) { \n\tfinal Optional < Instant > datetime = parseDatetime ( value ) ; \n\tif $F30198 ( datetime ) { \n\t\treturn new AcceptDatetime $F176532 ( datetime ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "$F762 public static < K , E extends Number > NumberMap $F71808 newNumberMap $F52985 ( elementType ) { \n\tif ( $F4930 ( elementType ) ) return ( NumberMap $F71808 ) newBigDecimalMap ( ) ; \n\tif ( elementType == $F4937 ) return ( NumberMap $F71808 ) newBigIntegerMap ( ) ; \n\tif $F209985 ( elementType ) return ( NumberMap $F71808 ) newByteMap ( ) ; \n\tif $F4886 ( elementType ) return ( NumberMap $F71808 ) newLongMap ( ) ; \n\tif $F4913 ( elementType ) return ( NumberMap $F71808 ) newDoubleMap ( ) ; \n\tif $F4922 ( elementType ) return ( NumberMap $F71808 ) newFloatMap ( ) ; \n\tif $F4895 ( elementType ) return ( NumberMap $F71808 ) newIntegerMap ( ) ; \n\tif $F4904 ( elementType ) return ( NumberMap $F71808 ) newShortMap ( ) ; \n\telse $F58298 } \n"}, {"code": "public static $F53007 NumberMap < K , BigDecimal > newBigDecimalMap $F2 { \n\treturn new NumberMap < K , BigDecimal > $F2 { \n\t\t$F1 public void add ( K key , BigDecimal addend ) { \n\t\t\tput ( key , containsKey ( key ) ? $F31463 ( get , key ) ( addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , BigDecimal subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : BigDecimal . ZERO ) . subtract ( subtrahend ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , BigInteger > newBigIntegerMap $F2 { \n\treturn new NumberMap < K , BigInteger > $F2 { \n\t\t$F1 public void add ( K key , BigInteger addend ) { \n\t\t\tput ( key , containsKey ( key ) ? $F31463 ( get , key ) ( addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , BigInteger subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : BigInteger . ZERO ) . subtract ( subtrahend ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Byte > newByteMap $F2 { \n\treturn new NumberMap < K , Byte > $F2 { \n\t\t$F1 public void add ( K key , Byte addend ) { \n\t\t\tput ( key , ( byte ) ( containsKey ( key ) ? get ( key ) + addend : addend ) ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Byte subtrahend ) { \n\t\t\tput ( key , ( byte ) ( ( containsKey ( key ) ? get ( key ) : INT00 ) - subtrahend ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Double > newDoubleMap $F2 { \n\treturn new NumberMap < K , Double > $F2 { \n\t\t$F1 public void add ( K key , Double addend ) { \n\t\t\tput ( key , containsKey ( key ) ? ( get ( key ) + addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Double subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : NUM00 ) - subtrahend ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Float > newFloatMap $F2 { \n\treturn new NumberMap < K , Float > $F2 { \n\t\t$F1 public void add ( K key , Float addend ) { \n\t\t\tput ( key , containsKey ( key ) ? ( get ( key ) + addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Float subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : NUM00 ) - subtrahend ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Integer > newIntegerMap $F2 { \n\treturn new NumberMap < K , Integer > $F2 { \n\t\t$F1 public void add ( K key , Integer addend ) { \n\t\t\tput ( key , containsKey ( key ) ? ( get ( key ) + addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Integer subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : INT00 ) - subtrahend ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Long > newLongMap $F2 { \n\treturn new NumberMap < K , Long > $F2 { \n\t\t$F1 public void add ( K key , Long addend ) { \n\t\t\tput ( key , containsKey ( key ) ? ( get ( key ) + addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Long subtrahend ) { \n\t\t\tput ( key , ( containsKey ( key ) ? get ( key ) : NUM00 ) - subtrahend ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F53007 NumberMap < K , Short > newShortMap $F2 { \n\treturn new NumberMap < K , Short > $F2 { \n\t\t$F1 public void add ( K key , Short addend ) { \n\t\t\tput ( key , containsKey ( key ) ? ( short ) ( get ( key ) + addend ) : addend ) ; \n\t\t\t} \n\t\t$F1 public void sub ( K key , Short subtrahend ) { \n\t\t\tput ( key , ( short ) ( ( containsKey ( key ) ? get ( key ) : INT00 ) - subtrahend ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public void addAka $F1195 ( country , aka ) { \n\tif ( ! isValidString ( country ) || ! isValidString ( aka ) ) $F255 this . akas . add ( new CountryDetail ( country , aka ) ) ; \n\t} \n"}, {"code": "public void addNetwork $F1195 ( country , networkName ) { \n\tif ( ! isValidString ( country ) || ! isValidString ( networkName ) ) $F255 this . network . add ( new CountryDetail ( country , networkName ) ) ; \n\t} \n"}, {"code": "$F762 public T get ( Object entity ) { \n\tObject value = entity ; \n\tfor ( $F52199 ( name , path ) ) { \n\t\ttry { \n\t\t\tField field = $F242703 ( value ) ( name ) ; \n\t\t\t$F10869 ( field ) $F242709 ( value , field ) } \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new UncheckedException ( e ) ; \n\t\t\t} \n\t\t} \n\t$F21676 ( value ) } \n"}, {"code": "public void set ( E entity , Object value ) { \n\tObject object = entity ; \n\tfor ( int i = INT00 ; \n\ti < $F33007 ( path ) - INT00 ; \n\ti ++ ) { \n\t\ttry { \n\t\t\tField field = $F242703 ( object ) ( $F68899 ( path , i ) ) ; \n\t\t\t$F10869 ( field ) $F242709 ( object , field ) } \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new UncheckedException ( e ) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\tField field = $F242703 ( object ) ( name ) ; \n\t\t$F10869 ( field ) $F52836 ( field , object , value ) } \n\tcatch ( Exception e ) { \n\t\tthrow new UncheckedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public Stream $F328774 streamTuples ( $F410888 HString hString ) { \n\treturn Streams . asStream ( new NGramStringIterator ( annotationStream ( hString ) . collect ( $F1507 ( Collectors ) ) ) ) ; \n\t} \n"}, {"code": "public $F1680423 collectTuples ( $F410888 HString hString ) { \n\treturn streamTuples ( hString ) . collect ( $F1507 ( Collectors ) ) ; \n\t} \n"}, {"code": "public Counter $F328774 countTuples ( $F410888 HString hString ) { \n\treturn getValueCalculator ( ) . adjust ( Counters . newCounter ( streamTuples ( hString ) ) ) ; \n\t} \n"}, {"code": "public Stream < HString > streamHString ( $F410888 HString hString ) { \n\treturn Streams . asStream ( new NGramHStringIterator ( annotationStream ( hString ) . collect ( $F1507 ( Collectors ) ) ) ) ; \n\t} \n"}, {"code": "public List < HString > collectHString ( $F410888 HString hString ) { \n\treturn streamHString ( hString ) . collect ( $F1507 ( Collectors ) ) ; \n\t} \n"}, {"code": "public Counter < HString > countHString ( $F410888 HString hString ) { \n\treturn getValueCalculator ( ) . adjust ( Counters . newCounter ( streamHString ( hString ) ) ) ; \n\t} \n"}, {"code": "public static Object invokeGetterMethod $F2317 ( obj , propertyName ) { \n\tString getterMethodName = STRING00 + $F50143 ( StringUtils , propertyName ) ; \n\treturn invokeMethod ( obj , getterMethodName , $F4528367 , $F389221 ) ; \n\t} \n"}, {"code": "public static void invokeSetterMethod $F274508 ( obj , propertyName , value ) $F54552 ( invokeSetterMethod , obj , propertyName , value ) "}, {"code": "public static void invokeSetterMethod ( Object obj , String propertyName , Object value , $F2613 ( propertyType ) ) { \n\t$F2612 type = propertyType != null ? propertyType : $F298 ( value ) ; \n\tString setterMethodName = STRING00 + $F50143 ( StringUtils , propertyName ) ; \n\tinvokeMethod ( obj , setterMethodName , $F301079 ( type ) , $F128901 ( value ) ) ; \n\t} \n"}, {"code": "public static Object getFieldValue $F816803 ( obj , fieldName ) { \n\tField $F304 ( field , getAccessibleField , obj , fieldName ) ; \n\tif $F112 ( field ) $F131586 ( fieldName , obj ) $F105146 ( result ) try $F13003 ( result , field , obj ) catch ( IllegalAccessException e ) $F242194 ( logger , e ) return result ; \n\t} \n"}, {"code": "public static void setFieldValue ( final Object obj , final String fieldName , final Object value ) { \n\tField $F304 ( field , getAccessibleField , obj , fieldName ) ; \n\tif $F112 ( field ) $F131586 ( fieldName , obj ) try $F106750 ( field , obj , value ) catch ( IllegalAccessException e ) $F242194 ( logger , e ) } \n"}, {"code": "public static Field getAccessibleField $F816803 ( obj , fieldName ) { \n\t$F92938 ( obj ) if $F433318 ( fieldName ) $F24431 for ( $F43476 ( superClass , obj ) ; \n\t$F47971 ( superClass ) ; \n\t$F7915 ( superClass ) ) { \n\t\ttry { \n\t\t\t$F43283 ( field , superClass , fieldName ) $F10869 ( field ) return field ; \n\t\t\t} \n\t\tcatch ( NoSuchFieldException e ) $F1645 } \n\t$F724 } \n"}, {"code": "public static Object invokeMethod ( final Object obj , final String methodName , $F209135 ( parameterTypes ) , $F60785 ( args ) ) { \n\tMethod $F2207 ( method , getAccessibleMethod , obj , methodName , parameterTypes ) ; \n\tif $F112 ( method ) $F131586 ( methodName , obj ) try $F61684 ( method , obj , args ) $F494864 ( convertReflectionExceptionToUnchecked , e ) } \n"}, {"code": "public static Method getAccessibleMethod ( final Object obj , final String methodName , $F137836 ( parameterTypes ) ) { \n\t$F975 ( Asserts , obj ) for ( $F43476 ( superClass , obj ) ; \n\t$F47971 ( superClass ) ; \n\t$F7915 ( superClass ) ) { \n\t\ttry { \n\t\t\tMethod method = $F555252 ( superClass , methodName , parameterTypes ) ; \n\t\t\t$F10869 ( method ) return method ; \n\t\t\t} \n\t\t$F105153 } \n\t$F724 } \n"}, {"code": "public static Method getStaticMethod ( $F105143 ( clazz ) , final String methodName , $F137836 ( parameterTypes ) ) { \n\t$F378086 ( Asserts , clazz ) for ( $F7908 ( superClass , clazz ) ; \n\t$F47971 ( superClass ) ; \n\t$F7915 ( superClass ) ) { \n\t\ttry { \n\t\t\tMethod method = $F555252 ( clazz , methodName , parameterTypes ) ; \n\t\t\t$F10869 ( method ) return method ; \n\t\t\t} \n\t\tcatch ( NoSuchMethodException | SecurityException e ) $F1645 } \n\t$F724 } \n"}, {"code": "public static Object invokeStaticMethod ( $F105143 ( clazz ) , final String methodName , $F209135 ( parameterTypes ) , $F60785 ( parameterValues ) ) { \n\tMethod $F2207 ( method , getStaticMethod , clazz , methodName , parameterTypes ) ; \n\tif $F112 ( method ) $F131586 ( methodName , clazz ) try $F61684 ( method , clazz , parameterValues ) $F494864 ( convertReflectionExceptionToUnchecked , e ) } \n"}, {"code": "$F762 public static Class getSuperClassGenricType ( $F105143 ( clazz ) , final int index ) { \n\tType $F178811 ( genType , clazz ) ; \n\tif ( ! $F71325 ( genType ) ) { \n\t\t$F178816 } \n\t$F71242 params = $F66135 ( genType ) ; \n\tif ( index >= params . length || index < INT00 ) { \n\t\tlogger . warn ( $F320 ( index ) + $F19101 ( clazz ) + STRING00 + params . length ) ; \n\t\t$F178816 } \n\tif ( ! ( params [ index ] instanceof Class ) ) { \n\t\tlogger . warn ( $F587604 ( clazz ) ) ; \n\t\t$F178816 } \n\treturn ( Class ) params [ index ] ; \n\t} \n"}, {"code": "public void configure ( ConfigParams config ) throws ConfigException { \n\t_timeout = config . getAsLongWithDefault ( STRING00 , _timeout ) ; \n\t_maxSize = config . getAsLongWithDefault ( STRING00 , _maxSize ) ; \n\t} \n"}, {"code": "private void cleanup $F2 { \n\tCacheEntry oldest = null ; \n\t_count = INT00 ; \n\tfor ( Map . Entry < String , CacheEntry > e : $F708 ( _cache ) ) { \n\t\t$F19202 ( key , e ) CacheEntry $F4377 ( entry , e ) ; \n\t\tif ( $F381640 ( entry ) ) $F6954 ( _cache , key ) else { \n\t\t\t_count ++ ; \n\t\t\tif ( oldest == null || $F41242 ( oldest ) > $F41242 ( entry ) ) oldest = entry ; \n\t\t\t} \n\t\t} \n\tif ( _count > _maxSize && oldest != null ) { \n\t\t$F114421 ( _cache , oldest ) _count -- ; \n\t\t} \n\t} \n"}, {"code": "public Object retrieve $F1195 ( correlationId , key ) { \n\tsynchronized ( _lock ) { \n\t\tCacheEntry $F199 ( entry , _cache , key ) ; \n\t\t$F2201 ( entry ) if ( $F381640 ( entry ) ) { \n\t\t\t$F6953 ( _cache , key ) _count -- ; \n\t\t\t$F724 } \n\t\t$F75456 ( entry ) } \n\t} \n"}, {"code": "public Object store ( String correlationId , String key , Object value , long timeout ) { \n\tsynchronized ( _lock ) { \n\t\tCacheEntry $F199 ( entry , _cache , key ) ; \n\t\ttimeout = timeout > INT00 ? timeout : _timeout ; \n\t\tif $F112 ( value ) { \n\t\t\tif $F268 ( entry ) { \n\t\t\t\t$F6953 ( _cache , key ) _count -- ; \n\t\t\t\t} \n\t\t\t$F724 } \n\t\tif $F268 ( entry ) { \n\t\t\t$F2276 ( entry , value , timeout ) } \n\t\telse { \n\t\t\tentry = new CacheEntry $F2144 ( key , value , timeout ) ; \n\t\t\t$F2725 ( _cache , key , entry ) _count ++ ; \n\t\t\t} \n\t\tif ( _maxSize > INT00 && _count > _maxSize ) cleanup ( ) ; \n\t\treturn value ; \n\t\t} \n\t} \n"}, {"code": "public void remove $F1195 ( correlationId , key ) { \n\tsynchronized ( _lock ) { \n\t\tCacheEntry $F199 ( entry , _cache , key ) ; \n\t\tif $F268 ( entry ) { \n\t\t\t$F6953 ( _cache , key ) _count -- ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Float append ( Float s1 , Float s2 ) { \n\t$F37371 ( s1 , s2 ) return s1 + s2 ; \n\t} \n"}, {"code": "$F762 $F1 public $F34214 Option $F34214 map ( Function < $F13775 , ? extends O > mapper ) { \n\treturn ( Option $F34214 ) INSTANCE ; \n\t} \n"}, {"code": "public Integer append $F191751 ( s1 , s2 ) { \n\t$F37371 ( s1 , s2 ) return s1 + s2 ; \n\t} \n"}, {"code": "$F1 public void add $F63572 ( index , element ) { \n\t$F10882 ( idx , getRealIndex , index ) $F373 ( super , idx , element ) } \n"}, {"code": "$F1 public boolean addAll ( int index , $F63555 ( collection ) ) { \n\t$F10882 ( idx , getRealIndex , index ) return $F26088 ( super , idx , collection ) ; \n\t} \n"}, {"code": "$F1 public int indexOf $F62128 ( o , index ) { \n\t$F10882 ( idx , getRealIndex , index ) return $F36088 ( super , o , idx ) ; \n\t} \n"}, {"code": "$F1 public void insertElementAt ( E obj , int index ) { \n\t$F10882 ( idx , getRealIndex , index ) super . insertElementAt ( obj , idx ) ; \n\t} \n"}, {"code": "$F1 public int lastIndexOf $F62128 ( o , index ) { \n\t$F10882 ( idx , getRealIndex , index ) return super . lastIndexOf ( o , idx ) ; \n\t} \n"}, {"code": "$F1 public ListIterator $F26212 listIterator ( int index ) { \n\t$F10882 ( idx , getRealIndex , index ) return super . listIterator ( idx ) ; \n\t} \n"}, {"code": "$F1 public void removeRange $F12004 ( fromIndex , toIndex ) { \n\t$F10882 ( fromIdx , getRealIndex , fromIndex ) $F10882 ( toIdx , getRealIndex , toIndex ) super . removeRange ( fromIdx , toIdx ) ; \n\t} \n"}, {"code": "$F1 public E set $F63572 ( index , element ) { \n\t$F10882 ( idx , getRealIndex , index ) $F100704 ( super , idx , element ) } \n"}, {"code": "$F1 public void setElementAt ( E obj , int index ) { \n\t$F10882 ( idx , getRealIndex , index ) super . setElementAt ( obj , idx ) ; \n\t} \n"}, {"code": "$F1 public $F26217 subList $F12004 ( fromIndex , toIndex ) { \n\t$F10882 ( fromIdx , getRealIndex , fromIndex ) $F10882 ( toIdx , getRealIndex , toIndex ) return $F67814 ( super , fromIdx , toIdx ) ; \n\t} \n"}, {"code": "private int getRealIndex ( int index ) { \n\tint idx = index ; \n\tif $F2523 ( idx ) { \n\t\tif ( $F91759 ( Math , idx ) <= $F3413 ( this ) ) { \n\t\t\tidx = $F296443 ( this , idx ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlogger . error ( STRING00 , index , $F3413 ( this ) , $F3745 * $F3413 ( this ) + INT00 ) ; \n\t\t\t$F87226 } \n\t\t} \n\treturn idx ; \n\t} \n"}, {"code": "public boolean has $F59714 ( key ) { \n\tif ( this . services . containsKey ( key ) ) { \n\t\tfinal Collection $F4230 collection = this . services . get ( key ) ; \n\t\t$F2272 ( collection ) $F70458 ( collection ) $F232 } \n\t$F213 } \n"}, {"code": "public static void isValidOutputDirectory ( File outputDirectory ) throws InvalidOutputDirectoryException { \n\t$F11859 ( outputDirectory ) if $F11857 ( outputDirectory ) { \n\t\tthrow new InvalidOutputDirectoryException $F500 ( outputDirectory ) ; \n\t\t} \n\tif $F11928 ( outputDirectory ) { \n\t\tthrow new InvalidOutputDirectoryException $F500 ( outputDirectory ) ; \n\t\t} \n\tif $F206605 ( outputDirectory ) { \n\t\tthrow new InvalidOutputDirectoryException $F500 ( outputDirectory ) ; \n\t\t} \n\t} \n"}, {"code": "public static void mergeFrom ( $F1975 data , Object message , Schema schema ) { \n\tmergeFrom ( data , INT00 , data . length , message , schema ) ; \n\t} \n"}, {"code": "$F1 public Collection < ScalingGroup > listScalingGroups ( AutoScalingGroupFilterOptions options ) throws $F22199250 { \n\t$F22213656 ( APITrace , getProvider ) try { \n\t\tProviderContext ctx = $F1953074 ( getProvider ) ; \n\t\t$F22213675 ( ctx ) ArrayList < ScalingGroup > list = new ArrayList < ScalingGroup > $F2 ; \n\t\t$F4357 parameters = getAutoScalingParameters ( $F1953074 ( getProvider ) , EC2Method . DESCRIBE_AUTO_SCALING_GROUPS ) ; \n\t\tEC2Method method ; \n\t\tNodeList blocks ; \n\t\tDocument doc ; \n\t\tmethod = new EC2Method $F209248 ( SERVICE_ID , getProvider , parameters ) ; \n\t\ttry $F875790 ( doc , method ) $F22782929 ( logger , e ) $F12121463 ( blocks , doc ) for ( $F12267 ( i , blocks ) ) { \n\t\t\tNodeList items = $F12268 ( blocks , i ) . getChildNodes ( ) ; \n\t\t\tfor ( $F12267 ( j , items ) ) { \n\t\t\t\t$F4490555 ( item , items , j ) if $F2486380 ( item ) { \n\t\t\t\t\tScalingGroup $F304 ( group , toScalingGroup , ctx , item ) ; \n\t\t\t\t\tif ( ( group != null && ( options != null && ! options . hasCriteria ( ) ) ) || ( group != null && ( options != null && options . hasCriteria ( ) && $F19771 ( options , group ) ) ) ) $F529 ( list , group ) } \n\t\t\t\t} \n\t\t\t} \n\t\treturn list ; \n\t\t} \n\t$F133621 ( APITrace ) } \n"}, {"code": "static $F96 toWire $F2763 ( json ) { \n\treturn ( $F96 ) ObjectIterator . iterate ( json , new Closure < ObjectIterator . IterateBean , Object > $F2 { \n\t\t$F1 public Object call ( ObjectIterator . IterateBean i ) { \n\t\t\ttry { \n\t\t\t\tif ( $F269 ( i ) instanceof Date ) { \n\t\t\t\t\t$F37812 ( sdf ) return STRING00 + sdf . format ( ( Date ) $F269 ( i ) ) + STRING00 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F148617 $F75456 ( i ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "static $F96 fromWire $F2763 ( json ) { \n\treturn ( $F96 ) ObjectIterator . iterate ( json , new Closure < ObjectIterator . IterateBean , Object > $F2 { \n\t\t$F1 public Object call ( ObjectIterator . IterateBean i ) { \n\t\t\tif ( $F356621 ( i ) ) { \n\t\t\t\t$F1956019 ( s , i ) try { \n\t\t\t\t\tif $F71521 ( s ) { \n\t\t\t\t\t\t$F1208 ( s ) $F242177 ( type , s ) String value = s . substring ( $F155690 ( s ) , $F6987 ( s ) ) ; \n\t\t\t\t\t\tif $F36845 ( type ) { \n\t\t\t\t\t\t\treturn ObjectType . cast ( value , $F211148 ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F165638 } \n\t\t\t$F75456 ( i ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F1 protected LoggingEvent setupEvent ( LoggingEvent event ) { \n\tObject sessionId = event . getMDC ( sessionKey ) ; \n\t$F299603 ( sessionId ) List < LoggerEventListener > loggers = SessionLoggerAppender . LOGGERS . get ( sessionId ) ; \n\t$F28664 ( loggers ) event . getNDC ( ) ; \n\t$F189987 ( event ) ; \n\tevent . getMDCCopy ( ) ; \n\tevent . getLocationInformation ( ) ; \n\tevent . getRenderedMessage ( ) ; \n\tevent . getThrowableStrRep ( ) ; \n\treturn event ; \n\t} \n"}, {"code": "public static $F26212 void removeMatcing ( $F26215 ( collection ) , Matcher $F59476 matcher ) { \n\t$F59768 $F60361 ( iter , collection ) ; \n\twhile $F11310 ( iter ) { \n\t\tE $F11312 ( item , iter ) ; \n\t\tif $F19772 ( matcher , item ) $F16605 ( iter ) } \n\t} \n"}, {"code": "final Document createDocument ( $F14584 ( row ) , DocumentFactory documentFactory ) { \n\tString id = StringUtils . EMPTY ; \n\tString content = StringUtils . EMPTY ; \n\tLanguage language = documentFactory . getDefaultLanguage ( ) ; \n\tMap < AttributeType , Object > $F3722 ( attributeMap ) ; \n\tString idField = $F54926 ( Config , configProperty ) . asString ( STRING00 ) . toUpperCase ( ) ; \n\tString contentField = $F54926 ( Config , configProperty ) . asString ( STRING00 ) . toUpperCase ( ) ; \n\tString languageField = $F54926 ( Config , configProperty ) . asString ( STRING00 ) . toUpperCase ( ) ; \n\tIndex $F641 fields = getFieldNames ( ) ; \n\tfor ( int i = INT00 ; \n\t$F10913 ( i , row ) && $F10913 ( i , fieldNames ) ; \n\ti ++ ) { \n\t\t$F75598 ( field , row , i ) $F75598 ( fieldName , fields , i ) if $F134351 ( idField , fieldName ) $F1619 ( id , field ) else if $F134351 ( contentField , fieldName ) $F1619 ( content , field ) else if $F134351 ( languageField , fieldName ) { \n\t\t\t$F59532 ( language , Language , field ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F50262 ( attributeType , AttributeType , fieldName ) attributeMap . put ( attributeType , $F219196 ( attributeType ) . decode ( field ) ) ; \n\t\t\t} \n\t\t} \n\treturn $F72956 ( documentFactory , id , content , language , attributeMap ) ; \n\t} \n"}, {"code": "public static String getName $F1195 ( name , path ) { \n\t$F158857 ( logger , name , path ) $F1200 ( buffer ) $F93328 ( path , buffer ) if ( $F25052 ( buffer ) && name != null && $F12497 ( name ) ) $F1219 ( buffer ) $F1212 ( buffer , name ) logger . trace ( $F6370 ( buffer ) ) ; \n\t$F1226 ( buffer ) } \n"}, {"code": "public static Object getValue ( Object object , Field field ) throws VisitorException { \n\t$F2233 ( reprotect ) $F2201 ( object ) try { \n\t\tif $F498138 ( field ) { \n\t\t\t$F10869 ( field ) reprotect = true ; \n\t\t\t} \n\t\t$F2744 ( value , field , object ) logger . trace ( $F456175 ( field , value ) ) ; \n\t\treturn value ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tlogger . error ( STRING00 , $F507 ( field ) , $F9272 ( object ) ) ; \n\t\tthrow new VisitorException $F2756 ( e ) ; \n\t\t} \n\tcatch ( IllegalAccessException e ) { \n\t\tlogger . error ( $F407498 ( object ) ) ; \n\t\tthrow new VisitorException $F2756 ( e ) ; \n\t\t} \n\tfinally { \n\t\tif ( reprotect ) { \n\t\t\t$F1535358 ( field ) } \n\t\t} \n\t} \n"}, {"code": "public ResponseBuilder createResource $F2 { \n\t$F70668 ( baseUrl , getBaseUrl ) final String identifier = baseUrl + $F251039 ( req ) + $F2515 ( req ) + id ; \n\tfinal String $F176317 ( contentType , req ) ; \n\tfinal Session session = ofNullable ( $F49732 ( req ) ) . orElseGet ( HttpSession : : <missing ';'> $F2714 $F129732 ( LOGGER , identifier ) final Optional < RDFSyntax > rdfSyntax = ofNullable ( contentType ) . flatMap ( RDFSyntax : : <missing ';'> byMediaType ) . $F161 ( filter , SUPPORTED_RDF_TYPES ) contains ) ; \n\tfinal IRI defaultType = nonNull ( contentType ) && $F34249 ( rdfSyntax ) ? LDP . NonRDFSource : LDP . RDFSource ; \n\tfinal IRI internalId = rdf . createIRI ( TRELLIS_PREFIX + $F251039 ( req ) + $F2515 ( req ) + id ) ; \n\tfinal IRI ldpType = ofNullable ( $F3159941 ( req ) ) . filter ( l - $F1383 . equals ( $F7827925 ( l ) ) ) . map ( Link : : <missing ';'> getUri ) . $F161 ( map , URI ) $F13932 filter ( l - > l . startsWith ( LDP . URI ) ) . map ( rdf : : <missing ';'> createIRI ) . filter ( l - > ! LDP . Resource . equals ( l ) ) . orElse ( defaultType ) ; \n\tif ( ldpType . equals ( LDP . NonRDFSource ) && $F30197 ( rdfSyntax ) ) { \n\t\treturn status ( BAD_REQUEST ) . type ( TEXT_PLAIN ) . entity ( STRING00 ) ; \n\t\t} \n\ttry ( final TrellisDataset dataset = TrellisDataset . createDataset ( ) ) { \n\t\taudit . ifPresent ( svc - > svc . creation ( internalId , session ) . stream ( ) . map ( skolemizeQuads ( resourceService , baseUrl ) ) . forEachOrdered ( dataset : : add ) ) ; \n\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , internalId , RDF . type , ldpType ) ) ; \n\t\tif ( ldpType . equals ( LDP . NonRDFSource ) ) { \n\t\t\tfinal Digest digest = $F524366 ( req ) ; \n\t\t\tif ( nonNull ( digest ) && ! $F34166 ( getDigestForEntity , digest ) ( $F524366 ( digest ) ) ) $F3342 ( status , BAD_REQUEST ) final $F4357 metadata = singletonMap ( CONTENT_TYPE , $F29765 ( ofNullable , contentType ) ( APPLICATION_OCTET_STREAM ) ) ; \n\t\t\tfinal IRI binaryLocation = rdf . createIRI ( binaryService . getIdentifierSupplier ( $F251039 ( req ) ) . get ( ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , internalId , DC . hasPart , binaryLocation ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . modified , rdf . createLiteral ( $F24743 ( now ) , XSD . dateTime ) ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . format , rdf . createLiteral ( $F29765 ( ofNullable , contentType ) ( APPLICATION_OCTET_STREAM ) ) ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . extent , rdf . createLiteral ( Long . toString ( $F1203 ( entity ) ) , XSD . long_ ) ) ) ; \n\t\t\t$F564 ( persistContent , binaryLocation , metadata ) } \n\t\telse { \n\t\t\treadEntityIntoDataset ( identifier , baseUrl , PreferUserManaged , rdfSyntax . orElse ( TURTLE ) , dataset ) ; \n\t\t\tcheckConstraint ( dataset , PreferUserManaged , ldpType , TRELLIS_PREFIX + $F251039 ( req ) , rdfSyntax . orElse ( TURTLE ) ) ; \n\t\t\t} \n\t\tif ( resourceService . put ( internalId , dataset . asDataset ( ) ) ) { \n\t\t\tfinal ResponseBuilder builder = status ( CREATED ) . location ( create ( identifier ) ) ; \n\t\t\t$F482749 ( ldpResourceTypes , ldpType , IRI ) <missing ';'> getIRIString ) . forEach ( type - > builder . link ( type , STRING00 ) ) ; \n\t\t\treturn builder ; \n\t\t\t} \n\t\t} \n\tLOGGER . error ( STRING00 , internalId . getIRIString ( ) ) ; \n\treturn serverError ( ) . type ( TEXT_PLAIN ) . entity ( STRING00 ) ; \n\t} \n"}, {"code": "$F1 public Double convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\treturn $F42850 ( FMT , valueStr ) . doubleValue ( ) ; \n\t} \n"}, {"code": "$F1 protected void exportXmlData ( final StringBuilder out , final int occ ) { \n\tout . append ( FMT . format ( getValue ( occ ) ) . replaceAll ( $F1286 ) ) ; \n\t} \n"}, {"code": "$F1 public $F79106 getValueAsdoubleArray $F2 throws ParseException { \n\tfinal $F79106 result = new double $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . doubleValue ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws IOException , TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tElement $F1746875 ( keyTemplate , element ) ; \n\tif $F112 ( keyTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\tElement $F1984392 ( valueTemplate , keyTemplate ) ; \n\tif $F112 ( valueTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\tStack $F706299 indexes = $F1175392 ( serializer ) ; \n\tIndex index = new Index $F2 ; \n\t$F22657 ( indexes , index ) $F19379 map = content . getMap ( scope , propertyPath ) ; \n\tfor ( $F75783 ( key , map ) ) { \n\t\t$F149778 ( index ) serializer . writeItem ( keyTemplate , key ) ; \n\t\tserializer . writeItem ( $F33691 ( valueTemplate , map , key ) ) ; \n\t\t} \n\t$F92524 ( indexes ) $F724 } \n"}, {"code": "$F1 protected void onCreate ( Bundle savedInstanceState ) { \n\t$F24610 ( millis , System ) $F568580 ( super , savedInstanceState ) millis = $F24611 ( System , millis ) ; \n\tLog . i ( STRING00 , $F223059 ( getClass ) + millis + STRING00 ) ; \n\t} \n"}, {"code": "private void insanityCheck ( Element element , Meta meta , Opcode . Type type ) { \n\tif $F268 ( meta ) { \n\t\tthrow new TemplateException $F243196 ( element , type ) ; \n\t\t} \n\t} \n"}, {"code": "static int toInt $F112283 ( input , offset , length ) { \n\tif $F2015 ( length ) { \n\t\treturn $F14212 ( input , offset ) - STRING00 ; \n\t\t} \n\t$F1987 ( out ) for ( int $F93676 ( i , offset , length ) , factor = INT00 ; \n\ti >= offset ; \n\t-- i , factor *= INT00 ) { \n\t\tout += ( $F14212 ( input , i ) - STRING00 ) * factor ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "$F1 public String format ( LogRecord logRecord ) { \n\t$F1200 ( builder ) long millis = $F9790 ( logRecord ) ; \n\tString timestamp = $F144 ( DATE_FORMATTER ) . format ( $F211256 ( millis ) ) ; \n\tString level = $F5227 ( logRecord ) . getName ( ) ; \n\t$F8673 ( message , logRecord ) $F14508 ( message ) $F19733 ( organisation ) String sourceClass = logRecord . getSourceClassName ( ) ; \n\tif $F176532 ( regexFormat ) { \n\t\t$F34959 ( matcher , ORGANISATION_RE , sourceClass ) if $F154963 ( matcher ) { \n\t\t\t$F183655 ( organisation , matcher ) $F183655 ( sourceClass , matcher ) } \n\t\t} \n\telse { \n\t\t$F29196 ( tokenizer , sourceClass ) $F5088 ( organisationList ) $F89157 $F35088 ( sourceClassList ) ; \n\t\twhile $F101774 ( tokenizer ) { \n\t\t\t$F201502 ( token , tokenizer ) if $F94933 ( organisationList ) $F529 ( organisationList , token ) else { \n\t\t\t\t$F1183 ( sourceClassList , token ) } \n\t\t\t} \n\t\tif $F386 ( sourceClassList ) { \n\t\t\t$F147637 ( organisation , implode , organisationList ) ListIterator $F641 $F86069 ( it , sourceClassList ) ; \n\t\t\t$F48974 ( first ) $F1987 ( length ) do { \n\t\t\t\t$F93978 ( part , it ) $F12039 ( partLength , part ) boolean wasFirst = first ; \n\t\t\t\tif ( first ) $F57412 ( first ) else $F16091 ( partLength ) if ( wasFirst || length + partLength < INT00 ) $F57826 ( length , partLength ) else { \n\t\t\t\t\t$F90236 ( it ) $F332 } \n\t\t\t\t} \n\t\t\twhile $F11310 ( it ) ; \n\t\t\t$F5088 ( partList ) while $F67774 ( it ) { \n\t\t\t\tString $F89813 ( part , it ) ; \n\t\t\t\t$F528 ( partList , part ) } \n\t\t\t$F147637 ( sourceClass , implode , partList ) } \n\t\t} \n\tString sourceMethod = logRecord . getSourceMethodName ( ) ; \n\t$F48974 ( first ) for ( String part : new String [ ] { \n\t\ttimestamp , $F52478 ( fix , level ) , organisation , sourceClass , sourceMethod , message } \n\t) { \n\t\t$F395339 ( first , builder ) $F1212 ( builder , part ) } \n\t$F1218 ( builder ) Throwable thrown = $F4175 ( logRecord ) ; \n\tif ( thrown != null && $F3506 ( logger ) ) { \n\t\t$F6364 ( stringWriter ) $F9810 ( printWriter , stringWriter ) $F49958 ( thrown , printWriter ) $F1109 ( printWriter ) $F13374 ( stackTrace , stringWriter ) $F25219 ( stackTrace , DISMISS_RE ) if ( ! $F19099 ( logger ) ) { \n\t\t\ttry { \n\t\t\t\t$F1200 ( stackBuilder ) $F129111 ( causedBy , CAUSED_BY_RE , stackTrace ) $F1987 ( pos ) String block ; \n\t\t\t\twhile $F14102 ( causedBy ) { \n\t\t\t\t\tint $F37646 ( nextPos , causedBy ) ; \n\t\t\t\t\t$F98999 ( block , stackTrace , pos , nextPos ) pos = nextPos ; \n\t\t\t\t\t$F157482 ( stackBuilder , reduceStackBlock , block ) } \n\t\t\t\t$F134473 ( block , stackTrace , pos ) $F157482 ( stackBuilder , reduceStackBlock , block ) $F34965 ( stackTrace , stackBuilder ) } \n\t\t\tcatch ( Throwable throwable ) { \n\t\t\t\tstackTrace = $F4241 ( throwable , stackTrace ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F1212 ( builder , stackTrace ) } \n\t$F1226 ( builder ) } \n"}, {"code": "$F1 public void commit $F2 throws IndoubtException { \n\tsession . transaction . remove ( ) ; \n\t$F268435 ( logs ) try { \n\t\tfor ( Log log : logs ) { \n\t\t\tif ( log . operation ( ) != Operation . GET ) { \n\t\t\t\tif $F22115 ( transaction ) $F442654 ( transaction ) log . state ( State . COMMITTED ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new UncheckedException ( e ) ; \n\t\t} \n\t$F464893 ( logger , id ) } \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String format , Object ... arguments ) throws IOException { \n\tStack $F706299 indexes = this . serializer . getIndexes ( ) ; \n\tif $F3415 ( indexes ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tthis . serializer . writeTextContent ( getNumbering ( this . serializer . getIndexes ( ) , format ) ) ; \n\t$F724 } \n"}, {"code": "private static String getNumbering ( Stack $F706299 indexes , String format ) { \n\t$F1200 ( sb ) $F12039 ( i , format ) int j = i ; \n\t$F94909 ( indexPosition , indexes ) for ( $F117278 ) { \n\t\ti = format . lastIndexOf ( STRING00 , i ) ; \n\t\tif ( i == $F3745 && j > INT00 ) { \n\t\t\tsb . insert ( INT00 , $F2529 ( format , j ) ) ; \n\t\t\t$F332 } \n\t\tif ( $F97051 ( i , format ) ) sb . insert ( INT00 , $F101730 ( format , i , j ) ) ; \n\t\tif ( i + INT00 == $F1203 ( format ) ) $F23605 NumberingFormat numberingFormat = $F151991 ( getNumberingFormat , format , i ) ; \n\t\tsb . insert ( INT00 , numberingFormat . format ( indexes . get ( indexPosition -- ) . value ) ) ; \n\t\t$F1630867 ( i ) j = i ; \n\t\ti -- ; \n\t\t} \n\t$F1226 ( sb ) } \n"}, {"code": "public static NumberingFormat getNumberingFormat ( char formatCode ) { \n\tswitch ( formatCode ) { \n\t\t$F21776 return new ArabicNumeralNumbering $F2 ; \n\t\t$F21776 return new LowerCaseStringNumbering $F2 ; \n\t\t$F21776 return new UpperCaseStringNumbering $F2 ; \n\t\t$F21776 return new LowerCaseRomanNumbering $F2 ; \n\t\t$F21776 return new UpperCaseRomanNumbering $F2 ; \n\t\t} \n\tthrow new TemplateException $F2756 ( formatCode ) ; \n\t} \n"}, {"code": "public ListenableFuture < OpenedSocket > getConnection ( UUID id ) { \n\tcheckState ( $F602415 ( isRunning , this ) ) ; \n\treturn getConnectionImpl ( id , Source . REQUEST ) ; \n\t} \n"}, {"code": "private SettableFuture < OpenedSocket > getConnectionImpl ( UUID id , Source source ) { \n\t$F64946 ( lock ) try { \n\t\tcheckState ( $F2724 ( connectionState , source , id ) , STRING00 , id , source ) ; \n\t\tSettableFuture < OpenedSocket > $F199 ( future , halfFinishedConnections , id ) ; \n\t\tif $F112 ( future ) { \n\t\t\t$F72292 ( future , SettableFuture ) $F2725 ( halfFinishedConnections , id , future ) } \n\t\telse $F6954 ( halfFinishedConnections , id ) return future ; \n\t\t} \n\t$F64936 ( lock ) } \n"}, {"code": "private static OutputStream getOutputStream ( final Socket socket ) throws IOException { \n\tfinal OutputStream $F176312 ( delegate , socket ) ; \n\treturn new OutputStream $F2 { \n\t\t$F1 public void close $F2 throws IOException { \n\t\t\t$F6369 ( delegate ) synchronized ( socket ) { \n\t\t\t\tsocket . shutdownOutput ( ) ; \n\t\t\t\tif ( socket . isInputShutdown ( ) ) $F2453 ( socket ) } \n\t\t\t} \n\t\t$F1 public void write ( int b ) throws IOException $F125961 ( delegate , b ) $F1 public void write $F2665 ( b ) throws IOException $F125961 ( delegate , b ) $F1 public void write $F9459 ( b , off , len ) throws IOException $F157403 ( delegate , b , off , len ) $F1 public void flush $F2 throws IOException $F82687 ( delegate ) } \n\t; \n\t} \n"}, {"code": "private static InputStream getInputStream ( final Socket socket ) throws IOException { \n\t$F824839 ( delegate , socket ) ; \n\treturn new InputStream $F2 { \n\t\t$F1 public void close $F2 throws IOException { \n\t\t\tsynchronized ( socket ) { \n\t\t\t\tsocket . shutdownInput ( ) ; \n\t\t\t\tif ( socket . isOutputShutdown ( ) ) $F2453 ( socket ) } \n\t\t\t} \n\t\t$F1 public int read $F2 throws IOException { \n\t\t\treturn $F24551 ( delegate ) ; \n\t\t\t} \n\t\t$F1 public int read $F2665 ( b ) throws IOException { \n\t\t\t$F261844 ( delegate , b ) } \n\t\t$F1 public int read $F9459 ( b , off , len ) throws IOException { \n\t\t\t$F317050 ( delegate , b , off , len ) } \n\t\t$F1 public long skip ( long n ) throws IOException { \n\t\t\treturn $F59903 ( delegate , n ) ; \n\t\t\t} \n\t\t$F1 public int available $F2 throws IOException { \n\t\t\treturn $F88338 ( delegate ) ; \n\t\t\t} \n\t\t$F1 public void mark ( int readlimit ) { \n\t\t\t$F1697681 ( delegate , readlimit ) } \n\t\t$F1 public void reset $F2 throws IOException $F80633 ( delegate ) $F1 public boolean markSupported $F2 { \n\t\t\treturn $F84091 ( delegate ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static BerkeleyDB from $F1195 ( envHomePath , databaseName ) { \n\treturn env ( envHomePath ) . connection ( $F69770 ( databaseName ) ) ; \n\t} \n"}, {"code": "public static BerkeleyStore of $F1195 ( envHomePath , storeName ) { \n\treturn env ( envHomePath ) . connection ( storeName , null ) ; \n\t} \n"}, {"code": "public static < E extends Serializable > BerkeleyQueue $F26212 queue ( String envHomePath , String queueName , $F52984 ( valueClass ) ) { \n\treturn queue ( envHomePath , queueName , valueClass , $F3745 ) ; \n\t} \n"}, {"code": "public static BerkeleyEnv env ( String envHomePath , EnvironmentConfig environmentConfig ) { \n\treturn env ( new File $F36705 ( checkNotNull , envHomePath ) , environmentConfig ) ; \n\t} \n"}, {"code": "public static SecondaryConfig defaultSecondaryConfig ( SecondaryKeyCreator keyCreator ) { \n\tSecondaryConfig cfg = new SecondaryConfig $F2 ; \n\tcfg . setAllowCreate ( true ) ; \n\tcfg . setSortedDuplicates ( true ) ; \n\tcfg . setTransactional ( true ) ; \n\tcfg . setKeyCreator ( $F2754 ( checkNotNull , keyCreator ) ) ; \n\treturn cfg ; \n\t} \n"}, {"code": "public M sequence ( String sequenceKey , Long initialValue , Boolean increment ) { \n\tSequenceConfig cfg = defaultSequenceConfig ( ) ; \n\tif $F206761 ( initialValue ) { \n\t\tcfg . setInitialValue ( initialValue ) ; \n\t\t} \n\tif $F206761 ( increment ) { \n\t\tcfg . setDecrement ( ! increment ) ; \n\t\t} \n\t$F564 ( getSequence , sequenceKey , cfg ) $F24894 ( THIS ) } \n"}, {"code": "public M sequence ( String sequenceKey , SequenceConfig sequenceConfig ) { \n\tgetSequence ( sequenceKey , $F34105 ( firstNonNull , sequenceConfig , defaultSequenceConfig ) ) ; \n\t$F24894 ( THIS ) } \n"}, {"code": "public Sequence getSequence ( String sequenceKey , SequenceConfig sequenceConfig ) { \n\tSequence $F509996 ( sequence , sequences , checkNotNull , sequenceKey ) ; \n\tif $F107295 ( sequence ) { \n\t\tsequence = sequenceDB ( ) . openSequence ( null , sequenceDB ( ) . getEntry ( sequenceKey ) , $F34105 ( firstNonNull , sequenceConfig , defaultSequenceConfig ) ) ; \n\t\t$F2725 ( sequences , sequenceKey , sequence ) } \n\treturn sequence ; \n\t} \n"}, {"code": "private T get ( String id ) throws DaoManagerException { \n\tT ret ; \n\tif $F33656 ( map , id ) $F13003 ( ret , map , id ) else { \n\t\t$F10937 ( ret , getInner , id ) $F173220 ( ret , map , id ) } \n\treturn ret ; \n\t} \n"}, {"code": "public void removeFromCache ( String id ) throws DaoManagerException { \n\tif $F33656 ( map , id ) $F6954 ( map , id ) } \n"}, {"code": "protected void paintTabBorder ( Graphics g , int tabPlacement , int tabIndex , int x , int y , int w , int h , boolean isSelected ) { \n\tif ( isSelected ) { \n\t\tg . setColor ( Color . GRAY ) ; \n\t\t} \n\telse { \n\t\tg . setColor ( Color . LIGHT_GRAY ) ; \n\t\t} \n\tg . drawRect ( x + INT00 , y + INT00 , w - INT00 , h - INT00 ) ; \n\t} \n"}, {"code": "$F2893853 @ Configuration public List < ISource > getProperties ( InjectionPoint injectionPoint ) { \n\tConfigurationWrapper wrapper = this . getConfigurationWrapper ( injectionPoint ) ; \n\tList < ISource > sources = this . locate ( wrapper ) ; \n\treturn sources ; \n\t} \n"}, {"code": "public ProgressMonitor createProgressMonitor ( String title ) { \n\tProgressState state = new ProgressState ( title ) ; \n\t$F528 ( states , state ) return state ; \n\t} \n"}, {"code": "$F67996 public UnsignedInteger plus ( UnsignedInteger val ) { \n\treturn fromIntBits ( this . value + checkNotNull ( val ) . value ) ; \n\t} \n"}, {"code": "$F67996 public UnsignedInteger minus ( UnsignedInteger val ) { \n\treturn fromIntBits ( value - checkNotNull ( val ) . value ) ; \n\t} \n"}, {"code": "$F67996 $F5446012 public UnsignedInteger times ( UnsignedInteger val ) { \n\treturn fromIntBits ( value * checkNotNull ( val ) . value ) ; \n\t} \n"}, {"code": "$F67996 public UnsignedInteger dividedBy ( UnsignedInteger val ) { \n\treturn fromIntBits ( UnsignedInts . divide ( value , checkNotNull ( val ) . value ) ) ; \n\t} \n"}, {"code": "@ CommandArgument public void load ( @ OptionArgument ( STRING00 ) String filename ) { \n\t$F39336 ( users ) try { \n\t\t$F96169 ( reader , filename ) while ( $F348006 ( reader ) ) { \n\t\t\tUser user = User . fromString ( $F57850 ( reader ) ) ; \n\t\t\tusers . put ( user . username , user ) ; \n\t\t\t} \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\t$F10394 ( System ) ( $F7260 ( String , filename ) ) ; \n\t\t} \n\t$F114755 ( e ) } \n"}, {"code": "@ CommandArgument public void save ( @ OptionArgument ( STRING00 ) String filename ) { \n\ttry { \n\t\tPrintStream out = new PrintStream $F41183 ( filename ) ; \n\t\tfor ( User user : $F387 ( users ) ) $F10011 ( out , user ) } \n\t$F114755 ( e ) } \n"}, {"code": "@ CommandArgument public void adduser ( @ OptionArgument ( STRING00 ) String username , @ OptionArgument ( STRING00 ) String password , @ OptionArgument ( STRING00 ) String roles ) { \n\tif $F33656 ( users , username ) { \n\t\t$F10394 ( System ) ( $F7260 ( String , username ) ) ; \n\t\t} \n\telse { \n\t\tUser user = new User ( username ) ; \n\t\tuser . salt = passwd . generateSalt ( ) ; \n\t\tuser . hash = passwd . getEncryptedPassword ( password , user . salt ) ; \n\t\tuser . roles . addAll ( $F185708 ( Arrays , roles ) ) ; \n\t\t$F2725 ( users , username , user ) } \n\t} \n"}, {"code": "@ CommandArgument public void rmuser ( @ OptionArgument ( STRING00 ) String username ) { \n\tif $F33656 ( users , username ) $F6954 ( users , username ) else { \n\t\t$F10394 ( System ) ( $F7260 ( String , username ) ) ; \n\t\t} \n\t} \n"}, {"code": "@ CommandArgument public void passwd ( @ OptionArgument ( STRING00 ) String username , @ OptionArgument ( STRING00 ) String password ) { \n\tUser $F199 ( user , users , username ) ; \n\tif $F268 ( user ) { \n\t\tuser . salt = passwd . generateSalt ( ) ; \n\t\tuser . hash = passwd . getEncryptedPassword ( password , user . salt ) ; \n\t\t} \n\telse { \n\t\t$F10394 ( System ) ( $F7260 ( String , username ) ) ; \n\t\t} \n\t} \n"}, {"code": "@ CommandArgument public void addroles ( @ OptionArgument ( STRING00 ) String username , @ OptionArgument ( STRING00 ) String roles ) { \n\tUser $F199 ( user , users , username ) ; \n\tif $F268 ( user ) { \n\t\tuser . roles . addAll ( $F185708 ( Arrays , roles ) ) ; \n\t\t} \n\telse { \n\t\t$F10394 ( System ) ( $F7260 ( String , username ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Token replaceToken ( final $F7932690 tokens , final int replacingFromTokenIndex , final int replaceToTokenIndex ) throws ParseException , IOException { \n\tfinal Equ equ = Equ . getInstance ( true ) ; \n\t$F4728 ( resultAsATokenValue ) try { \n\t\tObject equResult ; \n\t\t$F186238 ( equResult , equ , data ) ; \n\t\tif ( equResult instanceof LocalDateTime ) { \n\t\t\tfinal LocalDateTime ldt = ( LocalDateTime ) equResult ; \n\t\t\tif ( $F769739 ( ldt ) . equals ( LocalDate . MIN ) ) resultAsATokenValue = TemporalHelper . getOutputTF ( ) . format ( ldt ) ; \n\t\t\telse if ( ldt . toLocalTime ( ) . equals ( LocalTime . MIN ) ) resultAsATokenValue = TemporalHelper . getOutputDF ( ) . format ( ldt ) ; \n\t\t\telse resultAsATokenValue = TemporalHelper . getOutputDTF ( ) . format ( ldt ) ; \n\t\t\t} \n\t\telse $F34965 ( resultAsATokenValue , equResult ) } \n\tcatch ( final Exception e ) { \n\t\t$F658252 ( logger , e ) throw new ParseException ( $F2443 ( e ) , INT00 ) ; \n\t\t} \n\treturn new Token ( tokens [ replacingFromTokenIndex ] . charCommand ( ) , resultAsATokenValue , tokens [ replacingFromTokenIndex ] . getInputStartX ( ) , tokens [ replaceToTokenIndex ] . getInputEndX ( ) , true ) ; \n\t} \n"}, {"code": "public static WordNetRelation create ( String name , String code , String reciprocal , double weight ) { \n\tPreconditions . checkArgument ( $F83691 ( Strings , name ) ) ; \n\tPreconditions . checkArgument ( $F59900 ( weight ) ) ; \n\tname = $F89435 ( name ) . trim ( ) . replaceAll ( $F1286 ) ; \n\tif $F28586 ( index , name ) { \n\t\tindex . put ( name , new WordNetRelation $F3192 ( name , reciprocal , weight , code ) ) ; \n\t\t} \n\t$F30910 ( index , name ) } \n"}, {"code": "public void run ( Record input , $F205219 output ) { \n\tdriver . withInput ( $F18327 ( input ) ) ; \n\tif $F268 ( output ) { \n\t\tfor ( Record r : output ) { \n\t\t\tdriver . withOutput ( $F18327 ( r ) ) ; \n\t\t\t} \n\t\t} \n\tdriver . runTest ( ) ; \n\t} \n"}, {"code": "protected void run ( String separator , String input , $F205219 output ) throws $F372272 { \n\trun ( null , separator , false , input , output ) ; \n\t} \n"}, {"code": "protected void run ( Pattern separator , String input , $F205219 output ) throws $F372272 { \n\trun ( null , $F745107 ( separator ) , true , false , input , output ) ; \n\t} \n"}, {"code": "public void run ( $F21 labels , String separator , boolean separatorRegex , boolean formatIgnored , String input , $F205219 output ) throws $F372272 { \n\tif $F268 ( labels ) { \n\t\tconf . setStrings ( SimpleJob . LABELS , labels ) ; \n\t\tif ( conf . getInt ( SimpleJob . READER_TYPE , $F3745 ) == $F3745 ) { \n\t\t\tconf . setInt ( SimpleJob . READER_TYPE , SimpleJob . LABELS_READER ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif ( conf . getInt ( SimpleJob . READER_TYPE , $F3745 ) == $F3745 ) { \n\t\t\tconf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SIMPLE_READER ) ; \n\t\t\t} \n\t\t} \n\tif $F28525 ( separator ) { \n\t\tseparator = StringUtil . COMMA ; \n\t\t} \n\tconf . set ( SimpleJob . SEPARATOR , separator ) ; \n\tif ( separatorRegex ) { \n\t\tconf . setBoolean ( SimpleJob . SEPARATOR_REGEX , true ) ; \n\t\t} \n\tconf . setBoolean ( SimpleJob . FORMAT_IGNORED , formatIgnored ) ; \n\t$F53757 ( driver , conf ) separator = separator == null ? StringUtil . COMMA : separator ; \n\tif $F112 ( masterSeparator ) { \n\t\tmasterSeparator = separator ; \n\t\tconf . set ( SimpleJob . MASTER_SEPARATOR , masterSeparator ) ; \n\t\t} \n\tKey key = new Key $F2 ; \n\tkey . addPrimitiveValue ( $F258793 ) ; \n\t$F24707 ( fileName ) key . addPrimitiveValue ( STRING00 , fileName ) ; \n\tkey . addPrimitiveValue ( STRING00 , fileLength ) ; \n\tValue value = new Value $F2 ; \n\tValueCreator valueCreator = null ; \n\tint type = conf . getInt ( SimpleJob . READER_TYPE , $F3745 ) ; \n\tswitch ( type ) { \n\t\tcase SimpleJob . SIMPLE_READER : valueCreator = new SimpleValueCreator ( separator , separatorRegex ) ; \n\t\t$F332 case SimpleJob . LABELS_READER : valueCreator = new LabelValueCreator $F3192 ( labels , formatIgnored , separator , separatorRegex ) ; \n\t\t$F332 case SimpleJob . SINGLE_COLUMN_JOIN_READER : $F36788 simpleJoinMap = getSimpleMaster ( conf ) ; \n\t\tif ( ! conf . getBoolean ( SimpleJob . JOIN_REGEX , false ) ) { \n\t\t\tvalueCreator = new JoinValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleJoinMap , conf ) ; \n\t\t\t} \n\t\telse { \n\t\t\tMap < Pattern , $F21 > simpleJoinRegexMap = new HashMap < Pattern , $F21 > $F2 ; \n\t\t\tfor ( Entry $F36787 entry : $F708 ( simpleJoinMap ) ) { \n\t\t\t\tPattern p = Pattern . compile ( $F712 ( entry ) ) ; \n\t\t\t\t$F97568 ( simpleJoinRegexMap , p , entry ) } \n\t\t\tvalueCreator = new JoinRegexValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleJoinRegexMap , conf ) ; \n\t\t\t} \n\t\t$F332 case SimpleJob . SOME_COLUMN_JOIN_READER : Map < $F5033 , $F21 > simpleColumnsJoinMap = getSimpleColumnsMaster ( conf ) ; \n\t\tif ( ! conf . getBoolean ( SimpleJob . JOIN_REGEX , false ) ) { \n\t\t\tvalueCreator = new JoinSomeValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleColumnsJoinMap , conf ) ; \n\t\t\t} \n\t\telse { \n\t\t\tMap < $F19413 , $F21 > simpleColumnsJoinRegexMap = new HashMap < $F19413 , $F21 > $F2 ; \n\t\t\tfor ( Entry < $F5033 , $F21 > entry : $F708 ( simpleColumnsJoinMap ) ) { \n\t\t\t\t$F5033 $F14625 ( l , entry ) ; \n\t\t\t\t$F19413 p = new ArrayList $F19412 $F2 ; \n\t\t\t\tfor ( String s : l ) { \n\t\t\t\t\tp . add ( $F627 ( Pattern , s ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F97568 ( simpleColumnsJoinRegexMap , p , entry ) } \n\t\t\tvalueCreator = new JoinSomeRegexValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleColumnsJoinRegexMap , conf ) ; \n\t\t\t} \n\t\t$F332 $F107112 } \n\t$F64470 ( valueCreator , input , value ) ; \n\tdriver . withInput ( key , value ) ; \n\tif $F268 ( output ) { \n\t\tfor ( Record r : output ) { \n\t\t\tdriver . withOutput ( r . isGroupingNothing ( ) ? $F144 ( NullWritable ) : $F712 ( r ) , r . isValueNothing ( ) ? $F144 ( NullWritable ) : $F269 ( r ) ) ; \n\t\t\t} \n\t\t} \n\tdriver . runTest ( ) ; \n\t} \n"}, {"code": "protected void setSimpleJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterSeparator , boolean regex , $F14584 ( masterData ) ) { \n\tthis . conf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SINGLE_COLUMN_JOIN_READER ) ; \n\tthis . conf . setStrings ( SimpleJob . MASTER_LABELS , masterLabels ) ; \n\tthis . conf . set ( SimpleJob . JOIN_MASTER_COLUMN , masterColumn ) ; \n\tthis . conf . set ( SimpleJob . JOIN_DATA_COLUMN , dataColumn ) ; \n\t$F1357 ( this , masterSeparator ) this . conf . setBoolean ( SimpleJob . JOIN_REGEX , regex ) ; \n\t$F1357 ( this , masterData ) } \n"}, {"code": "protected void setSimpleJoin ( $F21 masterLabels , $F21 masterColumn , $F21 dataColumn , String masterSeparator , boolean regex , $F14584 ( masterData ) ) throws DataFormatException { \n\tif $F250577 ( masterColumn , dataColumn ) { \n\t\tthrow new DataFormatException $F6 ; \n\t\t} \n\tthis . conf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SOME_COLUMN_JOIN_READER ) ; \n\tthis . conf . setStrings ( SimpleJob . MASTER_LABELS , masterLabels ) ; \n\tthis . conf . setStrings ( SimpleJob . JOIN_MASTER_COLUMN , masterColumn ) ; \n\tthis . conf . setStrings ( SimpleJob . JOIN_DATA_COLUMN , dataColumn ) ; \n\t$F1357 ( this , masterSeparator ) this . conf . setBoolean ( SimpleJob . JOIN_REGEX , regex ) ; \n\t$F1357 ( this , masterData ) } \n"}, {"code": "protected void setBigJoin ( $F21 masterLabels , String masterColumn , String dataColumn , $F14584 ( masterData ) ) { \n\t$F274528 ( setBigJoin , masterLabels , masterColumn , dataColumn , masterData ) ; \n\t} \n"}, {"code": "protected void setBigJoin ( $F21 masterLabels , $F21 masterColumn , $F21 dataColumn , String masterSeparator , $F14584 ( masterData ) ) throws DataFormatException { \n\tif $F250577 ( masterColumn , dataColumn ) { \n\t\tthrow new DataFormatException $F6 ; \n\t\t} \n\tthis . conf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SOME_COLUMN_JOIN_READER ) ; \n\tthis . conf . setStrings ( SimpleJob . MASTER_LABELS , masterLabels ) ; \n\tthis . conf . setStrings ( SimpleJob . JOIN_MASTER_COLUMN , masterColumn ) ; \n\tthis . conf . setStrings ( SimpleJob . JOIN_DATA_COLUMN , dataColumn ) ; \n\t$F1357 ( this , masterSeparator ) $F1357 ( this , masterData ) } \n"}, {"code": "protected void setJoin ( $F21 masterLabels , String masterColumn , String dataColumn , $F14584 ( masterData ) ) { \n\tsetJoin ( masterLabels , masterColumn , dataColumn , null , false , masterData ) ; \n\t} \n"}, {"code": "protected void setJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterSeparator , boolean regex , $F14584 ( masterData ) ) $F100120 ( setSimpleJoin , masterLabels , masterColumn , dataColumn , masterSeparator , regex , masterData ) "}, {"code": "$F10880 public void setParameter ( String name , Enum value ) { \n\tconf . setEnum ( name , value ) ; \n\t} \n"}, {"code": "$F1 public ConvergedInfrastructure provision ( CIProvisionOptions options ) throws $F22199250 { \n\t$F22213656 ( APITrace , getProvider ) Replicapool rp = provider . getGoogleReplicapool ( ) ; \n\ttry { \n\t\t$F22251746 ( ctx , provider ) InstanceGroupManager content = new InstanceGroupManager $F2 ; \n\t\tcontent . setBaseInstanceName ( getCapabilities ( ) . getConvergedInfrastructureNamingConstraints ( ) . convertToValidName ( options . getBaseInstanceName ( ) , Locale . US ) ) ; \n\t\t$F28607 ( content , options ) content . setInstanceTemplate ( STRING00 + $F1726155 ( ctx ) + STRING00 + options . getInstanceTemplate ( ) ) ; \n\t\tcontent . setName ( getCapabilities ( ) . getConvergedInfrastructureNamingConstraints ( ) . convertToValidName ( $F507 ( options ) , Locale . US ) ) ; \n\t\tString region = $F308271 ( options ) . replaceFirst ( $F1286 ) ; \n\t\tOperation job = rp . instanceGroupManagers ( ) . insert ( $F1726155 ( ctx ) , $F308271 ( options ) , $F1976 ( options ) , content ) . execute ( ) ; \n\t\tGoogleMethod method = new GoogleMethod ( provider ) ; \n\t\tmethod . getCIOperationComplete ( ctx , job , GoogleOperationType . ZONE_OPERATION , region , $F308271 ( options ) ) ; \n\t\treturn ConvergedInfrastructure . getInstance ( $F1726155 ( ctx ) , region , $F308271 ( options ) , options . getBaseInstanceName ( ) , ConvergedInfrastructureState . RUNNING , $F507 ( options ) , $F6483 ( options ) , options . getInstanceTemplate ( ) ) ; \n\t\t} \n\t$F114755 ( e ) $F133621 ( APITrace ) $F724 } \n"}, {"code": "public void setValues ( $F71087 ( values ) ) { \n\tif ( values != _values ) { \n\t\tclear ( ) ; \n\t\tif $F98509 ( values ) $F255 for ( Object value : values ) $F890 ( addValue , value ) } \n\t} \n"}, {"code": "public void addValue $F80574 ( value ) { \n\tif $F112 ( value ) $F31377 ( setNullContained ) else $F98246 ( _values , String , value ) } \n"}, {"code": "$F1 public Configuration getDefault $F2 { \n\treturn new Configuration $F2 { \n\t\t$F1 public HttpClient httpClient $F2 { \n\t\t\ttry { \n\t\t\t\tSchemeRegistry schemeRegistry = new SchemeRegistry $F2 ; \n\t\t\t\tschemeRegistry . register ( new Scheme ( STRING00 , INT00 , $F16743 ( PlainSocketFactory ) ) ) ; \n\t\t\t\tschemeRegistry . register ( new Scheme ( STRING00 , INT00 , $F16743 ( SSLSocketFactory ) ) ) ; \n\t\t\t\tPoolingClientConnectionManager pccm = new PoolingClientConnectionManager ( schemeRegistry ) ; \n\t\t\t\tpccm . setMaxTotal ( INT00 ) ; \n\t\t\t\tpccm . setDefaultMaxPerRoute ( INT00 ) ; \n\t\t\t\treturn new DefaultHttpClient ( pccm ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new ConfigurationFailedException ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public Yytoken yylex $F2 throws $F61842 , ParseException { \n\tint zzInput ; \n\tint zzAction ; \n\tint zzCurrentPosL ; \n\tint zzMarkedPosL ; \n\tint zzEndReadL = zzEndRead ; \n\t$F89578 ( zzBufferL , zzBuffer ) $F89578 ( zzCMapL , ZZ_CMAP ) $F83448 ( zzTransL , ZZ_TRANS ) $F83448 ( zzRowMapL , ZZ_ROWMAP ) $F83448 ( zzAttrL , ZZ_ATTRIBUTE ) while $F38432 { \n\t\tzzMarkedPosL = zzMarkedPos ; \n\t\tyychar += zzMarkedPosL - zzStartRead ; \n\t\t$F16051 ( zzAction ) zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL ; \n\t\t$F68133 ( zzState , ZZ_LEXSTATE , zzLexicalState ) zzForAction : { \n\t\t\twhile $F38432 { \n\t\t\t\tif ( zzCurrentPosL < zzEndReadL ) $F156325 ( zzInput , zzBufferL , zzCurrentPosL ) else if ( zzAtEOF ) { \n\t\t\t\t\tzzInput = YYEOF ; \n\t\t\t\t\tbreak zzForAction ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tzzCurrentPos = zzCurrentPosL ; \n\t\t\t\t\tzzMarkedPos = zzMarkedPosL ; \n\t\t\t\t\t$F18252 ( eof , zzRefill ) zzCurrentPosL = zzCurrentPos ; \n\t\t\t\t\tzzMarkedPosL = zzMarkedPos ; \n\t\t\t\t\tzzBufferL = zzBuffer ; \n\t\t\t\t\tzzEndReadL = zzEndRead ; \n\t\t\t\t\tif ( eof ) { \n\t\t\t\t\t\tzzInput = YYEOF ; \n\t\t\t\t\t\tbreak zzForAction ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F156325 ( zzInput , zzBufferL , zzCurrentPosL ) } \n\t\t\t\t\t} \n\t\t\t\tint zzNext = zzTransL [ zzRowMapL [ zzState ] + zzCMapL [ zzInput ] ] ; \n\t\t\t\tif $F9467 ( zzNext ) break zzForAction ; \n\t\t\t\tzzState = zzNext ; \n\t\t\t\t$F62114 ( zzAttributes , zzAttrL , zzState ) if $F62745 ( zzAttributes ) { \n\t\t\t\t\tzzAction = zzState ; \n\t\t\t\t\tzzMarkedPosL = zzCurrentPosL ; \n\t\t\t\t\tif $F62745 ( zzAttributes ) break zzForAction ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tzzMarkedPos = zzMarkedPosL ; \n\t\tswitch ( zzAction < INT00 ? zzAction : ZZ_ACTION [ zzAction ] ) { \n\t\t\t$F60794 $F1243734 ( sb , yytext ) $F118676 $F60794 { \n\t\t\t\tsb = null ; \n\t\t\t\t$F405643 ( sb ) yybegin ( STRING_BEGIN ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_RIGHT_BRACE , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\tBoolean val = $F132700 ( Boolean , yytext ) ; \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_VALUE , val ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_VALUE , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\tyybegin ( YYINITIAL ) ; \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_VALUE , $F797 ( sb ) ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\tDouble val = $F132700 ( Double , yytext ) ; \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_VALUE , val ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\tthrow new ParseException ( yychar , ParseException . ERROR_UNEXPECTED_CHAR , new Character $F645864 ( yycharat ) ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_RIGHT_SQUARE , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_COLON , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_LEFT_BRACE , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\ttry { \n\t\t\t\t\tint ch = Integer . parseInt ( yytext ( ) . substring ( INT00 ) , INT00 ) ; \n\t\t\t\t\t$F82681 ( sb , ch ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tthrow new ParseException ( yychar , ParseException . ERROR_UNEXPECTED_EXCEPTION , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_LEFT_SQUARE , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 { \n\t\t\t\tLong val = $F132700 ( Long , yytext ) ; \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_VALUE , val ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1219 ( sb ) $F118676 $F60794 { \n\t\t\t\treturn new Yytoken ( Yytoken . TYPE_COMMA , null ) ; \n\t\t\t\t} \n\t\t\t$F118676 $F60794 $F1645 $F118676 $F2377 if $F76130 ( zzInput , YYEOF , zzStartRead , zzCurrentPos ) { \n\t\t\t\tzzAtEOF = true ; \n\t\t\t\t$F724 } \n\t\t\telse $F890 ( zzScanError , ZZ_NO_MATCH ) } \n\t\t} \n\t} \n"}, {"code": "public void runScript $F2 { \n\tif $F100166 ( script ) { \n\t\tBufferedReader $F49966 ( reader , script ) ; \n\t\ttry { \n\t\t\tList results = runScript ( reader ) ; \n\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 ) ) ; \n\t\t\t} \n\t\tcatch ( Throwable t ) { \n\t\t\tthrow new ConfigurationException $F2756 ( t ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void setProperties ( Properties properties ) { \n\tscript = properties . getProperty ( STRING00 , script ) ; \n\tpageIntervalInMinutes = Integer . parseInt ( properties . getProperty ( $F6265 ( pageIntervalInMinutes ) ) ) ; \n\tpageOffsetInMinutes = Integer . parseInt ( properties . getProperty ( $F6265 ( pageOffsetInMinutes ) ) ) ; \n\t} \n"}, {"code": "public List $F735465 search ( String query ) throws MovieMeterException { \n\t$F8494 ( url , buildSearchUrl , query ) try { \n\t\treturn mapper . readValue ( requestWebPage ( url ) , new TypeReference < List $F735465 > $F55344 ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tthrow new MovieMeterException ( ApiExceptionType . MAPPING_FAILED , STRING00 , url , ex ) ; \n\t\t} \n\t} \n"}, {"code": "private String buildIdUrl ( String id ) { \n\tStringBuilder url = $F69025 ( MM_URL ) ( id ) . append ( MM_PARAM_QST ) . append ( MM_API ) . append ( apiKey ) ; \n\t$F176425 ( LOG , url ) $F1226 ( url ) } \n"}, {"code": "private String buildSearchUrl ( String query ) { \n\tStringBuilder url = $F69025 ( MM_URL ) ( MM_PARAM_QST ) . append ( MM_QUERY ) . append ( encoder ( query ) ) . append ( MM_PARAM_AMP ) . append ( MM_API ) . append ( apiKey ) ; \n\t$F176425 ( LOG , url ) $F1226 ( url ) } \n"}, {"code": "private static String encoder $F62952 ( toEncode ) { \n\ttry { \n\t\treturn $F130849 ( URLEncoder , toEncode , URL_ENCODING ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException ex ) { \n\t\tLOG . warn ( $F658250 ( ex ) ) ; \n\t\t$F3956 } \n\t} \n"}, {"code": "private $F1372 T readJsonObject $F523054 ( url , object ) throws MovieMeterException { \n\t$F138322 ( page , requestWebPage , url ) if $F206736 ( StringUtils , page ) { \n\t\ttry $F198852 ( mapper , page , object ) catch ( IOException ex ) { \n\t\t\tthrow new MovieMeterException ( ApiExceptionType . MAPPING_FAILED , STRING00 , url , ex ) ; \n\t\t\t} \n\t\t} \n\tthrow new MovieMeterException ( ApiExceptionType . MAPPING_FAILED , STRING00 , url ) ; \n\t} \n"}, {"code": "public static LogLevel toLogLevel ( Object value ) { \n\tif $F112 ( value ) return LogLevel . Info ; \n\tvalue = $F1116502 ( value ) ( ) ; \n\tif $F148611 ( value ) return LogLevel . None ; \n\telse if $F17186 ( value ) return LogLevel . Fatal ; \n\telse if $F17186 ( value ) return LogLevel . Error ; \n\telse if $F148611 ( value ) return LogLevel . Warn ; \n\telse if $F17186 ( value ) return LogLevel . Info ; \n\telse if $F17186 ( value ) return LogLevel . Debug ; \n\telse if $F17186 ( value ) return LogLevel . Trace ; \n\telse return LogLevel . Info ; \n\t} \n"}, {"code": "public static int toInteger ( LogLevel level ) { \n\tif ( level == LogLevel . Fatal ) $F8383 if ( level == LogLevel . Error ) $F8383 if ( level == LogLevel . Warn ) $F8383 if ( level == LogLevel . Info ) $F8383 if ( level == LogLevel . Debug ) $F8383 if ( level == LogLevel . Trace ) $F8383 $F8383 } \n"}, {"code": "$F1 public void removeIPEndpoints ( $F197020 String fromLoadBalancerId , $F197020 String ... addresses ) throws $F22199250 { \n\tNovaMethod method = new NovaMethod $F560 ( getProvider ) ; \n\tfor ( JSONObject member : findAllMembers ( fromLoadBalancerId ) ) { \n\t\tfor ( String address : addresses ) { \n\t\t\ttry { \n\t\t\t\tif ( address . equals ( $F2303 ( member ) ) ) { \n\t\t\t\t\tmethod . deleteNetworks ( getMembersResource ( ) , $F2303 ( member ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F3134449 ( e ) } \n\t\t} \n\t} \n"}, {"code": "private $F197020 LoadBalancerHealthCheck toLoadBalancerHealthCheck ( JSONObject ob ) throws JSONException , InternalException , CloudException { \n\tLoadBalancerHealthCheck . HCProtocol protocol = fromOSProtocol ( $F2303 ( ob ) ) ; \n\t$F590164 ( count , ob ) $F3747 ( port ) String path = $F44476 ( ob ) ; \n\tJSONArray pools = ob . optJSONArray ( STRING00 ) ; \n\tfor ( $F8125 ( i , pools ) ) { \n\t\tString lbId = $F11383 ( pools , i ) . getString ( STRING00 ) ; \n\t\tLoadBalancer lb = getLoadBalancer ( lbId ) ; \n\t\tif $F268 ( lb ) { \n\t\t\tLbListener [ ] listeners = $F493131 ( lb ) ; \n\t\t\tif $F124033 ( listeners ) { \n\t\t\t\tport = listeners [ INT00 ] . getPrivatePort ( ) ; \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t} \n\t$F3276 ( id , ob ) $F590164 ( timeout , ob ) $F590164 ( interval , ob ) LoadBalancerHealthCheck lbhc = LoadBalancerHealthCheck . getInstance ( id , protocol , port , path , interval , timeout , count , count ) ; \n\tfor ( $F8125 ( i , pools ) ) { \n\t\tlbhc . addProviderLoadBalancerId ( $F11383 ( pools , i ) . getString ( STRING00 ) ) ; \n\t\t} \n\treturn lbhc ; \n\t} \n"}, {"code": "private List $F379461 findAllVips $F624 ( loadBalancerId ) throws $F22199250 { \n\tNovaMethod method = new NovaMethod $F560 ( getProvider ) ; \n\tJSONObject result = method . getNetworks ( getListenersResource ( ) , null , false , STRING00 + getContext ( ) . getAccountNumber ( ) ) ; \n\tList $F379461 listeners = new ArrayList $F379461 $F2 ; \n\tif ( result != null && $F6073 ( result ) ) { \n\t\ttry { \n\t\t\t$F44453 ( list , result ) for ( $F8125 ( i , list ) ) { \n\t\t\t\t$F11386 ( vip , list , i ) if ( loadBalancerId == null || loadBalancerId . equalsIgnoreCase ( $F2303 ( vip ) ) ) $F529 ( listeners , vip ) } \n\t\t\t} \n\t\tcatch ( JSONException e ) { \n\t\t\t$F433908 ( logger , e ) $F22213712 ( e ) } \n\t\t} \n\treturn listeners ; \n\t} \n"}, {"code": "private List $F379461 findAllMembers $F624 ( loadBalancerId ) throws $F22199250 { \n\tNovaMethod method = new NovaMethod $F560 ( getProvider ) ; \n\tJSONObject result = method . getNetworks ( getMembersResource ( ) , null , false , STRING00 + getContext ( ) . getAccountNumber ( ) ) ; \n\tList $F379461 members = new ArrayList $F379461 $F2 ; \n\tif ( result != null && $F6073 ( result ) ) { \n\t\ttry { \n\t\t\t$F44453 ( list , result ) for ( $F8125 ( i , list ) ) { \n\t\t\t\t$F11386 ( member , list , i ) if ( ( loadBalancerId != null && loadBalancerId . equals ( $F582543 ( member ) ) ) || loadBalancerId == null ) $F529 ( members , member ) } \n\t\t\t} \n\t\tcatch ( JSONException e ) { \n\t\t\t$F433908 ( logger , e ) $F22213712 ( e ) } \n\t\t} \n\treturn members ; \n\t} \n"}, {"code": "private List < LoadBalancer > findLoadBalancers $F624 ( loadBalancerId ) throws $F22199250 { \n\t$F22213656 ( APITrace , getProvider ) try { \n\t\tList $F379461 listeners = findAllVips ( loadBalancerId ) ; \n\t\tList $F379461 members = findAllMembers ( loadBalancerId ) ; \n\t\tNovaMethod method = new NovaMethod $F560 ( getProvider ) ; \n\t\tJSONObject result = method . getNetworks ( getLoadBalancersResource ( ) , loadBalancerId , false , STRING00 + getContext ( ) . getAccountNumber ( ) ) ; \n\t\tList < LoadBalancer > results = new ArrayList < LoadBalancer > $F2 ; \n\t\tif ( $F16028 ( loadBalancerId , result ) && $F6073 ( result ) ) { \n\t\t\ttry { \n\t\t\t\t$F44453 ( loadbalancers , result ) for ( $F8125 ( i , loadbalancers ) ) { \n\t\t\t\t\t$F11386 ( lb , loadbalancers , i ) $F10683 ( results , toLoadBalancer , lb , listeners , members ) } \n\t\t\t\t} \n\t\t\tcatch ( JSONException e ) { \n\t\t\t\t$F433908 ( logger , e ) $F22213712 ( e ) } \n\t\t\t} \n\t\telse if ( result != null && $F6073 ( result ) ) { \n\t\t\ttry { \n\t\t\t\treturn Collections . singletonList ( toLoadBalancer ( $F11479 ( result ) , listeners , members ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( JSONException e ) { \n\t\t\t\t$F433908 ( logger , e ) $F22213712 ( e ) } \n\t\t\t} \n\t\treturn results ; \n\t\t} \n\t$F133621 ( APITrace ) } \n"}, {"code": "public static final void assertProcessActive $F62952 ( processInstanceId ) { \n\t$F378086 ( Validate , processInstanceId ) apiCallback . debug ( LogMessage . PROCESS_1 , processInstanceId ) ; \n\ttry { \n\t\tgetProcessInstanceAssertable ( ) . processIsActive ( processInstanceId ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_PROCESS_1 , processInstanceId ) ; \n\t\t} \n\t} \n"}, {"code": "public static final void assertProcessEnded $F62952 ( processInstanceId ) { \n\t$F378086 ( Validate , processInstanceId ) apiCallback . debug ( LogMessage . PROCESS_5 , processInstanceId ) ; \n\ttry { \n\t\tgetProcessInstanceAssertable ( ) . processIsEnded ( processInstanceId ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_PROCESS_2 , processInstanceId ) ; \n\t\t} \n\t} \n"}, {"code": "public static final void assertProcessInActivity $F96892 ( processInstanceId , activityId ) { \n\t$F378086 ( Validate , processInstanceId ) $F378086 ( Validate , activityId ) apiCallback . debug ( LogMessage . PROCESS_15 , processInstanceId , activityId ) ; \n\ttry { \n\t\tgetProcessInstanceAssertable ( ) . processIsInActivity ( processInstanceId , activityId ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_PROCESS_6 , processInstanceId , activityId ) ; \n\t\t} \n\t} \n"}, {"code": "public static final void assertTaskUncompleted $F62952 ( taskId ) { \n\t$F378086 ( Validate , taskId ) apiCallback . debug ( LogMessage . TASK_2 , taskId ) ; \n\ttry { \n\t\tgetTaskInstanceAssertable ( ) . taskIsUncompleted ( taskId ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_TASK_2 , taskId ) ; \n\t\t} \n\t} \n"}, {"code": "public static final void assertTaskUncompleted $F96892 ( processInstanceId , taskDefinitionKey ) { \n\t$F378086 ( Validate , processInstanceId ) $F378086 ( Validate , taskDefinitionKey ) apiCallback . debug ( LogMessage . TASK_1 , taskDefinitionKey , processInstanceId ) ; \n\ttry { \n\t\tgetTaskInstanceAssertable ( ) . taskIsUncompleted ( processInstanceId , taskDefinitionKey ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_TASK_1 , taskDefinitionKey , processInstanceId ) ; \n\t\t} \n\t} \n"}, {"code": "public static void assertProcessEndedAndInExclusiveEndEvent $F96892 ( processInstanceId , endEventId ) { \n\t$F378086 ( Validate , processInstanceId ) $F378086 ( Validate , endEventId ) apiCallback . debug ( LogMessage . PROCESS_9 , processInstanceId , endEventId ) ; \n\ttry { \n\t\tgetEndEventAssertable ( ) . processEndedAndInExclusiveEndEvent ( processInstanceId , endEventId ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_PROCESS_3 , processInstanceId , endEventId ) ; \n\t\t} \n\t} \n"}, {"code": "public static void assertProcessEndedAndInEndEvents $F652005 ( processInstanceId , endEventIds ) { \n\t$F378086 ( Validate , processInstanceId ) $F378086 ( Validate , endEventIds ) apiCallback . debug ( LogMessage . PROCESS_11 , processInstanceId , AssertUtils . arrayToString ( endEventIds ) ) ; \n\ttry { \n\t\tgetEndEventAssertable ( ) . processEndedAndInEndEvents ( processInstanceId , endEventIds ) ; \n\t\t} \n\tcatch ( final AssertionError ae ) { \n\t\tapiCallback . fail ( ae , LogMessage . ERROR_PROCESS_4 , processInstanceId , AssertUtils . arrayToString ( endEventIds ) ) ; \n\t\t} \n\t} \n"}, {"code": "public < K , T extends Persistable $F53007 > CastorDao $F242516 getDao $F65165 ( type ) { \n\tCastorDao $F242516 dao = _daoRegistry . getDao ( type ) ; \n\tdao . setDaoRegistry ( _daoRegistry ) ; \n\treturn dao ; \n\t} \n"}, {"code": "public < K , T extends Persistable $F53007 > K create ( $F58638 ( type ) , final T object ) { \n\tK p_id = _executeTx ( STRING00 , type , object , new TransactionCallback $F53007 $F2 { \n\t\tpublic K doInTransaction ( final TransactionStatus status ) { \n\t\t\treturn getDao ( type ) . create ( object ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn p_id ; \n\t} \n"}, {"code": "protected $F1372 T _executeTx ( final String operation , final Class < ? extends Persistable $F45 > type , final TransactionCallback $F1372 action ) $F273545 ( _executeTx , operation , type , action ) "}, {"code": "public static void print ( Message message , Appendable output ) throws IOException { \n\tJsonGenerator generator = new JsonGenerator ( output ) ; \n\t$F10273 ( generator ) $F564 ( print , message , generator ) $F10273 ( generator ) } \n"}, {"code": "public static void print ( UnknownFieldSet fields , Appendable output ) throws IOException { \n\tJsonGenerator generator = new JsonGenerator ( output ) ; \n\t$F10273 ( generator ) $F564 ( printUnknownFields , fields , generator ) $F10273 ( generator ) } \n"}, {"code": "public static String printToString ( Message message ) { \n\ttry { \n\t\t$F1200 ( text ) $F564 ( print , message , text ) $F1226 ( text ) } \n\tcatch ( IOException e ) { \n\t\tthrow new RuntimeException $F17437 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static String printToString ( UnknownFieldSet fields ) { \n\ttry { \n\t\t$F1200 ( text ) $F564 ( print , fields , text ) $F1226 ( text ) } \n\tcatch ( IOException e ) { \n\t\tthrow new RuntimeException $F17437 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private static String unsignedToString ( int value ) { \n\tif $F9869 ( value ) $F45706 ( Integer , value ) else { \n\t\treturn Long . toString ( ( value ) & NUM00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void merge ( CharSequence input , $F646078 builder ) throws ParseException { \n\tmerge ( input , ExtensionRegistry . getEmptyRegistry ( ) , builder ) ; \n\t} \n"}, {"code": "public static void merge ( Readable input , ExtensionRegistry extensionRegistry , $F646078 builder ) throws ParseException , IOException { \n\t$F123590 ( merge , toStringBuilder , input , extensionRegistry , builder ) ; \n\t} \n"}, {"code": "private static StringBuilder toStringBuilder ( Readable input ) throws IOException { \n\t$F1200 ( text ) $F33795 ( buffer , CharBuffer , BUFFER_SIZE ) while $F38432 { \n\t\t$F33798 ( n , input , buffer ) $F84338 ( n ) $F33783 ( buffer ) $F44618 ( text , buffer , n ) } \n\treturn text ; \n\t} \n"}, {"code": "public static void merge ( CharSequence input , ExtensionRegistry extensionRegistry , $F646078 builder ) throws ParseException { \n\tTokenizer tokenizer = new Tokenizer ( input ) ; \n\t$F2166249 ( tokenizer ) while ( ! tokenizer . tryConsume ( STRING00 ) ) $F5704 ( mergeField , tokenizer , extensionRegistry , builder ) } \n"}, {"code": "private static void mergeField ( Tokenizer tokenizer , ExtensionRegistry extensionRegistry , $F646078 builder ) throws ParseException { \n\tFieldDescriptor field ; \n\tDescriptor type = builder . getDescriptorForType ( ) ; \n\tExtensionRegistry . ExtensionInfo extension = null ; \n\tif ( tokenizer . tryConsume ( STRING00 ) ) { \n\t\tStringBuilder name = new StringBuilder ( tokenizer . consumeIdentifier ( ) ) ; \n\t\twhile ( tokenizer . tryConsume ( STRING00 ) ) { \n\t\t\t$F1218 ( name ) name . append ( tokenizer . consumeIdentifier ( ) ) ; \n\t\t\t} \n\t\textension = extensionRegistry . findExtensionByName ( $F797 ( name ) ) ; \n\t\tif $F112 ( extension ) { \n\t\t\tthrow tokenizer . parseExceptionPreviousToken ( $F320 ( name ) ) ; \n\t\t\t} \n\t\telse if ( extension . descriptor . getContainingType ( ) != type ) { \n\t\t\tthrow tokenizer . parseExceptionPreviousToken ( $F320 ( name ) + $F353111 ( type ) + STRING00 ) ; \n\t\t\t} \n\t\t$F2166249 ( tokenizer ) field = extension . descriptor ; \n\t\t} \n\telse { \n\t\tString name = tokenizer . consumeIdentifier ( ) ; \n\t\tfield = type . findFieldByName ( name ) ; \n\t\tif $F112 ( field ) { \n\t\t\tString lowerName = $F140921 ( name , Locale ) ; \n\t\t\tfield = type . findFieldByName ( lowerName ) ; \n\t\t\tif ( $F268 ( field ) && ( $F511 ( field ) != FieldDescriptor . Type . GROUP ) ) $F67413 ( field ) } \n\t\tif ( $F268 ( field ) && ( $F511 ( field ) == FieldDescriptor . Type . GROUP ) && ! $F540876 ( field ) . getName ( ) . equals ( name ) ) $F67413 ( field ) if $F112 ( field ) { \n\t\t\tthrow tokenizer . parseExceptionPreviousToken ( $F458944 ( type ) + STRING00 + name + STRING00 ) ; \n\t\t\t} \n\t\t} \n\t$F2166249 ( tokenizer ) boolean array = tokenizer . tryConsume ( STRING00 ) ; \n\tif ( array ) { \n\t\twhile ( ! tokenizer . tryConsume ( STRING00 ) ) { \n\t\t\t$F276 ( handleValue , tokenizer , extensionRegistry , builder , field , extension ) tokenizer . tryConsume ( STRING00 ) ; \n\t\t\t} \n\t\t} \n\telse $F277 ( handleValue , tokenizer , extensionRegistry , builder , field , extension ) if ( tokenizer . tryConsume ( STRING00 ) ) $F5704 ( mergeField , tokenizer , extensionRegistry , builder ) } \n"}, {"code": "static ByteString unescapeBytes ( CharSequence input ) throws InvalidEscapeSequence { \n\t$F1975 result = new byte $F44593 ( input ) ; \n\t$F1987 ( pos ) for ( $F8125 ( i , input ) ) { \n\t\t$F14215 ( c , input , i ) if $F24340 ( c ) { \n\t\t\tif ( $F97051 ( i , input ) ) { \n\t\t\t\t++ i ; \n\t\t\t\t$F145001 ( c , input , i ) if $F540 ( isOctal , c ) { \n\t\t\t\t\t$F10882 ( code , digitValue , c ) if ( ( $F97051 ( i , input ) ) && $F151991 ( isOctal , input , i ) ) { \n\t\t\t\t\t\t++ i ; \n\t\t\t\t\t\tcode = code * INT00 + $F67116 ( digitValue , input , i ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( ( $F97051 ( i , input ) ) && $F151991 ( isOctal , input , i ) ) { \n\t\t\t\t\t\t++ i ; \n\t\t\t\t\t\tcode = code * INT00 + $F67116 ( digitValue , input , i ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F143130 ( result , pos , code ) } \n\t\t\t\telse { \n\t\t\t\t\tswitch ( c ) { \n\t\t\t\t\t\t$F21776 $F443601 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F443601 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F287237 ( result , pos ) $F332 $F21776 $F1987 ( code ) if ( ( $F97051 ( i , input ) ) && $F151991 ( isHex , input , i ) ) { \n\t\t\t\t\t\t\t++ i ; \n\t\t\t\t\t\t\tcode = $F67116 ( digitValue , input , i ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\tthrow new InvalidEscapeSequence $F6 ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif ( ( $F97051 ( i , input ) ) && $F151991 ( isHex , input , i ) ) { \n\t\t\t\t\t\t\t++ i ; \n\t\t\t\t\t\t\tcode = code * INT00 + $F67116 ( digitValue , input , i ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F143130 ( result , pos , code ) $F332 $F2377 throw new InvalidEscapeSequence $F500 ( c ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tthrow new InvalidEscapeSequence $F6 ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\t$F143130 ( result , pos , c ) } \n\t\t} \n\treturn ByteString . copyFrom ( result , INT00 , pos ) ; \n\t} \n"}, {"code": "public RESTAssignedPropertyTagCollectionV1 getRESTPropertyTagInTopicRevisions ( int id , final Integer revision , final RESTBaseTopicV1 $F62270 topic ) { \n\tfinal RESTAssignedPropertyTagCollectionV1 propertyTagRevisions ; \n\tif ( topic instanceof RESTTranslatedTopicV1 ) $F109816 ( propertyTagRevisions , getRESTTranslatedTopicPropertyRevisions , id , revision , topic ) else $F109816 ( propertyTagRevisions , getRESTTopicPropertyRevisions , id , revision , topic ) return propertyTagRevisions ; \n\t} \n"}, {"code": "public CollectionWrapper < PropertyTagInTopicWrapper > getPropertyTagInTopicRevisions ( int id , final Integer revision , final RESTBaseTopicV1 $F62270 topic ) { \n\treturn RESTCollectionWrapperBuilder . < PropertyTagInTopicWrapper > $F792698 . providerFactory ( getProviderFactory ( ) ) . collection ( $F209 ( getRESTPropertyTagInTopicRevisions , id , revision , topic ) ) . isRevisionCollection ( ) . parent ( topic ) . expandedEntityMethods ( $F201289 ( Arrays ) ) . entityWrapperInterface ( PropertyTagInTopicWrapper . class ) . build ( ) ; \n\t} \n"}, {"code": "public static Message fromString ( String messageFrame ) throws InvalidMessageException { \n\t$F4728 ( prefix ) $F4728 ( trailing ) $F35682 ( messageFrame ) if $F5667 ( messageFrame ) { \n\t\t$F6110 ( splitPoint , messageFrame ) $F83682 ( prefix , messageFrame , splitPoint ) messageFrame = $F317641 ( messageFrame , splitPoint ) ; \n\t\t} \n\t$F6110 ( trailingPoint , messageFrame ) if $F3752 ( trailingPoint ) { \n\t\t$F19735 ( trailing , messageFrame , trailingPoint ) messageFrame = $F317630 ( messageFrame , trailingPoint ) ; \n\t\t} \n\t$F6110 ( endTypePoint , messageFrame ) String typeString ; \n\tif $F9467 ( endTypePoint ) { \n\t\ttypeString = messageFrame ; \n\t\tmessageFrame = STRING00 ; \n\t\t} \n\telse { \n\t\t$F83682 ( typeString , messageFrame , endTypePoint ) messageFrame = $F317641 ( messageFrame , endTypePoint ) ; \n\t\t} \n\t$F85456 ( type , MessageType , typeString ) if $F112 ( type ) { \n\t\tthrow new InvalidMessageException $F2821 ( typeString ) ; \n\t\t} \n\t$F89157 $F89160 ( argsList ) ; \n\twhile $F1216 ( messageFrame ) { \n\t\t$F6110 ( nextSpace , messageFrame ) if $F9467 ( nextSpace ) $F493238 ( argsList , messageFrame ) else { \n\t\t\targsList . add ( $F2529 ( messageFrame , nextSpace ) ) ; \n\t\t\tmessageFrame = $F317641 ( messageFrame , nextSpace ) ; \n\t\t\t} \n\t\t} \n\t$F12701 ( trailing , argsList ) $F90535 ( args , argsList ) return new Message ( prefix , type , $F58519 ( argsList , args ) ) ; \n\t} \n"}, {"code": "public static int processResponses ( PushNotificationManager notificationManager ) { \n\tList < ResponsePacket > responses = readResponses ( notificationManager . getActiveSocket ( ) ) ; \n\t$F564 ( handleResponses , responses , notificationManager ) $F10928 ( responses ) } \n"}, {"code": "private static List < ResponsePacket > readResponses ( Socket socket ) { \n\tList < ResponsePacket > responses = new Vector < ResponsePacket > $F2 ; \n\t$F1987 ( previousTimeout ) try { \n\t\ttry { \n\t\t\tpreviousTimeout = socket . getSoTimeout ( ) ; \n\t\t\t$F3499 ( socket , TIMEOUT ) } \n\t\t$F148617 $F142883 ( input , socket ) while $F38432 { \n\t\t\tResponsePacket packet = readResponsePacketData ( input ) ; \n\t\t\tif $F268 ( packet ) $F528 ( responses , packet ) else $F332 } \n\t\t} \n\t$F148617 try { \n\t\t$F3499 ( socket , previousTimeout ) } \n\t$F148617 return responses ; \n\t} \n"}, {"code": "$F1 public synchronized void start $F2 { \n\t$F4599 ( super ) this . running = true ; \n\tif ( this . hasFrame ) this . frame . setVisible ( true ) ; \n\tthis . thread . start ( ) ; \n\t} \n"}, {"code": "$F1 public synchronized void stop $F2 { \n\tthis . logger . d ( STRING00 ) ; \n\tthis . getGame ( ) . onStop ( ) ; \n\tthis . running = false ; \n\tif ( this . hasFrame ) this . frame . dispose ( ) ; \n\ttry { \n\t\tthis . thread . join ( INT00 ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthis . logger . e ( STRING00 , e ) ; \n\t\t$F185563 ( System ) } \n\tthis . logger . d ( STRING00 ) ; \n\t$F17380 ( System ) } \n"}, {"code": "public Set < ClassModel > getAllClassDependencies $F2 { \n\tHashSet < ClassModel > $F6940 ( result ) ; \n\tClassModel . getAllClassDependencies ( result , this ) ; \n\treturn result ; \n\t} \n"}, {"code": "public void initializeConnection ( AppleNotificationServer server ) throws CommunicationException , KeystoreException { \n\ttry { \n\t\tthis . connectionToAppleServer = new ConnectionToNotificationServer ( server ) ; \n\t\tthis . socket = connectionToAppleServer . getSSLSocket ( ) ; \n\t\t$F31223 ( heavyDebugMode , dumpCertificateChainDescription ) logger . debug ( STRING00 + server . getNotificationServerHost ( ) + STRING00 + server . getNotificationServerPort ( ) + STRING00 + socket ) ; \n\t\t} \n\tcatch ( KeystoreException e ) $F4760 ( e ) catch ( CommunicationException e ) $F4760 ( e ) catch ( Exception e ) { \n\t\tthrow new CommunicationException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private void restartPreviousConnection $F2 throws CommunicationException , KeystoreException { \n\ttry { \n\t\t$F45360 ( logger ) this . socket . close ( ) ; \n\t\t} \n\t$F148617 initializePreviousConnection ( ) ; \n\t} \n"}, {"code": "public void stopConnection $F2 throws CommunicationException , KeystoreException { \n\tprocessedFailedNotifications ( ) ; \n\ttry { \n\t\t$F45360 ( logger ) this . socket . close ( ) ; \n\t\t} \n\t$F148617 } \n"}, {"code": "private int processedFailedNotifications $F2 throws CommunicationException , KeystoreException { \n\tif ( useEnhancedNotificationFormat ) { \n\t\t$F45360 ( logger ) int responsesReceived = ResponsePacketReader . processResponses ( this ) ; \n\t\twhile $F3730 ( responsesReceived ) { \n\t\t\tPushedNotification skippedNotification = null ; \n\t\t\tList < PushedNotification > notificationsToResend = new ArrayList < PushedNotification > $F2 ; \n\t\t\t$F2233 ( foundFirstFail ) for ( PushedNotification notification : $F387 ( pushedNotifications ) ) { \n\t\t\t\tif ( foundFirstFail || $F223321 ( notification ) ) { \n\t\t\t\t\tif ( foundFirstFail ) $F528 ( notificationsToResend , notification ) else $F164149 ( foundFirstFail , skippedNotification , notification ) } \n\t\t\t\t} \n\t\t\t$F39336 ( pushedNotifications ) $F23123 ( toResend , notificationsToResend ) $F206489 ( logger , toResend ) if $F3730 ( toResend ) { \n\t\t\t\t$F45360 ( logger ) restartPreviousConnection ( ) ; \n\t\t\t\tfor ( PushedNotification pushedNotification : notificationsToResend ) $F37872 ( sendNotification , pushedNotification ) } \n\t\t\tint remaining = responsesReceived = ResponsePacketReader . processResponses ( this ) ; \n\t\t\tif $F2015 ( remaining ) { \n\t\t\t\t$F45360 ( logger ) $F8383 } \n\t\t\t} \n\t\treturn responsesReceived ; \n\t\t} \n\telse { \n\t\t$F45360 ( logger ) $F8383 } \n\t} \n"}, {"code": "public PushedNotification sendNotification ( Device device , Payload payload ) throws CommunicationException $F56238 ( sendNotification , device , payload ) "}, {"code": "public PushedNotifications sendNotifications ( Payload payload , List < Device > devices ) throws CommunicationException , KeystoreException { \n\tPushedNotifications notifications = new PushedNotifications $F2 ; \n\tfor ( Device device : devices ) notifications . add ( $F151833 ( sendNotification , device , payload , SEQUENTIAL_IDENTIFIER ) ) ; \n\tstopConnection ( ) ; \n\treturn notifications ; \n\t} \n"}, {"code": "public TeeOutputStream with ( OutputStream stream , boolean autoclose ) { \n\tif $F268 ( stream ) { \n\t\tthis . streams . put ( stream , autoclose ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public OutputStream getStreamAt ( int index ) { \n\tif $F51323 ( index , streams ) { \n\t\t$F1987 ( i ) for ( Entry < OutputStream , Boolean > entry : $F708 ( streams ) ) { \n\t\t\tif ( i ++ == index ) $F2817 ( entry ) } \n\t\t} \n\t$F724 } \n"}, {"code": "public static $F16845591 computeSoilLayerSize ( $F16845591 soilsData ) { \n\t$F23776 ( deep ) $F16845591 newSoilsData ; \n\tnewSoilsData = new $F16845591 $F2 ; \n\tfor ( $F129099 currentSoil : soilsData ) { \n\t\t$F129099 newCurrentSoil = new $F129099 ( currentSoil ) ; \n\t\tnewCurrentSoil . put ( LayerReducer . SLLB , new Float ( parseFloat ( currentSoil . get ( LayerReducer . SLLB ) ) - deep ) . toString ( ) ) ; \n\t\tdeep = parseFloat ( currentSoil . get ( LayerReducer . SLLB ) ) ; \n\t\t$F528 ( newSoilsData , newCurrentSoil ) } \n\treturn newSoilsData ; \n\t} \n"}, {"code": "public static String defaultValue ( String key ) { \n\tString value ; \n\t$F3567120 ( defaultValues ) ; \n\t$F662129 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) $F4395 ( defaultValues ) if $F33656 ( defaultValues , key ) $F13003 ( value , defaultValues , key ) else $F1619 ( value , UNKNOWN_DEFAULT_VALUE ) return value ; \n\t} \n"}, {"code": "private static synchronized String getFile ( String name ) { \n\tif $F309775 ( Objects , baseDirectory ) { \n\t\tbaseDirectory = $F46221 ( Options ) . getSystem ( STRING00 , $F108 ( System ) + File . separator + STRING00 ) ; \n\t\t} \n\t$F2595 ( dir , baseDirectory ) if $F11857 ( dir ) $F2554 ( dir ) if $F11928 ( dir ) throw new S1SystemError $F2821 ( baseDirectory ) ; \n\treturn $F11868 ( dir ) + File . separator + name ; \n\t} \n"}, {"code": "$F1 protected Scalar transform ( ActivityContext context , Scalar scalar ) throws ActivityException { \n\tif ( ! ( $F144 ( scalar ) instanceof LdapQuery ) ) { \n\t\tthrow new ActivityException $F6 ; \n\t\t} \n\tLdapQuery query = ( LdapQuery ) $F144 ( scalar ) ; \n\tlogger . trace ( $F6370 ( query ) ) ; \n\t$F724 } \n"}, {"code": "public static UnsignedLong valueOf ( BigInteger value ) { \n\tcheckNotNull ( value ) ; \n\tcheckArgument ( $F68183 ( value ) >= INT00 && value . bitLength ( ) <= Long . SIZE , STRING00 , value ) ; \n\treturn fromLongBits ( $F4887 ( value ) ) ; \n\t} \n"}, {"code": "public static UnsignedLong valueOf $F11348 ( string , radix ) { \n\treturn fromLongBits ( UnsignedLongs . parseUnsignedLong ( string , radix ) ) ; \n\t} \n"}, {"code": "$F67996 public UnsignedLong times ( UnsignedLong val ) { \n\treturn fromLongBits ( value * checkNotNull ( val ) . value ) ; \n\t} \n"}, {"code": "public Betner reset ( String target ) { \n\tthis . rebuild = $F27658 ( target4Betn , target ) ; \n\tthis . target4Betn = target ; \n\treturn this ; \n\t} \n"}, {"code": "public int countMatches $F2 { \n\tif ( null != this . positions && this . positions . isPresent ( ) ) { \n\t\treturn this . positions . get ( ) . size ( ) ; \n\t\t} \n\tif $F1931 ( Strs , target4Betn ) $F17553 if $F34250 ( region ) $F17553 if ( isEqual ( $F144 ( region ) [ INT00 ] , $F144 ( region ) [ INT00 ] ) ) { \n\t\tint matchCount = count ( target4Betn , $F144 ( region ) [ INT00 ] ) ; \n\t\tif ( this . matchWay . get ( ) == STRING00 || this . matchWay . get ( ) == STRING00 ) $F356 ( matchCount ) matchCount = $F100188 ( matchCount ) ? matchCount : $F60967 ( matchCount ) ; \n\t\treturn matchCount / INT00 ; \n\t\t} \n\treturn Math . min ( count ( target4Betn , $F144 ( region ) [ INT00 ] ) , count ( target4Betn , $F144 ( region ) [ INT00 ] ) ) ; \n\t} \n"}, {"code": "public String result ( int positionNum ) { \n\t$F112284 kv = null ; \n\tif ( null != ( $F69912 ( kv , position , positionNum ) ) ) $F3342 ( doSubstring , kv ) return EMPTY ; \n\t} \n"}, {"code": "public $F47962 asMap $F2 { \n\tinitializePosition ( ) ; \n\tfinal $F47962 $F71201 ( results , Maps ) ; \n\tMapper . from ( $F144 ( positions ) ) . entryLoop ( new Decisional < Map . Entry < Integer , $F112284 > > $F2 { \n\t\t$F1 protected void decision ( Entry < Integer , $F112284 > input ) { \n\t\t\tresults . put ( $F6585 ( input , doSubstring ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn results ; \n\t} \n"}, {"code": "public String asymmetric $F12004 ( leftPos , rightPos ) { \n\tboolean lm = false , rm = false , isSameLAR = isEqual ( this . region . get ( ) [ INT00 ] , this . region . get ( ) [ INT00 ] ) ; \n\tint l = INT00 , r = INT00 , lr = INT00 , lp = INT00 , rp = INT00 ; \n\tfor ( $F112284 kv : $F144 ( indexes ) ) { \n\t\tif ( isSameLAR ) { \n\t\t\t++ lr ; \n\t\t\tif ( lr == leftPos ) { \n\t\t\t\tlp = $F3027012 ( kv ) ; \n\t\t\t\tlm = true ; \n\t\t\t\t} \n\t\t\tif ( lr == rightPos ) { \n\t\t\t\trp = $F3027012 ( kv ) ; \n\t\t\t\trm = true ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tswitch ( kv . getL ( ) . intValue ( ) ) { \n\t\t\t\t$F60794 ++ l ; \n\t\t\t\tif ( l == leftPos ) { \n\t\t\t\t\tlp = $F3027012 ( kv ) ; \n\t\t\t\t\tlm = true ; \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 ++ r ; \n\t\t\t\tif ( r == rightPos ) { \n\t\t\t\t\trp = $F3027012 ( kv ) ; \n\t\t\t\t\trm = true ; \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t} \n\t\tif ( lm && rm ) $F333 } \n\tif ( ! ( lm && rm ) ) $F356 ( EMPTY ) return this . doSubstring ( $F1010 ( Pair , lp , rp ) ) ; \n\t} \n"}, {"code": "protected Betner between ( String left , String right , Character sameTagMatch ) $F12176 ( inrange , left , right , sameTagMatch ) "}, {"code": "public synchronized Filter addKeys $F996 ( keys ) { \n\t$F381956 ( key , keys , this ) return this ; \n\t} \n"}, {"code": "public synchronized Filter addTags $F996 ( tags ) { \n\t$F381956 ( tag , tags , this ) return this ; \n\t} \n"}, {"code": "public synchronized Filter addAttribute $F1195 ( key , value ) $F142432 ( attributes , key , value , this ) "}, {"code": "public synchronized Filter addAttributes $F7169 ( attributes ) { \n\tfor ( $F24106 ( pair , attributes ) ) { \n\t\t$F19202 ( key , pair ) $F6102 ( value , pair ) $F43362 ( this ) ( key , value ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public $F73786 toFloatArray $F2 { \n\t$F73836 ( copy , size ) for ( $F6610 ( i , size ) ) $F79113 ( copy , i , elements ) return copy ; \n\t} \n"}, {"code": "$F1 public Float set ( int index , Float element ) { \n\treturn set ( index , $F4923 ( element ) ) ; \n\t} \n"}, {"code": "public boolean addAll ( FloatArray items ) { \n\tensureCapacity ( size + items . size ) ; \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ size ++ ] = items . elements [ i ] ; \n\t\t} \n\treturn items . size > INT00 ; \n\t} \n"}, {"code": "public void add $F83406 ( index , e ) { \n\tif $F65857 ( index , size ) $F18007 $F87394 ( ensureCapacity , size ) if ( index < size ) { \n\t\tfor ( int i = size ; \n\t\ti > index ; \n\t\ti -- ) { \n\t\t\t$F102975 ( elements , i ) } \n\t\t} \n\t$F62115 ( elements , index , e ) size ++ ; \n\t} \n"}, {"code": "public boolean addAll ( int index , $F73786 items ) { \n\tif $F65857 ( index , size ) $F18007 ensureCapacity ( size + items . length ) ; \n\tif ( index < size ) { \n\t\tfor ( $F58467 ( i , size ) ; \n\t\ti >= index ; \n\t\ti -- ) { \n\t\t\telements [ i + items . length ] = elements [ i ] ; \n\t\t\t} \n\t\t} \n\tfor ( float e : items ) $F58394 ( elements , index , e ) $F102747 ( size , items ) return $F1824 ( items ) ; \n\t} \n"}, {"code": "public boolean addAll ( int index , FloatArray items ) { \n\tif $F65857 ( index , size ) $F18007 ensureCapacity ( size + items . size ) ; \n\tif ( index < size ) { \n\t\tfor ( $F58467 ( i , size ) ; \n\t\ti >= index ; \n\t\ti -- ) { \n\t\t\telements [ i + items . size ] = elements [ i ] ; \n\t\t\t} \n\t\t} \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ index ++ ] = items . elements [ i ] ; \n\t\t} \n\t$F118771 ( size , items ) return items . size > INT00 ; \n\t} \n"}, {"code": "$F1 public boolean addAll ( int index , Collection < ? extends Float > c ) { \n\tif $F65857 ( index , size ) $F18007 ensureCapacity ( size + $F3413 ( c ) ) ; \n\t$F60133 ( size , c ) for ( int i = size + $F3413 ( c ) - INT00 , j = size - INT00 ; \n\tj >= index ; \n\ti -- , j -- ) { \n\t\t$F62160 ( elements , i , j ) } \n\tfor ( float e : c ) $F58394 ( elements , index , e ) return $F4339 ( c ) ; \n\t} \n"}, {"code": "$F1 public Float remove ( int index ) { \n\trangeCheck ( index ) ; \n\t$F96463 ( value , elements , index ) for ( $F68135 ( i , index , size ) ) { \n\t\t$F12139 ( elements , i ) = elements [ i ] ; \n\t\t} \n\tsize -= INT00 ; \n\treturn value ; \n\t} \n"}, {"code": "private void reallocate ( int capacity ) { \n\tif $F72355 ( capacity , elements ) { \n\t\tassert ( size <= capacity ) ; \n\t\t$F73836 ( newArray , capacity ) for ( $F6610 ( i , size ) ) $F79113 ( newArray , i , elements ) elements = newArray ; \n\t\t} \n\t} \n"}, {"code": "protected void init ( $F7906 ( cls ) , Key ... keys ) { \n\treadDataSource = Execution . getDataSourceName ( $F507 ( cls ) , true ) ; \n\twriteDataSource = Execution . getDataSourceName ( $F507 ( cls ) , false ) ; \n\t$F1620 ( readDataSource , writeDataSource ) $F1620 ( writeDataSource , readDataSource ) if $F124033 ( keys ) { \n\t\tsecondaryCache = new ConcurrentHashMap < String , ConcurrentHashMap $F7903 > $F27612 ( keys ) ; \n\t\tfor ( Key k : keys ) { \n\t\t\tsecondaryCache . put ( $F797 ( k ) , new ConcurrentHashMap $F7903 $F1415 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public long count $F2 throws PersistenceException { \n\t$F45360 ( logger ) try { \n\t\tTransaction xaction = Transaction . getInstance ( true ) ; \n\t\tCounter $F260214 ( counter , getCounter ) ; \n\t\ttry { \n\t\t\t$F57665 ( results ) long count ; \n\t\t\tresults = xaction . execute ( counter , new $F110277 $F1415 , readDataSource ) ; \n\t\t\tcount = ( $F467190 ( results ) ) . longValue ( ) ; \n\t\t\t$F374904 ( xaction ) return count ; \n\t\t\t} \n\t\tfinally $F396503 ( xaction ) } \n\tfinally $F155966 ( logger ) } \n"}, {"code": "protected String getMandatoryPropertyValue $F1195 ( propertyName , description ) throws ServiceConfigurationError { \n\treturn $F67831 ( getMandatoryPropertyValue , getClass , propertyName , description ) ; \n\t} \n"}, {"code": "$F762 $F1 public R execute $F2 { \n\t$F464872 ( logger ) Property < ? , R > $F9005 ( property , aggregation ) ; \n\tGetList $F26212 command = session . get ( ( Metamodel $F26212 ) property . metamodel ( ) . root ( ) ) ; \n\tif $F268 ( filters ) { \n\t\tcommand . filter ( filters . toArray ( new Filter $F45 $F25623 ) ) ; \n\t\t} \n\tif $F268 ( orders ) { \n\t\t$F5223 ( command , orders ) } \n\t$F26217 $F34204 ( entities , command ) ; \n\t$F490665 list = new ArrayList $F3215 $F2 ; \n\tfor ( Object entity : entities ) $F96011 ( list , property , entity ) return aggregation . aggregate ( list ) ; \n\t} \n"}, {"code": "$F1 public AppEngineGetScalar < E , R > sort ( Order $F19378 ... orders ) { \n\tif $F112 ( orders ) $F9654 ( orders ) $F1357 ( this , orders ) return this ; \n\t} \n"}, {"code": "$F1 public AppEngineGetScalar < E , R > filter ( Filter $F45 ... filters ) { \n\tif $F112 ( filters ) $F9654 ( filters ) this . filters = $F998 ( Arrays , filters ) ; \n\treturn this ; \n\t} \n"}, {"code": "protected Field getField ( String name , Model $F278543 model ) throws IOException $F148589 ( model , name ) "}, {"code": "$F1 public void setProperty $F844 ( name , value ) { \n\tswitch ( name ) { \n\t\t$F21776 $F678993 ( serializeProlog , value ) ; \n\t\t$F332 $F21776 $F678993 ( serializeOperators , value ) ; \n\t\t$F332 } \n\t} \n"}, {"code": "private void _serialize ( Writer writer , Object model ) throws IOException { \n\tif $F112 ( model ) { \n\t\t$F809700 ( document , writer ) $F254 } \n\tSerializer serializer = new Serializer $F2 ; \n\tif ( serializeOperators ) { \n\t\tserializer . enableOperatorsSerialization ( ) ; \n\t\t} \n\tContent content = model instanceof Content ? ( Content ) model : new Content ( model ) ; \n\t$F128853 ( serializer , content ) serializer . setWriter ( writer ) ; \n\tif ( serializeProlog ) { \n\t\tif ( document . isXML ( ) ) $F100253 ( serializer ) else $F100253 ( serializer ) } \n\tif ( $F681055 ( document ) != null ) { \n\t\tserializer . write ( $F681055 ( document ) , $F113524 ( content ) ) ; \n\t\t} \n\t$F6369 ( serializer ) } \n"}, {"code": "public BigDecimal toBigDecimal ( int scale , Rounding roundingMode ) { \n\treturn toBigDecimal ( scale , roundingMode , getProperties ( ) . hasStripTrailingZeros ( ) ) ; \n\t} \n"}, {"code": "public BigDecimal toBigDecimal ( Integer scale , Rounding rounding , boolean stripTrailingZeros ) { \n\tout = this . in ; \n\tif $F45435 ( scale , rounding ) out = out . setScale ( scale , rounding . getBigDecimalRound ( ) ) ; \n\telse if $F54606 ( scale , rounding ) out = out . setScale ( scale ) ; \n\tif ( stripTrailingZeros ) out = out . stripTrailingZeros ( ) ; \n\treturn out ; \n\t} \n"}, {"code": "public BigDecimal remainder $F2 { \n\tBigDecimal out = toBigDecimal ( ) ; \n\tBigDecimal fraction = out . remainder ( BigDecimal . ONE ) ; \n\treturn fraction ; \n\t} \n"}, {"code": "public int remainderSize $F2 { \n\tBigDecimal fraction = remainder ( ) ; \n\t$F13374 ( tmp , fraction ) int n = tmp . indexOf ( Properties . DEFAULT_DECIMAL_SEPARATOR ) ; \n\tif $F3752 ( n ) { \n\t\treturn $F62961 ( tmp , n ) - INT00 ; \n\t\t} \n\telse $F8383 } \n"}, {"code": "public $F1372 T toObject $F7907 ( toClass ) { \n\treturn ( T ) $F69771 ( toObject , toClass ) ; \n\t} \n"}, {"code": "public $F1372 T toObject ( $F7906 ( toClass ) , Class < ? extends NumConverter > converterClass ) { \n\treturn ( T ) $F35504 ( toObject , toClass , converterClass ) ; \n\t} \n"}, {"code": "public $F1372 T toObject ( $F7906 ( toClass ) , NumConverter numConverter ) { \n\treturn ( T ) $F11465 ( toObject , toClass , numConverter ) ; \n\t} \n"}, {"code": "public boolean isEqual ( Object value ) { \n\tif $F112 ( value ) $F213 else if ( this == value ) $F232 else { \n\t\tNum tmp = null ; \n\t\tif ( value instanceof Num ) tmp = ( Num ) value ; \n\t\telse tmp = new Num ( value ) ; \n\t\tint i = tmp . toBigDecimal ( ) . compareTo ( this . toBigDecimal ( ) ) ; \n\t\tif $F2015 ( i ) $F232 else $F213 } \n\t} \n"}, {"code": "public boolean isEqual $F285837 ( value , autoscale ) { \n\tNum numA = this ; \n\tNum numB = null ; \n\tif ( value instanceof Num ) numB = ( Num ) value ; \n\telse numB = new Num ( value ) ; \n\tint minScale = numA . remainderSize ( ) ; \n\tint bScale = numB . remainderSize ( ) ; \n\t$F103331 ( bScale , minScale ) $F4282 ( isEqual , value , minScale ) } \n"}, {"code": "public boolean isEqual ( Object value , int scale , Rounding rounding ) { \n\tNum numA = this ; \n\tNum numB = null ; \n\tif ( value instanceof Num ) numB = ( Num ) value ; \n\telse numB = new Num ( value ) ; \n\tBigDecimal a = numA . toBigDecimal ( ) ; \n\tBigDecimal b = numB . toBigDecimal ( ) ; \n\tif $F268 ( rounding ) { \n\t\ta = a . setScale ( scale , rounding . getBigDecimalRound ( ) ) ; \n\t\tb = b . setScale ( scale , rounding . getBigDecimalRound ( ) ) ; \n\t\t} \n\telse { \n\t\ta = a . setScale ( scale , getProperties ( ) . getRoundingMode ( ) . getBigDecimalRound ( ) ) ; \n\t\tb = b . setScale ( scale , getProperties ( ) . getRoundingMode ( ) . getBigDecimalRound ( ) ) ; \n\t\t} \n\t$F66747 ( a , b ) } \n"}, {"code": "public Num ceil $F2 { \n\tNum ceil = new Num $F2 ; \n\tBigDecimal c = this . toBigDecimal ( ) ; \n\tceil . setValue ( c . setScale ( INT00 , BigDecimal . ROUND_CEILING ) , null , null ) ; \n\treturn ceil ; \n\t} \n"}, {"code": "public Num floor $F2 { \n\tNum floor = new Num $F2 ; \n\tBigDecimal c = this . toBigDecimal ( ) ; \n\tfloor . setValue ( c . setScale ( INT00 , BigDecimal . ROUND_FLOOR ) , null , null ) ; \n\treturn floor ; \n\t} \n"}, {"code": "private static String cleanNumber $F24307 ( value , decimalSeparator ) { \n\t$F9662 ( regex , decimalSeparator ) if $F24340 ( decimalSeparator ) $F14508 ( regex ) String strip = $F384069 ( value , regex ) ; \n\tstrip = strip . replace ( decimalSeparator + STRING00 , Properties . DEFAULT_DECIMAL_SEPARATOR + STRING00 ) ; \n\treturn strip ; \n\t} \n"}, {"code": "public Client build $F2 { \n\tvalidate ( ) ; \n\tClient client = new Client $F3192 ( database , credentials , host , scheme ) ; \n\treturn client ; \n\t} \n"}, {"code": "public static String generateJNISignature ( $F3704 ( params ) ) { \n\t$F1200 ( ret ) for ( $F10839 ( param , params ) ) $F157483 ( ret , getJavaSignature , param ) $F1226 ( ret ) } \n"}, {"code": "$F1122746 ( RequestMethod ) public $F11619 void insert ( @ RequestParam ( $F1559853 ) String username , $F928273 ( name ) , $F928273 ( surname ) , @ RequestParam ( $F1559853 ) String telephoneNumber , @ RequestParam ( $F1559853 ) String verificationText , HttpServletRequest request , HttpServletResponse response ) { \n\t$F45360 ( logger ) $F505200 ( isResponseCorrect ) String sessionId = $F49732 ( request ) . getId ( ) ; \n\ttry { \n\t\tisResponseCorrect = captchaService . validateResponseForID ( sessionId , verificationText ) ; \n\t\tif $F385413 ( isResponseCorrect ) { \n\t\t\tresponse . sendError ( $F100856 ) ; \n\t\t\t$F254 } \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F7453 ( e ) $F254 } \n\taccountService . insert ( new Account $F3192 ( username , name , surname , telephoneNumber ) ) ; \n\t} \n"}, {"code": "$F1122746 ( RequestMethod ) public $F11619 void update ( @ RequestParam ( $F1559853 ) String username , $F928273 ( name ) , $F928273 ( surname ) , $F928273 ( telephoneNumber ) ) { \n\t$F45360 ( logger ) accountService . update ( new Account $F3192 ( username , name , surname , telephoneNumber ) ) ; \n\t} \n"}, {"code": "$F1122746 ( RequestMethod ) public $F11619 void delete ( @ RequestParam ( $F1559853 ) String username , HttpServletResponse response ) { \n\t$F45360 ( logger ) ResponseAccount responseAccount = accountService . getAccountByUsername ( username ) ; \n\tif ( $F894737 ( responseAccount ) == null ) { \n\t\ttry { \n\t\t\tresponse . sendError ( INT00 , STRING00 + username ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\t$F7453 ( e ) $F254 } \n\t\t$F254 } \n\taccountService . delete ( $F894737 ( responseAccount ) ) ; \n\t} \n"}, {"code": "$F1118812 ( RequestMethod ) public $F11619 ResponseAccountList listAllPagified ( @ RequestParam ( $F1559853 ) Integer pageNum , HttpServletResponse response ) { \n\t$F45360 ( logger ) ResponseAccountList accountList = accountService . getAllAccountsPagified ( pageNum ) ; \n\treturn accountList ; \n\t} \n"}, {"code": "$F1118812 ( RequestMethod ) public $F11619 ResponseAccount findByUsername ( @ RequestParam ( $F1559853 ) String username ) { \n\t$F45360 ( logger ) ResponseAccount acconut = accountService . getAccountByUsername ( username ) ; \n\treturn acconut ; \n\t} \n"}, {"code": "$F1118812 ( RequestMethod ) public $F11619 ResponseGedikStockList listGedikStocks ( HttpServletResponse response ) { \n\t$F45360 ( logger ) ResponseGedikStockList gedikStockList = null ; \n\ttry { \n\t\tgedikStockList = gedikStockService . getAllStocks ( ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F429327 ( logger , e ) $F7453 ( e ) } \n\treturn gedikStockList ; \n\t} \n"}, {"code": "$F1118812 ( RequestMethod ) public $F11619 JsonNode listPriceByPeriod ( @ RequestParam ( $F1559853 ) String stockName , @ RequestParam ( $F1559853 ) PERIOD period ) { \n\t$F45360 ( logger ) JsonNode priceList = myNetFinansService . getPricesByPeriod ( stockName , period ) ; \n\treturn priceList ; \n\t} \n"}, {"code": "$F1 public Boolean convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\tMatcher m = null ; \n\t$F168157 ( m , YES , valueStr ) if $F154963 ( m ) $F404193 ( Boolean ) $F716456 ( Boolean ) } \n"}, {"code": "$F1 public void exportCommandLine $F968436 ( out ) { \n\tif $F560 ( isParsed ) if ( keychar != null && keychar != STRING00 ) { \n\t\t$F1218 ( out ) out . append ( keychar . charValue ( ) ) ; \n\t\t} \n\telse if $F610214 ( keyword ) $F105011 ( out , keyword ) } \n"}, {"code": "$F1 public void exportNamespace ( final String prefix , final StringBuilder out ) { \n\tif $F560 ( isParsed ) { \n\t\t$F1212 ( out , prefix ) if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\t\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) $F1218 ( out ) } \n\t} \n"}, {"code": "$F1 public void exportXml $F968436 ( out ) { \n\tif $F560 ( isParsed ) { \n\t\t$F1218 ( out ) if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\t\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) } \n\t} \n"}, {"code": "$F1 public Boolean getValue $F2 { \n\tif $F560 ( isParsed ) { \n\t\tif ( $F345952 ( getDefaultValues ) . equals ( Boolean . TRUE ) ) $F716456 ( Boolean ) $F404193 ( Boolean ) } \n\treturn $F345952 ( getDefaultValues ) ; \n\t} \n"}, {"code": "$F1 public ICmdLineArg $F34636 setDefaultValue $F62952 ( defaultValue ) throws ParseException , IOException { \n\t$F539284 ( getDefaultValues ) $F63192 ( getDefaultValues ) ( convert ( defaultValue ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public void removeColumnsAfter ( JComponent columnContent ) { \n\t$F2233 ( remove ) for ( Iterator < JComponent > $F380135 ( it , componentNodeMap ) ; \n\t$F11309 ( it ) ; \n\t) { \n\t\tJComponent $F11312 ( comp , it ) ; \n\t\t$F607265 ( curNode , componentNodeMap , comp ) if $F8962 ( comp , columnContent ) $F24354 ( remove ) else if ( remove ) { \n\t\t\t$F16605 ( it ) $F2115396 ( node , curNode ) } \n\t\t} \n\tcolumns . rebuild ( ) ; \n\t$F126270 ( columns ) } \n"}, {"code": "public static final synchronized StateManager getInstance ( Object context ) { \n\treturn $F112 ( instance ) ? ( instance = new StateService ( ContextUtils . asApplication ( context ) ) ) : instance ; \n\t} \n"}, {"code": "$F1 public void save ( Object context , Bundle bundle ) { \n\t$F1105070 fieldsToSave = FieldUtils . getAllFields ( context , Stateful . class ) ; \n\tfor ( Field field : fieldsToSave ) { \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) Serializable state = ( Serializable ) $F198 ( field , context ) ; \n\t\t\tbundle . putSerializable ( $F22743 ( field , state ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\t$F1200 ( stringBuilder ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , field ) $F1218 ( stringBuilder ) stringBuilder . append ( $F6291 ( context ) ) ; \n\t\t\t$F1218 ( stringBuilder ) Log . e ( $F40175 ( getClass ) , $F797 ( stringBuilder ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void restore ( Object context , Bundle bundle ) { \n\t$F1105070 fieldsToRestore = FieldUtils . getAllFields ( context , Stateful . class ) ; \n\tfor ( Field field : fieldsToRestore ) { \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) Serializable state = bundle . getSerializable ( $F507 ( field ) ) ; \n\t\t\t$F52836 ( field , context , state ) } \n\t\tcatch ( Exception e ) { \n\t\t\t$F1200 ( stringBuilder ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , field ) $F1218 ( stringBuilder ) stringBuilder . append ( $F6291 ( context ) ) ; \n\t\t\t$F1218 ( stringBuilder ) Log . e ( $F40175 ( getClass ) , $F797 ( stringBuilder ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static final String replaceVariables ( String text , ValueProvider ... providers ) $F12176 ( replaceVariables , text , DEFAULT_CASE_SENSITIVE , providers ) "}, {"code": "$F762 public static final String replaceVariables ( String text , boolean caseSensitive , ValueProvider ... providers ) { \n\tString replaceText = text ; \n\tif $F268 ( providers ) { \n\t\tRegex regex = new Regex ( VARIABLE_PATTERN , caseSensitive ) ; \n\t\t$F91992 variables = null ; \n\t\t$F130047 ( unboundVariables ) $F48974 ( oneVariableBound ) while ( oneVariableBound && ! ( variables = regex . getAllMatches ( replaceText ) ) . isEmpty ( ) ) { \n\t\t\toneVariableBound = false ; \n\t\t\t$F176425 ( logger , replaceText ) for ( $F92026 ( groups , variables ) ) { \n\t\t\t\t$F26395 ( variable , groups ) $F176425 ( logger , variable ) $F4728 ( value ) for ( ValueProvider provider : providers ) { \n\t\t\t\t\tvalue = provider . onVariable ( variable ) ; \n\t\t\t\t\tif $F268 ( value ) { \n\t\t\t\t\t\t$F158857 ( logger , variable , value ) replaceText = replaceText . replace ( $F4488 ( variable , value ) ) ; \n\t\t\t\t\t\t$F176425 ( logger , replaceText ) oneVariableBound = true ; \n\t\t\t\t\t\t$F332 } \n\t\t\t\t\t} \n\t\t\t\tif $F112 ( value ) $F529 ( unboundVariables , variable ) } \n\t\t\t} \n\t\t} \n\treturn replaceText ; \n\t} \n"}, {"code": "public $F3215 Matrix $F3215 runForEach ( ParametrizedFunction < MatrixElement $F26212 , R > function , Object ... args ) { \n\tMatrix $F3215 ret ; \n\ttry { \n\t\tret = new Matrix $F50 ( this . columns . size ( ) , this . columns . get ( INT00 ) . size ( ) ) ; \n\t\t} \n\tcatch ( Exception ignored ) { \n\t\tret = new Matrix $F50 $F2 ; \n\t\t} \n\tfor ( int x = INT00 ; \n\tx < this . columns . size ( ) ; \n\tx ++ ) { \n\t\t$F67642 col = this . columns . get ( x ) ; \n\t\tfor ( $F10914 ( y , col ) ) { \n\t\t\tif $F67753 ( col , y ) $F23605 R obj = function . apply ( this . getElement ( x , y ) , args ) ; \n\t\t\t$F33048 ( ret , obj , x , y ) } \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public Matrix $F26212 set ( E element , int x , int y ) { \n\tif ( this . columns . size ( ) < x ) { \n\t\tcolumns . set ( $F472734 ( x ) ) ; \n\t\t} \n\tthis . columns . get ( x ) . set ( y , element ) ; \n\treturn this ; \n\t} \n"}, {"code": "public E get $F12004 ( x , y ) { \n\tif $F100617 ( columns , x ) { \n\t\tcolumns . set ( $F472734 ( x ) ) ; \n\t\t} \n\t$F67642 $F199 ( columnList , columns , x ) ; \n\tif $F100617 ( columnList , y ) { \n\t\tcolumnList . set ( y , this . defaultElement ) ; \n\t\t} \n\t$F30910 ( columnList , y ) } \n"}, {"code": "public $F67642 toFlatArrayList $F2 { \n\t$F67642 $F54 ( ret ) ; \n\tthis . columns . forEach ( ret : : <missing ';'> addAll ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static synchronized ClassLoader getClassLoader $F2 { \n\tfinal Class $F118892 ( caller , getCallerClass ) ; \n\tfinal ClassLoadContext ctx = new ClassLoadContext ( caller ) ; \n\treturn s_strategy . getClassLoader ( ctx ) ; \n\t} \n"}, {"code": "$F10880 public void run ( $F10911 ( input ) , $F205219 output , boolean stdout ) throws InstantiationException , IllegalAccessException , ClassNotFoundException , IOException , URISyntaxException { \n\tif $F28525 ( input ) $F29219 ( fail ) List < Pair < WritableComparable , Writable > > actual = null ; \n\t$F131483 ( o , input ) if $F4380 ( o ) { \n\t\tactual = runString ( $F193602 ( input ) ) ; \n\t\t} \n\telse if ( o instanceof Record ) { \n\t\tactual = runRecord ( ( $F205219 ) input ) ; \n\t\t} \n\telse $F29219 ( fail ) if ( stdout ) { \n\t\tfor ( Pair < WritableComparable , Writable > pair : actual ) $F1300 ( System , pair ) } \n\tassertEquals ( $F96178 ( output , actual ) ) ; \n\tif $F268 ( output ) { \n\t\tfor ( $F10914 ( i , output ) ) { \n\t\t\tPair < WritableComparable , Writable > $F199 ( pair , actual , i ) ; \n\t\t\tRecord $F199 ( r , output , i ) ; \n\t\t\tString s = String . format ( OUTPUT , $F224289 ( r ) , $F111810 ( r ) ) ; \n\t\t\t$F169317 ( assertEquals , s , pair ) } \n\t\t} \n\t} \n"}, {"code": "protected void setBigJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterSeparator , $F14584 ( masterData ) ) { \n\tthis . conf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SINGLE_COLUMN_JOIN_READER ) ; \n\tthis . conf . setStrings ( SimpleJob . MASTER_LABELS , masterLabels ) ; \n\tthis . conf . set ( SimpleJob . JOIN_MASTER_COLUMN , masterColumn ) ; \n\tthis . conf . set ( SimpleJob . JOIN_DATA_COLUMN , dataColumn ) ; \n\t$F1357 ( this , masterSeparator ) $F1357 ( this , masterData ) this . bigJoin = true ; \n\t} \n"}, {"code": "public void setAttr ( String attr ) { \n\t$F30789 ( list , attr ) for ( $F61008 ( i , list ) ) { \n\t\t$F21 $F111630 ( val , list , i ) ; \n\t\tif $F15480 ( val ) $F254 $F1967498 ( getElement ) ( $F30707 ( val ) , $F30707 ( val ) ) ; \n\t\t} \n\t} \n"}, {"code": "public < E extends T > $F26217 leastOf ( $F59768 elements , int k ) { \n\tcheckNotNull ( elements ) ; \n\t$F2755 ( checkNonnegative , k ) if ( k == INT00 || $F58858 ( elements ) ) $F66426 ( ImmutableList ) else if ( k >= Integer . MAX_VALUE / INT00 ) { \n\t\t$F67642 $F58885 ( list , Lists , elements ) ; \n\t\t$F64814 ( Collections , list , this ) if $F100141 ( list , k ) { \n\t\t\t$F75634 ( list , k ) . clear ( ) ; \n\t\t\t} \n\t\t$F110308 ( list ) $F10686 ( Collections , list ) } \n\t$F79894 ( bufferCap , k ) $F762 $F64808 buffer = ( $F64808 ) $F58994 ( bufferCap ) ; \n\tE $F11312 ( threshold , elements ) ; \n\t$F60852 ( buffer , threshold ) $F1987 ( bufferSize ) while ( $F58998 ( bufferSize , k , elements ) ) { \n\t\tE $F11312 ( e , elements ) ; \n\t\t$F58393 ( buffer , bufferSize , e ) $F9391 ( threshold , max , e ) } \n\twhile $F11310 ( elements ) { \n\t\tE $F11312 ( e , elements ) ; \n\t\tif ( compare ( e , threshold ) >= INT00 ) $F42718 $F58393 ( buffer , bufferSize , e ) if ( bufferSize == bufferCap ) { \n\t\t\t$F1987 ( left ) $F74108 ( right , bufferCap ) $F1987 ( minThresholdPosition ) while ( left < right ) { \n\t\t\t\tint pivotIndex = $F68114 ( left , right ) > > > INT00 ; \n\t\t\t\t$F43795 ( pivotNewIndex , partition , buffer , left , right , pivotIndex ) if ( pivotNewIndex > k ) $F68120 ( right , pivotNewIndex ) else if ( pivotNewIndex < k ) { \n\t\t\t\t\tleft = Math . max ( pivotNewIndex , left + INT00 ) ; \n\t\t\t\t\tminThresholdPosition = pivotNewIndex ; \n\t\t\t\t\t} \n\t\t\t\telse $F333 } \n\t\t\tbufferSize = k ; \n\t\t\t$F68133 ( threshold , buffer , minThresholdPosition ) for ( $F68135 ( i , minThresholdPosition , bufferSize ) ) { \n\t\t\t\tthreshold = $F62643 ( max , threshold , buffer , i ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tArrays . sort ( $F40542 ( buffer , bufferSize , this ) ) ; \n\t$F113437 ( bufferSize , Math , k ) return Collections . unmodifiableList ( Arrays . asList ( ObjectArrays . arraysCopyOf ( buffer , bufferSize ) ) ) ; \n\t} \n"}, {"code": "public < E extends T > ImmutableList $F26212 immutableSortedCopy ( $F58525 ( elements ) ) { \n\t$F762 $F64808 array = ( $F64808 ) $F58519 ( Iterables , elements ) ; \n\tfor ( E e : array ) $F890 ( checkNotNull , e ) $F64814 ( Arrays , array , this ) return ImmutableList . asImmutableList ( array ) ; \n\t} \n"}, {"code": "public int binarySearch ( $F58690 sortedList , $F623 T key ) { \n\treturn Collections . binarySearch ( sortedList , key , this ) ; \n\t} \n"}, {"code": "public static Object keyValue ( Object entity ) { \n\t$F43477 ( clazz , entity ) $F948902 ( key , fields , clazz ) try { \n\t\tif $F112 ( key ) { \n\t\t\treturn $F202750 ( keyField , clazz , entity ) ; \n\t\t\t} \n\t\telse $F30911 ( key , entity ) } \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new UncheckedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static Field keyField $F2614 ( clazz ) { \n\tfor ( $F243264 ( field , clazz ) ) { \n\t\tif ( field . getAnnotation ( Key . class ) != null ) { \n\t\t\t$F10869 ( field ) $F2725 ( fields , clazz , field ) return field ; \n\t\t\t} \n\t\t} \n\t$F9653 ( clazz ) } \n"}, {"code": "public void getRDSOperationComplete ( ProviderContext ctx , String operation ) throws $F22199250 { \n\tSQLAdmin sqlAdmin = provider . getGoogleSQLAdmin ( ) ; \n\tlong timeout = $F13205 ( System ) + ( CalendarWrapper . MINUTE * NUM00 ) ; \n\twhile ( timeout > $F13205 ( System ) ) { \n\t\tcom . google . api . services . sqladmin . model . Operation instanceOperation = null ; \n\t\ttry { \n\t\t\tinstanceOperation = sqlAdmin . operations ( ) . get ( $F1726155 ( ctx ) , operation ) . execute ( ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F292973 ( logger , e ) if ( $F501835 ( instanceOperation ) ) { \n\t\t\tfor ( OperationError error : $F30033 ( instanceOperation ) . getErrors ( ) ) { \n\t\t\t\tthrow new CloudException ( STRING00 + $F17744 ( error ) + STRING00 + $F13148 ( error ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( $F44873 ( instanceOperation ) ( STRING00 ) ) $F255 try $F8848 ( Thread ) $F147063 } \n\tthrow new CloudException ( CloudErrorType . COMMUNICATION , INT00 , STRING00 , STRING00 ) ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws IOException , TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tElement $F1746875 ( keyTemplate , element ) ; \n\tif $F112 ( keyTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\tElement $F1984392 ( valueTemplate , keyTemplate ) ; \n\tif $F112 ( valueTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\t$F19379 map = content . getMap ( scope , propertyPath ) ; \n\tfor ( $F75783 ( key , map ) ) { \n\t\tserializer . writeItem ( keyTemplate , key ) ; \n\t\tserializer . writeItem ( $F33691 ( valueTemplate , map , key ) ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public void skipRawBytes $F63043 ( size ) throws IOException { \n\tif $F2523 ( size ) { \n\t\tthrow ProtobufException . negativeSize ( ) ; \n\t\t} \n\tif ( totalBytesRetired + bufferPos + size > currentLimit ) { \n\t\tskipRawBytes ( currentLimit - totalBytesRetired - bufferPos ) ; \n\t\tthrow ProtobufException . truncatedMessage ( ) ; \n\t\t} \n\tif ( size <= bufferSize - bufferPos ) $F57826 ( bufferPos , size ) else { \n\t\t$F62358 ( pos , bufferSize , bufferPos ) bufferPos = bufferSize ; \n\t\t$F31376 ( refillBuffer ) while $F143137 ( size , pos , bufferSize ) { \n\t\t\tpos += bufferSize ; \n\t\t\tbufferPos = bufferSize ; \n\t\t\t$F31376 ( refillBuffer ) } \n\t\tbufferPos = size - pos ; \n\t\t} \n\t} \n"}, {"code": "public static synchronized void setLocale ( String newLocale ) throws UnsupportedLocaleException { \n\tPreconditions . checkArgument ( $F192245 ( newLocale ) ) ; \n\tif $F42058 ( newLocale , CURRENT_LOCALE ) { \n\t\t$F1355814 ( LogCentral , newLocale ) CURRENT_LOCALE = newLocale ; \n\t\t} \n\t} \n"}, {"code": "public static synchronized void setLogFilter ( LogFilter logFilter ) { \n\tPreconditions . checkArgument ( $F192245 ( logFilter ) ) ; \n\tLimb . log ( LogLevel . DEBUG , $F27281 ( logFilter ) ) ; \n\tLOG_FILTER = logFilter ; \n\t} \n"}, {"code": "public static void setLogFilterByClassName ( String className ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { \n\tPreconditions . checkArgument ( $F192245 ( className ) ) ; \n\tLogFilter logFilter = createLogFilterByClassName ( className ) ; \n\tsetLogFilter ( logFilter ) ; \n\t} \n"}, {"code": "static URL getMetaResource ( String path ) throws NoSuchResourceException { \n\tPreconditions . checkArgument ( $F192245 ( path ) ) ; \n\t$F6158 ( absPath , path ) URL url = Library . class . getResource ( absPath ) ; \n\tif $F112 ( url ) { \n\t\tLimb . log ( LogLevel . ERROR , $F320 ( absPath ) ) ; \n\t\tthrow new NoSuchResourceException $F500 ( absPath ) ; \n\t\t} \n\telse { \n\t\tLimb . log ( LogLevel . DEBUG , $F320 ( absPath ) ) ; \n\t\treturn url ; \n\t\t} \n\t} \n"}, {"code": "private static String convertToHex $F2665 ( data ) { \n\t$F391313 ( buffer ) for ( $F2674 ( i , data ) ) { \n\t\tint halfByte = ( data [ i ] > > > INT00 ) & INT00 ; \n\t\t$F1987 ( twoHalves ) do { \n\t\t\tif ( $F121667 ( halfByte ) && $F9104 ( halfByte ) ) { \n\t\t\t\tbuffer . append ( ( char ) $F2821 ( halfByte ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tbuffer . append ( ( char ) ( $F96105 ( halfByte ) ) ) ; \n\t\t\t\t} \n\t\t\t$F2676 ( halfByte , data , i ) ; \n\t\t\t} \n\t\twhile ( twoHalves ++ < INT00 ) ; \n\t\t} \n\t$F1226 ( buffer ) } \n"}, {"code": "public static String getSHA1Hash $F62952 ( input ) throws HibiscusException { \n\t$F4728 ( hashValue ) try { \n\t\t$F1706800 ( messageDigest , MessageDigest , MESSAGE_DIGEST_ALGORITHM_SHA1 ) $F9435 ( sha1Hash , BYTE_LENGTH_SHA1 ) messageDigest . update ( $F99115 ( input , ENCODING_CHARSET_NAME ) , MESSAGE_DIGEST_UPDATE_OFFSET , $F1203 ( input ) ) ; \n\t\t$F429252 ( sha1Hash , messageDigest ) ; \n\t\t$F10937 ( hashValue , convertToHex , sha1Hash ) } \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tthrow new HibiscusException $F5148 ( MESSAGE_DIGEST_ALGORITHM_SHA1 , e ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\tthrow new HibiscusException $F5148 ( ENCODING_CHARSET_NAME , e ) ; \n\t\t} \n\treturn hashValue ; \n\t} \n"}, {"code": "public static String getMD5Hash $F62952 ( input ) throws HibiscusException { \n\t$F4728 ( hashValue ) try { \n\t\t$F1706800 ( messageDigest , MessageDigest , MESSAGE_DIGEST_ALGORITHM_MD5 ) $F9435 ( md5Hash , BYTE_LENGTH_MD5 ) messageDigest . update ( $F99115 ( input , ENCODING_CHARSET_NAME ) , MESSAGE_DIGEST_UPDATE_OFFSET , $F1203 ( input ) ) ; \n\t\t$F429252 ( md5Hash , messageDigest ) ; \n\t\t$F10937 ( hashValue , convertToHex , md5Hash ) } \n\tcatch ( NoSuchAlgorithmException e ) { \n\t\tthrow new HibiscusException $F5148 ( MESSAGE_DIGEST_ALGORITHM_MD5 , e ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\tthrow new HibiscusException $F5148 ( ENCODING_CHARSET_NAME , e ) ; \n\t\t} \n\treturn hashValue ; \n\t} \n"}, {"code": "public $F5033 createCommandList $F386549 ( filterOptions ) { \n\t$F95965 ( list ) $F1433 ( list , getExecutable ) for ( String opt : filterOptions ) { \n\t\tif $F540 ( isOptionSet , opt ) { \n\t\t\t$F528 ( list , opt ) $F138322 ( value , getOption , opt ) if ( value != NO_OPTION_VALUE ) $F529 ( list , value ) } \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public Process execute $F2 throws IOException { \n\t$F12514 ( list , createCommandList ) $F194609 ( _LOG_ , list ) Process proc = $F314883 ( Runtime ) ( $F28561 ( list ) ) ; \n\treturn proc ; \n\t} \n"}, {"code": "public boolean addFlowElement ( MapElement fe ) { \n\tif ( fe instanceof ExceptionHandler ) { \n\t\texceptionHandler = ( ExceptionHandler ) fe ; \n\t\t$F232 } \n\telse if ( fe instanceof InvocationResultExpression ) { \n\t\tif $F112 ( results ) { \n\t\t\t$F1955127 ( results ) } \n\t\t$F528 ( results , fe ) $F232 } \n\t$F213 } \n"}, {"code": "public static Payload createPayload ( TestRun testRun ) { \n\t$F24434 ( testRun ) Payload payload = new Payload $F2 ; \n\tpayload . setTestRun ( testRun ) ; \n\treturn payload ; \n\t} \n"}, {"code": "$F1 protected ClassLoader getClassLoader $F2 throws $F18250 { \n\ttry { \n\t\t$F762 $F5033 classpathElements = getProject ( ) . getCompileClasspathElements ( ) ; \n\t\tif $F18411 ( getLog ) { \n\t\t\t$F3322151 ( getLog , classpathElements ) } \n\t\tclasspathElements . add ( getProject ( ) . getBuild ( ) . getOutputDirectory ( ) ) ; \n\t\t$F5709 urls = new $F205394 $F4371 ( classpathElements ) ; \n\t\tfor ( String classpathElement : classpathElements ) { \n\t\t\turls . add ( $F2592 ( classpathElement ) . toURL ( ) ) ; \n\t\t\t} \n\t\tif $F18411 ( getLog ) { \n\t\t\t$F3322151 ( getLog , urls ) } \n\t\treturn new URLClassLoader ( $F1575282 ( urls ) , $F14 ( getClass ) ) ; \n\t\t} \n\tcatch ( Exception e ) $F9642 ( e ) } \n"}, {"code": "$F1 public void executeTemplate ( String templateName , $F2731 ( properties ) , String workDir ) { \n\tTemplate $F45 template = templateProvider . get ( $F657704 ( templateName ) ) ; \n\t$F223769 ( template , templateName ) if ( $F1414775 ( template ) ) { \n\t\tthrow new AbstractTemplateException ( templateName ) ; \n\t\t} \n\ttemplateVerifier . verifyTemplate ( template , templateProvider ) ; \n\tMapStack $F95 propertiesStack = new SimpleMapStack $F95 $F2 ; \n\tpropertiesStack . push ( new $F110277 ( properties ) ) ; \n\t$F5605 ( doExecuteTemplate , template , propertiesStack , workDir ) $F92524 ( propertiesStack ) } \n"}, {"code": "private Object processParam ( TemplateParam $F62270 param , $F2731 ( params ) , Template $F45 template ) { \n\tObject value = fetchParamValue ( param , params , param . getFetcher ( ) ) ; \n\tvalue = convertParamValue ( value , $F511 ( param ) , $F14038 ( param ) ) ; \n\tvalidateParamValue ( value , $F369178 ( param ) ) ; \n\treturn value ; \n\t} \n"}, {"code": "public void registerAddOn ( AddOnModel addOn ) { \n\tPluginDescriptor descriptor = $F588354 ( addOn ) . getDescriptor ( ) ; \n\t$F1729262 ( name , descriptor ) String version = $F8088 ( descriptor ) . toString ( ) ; \n\tString provider = $F33606 ( descriptor ) ; \n\tString id = $F1312762 ( descriptor ) ; \n\tString sdkVersion = descriptor . getSdkVersion ( ) . toString ( ) ; \n\tString artifactID = descriptor . getArtifactID ( ) ; \n\t$F204867 serverID = descriptor . getServerID ( ) ; \n\ttry { \n\t\tAddOnInformation addOnInformation = new AddOnInformationImpl $F84064 ( name , provider , version , id , sdkVersion , serverID , artifactID ) ; \n\t\t$F528 ( addOnInformations , addOnInformation ) $F528 ( addOns , addOn ) } \n\tcatch ( MissingArgumentException e ) { \n\t\terror ( $F213889 ( addOn ) + STRING00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean unregisterHelper ( Supplier < Optional < AddOnModel > > suppAdd , Supplier < Optional < AddOnInformation > > suppAddInf ) { \n\t$F2233 ( success1 ) Optional < AddOnModel > $F145 ( addOnModel , suppAdd ) ; \n\tif $F30198 ( addOnModel ) { \n\t\tsuccess1 = addOns . remove ( $F144 ( addOnModel ) ) ; \n\t\t} \n\t$F2233 ( success2 ) Optional < AddOnInformation > $F145 ( addOnInformation , suppAddInf ) ; \n\tif $F30198 ( addOnInformation ) { \n\t\tsuccess2 = addOnInformations . remove ( $F144 ( addOnInformation ) ) ; \n\t\t} \n\treturn success1 && success2 ; \n\t} \n"}, {"code": "public Optional < AddOnModel > getAddOn $F62952 ( id ) { \n\treturn $F6151 ( addOns ) ( addOn - > addOn . getID ( ) . equals ( id ) || $F588354 ( addOn ) . getDescriptor ( ) . getArtifactID ( ) . equals ( id ) ) . findFirst ( ) ; \n\t} \n"}, {"code": "public Optional < AddOnModel > getAddOn $F63043 ( serverID ) { \n\treturn $F6151 ( addOns ) ( addOn - > <missing ';'> { \n\t\t$F204867 serverIDOpt = $F588354 ( addOn ) . getDescriptor ( ) . getServerID ( ) ; \n\t\treturn $F30197 ( serverIDOpt ) && $F52353 ( serverIDOpt , serverID ) ; \n\t\t} \n\t) . findFirst ( ) ; \n\t} \n"}, {"code": "public AddOnModel getAddonModel ( Identification identification ) { \n\tIdentificationImpl impl = ( IdentificationImpl ) identification ; \n\treturn getAddonModel ( impl . getIdentifiable ( ) ) ; \n\t} \n"}, {"code": "public AddOnModel getAddonModel ( Identifiable identifiable ) { \n\tif ( $F37387 ( identifiable ) instanceof IzouPluginClassLoader && ! $F6291 ( identifiable ) . toLowerCase ( ) . contains ( IzouPluginClassLoader . PLUGIN_PACKAGE_PREFIX_IZOU_SDK ) ) { \n\t\treturn getMain ( ) . getAddOnInformationManager ( ) . getAddOnForClassLoader ( $F37387 ( identifiable ) ) . orElse ( null ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public Optional < AddOnInformation > getAddOnInformation $F62952 ( id ) { \n\treturn $F6151 ( addOnInformations ) ( addOn - > addOn . getID ( ) . equals ( id ) || addOn . getArtifactID ( ) . equals ( id ) ) . findFirst ( ) ; \n\t} \n"}, {"code": "public Optional < AddOnInformation > getAddOnInformation $F63043 ( serverID ) { \n\tif $F9467 ( serverID ) $F22427 ( Optional ) return $F6151 ( addOnInformations ) ( addOn - > addOn . getServerID ( ) . orElse ( $F3745 ) == serverID ) . findFirst ( ) ; \n\t} \n"}, {"code": "public Optional < AddOnModel > getAddOnForClassLoader ( ClassLoader classLoader ) { \n\treturn $F6151 ( addOns ) ( addOnModel - > addOnModel . getClass ( ) . getClassLoader ( ) . equals ( classLoader ) ) . findFirst ( ) ; \n\t} \n"}, {"code": "public static < L extends Annotation > Event $F71542 of ( Class $F71542 lifecycle ) { \n\treturn new Event $F71542 ( lifecycle ) ; \n\t} \n"}, {"code": "public final void fire $F2 { \n\tDescriptor $F45 descriptor = container . instances ( ) . get ( component ) ; \n\t$F529685 methods = descriptor . lifecycles ( ) . get ( lifecycle ) ; \n\tlogger . debug ( $F19103 ( lifecycle ) + descriptor + STRING00 ) ; \n\tif ( $F384 ( methods ) && lifecycle . equals ( Failed . class ) ) { \n\t\tthrow ( ( LifecycleException ) args [ INT00 ] ) ; \n\t\t} \n\tfor ( Method method : methods ) { \n\t\t$F498139 ( method ) try { \n\t\t\tif $F509947 ( method ) $F124784 ( method , component ) else $F128916 ( method , component , args ) $F23605 } \n\t\tcatch ( InvocationTargetException e ) { \n\t\t\tlogger . warn ( $F19103 ( lifecycle ) + method + STRING00 + descriptor + STRING00 , $F250217 ( e ) ) ; \n\t\t\tif ( lifecycle . equals ( Failed . class ) ) { \n\t\t\t\tthrow new LifecycleException ( $F250217 ( e ) , lifecycle , component ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tEvent . of ( Failed . class ) . with ( new LifecycleException ( $F250217 ( e ) , lifecycle , component ) ) . on ( component ) . fire ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tlogger . warn ( $F19103 ( lifecycle ) + method + STRING00 + descriptor + STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String processCommandLine ( String commandLine ) { \n\t$F34957 ( response ) try { \n\t\tresponse . append ( super . processCommandLine ( commandLine ) ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\tresponse . append ( StringSupport . getStackTrace ( t , INT00 ) + STRING00 ) ; \n\t\t} \n\t$F1226 ( response ) } \n"}, {"code": "$F5446012 public static BigInteger divide ( BigInteger p , BigInteger q , RoundingMode mode ) { \n\t$F1075172 ( pDec , p ) $F1075172 ( qDec , q ) return pDec . divide ( qDec , INT00 , mode ) . toBigIntegerExact ( ) ; \n\t} \n"}, {"code": "$F762 public static $F61574 Map < String , X > toMap ( String json , $F61576 ( valClass ) ) { \n\tMap < String , X > map = new HashMap < String , X > $F2 ; \n\ttry { \n\t\tJsonFactory f = $F235822 ; \n\t\tJsonParser jp = f . createJsonParser ( json ) ; \n\t\t$F521118 ( jp ) while ( $F29197 ( jp ) != JsonToken . END_OBJECT ) { \n\t\t\t$F1291505 ( token , jp ) if ( token . equals ( JsonToken . FIELD_NAME ) ) { \n\t\t\t\t$F521118 ( jp ) if ( $F214176 ( valClass ) || $F201942 ( valClass ) ) { \n\t\t\t\t\tmap . put ( $F654504 ( jp ) , ( X ) Integer . valueOf ( $F825916 ( jp ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F198841 ( valClass ) { \n\t\t\t\t\tmap . put ( $F654504 ( jp ) , ( X ) $F48418 ( jp ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( $F214158 ( valClass ) || valClass . equals ( $F48913 ) ) { \n\t\t\t\t\tmap . put ( $F654504 ( jp ) , ( X ) Boolean . valueOf ( jp . getBooleanValue ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F1109 ( jp ) } \n\t$F11569 ( e ) return map ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal Double length = values . popDouble ( ) ; \n\t\tfinal Double offset = values . popDouble ( ) ; \n\t\tfinal Object target = values . popStringOrByteArray ( ) ; \n\t\tif $F4380 ( target ) values . push ( $F57885 ( target ) . substring ( $F4896 ( offset ) , $F4896 ( offset ) + $F4896 ( length ) ) ) ; \n\t\telse values . push ( Arrays . copyOfRange ( $F162293 ( target ) , $F4896 ( offset ) , $F4896 ( offset ) + $F4896 ( length ) ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "@ MapMethod public int length ( Object o ) { \n\tif $F44389 ( o ) { \n\t\treturn $F430703 ( o ) . size ( ) ; \n\t\t} \n\telse if $F5619 ( o ) { \n\t\treturn $F386356 ( o ) . size ( ) ; \n\t\t} \n\telse if $F4380 ( o ) { \n\t\treturn $F2100606 ( o ) ; \n\t\t} \n\t$F8383 } \n"}, {"code": "@ MapMethod public $F96 merge ( $F288130 ( args ) ) { \n\treturn $F291710 ( Objects , args ) ; \n\t} \n"}, {"code": "@ MapMethod public $F19788 diff ( $F2731 ( old ) , $F2731 ( nw ) ) { \n\tList < ObjectDiff . DiffBean > l = Objects . diff ( old , nw ) ; \n\t$F19788 $F57859 ( list , Objects ) ; \n\tfor ( ObjectDiff . DiffBean b : l ) { \n\t\tlist . add ( Objects . newHashMap ( $F4868 , $F23415 , STRING00 , $F2515 ( b ) , STRING00 , $F893246 ( b ) , STRING00 , $F893262 ( b ) ) ) ; \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "@ MapMethod public $F96 iterate ( $F2731 ( o ) , final ScriptFunction f ) { \n\treturn Objects . iterate ( o , new Closure < ObjectIterator . IterateBean , Object > $F2 { \n\t\t$F1 public Object call ( ObjectIterator . IterateBean input ) { \n\t\t\treturn f . call ( Objects . newHashMap ( $F4868 , $F23415 , STRING00 , $F2515 ( input ) , STRING00 , $F269 ( input ) , STRING00 , $F507 ( input ) ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "@ MapMethod public Date parseDate $F1195 ( d , format ) { \n\treturn Objects . parseDate ( d , format ) ; \n\t} \n"}, {"code": "@ MapMethod public String formatDate ( Date d , String format ) { \n\treturn Objects . formatDate ( d , format ) ; \n\t} \n"}, {"code": "@ MapMethod public void putAll ( $F2731 ( m ) , $F2731 ( m2 ) ) { \n\t$F7171 ( m , m2 ) getContext ( ) . getMemoryHeap ( ) . take ( m2 ) ; \n\t} \n"}, {"code": "@ MapMethod public $F5033 keys $F2763 ( m ) { \n\t$F57861 ( l , Objects ) for ( $F88222 ( k , m ) ) $F529 ( l , k ) return l ; \n\t} \n"}, {"code": "@ MapMethod public $F619 values $F2763 ( m ) { \n\t$F619 $F57859 ( l , Objects ) ; \n\tfor ( $F5590 ( k , m ) ) $F529 ( l , k ) return l ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) throws Exception { \n\tif $F4389 ( args ) $F4537 ( printUsage ) else { \n\t\t$F1292 ( System ) ( $F111776 ( args ) ) ; \n\t\tserver = new ServerEnvironment ( args ) ; \n\t\t$F1294 ( System ) $F4599 ( server ) $F1294 ( System ) } \n\t} \n"}, {"code": "public static EmailMessage addToRecipientToEmailMessage ( final String recipientEmail , final String recipientPersonal , final String recipientCharset , final EmailMessage emailMessage ) throws UnsupportedEncodingException , MessagingException { \n\tAddress recipientAddress = EmailExtensions . newAddress ( recipientEmail , recipientPersonal , recipientCharset ) ; \n\tif $F206761 ( recipientAddress ) { \n\t\temailMessage . addTo ( recipientAddress ) ; \n\t\t} \n\telse { \n\t\temailMessage . setRecipients ( Message . RecipientType . TO , recipientEmail ) ; \n\t\t} \n\treturn emailMessage ; \n\t} \n"}, {"code": "public static String getCharsetFromContentType $F62952 ( type ) throws MessagingException { \n\tif ( ! type . isNullOrEmpty ( ) ) { \n\t\tint start = type . indexOf ( EmailConstants . CHARSET_PREFIX ) ; \n\t\tif $F3730 ( start ) { \n\t\t\tstart += EmailConstants . CHARSET_PREFIX . length ( ) ; \n\t\t\tfinal int $F84335 ( offset , type , start ) ; \n\t\t\tif $F3730 ( offset ) { \n\t\t\t\t$F141940 ( type , start , offset ) } \n\t\t\telse { \n\t\t\t\t$F405046 ( type , start ) } \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static String getString ( final DataHandler dataHandler ) throws IOException { \n\tif $F268 ( dataHandler ) { \n\t\tfinal InputStream input = $F7950 ( dataHandler ) . getInputStream ( ) ; \n\t\tfinal $F1975 $F588863 ( data , ReadFileExtensions , input ) ; \n\t\treturn $F462733 ( Base64 ) ( data ) ; \n\t\t} \n\t$F3956 } \n"}, {"code": "public static Address newAddress $F62952 ( address ) throws AddressException , UnsupportedEncodingException $F69773 ( newAddress , address ) "}, {"code": "public static Address newAddress $F96892 ( emailAddress , personal ) throws AddressException , UnsupportedEncodingException $F22720 ( newAddress , emailAddress , personal ) "}, {"code": "public static Address newAddress ( final String address , String personal , final String charset ) throws AddressException , UnsupportedEncodingException { \n\tif ( personal . isNullOrEmpty ( ) ) $F1619 ( personal , address ) final InternetAddress internetAdress = new InternetAddress ( address ) ; \n\tif ( charset . isNullOrEmpty ( ) ) { \n\t\tinternetAdress . setPersonal ( personal ) ; \n\t\t} \n\telse { \n\t\tinternetAdress . setPersonal ( personal , charset ) ; \n\t\t} \n\treturn internetAdress ; \n\t} \n"}, {"code": "public static EmailMessage setFromToEmailMessage ( final String senderEmail , final String senderPersonal , final String senderCharset , final EmailMessage emailMessage ) throws UnsupportedEncodingException , MessagingException { \n\tAddress senderAddress = null ; \n\tsenderAddress = EmailExtensions . newAddress ( senderEmail , senderPersonal , senderCharset ) ; \n\tif $F206761 ( senderAddress ) { \n\t\t$F361831 ( emailMessage , senderAddress ) } \n\telse { \n\t\t$F361831 ( emailMessage , senderEmail ) } \n\treturn emailMessage ; \n\t} \n"}, {"code": "public static boolean validateEmailAdress $F62952 ( emailAddress ) { \n\t$F48974 ( isValid ) try { \n\t\tfinal InternetAddress internetAddress = new InternetAddress ( emailAddress ) ; \n\t\t$F126270 ( internetAddress ) } \n\tcatch ( final AddressException e ) $F57412 ( isValid ) return isValid ; \n\t} \n"}, {"code": "public void close $F2 { \n\tif $F268 ( transactionalBranch ) { \n\t\tXATransactionalBranch $F404 branch = this . transactionalBranch ; \n\t\t$F118194 ( this ) branch . getManagedConnection ( ) . close ( ) ; \n\t\t} \n\t} \n"}, {"code": "static SecureAccess createSecureAccess ( Main main , SystemMail systemMail ) throws IllegalAccessException { \n\tif ( ! exists ) { \n\t\tSecureAccess secureAccess = new SecureAccess ( main , systemMail ) ; \n\t\texists = true ; \n\t\treturn secureAccess ; \n\t\t} \n\tthrow new IllegalAccessException $F6 ; \n\t} \n"}, {"code": "public static $F1372 T readLines ( URL url , Charset charset , LineProcessor $F1372 callback ) throws IOException { \n\treturn asCharSource ( url , charset ) . readLines ( callback ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > stream ( Order order , IntTuple min , IntTuple max ) { \n\t$F2201 ( order ) Utils . checkForEqualSize ( min , max ) ; \n\tMutableIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tMutableIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\tIntTupleRangeSpliterator spliterator = new IntTupleRangeSpliterator $F2144 ( order , localMin , localMax ) ; \n\treturn StreamSupport . stream ( spliterator , false ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > lexicographicalStream ( IntTuple min , IntTuple max ) { \n\treturn stream ( Order . LEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > lexicographicalStream ( IntTuple max ) { \n\treturn stream ( Order . LEXICOGRAPHICAL , IntTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > colexicographicalStream ( IntTuple min , IntTuple max ) { \n\treturn stream ( Order . COLEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > colexicographicalStream ( IntTuple max ) { \n\treturn stream ( Order . COLEXICOGRAPHICAL , IntTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > wrappingStream ( IntTuple bounds , Stream < ? extends MutableIntTuple > delegate ) { \n\tIntTuple $F233081 ( localBounds , IntTuples , bounds ) ; \n\treturn delegate . map ( t - > IntTupleUtils . wrap ( t , localBounds ) ) ; \n\t} \n"}, {"code": "public static < T extends MutableIntTuple > $F40742 clampingStream ( IntTuple min , IntTuple max , $F40743 ( delegate ) ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\tIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\treturn delegate . filter ( t - > IntTuples . areElementsGreaterThanOrEqual ( t , localMin ) && IntTuples . areElementsLessThan ( t , localMax ) ) ; \n\t} \n"}, {"code": "$F1 public String normalize ( String jsonResponse ) throws Exception { \n\t$F666885 ( body , jsonResponse ) Map < String , JSONObject > layout = new HashMap < String , JSONObject > $F2 ; \n\t$F6257 ( layout , body ) $F666885 ( version , layout ) $F1226 ( version ) } \n"}, {"code": "private boolean _create ( String path , $F1975 data , CreateMode createMode ) throws ZooKeeperException { \n\tif $F112 ( data ) { \n\t\tdata = ArrayUtils . EMPTY_BYTE_ARRAY ; \n\t\t} \n\ttry { \n\t\t$F4008 ( curatorFramework ) . creatingParentsIfNeeded ( ) . withMode ( createMode ) . forPath ( path , data ) ; \n\t\t_invalidateCache ( path ) ; \n\t\t$F232 } \n\tcatch ( InterruptedException e ) $F1668 catch ( KeeperException . NodeExistsException e ) $F1668 catch ( KeeperException . ConnectionLossException e ) { \n\t\tthrow new ZooKeeperException . ClientDisconnectedException $F2 ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void _watchNode ( String path ) throws ZooKeeperException { \n\ttry { \n\t\t$F118747 ( cacheNodeWatcher , path ) } \n\tcatch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private $F1975 _readRaw ( String path ) throws ZooKeeperException { \n\ttry { \n\t\t$F1975 data = $F200493 ( curatorFramework ) . forPath ( path ) ; \n\t\t_watchNode ( path ) ; \n\t\treturn data ; \n\t\t} \n\tcatch ( $F283200 e ) $F2200 catch ( KeeperException . ConnectionLossException e ) { \n\t\tthrow new ZooKeeperException . ClientDisconnectedException $F2 ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private Object _readJson ( String path ) throws ZooKeeperException { \n\t$F8494 ( jsonString , getData , path ) try { \n\t\treturn jsonString != null ? SerializationUtils . fromJsonString ( jsonString ) : null ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public boolean createEphemeralNode $F234476 ( path , value ) throws ZooKeeperException { \n\treturn _create ( path , value , CreateMode . EPHEMERAL ) ; \n\t} \n"}, {"code": "public boolean createEphemeralNode $F1195 ( path , value ) throws ZooKeeperException { \n\treturn _create ( path , value != null ? $F99115 ( value , UTF8 ) : null , CreateMode . EPHEMERAL ) ; \n\t} \n"}, {"code": "public boolean createNode $F234476 ( path , value ) throws ZooKeeperException { \n\treturn _create ( path , value , CreateMode . PERSISTENT ) ; \n\t} \n"}, {"code": "public boolean createNode $F1195 ( path , value ) throws ZooKeeperException { \n\treturn _create ( path , value != null ? $F99115 ( value , UTF8 ) : null , CreateMode . PERSISTENT ) ; \n\t} \n"}, {"code": "public boolean nodeExists ( String path ) throws ZooKeeperException { \n\ttry { \n\t\tStat stat = curatorFramework . checkExists ( ) . forPath ( path ) ; \n\t\t$F44202 ( stat ) } \n\tcatch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F21 getChildren ( String path ) throws ZooKeeperException { \n\ttry { \n\t\t$F5033 result = $F210462 ( curatorFramework ) . forPath ( path ) ; \n\t\treturn result != null ? result . toArray ( ArrayUtils . EMPTY_STRING_ARRAY ) : null ; \n\t\t} \n\tcatch ( $F283200 e ) $F2200 catch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F1975 getDataRaw ( String path ) throws ZooKeeperException { \n\ttry { \n\t\t$F1975 data = getFromCache ( cacheNameRaw , path , $F133937 ) ; \n\t\tif $F112 ( data ) { \n\t\t\t$F10937 ( data , _readRaw , path ) $F5605 ( putToCache , cacheNameRaw , path , data ) } \n\t\treturn data ; \n\t\t} \n\tcatch ( ZooKeeperException . NodeNotFoundException e ) $F2200 catch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Object getDataJson ( String path ) throws ZooKeeperException { \n\ttry { \n\t\t$F14066 ( data , getFromCache , cacheNameJson , path ) if $F112 ( data ) { \n\t\t\t$F10937 ( data , _readJson , path ) $F5605 ( putToCache , cacheNameJson , path , data ) } \n\t\treturn data ; \n\t\t} \n\tcatch ( ZooKeeperException . NodeNotFoundException e ) $F2200 catch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String getData ( String path ) throws ZooKeeperException { \n\t$F40767 ( data , getDataRaw , path ) return data != null ? $F6096 ( data , UTF8 ) : null ; \n\t} \n"}, {"code": "public boolean removeNode $F1693 ( path , removeChildren ) throws ZooKeeperException { \n\ttry { \n\t\tif ( removeChildren ) { \n\t\t\t$F11954 ( curatorFramework ) . deletingChildrenIfNeeded ( ) . forPath ( path ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F11954 ( curatorFramework ) . forPath ( path ) ; \n\t\t\t} \n\t\t} \n\tcatch ( KeeperException . NotEmptyException e ) $F1668 catch ( $F283200 e ) $F233 catch ( Exception e ) { \n\t\tif ( e instanceof ZooKeeperException ) { \n\t\t\tthrow ( ZooKeeperException ) e ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new ZooKeeperException ( e ) ; \n\t\t\t} \n\t\t} \n\t_invalidateCache ( path ) ; \n\t$F232 } \n"}, {"code": "public boolean setData ( String path , $F1975 value , boolean createNodes ) throws ZooKeeperException $F12176 ( _write , path , value , createNodes ) "}, {"code": "public boolean setData $F1195 ( path , value ) throws ZooKeeperException $F28330 ( setData , path , value ) "}, {"code": "public boolean setData $F114058 ( path , value , createNodes ) throws ZooKeeperException { \n\treturn _write ( path , value != null ? $F99115 ( value , UTF8 ) : null , createNodes ) ; \n\t} \n"}, {"code": "private void _connect $F2 throws IOException { \n\tcuratorFramework = CuratorFrameworkFactory . newClient ( connectString , sessionTimeout , INT00 , new RetryNTimes $F34030 ) ; \n\t$F4599 ( curatorFramework ) } \n"}, {"code": "$F1 public ZooKeeperClient init $F2 { \n\t$F116506 ( super ) try $F127857 ( _connect , _initCacheWatcher ) $F11569 ( e ) return this ; \n\t} \n"}, {"code": "$F1 public void destroy $F2 { \n\ttry $F4537 ( _destroyNodeWatcher ) $F1301509 ( LOGGER , e ) try $F4537 ( _close ) $F1301509 ( LOGGER , e ) $F37676 ( super ) } \n"}, {"code": "$F1 public void process ( WatchedEvent event ) { \n\tWatcher . Event . KeeperState $F217481 ( state , event ) ; \n\ttry { \n\t\tswitch ( state ) { \n\t\t\tcase Expired : $F655649 ( _reconnect ) case SyncConnected : $F47700 ( _eventNodeChanged , event ) $F2377 $F1755242 ( LOGGER , event ) } \n\t\t} \n\t$F1301509 ( LOGGER , e ) } \n"}, {"code": "$F1 public void processResult ( CuratorFramework curatorFramework , CuratorEvent event ) throws Exception { \n\tCuratorEventType $F2251 ( eventType , event ) ; \n\tswitch ( eventType ) { \n\t\t$F117276 ( CHILDREN ) $F117276 ( CLOSING ) case CREATE : $F20488 ( _invalidateCache , event ) ; \n\t\t$F332 case DELETE : $F20488 ( _invalidateCache , event ) ; \n\t\t$F332 $F117276 ( EXISTS ) $F117276 ( GET_ACL ) $F117276 ( GET_DATA ) $F117276 ( SET_ACL ) $F117276 ( SET_DATA ) $F117276 ( SYNC ) case WATCHED : process ( event . getWatchedEvent ( ) ) ; \n\t\t$F332 $F2377 $F219858 ( LOGGER , event ) $F332 } \n\t} \n"}, {"code": "public static Project getProject ( Resource resource ) { \n\tProject retval = new Project $F2 ; \n\tretval . setUri ( $F31116 ( resource ) ) ; \n\tretval . setUsername ( $F7140 ( resource ) ) ; \n\tretval . setPassword ( $F2962 ( resource ) ) ; \n\tretval . setBranchTagName ( resource . getBranchTagName ( ) ) ; \n\treturn retval ; \n\t} \n"}, {"code": "static $F28644 TerminalEntry $F28644 entryOf $F59671 ( key , value ) { \n\treturn new TerminalEntry $F28644 ( key , value ) ; \n\t} \n"}, {"code": "$F10880 private static $F28644 $F61370 copyOfEnumMapUnsafe $F74209 ( map ) { \n\treturn copyOfEnumMap ( ( EnumMap ) map ) ; \n\t} \n"}, {"code": "$F1 public ImmutableCollection $F2338 values $F2 { \n\tImmutableCollection $F2338 result = values ; \n\treturn $F112 ( result ) ? values = new ImmutableMapValues $F28644 ( this ) : result ; \n\t} \n"}, {"code": "$F57800 public ImmutableSetMultimap $F28644 asMultimap $F2 { \n\tImmutableSetMultimap $F28644 result = multimapView ; \n\treturn $F112 ( result ) ? ( multimapView = new ImmutableSetMultimap $F28644 ( new MapViewOfValuesAsSingletonSets $F2 , size ( ) , null ) ) : result ; \n\t} \n"}, {"code": "protected String composeError ( Exception error ) { \n\t$F1200 ( builder ) Throwable t = error ; \n\twhile $F268 ( t ) { \n\t\t$F596715 ( builder ) $F8573 ( builder , t ) . append ( STRING00 ) . append ( $F10274 ( t ) ) ; \n\t\t$F13891 ( t ) } \n\t$F1226 ( builder ) } \n"}, {"code": "$F1 protected void write ( LogLevel level , String correlationId , Exception error , String message ) { \n\tif ( LogLevelConverter . toInteger ( $F5227 ( this ) ) < LogLevelConverter . toInteger ( level ) ) $F254 $F1200 ( build ) $F1218 ( build ) build . append ( $F139972 ( correlationId ) ) ; \n\t$F1218 ( build ) $F1964139 ( build , LogLevelConverter , level ) $F1218 ( build ) build . append ( ZonedDateTime . now ( $F281450 ( ZoneId ) ) . format ( DateTimeFormatter . ISO_OFFSET_DATE_TIME ) ) ; \n\t$F1218 ( build ) $F1212 ( build , message ) if $F268 ( error ) { \n\t\tif $F43975 ( message ) $F1218 ( build ) else $F1218 ( build ) $F157482 ( build , composeError , error ) } \n\t$F13374 ( output , build ) if ( level == LogLevel . Fatal || level == LogLevel . Error || level == LogLevel . Warn ) $F29890 ( System , output ) else $F1299 ( System , output ) } \n"}, {"code": "protected void processVelocityResource ( ITemplateSource source , $F2731 ( params ) , String target ) throws Exception { \n\tfor ( ITemplateSourceEntry entry : source . listEntries ( ) ) { \n\t\tif $F2503 ( entry ) { \n\t\t\tprocessVelocityFile ( entry , $F10178 ( source ) , params , target ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F1372 OptionType $F1372 of ( final $F623 T x ) { \n\tif $F112 ( x ) { \n\t\t$F289552 ( None ) } \n\treturn Some . some ( x ) ; \n\t} \n"}, {"code": "private static String performHttpRequest ( org . dasein . cloud . digitalocean . DigitalOcean provider , RESTMethod method , String token , String endpoint ) throws $F22199250 $F387428 ( performHttpRequest , provider , method , token , endpoint ) "}, {"code": "private static HttpResponse sendRequest ( org . dasein . cloud . digitalocean . DigitalOcean provider , RESTMethod method , String token , String strUrl , DigitalOceanAction action ) throws $F22199250 { \n\tHttpRequestBase req = null ; \n\tif ( method == RESTMethod . GET ) { \n\t\t$F5935 ( req , strUrl ) ; \n\t\t} \n\telse if ( method == RESTMethod . POST ) { \n\t\t$F438441 ( req , strUrl ) ; \n\t\t} \n\telse if ( method == RESTMethod . PUT ) { \n\t\treq = new HttpPut ( strUrl ) ; \n\t\t} \n\telse if ( method == RESTMethod . DELETE ) { \n\t\treq = new HttpDelete ( strUrl ) ; \n\t\t} \n\telse if ( method == RESTMethod . HEAD ) { \n\t\treq = new HttpHead ( strUrl ) ; \n\t\t} \n\ttry { \n\t\treq . setHeader ( $F6265 ( token ) ) ; \n\t\t$F462877 ( req ) $F462877 ( req ) StringEntity requestEntity = null ; \n\t\tif ( req instanceof HttpEntityEnclosingRequestBase && action != null ) { \n\t\t\tJSONObject $F103071 ( jsonToPost , action ) ; \n\t\t\tif $F268 ( jsonToPost ) { \n\t\t\t\trequestEntity = new StringEntity ( $F797 ( jsonToPost ) , ContentType . APPLICATION_JSON ) ; \n\t\t\t\t( ( HttpEntityEnclosingRequestBase ) req ) . setEntity ( requestEntity ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tHttpClient $F494577 ( httpClient , provider ) ; \n\t\tif $F3507 ( wire ) { \n\t\t\t$F45360 ( wire ) $F45360 ( wire ) } \n\t\tif $F3507 ( wire ) { \n\t\t\twire . debug ( $F1705936 ( req ) . toString ( ) ) ; \n\t\t\tfor ( Header header : $F1104446 ( req ) ) { \n\t\t\t\twire . debug ( $F828 ( header ) + $F269 ( header ) ) ; \n\t\t\t\t} \n\t\t\t$F45360 ( wire ) if $F268 ( requestEntity ) { \n\t\t\t\ttry { \n\t\t\t\t\twire . debug ( $F18256 ( EntityUtils , requestEntity ) ) ; \n\t\t\t\t\t$F45360 ( wire ) } \n\t\t\t\t$F137000 } \n\t\t\t} \n\t\t$F721326 ( response ) $F1987 ( retryCount ) while $F2523 ( retryCount ) { \n\t\t\t$F465011 ( response , httpClient , req ) if $F3507 ( wire ) { \n\t\t\t\twire . debug ( $F5983 ( response ) . toString ( ) ) ; \n\t\t\t\t} \n\t\t\tif ( method == RESTMethod . DELETE ) { \n\t\t\t\tif ( ( $F5985 ( response ) == INT00 ) ) $F333 else { \n\t\t\t\t\tretryCount ++ ; \n\t\t\t\t\t$F15578 ( Thread ) } \n\t\t\t\t} \n\t\t\telse $F333 } \n\t\tif ( method == RESTMethod . DELETE && ( $F5985 ( response ) != INT00 ) ) $F22213674 return response ; \n\t\t} \n\tcatch ( JSONException e ) { \n\t\tthrow new CloudException $F2756 ( e ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow new CloudException $F2756 ( e ) ; \n\t\t} \n\tcatch ( ClientProtocolException e ) { \n\t\tthrow new CloudException $F2756 ( e ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new CloudException $F2756 ( e ) ; \n\t\t} \n\tfinally { \n\t\ttry $F1645 $F148617 } \n\t} \n"}, {"code": "public static int checkAction ( $F197020 org . dasein . cloud . digitalocean . DigitalOcean provider , String actionUrl ) throws $F22199250 { \n\tif $F19100 ( logger ) { \n\t\tlogger . trace ( STRING00 + DigitalOceanModelFactory . class . getName ( ) + STRING00 + provider . getCloudName ( ) + STRING00 ) ; \n\t\t} \n\tString token = ( String ) $F20708 ( provider ) . getConfigurationValue ( STRING00 ) ; \n\ttry { \n\t\treturn sendRequest ( provider , RESTMethod . HEAD , token , $F279626 ( getApiUrl , provider , actionUrl ) , null ) . getStatusLine ( ) . getStatusCode ( ) ; \n\t\t} \n\tfinally { \n\t\tif $F19100 ( logger ) { \n\t\t\tlogger . trace ( STRING00 + DigitalOceanModelFactory . class . getName ( ) + STRING00 + provider . getCloudName ( ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String getFromMimeType ( String mimeType , $F9704 ( notFound ) ) { \n\t$F90983 ( mimeType ) return $F2734 ( mimeTypeRemappings , mimeType ) ? $F198 ( mimeTypeRemappings , mimeType ) : $F144 ( notFound ) ; \n\t} \n"}, {"code": "public static HString union ( $F410888 HString first , $F410888 HString second , HString ... others ) { \n\treturn union ( Lists . union ( $F22156 ( Arrays , first , second ) , $F998 ( Arrays , others ) ) ) ; \n\t} \n"}, {"code": "public static HString union ( $F410888 Iterable < ? extends HString > strings ) { \n\t$F122018 ( start , Integer ) $F584047 ( end , Integer ) $F356673 ( owner ) for ( HString hString : strings ) { \n\t\tif $F386 ( hString ) { \n\t\t\tif ( owner == null && hString . document ( ) != null ) { \n\t\t\t\towner = hString . document ( ) ; \n\t\t\t\t} \n\t\t\telse if ( hString . document ( ) == null || owner != hString . document ( ) ) $F24432 start = Math . min ( $F68648 ( start , hString ) ) ; \n\t\t\tend = Math . max ( $F68648 ( end , hString ) ) ; \n\t\t\t} \n\t\t} \n\tif $F132864 ( start , end ) { \n\t\treturn $F2145882 ( Fragments , owner ) ; \n\t\t} \n\treturn new Fragment $F2144 ( owner , start , end ) ; \n\t} \n"}, {"code": "public RelationGraph annotationGraph ( $F410888 Tuple relationTypes , $F410888 AnnotationType ... annotationTypes ) { \n\tRelationGraph g = new RelationGraph $F2 ; \n\t$F26726 vertices = interleaved ( annotationTypes ) ; \n\tSet < RelationType > relationTypeList = Streams . asStream ( $F16599 ( relationTypes ) ) . filter ( r - > r instanceof RelationType ) . map ( Cast : : < RelationType > as ) . $F53196 ( collect , Collectors ) g . addVertices ( vertices ) ; \n\tfor ( Annotation source : vertices ) { \n\t\tCollection $F1202948 relations = source . relations ( true ) ; \n\t\tfor ( Relation relation : relations ) { \n\t\t\tif ( relationTypeList . contains ( $F511 ( relation ) ) ) { \n\t\t\t\trelation . getTarget ( document ( ) ) . ifPresent ( target - > <missing ';'> { \n\t\t\t\t\ttarget = g . containsVertex ( target ) ? target : target . stream ( AnnotationType . ROOT ) . filter ( g : : <missing ';'> containsVertex ) . $F3067 ( findFirst ) ; \n\t\t\t\t\tif $F268 ( target ) { \n\t\t\t\t\t\tif ( ! g . containsEdge ( source , target ) ) { \n\t\t\t\t\t\t\tRelationEdge edge = g . addEdge ( source , target ) ; \n\t\t\t\t\t\t\tedge . setRelation ( $F269 ( relation ) ) ; \n\t\t\t\t\t\t\tedge . setRelationType ( $F511 ( relation ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn g ; \n\t} \n"}, {"code": "public Annotation asAnnotation $F2 { \n\tif ( this instanceof Annotation ) { \n\t\treturn $F586252 ( Cast , this ) ; \n\t\t} \n\telse if $F872 ( document ) { \n\t\treturn document ( ) . annotationBuilder ( ) . type ( AnnotationType . ROOT ) . bounds ( this ) . attributes ( this ) . createDetached ( ) ; \n\t\t} \n\treturn Fragments . detachedAnnotation ( AnnotationType . ROOT , start ( ) , end ( ) ) ; \n\t} \n"}, {"code": "public LabeledDatum < HString > asLabeledData ( $F410888 Function < HString , ? > labelFunction ) { \n\treturn LabeledDatum . of ( $F1491 ( labelFunction , this ) , this ) ; \n\t} \n"}, {"code": "public LabeledDatum < HString > asLabeledData ( $F410888 AttributeType attributeTypeLabel ) { \n\treturn LabeledDatum . of ( get ( attributeTypeLabel ) , this ) ; \n\t} \n"}, {"code": "public SequenceInput $F26725 asSequence ( $F410888 Function < ? super Annotation , String > labelFunction ) { \n\tSequenceInput $F26725 si = new SequenceInput $F50 $F2 ; \n\tfor ( Annotation token : tokens ( ) ) { \n\t\tsi . add ( token , $F1491 ( labelFunction , token ) ) ; \n\t\t} \n\treturn si ; \n\t} \n"}, {"code": "public List < HString > charNGrams $F12004 ( minOrder , maxOrder ) { \n\tPreconditions . checkArgument ( minOrder <= maxOrder , STRING00 ) ; \n\t$F83408 ( Preconditions , minOrder ) List < HString > $F54 ( ngrams ) ; \n\tfor ( $F81130 ( i , length ) ) { \n\t\tfor ( int j = i + minOrder ; \n\t\tj <= length ( ) && j <= i + maxOrder ; \n\t\tj ++ ) $F27621 ( ngrams , substring , i , j ) } \n\treturn ngrams ; \n\t} \n"}, {"code": "public HString context ( $F410888 AnnotationType type , int windowSize ) { \n\treturn leftContext ( type , windowSize ) . union ( rightContext ( type , windowSize ) ) ; \n\t} \n"}, {"code": "public final boolean encloses ( HString other ) { \n\t$F2272 ( other ) return ( $F871 ( document ) && other . document ( ) != null ) && ( $F213025 ( document , other ) ) && super . encloses ( other ) ; \n\t} \n"}, {"code": "public HString find ( $F410888 String text , int start ) { \n\tPreconditions . checkPositionIndex ( start , length ( ) ) ; \n\t$F12232 ( pos , indexOf , text , start ) if $F9467 ( pos ) { \n\t\treturn Fragments . empty ( document ( ) ) ; \n\t\t} \n\tif ( $F871 ( document ) && document ( ) . isCompleted ( Types . TOKEN ) ) { \n\t\treturn union ( substring ( pos , $F6103 ( pos , text ) ) . tokens ( ) ) ; \n\t\t} \n\treturn substring ( pos , $F6103 ( pos , text ) ) ; \n\t} \n"}, {"code": "public Stream < HString > findAll $F957371 ( text ) { \n\treturn Streams . asStream ( new Iterator < HString > $F2 { \n\t\t$F706992 ( pos ) $F1987 ( start ) private boolean advance $F2 { \n\t\t\t$F14069 ( pos , indexOf , text , start ) return pos != $F3745 ; \n\t\t\t} \n\t\t$F1 public boolean hasNext $F2 $F24895 ( advance ) $F1 public HString next $F2 { \n\t\t\t$F58928 ( advance ) int n = pos ; \n\t\t\tpos = null ; \n\t\t\t$F77515 ( start , n ) if ( $F871 ( document ) && document ( ) . isCompleted ( Types . TOKEN ) ) { \n\t\t\t\treturn union ( substring ( n , $F6103 ( n , text ) ) . tokens ( ) ) ; \n\t\t\t\t} \n\t\t\treturn substring ( n , $F6103 ( n , text ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Stream < HString > findAllPatterns $F957371 ( regex ) { \n\treturn findAllPatterns ( $F627 ( Pattern , regex ) ) ; \n\t} \n"}, {"code": "public Stream < HString > findAllPatterns ( $F410888 TokenRegex regex ) { \n\treturn Streams . asStream ( new Iterator < HString > $F2 { \n\t\tTokenMatcher m = regex . matcher ( HString . this ) ; \n\t\tHString nextMatch = null ; \n\t\tprivate boolean advance $F2 { \n\t\t\tif ( nextMatch == null && $F14101 ( m ) ) { \n\t\t\t\t$F93426 ( nextMatch , m ) ; \n\t\t\t\t} \n\t\t\t$F44202 ( nextMatch ) } \n\t\t$F1 public boolean hasNext $F2 $F24895 ( advance ) $F1 public HString next $F2 { \n\t\t\t$F58928 ( advance ) HString toReturn = nextMatch ; \n\t\t\tnextMatch = null ; \n\t\t\treturn toReturn ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Stream < HString > findAllPatterns ( $F410888 Pattern regex ) { \n\treturn Streams . asStream ( new Iterator < HString > $F2 { \n\t\tMatcher m = regex . matcher ( HString . this ) ; \n\t\t$F3747 ( start ) $F3747 ( end ) private boolean advance $F2 { \n\t\t\tif $F9467 ( start ) { \n\t\t\t\tif $F14102 ( m ) { \n\t\t\t\t\t$F58904 ( start , m ) $F58904 ( end , m ) } \n\t\t\t\t} \n\t\t\treturn start != $F3745 ; \n\t\t\t} \n\t\t$F1 public boolean hasNext $F2 $F24895 ( advance ) $F1 public HString next $F2 { \n\t\t\t$F58928 ( advance ) HString $F304 ( sub , substring , start , end ) ; \n\t\t\t$F16051 ( start ) $F16051 ( end ) if ( $F871 ( document ) && document ( ) . isCompleted ( Types . TOKEN ) ) { \n\t\t\t\treturn union ( sub . tokens ( ) ) ; \n\t\t\t\t} \n\t\t\treturn sub ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public HString findPattern ( $F410888 Pattern regex ) { \n\tMatcher m = matcher ( regex ) ; \n\tif $F14102 ( m ) { \n\t\treturn union ( substring ( $F4598 ( m ) , $F35711 ( m ) ) . tokens ( ) ) ; \n\t\t} \n\treturn Fragments . empty ( document ( ) ) ; \n\t} \n"}, {"code": "public String getLemma $F2 { \n\tif ( isInstance ( Types . TOKEN ) ) { \n\t\tif ( contains ( Types . SPELLING_CORRECTION ) ) { \n\t\t\treturn get ( Types . SPELLING_CORRECTION ) . asString ( ) ; \n\t\t\t} \n\t\tif ( contains ( Types . LEMMA ) ) { \n\t\t\treturn get ( Types . LEMMA ) . asString ( ) ; \n\t\t\t} \n\t\t$F24894 ( toLowerCase ) } \n\treturn $F32439 ( tokens ) ( HString : : <missing ';'> getLemma ) . collect ( Collectors . joining ( getLanguage ( ) . usesWhitespace ( ) ? STRING00 : STRING00 ) ) ; \n\t} \n"}, {"code": "public String getStem $F2 { \n\tif ( isInstance ( Types . TOKEN ) ) { \n\t\tputIfAbsent ( Types . STEM , Stemmers . getStemmer ( getLanguage ( ) ) . stem ( this ) ) ; \n\t\treturn get ( Types . STEM ) . asString ( ) ; \n\t\t} \n\treturn $F32439 ( tokens ) ( HString : : <missing ';'> getStem ) . collect ( Collectors . joining ( getLanguage ( ) . usesWhitespace ( ) ? STRING00 : STRING00 ) ) ; \n\t} \n"}, {"code": "public HString head $F2 { \n\treturn $F227558 ( tokens ) ( t - > t . parent ( ) . isEmpty ( ) ) . map ( Cast : : <missing ';'> < HString > as <missing '('> ) . findFirst ( ) . orElseGet ( ( ) - > tokens ( ) . stream ( ) . filter ( t - > ! this . overlaps ( $F153194 ( t ) ) ) . map ( Cast : : < HString > as ) . $F3066 ( findFirst ) ( this ) ) ; \n\t} \n"}, {"code": "public $F26726 interleaved ( $F410888 AnnotationType ... types ) { \n\tif $F44788 ( types ) $F17001 ( Collections ) $F26726 $F54 ( annotations ) ; \n\tfor ( int i = INT00 ; \n\ti < tokenLength ( ) ; \n\t) { \n\t\tAnnotation annotation = Fragments . detachedEmptyAnnotation ( ) ; \n\t\tfor ( AnnotationType other : types ) { \n\t\t\tfor ( Annotation temp : $F202750 ( tokenAt , i , other ) ) { \n\t\t\t\tif ( temp . tokenLength ( ) > annotation . tokenLength ( ) ) $F1619 ( annotation , temp ) } \n\t\t\t} \n\t\tif $F6132 ( annotation ) $F16091 ( i ) else { \n\t\t\ti += annotation . tokenLength ( ) ; \n\t\t\t$F528 ( annotations , annotation ) } \n\t\t} \n\treturn annotations ; \n\t} \n"}, {"code": "public HString leftContext ( $F410888 AnnotationType type , int windowSize ) { \n\twindowSize = $F91759 ( Math , windowSize ) ; \n\tPreconditions . checkArgument ( windowSize >= INT00 ) ; \n\tint sentenceStart = sentence ( ) . start ( ) ; \n\tif ( windowSize == INT00 || start ( ) <= sentenceStart ) { \n\t\treturn Fragments . detachedEmptyHString ( ) ; \n\t\t} \n\tHString context = firstToken ( ) . previous ( type ) ; \n\tfor ( $F6610 ( i , windowSize ) ) { \n\t\tHString next = context . firstToken ( ) . previous ( type ) ; \n\t\tif ( $F35711 ( next ) <= sentenceStart ) $F333 context = $F218857 ( context , next ) ; \n\t\t} \n\treturn context ; \n\t} \n"}, {"code": "public final boolean overlaps ( HString other ) { \n\t$F2272 ( other ) return ( $F871 ( document ) && other . document ( ) != null ) && ( $F213025 ( document , other ) ) && super . overlaps ( other ) ; \n\t} \n"}, {"code": "public HString rightContext ( $F410888 AnnotationType type , int windowSize ) { \n\twindowSize = $F91759 ( Math , windowSize ) ; \n\tPreconditions . checkArgument ( windowSize >= INT00 ) ; \n\tint sentenceEnd = sentence ( ) . end ( ) ; \n\tif ( windowSize == INT00 || end ( ) >= sentenceEnd ) { \n\t\treturn Fragments . detachedEmptyHString ( ) ; \n\t\t} \n\tHString context = lastToken ( ) . next ( type ) ; \n\tfor ( $F6610 ( i , windowSize ) ) { \n\t\tHString next = context . lastToken ( ) . next ( type ) ; \n\t\tif ( $F4598 ( next ) >= sentenceEnd ) $F333 context = $F218857 ( context , next ) ; \n\t\t} \n\treturn context ; \n\t} \n"}, {"code": "public List < HString > split ( $F410888 Predicate < ? super Annotation > delimiterPredicate ) { \n\tList < HString > $F54 ( result ) ; \n\t$F3747 ( start ) for ( $F81130 ( i , tokenLength ) ) { \n\t\tif ( delimiterPredicate . test ( tokenAt ( i ) ) ) { \n\t\t\tif $F3752 ( start ) { \n\t\t\t\tresult . add ( tokenAt ( start ) . union ( $F116779 ( tokenAt , i ) ) ) ; \n\t\t\t\t} \n\t\t\t$F16051 ( start ) } \n\t\telse $F134900 ( start , i ) } \n\tif $F3752 ( start ) { \n\t\tresult . add ( tokenAt ( start ) . union ( tokenAt ( $F62155 ( tokenLength ) ) ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public HString substring $F12004 ( relativeStart , relativeEnd ) { \n\tPreconditions . checkPositionIndexes ( $F60911 ( relativeStart , relativeEnd , length ) ) ; \n\treturn new Fragment ( document ( ) , start ( ) + relativeStart , start ( ) + relativeEnd ) ; \n\t} \n"}, {"code": "public String toPOSString ( char delimiter ) { \n\treturn $F32439 ( tokens ) ( t - $F310853 ( t ) + delimiter + t . get ( Types . PART_OF_SPEECH ) . as ( POS . class , POS . ANY ) . asString ( ) ) . collect ( $F6783 ( Collectors ) ) ; \n\t} \n"}, {"code": "public HString trim ( $F410888 Predicate < ? super Annotation > toTrimPredicate ) { \n\treturn trimRight ( toTrimPredicate ) . trimLeft ( toTrimPredicate ) ; \n\t} \n"}, {"code": "public HString trimLeft ( $F410888 Predicate < ? super Annotation > toTrimPredicate ) { \n\t$F1987 ( start ) while ( start < tokenLength ( ) && toTrimPredicate . test ( tokenAt ( start ) ) ) $F16091 ( start ) if $F252160 ( start , tokenLength ) { \n\t\treturn tokenAt ( start ) . union ( tokenAt ( $F62155 ( tokenLength ) ) ) ; \n\t\t} \n\treturn Fragments . empty ( document ( ) ) ; \n\t} \n"}, {"code": "public HString trimRight ( $F410888 Predicate < ? super Annotation > toTrimPredicate ) { \n\tint $F62156 ( end , tokenLength ) ; \n\twhile ( end >= INT00 && toTrimPredicate . test ( tokenAt ( end ) ) ) $F24342 ( end ) if $F3730 ( end ) { \n\t\treturn tokenAt ( INT00 ) . union ( tokenAt ( end ) ) ; \n\t\t} \n\telse if $F2015 ( end ) { \n\t\t$F147828 ( tokenAt ) } \n\treturn Fragments . empty ( document ( ) ) ; \n\t} \n"}, {"code": "$F1 public void configure ( ConfigParams config ) { \n\t_name = config . getAsStringWithDefault ( STRING00 , _name ) ; \n\t_name = config . getAsStringWithDefault ( STRING00 , _name ) ; \n\t_description = config . getAsStringWithDefault ( STRING00 , _description ) ; \n\t_description = config . getAsStringWithDefault ( STRING00 , _description ) ; \n\t_properties = config . getSection ( STRING00 ) ; \n\t} \n"}, {"code": "public static ContextInfo fromConfig ( ConfigParams config ) { \n\tContextInfo result = new ContextInfo $F2 ; \n\t$F1033 ( result , config ) return result ; \n\t} \n"}, {"code": "$F1 public void asDefinitionText $F968436 ( sb ) { \n\tif $F268 ( min ) if $F268 ( max ) sb . append ( $F4800380 ( min , max ) + STRING00 ) ; \n\telse sb . append ( $F39055 ( min ) ) ; \n\t} \n"}, {"code": "$F1 public void asSetter $F968436 ( sb ) { \n\t$F1218 ( sb ) if $F268 ( min ) if $F268 ( max ) sb . append ( $F4800380 ( min , max ) + STRING00 ) ; \n\telse sb . append ( $F39055 ( min ) ) ; \n\telse sb . append ( $F39055 ( max ) ) ; \n\t$F1218 ( sb ) } \n"}, {"code": "$F1 public boolean isSelected ( final Comparable $F26212 value , final boolean caseSensitive ) { \n\tif $F4380 ( value ) { \n\t\tif $F268 ( min ) if ( $F57885 ( value ) . toLowerCase ( ) . compareTo ( ( String ) min ) < INT00 ) $F213 if $F268 ( max ) if ( $F57885 ( value ) . toLowerCase ( ) . compareTo ( ( String ) max ) > INT00 ) $F213 } \n\telse { \n\t\tif $F268 ( min ) if $F622002 ( value , min ) $F213 if $F268 ( max ) if $F621960 ( value , max ) $F213 } \n\t$F232 } \n"}, {"code": "$F1 public void usage ( final UsageBuilder str , final int indentLevel ) { \n\tif $F268 ( min ) if $F268 ( max ) str . append ( $F4800380 ( min , max ) + STRING00 ) ; \n\telse str . append ( $F39055 ( min ) ) ; \n\telse str . append ( $F39055 ( max ) ) ; \n\t} \n"}, {"code": "public < T extends RoxPayload > T load $F26567 ( name , clazz ) throws IOException { \n\tInputStreamReader isr = new InputStreamReader ( new FileInputStream ( new File $F2509 ( getTmpDir , clazz , name ) ) , Charset . forName ( Constants . ENCODING ) . newDecoder ( ) ) ; \n\treturn serializer . deserializePayload ( isr , clazz ) ; \n\t} \n"}, {"code": "public < T extends RoxPayload > $F23339 load $F7907 ( clazz ) throws IOException { \n\t$F28729 ( payloads ) for ( File f : getTmpDir ( clazz ) . listFiles ( ) ) { \n\t\tif $F2503 ( f ) { \n\t\t\tInputStreamReader isr = new InputStreamReader ( $F1097 ( f ) , Charset . forName ( Constants . ENCODING ) . newDecoder ( ) ) ; \n\t\t\tpayloads . add ( serializer . deserializePayload ( isr , clazz ) ) ; \n\t\t\t} \n\t\t} \n\treturn payloads ; \n\t} \n"}, {"code": "private File getTmpDir ( RoxPayload payload ) { \n\tFile tmpDir = new File ( $F587883 ( configuration ) + STRING00 + $F8088 ( payload ) ) ; \n\t$F11859 ( tmpDir ) return tmpDir ; \n\t} \n"}, {"code": "public SequencalJobExecuteResults runAll $F2 { \n\tSequencalJobExecuteResults results = new SequencalJobExecuteResults $F2 ; \n\tfor ( Job job : jobs ) { \n\t\tjob . setJarByClass ( SequencalJobChain . class ) ; \n\t\ttry { \n\t\t\tboolean isSuccessful = job . waitForCompletion ( true ) ; \n\t\t\tresults . add ( new SequencalJobExecuteResult ( isSuccessful , $F213542 ( job ) ) ) ; \n\t\t\t$F107614 ( isSuccessful ) } \n\t\t$F11569 ( e ) } \n\treturn results ; \n\t} \n"}, {"code": "public FieldCounter $F67569 extract $F1195 ( jsonString , recordId ) $F28330 ( extract , jsonString , recordId ) "}, {"code": "public FieldCounter $F67569 extract $F114058 ( jsonString , recordId , doCollectTerms ) { \n\tFieldCounter $F67569 results = new FieldCounter $F50 $F2 ; \n\t$F259424 ( termsCollection ) Object $F137181 ( document , JSON_PROVIDER , jsonString ) ; \n\t$F36249 ( path , String , recordId ) Map value = ( LinkedHashMap ) $F12225 ( JsonPath , document , path ) ; \n\tfor ( String field : schema . getSolrFields ( ) . keySet ( ) ) { \n\t\tif ( doCollectTerms ) { \n\t\t\ttermsCollection . put ( $F472734 ( field ) ) ; \n\t\t\t} \n\t\tString solrField = schema . getSolrFields ( ) . get ( field ) ; \n\t\t$F91677 ( sum ) $F91677 ( count ) if $F33656 ( value , solrField ) { \n\t\t\tMap terms = ( LinkedHashMap ) $F198 ( value , solrField ) ; \n\t\t\tfor ( String term : ( $F1043 ) $F7837 ( terms ) ) { \n\t\t\t\tMap termInfo = ( LinkedHashMap ) $F198 ( terms , term ) ; \n\t\t\t\tdouble tfIdf = Converter . asDouble ( $F1169 ( termInfo ) ) ; \n\t\t\t\tif ( doCollectTerms ) { \n\t\t\t\t\tint tf = Converter . asInteger ( $F1169 ( termInfo ) ) ; \n\t\t\t\t\tint df = Converter . asInteger ( $F1169 ( termInfo ) ) ; \n\t\t\t\t\t$F9872 ( termsCollection , field ) ( new TfIdf $F3192 ( term , tf , df , tfIdf ) ) ; \n\t\t\t\t\t} \n\t\t\t\tsum += tfIdf ; \n\t\t\t\tcount ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\tdouble avg = count > INT00 ? sum / count : INT00 ; \n\t\t$F531611 ( results , field , sum ) $F531611 ( results , field , avg ) } \n\treturn results ; \n\t} \n"}, {"code": "$F623 public static $F1372 T defaultValue $F7907 ( type ) { \n\t$F762 T t = ( T ) $F143721 ( DEFAULTS , checkNotNull , type ) ; \n\treturn t ; \n\t} \n"}, {"code": "public Match matches ( HString input , int startIndex ) { \n\tSet $F94525 $F6940 ( states ) ; \n\tstates . add ( new State ( startIndex , start ) ) ; \n\tNavigableSet $F94525 $F22291 ( accepts ) ; \n\t$F26726 $F9005 ( tokens , input ) ; \n\twhile $F386 ( states ) { \n\t\tSet $F94525 $F6940 ( newStates ) ; \n\t\tfor ( State s : states ) { \n\t\t\tif ( s . node . accepts ( ) ) { \n\t\t\t\tif ( s . stack . isEmpty ( ) || ( s . stack . size ( ) == INT00 && s . node . consumes && s . node . name . equals ( s . stack . peek ( ) ) ) ) $F529 ( accepts , s ) } \n\t\t\tDeque < Tuple2 $F17726 > currentStack = s . stack ; \n\t\t\tif ( s . node . emits ) { \n\t\t\t\tcurrentStack . push ( Tuples . $ ( s . node . name , s . inputPosition ) ) ; \n\t\t\t\t} \n\t\t\tfor ( Node n : s . node . epsilons ) { \n\t\t\t\tif ( s . node . consumes ) { \n\t\t\t\t\tState next = new State ( s . inputPosition , n , currentStack , s . namedGroups ) ; \n\t\t\t\t\tTuple2 $F17726 ng = next . stack . pop ( ) ; \n\t\t\t\t\tnext . namedGroups . put ( $F712 ( ng ) , HString . union ( tokens . subList ( ng . v2 , s . inputPosition ) ) ) ; \n\t\t\t\t\t$F528 ( newStates , next ) } \n\t\t\t\tState next = new State ( s . inputPosition , n , currentStack , s . namedGroups ) ; \n\t\t\t\t$F528 ( newStates , next ) } \n\t\t\tif ( s . inputPosition >= input . tokenLength ( ) ) $F42718 for ( Transition t : s . node . transitions ) { \n\t\t\t\tint len = t . transitionFunction . matches ( tokens . get ( s . inputPosition ) ) ; \n\t\t\t\tif $F3730 ( len ) { \n\t\t\t\t\tState next = new State ( s . inputPosition + len , t . destination , currentStack , s . namedGroups ) ; \n\t\t\t\t\t$F528 ( newStates , next ) } \n\t\t\t\t} \n\t\t\t} \n\t\t$F39336 ( states ) states = newStates ; \n\t\t} \n\tif $F6132 ( accepts ) { \n\t\treturn new Match ( $F3745 , null ) ; \n\t\t} \n\tState $F9005 ( last , accepts ) ; \n\tint max = last . inputPosition ; \n\tState temp = $F71780 ( accepts ) ; \n\twhile ( temp != null && temp . inputPosition >= max ) { \n\t\ttemp = accepts . lower ( temp ) ; \n\t\t} \n\tif ( max == startIndex ) $F16091 ( max ) return new Match ( max , last . namedGroups ) ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\t$F19733 ( adjustments ) if $F126320 ( getParameterCount ) adjustments = values . popString ( ) ; \n\t\tfinal Object dateInputObject = values . popWhatever ( ) ; \n\t\tLocalTime convertedInputDate = null ; \n\t\tif $F4380 ( dateInputObject ) convertedInputDate = TemporalHelper . parseWithPredefinedParsers ( ( String ) dateInputObject ) . toLocalTime ( ) ; \n\t\telse if ( dateInputObject instanceof TokVariable ) throw new Exception ( STRING00 + ( ( TokVariable ) dateInputObject ) . getName ( ) ) ; \n\t\telse if $F184631 ( dateInputObject ) convertedInputDate = CalendarFactory . at ( ( Long ) dateInputObject ) . toLocalTime ( ) ; \n\t\telse if $F199207 ( dateInputObject ) convertedInputDate = CalendarFactory . at ( $F162264 ( dateInputObject ) . longValue ( ) ) . toLocalTime ( ) ; \n\t\telse convertedInputDate = ( ( LocalDateTime ) dateInputObject ) . toLocalTime ( ) ; \n\t\tfinal LocalDateTime adjLdt = CalendarFactory . modify ( convertedInputDate , adjustments ) ; \n\t\tif ( $F769739 ( adjLdt ) != LocalDate . MIN ) throw new ParseException $F204847 ; \n\t\t$F22657 ( values , adjLdt ) } \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void setFieldNames ( $F410888 String ... names ) { \n\tConfig . setProperty ( CONFIG_PROPERTY + STRING00 , $F199024 ( Joiner , names ) ) ; \n\t} \n"}, {"code": "private void flushQueue $F2 { \n\twhile $F38432 { \n\t\tfinal Action act = firstNonNull ( $F69151 ( actionQueue ) , new Action ( Actions . END , null ) ) ; \n\t\tswitch ( act . action ) { \n\t\t\tcase POST : post ( act . object ) ; \n\t\t\t$F332 case REGISTER : register ( act . object ) ; \n\t\t\t$F332 case UNREGISTER : unregister ( act . object ) ; \n\t\t\t$F332 case END : $F2377 $F254 } \n\t\t} \n\t} \n"}, {"code": "public static Properties asProperties $F43279 ( contextClass , resourceName ) throws IOException { \n\t$F25311 ( closer , Closer ) try { \n\t\t$F472 ( p ) p . load ( closer . register ( asCharSource ( contextClass , resourceName ) . openStream ( ) ) ) ; \n\t\treturn p ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public static String asString $F43279 ( contextClass , resourceName ) throws IOException { \n\t$F25311 ( closer , Closer ) try { \n\t\treturn CharStreams . toString ( closer . register ( asCharSource ( contextClass , resourceName ) . openStream ( ) ) ) ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public static URL getDeepResource $F8988 ( startLoader , resourceName ) { \n\tClassLoader currentLoader = checkNotNull ( startLoader ) ; \n\tURL url = currentLoader . getResource ( checkNotEmpty ( resourceName ) ) ; \n\t$F1987 ( attempts ) while ( url == null && attempts < INT00 ) { \n\t\t$F13191 ( currentLoader ) attempts += INT00 ; \n\t\t$F334 ( currentLoader ) $F133714 ( url , currentLoader , resourceName ) } \n\tcheckArgument ( url != null , STRING00 , resourceName , startLoader ) ; \n\treturn url ; \n\t} \n"}, {"code": "public static URL asURL $F43279 ( contextClass , resourceName ) { \n\treturn Resources . getResource ( contextClass , resourceName ) ; \n\t} \n"}, {"code": "public static File asFile $F43279 ( contextClass , resourceName ) { \n\treturn new File ( asURL ( contextClass , resourceName ) . getFile ( ) ) ; \n\t} \n"}, {"code": "public static CharSource asCharSource $F2724516 ( contextClass , resourceName ) { \n\treturn asCharSource ( contextClass , resourceName , Charsets . UTF_8 ) ; \n\t} \n"}, {"code": "public static CharSource asCharSource ( $F105143 ( contextClass ) , final String resourceName , final Charset charset ) { \n\treturn new CharSource $F2 { \n\t\t$F1 public Reader openStream $F2 throws IOException { \n\t\t\treturn asReader ( checkNotNull ( contextClass ) . getResourceAsStream ( checkNotEmpty ( resourceName ) ) , checkNotNull ( charset ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static BufferedReader asReader ( InputStream is , Charset charset ) { \n\ttry { \n\t\treturn new BufferedReader ( new InputStreamReader $F17669 ( is , charset ) ) ; \n\t\t} \n\t$F153429 ( e ) $F724 } \n"}, {"code": "$F1 public Integer execute $F2 { \n\t$F464872 ( logger ) GetList $F26212 $F199 ( command , session , metamodel ) ; \n\tif $F268 ( filters ) { \n\t\tcommand . filter ( filters . toArray ( new Filter $F45 $F25623 ) ) ; \n\t\t} \n\t$F1987 ( i ) for ( E entity : $F34203 ( command ) ) { \n\t\t$F74932 ( session , entity ) i ++ ; \n\t\t} \n\treturn i ; \n\t} \n"}, {"code": "protected void processVelocityResource ( ITemplateSource source , VelocityContext context , String target ) throws Exception { \n\tif $F154394 ( source ) { \n\t\tthrow new RuntimeException ( STRING00 + $F99382 ( source ) + STRING00 + $F10178 ( source ) + STRING00 ) ; \n\t\t} \n\tprocessVelocityFile ( source . getEntry ( $F10178 ( source ) ) , context , target ) ; \n\t} \n"}, {"code": "public boolean checkCondition $F2 { \n\tif ( super . checkCondition ( ) ) $F233 if ( this . watchdogReference . isStale ( ) ) $F1668 Watchdog wd = this . watchdogReference . getWatchdog ( ) ; \n\tif ( $F139745 ( wd ) ) { \n\t\tif $F14980 ( log ) { \n\t\t\tString logString = STRING00 + wd . getThreadHandle ( ) + STRING00 ; \n\t\t\tlog . info ( new CheckConditionFailedLog ( this , logString ) . toString ( ) ) ; \n\t\t\t} \n\t\t$F213 } \n\t$F232 } \n"}, {"code": "public void conditionViolated $F2 { \n\tif ( this . watchdogReference . isStale ( ) ) $F10873 Watchdog wd = this . watchdogReference . getWatchdog ( ) ; \n\twd . restart ( ) ; \n\tif $F14980 ( log ) { \n\t\tlog . info ( new ConditionViolatedLog ( this , $F234820 ( wd ) + $F797 ( this ) ) . toString ( ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static TokenRegex compile ( String pattern ) throws ParseException { \n\tExpressionIterator p = QueryToPredicate . PARSER . parse ( pattern ) ; \n\tExpression exp ; \n\tTransitionFunction top = null ; \n\twhile ( $F97698 ( exp , p ) ) { \n\t\tif $F112 ( top ) $F24579 ( top , consumerize , exp ) else { \n\t\t\ttop = new TransitionFunction . Sequence $F12964 ( top , consumerize , exp ) ; \n\t\t\t} \n\t\t} \n\treturn new TokenRegex ( top ) ; \n\t} \n"}, {"code": "public Optional < HString > matchFirst ( HString text ) { \n\tTokenMatcher matcher = new TokenMatcher ( nfa , text ) ; \n\tif $F14102 ( matcher ) { \n\t\treturn Optional . of ( $F93425 ( matcher ) ) ; \n\t\t} \n\t$F9163 ( Optional ) } \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal boolean b0 = values . popBoolean ( ) ; \n\t\tfinal boolean b1 = values . popBoolean ( ) ; \n\t\tvalues . push ( new Boolean ( b1 || b0 ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public $F1043 getVariableNames $F2 { \n\tfinal ImmutableSet . Builder $F641 $F65984 ( sb , ImmutableSet ) ; \n\tfor ( final Expression expr : expressions ) for ( final Variable var : $F659620 ( expr ) ) $F6945 ( sb , var ) $F901 ( sb ) } \n"}, {"code": "public URI expand $F2763 ( values ) throws URISyntaxException { \n\tif $F6132 ( expressions ) return $F12572 ( template ) ; \n\t$F102635 ( buf ) $F1987 ( prevEndIndex ) for ( final Expression expr : expressions ) { \n\t\tappendEncoded ( buf , template , prevEndIndex , expr . startIndex , true ) ; \n\t\tfinal Operator $F211904 ( op , expr ) ; \n\t\tfinal boolean query = op == Operator . QUERY || op == Operator . QUERY_CONTINUATION ; \n\t\tfinal boolean named = query || op == Operator . MATRIX ; \n\t\tfinal boolean allowReserved = op == Operator . RESERVED || op == Operator . FRAGMENT ; \n\t\tfinal char separator = $F713442 ( op ) ; \n\t\t$F48974 ( firstVar ) for ( final Variable var : $F659620 ( expr ) ) { \n\t\t\t$F213834 ( name , var ) $F384819 ( value , values , name ) if $F540 ( isUndefined , value ) $F23605 if ( ! firstVar ) $F1212 ( buf , separator ) else { \n\t\t\t\tif ( op != Operator . NONE && op != Operator . RESERVED ) buf . append ( $F1960974 ( op ) ) ; \n\t\t\t\tfirstVar = false ; \n\t\t\t\t} \n\t\t\t$F2233 ( explode ) $F1987 ( maxLength ) final Modifier mod = var . getModifier ( ) ; \n\t\t\tswitch $F360529 ( mod ) { \n\t\t\t\t$F62701 ( EXPLODE , explode ) case PREFIX : maxLength = ( ( PrefixModifier ) mod ) . getMaxLength ( ) ; \n\t\t\t\t$F332 } \n\t\t\tif $F5619 ( value ) { \n\t\t\t\tfinal $F19379 $F34558 ( map , value ) ; \n\t\t\t\tif ( explode ) { \n\t\t\t\t\tif ( named ) appendMap ( buf , map , STRING00 , query , separator , allowReserved ) ; \n\t\t\t\t\telse appendMap ( buf , map , STRING00 , true , separator , allowReserved ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( named ) { \n\t\t\t\t\t\t$F564 ( appendLiteral , buf , name ) $F1218 ( buf ) } \n\t\t\t\t\tappendMap ( buf , map , STRING00 , true , STRING00 , allowReserved ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if $F132258 ( value ) { \n\t\t\t\tfinal $F58425 list = $F132259 ( value ) ; \n\t\t\t\tif ( explode ) { \n\t\t\t\t\tif ( named ) $F39322 ( appendList , buf , list , name , query , separator , allowReserved ) else appendList ( buf , list , null , false , separator , allowReserved ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( named ) { \n\t\t\t\t\t\t$F564 ( appendLiteral , buf , name ) $F1218 ( buf ) } \n\t\t\t\t\tappendList ( buf , list , null , false , STRING00 , allowReserved ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F127965 ( str , value ) if ( named ) { \n\t\t\t\t\t$F564 ( appendLiteral , buf , name ) if ( query || $F1215 ( str ) ) $F1218 ( buf ) } \n\t\t\t\tif $F9104 ( maxLength ) $F5605 ( appendEncoded , buf , str , allowReserved ) else appendEncoded ( buf , str , INT00 , codePointIndex ( str , maxLength ) , allowReserved ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tprevEndIndex = expr . endIndex ; \n\t\t} \n\tappendEncoded ( buf , template , prevEndIndex , $F1203 ( template ) , true ) ; \n\treturn new URI $F5478 ( buf ) ; \n\t} \n"}, {"code": "$F1 public String getEnvironment $F2 { \n\tFile file = $F118291 ( getFileName ) ; \n\t$F472 ( properties ) if ( $F2475 ( file ) && $F6713 ( file ) ) { \n\t\tBufferedInputStream inStream = null ; \n\t\ttry { \n\t\t\t$F889509 ( inStream , file ) ; \n\t\t\t$F29433 ( properties , inStream ) } \n\t\tcatch ( IOException ioe ) { \n\t\t\tlog . info ( $F204811 ( getFileName , ioe ) ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tif $F268 ( inStream ) { \n\t\t\t\ttry $F2453 ( inStream ) catch ( IOException e ) { \n\t\t\t\t\tlog . info ( $F204811 ( getFileName , e ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tString property = properties . getProperty ( getPropertiesKey ( ) ) ; \n\treturn property ; \n\t} \n"}, {"code": "$F1 public void prepare $F2 throws HibiscusException { \n\ttry { \n\t\thttpRequest . setURI ( getURI ( ) ) ; \n\t\tfor ( BasicNameValuePair header : $F429113 ( httpClient ) ) { \n\t\t\thttpRequest . addHeader ( $F447537 ( header ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( URISyntaxException e1 ) { \n\t\tthrow new HibiscusException ( e1 ) ; \n\t\t} \n\t} \n"}, {"code": "private void register $F2 { \n\tthis . yamlConstructors . put ( Tag . MAP , mapConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . OMAP , omapConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . PAIRS , pairsConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . SEQ , seqConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . SET , setConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . BINARY , binaryConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . BOOL , boolConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . FLOAT , floatConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . INT , intConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . NULL , nullConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . STR , strConstruct ( ) ) ; \n\tthis . yamlConstructors . put ( Tag . TIMESTAMP , timestampConstruct ( ) ) ; \n\t} \n"}, {"code": "protected Construct binaryConstruct $F2 { \n\tString linebreak = getOptions ( ) . getLineBreak ( ) . getString ( ) ; \n\tint width = $F1507319 ( getOptions ) ; \n\tBaseEncoding encoding = BaseEncoding . base64 ( ) . withSeparator ( linebreak , width ) ; \n\treturn new YamlBinaryNodeConstruct $F504641 ( getNodeFactory , this , encoding ) ; \n\t} \n"}, {"code": "public Settings parse $F22 ( arguments ) throws CommandLineException { \n\tSettings out = new Settings $F2 ; \n\tif $F268 ( arguments ) { \n\t\tCommandOption option = null ; \n\t\tfor ( String argument : arguments ) { \n\t\t\tif $F540 ( isOption , argument ) { \n\t\t\t\t$F10937 ( option , findOption , argument ) if ( option != null && ! option . hasArguments ( ) ) { \n\t\t\t\t\tout . put ( option . getSetting ( ) , $F42850 ( option , argument ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F23605 } \n\t\t\tif $F112 ( option ) { \n\t\t\t\tthrow new CommandLineException $F2821 ( argument ) ; \n\t\t\t\t} \n\t\t\tObject $F137181 ( value , option , argument ) ; \n\t\t\tout . put ( option . getSetting ( ) , value ) ; \n\t\t\t} \n\t\t} \n\tCommandOption config = builder . getConfigFileOption ( ) ; \n\tCommandBuilder defaults = new CommandBuilder $F176532 ( builder ) ; \n\tif $F268 ( config ) { \n\t\tString file = ( String ) out . get ( config . getSetting ( ) ) ; \n\t\tif $F268 ( file ) { \n\t\t\tConfigFileReader reader = new ConfigFileReader $F2 ; \n\t\t\tSettings configSettings = $F16987 ( reader , file , builder ) ; \n\t\t\tdefaults . setDefaults ( configSettings ) ; \n\t\t\tout . remove ( config . getSetting ( ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( CommandOption option : $F144 ( defaults ) ) { \n\t\tif ( ! ( option instanceof ConfigFileOption ) && ! out . containsKey ( option . getSetting ( ) ) ) { \n\t\t\tout . put ( option . getSetting ( ) , $F112761 ( option ) ) ; \n\t\t\t} \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "private CommandOption findOption ( String argument ) { \n\tif ( $F17184 ( argument ) || argument == null ) $F2200 if $F5667 ( argument ) { \n\t\treturn builder . findLong ( argument ) ; \n\t\t} \n\tif $F5667 ( argument ) { \n\t\treturn builder . findShort ( argument ) ; \n\t\t} \n\tCommandOption found = builder . findShort ( argument ) ; \n\tif $F112 ( found ) { \n\t\tfound = builder . findLong ( argument ) ; \n\t\t} \n\treturn found ; \n\t} \n"}, {"code": "static Class resolveType ( String type ) { \n\tClass $F351767 ( cls ) ; \n\tif $F25224 ( type ) cls = $F4868 ; \n\telse if $F25224 ( type ) cls = $F4893 ; \n\telse if $F25224 ( type ) cls = $F4884 ; \n\telse if $F25224 ( type ) cls = $F4920 ; \n\telse if $F25224 ( type ) cls = $F4911 ; \n\telse if $F25224 ( type ) cls = $F3292 ; \n\telse if $F25224 ( type ) cls = $F4929 ; \n\telse if $F25224 ( type ) cls = $F4937 ; \n\telse if $F25224 ( type ) cls = $F211148 ; \n\treturn cls ; \n\t} \n"}, {"code": "static $F1372 T cast $F49756 ( obj , type ) { \n\tif $F4870 ( type ) { \n\t\t$F95338 ( obj ) obj = $F797 ( obj ) ; \n\t\t} \n\telse if ( type == $F4937 ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tobj = new BigInteger $F2821 ( obj ) ; \n\t\t} \n\telse if ( $F4930 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tobj = new BigDecimal ( $F2821 ( obj ) . replace ( $F1286 ) ) ; \n\t\t} \n\telse if ( $F4894 ( type ) || $F455012 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tif $F184628 ( obj ) $F1645 else obj = new BigDecimal $F2821 ( obj ) . intValue ( ) ; \n\t\t} \n\telse if ( $F4885 ( type ) || $F455019 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tif $F184631 ( obj ) $F1645 else obj = new BigDecimal ( $F2821 ( obj ) . replace ( $F1286 ) ) . longValue ( ) ; \n\t\t} \n\telse if ( $F4921 ( type ) || $F455040 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tif $F199202 ( obj ) $F1645 else obj = new BigDecimal ( $F2821 ( obj ) . replace ( $F1286 ) ) . floatValue ( ) ; \n\t\t} \n\telse if ( $F4912 ( type ) || $F455047 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tif $F199207 ( obj ) $F1645 else obj = new BigDecimal ( $F2821 ( obj ) . replace ( $F1286 ) ) . doubleValue ( ) ; \n\t\t} \n\telse if ( $F4876 ( type ) || $F455033 ( type ) ) { \n\t\tif ( obj == null || $F2821 ( obj ) . isEmpty ( ) ) obj = STRING00 ; \n\t\tif $F5645 ( obj ) { \n\t\t\tobj = $F162260 ( obj ) != INT00 ; \n\t\t\t} \n\t\telse obj = Boolean . parseBoolean ( STRING00 + obj ) ; \n\t\t} \n\telse if ( type == $F211148 ) { \n\t\tif ( $F2821 ( obj ) . isEmpty ( ) ) obj = null ; \n\t\tif $F268 ( obj ) { \n\t\t\tif $F4380 ( obj ) { \n\t\t\t\t$F382033 ( dt ) SimpleDateFormat [ ] sdf = new SimpleDateFormat [ ] { \n\t\t\t\t\t$F37809 , $F37809 , $F37809 , $F37809 } \n\t\t\t\t; \n\t\t\t\tfor ( SimpleDateFormat s : sdf ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tdt = s . parse ( STRING00 + obj ) ; \n\t\t\t\t\t\t$F332 } \n\t\t\t\t\t$F165638 } \n\t\t\t\tif $F112 ( dt ) dt = new Date ( Long . parseLong ( STRING00 + obj ) ) ; \n\t\t\t\tobj = dt ; \n\t\t\t\t} \n\t\t\telse if $F184631 ( obj ) { \n\t\t\t\tobj = new Date $F162248 ( obj ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse if $F384440 ( type ) { \n\t\tif ( obj != null && obj instanceof String ) { \n\t\t\tobj = Enum . valueOf ( ( $F84660 ) type , $F57885 ( obj ) . toUpperCase ( ) ) ; \n\t\t\t} \n\t\t} \n\t$F21676 ( obj ) } \n"}, {"code": "private String escape ( final String string , final State inState ) { \n\t$F2201 ( string ) State state = inState ; \n\t$F119109 ( length , string ) for ( $F6610 ( index , length ) ) { \n\t\tif ( state == State . HOST && $F3748 ( string , PROTOCOL_SEPARATOR ) == index ) { \n\t\t\t$F94919 ( index , PROTOCOL_SEPARATOR ) $F23605 } \n\t\t$F143056 ( c , string , index ) if ( $F19771 ( HOST_SEPARATOR , c ) && state == State . HOST ) { \n\t\t\tstate = State . PATH ; \n\t\t\t} \n\t\tif ( $F19771 ( FRAG_SEPARATOR , c ) && state != State . FRAGMENT && state != State . QUERY_PARAM ) { \n\t\t\tstate = State . FRAGMENT ; \n\t\t\t} \n\t\telse if ( $F19771 ( QUERY_SEPARATOR , c ) && ( state == State . PATH || state == State . HOST ) ) { \n\t\t\tstate = State . QUERY ; \n\t\t\t} \n\t\telse { \n\t\t\t$F399402 ( encodeString , encodeCharAtIndex , string , index , state ) if $F268 ( encodeString ) { \n\t\t\t\treturn $F42014 ( string , index , encodeString ) + escape ( $F3735 ( string , index ) , state ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "private boolean isIllegal ( final char c , final State state ) { \n\tswitch ( state ) { \n\t\tcase FRAGMENT : return $F39570 ( strict , STRICT_ILLEGAL_IN_FRAGMENT , ILLEGAL_IN_FRAGMENT ) . matches ( c ) ; \n\t\tcase QUERY : return $F39570 ( strict , STRICT_ILLEGAL_IN_QUERY , ILLEGAL_IN_QUERY ) . matches ( c ) ; \n\t\tcase QUERY_PARAM : return $F39570 ( strict , STRICT_ILLEGAL_IN_QUERY_PARAM , ILLEGAL_IN_QUERY_PARAM ) . matches ( c ) ; \n\t\tcase PATH : return $F39570 ( strict , STRICT_ILLEGAL_IN_PATH , ILLEGAL_IN_PATH ) . matches ( c ) ; \n\t\tcase HOST : $F456249 ( ILLEGAL_IN_HOST , c ) $F2377 $F60681 ( state ) } \n\t} \n"}, {"code": "private String encodeCharAtIndex ( final String string , final int index , final State state ) { \n\t$F143056 ( c , string , index ) if ( ( $F19771 ( SPACE , c ) && ( ( state != State . QUERY && state != State . QUERY_PARAM ) || strict ) ) || ( strict && $F19771 ( PLUS , c ) && state == State . QUERY ) ) $F4801 if ( $F19771 ( ESCAPED , c ) && $F1203 ( string ) > index + INT00 && HEX . matches ( $F48430 ( string , index ) ) && HEX . matches ( $F48430 ( string , index ) ) ) $F2200 if $F11795 ( isIllegal , c , state ) { \n\t\ttry { \n\t\t\tif $F24340 ( c ) $F4801 else { \n\t\t\t\treturn URLEncoder . encode ( $F18256 ( Character , c ) , STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException e ) { \n\t\t\tthrow new AssertionError $F231776 ( e ) ; \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public static String escape $F536555 ( url , strict ) { \n\treturn $F39570 ( strict , STRICT_ESCAPER , ESCAPER ) . escape ( url ) ; \n\t} \n"}, {"code": "public static String escapePath $F536555 ( path , strict ) { \n\treturn $F39570 ( strict , STRICT_ESCAPER , ESCAPER ) . escapePath ( path ) ; \n\t} \n"}, {"code": "public static String escapeQuery $F536555 ( query , strict ) { \n\treturn $F39570 ( strict , STRICT_ESCAPER , ESCAPER ) . escapeQuery ( query ) ; \n\t} \n"}, {"code": "public static String escapeQueryParam $F536555 ( queryParam , strict ) { \n\treturn $F39570 ( strict , STRICT_ESCAPER , ESCAPER ) . escapeQueryParam ( queryParam ) ; \n\t} \n"}, {"code": "public static String escapeFragment $F536555 ( fragment , strict ) { \n\treturn $F39570 ( strict , STRICT_ESCAPER , ESCAPER ) . escapeFragment ( fragment ) ; \n\t} \n"}, {"code": "public static LexerResults scan ( String characters ) throws Exception { \n\t$F92938 ( characters ) if ( AunitRuntime . getLexerFactory ( ) == null ) $F3687 Lexer lexer = AunitRuntime . getLexerFactory ( ) . generate ( new ANTLRStringStream ( characters ) ) ; \n\treturn new LexerResults ( lexer ) ; \n\t} \n"}, {"code": "public static Tree parse ( String characters , SelectedRule selectedRule ) throws Exception { \n\t$F92938 ( characters ) $F92938 ( selectedRule ) if ( AunitRuntime . getLexerFactory ( ) == null ) $F3687 if ( AunitRuntime . getParserFactory ( ) == null ) $F3687 Lexer lexer = AunitRuntime . getLexerFactory ( ) . generate ( new ANTLRStringStream ( characters ) ) ; \n\tParser parser = AunitRuntime . getParserFactory ( ) . generate ( new CommonTokenStream ( lexer ) ) ; \n\tRuleReturnScope $F26300 ( rs , selectedRule , parser ) ; \n\tParserWrapper wrapper = ( ParserWrapper ) parser ; \n\tif ( wrapper . isFailOnError ( ) && ! $F10113 ( wrapper ) . isEmpty ( ) ) { \n\t\tthrow new ParserException ( $F10113 ( wrapper ) ) ; \n\t\t} \n\treturn ( Tree ) $F738827 ( rs ) ; \n\t} \n"}, {"code": "public static SelectedRule rule ( String rule , ArgumentBuilder arguments ) throws Exception { \n\tif ( AunitRuntime . getParserFactory ( ) == null ) $F3687 for ( Method method : collectMethods ( AunitRuntime . getParserFactory ( ) . getParserClass ( ) ) ) { \n\t\tif $F26397 ( method , rule ) { \n\t\t\treturn new SelectedRule ( $F59832 ( method , arguments ) ) ; \n\t\t\t} \n\t\t} \n\t$F248459 ( rule ) } \n"}, {"code": "public static SelectedRule withRule ( String rule , ArgumentBuilder arguments ) throws Exception { \n\tif ( AunitRuntime . getTreeParserFactory ( ) == null ) $F3687 for ( Method method : collectMethods ( AunitRuntime . getTreeParserFactory ( ) . getTreeParserClass ( ) ) ) { \n\t\tif $F26397 ( method , rule ) { \n\t\t\treturn new SelectedRule ( $F59832 ( method , arguments ) ) ; \n\t\t\t} \n\t\t} \n\t$F248459 ( rule ) } \n"}, {"code": "public static boolean walk ( SelectedRule walkerRule , TreeBuilder tree ) throws Exception { \n\t$F92938 ( walkerRule ) $F92938 ( tree ) if ( AunitRuntime . getTreeParserFactory ( ) == null ) $F3687 TreeParser treeParser = AunitRuntime . getTreeParserFactory ( ) . generate ( new CommonTreeNodeStream $F176532 ( tree ) ) ; \n\tRuleReturnScope $F26300 ( rs , walkerRule , treeParser ) ; \n\tTreeParserWrapper wrapper = ( TreeParserWrapper ) treeParser ; \n\tif ( wrapper . isFailOnError ( ) && ! $F10113 ( wrapper ) . isEmpty ( ) ) { \n\t\tthrow new ParserException ( $F10113 ( wrapper ) ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public static $F1372 T generateParser ( String src ) throws Exception { \n\tANTLRInputStream input = new ANTLRInputStream ( $F53591 ( src ) ) ; \n\tLexer lexer = AunitRuntime . getLexerFactory ( ) . generate ( input ) ; \n\tCommonTokenStream tokens = new CommonTokenStream ( lexer ) ; \n\treturn ( T ) AunitRuntime . getParserFactory ( ) . generate ( tokens ) ; \n\t} \n"}, {"code": "public static $F1372 T generateParser ( File src ) throws Exception { \n\tANTLRInputStream input = new ANTLRInputStream $F47438 ( src ) ; \n\tLexer lexer = AunitRuntime . getLexerFactory ( ) . generate ( input ) ; \n\tCommonTokenStream tokens = new CommonTokenStream ( lexer ) ; \n\treturn ( T ) AunitRuntime . getParserFactory ( ) . generate ( tokens ) ; \n\t} \n"}, {"code": "private static $F68542 collectMethods ( Class clazz ) { \n\tif $F112 ( clazz ) $F11597 ( Collections ) $F68542 s = new HashSet $F68541 $F2 ; \n\ts . addAll ( Arrays . asList ( $F159647 ( clazz ) ) ) ; \n\ts . addAll ( $F559419 ( collectMethods , clazz ) ) ; \n\treturn s ; \n\t} \n"}, {"code": "$F1 protected Future < ActivityData > submit ( ActivityCallable callable ) { \n\tif $F112 ( service ) { \n\t\tservice = $F100297 ( Executors , threads ) ; \n\t\t} \n\t$F42520 ( logger ) return $F65736 ( service , callable ) ; \n\t} \n"}, {"code": "$F4862 public static void validatePublicNoArg ( Method method , $F61633 errors ) { \n\tif $F105135 ( Modifier , method ) { \n\t\terrors . add ( new Exception $F250339 ( method ) ) ; \n\t\t} \n\tif ( $F1385201 ( method ) ) { \n\t\terrors . add ( new Exception $F250339 ( method ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F4862 public static void validateVoid ( Method method , $F61633 errors ) { \n\tif ( $F20027 ( method ) != Void . TYPE ) { \n\t\terrors . add ( new Exception $F250339 ( method ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F4862 public static void validatePrimitiveArray ( Method method , Class type , $F61633 errors ) { \n\tClass $F20049 ( returnType , method ) ; \n\tif ( $F76682 ( returnType ) || ! $F53053 ( returnType ) . equals ( type ) ) { \n\t\terrors . add ( new Exception ( $F352552 ( method , type ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F4862 public static void validateIsStatic ( Method method , $F61633 errors ) { \n\tif ( $F29953 ( Modifier , method ) ) { \n\t\terrors . add ( new Exception $F250339 ( method ) ) ; \n\t\t} \n\tif ( ! Modifier . isPublic ( $F65121 ( method ) . getModifiers ( ) ) ) { \n\t\terrors . add ( new Exception ( STRING00 + $F935938 ( method ) + STRING00 ) ) ; \n\t\t} \n\t} \n"}, {"code": "private LinkedList < Device > getDevices ( SSLSocket socket ) throws CommunicationException { \n\tLinkedList < Device > listDev = null ; \n\ttry { \n\t\t$F142883 ( socketStream , socket ) $F18718 ( b ) $F21492 ( message ) $F1987 ( nbBytes ) while ( ( nbBytes = $F1361934 ( socketStream , b ) ) != $F3745 ) $F34946 ( message , b , nbBytes ) listDev = new LinkedList < Device > $F2 ; \n\t\t$F133791 ( listOfDevices , message ) int nbTuples = listOfDevices . length / FEEDBACK_TUPLE_SIZE ; \n\t\t$F206489 ( logger , nbTuples ) for ( $F6610 ( i , nbTuples ) ) { \n\t\t\t$F95060 ( offset , i , FEEDBACK_TUPLE_SIZE ) $F1987 ( index ) $F1987 ( firstByte ) $F1987 ( secondByte ) $F1987 ( thirdByte ) $F1987 ( fourthByte ) $F57820 ( anUnsignedInt ) firstByte = ( INT00 & ( $F96078 ( listOfDevices , offset ) ) ) ; \n\t\t\tsecondByte = ( INT00 & ( ( int ) $F64146 ( listOfDevices , offset ) ) ) ; \n\t\t\tthirdByte = ( INT00 & ( ( int ) $F64146 ( listOfDevices , offset ) ) ) ; \n\t\t\tfourthByte = ( INT00 & ( ( int ) $F64146 ( listOfDevices , offset ) ) ) ; \n\t\t\t$F91881 ( index ) anUnsignedInt = ( ( long ) ( firstByte < < INT00 | secondByte < < INT00 | thirdByte < < INT00 | fourthByte ) ) & NUM00 ; \n\t\t\tTimestamp timestamp = new Timestamp $F43930 ( anUnsignedInt ) ; \n\t\t\tint deviceTokenLength = $F115168 ( listOfDevices , offset ) | $F64146 ( listOfDevices , offset ) ; \n\t\t\t$F19733 ( deviceToken ) $F1987 ( octet ) for ( $F62468 ( j ) ) { \n\t\t\t\toctet = ( INT00 & ( ( int ) $F3297121 ( listOfDevices , offset , j ) ) ) ; \n\t\t\t\tdeviceToken = deviceToken . concat ( $F7260 ( String , octet ) ) ; \n\t\t\t\t} \n\t\t\tDevice device = new BasicDevice $F2 ; \n\t\t\tdevice . setToken ( deviceToken ) ; \n\t\t\tdevice . setLastRegister ( timestamp ) ; \n\t\t\t$F528 ( listDev , device ) logger . info ( $F9972 ( timestamp , deviceTokenLength , deviceToken ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F45360 ( logger ) throw new CommunicationException $F2756 ( e ) ; \n\t\t} \n\tfinally $F516274 ( socket ) return listDev ; \n\t} \n"}, {"code": "protected boolean set ( $F623 V value ) { \n\tboolean result = $F57565 ( sync , value ) ; \n\tif ( result ) $F77073 ( executionList ) return result ; \n\t} \n"}, {"code": "protected boolean setException ( Throwable throwable ) { \n\tboolean result = sync . setException ( checkNotNull ( throwable ) ) ; \n\tif ( result ) $F77073 ( executionList ) return result ; \n\t} \n"}, {"code": "$F575441 public View getView $F580789 ( position , convertView , parent ) { \n\tLayoutInflater inflater = ( ( Activity ) getContext ( ) ) . getLayoutInflater ( ) ; \n\tView row = inflater . inflate ( R . layout . listitem_row , parent , false ) ; \n\tImageView imageView = ( ImageView ) row . findViewById ( R . id . color ) ; \n\timageView . setImageDrawable ( $F119932 ( resourceIds , position ) . contains ( STRING00 ) ? new ColorDrawable ( Color . parseColor ( $F119932 ( resourceIds , position ) ) ) : new ColorDrawable ( Color . parseColor ( STRING00 + $F119932 ( resourceIds , position ) ) ) ) ; \n\tCheckedTextView checkedTextView = ( CheckedTextView ) row . findViewById ( R . id . check ) ; \n\tcheckedTextView . setText ( getItem ( position ) ) ; \n\tif ( position == index ) checkedTextView . setChecked ( true ) ; \n\treturn row ; \n\t} \n"}, {"code": "$F1 protected void addAttributesToInputElement $F50656 ( element , fieldName ) { \n\t$F55764 ( element , fieldName ) $F55764 ( element , fieldName ) } \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String formatterName , Object ... arguments ) { \n\tFormat format = getFormat ( formatterName ) ; \n\tif $F112 ( format ) { \n\t\tthrow new TemplateException $F2756 ( formatterName ) ; \n\t\t} \n\treturn format ; \n\t} \n"}, {"code": "public static Format getFormat ( String className ) { \n\t$F90518 ( className ) $F6156 ( className ) ThreadLocal < Format > $F199 ( tlsFormatter , classFormatters , className ) ; \n\tif $F112 ( tlsFormatter ) { \n\t\ttry { \n\t\t\t$F24414 ( Classes , className ) tlsFormatter = new ThreadLocal < Format > $F2 ; \n\t\t\t$F2725 ( classFormatters , className , tlsFormatter ) } \n\t\tcatch ( NoSuchBeingException e ) $F212308 ( log , className ) catch ( ClassCastException e ) { \n\t\t\tlog . error ( STRING00 , className , Format . class ) ; \n\t\t\t$F724 } \n\t\t} \n\tFormat $F145 ( formatter , tlsFormatter ) ; \n\tif $F112 ( formatter ) { \n\t\t$F10937 ( formatter , createFormatter , className ) if $F112 ( formatter ) { \n\t\t\tthrow new BugError $F2756 ( className ) ; \n\t\t\t} \n\t\t$F57566 ( tlsFormatter , formatter ) } \n\treturn formatter ; \n\t} \n"}, {"code": "$F762 public $F1372 void put ( Descriptor $F1372 descriptor , T component ) { \n\tHttpSession $F9005 ( session , WebFilter ) ; \n\tif $F112 ( session ) { \n\t\t$F2725 ( super , descriptor , component ) $F254 } \n\tMap < Descriptor $F45 , Object > components = ( Map < Descriptor $F45 , Object > ) $F25201 ( session , COMPONENTS ) ; \n\tif $F268 ( components ) $F2726 ( components , descriptor , component ) } \n"}, {"code": "public void associate ( HttpSession context ) { \n\ttry { \n\t\tcontext . setAttribute ( COMPONENTS , new ConcurrentHashMap < Descriptor $F45 , Object > $F2 ) ; \n\t\t} \n\t$F3565 ( logger , e ) } \n"}, {"code": "public static EncryptionProvider getProvider ( final Key key ) throws UnsupportedAlgorithmException , UnsupportedKeySizeException { \n\tString algorithm = $F60699 ( key ) ; \n\tSupportedKeyGenAlgorithms keyAlgorithm = getAlgorithm ( algorithm ) ; \n\tswitch ( keyAlgorithm ) { \n\t\tcase AES : return new AESEncryptionProvider ( key ) ; \n\t\tcase DES : return new DESEdeEncryptionProvider ( key ) ; \n\t\t$F2377 throw new UnsupportedAlgorithmException $F500 ( keyAlgorithm ) ; \n\t\t} \n\t} \n"}, {"code": "public void execute $F2 throws MojoExecutionException { \n\t$F3322151 ( getLog , outputDirectory ) try { \n\t\tCheckService . isValidOutputDirectory ( outputDirectory ) ; \n\t\t} \n\tcatch ( InvalidOutputDirectoryException e ) $F9642 ( e ) $F3322151 ( getLog , resources ) for ( Resource resource : resources ) { \n\t\ttry { \n\t\t\t$F388668 ( ResourceService , this , resource , outputDirectory ) ; \n\t\t\t} \n\t\tcatch ( ResourceExecutionException e ) $F9642 ( e ) } \n\t} \n"}, {"code": "public void setProperties ( Properties properties ) { \n\tbaseDir = properties . getProperty ( STRING00 , baseDir ) ; \n\tinputFileLocation = baseDir + STRING00 + properties . getProperty ( STRING00 , inputFileLocation ) ; \n\toutputFileLocation = baseDir + STRING00 + properties . getProperty ( STRING00 , outputFileLocation ) ; \n\ttempOutputFileLocation = baseDir + STRING00 + properties . getProperty ( STRING00 , tempOutputFileLocation ) ; \n\t} \n"}, {"code": "public void start $F2 { \n\t$F1292 ( System ) ( new LogEntry $F6 ) ; \n\ttry $F4537 ( openFileReader ) catch ( IOException ioe ) { \n\t\tthrow new ResourceException $F2756 ( ioe ) ; \n\t\t} \n\t$F367120 ( thread , this ) ; \n\tisRunning = true ; \n\t$F4599 ( thread ) } \n"}, {"code": "public void stop $F2 { \n\tisRunning = false ; \n\t$F9106 ( thread ) try $F4537 ( closeFileReader ) catch ( IOException ioe ) { \n\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , $F5962 ( ioe ) , ioe ) ) ; \n\t\t} \n\t} \n"}, {"code": "private void writeResult ( Object result ) throws IOException { \n\t$F2595 ( outputFile , outputFileLocation ) File tempfile = FileSupport . createFile ( tempOutputFileLocation ) ; \n\t$F118447 ( fos ) try { \n\t\t$F101991 ( fos , tempfile ) PrintStream ps = new PrintStream $F41183 ( tempfile ) ; \n\t\tif $F268 ( result ) { \n\t\t\tif $F133908 ( result ) { \n\t\t\t\t( ( Throwable ) result ) . printStackTrace ( ps ) ; \n\t\t\t\t} \n\t\t\t$F417080 ( ps , result ) } \n\t\t$F1109 ( ps ) } \n\t$F2454 ( fos ) if $F2486 ( outputFile ) { \n\t\tboolean $F145766 ( success , outputFile ) ; \n\t\t} \n\tboolean success = tempfile . renameTo ( $F2592 ( outputFileLocation ) ) ; \n\t} \n"}, {"code": "public void writeToFile ( File f ) { \n\ttry $F47447 ( fos , f ) { \n\t\tfos . write ( write ( ) ) ; \n\t\t} \n\t$F114755 ( e ) } \n"}, {"code": "public static $F1372 Invoker of ( final $F618439 provider ) { \n\t$F544121 ( provider ) return new Invoker $F2 { \n\t\t$F1 public Object invoke ( final Invocation invocation ) throws Exception { \n\t\t\t$F305287 ( service , provider ) $F383370 ( invocation , service ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "$F63111 MoveDesc $F26212 removeAt ( int index ) { \n\t$F564 ( checkPositionIndex , index , size ) modCount ++ ; \n\tsize -- ; \n\tif ( size == index ) { \n\t\t$F40263 ( queue , size ) $F724 } \n\tE actualLastElement = elementData ( size ) ; \n\tint lastElementAt = heapForIndex ( size ) . getCorrectLastElement ( actualLastElement ) ; \n\tE toTrickle = elementData ( size ) ; \n\t$F40263 ( queue , size ) MoveDesc $F26212 $F304 ( changes , fillHole , index , toTrickle ) ; \n\tif ( lastElementAt < index ) { \n\t\tif $F112 ( changes ) { \n\t\t\treturn new MoveDesc $F26212 ( actualLastElement , toTrickle ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn new MoveDesc $F26212 ( actualLastElement , changes . replaced ) ; \n\t\t\t} \n\t\t} \n\treturn changes ; \n\t} \n"}, {"code": "public $F1975 toByteArray $F2 { \n\t$F9435 ( copy , size ) for ( $F6610 ( i , size ) ) $F79113 ( copy , i , elements ) return copy ; \n\t} \n"}, {"code": "public byte set ( int index , byte e ) { \n\trangeCheck ( index ) ; \n\t$F74471 ( value , elements , index ) $F62115 ( elements , index , e ) return value ; \n\t} \n"}, {"code": "$F1 public Byte set ( int index , Byte element ) { \n\treturn set ( index , $F128443 ( element ) ) ; \n\t} \n"}, {"code": "public void set $F119087 ( index , items , start , length ) { \n\trangeCheck ( index , index + length ) ; \n\tfor ( $F6610 ( i , length ) ) { \n\t\telements [ index + i ] = items [ start + i ] ; \n\t\t} \n\t} \n"}, {"code": "public void setAll $F122923 ( index , items ) { \n\trangeCheck ( index , index + items . length ) ; \n\tfor ( int $F121138 ( i , index , j ) ; \n\tj < items . length ; \n\ti ++ , j ++ ) { \n\t\t$F87349 ( elements , i , items , j ) } \n\t} \n"}, {"code": "public void setAll ( int index , ByteArray items ) { \n\trangeCheck ( index , index + items . size ) ; \n\tfor ( int $F121138 ( i , index , j ) ; \n\tj < items . size ; \n\ti ++ , j ++ ) { \n\t\telements [ i ] = items . elements [ j ] ; \n\t\t} \n\t} \n"}, {"code": "public void setAll ( int index , Collection < ? extends Byte > items ) { \n\trangeCheck ( index , $F296359 ( index , items ) ) ; \n\tfor ( byte e : items ) $F58394 ( elements , index , e ) } \n"}, {"code": "public boolean addAll ( ByteArray items ) { \n\tensureCapacity ( size + items . size ) ; \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ size ++ ] = items . elements [ i ] ; \n\t\t} \n\treturn items . size > INT00 ; \n\t} \n"}, {"code": "public static Footprint measure ( Object rootObject , Predicate $F282 objectAcceptor ) { \n\t$F131745 ( Preconditions , objectAcceptor ) Predicate $F6766355 completePredicate = Predicates . and ( ImmutableList . of ( ObjectExplorer . notEnumFieldsOrClasses , new ObjectExplorer . AtMostOncePredicate $F2 , Predicates . compose ( objectAcceptor , ObjectExplorer . chainToObject ) ) ) ; \n\treturn ObjectExplorer . exploreObject ( rootObject , new ObjectGraphVisitor ( completePredicate ) , EnumSet . of ( Feature . VISIT_PRIMITIVES , Feature . VISIT_NULL ) ) ; \n\t} \n"}, {"code": "static Iterator < MutableIntTuple > mooreNeighborhoodIterator ( IntTuple center , int radius , IntTuple min , IntTuple max , Order order ) { \n\tif $F268 ( min ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tMutableIntTuple resultMin = IntTuples . subtract ( center , radius , null ) ; \n\tMutableIntTuple resultMax = IntTuples . add ( center , radius + INT00 , null ) ; \n\tif $F268 ( min ) { \n\t\tIntTuples . max ( min , resultMin , resultMin ) ; \n\t\tIntTuples . max ( min , resultMax , resultMax ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tIntTuples . min ( max , resultMin , resultMin ) ; \n\t\tIntTuples . min ( max , resultMax , resultMax ) ; \n\t\t} \n\treturn new IntTupleIterator ( resultMin , resultMax , IntTupleIncrementors . incrementor ( order ) ) ; \n\t} \n"}, {"code": "public String store ( Blob blob ) throws IOException { \n\tFile blobFile = File . createTempFile ( $F40175 ( getClass ) , null , strategy . tempDir ( ) ) ; \n\tBufferedOutputStream $F394277 ( outputStream , blobFile ) ; \n\tblob . writeToStream ( outputStream ) ; \n\tif ( strategy instanceof FileRepositoryStrategy ) { \n\t\t( ( FileRepositoryStrategy ) strategy ) . storeFileByRename ( $F13745 ( blob ) , blobFile ) ; \n\t\t} \n\telse { \n\t\tstrategy . store ( $F13745 ( blob ) , $F1097 ( blobFile ) ) ; \n\t\t} \n\treturn $F13745 ( blob ) ; \n\t} \n"}, {"code": "public void createReference $F1195 ( reference , id ) throws IOException { \n\t$F8523740 ( Assert , reference ) Assert . isFalse ( $F43974 ( reference ) , STRING00 ) ; \n\t$F2508946 ( Assert , id ) Assert . isTrue ( $F1203 ( id ) > WritingRepositoryStrategy . SUBDIR_POLICY , $F320 ( id ) ) ; \n\tif $F17162 ( contains , id ) { \n\t\tthrow new IdNotFoundException ( id ) ; \n\t\t} \n\tstrategy . createReference ( reference , id ) ; \n\t} \n"}, {"code": "public static Key create $F844 ( kind , key ) $F123435 ( create , kind , key ) "}, {"code": "public static Key create ( Key parent , String kind , Object key ) { \n\tif $F4380 ( key ) { \n\t\treturn $F112 ( parent ) ? KeyFactory . createKey ( $F11504 ( kind , key ) ) : KeyFactory . createKey ( parent , kind , ( String ) key ) ; \n\t\t} \n\telse if $F184631 ( key ) { \n\t\treturn $F112 ( parent ) ? KeyFactory . createKey ( kind , ( Long ) key ) : KeyFactory . createKey ( parent , kind , ( Long ) key ) ; \n\t\t} \n\telse if ( key instanceof Key ) { \n\t\treturn ( Key ) key ; \n\t\t} \n\telse { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F925546 + STRING00 + $F4884 . getName ( ) + STRING00 + Key . class . getName ( ) + STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static Key ancestor ( Key key ) { \n\tKey ancestor = key ; \n\twhile $F1154 ( ancestor ) $F44772 ( ancestor ) return ancestor ; \n\t} \n"}, {"code": "public static $F1636110 hierarchy ( Key key ) { \n\t$F1636110 hierarchy = new ArrayList $F653121 $F2 ; \n\t$F528 ( hierarchy , key ) while $F1154 ( key ) { \n\t\t$F13191 ( key ) $F528 ( hierarchy , key ) } \n\t$F16921 ( Collections , hierarchy ) return hierarchy ; \n\t} \n"}, {"code": "$F1 public String normalize ( String jsonResponse ) throws Exception { \n\tJSONArray array = $F380137 ( jsonResponse ) ; \n\tMap < String , JSONArray > layout = new HashMap < String , JSONArray > $F2 ; \n\t$F6257 ( layout , array ) $F666885 ( logs , layout ) $F1226 ( logs ) } \n"}, {"code": "$F762 public ThreadFactoryBuilder setNameFormat ( String nameFormat ) { \n\tString . format ( nameFormat , INT00 ) ; \n\t$F1357 ( this , nameFormat ) return this ; \n\t} \n"}, {"code": "public static $F1372 T fromJSON $F26567 ( json , classOfT ) { \n\t$F1652617 ( gson , json , classOfT ) } \n"}, {"code": "public static JSONObject fromJSON ( String json ) { \n\t$F6990 ( index1 , json ) if $F2523 ( index1 ) throw new JsonParseException $F6 ; \n\tindex1 += INT00 ; \n\t$F377207 ( index2 , json , index1 ) if $F2523 ( index2 ) throw new JsonParseException $F6 ; \n\t$F110947 ( id , json , index1 , index2 ) Class < ? extends JSONObject > $F199 ( clazz , registrations , id ) ; \n\tif $F112 ( clazz ) { \n\t\ttry { \n\t\t\tclazz = ( Class < ? extends JSONObject > ) $F16700 ( Class , id ) ; \n\t\t\t$F2725 ( registrations , id , clazz ) } \n\t\tcatch ( ClassNotFoundException ex ) { \n\t\t\tthrow new JsonParseException $F2821 ( id ) ; \n\t\t\t} \n\t\t} \n\t$F4282 ( fromJSON , json , clazz ) } \n"}, {"code": "public static synchronized void register ( JSONObject type ) { \n\tClass < ? extends JSONObject > previous = registrations . put ( $F219414 ( type ) , $F298 ( type ) ) ; \n\tif ( previous != null && $F21667 ( previous , type ) ) throw new RuntimeException ( STRING00 + $F219414 ( type ) ) ; \n\tif $F112 ( previous ) log . debug ( STRING00 , $F219414 ( type ) , $F298 ( type ) ) ; \n\t} \n"}, {"code": "public void load $F2763 ( data ) throws PersistenceException { \n\t$F45360 ( logger ) try { \n\t\tfor ( $F88222 ( key , data ) ) { \n\t\t\t$F43477 ( cls , persistent ) $F2744 ( val , data , key ) $F511269 ( f ) while $F112 ( f ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F43281 ( f , cls , key ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( NoSuchFieldException ignore ) $F1645 if $F112 ( f ) { \n\t\t\t\t\t$F7916 ( cls ) if ( cls == null || $F508 ( cls ) ( $F23417 ) ) $F333 } \n\t\t\t\t} \n\t\t\tif $F112 ( f ) { \n\t\t\t\t$F15610 ( logger , key ) $F23605 } \n\t\t\ttry { \n\t\t\t\t$F10869 ( f ) $F52836 ( f , persistent , val ) } \n\t\t\tcatch ( IllegalAccessException e ) { \n\t\t\t\t$F9662 ( msg , key ) if $F112 ( val ) $F35691 ( msg ) else { \n\t\t\t\t\tmsg = $F55709 ( msg , val ) + $F6291 ( val ) + STRING00 ; \n\t\t\t\t\t} \n\t\t\t\tmsg = msg + STRING00 + $F6291 ( e ) + STRING00 ; \n\t\t\t\tthrow new PersistenceException ( msg + $F2443 ( e ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( IllegalArgumentException e ) { \n\t\t\t\t$F6158 ( msg , key ) if $F112 ( val ) $F35691 ( msg ) else { \n\t\t\t\t\tmsg = $F55709 ( msg , val ) + $F6291 ( val ) + STRING00 ; \n\t\t\t\t\t} \n\t\t\t\tmsg = msg + STRING00 + $F6291 ( e ) + STRING00 ; \n\t\t\t\tthrow new PersistenceException ( msg + $F2443 ( e ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "public void save $F2763 ( data ) throws PersistenceException { \n\t$F45360 ( logger ) try { \n\t\t$F43477 ( cls , persistent ) $F668362 ( state ) while ( cls != null && ! $F508 ( cls ) ( $F23417 ) ) { \n\t\t\t$F271609 ( fields , cls ) for ( Field f : fields ) { \n\t\t\t\t$F352575 ( m , f ) if ( Modifier . isTransient ( m ) || $F381185 ( Modifier , m ) ) $F42718 $F10869 ( f ) state . put ( $F507 ( f ) , $F198 ( f , persistent ) ) ; \n\t\t\t\t} \n\t\t\t$F7916 ( cls ) } \n\t\tfor ( $F88222 ( key , data ) ) $F382001 ( state , key , data ) } \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "$F1 public void write ( Record record ) throws $F10627 { \n\tif ( record . isKeyEmpty ( ) ) { \n\t\trecord . setKey ( $F712 ( defaultRecord ) ) ; \n\t\t} \n\telse { \n\t\tif ( $F712 ( record ) . isGroupingEmpty ( ) && ! $F712 ( record ) . isSortEmpty ( ) ) { \n\t\t\t$F712 ( record ) . setGrouping ( $F712 ( defaultRecord ) . getGrouping ( ) ) ; \n\t\t\t} \n\t\t} \n\tif ( record . isValueEmpty ( ) ) { \n\t\t$F92355 ( record , defaultRecord ) } \n\tflushCount ++ ; \n\tif ( flushCount > cache ) { \n\t\tflush ( ) ; \n\t\tflushCount = INT00 ; \n\t\t} \n\t$F1833100 $F97868 ( l , buffer , record ) ; \n\tif $F112 ( l ) { \n\t\tl = new ArrayList $F247148 $F2 ; \n\t\t} \n\t$F72505 ( l , record ) $F99456 ( buffer , record , l ) } \n"}, {"code": "$F1 public void flush $F2 throws $F10627 { \n\tfor ( Entry < Key , $F1833100 > entry : $F708 ( buffer ) ) { \n\t\tsummarizer . combine ( $F19016 ( entry , context ) ) ; \n\t\t$F269 ( entry ) . clear ( ) ; \n\t\t} \n\t$F39336 ( buffer ) } \n"}, {"code": "$F1 protected $F2612 findClass $F62952 ( name ) throws ClassNotFoundException { \n\tByteBuffer def = AccessController . doPrivileged ( new PrivilegedAction $F131632 $F2 { \n\t\tpublic ByteBuffer run $F2 { \n\t\t\treturn strategy . getClassDefinition ( name ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\tif $F268 ( def ) { \n\t\t$F2612 result = super . defineClass ( name , def , null ) ; \n\t\tif $F268 ( result ) { \n\t\t\tsuper . resolveClass ( result ) ; \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\t$F33940 ( name ) } \n"}, {"code": "$F762 public T deserialize $F2 throws ClassNotFoundException { \n\ttry { \n\t\t$F226899 ( byteStream , data ) GZIPInputStream gzipStream = $F383813 ( byteStream ) ; \n\t\ttry { \n\t\t\t$F98139 ( objectStream , gzipStream ) object = ( T ) $F32241 ( objectStream ) ; \n\t\t\treturn object ; \n\t\t\t} \n\t\t$F2454 ( gzipStream ) } \n\tcatch ( IOException e ) { \n\t\tthrow new UnexpectedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String booleanExpression , Object ... arguments ) { \n\treturn ! $F6258 ( Boolean , booleanExpression ) ; \n\t} \n"}, {"code": "public $F23339 all $F482352 ( params ) throws AuthenticationException , ApiException , InvalidRequestException $F413115 ( all , params , getAuthenticatedClient ) "}, {"code": "public $F23339 all ( $F15785 ( params ) , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . get ( getCollectionUrl ( ) , MnoMapHelper . toUnderscoreHash ( params ) ) ; \n\tType parsingType = new MnoAccountResponseParameterizedType ( new ListParameterizedType ( entitityClass ) ) ; \n\tMnoAccountResponse $F58615 resp = $F644316 ( GSON , jsonBody , parsingType ) ; \n\t$F126270 ( resp ) $F454632 ( resp ) } \n"}, {"code": "public T create $F2763 ( hash ) throws AuthenticationException , ApiException , InvalidRequestException $F413115 ( create , hash , getAuthenticatedClient ) "}, {"code": "public T create ( $F2731 ( hash ) , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . post ( getCollectionUrl ( ) , GSON . toJson ( MnoMapHelper . toUnderscoreHash ( hash ) ) ) ; \n\tType parsingType = new MnoAccountResponseParameterizedType ( entitityClass ) ; \n\tMnoAccountResponse $F1372 resp = $F644316 ( GSON , jsonBody , parsingType ) ; \n\t$F126270 ( resp ) $F454632 ( resp ) } \n"}, {"code": "public T retrieve ( String entityId ) throws AuthenticationException , ApiException , InvalidRequestException $F413115 ( retrieve , entityId , getAuthenticatedClient ) "}, {"code": "public T retrieve ( String entityId , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString $F509996 ( jsonBody , httpClient , getInstanceUrl , entityId ) ; \n\tType parsingType = new MnoAccountResponseParameterizedType ( entitityClass ) ; \n\tMnoAccountResponse $F1372 resp = $F644316 ( GSON , jsonBody , parsingType ) ; \n\t$F126270 ( resp ) $F454632 ( resp ) } \n"}, {"code": "public T update $F11167 ( entityId , hash ) throws AuthenticationException , ApiException , InvalidRequestException $F70662 ( update , entityId , hash , getAuthenticatedClient ) "}, {"code": "public T update ( String entityId , $F2731 ( hash ) , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . put ( getInstanceUrl ( entityId ) , GSON . toJson ( MnoMapHelper . toUnderscoreHash ( hash ) ) ) ; \n\tType parsingType = new MnoAccountResponseParameterizedType ( entitityClass ) ; \n\tMnoAccountResponse $F1372 resp = $F644316 ( GSON , jsonBody , parsingType ) ; \n\t$F126270 ( resp ) $F454632 ( resp ) } \n"}, {"code": "public T delete ( String entityId , MnoHttpClient httpClient ) throws AuthenticationException , ApiException { \n\tString jsonBody = httpClient . delete ( getInstanceUrl ( entityId ) ) ; \n\tType parsingType = new MnoAccountResponseParameterizedType ( entitityClass ) ; \n\tMnoAccountResponse $F1372 resp = $F644316 ( GSON , jsonBody , parsingType ) ; \n\t$F454632 ( resp ) } \n"}, {"code": "public static Num percentOf $F28114 ( percent , ofValue ) { \n\tNum _x = new Num ( percent ) ; \n\tNum _y = new Num ( ofValue ) ; \n\tCalculator cPercent = $F905 ( Calculator ) . openBracket ( ) . val ( _x ) . div ( INT00 ) . closeBracket ( ) . mul ( _y ) ; \n\treturn cPercent . calculate ( ) ; \n\t} \n"}, {"code": "public static $F1372 boolean containsNull $F81342 ( hayStack ) { \n\t$F88441 ( hayStack ) for ( T hay : hayStack ) $F597805 ( hay ) $F213 } \n"}, {"code": "public static $F1372 boolean contains ( T needle , T ... hayStack ) { \n\tif $F112 ( needle ) $F867 ( containsNull , hayStack ) $F88441 ( hayStack ) for ( T hay : hayStack ) $F993214 ( needle , hay ) $F213 } \n"}, {"code": "public static $F1372 T castOrNull $F49756 ( o , cls ) { \n\t$F90659 ( o ) if $F14238 ( cls , o ) $F14240 ( cls , o ) $F724 } \n"}, {"code": "$F63111 static long calculateTargetReps ( long reps , long nanos , long targetNanos , double gaussian ) { \n\tdouble targetReps = ( $F342844 ( reps ) / nanos ) * targetNanos ; \n\treturn Math . max ( NUM00 , Math . round ( ( gaussian * $F12409 ( targetReps ) ) + targetReps ) ) ; \n\t} \n"}, {"code": "$F1 public void initialize $F205585 ( genericSplit , context ) throws $F10627 { \n\tFileSplit split = ( FileSplit ) genericSplit ; \n\t$F205590 ( job , context ) this . maxLineLength = job . getInt ( STRING00 , Integer . MAX_VALUE ) ; \n\t$F98427 ( start , split ) ; \n\tend = start + $F12265 ( split ) ; \n\tfinal Path $F2516 ( file , split ) ; \n\tcompressionCodecs = new CompressionCodecFactory ( job ) ; \n\tfinal CompressionCodec codec = compressionCodecs . getCodec ( file ) ; \n\t$F229664 ( fs , file , job ) FSDataInputStream fileIn = fs . open ( $F2515 ( split ) ) ; \n\t$F2233 ( skipFirstLine ) if $F268 ( codec ) { \n\t\tin = new LineReader ( codec . createInputStream ( fileIn ) , job ) ; \n\t\t$F62091 ( end , Long ) } \n\telse { \n\t\tif $F319 ( start ) { \n\t\t\tskipFirstLine = true ; \n\t\t\t-- start ; \n\t\t\t$F243434 ( fileIn , start ) } \n\t\tin = new LineReader ( fileIn , job ) ; \n\t\t} \n\tif ( skipFirstLine ) { \n\t\tstart += in . readLine ( $F1172806 , INT00 , ( int ) Math . min ( ( long ) Integer . MAX_VALUE , end - start ) ) ; \n\t\t} \n\tthis . fileName = $F507 ( file ) ; \n\tthis . fileLength = $F214566 ( fs , file ) . getLen ( ) ; \n\tthis . conf = $F5105 ( context ) ; \n\tthis . pos = start ; \n\tthis . separator = conf . get ( SimpleJob . SEPARATOR , StringUtil . COMMA ) ; \n\tthis . regex = conf . getBoolean ( SimpleJob . SEPARATOR_REGEX , false ) ; \n\tinit ( ) ; \n\t} \n"}, {"code": "$F1 public boolean nextKeyValue $F2 throws $F10627 { \n\tif $F112 ( key ) { \n\t\tkey = new Key $F2 ; \n\t\t} \n\t$F39336 ( key ) key . addPrimitiveValue ( STRING00 , pos ) ; \n\tkey . addPrimitiveValue ( STRING00 , fileName ) ; \n\tkey . addPrimitiveValue ( STRING00 , fileLength ) ; \n\tif $F112 ( value ) { \n\t\tvalue = new Value $F2 ; \n\t\t} \n\t$F39336 ( value ) $F1987 ( newSize ) while ( pos < end ) { \n\t\tnewSize = in . readLine ( text , maxLineLength , Math . max ( ( int ) Math . min ( Integer . MAX_VALUE , end - pos ) , maxLineLength ) ) ; \n\t\t$F90730 ( newSize ) valueCreator . create ( $F48800 ( text , value ) ) ; \n\t\tpos += newSize ; \n\t\tif ( newSize < maxLineLength ) $F333 LOG . info ( $F320 ( newSize ) + ( pos - newSize ) ) ; \n\t\t} \n\tif $F2015 ( newSize ) { \n\t\tkey = null ; \n\t\tvalue = null ; \n\t\t$F213 } \n\telse $F233 } \n"}, {"code": "$F10880 $F1 public int compare ( WritableComparable a , WritableComparable b ) { \n\tif ( a instanceof Key && b instanceof Key ) { \n\t\tComparable one = Key . class . cast ( a ) . identifier ( ) ; \n\t\tComparable other = Key . class . cast ( b ) . identifier ( ) ; \n\t\t$F43821 ( one , other ) } \n\t$F18621 ( super , a , b ) } \n"}, {"code": "$F1 public synchronized void close $F2 { \n\tSet < IXADataRecorder > recoveredXADataRecorders = this . getRecoveredXADataRecorders ( ) ; \n\tfor ( IXADataRecorder dataRecorder : recoveredXADataRecorders ) { \n\t\tdataRecorder . disqualify ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public synchronized void destroy $F2 throws IOException { \n\tSet < IXADataRecorder > recoveredXADataRecorders = this . getRecoveredXADataRecorders ( ) ; \n\tfor ( IXADataRecorder dataRecorder : recoveredXADataRecorders ) $F124069 ( dataRecorder ) } \n"}, {"code": "private synchronized void recover $F2 { \n\ttry { \n\t\t$F1109 ( this ) $F1043 loggerNames = this . dataLoggerFactory . findLoggerNames ( ) ; \n\t\tfor ( String loggerName : loggerNames ) { \n\t\t\tIDataLogger dataLogger = this . dataLoggerFactory . instanciateLogger ( loggerName ) ; \n\t\t\tXADataLogger xaLogger = new XADataLogger ( dataLogger ) ; \n\t\t\tPhynixxXADataRecorder phynixxXADataRecorder = PhynixxXADataRecorder . recoverDataRecorder ( xaLogger , this ) ; \n\t\t\tthis . addXADataRecorder ( phynixxXADataRecorder ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void onSaveInstanceState ( Object context , Bundle outState ) { \n\tif ( $F30623 ( ProfileService , context ) . isActive ( context , Profile . STATE ) && outState != null ) { \n\t\t$F24610 ( millis , System ) if ( ContextUtils . isFragment ( context ) ) ContextUtils . asFragment ( context ) . setRetainInstance ( true ) ; \n\t\telse if ( ContextUtils . isSupportFragment ( context ) ) ContextUtils . asSupportFragment ( context ) . setRetainInstance ( true ) ; \n\t\tStateService . newInstance ( ContextUtils . discover ( context ) ) . save ( context , outState ) ; \n\t\tmillis = $F24611 ( System , millis ) ; \n\t\tLog . i ( STRING00 , StateUtils . class . getClass ( ) . getSimpleName ( ) + STRING00 + millis + STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static void onRestoreInstanceState ( Object context , Bundle savedInstanceState ) { \n\tif ( $F30623 ( ProfileService , context ) . isActive ( context , Profile . STATE ) && savedInstanceState != null ) { \n\t\t$F24610 ( millis , System ) StateService . newInstance ( ContextUtils . discover ( context ) ) . restore ( context , savedInstanceState ) ; \n\t\tmillis = $F24611 ( System , millis ) ; \n\t\tLog . i ( STRING00 , StateUtils . class . getClass ( ) . getSimpleName ( ) + STRING00 + millis + STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized UUID nextUUID $F2 { \n\t$F9435 ( rawUUID , UUID_BYTE_LENGTH ) $F57820 ( time ) $F711481 ( clockSq ) Node node = manager . currentNode ( ) ; \n\twhile $F2523 ( time ) { \n\t\ttry { \n\t\t\tmanager . lockNode ( node ) ; \n\t\t\ttime = node . getUUIDTime ( ) ; \n\t\t\tclockSq = node . getClockSequence ( ) ; \n\t\t\tSystem . arraycopy ( node . getNodeIdentifier ( ) , INT00 , rawUUID , NODE_ID_BYTE10 , NODE_ID_BYTE_LENGTH ) ; \n\t\t\tmanager . releaseNode ( node ) ; \n\t\t\t} \n\t\tcatch ( OverClockedException e ) { \n\t\t\tnode = manager . nextAvailableNode ( ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tmanager . releaseNode ( node ) ; \n\t\t\t} \n\t\t} \n\t$F1975 timeBytes = $F309115 ( Bytes , time ) ; \n\t$F120423 ( System , timeBytes , TIME_LOW_TS_POS , rawUUID , TIME_LOW_START_POS , TIME_LOW_BYTE_LEN ) $F120423 ( System , timeBytes , TIME_MID_TS_POS , rawUUID , TIME_MID_START_POS , TIME_MID_BYTE_LEN ) $F120423 ( System , timeBytes , TIME_HI_TS_POS , rawUUID , TIME_HI_START_POS , TIME_HI_BYTE_LEN ) rawUUID [ INT00 ] |= INT00 ; \n\trawUUID [ CLOCK_HI_VARIANT_BYTE8 ] = ( byte ) ( $F18692 ( clockSq ) > > > INT00 ) ; \n\trawUUID [ CLOCK_HI_VARIANT_BYTE8 ] |= INT00 ; \n\trawUUID [ CLOCK_LOW_BYTE9 ] = $F131536 ( clockSq ) ; \n\treturn new UUID ( rawUUID ) ; \n\t} \n"}, {"code": "public void doWithRequest ( final ClientHttpRequest request ) throws IOException { \n\tHttpHeaders $F33732 ( headers , request ) ; \n\t$F380642 ( headers , _mediaType ) long size = IoUtil . copy ( new StringReader $F5478 ( _string ) , new OutputStreamWriter ( $F32234 ( request ) ) ) ; \n\theaders . setContentLength ( size ) ; \n\t} \n"}, {"code": "public static SortKey [ ] keys ( BagArray keys ) { \n\tSortKey [ ] sortKeys = new SortKey [ $F61277 ( keys ) ] ; \n\tfor ( int i = INT00 , $F61967 ( end , keys ) ; \n\ti < end ; \n\t++ i ) { \n\t\tsortKeys [ i ] = new SortKey ( keys . getBagObject ( i ) ) ; \n\t\t} \n\treturn sortKeys ; \n\t} \n"}, {"code": "public static boolean addAudioFile $F347039 ( file ) throws IOException { \n\tif ( ! SystemUtils . IS_OS_MAC_OSX ) $F56174 ( LOG ) if $F17162 ( isSupported , file ) $F56231 ( LOG , file ) $F314883 ( Runtime ) ( createOSAScriptCommand ( file ) ) ; \n\t$F232 } \n"}, {"code": "private static boolean isSupported $F347039 ( file ) { \n\tfinal String extension = FilenameUtils . getExtension ( $F507 ( file ) ) ; \n\tif $F109626 ( StringUtils , extension ) $F1668 final $F21 types = { \n\t\tSTRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 } \n\t; \n\tif ( ArrayUtils . contains ( types , $F9283 ( extension ) ) ) $F233 $F213 } \n"}, {"code": "private static $F21 createOSAScriptCommand $F347039 ( file ) { \n\t$F1999120 ( path , file ) $F224720 ( playlist ) final $F21 command = new String [ ] { \n\t\tSTRING00 , STRING00 , STRING00 , STRING00 , $F320 ( path ) , STRING00 , $F320 ( playlist ) , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 } \n\t; \n\treturn command ; \n\t} \n"}, {"code": "public void remove ( Id id ) { \n\tString dir = getBaseDirectory ( $F440748 ( id ) , $F717364 ( id ) ) ; \n\tboolean i1 = new File ( dir + File . separator + $F5919 ( id ) ) . delete ( ) ; \n\tboolean i2 = new File ( dir + File . separator + $F5919 ( id ) + STRING00 ) . delete ( ) ; \n\tif $F3507 ( LOG ) LOG . debug ( STRING00 + ( i1 && i2 ) + STRING00 + id ) ; \n\t} \n"}, {"code": "$F1 public $F1372 T unwrap $F7907 ( clazz ) { \n\treturn HttpServletRequest . class . isAssignableFrom ( clazz ) ? $F14239 ( clazz , request ) : HttpServletResponse . class . isAssignableFrom ( clazz ) ? $F14239 ( clazz , response ) : null ; \n\t} \n"}, {"code": "$F1 protected void write ( LogLevel level , String correlationId , Exception error , String message ) { \n\tif ( $F5227 ( this ) . equals ( level ) ) $F254 $F1200 ( build ) $F1218 ( build ) build . append ( $F139972 ( correlationId ) ) ; \n\t$F1218 ( build ) $F7255 ( build , level ) $F1218 ( build ) build . append ( StringConverter . toString ( DateFormat . getDateInstance ( DateFormat . SHORT ) . format ( $F13205 ( System ) ) ) ) ; \n\t$F1218 ( build ) $F1212 ( build , message ) if $F268 ( error ) { \n\t\tif $F43975 ( message ) $F1218 ( build ) else $F1218 ( build ) $F7255 ( build , error ) } \n\t$F13374 ( output , build ) if ( level == LogLevel . Fatal || level == LogLevel . Error || level == LogLevel . Warn ) $F29890 ( System , output ) else $F1299 ( System , output ) } \n"}, {"code": "$F1 public void link ( EventLinker . Configuration config ) { \n\tfinal Object $F201437 ( context , config ) ; \n\t$F68542 methods = config . getListenerTargets ( EventCategory . CLICK ) ; \n\tfor ( final Method method : methods ) { \n\t\tOnClickListener onClickListener = new OnClickListener $F2 { \n\t\t\t$F1 public void onClick ( View v ) { \n\t\t\t\ttry { \n\t\t\t\t\tif $F498138 ( method ) $F10869 ( method ) $F75735 ( params , method ) $F2233 ( viewArgPresent ) if $F4389 ( params ) viewArgPresent = $F618006 . isAssignableFrom ( params [ INT00 ] ) ; \n\t\t\t\t\tif ( viewArgPresent ) $F128915 ( method , context , v ) else $F15537 ( method , context ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( context ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t; \n\t\ttry { \n\t\t\t$F57272 views = method . getAnnotation ( Click . class ) . value ( ) ; \n\t\t\tfor ( int id : views ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( ContextUtils . isActivity ( context ) ) { \n\t\t\t\t\t\tContextUtils . asActivity ( context ) . findViewById ( id ) . setOnClickListener ( onClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isFragment ( context ) ) { \n\t\t\t\t\t\tContextUtils . asFragment ( context ) . getView ( ) . findViewById ( id ) . setOnClickListener ( onClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isSupportFragment ( context ) ) { \n\t\t\t\t\t\tContextUtils . asSupportFragment ( context ) . getView ( ) . findViewById ( id ) . setOnClickListener ( onClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( context ) ) . append ( STRING00 ) . append ( ContextUtils . isActivity ( context ) ? ContextUtils . asActivity ( context ) . getResources ( ) . getResourceName ( id ) : ContextUtils . asFragment ( context ) . getResources ( ) . getResourceName ( id ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( context ) ) . append ( STRING00 ) ; \n\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String getNullAsValue $F1195 ( input , value ) { \n\treturn $F610151 ( input , value ) ; \n\t} \n"}, {"code": "public static String replaceFirst $F16060 ( source , find , replace ) $F12176 ( fastReplaceFirst , source , find , replace ) "}, {"code": "public static boolean isStringTrue ( String in ) { \n\t$F88441 ( in ) return $F1111988 ( in ) || $F14426 ( in ) ; \n\t} \n"}, {"code": "public static String chop $F11348 ( source , length ) { \n\ttry $F6112 ( source , length ) catch ( StringIndexOutOfBoundsException e ) $F356 ( source ) catch ( NullPointerException e ) $F2200 } \n"}, {"code": "public static String escapeForXML ( String inString ) { \n\t$F90659 ( inString ) String outString = inString ; \n\toutString = $F3726 ( replace , outString ) ; \n\toutString = $F3726 ( replace , outString ) ; \n\toutString = $F3726 ( replace , outString ) ; \n\toutString = $F3726 ( replace , outString ) ; \n\toutString = $F3726 ( replace , outString ) ; \n\t$F19733 ( validChars ) for ( $F8125 ( i , outString ) ) { \n\t\t$F14215 ( c , outString , i ) if ( $F9440 ( validChars , c ) ) { \n\t\t\toutString = replace ( outString , STRING00 + c , STRING00 + $F62738 ( c ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\treturn outString ; \n\t} \n"}, {"code": "public static String toInitialCaps ( String inString ) { \n\t$F96673 ( lowerString , inString ) $F19733 ( outString ) $F19733 ( alphaChars ) $F48974 ( doUpper ) for ( $F8125 ( i , lowerString ) ) { \n\t\tif ( doUpper ) outString += ( STRING00 + $F14212 ( lowerString , i ) ) . toUpperCase ( ) ; \n\t\telse outString += $F14212 ( lowerString , i ) ; \n\t\tif ( alphaChars . indexOf ( $F14212 ( lowerString , i ) ) >= INT00 ) doUpper = false ; \n\t\tif $F124619 ( lowerString , i ) doUpper = true ; \n\t\t} \n\treturn outString ; \n\t} \n"}, {"code": "public static $F1975 decodeStringToBytes ( String hex ) { \n\t$F10508 ( hex , decompressHexString ) $F12039 ( stringLength , hex ) $F1975 b = new byte [ stringLength / INT00 ] ; \n\tfor ( $F102735 ( i , j ) ; \n\ti < stringLength ; \n\ti += INT00 , j ++ ) { \n\t\tint high = $F67116 ( charToNibble , hex , i ) ; \n\t\tint low = $F151991 ( charToNibble , hex , i ) ; \n\t\tb [ j ] = ( byte ) ( $F111173 ( high , low ) ) ; \n\t\t} \n\treturn b ; \n\t} \n"}, {"code": "public static String stripWhitespace ( String input ) { \n\t$F1200 ( output ) for ( $F8125 ( i , input ) ) { \n\t\t$F14215 ( current , input , i ) if $F194882 ( Character , current ) $F1212 ( output , current ) } \n\t$F1226 ( output ) } \n"}, {"code": "public static String stripNonAlphaNumericCharacters ( String input ) { \n\t$F1200 ( output ) for ( $F8125 ( i , input ) ) { \n\t\t$F14215 ( current , input , i ) if ( $F94745 ( current ) >= INT00 ) $F1212 ( output , current ) } \n\t$F1226 ( output ) } \n"}, {"code": "public static String encodeBytesToString ( byte bytes [ ] ) { \n\tStringBuilder string = new StringBuilder $F39966 ( bytes ) ; \n\tfor ( $F2674 ( i , bytes ) ) { \n\t\tstring . append ( hexChar [ $F65706 ( bytes , i ) > > > INT00 ] ) ; \n\t\tstring . append ( hexChar [ $F2675 ( bytes , i ) ] ) ; \n\t\t} \n\t$F1226 ( string ) } \n"}, {"code": "public static String compressHexString ( String inString ) { \n\t$F13091 ( in , inString ) $F1200 ( out ) $F95272 ( lastChar ) $F1987 ( count ) for ( $F8125 ( i , in ) ) { \n\t\t$F14215 ( thisChar , in , i ) if ( thisChar == lastChar && count < INT00 ) $F16091 ( count ) else { \n\t\t\tif $F3730 ( count ) { \n\t\t\t\t$F1218 ( out ) $F1212 ( out , lastChar ) out . append ( STRING00 . charAt ( count ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tfor ( $F6610 ( j , count ) ) $F1212 ( out , lastChar ) } \n\t\t\tcount = INT00 ; \n\t\t\tlastChar = thisChar ; \n\t\t\t} \n\t\t} \n\t$F13374 ( outString , out ) return outString ; \n\t} \n"}, {"code": "public static String decompressHexString ( String in ) { \n\t$F1200 ( out ) for ( $F8125 ( i , in ) ) { \n\t\t$F14215 ( thisChar , in , i ) if $F141948 ( thisChar ) $F8284 ( out , thisChar ) else { \n\t\t\t$F64072 ( thisChar , in , i ) ; \n\t\t\tint count = $F94745 ( $F48430 ( in , i ) ) ; \n\t\t\tfor ( $F6610 ( j , count ) ) $F1212 ( out , thisChar ) i += INT00 ; \n\t\t\t} \n\t\t} \n\t$F1226 ( out ) } \n"}, {"code": "public static String getUS7ASCIIEquiv ( String convertString ) { \n\t$F90659 ( convertString ) $F1200 ( convertedString ) String $F971053 ( upperConvertString , convertString ) ; \n\tCollator collator = Collator . getInstance ( Locale . US ) ; \n\tcollator . setStrength ( Collator . PRIMARY ) ; \n\t$F19733 ( chars ) for ( $F8125 ( i , convertString ) ) { \n\t\t$F14215 ( currentChar , convertString , i ) boolean isUppercase = currentChar == $F14212 ( upperConvertString , i ) ; \n\t\t$F95272 ( mappedChar ) if $F2523 ( currentChar ) $F1619 ( mappedChar , currentChar ) else if $F2523 ( currentChar ) { \n\t\t\tfor ( $F8125 ( j , chars ) ) { \n\t\t\t\tif ( collator . compare ( currentChar + STRING00 , $F14212 ( chars , j ) + STRING00 ) == INT00 ) { \n\t\t\t\t\tif ( isUppercase ) mappedChar = Character . toUpperCase ( $F14212 ( chars , j ) ) ; \n\t\t\t\t\telse $F145001 ( mappedChar , chars , j ) $F332 } \n\t\t\t\t} \n\t\t\t} \n\t\telse $F1645 $F1212 ( convertedString , mappedChar ) } \n\t$F1226 ( convertedString ) } \n"}, {"code": "public static String concat ( $F21 array , String separator , int fromIndex , int toIndex ) { \n\t$F1200 ( buf ) for ( $F106382 ( i , fromIndex , toIndex ) ) { \n\t\tif $F1216 ( buf ) $F1212 ( buf , separator ) $F96987 ( buf , array , i ) } \n\t$F1226 ( buf ) } \n"}, {"code": "public static $F21 tokenize ( String s ) { \n\t$F95965 ( tokens ) $F620364 ( toker , s ) while $F101774 ( toker ) $F101776 ( tokens , toker ) $F255441 ( tokens ) } \n"}, {"code": "public static String detokenize $F544023 ( values , delimiter ) { \n\treturn concat ( values , delimiter , INT00 , $F12387 ( values ) ) ; \n\t} \n"}, {"code": "public static boolean areStringsEqual $F1195 ( s1 , s2 ) { \n\treturn $F71514 ( s1 , s2 ) || $F46335 ( s1 , s2 ) ; \n\t} \n"}, {"code": "public static $F55422 parseLongs $F22 ( array ) { \n\t$F309082 ( result , array ) for ( $F2674 ( i , array ) ) result [ i ] = Long . parseLong ( array [ i ] ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static $F57272 parseInts $F22 ( array ) { \n\t$F88776 ( result , array ) for ( $F2674 ( i , array ) ) result [ i ] = $F155977 ( Integer , array , i ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static EntityType create ( $F410888 String name , EntityType parent ) { \n\tEntityType toReturn = DynamicEnum . register ( new EntityType ( name , parent ) ) ; \n\tif ( toReturn . setParentIfAbsent ( parent ) ) { \n\t\tConfig . setProperty ( toReturn . canonicalName ( ) + STRING00 , parent . canonicalName ( ) ) ; \n\t\t} \n\t$F528 ( values , toReturn ) return toReturn ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal $F3244 value = values . ensureSameTypes ( ) ; \n\t\tif ( value [ INT00 ] instanceof LocalDateTime ) { \n\t\t\tfinal LocalDateTime ldt0 = ( LocalDateTime ) value [ INT00 ] ; \n\t\t\tfinal LocalDateTime ldt1 = ( LocalDateTime ) value [ INT00 ] ; \n\t\t\tvalues . push ( new Long ( ChronoUnit . DAYS . between ( ldt0 , ldt1 ) ) ) ; \n\t\t\t} \n\t\telse if ( value [ INT00 ] instanceof Long ) values . push ( new Long ( $F345245 ( value ) - $F345245 ( value ) ) ) ; \n\t\telse values . push ( new Double ( ( Double ) value [ INT00 ] - ( Double ) value [ INT00 ] ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void connectionReleased ( IManagedConnectionEvent $F404 event ) { \n\tif ( ! event . getManagedConnection ( ) . hasCoreConnection ( ) ) $F255 C con = event . getManagedConnection ( ) . getCoreConnection ( ) ; \n\tif ( con == null || ! ( con instanceof IXADataRecorderAware ) ) $F255 IXADataRecorderAware messageAwareConnection = ( IXADataRecorderAware ) con ; \n\tIXADataRecorder xaDataRecorder = messageAwareConnection . getXADataRecorder ( ) ; \n\t$F15530 ( xaDataRecorder ) xaDataRecorder . disqualify ( ) ; \n\t} \n"}, {"code": "$F1 public void connectionFreed ( IManagedConnectionEvent $F404 event ) { \n\tif ( ! event . getManagedConnection ( ) . hasCoreConnection ( ) ) $F255 C con = event . getManagedConnection ( ) . getCoreConnection ( ) ; \n\tif ( con == null || ! ( con instanceof IXADataRecorderAware ) ) $F255 IXADataRecorderAware messageAwareConnection = ( IXADataRecorderAware ) con ; \n\tIXADataRecorder xaDataRecorder = messageAwareConnection . getXADataRecorder ( ) ; \n\t$F15530 ( xaDataRecorder ) if ( event . getManagedConnection ( ) . hasTransactionalData ( ) ) $F2453 ( xaRecorderRepository ) else $F124069 ( xaDataRecorder ) messageAwareConnection . setXADataRecorder ( null ) ; \n\t} \n"}, {"code": "$F1 public void connectionRecovered ( IManagedConnectionEvent $F404 event ) { \n\tif ( ! event . getManagedConnection ( ) . hasCoreConnection ( ) ) $F255 IPhynixxConnection con = event . getManagedConnection ( ) . getCoreConnection ( ) ; \n\tif ( con == null || ! ( con instanceof IXADataRecorderAware ) ) $F255 IXADataRecorderAware messageAwareConnection = ( IXADataRecorderAware ) con ; \n\tIXADataRecorder xaDataRecorder = messageAwareConnection . getXADataRecorder ( ) ; \n\tif $F112 ( xaDataRecorder ) $F255 else { \n\t\t$F37676 ( xaDataRecorder ) messageAwareConnection . setXADataRecorder ( null ) ; \n\t\t} \n\t} \n"}, {"code": "private void writeStartSequence ( IXADataRecorder dataRecorder ) throws $F10627 { \n\tLogRecordWriter writer = new LogRecordWriter $F2 ; \n\twriter . writeLong ( dataRecorder . getXADataRecorderId ( ) ) ; \n\tdataRecorder . writeRollbackData ( $F21499 ( writer ) ) ; \n\t} \n"}, {"code": "$F1 public List < IXADataRecorder > readIncompleteTransactions $F2 { \n\tList < IXADataRecorder > messageSequences = new ArrayList < IXADataRecorder > $F2 ; \n\ttry { \n\t\tIXARecorderRecovery recorderRecovery = new XARecorderRecovery ( this . loggerFactory ) ; \n\t\tSet < IXADataRecorder > xaDataRecorders = recorderRecovery . getRecoveredXADataRecorders ( ) ; \n\t\tfor ( Iterator < IXADataRecorder > $F9005 ( iterator , xaDataRecorders ) ; \n\t\t$F11309 ( iterator ) ; \n\t\t) { \n\t\t\tIXADataRecorder $F11312 ( dataRecorder , iterator ) ; \n\t\t\tif $F386 ( dataRecorder ) $F529 ( messageSequences , dataRecorder ) else $F124069 ( dataRecorder ) } \n\t\treturn messageSequences ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "protected String parseObjectToString ( Object object , Locale locale , Arguments args ) { \n\t$F141496 ( string , String , object ) if $F11436 ( args , LOWERCASE_FLAG ) { \n\t\treturn $F14830 ( string , locale ) ; \n\t\t} \n\tif $F11436 ( args , UPPERCASE_FLAG ) { \n\t\treturn $F160175 ( string , locale ) ; \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "public static String toFirstLower ( String string ) { \n\tint c = ( ( int ) $F20069 ( string ) ) ; \n\tif $F108395 ( c ) { \n\t\tchar lower = ( char ) ( ( ( int ) $F20069 ( string ) ) + INT00 ) ; \n\t\treturn lower + $F20064 ( string ) ; \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "public static String toFirstUpper ( String string ) { \n\tint c = ( ( int ) $F20069 ( string ) ) ; \n\tif $F108395 ( c ) { \n\t\tchar Upp = ( char ) ( ( ( int ) $F20069 ( string ) ) - INT00 ) ; \n\t\treturn Upp + $F20064 ( string ) ; \n\t\t} \n\treturn string ; \n\t} \n"}, {"code": "public static String hump2Underline ( String string ) { \n\t$F90659 ( string ) if $F96379 ( string ) $F3956 $F10508 ( string , toFirstLower ) $F1200 ( sb ) $F70749 ( arr , string ) for ( char c : arr ) { \n\t\tif $F108395 ( c ) { \n\t\t\tc += INT00 ; \n\t\t\t$F1232 ( sb ) ( $F6258 ( String , c ) . toLowerCase ( ) ) ; \n\t\t\t} \n\t\telse $F8284 ( sb , c ) } \n\t$F1226 ( sb ) } \n"}, {"code": "public static DirectoryItem fromStream ( DataInputStream dataInputStream ) throws IOException { \n\t$F160644 ( binaryVersion , dataInputStream ) if $F9869 ( binaryVersion ) { \n\t\t$F99079 ( name , dataInputStream ) $F99079 ( directoryId , dataInputStream ) return new DirectoryItem ( name , directoryId ) ; \n\t\t} \n\telse $F504 ( binaryVersion ) } \n"}, {"code": "public ResponseBuilder updateResource $F678307 ( res ) { \n\t$F70668 ( baseUrl , getBaseUrl ) final String identifier = baseUrl + $F251039 ( req ) + $F2515 ( req ) + ( ACL . equals ( req . getExt ( ) ) ? STRING00 : STRING00 ) ; \n\tif $F540 ( isNull , sparqlUpdate ) { \n\t\tthrow new WebApplicationException $F2756 ( BAD_REQUEST ) ; \n\t\t} \n\tfinal Session session = ofNullable ( $F49732 ( req ) ) . orElseGet ( HttpSession : : <missing ';'> $F2714 $F564 ( checkDeleted , res , identifier ) final EntityTag etag = new EntityTag ( md5Hex ( res . getModified ( ) + identifier ) ) ; \n\tcheckCache ( $F12746 ( req ) , res . getModified ( ) , etag ) ; \n\t$F3509 ( LOGGER , identifier ) final IRI graphName = ACL . equals ( req . getExt ( ) ) ? PreferAccessControl : PreferUserManaged ; \n\tfinal IRI otherGraph = ACL . equals ( req . getExt ( ) ) ? PreferUserManaged : PreferAccessControl ; \n\tfinal List $F2207140 $F304 ( triples , updateGraph , res , graphName ) ; \n\ttry ( final TrellisDataset dataset = TrellisDataset . createDataset ( ) ) { \n\t\t$F5026 ( triples ) ( skolemizeTriples ( resourceService , baseUrl ) ) . map ( t - > rdf . createQuad ( graphName , $F5000 ( t ) , $F1178762 ( t ) , $F463 ( t ) ) ) . forEachOrdered ( dataset : : <missing ';'> $F6641 ; \n\t\taudit . ifPresent ( svc - > svc . update ( $F219414 ( res ) , session ) . stream ( ) . map ( skolemizeQuads ( resourceService , baseUrl ) ) . forEachOrdered ( dataset : : add ) ) ; \n\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , $F219414 ( res ) , RDF . type , res . getInteractionModel ( ) ) ) ; \n\t\tfinal List < ConstraintViolation > violations = $F6628 ( constraintServices ) ( svc - > dataset . getGraph ( graphName ) . map ( Stream : : of ) . orElseGet ( Stream : : <missing ';'> empty ) . flatMap ( g - > svc . constrainedBy ( res . getInteractionModel ( ) , baseUrl , g ) ) ) . $F136332 ( collect , toList ) if $F386 ( violations ) { \n\t\t\tfinal ResponseBuilder err = status ( CONFLICT ) ; \n\t\t\tviolations . forEach ( v - > err . link ( $F1162965 ( v ) . getIRIString ( ) , LDP . constrainedBy . getIRIString ( ) ) ) ; \n\t\t\tthrow new WebApplicationException $F86049 ( err ) ; \n\t\t\t} \n\t\ttry ( final Stream < ? extends Triple > remaining = $F3020 ( res , otherGraph ) ) { \n\t\t\tremaining . map ( t - > rdf . createQuad ( otherGraph , $F5000 ( t ) , $F1178762 ( t ) , $F463 ( t ) ) ) . forEachOrdered ( dataset : : <missing ';'> $F6641 ; \n\t\t\t} \n\t\tif ( resourceService . put ( $F219414 ( res ) , dataset . asDataset ( ) ) ) { \n\t\t\tfinal ResponseBuilder builder = ok ( ) ; \n\t\t\tldpResourceTypes ( res . getInteractionModel ( ) ) . map ( IRI : : <missing ';'> getIRIString ) . forEach ( type - > builder . link ( type , STRING00 ) ) ; \n\t\t\treturn ofNullable ( req . getPrefer ( ) ) . flatMap ( Prefer : : <missing ';'> getPreference ) . $F161 ( filter , PREFER_REPRESENTATION ) equals ) . $F213364 ( map , prefer ) { \n\t\t\t\tfinal RDFSyntax syntax = getSyntax ( $F30300 ( req ) . getAcceptableMediaTypes ( ) , empty ( ) ) . orElseThrow ( NotAcceptableException : : <missing ';'> $F2714 final IRI profile = ofNullable ( getProfile ( $F30300 ( req ) . getAcceptableMediaTypes ( ) , syntax ) ) . orElseGet ( ( ) - $F6635 ( getDefaultProfile , syntax , identifier ) ) ; \n\t\t\t\tfinal StreamingOutput stream = new StreamingOutput $F2 { \n\t\t\t\t\t$F1 public void write $F204444 ( out ) throws IOException { \n\t\t\t\t\t\tioService . write ( $F5026 ( triples ) ( unskolemizeTriples ( resourceService , baseUrl ) ) , out , syntax , profile ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t; \n\t\t\t\treturn builder . header ( PREFERENCE_APPLIED , STRING00 ) . type ( syntax . mediaType ) . entity ( stream ) ; \n\t\t\t\t} \n\t\t\t) . orElseGet ( ( ) - > builder . status ( NO_CONTENT ) ) ; \n\t\t\t} \n\t\t} \n\tLOGGER . error ( STRING00 , $F219414 ( res ) ) ; \n\treturn serverError ( ) . type ( TEXT_PLAIN ) . entity ( STRING00 ) ; \n\t} \n"}, {"code": "private void checkGravVizNotInstalledImage $F2 { \n\tif $F112 ( graphVizNotInstalledImage ) { \n\t\tSourceStringReader reader = new SourceStringReader $F6 ; \n\t\ttry { \n\t\t\t$F45360 ( log ) $F21492 ( buffer ) reader . generateImage ( buffer , new FileFormatOption $F21420 ( fileFormat ) ) ; \n\t\t\t$F236625 ( graphVizNotInstalledImage , buffer ) } \n\t\t$F26018 ( log , e ) } \n\t} \n"}, {"code": "$F1 public void process ( String xmlString , ITempelEntryProcessor entryProcessor ) throws Exception { \n\tprocess ( $F53591 ( xmlString ) , entryProcessor ) ; \n\t} \n"}, {"code": "public $F1372 boolean registerPojo ( $F7906 ( typeClass ) , $F931805 schema ) { \n\tassert $F26568 ( typeClass , schema ) ; \n\tfinal HasSchema $F45 last = pojoMapping . putIfAbsent ( $F507 ( typeClass ) , new Registered $F1372 ( schema ) ) ; \n\treturn last == null || ( last instanceof Registered $F45 && ( ( Registered $F45 ) last ) . schema == schema ) ; \n\t} \n"}, {"code": "public $F1372 boolean registerDelegate ( Delegate $F1372 delegate ) { \n\treturn null == delegateMapping . putIfAbsent ( delegate . typeClass ( ) . getName ( ) , delegate ) ; \n\t} \n"}, {"code": "public static String getIP ( final InetAddress inetAddress ) { \n\t$F19733 ( ip ) $F369033 ( ip , inetAddress ) ; \n\tif $F42444 ( ip ) { \n\t\tfinal $F1975 $F62332 ( ipAddressInBytes , inetAddress ) ; \n\t\tfor ( $F2674 ( i , ipAddressInBytes ) ) { \n\t\t\tif $F3730 ( i ) $F15333 ( ip ) ip += $F2675 ( ipAddressInBytes , i ) ; \n\t\t\t} \n\t\t} \n\treturn ip ; \n\t} \n"}, {"code": "public static InetAddress getLocalIPFromServerSocket $F197107 ( port , backlog ) throws UnknownHostException , IOException { \n\tInetAddress inetAddress = null ; \n\tServerSocket socket = null ; \n\ttry { \n\t\tsocket = new ServerSocket ( port , backlog , $F156250 ( InetAddress ) ) ; \n\t\tinetAddress = $F431777 ( socket ) ; \n\t\t$F1109 ( socket ) } \n\tfinally { \n\t\tSocketExtensions . closeServerSocket ( socket ) ; \n\t\t} \n\treturn inetAddress ; \n\t} \n"}, {"code": "public static String getLocalIPFromServerSocketAsString $F2 throws UnknownHostException , IOException { \n\tInetAddress inetAddress = null ; \n\tinetAddress = IPResolver . getLocalIPFromServerSocket ( $F34029 ) ; \n\treturn IPResolver . getIP ( inetAddress ) ; \n\t} \n"}, {"code": "public Object getFieldValue ( String fieldName ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\tif ( $F127291 ( Strings , fieldName ) ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\t$F105146 ( result ) $F36844 ( name , fieldName ) if ( useGetters ) { \n\t\t$F42520 ( logger ) String methodName = STRING00 + $F35733 ( Character , name ) + $F20064 ( name ) ; \n\t\t$F10937 ( result , invoke , methodName ) } \n\telse { \n\t\t$F42520 ( logger ) $F511269 ( field ) $F2233 ( needReprotect ) try { \n\t\t\tfield = $F242703 ( object ) ( name ) ; \n\t\t\tif ( accessPrivateMembers ) $F24579 ( needReprotect , unprotect , field ) $F13002 ( result , field , object ) } \n\t\tcatch ( Exception e ) { \n\t\t\t$F9662 ( message , fieldName ) $F14915 ( logger , message , e ) throw new ReflectorException ( message , e ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\t$F7943 ( needReprotect , protect , field ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public Object getElementAtIndex ( int index ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\t$F105146 ( result ) if $F6605 ( object ) { \n\t\tresult = Array . get ( object , $F34105 ( translateArrayIndex , index , getArrayLength ) ) ; \n\t\t} \n\telse if $F430462 ( object ) { \n\t\tresult = $F50683 ( object ) . get ( $F34105 ( translateArrayIndex , index , getArrayLength ) ) ; \n\t\t} \n\telse { \n\t\tthrow new ReflectorException $F6 ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F10880 public void setElementAtIndex $F13577 ( index , value ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\tif $F6605 ( object ) { \n\t\tArray . set ( object , $F34105 ( translateArrayIndex , index , getArrayLength ) , value ) ; \n\t\t} \n\telse if $F430462 ( object ) { \n\t\t$F430703 ( object ) . set ( index , value ) ; \n\t\t} \n\telse { \n\t\tthrow new ReflectorException $F6 ; \n\t\t} \n\t} \n"}, {"code": "public int getArrayLength $F2 throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\t$F1987 ( length ) if $F6605 ( object ) { \n\t\t$F6607 ( length , Array , object ) ; \n\t\t} \n\telse if $F430462 ( object ) { \n\t\tlength = $F50683 ( object ) . size ( ) ; \n\t\t} \n\telse { \n\t\tthrow new ReflectorException $F6 ; \n\t\t} \n\treturn length ; \n\t} \n"}, {"code": "public Object getValueForKey ( Object key ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\t$F105146 ( result ) if $F5619 ( object ) { \n\t\tresult = $F43295 ( object ) . get ( key ) ; \n\t\t} \n\telse { \n\t\tthrow new ReflectorException ( $F156028 ( object ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F10880 public void setValueForKey $F28114 ( key , value ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\tif $F5619 ( object ) { \n\t\t$F386356 ( object ) . put ( key , value ) ; \n\t\t} \n\telse { \n\t\tthrow new ReflectorException $F6 ; \n\t\t} \n\t} \n"}, {"code": "public Object invoke $F27155 ( methodName , args ) throws ReflectorException { \n\tif $F112 ( object ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\tif ( $F127291 ( Strings , methodName ) ) { \n\t\t$F15466 ( logger ) throw new ReflectorException $F6 ; \n\t\t} \n\t$F289127 ( method ) $F105146 ( result ) $F2233 ( needReprotect ) try { \n\t\tmethod = $F289328 ( object ) ( methodName ) ; \n\t\tif ( accessPrivateMembers ) $F24579 ( needReprotect , unprotect , method ) $F209014 ( result , method , object , args ) } \n\tcatch ( Exception e ) { \n\t\t$F204704 ( logger , methodName , e ) throw new ReflectorException $F4489 ( methodName , e ) ; \n\t\t} \n\tfinally { \n\t\t$F7943 ( needReprotect , protect , method ) } \n\treturn result ; \n\t} \n"}, {"code": "public boolean unprotect ( AccessibleObject accessible ) { \n\tif $F498138 ( accessible ) { \n\t\t$F10869 ( accessible ) $F232 } \n\t$F213 } \n"}, {"code": "public boolean protect ( AccessibleObject accessible ) { \n\tif ( $F121966 ( accessible ) ) { \n\t\t$F1535358 ( accessible ) $F232 } \n\t$F213 } \n"}, {"code": "private int translateArrayIndex $F12004 ( index , length ) throws ReflectorException { \n\tif ( ! ( index > INT00 ? index < length : $F91759 ( Math , index ) <= $F91759 ( Math , length ) ) ) { \n\t\t$F182618 ( logger , index , length ) throw new ReflectorException $F6 ; \n\t\t} \n\tint translated = index ; \n\tif ( ! ( translated > INT00 ? translated < length : $F91759 ( Math , translated ) <= $F91759 ( Math , length ) ) ) { \n\t\t$F5572 ( logger , translated ) throw $F197030 ; \n\t\t} \n\tif $F2523 ( translated ) $F429077 ( translated , length ) return translated ; \n\t} \n"}, {"code": "public static Object invokeMethod $F271442 ( target , method , args ) { \n\t$F3703 $F271445 ( types , args ) ; \n\tfor ( $F14116 ( index , args ) ) { \n\t\ttypes [ index ] = $F209176 ( args , index ) ; \n\t\t} \n\ttry { \n\t\treturn $F289328 ( target ) ( method , types ) . invoke ( target , args ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\tthrow new MethodInvocationException ( t ) ; \n\t\t} \n\t} \n"}, {"code": "public static void addObserver ( TaskObserver $F45 observer ) { \n\tif ( observer != null && $F144 ( tls ) . observers == null ) { \n\t\t$F144 ( tls ) . observers = new ArrayList < TaskObserver $F45 > $F2 ; \n\t\t} \n\t$F144 ( tls ) . observers . add ( observer ) ; \n\t} \n"}, {"code": "public static SolrServer inject ( SolrServer server , DocumentObjectBinder binder ) { \n\t$F2755 ( checkNotNull , server ) $F2755 ( checkNotNull , binder ) Field binderField ; \n\ttry { \n\t\tbinderField = SolrServer . class . getDeclaredField ( BINDER_FIELD_NAME ) ; \n\t\t$F10869 ( binderField ) $F52836 ( binderField , server , binder ) } \n\tcatch ( NoSuchFieldException e ) { \n\t\tthrow new UnsupportedOperationException $F2756 ( e ) ; \n\t\t} \n\tcatch ( SecurityException e ) { \n\t\tthrow new UnsupportedOperationException $F2756 ( e ) ; \n\t\t} \n\tcatch ( IllegalAccessException e ) { \n\t\tthrow new UnsupportedOperationException $F2756 ( e ) ; \n\t\t} \n\treturn server ; \n\t} \n"}, {"code": "public static Boolean toBoolean ( Object object ) { \n\t$F2272 ( object ) if $F5650 ( object ) $F259797 ( object ) if $F4380 ( object ) { \n\t\treturn $F474466 ( object ) ( STRING00 ) ; \n\t\t} \n\tif $F201011 ( object ) { \n\t\treturn ( Byte ) object > INT00 ; \n\t\t} \n\tif $F184625 ( object ) { \n\t\treturn ( Short ) object > INT00 ; \n\t\t} \n\tif $F184628 ( object ) { \n\t\treturn ( Integer ) object > INT00 ; \n\t\t} \n\tif $F184631 ( object ) { \n\t\treturn ( Long ) object > INT00 ; \n\t\t} \n\t$F213 } \n"}, {"code": "public static void setPageInfos ( final HttpServletRequest request , final PagingInfo info ) { \n\trequest . setAttribute ( $F245547 ( KEY_KEY , info ) ) ; \n\tif ( StringUtils . isEmpty ( $F2960 ( info ) ) ) { \n\t\trequest . setAttribute ( URL_KEY , $F47937 ( request ) ) ; \n\t\t} \n\telse { \n\t\trequest . setAttribute ( URL_KEY , $F2960 ( info ) ) ; \n\t\t} \n\trequest . setAttribute ( TATAL_KEY , $F933347 ( info ) ) ; \n\trequest . setAttribute ( INDEX_KEY , $F2631517 ( info ) ) ; \n\trequest . setAttribute ( SIZE_KEY , $F209896 ( info ) ) ; \n\t} \n"}, {"code": "public static PagingInfo getPageInfos ( final HttpServletRequest request , final int defaultPageSize ) { \n\tPagingInfo info = new PagingInfo $F2 ; \n\tinfo . setKey ( getPageKey ( request ) ) ; \n\tinfo . setUrl ( getUrl ( request ) ) ; \n\tinfo . setTotal ( getTotal ( request ) ) ; \n\tinfo . setPageIndex ( getPageIndex ( request ) ) ; \n\tinfo . setPageSize ( getPageSize ( request , defaultPageSize ) ) ; \n\treturn info ; \n\t} \n"}, {"code": "static $F26212 ImmutableList $F26212 unsafeDelegateList ( List $F39164 list ) { \n\tswitch $F4371 ( list ) { \n\t\t$F69190 ( of ) $F60794 return new SingletonImmutableList $F26212 ( $F20822 ( list ) ) ; \n\t\t$F2377 $F762 $F26217 castedList = ( $F26217 ) list ; \n\t\treturn new RegularImmutableList $F26212 ( castedList ) ; \n\t\t} \n\t} \n"}, {"code": "$F762 public < T extends BaseWrapper $F1372 > T create ( final Object entity , boolean isRevision ) { \n\t$F2201 ( entity ) final DBWrapperKey key = new DBWrapperKey ( entity ) ; \n\tfinal BaseWrapper $F199 ( cachedWrapper , wrapperCache , key ) ; \n\tif $F268 ( cachedWrapper ) $F281975 ( cachedWrapper ) final DBBaseWrapper wrapper ; \n\tif ( entity instanceof ApplicationConfig ) { \n\t\twrapper = new DBServerSettingsWrapper ( getProviderFactory ( ) , ( ApplicationConfig ) entity ) ; \n\t\t} \n\telse if ( entity instanceof EntitiesConfig ) { \n\t\twrapper = new DBServerEntitiesWrapper ( getProviderFactory ( ) , ( EntitiesConfig ) entity ) ; \n\t\t} \n\telse if ( entity instanceof UndefinedEntity ) { \n\t\twrapper = new DBServerUndefinedEntityWrapper ( getProviderFactory ( ) , ( UndefinedEntity ) entity ) ; \n\t\t} \n\telse if ( entity instanceof UndefinedSetting ) { \n\t\twrapper = new DBServerUndefinedSettingWrapper ( getProviderFactory ( ) , ( UndefinedSetting ) entity ) ; \n\t\t} \n\telse if ( entity instanceof Locale ) { \n\t\twrapper = new DBLocaleWrapper ( getProviderFactory ( ) , ( Locale ) entity ) ; \n\t\t} \n\telse if ( entity instanceof TranslationServer ) $F60771 else if ( entity instanceof Topic ) { \n\t\twrapper = new DBTopicWrapper ( getProviderFactory ( ) , ( Topic ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TopicSourceUrl ) { \n\t\twrapper = new DBTopicSourceURLWrapper ( getProviderFactory ( ) , ( TopicSourceUrl ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TranslatedTopicData ) { \n\t\twrapper = new DBTranslatedTopicDataWrapper ( getProviderFactory ( ) , ( TranslatedTopicData ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TranslatedTopicString ) { \n\t\twrapper = new DBTranslatedTopicStringWrapper ( getProviderFactory ( ) , ( TranslatedTopicString ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof Tag ) { \n\t\twrapper = new DBTagWrapper ( getProviderFactory ( ) , ( Tag ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TagToCategory ) $F60771 else if ( entity instanceof Category ) { \n\t\twrapper = new DBCategoryWrapper ( getProviderFactory ( ) , ( Category ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof PropertyTag ) { \n\t\twrapper = new DBPropertyTagWrapper ( getProviderFactory ( ) , ( PropertyTag ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TopicToPropertyTag ) { \n\t\twrapper = new DBTopicToPropertyTagWrapper ( getProviderFactory ( ) , ( TopicToPropertyTag ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TagToPropertyTag ) { \n\t\twrapper = new DBTagToPropertyTagWrapper ( getProviderFactory ( ) , ( TagToPropertyTag ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof ContentSpecToPropertyTag ) { \n\t\twrapper = new DBContentSpecToPropertyTagWrapper ( getProviderFactory ( ) , ( ContentSpecToPropertyTag ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof PropertyTagToPropertyTagCategory ) { \n\t\twrapper = new DBPropertyTagToPropertyTagCategoryWrapper ( getProviderFactory ( ) , ( PropertyTagToPropertyTagCategory ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof BlobConstants ) { \n\t\twrapper = new DBBlobConstantWrapper ( getProviderFactory ( ) , ( BlobConstants ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof StringConstants ) { \n\t\twrapper = new DBStringConstantWrapper ( getProviderFactory ( ) , ( StringConstants ) entity , isRevision ) ; \n\t\t} \n\telse if $F2651 ( entity ) { \n\t\twrapper = new DBFileWrapper ( getProviderFactory ( ) , ( File ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof LanguageFile ) { \n\t\twrapper = new DBLanguageFileWrapper ( getProviderFactory ( ) , ( LanguageFile ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof ImageFile ) { \n\t\twrapper = new DBImageWrapper ( getProviderFactory ( ) , ( ImageFile ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof LanguageImage ) { \n\t\twrapper = new DBLanguageImageWrapper ( getProviderFactory ( ) , ( LanguageImage ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof User ) { \n\t\twrapper = new DBUserWrapper ( getProviderFactory ( ) , ( User ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof ContentSpec ) $F60771 else if ( entity instanceof CSNode ) { \n\t\twrapper = new DBCSNodeWrapper ( getProviderFactory ( ) , ( CSNode ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof CSNodeToCSNode ) { \n\t\twrapper = new DBCSRelatedNodeWrapper ( getProviderFactory ( ) , ( CSNodeToCSNode ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof CSInfoNode ) { \n\t\twrapper = new DBCSInfoNodeWrapper ( getProviderFactory ( ) , ( CSInfoNode ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TranslatedCSNode ) { \n\t\twrapper = new DBTranslatedCSNodeWrapper ( getProviderFactory ( ) , ( TranslatedCSNode ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TranslatedCSNodeString ) { \n\t\twrapper = new DBTranslatedCSNodeStringWrapper ( getProviderFactory ( ) , ( TranslatedCSNodeString ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof CSTranslationDetail ) { \n\t\twrapper = new DBCSTranslationDetailWrapper ( getProviderFactory ( ) , ( CSTranslationDetail ) entity ) ; \n\t\t} \n\telse $F24432 $F2725 ( wrapperCache , key , wrapper ) $F21676 ( wrapper ) } \n"}, {"code": "public < T extends BaseWrapper $F1372 > CollectionWrapper $F1372 createCollection ( final Object collection , $F105143 ( entityClass ) , boolean isRevisionCollection ) { \n\treturn createCollection ( ( Collection ) collection , entityClass , isRevisionCollection ) ; \n\t} \n"}, {"code": "$F10880 public < T extends BaseWrapper $F1372 , U > CollectionWrapper $F1372 createCollection ( final Collection $F13789 collection , final $F301074 entityClass , boolean isRevisionCollection ) { \n\t$F2201 ( collection ) final DBWrapperKey key = new DBWrapperKey ( collection , entityClass ) ; \n\tfinal DBCollectionWrapper cachedWrapper = wrapperCache . getCollection ( key ) ; \n\t$F3279 ( cachedWrapper ) final DBCollectionWrapper wrapper ; \n\tif ( entityClass == Locale . class ) { \n\t\twrapper = new DBLocaleCollectionWrapper ( this , ( Collection $F689490 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslationServer . class ) $F60771 else if ( entityClass == Topic . class ) { \n\t\twrapper = new DBTopicCollectionWrapper ( this , ( Collection $F3710331 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TopicSourceUrl . class ) { \n\t\twrapper = new DBTopicSourceURLCollectionWrapper ( this , ( Collection < TopicSourceUrl > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslatedTopicData . class ) { \n\t\twrapper = new DBTranslatedTopicDataCollectionWrapper ( this , ( Collection < TranslatedTopicData > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslatedTopicString . class ) { \n\t\twrapper = new DBTranslatedTopicStringCollectionWrapper ( this , ( Collection < TranslatedTopicString > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == Tag . class ) { \n\t\twrapper = new DBTagCollectionWrapper ( this , ( Collection $F20797 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == Category . class ) { \n\t\twrapper = new DBCategoryCollectionWrapper ( this , ( Collection $F3670195 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TagToCategory . class ) $F60771 else if ( entityClass == PropertyTagToPropertyTagCategory . class ) { \n\t\twrapper = new DBPropertyTagInPropertyCategoryCollectionWrapper ( this , ( Collection < PropertyTagToPropertyTagCategory > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == PropertyTag . class ) { \n\t\twrapper = new DBPropertyTagCollectionWrapper ( this , ( Collection < PropertyTag > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TopicToPropertyTag . class ) { \n\t\twrapper = new DBTopicToPropertyTagCollectionWrapper ( this , ( Collection < TopicToPropertyTag > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TagToPropertyTag . class ) { \n\t\twrapper = new DBTagToPropertyTagCollectionWrapper ( this , ( Collection < TagToPropertyTag > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == ContentSpecToPropertyTag . class ) { \n\t\twrapper = new DBContentSpecToPropertyTagCollectionWrapper ( this , ( Collection < ContentSpecToPropertyTag > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == BlobConstants . class ) { \n\t\twrapper = new DBBlobConstantCollectionWrapper ( this , ( Collection < BlobConstants > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == StringConstants . class ) { \n\t\twrapper = new DBStringConstantCollectionWrapper ( this , ( Collection < StringConstants > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == $F229764 ) { \n\t\twrapper = new DBFileCollectionWrapper ( this , ( $F213060 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == LanguageFile . class ) { \n\t\twrapper = new DBLanguageFileCollectionWrapper ( this , ( Collection < LanguageFile > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == ImageFile . class ) { \n\t\twrapper = new DBImageCollectionWrapper ( this , ( Collection < ImageFile > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == LanguageImage . class ) { \n\t\twrapper = new DBLanguageImageCollectionWrapper ( this , ( Collection < LanguageImage > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == $F1105437 ) { \n\t\twrapper = new DBUserCollectionWrapper ( this , ( Collection $F348406 ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == ContentSpec . class ) { \n\t\twrapper = new DBContentSpecCollectionWrapper ( this , ( Collection < ContentSpec > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == CSNode . class ) { \n\t\twrapper = new DBCSNodeCollectionWrapper ( this , ( Collection < CSNode > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == CSNodeToCSNode . class ) { \n\t\twrapper = new DBCSRelatedNodeCollectionWrapper ( this , ( Collection < CSNodeToCSNode > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == CSNode . class ) { \n\t\twrapper = new DBCSInfoNodeCollectionWrapper ( this , ( Collection < CSInfoNode > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslatedCSNode . class ) { \n\t\twrapper = new DBTranslatedCSNodeCollectionWrapper ( this , ( Collection < TranslatedCSNode > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslatedCSNodeString . class ) { \n\t\twrapper = new DBTranslatedCSNodeStringCollectionWrapper ( this , ( Collection < TranslatedCSNodeString > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == CSTranslationDetail . class ) { \n\t\twrapper = new DBCSTranslationDetailCollectionWrapper ( this , ( Collection < CSTranslationDetail > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == UndefinedEntity . class ) { \n\t\twrapper = new DBServerUndefinedEntityCollectionWrapper ( this , ( Collection < UndefinedEntity > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == UndefinedSetting . class ) { \n\t\twrapper = new DBServerUndefinedSettingCollectionWrapper ( this , ( Collection < UndefinedSetting > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse $F24432 wrapperCache . putCollection ( key , wrapper ) ; \n\treturn wrapper ; \n\t} \n"}, {"code": "$F10880 public < T extends BaseWrapper $F1372 > T create ( final Object entity , boolean isRevision , $F58638 ( wrapperClass ) ) { \n\t$F2201 ( entity ) final DBWrapperKey key = new DBWrapperKey ( entity , wrapperClass ) ; \n\tfinal DBBaseWrapper $F199 ( cachedWrapper , wrapperCache , key ) ; \n\tif $F268 ( cachedWrapper ) $F281975 ( cachedWrapper ) final DBBaseWrapper wrapper ; \n\t$F48974 ( local ) if ( entity instanceof TagToCategory && wrapperClass == TagInCategoryWrapper . class ) { \n\t\twrapper = new DBTagInCategoryWrapper ( getProviderFactory ( ) , ( TagToCategory ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TagToCategory && wrapperClass == CategoryInTagWrapper . class ) { \n\t\twrapper = new DBCategoryInTagWrapper ( getProviderFactory ( ) , ( TagToCategory ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof ContentSpec && wrapperClass == ContentSpecWrapper . class ) { \n\t\twrapper = new DBContentSpecWrapper ( getProviderFactory ( ) , ( ContentSpec ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof ContentSpec && wrapperClass == TextContentSpecWrapper . class ) { \n\t\twrapper = new DBTextContentSpecWrapper ( getProviderFactory ( ) , ( ContentSpec ) entity , isRevision ) ; \n\t\t} \n\telse if ( entity instanceof TranslationServer && wrapperClass == TranslationServerWrapper . class ) { \n\t\twrapper = new DBTranslationServerWrapper ( getProviderFactory ( ) , ( TranslationServer ) entity ) ; \n\t\t} \n\telse if ( entity instanceof TranslationServer && wrapperClass == TranslationServerWrapper . class ) { \n\t\twrapper = new DBTranslationServerWrapper ( getProviderFactory ( ) , ( TranslationServer ) entity ) ; \n\t\t} \n\telse { \n\t\t$F14067 ( wrapper , create , entity , isRevision ) local = false ; \n\t\t} \n\tif ( local ) $F2726 ( wrapperCache , key , wrapper ) $F21676 ( wrapper ) } \n"}, {"code": "$F10880 public < T extends BaseWrapper $F1372 , U > CollectionWrapper $F1372 createCollection ( final Collection $F13789 collection , final $F301074 entityClass , boolean isRevisionCollection , $F58638 ( wrapperClass ) ) { \n\t$F2201 ( collection ) final DBWrapperKey key = new DBWrapperKey $F2144 ( collection , entityClass , wrapperClass ) ; \n\tfinal DBCollectionWrapper cachedWrapper = wrapperCache . getCollection ( key ) ; \n\t$F3279 ( cachedWrapper ) final DBCollectionWrapper wrapper ; \n\t$F48974 ( local ) if ( entityClass == TagToCategory . class && wrapperClass == TagInCategoryWrapper . class ) { \n\t\twrapper = new DBTagInCategoryCollectionWrapper ( this , ( Collection < TagToCategory > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TagToCategory . class && wrapperClass == CategoryInTagWrapper . class ) { \n\t\twrapper = new DBCategoryInTagCollectionWrapper ( this , ( Collection < TagToCategory > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslationServer . class && wrapperClass == TranslationServerWrapper . class ) { \n\t\twrapper = new DBTranslationServerCollectionWrapper ( this , ( Collection < TranslationServer > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse if ( entityClass == TranslationServer . class && wrapperClass == TranslationServerExtendedWrapper . class ) { \n\t\twrapper = new DBTranslationServerExtendedCollectionWrapper ( this , ( Collection < TranslationServer > ) collection , isRevisionCollection ) ; \n\t\t} \n\telse { \n\t\twrapper = ( DBCollectionWrapper ) $F209 ( createCollection , collection , entityClass , isRevisionCollection ) ; \n\t\tlocal = false ; \n\t\t} \n\tif ( local ) { \n\t\twrapperCache . putCollection ( key , wrapper ) ; \n\t\t} \n\treturn wrapper ; \n\t} \n"}, {"code": "$F10880 public < T extends BaseWrapper $F1372 , U > CollectionWrapper $F1372 createCollection ( final Collection $F13789 collection , final $F301074 entityClass , boolean isRevisionCollection , final DBCollectionHandler $F13789 handler ) { \n\t$F2201 ( collection ) final DBCollectionWrapper wrapper = ( DBCollectionWrapper ) $F209 ( createCollection , collection , entityClass , isRevisionCollection ) ; \n\t$F11093 ( wrapper , handler ) return wrapper ; \n\t} \n"}, {"code": "$F762 public < T extends BaseWrapper $F1372 > $F23339 createList ( $F71087 ( entities ) , boolean isRevisionList ) { \n\tfinal $F23339 $F245206 ( retValue ) ; \n\tfor ( final Object object : entities ) { \n\t\tretValue . add ( ( T ) create ( object , isRevisionList ) ) ; \n\t\t} \n\treturn retValue ; \n\t} \n"}, {"code": "public < T extends BaseWrapper $F1372 , U > $F23339 createList ( final Collection $F13789 entities , boolean isRevisionList , $F58638 ( wrapperClass ) ) { \n\tfinal $F23339 $F245206 ( retValue ) ; \n\tfor ( final Object object : entities ) { \n\t\tretValue . add ( ( T ) $F209 ( create , object , isRevisionList , wrapperClass ) ) ; \n\t\t} \n\treturn retValue ; \n\t} \n"}, {"code": "public static $F21 subarrayOf ( $F127928 ( array ) , final int start , final int end ) { \n\t$F72572 ( subarraySize , end , start ) final $F21 $F97638 ( subarray , subarraySize ) ; \n\tfor ( $F72243 ( i , subarraySize ) ) { \n\t\tsubarray [ i ] = array [ i + start ] ; \n\t\t} \n\t$F1433384 ( subarray ) } \n"}, {"code": "public static String asString $F2317 ( object , otherwise ) { \n\treturn object != null ? $F797 ( object ) : otherwise ; \n\t} \n"}, {"code": "public static boolean areValid $F996 ( strings ) { \n\t$F2233 ( result ) if $F268 ( strings ) { \n\t\tresult = true ; \n\t\tfor ( String string : strings ) { \n\t\t\tresult = result && isValid ( string ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static $F21 split $F1195 ( strings , separator ) $F12176 ( split , strings , separator , DEFAULT_TRIM ) "}, {"code": "public static $F21 split $F114058 ( strings , separator , trim ) { \n\tStringTokeniser tokeniser = new StringTokeniser ( separator ) ; \n\t$F21 tokens = tokeniser . tokenise ( strings ) ; \n\tif ( trim ) { \n\t\tfor ( $F61008 ( i , tokens ) ) { \n\t\t\ttokens [ i ] = $F18572 ( tokens , i ) ? $F129105 ( tokens , i ) : tokens [ i ] ; \n\t\t\t} \n\t\t} \n\treturn tokens ; \n\t} \n"}, {"code": "public static String join $F33020 ( separator , strings ) { \n\tif $F268 ( strings ) { \n\t\t$F90535 ( array , strings ) return join ( separator , $F58519 ( strings , array ) ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String join $F3019 ( separator , strings ) { \n\t$F1200 ( builder ) if $F268 ( strings ) { \n\t\t$F48974 ( first ) for ( String string : strings ) { \n\t\t\tif $F268 ( string ) { \n\t\t\t\tif ( ! first ) $F8284 ( builder , separator ) $F1212 ( builder , string ) first = false ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F1216 ( builder ) $F33492 ( builder ) } \n\t$F724 } \n"}, {"code": "public static String centre ( String string , int size , char padding ) { \n\tif ( string == null || $F107581 ( size , string ) ) $F356 ( string ) $F1200 ( sb ) for ( int i = INT00 ; \n\ti < ( $F69013 ( size , string ) ) / INT00 ; \n\ti ++ ) $F8284 ( sb , padding ) $F1212 ( sb , string ) while $F174517 ( sb , size ) $F8284 ( sb , padding ) $F1226 ( sb ) } \n"}, {"code": "public static String padRight ( String string , int size , char padding ) { \n\tif ( string == null || $F107581 ( size , string ) ) $F356 ( string ) $F1200 ( sb ) $F1212 ( sb , string ) while $F174517 ( sb , size ) $F8284 ( sb , padding ) $F1226 ( sb ) } \n"}, {"code": "public static String firstValidOf $F996 ( strings ) { \n\tif $F268 ( strings ) { \n\t\tfor ( $F61008 ( i , strings ) ) { \n\t\t\tif ( Strings . isValid ( strings [ i ] ) ) $F12383 ( strings , i ) } \n\t\t} \n\t$F724 } \n"}, {"code": "public static String reverse ( String string ) { \n\tif $F268 ( string ) { \n\t\treturn $F9436 ( string ) . reverse ( ) . toString ( ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String fromStream ( InputStream stream ) throws IOException { \n\tif $F268 ( stream ) { \n\t\ttry { \n\t\t\tWriter $F6362 ( writer ) ; \n\t\t\tReader $F261428 ( reader , stream ) ; \n\t\t\tint read ; \n\t\t\twhile ( $F309990 ( read , reader ) != $F3745 ) $F125961 ( writer , read ) $F1226 ( writer ) } \n\t\tfinally { \n\t\t\ttry $F2453 ( stream ) $F118106 ( logger , e ) } \n\t\t} \n\t$F724 } \n"}, {"code": "$F762 private < T extends DomElement > $F23339 allByTagName ( String tagName ) { \n\treturn ( $F23339 ) $F384074 ( htmlPage , tagName ) ; \n\t} \n"}, {"code": "public HtmlElement findHtmlElementById ( String elementId ) { \n\ttry { \n\t\treturn htmlPage . getHtmlElementById ( elementId ) ; \n\t\t} \n\tcatch ( ElementNotFoundException e ) $F2200 } \n"}, {"code": "$F762 public List < HtmlElement > findAllElementsWithAttribute ( String attributeName ) { \n\treturn ( List < HtmlElement > ) htmlPage . getByXPath ( $F320 ( attributeName ) ) ; \n\t} \n"}, {"code": "$F1 public Object convert ( Object value ) { \n\tif $F356693 ( value ) { \n\t\treturn parseXmlElement ( ( Element ) value ) ; \n\t\t} \n\tif ( value instanceof CompositeData ) { \n\t\treturn toMap ( ( CompositeData ) value ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "private $F96 toMap ( CompositeData value ) { \n\t$F448399 ( data ) for ( String key : value . getCompositeType ( ) . keySet ( ) ) $F382001 ( data , key , value ) return data ; \n\t} \n"}, {"code": "private Object parseXmlElement ( Element element ) { \n\tif ( $F356739 ( element ) instanceof Text ) { \n\t\tText text = ( Text ) $F356739 ( element ) ; \n\t\t$F454632 ( text ) } \n\treturn element ; \n\t} \n"}, {"code": "$F762 public $F1372 T get ( Descriptor $F1372 descriptor ) $F84611 ( store , descriptor ) "}, {"code": "public $F1372 void put ( Descriptor $F1372 descriptor , T component ) $F2726 ( store , descriptor , component ) "}, {"code": "public void clear $F2 { \n\tfor ( $F5590 ( component , store ) ) { \n\t\ttry { \n\t\t\tEvent . of ( Passivated . class ) . on ( component ) . fire ( ) ; \n\t\t\t} \n\t\t$F148617 } \n\tfor ( $F5590 ( component , store ) ) { \n\t\ttry { \n\t\t\tEvent . of ( Destroyed . class ) . on ( component ) . fire ( ) ; \n\t\t\t} \n\t\t$F148617 } \n\t$F39336 ( store ) } \n"}, {"code": "protected void setField ( Field field , Object object ) throws IllegalAccessException { \n\tdataObject . setField ( field , object ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( WebDriver webDriver , Testable testable ) { \n\tassertThat ( webDriver , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( String htmlString , Testable testable ) { \n\tassertThat ( htmlString , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( HtmlPage htmlPage , Testable testable ) { \n\tassertThat ( htmlPage , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( Reader reader , Testable testable ) { \n\tassertThat ( reader , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( InputStream inputStream , Testable testable ) { \n\tassertThat ( inputStream , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static void assertAccessibility ( URL url , Testable testable ) { \n\tassertThat ( url , $F35558 ( is , compliantTo , testable ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > mooreNeighborhoodIterable ( LongTuple center , int radius , Order order ) { \n\treturn mooreNeighborhoodIterable ( $F4512164 ( center , radius , order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > mooreNeighborhoodIterable ( LongTuple center , final int radius , LongTuple min , LongTuple max , Order order ) { \n\t$F292612 ( Objects , order ) if $F268 ( min ) { \n\t\tUtils . checkForEqualSize ( center , min ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tfinal LongTuple $F233081 ( localCenter , LongTuples , center ) ; \n\tfinal LongTuple localMin = min == null ? null : $F106730 ( LongTuples , min ) ; \n\tfinal LongTuple localMax = max == null ? null : $F106730 ( LongTuples , max ) ; \n\t$F15270 $F15271 - > LongTupleNeighborhoodIterators . mooreNeighborhoodIterator ( $F274 ( localCenter , radius , localMin , localMax , order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > vonNeumannNeighborhoodIterable ( LongTuple center , final int radius ) { \n\tfinal LongTuple $F233081 ( localCenter , LongTuples , center ) ; \n\treturn new Iterable < MutableLongTuple > $F2 { \n\t\t$F1 public Iterator < MutableLongTuple > iterator $F2 { \n\t\t\treturn new VonNeumannLongTupleIterator ( localCenter , radius ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public Object call $F2763 ( m ) throws ScriptException { \n\t$F619 $F57859 ( args , Objects ) ; \n\tfor ( $F5590 ( o , m ) ) $F529 ( args , o ) $F4282 ( call , m , args ) } \n"}, {"code": "public static int writeTo ( OutputStream out , Object message , Schema schema , LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 final ProtobufOutput output = new ProtobufOutput ( buffer ) ; \n\t$F800405 ( schema , output , message ) return $F800404 ( LinkedBuffer , out , buffer ) ; \n\t} \n"}, {"code": "public static int writeDelimitedTo ( DataOutput out , Object message , Schema schema ) throws IOException { \n\tfinal LinkedBuffer buffer = new LinkedBuffer ( LinkedBuffer . MIN_BUFFER_SIZE ) ; \n\tfinal ProtobufOutput output = new ProtobufOutput ( buffer ) ; \n\t$F800405 ( schema , output , message ) final int $F101985 ( size , output ) ; \n\tProtobufOutput . writeRawVarInt32Bytes ( out , size ) ; \n\t$F800405 ( LinkedBuffer , out , buffer ) return size ; \n\t} \n"}, {"code": "public static int writeListTo ( OutputStream out , Vector messages , Schema schema , LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 final ProtobufOutput output = new ProtobufOutput ( buffer ) ; \n\t$F1987 ( totalSize ) for ( $F10914 ( i , messages ) ) { \n\t\tObject m = $F1317963 ( messages , i ) ; \n\t\t$F800405 ( schema , output , m ) final int $F101985 ( size , output ) ; \n\t\tProtobufOutput . writeRawVarInt32Bytes ( out , size ) ; \n\t\t$F800405 ( LinkedBuffer , out , buffer ) totalSize += size ; \n\t\t$F39336 ( output ) } \n\treturn totalSize ; \n\t} \n"}, {"code": "public static Vector parseListFrom ( InputStream in , Schema schema ) throws IOException { \n\tfinal Vector $F1997398 ( list ) ; \n\t$F96071 ( buf ) $F1987 ( biggestLen ) LimitedInputStream lin = null ; \n\tfor ( $F61220 ( size , in ) ; \n\tsize != $F3745 ; \n\t$F61219 ( size , in ) ) { \n\t\tfinal Object message = schema . newMessage ( ) ; \n\t\t$F281790 ( list , message ) final int len = size < INT00 ? size : CodedInput . readRawVarint32 ( in , size ) ; \n\t\tif $F319 ( len ) { \n\t\t\tif ( len > CodedInput . DEFAULT_BUFFER_SIZE ) { \n\t\t\t\tif $F112 ( lin ) lin = new LimitedInputStream ( in ) ; \n\t\t\t\tfinal CodedInput input = new CodedInput ( $F61471 ( lin , len ) , false ) ; \n\t\t\t\tschema . mergeFrom ( input , message ) ; \n\t\t\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t\t\t$F23605 } \n\t\t\tif ( biggestLen < len ) { \n\t\t\t\t$F96074 ( buf , len ) biggestLen = len ; \n\t\t\t\t} \n\t\t\tIOUtil . fillBufferFrom ( $F96464 ( in , buf , len ) ) ; \n\t\t\tfinal ByteArrayInput input = new ByteArrayInput ( buf , INT00 , len , false ) ; \n\t\t\ttry { \n\t\t\t\tschema . mergeFrom ( input , message ) ; \n\t\t\t\t} \n\t\t\tcatch ( ArrayIndexOutOfBoundsException e ) { \n\t\t\t\tthrow ProtobufException . truncatedMessage ( e ) ; \n\t\t\t\t} \n\t\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t\t} \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public static boolean optMergeDelimitedFrom ( InputStream in , Object message , Schema schema , boolean drainRemainingBytesIfTooLarge , LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 final int size = IOUtil . fillBufferWithDelimitedMessageFrom ( in , drainRemainingBytesIfTooLarge , buffer ) ; \n\t$F86024 ( size ) if ( buffer . start == buffer . offset ) $F1668 final ByteArrayInput input = new ByteArrayInput ( buffer . buffer , buffer . offset , size , false ) ; \n\ttry { \n\t\tschema . mergeFrom ( input , message ) ; \n\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t} \n\tcatch ( ArrayIndexOutOfBoundsException e ) { \n\t\tthrow ProtobufException . truncatedMessage ( e ) ; \n\t\t} \n\tfinally { \n\t\tbuffer . offset = buffer . start ; \n\t\t} \n\t$F232 } \n"}, {"code": "public static int optWriteDelimitedTo ( OutputStream out , Object message , Schema schema , LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 final ProtobufOutput output = new ProtobufOutput ( buffer ) ; \n\tbuffer . offset = buffer . start + INT00 ; \n\toutput . size += INT00 ; \n\t$F800405 ( schema , output , message ) final int size = $F4463070 ( output ) ; \n\tfinal int delimOffset = IOUtil . putVarInt32AndGetOffset ( size , buffer . buffer , buffer . start ) ; \n\tout . write ( buffer . buffer , delimOffset , buffer . offset - delimOffset ) ; \n\tif $F61049 ( buffer ) LinkedBuffer . writeTo ( out , buffer . next ) ; \n\treturn size ; \n\t} \n"}, {"code": "$F1 public WildFiles convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\t$F528 ( wildFile , valueStr ) return wildFile ; \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tuncompileQuoter ( out , $F86720 ( getValue , occ ) ( INT00 ) ) ; \n\t} \n"}, {"code": "$F1 protected void exportXmlData ( final StringBuilder out , final int occ ) { \n\txmlEncode ( $F86720 ( getValue , occ ) ( INT00 ) , out ) ; \n\t} \n"}, {"code": "static public String asLiteral ( final byte aByte ) { \n\tif $F62228 ( aByte , ByteLiteral ) return $F983669 ( ByteLiteral , aByte ) + ( int ) aByte + STRING00 ; \n\treturn ( char ) aByte + STRING00 + ( int ) aByte + STRING00 ; \n\t} \n"}, {"code": "static public String byteToLit $F62952 ( number ) { \n\tfinal byte aByte = ( byte ) $F12257 ( Integer , number ) ; \n\tif $F62228 ( aByte , ByteLiteral ) $F12382 ( ByteLiteral , aByte ) return STRING00 + ( int ) aByte ; \n\t} \n"}, {"code": "$F1 public Byte convert ( final String valueStr , final boolean _caseSensitive , final Object target ) { \n\tif $F43975 ( valueStr ) { \n\t\tif ( _caseSensitive ) return new Byte ( ( byte ) $F20069 ( valueStr ) ) ; \n\t\treturn new Byte ( ( byte ) $F9283 ( valueStr ) . charAt ( INT00 ) ) ; \n\t\t} \n\tfor ( $F2674 ( b , ByteLiteral ) ) { \n\t\tif ( $F390999 ( ByteLiteral , b ) ( valueStr ) ) return ( byte ) b ; \n\t\t} \n\t$F1987 ( intValue ) try $F83697 ( intValue , Integer , valueStr ) catch ( final NumberFormatException e ) { \n\t\t$F102635 ( errMsg ) $F1212 ( errMsg , valueStr ) $F1218 ( errMsg ) for ( $F2674 ( b , ByteLiteral ) ) { \n\t\t\terrMsg . append ( ByteLiteral [ b ] . toUpperCase ( ) ) ; \n\t\t\t$F1218 ( errMsg ) $F1212 ( errMsg , b ) $F1218 ( errMsg ) } \n\t\tthrow new NumberFormatException $F5478 ( errMsg ) ; \n\t\t} \n\tif $F3730 ( intValue ) throw new NumberFormatException $F13407 ( intValue ) ; \n\treturn new Byte ( ( byte ) intValue ) ; \n\t} \n"}, {"code": "$F1 public $F1975 getValueAsbyteArray $F2 { \n\tfinal $F1975 result = new byte $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . byteValue ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "public static HashMap $F3015882 getAutoPlantingDate ( HashMap data , String eDate , String lDate , String rain , String days ) { \n\tMap wthData ; \n\tArrayList $F741381 dailyData ; \n\t$F16845591 eventData ; \n\tEvent event ; \n\t$F13217 ( eDateCal , Calendar ) $F13217 ( lDateCal , Calendar ) int intDays ; \n\tint duration ; \n\tdouble accRainAmtTotal ; \n\tdouble accRainAmt ; \n\tint expDur ; \n\t$F1987 ( startYear ) Window [ ] windows ; \n\t$F96338 ( pdates ) HashMap $F3015882 results = new HashMap $F3015882 $F2 ; \n\tif ( ! $F5583 ( isValidDate , eDate , eDateCal ) ) { \n\t\t$F265471 ( LOG , eDate ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tif ( ! $F5583 ( isValidDate , lDate , lDateCal ) ) { \n\t\t$F265471 ( LOG , lDate ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tif ( $F397081 ( eDateCal , lDateCal ) ) { \n\t\tlDateCal . set ( Calendar . YEAR , $F134957 ( lDateCal , Calendar ) + INT00 ) ; \n\t\t} \n\ttry { \n\t\tduration = Integer . parseInt ( convertMsToDay ( $F396645 ( lDateCal ) - $F396645 ( eDateCal ) ) ) ; \n\t\t} \n\tcatch ( Exception e ) $F12286 ( duration ) try $F83697 ( intDays , Integer , days ) catch ( Exception e ) { \n\t\t$F15466 ( LOG ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tif $F9104 ( intDays ) { \n\t\t$F15466 ( LOG ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\ttry $F1666920 ( accRainAmtTotal , Double , rain ) catch ( Exception e ) { \n\t\t$F15466 ( LOG ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tif $F9104 ( accRainAmtTotal ) { \n\t\t$F15466 ( LOG ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tdailyData = WeatherHelper . getDailyData ( data ) ; \n\tif $F6132 ( dailyData ) { \n\t\t$F15466 ( LOG ) return new HashMap $F3015882 $F2 ; \n\t\t} \n\tMap mgnData = getObjectOr ( data , STRING00 , $F604448 ) ; \n\teventData = getObjectOr ( mgnData , STRING00 , $F8443 ) ; \n\ttry { \n\t\texpDur = Integer . parseInt ( $F3726 ( getValueOr , data ) ) ; \n\t\t} \n\tcatch ( Exception e ) $F12286 ( expDur ) $F3509 ( LOG , expDur ) if $F3730 ( expDur ) { \n\t\ttry { \n\t\t\tstartYear = Integer . parseInt ( $F3726 ( getValueOr , data ) . substring ( $F34029 ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLOG . warn ( $F32352 ( data ) ) ; \n\t\t\t$F16051 ( startYear ) } \n\t\t} \n\t$F3509 ( LOG , startYear ) windows = new Window [ expDur ] ; \n\tif $F6132 ( eventData ) $F16517 ( LOG ) else { \n\t\tevent = new Event $F5777 ( eventData ) ; \n\t\tif $F2015 ( expDur ) { \n\t\t\tif ( event . isEventExist ( ) ) { \n\t\t\t\tMap plEvent = event . getCurrentEvent ( ) ; \n\t\t\t\ttry { \n\t\t\t\t\tstartYear = Integer . parseInt ( $F3726 ( getValueOr , plEvent ) . substring ( $F34029 ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tLOG . warn ( $F32352 ( plEvent ) ) ; \n\t\t\t\t\t$F16051 ( startYear ) } \n\t\t\t\t} \n\t\t\telse $F16052 ( startYear ) } \n\t\t} \n\t$F12232 ( startYearIndex , getStartYearIndex , dailyData , startYear ) if $F66890 ( startYearIndex , dailyData ) { \n\t\tif $F2015 ( expDur ) $F12286 ( startYearIndex ) else { \n\t\t\t$F204704 ( LOG , startYear , startYearIndex ) return new HashMap $F3015882 $F2 ; \n\t\t\t} \n\t\t} \n\tint end ; \n\tint start = $F102503 ( getDailyRecIndex , dailyData , eDate , startYearIndex ) ; \n\tfor ( $F2674 ( i , windows ) ) { \n\t\t$F10346 ( end , getDailyRecIndex , dailyData , lDate , start , duration ) windows [ i ] = new Window ( start , end ) ; \n\t\tif $F1640392 ( i , windows ) { \n\t\t\tstart = getDailyRecIndex ( dailyData , eDate , end , INT00 - duration ) ; \n\t\t\t} \n\t\t} \n\tif ( windows [ INT00 ] . start == $F3413 ( dailyData ) ) $F16517 ( LOG ) for ( $F2674 ( i , windows ) ) { \n\t\tint last = Math . min ( windows [ i ] . start + intDays , windows [ i ] . end ) ; \n\t\taccRainAmt = INT00 ; \n\t\tfor ( int j = windows [ i ] . start ; \n\t\tj < last ; \n\t\tj ++ ) { \n\t\t\ttry { \n\t\t\t\taccRainAmt += Double . parseDouble ( getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) $F42718 if ( accRainAmt >= accRainAmtTotal ) { \n\t\t\t\tLOG . debug ( STRING00 + getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) + STRING00 + accRainAmt + STRING00 + ( accRainAmt >= accRainAmtTotal ) ) ; \n\t\t\t\tpdates . add ( getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) ) ; \n\t\t\t\t$F332 } \n\t\t\t} \n\t\tif ( accRainAmt >= accRainAmtTotal ) $F42718 int outIndex = last ; \n\t\tfor ( int j = last ; \n\t\tj <= windows [ i ] . end ; \n\t\tj ++ ) { \n\t\t\ttry { \n\t\t\t\taccRainAmt -= Double . parseDouble ( getValueOr ( $F995036 ( dailyData , j , intDays ) , STRING00 , STRING00 ) ) ; \n\t\t\t\taccRainAmt += Double . parseDouble ( getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) $F42718 if ( accRainAmt >= accRainAmtTotal ) { \n\t\t\t\tLOG . debug ( STRING00 + getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) + STRING00 + accRainAmt + STRING00 + ( accRainAmt >= accRainAmtTotal ) ) ; \n\t\t\t\tpdates . add ( getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) ) ; \n\t\t\t\t$F332 } \n\t\t\toutIndex ++ ; \n\t\t\t} \n\t\tif ( accRainAmt < accRainAmtTotal ) { \n\t\t\tString lastDay ; \n\t\t\tif $F3730 ( startYear ) { \n\t\t\t\tlastDay = ( startYear + i ) + lDate ; \n\t\t\t\t} \n\t\t\telse if ( windows [ i ] . end >= $F3413 ( dailyData ) ) { \n\t\t\t\tlastDay = getValueOr ( $F58727 ( dailyData ) , STRING00 , STRING00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tlastDay = getValueOr ( dailyData . get ( windows [ i ] . end ) , STRING00 , STRING00 ) ; \n\t\t\t\t} \n\t\t\t$F26016 ( LOG , lastDay ) $F528 ( pdates , lastDay ) } \n\t\t} \n\t$F6257 ( results , pdates ) return results ; \n\t} \n"}, {"code": "private static boolean isValidDate ( String date , Calendar out , String separator ) { \n\ttry { \n\t\t$F101516 ( dates , date , separator ) out . set ( Calendar . DATE , Integer . parseInt ( $F12388 ( dates ) ) ) ; \n\t\tout . set ( Calendar . MONTH , Integer . parseInt ( $F12388 ( dates ) ) ) ; \n\t\tif $F5678 ( dates ) { \n\t\t\tout . set ( Calendar . YEAR , Integer . parseInt ( $F12388 ( dates ) ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\ttry { \n\t\t\tout . set ( Calendar . DATE , Integer . parseInt ( date . substring ( $F90368 ( date ) ) ) ) ; \n\t\t\tout . set ( Calendar . MONTH , Integer . parseInt ( date . substring ( $F1204 ( date ) , $F1204 ( date ) ) ) - INT00 ) ; \n\t\t\tif $F1216 ( date ) { \n\t\t\t\tout . set ( Calendar . YEAR , Integer . parseInt ( date . substring ( $F1204 ( date ) , $F1204 ( date ) ) ) - INT00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e2 ) $F1668 } \n\t$F232 } \n"}, {"code": "private static boolean isSameDate $F16060 ( date1 , date2 , separator ) { \n\t$F2115203 ( date2 , separator ) if $F42444 ( date2 ) { \n\t\ttry { \n\t\t\tint $F1905380 ( year1 , Integer , date1 ) ; \n\t\t\tif $F484770 ( year1 ) { \n\t\t\t\treturn $F1201 ( date1 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F67892 } \n\treturn $F14140 ( date1 , date2 ) ; \n\t} \n"}, {"code": "private static int getDailyRecIndex ( ArrayList $F741381 dailyData , String findDate , int start , int expectedDiff ) { \n\tString date ; \n\tif ( start + expectedDiff < $F3413 ( dailyData ) ) { \n\t\tdate = getValueOr ( $F72578 ( dailyData , start , expectedDiff ) , STRING00 , STRING00 ) ; \n\t\tif ( $F5583 ( isSameDate , date , findDate ) ) $F5668 ( start , expectedDiff ) else { \n\t\t\texpectedDiff ++ ; \n\t\t\tdate = getValueOr ( $F72578 ( dailyData , start , expectedDiff ) , STRING00 , STRING00 ) ; \n\t\t\tif ( $F5583 ( isSameDate , date , findDate ) ) $F5668 ( start , expectedDiff ) } \n\t\t} \n\tfor ( $F173690 ( j , start , dailyData ) ) { \n\t\tdate = getValueOr ( $F198 ( dailyData , j ) , STRING00 , STRING00 ) ; \n\t\tif ( $F5583 ( isSameDate , date , findDate ) ) $F356 ( j ) } \n\t$F10928 ( dailyData ) } \n"}, {"code": "public static $F16845591 getFertDistribution ( HashMap data , String num , String fecd , String feacd , String fedep , $F21 offsets , $F21 ptps ) { \n\tint iNum ; \n\tArrayList $F741381 eventData ; \n\tString fen_tot ; \n\t$F159660 ( fdates ) String pdate ; \n\t$F16845591 results = new $F16845591 $F2 ; \n\ttry { \n\t\t$F83696 ( iNum , Integer , num ) if $F2523 ( iNum ) { \n\t\t\t$F15466 ( LOG ) return results ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F265471 ( LOG , num ) return results ; \n\t\t} \n\tif ( iNum != offsets . length || iNum != ptps . length ) { \n\t\tif ( iNum > offsets . length || ! compare ( STRING00 , round ( sum ( $F192561 ( Arrays , ptps , iNum ) ) , INT00 ) , CompareMode . EQUAL ) ) { \n\t\t\t$F15466 ( LOG ) return results ; \n\t\t\t} \n\t\t} \n\telse if ( ! compare ( STRING00 , round ( sum ( ptps ) , INT00 ) , CompareMode . EQUAL ) ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\tMap mgnData = getObjectOr ( data , STRING00 , $F604448 ) ; \n\teventData = getObjectOr ( mgnData , STRING00 , $F8443 ) ; \n\ttry { \n\t\t$F3727 ( fen_tot , getValueOr , data ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\t$F96338 ( output ) for ( Map events : eventData ) { \n\t\tif ( $F3726 ( getValueOr , events ) . equals ( STRING00 ) ) { \n\t\t\t$F3727 ( pdate , getValueOr , events ) ; \n\t\t\ttry { \n\t\t\t\t$F99747 ( fdates , iNum ) for ( $F6610 ( i , iNum ) ) { \n\t\t\t\t\tfdates [ i ] = $F62643 ( dateOffset , pdate , offsets , i ) ; \n\t\t\t\t\tif $F32580 ( fdates , i ) { \n\t\t\t\t\t\tLOG . error ( $F103171 ( offsets , i ) ) ; \n\t\t\t\t\t\treturn results ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tLOG . error ( $F5963 ( e ) ) ; \n\t\t\t\treturn results ; \n\t\t\t\t} \n\t\t\tfor ( $F6610 ( i , iNum ) ) { \n\t\t\t\tString feamn = round ( product ( fen_tot , ptps [ i ] , STRING00 ) , INT00 ) ; \n\t\t\t\tif $F112 ( feamn ) { \n\t\t\t\t\tLOG . error ( STRING00 , fen_tot , ptps [ i ] ) ; \n\t\t\t\t\t} \n\t\t\t\toutput . add ( String . format ( STRING00 , fdates [ i ] , feamn ) ) ; \n\t\t\t\t} \n\t\t\t$F332 } \n\t\t} \n\t$F2366264 ( result ) for ( String addNew : output ) { \n\t\t$F30789 ( tmp , addNew ) AcePathfinderUtil . insertValue ( result , STRING00 , tmp [ INT00 ] ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , fecd ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , feacd ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , fedep ) ; \n\t\tif ( $F4457492 ( tmp ) ) { \n\t\t\tAcePathfinderUtil . insertValue ( result , STRING00 , tmp [ INT00 ] ) ; \n\t\t\t} \n\t\t} \n\tresults = MapUtil . getBucket ( result , STRING00 ) . getDataList ( ) ; \n\treturn results ; \n\t} \n"}, {"code": "public static $F16845591 getOMDistribution ( HashMap expData , String offset , String omcd , String omc2n , String omdep , String ominp , String dmr ) { \n\tString omamt ; \n\t$F16845591 eventData ; \n\tEvent events ; \n\tString pdate ; \n\tString odate ; \n\t$F1955127 ( eventData ) $F16845591 originalEvents = MapUtil . getBucket ( expData , STRING00 ) . getDataList ( ) ; \n\t$F3727 ( omamt , getValueOr , expData ) ; \n\tif $F198046 ( omamt ) { \n\t\t$F45360 ( LOG ) Event omEvent = new Event $F5777 ( originalEvents ) ; \n\t\tomamt = ( String ) omEvent . getCurrentEvent ( ) . get ( STRING00 ) ; \n\t\t} \n\tif $F198046 ( omamt ) { \n\t\t$F15466 ( LOG ) return eventData ; \n\t\t} \n\tevents = new Event $F5777 ( originalEvents ) ; \n\tpdate = ( String ) events . getCurrentEvent ( ) . get ( STRING00 ) ; \n\tif $F198046 ( pdate ) { \n\t\t$F15466 ( LOG ) return eventData ; \n\t\t} \n\t$F14067 ( odate , dateOffset , pdate , offset ) if $F112 ( odate ) { \n\t\t$F265471 ( LOG , offset ) return eventData ; \n\t\t} \n\tString omnpct = divide ( divide ( $F383883 ( dmr ) ) , omc2n , INT00 ) ; \n\tif $F112 ( omnpct ) { \n\t\t$F15466 ( LOG ) return eventData ; \n\t\t} \n\t$F2366264 ( result ) AcePathfinderUtil . insertValue ( result , STRING00 , odate ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , omcd ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , omamt ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , omc2n ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , omdep ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , ominp ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , omnpct ) ; \n\teventData = MapUtil . getBucket ( result , STRING00 ) . getDataList ( ) ; \n\treturn eventData ; \n\t} \n"}, {"code": "public static HashMap $F3015882 getStableCDistribution ( HashMap data , String som3_0 , String pp , String rd ) { \n\tHashMap $F3015882 results = new HashMap $F3015882 $F2 ; \n\t$F88216 $F8444 ( slscArr ) ; \n\t$F19470116 soilLayers ; \n\tString k ; \n\tString som2_0 ; \n\tString f ; \n\tString som3_fac ; \n\t$F159660 ( sllbs ) $F159660 ( slocs ) String mid ; \n\t$F1987 ( finalScale ) $F45360 ( LOG ) try { \n\t\tk = divide ( log ( STRING00 ) + STRING00 , substract ( rd , pp ) , finalScale + INT00 ) ; \n\t\tsom2_0 = multiply ( STRING00 , $F4501 ( substract , som3_0 ) ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\t$F10937 ( soilLayers , getSoilLayer , data ) if $F112 ( soilLayers ) $F356 ( results ) else if $F6132 ( soilLayers ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\t$F111040 ( sllbs , soilLayers ) $F111040 ( slocs , soilLayers ) for ( $F10914 ( i , soilLayers ) ) { \n\t\t\t\tsllbs [ i ] = getObjectOr ( $F198 ( soilLayers , i ) , STRING00 , STRING00 ) ; \n\t\t\t\tslocs [ i ] = getObjectOr ( $F198 ( soilLayers , i ) , STRING00 , STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( NumberFormatException e ) { \n\t\t\tLOG . error ( $F5963 ( e ) ) ; \n\t\t\treturn results ; \n\t\t\t} \n\t\t} \n\t$F45360 ( LOG ) $F45360 ( LOG ) $F19733 ( last ) for ( $F10914 ( i , soilLayers ) ) { \n\t\t$F387707 ( mid , average , sllbs , i , last ) ; \n\t\t$F68133 ( last , sllbs , i ) $F10346 ( f , getGrowthFactor , mid , pp , k , som2_0 ) som3_fac = substract ( STRING00 , divide ( $F4501 ( max , f ) , STRING00 , finalScale + INT00 ) ) ; \n\t\tslscArr . add ( round ( $F14117 ( multiply , slocs , i , som3_fac ) , finalScale ) ) ; \n\t\t} \n\t$F6257 ( results , slscArr ) return results ; \n\t} \n"}, {"code": "public static ArrayList < $F16845591 > getAutoEventDate ( Map data ) { \n\tArrayList < $F16845591 > results = new ArrayList < $F16845591 > $F2 ; \n\tint expDur ; \n\ttry { \n\t\texpDur = Integer . parseInt ( $F3726 ( getValueOr , data ) ) ; \n\t\t} \n\tcatch ( Exception e ) $F12286 ( expDur ) if $F9104 ( expDur ) { \n\t\t$F16516 ( LOG ) return results ; \n\t\t} \n\t$F16845591 events = MapUtil . getBucket ( data , STRING00 ) . getDataList ( ) ; \n\twhile $F100617 ( results , expDur ) { \n\t\tresults . add ( $F8443 ) ; \n\t\t} \n\tfor ( $F129099 event : events ) { \n\t\t$F1979370 ( date , getValueOr , event ) if $F42444 ( date ) { \n\t\t\t$F1979370 ( eventType , getValueOr , event ) $F131442 ( LOG , eventType , date ) } \n\t\t$F1979370 ( edate , getValueOr , event ) for ( $F6610 ( j , expDur ) ) { \n\t\t\t$F129099 $F604449 ( newEvent ) ; \n\t\t\t$F7171 ( newEvent , event ) if $F14428 ( date ) { \n\t\t\t\tnewEvent . put ( STRING00 , $F357617 ( yearOffset , date , j ) ) ; \n\t\t\t\t} \n\t\t\tif $F14428 ( edate ) { \n\t\t\t\tnewEvent . put ( STRING00 , $F357617 ( yearOffset , edate , j ) ) ; \n\t\t\t\t} \n\t\t\t$F9874 ( results , j , newEvent ) } \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static ArrayList < $F16845591 > getAutoEventDate ( Map data , $F21 pdates ) { \n\tArrayList < $F16845591 > results = new ArrayList < $F16845591 > $F2 ; \n\tif $F15457 ( pdates ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\t$F16845591 events = MapUtil . getBucket ( data , STRING00 ) . getDataList ( ) ; \n\twhile ( $F3413 ( results ) < pdates . length ) { \n\t\tresults . add ( $F8443 ) ; \n\t\t} \n\t$F1979370 ( orgPdate , getValueOr , data ) if $F42444 ( orgPdate ) $F52772 ( LOG ) else if $F42444 ( orgPdate ) $F6386 ( orgPdate , getFstPdate , data ) if $F42444 ( orgPdate ) { \n\t\tLOG . warn ( $F4391 ( pdates ) ) ; \n\t\t$F83675 ( orgPdate , pdates ) } \n\telse $F3510 ( LOG , orgPdate ) for ( $F129099 event : events ) { \n\t\t$F1979370 ( date , getValueOr , event ) $F19733 ( orgDap ) $F1979370 ( eventType , getValueOr , event ) if $F42444 ( eventType ) $F24706 ( orgDap ) else { \n\t\t\tif $F42444 ( date ) $F154938 ( LOG , eventType , date ) else { \n\t\t\t\t$F14067 ( orgDap , calcDAP , date , orgPdate ) $F133680 ( LOG , eventType , date ) $F133680 ( LOG , eventType , orgDap ) } \n\t\t\t} \n\t\t$F1979370 ( edate , getValueOr , event ) $F19733 ( orgEDap ) if $F14428 ( edate ) { \n\t\t\t$F14067 ( orgEDap , calcDAP , edate , orgPdate ) $F3509 ( LOG , orgDap ) } \n\t\tfor ( $F2674 ( j , pdates ) ) { \n\t\t\t$F129099 $F604449 ( newEvent ) ; \n\t\t\t$F7171 ( newEvent , event ) if $F14428 ( date ) { \n\t\t\t\tnewEvent . put ( STRING00 , $F14117 ( dateOffset , pdates , j , orgDap ) ) ; \n\t\t\t\t} \n\t\t\tif $F14428 ( edate ) { \n\t\t\t\tnewEvent . put ( STRING00 , $F14117 ( dateOffset , pdates , j , orgEDap ) ) ; \n\t\t\t\t} \n\t\t\t$F9874 ( results , j , newEvent ) } \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static $F16845591 getPaddyIrrigation ( HashMap data , String bundNum , String percRate , String plowpanDept , $F21 offsets , $F21 maxVals , $F21 minVals ) { \n\tint iNum ; \n\t$F16845591 eventData ; \n\t$F159660 ( idates ) Event events ; \n\tString pdate ; \n\t$F16845591 results = new $F16845591 $F2 ; \n\ttry { \n\t\t$F83696 ( iNum , Integer , bundNum ) if $F2523 ( iNum ) { \n\t\t\t$F15466 ( LOG ) return results ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F265471 ( LOG , bundNum ) return results ; \n\t\t} \n\tif ( iNum != offsets . length || iNum != maxVals . length || iNum != minVals . length ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\tMap mgnData = getObjectOr ( data , STRING00 , $F604448 ) ; \n\teventData = getObjectOr ( mgnData , STRING00 , $F8443 ) ; \n\tevents = new Event $F5777 ( eventData ) ; \n\tpdate = ( String ) events . getCurrentEvent ( ) . get ( STRING00 ) ; \n\tif $F198046 ( pdate ) { \n\t\t$F15466 ( LOG ) return eventData ; \n\t\t} \n\t$F99747 ( idates , iNum ) try { \n\t\tfor ( $F6610 ( i , iNum ) ) { \n\t\t\tidates [ i ] = $F62643 ( dateOffset , pdate , offsets , i ) ; \n\t\t\tif $F32580 ( idates , i ) { \n\t\t\t\tLOG . error ( $F103171 ( offsets , i ) ) ; \n\t\t\t\treturn results ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLOG . error ( $F5963 ( e ) ) ; \n\t\treturn results ; \n\t\t} \n\t$F2366264 ( result ) AcePathfinderUtil . insertValue ( result , STRING00 , idates [ INT00 ] ) ; \n\tAcePathfinderUtil . insertValue ( $F3725 ( result ) ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , plowpanDept ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , idates [ INT00 ] ) ; \n\tAcePathfinderUtil . insertValue ( $F3725 ( result ) ) ; \n\tAcePathfinderUtil . insertValue ( result , STRING00 , percRate ) ; \n\tfor ( $F2674 ( i , idates ) ) { \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , idates [ i ] ) ; \n\t\tAcePathfinderUtil . insertValue ( $F3725 ( result ) ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , maxVals [ i ] ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , idates [ i ] ) ; \n\t\tAcePathfinderUtil . insertValue ( $F3725 ( result ) ) ; \n\t\tAcePathfinderUtil . insertValue ( result , STRING00 , minVals [ i ] ) ; \n\t\t} \n\tresults = MapUtil . getBucket ( result , STRING00 ) . getDataList ( ) ; \n\treturn results ; \n\t} \n"}, {"code": "public static String getFstPdate ( Map data , String defValue ) { \n\t$F16845591 events = $F2754 ( getBucket , data ) . getDataList ( ) ; \n\tEvent event = new Event $F5777 ( events ) ; \n\treturn getValueOr ( event . getCurrentEvent ( ) , STRING00 , defValue ) ; \n\t} \n"}, {"code": "public static $F129099 createEvent ( HashMap data , String typeStr , String dap , $F3567120 ( info ) , boolean isStrictID ) { \n\tHashMap $F199344 ( newEvent ) ; \n\tEventType type ; \n\ttry { \n\t\t$F651742 ( type , EventType , typeStr ) ; \n\t\ttypeStr = $F320744 ( type ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\t$F5572 ( LOG , typeStr ) return $F188459 ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tLOG . error ( getStackTrace ( e ) ) ; \n\t\treturn $F188459 ; \n\t\t} \n\t$F6257 ( newEvent , typeStr ) $F6377 ( pdate , getFstPdate , data ) if $F14428 ( pdate ) { \n\t\t$F5618 ( date , dateOffset , pdate , dap ) if $F268 ( date ) $F6378 ( newEvent , date ) else { \n\t\t\t$F5572 ( LOG , dap ) return $F188459 ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F15466 ( LOG ) return $F188459 ; \n\t\t} \n\tif ( isStrictID ) { \n\t\t$F21 ids = $F470737 ( info ) ( $F28560 ) ; \n\t\tfor ( String id : ids ) { \n\t\t\tString path = AcePathfinder . INSTANCE . getPath ( id ) ; \n\t\t\tif ( path == null || $F6949 ( path , typeStr ) ) $F16517 ( LOG ) } \n\t\t} \n\t$F7171 ( newEvent , info ) return newEvent ; \n\t} \n"}, {"code": "public CompoundActivity addActivity ( Activity activity ) { \n\tif $F268 ( activity ) { \n\t\tlogger . trace ( $F7745 ( activity ) ) ; \n\t\t$F528 ( activities , activity ) } \n\treturn this ; \n\t} \n"}, {"code": "$F1 public ActivityData perform ( ActivityContext context , ActivityData data ) throws ActivityException { \n\tTypedVector < ActivityInfo > infos = new TypedVector < ActivityInfo > $F2 ; \n\t$F1987 ( i ) for ( Activity activity : activities ) { \n\t\tlogger . trace ( $F627474 ( i , activity ) ) ; \n\t\tActivityInfo info = new ActivityInfo $F2 ; \n\t\tinfo . setActivity ( activity ) . setContext ( context ) . setData ( data ) ; \n\t\t$F528 ( infos , info ) $F176425 ( logger , i ) ++ i ; \n\t\t} \n\t$F42520 ( logger ) $F648632 ( engine , infos ) } \n"}, {"code": "public boolean find $F2 { \n\tstart = last ; \n\tfor ( ; \n\t$F10913 ( start , tokens ) ; \n\tstart ++ ) { \n\t\tmatch = $F8614 ( automaton , input , start ) ; \n\t\tif ( match . getEndLocation ( ) != $F3745 ) { \n\t\t\tlast = match . getEndLocation ( ) ; \n\t\t\t$F232 } \n\t\t} \n\t$F16051 ( start ) match = new Match ( $F3745 , null ) ; \n\t$F213 } \n"}, {"code": "public int start $F2 { \n\t$F185183 ( Preconditions , match ) if $F9869 ( start ) { \n\t\treturn $F198 ( tokens , start ) . start ( ) ; \n\t\t} \n\t$F16096 } \n"}, {"code": "public int end $F2 { \n\t$F185183 ( Preconditions , match ) if ( match . getEndLocation ( ) >= INT00 ) { \n\t\treturn tokens . get ( match . getEndLocation ( ) - INT00 ) . end ( ) ; \n\t\t} \n\t$F16096 } \n"}, {"code": "public List < HString > group ( String groupName ) { \n\treturn Collections . unmodifiableList ( match . getCaptures ( ) . get ( groupName ) ) ; \n\t} \n"}, {"code": "public boolean matches ( String string ) { \n\t$F34959 ( matcher , pattern , string ) boolean result = $F129112 ( matcher ) ; \n\treturn result ; \n\t} \n"}, {"code": "public $F91992 getAllMatches ( String string ) { \n\t$F34959 ( matcher , pattern , string ) $F91992 matched = new ArrayList $F91991 $F2 ; \n\twhile $F14102 ( matcher ) { \n\t\tint count = $F187903 ( matcher ) ; \n\t\t$F97640 ( strings , count ) for ( $F72243 ( i , count ) ) { \n\t\t\tstrings [ i ] = matcher . group ( i + INT00 ) ; \n\t\t\t} \n\t\t$F528 ( matched , strings ) } \n\treturn matched ; \n\t} \n"}, {"code": "void write ( Element element , Object scope ) throws IOException { \n\tOperatorsList operators = new OperatorsList ( element ) ; \n\t$F5605 ( write , element , scope , operators ) } \n"}, {"code": "void writeTextContent ( String text ) throws IOException { \n\twriter . write ( ( String ) Strings . escapeXML ( text ) ) ; \n\t} \n"}, {"code": "void writeAttribute $F1195 ( name , value ) throws IOException { \n\t$F36360 ( writer ) $F21494 ( writer , name ) $F36360 ( writer ) $F36360 ( writer ) writer . write ( Strings . escapeXML ( value ) ) ; \n\t$F36360 ( writer ) } \n"}, {"code": "$F762 private void write ( Element element , Object scope , OperatorsList operators ) throws IOException { \n\tif ( scope != null && operators . hasConditionalOperator ( ) ) { \n\t\tObject returnedValue = execOperator ( element , scope , operators . getConditionalOperatorMeta ( ) ) ; \n\t\t$F15530 ( returnedValue ) assert returnedValue instanceof Boolean ; \n\t\tboolean $F678993 ( branchEnabled , returnedValue ) ; \n\t\tif ( ! branchEnabled ) { \n\t\t\t$F3509 ( log , element ) $F254 } \n\t\t} \n\tFormat format = null ; \n\tif ( scope != null && operators . hasFormattingOperator ( ) ) { \n\t\tformat = execOperator ( element , scope , operators . getFormattingOperatorMeta ( ) ) ; \n\t\t} \n\tString tag = element . getCaseSensitiveTag ( ) ; \n\twriteOpenTag ( tag ) ; \n\tSet < Attr > attributes = collectAttributes ( element , scope == null ) ; \n\tif $F268 ( scope ) { \n\t\tfor ( Meta meta : operators . getAttributeOperatorsMeta ( ) ) { \n\t\t\tObject $F10213 ( value , execOperator , element , scope , meta , format ) ; \n\t\t\t$F90687 ( value ) if ( value instanceof Attr ) { \n\t\t\t\t$F5605 ( addAttribute , element , attributes , value ) $F23605 } \n\t\t\tassert value instanceof Set ; \n\t\t\tfor ( Attr attr : ( Set < ? extends Attr > ) value ) $F5704 ( addAttribute , element , attributes , attr ) } \n\t\t} \n\t$F564 ( writeAttributes , element , attributes ) boolean emptyTag = HTML . EMPTY_TAGS . contains ( tag ) ; \n\twriteClosingMark ( emptyTag ) ; \n\t$F65498 ( emptyTag ) if ( operators . hasContentOperator ( ) ) { \n\t\tif $F268 ( scope ) { \n\t\t\tscope = execOperator ( element , scope , operators . getContentOperatorMeta ( ) , format ) ; \n\t\t\t} \n\t\tif ( scope == null && operators . getContentOperatorMeta ( ) . opcode != Opcode . OBJECT ) $F26029 ( writeEndTag , tag ) } \n\tfor ( ChildNode node : $F356715 ( element ) ) { \n\t\tif ( node . isElement ( ) ) { \n\t\t\twrite ( $F35123 ( node ) , scope ) ; \n\t\t\t} \n\t\telse { \n\t\t\twriteTextContent ( $F312882 ( node ) ) ; \n\t\t\t} \n\t\t} \n\twriteEndTag ( tag ) ; \n\t} \n"}, {"code": "$F762 private $F1372 T execOperator ( Element element , Object scope , Meta meta , Format ... format ) throws IOException { \n\tOperator operator = factory . geInstance ( meta . opcode ) ; \n\treturn ( T ) operator . exec ( element , scope , meta . operand , $F4388 ( format ) ? format [ INT00 ] : null ) ; \n\t} \n"}, {"code": "private void writeClosingMark ( boolean empty ) throws IOException { \n\tif ( empty ) { \n\t\t$F36360 ( writer ) $F36360 ( writer ) } \n\t$F36360 ( writer ) } \n"}, {"code": "private void writeEndTag ( String tag ) throws IOException { \n\t$F36360 ( writer ) $F36360 ( writer ) $F21494 ( writer , tag ) $F36360 ( writer ) } \n"}, {"code": "private void writeAttributes ( Element element , Iterable < Attr > attributes ) throws IOException { \n\tfor ( Attr attr : attributes ) { \n\t\t$F213834 ( attrName , attr ) if ( ! enableOperatorsSerialization && Opcode . fromAttrName ( attrName ) != Opcode . NONE ) $F42718 $F404304 ( attrValue , attr ) $F138675 ( attrValue ) if ( attrValue . equals ( HTML . DEFAULT_ATTRS . get ( attrName ) ) ) $F42718 $F564 ( writeAttribute , attrName , attrValue ) } \n\t} \n"}, {"code": "private static Set < Attr > collectAttributes ( Element element , boolean includeCssClass ) { \n\tSet < Attr > attributes = new HashSet < Attr > $F2 ; \n\tAttr cssClass = null ; \n\t$F2233 ( foundDataCssClass ) for ( Attr attr : element . getAttrs ( ) ) { \n\t\tfinal AttrImpl attrImpl = new AttrImpl ( attr ) ; \n\t\tif ( includeCssClass ) $F705342 ( attributes , attrImpl ) if ( ! $F9139 ( $F507 ( attr ) ) ) $F529 ( attributes , attrImpl ) else $F1619 ( cssClass , attrImpl ) if ( $F9139 ( $F507 ( attr ) ) ) $F24354 ( foundDataCssClass ) } \n\tif $F119064 ( foundDataCssClass , cssClass ) $F529 ( attributes , cssClass ) return attributes ; \n\t} \n"}, {"code": "private static void addAttribute ( Element element , Set < Attr > attributes , Object value ) { \n\tAttr attr = ( Attr ) value ; \n\tif $F16022 ( attributes , attr ) { \n\t\tthrow new TemplateException ( $F243247 ( element , attr ) ) ; \n\t\t} \n\t} \n"}, {"code": "private Object checkAndProxyReturnValue ( Object retValue ) { \n\tif ( retValue != null && retValue instanceof RESTBaseEntityCollectionV1 ) { \n\t\tfinal RESTBaseEntityV1 $F45 parent = this . parent == null ? getProxyEntity ( ) : this . parent ; \n\t\treturn RESTCollectionProxyFactory . create ( getProviderFactory ( ) , ( RESTBaseEntityCollectionV1 ) retValue , isRevision , parent ) ; \n\t\t} \n\telse $F356 ( retValue ) } \n"}, {"code": "public static String getNotNullString $F2317 ( stringObject , defaultString ) { \n\treturn stringObject == null ? defaultString : $F797 ( stringObject ) ; \n\t} \n"}, {"code": "public static boolean isTwoStringEqual $F1195 ( firstString , secondString ) { \n\tif $F112 ( firstString ) { \n\t\tif $F112 ( secondString ) $F233 else $F1668 } \n\telse $F66748 ( firstString , secondString ) } \n"}, {"code": "public void reopen ( AccessMode accessMode ) throws IOException { \n\tif ( this . randomAccess == null ) $F4537 ( associatedRandomAccessFile ) $F1357 ( this , accessMode ) switch ( accessMode ) { \n\t\tcase READ : maybeRead ( ) ; \n\t\tthis . randomAccess . rewind ( ) ; \n\t\t$F332 case WRITE : maybeWritten ( ) ; \n\t\tthis . randomAccess . reset ( ) ; \n\t\t$F332 case APPEND : maybeWritten ( ) ; \n\t\tthis . randomAccess . forwardWind ( ) ; \n\t\t$F332 $F158651 ( accessMode ) } \n\t} \n"}, {"code": "public long write ( short type , $F116882 ( records ) ) throws IOException { \n\tmaybeWritten ( ) ; \n\tlong referenceKey = this . randomAccess . position ( ) ; \n\tthis . randomAccess . writeInt ( records . length ) ; \n\tthis . randomAccess . writeShort ( type ) ; \n\tfor ( $F2674 ( i , records ) ) { \n\t\tif $F32580 ( records , i ) $F9654 ( i ) this . randomAccess . writeInt ( $F54632 ( records , i ) ) ; \n\t\tthis . randomAccess . write ( records [ i ] ) ; \n\t\t} \n\tthis . randomAccess . commit ( ) ; \n\treturn referenceKey ; \n\t} \n"}, {"code": "public void replay ( IDataLoggerReplay replay ) throws IOException { \n\tmaybeRead ( ) ; \n\tthis . randomAccess . rewind ( ) ; \n\twhile ( this . randomAccess . available ( ) > ( Integer . SIZE / Byte . SIZE ) ) { \n\t\tint length = this . randomAccess . readInt ( ) ; \n\t\tshort type = this . randomAccess . readShort ( ) ; \n\t\tXALogRecordType $F124796 ( recordType , XALogRecordType , type ) ; \n\t\t$F116881 data = new byte $F99961 ( length ) ; \n\t\tfor ( $F6610 ( i , length ) ) { \n\t\t\tint recordSize = this . randomAccess . readInt ( ) ; \n\t\t\tdata [ i ] = this . randomAccess . read ( recordSize ) ; \n\t\t\t} \n\t\treplay . onRecord ( recordType , data ) ; \n\t\t} \n\t} \n"}, {"code": "private static String formetFileSize ( long fileSize ) { \n\t$F1019587 ( decimalFormat ) $F19733 ( fileSizeString ) $F19733 ( wrongSize ) $F2016 ( fileSize , wrongSize ) if $F2523 ( fileSize ) { \n\t\tfileSizeString = decimalFormat . format ( ( double ) fileSize ) + STRING00 ; \n\t\t} \n\telse if $F2523 ( fileSize ) { \n\t\tfileSizeString = decimalFormat . format ( ( double ) fileSize / INT00 ) + STRING00 ; \n\t\t} \n\telse if $F2523 ( fileSize ) { \n\t\tfileSizeString = decimalFormat . format ( ( double ) fileSize / INT00 ) + STRING00 ; \n\t\t} \n\telse { \n\t\tfileSizeString = decimalFormat . format ( ( double ) fileSize / INT00 ) + STRING00 ; \n\t\t} \n\treturn fileSizeString ; \n\t} \n"}, {"code": "public static $F68542 getAllMethods ( Object context , $F27144 ( annotation ) ) { \n\t$F68542 annotatedMethods = new HashSet $F68541 $F2 ; \n\t$F335359 methods = $F298 ( context ) . getDeclaredMethods ( ) ; \n\tfor ( Method method : methods ) { \n\t\tif $F498186 ( method , annotation ) $F528 ( annotatedMethods , method ) } \n\treturn annotatedMethods ; \n\t} \n"}, {"code": "public static $F1372 boolean any ( Optional $F8941 ... optionals ) { \n\treturn Iterables . any ( $F998 ( Arrays , optionals ) , isPresent ( ) ) ; \n\t} \n"}, {"code": "public static $F1372 boolean all ( Optional $F8941 ... optionals ) { \n\treturn Iterables . all ( $F998 ( Arrays , optionals ) , isPresent ( ) ) ; \n\t} \n"}, {"code": "void handleSubscriberException ( Throwable e , SubscriberExceptionContext context ) { \n\tcheckNotNull ( e ) ; \n\tcheckNotNull ( context ) ; \n\ttry { \n\t\texceptionHandler . handleException ( e , context ) ; \n\t\t} \n\tcatch ( Throwable e2 ) { \n\t\tlogger . log ( Level . SEVERE , $F19001 ( String , e2 , e ) , e2 ) ; \n\t\t} \n\t} \n"}, {"code": "public void put $F59671 ( key , value ) { \n\t$F28645 list ; \n\tif $F33656 ( map , key ) { \n\t\tlist = ( $F28645 ) $F198 ( map , key ) ; \n\t\t} \n\telse { \n\t\tlist = new Vector $F2338 $F2 ; \n\t\t$F2725 ( map , key , list ) } \n\t$F528 ( list , value ) } \n"}, {"code": "public $F28645 get ( K key ) { \n\treturn ( $F28645 ) $F198 ( map , key ) ; \n\t} \n"}, {"code": "$F1 public Session getSession ( Request request , String repositoryName , String workspaceName ) throws RepositoryException { \n\tRepository repository = getRepository ( repositoryName ) ; \n\tif ( request == null || request . username ( ) == null ) { \n\t\treturn repository . login ( workspaceName ) ; \n\t\t} \n\treturn repository . login ( new RequestCredentials ( request ) , workspaceName ) ; \n\t} \n"}, {"code": "$F1 public Repository getRepository ( String repositoryName ) throws NoSuchRepositoryException { \n\tRepository repository = null ; \n\ttry { \n\t\t$F5688 ( map ) map . put ( org . modeshape . jcr . api . RepositoryFactory . REPOSITORY_NAME , repositoryName ) ; \n\t\trepository = repositoryFactory . getRepository ( map ) ; \n\t\t} \n\tcatch ( RepositoryException e ) { \n\t\tthrow new NoSuchRepositoryException ( WebJcrI18n . cannotInitializeRepository . text ( repositoryName ) , e ) ; \n\t\t} \n\tif $F112 ( repository ) { \n\t\tthrow new NoSuchRepositoryException ( WebJcrI18n . repositoryNotFound . text ( repositoryName ) ) ; \n\t\t} \n\treturn repository ; \n\t} \n"}, {"code": "$F1 public $F1043 getJcrRepositoryNames $F2 { \n\ttry { \n\t\treturn ( ( ModeshapeRepositoryFactory ) repositoryFactory ) . getRepositoryNames ( ) ; \n\t\t} \n\tcatch ( RepositoryException e ) { \n\t\tLOGGER . error ( WebJcrI18n . cannotLoadRepositoryNames . text ( ) , e ) ; \n\t\t$F11597 ( Collections ) } \n\t} \n"}, {"code": "public $F1372 T getValue ( $F7906 ( type ) , String parameter , Message message , T uriParameterValue ) { \n\tif $F16029 ( message , uriParameterValue ) $F356 ( uriParameterValue ) T value = message . getHeader ( parameter , type ) ; \n\t$F1620 ( value , uriParameterValue ) return value ; \n\t} \n"}, {"code": "public Object getValue ( String parameter , Endpoint endpoint ) { \n\treturn $F2979794 ( endpoint ) . getParameter ( parameter ) ; \n\t} \n"}, {"code": "public Object getFunctionsValue $F1195 ( parameter , function ) { \n\t$F105146 ( value ) return value ; \n\t} \n"}, {"code": "$F1 public void free $F2 { \n\ttry { \n\t\tif $F560 ( hasCoreConnection ) { \n\t\t\tthis . getCoreConnection ( ) . close ( ) ; \n\t\t\t} \n\t\tthis . fireConnectionFreed ( ) ; \n\t\tthis . boundThreadId = $F198097 ( Thread ) ; \n\t\t} \n\tfinally { \n\t\tthis . setClosed ( true ) ; \n\t\t$F6863 ( setTransactionalData ) this . releaseThreadBinding ( ) ; \n\t\t} \n\t} \n"}, {"code": "public void release $F2 { \n\ttry { \n\t\tif $F560 ( hasCoreConnection ) { \n\t\t\tcheckThreadBinding ( ) ; \n\t\t\tthis . setClosed ( true ) ; \n\t\t\tthis . getCoreConnection ( ) . reset ( ) ; \n\t\t\tthis . fireConnectionReleased ( ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tthis . setClosed ( true ) ; \n\t\t$F6863 ( setTransactionalData ) this . releaseThreadBinding ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void recover $F2 { \n\tif ( this . getCoreConnection ( ) == null || ! ImplementorUtils . isImplementationOf ( getCoreConnection ( ) , IXADataRecorderAware . class ) ) $F255 IXADataRecorderAware con = ImplementorUtils . cast ( getCoreConnection ( ) , IXADataRecorderAware . class ) ; \n\tIXADataRecorder msgLogger = this . getXADataRecorder ( ) ; \n\t$F26463 ( msgLogger ) this . fireConnectionRecovering ( ) ; \n\tIDataRecordReplay dataRecordReplay = con . recoverReplayListener ( ) ; \n\t$F14196 ( dataRecordReplay ) msgLogger . replayRecords ( dataRecordReplay ) ; \n\tthis . fireConnectionRecovered ( ) ; \n\t} \n"}, {"code": "private void fireEventWithException ( IEventDeliver < C , IManagedConnectionEvent $F404 > deliver , Exception exception ) { \n\tManagedPhynixxConnectionEvent $F404 event = new ManagedPhynixxConnectionEvent $F404 $F873 ( getObservableProxy , exception ) ; \n\t$F564 ( deliverEvent , deliver , event ) } \n"}, {"code": "public CompositeProgressMonitor addProgressMonitor ( ProgressMonitor monitor ) { \n\tthis . monitors . add ( monitor ) ; \n\tmonitor . addCancelListener ( cancelListeners ) ; \n\treturn this ; \n\t} \n"}, {"code": "public boolean notifyIndeterminantProgress $F2 { \n\t$F48974 ( result ) for ( ProgressMonitor monitor : this . monitors ) { \n\t\tif ( ! monitor . notifyIndeterminantProgress ( ) ) $F57412 ( result ) } \n\treturn result ; \n\t} \n"}, {"code": "public boolean notifyProgress $F12004 ( value , maximum ) { \n\t$F48974 ( result ) for ( ProgressMonitor monitor : this . monitors ) { \n\t\tif ( ! monitor . notifyProgress ( value , maximum ) ) $F57412 ( result ) } \n\treturn result ; \n\t} \n"}, {"code": "public boolean notifyProgress ( double progress ) { \n\t$F48974 ( result ) for ( ProgressMonitor monitor : this . monitors ) { \n\t\tif ( ! monitor . notifyProgress ( progress ) ) $F57412 ( result ) } \n\treturn result ; \n\t} \n"}, {"code": "$F1 public String onVariable ( String variable ) { \n\tswitch ( variable ) { \n\t\t$F21776 return $F108 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t$F21776 return $F47647 ( System ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "private < K , T extends Persistable $F53007 > CastorDao $F242516 _createDao $F65165 ( type ) { \n\tString $F145075 ( daoClazzName , _typeMapping , type ) ; \n\t$F13175 ( _LOG_ , type , daoClazzName ) CastorDao $F242516 dao = null ; \n\tif $F112 ( daoClazzName ) { \n\t\tdao = new CastorDao $F242516 ( type ) ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\t$F762 Class < CastorDao $F242516 > daoClazz = ( Class < CastorDao $F242516 > ) $F16700 ( Class , daoClazzName ) ; \n\t\t\t$F146792 ( dao , daoClazz ) } \n\t\tcatch ( Exception ex ) $F5070055 ( ex ) } \n\tif ( CastorDaoSupport . class . isInstance ( dao ) ) { \n\t\tCastorDaoSupport support = CastorDaoSupport . class . cast ( dao ) ; \n\t\tsupport . setJDOManager ( _jdoManager ) ; \n\t\t} \n\treturn dao ; \n\t} \n"}, {"code": "public < K , T extends Persistable $F53007 > CastorDao $F242516 getDao $F65165 ( type ) { \n\t$F24434 ( type ) $F762 CastorDao $F242516 dao = ( CastorDao $F242516 ) $F198 ( _daoMapping , type ) ; \n\t$F83226 ( dao , _createDao , type , _daoMapping ) return dao ; \n\t} \n"}, {"code": "$F1 public void trace $F166319 ( o , t ) { \n\tlog . trace ( o , t ) ; \n\t} \n"}, {"code": "public static ImageFileParser makeParser $F2 { \n\tswitch ( $F323205 ( Platform ) ) { \n\t\tcase WINDOWS_32 : case WINDOWS_64 : $F42520 ( logger ) return new PEParser $F2 ; \n\t\tcase LINUX_32 : case LINUX_64 : case MACOSX_32 : case MACOSX_64 : case UNIX_32 : case UNIX_64 : $F42520 ( logger ) } \n\tlogger . error ( STRING00 , $F323205 ( Platform ) ) ; \n\t$F724 } \n"}, {"code": "public static ImageFileParser makeParser ( ImageFile . Format type ) { \n\tswitch ( type ) { \n\t\tcase ELF : return new ELFParser $F2 ; \n\t\tcase PE : return new PEParser $F2 ; \n\t\t$F180900 ( MACH_O ) } \n\t$F724 } \n"}, {"code": "public static boolean isPrintable ( char c ) { \n\tCharacter . UnicodeBlock block = Character . UnicodeBlock . of ( c ) ; \n\treturn ( ! Character . isISOControl ( c ) ) && c != KeyEvent . CHAR_UNDEFINED && block != null && block != Character . UnicodeBlock . SPECIALS ; \n\t} \n"}, {"code": "public static TextNormalization configuredInstance $F2 { \n\tif $F112 ( INSTANCE ) { \n\t\tsynchronized ( TextNormalization . class ) { \n\t\t\tif $F112 ( INSTANCE ) { \n\t\t\t\tINSTANCE = new TextNormalization $F2 ; \n\t\t\t\tINSTANCE . initConfig ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn INSTANCE ; \n\t} \n"}, {"code": "public String normalize ( String input , Language language ) { \n\t$F2201 ( input ) String finalString = input ; \n\tfor ( TextNormalizer textNormalizer : preprocessors ) { \n\t\tfinalString = $F41616 ( textNormalizer , finalString , language ) ; \n\t\t} \n\treturn finalString ; \n\t} \n"}, {"code": "$F1 public Bus $F70275 send ( M message ) { \n\t$F176425 ( logger , message ) for ( Destination $F70275 destination : destinations ) { \n\t\t$F176425 ( logger , destination ) destination . onMessage ( message ) ; \n\t\t} \n\t$F176425 ( logger , message ) return this ; \n\t} \n"}, {"code": "public Bus $F70275 post ( M message , long timeout , TimeUnit unit ) throws InterruptedException { \n\tqueue . offer ( message , timeout , unit ) ; \n\treturn this ; \n\t} \n"}, {"code": "protected String getMessageInternal ( Locale locale , String code , $F3244 args ) { \n\t$F2201 ( code ) if $F112 ( locale ) { \n\t\t$F600773 ( locale , I18nUtils ) ; \n\t\t} \n\tfinal MessageFormat $F304 ( messageFormat , resolveMessageFormat , locale , code ) ; \n\tif $F268 ( messageFormat ) { \n\t\tsynchronized ( messageFormat ) { \n\t\t\t$F281474 ( messageFormat , args ) } \n\t\t} \n\t$F724 } \n"}, {"code": "public String next ( int maxTries ) { \n\tfor ( $F112580 ( i , maxTries ) ) { \n\t\tval sb = $F62375 . append ( Math . abs ( $F590395 ( r ) ) ) ; \n\t\tval s = Strs . fixedLength ( sb , len ) . toString ( ) ; \n\t\tif $F16827 ( filter , s ) return s ; \n\t\t} \n\t$F47776 } \n"}, {"code": "$F5446012 $F1 MapMaker keyEquivalence ( Equivalence $F282 equivalence ) { \n\tcheckState ( keyEquivalence == null , STRING00 , keyEquivalence ) ; \n\t$F10937 ( keyEquivalence , checkNotNull , equivalence ) this . useCustomMap = true ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public MapMaker initialCapacity ( int initialCapacity ) { \n\tcheckState ( this . initialCapacity == UNSET_INT , STRING00 , this . initialCapacity ) ; \n\tcheckArgument ( initialCapacity >= INT00 ) ; \n\t$F1357 ( this , initialCapacity ) return this ; \n\t} \n"}, {"code": "$F15734 $F1 MapMaker maximumSize ( int size ) { \n\tcheckState ( this . maximumSize == UNSET_INT , STRING00 , this . maximumSize ) ; \n\t$F65652 ( checkArgument , size ) this . maximumSize = size ; \n\tthis . useCustomMap = true ; \n\tif $F2015 ( maximumSize ) { \n\t\tthis . nullRemovalCause = RemovalCause . SIZE ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "$F1 public MapMaker concurrencyLevel ( int concurrencyLevel ) { \n\tcheckState ( this . concurrencyLevel == UNSET_INT , STRING00 , this . concurrencyLevel ) ; \n\tcheckArgument ( concurrencyLevel > INT00 ) ; \n\t$F1357 ( this , concurrencyLevel ) return this ; \n\t} \n"}, {"code": "$F15734 $F1 MapMaker expireAfterWrite $F59368 ( duration , unit ) { \n\t$F564 ( checkExpiration , duration , unit ) this . expireAfterWriteNanos = $F60078 ( unit , duration ) ; \n\tif ( duration == INT00 && this . nullRemovalCause == null ) { \n\t\tthis . nullRemovalCause = RemovalCause . EXPIRED ; \n\t\t} \n\tuseCustomMap = true ; \n\treturn this ; \n\t} \n"}, {"code": "$F15734 $F5446012 $F1 MapMaker expireAfterAccess $F59368 ( duration , unit ) { \n\t$F564 ( checkExpiration , duration , unit ) this . expireAfterAccessNanos = $F60078 ( unit , duration ) ; \n\tif ( duration == INT00 && this . nullRemovalCause == null ) { \n\t\tthis . nullRemovalCause = RemovalCause . EXPIRED ; \n\t\t} \n\tuseCustomMap = true ; \n\treturn this ; \n\t} \n"}, {"code": "$F15734 $F5446012 $F28644 GenericMapMaker $F28644 removalListener ( RemovalListener $F28644 listener ) { \n\tcheckState ( this . removalListener == null ) ; \n\t$F762 GenericMapMaker $F28644 me = ( GenericMapMaker $F28644 ) this ; \n\tme . removalListener = checkNotNull ( listener ) ; \n\tuseCustomMap = true ; \n\treturn me ; \n\t} \n"}, {"code": "$F1 public $F28644 ConcurrentMap $F28644 makeMap $F2 { \n\tif ( ! useCustomMap ) { \n\t\treturn new ConcurrentHashMap $F28644 ( getInitialCapacity ( ) , NUM00 , getConcurrencyLevel ( ) ) ; \n\t\t} \n\treturn $F112 ( nullRemovalCause ) ? new MapMakerInternalMap $F28644 ( this ) : new NullConcurrentMap $F28644 ( this ) ; \n\t} \n"}, {"code": "$F1 $F5446012 $F28644 MapMakerInternalMap $F28644 makeCustomMap $F2 { \n\treturn new MapMakerInternalMap $F28644 ( this ) ; \n\t} \n"}, {"code": "$F15734 $F1 $F28644 ConcurrentMap $F28644 makeComputingMap ( Function < $F62572 , $F60560 > computingFunction ) { \n\treturn $F112 ( nullRemovalCause ) ? new MapMaker . ComputingMapAdapter $F28644 ( this , computingFunction ) : new NullComputingConcurrentMap $F28644 ( this , computingFunction ) ; \n\t} \n"}, {"code": "public void parseFile ( File file ) throws ParserException , IOException { \n\t$F99951 ( reader ) try { \n\t\t$F29429 ( reader , file ) ; \n\t\tnanoElement . parseFromReader ( reader ) ; \n\t\t} \n\tcatch ( XMLParseException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t$F94251 ( reader ) } \n"}, {"code": "public void parseString ( String xml ) throws ParserException { \n\ttry { \n\t\tnanoElement . parseString ( xml ) ; \n\t\t} \n\tcatch ( XMLParseException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void parseReader ( Reader reader ) throws ParserException , IOException { \n\ttry { \n\t\tnanoElement . parseFromReader ( reader ) ; \n\t\t} \n\tcatch ( XMLParseException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void save ( File file ) throws IOException { \n\t$F101989 ( writer ) try { \n\t\twriter = new Writer ( file ) ; \n\t\twriter . println ( toPrettyString ( ) ) ; \n\t\t} \n\t$F94251 ( writer ) } \n"}, {"code": "public String toPrettyString $F2 { \n\tStringBuilder sb = recursiveToString ( this , INT00 , indent , $F1197 ) ; \n\tsb . insert ( INT00 , XML_DOCTYPE + STRING00 ) ; \n\t$F2692 ( sb ) } \n"}, {"code": "public final $F1372 T decode ( Val value ) { \n\t$F2201 ( value ) return $F80035 ( decode , value ) ; \n\t} \n"}, {"code": "public final $F1372 T decode ( Object value ) { \n\t$F2201 ( value ) if $F5624 ( value ) { \n\t\t$F28729 ( list ) Cast . < $F37410 > as ( value ) . forEach ( o - > list . add ( decode ( o ) ) ) ; \n\t\treturn $F586252 ( Cast , list ) ; \n\t\t} \n\tif $F5619 ( value ) { \n\t\t$F19262 $F3722 ( map ) ; \n\t\tCast . < $F19379 > as ( value ) . forEach ( <missing ')'> ( k , v ) - > map . put ( $F797 ( k ) , decode ( v ) ) ) ; \n\t\treturn $F586252 ( Cast , map ) ; \n\t\t} \n\tif ( value instanceof Val ) { \n\t\treturn decodeImpl ( Cast . < Val > as ( value ) . get ( ) ) ; \n\t\t} \n\t$F867 ( decodeImpl , value ) } \n"}, {"code": "public final Object encode ( Val value ) { \n\t$F2201 ( value ) return $F80035 ( encode , value ) ; \n\t} \n"}, {"code": "public final Object encode ( Object value ) { \n\t$F2201 ( value ) if ( value instanceof Val ) { \n\t\treturn encodeImpl ( Cast . < Val > as ( value ) . get ( ) ) ; \n\t\t} \n\t$F867 ( encodeImpl , value ) } \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tboolean result ; \n\t\tfinal Object whoKnowsWhat = values . popStringOrByteArray ( ) ; \n\t\tif $F4380 ( whoKnowsWhat ) { \n\t\t\t$F1951471 ( target , whoKnowsWhat ) result = $F96378 ( target ) ; \n\t\t\t} \n\t\telse { \n\t\t\tfinal $F1975 $F197023 ( target , whoKnowsWhat ) ; \n\t\t\tresult = $F44787 ( target ) ; \n\t\t\t} \n\t\tvalues . push ( $F6950312 ( result ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static int getResizedWidth ( String fileName , String mimeType , InputStream input , int maxWidth , int maxHeight ) throws ImageSizeException , FormatNotSuported , FileNotFoundException , DaoManagerException { \n\tDimension $F2207 ( d , getDimensions , fileName , mimeType , input ) ; \n\t$F210 ( getResizedWidth , d , maxWidth , maxHeight ) } \n"}, {"code": "public static Dimension getDimensions ( String fileName , String mimeType , InputStream input ) throws ImageSizeException , FormatNotSuported , DaoManagerException { \n\tif $F540 ( isGIF , mimeType ) { \n\t\ttry $F3342 ( getGifDimensions , input ) catch ( IOException e ) { \n\t\t\tthrow new ImageSizeException ( $F478609 ( e , fileName , mimeType ) ) ; \n\t\t\t} \n\t\t} \n\telse if $F540 ( isJPEG , mimeType ) { \n\t\ttry { \n\t\t\tDimension dim = getJpgDimensions ( input ) ; \n\t\t\tif $F268 ( dim ) $F356 ( dim ) else { \n\t\t\t\tthrow new ImageSizeException $F61905 ( fileName , mimeType ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new ImageSizeException ( $F478609 ( e , fileName , mimeType ) ) ; \n\t\t\t} \n\t\t} \n\telse if $F540 ( isPNG , mimeType ) { \n\t\ttry { \n\t\t\tDimension dim = getPngDimensions ( input ) ; \n\t\t\tif $F268 ( dim ) $F356 ( dim ) else { \n\t\t\t\tthrow new ImageSizeException $F61905 ( fileName , mimeType ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new ImageSizeException ( $F478609 ( e , fileName , mimeType ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tthrow new FormatNotSuported $F500 ( mimeType ) ; \n\t\t} \n\t} \n"}, {"code": "protected void log $F62952 ( message ) { \n\tif $F112 ( stringLogger ) { \n\t\tstringLogger = new StringPluginLogger $F6 ; \n\t\t} \n\t$F386853 ( stringLogger , message ) } \n"}, {"code": "public TasksParserResult invoke ( final File workspace , final VirtualChannel channel ) throws $F10627 { \n\t$F22194 ( files , findFiles , workspace ) TaskScanner taskScanner = new TaskScanner $F3192 ( high , normal , low , ignoreCase ) ; \n\tTasksParserResult result = new TasksParserResult $F27612 ( files ) ; \n\tModuleDetector moduleDetector = createModuleDetector ( workspace ) ; \n\tlog ( $F109024 ( files ) ) ; \n\tfor ( String fileName : files ) { \n\t\ttry { \n\t\t\t$F2501 ( originalFile , workspace , fileName ) Collection $F254905 tasks = taskScanner . scan ( readFile ( originalFile ) ) ; \n\t\t\tif $F386 ( tasks ) { \n\t\t\t\t$F300984 ( absolutePath , originalFile ) String packageName = PackageDetectors . detectPackageName ( absolutePath ) ; \n\t\t\t\tString guessedModule = moduleDetector . guessModuleName ( absolutePath ) ; \n\t\t\t\tString actualModule = StringUtils . defaultIfEmpty ( moduleName , guessedModule ) ; \n\t\t\t\tfor ( Task task : tasks ) { \n\t\t\t\t\ttask . setFileName ( absolutePath ) ; \n\t\t\t\t\ttask . setPackageName ( packageName ) ; \n\t\t\t\t\ttask . setModuleName ( actualModule ) ; \n\t\t\t\t\ttask . setPathName ( $F2515 ( workspace ) ) ; \n\t\t\t\t\tContextHashCode hashCode = new ContextHashCode $F2 ; \n\t\t\t\t\ttask . setContextHashCode ( hashCode . create ( absolutePath , task . getPrimaryLineNumber ( ) , defaultEncoding ) ) ; \n\t\t\t\t\t} \n\t\t\t\tresult . addAnnotations ( tasks ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IOException exception ) $F1645 if $F64905 ( Thread ) { \n\t\t\tthrow new InterruptedException $F6 ; \n\t\t\t} \n\t\t} \n\tresult . addModule ( moduleName ) ; \n\tif $F268 ( stringLogger ) { \n\t\tresult . setLog ( $F797 ( stringLogger ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F762 private $F21 findFiles $F347039 ( workspaceRoot ) { \n\tFileSet fileSet = new FileSet $F2 ; \n\torg . apache . tools . ant . Project project = new org . apache . tools . ant . Project $F2 ; \n\t$F2010540 ( fileSet , project ) fileSet . setDir ( workspaceRoot ) ; \n\tfileSet . setIncludes ( filePattern ) ; \n\tif $F206736 ( StringUtils , excludeFilePattern ) { \n\t\tfileSet . setExcludes ( excludeFilePattern ) ; \n\t\t} \n\tlog ( $F9971 ( workspaceRoot , filePattern , excludeFilePattern ) ) ; \n\treturn fileSet . getDirectoryScanner ( project ) . getIncludedFiles ( ) ; \n\t} \n"}, {"code": "$F1 public M filter ( BiPredicate $F62573 filter ) { \n\tMapBuilder < K , V , M > $F57803 ( builder ) ; \n\tfor ( java . util . Map . Entry $F28644 entry : entrySet ( ) ) { \n\t\tif ( filter . test ( $F18327 ( entry ) ) ) $F97606 ( builder , entry ) } \n\t$F901 ( builder ) } \n"}, {"code": "public ViewFSet $F53007 keySet $F2 { \n\tif $F112 ( keyView ) { \n\t\tkeyView = new LinkedHashViewFSet $F50 $F8210 ( inner ) ; \n\t\t} \n\treturn keyView ; \n\t} \n"}, {"code": "public final String apply ( String input , Language inputLanguage ) { \n\tif ( input != null && Config . get ( $F298 ( this ) , inputLanguage , STRING00 ) . asBoolean ( true ) ) $F14249 ( performNormalization , input , inputLanguage ) return input ; \n\t} \n"}, {"code": "public static $F1105070 getAllFields ( Object context , $F27144 ( annotation ) ) { \n\t$F1105070 annotatedFields = new HashSet $F278543 $F2 ; \n\t$F263365 fields = $F531259 ( context ) ; \n\tfor ( Field field : fields ) { \n\t\tif $F498186 ( field , annotation ) $F529 ( annotatedFields , field ) } \n\treturn annotatedFields ; \n\t} \n"}, {"code": "public static Field getUniqeField ( Object context , $F27144 ( annotation ) ) { \n\t$F1105070 fields = FieldUtils . getAllFields ( context , annotation ) ; \n\tif $F6132 ( fields ) $F2200 else if $F4340 ( fields ) { \n\t\tthrow new DuplicateInjectionException ( $F299 ( context , annotation ) ) ; \n\t\t} \n\treturn new $F278544 ( fields ) . get ( INT00 ) ; \n\t} \n"}, {"code": "public static $F77562 T getFieldValue ( Object context , $F7906 ( expectedType ) , Field field ) { \n\tif $F498138 ( field ) { \n\t\t$F1200 ( msg ) $F1218 ( msg ) $F298342 ( msg , field ) $F1218 ( msg ) msg . append ( $F6291 ( context ) ) ; \n\t\t$F1218 ( msg ) Log . w ( FieldUtils . class . getName ( ) , $F797 ( msg ) ) ; \n\t\t$F10869 ( field ) } \n\t$F105146 ( valueObject ) try $F13003 ( valueObject , field , context ) catch ( IllegalArgumentException iae ) { \n\t\t$F1200 ( msg ) $F1218 ( msg ) msg . append ( $F6291 ( context ) ) ; \n\t\t$F1218 ( msg ) $F298342 ( msg , field ) $F1218 ( msg ) Log . e ( FieldUtils . class . getName ( ) , $F797 ( msg ) , iae ) ; \n\t\t} \n\tcatch ( IllegalAccessException iae ) { \n\t\t$F1200 ( msg ) $F1218 ( msg ) $F298342 ( msg , field ) $F1218 ( msg ) msg . append ( $F6291 ( context ) ) ; \n\t\t$F1218 ( msg ) Log . e ( FieldUtils . class . getName ( ) , $F797 ( msg ) , iae ) ; \n\t\t} \n\t$F14240 ( expectedType , valueObject ) } \n"}, {"code": "$F57800 public static $F28644 $F53004 asMap ( $F77772 ( set ) , Function < $F62572 , V > function ) { \n\tif ( set instanceof SortedSet ) { \n\t\treturn asMap ( ( SortedSet $F53007 ) set , function ) ; \n\t\t} \n\telse { \n\t\treturn new AsMapView $F28644 ( set , function ) ; \n\t\t} \n\t} \n"}, {"code": "$F57800 public static $F28644 $F60352 asMap ( SortedSet $F53007 set , Function < $F62572 , V > function ) { \n\treturn Platform . mapsAsMapSortedSet ( set , function ) ; \n\t} \n"}, {"code": "$F57800 $F5446012 public static $F28644 NavigableMap $F28644 asMap ( NavigableSet $F53007 set , Function < $F62572 , V > function ) { \n\treturn new NavigableAsMapView $F28644 ( set , function ) ; \n\t} \n"}, {"code": "$F5446012 public static $F857709 fromProperties ( Properties properties ) { \n\t$F470613 $F9005 ( builder , ImmutableMap ) ; \n\tfor ( $F189944 $F309386 ( e , properties ) ; \n\t$F5505 ( e ) ; \n\t) { \n\t\t$F356796 ( key , e ) $F205545 ( builder , key , properties ) } \n\t$F901 ( builder ) } \n"}, {"code": "public static < K , V1 , V2 > SortedMap < K , V2 > transformEntries ( SortedMap < K , V1 > fromMap , EntryTransformer < $F62572 , ? super V1 , V2 > transformer ) { \n\treturn Platform . mapsTransformEntriesSortedMap ( fromMap , transformer ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 filterKeys ( $F61236 ( unfiltered ) , final Predicate $F67024 keyPredicate ) { \n\tif ( unfiltered instanceof SortedMap ) { \n\t\treturn filterKeys ( ( $F60352 ) unfiltered , keyPredicate ) ; \n\t\t} \n\telse if ( unfiltered instanceof BiMap ) { \n\t\treturn filterKeys ( ( BiMap $F28644 ) unfiltered , keyPredicate ) ; \n\t\t} \n\tcheckNotNull ( keyPredicate ) ; \n\tPredicate < Entry $F60294 > entryPredicate = keyPredicateOnEntries ( keyPredicate ) ; \n\treturn ( unfiltered instanceof AbstractFilteredMap ) ? filterFiltered ( ( AbstractFilteredMap $F28644 ) unfiltered , entryPredicate ) : new FilteredKeyMap $F28644 $F78175 ( checkNotNull , unfiltered , keyPredicate , entryPredicate ) ; \n\t} \n"}, {"code": "$F5446012 public static $F28644 NavigableMap $F28644 filterKeys ( NavigableMap $F28644 unfiltered , final Predicate $F67024 keyPredicate ) { \n\treturn filterEntries ( unfiltered , Maps . $F53007 keyPredicateOnEntries ( keyPredicate ) ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 filterValues ( $F61236 ( unfiltered ) , final Predicate $F60571 valuePredicate ) { \n\tif ( unfiltered instanceof SortedMap ) { \n\t\treturn filterValues ( ( $F60352 ) unfiltered , valuePredicate ) ; \n\t\t} \n\telse if ( unfiltered instanceof BiMap ) { \n\t\treturn filterValues ( ( BiMap $F28644 ) unfiltered , valuePredicate ) ; \n\t\t} \n\treturn filterEntries ( unfiltered , Maps . $F2338 valuePredicateOnEntries ( valuePredicate ) ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 filterEntries ( $F61236 ( unfiltered ) , Predicate < ? super $F58047 > entryPredicate ) { \n\tif ( unfiltered instanceof SortedMap ) { \n\t\treturn filterEntries ( ( $F60352 ) unfiltered , entryPredicate ) ; \n\t\t} \n\telse if ( unfiltered instanceof BiMap ) { \n\t\treturn filterEntries ( ( BiMap $F28644 ) unfiltered , entryPredicate ) ; \n\t\t} \n\tcheckNotNull ( entryPredicate ) ; \n\treturn ( unfiltered instanceof AbstractFilteredMap ) ? filterFiltered ( ( AbstractFilteredMap $F28644 ) unfiltered , entryPredicate ) : new FilteredEntryMap $F28644 $F2509 ( checkNotNull , unfiltered , entryPredicate ) ; \n\t} \n"}, {"code": "public static $F28644 $F60352 filterEntries ( $F60352 unfiltered , Predicate < ? super $F58047 > entryPredicate ) { \n\treturn Platform . mapsFilterSortedMap ( unfiltered , entryPredicate ) ; \n\t} \n"}, {"code": "private static $F28644 BiMap $F28644 filterFiltered ( FilteredEntryBiMap $F28644 map , Predicate < ? super $F58047 > entryPredicate ) { \n\tPredicate $F58198 predicate = Predicates . and ( map . predicate , entryPredicate ) ; \n\treturn new FilteredEntryBiMap $F28644 ( map . unfiltered ( ) , predicate ) ; \n\t} \n"}, {"code": "$F5446012 public static $F28644 NavigableMap $F28644 unmodifiableNavigableMap ( NavigableMap $F28644 map ) { \n\tcheckNotNull ( map ) ; \n\tif ( map instanceof UnmodifiableNavigableMap ) $F356 ( map ) else { \n\t\treturn new UnmodifiableNavigableMap $F28644 ( map ) ; \n\t\t} \n\t} \n"}, {"code": "$F5446012 public static $F28644 NavigableMap $F28644 synchronizedNavigableMap ( NavigableMap $F28644 navigableMap ) { \n\t$F55359 ( Synchronized , navigableMap ) } \n"}, {"code": "$F1 public EquPart morph $F2 throws Exception { \n\tif ( $F662090 ( getValue ) == INT00 && getValue ( ) . charAt ( INT00 ) == STRING00 ) { \n\t\tfinal EquPart part = $F2074 ( Equ ) . operator ( this ) ; \n\t\t$F99796 ( part ) } \n\treturn this ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tfinal String valueToBeParsed = $F24743 ( getValue ) ; \n\tif $F28022 ( valueToBeParsed ) values . push ( $F242330 ( valueToBeParsed ) ) ; \n\telse values . push ( $F242331 ( valueToBeParsed ) ) ; \n\t} \n"}, {"code": "public String between $F12004 ( leftIndex , rightIndex ) { \n\tString result = this . target4Sub . substring ( $F127853 ( reviseL , leftIndex , reviseR , rightIndex ) ) ; \n\treturn isResetMode ? result : ( this . target4Sub = result ) ; \n\t} \n"}, {"code": "public static SecureProperties encryptPropertiesFile ( File clearProperties ) throws FileNotFoundException , IOException , KeyStoreException { \n\t$F472 ( cProperties ) $F1100 ( fis , clearProperties ) $F29433 ( cProperties , fis ) $F1109 ( fis ) return encryptPropertiesFile ( clearProperties , $F767 ( cProperties , KEY_PATH_PROPERTY_KEY ) , $F767 ( cProperties , KEYSTORE_PASSWORD_PROPERTY_KEY ) , $F767 ( cProperties , ENTRY_NAME_PROPERTY_KEY ) , true ) ; \n\t} \n"}, {"code": "public static SecureProperties encryptPropertiesFile ( File clearProperties , String keyPath , String keyPass , String keyEntry ) throws FileNotFoundException , IOException , KeyStoreException $F138534 ( encryptPropertiesFile , clearProperties , keyPath , keyPass , keyEntry ) "}, {"code": "public static SecureProperties encryptPropertiesFile ( File clearProperties , String keyPath , String keyPass , String keyEntry , boolean retainCrytoConfigProperties ) throws FileNotFoundException , IOException , KeyStoreException { \n\t$F2518 ( propertiesFilePath , clearProperties ) SecureProperties sProperties = new SecureProperties $F2 ; \n\t$F472 ( cProperties ) $F1100 ( fis , clearProperties ) $F29433 ( cProperties , fis ) $F1109 ( fis ) if ( $F1930 ( StringUtils , keyEntry ) || $F1930 ( StringUtils , keyPath ) || $F1930 ( StringUtils , keyPass ) ) { \n\t\tthrow new KeyStoreException $F6 ; \n\t\t} \n\t$F26648 ( sProperties , ENTRY_NAME_PROPERTY_KEY , keyEntry ) $F26648 ( sProperties , KEYSTORE_PASSWORD_PROPERTY_KEY , keyPass ) $F26648 ( sProperties , KEY_PATH_PROPERTY_KEY , keyPath ) for ( $F75783 ( key , cProperties ) ) { \n\t\t$F105093 ( keyStr , key ) if ( $F72352 ( StringUtils , keyStr , ENTRY_NAME_PROPERTY_KEY ) && $F72352 ( StringUtils , keyStr , KEYSTORE_PASSWORD_PROPERTY_KEY ) && $F72352 ( StringUtils , keyStr , KEY_PATH_PROPERTY_KEY ) ) { \n\t\t\tsProperties . setProperty ( $F205543 ( keyStr , cProperties ) ) ; \n\t\t\t} \n\t\t} \n\tif ( ! retainCrytoConfigProperties ) { \n\t\t$F6953 ( sProperties , ENTRY_NAME_PROPERTY_KEY ) $F6953 ( sProperties , KEYSTORE_PASSWORD_PROPERTY_KEY ) $F6953 ( sProperties , KEY_PATH_PROPERTY_KEY ) } \n\t$F21241 ( clearProperties ) OutputStream fos = new FileOutputStream $F243864 ( propertiesFilePath ) ; \n\tsProperties . store ( fos , STRING00 ) ; \n\t$F6369 ( fos ) $F1109 ( fos ) return sProperties ; \n\t} \n"}, {"code": "public void encryptFile $F410003 ( file , replace ) throws MissingParameterException , IOException { \n\tif $F16884 ( file ) { \n\t\tthrow new MissingParameterException $F6 ; \n\t\t} \n\t$F1100 ( fis , file ) $F133984 ( baos ) $F564 ( encryptStream , fis , baos ) File tmpEncrypted = File . createTempFile ( STRING00 , RandomStringUtils . randomAlphanumeric ( INT00 ) ) ; \n\tif $F11857 ( tmpEncrypted ) $F9471 $F80655 ( fos , tmpEncrypted ) IOUtils . write ( $F21499 ( baos ) , fos ) ; \n\t$F1109 ( fos ) if ( replace ) { \n\t\tFile bkpFile = FileUtils . getFile ( $F22645 ( file ) ) ; \n\t\tFileUtils . moveFile ( file , bkpFile ) ; \n\t\ttry { \n\t\t\tFileUtils . moveFile ( tmpEncrypted , FileUtils . getFile ( $F11868 ( file ) ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new IOException $F14746 ( e ) ; \n\t\t\t} \n\t\t$F21241 ( bkpFile ) } \n\telse { \n\t\tFileUtils . moveFile ( tmpEncrypted , FileUtils . getFile ( $F22645 ( file ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void encryptStream $F34940 ( clearInputStream , encryptedOutputStream ) throws IOException , MissingParameterException { \n\t$F1975 $F588863 ( clearBytes , IOUtils , clearInputStream ) ; \n\t$F1975 cipherBytes = $F590483 ( encryptionProvider , clearBytes ) ; \n\t$F21494 ( encryptedOutputStream , cipherBytes ) $F6369 ( encryptedOutputStream ) $F1109 ( encryptedOutputStream ) } \n"}, {"code": "$F1 public void putHandler ( String url , HandlerDefinition handler ) { \n\t$F2725 ( handlerMappingStorage , url , handler ) removeHandlerWithView ( url ) ; \n\t} \n"}, {"code": "$F1 public void putHandlerWithView ( String url , HandlerDefinition handler ) { \n\t$F2725 ( handlerWithViewMappingInfoStorage , url , handler ) removeHandler ( url ) ; \n\t} \n"}, {"code": "$F1 public void putViewName $F1195 ( url , viewName ) $F2726 ( viewNameMappingInfoStorage , url , viewName ) "}, {"code": "public ByteArrayInput reset $F12004 ( offset , len ) { \n\t$F598462 ( len ) $F1357 ( this , offset ) this . limit = offset + len ; \n\treturn this ; \n\t} \n"}, {"code": "public int readTag $F2 throws IOException { \n\tif ( offset == limit ) { \n\t\tlastTag = INT00 ; \n\t\t$F8383 } \n\t$F147835 ( tag , readRawVarint32 ) if ( tag > > > WireFormat . TAG_TYPE_BITS == INT00 ) { \n\t\tthrow ProtobufException . invalidTag ( ) ; \n\t\t} \n\tlastTag = tag ; \n\treturn tag ; \n\t} \n"}, {"code": "public static ProtocolStrategy getStrategy ( Resource resource ) throws ProtocolException { \n\tif $F112 ( resource ) { \n\t\tthrow new ProtocolException $F2821 ( resource ) ; \n\t\t} \n\tProtocolStrategy retval = findStrategyByUrl ( resource ) ; \n\t$F3279 ( retval ) throw new ProtocolException $F2821 ( resource ) ; \n\t} \n"}, {"code": "public void print ( ProjectModel project , File f , boolean includeClasses ) throws IOException { \n\t$F4996188 ( writer , f ) $F5605 ( print , project , writer , includeClasses ) $F1109 ( writer ) } \n"}, {"code": "public void print ( ProjectModel project , Writer w , boolean includeClasses ) { \n\t$F9810 ( out , w ) $F10279 ( out ) if ( includeClasses ) $F602649 ( out ) else { \n\t\t$F10279 ( out ) $F10279 ( out ) } \n\tif ( layoutHorizontal ) $F602649 ( out ) $F1987 ( i ) for ( ModuleModel module : $F870780 ( project ) . values ( ) ) { \n\t\tif ( module . isHideFromDependencyGraphOutput ( ) ) $F42718 if ( includeClasses ) { \n\t\t\tout . printf ( STRING00 , i ++ ) ; \n\t\t\t} \n\t\tout . printf ( STRING00 , module . getQualifiedNameOfRepresentingClass ( ) , $F3250545 ( module ) , ( $F11237 ( module ) && ! $F6483 ( module ) . isEmpty ( ) ) ? $F6483 ( module ) : STRING00 , $F54999 ( includeClasses ) ) ; \n\t\tif ( includeClasses ) { \n\t\t\tfor ( ClassModel clazz : $F9985 ( module ) ) { \n\t\t\t\tout . printf ( STRING00 , $F329396 ( clazz ) , $F19101 ( clazz ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( includeClasses ) { \n\t\t\t$F88889 ( out ) } \n\t\t} \n\tfor ( ModuleModel module : $F870780 ( project ) . values ( ) ) { \n\t\tif ( module . isHideFromDependencyGraphOutput ( ) ) $F42718 for ( ModuleModel imported : module . getImportedModules ( ) ) { \n\t\t\tif ( imported . isHideFromDependencyGraphOutput ( ) ) $F42718 out . printf ( STRING00 , module . getQualifiedNameOfRepresentingClass ( ) , imported . getQualifiedNameOfRepresentingClass ( ) , $F54999 ( includeClasses ) ) ; \n\t\t\t} \n\t\tfor ( ModuleModel exported : module . getExportedModules ( ) ) { \n\t\t\tif ( exported . isHideFromDependencyGraphOutput ( ) ) $F42718 out . printf ( STRING00 , module . getQualifiedNameOfRepresentingClass ( ) , exported . getQualifiedNameOfRepresentingClass ( ) ) ; \n\t\t\t} \n\t\t} \n\tif ( includeClasses ) { \n\t\tfor ( ClassModel clazz : $F9985 ( project ) . values ( ) ) { \n\t\t\tfor ( ClassModel used : clazz . getUsesClasses ( ) ) { \n\t\t\t\t$F109298 ( used , clazz ) out . printf ( STRING00 , $F329396 ( clazz ) , $F329396 ( used ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F10279 ( out ) $F6369 ( out ) } \n"}, {"code": "public void reindex $F2 { \n\tJSONObject ob ; \n\ttry $F28971 ( ob , findKeysInBucketAsJSON ) catch ( PersistenceException e ) { \n\t\t$F1344861 ( std , e ) $F254 } \n\tif $F6074 ( ob ) { \n\t\ttry { \n\t\t\t$F44453 ( keys , ob ) for ( $F8125 ( i , keys ) ) { \n\t\t\t\t$F221952 ( key , keys , i ) try { \n\t\t\t\t\t$F17449 ( item , get , key ) $F20969 ( item , reindex ) } \n\t\t\t\tcatch ( Throwable t ) { \n\t\t\t\t\t$F1344861 ( std , t ) } \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Throwable t ) { \n\t\t\t$F1344861 ( std , t ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public void update ( Transaction xaction , T item , $F2731 ( state ) ) throws PersistenceException { \n\tString $F41690 ( newKey , getKeyValue , state , getPrimaryKey ) ; \n\t$F8494 ( oldKey , getKeyValue , item ) if $F654564 ( newKey , oldKey ) { \n\t\tif $F112 ( newKey ) { \n\t\t\tstate . put ( getPrimaryKeyField ( ) , $F34105 ( getValue , item , getPrimaryKeyField ) ) ; \n\t\t\t} \n\t\t$F564 ( create , xaction , state ) } \n\telse { \n\t\t$F564 ( remove , xaction , item ) $F564 ( create , xaction , state ) } \n\tgetCache ( ) . release ( item ) ; \n\t} \n"}, {"code": "public BigInteger append ( BigInteger s1 , BigInteger s2 ) { \n\t$F37371 ( s1 , s2 ) $F96381 ( s1 , s2 ) } \n"}, {"code": "public void set ( T value ) { \n\tif $F19100 ( logger ) { \n\t\tlogger . trace ( $F1615739 ( display , name , value ) , new Throwable $F6 ) ; \n\t\t} \n\t$F17449 ( thisValue , offerInternal , value ) if $F268 ( thisValue ) { \n\t\tthrow new IllegalStateException ( $F114541 ( name , display , thisValue ) + STRING00 + display ( value ) + STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public T get $F2 { \n\treturn getInternal ( x - > x , ( ) - > <missing ';'> { \n\t\t$F305287 ( defaultValue , defaultExpression ) $F4980 ( defaultValue , name ) value = defaultValue ; \n\t\treturn defaultValue ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Optional $F26725 getTarget ( HString hString ) { \n\tif ( hString == null || hString . document ( ) == null ) $F22427 ( Optional ) return hString . document ( ) . getAnnotation ( target ) ; \n\t} \n"}, {"code": "public void writeToStream ( OutputStream outputStream ) throws IOException { \n\tif ( exhausted ) $F60771 MessageDigest digest = getDigest ( ) ; \n\tDigestOutputStream digestOutputStream = new DigestOutputStream ( outputStream , digest ) ; \n\t$F314297 ( dataOutputStream , digestOutputStream ) $F117472 ( dataOutputStream , CURRENT_BINARY_VERSION ) dataOutputStream . writeUTF ( type ( ) ) ; \n\t$F99062 ( dataOutputStream , compression ) $F118923 ( dataOutputStream , contentLength ) Compressor compressor = createCompressor ( compression ) ; \n\tOutputStream compressingStream = compressor . compress ( dataOutputStream ) ; \n\tStreams . copyStream ( contentStream , compressingStream , true ) ; \n\t$F1975 $F145037 ( hashBytes , digest ) ; \n\tid = HashUtil . convertHashBytesToString ( hashBytes ) ; \n\t} \n"}, {"code": "public static < E extends Blob > E retrieveFromStream ( String id , InputStream inputStream , $F52984 ( clazz ) ) throws IOException { \n\t$F133680 ( logger , id , clazz ) $F80521 ( dataInputStream , inputStream ) $F160644 ( binaryVersion , dataInputStream ) String compression ; \n\tString type ; \n\tlong contentLength ; \n\tif $F9869 ( binaryVersion ) { \n\t\t$F212142 ( type , dataInputStream ) $F212142 ( compression , dataInputStream ) $F162555 ( contentLength , dataInputStream ) } \n\telse $F504 ( binaryVersion ) logger . debug ( String . format ( STRING00 , type , compression , contentLength , FileSizeFormatter . formateBytes ( contentLength , INT00 ) ) ) ; \n\tCompressor compressor = CompressorFactory . getCompressor ( compression ) ; \n\tInputStream contentStream = compressor . decompress ( dataInputStream ) ; \n\ttry { \n\t\tConstructor $F26212 constructor = clazz . getDeclaredConstructor ( $F4868 , $F4868 , $F520851 , $F4884 ) ; \n\t\treturn constructor . newInstance ( $F86294 ( id , compression , contentStream , contentLength ) ) ; \n\t\t} \n\t$F11569 ( e ) } \n"}, {"code": "static public IParserInput getInstance $F347039 ( file ) throws IOException { \n\t$F208402 ( args ) try ( $F96168 ( reader , file ) ) { \n\t\t$F4728 ( aConfigLine ) while $F57865 ( aConfigLine , reader ) if ( $F1215 ( aConfigLine ) && $F143156 ( aConfigLine ) ) $F528 ( args , aConfigLine ) } \n\tfinal NamespaceParser parser = new NamespaceParser $F2 ; \n\tparser . args = $F193953 ( args ) ; \n\treturn parser ; \n\t} \n"}, {"code": "static public IParserInput getInstance $F387805 ( args ) { \n\tfinal NamespaceParser parser = new NamespaceParser $F2 ; \n\t$F1357 ( parser , args ) return parser ; \n\t} \n"}, {"code": "static public String unparseTokens ( final List < ICmdLineArg $F45 > args ) { \n\t$F102635 ( out ) $F812 ( unparseTokens , args , out ) $F1226 ( out ) } \n"}, {"code": "static public void unparseTokens ( final String prefix , final List < ICmdLineArg $F45 > args , final StringBuilder out ) { \n\tfinal Iterator < ICmdLineArg $F45 > $F60361 ( aIter , args ) ; \n\twhile $F11310 ( aIter ) { \n\t\tfinal ICmdLineArg $F45 $F11312 ( arg , aIter ) ; \n\t\tif ( arg . isParsed ( ) ) arg . exportNamespace ( prefix , out ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F7932690 parseTokens $F2 { \n\tfinal $F355291 $F54 ( out ) ; \n\tfinal List < NodeOc > $F54 ( depth ) ; \n\tfinal List < NodeOc > $F54 ( line ) ; \n\t$F5223 ( Arrays , args ) for ( $F2674 ( a , args ) ) { \n\t\tfinal String $F387707 ( value , parseNamespaceLine , args , a , line ) ; \n\t\t$F276 ( buildTokens , commandPrefix , out , depth , line , value ) } \n\tfor ( $F10914 ( d , depth ) ) out . add ( new Token ( commandPrefix , CLOSE_GROUP , INT00 , INT00 , false ) ) ; \n\treturn out . toArray ( new Token $F31920 ( out ) ) ; \n\t} \n"}, {"code": "public static String getSourceFolder ( Resource resource , CopyResourcesMojo copyResourcesMojo , File workspacePlugin ) throws ResourceExecutionException { \n\tProject project = ProjectService . getProject ( resource ) ; \n\ttry { \n\t\tGitService . cloneProjectIntoWorkspace ( $F99345 ( project , workspacePlugin ) ) ; \n\t\treturn PathUtils . getAbsoluteProjectPath ( $F99345 ( project , workspacePlugin ) ) ; \n\t\t} \n\tcatch ( GitException e ) { \n\t\tthrow new ResourceExecutionException $F5148 ( project , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void handleInputStream $F605604 ( is ) throws IOException { \n\t$F42520 ( LOG ) final OutputStream os = new FileOutputStream ( this . m_file ) ; \n\ttry { \n\t\tfinal long bytesWritten = org . littleshoot . util . IoUtils . copy ( is , os , this . m_writeListener ) ; \n\t\tLOG . trace ( $F320 ( bytesWritten ) + this . m_file ) ; \n\t\t} \n\t$F377025 ( IOUtils , is , os ) } \n"}, {"code": "$F1 public ISource locate ( String path ) { \n\tif $F28525 ( path ) { \n\t\treturn new UnfoundSource ( path ) ; \n\t\t} \n\tString localPath = $F3585977 ( path ) ; \n\tif $F5667 ( localPath ) { \n\t\tpath = StringUtils . removeStart ( path , MultiLocator . RESOURCE ) ; \n\t\treturn this . rLocator . locate ( path ) ; \n\t\t} \n\treturn this . fLocator . locate ( path ) ; \n\t} \n"}, {"code": "public static ProjectModel getProjectModel $F2 { \n\tsynchronized ( Modules . class ) { \n\t\tif ( Modules . projectModel == null ) { \n\t\t\tClassLoader classLoader = Modules . class . getClassLoader ( ) ; \n\t\t\tConfig config = new Config ( $F469 ) ; \n\t\t\ttry ( InputStream in = classLoader . getResourceAsStream ( STRING00 ) ) { \n\t\t\t\t$F472 ( properties ) if $F268 ( in ) $F130036 ( properties , in ) else { \n\t\t\t\t\t$F53680 ( Modules ) } \n\t\t\t\tconfig = new Config ( properties ) ; \n\t\t\t\t$F53680 ( Modules ) } \n\t\t\tcatch ( IOException e1 ) { \n\t\t\t\t$F36833 ( Modules ) ( STRING00 ) ; \n\t\t\t\t} \n\t\t\ttry { \n\t\t\t\tImmutableList $F76238 classes = FluentIterable . from ( $F2704 ( ClassPath , classLoader ) . getResources ( ) ) . filter ( ClassInfo . class ) . toList ( ) ; \n\t\t\t\tClassParser parser = new ClassParser $F2 ; \n\t\t\t\t$F586286 ( parser ) . setUseModuleNames ( config . useModuleNames ) ; \n\t\t\t\tfor ( ClassInfo info : classes ) { \n\t\t\t\t\tif ( ! config . includeJars ) { \n\t\t\t\t\t\tif ( $F5755 ( $F45321 ( info ) . getProtocol ( ) ) ) $F42718 } \n\t\t\t\t\tif ( config . excludePath != null && $F45321 ( info ) . getPath ( ) . contains ( config . excludePath ) ) $F42718 Modules . logger . trace ( STRING00 + $F45321 ( info ) ) ; \n\t\t\t\t\ttry ( InputStream is = classLoader . getResourceAsStream ( $F522846 ( info ) ) ) { \n\t\t\t\t\t\t$F22761 ( reader , is ) $F184476 ( parser , reader ) } \n\t\t\t\t\tcatch ( Throwable t ) { \n\t\t\t\t\t\t$F36833 ( Modules ) ( $F51159 ( info , t ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F586286 ( parser ) . resolveDependencies ( ) ; \n\t\t\t\tModules . projectModel = $F586286 ( parser ) ; \n\t\t\t\t} \n\t\t\t$F52054 ( e ) } \n\t\t} \n\treturn Modules . projectModel ; \n\t} \n"}, {"code": "public static $F3703 getClasses $F2614 ( module ) { \n\t$F26806 $F6940 ( result ) ; \n\tClassLoader classLoader = Modules . class . getClassLoader ( ) ; \n\tfor ( ClassModel info : Modules . getModuleModel ( module ) . getAllClassDependencies ( ) ) { \n\t\ttry { \n\t\t\tresult . add ( classLoader . loadClass ( $F329396 ( info ) ) ) ; \n\t\t\t} \n\t\tcatch ( ClassNotFoundException e ) { \n\t\t\t$F36833 ( Modules ) ( STRING00 + $F329396 ( info ) , e ) ; \n\t\t\t} \n\t\t} \n\treturn result . toArray ( new $F2612 $F25623 ) ; \n\t} \n"}, {"code": "public static $F26212 $F26213 newIdentityHashSet $F2 { \n\treturn Sets . newSetFromMap ( Maps . < E , Boolean > newIdentityHashMap $F2 ) ; \n\t} \n"}, {"code": "public static $F26212 $F26213 newSetFromMap ( Map < E , Boolean > map ) { \n\treturn Platform . newSetFromMap ( map ) ; \n\t} \n"}, {"code": "public static $F26212 SetView $F26212 intersection ( final $F26213 set1 , final $F19253 set2 ) { \n\t$F2755 ( checkNotNull , set1 ) $F2755 ( checkNotNull , set2 ) final Predicate $F282 inSet2 = $F64259 ( Predicates , set2 ) ; \n\treturn new SetView $F26212 $F2 { \n\t\t$F1 public $F59768 iterator $F2 { \n\t\t\treturn Iterators . filter ( $F58450 ( set1 , inSet2 ) ) ; \n\t\t\t} \n\t\t$F1 public int size $F2 { \n\t\t\treturn Iterators . size ( iterator ( ) ) ; \n\t\t\t} \n\t\t$F1 public boolean isEmpty $F2 { \n\t\t\treturn ! iterator ( ) . hasNext ( ) ; \n\t\t\t} \n\t\t$F1 public boolean contains ( Object object ) { \n\t\t\treturn $F6948 ( set1 , object ) && $F6948 ( set2 , object ) ; \n\t\t\t} \n\t\t$F1 public boolean containsAll $F62028 ( collection ) { \n\t\t\treturn $F66685 ( set1 , collection ) && $F66685 ( set2 , collection ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F26212 SetView $F26212 symmetricDifference ( Set $F39164 set1 , Set $F39164 set2 ) { \n\t$F2755 ( checkNotNull , set1 ) $F2755 ( checkNotNull , set2 ) return difference ( union ( set1 , set2 ) , intersection ( set1 , set2 ) ) ; \n\t} \n"}, {"code": "public static $F26212 SortedSet $F26212 filter ( SortedSet $F26212 unfiltered , Predicate $F59476 predicate ) { \n\treturn Platform . setsFilterSortedSet ( unfiltered , predicate ) ; \n\t} \n"}, {"code": "void commit ( boolean onePhase ) throws XAException { \n\tif ( this . getProgressState ( ) == XAResourceProgressState . COMMITTED ) $F255 if ( this . hasHeuristicOutcome ( ) ) { \n\t\tthrow new XAException ( this . heuristicState ) ; \n\t\t} \n\tif $F7301 ( checkTXRequirements ) { \n\t\tthrow new SampleTransactionalException $F2821 ( this ) ; \n\t\t} \n\tthis . checkRollback ( ) ; \n\tif ( this . getProgressState ( ) != XAResourceProgressState . ACTIVE && onePhase ) { \n\t\tthrow new XAException ( XAException . XAER_RMFAIL ) ; \n\t\t} \n\telse if ( this . getProgressState ( ) != XAResourceProgressState . PREPARED && ! onePhase ) { \n\t\tthrow new XAException ( XAException . XAER_RMFAIL ) ; \n\t\t} \n\telse if ( this . getProgressState ( ) != XAResourceProgressState . PREPARED && this . getProgressState ( ) != XAResourceProgressState . ACTIVE ) { \n\t\tthrow new XAException ( XAException . XAER_RMFAIL ) ; \n\t\t} \n\tthis . setProgressState ( XAResourceProgressState . COMMITTING ) ; \n\ttry { \n\t\tthis . getManagedConnection ( ) . commit ( onePhase ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrowXAException ( XAException . XAER_PROTO , e ) ; \n\t\t} \n\tthis . setProgressState ( XAResourceProgressState . COMMITTED ) ; \n\t} \n"}, {"code": "public void firePutNotification ( Iterator < RegistryListener $F28644 > listeners , K putKey , V putValue ) { \n\twhile $F11310 ( listeners ) { \n\t\t$F11311 ( listeners ) . onPutEntry ( putKey , putValue ) ; \n\t\t} \n\t} \n"}, {"code": "public void fireRemoveNotification ( Iterator < RegistryListener $F28644 > listeners , K removeKey , V removeValue ) { \n\twhile $F11310 ( listeners ) { \n\t\t$F11311 ( listeners ) . onRemoveEntry ( removeKey , removeValue ) ; \n\t\t} \n\t} \n"}, {"code": "public void fireReplaceNotification ( Iterator < RegistryListener $F28644 > listeners , K replaceKey , V oldValue , V newValue ) { \n\twhile $F11310 ( listeners ) { \n\t\t$F11311 ( listeners ) . onReplaceEntry ( replaceKey , oldValue , newValue ) ; \n\t\t} \n\t} \n"}, {"code": "public static String generateToken ( final HttpServletRequest request , final String key ) { \n\t$F404335 ( token , UUID ) request . getSession ( true ) . setAttribute ( key , token ) ; \n\treturn token ; \n\t} \n"}, {"code": "public static String getToken ( final HttpServletRequest request , final String key ) { \n\treturn ( String ) request . getSession ( true ) . getAttribute ( key ) ; \n\t} \n"}, {"code": "public static boolean isTokenValid ( final HttpServletRequest request , final String key ) { \n\t$F380462 ( token , request , key ) if $F109626 ( StringUtils , token ) $F1668 String session = ( String ) request . getSession ( true ) . getAttribute ( key ) ; \n\t$F66747 ( token , session ) } \n"}, {"code": "public static void removeToken ( final HttpServletRequest request , final String key ) { \n\trequest . getSession ( true ) . removeAttribute ( key ) ; \n\t} \n"}, {"code": "$F1 public FilterReply decide ( ILoggingEvent event ) { \n\tLoggerContext loggerFactory = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; \n\tLogger logger = loggerFactory . getLogger ( $F9793 ( event ) ) ; \n\tif ( $F5227 ( event ) . isGreaterOrEqual ( logger . getEffectiveLevel ( ) ) ) return FilterReply . NEUTRAL ; \n\treturn FilterReply . DENY ; \n\t} \n"}, {"code": "$F1 public String getExtension $F2 { \n\tif ( this . path == null || this . path . isEmpty ( ) ) $F4801 String ext = this . path . substring ( this . path . lastIndexOf ( STRING00 ) + INT00 ) ; \n\treturn ext ; \n\t} \n"}, {"code": "public LogRecordWriter writeObject ( Object object ) throws IOException { \n\tif $F112 ( object ) { \n\t\treturn this . writeNullObject ( ) ; \n\t\t} \n\t$F94339 ( out ) try { \n\t\t$F21492 ( byteOutput ) $F238571 ( out , byteOutput ) $F40824 ( out , object ) $F6369 ( out ) $F133791 ( serBytes , byteOutput ) $F97192 ( io , serBytes ) $F21494 ( io , serBytes ) } \n\tfinally { \n\t\tif $F268 ( out ) $F191052 ( IOUtils , out ) } \n\treturn this ; \n\t} \n"}, {"code": "public void applyDefaults ( final char commandPrefix , final List < ICmdLineArg $F45 > allKnownArgs ) { \n\tfor ( final String argNameToReset : getValues ( ) ) { \n\t\t$F88368 ( argNameToReset ) $F1979162 ( token ) if $F96379 ( argNameToReset ) token = new Token ( commandPrefix , commandPrefix + argNameToReset ) ; \n\t\telse token = new Token ( commandPrefix , STRING00 + commandPrefix + commandPrefix + argNameToReset ) ; \n\t\tfinal List < ICmdLineArg $F45 > $F54 ( bestArgs ) ; \n\t\tCmdLine . matchingArgs ( $F43386 ( bestArgs , allKnownArgs , token ) ) ; \n\t\t$F108257 ( bestArgs ) final ICmdLineArg $F45 $F22442 ( target , bestArgs ) ; \n\t\ttarget . useDefaults ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String convert ( final String valueStr , final boolean _caseSensitive , final Object target ) { \n\t$F548236 ( _caseSensitive , valueStr ) return $F9283 ( valueStr ) ; \n\t} \n"}, {"code": "public Reader requestGet $F2 throws IOException { \n\t$F35406 ( connection ) connection . setDoOutput ( false ) ; \n\treturn new Reader $F29811 ( connection ) ; \n\t} \n"}, {"code": "public Reader requestPost ( String data ) throws IOException { \n\t$F35406 ( connection ) $F176300 ( connection ) Writer writer = new Writer $F314946 ( connection ) ; \n\t$F21494 ( writer , data ) $F1109 ( writer ) return new Reader $F29811 ( connection ) ; \n\t} \n"}, {"code": "$F1339 public void initialize $F2 { \n\tlogger . debug ( $F156028 ( this ) + $F129326 ( System , this ) + STRING00 ) ; \n\tattributesMap = Collections . synchronizedMap ( $F384172 ) ; \n\t} \n"}, {"code": "public static $F1372 T isNull ( final T value , final T replacement ) { \n\t$F3446 ( value , replacement ) return value ; \n\t} \n"}, {"code": "public static $F1372 T nullIf ( final T value , final T value2 ) { \n\t$F37371 ( value , value2 ) if $F8962 ( value , value2 ) $F2200 return value ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal Object target = values . popStringOrByteArray ( ) ; \n\t\tif $F4380 ( target ) values . push ( new Double ( $F2100606 ( target ) ) ) ; \n\t\telse values . push ( new Double ( $F197094 ( target ) . length ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public ResourceMinimalImpl $F1372 setResource ( T resource ) { \n\treturn new ResourceMinimalImpl $F50 $F3192 ( resourceID , provider , resource , consumer ) ; \n\t} \n"}, {"code": "public void addOutputPlugin ( OutputPluginModel $F19378 outputPlugin ) throws IllegalIDException { \n\tif ( ! futureHashMap . containsKey ( $F181913 ( outputPlugin ) ) ) { \n\t\t$F528 ( outputPlugins , outputPlugin ) futureHashMap . put ( $F181913 ( outputPlugin ) , submit ( outputPlugin ) ) ; \n\t\t} \n\telse { \n\t\tif ( futureHashMap . get ( $F181913 ( outputPlugin ) ) . isDone ( ) ) { \n\t\t\tfutureHashMap . remove ( $F181913 ( outputPlugin ) ) ; \n\t\t\tfutureHashMap . put ( $F181913 ( outputPlugin ) , submit ( outputPlugin ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void removeOutputPlugin ( OutputPluginModel outputPlugin ) { \n\tFuture future = futureHashMap . remove ( $F181913 ( outputPlugin ) ) ; \n\tif $F268 ( future ) $F160055 ( future ) $F6953 ( outputPlugins , outputPlugin ) } \n"}, {"code": "public void addOutputExtension ( OutputExtensionModel $F19378 outputExtension ) throws IllegalIDException { \n\tif ( outputExtensions . containsKey ( $F1312762 ( outputExtension ) ) ) { \n\t\toutputExtensions . get ( $F1312762 ( outputExtension ) ) . add ( outputExtension ) ; \n\t\t} \n\telse { \n\t\tIdentifiableSet < OutputExtensionModel $F19378 > outputExtensionList = new IdentifiableSet $F50 $F2 ; \n\t\t$F528 ( outputExtensionList , outputExtension ) outputExtensions . put ( $F1312762 ( outputExtension ) , outputExtensionList ) ; \n\t\t} \n\t$F2074 ( IdentificationManager ) . getIdentification ( outputExtension ) . ifPresent ( id - $F50367 ( outputPlugins ) . filter ( outputPlugin - > outputPlugin . getID ( ) . equals ( $F1312762 ( outputExtension ) ) ) . forEach ( outputPlugin - > outputPlugin . outputExtensionAdded ( id ) ) ) ; \n\t} \n"}, {"code": "public void removeOutputExtension ( OutputExtensionModel $F19378 outputExtension ) { \n\tIdentifiableSet < OutputExtensionModel $F19378 > outputExtensions = this . outputExtensions . get ( $F1312762 ( outputExtension ) ) ; \n\tif $F268 ( outputExtensions ) $F6953 ( outputExtensions , outputExtension ) $F2074 ( IdentificationManager ) . getIdentification ( outputExtension ) . ifPresent ( id - $F50367 ( outputPlugins ) . filter ( outputPlugin - > outputPlugin . getID ( ) . equals ( $F1312762 ( outputExtension ) ) ) . forEach ( outputPlugin - > outputPlugin . outputExtensionRemoved ( id ) ) ) ; \n\t} \n"}, {"code": "public void passDataToOutputPlugins ( EventModel event ) { \n\tIdentificationManagerM $F13215 ( identificationManager , IdentificationManager ) ; \n\tList < Identification > allIds = $F5027 ( outputPlugins , identificationManager ) <missing ';'> getIdentification ) . $F161 ( filter , Optional ) $F466047 $F161 ( map , Optional ) $F55662 $F5032 ( collect , Collectors ) HashMap < Integer , List < Identification > > outputPluginBehaviour = event . getEventBehaviourController ( ) . getOutputPluginBehaviour ( allIds ) ; \n\t$F762 Set < OutputPluginModel > outputPluginsCopy = ( Set < OutputPluginModel > ) this . outputPlugins . clone ( ) ; \n\tFunction < List < Identification > , List < OutputPluginModel > > getOutputPlugin = ids - $F50367 ( ids ) . map ( id - $F50367 ( outputPluginsCopy ) . filter ( outputPlugin - > outputPlugin . isOwner ( id ) ) . findFirst ( ) . orElseGet ( null ) ) . filter ( Objects : : <missing ';'> $F29989 $F161 ( peek , outputPluginsCopy ) remove ) . $F5032 ( collect , Collectors ) $F8146 ( outputPluginBehaviour ) . sorted ( Comparator . comparingInt ( <missing ')'> ( Map . Entry < Integer , List < Identification > > x ) - $F44842 ( x ) ) . reversed ( ) ) . flatMap ( entry - > getOutputPlugin . apply ( $F269 ( entry ) ) . stream ( ) ) . distinct ( ) . forEach ( $F324393 ( op , processOutputPlugin , event ) ) ; \n\toutputPluginsCopy . forEach ( $F324393 ( op , processOutputPlugin , event ) ) ; \n\t} \n"}, {"code": "public List < Identification > getAssociatedOutputExtension ( OutputPluginModel $F19378 outputPlugin ) { \n\tIdentifiableSet < OutputExtensionModel $F19378 > outputExtensions = this . outputExtensions . get ( $F181913 ( outputPlugin ) ) ; \n\tIdentificationManagerM $F13215 ( identificationManager , IdentificationManager ) ; \n\treturn filterType ( outputExtensions , outputPlugin ) . stream ( ) . map ( identificationManager : : <missing ';'> getIdentification ) . $F161 ( filter , Optional ) $F466047 $F161 ( map , Optional ) $F55662 $F5032 ( collect , Collectors ) } \n"}, {"code": "$F762 private List < OutputExtensionModel $F19378 > filterType ( Collection < OutputExtensionModel $F19378 > outputExtensions , OutputPluginModel $F19378 outputPlugin ) { \n\tBiPredicate < $F76374 , $F76374 > isAssignable = <missing ';'> $F17927 first , second ) $F17931 { \n\t\tif $F112 ( first ) { \n\t\t\t$F431381 ( second ) } \n\t\telse if $F268 ( second ) { \n\t\t\treturn $F6930 ( first , second ) ; \n\t\t\t} \n\t\telse $F1668 } \n\t; \n\treturn $F6151 ( outputExtensions ) ( outputExtension - > isAssignable . test ( outputExtension . getArgumentType ( ) , outputPlugin . getArgumentType ( ) ) ) . filter ( outputExtension - > isAssignable . test ( $F20027 ( outputExtension ) , outputPlugin . getReceivingType ( ) ) ) . collect ( $F1507 ( Collectors ) ) ; \n\t} \n"}, {"code": "public $F359199 List < CompletableFuture $F61574 > generateAllOutputExtensions ( OutputPluginModel $F359199 outputPlugin , T t , EventModel event ) { \n\tIdentifiableSet < OutputExtensionModel $F19378 > extensions = outputExtensions . get ( $F181913 ( outputPlugin ) ) ; \n\tif $F112 ( extensions ) $F211479 return filterType ( extensions , outputPlugin ) . stream ( ) . map ( extension - > <missing ';'> { \n\t\ttry { \n\t\t\treturn ( OutputExtensionModel < X , T > ) extension ; \n\t\t\t} \n\t\tcatch ( ClassCastException e ) $F2200 } \n\t) . $F161 ( filter , Objects ) $F29989 filter ( outputExtension - > outputExtension . canRun ( event ) ) . map ( $F1775144 ( extension , submit ) - > extension . generate ( event , t ) ) ) . $F5032 ( collect , Collectors ) } \n"}, {"code": "$F762 public $F1372 Object write ( final T object , final DataTypeDescriptor $F1372 descriptor ) throws Exception { \n\t$F544121 ( descriptor ) $F90659 ( object ) TypeEnum $F2251 ( typeEnum , descriptor ) ; \n\tswitch ( typeEnum ) { \n\t\tcase BOOL : case INT16 : case INT32 : case INT64 : case FLOAT : case DOUBLE : case STRING : return object ; \n\t\tcase DATETIME : return writeDate ( ( Date ) object ) ; \n\t\tcase ENUM : return writeEnum ( ( Enum ) object ) ; \n\t\tcase LIST : return writeList ( ( List ) object , ( ListDescriptor ) descriptor ) ; \n\t\tcase SET : return writeSet ( ( Set ) object , ( SetDescriptor ) descriptor ) ; \n\t\tcase MAP : return writeMap ( ( Map ) object , ( MapDescriptor ) descriptor ) ; \n\t\tcase MESSAGE : return writeMessage ( ( Message ) object ) ; \n\t\t$F180900 ( VOID ) $F158651 ( descriptor ) } \n\t} \n"}, {"code": "public $F1372 T read ( final Object object , final DataTypeDescriptor $F1372 descriptor ) throws Exception { \n\t$F544121 ( descriptor ) $F4282 ( doRead , object , descriptor ) } \n"}, {"code": "public static YamlNode nullToNode ( YamlNode value ) { \n\treturn $F1725713 ( Optional , value ) ( YamlNullNode : : <missing ';'> instance ) ; \n\t} \n"}, {"code": "public static YamlNode nullToMissing ( YamlNode value ) { \n\treturn $F1725713 ( Optional , value ) ( YamlMissingNode : : <missing ';'> instance ) ; \n\t} \n"}, {"code": "static public VersionString getNextVersion ( VersionString version ) { \n\tint length = $F90627 ( version ) ; \n\t$F57272 nextVersion = Arrays . copyOf ( version . value , length ) ; \n\t$F12139 ( nextVersion , length ) ++ ; \n\treturn new VersionString ( nextVersion ) ; \n\t} \n"}, {"code": "static public VersionString getNewVersion ( VersionString version , int depth ) { \n\tif ( depth < INT00 || depth > $F90627 ( version ) + INT00 ) throw new NumberFormatException $F2821 ( depth ) ; \n\t$F57272 newVersion = Arrays . copyOf ( version . value , depth ) ; \n\t$F12139 ( newVersion , depth ) ++ ; \n\treturn new VersionString ( newVersion ) ; \n\t} \n"}, {"code": "public void execute ( Context aContext ) { \n\tthis . context = aContext ; \n\t$F4599 ( context ) $F1299346 ( startTime ) context . getFileManager ( ) . logInfo ( String . format ( STRING00 , $F1412586 . getPackage ( ) . getImplementationVersion ( ) , startTime ) ) ; \n\tanalyzeModels ( ) ; \n\tresolveTypeTemplates ( ) ; \n\tgenerateSources ( ) ; \n\tfinalization ( ) ; \n\tcontext . getFileManager ( ) . logInfo ( String . format ( STRING00 , ( $F91113 - $F31809 ( startTime ) ) / MILLISEC ) ) ; \n\t$F7294 ( context ) } \n"}, {"code": "private void analyzeModels $F2 { \n\ttry { \n\t\tdo { \n\t\t\tExecutorService pool = Executors . newFixedThreadPool ( $F28874 ( context ) . getNbThread ( ) ) ; \n\t\t\twhile ( context . workToDo ( ) ) { \n\t\t\t\tpool . execute ( new ModelExecutor ( context ) ) ; \n\t\t\t\t} \n\t\t\t$F20284 ( pool ) while ( $F162824 ( pool ) ) { \n\t\t\t\tpool . awaitTermination ( TIMEOUT , TimeUnit . MILLISECONDS ) ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( context . workToDo ( ) ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow $F231778 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private void resolveTypeTemplates $F2 { \n\tCollections . sort ( context . getClassesAlreadyDone ( ) , new Comparator < Java4CppType > $F2 { \n\t\t$F1 public int compare ( Java4CppType t1 , Java4CppType t2 ) { \n\t\t\t$F2612 o1 = $F3928 ( t1 ) ; \n\t\t\t$F2612 o2 = $F3928 ( t2 ) ; \n\t\t\tif ( $F33479 ( o1 ) && $F33479 ( o2 ) ) { \n\t\t\t\tint idx1 = $F601997 ( o1 ) ; \n\t\t\t\tint idx2 = $F601997 ( o2 ) ; \n\t\t\t\tif ( idx1 == idx2 ) $F446654 ( o1 , o2 ) return idx1 < idx2 ? $F3745 : INT00 ; \n\t\t\t\t} \n\t\t\telse if ( $F33479 ( o1 ) && $F76682 ( o2 ) ) $F17553 else if ( $F76682 ( o1 ) && $F33479 ( o2 ) ) $F17551 $F17557 ( o1 , o2 ) } \n\t\t} \n\t) ; \n\tfor ( Java4CppType type : context . getClassesAlreadyDone ( ) ) { \n\t\tcontext . executeTypeTemplate ( type ) ; \n\t\t} \n\t} \n"}, {"code": "private void generateSources $F2 { \n\ttry { \n\t\tExecutorService pool = Executors . newFixedThreadPool ( $F28874 ( context ) . getNbThread ( ) ) ; \n\t\tfor ( Java4CppType type : context . getClassesAlreadyDone ( ) ) { \n\t\t\t$F2612 clazz = $F3928 ( type ) ; \n\t\t\tif $F540 ( isValid , clazz ) { \n\t\t\t\tpool . execute ( new SourceExecutor ( context , type ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F20284 ( pool ) while ( $F162824 ( pool ) ) { \n\t\t\tpool . awaitTermination ( TIMEOUT , TimeUnit . MILLISECONDS ) ; \n\t\t\t} \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\tthrow $F231778 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private void finalization $F2 { \n\t$F45075 ( dataModel , newHashMap ) dataModel . put ( STRING00 , new SourceFormatter $F2 ) ; \n\tSet < ClassModel > dependencies = newHashSet ( ) ; \n\tfor ( Java4CppType type : context . getClassesAlreadyDone ( ) ) { \n\t\t$F2612 clazz = $F3928 ( type ) ; \n\t\tif $F540 ( isValid , clazz ) { \n\t\t\tdependencies . add ( context . getClassModel ( clazz ) ) ; \n\t\t\t} \n\t\t} \n\t$F6257 ( dataModel , dependencies ) dataModel . put ( STRING00 , context . getFileManager ( ) . getSymbols ( ) . getSymbols ( ) ) ; \n\tcontext . getTemplateManager ( ) . processGlobalTemplates ( dataModel ) ; \n\tcontext . getTemplateManager ( ) . copyFiles ( ) ; \n\t} \n"}, {"code": "public static void logMeasures ( HLAMeasure [ ] measures , final Logger log ) { \n\t$F2109 ( log ) $F2109 ( log ) for ( HLAMeasure currMeasure : measures ) { \n\t\tlog . info ( STRING00 + currMeasure . getSonarName ( ) ) ; \n\t\t} \n\tLogHelper . moo ( log ) ; \n\t} \n"}, {"code": "public static void logCSV ( String csvData , final Logger log ) { \n\t$F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F29873 ( log , csvData ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) LogHelper . moo ( log ) ; \n\t} \n"}, {"code": "public static void moo ( final Logger log ) { \n\t$F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) $F2109 ( log ) } \n"}, {"code": "public static Stream < MutableLongTuple > stream ( Order order , LongTuple min , LongTuple max ) { \n\t$F2201 ( order ) Utils . checkForEqualSize ( min , max ) ; \n\tMutableLongTuple $F233081 ( localMin , LongTuples , min ) ; \n\tMutableLongTuple $F233081 ( localMax , LongTuples , max ) ; \n\tLongTupleRangeSpliterator spliterator = new LongTupleRangeSpliterator $F2144 ( order , localMin , localMax ) ; \n\treturn StreamSupport . stream ( spliterator , false ) ; \n\t} \n"}, {"code": "public static Stream < MutableLongTuple > lexicographicalStream ( LongTuple min , LongTuple max ) { \n\treturn stream ( Order . LEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableLongTuple > lexicographicalStream ( LongTuple max ) { \n\treturn stream ( Order . LEXICOGRAPHICAL , LongTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableLongTuple > colexicographicalStream ( LongTuple min , LongTuple max ) { \n\treturn stream ( Order . COLEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableLongTuple > colexicographicalStream ( LongTuple max ) { \n\treturn stream ( Order . COLEXICOGRAPHICAL , LongTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Stream < MutableLongTuple > wrappingStream ( LongTuple bounds , Stream < ? extends MutableLongTuple > delegate ) { \n\tLongTuple $F233081 ( localBounds , LongTuples , bounds ) ; \n\treturn delegate . map ( t - > LongTupleUtils . wrap ( t , localBounds ) ) ; \n\t} \n"}, {"code": "public static < T extends MutableLongTuple > $F40742 clampingStream ( LongTuple min , LongTuple max , $F40743 ( delegate ) ) { \n\tUtils . checkForEqualSize ( min , max ) ; \n\tLongTuple $F233081 ( localMin , LongTuples , min ) ; \n\tLongTuple $F233081 ( localMax , LongTuples , max ) ; \n\treturn delegate . filter ( t - > LongTuples . areElementsGreaterThanOrEqual ( t , localMin ) && LongTuples . areElementsLessThan ( t , localMax ) ) ; \n\t} \n"}, {"code": "static public IParserInput getInstance ( final char commandPrefix , final boolean allowEmbeddedCommandPrefix , final File args ) throws IOException { \n\tfinal CommandLineParser parser = new CommandLineParser $F2 ; \n\t$F1357 ( parser , commandPrefix ) $F1357 ( parser , allowEmbeddedCommandPrefix ) parser . commandLine = $F43698 ( convertToString , args ) ; \n\treturn parser ; \n\t} \n"}, {"code": "static public IParserInput getInstance ( final char commandPrefix , final boolean allowEmbeddedCommandPrefix , final String ... args ) { \n\tfinal CommandLineParser parser = new CommandLineParser $F2 ; \n\t$F1357 ( parser , commandPrefix ) $F1357 ( parser , allowEmbeddedCommandPrefix ) $F102635 ( str ) for ( $F2674 ( c , args ) ) { \n\t\tstr . append ( args [ c ] . replaceAll ( $F1286 ) ) ; \n\t\t$F1218 ( str ) } \n\tparser . commandLine = $F797 ( str ) ; \n\treturn parser ; \n\t} \n"}, {"code": "static public IParserInput getInstance ( final char commandPrefix , final File args ) throws IOException { \n\treturn $F130421 ( getInstance , commandPrefix , args ) ; \n\t} \n"}, {"code": "static public void unparseTokens ( final List < ICmdLineArg $F45 > args , final StringBuilder out ) { \n\tfinal Iterator < ICmdLineArg $F45 > $F60361 ( aIter , args ) ; \n\t$F48974 ( first ) while $F11310 ( aIter ) { \n\t\tfinal ICmdLineArg $F45 $F11312 ( arg , aIter ) ; \n\t\tif ( arg . isParsed ( ) ) { \n\t\t\t$F956196 ( first , out ) first = false ; \n\t\t\targ . exportCommandLine ( out ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public $F7932690 parseTokens $F2 { \n\t$F95272 ( delim ) $F102635 ( part ) $F2233 ( inToken ) $F1987 ( startX ) final $F355291 $F54 ( tokens ) ; \n\t$F95272 ( thisChar ) char prevChar ; \n\tfor ( $F8125 ( scanX , commandLine ) ) { \n\t\tprevChar = thisChar ; \n\t\t$F145001 ( thisChar , commandLine , scanX ) $F95272 ( nextChar ) if ( $F48427 ( scanX , commandLine ) ) $F64072 ( nextChar , commandLine , scanX ) ; \n\t\tif ( inToken ) { \n\t\t\tif ( delim != STRING00 && thisChar == delim ) { \n\t\t\t\ttokens . add ( new Token ( commandPrefix , $F797 ( part ) , startX , scanX + INT00 , true ) ) ; \n\t\t\t\t$F116352 ( part ) inToken = false ; \n\t\t\t\t} \n\t\t\telse if ( delim == STRING00 && ( $F108020 ( Character , thisChar ) || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || ( thisChar == STRING00 && nextChar != STRING00 ) || ( ! allowEmbeddedCommandPrefix && thisChar == commandPrefix && prevChar != commandPrefix ) || ( allowEmbeddedCommandPrefix && thisChar == commandPrefix && nextChar == commandPrefix ) || ( thisChar == commandPrefix && $F1215 ( part ) && $F24308 ( part , commandPrefix ) && $F20069 ( part ) != commandPrefix ) ) ) { \n\t\t\t\t$F2233 ( forceLiteral ) if $F1216 ( part ) if ( $F24308 ( part , commandPrefix ) && $F474775 ( Character , part ) ) forceLiteral = true ; \n\t\t\t\ttokens . add ( new Token ( commandPrefix , $F797 ( part ) , startX , scanX , forceLiteral ) ) ; \n\t\t\t\t$F116352 ( part ) -- scanX ; \n\t\t\t\tinToken = false ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif $F24340 ( thisChar ) thisChar = $F157631 ( commandLine , scanX ) ; \n\t\t\t\t$F1212 ( part , thisChar ) } \n\t\t\t} \n\t\telse { \n\t\t\tif ( $F108020 ( Character , thisChar ) || thisChar == STRING00 || thisChar == STRING00 || thisChar == STRING00 || ( thisChar == STRING00 && nextChar != STRING00 ) ) $F23605 if ( $F561706 ( thisChar ) ) { \n\t\t\t\ttokens . add ( new Token ( commandPrefix , STRING00 + thisChar , scanX , scanX + INT00 , false ) ) ; \n\t\t\t\t$F23605 } \n\t\t\tif $F38390 ( thisChar ) delim = thisChar ; \n\t\t\telse { \n\t\t\t\tdelim = STRING00 ; \n\t\t\t\t$F1212 ( part , thisChar ) } \n\t\t\tinToken = true ; \n\t\t\tstartX = scanX ; \n\t\t\t} \n\t\t} \n\tif ( inToken ) tokens . add ( new Token ( commandPrefix , $F797 ( part ) , startX , $F1203 ( commandLine ) , delim != STRING00 ) ) ; \n\treturn tokens . toArray ( new Token $F31920 ( tokens ) ) ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws IOException , TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tElement $F1746875 ( itemTemplate , element ) ; \n\tif $F112 ( itemTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\tStack $F706299 indexes = $F1175392 ( serializer ) ; \n\tIndex index = new Index $F2 ; \n\t$F22657 ( indexes , index ) for ( Object item : content . getIterable ( scope , propertyPath ) ) { \n\t\t$F149778 ( index ) serializer . writeItem ( itemTemplate , item ) ; \n\t\t} \n\t$F92524 ( indexes ) $F724 } \n"}, {"code": "public void setLogger ( Logger logger ) { \n\t$F1294 ( System ) $F1357 ( this , logger ) $F1294 ( System ) this . logger . addAppender ( this ) ; \n\t} \n"}, {"code": "public void handleThrowable ( Throwable e , Object target ) { \n\ttry { \n\t\tExceptionCallback exceptionCallback = ( ExceptionCallback ) target ; \n\t\tif $F68534 ( e ) { \n\t\t\texceptionCallback . exceptionThrown ( ( Exception ) e ) ; \n\t\t\t} \n\t\telse { \n\t\t\texceptionCallback . exceptionThrown ( $F11566 ( e ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IllegalArgumentException | ClassCastException e1 ) { \n\t\tlog . fatal ( $F252583 ( target , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "private boolean cleanUp ( Reference $F45 reference ) { \n\tMethod finalizeReferentMethod = getFinalizeReferentMethod ( ) ; \n\t$F2272 ( finalizeReferentMethod ) do { \n\t\t$F39336 ( reference ) $F62132 ( reference , frqReference ) try $F124784 ( finalizeReferentMethod , reference ) catch ( Throwable t ) $F188622 ( logger , Level , t ) } \n\twhile $F86677 ( reference , queue ) ; \n\t$F232 } \n"}, {"code": "$F1 public void summarize ( Writer writer ) throws $F10627 { \n\t$F38713 ( hasNext ) Record r = next ( writer ) ; \n\tRecord masterRecord = new Record $F2 ; \n\tfor ( String s : masterLabels ) { \n\t\tmasterRecord . addValue ( s , r . getValueString ( s ) ) ; \n\t\t} \n\tif ( onlyJoin ) { \n\t\twhile $F560 ( hasNext ) { \n\t\t\tRecord record = next ( writer ) ; \n\t\t\tRecord emitRecord = new Record $F2 ; \n\t\t\tfor ( String s : valueLabels ) { \n\t\t\t\temitRecord . addGrouping ( s , record . getValueString ( s ) ) ; \n\t\t\t\t} \n\t\t\tfor ( String s : masterLabels ) { \n\t\t\t\temitRecord . addGrouping ( s , masterRecord . getValueString ( s ) ) ; \n\t\t\t\t} \n\t\t\temitRecord . setValueNothing ( true ) ; \n\t\t\t$F21494 ( writer , emitRecord ) } \n\t\t} \n\telse { \n\t\twhile $F560 ( hasNext ) { \n\t\t\tRecord record = next ( writer ) ; \n\t\t\tRecord emitRecord = new Record $F2 ; \n\t\t\tfor ( $F123525 ( i ) ) { \n\t\t\t\tString s = record . getGroupingString ( STRING00 + i ) ; \n\t\t\t\t$F334 ( s ) emitRecord . addGrouping ( STRING00 + i , s ) ; \n\t\t\t\t} \n\t\t\tfor ( String s : valueLabels ) { \n\t\t\t\temitRecord . addValue ( s , record . getValueString ( s ) ) ; \n\t\t\t\t} \n\t\t\tfor ( String s : masterLabels ) { \n\t\t\t\temitRecord . addValue ( s , masterRecord . getValueString ( s ) ) ; \n\t\t\t\t} \n\t\t\t$F21494 ( writer , emitRecord ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public void summarizerSetup $F2 { \n\tmasterLabels = getStringsParameter ( SimpleJob . MASTER_LABELS ) ; \n\tvalueLabels = getStringsParameter ( SimpleJob . LABELS ) ; \n\tonlyJoin = getBooleanParameter ( SimpleJob . ONLY_JOIN ) ; \n\t} \n"}, {"code": "public static Pipe newPipe $F9459 ( data , offset , len ) { \n\tfinal ByteArrayInput byteArrayInput = new ByteArrayInput $F413051 ( data , offset , len ) ; \n\treturn new Pipe $F2 { \n\t\tprotected Input begin ( Pipe . Schema $F45 pipeSchema ) throws IOException $F356 ( byteArrayInput ) protected void end ( Pipe . Schema $F45 pipeSchema , Input input , boolean cleanupOnly ) throws IOException { \n\t\t\t$F190203 ( cleanupOnly ) assert input == byteArrayInput ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static Pipe newPipe $F605604 ( in ) { \n\tfinal CodedInput codedInput = new CodedInput $F21420 ( in ) ; \n\treturn new Pipe $F2 { \n\t\tprotected Input begin ( Pipe . Schema $F45 pipeSchema ) throws IOException $F356 ( codedInput ) protected void end ( Pipe . Schema $F45 pipeSchema , Input input , boolean cleanupOnly ) throws IOException { \n\t\t\t$F190203 ( cleanupOnly ) assert input == codedInput ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public boolean shouldAggregateSoils ( $F3567120 ( currentSoil ) , $F3567120 ( previousSoil ) ) { \n\tfloat ruCurrent ; \n\tfloat ruPrevious ; \n\tfloat resultFirstRule ; \n\tfloat resultSecRule ; \n\tboolean firstRule ; \n\tboolean secRule ; \n\truCurrent = ( $F39020 ( parseFloat , currentSoil , SLDUL ) - $F39020 ( parseFloat , currentSoil , SLLL ) ) * NUM00 ; \n\truPrevious = ( $F39020 ( parseFloat , previousSoil , SLDUL ) - $F39020 ( parseFloat , previousSoil , SLLL ) ) * NUM00 ; \n\tresultFirstRule = round ( $F111189 ( Math , ruCurrent , ruPrevious ) ) ; \n\tfirstRule = resultFirstRule <= FIRST_THRESHOLD_DEFAULT ; \n\tresultSecRule = round ( Math . abs ( $F39020 ( parseFloat , currentSoil , SLBDM ) - $F39020 ( parseFloat , previousSoil , SLBDM ) ) ) ; \n\tsecRule = ( round ( resultSecRule ) <= SECOND_THRESHOLD_DEFAULT ) ; \n\t$F45360 ( log ) $F15610 ( log , ruCurrent ) $F15610 ( log , ruPrevious ) $F246169 ( log , resultFirstRule , FIRST_THRESHOLD_DEFAULT , firstRule ) $F246169 ( log , resultSecRule , SECOND_THRESHOLD_DEFAULT , secRule ) $F45360 ( log ) return firstRule && secRule ; \n\t} \n"}, {"code": "public static ShortDuration of $F59368 ( duration , unit ) { \n\t$F2016 ( duration , ZERO ) checkArgument ( duration >= INT00 , STRING00 , duration ) ; \n\tcheckArgument ( duration <= $F198 ( MAXES , unit ) , STRING00 , duration , unit ) ; \n\tlong nanos = TimeUnit . NANOSECONDS . convert ( duration , unit ) ; \n\treturn new PositiveShortDuration $F43930 ( nanos ) ; \n\t} \n"}, {"code": "public static void ensureNotEmptyContent ( String name , boolean trim , $F21 value ) { \n\t$F564 ( ensureNotEmpty , name , value ) for ( $F2674 ( i , value ) ) { \n\t\tensureNotEmpty ( $F983669 ( value , i ) + i + STRING00 , value [ i ] ) ; \n\t\tif ( trim ) { \n\t\t\tensureNotEmpty ( $F983669 ( value , i ) + i + STRING00 , $F129105 ( value , i ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void send $F16060 ( recipients , subj , text ) { \n\t$F276548 ( usr , JibuConfig ) $F276548 ( pwd , JibuConfig ) Session session = Session . getDefaultInstance ( $F2234 ( JibuConfig ) , new javax . mail . Authenticator $F2 { \n\t\tprotected PasswordAuthentication getPasswordAuthentication $F2 { \n\t\t\treturn new PasswordAuthentication ( usr , pwd ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\ttry { \n\t\tMessage msg = new MimeMessage ( session ) ; \n\t\tmsg . addRecipients ( Message . RecipientType . TO , $F42850 ( InternetAddress , recipients ) ) ; \n\t\t$F428299 ( msg , subj ) $F30691 ( msg , text ) $F179957 ( Transport , msg ) } \n\tcatch ( MessagingException e ) $F11568 ( e ) } \n"}, {"code": "$F1 public void sendAttributeChangeNotification ( String msg , String attributeName , String attributeType , Object oldValue , Object newValue ) { \n\tLOGGER . debug ( $F120174 ( attrNotificationSeq ) + msg + STRING00 + attributeName + STRING00 + attributeType + STRING00 + $F797 ( oldValue ) + STRING00 + $F797 ( newValue ) ) ; \n\tNotification n = new AttributeChangeNotification ( this , attrNotificationSeq ++ , $F13205 ( System ) , msg , attributeName , attributeType , oldValue , newValue ) ; \n\tsendNotification ( n ) ; \n\t$F15610 ( LOGGER , attrNotificationSeq ) } \n"}, {"code": "private static $F502828 String toBitMask $F135108 ( bitmask , length ) { \n\t$F1200 ( buffer ) $F57820 ( bit ) for ( $F72243 ( i , length ) ) { \n\t\tif ( i != INT00 && $F62861 ( i ) ) $F1219 ( buffer ) else if ( i != INT00 && $F62861 ( i ) ) $F1219 ( buffer ) if ( ( bit & $F4887 ( bitmask ) ) == bit ) $F1219 ( buffer ) else $F1219 ( buffer ) $F350244 ( bit ) } \n\treturn $F69968 ( buffer ) . toString ( ) ; \n\t} \n"}, {"code": "public static final void log $F43279 ( clazz , msg ) { \n\tif ( DEBUG ) { \n\t\t$F1292 ( System ) ( STRING00 + $F628359 ( sSdf ) + STRING00 + STRING00 + STRING00 + $F19101 ( clazz ) + STRING00 + msg ) ; \n\t\t} \n\t} \n"}, {"code": "public static final void loge ( $F2613 ( clazz ) , String msg , Exception ... e ) { \n\tif ( DEBUG ) { \n\t\t$F19733 ( exceptionStr ) if $F62467 ( e ) { \n\t\t\t$F6364 ( sw ) $F9810 ( pw , sw ) e [ INT00 ] . printStackTrace ( pw ) ; \n\t\t\t$F6369 ( pw ) exceptionStr = $F39054 ( sw ) ; \n\t\t\t} \n\t\t$F10394 ( System ) ( STRING00 + $F628359 ( sSdf ) + STRING00 + STRING00 + STRING00 + $F19101 ( clazz ) + STRING00 + msg + STRING00 + exceptionStr ) ; \n\t\t} \n\t} \n"}, {"code": "public String get ( String key ) { \n\ttry $F235002 ( bundle , key ) catch ( MissingResourceException e ) { \n\t\t$F26016 ( logger , e ) return key ; \n\t\t} \n\t} \n"}, {"code": "public static void infect ( $F14584 ( packagePrefixes ) , Object victim , Object ... moreVictims ) { \n\tassertNotNull ( victim ) ; \n\t$F105022 ( injectees ) $F528 ( injectees , victim ) if $F124033 ( moreVictims ) $F26786 ( injectees , Arrays , moreVictims ) $F10838 ( endpointInterface ) for ( Object injectee : injectees ) { \n\t\t$F43477 ( type , injectee ) do { \n\t\t\tfor ( Field field : $F64259 ( Fields , type ) . annotatedWith ( Bite . class ) ) { \n\t\t\t\ttry { \n\t\t\t\t\t$F392836 ( endpointInterface , field ) Object proxyInstance = EndpointProxyFactory . INSTANCE . create ( endpointInterface ) ; \n\t\t\t\t\ttry $F106750 ( field , injectee , proxyInstance ) catch ( IllegalAccessException iae ) { \n\t\t\t\t\t\t$F2250 ( fieldName , field ) String mutatorName = STRING00 + $F35733 ( Character , fieldName ) + $F20064 ( fieldName ) ; \n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\tMethod mutator = $F15531 ( injectee ) ( mutatorName , endpointInterface ) ; \n\t\t\t\t\t\t\t$F128915 ( mutator , injectee , proxyInstance ) } \n\t\t\t\t\t\tcatch ( NoSuchMethodException nsme ) { \n\t\t\t\t\t\t\t$F10869 ( field ) $F52836 ( field , injectee , proxyInstance ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tLogger . getLogger ( Zombie . class . getName ( ) ) . log ( Level . SEVERE , $F171524 ( $F507 ( endpointInterface ) ) . append ( STRING00 ) . append ( $F507 ( field ) ) . append ( STRING00 ) . append ( $F6291 ( injectee ) ) . append ( STRING00 ) . toString ( ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F7916 ( type ) } \n\t\twhile $F12600 ( hierarchyTerminal , type , packagePrefixes ) ; \n\t\t} \n\t} \n"}, {"code": "protected String getMethod ( HttpServletRequest request ) { \n\t$F570628 ( uri , request ) String q = uri . substring ( ( $F13329 ( request ) + $F47937 ( request ) ) . length ( ) + INT00 ) ; \n\t$F6110 ( i , q ) $F4728 ( method ) if $F3730 ( i ) $F308873 ( method , q , i ) return method ; \n\t} \n"}, {"code": "public static WebOperation getOperationByName $F62952 ( name ) throws WebOperationNotFoundException { \n\tif $F28586 ( cache , name ) { \n\t\tWebOperation wo = null ; \n\t\t$F96 cls = Objects . find ( ( $F19788 ) $F46221 ( Options ) . getSystem ( $F33484 , STRING00 , $F8443 ) , new Closure < $F96 , Boolean > $F2 { \n\t\t\t$F1 public Boolean call $F2763 ( input ) { \n\t\t\t\treturn name . equals ( $F54926 ( Objects , input ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\tif $F83692 ( Objects , cls ) { \n\t\t\ttry { \n\t\t\t\two = ( WebOperation ) Class . forName ( Objects . get ( $F4868 , cls , STRING00 ) ) . newInstance ( ) ; \n\t\t\t\two . setConfig ( Objects . get ( cls , STRING00 , Objects . newHashMap ( $F4868 , $F23415 ) ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new WebOperationNotFoundException $F193002 ( cls , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F112 ( wo ) throw new WebOperationNotFoundException $F500 ( name ) ; \n\t\t$F2725 ( cache , name , wo ) } \n\t$F30910 ( cache , name ) } \n"}, {"code": "protected WebOperation getOperation ( HttpServletRequest request ) throws WebOperationNotFoundException { \n\t$F570628 ( uri , request ) String q = uri . substring ( ( $F13329 ( request ) + $F47937 ( request ) ) . length ( ) + INT00 ) ; \n\t$F6110 ( i , q ) String name = q ; \n\tif $F3730 ( i ) $F124620 ( name , q , i ) $F867 ( getOperationByName , name ) } \n"}, {"code": "protected void process $F13010 ( request , response ) throws $F26611 { \n\t$F465582 ( request ) WebOperation operation = null ; \n\ttry $F24579 ( operation , getOperation , request ) catch ( WebOperationNotFoundException e ) { \n\t\t$F1344861 ( LOG , e ) $F47925 ( response ) $F254 } \n\t$F8494 ( method , getMethod , request ) operation . request ( method , request , response ) ; \n\t} \n"}, {"code": "public OverlayIcon withOverlay ( ImageIcon ... overlays ) { \n\tif $F268 ( overlays ) { \n\t\tfor ( ImageIcon overlay : overlays ) { \n\t\t\tthis . overlays . add ( overlay ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public static < A , B , C extends LogicalComparator $F67330 > MergeResult $F67330 merge ( final Collection $F21571 aBeans , final Collection $F19185 bBeans , final C compare ) { \n\tif $F7430 ( aBeans , bBeans ) throw new IllegalArgumentException ( STRING00 + aBeans + bBeans ) ; \n\tfor ( final A aBean : aBeans ) { \n\t\tlog . debug ( $F156027 ( aBean ) ) ; \n\t\t$F332 } \n\tfor ( final B bBean : bBeans ) { \n\t\tlog . debug ( $F156027 ( bBean ) ) ; \n\t\t$F332 } \n\tlog . debug ( $F89126 ( aBeans ) + $F3413 ( bBeans ) ) ; \n\tfinal $F1866341 removed = new ArrayList $F21571 $F2 ; \n\tfinal List $F19185 create = new ArrayList $F19185 ( bBeans ) ; \n\tfinal List < MergePair $F67330 > matched = new ArrayList < MergePair $F67330 > $F2 ; \n\tfor ( final A aBean : aBeans ) { \n\t\t$F2233 ( found ) for ( final B bBean : bBeans ) if ( compare == null ? $F5249 ( aBean , bBean ) : compare . equivalent ( aBean , bBean ) ) { \n\t\t\tmatched . add ( new MergePair $F67330 ( aBean , bBean ) ) ; \n\t\t\t$F6953 ( create , bBean ) found = true ; \n\t\t\t$F332 } \n\t\tif ( ! found ) $F528 ( removed , aBean ) } \n\tlog . debug ( $F89126 ( bBeans ) + $F3413 ( matched ) + STRING00 + $F3413 ( removed ) + STRING00 + $F3413 ( create ) ) ; \n\treturn new MergeResult $F67330 $F2144 ( removed , create , matched ) ; \n\t} \n"}, {"code": "public static String getClassName ( String resourceName ) { \n\tif $F198048 ( resourceName ) $F24432 $F12039 ( len , resourceName ) return $F628002 ( resourceName , len ) . replace ( $F1286 ) ; \n\t} \n"}, {"code": "public static InputStream getClassAsStream $F2614 ( cl ) { \n\t$F2250 ( name , cl ) $F6990 ( pos , name ) String resourceName = $F3735 ( name , pos ) + STRING00 ; \n\treturn $F39437 ( cl , resourceName ) ; \n\t} \n"}, {"code": "public static void writeClassToStream ( $F2613 ( cl ) , OutputStream out ) throws IOException { \n\t$F1300613 ( in , getClassAsStream , cl ) StreamUtil . writeStream ( in , out ) ; \n\t$F6369 ( out ) } \n"}, {"code": "public static void getClassDigest ( $F2613 ( cl ) , MessageDigest digest ) { \n\tDigestOutputStream out = new DigestOutputStream ( $F2074 ( NullOutputStream ) , digest ) ; \n\ttry $F565 ( writeClassToStream , cl , out ) catch ( IOException e ) { \n\t\t$F7453 ( e ) throw new UnexpectedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F2612 getOuterClass $F2614 ( cl ) { \n\t$F124810 ( enclosingClass ) while ( ( enclosingClass = $F76865 ( cl ) ) != null ) $F1619 ( cl , enclosingClass ) return cl ; \n\t} \n"}, {"code": "private static $F1975 persist ( String description , Directory rootDir , Blob icon ) { \n\t$F21492 ( arrayOutputStream ) $F314297 ( dataOutputStream , arrayOutputStream ) try { \n\t\t$F117472 ( dataOutputStream , CURRENT_BINARY_VERSION ) dataOutputStream . writeUTF ( $F13745 ( rootDir ) ) ; \n\t\t$F99062 ( dataOutputStream , description ) dataOutputStream . writeUTF ( icon != null ? $F13745 ( icon ) : STRING00 ) ; \n\t\t} \n\t$F88274 ( e ) $F40825 ( arrayOutputStream ) } \n"}, {"code": "public static $F129099 getTavAndAmp ( HashMap data ) { \n\t$F460951 ( results ) HashMap < Integer , MonthlyAvg > tyear = new HashMap < Integer , MonthlyAvg > $F2 ; \n\tMonthlyAvg tmonth ; \n\tMonthlyAvg tavAllYears ; \n\t$F252701 ( tampAllYears ) ; \n\tString tav ; \n\tString tamp ; \n\t$F16845591 dailyArr = getDailyData ( data ) ; \n\tfor ( $F10914 ( i , dailyArr ) ) { \n\t\tString date ; \n\t\tint year ; \n\t\tint month ; \n\t\tString tmax ; \n\t\tString tmin ; \n\t\tString tavgDaily ; \n\t\t$F129099 $F199 ( dailyData , dailyArr , i ) ; \n\t\tdate = $F3726 ( getValueOr , dailyData ) . trim ( ) ; \n\t\tif $F42444 ( date ) { \n\t\t\t$F16516 ( LOG ) $F23605 } \n\t\telse { \n\t\t\t$F13217 ( cal , Calendar ) cal . setTime ( convertFromAgmipDateString ( date ) ) ; \n\t\t\t$F362210 ( year , cal , Calendar ) ; \n\t\t\tmonth = $F134951 ( cal , Calendar ) ; \n\t\t\t$F13002 ( tmonth , tyear , year ) if $F112 ( tmonth ) { \n\t\t\t\ttmonth = new MonthlyAvg $F2 ; \n\t\t\t\t$F2725 ( tyear , year , tmonth ) } \n\t\t\t} \n\t\ttmax = $F3726 ( getValueOr , dailyData ) . trim ( ) ; \n\t\ttmin = $F3726 ( getValueOr , dailyData ) . trim ( ) ; \n\t\t$F14067 ( tavgDaily , average , tmax , tmin ) if $F268 ( tavgDaily ) $F26822 ( tmonth , month , tavgDaily ) } \n\ttavAllYears = new MonthlyAvg $F2 ; \n\t$F1955127 ( tampAllYears ) for ( $F95954 $F380135 ( it , tyear ) ; \n\t$F11309 ( it ) ; \n\t) { \n\t\t$F147479 ( year , it ) $F13002 ( tmonth , tyear , year ) $F21 tavgs = tmonth . getAllAvg ( ) ; \n\t\tfor ( $F2674 ( month , tavgs ) ) { \n\t\t\ttavAllYears . add ( $F263781 ( month , tavgs ) ) ; \n\t\t\t} \n\t\tString tampt = substract ( $F58179 ( max , tavgs , min ) ) ; \n\t\t$F12701 ( tampt , tampAllYears ) } \n\ttav = average ( INT00 , removeNull ( tavAllYears . getAllAvg ( ) ) ) ; \n\ttamp = average ( INT00 , $F28561 ( tampAllYears ) ) ; \n\t$F6379 ( tav , results ) $F6379 ( tamp , results ) return results ; \n\t} \n"}, {"code": "protected static HashMap getWthData ( HashMap data ) { \n\tif $F55319 ( data ) { \n\t\treturn getObjectOr ( data , STRING00 , $F604448 ) ; \n\t\t} \n\telse $F356 ( data ) } \n"}, {"code": "public static HashMap $F3015882 getEto ( HashMap data ) { \n\tHashMap $F3015882 results = new HashMap $F3015882 $F2 ; \n\tHashMap wthData = getWthData ( data ) ; \n\t$F16845591 dailyArr = getDailyData ( data ) ; \n\t$F1979370 ( wst_elev , getValueOr , wthData ) if $F42444 ( wst_elev ) $F356 ( results ) String P = multiply ( STRING00 , pow ( divide ( substract ( STRING00 , $F4501 ( product , wst_elev ) ) , STRING00 ) , STRING00 ) ) ; \n\tString gamma = $F136115 ( product , P ) ; \n\t$F1979370 ( wst_lat , getValueOr , wthData ) String phi = divide ( product ( wst_lat , Math . PI + STRING00 ) , STRING00 ) ; \n\tString psyvnt = $F3726 ( getValueOr , wthData ) . trim ( ) ; \n\t$F19733 ( aPsy ) if $F42444 ( psyvnt ) $F24706 ( aPsy ) else if $F42444 ( psyvnt ) $F24706 ( aPsy ) $F5618 ( rPsy , multiply , aPsy , P ) $F1979370 ( amth , getValueOr , wthData ) $F1979370 ( bmth , getValueOr , wthData ) $F96338 ( etoArr ) for ( $F10914 ( i , dailyArr ) ) { \n\t\t$F129099 $F199 ( dailyData , dailyArr , i ) ; \n\t\tString tMin = $F3726 ( getValueOr , dailyData ) . trim ( ) ; \n\t\tString tMax = $F3726 ( getValueOr , dailyData ) . trim ( ) ; \n\t\tif ( $F14426 ( tMin ) || $F14426 ( tMax ) ) { \n\t\t\t$F96756 ( etoArr ) $F23605 } \n\t\t$F5618 ( tMean , average , tMin , tMax ) String e_tMax = multiply ( STRING00 , exp ( divide ( $F4501 ( multiply , tMax ) , $F2754 ( sum , tMax ) ) ) ) ; \n\t\tString e_tMin = multiply ( STRING00 , exp ( divide ( $F4501 ( multiply , tMin ) , $F2754 ( sum , tMin ) ) ) ) ; \n\t\t$F5618 ( es , average , e_tMax , e_tMin ) String slope = divide ( product ( STRING00 , STRING00 , exp ( divide ( $F4501 ( multiply , tMean ) , $F2754 ( sum , tMean ) ) ) ) , pow ( $F2754 ( sum , tMean ) , STRING00 ) ) ; \n\t\tString ea ; \n\t\tString alt1 ; \n\t\tString alt2 ; \n\t\tif ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) ) $F1619 ( ea , alt1 ) else if ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) ) { \n\t\t\tea = multiply ( STRING00 , exp ( divide ( $F4501 ( multiply , alt1 ) , $F2754 ( sum , alt1 ) ) ) ) ; \n\t\t\t} \n\t\telse if ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) && ! ( alt2 = getValueOr ( dailyData , STRING00 , $F3726 ( getValueOr , dailyData ) ) . trim ( ) ) . equals ( STRING00 ) ) { \n\t\t\tea = average ( $F5583 ( product , e_tMin , alt1 ) , $F5583 ( product , e_tMax , alt2 ) ) ; \n\t\t\t} \n\t\telse if ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) && ! ( alt2 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) && rPsy != null ) { \n\t\t\tString e_tWet = multiply ( STRING00 , exp ( divide ( $F4501 ( multiply , alt2 ) , $F2754 ( sum , alt2 ) ) ) ) ; \n\t\t\tea = substract ( e_tWet , $F127556 ( multiply , rPsy , substract , alt1 , alt2 ) ) ; \n\t\t\t} \n\t\telse $F1619 ( ea , e_tMin ) $F5618 ( vpDiff , substract , es , ea ) Date w_date = convertFromAgmipDateString ( $F3726 ( getValueOr , dailyData ) ) ; \n\t\tif $F112 ( w_date ) { \n\t\t\t$F96756 ( etoArr ) $F23605 } \n\t\t$F13217 ( cal , Calendar ) cal . setTime ( ( w_date ) ) ; \n\t\tString J = cal . get ( Calendar . DAY_OF_YEAR ) + STRING00 ; \n\t\tString dr = sum ( STRING00 , multiply ( STRING00 , cos ( product ( STRING00 , divide ( Math . PI + STRING00 , STRING00 ) , J ) ) ) ) ; \n\t\tString delta = multiply ( STRING00 , sin ( substract ( product ( STRING00 , divide ( Math . PI + STRING00 , STRING00 ) , J ) , STRING00 ) ) ) ; \n\t\tString omegas = acos ( product ( $F3212286 ( tan , phi , delta ) ) ) ; \n\t\tString ra = divide ( product ( STRING00 , STRING00 , dr , sum ( product ( omegas , sin ( phi ) , sin ( delta ) ) , product ( cos ( phi ) , cos ( delta ) , sin ( omegas ) ) ) ) , Math . PI + STRING00 ) ; \n\t\tString N = divide ( $F4501 ( multiply , omegas ) , Math . PI + STRING00 ) ; \n\t\tString rs ; \n\t\tif ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) ) $F1619 ( rs , alt1 ) else if ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) ) { \n\t\t\trs = multiply ( sum ( amth , $F146978 ( divide , multiply , bmth , alt1 , N ) ) , ra ) ; \n\t\t\t} \n\t\telse { \n\t\t\trs = product ( getKrsValue ( wthData ) , $F15151 ( sqrt , substract , tMax , tMin ) , ra ) ; \n\t\t\t} \n\t\tString rso = multiply ( sum ( STRING00 , $F4501 ( product , wst_elev ) ) , ra ) ; \n\t\tString rns = multiply ( $F27375 ( substract ) , rs ) ; \n\t\tString rnl = product ( STRING00 , average ( pow ( $F2754 ( sum , tMax ) , STRING00 ) , pow ( $F2754 ( sum , tMin ) , STRING00 ) ) , substract ( STRING00 , $F62461 ( multiply , sqrt , ea ) ) , substract ( divide ( $F214776 ( multiply , rs , rso ) ) , STRING00 ) ) ; \n\t\t$F5618 ( rn , substract , rns , rnl ) String u2 ; \n\t\tif ( ! ( alt1 = $F3726 ( getValueOr , dailyData ) . trim ( ) ) . equals ( STRING00 ) ) { \n\t\t\tString uz = divide ( $F4501 ( multiply , alt1 ) , STRING00 , INT00 ) ; \n\t\t\tif ( compare ( alt2 = $F3726 ( getValueOr , wthData ) . trim ( ) , STRING00 , CompareMode . EQUAL ) ) $F1619 ( u2 , uz ) else { \n\t\t\t\tu2 = divide ( $F2754 ( multiply , uz ) , log ( substract ( $F4501 ( multiply , alt2 ) , STRING00 ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse $F24706 ( u2 ) String eto = divide ( sum ( $F811 ( product , slope , rn ) , divide ( $F151029 ( product , gamma , u2 , vpDiff ) , $F2754 ( sum , tMean ) ) ) , sum ( slope , multiply ( gamma , sum ( STRING00 , $F4501 ( multiply , u2 ) ) ) ) ) ; \n\t\tetoArr . add ( $F52478 ( round , eto ) ) ; \n\t\t} \n\t$F6257 ( results , etoArr ) return results ; \n\t} \n"}, {"code": "$F1 public CharSequence deserialize ( InvocationContext context , HttpResponse response ) { \n\ttry { \n\t\t$F5922 ( entity , response ) return entity == null ? STRING00 : $F18256 ( EntityUtils , entity ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DeserializerException ( $F81320 ( $F12746 ( context ) . getName ( ) ) . append ( STRING00 ) . append ( $F713495 ( context ) . getName ( ) ) . append ( STRING00 ) . toString ( ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "protected String getAddress ( HttpServletRequest request ) { \n\tString path = $F125783 ( request ) + STRING00 + $F629644 ( request ) ; \n\tif ( $F334165 ( request ) ( STRING00 ) && $F263637 ( request ) != INT00 ) path += STRING00 + $F263637 ( request ) ; \n\tif ( $F334165 ( request ) ( STRING00 ) && $F263637 ( request ) != INT00 ) path += STRING00 + $F263637 ( request ) ; \n\tpath += $F47985 ( request ) ; \n\treturn path ; \n\t} \n"}, {"code": "protected String getAction ( String service , SOAPMessage msg , HttpServletRequest request ) { \n\tif ( ! $F21352 ( request ) . equalsIgnoreCase ( STRING00 ) ) $F2200 $F4728 ( a ) $F356674 ( action ) try { \n\t\taction = XMLFormat . getFirstChildElement ( msg . getSOAPBody ( ) , null , null ) ; \n\t\t} \n\tcatch ( SOAPException e ) $F6096546 ( S1SystemError , e ) if $F268 ( action ) $F493011 ( a , action ) ; \n\treturn a ; \n\t} \n"}, {"code": "public static String formatException ( Throwable exception ) { \n\t$F1200 ( buffer ) $F564 ( formatException , exception , buffer ) $F1226 ( buffer ) } \n"}, {"code": "public static StringBuilder formatException ( Throwable exception , StringBuilder buffer ) { \n\tStringBuilder ret ; \n\tif $F112 ( exception ) $F1619 ( ret , buffer ) else { \n\t\tbuffer . append ( $F6291 ( exception ) ) ; \n\t\t$F1218 ( buffer ) $F8574 ( buffer , exception ) $F1218 ( buffer ) StackTraceElement array [ ] = $F10274 ( exception ) ; \n\t\tfor ( StackTraceElement element : array ) { \n\t\t\t$F1218 ( buffer ) $F564 ( printStackTraceElement , element , buffer ) $F1218 ( buffer ) } \n\t\tif $F13518 ( exception ) { \n\t\t\t$F1218 ( buffer ) ret = formatException ( $F6278 ( exception ) , buffer ) ; \n\t\t\t} \n\t\telse $F1619 ( ret , buffer ) } \n\treturn ret ; \n\t} \n"}, {"code": "public static void printStackTraceElement ( StackTraceElement element , StringBuilder buffer ) { \n\tbuffer . append ( $F8546 ( element ) ) ; \n\t$F1218 ( buffer ) buffer . append ( $F8534 ( element ) ) ; \n\t$F1218 ( buffer ) buffer . append ( $F11790 ( element ) ) ; \n\tif ( $F4514 ( element ) > INT00 ) { \n\t\t$F1218 ( buffer ) buffer . append ( $F4514 ( element ) ) ; \n\t\t} \n\t$F1218 ( buffer ) } \n"}, {"code": "public static String toHex ( byte b ) { \n\tfinal $F2666 string = { \n\t\t$F382945 ( hexDigits , b ) , $F2686 ( hexDigits , b ) } \n\t; \n\t$F2692 ( string ) } \n"}, {"code": "public static String toHex $F2665 ( bytes ) { \n\tfinal $F2666 string = new char [ $F83439 ( bytes ) ] ; \n\t$F1987 ( i ) for ( byte b : bytes ) { \n\t\tstring [ i ++ ] = $F382945 ( hexDigits , b ) ; \n\t\tstring [ i ++ ] = $F2686 ( hexDigits , b ) ; \n\t\t} \n\t$F2692 ( string ) } \n"}, {"code": "public static $F1975 hexToByteArray ( String hex ) { \n\t$F40810 ( length , hex ) $F1975 result = new byte [ $F12409 ( length ) + $F62853 ( length ) ] ; \n\tfor ( int i = length , $F14114 ( j , result ) ; \n\ti > INT00 ; \n\ti -= INT00 , j -- ) { \n\t\tresult [ j ] = hexToByte ( $F48429 ( hex , i ) ) ; \n\t\tif $F3730 ( i ) { \n\t\t\tresult [ j ] |= ( hexToByte ( $F48429 ( hex , i ) ) < < INT00 ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static byte hexToByte ( char hex ) { \n\tif $F197674 ( hex ) { \n\t\treturn ( byte ) $F294814 ( hex ) ; \n\t\t} \n\telse if $F197674 ( hex ) { \n\t\treturn ( byte ) ( INT00 + hex - STRING00 ) ; \n\t\t} \n\telse if $F197674 ( hex ) { \n\t\treturn ( byte ) ( INT00 + hex - STRING00 ) ; \n\t\t} \n\telse $F114098 ( String , hex ) } \n"}, {"code": "$F1 public void associateTrace ( Trace $F26212 trace , Thread thread ) $F2726 ( threadMap , thread , trace ) "}, {"code": "$F1 public boolean inTrace ( String logger ) { \n\tif $F46455 ( getTrace ) $F213 for ( String tracePackage : tracePackages ) { \n\t\tif $F19401 ( logger , tracePackage ) $F232 } \n\t$F213 } \n"}, {"code": "public static < K extends Enum $F53007 & Keyed $F2338 , V > EnumLookup $F28644 of ( final $F53008 enumClass ) { \n\treturn new EnumLookup $F28644 ( enumClass , $F3745 , false ) ; \n\t} \n"}, {"code": "public static < K extends Enum $F53007 & Keyed $F641 > EnumLookup < K , String > of ( final $F53008 enumClass , final boolean caseSensitive ) { \n\treturn new EnumLookup < K , String > ( enumClass , $F3745 , caseSensitive ) ; \n\t} \n"}, {"code": "public static < K extends Enum $F53007 & MultiKeyed , V > EnumLookup $F28644 of ( final $F53008 enumClass , final int idx ) { \n\treturn new EnumLookup $F28644 $F125934 ( enumClass , idx ) ; \n\t} \n"}, {"code": "public static < K extends Enum $F53007 & MultiKeyed > EnumLookup < K , String > of ( final $F53008 enumClass , final int idx , final boolean caseSensitive ) { \n\treturn new EnumLookup < K , String > $F2144 ( enumClass , idx , caseSensitive ) ; \n\t} \n"}, {"code": "public K find ( final V id ) { \n\tfinal V keyValue = keyForValue ( id ) ; \n\t$F47966 ( inverse , keyValue ) $F221777 ( log , id ) $F724 } \n"}, {"code": "public K find ( final V id , final K defaultValue ) $F49954 ( firstNonNull , find , id , defaultValue ) "}, {"code": "public static $F21 split $F114058 ( str , separator , trim ) { \n\t$F2201 ( str ) $F109373 ( sep , separator ) $F96338 ( strList ) $F1200 ( split ) $F1987 ( index ) while ( ( index = StringUtils . findNext ( str , sep , StringUtils . ESCAPE_CHAR , index , split ) ) >= INT00 ) { \n\t\t++ index ; \n\t\t$F18418 ( strList , split ) $F24352 ( split ) } \n\t$F18418 ( strList , split ) if ( trim ) { \n\t\t$F23123 ( last , strList ) while ( -- last >= INT00 && $F5755 ( $F198 ( strList , last ) ) ) $F6954 ( strList , last ) } \n\t$F255441 ( strList ) } \n"}, {"code": "public static String createInternalJobID $F2 throws NoSuchAlgorithmException { \n\t$F14492 ( md , MessageDigest ) $F1975 data = $F4786 ( UUID ) . getBytes ( ) ; \n\t$F98647 ( md , data ) $F129533 ( digest , md ) $F1200 ( sb ) for ( $F2674 ( i , digest ) ) { \n\t\tsb . append ( Integer . toHexString ( $F310753 ( digest , i ) ) ) ; \n\t\t} \n\treturn JOB_PREFIX + $F1116502 ( sb ) ( ) ; \n\t} \n"}, {"code": "public static int getMatchNo $F544023 ( strings , s ) { \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tif $F116061 ( s , strings , i ) $F356 ( i ) } \n\t$F16096 } \n"}, {"code": "public static $F57272 getMatchNos $F89036 ( strings , s ) { \n\t$F88776 ( nos , s ) for ( $F102735 ( i , j ) ; \n\ti < strings . length ; \n\ti ++ ) { \n\t\tfor ( $F2674 ( k , s ) ) { \n\t\t\tif ( $F102081 ( s , k ) ( strings [ i ] ) ) $F203607 ( nos , j , i ) } \n\t\t} \n\treturn nos ; \n\t} \n"}, {"code": "public static String getXmx ( String option ) { \n\t$F30789 ( args , option ) for ( String s : args ) { \n\t\tif $F5667 ( s ) $F356 ( s ) } \n\t$F724 } \n"}, {"code": "$F1 public Iterable < Attr > getAttrs $F2 { \n\tList < Attr > attrs = new ArrayList < Attr > $F2 ; \n\t$F504940 ( attributes , node ) for ( int i = INT00 , $F215167 ( l , attributes ) ; \n\ti < l ; \n\ti ++ ) { \n\t\torg . w3c . dom . Attr a = ( org . w3c . dom . Attr ) $F12268 ( attributes , i ) ; \n\t\tattrs . add ( new AttrImpl ( $F267464 ( a ) , $F476690 ( a ) . trim ( ) ) ) ; \n\t\t} \n\t$F10686 ( Collections , attrs ) } \n"}, {"code": "private static void getRichText ( Node node , StringBuilder builder ) { \n\t$F1746877 ( n , node ) while $F268 ( n ) { \n\t\tif $F581924 ( n , Node ) { \n\t\t\tbuilder . append ( $F476690 ( n ) ) ; \n\t\t\t} \n\t\telse if $F1582724 ( n , Node ) { \n\t\t\t$F1218 ( builder ) builder . append ( $F267464 ( n ) ) ; \n\t\t\t$F1218 ( builder ) $F564 ( getRichText , n , builder ) $F1218 ( builder ) $F1218 ( builder ) builder . append ( $F267464 ( n ) ) ; \n\t\t\t$F1218 ( builder ) } \n\t\t$F1961972 ( n ) } \n\t} \n"}, {"code": "private int index $F2 { \n\tElementImpl parent = ( ElementImpl ) getParent ( ) ; \n\t$F43807 ( parent ) Node n = parent . node . getFirstChild ( ) ; \n\t$F1987 ( index ) $F1987 ( twinsCount ) $F2233 ( indexFound ) while $F268 ( n ) { \n\t\tif ( n == node ) $F24354 ( indexFound ) if ( $F1582723 ( n , Node ) && $F607741 ( n ) ( $F267464 ( node ) ) ) { \n\t\t\t++ twinsCount ; \n\t\t\tif ( ! indexFound ) $F89691 ( index ) } \n\t\t$F1961972 ( n ) } \n\treturn twinsCount > INT00 ? index : $F3745 ; \n\t} \n"}, {"code": "public void start $F2 { \n\taddSymbolsFromSettings ( ) ; \n\tFile rep = new File ( $F28874 ( context ) . getTargetPath ( ) ) ; \n\t$F2554 ( rep ) try { \n\t\tjava4cppLog = new FileWriter ( new File $F540 ( getPath , JAVA4CPP_LOG ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F184470 ( System , e ) } \n\ttry { \n\t\t$F18352 existings = rep . listFiles ( new SourceFilter $F2 ) ; \n\t\tif $F268 ( existings ) { \n\t\t\toldFiles = new $F319813 $F3714 ( Arrays , existings ) ; \n\t\t\t} \n\t\tjava4cppHash = new File $F540 ( getPath , JAVA4CPP_HASH ) ; \n\t\tBufferedInputStream $F889509 ( in , java4cppHash ) ; \n\t\t$F29433 ( oldHashes , in ) $F1109 ( in ) $F21241 ( java4cppHash ) } \n\tcatch ( IOException e ) $F29219 ( logInfo ) } \n"}, {"code": "private void addSymbolsFromSettings $F2 { \n\tif ( ! Utils . isNullOrEmpty ( $F28874 ( context ) . getImportsFile ( ) ) ) { \n\t\tSymbols imported = new Symbols $F2 ; \n\t\tfor ( String name : $F28874 ( context ) . getImportsFile ( ) . split ( STRING00 ) ) { \n\t\t\ttry { \n\t\t\t\tInputStream is = Utils . getFileOrResource ( name ) ; \n\t\t\t\tSymbols symbol = JAXB . unmarshal ( is , Symbols . class ) ; \n\t\t\t\t$F1109 ( is ) imported . getSymbols ( ) . addAll ( symbol . getSymbols ( ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException e ) { \n\t\t\t\tthrow $F231778 ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( Utils . isNullOrEmpty ( $F28874 ( context ) . getImportFilter ( ) ) ) { \n\t\t\timports . getSymbols ( ) . addAll ( imported . getSymbols ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tPattern regex = Pattern . compile ( $F28874 ( context ) . getImportFilter ( ) ) ; \n\t\t\tfor ( String symbol : imported . getSymbols ( ) ) { \n\t\t\t\tif $F44713 ( regex , symbol ) { \n\t\t\t\t\timports . getSymbols ( ) . add ( symbol ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void stop $F2 { \n\tif ( ! Utils . isNullOrEmpty ( $F28874 ( context ) . getExportFile ( ) ) ) { \n\t\tif ( Utils . isNullOrEmpty ( $F28874 ( context ) . getExportFilter ( ) ) ) { \n\t\t\tJAXB . marshal ( export , new File ( $F28874 ( context ) . getExportFile ( ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tSymbols exportFiltered = new Symbols $F2 ; \n\t\t\tPattern regexp = Pattern . compile ( $F28874 ( context ) . getExportFilter ( ) ) ; \n\t\t\tfor ( String symbol : export . getSymbols ( ) ) { \n\t\t\t\tif $F44713 ( regexp , symbol ) { \n\t\t\t\t\texportFiltered . getSymbols ( ) . add ( symbol ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tJAXB . marshal ( exportFiltered , new File ( $F28874 ( context ) . getExportFile ( ) ) ) ; \n\t\t\t} \n\t\t} \n\tif ( $F28874 ( context ) . isClean ( ) ) { \n\t\tfor ( File file : oldFiles ) { \n\t\t\tlogInfo ( $F2282 ( file ) ) ; \n\t\t\tif $F11956 ( file ) $F29219 ( logInfo ) ++ deleted ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\tfinal BufferedOutputStream $F394277 ( out , java4cppHash ) ; \n\t\tnewHashes . store ( out , STRING00 ) ; \n\t\t$F1109 ( out ) } \n\tcatch ( IOException e ) { \n\t\tthrow $F231778 ( e ) ; \n\t\t} \n\tlogInfo ( $F170238 ( String , generated , imported , skipped , deleted ) ) ; \n\t} \n"}, {"code": "private synchronized void saveFile $F296938 ( fileContent , fileName ) { \n\ttry { \n\t\tif ( imports . getSymbols ( ) . contains ( $F507 ( fileName ) ) ) { \n\t\t\t$F10467 ( logInfo , fileName ) ++ imported ; \n\t\t\t} \n\t\telse { \n\t\t\texport . getSymbols ( ) . add ( $F507 ( fileName ) ) ; \n\t\t\t$F14492 ( algo , MessageDigest ) $F2060016 ( algo , fileContent ) String md5 = bytesToHexString ( $F15653 ( algo ) ) ; \n\t\t\t$F112797 ( newHashes , fileName , md5 ) if ( ! $F28874 ( context ) . isUseHash ( ) || $F6949 ( oldFiles , fileName ) || ! md5 . equals ( oldHashes . getProperty ( $F507 ( fileName ) ) ) ) { \n\t\t\t\tfileName . setWritable ( true ) ; \n\t\t\t\tBufferedOutputStream $F394277 ( writer , fileName ) ; \n\t\t\t\t$F438520 ( writer , fileContent ) fileName . setWritable ( false ) ; \n\t\t\t\t$F1109 ( writer ) ++ generated ; \n\t\t\t\t$F10467 ( logInfo , fileName ) } \n\t\t\telse { \n\t\t\t\t++ skipped ; \n\t\t\t\t$F10467 ( logInfo , fileName ) } \n\t\t\t$F6953 ( oldFiles , fileName ) } \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow $F231778 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static AttributeType create ( String name , AttributeValueType valueType ) { \n\tAttributeType toReturn = DynamicEnum . register ( new AttributeType ( name ) ) ; \n\tif ( valueType != null && toReturn . valueType == AttributeValueType . DEFAULT ) { \n\t\tConfig . setProperty ( typeName + STRING00 + $F2941 ( toReturn ) + STRING00 , $F797 ( valueType ) ) ; \n\t\t$F1357 ( toReturn , valueType ) } \n\telse if ( valueType != null && toReturn . valueType != valueType ) { \n\t\tthrow new IllegalArgumentException ( $F320 ( name ) + $F219196 ( toReturn ) ) ; \n\t\t} \n\t$F528 ( values , toReturn ) return toReturn ; \n\t} \n"}, {"code": "public AttributeValueType getValueType $F2 { \n\tif ( valueType == AttributeValueType . DEFAULT ) { \n\t\tsynchronized ( this ) { \n\t\t\tif ( valueType == AttributeValueType . DEFAULT ) { \n\t\t\t\tif ( Config . hasProperty ( typeName , name ( ) ) ) { \n\t\t\t\t\tvalueType = AttributeValueType . valueOf ( Config . get ( typeName , name ( ) ) . asString ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F271315 ( AttributeValueType ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn valueType ; \n\t} \n"}, {"code": "public Bus $F70275 addObserver ( BusObserver $F70275 observer ) { \n\tif $F268 ( observer ) { \n\t\tlogger . info ( $F407498 ( observer ) ) ; \n\t\t$F528 ( observers , observer ) } \n\treturn this ; \n\t} \n"}, {"code": "public boolean removeObserver ( BusObserver $F70275 observer ) { \n\tlogger . trace ( $F407498 ( observer ) ) ; \n\t$F73127 ( observers , observer ) } \n"}, {"code": "public Bus $F70275 broadcast ( M message , Object ... args ) $F123435 ( broadcast , message , args ) "}, {"code": "public $F83763 toShortArray $F2 { \n\t$F83763 $F83772 ( copy , size ) ; \n\tfor ( $F6610 ( i , size ) ) $F79113 ( copy , i , elements ) return copy ; \n\t} \n"}, {"code": "$F1 public Short set ( int index , Short element ) { \n\treturn set ( index , $F4905 ( element ) ) ; \n\t} \n"}, {"code": "public boolean addAll ( ShortArray items ) { \n\tensureCapacity ( size + items . size ) ; \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ size ++ ] = items . elements [ i ] ; \n\t\t} \n\treturn items . size > INT00 ; \n\t} \n"}, {"code": "public static boolean hasSubPrefix $F14585 ( tokens ) { \n\treturn $F11721 ( tokens ) ( token - > token . toLowerCase ( ) . startsWith ( STRING00 ) ) ; \n\t} \n"}, {"code": "public static boolean containsSub $F14585 ( tokens ) { \n\treturn $F11721 ( tokens ) ( $F485108 ( token , isSub ) ) ; \n\t} \n"}, {"code": "public static $F5033 process ( $F14584 ( tokens ) , Policy policy ) { \n\tif ( policy == Policy . CONCATENATE ) $F3342 ( concatenate , tokens ) else $F3342 ( expand , tokens ) } \n"}, {"code": "public static $F2612 lenientClassForName ( String className ) throws ClassNotFoundException { \n\ttry $F384280 ( Class , className ) catch ( ClassNotFoundException ignored ) { \n\t\tString $F429067 ( newName , className ) ; \n\t\t$F384279 ( Class , newName ) } \n\t} \n"}, {"code": "public static Context createContext ( Collection < PropertyMapping $F45 > mappings ) { \n\tIdentityHashMap < ContextProperty $F45 , Object > properties = new IdentityHashMap < ContextProperty $F45 , Object > $F4371 ( mappings ) ; \n\tfor ( final PropertyMapping $F45 mapping : mappings ) { \n\t\tproperties . put ( mapping . property , mapping . value ) ; \n\t\t} \n\treturn ImmutableContext . createUnsafe ( properties ) ; \n\t} \n"}, {"code": "$F1 public void updateRepositoryItemProperty ( MutableRepositoryItem pItem , Object pBean ) { \n\t$F6597 ( enumItem , getBeanProperty , pBean ) try { \n\t\tObject enumCodeOrValue ; \n\t\tif ( mEnumRepositoryType . getUseCodeForValue ( ) ) { \n\t\t\t$F391767 ( enumCodeOrValue , mCodeGetter , enumItem ) } \n\t\telse { \n\t\t\t$F391767 ( enumCodeOrValue , mValueGetter , enumItem ) } \n\t\tpItem . setPropertyValue ( getRepositoryPropertyName ( ) , enumCodeOrValue ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new MappingException $F52872 ( String , enumItem , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Object mapRepositoryProperty ( RepositoryItem pItem ) { \n\tObject propertyValue = pItem . getPropertyValue ( getRepositoryPropertyName ( ) ) ; \n\ttry { \n\t\tObject enumItem ; \n\t\tif ( mEnumRepositoryType . getUseCodeForValue ( ) ) { \n\t\t\tenumItem = $F56939 ( mFromCode , propertyValue ) ; \n\t\t\t} \n\t\telse { \n\t\t\tenumItem = $F56939 ( mFromValue , propertyValue ) ; \n\t\t\t} \n\t\treturn $F1995865 ( mBeanPropertyDescriptor ) . cast ( enumItem ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new MappingException $F52872 ( String , propertyValue , e ) ; \n\t\t} \n\t} \n"}, {"code": "private static Object fillSingletonMapFrom ( Input input , Schema $F45 schema , Object owner , IdStrategy strategy , boolean graph , Object map ) throws IOException { \n\tswitch ( input . readFieldNumber ( schema ) ) { \n\t\t$F60795 ( map ) $F60794 $F333 $F60794 { \n\t\t\tfinal Wrapper wrapper = new Wrapper $F2 ; \n\t\t\tObject v = input . mergeObject ( wrapper , strategy . OBJECT_SCHEMA ) ; \n\t\t\tif ( ! graph || ! ( ( GraphInput ) input ) . isCurrentMessageReference ( ) ) $F172356 ( v , wrapper ) try $F106750 ( fSingletonMap_v , map , v ) catch ( IllegalArgumentException e ) $F11568 ( e ) $F61685 ( e ) if ( INT00 != input . readFieldNumber ( schema ) ) throw new ProtostuffException $F6 ; \n\t\t\treturn map ; \n\t\t\t} \n\t\t$F2377 throw new ProtostuffException $F6 ; \n\t\t} \n\tfinal Wrapper wrapper = new Wrapper $F2 ; \n\tObject k = input . mergeObject ( wrapper , strategy . OBJECT_SCHEMA ) ; \n\tif ( ! graph || ! ( ( GraphInput ) input ) . isCurrentMessageReference ( ) ) $F172356 ( k , wrapper ) switch ( input . readFieldNumber ( schema ) ) { \n\t\t$F60794 try $F106750 ( fSingletonMap_k , map , k ) catch ( IllegalArgumentException e ) $F11568 ( e ) $F61685 ( e ) return map ; \n\t\t$F118676 $F2377 throw new ProtostuffException $F6 ; \n\t\t} \n\tObject v = input . mergeObject ( wrapper , strategy . OBJECT_SCHEMA ) ; \n\tif ( ! graph || ! ( ( GraphInput ) input ) . isCurrentMessageReference ( ) ) $F172356 ( v , wrapper ) try { \n\t\t$F52836 ( fSingletonMap_k , map , k ) $F52836 ( fSingletonMap_v , map , v ) } \n\tcatch ( IllegalArgumentException e ) $F11568 ( e ) $F61685 ( e ) if ( INT00 != input . readFieldNumber ( schema ) ) throw new ProtostuffException $F6 ; \n\treturn map ; \n\t} \n"}, {"code": "$F1 public File convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\tif ( _caseSensitive ) $F22171 ( valueStr ) return new File ( $F9283 ( valueStr ) ) ; \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tuncompileQuoter ( out , getValue ( occ ) . getAbsolutePath ( ) ) ; \n\t} \n"}, {"code": "$F1 protected void exportXmlData ( final StringBuilder out , final int occ ) { \n\txmlEncode ( getValue ( occ ) . getAbsolutePath ( ) , out ) ; \n\t} \n"}, {"code": "$F1 public $F18352 getValueAsFileArray $F2 throws ParseException { \n\tfinal $F18352 result = new File $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "private boolean finishLine ( boolean sawNewline ) throws IOException { \n\thandleLine ( $F797 ( line ) , sawReturn ? $F77527 ( sawNewline ) : $F77527 ( sawNewline ) ) ; \n\t$F38418 ( line ) sawReturn = false ; \n\treturn sawNewline ; \n\t} \n"}, {"code": "private String getValue $F43279 ( section , name ) { \n\tif $F7430 ( section , name ) { \n\t\t$F257420 ( log , section , name ) $F724 } \n\tif ( fildes != null && lastModified != $F105890 ( fildes ) ) $F890 ( getFileProperties , filePath ) $F5618 ( propertyName , getPropertyName , section , name ) $F2744 ( obj , fileProperties , propertyName ) if $F268 ( obj ) { \n\t\tif $F3507 ( log ) { \n\t\t\tlog . debug ( $F9972 ( propertyName , obj , filePath ) ) ; \n\t\t\t} \n\t\tif ( ObjectUtils . NULL . equals ( obj ) ) $F2200 else $F395760 ( obj ) } \n\t$F194836 ( ret , fileProperties , name ) if $F268 ( ret ) $F395760 ( ret ) ret = $F1107524 ( System , propertyName ) ; \n\tif $F268 ( ret ) { \n\t\t$F221777 ( log , propertyName ) return ret ; \n\t\t} \n\tfileProperties . put ( propertyName , ObjectUtils . NULL ) ; \n\t$F724 } \n"}, {"code": "public boolean toBoolean $F1693 ( str , defaultValue ) { \n\tif ( StringUtils . equalsIgnoreCase ( null , str ) ) $F356 ( defaultValue ) else if ( StringUtils . equalsIgnoreCase ( STRING00 , str ) ) $F233 else if ( StringUtils . equalsIgnoreCase ( STRING00 , str ) ) $F1668 else if ( StringUtils . equalsIgnoreCase ( STRING00 , str ) ) $F233 else if ( StringUtils . equalsIgnoreCase ( STRING00 , str ) ) $F1668 else $F356 ( defaultValue ) } \n"}, {"code": "private void getFileProperties ( String fileName ) { \n\t$F39336 ( fileProperties ) if $F154162 ( StringUtils , filePath , fileName ) { \n\t\tif $F14980 ( log ) $F20530 ( log , fileName ) filePath = fileName ; \n\t\tif $F268 ( filePath ) $F34864 ( fildes , filePath ) else $F67413 ( fildes ) } \n\telse if $F112 ( fildes ) { \n\t\tif $F268 ( filePath ) $F34864 ( fildes , filePath ) else $F223381 ( log ) } \n\tif $F125808 ( fildes ) { \n\t\t$F14229 ( log , filePath ) $F254 } \n\ttry { \n\t\t$F142680 ( in , fildes ) $F29433 ( fileProperties , in ) $F1109 ( in ) $F58904 ( lastModified , fildes ) if $F14980 ( log ) { \n\t\t\tlog . info ( $F11870 ( fildes ) ) ; \n\t\t\t} \n\t\tnotifyPropertiesChangedListers ( lastModified ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog . warn ( $F104935 ( fildes , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "public $F21 getAttributes $F2 { \n\tif ( $F227907 ( attributes ) || ! $F212299 ( attributes , ALL_ATTRIBUTES ) ) { \n\t\t$F2233 ( found ) if $F268 ( attributes ) { \n\t\t\tfor ( String attribute : attributes ) { \n\t\t\t\tif $F42444 ( attribute ) $F86851 ( found ) } \n\t\t\t} \n\t\tif ( ! found ) { \n\t\t\t$F21 attributesx = new String [ attributes != null ? $F131726 ( attributes ) : INT00 ] ; \n\t\t\tif $F268 ( attributes ) { \n\t\t\t\t$F372842 ( attributesx ) for ( $F61008 ( i , attributes ) ) { \n\t\t\t\t\t$F64146 ( attributesx , i ) = attributes [ i ] ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tattributes = attributesx ; \n\t\t\t} \n\t\t} \n\treturn attributes ; \n\t} \n"}, {"code": "public LDAPQuery setAttributes $F996 ( attributes ) { \n\tif $F124033 ( attributes ) $F7668 ( this , attributes ) else { \n\t\tthis . attributes = ALL_ATTRIBUTES ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public LDAPQuery setAttributes $F14585 ( attributes ) { \n\tif $F98946 ( attributes ) { \n\t\tthis . attributes = $F90532 ( attributes ) ; \n\t\t$F1987 ( i ) for ( String attribute : attributes ) { \n\t\t\tthis . attributes [ i ++ ] = attribute ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tthis . attributes = ALL_ATTRIBUTES ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public String getCollectionEndpoint $F1195 ( entityName , groupId ) { \n\treturn connec . getBasePath ( ) + STRING00 + groupId + STRING00 + entityName ; \n\t} \n"}, {"code": "public String getCollectionUrl $F1195 ( entityName , groupId ) { \n\treturn $F7130 ( connec ) + getCollectionEndpoint ( entityName , groupId ) ; \n\t} \n"}, {"code": "public String getInstanceEndpoint $F16060 ( entityName , groupId , id ) { \n\t$F5618 ( edp , getCollectionEndpoint , entityName , groupId ) if $F14587 ( id ) $F372502 ( edp , id ) return edp ; \n\t} \n"}, {"code": "public String getInstanceUrl $F16060 ( entityName , groupId , id ) { \n\treturn $F7130 ( connec ) + $F209 ( getInstanceEndpoint , entityName , groupId , id ) ; \n\t} \n"}, {"code": "public $F96 all $F1195 ( entityName , groupId ) throws MnoException { \n\treturn all ( entityName , groupId , null , getAuthenticatedClient ( ) ) ; \n\t} \n"}, {"code": "public $F1372 T all ( String entityName , String groupId , $F7906 ( clazz ) ) throws MnoException { \n\treturn all ( entityName , groupId , null , getAuthenticatedClient ( ) , clazz ) ; \n\t} \n"}, {"code": "public $F96 all ( String entityName , String groupId , $F15785 ( params ) , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . get ( getCollectionUrl ( entityName , groupId ) , MnoMapHelper . toUnderscoreHash ( params ) ) ; \n\tType typeOfHashMap = $F211169 ; \n\t$F1652617 ( GSON , jsonBody , typeOfHashMap ) } \n"}, {"code": "public $F1372 T all ( String entityName , String groupId , $F15785 ( params ) , MnoHttpClient httpClient , $F7906 ( clazz ) ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . get ( getCollectionUrl ( entityName , groupId ) , MnoMapHelper . toUnderscoreHash ( params ) ) ; \n\t$F1652617 ( GSON , jsonBody , clazz ) } \n"}, {"code": "public $F96 create $F387012 ( entityName , groupId , hash ) throws MnoException { \n\treturn $F145900 ( create , entityName , groupId , hash , getAuthenticatedClient ) ; \n\t} \n"}, {"code": "public $F96 create ( String entityName , String groupId , String jsonStr , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . post ( $F782 ( getCollectionUrl , entityName , groupId , jsonStr ) ) ; \n\tType typeOfHashMap = $F211169 ; \n\t$F1652617 ( GSON , jsonBody , typeOfHashMap ) } \n"}, {"code": "public $F96 retrieve $F16060 ( entityName , groupId , entityId ) throws MnoException { \n\treturn $F145900 ( retrieve , entityName , groupId , entityId , getAuthenticatedClient ) ; \n\t} \n"}, {"code": "public $F96 retrieve ( String entityName , String groupId , String entityId , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . get ( $F209 ( getInstanceUrl , entityName , groupId , entityId ) ) ; \n\tType typeOfHashMap = $F211169 ; \n\t$F1652617 ( GSON , jsonBody , typeOfHashMap ) } \n"}, {"code": "public $F96 update ( String entityName , String groupId , String entityId , $F2731 ( hash ) ) throws AuthenticationException , ApiException , InvalidRequestException { \n\treturn update ( $F40565 ( entityName , groupId , entityId , hash , getAuthenticatedClient ) ) ; \n\t} \n"}, {"code": "public $F96 update ( String entityName , String groupId , String entityId , $F2731 ( hash ) , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\t$F448399 ( envelope ) envelope . put ( entityName , MnoMapHelper . toUnderscoreHash ( hash ) ) ; \n\t$F6257 ( envelope , entityName ) $F472585 ( payload , GSON , envelope ) $F51734 ( update , entityName , groupId , entityId , payload , httpClient ) } \n"}, {"code": "public $F96 update ( String entityName , String groupId , String entityId , String jsonStr , MnoHttpClient httpClient ) throws AuthenticationException , ApiException , InvalidRequestException { \n\tString jsonBody = httpClient . put ( $F281495 ( getInstanceUrl , entityName , groupId , entityId , jsonStr ) ) ; \n\tType typeOfHashMap = $F211169 ; \n\t$F1652617 ( GSON , jsonBody , typeOfHashMap ) } \n"}, {"code": "$F15734 public $F96 delete $F16060 ( entityName , groupId , entityId ) throws AuthenticationException , ApiException { \n\treturn $F145900 ( delete , entityName , groupId , entityId , getAuthenticatedClient ) ; \n\t} \n"}, {"code": "$F15734 public $F96 delete ( String entityName , String groupId , String entityId , MnoHttpClient httpClient ) throws AuthenticationException , ApiException { \n\tString jsonBody = httpClient . delete ( $F209 ( getInstanceUrl , entityName , groupId , entityId ) ) ; \n\tType typeOfHashMap = $F211169 ; \n\t$F1652617 ( GSON , jsonBody , typeOfHashMap ) } \n"}, {"code": "private void build ( Map < String , D6ModelClassFieldInfo > refFieldMap ) { \n\t$F39336 ( refFieldMap ) final $F263365 $F278701 ( fields , mModelClazz ) ; \n\tfor ( $F2674 ( i , fields ) ) { \n\t\tfinal Field field = fields [ i ] ; \n\t\tfinal DBColumn annoColumn = field . getAnnotation ( DBColumn . class ) ; \n\t\t$F90687 ( annoColumn ) $F128456 ( columnName , annoColumn ) $F128456 ( columnType , annoColumn ) if $F7430 ( columnName , columnType ) $F42718 final D6ModelClassFieldInfo fieldInfo = new D6ModelClassFieldInfo $F2 ; \n\t\t$F1357 ( fieldInfo , field ) $F1357 ( fieldInfo , columnName ) $F1357 ( fieldInfo , columnType ) $F105189 ( fieldInfo ) fieldInfo . isAutoIncrement = annoColumn . isAutoIncrement ( ) ; \n\t\tfieldInfo . isNullable = $F360274 ( annoColumn ) ; \n\t\tfieldInfo . isPrimaryKey = annoColumn . isPrimaryKey ( ) ; \n\t\tfieldInfo . isUnique = $F444820 ( annoColumn ) ; \n\t\t$F2725 ( refFieldMap , columnName , fieldInfo ) } \n\t} \n"}, {"code": "public void verifyTextPresent ( String text ) { \n\t$F24610 ( start , System ) $F1987 ( tries ) String textRegexed = text ; \n\twhile ( ! isTextPresent ( textRegexed ) && tries ++ < getRetryAttempts ( ) ) $F136333 ( pause , getCommandRepeatMils ) $F24614 ( durationMills , System , start ) Assert . assertTrue ( isTextPresent ( textRegexed ) , String . format ( $F4488 ( durationMills , text ) ) ) ; \n\t} \n"}, {"code": "public void fireEvent $F1195 ( locator , eventName ) { \n\tWebElement element = getElement ( locator ) ; \n\tJavascriptLibrary javascript = new JavascriptLibrary $F2 ; \n\tif $F560 ( runningInIE ) { \n\t\t$F249832 ( script , String , locator , eventName ) javascript . executeScript ( getWebDriver ( ) , script ) ; \n\t\t} \n\telse { \n\t\tjavascript . callEmbeddedSelenium ( getWebDriver ( ) , STRING00 , element , eventName ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1372 Gather $F1372 from $F81342 ( elements ) { \n\treturn null == elements ? Gather . $F1372 $F411175 : $F8898 ( from , Arrays , elements ) ; \n\t} \n"}, {"code": "public static $F1372 Gather $F1372 from $F58489 ( iterable ) { \n\treturn null == iterable ? Gather . $F1372 $F411175 : $F60525 ( from , iterable ) ; \n\t} \n"}, {"code": "public static $F1372 Gather $F1372 from ( $F58836 ( iterator ) ) { \n\treturn null == iterator ? Gather . $F1372 $F411175 : from ( $F58884 ( Lists , iterator ) ) ; \n\t} \n"}, {"code": "public static $F1372 Gather $F1372 from $F67145 ( collection ) { \n\treturn new Gather $F1372 ( collection ) ; \n\t} \n"}, {"code": "public static $F1372 Gather $F1372 from ( Enumeration $F1372 enumeration ) { \n\treturn null == enumeration ? Gather . $F1372 $F411175 : from ( Iterators . forEnumeration ( enumeration ) ) ; \n\t} \n"}, {"code": "public Gather $F1372 order ( Ordering $F1372 ordering ) { \n\t$F25622 sorted = ordering . sortedCopy ( list ( ) ) ; \n\telements = $F530975 ( Optional , sorted ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Gather $F1372 filter ( $F86447 ( decision ) ) { \n\t$F338 ( predicates ) ( decision ) ; \n\tisFiltered = false ; \n\treturn this ; \n\t} \n"}, {"code": "public Gather $F1372 filterAsGather ( $F86447 ( decision ) ) { \n\treturn from ( Collections2 . filter ( $F63229 ( elements , decision ) ) ) ; \n\t} \n"}, {"code": "public $F25622 filterAsCollection ( $F86447 ( decision ) ) { \n\treturn Collections2 . filter ( $F63229 ( elements , decision ) ) ; \n\t} \n"}, {"code": "public $F57897 finds $F411404 ( decision ) { \n\treturn Optional . fromNullable ( Iterables . find ( each ( ) , decision , null ) ) ; \n\t} \n"}, {"code": "public $F57897 tryFind ( $F86447 ( decision ) ) { \n\treturn Iterables . tryFind ( result ( ) , decision ) ; \n\t} \n"}, {"code": "public T find ( $F86447 ( decision ) , T defaultValue ) { \n\treturn Iterables . find ( $F67830 ( result , decision , defaultValue ) ) ; \n\t} \n"}, {"code": "public Gather $F1372 loop ( $F86447 ( decision ) ) { \n\tif ( $F384 ( Decisions ) . apply ( result ( ) ) ) $F356 ( this ) Iterables . all ( result ( ) , decision ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Gather $F1372 concat $F58777 ( iterable ) { \n\treturn from ( Iterables . concat ( each ( ) , iterable ) ) ; \n\t} \n"}, {"code": "public $F34214 int foreach ( Function < $F13775 , O > function ) { \n\t$F1987 ( count ) for ( T item : each ( ) ) { \n\t\t$F457701 ( function , item ) ++ count ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public $F53007 Multimap $F242516 groupBy ( Function < $F13775 , K > function ) { \n\treturn Multimaps . index ( each ( ) , function ) ; \n\t} \n"}, {"code": "public $F58224 asArray $F7907 ( type ) { \n\treturn Iterators . toArray ( $F68814 ( each ) , type ) ; \n\t} \n"}, {"code": "public $F3215 Gather $F3215 map ( final $F85045 function ) { \n\treturn from ( Iterators . transform ( $F68814 ( each ) , function ) ) ; \n\t} \n"}, {"code": "public $F53007 Map $F242516 asMap ( Function $F208153 keyMaker ) { \n\tMap $F242516 $F71201 ( map , Maps ) ; \n\tforeach ( Funcs . addTo ( map , keyMaker ) ) ; \n\treturn map ; \n\t} \n"}, {"code": "public $F67711 split $F411404 ( predicate ) { \n\tfinal $F23339 $F57859 ( a , Lists ) , $F57859 ( b , Lists ) ; \n\tfor ( T elt : each ( ) ) { \n\t\t( $F1491 ( predicate , elt ) ? a : b ) . add ( elt ) ; \n\t\t} \n\t$F67711 $F57859 ( result , Lists ) ; \n\t$F528 ( result , a ) $F528 ( result , b ) return result ; \n\t} \n"}, {"code": "public Gather $F1372 takeWhile ( final $F17821 predicate ) { \n\tfinal $F58580 $F77306 ( it , each ) ; \n\treturn from ( new AbstractIterator $F1372 $F2 { \n\t\tprotected T computeNext $F2 { \n\t\t\tif $F58859 ( it ) $F24895 ( endOfData ) $F59042 ( t , it ) return $F1491 ( predicate , t ) ? t : endOfData ( ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Gather $F1372 dropWhile ( final $F17821 predicate ) { \n\tfinal $F58580 $F77306 ( it , each ) ; \n\treturn from ( new AbstractIterator $F1372 $F2 { \n\t\t$F192330 ( done ) protected T computeNext $F2 { \n\t\t\tif ( ! done ) { \n\t\t\t\twhile $F11310 ( it ) { \n\t\t\t\t\t$F59042 ( t , it ) if ( $F59043 ( predicate , t ) ) { \n\t\t\t\t\t\tdone = true ; \n\t\t\t\t\t\treturn t ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tif $F11310 ( it ) $F59176 ( it ) else $F24895 ( endOfData ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F1 public boolean multiplize ( final EquPart rightSide ) { \n\treturn ( rightSide instanceof OpLeftParen || rightSide instanceof TokOperand || rightSide instanceof Function ) ; \n\t} \n"}, {"code": "private String subDirForId ( String id ) { \n\tString path = objs + UNIX_PATH_SEPERATOR + $F2529 ( id , SUBDIR_POLICY ) ; \n\tsafeMkdir ( path ) ; \n\treturn path ; \n\t} \n"}, {"code": "private String pathToItem ( String id ) { \n\treturn subDirForId ( id ) + UNIX_PATH_SEPERATOR + $F6991 ( id , SUBDIR_POLICY ) ; \n\t} \n"}, {"code": "static public void warn $F166319 ( message , ex ) { \n\tif ( WARN ) logger . log ( LEVEL_WARN , message , ex ) ; \n\t} \n"}, {"code": "static public void debug $F166319 ( message , ex ) { \n\tif ( DEBUG ) logger . log ( LEVEL_DEBUG , message , ex ) ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) { \n\tEventQueue . invokeLater ( new Runnable $F2 { \n\t\tpublic void run $F2 { \n\t\t\ttry { \n\t\t\t\tBootstrapWindow frame = new BootstrapWindow $F2 ; \n\t\t\t\t$F566342 ( frame ) } \n\t\t\t$F153429 ( e ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F197020 $F1 public Iterable < DatabaseProduct > listDatabaseProducts ( $F197020 DatabaseEngine forEngine ) throws $F22199250 { \n\tif $F112 ( forEngine ) $F15673814 if ( ! $F2895412 ( forEngine ) . equalsIgnoreCase ( STRING00 ) ) return $F59466 ( Arrays ) ; \n\tServerServiceResourceModel . Version versionResult = getSubscriptionVersionProducts ( ) ; \n\tfinal ArrayList < DatabaseProduct > products = new ArrayList < DatabaseProduct > $F2 ; \n\tCollectionUtils . forAllDo ( versionResult . getEditions ( ) , new Closure $F2 { \n\t\t$F1 public void execute ( Object input ) { \n\t\t\tServerServiceResourceModel . Edition edition = ( ServerServiceResourceModel . Edition ) input ; \n\t\t\tfor ( ServerServiceResourceModel . ServiceLevelObjective serviceLevelObjective : edition . getServiceLevelObjectives ( ) ) { \n\t\t\t\tDatabaseProduct product = new DatabaseProduct ( $F2122051 ( serviceLevelObjective , edition ) ) ; \n\t\t\t\tproduct . setProviderDataCenterId ( provider . getDataCenterId ( $F20708 ( provider ) . getRegionId ( ) ) ) ; \n\t\t\t\tproduct . setEngine ( DatabaseEngine . SQLSERVER_EE ) ; \n\t\t\t\tproduct . setLicenseModel ( DatabaseLicenseModel . LICENSE_INCLUDED ) ; \n\t\t\t\t$F528 ( products , product ) } \n\t\t\t} \n\t\t} \n\t) ; \n\treturn products ; \n\t} \n"}, {"code": "public Selector append ( Selector tail ) { \n\tif $F112 ( right ) { \n\t\tif $F268 ( combinator ) $F84792 return new Selector $F36080 ( left , tail ) ; \n\t\t} \n\telse { \n\t\treturn new Selector ( left , combinator , $F1211 ( right , tail ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void init $F11167 ( name , config ) { \n\t$F1357 ( this , name ) $F1357 ( this , config ) this . run = true ; \n\tthis . stopped = false ; \n\t} \n"}, {"code": "public void doShutdown $F2 { \n\t$F24610 ( t , System ) $F2117 ( LOG , name ) synchronized ( this ) { \n\t\tthis . stopped = false ; \n\t\tthis . run = false ; \n\t\t} \n\twhile $F38432 { \n\t\tsynchronized ( this ) { \n\t\t\t$F545529 ( stopped ) } \n\t\ttry $F136995 ( Thread ) catch ( InterruptedException e ) $F333 } \n\tLOG . info ( $F320 ( name ) + $F101254 ( System , t ) + STRING00 ) ; \n\t} \n"}, {"code": "public static boolean isPIDAlive $F63043 ( pid ) throws IOException { \n\t$F224720 ( ps ) final String command [ ] = new String [ ] { \n\t\tps , STRING00 , pid + STRING00 } \n\t; \n\t$F391313 ( in ) final Process process = $F314995 ( Runtime , command ) ; \n\t$F142883 ( inStream , process ) InputStream $F2050774 ( errStream , process ) ; \n\ttry { \n\t\t$F37677 ( process ) } \n\tcatch ( final InterruptedException ignored ) $F1645 while $F202775 ( inStream ) { \n\t\tin . append ( ( char ) $F24551 ( inStream ) ) ; \n\t\t} \n\twhile $F202775 ( errStream ) { \n\t\tin . append ( ( char ) $F24551 ( errStream ) ) ; \n\t\t} \n\t$F37676 ( process ) $F1109 ( inStream ) inStream = null ; \n\t$F1109 ( errStream ) errStream = null ; \n\tif ( in . indexOf ( pid + STRING00 ) > INT00 ) $F232 $F213 } \n"}, {"code": "public String getOrElse $F1195 ( name , def ) { \n\t$F8494 ( val , get , name ) $F3446 ( val , def ) return val ; \n\t} \n"}, {"code": "public String getOrElse $F78563 ( i , def ) { \n\tif ( $F270815 ( i , values ) ) $F30911 ( values , i ) return def ; \n\t} \n"}, {"code": "public boolean has ( String value ) { \n\t$F70458 ( values ) for ( String v : values ) $F286473 ( v , value ) $F213 } \n"}, {"code": "public boolean hasIgnoringCase ( String value ) { \n\t$F70458 ( values ) $F90983 ( value ) for ( String v : values ) { \n\t\tif ( $F662616 ( v ) ( value ) ) $F233 } \n\t$F213 } \n"}, {"code": "public static Arguments create ( $F14584 ( values ) , $F7168 ( params ) ) { \n\t$F28972 ( values , emptyList ) $F28972 ( params , emptyMap ) if $F313209 ( values , params ) $F356 ( NONE ) return new Arguments ( values , params ) ; \n\t} \n"}, {"code": "private void init $F2 { \n\tif $F112 ( placeholder ) { \n\t\t$F2074 ( IdentificationManager ) . registerIdentification ( this ) ; \n\t\tOptional < Identification > identification = $F2074 ( IdentificationManager ) . getIdentification ( this ) ; \n\t\tif $F34250 ( identification ) $F10873 else $F213196 ( placeholder , identification ) } \n\t} \n"}, {"code": "$F1 public boolean add ( X x ) { \n\tif ( ! allowElementsWithoutIdentification ) $F24431 return $F2724 ( map , x , placeholder ) == null ; \n\t} \n"}, {"code": "public boolean add ( X x , Identification identification ) { \n\treturn $F2724 ( map , x , identification ) == null ; \n\t} \n"}, {"code": "public Optional < Identification > getIdentificationFor ( X x ) { \n\tIdentification $F199 ( identification , map , x ) ; \n\tif $F654564 ( identification , placeholder ) $F22427 ( Optional ) else $F59066 ( Optional , identification ) } \n"}, {"code": "$F1 public boolean process $F35040 ( elements , environment ) { \n\tMessager messager = $F41719 ( processingEnv ) ; \n\tfor ( TypeElement element : elements ) { \n\t\t$F700800 elementsAnnotatedWith = environment . getElementsAnnotatedWith ( element ) ; \n\t\tfor ( Element elementAnnotatedWith : elementsAnnotatedWith ) { \n\t\t\tTypeElement typeElement = ( TypeElement ) elementAnnotatedWith ; \n\t\t\tEntityValidator validator = new EntityValidator ( $F17561 ( processingEnv ) ) ; \n\t\t\tList < Problem > $F206579 ( problems , validator , typeElement ) ; \n\t\t\t$F2233 ( error ) for ( Problem problem : problems ) { \n\t\t\t\tif ( $F394140 ( problem ) == Kind . ERROR ) $F24354 ( error ) messager . printMessage ( $F394140 ( problem ) , $F210178 ( problem ) , $F3164741 ( problem ) ) ; \n\t\t\t\t} \n\t\t\tif ( ! error ) { \n\t\t\t\tMetamodelSource source = new MetamodelSource ( typeElement , processingEnv ) ; \n\t\t\t\ttry { \n\t\t\t\t\t$F488159 ( source ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tmessager . printMessage ( Kind . ERROR , STRING00 + source . toMetamodelName ( $F363874 ( typeElement ) ) + STRING00 + e + STRING00 , typeElement ) ; \n\t\t\t\t\t$F7453 ( e ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F232 } \n"}, {"code": "$F1 protected URLConnection openConnection ( URL url ) throws IOException { \n\tlogger . trace ( STRING00 , $F2515 ( url ) , $F5162 ( url ) ) ; \n\tURL resource = classloader . getResource ( $F2515 ( url ) ) ; \n\treturn $F5759 ( resource ) ; \n\t} \n"}, {"code": "$F1 public void onCreate ( Bundle savedInstanceState ) { \n\t$F568580 ( super , savedInstanceState ) EVENT_CONFIGURATION = EventLinker . Configuration . newInstance ( this ) ; \n\t} \n"}, {"code": "$F1 public void onViewCreated $F8935058 ( view , savedInstanceState ) { \n\t$F2340321 ( super , view , savedInstanceState ) EventUtils . link ( EVENT_CONFIGURATION ) ; \n\t} \n"}, {"code": "public static $F1372 Pair < T , IterableIterator $F1372 > takeOneFromTopN ( $F58836 ( iterator ) , int n ) { \n\tif ( $F58858 ( iterator ) || n < INT00 ) { \n\t\treturn new Pair < T , IterableIterator $F1372 > ( null , iterable ( iterator ) ) ; \n\t\t} \n\t$F23339 $F16594 ( firstN , n ) ; \n\t$F1987 ( i ) while ( $F58998 ( i , n , iterator ) ) { \n\t\t$F61119 ( firstN , iterator ) i ++ ; \n\t\t} \n\treturn new $F362780 ( firstN . remove ( $F117279 ( ThreadLocalRandom ) . nextInt ( $F22470 ( firstN ) ) ) , iterable ( com . google . common . collect . Iterators . concat ( com . google . common . collect . Iterators . unmodifiableIterator ( $F16599 ( firstN ) ) , iterator ) ) ) ; \n\t} \n"}, {"code": "public static Prefer valueOf $F62952 ( value ) { \n\tif $F540 ( nonNull , value ) { \n\t\t$F220742 ( data ) $F363345 ( params ) stream ( $F2495 ( value ) ) . map ( String : : <missing ';'> trim ) . map ( pref - > pref . split ( $F6251 ) ) . forEach ( x - > <missing ';'> { \n\t\t\tif $F4389 ( x ) { \n\t\t\t\tdata . put ( $F30707 ( x ) , $F30707 ( x ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tparams . add ( $F30707 ( x ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\t$F358736 ( waitValue , data , PREFER_WAIT ) try { \n\t\t\t$F706992 ( wait ) if $F540 ( nonNull , waitValue ) $F24579 ( wait , parseInt , waitValue ) return new Prefer ( $F198 ( data , PREFER_RETURN ) , $F39020 ( parseParameter , data , PREFER_INCLUDE ) , $F39020 ( parseParameter , data , PREFER_OMIT ) , params , $F198 ( data , PREFER_HANDLING ) , wait ) ; \n\t\t\t} \n\t\tcatch ( final NumberFormatException ex ) { \n\t\t\tLOGGER . error ( $F255107 ( waitValue , ex ) ) ; \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "$F1 public HttpRequestBase run $F30965 ( args ) { \n\t$F58385 ( assertLength , args ) return process ( assertAssignable ( $F24329 ( assertNotNull , args ) , InvocationContext . class ) , assertAssignable ( $F24329 ( assertNotNull , args ) , HttpRequestBase . class ) ) ; \n\t} \n"}, {"code": "public static RuntimeException unchecked $F61660 ( t ) { \n\tif $F41890 ( t ) { \n\t\treturn ( RuntimeException ) t ; \n\t\t} \n\telse { \n\t\treturn $F11566 ( t ) ; \n\t\t} \n\t} \n"}, {"code": "public static String getMessageWithRootCause $F61660 ( t ) { \n\treturn $F665284 ( ExceptionUtils , t ) + STRING00 + ExceptionUtils . getRootCauseMessage ( t ) ; \n\t} \n"}, {"code": "public static boolean isCausedBy ( final Throwable t , final $F73256 ... causeTypes ) { \n\tfor ( $F73256 type : causeTypes ) { \n\t\tif ( ExceptionUtils . indexOfType ( t , type ) >= INT00 ) $F233 } \n\t$F213 } \n"}, {"code": "public void configure ( ConfigParams config , boolean configAsDefault ) { \n\t_credentials . addAll ( CredentialParams . manyFromConfig ( config , configAsDefault ) ) ; \n\t} \n"}, {"code": "public CredentialParams lookup ( String correlationId ) throws ApplicationException { \n\tif $F3415 ( _credentials ) $F724 for ( CredentialParams credential : _credentials ) { \n\t\tif ( ! credential . useCredentialStore ( ) ) return credential ; \n\t\t} \n\tfor ( CredentialParams credential : _credentials ) { \n\t\tif ( credential . useCredentialStore ( ) ) { \n\t\t\tCredentialParams $F304 ( resolvedConnection , lookupInStores , correlationId , credential ) ; \n\t\t\t$F99796 ( resolvedConnection ) } \n\t\t} \n\t$F724 } \n"}, {"code": "$F1 protected Object getOptionValue ( $F109288 argq ) { \n\treturn Long . parseLong ( $F16604 ( argq ) ) ; \n\t} \n"}, {"code": "public static Response loadFromXML ( Sso ssoService , String xml ) throws CertificateException , ParserConfigurationException , SAXException , IOException { \n\treturn new Response ( ssoService . getSamlSettings ( ) . getIdpCertificate ( ) , xml ) ; \n\t} \n"}, {"code": "public static Response loadFromBase64XML ( Sso ssoService , String base64xml ) throws CertificateException , ParserConfigurationException , SAXException , IOException { \n\treturn loadFromBase64XML ( ssoService . getSamlSettings ( ) . getIdpCertificate ( ) , base64xml ) ; \n\t} \n"}, {"code": "public boolean isValid $F2 { \n\tNodeList nodes = xmlDoc . getElementsByTagNameNS ( XMLSignature . XMLNS , STRING00 ) ; \n\tif ( nodes == null || $F491904 ( nodes ) ) $F56174 ( logger ) $F7297 ( setIdAttributeExists , tagIdAttributes , xmlDoc ) X509Certificate cert = certificate . getX509Cert ( ) ; \n\tDOMValidateContext ctx = new DOMValidateContext ( $F380413 ( cert ) , $F491906 ( nodes ) ) ; \n\t$F14492 ( sigF , XMLSignatureFactory ) XMLSignature xmlSignature ; \n\ttry { \n\t\txmlSignature = sigF . unmarshalXMLSignature ( ctx ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F3509 ( logger , e ) xmlSignature = null ; \n\t\t} \n\t$F2272 ( xmlSignature ) try { \n\t\treturn $F178643 ( xmlSignature , ctx ) ; \n\t\t} \n\tcatch ( XMLSignatureException e ) $F3510 ( logger , e ) $F213 } \n"}, {"code": "public String getNameId $F2 throws Exception { \n\tNodeList nodes = xmlDoc . getElementsByTagNameNS ( $F1286 ) ; \n\tif $F491905 ( nodes ) $F201447 return $F491906 ( nodes ) . getTextContent ( ) ; \n\t} \n"}, {"code": "private String surroundFields ( String csvData ) { \n\t$F38398 ( surroundedCSV ) StringTokenizer currTokenizer = null ; \n\t$F38418 ( surroundedCSV ) for ( $F60197 ( currLine , csvData , BREAK ) ) { \n\t\t$F201497 ( currTokenizer , currLine , SEP ) ; \n\t\twhile $F101774 ( currTokenizer ) { \n\t\t\t$F6788 ( surroundedCSV , QUOTATION ) ( $F29197 ( currTokenizer ) ) . append ( QUOTATION ) ; \n\t\t\tif $F101774 ( currTokenizer ) $F1212 ( surroundedCSV , SEP ) } \n\t\t$F1212 ( surroundedCSV , BREAK ) } \n\t$F1226 ( surroundedCSV ) } \n"}, {"code": "private void writeFile $F11972 ( file , csvData ) throws IOException { \n\tLOG . debug ( $F11869 ( file ) ) ; \n\tFileUtils . writeStringToFile ( file , csvData , $F16700 ( Charset , ENCODING ) , false ) ; \n\tLOG . debug ( $F11869 ( file ) ) ; \n\t} \n"}, {"code": "static $F96 merge ( $F288130 ( args ) ) { \n\tif $F4340 ( args ) { \n\t\t$F96 $F22442 ( obj , args ) ; \n\t\tfor ( $F10914 ( i , args ) ) { \n\t\t\tobj = $F33692 ( mergeTwo , obj , args , i ) ; \n\t\t\t} \n\t\treturn obj ; \n\t\t} \n\telse if $F3415 ( args ) $F28681 ( args ) else $F2200 } \n"}, {"code": "static $F96 merge ( $F96 ... args ) { \n\tif $F5678 ( args ) { \n\t\t$F96 $F26393 ( obj , args ) ; \n\t\tfor ( $F2674 ( i , args ) ) { \n\t\t\tobj = $F62643 ( mergeTwo , obj , args , i ) ; \n\t\t\t} \n\t\treturn obj ; \n\t\t} \n\telse if $F4389 ( args ) $F142673 ( args ) else $F2200 } \n"}, {"code": "$F1 public void close $F2 throws Exception { \n\t$F276549 ( writer ) try { \n\t\tFileWriter fw = new FileWriter ( $F24443 ( file ) ) ; \n\t\t$F1969405 ( writer , fw ) ; \n\t\tString header = layout . getFileHeader ( ) ; \n\t\t$F93328 ( header , writer ) String presentationHeader = layout . getPresentationHeader ( ) ; \n\t\t$F93328 ( presentationHeader , writer ) $F12039 ( len , buffer ) for ( $F6610 ( i , len ) ) { \n\t\t\tILoggingEvent $F145 ( event , buffer ) ; \n\t\t\twriter . append ( layout . doLayout ( event ) ) ; \n\t\t\t} \n\t\tString presentationFooter = layout . getPresentationFooter ( ) ; \n\t\t$F93328 ( presentationFooter , writer ) String footer = layout . getFileFooter ( ) ; \n\t\t$F93328 ( footer , writer ) } \n\tfinally { \n\t\tif $F268 ( writer ) $F299421 ( writer ) } \n\t} \n"}, {"code": "public void setReferences ( IReferences references ) throws ReferenceException { \n\t$F619 counters = references . getOptional ( new Descriptor ( null , STRING00 , null , null , null ) ) ; \n\tfor ( Object counter : counters ) { \n\t\tif ( counter instanceof ICounters && counter != this ) _counters . add ( ( ICounters ) counter ) ; \n\t\t} \n\t} \n"}, {"code": "public void endTiming $F259552 ( name , elapsed ) { \n\tfor ( ICounters counter : _counters ) { \n\t\tif ( counter instanceof ITimingCallback ) ( ( ITimingCallback ) counter ) . endTiming ( name , elapsed ) ; \n\t\t} \n\t} \n"}, {"code": "public void stats $F259552 ( name , value ) { \n\tfor ( ICounters counter : _counters ) counter . stats ( name , value ) ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal String target = values . popString ( ) ; \n\t\tint i ; \n\t\tfor ( i = INT00 ; \n\t\t$F8124 ( i , target ) && $F145798 ( Character , target , i ) ; \n\t\ti ++ ) $F1645 values . push ( $F6991 ( target , i ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public Context createChild $F2 { \n\tContext $F51713 ( c ) ; \n\t$F1357 ( c , memoryHeap ) $F3649 ( c , this ) $F1982934 ( this , c ) return c ; \n\t} \n"}, {"code": "public $F1372 T get ( String name ) { \n\t$F23752 ( m , getMap , name ) if $F268 ( m ) $F84610 ( m , name ) $F724 } \n"}, {"code": "public $F1372 T get $F57899 ( c , name ) { \n\treturn Objects . cast ( get ( name ) , c ) ; \n\t} \n"}, {"code": "public void set $F844 ( name , o ) { \n\t$F23752 ( m , getMap , name ) if $F268 ( m ) { \n\t\tmemoryHeap . release ( $F198 ( m , name ) ) ; \n\t\t$F2725 ( m , name , o ) memoryHeap . take ( $F198 ( m , name ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void remove ( String name ) { \n\t$F23752 ( m , getMap , name ) if $F268 ( m ) { \n\t\tmemoryHeap . release ( $F198 ( m , name ) ) ; \n\t\t$F6953 ( m , name ) } \n\t} \n"}, {"code": "public $F96 getMap ( String name ) { \n\tif $F33656 ( variables , name ) return variables ; \n\telse if $F268 ( parent ) return parent . getMap ( name ) ; \n\t$F724 } \n"}, {"code": "public static $F1975 randomNodeIdentifier $F2 { \n\t$F9435 ( seed , UUID_BYTE_LENGTH ) int bufSize = $F43930 ( LONG_CHAR_LEN ) + HOSTNAME_MAX_CHAR_LEN + $F196874 ( BUF_PAGE_SZ ) ; \n\t$F2111077 ( randInfo , bufSize ) $F57820 ( time ) try { \n\t\ttime = getClockImpl ( ) . getUUIDTime ( ) ; \n\t\t} \n\tcatch ( OverClockedException oce ) $F128084 ( time , System ) $F1212 ( randInfo , time ) try { \n\t\tInetAddress $F203894 ( address , InetAddress ) ; \n\t\trandInfo . append ( $F38560 ( address ) ) ; \n\t\t} \n\tcatch ( UnknownHostException ukhe ) $F1219 ( randInfo ) randInfo . append ( $F86991 . hashCode ( ) ) ; \n\tCollection info = $F2234 ( System ) . values ( ) ; \n\t$F680835 ( it , info ) while $F11310 ( it ) { \n\t\t$F95521 ( randInfo , it ) } \n\tseed = DigestUtils . md5 ( $F797 ( randInfo ) ) ; \n\t$F9435 ( raw , NODE_ID_BYTE_LENGTH ) $F63624 ( System , seed , raw , NODE_ID_BYTE_LENGTH ) raw [ INT00 ] |= MULTICAST_BIT_SET ; \n\treturn raw ; \n\t} \n"}, {"code": "public static short newClockSequence $F2 { \n\t$F114718 ( random ) $F9435 ( bytes , BYTES_IN_SHORT ) $F154588 ( random , bytes ) return ( short ) ( Bytes . toShort ( bytes ) & INT00 ) ; \n\t} \n"}, {"code": "public static Clock getClockImpl $F2 { \n\tClock c = null ; \n\ttry { \n\t\tDiscoverClass dc = new DiscoverClass $F2 ; \n\t\tc = ( Clock ) dc . newInstance ( Clock . class , Clock . DEFAULT_CLOCK_IMPL ) ; \n\t\t} \n\t$F1646 return c ; \n\t} \n"}, {"code": "public static State getStateImpl $F2 { \n\tState s = null ; \n\ttry { \n\t\tDiscoverClass dc = new DiscoverClass $F2 ; \n\t\ts = ( State ) dc . newInstance ( State . class , State . DEFAULT_STATE_IMPL ) ; \n\t\t} \n\t$F1646 return s ; \n\t} \n"}, {"code": "public static $F1975 decodeMACAddress ( String address ) { \n\tStringBuffer buf = new StringBuffer $F43930 ( MAC_ADDRESS_TOKEN_COUNT ) ; \n\t$F29196 ( tokens , address ) if ( $F103152 ( tokens ) != MAC_ADDRESS_TOKEN_COUNT ) $F2200 else { \n\t\tfor ( $F6610 ( i , MAC_ADDRESS_TOKEN_COUNT ) ) { \n\t\t\tbuf . append ( $F29197 ( tokens ) ) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\t$F2666 c = $F797 ( buf ) . toCharArray ( ) ; \n\t\treturn Hex . decodeHex ( c ) ; \n\t\t} \n\tcatch ( DecoderException de ) $F216299 ( de ) } \n"}, {"code": "public static String encodeMACAddress $F2665 ( address ) throws IOException { \n\t$F2666 chars = Hex . encodeHex ( address ) ; \n\t$F2111077 ( buf , MAC_ADDRESS_CHAR_LENGTH ) for ( $F2674 ( i , chars ) ) { \n\t\t$F96987 ( buf , chars , i ) if ( i != $F12387 ( chars ) && $F134375 ( i ) ) $F1219 ( buf ) } \n\treturn $F1116502 ( buf ) ( ) ; \n\t} \n"}, {"code": "protected static $F1372 T _execute ( final URL from_url , final HttpMethod method , final RequestCallback callback , final ResponseExtractor $F1372 extractor ) { \n\t$F13173 ( _LOG_ , method , from_url ) $F279031 ( from_uri ) try { \n\t\tfrom_uri = $F5740 ( from_url ) ; \n\t\t} \n\tcatch ( URISyntaxException ex ) { \n\t\tthrow new HttpException ( ex ) ; \n\t\t} \n\t$F67491 ( response ) try { \n\t\tRestTemplate rest = new RestTemplate $F2 ; \n\t\tresponse = rest . execute ( from_uri , method , callback , extractor ) ; \n\t\t} \n\tcatch ( RestClientException ex ) { \n\t\t$F201489 ( _LOG_ , ex ) throw new HttpException ( ex ) ; \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "public static void getTo ( final URL from_url , final OutputStream to_stream , final $F11711 accept_media_types ) { \n\t$F13173 ( _LOG_ , from_url , accept_media_types ) AcceptHeaderRequestCallback callback = new AcceptHeaderRequestCallback ( accept_media_types ) ; \n\tOutputStreamResponseExtractor extractor = new OutputStreamResponseExtractor ( to_stream ) ; \n\t_execute ( from_url , HttpMethod . GET , callback , extractor ) ; \n\t} \n"}, {"code": "public static void getTo ( final URL from_url , final Writer to_writer , final $F11711 accept_media_types ) { \n\t$F13173 ( _LOG_ , from_url , accept_media_types ) AcceptHeaderRequestCallback callback = new AcceptHeaderRequestCallback ( accept_media_types ) ; \n\tWriterResponseExtractor extractor = new WriterResponseExtractor ( to_writer ) ; \n\t_execute ( from_url , HttpMethod . GET , callback , extractor ) ; \n\t} \n"}, {"code": "public static String postFrom ( final URL to_url , final InputStream from_stream , final MediaType media_type ) { \n\tInputStreamRequestCallback callback = new InputStreamRequestCallback ( from_stream , media_type ) ; \n\tString location = _execute ( to_url , HttpMethod . POST , callback , new LocationHeaderResponseExtractor $F2 ) ; \n\treturn location ; \n\t} \n"}, {"code": "public static String postFrom ( final URL to_url , final Reader from_reader , final MediaType media_type ) { \n\tReaderRequestCallback callback = new ReaderRequestCallback ( from_reader , media_type ) ; \n\tString location = _execute ( to_url , HttpMethod . POST , callback , new LocationHeaderResponseExtractor $F2 ) ; \n\treturn location ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal String tableName = values . popString ( ) ; \n\t\tfinal Double baseAmount = values . popDouble ( ) ; \n\t\tif ( $F4914 ( baseAmount ) == INT00 ) { \n\t\t\tvalues . push ( new Double $F452096 ) ; \n\t\t\t$F254 } \n\t\tfinal EquationSupport model = getEqu ( ) . getSupport ( ) ; \n\t\tfinal Hashtable $F183714 rateTable = model . resolveRate ( tableName , getEqu ( ) . getBaseDate ( ) , $F4914 ( baseAmount ) ) ; \n\t\t$F91677 ( blendedRate ) $F91677 ( previousLimit ) $F91677 ( previousRate ) for ( final Enumeration $F67569 $F11501 ( limits , rateTable ) ; \n\t\t$F5505 ( limits ) ; \n\t\t) { \n\t\t\tfinal Double $F5508 ( limit , limits ) ; \n\t\t\tfinal Double $F199 ( rate , rateTable , limit ) ; \n\t\t\tif $F3730 ( previousRate ) blendedRate += ( previousRate * ( ( $F4914 ( limit ) - previousLimit ) / $F4914 ( baseAmount ) ) ) ; \n\t\t\t$F362254 ( previousRate , rate ) ; \n\t\t\t$F362254 ( previousLimit , limit ) ; \n\t\t\t} \n\t\tif $F3730 ( previousRate ) blendedRate += ( previousRate * ( ( $F4914 ( baseAmount ) - previousLimit ) / $F4914 ( baseAmount ) ) ) ; \n\t\tvalues . push ( $F242331 ( blendedRate ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void asDefinitionText $F968436 ( sb ) $F41485 ( sb , patternParm ) "}, {"code": "$F1 public void asSetter $F968436 ( sb ) $F41485 ( sb , patternParm ) "}, {"code": "$F1 public boolean isSelected ( final Comparable $F26212 value , final boolean caseSensitive ) { \n\tif $F112 ( pattern ) if ( caseSensitive ) this . pattern = $F627 ( Pattern , patternParm ) ; \n\telse this . pattern = Pattern . compile ( patternParm , Pattern . CASE_INSENSITIVE ) ; \n\tfinal Matcher m = pattern . matcher ( $F797 ( value ) ) ; \n\t$F434180 ( m ) } \n"}, {"code": "$F1 public void usage ( final UsageBuilder str , final int indentLevel ) $F156917 ( str , patternParm ) "}, {"code": "public static void create ( int dimensions , int numElements , Collection < ? super MutableLongTuple > target ) { \n\tfor ( $F6610 ( i , numElements ) ) { \n\t\ttarget . add ( $F4018 ( LongTuples , dimensions ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static List < MutableLongTuple > create $F12004 ( dimensions , numElements ) { \n\tList < MutableLongTuple > list = new ArrayList < MutableLongTuple > ( numElements ) ; \n\t$F5605 ( create , dimensions , numElements , list ) return list ; \n\t} \n"}, {"code": "public static List < MutableLongTuple > deepCopy ( Collection < ? extends LongTuple > tuples ) { \n\tList < MutableLongTuple > result = new ArrayList < MutableLongTuple > $F4371 ( tuples ) ; \n\tfor ( LongTuple t : tuples ) { \n\t\tif $F112 ( t ) $F399094 ( result ) else { \n\t\t\tresult . add ( $F106730 ( LongTuples , t ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableLongTuple min ( Collection < ? extends LongTuple > tuples , MutableLongTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) LongTuple identity = LongTuples . constant ( size , Long . MAX_VALUE ) ; \n\tMutableLongTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > LongTuples . copy ( identity ) , ( r , t ) - > LongTuples . min ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > LongTuples . min ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "public static MutableLongTuple add ( Collection < ? extends LongTuple > tuples , MutableLongTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) MutableLongTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > LongTuples . create ( size ) , ( r , t ) - > LongTuples . add ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > LongTuples . add ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "$F1 public void setConfiguration $F558701 ( config ) throws ValidityException { \n\t$F111 ( pattern , config ) if $F112 ( pattern ) { \n\t\tthrow new ValidityException $F6 ; \n\t\t} \n\ttry { \n\t\t$F277223 ( _formatter , pattern ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new ValidityException $F231776 ( ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Object convertUponGet $F80574 ( value ) { \n\t$F2201 ( value ) return _formatter . format ( ( Date ) value ) ; \n\t} \n"}, {"code": "$F1 public Object convertUponSet $F80574 ( value ) { \n\t$F382033 ( date ) if $F268 ( value ) { \n\t\ttry { \n\t\t\tdate = _formatter . parse ( ( String ) value ) ; \n\t\t\t} \n\t\tcatch ( ParseException p_ex ) { \n\t\t\tthrow new IllegalArgumentException $F26312 ( p_ex ) ; \n\t\t\t} \n\t\t} \n\treturn date ; \n\t} \n"}, {"code": "public void createTables $F2 { \n\t$F975 ( Validate , connector ) $F975 ( Validate , tableOperations ) Value defaultFieldDelimiter = new Value ( $F49686 ( charset ) ) ; \n\tValue defaultFactDelimiter = new Value ( $F49686 ( charset ) ) ; \n\tint isEdgePresent = tableOperations . exists ( getEdgeTable ( ) ) ? INT00 : INT00 ; \n\tint isTransposePresent = tableOperations . exists ( getTransposeTable ( ) ) ? INT00 : INT00 ; \n\tint isDegreePresent = tableOperations . exists ( getDegreeTable ( ) ) ? INT00 : INT00 ; \n\tint isMetatablePresent = tableOperations . exists ( getMetadataTable ( ) ) ? INT00 : INT00 ; \n\tint isTextPresent = tableOperations . exists ( getTextTable ( ) ) ? INT00 : INT00 ; \n\tint tableCount = $F101356 ( isEdgePresent , isTransposePresent , isDegreePresent , isMetatablePresent , isTextPresent ) ; \n\tif $F379250 ( tableCount ) { \n\t\tthrow new D4MException $F29745 ( getRootName ) ; \n\t\t} \n\t$F120791 ( tableCount ) try { \n\t\t$F4021 ( tableOperations , getEdgeTable ) ; \n\t\t$F4021 ( tableOperations , getTransposeTable ) ; \n\t\t$F4021 ( tableOperations , getDegreeTable ) ; \n\t\t$F4021 ( tableOperations , getMetadataTable ) ; \n\t\t$F4021 ( tableOperations , getTextTable ) ; \n\t\tIteratorSetting degreeIteratorSetting = new IteratorSetting ( INT00 , SummingCombiner . class ) ; \n\t\tSummingCombiner . setEncodingType ( degreeIteratorSetting , $F3088599 ( LongCombiner ) ) ; \n\t\tSummingCombiner . setColumns ( degreeIteratorSetting , Collections . singletonList ( new IteratorSetting . Column $F1287 ) ) ; \n\t\ttableOperations . attachIterator ( getDegreeTable ( ) , degreeIteratorSetting ) ; \n\t\tIteratorSetting fieldIteratorSetting = new IteratorSetting ( INT00 , SummingCombiner . class ) ; \n\t\tSummingCombiner . setEncodingType ( fieldIteratorSetting , $F3088599 ( LongCombiner ) ) ; \n\t\tSummingCombiner . setColumns ( fieldIteratorSetting , Collections . singletonList ( new IteratorSetting . Column $F1287 ) ) ; \n\t\ttableOperations . attachIterator ( getMetadataTable ( ) , fieldIteratorSetting ) ; \n\t\tMutation mutation = new Mutation ( PROPERTY ) ; \n\t\t$F84556 ( mutation , FIELD_DELIMITER_PROPERTY_NAME , EMPTY_CQ , defaultFieldDelimiter ) $F84556 ( mutation , FACT_DELIMITER_PROPERTY_NAME , EMPTY_CQ , defaultFactDelimiter ) BatchWriterConfig bwConfig = new BatchWriterConfig $F2 ; \n\t\tbwConfig . setMaxLatency ( $F3530 ( TimeUnit ) ) ; \n\t\tbwConfig . setMaxMemory ( INT00 ) ; \n\t\tbwConfig . setMaxWriteThreads ( INT00 ) ; \n\t\tbwConfig . setTimeout ( $F3530 ( TimeUnit ) ) ; \n\t\tBatchWriter writer = connector . createBatchWriter ( getMetadataTable ( ) , bwConfig ) ; \n\t\twriter . addMutation ( mutation ) ; \n\t\t$F1109 ( writer ) } \n\tcatch ( AccumuloException | AccumuloSecurityException | TableExistsException | TableNotFoundException e ) { \n\t\tthrow new D4MException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public void addSplitsForSha1 $F2 { \n\t$F975 ( Validate , tableOperations ) $F19733 ( hexadecimal ) SortedSet $F1172378 $F22291 ( edgeSplits ) ; \n\tSortedSet $F1172378 $F22291 ( textSplits ) ; \n\tCollection $F1172378 existingEdgeSplits = null ; \n\tCollection $F1172378 existingTextSplits = null ; \n\ttry { \n\t\texistingEdgeSplits = tableOperations . listSplits ( getEdgeTable ( ) ) ; \n\t\texistingTextSplits = tableOperations . listSplits ( getTextTable ( ) ) ; \n\t\t} \n\tcatch ( TableNotFoundException | AccumuloSecurityException | AccumuloException e ) { \n\t\tthrow new D4MException $F2756 ( e ) ; \n\t\t} \n\tfor ( byte b : $F99115 ( hexadecimal , charset ) ) { \n\t\tText splitPoint = new Text ( new byte $F21535 ( b ) ) ; \n\t\tif ( not ( $F6948 ( existingEdgeSplits , splitPoint ) ) ) $F529 ( edgeSplits , splitPoint ) if ( not ( $F6948 ( existingTextSplits , splitPoint ) ) ) $F529 ( textSplits , splitPoint ) } \n\t$F473454 ( addSplits , getEdgeTable , edgeSplits ) $F473454 ( addSplits , getTextTable , textSplits ) } \n"}, {"code": "public void addSplits ( final String tablename , final SortedSet $F1172378 splits ) { \n\ttry { \n\t\ttableOperations . addSplits ( tablename , splits ) ; \n\t\t} \n\tcatch ( TableNotFoundException e ) { \n\t\tthrow new D4MException $F52872 ( String , tablename , e ) ; \n\t\t} \n\tcatch ( AccumuloException | AccumuloSecurityException e ) { \n\t\tthrow new D4MException $F52872 ( String , tablename , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void manipulate $F993 ( columnCollection ) { \n\tfinal $F5033 $F97850 ( cloneOfColumnCollection , columnCollection ) ; \n\tif ( $F4339 ( mIncludeColumnNameList ) && $F4339 ( mExcludeColumnNameList ) ) $F47777 if $F4340 ( mIncludeColumnNameList ) { \n\t\t$F10467 ( log , mIncludeColumnNameList ) for ( String columnName : cloneOfColumnCollection ) { \n\t\t\tif $F8674 ( mIncludeColumnNameList , columnName ) $F224401 ( log , columnName ) else $F6954 ( columnCollection , columnName ) } \n\t\t} \n\tif $F4340 ( mExcludeColumnNameList ) { \n\t\t$F10467 ( log , mExcludeColumnNameList ) for ( String excludeColumnName : mExcludeColumnNameList ) { \n\t\t\tif $F8674 ( cloneOfColumnCollection , excludeColumnName ) { \n\t\t\t\t$F6953 ( columnCollection , excludeColumnName ) $F224400 ( log , excludeColumnName ) } \n\t\t\telse $F1645 } \n\t\t} \n\t} \n"}, {"code": "private void executeCommand ( File newFile , $F14584 ( processParams ) ) throws IOException { \n\t$F24610 ( startTime , System ) if $F2486 ( newFile ) { \n\t\t$F3509 ( LOG , newFile ) $F21241 ( newFile ) } \n\tif ( $F1349869 ( newFile ) ) { \n\t\tboolean dirsCreated = $F47444 ( newFile ) ; \n\t\tif ( ! dirsCreated ) { \n\t\t\t$F36249 ( errorMessage , String , newFile ) $F27417 ( LOG , errorMessage ) $F31541 ( errorMessage ) } \n\t\t} \n\t$F685508 ( pb , processParams ) Process pr = null ; \n\t$F18162 ( currentThread , Thread ) try { \n\t\t$F3509 ( LOG , currentThread ) registerThread ( currentThread ) ; \n\t\tif $F206736 ( StringUtils , externalProcessErrorLogFile ) { \n\t\t\t$F3509 ( LOG , externalProcessErrorLogFile ) pb . redirectError ( ProcessBuilder . Redirect . appendTo ( $F2592 ( externalProcessErrorLogFile ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tpb . redirectError ( ProcessBuilder . Redirect . DISCARD ) ; \n\t\t\t} \n\t\tpb . redirectOutput ( ProcessBuilder . Redirect . DISCARD ) ; \n\t\t$F95538 ( pr , pb ) boolean waitResult = pr . waitFor ( maxWaitTimeSeconds , TimeUnit . SECONDS ) ; \n\t\tif ( ! waitResult ) { \n\t\t\t$F36249 ( errorMessage , String , maxWaitTimeSeconds ) $F27417 ( LOG , errorMessage ) $F564 ( cleanupFailure , pr , newFile ) $F31541 ( errorMessage ) } \n\t\tif ( $F186873 ( pr ) != INT00 ) { \n\t\t\tString errorMessage = String . format ( STRING00 , $F11884 ( newFile ) ) ; \n\t\t\t$F27417 ( LOG , errorMessage ) $F564 ( cleanupFailure , pr , newFile ) $F31541 ( errorMessage ) } \n\t\t$F24614 ( duration , System , startTime ) LOG . debug ( $F105120 ( newFile , duration ) ) ; \n\t\t} \n\tcatch ( InterruptedException ie ) { \n\t\t$F564 ( cleanupFailure , pr , newFile ) $F15466 ( LOG ) $F31541 ( ie ) } \n\t$F26192 ( unregisterThread , currentThread ) } \n"}, {"code": "public void removeGlobalForwardingRule $F274855 ( globalForwardingRule ) throws $F22199250 { \n\tCompute gce = provider . getGoogleCompute ( ) ; \n\tGoogleMethod method = new GoogleMethod ( provider ) ; \n\ttry { \n\t\tOperation job = gce . globalForwardingRules ( ) . delete ( $F1726155 ( ctx ) , $F12757 ( globalForwardingRule ) ) . execute ( ) ; \n\t\tmethod . getOperationComplete ( $F20708 ( provider ) , job , GoogleOperationType . GLOBAL_OPERATION , null , null ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tif ( $F298 ( ex ) == GoogleJsonResponseException . class ) { \n\t\t\tGoogleJsonResponseException gjre = ( GoogleJsonResponseException ) ex ; \n\t\t\tthrow new GoogleException ( CloudErrorType . GENERAL , $F24713 ( gjre ) , $F6001 ( gjre ) , $F56162 ( gjre ) . getMessage ( ) ) ; \n\t\t\t} \n\t\telse $F22214710 ( ex ) } \n\tcatch ( Exception ex ) { \n\t\t$F22214710 ( ex ) } \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal String tableName = values . popString ( ) ; \n\t\tfinal double baseAmount = values . popDouble ( ) ; \n\t\tfinal EquationSupport model = getEqu ( ) . getSupport ( ) ; \n\t\tfinal Hashtable $F183714 rateTable = model . resolveRate ( tableName , getEqu ( ) . getBaseDate ( ) , baseAmount ) ; \n\t\t$F91677 ( blendedRate ) for ( final Enumeration $F67569 $F11501 ( limits , rateTable ) ; \n\t\t$F5505 ( limits ) ; \n\t\t) { \n\t\t\tfinal Double $F5508 ( limit , limits ) ; \n\t\t\tblendedRate = $F94109 ( rateTable , limit ) . doubleValue ( ) ; \n\t\t\t} \n\t\tvalues . push ( $F242331 ( blendedRate ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public T put ( String key , YamlNode value ) { \n\treturn put ( getNodeFactory ( ) . textNode ( key ) , value ) ; \n\t} \n"}, {"code": "private < X extends YamlContainerNode > X putContainer ( YamlNode key , X value ) { \n\t$F564 ( put , key , value ) return value ; \n\t} \n"}, {"code": "public T put ( YamlNode key , boolean value ) { \n\treturn put ( key , getNodeFactory ( ) . booleanNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , $F401426 value ) { \n\treturn put ( key , getNodeFactory ( ) . binaryNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , byte value ) { \n\treturn put ( key , getNodeFactory ( ) . byteNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , Short value ) { \n\treturn put ( key , getNodeFactory ( ) . shortNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , int value ) { \n\treturn put ( key , getNodeFactory ( ) . intNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , Long value ) { \n\treturn put ( key , getNodeFactory ( ) . longNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , BigInteger value ) { \n\treturn put ( key , getNodeFactory ( ) . bigIntegerNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , Float value ) { \n\treturn put ( key , getNodeFactory ( ) . floatNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , Double value ) { \n\treturn put ( key , getNodeFactory ( ) . doubleNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , BigDecimal value ) { \n\treturn put ( key , getNodeFactory ( ) . bigDecimalNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , DateTime value ) { \n\treturn put ( key , getNodeFactory ( ) . dateTimeNode ( value ) ) ; \n\t} \n"}, {"code": "public T put ( YamlNode key , Date value ) { \n\treturn put ( key , getNodeFactory ( ) . dateTimeNode ( value ) ) ; \n\t} \n"}, {"code": "$F1 public $F23339 queryList ( Object object ) { \n\treturn sqlSession . selectList ( namespace + STRING00 , object ) ; \n\t} \n"}, {"code": "public Repository addRepository $F1195 ( name , url ) { \n\tRepository repository = new Repository ( name , url ) ; \n\t$F528 ( repositories , repository ) return repository ; \n\t} \n"}, {"code": "private DevUtilsDemoObject create ( final String name , ExecutionContext executionContext ) { \n\treturn executionContext . add ( $F409551 ( this , devUtilsDemoObjects , name ) ) ; \n\t} \n"}, {"code": "public static ToIntFunction < IntTuple > indexer ( Order order , IntTuple size ) { \n\tif ( order == Order . COLEXICOGRAPHICAL ) $F3342 ( colexicographicalIndexer , size ) $F867 ( lexicographicalIndexer , size ) } \n"}, {"code": "public static ToIntFunction < IntTuple > lexicographicalIndexer ( IntTuple size ) { \n\t$F292612 ( Objects , size ) IntTuple reversedProducts = IntTupleFunctions . exclusiveScan ( IntTuples . reversed ( size ) , INT00 , <missing ')'> ( a , b ) - > a * b , <missing ';'> null ) ; \n\tIntTuple sizeProducts = IntTuples . reverse ( reversedProducts , null ) ; \n\treturn indices - > IntTuples . dot ( indices , sizeProducts ) ; \n\t} \n"}, {"code": "public static ToIntFunction < IntTuple > colexicographicalIndexer ( IntTuple size ) { \n\t$F292612 ( Objects , size ) IntTuple sizeProducts = IntTupleFunctions . exclusiveScan ( size , INT00 , <missing ')'> ( a , b ) - > a * b , <missing ';'> null ) ; \n\treturn indices - > IntTuples . dot ( indices , sizeProducts ) ; \n\t} \n"}, {"code": "$F1 public void filterSetup $F2 { \n\tint type = getIntParameter ( SimpleJob . READER_TYPE ) ; \n\tif ( type == SimpleJob . SINGLE_COLUMN_JOIN_READER ) { \n\t\t$F647711 ( joinColumn ) joinColumn [ INT00 ] = getStringParameter ( SimpleJob . JOIN_DATA_COLUMN ) ; \n\t\t} \n\telse if ( type == SimpleJob . SOME_COLUMN_JOIN_READER ) { \n\t\tjoinColumn = getStringsParameter ( SimpleJob . JOIN_DATA_COLUMN ) ; \n\t\t} \n\tvalueLabels = getStringsParameter ( SimpleJob . LABELS ) ; \n\t} \n"}, {"code": "public static void awaitUninterruptibly ( CountDownLatch latch ) { \n\t$F2233 ( interrupted ) try { \n\t\twhile $F38432 { \n\t\t\ttry { \n\t\t\t\t$F4542 ( latch ) $F254 } \n\t\t\tcatch ( InterruptedException e ) $F24354 ( interrupted ) } \n\t\t} \n\tfinally { \n\t\t$F60101 ( interrupted , Thread ) } \n\t} \n"}, {"code": "public static void joinUninterruptibly ( Thread toJoin , long timeout , TimeUnit unit ) { \n\t$F57921 ( Preconditions , toJoin ) $F2233 ( interrupted ) try { \n\t\tlong $F65006 ( remainingNanos , unit , timeout ) ; \n\t\tlong end = $F15034 ( System ) + remainingNanos ; \n\t\twhile $F38432 { \n\t\t\ttry { \n\t\t\t\tNANOSECONDS . timedJoin ( toJoin , remainingNanos ) ; \n\t\t\t\t$F254 } \n\t\t\tcatch ( InterruptedException e ) { \n\t\t\t\tinterrupted = true ; \n\t\t\t\tremainingNanos = end - $F15034 ( System ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\t$F60101 ( interrupted , Thread ) } \n\t} \n"}, {"code": "public static $F26212 E takeUninterruptibly ( BlockingQueue $F26212 queue ) { \n\t$F2233 ( interrupted ) try { \n\t\twhile $F38432 { \n\t\t\ttry { \n\t\t\t\treturn $F100136 ( queue ) ; \n\t\t\t\t} \n\t\t\tcatch ( InterruptedException e ) $F24354 ( interrupted ) } \n\t\t} \n\tfinally { \n\t\t$F60101 ( interrupted , Thread ) } \n\t} \n"}, {"code": "public static $F26212 void putUninterruptibly ( BlockingQueue $F26212 queue , E element ) { \n\t$F2233 ( interrupted ) try { \n\t\twhile $F38432 { \n\t\t\ttry { \n\t\t\t\t$F45610 ( queue , element ) $F254 } \n\t\t\tcatch ( InterruptedException e ) $F24354 ( interrupted ) } \n\t\t} \n\tfinally { \n\t\t$F60101 ( interrupted , Thread ) } \n\t} \n"}, {"code": "$F762 public T assemble $F2 { \n\tif $F112 ( instance ) { \n\t\t$F48912 $F9005 ( constructor , descriptor ) ; \n\t\ttry { \n\t\t\tif ( descriptor . joinpoints ( ) . isEmpty ( ) ) { \n\t\t\t\tif $F112 ( constructor ) { \n\t\t\t\t\tinstance = $F13768 ( descriptor ) . newInstance ( ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tinstance = constructor . newInstance ( parameters ( constructor ) . toArray ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tEnhancer enhancer = new Enhancer $F2 ; \n\t\t\t\tenhancer . setSuperclass ( $F13768 ( descriptor ) ) ; \n\t\t\t\tenhancer . setCallback ( new Interceptor ( container , descriptor ) ) ; \n\t\t\t\tenhancer . setNamingPolicy ( NAMING_POLICY ) ; \n\t\t\t\tif $F112 ( constructor ) { \n\t\t\t\t\tinstance = ( T ) $F4008 ( enhancer ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tinstance = ( T ) enhancer . create ( $F75732 ( constructor ) , parameters ( constructor ) . toArray ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\t$F175765 ( logger , descriptor , e ) $F724 } \n\t\tcontainer . instances ( ) . put ( instance , descriptor ) ; \n\t\tEvent . of ( Constructed . class ) . on ( instance ) . fire ( ) ; \n\t\t} \n\tfor ( Field field : descriptor . injects ( ) ) { \n\t\t$F498139 ( field ) $F222356 qualifiers = new HashSet $F26725 $F2 ; \n\t\tfor ( $F489254 ( annotation , field ) ) { \n\t\t\t$F12510 $F1950353 ( type , annotation ) ; \n\t\t\tif ( type . isAnnotationPresent ( Qualifier . class ) || type . isAnnotationPresent ( Binding . class ) ) $F529 ( qualifiers , annotation ) } \n\t\tObject component = container . component ( new Target ( Target . Kind . FIELD , $F271614 ( field ) , qualifiers ) ) ; \n\t\ttry $F106750 ( field , instance , component ) catch ( Exception e ) $F175766 ( logger , field , e ) } \n\tfor ( Field field : descriptor . validates ( ) ) { \n\t\tfor ( $F489254 ( annotation , field ) ) { \n\t\t\t$F12510 $F9005 ( annotationType , annotation ) ; \n\t\t\tif ( annotationType . isAnnotationPresent ( Constraint . class ) ) { \n\t\t\t\tConstraint constraint = annotationType . getAnnotation ( Constraint . class ) ; \n\t\t\t\tClass < ? extends Validator $F26725 > validator = ( Class < ? extends Validator $F26725 > ) $F11145 ( constraint ) ; \n\t\t\t\tValidator $F26725 v = container . component ( validator ) ; \n\t\t\t\tif $F112 ( v ) { \n\t\t\t\t\tcontainer . install ( validator ) ; \n\t\t\t\t\tv = container . component ( validator ) ; \n\t\t\t\t\t} \n\t\t\t\t$F498139 ( field ) $F105146 ( value ) try $F13003 ( value , field , instance ) catch ( Exception e ) $F175766 ( logger , field , e ) $F2233 ( valid ) try { \n\t\t\t\t\tvalid = $F360706 ( v , annotation , value ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( ClassCastException e ) { \n\t\t\t\t\tthrow new ConfigurationException $F52839 ( validator , annotationType , e ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( valid ) { \n\t\t\t\t\tlogger . debug ( $F9972 ( field , value , annotation ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlogger . error ( $F9972 ( field , value , annotation ) ) ; \n\t\t\t\t\tthrow new ViolationException $F2144 ( field , annotation , value ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfor ( Annotation annotation : descriptor . constraints ( ) ) { \n\t\t$F12510 $F9005 ( annotationType , annotation ) ; \n\t\tConstraint constraint = annotationType . getAnnotation ( Constraint . class ) ; \n\t\tClass < ? extends Validator $F26725 > validator = ( Class < ? extends Validator $F26725 > ) $F11145 ( constraint ) ; \n\t\tValidator $F26725 v = container . component ( validator ) ; \n\t\tif $F112 ( v ) { \n\t\t\tcontainer . install ( validator ) ; \n\t\t\tv = container . component ( validator ) ; \n\t\t\t} \n\t\t$F2233 ( valid ) try { \n\t\t\tvalid = $F360706 ( v , annotation , instance ) ; \n\t\t\t} \n\t\tcatch ( ClassCastException e ) { \n\t\t\tthrow new ConfigurationException $F52839 ( validator , annotationType , e ) ; \n\t\t\t} \n\t\tif ( valid ) { \n\t\t\tlogger . debug ( STRING00 + $F13768 ( descriptor ) + STRING00 + instance + STRING00 + annotation + STRING00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlogger . error ( STRING00 + $F13768 ( descriptor ) + STRING00 + instance + STRING00 + annotation + STRING00 ) ; \n\t\t\tthrow new ViolationException ( $F13768 ( descriptor ) , annotation , instance ) ; \n\t\t\t} \n\t\t} \n\t$F206489 ( logger , descriptor ) return instance ; \n\t} \n"}, {"code": "$F1 public $F58580 iterator $F2 { \n\treturn new $F58580 $F2 { \n\t\tprivate int next = ArrayQueue . this . next ; \n\t\tpublic boolean hasNext $F2 { \n\t\t\treturn next < items . length ; \n\t\t\t} \n\t\tpublic T next $F2 { \n\t\t\tif $F101546 ( next , items ) $F58101 $F99909 ( items , next ) } \n\t\tpublic $F93122 } \n\t; \n\t} \n"}, {"code": "public SimulationBuilder phase ( String phase ) { \n\t$F6953 ( phases , phase ) $F528 ( phases , phase ) return this ; \n\t} \n"}, {"code": "public Simulation create $F2 { \n\t$F89029 ( tickCount ) return new SimulationImpl $F11487 ( tickCount , phases , members , series , services ) ; \n\t} \n"}, {"code": "private static $F2612 findClass ( String name ) throws LauncherException { \n\tfor ( ClassLoader clsLoader : new ClassLoader [ ] { \n\t\t$F3944 ( Thread ) , $F7047 ( CLASS ) } \n\t) try $F20130 ( clsLoader , name ) catch ( ClassNotFoundException ignored ) $F3510 ( logger , ignored ) throw new LauncherException $F500 ( name ) ; \n\t} \n"}, {"code": "$F15734 public static ProcessBuilder getProcessBuilder $F3019 ( mainClass , args ) throws LauncherException { \n\treturn getProcessBuilder ( findClass ( mainClass ) , $F998 ( Arrays , args ) ) ; \n\t} \n"}, {"code": "public static ProcessBuilder getProcessBuilder ( $F2613 ( mainClass ) , String ... args ) throws LauncherException $F60738 ( getProcessBuilder , mainClass , Arrays , args ) "}, {"code": "public static ProcessBuilder getProcessBuilder ( $F2613 ( mainClass ) , $F14584 ( args ) ) throws LauncherException { \n\treturn getProcessBuilder ( $F507 ( mainClass ) , getClassPathURLsFor ( mainClass ) , args ) ; \n\t} \n"}, {"code": "public static ProcessBuilder getProcessBuilder ( String mainClass , $F5752 ( classPath ) , String ... args ) throws LauncherException { \n\treturn getProcessBuilder ( mainClass , classPath , $F998 ( Arrays , args ) ) ; \n\t} \n"}, {"code": "public static ProcessBuilder getProcessBuilder ( String mainClass , $F5752 ( classPath ) , $F14584 ( args ) ) throws LauncherException { \n\t$F95965 ( cmdList ) $F159660 ( cmdArray ) $F1433 ( cmdList , getJavaPath ) if $F98946 ( classPath ) { \n\t\t$F5090 ( cmdList ) $F5219 ( cmdList , mkPath , classPath ) } \n\t$F528 ( cmdList , mainClass ) if $F98946 ( args ) $F308 ( cmdList , args ) $F196615 ( cmdArray , cmdList ) if $F3507 ( logger ) logger . debug ( $F45920 ( Arrays , cmdArray ) ) ; \n\treturn $F47412 ( cmdArray ) ; \n\t} \n"}, {"code": "$F15734 public static Process getProcess $F3019 ( mainClass , args ) throws LauncherException , IOException { \n\treturn getProcessBuilder ( mainClass , args ) . start ( ) ; \n\t} \n"}, {"code": "public String toJSON $F2 { \n\t$F1200 ( buffer ) $F1218 ( buffer ) $F1232 ( buffer ) ( $F11868 ( file ) ) . append ( STRING00 ) ; \n\t$F41421 ( buffer , format ) $F41421 ( buffer , addressing ) $F41421 ( buffer , endianness ) $F41421 ( buffer , operatingSystem ) $F41421 ( buffer , type ) $F41421 ( buffer , instructionSet ) $F1218 ( buffer ) $F1226 ( buffer ) } \n"}, {"code": "$F1 protected void init $F2 { \n\tdataJoinNo = StringUtil . getMatchNo ( labels , conf . get ( SimpleJob . JOIN_DATA_COLUMN ) ) ; \n\t} \n"}, {"code": "$F1 protected void valueCreate ( $F21 strings , Value value ) { \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tvalue . addPrimitiveValue ( $F18575 ( labels , i , strings ) ) ; \n\t\t} \n\tfor ( Entry < Pattern , $F21 > entry : $F708 ( simpleJoinMap ) ) { \n\t\tPattern $F14625 ( p , entry ) ; \n\t\tif ( p . matcher ( strings [ dataJoinNo ] ) . matches ( ) ) { \n\t\t\t$F21 $F4377 ( masters , entry ) ; \n\t\t\tfor ( $F2674 ( i , masterLabels ) ) { \n\t\t\t\tvalue . addPrimitiveValue ( $F18575 ( masterLabels , i , masters ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static InetAddress getLocalHost $F2 throws UnknownHostException { \n\ttry { \n\t\tfinal InetAddress $F203894 ( is , InetAddress ) ; \n\t\tif ( ! $F135796 ( is ) ) $F356 ( is ) } \n\tcatch ( final UnknownHostException e ) $F1645 $F24894 ( getLocalHostViaUdp ) } \n"}, {"code": "public static boolean isPublicAddress ( final InetAddress ia ) { \n\treturn ! ia . isSiteLocalAddress ( ) && ! ia . isLinkLocalAddress ( ) && ! ia . isAnyLocalAddress ( ) && ! $F135796 ( ia ) && ! ia . isMulticastAddress ( ) ; \n\t} \n"}, {"code": "public static Collection $F133210 getNetworkInterfaces $F2 throws SocketException { \n\tfinal Collection $F133210 addresses = new ArrayList $F133210 $F2 ; \n\tfinal $F135783 $F135785 ( e , NetworkInterface ) ; \n\twhile $F5506 ( e ) { \n\t\tfinal NetworkInterface $F5508 ( ni , e ) ; \n\t\tfinal $F133266 $F158620 ( niAddresses , ni ) ; \n\t\t$F262102 ( niAddresses , addresses ) } \n\treturn addresses ; \n\t} \n"}, {"code": "$F762 public static $F1372 $F560674 getInstanceOfParameterizedType ( $F3668909 request ) { \n\tType superclazz = $F298 ( request ) . getGenericSuperclass ( ) ; \n\ttry { \n\t\tType parameterizedTypeClazz = $F66136 ( superclazz ) ; \n\t\treturn ( $F560674 ) ( $F76523 ( parameterizedTypeClazz ) ) . newInstance ( ) ; \n\t\t} \n\t$F94354 } \n"}, {"code": "public static $F1372 $F647255 getBodyAsMultiValuedMap ( $F3668909 request ) { \n\t$F647255 map = new BodyMultivaluedMap $F2 ; \n\t$F43477 ( referenceClazz , request ) $F351058 fields = ClassUtil . getAnnotatedFields ( referenceClazz , Body . class ) ; \n\tfor ( Field field : fields ) { \n\t\tBody body = field . getAnnotation ( Body . class ) ; \n\t\t$F105042 ( parameter , body ) if ( parameter == null || $F387469 ( parameter ) ) $F105044 ( parameter , field ) String value = ClassUtil . getValueOf ( field , request , referenceClazz , $F4868 ) ; \n\t\tmap . putSingle ( parameter , value ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public static $F1372 WebClient resolveAndSetQueryPart ( $F3668909 request , WebClient webClient ) { \n\t$F129099 queryParts = resolveQueryPart ( request ) ; \n\t$F63081 iterator = $F60319 ( queryParts ) ; \n\tif $F58859 ( iterator ) $F356 ( webClient ) else { \n\t\twhile $F11310 ( iterator ) { \n\t\t\t$F93978 ( key , iterator ) $F75598 ( value , queryParts , key ) webClient = webClient . replaceQueryParam ( key , value ) ; \n\t\t\t} \n\t\t} \n\treturn webClient ; \n\t} \n"}, {"code": "public static AnnotationType create ( String name , AnnotationType parent ) $F22720 ( create , name , parent ) "}, {"code": "public static AnnotationType create ( String name , AnnotationType parent , AttributeType tagAttributeType ) { \n\tAnnotationType toReturn = DynamicEnum . register ( new AnnotationType ( name , parent ) ) ; \n\tif ( toReturn . setParentIfAbsent ( parent ) ) { \n\t\tConfig . setProperty ( typeName + STRING00 + $F2941 ( toReturn ) + STRING00 , $F2941 ( parent ) ) ; \n\t\t} \n\tif ( tagAttributeType != null && toReturn . tagAttributeType == null ) { \n\t\t$F1357 ( toReturn , tagAttributeType ) Config . setProperty ( typeName + STRING00 + $F2941 ( toReturn ) + STRING00 , $F2941 ( tagAttributeType ) ) ; \n\t\t} \n\telse if ( tagAttributeType != null && $F243972 ( toReturn , tagAttributeType ) ) { \n\t\tthrow new IllegalArgumentException ( $F320 ( name ) + toReturn . tagAttributeType + STRING00 + tagAttributeType ) ; \n\t\t} \n\t$F528 ( values , toReturn ) return toReturn ; \n\t} \n"}, {"code": "public boolean isInstance ( AnnotationType type ) { \n\tif $F112 ( type ) $F1668 else if ( this == type ) $F233 else $F23159 ( type , ROOT ) AnnotationType parent = getParent ( ) ; \n\twhile $F42058 ( parent , ROOT ) { \n\t\t$F47098 ( parent , type ) $F13191 ( parent ) } \n\t$F213 } \n"}, {"code": "public AttributeType getTagAttribute $F2 { \n\tif $F112 ( tagAttributeType ) { \n\t\tsynchronized ( this ) { \n\t\t\tif $F112 ( tagAttributeType ) { \n\t\t\t\tString attribute = Config . get ( typeName , name ( ) , STRING00 ) . asString ( ) ; \n\t\t\t\tif ( StringUtils . isNullOrBlank ( attribute ) && ! AnnotationType . ROOT . equals ( getParent ( ) ) ) { \n\t\t\t\t\ttagAttributeType = getParent ( ) . getTagAttribute ( ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( StringUtils . isNullOrBlank ( attribute ) ) { \n\t\t\t\t\ttagAttributeType = Types . TAG ; \n\t\t\t\t\t} \n\t\t\t\telse $F101921 ( tagAttributeType , AttributeType , attribute ) } \n\t\t\t} \n\t\t} \n\treturn tagAttributeType ; \n\t} \n"}, {"code": "public Annotation floor ( Annotation annotation , AnnotationType type ) { \n\tif $F7430 ( annotation , type ) { \n\t\treturn Fragments . detachedEmptyAnnotation ( ) ; \n\t\t} \n\tfor ( Annotation a : Collect . asIterable ( new NodeIterator ( root , $F3745 , $F4598 ( annotation ) , type , false ) ) ) { \n\t\tif ( $F14237 ( a , type ) && a != annotation ) $F356 ( a ) } \n\treturn Fragments . detachedEmptyAnnotation ( ) ; \n\t} \n"}, {"code": "public Annotation ceiling ( Annotation annotation , AnnotationType type ) { \n\tif $F7430 ( annotation , type ) { \n\t\treturn Fragments . detachedEmptyAnnotation ( ) ; \n\t\t} \n\tfor ( Annotation a : Collect . asIterable ( new NodeIterator ( root , $F35711 ( annotation ) , Integer . MAX_VALUE , type , true ) ) ) { \n\t\tif ( $F14237 ( a , type ) && a != annotation ) $F356 ( a ) } \n\treturn Fragments . detachedEmptyAnnotation ( ) ; \n\t} \n"}, {"code": "private void prepareNext $F2 { \n\thasNext = false ; \n\twhile $F11310 ( delegate ) { \n\t\t$F58904 ( next , delegate ) if $F65607 ( predicate , next ) $F86851 ( hasNext ) } \n\t} \n"}, {"code": "public static void clear $F2 { \n\t$F444450 ( lock ) try { \n\t\tallStrings = new EfficientStringBiMap ( HASH_MODULO ) ; \n\t\t$F59841 ( indexCounter ) } \n\t$F444463 ( lock ) } \n"}, {"code": "static public BagObject resource $F139786 ( context , name ) { \n\treturn resource ( context , name , ( ) - $F253106 ) ; \n\t} \n"}, {"code": "static public BagObject url ( String urlString , Bag postData , String postDataMimeType ) { \n\treturn url ( urlString , postData , postDataMimeType , ( ) - $F253106 ) ; \n\t} \n"}, {"code": "public ResponseBuilder ldpOptions $F678307 ( res ) { \n\tfinal String identifier = getBaseUrl ( ) + $F251039 ( req ) + $F2515 ( req ) ; \n\t$F3509 ( LOGGER , identifier ) final IRI graphName = ACL . equals ( req . getExt ( ) ) ? PreferAccessControl : PreferUserManaged ; \n\t$F564 ( checkDeleted , res , identifier ) final ResponseBuilder builder = status ( NO_CONTENT ) ; \n\tldpResourceTypes ( res . getInteractionModel ( ) ) . forEach ( type - > builder . link ( type . getIRIString ( ) , STRING00 ) ) ; \n\tif ( res . isMemento ( ) || TIMEMAP . equals ( req . getExt ( ) ) ) { \n\t\tbuilder . header ( ALLOW , $F16886 ( join , GET , HEAD , OPTIONS ) ) ; \n\t\t} \n\telse { \n\t\tbuilder . header ( ACCEPT_PATCH , APPLICATION_SPARQL_UPDATE ) ; \n\t\tif ( $F5249 ( PreferAccessControl , graphName ) || res . getInteractionModel ( ) . equals ( RDFSource ) || res . getInteractionModel ( ) . equals ( NonRDFSource ) ) { \n\t\t\tbuilder . header ( ALLOW , join ( STRING00 , GET , HEAD , OPTIONS , PATCH , PUT , DELETE ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbuilder . header ( ALLOW , join ( STRING00 , GET , HEAD , OPTIONS , PATCH , PUT , DELETE , POST ) ) ; \n\t\t\tbuilder . header ( ACCEPT_POST , $F5026 ( MEDIA_TYPES ) ( mt - $F715741 ( mt ) + STRING00 + $F648009 ( mt ) ) . filter ( mt - > ! $F5249 ( TEXT_HTML , mt ) ) . collect ( joining ( STRING00 ) ) ) ; \n\t\t\t} \n\t\t} \n\treturn builder ; \n\t} \n"}, {"code": "$F1 public void execute $F2 throws $F18250 { \n\tString deploymentQualifier = application + ( deployment != null ? STRING00 + deployment + ( $F1125670 ( commitId ) ) : STRING00 ) ; \n\t$F2117 ( log , deploymentQualifier ) CloudcontrolledPush push = new CloudcontrolledPush $F2 ; \n\tpush . copyPropertiesfromAnother ( this ) ; \n\t$F77072 ( push ) CloudcontrolledDeploy deploy = new CloudcontrolledDeploy $F2 ; \n\tdeploy . copyPropertiesfromAnother ( this ) ; \n\t$F77072 ( deploy ) } \n"}, {"code": "public static void setDefaultEnvironment ( String environment ) { \n\t$F12116 ( System , environment ) Logging . getLogger ( EnvironmentManager . class ) ; \n\tPropertyManager . setDefaultEnvironment ( environment ) ; \n\t} \n"}, {"code": "$F1 public void handleNotification ( Notification notification , Object handback ) { \n\ttry { \n\t\t$F140379 ( method , target , notification , handback ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F212556 ( LOG , method , target , e ) } \n\t} \n"}, {"code": "public String extractData ( final ClientHttpResponse response ) throws IOException { \n\t$F6364 ( output ) IoUtil . copy ( new InputStreamReader ( $F32234 ( response ) ) , output ) ; \n\t$F1226 ( output ) } \n"}, {"code": "public void die $F27155 ( message , params ) throws UnableToCompleteException { \n\tinternalLog ( TreeLogger . ERROR , $F4182 ( String , message , params ) ) ; \n\t$F7372687 } \n"}, {"code": "public static $F1372 Function < T , Void > addTo ( $F534976 ( collection ) ) { \n\treturn new Function < T , Void > $F2 { \n\t\tpublic Void apply ( T arg ) { \n\t\t\t$F528 ( collection , arg ) $F724 } \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F208153 Function < T , Void > addTo ( final Map $F242516 map , final $F63415 keyMaker ) { \n\treturn new Function < T , Void > $F2 { \n\t\tpublic Void apply ( T arg ) { \n\t\t\tmap . put ( $F1491 ( keyMaker , arg ) , arg ) ; \n\t\t\t$F724 } \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F28644 Function $F28644 lookup $F73990 ( map ) { \n\treturn Functions . forMap ( map ) ; \n\t} \n"}, {"code": "public static $F34214 Function < Object , O > getParseFunction ( Class $F34214 type ) { \n\treturn new StructBehavior < Function < Object , O > > ( type ) { \n\t\t$F762 $F1 protected Function < Object , O > booleanIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_BOOLEAN ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > byteIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_BYTE ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > characterIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_CHARACTER ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > doubleIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_DOUBLE ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > floatIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_FLOAT ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > integerIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_INTEGER ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > longIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_LONG ; \n\t\t\t} \n\t\t$F762 $F1 protected Function < Object , O > shortIf $F2 { \n\t\t\treturn ( Function < Object , O > ) TO_SHORT ; \n\t\t\t} \n\t\t$F1 protected Function < Object , O > nullIf $F2 $F2200 $F1 protected Function < Object , O > noneMatched $F2 { \n\t\t\treturn new ValueBehaviorAdapter < Function < Object , O > > ( delegate ) { \n\t\t\t\t$F762 $F1 protected Function < Object , O > dateIf ( Date resolvedP ) { \n\t\t\t\t\treturn ( Function < Object , O > ) TO_DATE ; \n\t\t\t\t\t} \n\t\t\t\t$F762 $F1 protected Function < Object , O > bigDecimalIf ( BigDecimal resolvedP ) { \n\t\t\t\t\treturn ( Function < Object , O > ) TO_BIGDECIMAL ; \n\t\t\t\t\t} \n\t\t\t\t$F762 $F1 protected Function < Object , O > bigIntegerIf ( BigInteger resolvedP ) { \n\t\t\t\t\treturn ( Function < Object , O > ) TO_BIGINTEGER ; \n\t\t\t\t\t} \n\t\t\t\t$F1 protected Function < Object , O > defaultBehavior $F2 $F2200 } \n\t\t\t. doDetect ( ) ; \n\t\t\t} \n\t\t} \n\t. doDetect ( ) ; \n\t} \n"}, {"code": "protected XMLContext createXMLContext ( $F13557 mappingLocations , $F33567 targetClasses , $F21 targetPackages ) throws MappingException , ResolverException , IOException { \n\tXMLContext context = new XMLContext $F2 ; \n\tif $F19672 ( ObjectUtils , mappingLocations ) { \n\t\tMapping mapping = new Mapping $F2 ; \n\t\tfor ( Resource mappingLocation : mappingLocations ) { \n\t\t\tmapping . loadMapping ( SaxResourceUtils . createInputSource ( mappingLocation ) ) ; \n\t\t\t} \n\t\tcontext . addMapping ( mapping ) ; \n\t\t} \n\tif $F19672 ( ObjectUtils , targetClasses ) { \n\t\tcontext . addClasses ( targetClasses ) ; \n\t\t} \n\tif $F19672 ( ObjectUtils , targetPackages ) { \n\t\tcontext . addPackages ( targetPackages ) ; \n\t\t} \n\tif ( this . castorProperties != null ) { \n\t\tfor ( $F11301 property : this . castorProperties . entrySet ( ) ) { \n\t\t\tcontext . setProperty ( $F18327 ( property ) ) ; \n\t\t\t} \n\t\t} \n\treturn context ; \n\t} \n"}, {"code": "$F1 protected final void marshalDomNode ( Object graph , Node node ) throws XmlMappingException { \n\tmarshalSaxHandlers ( graph , DomUtils . createContentHandler ( node ) , null ) ; \n\t} \n"}, {"code": "protected void customizeMarshaller ( Marshaller marshaller ) { \n\tmarshaller . setValidation ( this . validating ) ; \n\tmarshaller . setSuppressNamespaces ( this . suppressNamespaces ) ; \n\tmarshaller . setSuppressXSIType ( this . suppressXsiType ) ; \n\tmarshaller . setMarshalAsDocument ( this . marshalAsDocument ) ; \n\tmarshaller . setMarshalExtendedType ( this . marshalExtendedType ) ; \n\tmarshaller . setRootElement ( this . rootElement ) ; \n\tmarshaller . setNoNamespaceSchemaLocation ( this . noNamespaceSchemaLocation ) ; \n\tmarshaller . setSchemaLocation ( this . schemaLocation ) ; \n\tmarshaller . setUseXSITypeAtRoot ( this . useXSITypeAtRoot ) ; \n\tif ( this . doctypes != null ) { \n\t\tfor ( $F11301 doctype : this . doctypes . entrySet ( ) ) { \n\t\t\tmarshaller . setDoctype ( $F18327 ( doctype ) ) ; \n\t\t\t} \n\t\t} \n\tif ( this . processingInstructions != null ) { \n\t\tfor ( $F11301 processingInstruction : this . processingInstructions . entrySet ( ) ) { \n\t\t\tmarshaller . addProcessingInstruction ( $F18327 ( processingInstruction ) ) ; \n\t\t\t} \n\t\t} \n\tif ( this . namespaceMappings != null ) { \n\t\tfor ( $F11301 entry : this . namespaceMappings . entrySet ( ) ) { \n\t\t\tmarshaller . setNamespaceMapping ( $F18327 ( entry ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 protected final Object unmarshalDomNode ( Node node ) throws XmlMappingException { \n\ttry { \n\t\treturn createUnmarshaller ( ) . unmarshal ( node ) ; \n\t\t} \n\tcatch ( XMLException ex ) { \n\t\tthrow $F37870 ( convertCastorException , ex ) ; \n\t\t} \n\t} \n"}, {"code": "protected void customizeUnmarshaller ( Unmarshaller unmarshaller ) { \n\tunmarshaller . setValidation ( this . validating ) ; \n\tunmarshaller . setWhitespacePreserve ( this . whitespacePreserve ) ; \n\tunmarshaller . setIgnoreExtraAttributes ( this . ignoreExtraAttributes ) ; \n\tunmarshaller . setIgnoreExtraElements ( this . ignoreExtraElements ) ; \n\tunmarshaller . setObject ( this . rootObject ) ; \n\tunmarshaller . setReuseObjects ( this . reuseObjects ) ; \n\tunmarshaller . setClearCollections ( this . clearCollections ) ; \n\tif ( this . namespaceToPackageMapping != null ) { \n\t\tfor ( $F11301 mapping : this . namespaceToPackageMapping . entrySet ( ) ) { \n\t\t\tunmarshaller . addNamespaceToPackageMapping ( $F18327 ( mapping ) ) ; \n\t\t\t} \n\t\t} \n\tif ( this . entityResolver != null ) { \n\t\tunmarshaller . setEntityResolver ( this . entityResolver ) ; \n\t\t} \n\tif ( this . classDescriptorResolver != null ) { \n\t\tunmarshaller . setResolver ( this . classDescriptorResolver ) ; \n\t\t} \n\tif ( this . idResolver != null ) { \n\t\tunmarshaller . setIDResolver ( this . idResolver ) ; \n\t\t} \n\tif ( this . objectFactory != null ) { \n\t\tunmarshaller . setObjectFactory ( this . objectFactory ) ; \n\t\t} \n\tif ( this . beanClassLoader != null ) { \n\t\tunmarshaller . setClassLoader ( this . beanClassLoader ) ; \n\t\t} \n\t} \n"}, {"code": "protected XmlMappingException convertCastorException ( XMLException ex , boolean marshalling ) { \n\tif ( ex instanceof ValidationException ) { \n\t\treturn new ValidationFailureException $F2756 ( ex ) ; \n\t\t} \n\telse if ( ex instanceof MarshalException ) { \n\t\tif ( marshalling ) { \n\t\t\treturn new MarshallingFailureException $F2756 ( ex ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn new UnmarshallingFailureException $F2756 ( ex ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn new UncategorizedMappingException $F2756 ( ex ) ; \n\t\t} \n\t} \n"}, {"code": "private static void updateDirecotryDigest ( final String path , final File file , MessageDigest md ) throws Exception { \n\tString relativePath = $F11884 ( file ) . substring ( $F1203 ( path ) ) ; \n\t$F14508 ( relativePath ) if $F15346 ( file ) { \n\t\tmd . update ( $F602583 ( relativePath , Charset ) ) ; \n\t\tif $F386841 ( logger , LOG_LEVEL ) { \n\t\t\tcountDigest ( $F60699 ( md ) , new PathNameInputStream ( relativePath ) ) ; \n\t\t\t} \n\t\t$F289693 ( content , file ) Arrays . sort ( content , new Comparator $F9030 $F2 { \n\t\t\t$F1 public int compare $F24631 ( f1 , f2 ) $F446654 ( f1 , f2 ) } \n\t\t) ; \n\t\tfor ( File subFile : content ) $F5704 ( updateDirecotryDigest , path , subFile , md ) } \n\telse { \n\t\tmd . update ( $F602583 ( relativePath , Charset ) ) ; \n\t\tif $F386841 ( logger , LOG_LEVEL ) { \n\t\t\tcountDigest ( $F60699 ( md ) , new PathNameInputStream ( relativePath ) ) ; \n\t\t\t} \n\t\tupdateDigest ( md , $F1097 ( file ) ) ; \n\t\tif $F386841 ( logger , LOG_LEVEL ) { \n\t\t\tcountDigest ( $F60699 ( md ) , new FileNameInputStream ( file , relativePath ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void configure ( ConfigParams config ) { \n\tConfigParams parameters = config . getSection ( STRING00 ) ; \n\tif $F4340 ( parameters ) $F1619 ( _parameters , parameters ) } \n"}, {"code": "protected static String parameterize ( String config , ConfigParams parameters ) throws IOException { \n\t$F3446 ( parameters , config ) Handlebars handlebars = new Handlebars $F2 ; \n\tTemplate template = handlebars . compileInline ( config ) ; \n\t$F36493 ( template , parameters ) } \n"}, {"code": "$F762 public static DataProviderFactory create $F781212 ( args ) { \n\tfinal Class < ? extends DataProviderFactory > dataProviderClass = findDataProviderImpl ( ) ; \n\tfinal DataProviderFactory factory ; \n\ttry { \n\t\tConstructor < ? extends DataProviderFactory > dataProviderConstructor = null ; \n\t\tfinal Constructor [ ] constructors = $F12703 ( dataProviderClass ) ; \n\t\tfor ( final Constructor constructor : constructors ) { \n\t\t\t$F381096 ( params , constructor ) $F2233 ( matches ) if $F205630 ( args , params ) { \n\t\t\t\tmatches = true ; \n\t\t\t\tfor ( $F2674 ( i , params ) ) { \n\t\t\t\t\tif ( ! params [ i ] . isAssignableFrom ( $F209176 ( args , i ) ) ) $F57412 ( matches ) } \n\t\t\t\t} \n\t\t\tif ( matches ) $F67525 ( dataProviderConstructor , constructor ) } \n\t\tif $F268 ( dataProviderConstructor ) { \n\t\t\t$F233036 ( factory , dataProviderConstructor , args ) } \n\t\telse $F67413 ( factory ) } \n\t$F11569 ( e ) return factory ; \n\t} \n"}, {"code": "private static $F2612 findClass $F20960 ( className , classLoader ) throws ClassNotFoundException { \n\ttry { \n\t\t$F124810 ( spiClass ) if $F112 ( classLoader ) $F226288 ( spiClass , Class , className ) else { \n\t\t\ttry { \n\t\t\t\tspiClass = $F163693 ( Class , className , classLoader ) ; \n\t\t\t\t} \n\t\t\tcatch ( ClassNotFoundException ex ) $F226288 ( spiClass , Class , className ) } \n\t\treturn spiClass ; \n\t\t} \n\tcatch ( ClassNotFoundException x ) $F4760 ( x ) catch ( Exception x ) { \n\t\tthrow new ClassNotFoundException ( $F356665 ( className , x ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void put ( DajlabModelInterface model ) { \n\tif $F268 ( model ) { \n\t\t$F240553 ( name , model ) $F2725 ( dajlab , name , model ) } \n\t} \n"}, {"code": "public < T extends DajlabModelInterface > T get $F7907 ( clazz ) { \n\t$F67491 ( ret ) try { \n\t\tret = ( T ) $F145074 ( dajlab , clazz ) ; \n\t\t} \n\tcatch ( ClassCastException e ) $F7454 ( e ) return ret ; \n\t} \n"}, {"code": "public void registerFileDir ( Path dir , String fileType , ReloadableFile reloadableFile ) throws IOException { \n\tWatchKey key = $F1923 ( dir , watcher , ENTRY_MODIFY ) ; \n\tList < FileInfo > $F199 ( fileInfos , addOnMap , key ) ; \n\tif $F268 ( fileInfos ) { \n\t\tfileInfos . add ( new FileInfo $F2144 ( dir , fileType , reloadableFile ) ) ; \n\t\t} \n\telse { \n\t\t$F74981 ( fileInfos ) fileInfos . add ( new FileInfo $F2144 ( dir , fileType , reloadableFile ) ) ; \n\t\t$F2725 ( addOnMap , key , fileInfos ) } \n\t} \n"}, {"code": "private boolean isFileType ( WatchEvent event , String fileType ) { \n\treturn $F200909 ( event ) . toString ( ) . contains ( fileType ) ; \n\t} \n"}, {"code": "public boolean writeToFile $F1195 ( defaultFilePath , realFilePath ) { \n\ttry { \n\t\tFiles . copy ( $F198 ( Paths , defaultFilePath ) , $F198 ( Paths , realFilePath ) , StandardCopyOption . REPLACE_EXISTING ) ; \n\t\t$F232 } \n\tcatch ( IOException e ) { \n\t\t$F62615 ( error , e ) $F213 } \n\t} \n"}, {"code": "public void createDefaultFile $F1195 ( defaultFilePath , initMessage ) throws IOException { \n\t$F2595 ( file , defaultFilePath ) $F276549 ( bufferedWriterInit ) try { \n\t\tif $F11857 ( file ) { \n\t\t\t$F170967 ( file ) $F100237 ( bufferedWriterInit , defaultFilePath ) ; \n\t\t\t$F21494 ( bufferedWriterInit , initMessage ) } \n\t\t} \n\tcatch ( IOException e ) $F182041 ( error , e ) finally { \n\t\tif $F268 ( bufferedWriterInit ) { \n\t\t\ttry $F2453 ( bufferedWriterInit ) catch ( IOException e ) $F182041 ( error , e ) } \n\t\t} \n\t} \n"}, {"code": "private void checkAndProcessFileInfo ( WatchKey key , List < FileInfo > fileInfos ) { \n\tfor ( WatchEvent $F45 event : key . pollEvents ( ) ) { \n\t\tWatchEvent . Kind $F9005 ( kind , event ) ; \n\t\tfor ( FileInfo fileInfo : fileInfos ) { \n\t\t\tif ( kind == OVERFLOW ) { \n\t\t\t\ttry { \n\t\t\t\t\tthrow new IncompleteFileEventException $F2 ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( IncompleteFileEventException e ) $F28508 ( log , e ) } \n\t\t\telse if ( ( $F90403 ( kind , ENTRY_CREATE , ENTRY_MODIFY , ENTRY_DELETE ) ) && isFileType ( event , fileInfo . getFileType ( ) ) ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( fileInfo . getReloadableFile ( ) != null ) { \n\t\t\t\t\t\tfileInfo . getReloadableFile ( ) . reloadFile ( $F797 ( kind ) ) ; \n\t\t\t\t\t\tdebug ( STRING00 + $F200909 ( event ) . toString ( ) ) ; \n\t\t\t\t\t\tgetMain ( ) . getFilePublisher ( ) . notifyFileSubscribers ( fileInfo . getReloadableFile ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) $F28508 ( log , e ) try $F136995 ( Thread ) catch ( InterruptedException e ) $F28508 ( log , e ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void run $F2 { \n\twhile $F38432 { \n\t\tWatchKey key ; \n\t\ttry { \n\t\t\t$F146733 ( key , watcher ) } \n\t\tcatch ( InterruptedException e ) { \n\t\t\t$F28507 ( log , e ) $F23605 } \n\t\tList < FileInfo > $F199 ( fileInfos , addOnMap , key ) ; \n\t\t$F564 ( checkAndProcessFileInfo , key , fileInfos ) boolean valid = $F7295 ( key ) ; \n\t\tif ( ! valid ) { \n\t\t\t$F6953 ( addOnMap , key ) if $F6132 ( addOnMap ) $F333 } \n\t\t} \n\t} \n"}, {"code": "public static < F , S > Failure < F , S > failure ( final F x ) { \n\treturn new Failure < F , S > ( x ) ; \n\t} \n"}, {"code": "public CommunicationServiceBuilder limit ( String socketName , Integer uplinkRate , Integer downlinkRate ) { \n\tcheckUncreated ( ) ; \n\tthis . uplink . put ( socketName , uplinkRate ) ; \n\tthis . downlink . put ( socketName , downlinkRate ) ; \n\treturn this ; \n\t} \n"}, {"code": "public CommunicationServiceBuilder limit $F17751 ( socketName , rate ) { \n\treturn $F151662 ( limit , socketName , rate ) ; \n\t} \n"}, {"code": "public CommunicationServiceBuilder delay ( String socketName , Long updelay , Long downdelay ) { \n\tcheckUncreated ( ) ; \n\tthis . updelay . put ( socketName , updelay ) ; \n\tthis . downdelay . put ( socketName , downdelay ) ; \n\treturn this ; \n\t} \n"}, {"code": "public CommunicationServiceBuilder delay $F245514 ( socketName , delay ) { \n\treturn delay ( socketName , delay , delay ) ; \n\t} \n"}, {"code": "public ByteBuffer getClassDefinition ( String name ) { \n\tByteBuffer def ; \n\tfor ( ClassLoaderStrategy strategy : strategies ) { \n\t\tif ( ( def = strategy . getClassDefinition ( name ) ) != null ) $F356 ( def ) } \n\t$F724 } \n"}, {"code": "$F5446012 $F762 public static $F26212 NavigableSet $F26212 filter ( NavigableSet $F26212 unfiltered , Predicate $F59476 predicate ) { \n\tif ( unfiltered instanceof FilteredSet ) { \n\t\tFilteredSet $F26212 filtered = ( FilteredSet $F26212 ) unfiltered ; \n\t\t$F66773 combinedPredicate = Predicates . $F26212 and ( filtered . predicate , predicate ) ; \n\t\treturn new FilteredNavigableSet $F26212 ( ( NavigableSet $F26212 ) filtered . unfiltered , combinedPredicate ) ; \n\t\t} \n\treturn new FilteredNavigableSet $F26212 ( $F63468 ( checkNotNull , unfiltered , predicate ) ) ; \n\t} \n"}, {"code": "public static $F19737225 DefaultTree $F19737225 generate ( final TreeSource $F19737225 source ) { \n\tID rootId = source . getRootId ( ) ; \n\tDATA $F608273 ( rootData , source , rootId ) ; \n\tDefaultTree $F19737225 tree = new DefaultTree $F50 ( rootId , rootData ) ; \n\t$F564 ( generateSubNode , source , tree ) return tree ; \n\t} \n"}, {"code": "private static $F19737225 void generateSubNode ( final TreeSource $F19737225 source , final DefaultTree $F19737225 node ) { \n\tList $F2746145 items = source . listChildrenId ( $F6210 ( node ) ) ; \n\t$F225713 ( items ) for ( ID id : items ) { \n\t\tDATA $F608273 ( item , source , id ) ; \n\t\tnode . appendChildNode ( id , item ) ; \n\t\t} \n\tfor ( DefaultTree $F19737225 subNode : new $F51 ( $F356715 ( node ) . values ( ) ) ) $F565 ( generateSubNode , source , subNode ) } \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tContext baseContext = ContextUtils . discover ( $F20708 ( config ) ) ; \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . APPLICATION ) ; \n\tfor ( Field field : fields ) { \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) field . set ( $F20708 ( config ) , $F1116 ( baseContext ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 $F838512 getExtraCommandLineArgs $F2 { \n\t$F75598 ( agentJar , options , ALLOCATION_AGENT_JAR_OPTION ) if $F309775 ( Strings , agentJar ) { \n\t\ttry { \n\t\t\tOptional $F9030 instrumentJar = findAllocationInstrumentJarOnClasspath ( ) ; \n\t\t\tif $F30198 ( instrumentJar ) { \n\t\t\t\tagentJar = $F144 ( instrumentJar ) . getAbsolutePath ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\t$F588809 ( logger , SEVERE , e ) } \n\t\t} \n\tif ( $F83690 ( Strings , agentJar ) || ! $F224685 ( agentJar ) ) $F10873 return new ImmutableSet . Builder $F641 $F2 . addAll ( super . getExtraCommandLineArgs ( ) ) . add ( STRING00 ) . add ( STRING00 + agentJar ) . add ( STRING00 + agentJar ) . build ( ) ; \n\t} \n"}, {"code": "public FulltextMatch setProperties $F539861 ( properties ) { \n\tif $F98509 ( properties ) $F122746 ( clearProperties , this ) synchronized ( properties ) { \n\t\tfor ( String binding : properties ) { \n\t\t\t$F24434 ( binding ) } \n\t\tclearProperties ( ) ; \n\t\t$F101372 ( property , properties , addProperty ) } \n\treturn this ; \n\t} \n"}, {"code": "public FulltextMatch addProperty $F62952 ( property ) { \n\t$F24434 ( property ) $F528 ( _properties , property ) return this ; \n\t} \n"}, {"code": "public FulltextMatch setPatterns $F539861 ( patterns ) { \n\tif $F98509 ( patterns ) $F122746 ( clearPatterns , this ) synchronized ( patterns ) { \n\t\tfor ( String pattern : patterns ) { \n\t\t\tif $F90672 ( pattern ) $F24432 } \n\t\tclearPatterns ( ) ; \n\t\t$F101372 ( pattern , patterns , addPattern ) } \n\treturn this ; \n\t} \n"}, {"code": "public FulltextMatch addPattern $F62952 ( pattern ) { \n\tif $F90672 ( pattern ) $F24432 $F528 ( _patterns , pattern ) return this ; \n\t} \n"}, {"code": "public static $F5033 split $F62952 ( str ) { \n\tString s = str ; \n\t$F681873 ( s ) $F95965 ( list ) if $F90672 ( s ) $F356 ( list ) $F30789 ( tokens , s ) $F58133 ( n_tokens , tokens ) for ( $F6610 ( i , n_tokens ) ) { \n\t\tif ( $F54633 ( tokens , i ) > INT00 ) $F40275 ( list , tokens , i ) } \n\treturn list ; \n\t} \n"}, {"code": "public long copyTo ( Appendable appendable ) throws IOException { \n\tcheckNotNull ( appendable ) ; \n\t$F25311 ( closer , Closer ) try { \n\t\tReader reader = closer . register ( openStream ( ) ) ; \n\t\treturn $F47448 ( CharStreams , reader , appendable ) ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "$F57800 public $F1372 T readLines ( LineProcessor $F1372 processor ) throws IOException { \n\tcheckNotNull ( processor ) ; \n\t$F25311 ( closer , Closer ) try { \n\t\tReader reader = closer . register ( openStream ( ) ) ; \n\t\treturn CharStreams . readLines ( reader , processor ) ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public boolean isEmpty $F2 throws IOException { \n\t$F25311 ( closer , Closer ) try { \n\t\tReader reader = closer . register ( openStream ( ) ) ; \n\t\treturn $F24551 ( reader ) == $F3745 ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public void destroySession $F2 { \n\tif $F268 ( entryPoint ) { \n\t\tentryPoint . onSessionDestruction ( this , session ) ; \n\t\t} \n\tif $F268 ( accessManager ) { \n\t\taccessManager . destroyCurrentSession ( ) ; \n\t\t} \n\tsession = null ; \n\t} \n"}, {"code": "public void setAttribute $F28114 ( key , value ) { \n\tif $F112 ( attributes ) { \n\t\tattributes = new HashMap $F1415 ; \n\t\t} \n\t$F2725 ( attributes , key , value ) } \n"}, {"code": "public User login ( Credentials credentials ) throws AuthenticationException { \n\tUser user = getSession ( true ) . login ( credentials ) ; \n\tentryPoint . onSessionUpdate ( this , session ) ; \n\treturn user ; \n\t} \n"}, {"code": "public Session resolveSession $F1195 ( sessionToken , userId ) { \n\t$F1357 ( this , sessionToken ) $F1357 ( this , userId ) if $F268 ( accessManager ) { \n\t\tthis . session = accessManager . getSessionByToken ( sessionToken ) ; \n\t\t} \n\treturn session ; \n\t} \n"}, {"code": "static SecurityBreachHandler createBreachHandler ( Main main , SystemMail systemMail , String toAddress ) throws IllegalAccessException { \n\tif ( ! exists ) { \n\t\tSecurityBreachHandler breachHandler = new SecurityBreachHandler $F2144 ( main , systemMail , toAddress ) ; \n\t\texists = true ; \n\t\treturn breachHandler ; \n\t\t} \n\tthrow new IllegalAccessException $F6 ; \n\t} \n"}, {"code": "void handleBreach ( Exception e , $F33567 classesStack ) { \n\t$F1675738 ( subject , e ) $F5605 ( sendErrorReport , subject , e , classesStack ) } \n"}, {"code": "private static final String createMessage ( Class < ? extends IckleActivity > injectorActivity , $F27144 ( annotation ) , $F502965 expectedType , $F502965 valueType , Field field ) { \n\t$F1200 ( stringBuilder ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , annotation ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , field ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , valueType ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , injectorActivity ) $F1218 ( stringBuilder ) $F298342 ( stringBuilder , expectedType ) $F1218 ( stringBuilder ) $F1226 ( stringBuilder ) } \n"}, {"code": "public static boolean containsLabelForId ( List < HtmlLabel > labels , String id ) { \n\tfor ( HtmlLabel label : labels ) { \n\t\tif ( label . getForAttribute ( ) != null && label . getForAttribute ( ) . equals ( id ) ) $F233 } \n\t$F213 } \n"}, {"code": "public JmxTree filterTree ( JmxTree tree , String filter , boolean includeChildren ) { \n\tString nameFilter = $F148608 ( filter ) ; \n\tSet < DomainNode > domainNodes = new TreeSet < DomainNode > $F2 ; \n\tfor ( JmxTreeNode domain : $F681055 ( tree ) . getChildren ( ) ) { \n\t\tSet < ObjectNode > objectNodes = new TreeSet < ObjectNode > $F2 ; \n\t\tfor ( JmxTreeNode object : $F210462 ( domain ) ) { \n\t\t\tObjectNode objectNode = ( ObjectNode ) object ; \n\t\t\tif ( $F6333 ( objectNode ) . getCanonicalName ( ) . toLowerCase ( ) . contains ( nameFilter ) ) { \n\t\t\t\tif ( includeChildren ) { \n\t\t\t\t\tSet < JmxTreeNode > $F304 ( objectChildren , getMatchingChildren , nameFilter , objectNode ) ; \n\t\t\t\t\tObjectNode newNode = new ObjectNode ( objectNode , replaceMatch ( $F89392 ( objectNode ) , nameFilter ) , objectChildren ) ; \n\t\t\t\t\tnewNode . setExpand ( true ) ; \n\t\t\t\t\t$F528 ( objectNodes , newNode ) } \n\t\t\t\telse { \n\t\t\t\t\tobjectNodes . add ( new ObjectNode ( objectNode , replaceMatch ( $F89392 ( objectNode ) , nameFilter ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F170491 ( includeChildren , addObjectNodeChildMatch , nameFilter , objectNode , objectNodes ) } \n\t\tif $F386 ( objectNodes ) { \n\t\t\tDomainNode domainNode = new DomainNode ( $F89392 ( domain ) , objectNodes ) ; \n\t\t\tdomainNode . setExpand ( true ) ; \n\t\t\t$F528 ( domainNodes , domainNode ) } \n\t\t} \n\tRootNode root = new RootNode ( LABEL_DOMAINS , domainNodes ) ; \n\tJmxTree jmxTree = new JmxTree ( root ) ; \n\treturn jmxTree ; \n\t} \n"}, {"code": "private Set < JmxTreeNode > getMatchingChildren ( String nameFilter , ObjectNode objectNode ) { \n\tAttributesNode attributesNode = null ; \n\tOperationsNode operationsNode = null ; \n\tNotificationsNode notificationsNode = null ; \n\tSet < JmxTreeNode > objectChildren = new TreeSet < JmxTreeNode > $F2 ; \n\tfor ( JmxTreeNode child : $F210462 ( objectNode ) ) { \n\t\tif ( child instanceof AttributesNode ) { \n\t\t\tSet < AttributeNode > attributes = getMatchingAttributes ( ( AttributesNode ) child , nameFilter ) ; \n\t\t\tif $F386 ( attributes ) { \n\t\t\t\tattributesNode = new AttributesNode ( ObjectNode . LABEL_ATTRIBUTES , attributes ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( child instanceof OperationsNode ) { \n\t\t\tSet < OperationNode > operations = getMatchingOperations ( ( OperationsNode ) child , nameFilter ) ; \n\t\t\tif $F386 ( operations ) { \n\t\t\t\toperationsNode = new OperationsNode ( ObjectNode . LABEL_OPERATIONS , operations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if ( child instanceof NotificationsNode ) { \n\t\t\tSet < NotificationNode > notifications = getMatchingNotifications ( ( NotificationsNode ) child , nameFilter ) ; \n\t\t\tif $F386 ( notifications ) { \n\t\t\t\tnotificationsNode = new NotificationsNode ( ObjectNode . LABEL_NOTIFICATIONS , notifications ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F12701 ( attributesNode , objectChildren ) $F12701 ( operationsNode , objectChildren ) $F12701 ( notificationsNode , objectChildren ) return objectChildren ; \n\t} \n"}, {"code": "private static void logHeader ( Status original ) { \n\tlong $F13092 ( id , original ) ; \n\tString user = $F2961 ( original ) . getScreenName ( ) ; \n\tString message = $F69465 ( String , MESSAGE_HEADER , id , user ) ; \n\t$F1299 ( System , message ) } \n"}, {"code": "private static void logOriginal ( Status original ) { \n\t$F463586 ( text , original ) $F367531 ( message , String , MESSAGE_ORIGINAL , text ) $F1299 ( System , message ) } \n"}, {"code": "private static void logResponse ( StatusUpdate response ) { \n\tString $F41793 ( text , response ) ; \n\t$F367531 ( message , String , MESSAGE_RESPONSE , text ) $F1299 ( System , message ) } \n"}, {"code": "public JSONObject invokeJson $F2 throws $F22202330 { \n\tClientAndResponse clientAndResponse = null ; \n\tString content ; \n\ttry { \n\t\t$F10411 ( clientAndResponse , invokeInternal ) Header contentType = clientAndResponse . response . getFirstHeader ( STRING00 ) ; \n\t\tif ( ! $F9139 ( $F269 ( contentType ) ) ) $F22213674 final HttpEntity entity = clientAndResponse . response . getEntity ( ) ; \n\t\t$F391014 ( content , EntityUtils , entity ) $F2201 ( content ) return $F390948 ( content ) ; \n\t\t} \n\tcatch ( IOException e ) $F22213713 ( e ) catch ( JSONException e ) $F22213713 ( e ) finally { \n\t\tif $F268 ( clientAndResponse ) { \n\t\t\tclientAndResponse . client . getConnectionManager ( ) . shutdown ( ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F4357 invokeHeaders $F2 throws $F22202330 { \n\tClientAndResponse clientAndResponse = invokeInternal ( ) ; \n\ttry { \n\t\t$F199346 ( headers ) for ( Header header : clientAndResponse . response . getAllHeaders ( ) ) { \n\t\t\theaders . put ( $F351663 ( header ) , $F269 ( header ) ) ; \n\t\t\t} \n\t\treturn headers ; \n\t\t} \n\tfinally { \n\t\tclientAndResponse . client . getConnectionManager ( ) . shutdown ( ) ; \n\t\t} \n\t} \n"}, {"code": "public void invoke $F2 throws $F22202330 { \n\tfinal ClientAndResponse clientAndResponse = invokeInternal ( ) ; \n\tclientAndResponse . client . getConnectionManager ( ) . shutdown ( ) ; \n\t} \n"}, {"code": "public $F197020 Object getRoot $F2 { \n\tChain current = this ; \n\twhile ( current . hasParent ( ) ) $F44772 ( current ) $F75456 ( current ) } \n"}, {"code": "public static String byteArrayAsString $F80574 ( bytearray ) throws ParseException { \n\ttry { \n\t\treturn new String ( $F162293 ( bytearray ) , STRING00 ) ; \n\t\t} \n\tcatch ( final UnsupportedEncodingException e ) { \n\t\tthrow new ParseException ( $F5962 ( e ) , INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "protected boolean convertToBoolean $F80574 ( fromStack ) throws ParseException { \n\tif $F5645 ( fromStack ) return $F162260 ( fromStack ) != INT00 ; \n\tif $F4380 ( fromStack ) return Boolean . parseBoolean ( ( String ) fromStack ) ; \n\tif $F5650 ( fromStack ) $F259796 ( fromStack ) $F102635 ( errMsg ) $F1218 ( errMsg ) errMsg . append ( $F9272 ( fromStack ) ) ; \n\tthrow new ParseException ( $F797 ( errMsg ) , INT00 ) ; \n\t} \n"}, {"code": "protected double convertToDouble $F80574 ( fromStack ) throws ParseException { \n\tif $F5645 ( fromStack ) return $F13580 ( fromStack ) ; \n\tif $F4380 ( fromStack ) return Double . parseDouble ( ( String ) fromStack ) ; \n\tif ( fromStack instanceof LocalDateTime ) return CalendarFactory . asDateLong ( ( LocalDateTime ) fromStack ) ; \n\t$F102635 ( errMsg ) $F1218 ( errMsg ) errMsg . append ( $F9272 ( fromStack ) ) ; \n\tthrow new ParseException ( $F797 ( errMsg ) , INT00 ) ; \n\t} \n"}, {"code": "protected long convertToLong $F80574 ( fromStack ) throws ParseException { \n\tif $F5645 ( fromStack ) $F386708 ( fromStack ) if $F4380 ( fromStack ) return Long . parseLong ( ( String ) fromStack ) ; \n\tif ( fromStack instanceof LocalDateTime ) return CalendarFactory . asDateLong ( ( LocalDateTime ) fromStack ) ; \n\t$F102635 ( errMsg ) $F1218 ( errMsg ) errMsg . append ( $F9272 ( fromStack ) ) ; \n\tthrow new ParseException ( $F797 ( errMsg ) , INT00 ) ; \n\t} \n"}, {"code": "public $F3244 ensureSameTypes $F63043 ( count ) throws ParseException { \n\t$F2233 ( foundLong ) $F2233 ( foundDouble ) $F48974 ( foundAllSame ) $F105146 ( firstFound ) final Stack $F282 $F223819 ( ops ) ; \n\tfor ( $F6610 ( p , count ) ) { \n\t\tfinal Object currentFound = popWhatever ( ) ; \n\t\tif ( currentFound instanceof TokVariable ) throw new ParseException ( STRING00 + ( ( TokVariable ) currentFound ) . getName ( ) + STRING00 , INT00 ) ; \n\t\t$F22657 ( ops , currentFound ) $F103706 ( firstFound , currentFound ) if ( ! $F272829 ( firstFound , currentFound ) ) foundAllSame = false ; \n\t\tif $F184631 ( currentFound ) foundLong = true ; \n\t\telse if $F199207 ( currentFound ) foundDouble = true ; \n\t\t} \n\tfinal $F3244 $F195833 ( found , ops ) ; \n\tfor ( $F84725 ( x , ops ) ) { \n\t\tfinal Object $F22659 ( oneFound , ops ) ; \n\t\tif ( foundAllSame ) $F62115 ( found , x , oneFound ) else if ( foundDouble ) $F73167 ( found , x , convertToDouble , oneFound ) else if ( foundLong ) $F73167 ( found , x , convertToLong , oneFound ) else throw new ParseException ( $F156027 ( oneFound ) , INT00 ) ; \n\t\t} \n\treturn found ; \n\t} \n"}, {"code": "public $F1975 popByteArray $F2 throws ParseException { \n\tfinal Object $F22659 ( popped , super ) ; \n\tif $F184886 ( popped ) return $F162293 ( popped ) ; \n\tthrow new ParseException ( $F156027 ( popped ) , INT00 ) ; \n\t} \n"}, {"code": "public String popString $F2 throws ParseException { \n\tfinal Object $F22659 ( popped , super ) ; \n\tif $F4380 ( popped ) $F389672 ( popped ) if ( popped instanceof TokVariable ) return ( ( TokVariable ) popped ) . getName ( ) ; \n\tthrow new ParseException ( $F156027 ( popped ) , INT00 ) ; \n\t} \n"}, {"code": "public Object popStringOrByteArray $F2 throws ParseException { \n\tfinal Object $F22659 ( popped , super ) ; \n\tif $F4380 ( popped ) return popped ; \n\tif ( popped instanceof TokVariable ) return ( ( TokVariable ) popped ) . getName ( ) ; \n\tif $F184886 ( popped ) return popped ; \n\tthrow new ParseException ( $F156027 ( popped ) , INT00 ) ; \n\t} \n"}, {"code": "$F1 public Object push $F80574 ( item ) { \n\tif $F184628 ( item ) return super . push ( new Long $F200999 ( item ) ) ; \n\tif $F199202 ( item ) return super . push ( new Double $F162270 ( item ) ) ; \n\treturn $F22656 ( super , item ) ; \n\t} \n"}, {"code": "public void create ( String string , Value value ) throws DataFormatException { \n\t$F101516 ( strings , splitter , string ) if $F250577 ( labels , strings ) { \n\t\tif ( formatIgnored ) { \n\t\t\tthrow new DataFormatException ( $F3902 + labels . length + STRING00 + strings . length ) ; \n\t\t\t} \n\t\t} \n\t$F564 ( valueCreate , strings , value ) } \n"}, {"code": "public static String repositoryUrl ( Request request ) { \n\tString requestURL = $F9333 ( request ) ; \n\t$F12039 ( delimiterSegmentIdx , requestURL ) for ( String methodName : ALL_METHODS ) { \n\t\tif $F107298 ( requestURL , methodName ) { \n\t\t\t$F1085748 ( delimiterSegmentIdx , requestURL , methodName ) $F332 } \n\t\t} \n\t$F6111 ( requestURL , delimiterSegmentIdx ) } \n"}, {"code": "public static String urlFrom ( Request request , String ... pathSegments ) { \n\treturn urlFrom ( $F9333 ( request ) , pathSegments ) ; \n\t} \n"}, {"code": "$F15734 public static String jsonEncodedStringFor ( Value value ) { \n\ttry { \n\t\tif ( $F511 ( value ) != PropertyType . BINARY ) { \n\t\t\treturn $F399680 ( value ) ; \n\t\t\t} \n\t\tInputStream stream = value . getBinary ( ) . getStream ( ) ; \n\t\ttry { \n\t\t\treturn $F12341 ( Base64 , stream ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tif $F268 ( stream ) { \n\t\t\t\ttry $F2453 ( stream ) $F451231 ( LOGGER , e ) } \n\t\t\t} \n\t\t} \n\tcatch ( RepositoryException e ) { \n\t\t$F428173 ( LOGGER , e ) $F724 } \n\t} \n"}, {"code": "public void notifyStart $F16060 ( projectName , projectVersion , category ) { \n\ttry { \n\t\tif $F560 ( isStarted ) { \n\t\t\tJSONObject startNotification = $F947902 ( STRING00 , $F947902 ( STRING00 , projectName ) . put ( STRING00 , projectVersion ) ) . put ( STRING00 , category ) ; \n\t\t\tsocket . emit ( STRING00 , startNotification ) ; \n\t\t\t} \n\t\telse $F16517 ( LOGGER ) } \n\tcatch ( Exception e ) { \n\t\tLOGGER . info ( $F4298 ( e ) ) ; \n\t\t$F3511 ( LOGGER , e ) } \n\t} \n"}, {"code": "public void notifyEnd ( String projectName , String projectVersion , String category , long duration ) { \n\ttry { \n\t\tif $F560 ( isStarted ) { \n\t\t\tJSONObject endNotification = $F947902 ( STRING00 , $F947902 ( STRING00 , projectName ) . put ( STRING00 , projectVersion ) ) . put ( STRING00 , category ) . put ( STRING00 , duration ) ; \n\t\t\tsocket . emit ( STRING00 , endNotification ) ; \n\t\t\t} \n\t\telse $F16517 ( LOGGER ) } \n\tcatch ( Exception e ) { \n\t\tLOGGER . info ( $F4298 ( e ) ) ; \n\t\t$F3511 ( LOGGER , e ) } \n\t} \n"}, {"code": "public void send ( RoxPayload payload ) { \n\ttry { \n\t\tif $F560 ( isStarted ) { \n\t\t\t$F21492 ( baos ) new JsonSerializer $F2 . serializePayload ( $F2023857 ( baos ) , payload , false ) ; \n\t\t\tsocket . emit ( STRING00 , $F143664 ( baos ) ) ; \n\t\t\t} \n\t\telse $F16517 ( LOGGER ) } \n\tcatch ( Exception e ) { \n\t\t$F220715 ( LOGGER , e ) $F3511 ( LOGGER , e ) } \n\t} \n"}, {"code": "public $F21 getFilters $F2 { \n\ttry { \n\t\tif $F560 ( isStarted ) { \n\t\t\tfinal MiniRoxFilterAcknowledger acknowledger = new MiniRoxFilterAcknowledger $F2 ; \n\t\t\tnew Thread ( new Runnable $F2 { \n\t\t\t\t$F1 public void run $F2 { \n\t\t\t\t\ttry { \n\t\t\t\t\t\t$F42520 ( LOGGER ) socket . emit ( STRING00 , acknowledger ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\t\t$F220715 ( LOGGER , e ) synchronized ( acknowledger ) { \n\t\t\t\t\t\t\t$F239242 ( acknowledger ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t) . start ( ) ; \n\t\t\tsynchronized ( acknowledger ) $F212965 ( acknowledger ) if ( ! acknowledger . isFilters ( ) ) { \n\t\t\t\tfor ( String filter : $F1116135 ( acknowledger ) ) $F187720 ( LOGGER , filter ) } \n\t\t\treturn $F1116135 ( acknowledger ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F220715 ( LOGGER , e ) $F3511 ( LOGGER , e ) } \n\t$F724 } \n"}, {"code": "private Socket createConnectedSocket $F62952 ( miniRoxUrl ) { \n\ttry { \n\t\tfinal Socket initSocket = IO . socket ( miniRoxUrl ) ; \n\t\tfinal MiniRoxCallback callback = new MiniRoxCallback $F2 ; \n\t\tinitSocket . on ( Socket . EVENT_CONNECT , callback ) ; \n\t\tinitSocket . on ( Socket . EVENT_CONNECT_ERROR , callback ) ; \n\t\tinitSocket . on ( Socket . EVENT_CONNECT_TIMEOUT , callback ) ; \n\t\tinitSocket . on ( Socket . EVENT_CONNECT_ERROR , callback ) ; \n\t\tinitSocket . on ( Socket . EVENT_DISCONNECT , callback ) ; \n\t\tinitSocket . on ( Socket . EVENT_ERROR , callback ) ; \n\t\t$F42520 ( LOGGER ) new Thread ( new Runnable $F2 { \n\t\t\t$F1 public void run $F2 { \n\t\t\t\t$F134144 ( initSocket ) } \n\t\t\t} \n\t\t) . start ( ) ; \n\t\tsynchronized ( callback ) $F212965 ( callback ) if ( ! initSocket . connected ( ) ) $F634518 ( LOGGER ) return initSocket ; \n\t\t} \n\tcatch ( URISyntaxException | InterruptedException e ) $F26017 ( LOGGER , e ) $F724 } \n"}, {"code": "public TextMatchBinding setText $F539861 ( text ) { \n\tif $F98509 ( text ) $F122746 ( clearText , this ) synchronized ( text ) { \n\t\tfor ( String pattern : text ) { \n\t\t\tif $F90672 ( pattern ) $F24432 } \n\t\tclearText ( ) ; \n\t\t$F101372 ( pattern , text , addText ) } \n\treturn this ; \n\t} \n"}, {"code": "public TextMatchBinding addText $F62952 ( text ) { \n\tif $F90672 ( text ) $F24432 $F528 ( _text , text ) return this ; \n\t} \n"}, {"code": "public static $F5033 split $F62952 ( str ) { \n\tString s = str ; \n\t$F681873 ( s ) $F95965 ( list ) if $F90672 ( s ) $F356 ( list ) $F30789 ( tokens , s ) for ( String t : tokens ) { \n\t\tif $F1216 ( t ) $F529 ( list , t ) } \n\treturn list ; \n\t} \n"}, {"code": "public static $F96 get ( CollectionId c , $F2731 ( search ) ) throws NotFoundException , MoreThanOneFoundException { \n\t$F564 ( ensureOnlyOne , c , search ) DBCollection coll = MongoDBConnectionHelper . getConnection ( $F440748 ( c ) ) . getCollection ( $F717364 ( c ) ) ; \n\t$F96 m = MongoDBFormat . toMap ( coll . findOne ( MongoDBFormat . fromMap ( search ) ) ) ; \n\tif $F3507 ( LOG ) $F246169 ( LOG , c , search , m ) return m ; \n\t} \n"}, {"code": "protected Violation createViolation ( HtmlElement htmlElement , Page page , String message ) { \n\tif $F112 ( htmlElement ) htmlElement = page . findHtmlTag ( ) ; \n\treturn new Violation $F2144 ( this , htmlElement , message ) ; \n\t} \n"}, {"code": "private synchronized long getTimeSynchronized $F2 throws OverClockedException { \n\tif ( currentTimeMillis != $F13205 ( System ) ) { \n\t\t$F58904 ( currentTimeMillis , System ) generatedThisMilli = INT00 ; \n\t\t} \n\tlong currentTime = $F579515 ( currentTimeMillis , GREGORIAN_CHANGE_OFFSET , INTERVALS_PER_MILLI ) ; \n\tif ( generatedThisMilli + INT00 >= INTERVALS_PER_MILLI ) { \n\t\tthrow new OverClockedException $F2 ; \n\t\t} \n\treturn ( currentTime + generatedThisMilli ++ ) ; \n\t} \n"}, {"code": "$F1 public void onSuccess ( InvocationContext context , HttpResponse response ) { \n\t$F105146 ( reponseEntity ) try { \n\t\treponseEntity = Processors . RESPONSE . run ( context , response ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tonError ( context , $F131357 ( InvocationException , context , response , e ) ) ; \n\t\t$F254 } \n\tAsyncHandler $F282 asyncHandler = getAsyncHandler ( context ) ; \n\tif $F268 ( asyncHandler ) { \n\t\ttry $F3635486 ( asyncHandler , response , reponseEntity ) $F5574 ( LOGGER , e ) } \n\t} \n"}, {"code": "$F1 public void onError ( InvocationContext context , Exception error ) { \n\tAsyncHandler $F282 asyncHandler = getAsyncHandler ( context ) ; \n\tif $F268 ( asyncHandler ) { \n\t\ttry { \n\t\t\tasyncHandler . onError ( error instanceof InvocationException ? ( InvocationException ) error : $F64293 ( InvocationException , context , error ) ) ; \n\t\t\t} \n\t\t$F5574 ( LOGGER , e ) } \n\t} \n"}, {"code": "String createUpdatePreparedSQLStatement ( D6Inex includeExcludeColumnNames ) { \n\tfinal $F1043 columnNameSet = getAllColumnNames ( ) ; \n\tfinal StringGrabber sgSQL = new StringGrabber $F2 ; \n\tfinal DBTable table = mModelClazz . getAnnotation ( DBTable . class ) ; \n\t$F128456 ( tableName , table ) $F90492 ( sgSQL , tableName ) if $F268 ( includeExcludeColumnNames ) { \n\t\tincludeExcludeColumnNames . manipulate ( columnNameSet ) ; \n\t\t} \n\tfor ( String columnName : columnNameSet ) $F101691 ( sgSQL , columnName ) if $F1216 ( sgSQL ) { \n\t\tsgSQL . removeTail ( INT00 ) ; \n\t\t} \n\t$F1218 ( sgSQL ) $F13390 ( sgSQL , getWhereClause ) $F127965 ( sql , sgSQL ) $F10467 ( log , sql ) return sql ; \n\t} \n"}, {"code": "String getWhereClause $F2 { \n\tfinal StringGrabber sgWhere = new StringGrabber $F2 ; \n\t$F351058 primaryKeyFieldList = getPrimaryKeyFieldList ( ) ; \n\tif $F4340 ( primaryKeyFieldList ) { \n\t\t$F1218 ( sgWhere ) for ( Field field : primaryKeyFieldList ) { \n\t\t\tDBColumn dbColumn = field . getAnnotation ( DBColumn . class ) ; \n\t\t\tsgWhere . append ( dbColumn . columnName ( ) ) ; \n\t\t\t$F1218 ( sgWhere ) } \n\t\tsgWhere . removeTail ( INT00 ) ; \n\t\t} \n\t$F1226 ( sgWhere ) } \n"}, {"code": "final void map ( D6Model mModelObj , PreparedStatement preparedStatement , D6Inex includeExcludeColumnNames ) throws D6Exception { \n\t$F10467 ( log , mModelObj ) final $F1043 columnNameSet = getAllColumnNames ( ) ; \n\t$F1987 ( parameterIndex ) final $F5033 $F97850 ( columnNameList , columnNameSet ) ; \n\tfinal $F351058 primaryKeyFieldList = getPrimaryKeyFieldList ( ) ; \n\tfor ( Field field : primaryKeyFieldList ) { \n\t\tDBColumn dbColumn = field . getAnnotation ( DBColumn . class ) ; \n\t\t$F48365 ( columnName , dbColumn ) $F528 ( columnNameList , columnName ) } \n\tif $F268 ( includeExcludeColumnNames ) { \n\t\tincludeExcludeColumnNames . manipulate ( columnNameList ) ; \n\t\t} \n\tfor ( String columnName : columnNameList ) { \n\t\tfinal D6ModelClassFieldInfo fieldInfo = getFieldInfo ( columnName ) ; \n\t\tfinal boolean isNullable = fieldInfo . isNullable ; \n\t\tfinal Field field = fieldInfo . field ; \n\t\t$F213834 ( fieldName , field ) final $F2612 $F2251 ( type , field ) ; \n\t\t$F105146 ( fieldValue ) try $F13003 ( fieldValue , field , mModelObj ) catch ( IllegalArgumentException e ) { \n\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t} \n\t\tcatch ( IllegalAccessException e ) { \n\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t} \n\t\tif ( fieldValue == null && isNullable == false ) { \n\t\t\tthrow new D6Exception ( $F282202 ( fieldName , columnName ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tlog ( $F234052 ( parameterIndex , columnName , fieldValue , type ) ) ; \n\t\t\t$F12601 ( setValue , parameterIndex , preparedStatement , type , fieldValue ) } \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new D6Exception ( e ) ; \n\t\t\t} \n\t\tparameterIndex ++ ; \n\t\t} \n\t} \n"}, {"code": "public static CharMatcher is $F430541 ( match ) { \n\treturn new FastMatcher $F2 { \n\t\t$F1 public boolean matches ( char c ) { \n\t\t\treturn c == match ; \n\t\t\t} \n\t\t$F1 public String replaceFrom ( CharSequence sequence , char replacement ) { \n\t\t\treturn $F34043 ( sequence ) ( match , replacement ) ; \n\t\t\t} \n\t\t$F1 public CharMatcher and ( CharMatcher other ) { \n\t\t\treturn $F19771 ( other , match ) ? this : NONE ; \n\t\t\t} \n\t\t$F1 public CharMatcher or ( CharMatcher other ) { \n\t\t\treturn $F19771 ( other , match ) ? other : $F159574 ( super , other ) ; \n\t\t\t} \n\t\t$F1 public CharMatcher negate $F2 $F3342 ( isNot , match ) $F1 public String toString $F2 { \n\t\t\treturn $F47909 ( showCharacter , match ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static CharMatcher isNot $F430541 ( match ) { \n\treturn new FastMatcher $F2 { \n\t\t$F1 public boolean matches ( char c ) { \n\t\t\treturn c != match ; \n\t\t\t} \n\t\t$F1 public CharMatcher and ( CharMatcher other ) { \n\t\t\treturn $F19771 ( other , match ) ? $F17915 ( super , other ) : other ; \n\t\t\t} \n\t\t$F1 public CharMatcher or ( CharMatcher other ) { \n\t\t\treturn $F19771 ( other , match ) ? ANY : this ; \n\t\t\t} \n\t\t$F1 public CharMatcher negate $F2 $F3342 ( is , match ) $F1 public String toString $F2 { \n\t\t\treturn $F47909 ( showCharacter , match ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static CharMatcher inRange ( final char startInclusive , final char endInclusive ) { \n\tcheckArgument ( endInclusive >= startInclusive ) ; \n\treturn new FastMatcher $F2 { \n\t\t$F1 public boolean matches ( char c ) { \n\t\t\treturn $F70909 ( startInclusive , c , endInclusive ) ; \n\t\t\t} \n\t\t$F1 public String toString $F2 { \n\t\t\treturn $F1615739 ( showCharacter , startInclusive , endInclusive ) + STRING00 ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public void service $F13010 ( request , response ) throws $F20410 { \n\t$F3047470 ( out , response ) $F40876 ( response ) $F10279 ( out ) $F10279 ( out ) $F10279 ( out ) out . println ( STRING00 + $F629644 ( request ) + STRING00 + $F263637 ( request ) + $F47985 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F5162 ( request ) + STRING00 ) ; \n\t$F10279 ( out ) Enumeration e = getServletConfig ( ) . getInitParameterNames ( ) ; \n\twhile $F5506 ( e ) { \n\t\t$F1716971 ( o , e ) out . println ( $F6258 ( String , o ) + STRING00 + getServletConfig ( ) . getInitParameter ( ( String ) o ) + STRING00 ) ; \n\t\t} \n\t$F10279 ( out ) $F10279 ( out ) out . println ( STRING00 + $F5162 ( request ) + STRING00 ) ; \n\tout . println ( $F617994 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F465605 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F204028 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F194541 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F11800 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F35416 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F194532 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F629644 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F263637 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F47985 ( request ) + STRING00 ) ; \n\tout . println ( STRING00 + $F47937 ( request ) + STRING00 ) ; \n\t$F10279 ( out ) $F564 ( printParameters , request , out ) $F10279 ( out ) $F380549 ( e , request ) ; \n\twhile $F5506 ( e ) { \n\t\t$F356796 ( key , e ) $F602597 ( value , request , key ) $F12328 ( out , key ) out . print ( value + STRING00 ) ; \n\t\t} \n\t$F10279 ( out ) $F10279 ( out ) e = getServletContext ( ) . getAttributeNames ( ) ; \n\twhile $F5506 ( e ) { \n\t\t$F1716971 ( o , e ) out . println ( $F6258 ( String , o ) + STRING00 + $F463014 ( getServletContext ) ( ( String ) o ) + STRING00 ) ; \n\t\t} \n\t$F10279 ( out ) $F10279 ( out ) e = getServletContext ( ) . getInitParameterNames ( ) ; \n\twhile $F5506 ( e ) { \n\t\t$F1716971 ( o , e ) out . println ( $F6258 ( String , o ) + STRING00 + getServletContext ( ) . getInitParameter ( ( String ) o ) + STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "protected final String escapeSlow $F11348 ( s , index ) { \n\t$F12039 ( slen , s ) $F2666 dest = Platform . charBufferFromThreadLocal ( ) ; \n\t$F58133 ( destSize , dest ) $F1987 ( destIndex ) $F1987 ( lastEscape ) for ( $F64089 ( index , slen ) ) { \n\t\t$F2666 r = $F67116 ( escape , s , index ) ; \n\t\t$F92262 ( r ) $F58133 ( rlen , r ) $F62358 ( charsSkipped , index , lastEscape ) int sizeNeeded = destIndex + charsSkipped + rlen ; \n\t\tif ( destSize < sizeNeeded ) { \n\t\t\tdestSize = sizeNeeded + $F68597 ( DEST_PAD_MULTIPLIER , slen , index ) ; \n\t\t\t$F62821 ( dest , growBuffer , destIndex , destSize ) } \n\t\tif $F3730 ( charsSkipped ) { \n\t\t\ts . getChars ( lastEscape , index , dest , destIndex ) ; \n\t\t\tdestIndex += charsSkipped ; \n\t\t\t} \n\t\tif $F3730 ( rlen ) { \n\t\t\t$F69162 ( System , r , dest , destIndex , rlen ) destIndex += rlen ; \n\t\t\t} \n\t\t$F77515 ( lastEscape , index ) } \n\t$F62358 ( charsLeft , slen , lastEscape ) if $F3730 ( charsLeft ) { \n\t\t$F59140 ( sizeNeeded , destIndex , charsLeft ) if ( destSize < sizeNeeded ) $F165475 ( dest , growBuffer , destIndex , sizeNeeded ) s . getChars ( lastEscape , slen , dest , destIndex ) ; \n\t\tdestIndex = sizeNeeded ; \n\t\t} \n\t$F96120 ( dest , destIndex ) } \n"}, {"code": "boolean matches ( StartElement element ) { \n\tfor ( ElementConstraint constraint : getConstraints ( ) ) { \n\t\tif $F468579 ( constraint , element ) $F213 } \n\t$F232 } \n"}, {"code": "public void attach ( ElementHandler $F1372 handler ) { \n\tNodeState $F1372 state = buildState ( ) ; \n\tcontext . addElementHandler ( state , handler ) ; \n\t} \n"}, {"code": "public void addTransition ( String localName , ElementSelector $F1372 target ) { \n\taddTransition ( new QName ( localName ) , target ) ; \n\t} \n"}, {"code": "public void addTransition ( QName name , ElementSelector $F1372 target ) { \n\tbuildState ( ) . addTransition ( new ElementEqualsConstraint ( name ) , target . buildState ( ) ) ; \n\t} \n"}, {"code": "public void addTransition ( ElementConstraint constraint , ElementSelector $F1372 target ) { \n\tbuildState ( ) . addTransition ( constraint , target . buildState ( ) ) ; \n\t} \n"}, {"code": "static List < ElementConstraint > gatherConstraints ( ElementConstraint head , ElementConstraint [ ] rest ) { \n\tList < ElementConstraint > constraints = new ArrayList < ElementConstraint > ( $F73544 ( rest ) ) ; \n\t$F528 ( constraints , head ) $F25262 ( constraints , Arrays , rest ) return constraints ; \n\t} \n"}, {"code": "$F1 public void checkPermission ( Permission permission , AddOnModel addon ) throws IzouPermissionException { \n\tfor ( String socket : allowedSocketConnections ) { \n\t\tif ( $F598975 ( permission ) ( socket ) ) $F255 } \n\t$F88449 ( isRegistered , addon ) Function < PluginDescriptor , Boolean > checkPermission = descriptor - > <missing ';'> { \n\t\tif ( descriptor . getAddOnProperties ( ) == null ) throw new IzouPermissionException $F2821 ( addon ) ; \n\t\ttry { \n\t\t\treturn descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) != null && descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . equals ( STRING00 ) && descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) != null && ! descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . equals ( STRING00 ) && ! descriptor . getAddOnProperties ( ) . getProperty ( STRING00 ) . trim ( ) . isEmpty ( ) ; \n\t\t\t} \n\t\tcatch ( NullPointerException e ) $F1668 } \n\t; \n\tString exceptionMessage = $F56891 ( addon ) ; \n\t$F518007 ( registerOrThrow , addon ) - > new IzouSocketPermissionException ( exceptionMessage ) , checkPermission ) ; \n\t} \n"}, {"code": "public static $F72962 Iterable $F34214 map ( Iterable $F72963 it , Processor $F72962 processor ) { \n\treturn new ProcessingIterable $F72962 ( $F58450 ( it , processor ) ) ; \n\t} \n"}, {"code": "$F12506 public static < I , S , O > Processor $F72962 compose ( final Processor < I , S > first , final Processor < S , O > last , final Processor < O , O > ... extraSteps ) { \n\treturn new Processor $F72962 $F2 { \n\t\t$F1 public O process ( I input ) { \n\t\t\tO result = last . process ( $F116006 ( first , input ) ) ; \n\t\t\tfor ( Processor < O , O > processor : extraSteps ) { \n\t\t\t\tresult = $F116006 ( processor , result ) ; \n\t\t\t\t} \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static $F72962 ConcurrentProcessingIterable $F72962 processConcurrently ( Iterable $F72963 input , Processor $F72962 processor , int blockSize , int threadPoolSize , int queueCapacity ) { \n\treturn new ConcurrentProcessingIterable $F72962 $F11487 ( input , processor , blockSize , threadPoolSize , queueCapacity ) ; \n\t} \n"}, {"code": "public static $F1372 $F58399 compose ( final Iterable < $F58399 > iterables ) { \n\treturn toIterable ( new $F58580 $F2 { \n\t\tIterator < $F58399 > $F60361 ( it , iterables ) ; \n\t\t$F58580 current = null ; \n\t\t$F67491 ( next ) $F1 public boolean hasNext $F2 { \n\t\t\tif $F268 ( next ) $F233 else { \n\t\t\t\tif ( ( current == null || $F58858 ( current ) ) && $F11309 ( it ) ) { \n\t\t\t\t\twhile ( $F11309 ( it ) && ( current == null || $F58858 ( current ) ) ) { \n\t\t\t\t\t\t$F58399 $F11312 ( nextIt , it ) ; \n\t\t\t\t\t\tif $F268 ( nextIt ) { \n\t\t\t\t\t\t\t$F96963 ( current , nextIt ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif $F96934 ( current ) { \n\t\t\t\t\t$F58904 ( next , current ) $F232 } \n\t\t\t\t} \n\t\t\t$F213 } \n\t\t$F1 public T next $F2 { \n\t\t\tif $F560 ( hasNext ) { \n\t\t\t\tT result = next ; \n\t\t\t\tnext = null ; \n\t\t\t\treturn result ; \n\t\t\t\t} \n\t\t\telse $F58101 } \n\t\t$F99914 } \n\t) ; \n\t} \n"}, {"code": "public static $F72962 Iterable $F34214 castingIterable ( Iterable $F72963 it , Class $F34214 clazz ) { \n\treturn map ( it , new Processor $F72962 $F2 { \n\t\t$F762 $F1 public O process ( I input ) { \n\t\t\treturn ( O ) input ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F1 public LocalDate convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\tif $F112 ( dtf ) if $F872 ( getFormat ) try { \n\t\tdtf = DateTimeFormatter . ofPattern ( getFormat ( ) ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\tthrow new ParseException ( $F5962 ( e ) , INT00 ) ; \n\t\t} \n\ttry { \n\t\tif $F112 ( dtf ) return TemporalHelper . parseWithPredefinedParsers ( valueStr ) . toLocalDate ( ) ; \n\t\treturn $F28105 ( LocalDateTime , valueStr , dtf ) . toLocalDate ( ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\tthrow new ParseException ( $F606779 ( toString , getFormat ) + STRING00 + $F2443 ( e ) , INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public LocalDate [ ] getValueAsLocalDateArray $F2 throws ParseException { \n\tfinal LocalDate [ ] result = new LocalDate $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "@ MemberOrder ( $F19098653 ) public DevUtilsDemoObject create ( $F19113225 final String name ) { \n\tfinal DevUtilsDemoObject obj = container . newTransientInstance ( DevUtilsDemoObject . class ) ; \n\t$F13102 ( obj , name ) container . persistIfNotAlready ( obj ) ; \n\treturn obj ; \n\t} \n"}, {"code": "$F1 public void link ( EventLinker . Configuration config ) { \n\tfinal Object $F201437 ( listenerTemplate , config ) ; \n\t$F68542 methods = config . getListenerTargets ( EventCategory . TOUCH ) ; \n\tfor ( final Method method : methods ) { \n\t\tOnTouchListener onTouchListener = new OnTouchListener $F2 { \n\t\t\t$F1 public boolean onTouch ( View v , MotionEvent event ) { \n\t\t\t\ttry { \n\t\t\t\t\tif $F498138 ( method ) $F10869 ( method ) $F75735 ( params , method ) $F265182 ( args , params ) $F2233 ( argsPopulated ) if $F15457 ( params ) { \n\t\t\t\t\t\targsPopulated = true ; \n\t\t\t\t\t\tfor ( $F2674 ( i , params ) ) { \n\t\t\t\t\t\t\tif ( $F618006 . isAssignableFrom ( params [ i ] ) ) $F62165 ( args , i , v ) else if ( MotionEvent . class . isAssignableFrom ( params [ i ] ) ) $F62165 ( args , i , event ) else $F57412 ( argsPopulated ) } \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( argsPopulated ) $F128915 ( method , listenerTemplate , args ) else $F15537 ( method , listenerTemplate ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t$F213 } \n\t\t\t} \n\t\t; \n\t\ttry { \n\t\t\t$F57272 views = method . getAnnotation ( Touch . class ) . value ( ) ; \n\t\t\tfor ( int id : views ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( ContextUtils . isActivity ( listenerTemplate ) ) { \n\t\t\t\t\t\tContextUtils . asActivity ( listenerTemplate ) . findViewById ( id ) . setOnTouchListener ( onTouchListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isFragment ( listenerTemplate ) ) { \n\t\t\t\t\t\tContextUtils . asFragment ( listenerTemplate ) . getView ( ) . findViewById ( id ) . setOnTouchListener ( onTouchListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isSupportFragment ( listenerTemplate ) ) { \n\t\t\t\t\t\tContextUtils . asSupportFragment ( listenerTemplate ) . getView ( ) . findViewById ( id ) . setOnTouchListener ( onTouchListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) . append ( ContextUtils . isActivity ( listenerTemplate ) ? ContextUtils . asActivity ( listenerTemplate ) . getResources ( ) . getResourceName ( id ) : ContextUtils . asFragment ( listenerTemplate ) . getResources ( ) . getResourceName ( id ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) ; \n\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void readObject $F61852 ( s ) throws $F61842 , ClassNotFoundException { \n\t$F60618 ( s ) $F60627 ( length , s ) this . longs = new AtomicLongArray ( length ) ; \n\tfor ( $F6610 ( i , length ) ) { \n\t\tset ( i , $F61855 ( s ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static int gcd $F12004 ( a , b ) { \n\t$F62615 ( checkNonNegative , a ) $F62615 ( checkNonNegative , b ) if $F2015 ( a ) $F356 ( b ) else $F2016 ( b , a ) int aTwos = Integer . numberOfTrailingZeros ( a ) ; \n\ta >>= aTwos ; \n\tint bTwos = Integer . numberOfTrailingZeros ( b ) ; \n\tb >>= bTwos ; \n\twhile ( a != b ) { \n\t\t$F62358 ( delta , a , b ) int minDeltaOrZero = delta & ( delta > > ( Integer . SIZE - INT00 ) ) ; \n\t\ta = delta - minDeltaOrZero - minDeltaOrZero ; \n\t\tb += minDeltaOrZero ; \n\t\ta >>= Integer . numberOfTrailingZeros ( a ) ; \n\t\t} \n\treturn a < < min ( aTwos , bTwos ) ; \n\t} \n"}, {"code": "$F5446012 public static int binomial $F12004 ( n , k ) { \n\t$F62615 ( checkNonNegative , n ) $F62615 ( checkNonNegative , k ) checkArgument ( k <= n , STRING00 , k , n ) ; \n\tif ( k > $F13996 ( n ) ) { \n\t\tk = n - k ; \n\t\t} \n\tif ( k >= biggestBinomials . length || n > biggestBinomials [ k ] ) $F62804 ( Integer ) switch ( k ) { \n\t\t$F60794 $F8383 $F60795 ( n ) $F2377 $F57820 ( result ) for ( $F6610 ( i , k ) ) { \n\t\t\tresult *= n - i ; \n\t\t\tresult /= i + INT00 ; \n\t\t\t} \n\t\t$F50993 ( result ) } \n\t} \n"}, {"code": "public static $F28644 $F53004 newHashMap $F30965 ( args ) { \n\t$F53004 m = new $F77681 $F2 ; \n\tfor ( $F119864 ( i , args ) ) { \n\t\tm . put ( ( K ) args [ i ] , $F143059 ( i , args ) ? null : ( V ) $F64146 ( args , i ) ) ; \n\t\t} \n\treturn m ; \n\t} \n"}, {"code": "public static $F1372 T copy ( T orig ) { \n\t$F90659 ( orig ) try { \n\t\t$F21492 ( bos ) $F40822 ( oos , bos ) $F40824 ( oos , orig ) $F6369 ( oos ) ByteArrayInputStream $F256795 ( bin , bos ) ; \n\t\t$F98139 ( ois , bin ) return ( T ) $F32241 ( ois ) ; \n\t\t} \n\tcatch ( Exception e ) $F6096546 ( S1SystemError , e ) } \n"}, {"code": "public static boolean isNullOrEmpty ( Object obj ) { \n\t$F597805 ( obj ) if $F4380 ( obj ) { \n\t\treturn ( $F57885 ( obj ) . isEmpty ( ) ) ; \n\t\t} \n\tif $F5619 ( obj ) { \n\t\treturn $F386356 ( obj ) . isEmpty ( ) ; \n\t\t} \n\tif $F44389 ( obj ) { \n\t\treturn $F430703 ( obj ) . isEmpty ( ) ; \n\t\t} \n\tif $F43287 ( obj ) { \n\t\treturn ( ( Set ) obj ) . isEmpty ( ) ; \n\t\t} \n\t$F213 } \n"}, {"code": "public static $F1372 T cast $F2317 ( obj , type ) { \n\treturn ( T ) $F39124 ( cast , obj , resolveType , type ) ; \n\t} \n"}, {"code": "public static void assertNotEmpty $F844 ( message , o ) throws BadDataException { \n\tassertTrue ( message , $F83691 ( Objects , o ) ) ; \n\t} \n"}, {"code": "public static $F1372 void mergeFrom ( $F1975 data , int offset , int length , T message , $F931805 schema , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_JSON_FACTORY . _getBufferRecycler ( ) , data , false ) ; \n\tfinal JsonParser parser = newJsonParser ( null , data , offset , offset + length , false , context ) ; \n\ttry $F12602 ( mergeFrom , parser , message , schema , numeric ) $F2454 ( parser ) } \n"}, {"code": "public static $F1372 void writeListTo ( OutputStream out , $F40294 ( messages ) , $F931805 schema , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_JSON_FACTORY . _getBufferRecycler ( ) , out , false ) ; \n\tfinal JsonGenerator generator = newJsonGenerator ( out , context . allocWriteEncodingBuffer ( ) , INT00 , true , context ) ; \n\ttry $F12602 ( writeListTo , generator , messages , schema , numeric ) $F2454 ( generator ) } \n"}, {"code": "RuleReturnScope invoke ( Parser parser ) throws Exception { \n\t$F90518 ( parser ) return ( RuleReturnScope ) $F61682 ( method , parser , arguments ) ; \n\t} \n"}, {"code": "RuleReturnScope invoke ( TreeParser treeParser ) throws Exception { \n\t$F90518 ( treeParser ) return ( RuleReturnScope ) $F61682 ( method , treeParser , arguments ) ; \n\t} \n"}, {"code": "public boolean wrap ( T t ) { \n\t$F762 W wrap = ( W ) this . wrapFactory . wrap ( t ) ; \n\t$F867 ( add , wrap ) } \n"}, {"code": "public ArchiveService createArchiveService $F62952 ( endpointUrl ) { \n\treturn new RestAdapter . Builder $F2 . setEndpoint ( endpointUrl ) . setErrorHandler ( errorHandler ) . setConverter ( new JacksonArchivedSequenceConverter ( jsonFactory ) ) . build ( ) . create ( ArchiveService . class ) ; \n\t} \n"}, {"code": "public LookupService createLookupService $F62952 ( endpointUrl ) { \n\treturn new RestAdapter . Builder $F2 . setEndpoint ( endpointUrl ) . setErrorHandler ( errorHandler ) . setConverter ( new JacksonLookupConverter ( jsonFactory ) ) . build ( ) . create ( LookupService . class ) ; \n\t} \n"}, {"code": "public OverlapService createOverlapService $F62952 ( endpointUrl ) { \n\treturn new RestAdapter . Builder $F2 . setEndpoint ( endpointUrl ) . setErrorHandler ( errorHandler ) . setConverter ( new JacksonOverlapConverter ( jsonFactory ) ) . build ( ) . create ( OverlapService . class ) ; \n\t} \n"}, {"code": "public VariationService createVariationService $F62952 ( endpointUrl ) { \n\treturn new RestAdapter . Builder $F2 . setEndpoint ( endpointUrl ) . setErrorHandler ( errorHandler ) . setConverter ( new JacksonVariationConverter ( jsonFactory ) ) . build ( ) . create ( VariationService . class ) ; \n\t} \n"}, {"code": "public SequenceService createSequenceService $F62952 ( endpointUrl ) { \n\treturn new RestAdapter . Builder $F2 . setEndpoint ( endpointUrl ) . setErrorHandler ( errorHandler ) . setConverter ( new JacksonSequenceConverter ( jsonFactory ) ) . build ( ) . create ( SequenceService . class ) ; \n\t} \n"}, {"code": "private static void transpose ( $F1975 data , $F1975 t , int n ) { \n\t$F18718 ( x ) $F93551 ( System , data , x ) while $F132200 ( n ) { \n\t\tdata [ n ] = x [ $F409003 ( t , n ) ] ; \n\t\t} \n\t} \n"}, {"code": "public static String crypt $F1195 ( strpw , strsalt ) { \n\t$F70749 ( pw , strpw ) $F70749 ( salt , strsalt ) $F18718 ( pwb ) $F85664 ( result ) $F62488 ( new_etr , etr ) $F1987 ( n ) $F1987 ( m ) while ( m < pw . length && n < INT00 ) { \n\t\tfor ( int j = INT00 ; \n\t\tj >= INT00 ; \n\t\tj -- ) { \n\t\t\tpwb [ n ++ ] = ( byte ) ( ( pw [ m ] > > j ) & INT00 ) ; \n\t\t\t} \n\t\tm ++ ; \n\t\t$F443601 ( pwb , n ) } \n\twhile $F2523 ( n ) { \n\t\t$F443601 ( pwb , n ) } \n\tdefinekey ( pwb ) ; \n\tfor ( $F3129759 ( n ) ) $F104553 ( pwb , n ) $F93551 ( System , etr , new_etr ) EP = new_etr ; \n\tfor ( $F62468 ( i ) ) { \n\t\t$F90066 ( c , salt , i ) $F62115 ( result , i , c ) if ( c > STRING00 ) { \n\t\t\tc -= $F121260 + STRING00 ; \n\t\t\t} \n\t\telse if ( c > STRING00 ) { \n\t\t\tc -= INT00 + STRING00 ; \n\t\t\t} \n\t\telse { \n\t\t\tc -= STRING00 ; \n\t\t\t} \n\t\tfor ( $F62468 ( j ) ) { \n\t\t\tif ( ( $F133632 ( c , j ) & INT00 ) == INT00 ) { \n\t\t\t\tbyte t = ( byte ) ( INT00 * i + j ) ; \n\t\t\t\t$F74471 ( temp , new_etr , t ) $F905017 ( new_etr , t ) $F93628 ( new_etr , t , temp ) } \n\t\t\t} \n\t\t} \n\tif $F62414 ( result ) { \n\t\t$F109467 ( result ) } \n\tfor ( $F62468 ( i ) ) $F170329 ( encrypt , pwb ) EP = etr ; \n\tm = INT00 ; \n\tn = INT00 ; \n\twhile $F2523 ( n ) { \n\t\t$F1987 ( c ) for ( int j = INT00 ; \n\t\tj > INT00 ; \n\t\tj -- ) { \n\t\t\tc <<= INT00 ; \n\t\t\tc |= pwb [ n ++ ] ; \n\t\t\t} \n\t\tc += STRING00 ; \n\t\tif ( c > STRING00 ) $F106891 ( c ) if ( c > STRING00 ) $F106891 ( c ) $F96084 ( result , m , c ) } \n\treturn ( $F2691 ( result ) ) ; \n\t} \n"}, {"code": "public void setValue ( int value ) { \n\tif $F91079 ( value , min , max ) { \n\t\tthrow new IllegalArgumentException $F75402 ( value , min , max ) ; \n\t\t} \n\tif $F21722 ( value , min , max ) { \n\t\tif $F112 ( timer ) { \n\t\t\t$F42520 ( logger ) timer = new Timer $F97292 ( this ) ; \n\t\t\t} \n\t\tif ( ! $F289019 ( timer ) ) { \n\t\t\t$F42520 ( logger ) $F4599 ( timer ) } \n\t\t} \n\telse { \n\t\t$F256318 ( logger , value , min , max ) if ( timer != null && $F289019 ( timer ) ) { \n\t\t\t$F42520 ( logger ) $F7294 ( timer ) repaint ( ) ; \n\t\t\t} \n\t\t} \n\t$F1357 ( this , value ) } \n"}, {"code": "public static PrefixedProperties createCascadingPrefixProperties ( final List < PrefixConfig > configs ) { \n\tPrefixedProperties properties = null ; \n\tfor ( final PrefixConfig config : configs ) { \n\t\tif $F112 ( properties ) { \n\t\t\tproperties = new PrefixedProperties ( $F112 ( config ) ? new DynamicPrefixConfig $F2 : config ) ; \n\t\t\t} \n\t\telse { \n\t\t\tproperties = new PrefixedProperties ( properties , $F112 ( config ) ? new DynamicPrefixConfig $F2 : config ) ; \n\t\t\t} \n\t\t} \n\treturn properties ; \n\t} \n"}, {"code": "public static PrefixedProperties createCascadingPrefixProperties $F62952 ( prefixString ) { \n\treturn prefixString . indexOf ( PrefixConfig . PREFIXDELIMITER ) != $F3745 ? createCascadingPrefixProperties ( prefixString . split ( STRING00 + PrefixConfig . PREFIXDELIMITER ) ) : createCascadingPrefixProperties ( $F177536 ( prefixString ) ) ; \n\t} \n"}, {"code": "public static PrefixedProperties createCascadingPrefixProperties $F139806 ( prefixes ) { \n\tPrefixedProperties properties = null ; \n\tfor ( final String aPrefix : prefixes ) { \n\t\tif $F112 ( properties ) { \n\t\t\tproperties = new PrefixedProperties ( aPrefix ) ; \n\t\t\t} \n\t\telse { \n\t\t\tproperties = new PrefixedProperties ( properties , aPrefix ) ; \n\t\t\t} \n\t\t} \n\treturn properties ; \n\t} \n"}, {"code": "$F1 public void clear $F2 { \n\t$F444450 ( lock ) try $F59760 ( properties ) $F444463 ( lock ) } \n"}, {"code": "public void clearDefaultPrefixes $F2 { \n\tfinal Map < Integer , PrefixConfig > prefixConfigs = getPrefixConfigs ( ) ; \n\tfor ( final PrefixConfig config : $F387 ( prefixConfigs ) ) { \n\t\tconfig . setDefaultPrefix ( null ) ; \n\t\t} \n\t} \n"}, {"code": "public void clearLocalPrefixes $F2 { \n\tfinal Map < Integer , PrefixConfig > prefixConfigs = getPrefixConfigs ( ) ; \n\tfor ( final PrefixConfig config : $F387 ( prefixConfigs ) ) { \n\t\tconfig . setPrefix ( null ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean contains $F80574 ( value ) { \n\t$F444435 ( lock ) try { \n\t\t$F2272 ( value ) for ( $F762 final $F92076 entry : entrySet ( ) ) { \n\t\t\t$F273176 ( otherValue , entry ) if $F71515 ( otherValue , value ) $F233 } \n\t\t$F213 } \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public boolean containsKey $F80574 ( key ) { \n\t$F444435 ( lock ) try { \n\t\tif $F540 ( isKeyValid , key ) { \n\t\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\t\tif ( ! properties . containsKey ( getPrefixedKey ( key , useLocalPrefixes ) ) ) { \n\t\t\t\t$F110872 ( properties , key ) } \n\t\t\telse $F233 } \n\t\t$F213 } \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public boolean containsValue $F80574 ( value ) { \n\t$F444435 ( lock ) try $F3342 ( contains , value ) $F444443 ( lock ) } \n"}, {"code": "$F10880 $F1 public PrefixedPropertiesEnumeration $F282 elements $F2 { \n\t$F444435 ( lock ) try { \n\t\tfinal Collection $F57803 ( values ) ; \n\t\tfinal Iterator $F60361 ( it , values ) ; \n\t\treturn new PrefixedPropertiesEnumerationImpl ( it ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public Set < $F309665 > entrySet $F2 { \n\tfinal Set < $F309665 > entrySet = new HashSet < $F309665 > $F2 ; \n\t$F444435 ( lock ) try { \n\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\tfor ( final $F101811 keyEntry : getKeyMap ( false ) . entrySet ( ) ) { \n\t\t\tfinal Object value = $F7037 ( get , keyEntry , useLocalPrefixes ) ; \n\t\t\tif ( $F4868 == $F712 ( keyEntry ) . getClass ( ) ) { \n\t\t\t\tentrySet . add ( new PPEntry ( $F8970 ( keyEntry , value ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tentrySet . add ( new PPEntry ( $F8970 ( keyEntry , value ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn entrySet ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public Object get $F80574 ( key ) { \n\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t$F4282 ( get , key , useLocalPrefixes ) } \n"}, {"code": "protected Object get ( final Object key , final boolean useLocalPrefixes ) { \n\t$F105146 ( result ) $F444435 ( lock ) try { \n\t\t$F424223 ( prefixedKey , getPrefixedKey , key , useLocalPrefixes ) result = ( properties instanceof PrefixedProperties ) ? ( ( PrefixedProperties ) properties ) . get ( prefixedKey , useLocalPrefixes ) : $F198 ( properties , prefixedKey ) ; \n\t\tif $F112 ( result ) { \n\t\t\tresult = ( properties instanceof PrefixedProperties ) ? ( ( PrefixedProperties ) properties ) . get ( key , useLocalPrefixes ) : $F198 ( properties , key ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "public $F21 getArray $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F268 ( value ) { \n\t\t$F155976 ( strings , value ) return strings ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F21 getArray ( final String key , $F127928 ( def ) ) { \n\tfinal $F21 value = getArray ( key ) ; \n\t$F3279 ( value ) return def ; \n\t} \n"}, {"code": "public boolean getBoolean $F536555 ( key , def ) { \n\t$F138322 ( value , getProperty , key ) return value != null ? $F995173 ( Boolean , value ) : def ; \n\t} \n"}, {"code": "public $F18550 getBooleanArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F18550 $F18562 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = $F102660 ( Boolean , value , i ) . booleanValue ( ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F18550 getBooleanArray ( final String key , final $F18550 def ) { \n\tfinal $F18550 result = getBooleanArray ( key ) ; \n\t$F63501 ( result , def ) } \n"}, {"code": "public byte getByte $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\treturn Byte . parseByte ( value ) ; \n\t} \n"}, {"code": "public $F1975 getByteArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F1975 $F62486 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = Byte . parseByte ( value [ i ] ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F1975 getByteArray ( final String key , $F117585 ( def ) ) { \n\ttry { \n\t\t$F133935 ( result , getByteArray , key ) $F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "public double getDouble $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\t$F79300 ( Double , value ) } \n"}, {"code": "public $F79106 getDoubleArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F79106 $F93005 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = Double . parseDouble ( value [ i ] ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F79106 getDoubleArray ( final String key , $F401791 ( def ) ) { \n\ttry { \n\t\tfinal $F79106 result = getDoubleArray ( key ) ; \n\t\t$F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "public String getEffectivePrefix $F2 { \n\t$F444435 ( lock ) try { \n\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\treturn getPrefix ( $F1197 , useLocalPrefixes ) . toString ( ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "public float getFloat $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\t$F73862 ( Float , value ) } \n"}, {"code": "public $F73786 getFloatArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F73786 $F104066 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = Float . parseFloat ( value [ i ] ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F73786 getFloatArray ( final String key , $F905590 ( def ) ) { \n\ttry { \n\t\tfinal $F73786 result = getFloatArray ( key ) ; \n\t\t$F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "public int getInt $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\t$F138236 ( Integer , value ) } \n"}, {"code": "public $F57272 getIntArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F57272 $F83349 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = $F155977 ( Integer , value , i ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F57272 getIntArray ( final String key , $F120572 ( def ) ) { \n\ttry { \n\t\tfinal $F57272 result = getIntArray ( key ) ; \n\t\t$F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "public long getLong $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\t$F130961 ( Long , value ) } \n"}, {"code": "public $F55422 getLongArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F55422 $F309080 ( result , value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = Long . parseLong ( value [ i ] ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F55422 getLongArray ( final String key , $F2734816 ( def ) ) { \n\ttry { \n\t\tfinal $F55422 result = getLongArray ( key ) ; \n\t\t$F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "$F1 public String getProperty $F62952 ( key ) { \n\t$F444435 ( lock ) try { \n\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\t$F424223 ( object , get , key , useLocalPrefixes ) if $F4380 ( object ) $F395760 ( object ) else { \n\t\t\t$F2201 ( object ) throw new IllegalStateException ( $F243133 ( key , object ) ) ; \n\t\t\t} \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public String getProperty $F96892 ( value , def ) { \n\t$F138322 ( result , getProperty , value ) $F63501 ( result , def ) } \n"}, {"code": "public short getShort $F62952 ( key ) { \n\t$F138322 ( value , getProperty , key ) if $F112 ( value ) { \n\t\t$F261202 } \n\treturn $F386694 ( Short , value ) ; \n\t} \n"}, {"code": "public $F83763 getShortArray $F62952 ( key ) { \n\tfinal $F21 value = getArray ( key ) ; \n\tif $F268 ( value ) { \n\t\tfinal $F83763 result = new short $F13558 ( value ) ; \n\t\tfor ( $F2674 ( i , value ) ) { \n\t\t\tresult [ i ] = Short . parseShort ( value [ i ] ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F724 } \n"}, {"code": "public $F83763 getShortArray ( final String key , $F4465397 ( def ) ) { \n\ttry { \n\t\tfinal $F83763 result = getShortArray ( key ) ; \n\t\t$F13618 ( result , def ) } \n\tcatch ( final NumberFormatException nfe ) $F356 ( def ) } \n"}, {"code": "$F1 public boolean isEmpty $F2 { \n\t$F444435 ( lock ) try { \n\t\treturn $F195922 ( entrySet ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F762 $F1 public PrefixedPropertiesEnumeration $F282 keys $F2 { \n\t$F444435 ( lock ) try { \n\t\t$F762 final Set keys = keySet ( ) ; \n\t\t$F762 final Iterator $F60361 ( it , keys ) ; \n\t\treturn new PrefixedPropertiesEnumerationImpl $F282 $F21334 ( it ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void list ( final PrintStream out ) { \n\t$F444435 ( lock ) try { \n\t\t$F319878 ( properties , out ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void list ( final PrintWriter out ) { \n\t$F444435 ( lock ) try { \n\t\t$F319878 ( properties , out ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void load $F605604 ( inStream ) throws IOException { \n\t$F444450 ( lock ) try $F130036 ( properties , inStream ) $F444463 ( lock ) } \n"}, {"code": "$F1 public void load $F711914 ( reader ) throws IOException { \n\t$F444450 ( lock ) try $F130036 ( properties , reader ) $F444463 ( lock ) } \n"}, {"code": "public void loadFromJSON $F605604 ( is ) throws IOException { \n\t$F444450 ( lock ) try { \n\t\tfinal JsonFactory f = $F235822 ; \n\t\tfinal JsonParser jp = f . createParser ( is ) ; \n\t\tconfigureJsonParser ( jp ) ; \n\t\tif ( $F29197 ( jp ) == JsonToken . START_OBJECT ) $F190227 ( traverseJSON , jp ) } \n\t$F444463 ( lock ) } \n"}, {"code": "public void loadFromYAML $F605604 ( is ) throws IOException { \n\t$F444450 ( lock ) try { \n\t\tfinal YAMLFactory f = new YAMLFactory $F2 ; \n\t\tfinal YAMLParser jp = f . createParser ( is ) ; \n\t\tconfigureJsonParser ( jp ) ; \n\t\tif ( $F29197 ( jp ) == JsonToken . START_OBJECT ) $F190227 ( traverseJSON , jp ) } \n\t$F444463 ( lock ) } \n"}, {"code": "$F1 public void loadFromXML $F605604 ( in ) throws IOException { \n\t$F444450 ( lock ) try { \n\t\tproperties . loadFromXML ( in ) ; \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "$F10880 $F1 public PrefixedPropertiesEnumeration $F45 propertyNames $F2 { \n\t$F444435 ( lock ) try { \n\t\tfinal Set $F588420 ( result ) ; \n\t\tfor ( final Object key : getKeyMap ( false ) . keySet ( ) ) $F5220 ( result , getUnprefixedKey , key ) return new PrefixedPropertiesEnumerationImpl ( $F16599 ( result ) , true ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public Object put $F396150 ( key , value ) { \n\t$F444450 ( lock ) try $F80917 ( properties , key , value ) $F444463 ( lock ) } \n"}, {"code": "$F1 public void putAll ( final Map < $F405311 , $F405311 > t ) { \n\t$F444450 ( lock ) try $F243465 ( properties , t ) $F444463 ( lock ) } \n"}, {"code": "$F1 public Object remove $F80574 ( key ) { \n\t$F444450 ( lock ) try { \n\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\t$F424223 ( someKey , getPrefixedKey , key , useLocalPrefixes ) $F503015 ( result , properties , someKey ) if $F112 ( result ) { \n\t\t\t$F51325 ( result , properties , key ) } \n\t\treturn result ; \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "public $F53092 removeAll $F80574 ( key ) { \n\t$F444450 ( lock ) try { \n\t\tfinal $F53092 $F510845 ( result ) ; \n\t\tObject resultObj ; \n\t\tif $F540 ( containsValidPrefix , key ) { \n\t\t\t$F51325 ( resultObj , properties , key ) $F173220 ( resultObj , result , key ) } \n\t\telse { \n\t\t\tfor ( final String prefix : getPrefixes ( ) ) { \n\t\t\t\tfinal String pkey = prefix + PrefixConfig . PREFIXDELIMITER + key ; \n\t\t\t\t$F51325 ( resultObj , properties , pkey ) $F173220 ( resultObj , result , pkey ) } \n\t\t\t$F51325 ( resultObj , properties , key ) $F173220 ( resultObj , result , key ) } \n\t\treturn result ; \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "$F762 $F1 public void save ( final OutputStream out , final String comments ) { \n\t$F444435 ( lock ) try { \n\t\tproperties . save ( out , comments ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "public void setDefaultPrefix $F62952 ( prefix ) { \n\t$F444450 ( lock ) try { \n\t\t$F138322 ( myPrefix , checkAndConvertPrefix , prefix ) $F386028 ( prefixList , split , myPrefix ) setDefaultPrefixes ( prefixList ) ; \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "public void setLocalPrefix $F62952 ( configuredPrefix ) { \n\t$F444450 ( lock ) try { \n\t\t$F138322 ( myPrefix , checkAndConvertPrefix , configuredPrefix ) $F386028 ( prefixList , split , myPrefix ) setPrefixes ( prefixList ) ; \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "public void setMixDefaultAndLocalPrefixSettings $F132136 ( value ) { \n\tthis . mixDefaultAndLocalPrefixes = value ; \n\tif ( properties instanceof PrefixedProperties ) { \n\t\t( ( PrefixedProperties ) properties ) . setMixDefaultAndLocalPrefixSettings ( value ) ; \n\t\t} \n\t} \n"}, {"code": "public void setPrefixConfig ( final PrefixConfig config ) { \n\t$F444450 ( lock ) try { \n\t\tif $F112 ( config ) { \n\t\t\t$F157427 ( prefixes , EmptyPrefix ) } \n\t\telse $F1619 ( prefixes , config ) } \n\t$F444463 ( lock ) } \n"}, {"code": "$F1 public Object setProperty $F96892 ( key , value ) { \n\t$F444450 ( lock ) try { \n\t\t$F2151485 ( properties , key , value ) } \n\t$F444463 ( lock ) } \n"}, {"code": "$F1 public int size $F2 { \n\t$F444435 ( lock ) try { \n\t\treturn getKeyMap ( false ) . size ( ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void store ( final OutputStream out , final String comments ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\t$F2413193 ( properties , out , comments ) } \n\t$F444443 ( lock ) } \n"}, {"code": "public void store ( final OutputStream out , final String comments , final String encoding ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\tproperties . store ( new OutputStreamWriter ( out , $F16700 ( Charset , encoding ) ) , comments ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void store ( final Writer writer , final String comments ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\t$F2413193 ( properties , writer , comments ) } \n\t$F444443 ( lock ) } \n"}, {"code": "public void storeToJSON $F204444 ( os ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\tfinal JsonFactory f = $F235822 ; \n\t\tfinal JsonGenerator generator = f . createGenerator ( os , JsonEncoding . UTF8 ) ; \n\t\tgenerator . useDefaultPrettyPrinter ( ) ; \n\t\t$F25147 ( generator ) $F38127 ( writeJsonOrYaml , generator , getTreeMap ) $F25149 ( generator ) $F6369 ( generator ) } \n\t$F444443 ( lock ) } \n"}, {"code": "public void storeToYAML $F204444 ( os ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\tfinal YAMLFactory f = new YAMLFactory $F2 ; \n\t\tfinal YAMLGenerator generator = f . createGenerator ( os , JsonEncoding . UTF8 ) ; \n\t\tgenerator . useDefaultPrettyPrinter ( ) ; \n\t\t$F25147 ( generator ) $F38127 ( writeJsonOrYaml , generator , getTreeMap ) $F25149 ( generator ) $F6369 ( generator ) } \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public void storeToXML ( final OutputStream os , final String comment ) throws IOException { \n\t$F444435 ( lock ) try { \n\t\tproperties . storeToXML ( os , comment ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public $F1043 stringPropertyNames $F2 { \n\t$F444435 ( lock ) try { \n\t\t$F1978757 ( result ) for ( final Object key : getKeyMap ( true ) . keySet ( ) ) { \n\t\t\tresult . add ( $F68995 ( getUnprefixedKey , key ) ) ; \n\t\t\t} \n\t\treturn result ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public $F283 values $F2 { \n\t$F444435 ( lock ) try { \n\t\tfinal $F619 result = new $F511027 $F2 ; \n\t\tfinal boolean useLocalPrefixes = $F167232 ( mixDefaultAndLocalPrefixes , hasLocalPrefixConfigurations ) ; \n\t\tfor ( final Object key : getKeyMap ( false ) . values ( ) ) $F27621 ( result , get , key , useLocalPrefixes ) return result ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "public E set ( E value , Locale locale ) { \n\t$F103706 ( defaultLocale , locale ) if $F268 ( value ) $F78601 ( values , locale , value ) $F6953 ( values , locale ) $F724 } \n"}, {"code": "public void setDefault ( E value , Locale locale ) { \n\t$F564 ( set , value , locale ) this . defaultLocale = locale ; \n\t} \n"}, {"code": "private E getBest ( Locale ... preferredLocales ) { \n\t$F57820 ( bestGoodness ) Locale bestKey = null ; \n\tfor ( Locale locale : preferredLocales ) { \n\t\tfor ( Locale key : $F7837 ( values ) ) { \n\t\t\t$F62838 ( goodness , computeGoodness , locale , key ) if ( goodness > bestGoodness ) bestKey = key ; \n\t\t\t} \n\t\t} \n\tif $F268 ( bestKey ) $F867 ( exactGet , bestKey ) $F724 } \n"}, {"code": "private long computeGoodness ( Locale searchLocale , Locale comparisonLocale ) { \n\tLocalizer searchLocalizers [ ] = searchLocale . getLocalizers ( ) ; \n\tLocalizer comparisonLocalizers [ ] = comparisonLocale . getLocalizers ( ) ; \n\t$F57820 ( goodness ) for ( Localizer searchLocalizer : searchLocalizers ) { \n\t\t$F2233 ( foundMatch ) for ( Localizer comparisonLocalizer : comparisonLocalizers ) { \n\t\t\tif ( $F298 ( comparisonLocalizer ) . isInstance ( searchLocalizer ) ) { \n\t\t\t\tif ( searchLocalizer . isWildCard ( ) ) { \n\t\t\t\t\tgoodness += INT00 ; \n\t\t\t\t\tfoundMatch = true ; \n\t\t\t\t\t} \n\t\t\t\telse if $F8962 ( comparisonLocalizer , searchLocalizer ) { \n\t\t\t\t\tgoodness += INT00 ; \n\t\t\t\t\tfoundMatch = true ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! foundMatch ) $F17551 } \n\treturn goodness ; \n\t} \n"}, {"code": "public static DependencyIdentifier getDependencyIdentifierForClass ( Method method , $F596982 qualifiers ) { \n\t$F76763 typeList = new $F250628 $F2 ; \n\taddTypeToList ( $F76548 ( method ) , typeList ) ; \n\treturn new DependencyIdentifier ( typeList , qualifiers ) ; \n\t} \n"}, {"code": "public static DependencyIdentifier getDependencyIdentifierForClass ( Field field , $F596982 qualifiers ) { \n\t$F76763 typeList = new $F250628 $F2 ; \n\taddTypeToList ( $F271614 ( field ) , typeList ) ; \n\treturn new DependencyIdentifier ( typeList , qualifiers ) ; \n\t} \n"}, {"code": "public static DependencyIdentifier getDependencyIdentifierForClass ( Class clazz , $F596982 qualifiers ) { \n\t$F76763 typeList = new $F250628 $F2 ; \n\t$F564 ( addTypeToList , clazz , typeList ) return new DependencyIdentifier ( typeList , qualifiers ) ; \n\t} \n"}, {"code": "private static void addTypeToList ( Type type , $F335392 ( typeList ) ) { \n\tif $F71325 ( type ) { \n\t\t$F271629 ( parameterizedType , type ) addTypeToList ( $F71280 ( parameterizedType ) , typeList ) ; \n\t\tfor ( Type actualTypeArgument : $F71286 ( parameterizedType ) ) $F565 ( addTypeToList , actualTypeArgument , typeList ) } \n\telse $F529 ( typeList , type ) } \n"}, {"code": "public static Java4CppType fromType ( Type type ) { \n\tJava4CppType j4cType = new Java4CppType ( type ) ; \n\t$F3751 ( index , typeCache , j4cType ) if $F9467 ( index ) { \n\t\t$F528 ( typeCache , j4cType ) return j4cType ; \n\t\t} \n\t$F30910 ( typeCache , index ) } \n"}, {"code": "$F762 private static $F2612 getRawClass ( Type type ) { \n\tif $F76507 ( type ) { \n\t\t$F178830 ( type ) } \n\tif $F71320 ( type ) { \n\t\treturn getRawClass ( ( ( TypeVariable ) type ) . getBounds ( ) [ INT00 ] ) ; \n\t\t} \n\tif $F71325 ( type ) { \n\t\treturn getRawClass ( $F178825 ( type ) ) ; \n\t\t} \n\tif $F71329 ( type ) { \n\t\treturn getRawClass ( ( ( GenericArrayType ) type ) . getGenericComponentType ( ) ) ; \n\t\t} \n\tif $F71235 ( type ) { \n\t\treturn getRawClass ( ( ( WildcardType ) type ) . getUpperBounds ( ) [ INT00 ] ) ; \n\t\t} \n\t$F96540 ( type ) } \n"}, {"code": "protected void init ( String domain ) { \n\t$F1638019 [ ] fields = $F531259 ( this ) ; \n\tif $F5678 ( fields ) { \n\t\tif $F112 ( domain ) domain = fields [ INT00 ] . getDeclaringClass ( ) . getName ( ) ; \n\t\tlogger = Logging . getLogger ( fields [ INT00 ] . getDeclaringClass ( ) . getName ( ) ) ; \n\t\t} \n\t$F206489 ( logger , domain ) PropertyManager . ManagedProperties properties = $F777527 ( PropertyManager , domain ) ; \n\tPropertyManager . ManagedProperties secureProperties = PropertyManager . getProperties ( STRING00 + domain ) ; \n\tlogger . debug ( $F55103 ( fields ) ) ; \n\tfor ( $F2674 ( i , fields ) ) { \n\t\tString $F1329356 ( fieldName , fields , i ) ; \n\t\t$F2612 type = $F243281 ( fields , i ) ; \n\t\t$F2090 ( value , secureProperties , fieldName ) $F564468 ( doSecurely , value ) if $F112 ( value ) $F148586 ( value , properties , fieldName ) boolean isArray = $F243281 ( fields , i ) . isArray ( ) ; \n\t\ttry { \n\t\t\tif ( isArray ) { \n\t\t\t\tif $F112 ( value ) { \n\t\t\t\t\t$F95965 ( values ) for ( int j = INT00 ; \n\t\t\t\t\ttrue ; \n\t\t\t\t\tj ++ ) { \n\t\t\t\t\t\tif ( doSecurely ) value = secureProperties . getProperty ( fieldName + STRING00 + j ) ; \n\t\t\t\t\t\telse value = properties . getProperty ( fieldName + STRING00 + j ) ; \n\t\t\t\t\t\t$F89701 ( value ) if ( doSecurely ) logger . info ( $F320 ( fieldName ) + $F53053 ( type ) . getName ( ) + STRING00 + j + STRING00 ) ; \n\t\t\t\t\t\telse logger . info ( $F320 ( fieldName ) + $F53053 ( type ) . getName ( ) + STRING00 + j + STRING00 + value ) ; \n\t\t\t\t\t\t$F528 ( values , value ) } \n\t\t\t\t\tif $F3415 ( values ) $F23605 fields [ i ] . setAccessible ( true ) ; \n\t\t\t\t\t$F243285 ( fields , i ) ( null , getObjectForString ( type , $F193953 ( values ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tfields [ i ] . setAccessible ( true ) ; \n\t\t\t\t\t$F243285 ( fields , i ) ( null , getObjectForString ( type , value ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if $F268 ( value ) { \n\t\t\t\tif ( doSecurely ) logger . info ( $F191625 ( fieldName , type ) ) ; \n\t\t\t\telse logger . info ( $F191625 ( fieldName , type ) + value ) ; \n\t\t\t\tfields [ i ] . setAccessible ( true ) ; \n\t\t\t\t$F243285 ( fields , i ) ( null , getObjectForString ( type , value ) ) ; \n\t\t\t\t} \n\t\t\telse $F1645 } \n\t\tcatch ( Exception ex ) $F231891 ( logger , fieldName , ex ) } \n\t$F45360 ( logger ) } \n"}, {"code": "private Object getObjectForString ( $F2613 ( type ) , String values [ ] ) throws Exception { \n\tif $F44788 ( values ) $F201446 Object array = Array . newInstance ( $F53053 ( type ) , values . length ) ; \n\tfor ( $F2674 ( i , values ) ) Array . set ( array , i , $F62643 ( getObjectForString , type , values , i ) ) ; \n\treturn array ; \n\t} \n"}, {"code": "public Border createComponentNodeBorder $F2 { \n\treturn BorderFactory . createCompoundBorder ( BorderFactory . createLineBorder ( Color . LIGHT_GRAY ) , $F1341535 ( BorderFactory ) ) ; \n\t} \n"}, {"code": "public static Version copy ( Version version ) { \n\t$F2201 ( version ) Version result = new Version $F2 ; \n\tresult . labels = new $F89157 ( version . labels ) ; \n\tresult . numbers = new $F95485 ( version . numbers ) ; \n\tresult . snapshot = version . snapshot ; \n\treturn result ; \n\t} \n"}, {"code": "public static Version parse ( String version ) { \n\t$F38495 ( version ) Version result = new Version $F2 ; \n\t$F30789 ( numbers , version ) for ( $F2674 ( i , numbers ) ) { \n\t\tString parts [ ] = $F111629 ( numbers , i ) ; \n\t\t$F42482 ( number , Integer , parts ) $F1200 ( label ) for ( $F2674 ( j , parts ) ) { \n\t\t\tif ( $F116353 ( i , numbers ) && $F116353 ( j , parts ) ) { \n\t\t\t\t$F352422 ( label , parts , j ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tresult . setSnapshot ( $F6441150 ( parts , j ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tresult . append ( $F5646 ( number , label ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public Version append $F78563 ( number , label ) { \n\tvalidateNumber ( number ) ; \n\t$F4282 ( appendNumber , number , label ) } \n"}, {"code": "public Version cutoff ( int index ) { \n\tif $F17162 ( isBeyondBounds , index ) { \n\t\tlabels = labels . subList ( -- index , $F3413 ( labels ) ) ; \n\t\tnumbers = $F75634 ( numbers , index ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public Version setNumber $F97722 ( index , number , label ) { \n\tvalidateNumber ( number ) ; \n\tif $F540 ( isBeyondBounds , index ) { \n\t\t$F36249 ( message , String , index ) $F75350 ( message ) } \n\tlabels . set ( -- index , label ) ; \n\t$F52836 ( numbers , index , number ) return this ; \n\t} \n"}, {"code": "public Throwable getMostSpecificCause $F2 { \n\t$F82073 ( rootCause ) Throwable cause = getCause ( ) ; \n\twhile $F285757 ( cause , rootCause ) { \n\t\trootCause = cause ; \n\t\t$F13891 ( cause ) } \n\treturn ( $F63500 ( rootCause , this ) ) ; \n\t} \n"}, {"code": "$F1 public Long convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\treturn $F42850 ( FMTin , valueStr ) . longValue ( ) ; \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tif ( getValue ( occ ) < INT00 ) $F1218 ( out ) out . append ( FMTout . format ( getValue ( occ ) ) ) ; \n\tif ( getValue ( occ ) < INT00 ) $F1218 ( out ) } \n"}, {"code": "$F1 public $F55422 getValueAslongArray $F2 throws ParseException { \n\tfinal $F55422 result = new long $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . longValue ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "public $F21 readLines $F2 throws IOException { \n\t$F95965 ( list ) String line ; \n\twhile $F102961 ( line , readLine ) $F529 ( list , line ) $F28562 ( list ) } \n"}, {"code": "public String readAll $F2 throws IOException { \n\t$F1200 ( sb ) String line ; \n\twhile $F102961 ( line , readLine ) $F8284 ( sb , line ) $F1226 ( sb ) } \n"}, {"code": "private UUID nextUUID ( boolean secure ) { \n\t$F9435 ( raw , UUID_BYTE_LENGTH ) if ( secure ) { \n\t\tif $F112 ( secureRandom ) { \n\t\t\ttry { \n\t\t\t\tif $F268 ( usePRNGPackage ) { \n\t\t\t\t\t$F394537 ( secureRandom , SecureRandom , usePRNG , usePRNGPackage ) ; \n\t\t\t\t\t} \n\t\t\t\telse $F125545 ( secureRandom , SecureRandom , usePRNG ) } \n\t\t\tcatch ( NoSuchAlgorithmException nsae ) $F57412 ( secure ) catch ( NoSuchProviderException nspe ) $F57412 ( secure ) } \n\t\tif $F268 ( secureRandom ) { \n\t\t\t$F154588 ( secureRandom , raw ) } \n\t\t} \n\telse { \n\t\t$F154588 ( regularRandom , raw ) } \n\traw [ TIME_HI_AND_VERSION_BYTE_6 ] &= INT00 ; \n\traw [ TIME_HI_AND_VERSION_BYTE_6 ] |= ( UUID . VERSION_FOUR < < INT00 ) ; \n\traw [ CLOCK_SEQ_HI_AND_RESERVED_BYTE_8 ] &= INT00 ; \n\traw [ CLOCK_SEQ_HI_AND_RESERVED_BYTE_8 ] |= INT00 ; \n\treturn new UUID ( raw ) ; \n\t} \n"}, {"code": "public static void setPRNGProvider $F1195 ( prngName , packageName ) { \n\tVersionFourGenerator . usePRNG = prngName ; \n\tVersionFourGenerator . usePRNGPackage = packageName ; \n\tVersionFourGenerator . secureRandom = null ; \n\t} \n"}, {"code": "$F1 public Object asEnum ( final String enumClassFieldName , $F60785 ( possibleConstants ) ) throws ParseException $F70662 ( stringToEnumConstant , enumClassFieldName , possibleConstants , getValue ) "}, {"code": "$F1 public $F34817 [ ] asEnumArray ( final String enumClassFieldName , $F60785 ( possibleConstants ) ) throws ParseException { \n\tfinal $F34817 [ ] enumArray = new $F34817 $F96057 ( size ) ; \n\tfor ( $F81130 ( v , size ) ) enumArray [ v ] = ( $F34817 ) $F282268 ( stringToEnumConstant , enumClassFieldName , possibleConstants , getValue , v ) ; \n\treturn enumArray ; \n\t} \n"}, {"code": "protected String buildParamsQuery $F229411 ( params ) throws UnsupportedEncodingException { \n\t$F1200 ( builder ) if $F6132 ( params ) $F33492 ( builder ) $F19733 ( sep ) for ( $F24106 ( entry , params ) ) { \n\t\t$F1212 ( builder , sep ) builder . append ( $F17767 ( urlencode , entry ) ) ; \n\t\t$F1218 ( builder ) builder . append ( $F6584 ( urlencode , entry ) ) ; \n\t\tsep = STRING00 ; \n\t\t} \n\t$F1226 ( builder ) } \n"}, {"code": "protected HttpURLConnection openConnection ( final URL url , final RpcRequest request ) throws IOException { \n\t$F176293 ( connection , url ) if ( request . isPost ( ) ) { \n\t\t$F1295480 ( connection , POST ) connection . setRequestProperty ( CONTENT_TYPE_HEADER , APPLICATION_X_WWW_FORM_URLENCODED ) ; \n\t\t$F176300 ( connection ) } \n\telse { \n\t\t$F1295480 ( connection , GET ) } \n\treturn connection ; \n\t} \n"}, {"code": "protected void sendPostData ( final HttpURLConnection connection , final RpcRequest request ) throws IOException { \n\tString post = buildParamsQuery ( request . getPost ( ) ) ; \n\t$F99118 ( data , post , UTF8 ) connection . setRequestProperty ( CONTENT_TYPE_HEADER , APPLICATION_X_WWW_FORM_URLENCODED ) ; \n\tconnection . setRequestProperty ( CONTENT_LENGTH_HEADER , $F176308 ( String , data ) ) ; \n\tOutputStream out = new BufferedOutputStream $F314946 ( connection ) ; \n\ttry $F125961 ( out , data ) $F26192 ( closeLogExc , out ) } \n"}, {"code": "protected $F65781 T handleResponse ( final HttpURLConnection connection , final DataTypeDescriptor $F1372 datad , final DataTypeDescriptor $F26212 errord ) throws IOException { \n\t$F134144 ( connection ) $F35409 ( status , connection ) if ( status == HttpURLConnection . HTTP_OK ) $F14249 ( readResult , connection , datad ) else if ( status == APPLICATION_EXC_STATUS ) { \n\t\tthrow ( RuntimeException ) readApplicationException ( connection , errord ) ; \n\t\t} \n\telse $F157852 ( readError , connection ) } \n"}, {"code": "protected IOException readError ( final HttpURLConnection connection ) throws IOException { \n\t$F35409 ( status , connection ) InputStream $F2050774 ( input , connection ) ; \n\ttry { \n\t\tString message = input == null ? STRING00 : readString ( connection , input ) ; \n\t\tif $F42465 ( message , MAX_RPC_EXCEPTION_MESSAGE_LEN ) { \n\t\t\tmessage = $F346197 ( message , MAX_RPC_EXCEPTION_MESSAGE_LEN ) ; \n\t\t\t} \n\t\t$F14508 ( message ) $F14508 ( message ) throw new RpcException ( status , message ) ; \n\t\t} \n\t$F26192 ( closeLogExc , input ) } \n"}, {"code": "protected String readString ( final HttpURLConnection connection , final InputStream input ) throws IOException { \n\tCharset charset = guessContentTypeCharset ( connection ) ; \n\t$F1200 ( sb ) BufferedReader reader = new BufferedReader ( $F44609 ( input , charset ) ) ; \n\ttry { \n\t\t$F48974 ( first ) for ( String line ; \n\t\t$F57864 ( line , reader ) ; \n\t\t) { \n\t\t\t$F71095 ( first , sb ) $F1212 ( sb , line ) first = false ; \n\t\t\t} \n\t\t} \n\t$F26192 ( closeLogExc , reader ) $F1226 ( sb ) } \n"}, {"code": "protected Charset guessContentTypeCharset ( final HttpURLConnection connection ) { \n\tString contentType = connection . getHeaderField ( CONTENT_TYPE_HEADER ) ; \n\t$F3446 ( contentType , UTF8 ) $F4728 ( charset ) for ( String param : $F4118 ( contentType ) . split ( STRING00 ) ) { \n\t\tif $F5667 ( param ) { \n\t\t\tcharset = $F20847 ( param ) [ INT00 ] ; \n\t\t\t$F332 } \n\t\t} \n\ttry $F384280 ( Charset , charset ) $F380002 ( UTF8 ) } \n"}, {"code": "protected void closeLogExc ( $F623 final Closeable closeable ) { \n\t$F15530 ( closeable ) $F650218 ( closeable , e ) } \n"}, {"code": "$F1 public final void start ( Stage stage ) throws Exception { \n\tParameters params = getParameters ( ) ; \n\t$F5033 paramsList = params . getRaw ( ) ; \n\tVBox box = new VBox $F2 ; \n\tDajlabScene scene = new DajlabScene $F141829 ( box ) ; \n\tscene . setControllers ( controllers ) ; \n\tMessagesUtil . initializeMessages ( controllers ) ; \n\tstage . setScene ( scene ) ; \n\tif $F386 ( paramsList ) $F191712 ( appTitle , paramsList ) if $F268 ( appTitle ) { \n\t\tstage . setTitle ( MessagesUtil . getString ( STRING00 , appTitle ) ) ; \n\t\t} \n\telse { \n\t\tappTitle = STRING00 ; \n\t\tstage . setTitle ( $F2303 ( MessagesUtil ) ) ; \n\t\t} \n\tTabPane tabPan = new TabPane $F2 ; \n\tfor ( DajlabControllerExtensionInterface < DajlabModelInterface > controller : controllers ) { \n\t\t$F134144 ( controller ) } \n\tfor ( TabExtensionInterface tabPlugin : tabPlugins ) { \n\t\tCollection < AbstractDajlabTab > tabs = tabPlugin . getTabs ( ) ; \n\t\tif $F380519 ( CollectionUtils , tabs ) { \n\t\t\ttabPan . getTabs ( ) . addAll ( tabs ) ; \n\t\t\t} \n\t\t} \n\tif ( tabPan . getTabs ( ) . size ( ) > INT00 ) { \n\t\tAbstractDajlabTab [ ] tabl = new AbstractDajlabTab [ tabPan . getTabs ( ) . size ( ) ] ; \n\t\ttabPan . getTabs ( ) . toArray ( tabl ) ; \n\t\tAbstractDajlabTab defaultTab = selectDefaultTab ( tabl ) ; \n\t\tif $F112 ( defaultTab ) { \n\t\t\t$F1300984 ( tabPan ) . select ( INT00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F1300984 ( tabPan ) . select ( defaultTab ) ; \n\t\t\t} \n\t\t} \n\tstage . setOnCloseRequest ( e - > <missing ';'> { \n\t\t$F539485 ( e ) Alert alert = new Alert ( AlertType . CONFIRMATION ) ; \n\t\talert . setTitle ( $F2303 ( MessagesUtil ) ) ; \n\t\talert . setHeaderText ( MessagesUtil . getString ( STRING00 , appTitle ) ) ; \n\t\tOptional < ButtonType > result = alert . showAndWait ( ) ; \n\t\tif ( $F144 ( result ) == ButtonType . OK ) { \n\t\t\tfor ( DajlabControllerExtensionInterface < DajlabModelInterface > controller : controllers ) $F176339 ( controller ) $F820521 ( Platform ) } \n\t\t} \n\t) ; \n\t$F1507019 ( box ) ( new DajlabMenuBar $F2144 ( menuPlugins , scene , appTitle ) ) ; \n\t$F1507034 ( box , tabPan ) $F185332 ( stage ) } \n"}, {"code": "public void registerPlugin ( final DajlabExtension plugin ) { \n\tif $F268 ( plugin ) { \n\t\tif ( plugin instanceof DajlabControllerExtensionInterface ) { \n\t\t\tcontrollers . add ( ( DajlabControllerExtensionInterface < DajlabModelInterface > ) plugin ) ; \n\t\t\t} \n\t\tif ( plugin instanceof TabExtensionInterface ) { \n\t\t\ttabPlugins . add ( ( TabExtensionInterface ) plugin ) ; \n\t\t\t} \n\t\tif ( plugin instanceof MenuExtensionInterface ) { \n\t\t\tmenuPlugins . add ( ( MenuExtensionInterface ) plugin ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void start $F2 throws ConfigurationException { \n\tif $F112 ( connectionFactory ) { \n\t\t$F1390509 } \n\ttry { \n\t\tserver = new ServerSocket ( port ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F1292 ( System ) ( new LogEntry $F18430 ( e ) ) ; \n\t\tthrow new ConfigurationException $F5148 ( port , e ) ; \n\t\t} \n\t$F1292 ( System ) ( new LogEntry $F2821 ( port ) ) ; \n\t$F367120 ( serverThread , this ) ; \n\t$F4599 ( serverThread ) } \n"}, {"code": "public void run $F2 { \n\ttry { \n\t\twhile $F38432 { \n\t\t\tSocket $F173243 ( socket , server ) ; \n\t\t\t$F1292 ( System ) ( new LogEntry ( STRING00 + $F431777 ( socket ) . getHostAddress ( ) + STRING00 ) ) ; \n\t\t\tConnection c = establishConnection ( socket ) ; \n\t\t\tupdateConnectedClients ( c ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\t$F1292 ( System ) ( new LogEntry ( $F27282 ( ioe ) ) ) ; \n\t\t} \n\tcatch ( Throwable t ) { \n\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , $F27282 ( t ) , t ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void stop $F2 { \n\tif $F268 ( serverThread ) { \n\t\ttry $F2453 ( server ) catch ( IOException ioe ) { \n\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , $F2443 ( ioe ) , ioe ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( Connection client : new HashSet $F482486 ( connectedClients ) ) { \n\t\tif $F268232 ( client ) { \n\t\t\tclient . close ( STRING00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void setProperties ( Properties properties ) throws ConfigurationException { \n\tport = Converter . convertToInteger ( properties . getProperty ( $F6265 ( port ) ) ) ; \n\tkeepAlive = Converter . convertToBoolean ( properties . getProperty ( $F6265 ( keepAlive ) ) ) ; \n\tsoTimeout = Converter . convertToInteger ( properties . getProperty ( $F6265 ( soTimeout ) ) ) ; \n\ttimeout = Converter . convertToInteger ( properties . getProperty ( $F6265 ( timeout ) ) ) ; \n\tsoLingerActive = Converter . convertToBoolean ( properties . getProperty ( $F6265 ( soLingerActive ) ) ) ; \n\tsoLingerTime = Converter . convertToInteger ( properties . getProperty ( $F6265 ( soLingerTime ) ) ) ; \n\t} \n"}, {"code": "public static ISonarConverter getConverterInstance $F2 { \n\tif $F112 ( converterInstance ) { \n\t\tsynchronized ( DefaultSonarConverter . class ) { \n\t\t\tif $F112 ( converterInstance ) converterInstance = new DefaultSonarConverter $F2 ; \n\t\t\t} \n\t\t} \n\treturn converterInstance ; \n\t} \n"}, {"code": "public static ISonarExtractor getExtractor $F16060 ( hostURL , userName , password ) { \n\treturn new DefaultSonarExtractor $F2144 ( hostURL , userName , password ) ; \n\t} \n"}, {"code": "private boolean isIPAddress $F274855 ( address ) { \n\treturn ( InetAddressUtils . isIPv4Address ( address ) || InetAddressUtils . isIPv6Address ( address ) ) ; \n\t} \n"}, {"code": "public void configure ( InputStream loggingProperties ) throws IOException { \n\t$F41912 ( System , logDir ) Reader $F142885 ( logConfigReader , loggingProperties ) ; \n\tInputStream logConfigStream = new LineFilterInputStream ( logConfigReader , line - > line . replaceAll ( STRING00 , logDir ) ) ; \n\tLogManager logManager = LogManager . getLogManager ( ) ; \n\tlogManager . readConfiguration ( logConfigStream ) ; \n\t} \n"}, {"code": "private String forceResolve ( String key ) { \n\tGetParametersRequest request ; \n\tif $F5667 ( key ) { \n\t\t$F14229 ( log , key ) if ( $F433319 ( org ) . lang3 . StringUtils . isNotEmpty ( parameterPrefix ) ) { \n\t\t\trequest = new GetParametersRequest $F2 . withNames ( parameterPrefix + key ) . withWithDecryption ( true ) ; \n\t\t\t} \n\t\telse $F2200 } \n\telse { \n\t\trequest = new GetParametersRequest $F2 . withNames ( parameterPrefix + key , key ) . withWithDecryption ( true ) ; \n\t\t} \n\tGetParametersResult result = ssmClient . getParameters ( request ) ; \n\tfor ( Parameter parameter : $F6573 ( result ) ) $F75457 ( parameter ) $F724 } \n"}, {"code": "public static $F5033 split ( String name ) { \n\t$F99420 ( firstPassTokens , tokeniseOnSeparators , name ) $F99420 ( tokens , tokeniseOnLowercaseToUppercase , firstPassTokens ) return tokens ; \n\t} \n"}, {"code": "private static $F5033 tokeniseOnLowercaseToUppercase ( String name ) { \n\t$F5088 ( splits ) $F92623 $F54 ( candidateBoundaries ) ; \n\tfor ( Integer index = INT00 ; \n\t$F8124 ( index , name ) ; \n\tindex ++ ) { \n\t\tif $F2015 ( index ) $F529 ( candidateBoundaries , index ) else { \n\t\t\tif ( Character . isUpperCase ( $F107491 ( name , index ) ) && Character . isLowerCase ( name . codePointAt ( index - INT00 ) ) ) { \n\t\t\t\tcandidateBoundaries . add ( index - INT00 ) ; \n\t\t\t\t$F528 ( candidateBoundaries , index ) } \n\t\t\t} \n\t\tif $F163805 ( index , name ) $F529 ( candidateBoundaries , index ) } \n\tif ( $F3413 ( candidateBoundaries ) % INT00 == INT00 ) $F26017 ( LOGGER , name ) for ( int i = INT00 ; \n\t$F10913 ( i , candidateBoundaries ) ; \n\ti += INT00 ) { \n\t\tsplits . add ( name . substring ( $F198 ( candidateBoundaries , i ) , $F91338 ( candidateBoundaries , i ) + INT00 ) ) ; \n\t\t} \n\treturn splits ; \n\t} \n"}, {"code": "public final Component process ( T input , Context context , Arguments args ) { \n\tComponent $F2207 ( result , format , input , context , args ) ; \n\tfor ( PostProcessor processor : postProcessors ) { \n\t\tresult = $F374781 ( processor , result , context , args ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F762 public static $F1372 JSONNormalizer getJSONStandardizer ( $F560674 response ) { \n\tJSONNormalizer standardizer = new JSONNormalizer $F2 ; \n\tClass < JSONNormalizer > standardizerClazz = ClassUtil . getClassAnnotationValue ( $F298 ( response ) , Normalized . class , STRING00 , $F6856 ) ; \n\tif $F268 ( standardizerClazz ) { \n\t\ttry $F179139 ( standardizer , standardizerClazz ) catch ( InstantiationException e ) $F1645 $F552890 } \n\treturn standardizer ; \n\t} \n"}, {"code": "$F1 public String format ( int index ) { \n\t-- index ; \n\tint charsCount = index / $F1203 ( dictionary ) + INT00 ; \n\tindex = index % $F1203 ( dictionary ) ; \n\t$F14215 ( c , dictionary , index ) $F1200 ( sb ) for ( $F72243 ( i , charsCount ) ) $F8284 ( sb , c ) $F1226 ( sb ) } \n"}, {"code": "public void add ( CommandOption option ) { \n\t$F975 ( Assert , option ) CommandOption found = find ( option ) ; \n\tAssert . isNull ( found , $F4241 ( option , found ) ) ; \n\t$F528 ( options , option ) } \n"}, {"code": "private CommandOption find ( CommandOption option ) { \n\t$F975 ( Assert , option ) Optional < CommandOption > found = $F6151 ( options ) ( o - > o . is ( option ) ) . findFirst ( ) ; \n\treturn $F34645 ( found ) ; \n\t} \n"}, {"code": "public CommandOption findShort ( String argument ) { \n\tAssert . notNullOrEmptyTrimmed ( argument , STRING00 ) ; \n\tOptional < CommandOption > found = $F6151 ( options ) ( o - > o . isShort ( argument ) ) . findFirst ( ) ; \n\treturn $F34645 ( found ) ; \n\t} \n"}, {"code": "public CommandOption findLong ( String argument ) { \n\tAssert . notNullOrEmptyTrimmed ( argument , STRING00 ) ; \n\tOptional < CommandOption > found = $F6151 ( options ) ( o - > o . isLong ( argument ) ) . findFirst ( ) ; \n\treturn $F34645 ( found ) ; \n\t} \n"}, {"code": "private CommandOption $F45 findBySetting ( String key ) { \n\tAssert . notNullOrEmptyTrimmed ( key , STRING00 ) ; \n\tOptional < CommandOption > found = $F6151 ( options ) ( o - > o . getSetting ( ) . equals ( key ) ) . findFirst ( ) ; \n\treturn $F34645 ( found ) ; \n\t} \n"}, {"code": "public CommandOption findOption ( String name ) { \n\tAssert . notNullOrEmptyTrimmed ( name , STRING00 ) ; \n\tOptional < CommandOption > found = $F6151 ( options ) ( o - > o . getSetting ( ) . equals ( name ) || o . isShort ( name ) || o . isLong ( name ) ) . findFirst ( ) ; \n\treturn $F34645 ( found ) ; \n\t} \n"}, {"code": "void setDefaults ( Settings defaultSettings ) { \n\t$F975 ( Assert , defaultSettings ) for ( $F88222 ( key , defaultSettings ) ) { \n\t\tCommandOption $F45 option = findBySetting ( key ) ; \n\t\t$F90687 ( option ) $F2744 ( value , defaultSettings , key ) option . defaultsTo ( value ) ; \n\t\t} \n\t} \n"}, {"code": "public void setHelp $F1195 ( appVersion , usageExample ) { \n\thelpAppVersion = $F1724482 ( StringUtils , appVersion ) ; \n\thelpAppExample = $F1724482 ( StringUtils , usageExample ) ; \n\t} \n"}, {"code": "public $F5033 getHelp $F2 { \n\t$F5088 ( out ) $F12701 ( helpAppVersion , out ) $F12701 ( helpAppExample , out ) if $F45819 ( helpAppVersion , helpAppExample ) $F18371 ( out ) $F1987 ( max ) for ( CommandOption option : options ) { \n\t\tString command = option . toCommandString ( ) ; \n\t\tmax = Math . max ( $F35723 ( max , command ) ) ; \n\t\t} \n\tfor ( CommandOption option : options ) { \n\t\tString info = option . toCommandString ( ) ; \n\t\tint spaces = $F69013 ( max , info ) + INT00 ; \n\t\tString delimiter = new String ( $F44613 ( spaces ) ) . replace ( $F1286 ) ; \n\t\tinfo = info + delimiter + $F6483 ( option ) ; \n\t\t$F528 ( out , info ) } \n\treturn out ; \n\t} \n"}, {"code": "$F1 public $F623 String getPassword $F274855 ( instanceId ) throws $F22202330 { \n\t$F22213656 ( APITrace , getProvider ) try { \n\t\treturn new GetPassCallable $F46456 ( instanceId , getProvider ) . call ( ) ; \n\t\t} \n\tcatch ( CloudException ce ) $F4760 ( ce ) catch ( Exception e ) $F10474555 ( e ) $F133621 ( APITrace ) } \n"}, {"code": "private SpotVirtualMachineRequest toSpotVmRequest ( $F197020 Node node ) throws CloudException { \n\t$F356718 ( el , node ) $F4728 ( requestId ) $F23776 ( price ) SpotVirtualMachineRequestType type = null ; \n\t$F57820 ( createdTs ) $F57820 ( validFromTs ) $F57820 ( validUntilTs ) $F4728 ( fulfillmentDcid ) $F4728 ( launchGroup ) $F4728 ( instanceId ) $F4728 ( amiId ) $F4728 ( productId ) $F57820 ( fulfillmentTs ) for ( $F12267 ( i , el ) ) { \n\t\t$F4490555 ( item , el , i ) $F581981 ( name , item ) if $F25224 ( name ) $F22635934 ( requestId , item ) else if $F25224 ( name ) { \n\t\t\tprice = AWSCloud . getFloatValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\ttype = SpotVirtualMachineRequestType . ONE_TIME ; \n\t\t\tString value = AWSCloud . getTextValue ( item ) ; \n\t\t\tif $F25224 ( value ) { \n\t\t\t\ttype = SpotVirtualMachineRequestType . PERSISTENT ; \n\t\t\t\t} \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tlaunchGroup = AWSCloud . getTextValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tfulfillmentDcid = AWSCloud . getTextValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tcreatedTs = AWSCloud . getTimestampValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tvalidFromTs = AWSCloud . getTimestampValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tvalidUntilTs = AWSCloud . getTimestampValue ( item ) ; \n\t\t\t} \n\t\telse if $F25224 ( name ) { \n\t\t\tinstanceId = AWSCloud . getTextValue ( item ) ; \n\t\t\t} \n\t\t} \n\tif $F268 ( instanceId ) { \n\t\ttry { \n\t\t\tVirtualMachine vm = getVirtualMachine ( instanceId ) ; \n\t\t\tproductId = vm . getProductId ( ) ; \n\t\t\tfulfillmentTs = vm . getCreationTimestamp ( ) ; \n\t\t\tamiId = vm . getProviderMachineImageId ( ) ; \n\t\t\t} \n\t\tcatch ( CloudException ce ) $F1645 catch ( InternalException e ) $F1645 } \n\treturn SpotVirtualMachineRequest . getInstance ( $F96487 ( requestId , price , type , amiId , productId , createdTs , validFromTs , validUntilTs , fulfillmentTs , fulfillmentDcid , launchGroup ) ) ; \n\t} \n"}, {"code": "public List < Problem > validate ( TypeElement type ) { \n\tList < Problem > problems = new ArrayList < Problem > $F2 ; \n\t$F2233 ( declared ) $F1987 ( constructor ) $F35073 $F2095903 ( keys ) ; \n\tfor ( Element element : $F19928 ( type ) ) { \n\t\tElementKind $F360867 ( kind , element ) ; \n\t\tif ( kind == ElementKind . CONSTRUCTOR ) { \n\t\t\tconstructor ++ ; \n\t\t\tif ( ( ( ExecutableElement ) element ) . getParameters ( ) . isEmpty ( ) ) { \n\t\t\t\tif ( $F35178 ( element ) ( Modifier . PUBLIC ) ) $F24354 ( declared ) } \n\t\t\t} \n\t\telse if ( kind == ElementKind . FIELD ) { \n\t\t\tfor ( AnnotationMirror mirror : $F50657 ( element ) ) { \n\t\t\t\tName name = ( ( TypeElement ) $F35115 ( mirror ) . asElement ( ) ) . getQualifiedName ( ) ; \n\t\t\t\tif ( name . contentEquals ( KEY ) ) $F493238 ( keys , element ) } \n\t\t\t} \n\t\t} \n\tif ( ! declared && constructor > INT00 ) { \n\t\tproblems . add ( new Problem ( Kind . ERROR , STRING00 , type ) ) ; \n\t\treturn problems ; \n\t\t} \n\tif $F6132 ( keys ) { \n\t\tproblems . add ( new Problem ( Kind . ERROR , STRING00 , type ) ) ; \n\t\treturn problems ; \n\t\t} \n\telse if $F4340 ( keys ) { \n\t\tfor ( Element key : keys ) { \n\t\t\tproblems . add ( new Problem ( Kind . ERROR , STRING00 , key ) ) ; \n\t\t\t} \n\t\treturn problems ; \n\t\t} \n\tVariableElement variableElement = ( VariableElement ) $F3416 ( keys ) ; \n\tTypeMirror mirror = $F23507 ( variableElement ) ; \n\tElement element = ( $F13148 ( mirror ) . isPrimitive ( ) ) ? types . boxedClass ( ( PrimitiveType ) mirror ) : types . asElement ( mirror ) ; \n\tName name = ( ( TypeElement ) element ) . getQualifiedName ( ) ; \n\tif ( ! name . contentEquals ( JAVA_LANG_LONG ) && ! name . contentEquals ( JAVA_LANG_STRING ) && ! name . contentEquals ( LONG ) ) { \n\t\tproblems . add ( new Problem ( Kind . ERROR , $F9972 ( JAVA_LANG_STRING , JAVA_LANG_LONG , LONG ) , variableElement ) ) ; \n\t\t} \n\treturn problems ; \n\t} \n"}, {"code": "private static File writeToMapped ( BytesMessage msg , File file ) throws IOException , JMSException { \n\tByteBuffer buf ; \n\tFileChannel fc = null ; \n\tRandomAccessFile raf = null ; \n\ttry { \n\t\t$F156024 ( raf , file ) ; \n\t\t$F118358 ( fc , raf ) buf = fc . map ( FileChannel . MapMode . READ_WRITE , INT00 , msg . getBodyLength ( ) ) ; \n\t\t$F45360 ( logger ) $F564 ( writeTo , msg , buf ) $F3509 ( logger , file ) $F1109 ( fc ) $F1109 ( raf ) return file ; \n\t\t} \n\tfinally { \n\t\tfc = $F125621 ( Closer , fc ) ; \n\t\traf = $F125621 ( Closer , raf ) ; \n\t\t} \n\t} \n"}, {"code": "public final void lcm ( final ExplorationStep initState ) { \n\tif ( initState . pattern . length > INT00 ) { \n\t\tthis . collector . collect ( initState ) ; \n\t\t} \n\tthis . initializeAndStartThreads ( initState ) ; \n\tif ( this . progressWatch != null ) { \n\t\tthis . progressWatch . setInitState ( initState ) ; \n\t\tthis . progressWatch . start ( ) ; \n\t\t} \n\tfor ( PLCMThread t : this . threads ) { \n\t\ttry { \n\t\t\t$F9119 ( t ) for ( int i = INT00 ; \n\t\t\ti < t . counters . length ; \n\t\t\ti ++ ) { \n\t\t\t\tthis . globalCounters [ i ] += t . counters [ i ] ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F337087 ( e ) } \n\tif ( this . progressWatch != null ) { \n\t\tthis . progressWatch . interrupt ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean validate ( Object value ) { \n\t$F2272 ( constraints ) IConstraintChecker checker ; \n\tfor ( BeanProperty constraint : constraints ) { \n\t\tchecker = checkers . get ( $F736713 ( constraint ) ) ; \n\t\tif $F112 ( checker ) { \n\t\t\tthrow new RuntimeException ( $F3902 + $F736713 ( constraint ) + STRING00 ) ; \n\t\t\t} \n\t\tchecker . check ( value , constraint ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public static void transferDirect ( Pipe . Schema pipeSchema , Pipe pipe , Input input , Output output ) throws IOException { \n\tpipeSchema . transfer ( pipe , input , output ) ; \n\t} \n"}, {"code": "public static void assertToken ( int expectedType , String expectedText , LexerResults lexerResults ) { \n\tassertToken ( expectedType , expectedText , $F530852 ( lexerResults ) ) ; \n\t} \n"}, {"code": "public static void assertToken ( String message , int expectedType , String expectedText , Token token ) { \n\tassertToken ( message , BaseRecognizer . DEFAULT_TOKEN_CHANNEL , expectedType , expectedText , token ) ; \n\t} \n"}, {"code": "public static void assertToken ( String message , int expectedChannel , int expectedType , String expectedText , Token token ) { \n\tassertEquals ( message + STRING00 , expectedChannel , $F63388 ( token ) ) ; \n\tassertEquals ( message + STRING00 , expectedType , $F511 ( token ) ) ; \n\tassertEquals ( message + STRING00 , expectedText , $F48418 ( token ) ) ; \n\t} \n"}, {"code": "public static void refuteToken ( int refutedType , LexerResults lexerResults ) { \n\ttry { \n\t\tif ( refutedType == $F530852 ( lexerResults ) . getType ( ) ) $F29219 ( fail ) } \n\tcatch ( AssertionError e ) { \n\t\tif ( $F44182 ( checkMessage , e ) ) $F1645 else $F4760 ( e ) } \n\t} \n"}, {"code": "public static void refuteParse ( SelectedRule rule , LexerResults lexerResults ) { \n\ttry { \n\t\tlexerResults . parseAs ( rule ) ; \n\t\t$F10467 ( fail , rule ) } \n\tcatch ( AssertionError e ) { \n\t\tif ( $F44182 ( checkMessage , e ) ) $F1645 else $F4760 ( e ) } \n\t} \n"}, {"code": "public static void assertTree ( int rootType , String preorder , ParseResults parseResults ) { \n\tassertTree ( rootType , preorder , $F738827 ( parseResults ) ) ; \n\t} \n"}, {"code": "public static void assertTree ( int rootType , String preorder , Tree tree ) { \n\t$F62615 ( assertNotNull , tree ) $F55686 ( assertPreordered , preorder , tree ) assertEquals ( STRING00 , rootType , $F511 ( tree ) ) ; \n\t} \n"}, {"code": "public static void assertTree ( String rootText , String preorder , ParseResults parseResults ) { \n\tassertTree ( rootText , preorder , $F738827 ( parseResults ) ) ; \n\t} \n"}, {"code": "public static void assertTree ( String message , String rootText , String preorder , Tree tree ) { \n\t$F62615 ( assertNotNull , tree ) assertEquals ( message + STRING00 , rootText , $F48418 ( tree ) ) ; \n\t$F5605 ( assertPreordered , message , preorder , tree ) } \n"}, {"code": "protected final String processVelocityString ( String logTag , String inString , VelocityContext context ) { \n\tWriter $F6362 ( writer ) ; \n\t$F12601 ( doVelocityTemplateMerge , logTag , inString , context , writer ) $F1226 ( writer ) } \n"}, {"code": "public InputStream getAsStream $F2 throws CacheException { \n\t$F133709 ( file ) try { \n\t\tFile directory = $F11851 ( System ) ; \n\t\t$F384765 ( file , directory , filename ) if $F173173 ( file ) $F35373 ( file ) } \n\tcatch ( IOException e ) { \n\t\t$F5572 ( logger , filename ) throw new CacheException $F4489 ( filename , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "private void verifyTemplate ( Template $F45 template , $F95622 templates ) { \n\t$F19202 ( id , template ) if $F8674 ( templates , id ) { \n\t\t$F116907 ( t , templates ) $F29879 ( System ) ( $F11311 ( t ) ) ; \n\t\twhile $F11310 ( t ) { \n\t\t\t$F29879 ( System ) ( STRING00 + $F11311 ( t ) ) ; \n\t\t\t} \n\t\t$F8479 ( System , id ) $F503 ( id ) } \n\t$F528 ( templates , id ) } \n"}, {"code": "public List < ISubmission > filter ( List < ISubmission > submissions ) { \n\tList < ISubmission > sortedSubmissions = new ArrayList < ISubmission > $F2 ; \n\t$F308 ( sortedSubmissions , submissions ) Collections . sort ( sortedSubmissions , new SubmissionComparator $F2 ) ; \n\tList < ISubmission > filteredSubmissions = new ArrayList < ISubmission > $F2 ; \n\tfor ( ISubmission submission : sortedSubmissions ) { \n\t\tif ( $F7689 ( submission ) != null ) { \n\t\t\tif ( $F7689 ( submission ) . getVerb ( ) != null ) { \n\t\t\t\tif ( $F7689 ( submission ) . getVerb ( ) . equals ( verb ) ) $F344204 ( filteredSubmissions , submission ) } \n\t\t\t} \n\t\t} \n\treturn filteredSubmissions ; \n\t} \n"}, {"code": "public static String fitToLength $F133249 ( html , length ) { \n\tif $F112 ( html ) { \n\t\treturn StringUtils . repeat ( SPACE , length ) ; \n\t\t} \n\t$F12039 ( len , html ) if ( len >= length ) $F356 ( html ) $F1200 ( sb ) $F1212 ( sb , html ) for ( int i = INT00 ; \n\ti < length - len ; \n\ti ++ ) $F8284 ( sb , SPACE ) $F1226 ( sb ) } \n"}, {"code": "$F57800 $F5446012 public static CacheBuilder $F38765 from ( String spec ) { \n\treturn from ( $F42850 ( CacheBuilderSpec , spec ) ) ; \n\t} \n"}, {"code": "$F5446012 CacheBuilder $F28644 keyEquivalence ( Equivalence $F282 equivalence ) { \n\tcheckState ( keyEquivalence == null , STRING00 , keyEquivalence ) ; \n\t$F10937 ( keyEquivalence , checkNotNull , equivalence ) return this ; \n\t} \n"}, {"code": "$F5446012 CacheBuilder $F28644 valueEquivalence ( Equivalence $F282 equivalence ) { \n\tcheckState ( valueEquivalence == null , STRING00 , valueEquivalence ) ; \n\tthis . valueEquivalence = checkNotNull ( equivalence ) ; \n\treturn this ; \n\t} \n"}, {"code": "final boolean select ( int extension , ExplorationStep state ) throws WrongFirstParentException { \n\tif ( this . allowExploration ( extension , state ) ) { \n\t\treturn ( this . next == null || this . next . select ( extension , state ) ) ; \n\t\t} \n\telse { \n\t\tPLCMCounters key = this . getCountersKey ( ) ; \n\t\tif $F268 ( key ) { \n\t\t\t( ( PLCM . PLCMThread ) $F3534 ( Thread ) ) . counters [ $F83285 ( key ) ] ++ ; \n\t\t\t} \n\t\t$F213 } \n\t} \n"}, {"code": "final Selector append ( Selector s ) { \n\tif ( this . next == null ) { \n\t\treturn $F106730 ( this , s ) ; \n\t\t} \n\telse { \n\t\treturn this . copy ( this . next . append ( s ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F3215 Retryer $F3215 of ( Callable $F3215 target ) { \n\treturn new Retryer $F3215 ( target ) ; \n\t} \n"}, {"code": "public Retryer $F3215 timeout $F59368 ( duration , timeUnit ) $F22720 ( timeout , duration , timeUnit ) "}, {"code": "public Retryer $F3215 timeout ( long duration , TimeUnit timeUnit , ExecutorService executor ) { \n\treturn timeout ( null == executor ? new SimpleTimeLimiter $F2 : new SimpleTimeLimiter ( executor ) , duration , timeUnit ) ; \n\t} \n"}, {"code": "public Retryer $F3215 timeout ( final TimeLimiter timeLimiter , final long duration , final TimeUnit timeUnit ) { \n\treturn withTimelimiter ( new AttemptTimelimit $F3215 $F2 { \n\t\t$F1 public R call ( Callable $F3215 callable ) throws Exception { \n\t\t\treturn $F2754 ( checkNotNull , timeLimiter ) . callWithTimeout ( callable , duration , checkNotNull ( timeUnit ) , true ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 retryIfException ( final Predicate $F61632 decision ) { \n\trejection = or ( rejection , new Predicate < Tried $F3215 > $F2 { \n\t\t$F1 public boolean apply ( Tried $F3215 input ) { \n\t\t\treturn input . hasCause ( ) ? decision . apply ( $F6278 ( input ) ) : false ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn this ; \n\t} \n"}, {"code": "public Retryer $F3215 retryIfResult ( final Predicate $F3215 decision ) { \n\trejection = or ( rejection , new Predicate < Tried $F3215 > $F2 { \n\t\t$F1 public boolean apply ( Tried $F3215 input ) { \n\t\t\treturn input . hasResult ( ) ? decision . apply ( $F115961 ( input ) ) : false ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn this ; \n\t} \n"}, {"code": "public R call ( Callable $F3215 callable ) throws ExecutionException , RetryException { \n\treturn this . delegate ( callable ) . call ( ) ; \n\t} \n"}, {"code": "public R quietCall $F2 { \n\ttry $F24895 ( call ) catch ( ExecutionException e ) $F428174 ( log , e ) catch ( RetryException e ) { \n\t\t$F345284 ( log , e ) } \n\t$F724 } \n"}, {"code": "public R call $F2 throws ExecutionException , RetryException { \n\t$F57820 ( elapsed ) TimeUnit unit = TimeUnit . MILLISECONDS ; \n\tStopwatch $F87131 ( watch , Stopwatch ) ; \n\tfor ( $F123525 ( attempt ) ) { \n\t\tTried $F3215 target = null ; \n\t\tif ( ! this . rejection . apply ( target = oneCall ( ) ) ) { \n\t\t\telapsed = $F7293 ( watch ) . elapsed ( unit ) ; \n\t\t\tif $F3507 ( log ) { \n\t\t\t\tlog . debug ( String . format ( STRING00 , target . hasResult ( ) ? STRING00 : STRING00 , attempt , elapsed ) ) ; \n\t\t\t\t} \n\t\t\t$F2974 ( target ) } \n\t\tif ( this . getStopStrategy ( ) . shouldStop ( attempt , watch . elapsed ( unit ) ) ) { \n\t\t\telapsed = $F7293 ( watch ) . elapsed ( unit ) ; \n\t\t\tif $F3507 ( log ) { \n\t\t\t\t$F919019 ( log , String , attempt , elapsed ) } \n\t\t\tthrow new RetryException ( attempt , target ) ; \n\t\t\t} \n\t\telse { \n\t\t\tlong sleepTime = this . getWaitStrategy ( ) . computeSleepTime ( attempt , watch . elapsed ( unit ) ) ; \n\t\t\ttry { \n\t\t\t\tthis . getBlockStrategy ( ) . block ( sleepTime ) ; \n\t\t\t\tif $F3507 ( log ) { \n\t\t\t\t\t$F919019 ( log , String , sleepTime , attempt ) } \n\t\t\t\t} \n\t\t\tcatch ( InterruptedException e ) { \n\t\t\t\t$F3537 ( Thread ) elapsed = $F7293 ( watch ) . elapsed ( unit ) ; \n\t\t\t\tif $F3507 ( log ) { \n\t\t\t\t\tlog . debug ( String . format ( $F287079 ( attempt , elapsed , e ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\tthrow new RetryException ( attempt , target ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Retryer $F3215 withStopStrategy ( StopStrategy stopStrategy ) { \n\tcheckState ( this . stopStrategy == null , STRING00 , this . stopStrategy ) ; \n\tthis . stopStrategy = $F2754 ( checkNotNull , stopStrategy ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Retryer $F3215 stopAfterAttempt $F63043 ( maxAttemptNumber ) { \n\tcheckArgument ( maxAttemptNumber >= INT00 , STRING00 , maxAttemptNumber ) ; \n\treturn withStopStrategy ( new StopStrategy $F2 { \n\t\t$F1 public boolean shouldStop $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\treturn previousAttemptNumber >= maxAttemptNumber ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 stopAfterDelay $F226825 ( delayInMillis ) { \n\tcheckArgument ( delayInMillis >= NUM00 , STRING00 , delayInMillis ) ; \n\treturn withStopStrategy ( new StopStrategy $F2 { \n\t\t$F1 public boolean shouldStop $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\treturn delaySinceFirstAttemptInMillis >= delayInMillis ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 withWaitStrategy ( WaitStrategy waitStrategy ) { \n\t( this . waitStrategy = ( this . waitStrategy . isPresent ( ) ? this . waitStrategy : Optional . of ( new CompositeWaitStrategy $F2 ) ) ) . get ( ) . put ( $F2754 ( checkNotNull , waitStrategy ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Retryer $F3215 fixedWait $F59368 ( sleepTime , timeUnit ) { \n\twithWaitStrategy ( fixedWaitStrategy ( $F2754 ( checkNotNull , timeUnit ) . toMillis ( sleepTime ) ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Retryer $F3215 randomWait $F59368 ( maximum , timeUnit ) { \n\treturn randomWait ( NUM00 , checkNotNull ( timeUnit ) . toMillis ( maximum ) ) ; \n\t} \n"}, {"code": "public Retryer $F3215 randomWait ( long minimum , TimeUnit minUnit , long maximum , TimeUnit maxUnit ) { \n\treturn randomWait ( checkNotNull ( minUnit ) . toMillis ( minimum ) , checkNotNull ( maxUnit ) . toMillis ( maximum ) ) ; \n\t} \n"}, {"code": "public Retryer $F3215 randomWait $F157091 ( minimum , maximum ) { \n\tcheckArgument ( minimum >= INT00 , STRING00 , minimum ) ; \n\tcheckArgument ( maximum > minimum , STRING00 , maximum , minimum ) ; \n\tfinal Random $F114716 ( random ) ; \n\treturn withWaitStrategy ( new WaitStrategy $F2 { \n\t\t$F1 public long computeSleepTime $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\tlong t = Math . abs ( $F590395 ( random ) ) % ( maximum - minimum ) ; \n\t\t\treturn t + minimum ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 incrementingWait ( long initialSleepTime , TimeUnit initialSleepUnit , long increment , TimeUnit incrementUnit ) { \n\treturn incrementingWait ( checkNotNull ( initialSleepUnit ) . toMillis ( initialSleepTime ) , checkNotNull ( incrementUnit ) . toMillis ( increment ) ) ; \n\t} \n"}, {"code": "public Retryer $F3215 incrementingWait $F157091 ( initialSleepTime , increment ) { \n\tcheckArgument ( initialSleepTime >= NUM00 , STRING00 , initialSleepTime ) ; \n\treturn withWaitStrategy ( new WaitStrategy $F2 { \n\t\t$F1 public long computeSleepTime $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\tlong result = initialSleepTime + ( $F266447 ( increment , previousAttemptNumber ) ) ; \n\t\t\treturn result >= NUM00 ? result : NUM00 ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 exponentialWait ( long multiplier , long maximumTime , TimeUnit maximumUnit ) { \n\treturn exponentialWait ( multiplier , checkNotNull ( maximumUnit ) . toMillis ( maximumTime ) ) ; \n\t} \n"}, {"code": "public Retryer $F3215 exponentialWait $F157091 ( multiplier , maximumWait ) { \n\tcheckArgument ( multiplier > NUM00 , STRING00 , multiplier ) ; \n\tcheckArgument ( maximumWait >= NUM00 , STRING00 , maximumWait ) ; \n\tcheckArgument ( multiplier < maximumWait , STRING00 , multiplier ) ; \n\treturn withWaitStrategy ( new WaitStrategy $F2 { \n\t\t$F1 public long computeSleepTime $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\tdouble exp = $F226826 ( Math , previousAttemptNumber ) ; \n\t\t\tlong result = $F1257907 ( Math , multiplier , exp ) ; \n\t\t\t$F122064 ( result , maximumWait ) return result >= NUM00 ? result : NUM00 ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 fibonacciWait $F157091 ( multiplier , maximumWait ) { \n\treturn withWaitStrategy ( new WaitStrategy $F2 { \n\t\t$F1 public long computeSleepTime $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) { \n\t\t\tlong $F15119 ( fib , previousAttemptNumber ) ; \n\t\t\t$F242690 ( result , multiplier , fib ) if ( result > maximumWait || result < NUM00 ) $F1619 ( result , maximumWait ) return result >= NUM00 ? result : NUM00 ; \n\t\t\t} \n\t\tprivate long fib ( long n ) { \n\t\t\tif $F64922 ( n ) $F37376 if $F64922 ( n ) $F37376 $F58269 ( prevPrev ) $F58269 ( prev ) $F58269 ( result ) for ( long i = NUM00 ; \n\t\t\ti <= n ; \n\t\t\ti ++ ) { \n\t\t\t\tresult = prev + prevPrev ; \n\t\t\t\tprevPrev = prev ; \n\t\t\t\tprev = result ; \n\t\t\t\t} \n\t\t\treturn result ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Retryer $F3215 withBlockStrategy ( BlockStrategy blockStrategy ) { \n\tcheckState ( this . blockStrategy == null , STRING00 , this . blockStrategy ) ; \n\tthis . blockStrategy = $F2754 ( checkNotNull , blockStrategy ) ; \n\treturn this ; \n\t} \n"}, {"code": "public AttemptTimelimit $F3215 getTimelimiter $F2 { \n\treturn this . tryTimeout = ( null == this . tryTimeout ? new AttemptTimelimit $F3215 $F2 { \n\t\t$F1 public R call ( Callable $F3215 callable ) throws Exception { \n\t\t\treturn checkNotNull ( callable ) . call ( ) ; \n\t\t\t} \n\t\t} \n\t: this . tryTimeout ) ; \n\t} \n"}, {"code": "public StopStrategy getStopStrategy $F2 { \n\treturn this . stopStrategy = ( null == this . stopStrategy ? new StopStrategy $F2 { \n\t\t$F1 public boolean shouldStop $F13650 ( previousAttemptNumber , delaySinceFirstAttemptInMillis ) $F1668 } \n\t: this . stopStrategy ) ; \n\t} \n"}, {"code": "public BlockStrategy getBlockStrategy $F2 { \n\treturn this . blockStrategy = ( null == this . blockStrategy ? new BlockStrategy $F2 { \n\t\t$F1 public void block ( long sleepTime ) throws InterruptedException $F12419 ( Thread , sleepTime ) } \n\t: this . blockStrategy ) ; \n\t} \n"}, {"code": "public Retryer $F3215 reset $F2 { \n\tthis . tryTimeout = null ; \n\tthis . stopStrategy = null ; \n\tthis . blockStrategy = null ; \n\tthis . rejection = alwaysFalse ( ) ; \n\tthis . waitStrategy = $F59070 ( Optional ) ; \n\treturn this ; \n\t} \n"}, {"code": "protected boolean included ( String url ) { \n\tfor ( final Pattern urlPattern : this . includedUrls ) { \n\t\t$F231081 ( matcher , urlPattern , url ) if $F154963 ( matcher ) { \n\t\t\tif $F16928 ( this ) { \n\t\t\t\t$F16929 ( this ) ( STRING00 + $F745107 ( urlPattern ) + STRING00 + url ) ; \n\t\t\t\t} \n\t\t\t$F232 } \n\t\t} \n\t$F213 } \n"}, {"code": "protected boolean excluded ( String url ) { \n\tfor ( final Pattern urlPattern : this . excludedUrls ) { \n\t\t$F231081 ( matcher , urlPattern , url ) if $F154963 ( matcher ) { \n\t\t\tif $F16928 ( this ) { \n\t\t\t\t$F16929 ( this ) ( STRING00 + $F745107 ( urlPattern ) + STRING00 + url ) ; \n\t\t\t\t} \n\t\t\t$F232 } \n\t\t} \n\t$F213 } \n"}, {"code": "public static void loadDocument ( String xml , String xsd , DOMHandler handler ) throws IOException , InvalidArgumentException , SAXException , ParserConfigurationException , Exception $F12602 ( loadDocument , xml , xsd , handler , DEFAULT_VALIDATE_XML ) "}, {"code": "public static void loadDocument ( String xml , String xsd , DOMHandler handler , boolean validate ) throws IOException , InvalidArgumentException , SAXException , ParserConfigurationException , Exception { \n\tURL xmlUrl = URLFactory . makeURL ( xml ) ; \n\tURL xsdUrl = URLFactory . makeURL ( xsd ) ; \n\t$F12601 ( loadDocument , xmlUrl , xsdUrl , handler , validate ) } \n"}, {"code": "public static void loadDocument ( URL xml , URL xsd , DOMHandler handler , boolean validate ) throws IOException , InvalidArgumentException , SAXException , ParserConfigurationException , Exception { \n\tif $F7430 ( xml , xsd ) { \n\t\t$F15466 ( logger ) $F3381520 } \n\ttry ( $F5160 ( xmlStream , xml ) ; \n\t$F5160 ( xsdStream , xsd ) ) { \n\t\tif $F112 ( xmlStream ) { \n\t\t\tlogger . warn ( STRING00 , $F41939 ( xml ) ) ; \n\t\t\t$F3381520 } \n\t\t$F117558 ( factory , DocumentBuilderFactory ) factory . setValidating ( validate ) ; \n\t\tfactory . setIgnoringElementContentWhitespace ( true ) ; \n\t\t$F356661 ( factory ) if $F112 ( xsdStream ) { \n\t\t\tlogger . warn ( STRING00 , $F41939 ( xsd ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F42520 ( logger ) SchemaFactory schemaFactory = SchemaFactory . newInstance ( XMLConstants . W3C_XML_SCHEMA_NS_URI ) ; \n\t\t\tSchema schema = schemaFactory . newSchema ( $F628855 ( xsdStream ) ) ; \n\t\t\t$F37367 ( factory , schema ) } \n\t\t$F356672 ( builder , factory ) builder . setErrorHandler ( new ParserErrorHandler $F2 ) ; \n\t\t$F476657 ( document , builder , xmlStream ) $F356703 ( document ) . normalize ( ) ; \n\t\t$F42520 ( logger ) if $F268 ( handler ) { \n\t\t\thandler . onDocument ( document ) ; \n\t\t\t$F42520 ( logger ) } \n\t\t} \n\tcatch ( DOMHandlerException e ) { \n\t\t$F5572 ( logger , e ) throw ( Exception ) $F6278 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void filter ( Record record , Writer writer ) throws $F10627 { \n\tRecord emitRecord = new Record $F2 ; \n\tfor ( $F2674 ( i , joinColumn ) ) { \n\t\temitRecord . addGrouping ( STRING00 + i , record . getValueString ( joinColumn [ i ] ) ) ; \n\t\t} \n\temitRecord . addSort ( INT00 , Record . SORT_LOWER , INT00 ) ; \n\tfor ( String s : masterLabels ) { \n\t\temitRecord . addValue ( s , record . getValueString ( s ) ) ; \n\t\t} \n\t$F21494 ( writer , emitRecord ) } \n"}, {"code": "$F1 public void filterSetup $F2 { \n\tint type = getIntParameter ( SimpleJob . READER_TYPE ) ; \n\tif ( type == SimpleJob . SINGLE_COLUMN_JOIN_READER ) { \n\t\t$F647711 ( joinColumn ) joinColumn [ INT00 ] = getStringParameter ( SimpleJob . JOIN_MASTER_COLUMN ) ; \n\t\t} \n\telse if ( type == SimpleJob . SOME_COLUMN_JOIN_READER ) { \n\t\tjoinColumn = getStringsParameter ( SimpleJob . JOIN_MASTER_COLUMN ) ; \n\t\t} \n\tmasterLabels = getStringsParameter ( SimpleJob . MASTER_LABELS ) ; \n\t} \n"}, {"code": "$F1 public ImmutableSet < Instrument > instruments $F2 { \n\treturn $F2704 ( FluentIterable , instrumentations ) . transform ( new Function < Instrumentation , Instrument > $F2 { \n\t\t$F1 public Instrument apply ( Instrumentation input ) { \n\t\t\treturn input . instrument ( ) ; \n\t\t\t} \n\t\t} \n\t) . toSet ( ) ; \n\t} \n"}, {"code": "public static void inject ( Injector . Configuration config ) { \n\t$F24610 ( millis , System ) if ( ProfileService . getInstance ( $F20708 ( config ) ) . isActive ( $F20708 ( config ) , Profile . INJECTION ) ) { \n\t\tExplicitInjectors . CONFIGURATION . inject ( config ) ; \n\t\tExplicitInjectors . LAYOUT . inject ( config ) ; \n\t\tif ( config . getInjectionMode ( ) . equals ( InjectionMode . EXPLICIT ) ) { \n\t\t\tInjectionUtils . injectExplicitly ( config ) ; \n\t\t\t} \n\t\telse { \n\t\t\tInjectionUtils . injectImplicitly ( config ) ; \n\t\t\t} \n\t\t} \n\tmillis = $F24611 ( System , millis ) ; \n\tLog . i ( STRING00 , InjectionUtils . class . getClass ( ) . getSimpleName ( ) + STRING00 + millis + STRING00 ) ; \n\t} \n"}, {"code": "private static void injectExplicitly ( Injector . Configuration config ) { \n\tExplicitInjectors . APPLICATION . inject ( config ) ; \n\tExplicitInjectors . RESOURCES . inject ( config ) ; \n\tExplicitInjectors . SYSTEM_SERVICES . inject ( config ) ; \n\tExplicitInjectors . ICKLE_SERVICES . inject ( config ) ; \n\tExplicitInjectors . POJOS . inject ( config ) ; \n\t} \n"}, {"code": "private static void injectImplicitly ( Injector . Configuration config ) { \n\tImplicitInjectors . APPLICATION . inject ( config ) ; \n\tImplicitInjectors . RESOURCES . inject ( config ) ; \n\tImplicitInjectors . SYSTEM_SERVICES . inject ( config ) ; \n\tImplicitInjectors . ICKLE_SERVICES . inject ( config ) ; \n\tImplicitInjectors . POJOS . inject ( config ) ; \n\t} \n"}, {"code": "$F1 public ImmutableSet $F58198 entries $F2 { \n\tImmutableSet $F58198 result = entries ; \n\treturn $F112 ( result ) ? ( entries = new EntrySet $F28644 ( this ) ) : result ; \n\t} \n"}, {"code": "private void evaluateDeferredAfterMaskUpdate $F2 { \n\tfinal Iterator < DeferredAction $F70275 > it = this . deferred . iterator ( ) ; \n\twhile $F11310 ( it ) { \n\t\tfinal DeferredAction $F70275 $F11312 ( d , it ) ; \n\t\tif ( $F11721 ( masks ) ( p - > p . test ( d . metadata ) ) ) $F42718 $F16605 ( it ) d . runnable . run ( ) ; \n\t\t} \n\t} \n"}, {"code": "private $F1372 DeferredAction $F70275 deferAction ( final M metadata , final Supplier < ? extends $F501188 > action , final $F226489 future ) { \n\treturn new DeferredAction $F50 ( metadata , ( ) - > <missing ';'> { \n\t\tfinal CompletionStage $F8941 resultFuture ; \n\t\ttry $F213196 ( resultFuture , action ) catch ( final Exception e ) { \n\t\t\t$F208547 ( future , e ) markProcessed ( metadata ) ; \n\t\t\t$F254 } \n\t\tresultFuture . handleAsync ( <missing ')'> ( result , e ) - > <missing ';'> { \n\t\t\tif $F268 ( e ) $F208548 ( future , e ) else $F220461 ( future , result ) markProcessed ( metadata ) ; \n\t\t\t$F724 } \n\t\t, $F210250 ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "private void markProcessed ( final M metadata ) { \n\tsynchronized ( processedLock ) { \n\t\t$F528 ( processed , metadata ) $F528 ( onceProcessed , metadata ) $F212970 ( processedLock ) } \n\t} \n"}, {"code": "public boolean join $F2 { \n\tMessage joinMessage = new Message ( MessageType . JOIN , this . channelName ) ; \n\t$F440981 response ; \n\ttry { \n\t\tresponse = connection . request ( MessageFilters . message ( MessageType . RPL_NAMREPLY , null , STRING00 , channelName ) , MessageFilters . message ( MessageType . RPL_ENDOFNAMES , null , channelName ) , joinMessage ) ; \n\t\t} \n\tcatch ( InterruptedException e ) $F1668 $F95965 ( names ) for ( Message message : response ) { \n\t\tif ( $F511 ( message ) == MessageType . RPL_NAMREPLY ) { \n\t\t\t$F21 $F2095 ( args , message ) ; \n\t\t\tfor ( String name : $F12388 ( args ) . split ( STRING00 ) ) { \n\t\t\t\tnames . add ( $F184221 ( name ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1357 ( this , names ) $F232 } \n"}, {"code": "$F1 public void part ( String reason ) { \n\tMessage partMessage = new Message ( MessageType . PART , this . channelName , reason ) ; \n\tthis . client . getConnection ( ) . send ( partMessage ) ; \n\tthis . joined = $F47517 ; \n\t} \n"}, {"code": "$F1 public void write ( String text ) { \n\tMessage privMessage = new Message ( MessageType . PRIVMSG , this . channelName , text ) ; \n\tthis . client . getConnection ( ) . send ( privMessage ) ; \n\t} \n"}, {"code": "$F1 public void writeMultiple $F996 ( strings ) { \n\tMessage [ ] privMessages = new Message $F13558 ( strings ) ; \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tprivMessages [ i ] = new Message ( MessageType . PRIVMSG , this . channelName , strings [ i ] ) ; \n\t\t} \n\tthis . client . getConnection ( ) . send ( privMessages ) ; \n\t} \n"}, {"code": "public void refreshNames $F2 { \n\tMessage namesMessage = new Message ( MessageType . NAMES , this . channelName ) ; \n\t$F440981 response ; \n\ttry { \n\t\tresponse = connection . request ( MessageFilters . message ( MessageType . RPL_NAMREPLY , null , STRING00 , channelName ) , MessageFilters . message ( MessageType . RPL_ENDOFNAMES , null , channelName ) , namesMessage ) ; \n\t\t} \n\tcatch ( InterruptedException e ) $F255 $F95965 ( names ) for ( Message message : response ) { \n\t\tif ( $F511 ( message ) == MessageType . RPL_NAMREPLY ) { \n\t\t\t$F21 $F2095 ( args , message ) ; \n\t\t\tfor ( String name : $F12388 ( args ) . split ( STRING00 ) ) { \n\t\t\t\tnames . add ( $F184221 ( name ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1357 ( this , names ) } \n"}, {"code": "private static String getRandomString ( int length , $F2666 chars ) throws IllegalArgumentException { \n\tif $F2523 ( length ) $F59567 ( length ) if $F44788 ( chars ) $F24431 $F1200 ( sb ) $F114718 ( random ) for ( $F6610 ( i , length ) ) { \n\t\tchar c = $F289594 ( chars , random ) ; \n\t\t$F1212 ( sb , c ) } \n\t$F1226 ( sb ) } \n"}, {"code": "$F1 protected boolean isAllowed ( HttpServletRequest request ) { \n\tHttpSession session = $F1316230 ( getRequest ) ( false ) ; \n\t$F88441 ( session ) String sessionToken = $F585773 ( session , SESSION_ATTR_CSRF_TOKEN ) ; \n\t$F602597 ( requestToken , request , CSRF_HEADER ) $F139439 ( Objects , sessionToken , requestToken ) } \n"}, {"code": "protected boolean handleOption ( String arg , String nextArg , OptionArgument handler ) throws YarrgParseException { \n\tcheckState ( handler != null , $F320 ( arg ) ) ; \n\tif ( handler instanceof ValueOptionArgument ) { \n\t\tcheckState ( nextArg != null , $F320 ( arg ) ) ; \n\t\t$F564 ( parse , nextArg , handler ) $F232 } \n\telse if ( handler instanceof HelpArgument ) { \n\t\tthrow new YarrgHelpException ( _usage , _detail ) ; \n\t\t} \n\telse { \n\t\t$F62615 ( parse , handler ) $F213 } \n\t} \n"}, {"code": "protected void parse ( String arg , Argument argDesc ) throws YarrgParseException { \n\tParser $F45 parser = parsers . get ( argDesc . field ) ; \n\tif $F112 ( parser ) { \n\t\tparser = _cmd . _factory . createParser ( argDesc . field ) ; \n\t\tparsers . put ( argDesc . field , parser ) ; \n\t\t} \n\ttry $F529 ( parser , arg ) catch ( RuntimeException e ) { \n\t\tthrow new YarrgParseException ( $F130484 ( _usage , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String expression , Object ... arguments ) throws TemplateException { \n\tif $F6132 ( expression ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tSet < Attr > syntheticAttributes = new HashSet < Attr > $F2 ; \n\tPairsList pairs = new PairsList ( expression ) ; \n\tfor ( Pair pair : pairs ) { \n\t\tString value = content . getString ( scope , $F1048578 ( pair ) ) ; \n\t\tif $F268 ( value ) { \n\t\t\tsyntheticAttributes . add ( new AttrImpl ( $F30692 ( pair ) , value ) ) ; \n\t\t\t} \n\t\t} \n\treturn syntheticAttributes ; \n\t} \n"}, {"code": "private $F13110 filterURLs ( final $F13110 urls ) { \n\tfinal $F13110 results = new HashSet $F5708 $F4371 ( urls ) ; \n\tfor ( final URL url : urls ) { \n\t\t$F13374 ( cleanURL , url ) if ( $F5162 ( url ) . startsWith ( STRING00 ) ) { \n\t\t\t$F429074 ( cleanURL ) } \n\t\telse if ( $F5162 ( url ) . startsWith ( STRING00 ) ) { \n\t\t\t$F429074 ( cleanURL ) } \n\t\t$F429074 ( cleanURL ) try { \n\t\t\tresults . add ( $F10819 ( cleanURL ) ) ; \n\t\t\t} \n\t\tcatch ( final MalformedURLException ex ) $F1645 } \n\treturn results ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal Object value = values . popWhatever ( ) ; \n\t\tif $F4380 ( value ) { \n\t\t\tif ( $F153907 ( value ) . length ( ) == INT00 ) values . push ( new Long $F1415 ) ; \n\t\t\telse values . push ( Long . parseLong ( ( String ) value ) ) ; \n\t\t\t$F254 } \n\t\telse if $F199207 ( value ) { \n\t\t\tvalues . push ( new Long ( $F162264 ( value ) . longValue ( ) ) ) ; \n\t\t\t$F254 } \n\t\telse if $F184631 ( value ) { \n\t\t\t$F22657 ( values , value ) $F254 } \n\t\t$F22657 ( values , value ) } \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static int composite $F197107 ( foreground , background ) { \n\tdouble fA = getAlpha ( foreground ) / FLOAT00 ; \n\tdouble bA = getAlpha ( background ) / FLOAT00 ; \n\tif $F91972 ( bA ) return foreground ; \n\telse if $F91972 ( fA ) return background ; \n\tfinal double alphaA = $F118066 ( bA , fA ) ; \n\treturn getColor ( ( int ) ( INT00 * ( fA + alphaA ) ) , ( int ) ( fA * getRed ( foreground ) + alphaA * getRed ( background ) ) , ( int ) ( fA * getGreen ( foreground ) + alphaA * getGreen ( background ) ) , ( int ) ( fA * getBlue ( foreground ) + alphaA * getBlue ( background ) ) ) ; \n\t} \n"}, {"code": "public static int getColor ( final int alpha , final int red , final int green , final int blue ) { \n\treturn $F123317 ( alpha , ALPHA_SHIFT ) | $F123317 ( red , RED_SHIFT ) | $F123317 ( green , GREEN_SHIFT ) | blue ; \n\t} \n"}, {"code": "public JsonXOutput clear ( boolean clearBuffer ) { \n\tif ( clearBuffer ) tail = $F39335 ( head ) ; \n\tlastRepeated = false ; \n\tlastNumber = INT00 ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public void write $F9459 ( b , off , len ) throws IOException { \n\ttextArea . append ( $F174546 ( b , off , len ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > iterable ( Order order , LongTuple min , LongTuple max ) { \n\t$F2201 ( order ) Utils . checkForEqualSize ( min , max ) ; \n\tLongTuple $F233081 ( localMin , LongTuples , min ) ; \n\tLongTuple $F233081 ( localMax , LongTuples , max ) ; \n\t$F15270 $F15271 - > new LongTupleIterator ( localMin , localMax , LongTupleIncrementors . incrementor ( order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > lexicographicalIterable ( LongTuple max ) { \n\treturn iterable ( Order . LEXICOGRAPHICAL , LongTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > lexicographicalIterable ( LongTuple min , LongTuple max ) { \n\treturn iterable ( Order . LEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > colexicographicalIterable ( LongTuple max ) { \n\treturn iterable ( Order . COLEXICOGRAPHICAL , LongTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > colexicographicalIterable ( LongTuple min , LongTuple max ) { \n\treturn iterable ( Order . COLEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > wrappingIterable ( LongTuple bounds , final Iterable < ? extends MutableLongTuple > delegate ) { \n\t$F292612 ( Objects , delegate ) LongTuple $F233081 ( localBounds , LongTuples , bounds ) ; \n\t$F15270 $F15271 - > LongTupleIterators . wrappingIteratorInternal ( localBounds , $F16599 ( delegate ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableLongTuple > clampingIterable ( LongTuple min , LongTuple max , final Iterable < ? extends MutableLongTuple > delegate ) { \n\t$F292612 ( Objects , delegate ) LongTuple $F233081 ( localMin , LongTuples , min ) ; \n\tLongTuple $F233081 ( localMax , LongTuples , max ) ; \n\t$F15270 $F15271 - > LongTupleIterators . clampingIteratorInternal ( localMin , localMax , $F16599 ( delegate ) ) ; \n\t} \n"}, {"code": "public void writeAll ( java . util . List $F91991 allLines ) throws IOException { \n\topenWriter ( ) ; \n\tcsvWriter . writeAll ( allLines ) ; \n\t} \n"}, {"code": "public void close $F2 { \n\t$F438379 ( csvReader ) $F438379 ( csvWriter ) } \n"}, {"code": "public static final < S , E > Functional $F4230 functionalList ( $F67737 ( list ) ) { \n\treturn new FunctionalList < S , E > ( list ) ; \n\t} \n"}, {"code": "public static final < S , E > Functional $F4230 functionalSet ( $F26213 set ) { \n\treturn new FunctionalSet < S , E > ( set ) ; \n\t} \n"}, {"code": "public static final < S , K , V > Functional $F4230 functionalMap $F73990 ( map ) { \n\treturn new FunctionalMap < S , K , V > ( map ) ; \n\t} \n"}, {"code": "public static final < S , E > S forEach ( $F67737 ( list ) , S state , Fx < S , E > functor ) { \n\treturn new FunctionalList < S , E > ( list ) . forEach ( state , functor ) ; \n\t} \n"}, {"code": "public static final < S , E > S forEach ( $F26213 set , S state , Fx < S , E > functor ) { \n\treturn new FunctionalSet < S , E > ( set ) . forEach ( state , functor ) ; \n\t} \n"}, {"code": "public static final < S , K , V > S forEach ( $F61236 ( map ) , S state , Fx < S , $F58047 > functor ) { \n\treturn new FunctionalMap < S , K , V > ( map ) . forEach ( state , functor ) ; \n\t} \n"}, {"code": "public $F26212 S forEach ( Fx < S , E > functor ) $F126889 ( forEach , functor ) "}, {"code": "public static $F1372 Comparer $F1372 of ( $F28721 delegate ) { \n\treturn new Comparer $F1372 ( delegate ) ; \n\t} \n"}, {"code": "public static $F404 boolean expect ( C target , C ... expects ) { \n\tif $F107295 ( expects ) { \n\t\treturn null == target ; \n\t\t} \n\tfor ( C expect : expects ) { \n\t\t$F23159 ( expect , target ) } \n\t$F213 } \n"}, {"code": "public boolean any $F30965 ( targets ) { \n\tif $F107295 ( targets ) { \n\t\treturn null == this . delegate ; \n\t\t} \n\tfor ( Object target : targets ) { \n\t\tif $F107295 ( target ) { \n\t\t\tif ( null == this . delegate ) $F233 $F23605 } \n\t\tif ( target == this . delegate ) $F233 } \n\t$F213 } \n"}, {"code": "public boolean all $F30965 ( targets ) { \n\tif $F107295 ( targets ) { \n\t\treturn null == this . delegate ; \n\t\t} \n\tfor ( Object target : targets ) { \n\t\tif $F107295 ( target ) { \n\t\t\tif ( null != this . delegate ) $F1668 $F23605 } \n\t\tif ( target != this . delegate ) $F1668 } \n\t$F232 } \n"}, {"code": "public InputStream retrieveStream ( final String id , ByteTransferListener listener ) throws IOException { \n\t$F2508946 ( Assert , id ) $F1300613 ( inputStream , retrieve , id ) CountingInputStream countingInputStream = new CountingInputStream ( inputStream ) ; \n\tcountingInputStream . addByteTransferListener ( new ByteTransferListener $F2 { \n\t\tpublic void handleByteTransfer ( ByteTransferEvent event ) { \n\t\t\tbytesRead += event . getBytesSinceLastEvent ( ) ; \n\t\t\tlogger . trace ( event . getBytesSinceLastEvent ( ) + STRING00 + id + STRING00 + event . getBytesSinceBeginOfOperation ( ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\tif $F268 ( listener ) { \n\t\tcountingInputStream . addByteTransferListener ( listener ) ; \n\t\t} \n\tfilesRead ++ ; \n\treturn countingInputStream ; \n\t} \n"}, {"code": "public void in ( Object key , Box $F45 value , Integer type , Converter encoder ) { \n\tParameter parameter = new Parameter $F2 ; \n\t$F12201 ( parameter , value ) $F362631 ( parameter , type ) parameter . setEncoder ( encoder ) ; \n\t$F564 ( merge , key , parameter ) } \n"}, {"code": "public Box $F282 out ( Object key , int type , String struct , Converter decoder ) { \n\tParameter parameter = new Parameter $F2 ; \n\tparameter . setOutput ( new Box $F282 $F2 ) ; \n\t$F362631 ( parameter , type ) parameter . setStruct ( struct ) ; \n\tparameter . setDecoder ( decoder ) ; \n\treturn merge ( key , parameter ) . getOutput ( ) ; \n\t} \n"}, {"code": "public void parseAll ( Connection connection , Statement statement ) throws SQLException { \n\tfor ( $F75783 ( key , mappings ) ) { \n\t\tParameter $F199 ( parameter , mappings , key ) ; \n\t\tif ( $F11787 ( parameter ) != null ) { \n\t\t\tObject $F33796 ( output , statement , key ) ; \n\t\t\tConverter decoder = $F253165 ( parameter ) ; \n\t\t\tif $F268 ( decoder ) { \n\t\t\t\toutput = decoder . perform ( connection , output ) ; \n\t\t\t\t} \n\t\t\t$F11787 ( parameter ) . setValue ( output ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void setupAll ( Connection connection , Statement statement ) throws SQLException { \n\tfor ( $F75783 ( key , mappings ) ) { \n\t\tParameter $F199 ( parameter , mappings , key ) ; \n\t\tif ( $F212796 ( parameter ) != null ) { \n\t\t\tObject value = $F212796 ( parameter ) . getValue ( ) ; \n\t\t\tConverter encoder = $F253162 ( parameter ) ; \n\t\t\tif $F268 ( encoder ) { \n\t\t\t\tvalue = encoder . perform ( connection , value ) ; \n\t\t\t\t} \n\t\t\tstatement . in ( key , value , $F511 ( parameter ) ) ; \n\t\t\t} \n\t\tif ( $F11787 ( parameter ) != null ) { \n\t\t\tInteger $F2251 ( sqlType , parameter ) ; \n\t\t\tString structName = parameter . getStruct ( ) ; \n\t\t\tstatement . out ( key , sqlType , structName ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F96 convertRequestToMap ( HttpServletRequest request ) throws IOException , ServletException , JSONFormatException { \n\t$F448399 ( inParams ) $F477277 ( q , request ) if ( ! org . s1 . objects . Objects . isNullOrEmpty ( q ) ) { \n\t\t$F30789 ( arr , q ) for ( String it : arr ) { \n\t\t\tString nv [ ] = $F2495 ( it ) ; \n\t\t\t$F26395 ( n , nv ) $F4728 ( v ) if $F5678 ( nv ) { \n\t\t\t\t$F83675 ( v , nv ) try { \n\t\t\t\t\tv = $F35353 ( URLDecoder , v ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( UnsupportedEncodingException e ) $F6096546 ( S1SystemError , e ) } \n\t\t\tif $F8962 ( PARAMS_PARAMETER , n ) { \n\t\t\t\tinParams . putAll ( Objects . fromWire ( JSONFormat . evalJSON ( v ) ) ) ; \n\t\t\t\t} \n\t\t\telse $F2726 ( inParams , n , v ) } \n\t\t} \n\tif ( $F11800 ( request ) != null && $F11800 ( request ) . contains ( STRING00 ) ) { \n\t\tString s = IOUtils . toString ( $F7587 ( request ) , STRING00 ) ; \n\t\tinParams = JSONFormat . evalJSON ( s ) ; \n\t\t} \n\telse if ( $F11800 ( request ) != null && $F11800 ( request ) . contains ( STRING00 ) ) { \n\t\tIterator < $F101070 > it = $F380419 ( request ) . entrySet ( ) . iterator ( ) ; \n\t\twhile $F11310 ( it ) { \n\t\t\t$F101070 $F11312 ( e , it ) ; \n\t\t\tString v = STRING00 + $F269 ( e ) [ INT00 ] ; \n\t\t\t$F99456 ( inParams , e , v ) } \n\t\t} \n\telse if ( $F11800 ( request ) != null && $F11800 ( request ) . contains ( STRING00 ) ) { \n\t\tfor ( Part p : request . getParts ( ) ) { \n\t\t\tif ( $F11800 ( p ) != null ) { \n\t\t\t\tif ( $F44042 ( p ) ) $F23605 $F2250 ( name , p ) for ( String content : $F51310 ( p ) . split ( STRING00 ) ) { \n\t\t\t\t\tif ( $F478756 ( content ) ) { \n\t\t\t\t\t\tname = $F428484 ( content ) . trim ( ) . replace ( $F1286 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F19733 ( ext ) $F6990 ( ei , name ) if ( ei != $F3745 && $F48427 ( ei , name ) ) { \n\t\t\t\t\t$F19735 ( ext , name , ei ) $F19737 ( name , ei ) } \n\t\t\t\tinParams . put ( $F507 ( p ) , new FileParameter ( $F7587 ( p ) , name , ext , $F11800 ( p ) , $F1976 ( p ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tinParams . put ( $F507 ( p ) , IOUtils . toString ( $F7587 ( p ) , STRING00 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tinParams = Objects . fromWire ( inParams ) ; \n\treturn inParams ; \n\t} \n"}, {"code": "public static $F96 errorToMap ( Throwable e ) { \n\t$F448399 ( m ) $F477922 ( m , MDC ) m . put ( $F4298 ( e ) ) ; \n\tm . put ( $F6292 ( e ) ) ; \n\treturn m ; \n\t} \n"}, {"code": "static IntStream stream ( IntTuple tuple , int startInclusive , int endExclusive ) { \n\tIntTupleSpliterator intTupleSpliterator = new IntTupleSpliterator $F2144 ( tuple , startInclusive , endExclusive ) ; \n\treturn StreamSupport . intStream ( intTupleSpliterator , false ) ; \n\t} \n"}, {"code": "public synchronized AuthStorage getStorage $F2 { \n\tif $F112 ( storage ) { \n\t\tString cls = Objects . get ( config , STRING00 , LogStorage . class . getName ( ) ) ; \n\t\ttry { \n\t\t\tstorage = ( AuthStorage ) $F45914 ( Class , cls ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) $F6096546 ( S1SystemError , e ) } \n\treturn storage ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal String tableName = values . popString ( ) ; \n\t\tfinal $F21 $F235536 ( keys ) ; \n\t\tfor ( int a = INT00 ; \n\t\ta < $F62155 ( getParameterCount ) ; \n\t\ta ++ ) keys [ a ] = values . popString ( ) ; \n\t\tfinal EquationSupport model = getEqu ( ) . getSupport ( ) ; \n\t\t$F100768 ( rate ) rate = model . resolveRate ( tableName , getEqu ( ) . getBaseDate ( ) , keys [ INT00 ] , keys [ INT00 ] , keys [ INT00 ] , keys [ INT00 ] , keys [ INT00 ] ) ; \n\t\tvalues . push ( $F242331 ( rate ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void connectionReleased ( IManagedConnectionEvent $F404 event ) { \n\tIPhynixxManagedConnection $F404 proxy = event . getManagedConnection ( ) ; \n\t$F221777 ( LOG , proxy ) } \n"}, {"code": "public ResponseBuilder setResource $F678307 ( res ) { \n\t$F70668 ( baseUrl , getBaseUrl ) final String identifier = baseUrl + $F251039 ( req ) + $F2515 ( req ) + ( ACL . equals ( req . getExt ( ) ) ? STRING00 : STRING00 ) ; \n\t$F349304 ( ofNullable , res ) ( $F324393 ( r , checkResourceCache , identifier ) ) ; \n\tfinal Session session = ofNullable ( $F49732 ( req ) ) . orElseGet ( HttpSession : : <missing ';'> $F2714 final Optional < RDFSyntax > rdfSyntax = ofNullable ( $F11800 ( req ) ) . flatMap ( RDFSyntax : : <missing ';'> byMediaType ) . $F161 ( filter , SUPPORTED_RDF_TYPES ) contains ) ; \n\tif $F540 ( isAclAndNonRdfContent , rdfSyntax ) $F3342 ( status , NOT_ACCEPTABLE ) $F129732 ( LOGGER , identifier ) final IRI heuristicType = nonNull ( $F11800 ( req ) ) && $F34249 ( rdfSyntax ) ? LDP . NonRDFSource : LDP . RDFSource ; \n\tfinal IRI defaultType = $F482749 ( ofNullable , res , Resource ) <missing ';'> getInteractionModel ) . orElse ( heuristicType ) ; \n\tfinal IRI ldpType = ofNullable ( $F3159941 ( req ) ) . filter ( l - $F1383 . equals ( $F7827925 ( l ) ) ) . map ( Link : : <missing ';'> getUri ) . $F161 ( map , URI ) $F13932 filter ( l - > l . startsWith ( LDP . URI ) ) . map ( rdf : : <missing ';'> createIRI ) . filter ( l - > ! LDP . Resource . equals ( l ) ) . orElse ( defaultType ) ; \n\tif ( nonNull ( res ) && ! ldpResourceTypes ( ldpType ) . anyMatch ( res . getInteractionModel ( ) : : equals ) ) { \n\t\treturn status ( CONFLICT ) . entity ( STRING00 + ldpType ) . type ( TEXT_PLAIN ) ; \n\t\t} \n\tfinal IRI internalId = rdf . createIRI ( TRELLIS_PREFIX + $F251039 ( req ) + $F2515 ( req ) ) ; \n\ttry ( final TrellisDataset dataset = TrellisDataset . createDataset ( ) ) { \n\t\tfinal IRI graphName = getActiveGraphName ( ) ; \n\t\tfinal IRI otherGraph = getInactiveGraphName ( ) ; \n\t\taudit . map ( $F209 ( addAuditQuads , res , internalId , session ) ) . ifPresent ( q - $F50367 ( q ) . map ( skolemizeQuads ( resourceService , baseUrl ) ) . forEachOrdered ( dataset : : add ) ) ; \n\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , internalId , RDF . type , ldpType ) ) ; \n\t\tif $F30198 ( rdfSyntax ) { \n\t\t\treadEntityIntoDataset ( identifier , baseUrl , graphName , $F144 ( rdfSyntax ) , dataset ) ; \n\t\t\tcheckConstraint ( dataset , PreferUserManaged , ldpType , baseUrl , $F144 ( rdfSyntax ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tfinal Digest digest = $F524366 ( req ) ; \n\t\t\tif ( nonNull ( digest ) && ! $F34166 ( getDigestForEntity , digest ) ( $F524366 ( digest ) ) ) $F3342 ( status , BAD_REQUEST ) final $F4357 metadata = singletonMap ( CONTENT_TYPE , ofNullable ( $F11800 ( req ) ) . orElse ( APPLICATION_OCTET_STREAM ) ) ; \n\t\t\tfinal IRI binaryLocation = rdf . createIRI ( binaryService . getIdentifierSupplier ( $F251039 ( req ) ) . get ( ) ) ; \n\t\t\t$F564 ( persistContent , binaryLocation , metadata ) dataset . add ( rdf . createQuad ( PreferServerManaged , internalId , DC . hasPart , binaryLocation ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . modified , rdf . createLiteral ( $F24743 ( now ) , XSD . dateTime ) ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . format , rdf . createLiteral ( ofNullable ( $F11800 ( req ) ) . orElse ( APPLICATION_OCTET_STREAM ) ) ) ) ; \n\t\t\tdataset . add ( rdf . createQuad ( PreferServerManaged , binaryLocation , DC . extent , rdf . createLiteral ( Long . toString ( $F1203 ( entity ) ) , XSD . long_ ) ) ) ; \n\t\t\t} \n\t\tif $F540 ( nonNull , res ) { \n\t\t\ttry ( final Stream < ? extends Triple > remaining = $F3020 ( res , otherGraph ) ) { \n\t\t\t\tremaining . map ( t - > rdf . createQuad ( otherGraph , $F5000 ( t ) , $F1178762 ( t ) , $F463 ( t ) ) ) . forEachOrdered ( dataset : : <missing ';'> $F6641 ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( resourceService . put ( internalId , dataset . asDataset ( ) ) ) { \n\t\t\tfinal ResponseBuilder builder = status ( NO_CONTENT ) ; \n\t\t\t$F482749 ( ldpResourceTypes , ldpType , IRI ) <missing ';'> getIRIString ) . forEach ( type - > builder . link ( type , STRING00 ) ) ; \n\t\t\treturn builder ; \n\t\t\t} \n\t\t} \n\tLOGGER . error ( STRING00 , internalId . getIRIString ( ) ) ; \n\treturn serverError ( ) . type ( TEXT_PLAIN ) . entity ( STRING00 ) ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws IOException , TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tElement $F1746875 ( itemTemplate , element ) ; \n\tif $F112 ( itemTemplate ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\tfor ( Object item : content . getIterable ( scope , propertyPath ) ) { \n\t\tserializer . writeItem ( itemTemplate , item ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static FlowContext createFlowContext $F62952 ( uuid ) { \n\t$F1955683 ( uuid ) final FlowContext flowContext = new FlowContextImpl ( uuid ) ; \n\taddFlowContext ( flowContext ) ; \n\treturn flowContext ; \n\t} \n"}, {"code": "public static FlowContext deserializeNativeFlowContext $F62952 ( flowContextString ) { \n\t$F2201 ( flowContextString ) final FlowContext flowContext = FlowContextImpl . deserializeNativeFlowContext ( flowContextString ) ; \n\taddFlowContext ( flowContext ) ; \n\treturn flowContext ; \n\t} \n"}, {"code": "public static void addFlowContext ( final FlowContext flowContext ) { \n\tif $F107295 ( flowContext ) $F139326 ( clearFlowcontext ) $F57566 ( FLOW_CONTEXT_THREAD_LOCAL , flowContext ) $F6372 ( MDC , flowContext ) } \n"}, {"code": "public static String serializeNativeFlowContext $F2 { \n\tfinal FlowContext $F145 ( flowCntext , FLOW_CONTEXT_THREAD_LOCAL ) ; \n\tif $F268 ( flowCntext ) { \n\t\treturn ( ( FlowContextImpl ) flowCntext ) . serializeNativeFlowContext ( ) ; \n\t\t} \n\t$F3956 } \n"}, {"code": "public static int ordinalIndexOf $F157451 ( str , searchStr , ordinal ) $F169372 ( ordinalIndexOf , str , searchStr , ordinal ) "}, {"code": "private static int ordinalIndexOf ( String str , String searchStr , int ordinal , boolean lastIndex ) { \n\tif ( $F7429 ( str , searchStr ) || ordinal <= INT00 ) $F356 ( INDEX_NOT_FOUND ) if $F43975 ( searchStr ) { \n\t\treturn lastIndex ? $F1203 ( str ) : INT00 ; \n\t\t} \n\t$F1987 ( found ) int index = lastIndex ? $F1203 ( str ) : INDEX_NOT_FOUND ; \n\tdo { \n\t\tif ( lastIndex ) { \n\t\t\tindex = str . lastIndexOf ( searchStr , index - INT00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tindex = $F235249 ( str , searchStr , index ) ; \n\t\t\t} \n\t\tif $F2523 ( index ) $F356 ( index ) found ++ ; \n\t\t} \n\twhile ( found < ordinal ) ; \n\treturn index ; \n\t} \n"}, {"code": "public static int indexOf $F157451 ( str , searchStr , startPos ) { \n\tif $F7430 ( str , searchStr ) $F356 ( INDEX_NOT_FOUND ) if ( $F43974 ( searchStr ) && $F95512 ( startPos , str ) ) { \n\t\t$F133651 ( str ) } \n\treturn $F36088 ( str , searchStr , startPos ) ; \n\t} \n"}, {"code": "public static int indexOfIgnoreCase $F157451 ( str , searchStr , startPos ) { \n\tif $F7430 ( str , searchStr ) $F356 ( INDEX_NOT_FOUND ) $F12287 ( startPos ) int endLimit = ( $F9508 ( str , searchStr ) ) + INT00 ; \n\tif ( startPos > endLimit ) $F356 ( INDEX_NOT_FOUND ) if $F43975 ( searchStr ) $F356 ( startPos ) for ( $F59004 ( i , startPos , endLimit ) ) { \n\t\tif ( str . regionMatches ( true , i , searchStr , INT00 , $F1203 ( searchStr ) ) ) $F356 ( i ) } \n\treturn INDEX_NOT_FOUND ; \n\t} \n"}, {"code": "public static int lastOrdinalIndexOf $F157451 ( str , searchStr , ordinal ) $F143402 ( ordinalIndexOf , str , searchStr , ordinal ) "}, {"code": "public static int lastIndexOf $F157451 ( str , searchStr , startPos ) { \n\tif $F7430 ( str , searchStr ) $F356 ( INDEX_NOT_FOUND ) return str . lastIndexOf ( searchStr , startPos ) ; \n\t} \n"}, {"code": "public static int lastIndexOfIgnoreCase $F1195 ( str , searchStr ) { \n\tif $F7430 ( str , searchStr ) $F356 ( INDEX_NOT_FOUND ) return lastIndexOfIgnoreCase ( $F84345 ( str , searchStr ) ) ; \n\t} \n"}, {"code": "public static int lastIndexOfIgnoreCase $F157451 ( str , searchStr , startPos ) { \n\tif $F7430 ( str , searchStr ) $F356 ( INDEX_NOT_FOUND ) if ( startPos > ( $F9508 ( str , searchStr ) ) ) { \n\t\tstartPos = $F9508 ( str , searchStr ) ; \n\t\t} \n\t$F107525 ( startPos , INDEX_NOT_FOUND ) if $F43975 ( searchStr ) $F356 ( startPos ) for ( $F204834 ( i , startPos ) ) { \n\t\tif ( str . regionMatches ( true , i , searchStr , INT00 , $F1203 ( searchStr ) ) ) $F356 ( i ) } \n\treturn INDEX_NOT_FOUND ; \n\t} \n"}, {"code": "public static int indexOfAny ( String str , $F2666 searchChars ) { \n\tif ( isEmpty ( str ) || $F1930 ( ArrayUtils , searchChars ) ) $F356 ( INDEX_NOT_FOUND ) $F12039 ( csLen , str ) $F74108 ( csLast , csLen ) $F58133 ( searchLen , searchChars ) $F74108 ( searchLast , searchLen ) for ( $F6610 ( i , csLen ) ) { \n\t\t$F14215 ( ch , str , i ) for ( $F6610 ( j , searchLen ) ) { \n\t\t\tif $F60903 ( searchChars , j , ch ) { \n\t\t\t\tif ( i < csLast && j < searchLast && CharUtils . isHighSurrogate ( ch ) ) { \n\t\t\t\t\tif ( $F64146 ( searchChars , j ) == $F48430 ( str , i ) ) $F356 ( i ) } \n\t\t\t\telse $F356 ( i ) } \n\t\t\t} \n\t\t} \n\treturn INDEX_NOT_FOUND ; \n\t} \n"}, {"code": "public static int indexOfAny $F1195 ( str , searchChars ) { \n\tif $F398095 ( isEmpty , str , searchChars ) $F356 ( INDEX_NOT_FOUND ) return indexOfAny ( $F110609 ( str , searchChars ) ) ; \n\t} \n"}, {"code": "public static boolean containsAny ( String str , $F2666 searchChars ) { \n\tif ( isEmpty ( str ) || $F1930 ( ArrayUtils , searchChars ) ) $F1668 $F12039 ( csLength , str ) $F58133 ( searchLength , searchChars ) $F74108 ( csLast , csLength ) $F74108 ( searchLast , searchLength ) for ( $F6610 ( i , csLength ) ) { \n\t\t$F14215 ( ch , str , i ) for ( $F6610 ( j , searchLength ) ) { \n\t\t\tif $F60903 ( searchChars , j , ch ) { \n\t\t\t\tif ( CharUtils . isHighSurrogate ( ch ) ) { \n\t\t\t\t\t$F23159 ( j , searchLast ) if ( i < csLast && $F64146 ( searchChars , j ) == $F48430 ( str , i ) ) $F233 } \n\t\t\t\telse $F233 } \n\t\t\t} \n\t\t} \n\t$F213 } \n"}, {"code": "public static int indexOfAnyBut $F1195 ( str , searchChars ) { \n\tif $F398095 ( isEmpty , str , searchChars ) $F356 ( INDEX_NOT_FOUND ) $F12039 ( strLen , str ) for ( $F6610 ( i , strLen ) ) { \n\t\t$F14215 ( ch , str , i ) boolean chFound = $F161545 ( searchChars , ch ) ; \n\t\tif ( i + INT00 < strLen && CharUtils . isHighSurrogate ( ch ) ) { \n\t\t\t$F64074 ( ch2 , str , i ) if ( chFound && $F3748 ( searchChars , ch2 ) < INT00 ) $F356 ( i ) } \n\t\telse { \n\t\t\t$F40270 ( chFound , i ) } \n\t\t} \n\treturn INDEX_NOT_FOUND ; \n\t} \n"}, {"code": "public static boolean containsOnly ( String str , $F2666 valid ) { \n\tif $F80693 ( valid , str ) $F1668 if $F43975 ( str ) $F233 if $F4389 ( valid ) $F1668 return indexOfAnyBut ( str , valid ) == INDEX_NOT_FOUND ; \n\t} \n"}, {"code": "public static boolean containsNone ( String str , $F2666 searchChars ) { \n\tif $F7430 ( str , searchChars ) $F233 $F12039 ( csLen , str ) $F74108 ( csLast , csLen ) $F58133 ( searchLen , searchChars ) $F74108 ( searchLast , searchLen ) for ( $F6610 ( i , csLen ) ) { \n\t\t$F14215 ( ch , str , i ) for ( $F6610 ( j , searchLen ) ) { \n\t\t\tif $F60903 ( searchChars , j , ch ) { \n\t\t\t\tif ( CharUtils . isHighSurrogate ( ch ) ) { \n\t\t\t\t\t$F62132 ( j , searchLast ) if ( i < csLast && $F64146 ( searchChars , j ) == $F48430 ( str , i ) ) $F1668 } \n\t\t\t\telse $F1668 } \n\t\t\t} \n\t\t} \n\t$F232 } \n"}, {"code": "private static $F21 splitWorker ( String str , char separatorChar , boolean preserveAllTokens ) { \n\t$F2201 ( str ) $F12039 ( len , str ) if $F2015 ( len ) { \n\t\treturn ArrayUtils . EMPTY_STRING_ARRAY ; \n\t\t} \n\t$F8446 ( list ) $F102736 ( i , start ) $F2233 ( match ) $F2233 ( lastMatch ) while ( i < len ) { \n\t\tif $F52438 ( str , i , separatorChar ) { \n\t\t\tif ( match || preserveAllTokens ) { \n\t\t\t\t$F96759 ( list , str , start , i ) match = false ; \n\t\t\t\tlastMatch = true ; \n\t\t\t\t} \n\t\t\tstart = ++ i ; \n\t\t\t$F23605 } \n\t\tlastMatch = false ; \n\t\tmatch = true ; \n\t\ti ++ ; \n\t\t} \n\tif ( match || ( preserveAllTokens && lastMatch ) ) { \n\t\t$F96759 ( list , str , start , i ) } \n\treturn $F2110716 ( list ) ; \n\t} \n"}, {"code": "public static String join ( Iterator iterator , String separator ) { \n\t$F2201 ( iterator ) if $F58859 ( iterator ) $F356 ( EMPTY ) $F58862 ( first , iterator ) if $F58859 ( iterator ) $F3342 ( toString , first ) $F62378 ( buf ) $F93328 ( first , buf ) while $F11310 ( iterator ) { \n\t\t$F93328 ( separator , buf ) $F58862 ( obj , iterator ) $F93328 ( obj , buf ) } \n\t$F1226 ( buf ) } \n"}, {"code": "public static String remove $F24307 ( str , remove ) { \n\tif ( isEmpty ( str ) || $F3748 ( str , remove ) == INDEX_NOT_FOUND ) $F356 ( str ) $F70749 ( chars , str ) $F1987 ( pos ) for ( $F2674 ( i , chars ) ) { \n\t\tif $F275602 ( chars , i , remove ) { \n\t\t\tchars [ pos ++ ] = chars [ i ] ; \n\t\t\t} \n\t\t} \n\t$F96120 ( chars , pos ) } \n"}, {"code": "public static String replace $F102509 ( text , searchString , replacement , max ) { \n\tif ( $F164463 ( isEmpty , text , searchString ) || replacement == null || max == INT00 ) $F356 ( text ) $F1987 ( start ) $F145457 ( end , text , searchString , start ) $F79095 ( end , INDEX_NOT_FOUND , text ) $F12039 ( replLength , searchString ) int $F62962 ( increase , replacement , replLength ) ; \n\tincrease = ( $F154218 ( increase ) ) ; \n\tincrease *= ( max < INT00 ? INT00 : ( max > INT00 ? INT00 : max ) ) ; \n\tStringBuilder buf = new StringBuilder ( $F107053 ( text , increase ) ) ; \n\twhile ( end != INDEX_NOT_FOUND ) { \n\t\t$F377178 ( buf , text , start , end ) . append ( replacement ) ; \n\t\tstart = end + replLength ; \n\t\tif $F132905 ( max ) $F333 $F162225 ( end , text , searchString , start ) } \n\t$F377176 ( buf , text , start ) $F1226 ( buf ) } \n"}, {"code": "public static String chopNewline ( String str ) { \n\t$F110334 ( lastIdx , str ) $F122837 ( lastIdx , EMPTY ) $F14215 ( last , str , lastIdx ) if ( last == CharUtils . LF ) { \n\t\tif ( $F48429 ( str , lastIdx ) == CharUtils . CR ) $F24342 ( lastIdx ) } \n\telse $F16091 ( lastIdx ) $F6111 ( str , lastIdx ) } \n"}, {"code": "public static boolean isAsciiPrintable ( String str ) { \n\t$F2272 ( str ) $F12039 ( sz , str ) for ( $F6610 ( i , sz ) ) { \n\t\tif ( CharUtils . isAsciiPrintable ( $F14212 ( str , i ) ) == false ) $F1668 } \n\t$F232 } \n"}, {"code": "public static boolean isAllLowerCase ( String str ) { \n\tif ( $F347056 ( str , isEmpty ) ) $F1668 $F12039 ( sz , str ) for ( $F6610 ( i , sz ) ) { \n\t\tif ( Character . isLowerCase ( $F14212 ( str , i ) ) == false ) $F1668 } \n\t$F232 } \n"}, {"code": "public static boolean isAllUpperCase ( String str ) { \n\tif ( $F347056 ( str , isEmpty ) ) $F1668 $F12039 ( sz , str ) for ( $F6610 ( i , sz ) ) { \n\t\tif ( Character . isUpperCase ( $F14212 ( str , i ) ) == false ) $F1668 } \n\t$F232 } \n"}, {"code": "public static String reverseDelimited $F24307 ( str , separatorChar ) { \n\t$F2201 ( str ) $F96961 ( strs , split , str , separatorChar ) $F16921 ( ArrayUtils , strs ) $F4282 ( join , strs , separatorChar ) } \n"}, {"code": "public static String abbreviateMiddle $F157451 ( str , middle , length ) { \n\tif $F398095 ( isEmpty , str , middle ) $F356 ( str ) if ( length >= $F1203 ( str ) || length < $F66051 ( middle ) ) $F356 ( str ) int targetSting = $F114426 ( length , middle ) ; \n\tint startOffset = targetSting / INT00 + targetSting % INT00 ; \n\tint endOffset = $F1203 ( str ) - targetSting / INT00 ; \n\t$F9439 ( builder , length ) $F341734 ( builder , str , startOffset ) $F1212 ( builder , middle ) $F377176 ( builder , str , endOffset ) $F1226 ( builder ) } \n"}, {"code": "public static String difference $F1195 ( str1 , str2 ) { \n\t$F3446 ( str1 , str2 ) $F3446 ( str2 , str1 ) $F12232 ( at , indexOfDifference , str1 , str2 ) $F79095 ( at , INDEX_NOT_FOUND , EMPTY ) $F405046 ( str2 , at ) } \n"}, {"code": "public static int indexOfDifference $F22 ( strs ) { \n\tif ( strs == null || $F84355 ( strs ) ) $F356 ( INDEX_NOT_FOUND ) $F2233 ( anyStringNull ) $F48974 ( allStringsNull ) $F58133 ( arrayLen , strs ) $F122018 ( shortestStrLen , Integer ) $F1987 ( longestStrLen ) for ( $F6610 ( i , arrayLen ) ) { \n\t\tif $F32580 ( strs , i ) { \n\t\t\tanyStringNull = true ; \n\t\t\tshortestStrLen = INT00 ; \n\t\t\t} \n\t\telse { \n\t\t\tallStringsNull = false ; \n\t\t\tshortestStrLen = Math . min ( $F54633 ( strs , i ) , shortestStrLen ) ; \n\t\t\tlongestStrLen = Math . max ( $F54633 ( strs , i ) , longestStrLen ) ; \n\t\t\t} \n\t\t} \n\tif ( allStringsNull || ( longestStrLen == INT00 && ! anyStringNull ) ) $F356 ( INDEX_NOT_FOUND ) $F57929 ( shortestStrLen ) $F3747 ( firstDiff ) for ( $F6610 ( stringPos , shortestStrLen ) ) { \n\t\tchar comparisonChar = strs [ INT00 ] . charAt ( stringPos ) ; \n\t\tfor ( $F6610 ( arrayPos , arrayLen ) ) { \n\t\t\tif ( $F96828 ( strs , arrayPos ) ( stringPos ) != comparisonChar ) $F67525 ( firstDiff , stringPos ) } \n\t\tif $F3752 ( firstDiff ) $F333 } \n\tif ( firstDiff == $F3745 && shortestStrLen != longestStrLen ) $F356 ( shortestStrLen ) return firstDiff ; \n\t} \n"}, {"code": "public static String getCommonPrefix $F22 ( strs ) { \n\t$F118898 ( strs , EMPTY ) $F10882 ( smallestIndexOfDiff , indexOfDifference , strs ) if ( smallestIndexOfDiff == INDEX_NOT_FOUND ) { \n\t\tif $F15464 ( strs ) $F356 ( EMPTY ) $F23691 ( strs ) } \n\telse if $F2015 ( smallestIndexOfDiff ) $F356 ( EMPTY ) else { \n\t\treturn $F437383 ( strs ) ( INT00 , smallestIndexOfDiff ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean startsWithAny $F18538 ( string , searchStrings ) { \n\tif ( isEmpty ( string ) || $F1930 ( ArrayUtils , searchStrings ) ) $F1668 for ( $F2674 ( i , searchStrings ) ) { \n\t\t$F21687 ( searchString , searchStrings , i ) if ( $F36128 ( StringUtils , string , searchString ) ) $F233 } \n\t$F213 } \n"}, {"code": "public static String normalizeSpace ( String str ) { \n\t$F10508 ( str , strip ) if ( str == null || $F103403 ( str ) ) $F356 ( str ) $F14211 ( b , str ) for ( $F8125 ( i , str ) ) { \n\t\t$F14215 ( c , str , i ) if $F136771 ( Character , c ) { \n\t\t\tif ( i > INT00 && ! Character . isWhitespace ( $F48429 ( str , i ) ) ) $F1219 ( b ) } \n\t\telse $F8284 ( b , c ) } \n\t$F1226 ( b ) } \n"}, {"code": "public static boolean endsWithAny $F18538 ( string , searchStrings ) { \n\tif ( isEmpty ( string ) || $F1930 ( ArrayUtils , searchStrings ) ) $F1668 for ( $F2674 ( i , searchStrings ) ) { \n\t\t$F21687 ( searchString , searchStrings , i ) if ( StringUtils . endsWith ( string , searchString ) ) $F233 } \n\t$F213 } \n"}, {"code": "$F1 public void write $F9459 ( b , off , len ) { \n\twrite ( $F174546 ( b , off , len ) ) ; \n\t} \n"}, {"code": "private void write ( String s ) { \n\tsynchronized ( document ) { \n\t\t$F215169 ( offset , document ) try { \n\t\t\tdocument . insertString ( offset , s , attributes ) ; \n\t\t\t} \n\t\tcatch ( BadLocationException e ) { \n\t\t\tthrow new UnexpectedException ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F27567 getSubFiles ( File folder , FileFilter filter ) { \n\tPreconditions . checkArgument ( $F2602 ( folder ) , STRING00 ) ; \n\t$F319813 $F57859 ( ret , Lists ) ; \n\tfor ( File f : $F22689 ( folder , filter ) ) { \n\t\tif $F2503 ( f ) $F528 ( ret , f ) else if $F15346 ( f ) ret . addAll ( IOUtil . getSubFiles ( f , filter ) ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static File chooseFile $F296938 ( title , currentDir ) { \n\tif $F112 ( currentDir ) $F180383 ( currentDir ) ; \n\tJFileChooser fileChooser = new JFileChooser $F2 ; \n\tfileChooser . setCurrentDirectory ( currentDir ) ; \n\tfileChooser . setDialogTitle ( title ) ; \n\tfileChooser . setMultiSelectionEnabled ( false ) ; \n\tint result = fileChooser . showOpenDialog ( null ) ; \n\tif $F1309205 ( result , JFileChooser ) { \n\t\treturn $F566355 ( fileChooser ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static $F18352 chooseFiles $F296938 ( title , currentDir ) { \n\tif $F112 ( currentDir ) $F180383 ( currentDir ) ; \n\tJFileChooser fileChooser = new JFileChooser $F2 ; \n\tfileChooser . setCurrentDirectory ( currentDir ) ; \n\tfileChooser . setDialogTitle ( title ) ; \n\tfileChooser . setMultiSelectionEnabled ( true ) ; \n\tint result = fileChooser . showOpenDialog ( null ) ; \n\tif $F1309205 ( result , JFileChooser ) { \n\t\treturn fileChooser . getSelectedFiles ( ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static File chooseFolder $F296938 ( title , currentDir ) { \n\tif $F112 ( currentDir ) $F180383 ( currentDir ) ; \n\tJFileChooser fileChooser = new JFileChooser $F2 ; \n\tfileChooser . setCurrentDirectory ( currentDir ) ; \n\tfileChooser . setDialogTitle ( title ) ; \n\tfileChooser . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; \n\tfileChooser . setMultiSelectionEnabled ( false ) ; \n\tint result = fileChooser . showOpenDialog ( null ) ; \n\tif $F1309205 ( result , JFileChooser ) { \n\t\treturn $F566355 ( fileChooser ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static File getAppDir ( String name ) throws IOException { \n\t$F52289 ( s1 , System ) File file1 ; \n\tswitch ( OSUtil . getOs ( ) ) { \n\t\tcase WINDOWS : $F180372 ( s2 , System ) if $F268 ( s2 ) { \n\t\t\t$F305200 ( file1 , s2 , name ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F305200 ( file1 , s1 , name ) ; \n\t\t\t} \n\t\t$F332 case MACOS : file1 = new File $F376468 ( s1 , name ) ; \n\t\t$F332 $F2377 $F305200 ( file1 , s1 , name ) ; \n\t\t} \n\tif $F305171 ( file1 ) $F63324 ( file1 ) else $F356 ( file1 ) } \n"}, {"code": "public static boolean delete ( File f ) { \n\tif $F16884 ( f ) $F232 if $F15346 ( f ) { \n\t\t$F49579 ( subFiles , f ) if $F268 ( subFiles ) { \n\t\t\tfor ( File sf : subFiles ) $F74933 ( IOUtil , sf ) } \n\t\t} \n\treturn $F11954 ( f ) ; \n\t} \n"}, {"code": "$F1 public $F21 getValueAsStringArray $F2 { \n\tfinal $F21 result = new String $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "$F1 boolean valuesAreTheSameAsDefault $F2 { \n\tif ( $F46454 ( getDefaultValues ) || $F33007 ( getDefaultValues ) == INT00 ) $F213 if ( $F46454 ( getValues ) || $F33007 ( getValues ) == INT00 ) $F213 if ( $F33007 ( getDefaultValues ) != $F33007 ( getValues ) ) $F213 for ( int v = INT00 ; \n\tv < $F33007 ( getDefaultValues ) ; \n\tv ++ ) { \n\t\tif ( isCaseSensitive ( ) && ! $F68899 ( getDefaultValues , v ) . equals ( $F68899 ( getValues , v ) ) ) $F213 if ( ! isCaseSensitive ( ) && ! $F68899 ( getDefaultValues , v ) . equalsIgnoreCase ( $F68899 ( getValues , v ) ) ) $F213 } \n\t$F232 } \n"}, {"code": "public String getString ( String name ) { \n\t$F6597 ( value , get , name ) if ( value instanceof String || value instanceof Boolean || value instanceof Integer ) $F33492 ( value ) if $F668265 ( value ) { \n\t\t$F22194 ( list , getStrings , name ) $F608110 ( StringUtils , list ) } \n\treturn $F43698 ( get , name ) ; \n\t} \n"}, {"code": "public int getInt ( String name ) { \n\t$F2744 ( value , super , name ) if $F184628 ( value ) { \n\t\t$F259761 ( value ) } \n\t$F24655 ( value , name ) try { \n\t\treturn $F145003 ( Integer , value ) ; \n\t\t} \n\tcatch ( NumberFormatException e ) $F131586 ( name , value ) } \n"}, {"code": "public $F21 getStrings ( String name ) { \n\t$F2744 ( value , super , name ) if $F668265 ( value ) { \n\t\treturn $F40653 ( value ) ; \n\t\t} \n\t$F131585 ( name , value ) } \n"}, {"code": "public boolean getBool ( String name ) { \n\t$F2744 ( value , super , name ) if $F5650 ( value ) $F259797 ( value ) if $F4380 ( value ) { \n\t\t$F105093 ( txt , value ) $F148610 ( txt ) if ( $F89468 ( txt ) || $F17184 ( txt ) ) $F233 if ( $F89468 ( txt ) || $F17184 ( txt ) ) $F1668 } \n\t$F24655 ( value , name ) $F131585 ( name , value ) } \n"}, {"code": "private Object get ( String name ) { \n\t$F6597 ( value , find , name ) $F24655 ( value , name ) return value ; \n\t} \n"}, {"code": "public $F1372 $F23339 getList $F26567 ( name , type ) { \n\t$F2744 ( value , super , name ) if $F44389 ( value ) { \n\t\t$F164118 $F54 ( output ) ; \n\t\t$F586131 ( list , value ) for ( Object item : list ) { \n\t\t\toutput . add ( $F14239 ( type , item ) ) ; \n\t\t\t} \n\t\treturn output ; \n\t\t} \n\tthrow new IllegalArgumentException ( $F191625 ( name , type ) + value + STRING00 ) ; \n\t} \n"}, {"code": "$F1 public AppEngineTransaction beginTransaction $F2 { \n\tif $F560 ( isTransactional ) { \n\t\tthrow new IllegalStateException ( STRING00 + $F144 ( transaction ) . id ( ) + STRING00 ) ; \n\t\t} \n\ttransaction . set ( new AppEngineGlobalTransaction ( this ) ) ; \n\tlogger . fine ( STRING00 + $F144 ( transaction ) . id ( ) + STRING00 ) ; \n\t$F2974 ( transaction ) } \n"}, {"code": "$F1 public $F26212 E get ( $F52984 ( clazz ) , Object key ) throws ConcurrentModificationException { \n\tif $F112 ( clazz ) $F9654 ( clazz ) if $F112 ( key ) $F9654 ( key ) if $F7301 ( isTransactional ) { \n\t\tResourceManager $F1865930 manager = new AppEngineResourceManager $F560 ( datastore ) ; \n\t\t$F67861 ( manager , clazz , key ) } \n\telse { \n\t\treturn ( ( AppEngineGlobalTransaction ) $F144 ( transaction ) ) . coordinator ( ) . get ( clazz , key ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void put ( Object entity ) throws EntityExistsException { \n\tif $F112 ( entity ) $F9654 ( entity ) assertTransactional ( ) ; \n\t( ( AppEngineGlobalTransaction ) $F144 ( transaction ) ) . coordinator ( ) . put ( entity ) ; \n\t} \n"}, {"code": "$F1 public void update ( Object entity ) { \n\tif $F112 ( entity ) $F9654 ( entity ) assertTransactional ( ) ; \n\t( ( AppEngineGlobalTransaction ) $F144 ( transaction ) ) . coordinator ( ) . update ( entity ) ; \n\t} \n"}, {"code": "public String getProperty $F62952 ( key ) { \n\t$F2090 ( value , System , key ) $F3279 ( value ) value = $F40165 ( _getConfigProperties ) ( key ) ; \n\treturn value ; \n\t} \n"}, {"code": "public $F1372 T getBean $F65165 ( requiredType ) { \n\t$F67491 ( bean ) try { \n\t\tbean = _getContext ( ) . getBean ( requiredType ) ; \n\t\t} \n\tcatch ( BeansException ex ) { \n\t\t$F38536 ( _LOG_ , requiredType ) throw new ConfigurationException ( ex ) ; \n\t\t} \n\treturn bean ; \n\t} \n"}, {"code": "public static ComparableDateTimeFormatter compile $F62952 ( valueStr ) { \n\tfinal ComparableDateTimeFormatter cp = new ComparableDateTimeFormatter $F2 ; \n\tcp . delegate = DateTimeFormatter . ofPattern ( valueStr ) ; \n\tcp . pattern = valueStr ; \n\treturn cp ; \n\t} \n"}, {"code": "$F1 protected void valueCreate ( $F21 strings , Value value ) { \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tvalue . addPrimitiveValue ( $F18575 ( labels , i , strings ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F26212 ImmutableSet $F26212 of ( E e1 , E e2 , E e3 , E e4 , E e5 , E e6 , E ... others ) { \n\t$F75199 ( paramCount ) $F3244 elements = new Object [ paramCount + others . length ] ; \n\t$F60852 ( elements , e1 ) $F60852 ( elements , e2 ) $F60852 ( elements , e3 ) $F60852 ( elements , e4 ) $F60852 ( elements , e5 ) $F60852 ( elements , e6 ) $F40559 ( System , others , elements , paramCount ) return construct ( elements . length , elements ) ; \n\t} \n"}, {"code": "public static $F26212 ImmutableSet $F26212 copyOf $F63556 ( elements ) { \n\tif ( elements instanceof ImmutableSet && ! ( elements instanceof ImmutableSortedSet ) ) { \n\t\t$F762 ImmutableSet $F26212 set = ( ImmutableSet $F26212 ) elements ; \n\t\tif ( ! set . isPartialView ( ) ) $F356 ( set ) } \n\telse if ( elements instanceof EnumSet ) { \n\t\treturn copyOfEnumSet ( ( EnumSet ) elements ) ; \n\t\t} \n\t$F62907 ( array , elements ) return construct ( array . length , array ) ; \n\t} \n"}, {"code": "public static FormatReaderComposite basicArrayReader $F1195 ( input , arrayDelimiter ) { \n\treturn new FormatReaderComposite ( input , new HandlerArrayFromDelimited ( arrayDelimiter ) ) ; \n\t} \n"}, {"code": "$F1 protected Object getOptionValue ( $F109288 argq ) { \n\treturn Double . parseDouble ( $F16604 ( argq ) ) ; \n\t} \n"}, {"code": "$F762 public static $F1372 T get ( Object target ) { \n\treturn ( T ) new RandomStructBehavior ( target ) . doDetect ( ) ; \n\t} \n"}, {"code": "public boolean commit $F2 { \n\t$F620622 ( subject ) . addAll ( principals ) ; \n\tsubject . getPrivateCredentials ( ) . addAll ( privateCredentials ) ; \n\tsubject . getPublicCredentials ( ) . addAll ( publicCredentials ) ; \n\t$F232 } \n"}, {"code": "public void initialize ( Subject subject , CallbackHandler callbackHandler , $F15785 ( sharedState ) , $F15785 ( options ) ) { \n\t$F1357 ( this , subject ) $F1357 ( this , callbackHandler ) this . principals . clear ( ) ; \n\tthis . publicCredentials . clear ( ) ; \n\tthis . privateCredentials . clear ( ) ; \n\t$F189244 ( this , sharedState , options ) } \n"}, {"code": "public boolean logout $F2 { \n\t$F620622 ( subject ) . removeAll ( principals ) ; \n\tsubject . getPrivateCredentials ( ) . removeAll ( privateCredentials ) ; \n\tsubject . getPublicCredentials ( ) . removeAll ( publicCredentials ) ; \n\t$F39336 ( principals ) $F39336 ( privateCredentials ) $F39336 ( publicCredentials ) $F232 } \n"}, {"code": "protected void callback ( Callback ... callbacks ) throws IOException , UnsupportedCallbackException , LoginException { \n\tif $F268 ( callbackHandler ) $F381470 ( callbackHandler , callbacks ) else if ( requireCallbackHandler ) { \n\t\tthrow new LoginException $F6 ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean matches ( Object entity ) { \n\t$F55470 ( left , property , entity ) return operator ( ) . matches ( left . compareTo ( value ( ) ) ) ; \n\t} \n"}, {"code": "StreamItem readItem $F59368 ( timeout , unit ) throws InterruptedException { \n\tcheckState ( isRunning ( ) , STRING00 , state ( ) ) ; \n\tStreamItem line = outputQueue . poll ( timeout , unit ) ; \n\t$F21730 ( line , EOF_ITEM , closeStream ) return $F610151 ( line , TIMEOUT_ITEM ) ; \n\t} \n"}, {"code": "void writeLine ( String line ) throws IOException { \n\tcheckState ( isRunning ( ) , STRING00 , state ( ) ) ; \n\t$F185465 ( checkState , socketWriter ) try { \n\t\t$F21494 ( socketWriter , line ) $F36360 ( socketWriter ) $F6369 ( socketWriter ) } \n\tcatch ( IOException e ) { \n\t\tCloseables . close ( socketWriter , true ) ; \n\t\tnotifyFailed ( e ) ; \n\t\tthrow e ; \n\t\t} \n\t} \n"}, {"code": "void closeWriter $F2 throws IOException { \n\tcheckState ( isRunning ( ) , STRING00 , state ( ) ) ; \n\t$F185465 ( checkState , socketWriter ) try $F2453 ( socketWriter ) catch ( IOException e ) { \n\t\tnotifyFailed ( e ) ; \n\t\tthrow e ; \n\t\t} \n\tcloseStream ( ) ; \n\t} \n"}, {"code": "private static $F1372 $F36503 threadRenaming ( final String name , $F65732 ( callable ) ) { \n\tcheckNotNull ( name ) ; \n\tcheckNotNull ( callable ) ; \n\treturn new $F36503 $F2 { \n\t\t$F1 public T call $F2 throws Exception { \n\t\t\t$F18162 ( currentThread , Thread ) $F2250 ( oldName , currentThread ) $F13102 ( currentThread , name ) try $F36513 ( callable ) finally $F547089 ( currentThread , oldName ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public $F96 fetch ( IParamReader reader , IParamData param ) { \n\t$F457548 ( params ) for ( BeanProperty property : properties ) { \n\t\tString $F1325730 ( key , property ) ; \n\t\t$F462595 ( name , property ) $F462595 ( value , property ) params . put ( key , reader . getParamValue ( $F28553 ( param ) + key , name , value ) ) ; \n\t\t} \n\treturn params ; \n\t} \n"}, {"code": "public ChannelFuture send ( Message message ) throws NotConnectedException { \n\tif ( ! connected ) { \n\t\tthrow new NotConnectedException $F2 ; \n\t\t} \n\tif $F3507 ( log ) { \n\t\tlog . debug ( STRING00 , $F100248 ( message ) ) ; \n\t\t} \n\treturn $F21493 ( channel , message ) ; \n\t} \n"}, {"code": "NodeState $F1372 addTransition ( ElementConstraint test , NodeState $F1372 targetState ) { \n\t$F198155 ( test ) $F198155 ( targetState ) for ( NodeTransition $F1372 transition : transitions ) { \n\t\tif ( $F3158658 ( transition ) . equals ( test ) ) { \n\t\t\treturn $F4287 ( transition ) ; \n\t\t\t} \n\t\t} \n\ttransitions . add ( new NodeTransition $F1372 ( test , targetState ) ) ; \n\treturn targetState ; \n\t} \n"}, {"code": "NodeState $F1372 follow ( StartElement element ) { \n\t$F198155 ( element ) for ( NodeTransition $F1372 transition : transitions ) { \n\t\tif ( $F3158658 ( transition ) . matches ( element ) ) { \n\t\t\treturn $F4287 ( transition ) ; \n\t\t\t} \n\t\t} \n\t$F24894 ( emptyState ) } \n"}, {"code": "public static StopWords getInstance $F2 { \n\tif $F112 ( INSTANCE ) { \n\t\tsynchronized ( EnglishStopWords . class ) { \n\t\t\tif $F112 ( INSTANCE ) { \n\t\t\t\tINSTANCE = new EnglishStopWords $F2 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn INSTANCE ; \n\t} \n"}, {"code": "$F1 public void fill ( ClassModel classModel ) { \n\tclass AddDependencies implements TemplateMethodModelEx { \n\t\tClassType model ; \n\t\tpublic AddDependencies ( ClassType model ) $F7668 ( this , model ) $F1 $F762 public Object exec ( List arguments ) throws TemplateModelException { \n\t\t\tif $F94933 ( arguments ) { \n\t\t\t\tthrow new TemplateModelException $F6 ; \n\t\t\t\t} \n\t\t\tfor ( Object argument : arguments ) { \n\t\t\t\tObject dependency = DeepUnwrap . unwrap ( ( TemplateModel ) argument ) ; \n\t\t\t\tif $F4380 ( dependency ) { \n\t\t\t\t\taddDependency ( context . getClassModel ( ( String ) dependency ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( dependency instanceof ClassModel ) { \n\t\t\t\t\taddDependency ( ( ClassModel ) dependency ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F5624 ( dependency ) { \n\t\t\t\t\tfor ( Object depend : ( Collection ) dependency ) { \n\t\t\t\t\t\taddDependency ( ( ClassModel ) depend ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse if $F268 ( dependency ) { \n\t\t\t\t\tthrow new TemplateModelException $F6 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F3956 } \n\t\tprivate void addDependency ( ClassModel classModel ) { \n\t\t\t$F8069 ( model ) . add ( classModel ) ; \n\t\t\t} \n\t\t} \n\tclass AddIncludes implements TemplateMethodModelEx { \n\t\tClassType model ; \n\t\tpublic AddIncludes ( ClassType model ) $F7668 ( this , model ) $F1 $F10880 public Object exec ( List arguments ) throws TemplateModelException { \n\t\t\tif $F94933 ( arguments ) { \n\t\t\t\tthrow new TemplateModelException $F6 ; \n\t\t\t\t} \n\t\t\tfor ( Object argument : arguments ) { \n\t\t\t\tObject include = DeepUnwrap . unwrap ( ( TemplateModel ) argument ) ; \n\t\t\t\tif $F4380 ( include ) { \n\t\t\t\t\t$F3260933 ( model ) . add ( ( String ) include ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F5624 ( include ) { \n\t\t\t\t\t$F3260933 ( model ) . addAll ( ( Collection ) include ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F268 ( include ) { \n\t\t\t\t\tthrow new TemplateModelException $F6 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F3956 } \n\t\t} \n\tClassType $F2251 ( typeModel , classModel ) ; \n\t$F2612 clazz = $F486577 ( typeModel ) ; \n\t$F1200 ( fullName ) $F19733 ( shortName ) $F19733 ( sep ) for ( String namespace : mappings . getNamespace ( clazz ) ) { \n\t\t$F11223 ( fullName , sep , namespace ) sep = STRING00 ; \n\t\tshortName = namespace ; \n\t\t} \n\ttypeModel . setCppFullName ( $F797 ( fullName ) ) ; \n\ttypeModel . setCppShortName ( shortName ) ; \n\ttypeModel . setOwner ( typeModel . isIsInnerClass ( ) ? context . getClassModel ( $F65121 ( clazz ) ) : classModel ) ; \n\tif $F76445 ( clazz ) { \n\t\ttypeModel . setInnerType ( context . getClassModel ( $F53053 ( clazz ) ) ) ; \n\t\t$F7909 ( finalClazz , clazz ) while ( $F53053 ( finalClazz ) != null ) { \n\t\t\t$F105095 ( finalClazz ) } \n\t\ttypeModel . setFinalInnerType ( context . getClassModel ( finalClazz ) ) ; \n\t\t} \n\ttypeModel . setJavaSignature ( Datatype . getJavaSignature ( clazz ) ) ; \n\ttypeModel . setJniSignature ( Datatype . getJNISignature ( clazz ) ) ; \n\ttypeModel . setJniMethodName ( Datatype . getJNIMethodName ( clazz ) ) ; \n\ttypeModel . setAddIncludes ( new AddIncludes ( typeModel ) ) ; \n\ttypeModel . setAddDependencies ( new AddDependencies ( typeModel ) ) ; \n\t} \n"}, {"code": "public boolean notifyProgress $F12004 ( value , maximum ) { \n\tthis . progress = $F405932 ( value , maximum ) ; \n\t$F1357 ( this , value ) $F1357 ( this , maximum ) this . printProgressBar ( ) ; \n\t$F232 } \n"}, {"code": "public void notifyStatusChanged ( String status ) { \n\tif ( $F1203 ( status ) < this . status . length ( ) ) { \n\t\tthis . status = this . status . replaceAll ( $F1286 ) ; \n\t\tthis . printProgressBar ( ) ; \n\t\t} \n\t$F1357 ( this , status ) this . printProgressBar ( ) ; \n\t} \n"}, {"code": "private void printProgressBar $F2 { \n\tdouble x ; \n\t$F30330 ( this ) $F29881 ( this , PROGRESS_BAR_END_CHAR ) for ( int i = INT00 ; \n\ti <= this . length ; \n\ti ++ ) { \n\t\tif ( ! Double . isNaN ( this . progress ) ) { \n\t\t\tx = ( double ) i / this . length ; \n\t\t\t$F29879 ( this ) ( this . progress >= x ? PROGRESS_BAR_CHAR : PROGRESS_BACKGROUND_CHAR ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F29881 ( this , PROGRESS_BAR_INDETERMINANT_CHAR ) } \n\t\t} \n\t$F29881 ( this , PROGRESS_BAR_END_CHAR ) if ( this . maximum > INT00 ) { \n\t\t$F90313 ( this , value , maximum ) } \n\t$F30330 ( this ) $F29881 ( this , status ) } \n"}, {"code": "$F1 public $F26217 execute $F2 { \n\t$F464872 ( logger ) $F52983 $F9005 ( type , metamodel ) ; \n\tQuery query = new Query ( Translation . toKind ( type ) ) ; \n\tQueryRestriction restriction = new QueryRestriction $F2 ; \n\tSet < Filter $F45 > subfilters = new HashSet < Filter $F45 > $F2 ; \n\tfor ( Filter $F45 filter : filters ) { \n\t\tif ( restriction . restricted ( filter ) ) $F529 ( subfilters , filter ) else { \n\t\t\tProperty $F19378 $F9005 ( property , filter ) ; \n\t\t\tString name = ( $F153194 ( property ) instanceof EmbeddedProperty ) ? $F153194 ( property ) . name ( ) + STRING00 + $F2941 ( property ) : $F2941 ( property ) ; \n\t\t\t$F2233 ( key ) if ( name . equals ( Entities . keyField ( type ) . getName ( ) ) ) { \n\t\t\t\tname = Entity . KEY_RESERVED_PROPERTY ; \n\t\t\t\tkey = true ; \n\t\t\t\t} \n\t\t\tif ( filter instanceof ComparableFilter $F45 ) { \n\t\t\t\tComparableFilter $F45 comparableFilter = ( ComparableFilter $F45 ) filter ; \n\t\t\t\t$F604505 ( value , comparableFilter ) if ( key ) { \n\t\t\t\t\tvalue = Keys . create ( Translation . toKind ( type ) , value ) ; \n\t\t\t\t\t} \n\t\t\t\tquery . setFilter ( new Query . FilterPredicate ( name , Translation . toFilterOperator ( comparableFilter . operator ( ) ) , value ) ) ; \n\t\t\t\t} \n\t\t\telse if ( filter instanceof InFilter $F45 ) { \n\t\t\t\tInFilter $F45 inFilter = ( InFilter $F45 ) filter ; \n\t\t\t\t$F3406 $F9005 ( values , inFilter ) ; \n\t\t\t\tif ( key ) { \n\t\t\t\t\t$F105022 ( list ) for ( Object value : values ) { \n\t\t\t\t\t\tlist . add ( Keys . create ( Translation . toKind ( type ) , value ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\tvalues = list ; \n\t\t\t\t\t} \n\t\t\t\tquery . setFilter ( new Query . FilterPredicate ( name , FilterOperator . IN , values ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinal List < Order $F19378 > suborders = new ArrayList < Order $F19378 > $F2 ; \n\tfor ( Order $F19378 order : orders ) { \n\t\tif ( restriction . restricted ( order ) ) $F529 ( suborders , order ) else { \n\t\t\tProperty $F19378 $F9005 ( property , order ) ; \n\t\t\tString name = ( $F153194 ( property ) instanceof EmbeddedProperty ) ? $F153194 ( property ) . name ( ) + STRING00 + $F2941 ( property ) : $F2941 ( property ) ; \n\t\t\tquery . addSort ( name , Translation . toSortDirection ( order . direction ( ) ) ) ; \n\t\t\t} \n\t\t} \n\tFetchOptions options = FetchOptions . Builder . withOffset ( INT00 ) ; \n\tif $F313209 ( subfilters , suborders ) { \n\t\toptions = FetchOptions . Builder . withOffset ( offset ) ; \n\t\tif ( Integer . MAX_VALUE - limit >= offset ) $F60234 ( options , limit ) } \n\t$F1987 ( count ) $F26217 result = new $F67642 $F2 ; \n\tfor ( Entity entity : session . datastore ( ) . query ( query . setKeysOnly ( ) , options ) ) { \n\t\tE e = session . get ( $F245547 ( type , entity ) ) ; \n\t\tIterator < Filter $F45 > $F9005 ( iterator , subfilters ) ; \n\t\t$F48974 ( matches ) while $F11310 ( iterator ) { \n\t\t\tif ( ! $F11311 ( iterator ) . matches ( e ) ) $F107350 ( matches ) } \n\t\tif ( matches ) { \n\t\t\t$F528 ( result , e ) count ++ ; \n\t\t\t$F168315 ( count , limit ) } \n\t\t} \n\tif $F386 ( suborders ) { \n\t\tCollections . sort ( result , new Comparator $F26212 $F2 { \n\t\t\t$F762 $F1 public int compare ( E entity1 , E entity2 ) { \n\t\t\t\t$F1987 ( compare ) for ( Order $F19378 o : suborders ) { \n\t\t\t\t\tOrder $F81647 order = ( Order $F81647 ) o ; \n\t\t\t\t\t$F40256 ( compare , order , entity1 , entity2 ) ; \n\t\t\t\t\tif ( order . direction ( ) == Order . Direction . DESC ) { \n\t\t\t\t\t\tcompare = compare * $F3745 ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F43796 ( compare ) } \n\t\t\t\treturn compare ; \n\t\t\t\t} \n\t\t\t; \n\t\t\t} \n\t\t) ; \n\t\t} \n\tif $F6132 ( subfilters ) $F356 ( result ) else { \n\t\t$F62227 ( offset , this ) if $F283168 ( offset , result ) { \n\t\t\t$F221299 ( offset , result ) } \n\t\tint limit = offset + this . limit ; \n\t\tif $F283168 ( limit , result ) $F85302 ( limit , result ) return $F67814 ( result , offset , limit ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public AppEngineGetList $F26212 sort ( Order $F19378 ... orders ) { \n\tif $F112 ( orders ) $F9654 ( orders ) this . orders = $F998 ( Arrays , orders ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public AppEngineGetList $F26212 filter ( Filter $F45 ... filters ) { \n\tif $F112 ( filters ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + null + STRING00 ) ; \n\t\t} \n\tthis . filters = $F998 ( Arrays , filters ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static UUID fromString ( String uuidString ) throws UUIDFormatException { \n\t$F96673 ( leanString , uuidString ) UUID tmpUUID = null ; \n\t$F6990 ( pos , uuidString ) if $F3730 ( pos ) { \n\t\tleanString = uuidString . substring ( ++ pos , $F1203 ( uuidString ) ) ; \n\t\t} \n\tif ( $F1203 ( leanString ) != UUID_FORMATTED_LENGTH ) { \n\t\tthrow new UUIDFormatException ( uuidString ) ; \n\t\t} \n\t$F29196 ( tok , leanString ) if ( $F103152 ( tok ) != TOKENS_IN_UUID ) { \n\t\tthrow new UUIDFormatException ( uuidString ) ; \n\t\t} \n\t$F2111077 ( buf , UUID_UNFORMATTED_LENGTH ) $F4728 ( token ) $F1987 ( count ) while $F101774 ( tok ) { \n\t\t$F651269 ( token , tok ) if ( $F1203 ( token ) != TOKEN_LENGTHS [ count ++ ] ) { \n\t\t\tthrow new UUIDFormatException ( uuidString ) ; \n\t\t\t} \n\t\t$F1212 ( buf , token ) } \n\ttry { \n\t\t$F2666 chars = $F797 ( buf ) . toCharArray ( ) ; \n\t\ttmpUUID = new UUID ( Hex . decodeHex ( chars ) ) ; \n\t\t} \n\tcatch ( DecoderException de ) { \n\t\tthrow new UUIDFormatException ( $F189756 ( uuidString , de ) ) ; \n\t\t} \n\treturn tmpUUID ; \n\t} \n"}, {"code": "public int compareTo ( Object compareTo ) throws ClassCastException { \n\tif ( ! ( compareTo instanceof UUID ) ) { \n\t\tthrow new ClassCastException $F2 ; \n\t\t} \n\treturn ( Bytes . compareTo ( rawBytes , ( ( UUID ) compareTo ) . getRawBytes ( ) ) ) ; \n\t} \n"}, {"code": "public int clockSequence $F2 throws UnsupportedOperationException { \n\tif ( variant ( ) != VARIANT_IETF_DRAFT || version ( ) != VERSION_ONE ) $F467995 ( WRONG_VAR_VER_MSG ) if $F112 ( clockSq ) { \n\t\t$F1975 b = { \n\t\t\t( ( byte ) $F121756 ( rawBytes ) ) , rawBytes [ INT00 ] } \n\t\t; \n\t\tclockSq = new Short ( Bytes . toShort ( b ) ) ; \n\t\t} \n\t$F132970 ( clockSq ) } \n"}, {"code": "public int variant $F2 { \n\tif $F9467 ( variant ) { \n\t\tif ( $F121756 ( rawBytes ) == INT00 ) $F1619 ( variant , VARIANT_NCS_COMPAT ) else if ( $F121756 ( rawBytes ) == INT00 ) $F1619 ( variant , VARIANT_IETF_DRAFT ) else if ( $F121756 ( rawBytes ) == INT00 ) $F1619 ( variant , VARIANT_MS ) else $F1619 ( variant , VARIANT_FUTURE ) } \n\treturn variant ; \n\t} \n"}, {"code": "public long node $F2 throws UnsupportedOperationException { \n\tif ( variant ( ) != VARIANT_IETF_DRAFT || version ( ) != VERSION_ONE ) $F467995 ( WRONG_VAR_VER_MSG ) if $F112 ( node ) { \n\t\t$F18718 ( b ) $F132868 ( System , rawBytes , b ) node = new Long ( ( Bytes . toLong ( b ) & NUM00 ) ) ; \n\t\t} \n\t$F322041 ( node ) } \n"}, {"code": "public long timestamp $F2 throws UnsupportedOperationException { \n\tif ( variant ( ) != VARIANT_IETF_DRAFT || version ( ) != VERSION_ONE ) $F467995 ( WRONG_VAR_VER_MSG ) if $F9467 ( timestamp ) { \n\t\t$F18718 ( longVal ) $F120423 ( System , rawBytes , TIME_HI_START_POS , longVal , TIME_HI_TS_POS , TIME_HI_BYTE_LEN ) $F120423 ( System , rawBytes , TIME_MID_START_POS , longVal , TIME_MID_TS_POS , TIME_MID_BYTE_LEN ) $F120423 ( System , rawBytes , TIME_LOW_START_POS , longVal , TIME_LOW_TS_POS , TIME_LOW_BYTE_LEN ) longVal [ TIME_HI_TS_POS ] &= INT00 ; \n\t\ttimestamp = Bytes . toLong ( longVal ) ; \n\t\t} \n\treturn timestamp ; \n\t} \n"}, {"code": "public static UUID nameUUIDFromString ( String name , UUID namespace , String encoding ) { \n\t$F182281 ( nameAsBytes , name ) $F1975 concat = new byte [ UUID_BYTE_LENGTH + nameAsBytes . length ] ; \n\tSystem . arraycopy ( namespace . getRawBytes ( ) , INT00 , concat , INT00 , UUID_BYTE_LENGTH ) ; \n\t$F40559 ( System , nameAsBytes , concat , UUID_BYTE_LENGTH ) $F96071 ( raw ) if ( encoding . equals ( UUID . MD5_ENCODING ) ) { \n\t\traw = DigestUtils . md5 ( concat ) ; \n\t\t} \n\telse if ( encoding . equals ( UUID . SHA1_ENCODING ) ) { \n\t\t$F1975 shaDigest = DigestUtils . sha ( concat ) ; \n\t\t$F162566 ( raw ) $F132868 ( System , shaDigest , raw ) } \n\telse $F96541 ( encoding ) raw [ TIME_HI_AND_VERSION_BYTE_6 ] &= INT00 ; \n\traw [ TIME_HI_AND_VERSION_BYTE_6 ] |= ( UUID . VERSION_THREE < < INT00 ) ; \n\traw [ CLOCK_SEQ_HI_AND_RESERVED_BYTE_8 ] &= INT00 ; \n\traw [ CLOCK_SEQ_HI_AND_RESERVED_BYTE_8 ] |= INT00 ; \n\treturn new UUID ( raw ) ; \n\t} \n"}, {"code": "public static UUID nameUUIDFromString ( String name , UUID namespace ) { \n\treturn nameUUIDFromString ( name , namespace , UUID . MD5_ENCODING ) ; \n\t} \n"}, {"code": "public Resource getResource ( final RelativeResource relativeResource ) throws IOException { \n\tResource root = $F28531 ( getRoot , relativeResource ) ; \n\tif $F112 ( root ) { \n\t\tthrow new IllegalStateException ( STRING00 + $F681055 ( relativeResource ) + STRING00 ) ; \n\t\t} \n\treturn root . createRelative ( $F2515 ( relativeResource ) ) ; \n\t} \n"}, {"code": "public File getNewFile ( final RelativeResource relativeFile ) throws IOException { \n\tFile file = getResource ( relativeFile ) . getFile ( ) ; \n\tdeleteOldFile ( file ) ; \n\treturn file ; \n\t} \n"}, {"code": "public void copyFile ( final RelativeResource src , final RelativeResource dest ) throws IOException { \n\t$F71224 ( src , dest ) $F133680 ( LOG , src , dest ) File srcFile = getResource ( src ) . getFile ( ) ; \n\tif $F11857 ( srcFile ) { \n\t\tthrow new FileNotFoundException $F93516 ( srcFile ) ; \n\t\t} \n\tFile destFile = getResource ( dest ) . getFile ( ) ; \n\tdeleteOldFile ( destFile ) ; \n\t$F595029 ( FileUtils , srcFile , destFile ) } \n"}, {"code": "private static void deleteOldFile $F347039 ( file ) { \n\tif $F11857 ( file ) $F255 $F3509 ( LOG , file ) boolean $F145766 ( success , file ) ; \n\tif ( ! success ) $F26017 ( LOG , file ) } \n"}, {"code": "static MutableIntTuple wrap ( MutableIntTuple tuple , IntTuple bounds ) { \n\tif ( $F1976 ( tuple ) != $F1976 ( bounds ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( tuple ) + STRING00 + $F1976 ( bounds ) ) ; \n\t\t} \n\tfor ( int i = INT00 ; \n\t$F43999 ( i , tuple ) ; \n\ti ++ ) { \n\t\t$F90858 ( coordinate , tuple , i ) int wrappedCoordinate = $F33692 ( wrap , coordinate , bounds , i ) ; \n\t\t$F52836 ( tuple , i , wrappedCoordinate ) } \n\treturn tuple ; \n\t} \n"}, {"code": "$F1 public T get ( $F762 long timeout , $F762 TimeUnit unit ) throws $F78770 { \n\tif $F268 ( exception ) throw $F68563 ( exception ) ; \n\treturn returnValue ; \n\t} \n"}, {"code": "public static boolean isClazzExists ( String name ) { \n\ttry { \n\t\tClass . forName ( name , false , Decisions . class . getClassLoader ( ) ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) $F1668 $F232 } \n"}, {"code": "public static $F1372 Decision $F1372 unique $F2 { \n\treturn new Decision $F1372 $F2 { \n\t\tprivate $F8938 $F68544 ( seen , Sets ) ; \n\t\t$F192330 ( sawNull ) $F1 public boolean apply ( T arg ) { \n\t\t\tif $F112 ( arg ) { \n\t\t\t\tboolean result = ! sawNull ; \n\t\t\t\tsawNull = true ; \n\t\t\t\treturn result ; \n\t\t\t\t} \n\t\t\telse if $F8674 ( seen , arg ) $F1668 else $F100618 ( seen , arg ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 protected $F2612 resolveClass ( ObjectStreamClass desc ) throws $F41220 { \n\treturn Class . forName ( $F507 ( desc ) , true , loader ) ; \n\t} \n"}, {"code": "public final ProtoParser . parse_return parse ( Proto proto ) throws RecognitionException { \n\tProtoParser . parse_return retval = new ProtoParser . parse_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( EOF2 ) ProtoParser . statement_return statement1 = null ; \n\t$F105146 ( EOF2_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F1987 ( cnt1 ) loop1 : do { \n\t\t\t\t$F1987 ( alt1 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase AT : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case EXTEND : $F12286 ( alt1 ) $F332 } \n\t\t\t\tswitch ( alt1 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_statement_in_parse178 ) ; \n\t\t\t\t\t\t$F10937 ( statement1 , statement , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , statement1 ) } \n\t\t\t\t\t$F332 $F2377 if $F9869 ( cnt1 ) break loop1 ; \n\t\t\t\t\t$F2180257 ( state , retval ) $F2181741 ( eee , input ) throw eee ; \n\t\t\t\t\t} \n\t\t\t\tcnt1 ++ ; \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( EOF2 , match , input , EOF , FOLLOW_EOF_in_parse183 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\tproto . postParse ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . statement_return statement ( Proto proto ) throws RecognitionException { \n\tProtoParser . statement_return retval = new ProtoParser . statement_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) ProtoParser . header_syntax_return header_syntax3 = null ; \n\tProtoParser . header_package_return header_package4 = null ; \n\tProtoParser . header_import_return header_import5 = null ; \n\tProtoParser . message_block_return message_block6 = null ; \n\tProtoParser . enum_block_return enum_block7 = null ; \n\tProtoParser . extend_block_return extend_block8 = null ; \n\tProtoParser . service_block_return service_block9 = null ; \n\tProtoParser . annotation_entry_return annotation_entry10 = null ; \n\tProtoParser . option_entry_return option_entry11 = null ; \n\ttry { \n\t\t$F1987 ( alt2 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( SYNTAX , alt2 ) $F2180251 ( PKG , alt2 ) $F2180251 ( IMPORT , alt2 ) $F2180251 ( MESSAGE , alt2 ) $F2180251 ( ENUM , alt2 ) $F2180251 ( EXTEND , alt2 ) $F2180251 ( SERVICE , alt2 ) $F2180251 ( AT , alt2 ) $F2180251 ( OPTION , alt2 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt2 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_header_syntax_in_statement211 ) ; \n\t\t\t\t$F10937 ( header_syntax3 , header_syntax , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , header_syntax3 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_header_package_in_statement222 ) ; \n\t\t\t\t$F10937 ( header_package4 , header_package , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , header_package4 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_header_import_in_statement233 ) ; \n\t\t\t\t$F10937 ( header_import5 , header_import , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , header_import5 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_message_block_in_statement244 ) ; \n\t\t\t\t$F1306433 ( message_block6 , message_block , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , message_block6 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_enum_block_in_statement255 ) ; \n\t\t\t\t$F1306433 ( enum_block7 , enum_block , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , enum_block7 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_extend_block_in_statement266 ) ; \n\t\t\t\t$F1306433 ( extend_block8 , extend_block , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , extend_block8 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_service_block_in_statement277 ) ; \n\t\t\t\t$F1306433 ( service_block9 , service_block , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , service_block9 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_annotation_entry_in_statement288 ) ; \n\t\t\t\t$F10937 ( annotation_entry10 , annotation_entry , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_entry10 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_option_entry_in_statement299 ) ; \n\t\t\t\toption_entry11 = $F66230 ( option_entry , proto ) ; \n\t\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , option_entry11 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . var_reserved_return var_reserved $F2 throws RecognitionException { \n\tProtoParser . var_reserved_return retval = new ProtoParser . var_reserved_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( set12 ) $F105146 ( set12_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) set12 = ( Token ) $F1954510 ( input ) ; \n\t\t\tif ( $F1954449 ( input ) == TO || ( $F1954449 ( input ) >= PKG && $F1954449 ( input ) <= VOID ) ) { \n\t\t\t\t$F539485 ( input ) if $F2180273 ( state ) adaptor . addChild ( root_0 , $F2221567 ( adaptor , set12 ) ) ; \n\t\t\t\tstate . errorRecovery = false ; \n\t\t\t\t$F2180630 ( state ) } \n\t\t\telse { \n\t\t\t\t$F2180257 ( state , retval ) $F2180636 ( mse , input ) throw mse ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . var_return var $F2 throws RecognitionException { \n\tProtoParser . var_return retval = new ProtoParser . var_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( ID13 ) ProtoParser . var_reserved_return var_reserved14 = null ; \n\t$F105146 ( ID13_tree ) try { \n\t\t$F1987 ( alt3 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( ID , alt3 ) case TO : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : $F12286 ( alt3 ) $F332 $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt3 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( ID13 , match , input , ID , FOLLOW_ID_in_var509 ) $F2180271 ( state , retval ) $F2221571 ( state , ID13_tree , adaptor , ID13 , root_0 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_var_reserved_in_var513 ) ; \n\t\t\t\t$F10411 ( var_reserved14 , var_reserved ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , var_reserved14 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . annotation_entry_return annotation_entry ( Proto proto ) throws RecognitionException { \n\tProtoParser . annotation_entry_return retval = new ProtoParser . annotation_entry_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( AT17 ) $F1979162 ( LEFTPAREN19 ) $F1979162 ( COMMA21 ) $F1979162 ( RIGHTPAREN23 ) ProtoParser . var_return var18 = null ; \n\tProtoParser . annotation_keyval_return annotation_keyval20 = null ; \n\tProtoParser . annotation_keyval_return annotation_keyval22 = null ; \n\t$F105146 ( AT17_tree ) $F105146 ( LEFTPAREN19_tree ) $F105146 ( COMMA21_tree ) $F105146 ( RIGHTPAREN23_tree ) Annotation annotation = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( AT17 , match , input , AT , FOLLOW_AT_in_annotation_entry562 ) $F2180271 ( state , retval ) $F2221571 ( state , AT17_tree , adaptor , AT17 , root_0 ) pushFollow ( FOLLOW_var_in_annotation_entry564 ) ; \n\t\t\t$F10411 ( var18 , var ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , var18 ) if $F2180273 ( state ) { \n\t\t\t\tannotation = new Annotation ( ( var18 != null ? input . toString ( var18 . start , var18 . stop ) : null ) ) ; \n\t\t\t\t} \n\t\t\t$F1987 ( alt6 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( LEFTPAREN , alt6 ) } \n\t\t\tswitch ( alt6 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( LEFTPAREN19 , match , input , LEFTPAREN , FOLLOW_LEFTPAREN_in_annotation_entry577 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTPAREN19_tree , adaptor , LEFTPAREN19 , root_0 ) pushFollow ( FOLLOW_annotation_keyval_in_annotation_entry588 ) ; \n\t\t\t\t\t$F14067 ( annotation_keyval20 , annotation_keyval , proto , annotation ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_keyval20 ) loop5 : do { \n\t\t\t\t\t\t$F1987 ( alt5 ) switch $F2180250 ( input ) { \n\t\t\t\t\t\t\t$F2180251 ( COMMA , alt5 ) } \n\t\t\t\t\t\tswitch ( alt5 ) { \n\t\t\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t\t\t$F2180269 ( COMMA21 , match , input , COMMA , FOLLOW_COMMA_in_annotation_entry592 ) $F2180271 ( state , retval ) $F2221571 ( state , COMMA21_tree , adaptor , COMMA21 , root_0 ) pushFollow ( FOLLOW_annotation_keyval_in_annotation_entry594 ) ; \n\t\t\t\t\t\t\t\t$F14067 ( annotation_keyval22 , annotation_keyval , proto , annotation ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_keyval22 ) } \n\t\t\t\t\t\t\t$F332 $F2377 break loop5 ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\twhile $F38432 ; \n\t\t\t\t\t$F2180269 ( RIGHTPAREN23 , match , input , RIGHTPAREN , FOLLOW_RIGHTPAREN_in_annotation_entry608 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTPAREN23_tree , adaptor , RIGHTPAREN23 , root_0 ) } \n\t\t\t\t$F332 } \n\t\t\tif $F2180273 ( state ) $F529 ( proto , annotation ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . annotation_keyval_return annotation_keyval ( Proto proto , Annotation annotation ) throws RecognitionException { \n\tProtoParser . annotation_keyval_return retval = new ProtoParser . annotation_keyval_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( fid ) $F1979162 ( ASSIGN24 ) $F1979162 ( ID25 ) $F1979162 ( NUMFLOAT26 ) $F1979162 ( NUMINT27 ) $F1979162 ( NUMDOUBLE28 ) $F1979162 ( TRUE29 ) $F1979162 ( FALSE30 ) $F1979162 ( STRING_LITERAL31 ) ProtoParser . var_full_return k = null ; \n\tProtoParser . var_reserved_return vr = null ; \n\t$F105146 ( fid_tree ) $F105146 ( ASSIGN24_tree ) $F105146 ( ID25_tree ) $F105146 ( NUMFLOAT26_tree ) $F105146 ( NUMINT27_tree ) $F105146 ( NUMDOUBLE28_tree ) $F105146 ( TRUE29_tree ) $F105146 ( FALSE30_tree ) $F105146 ( STRING_LITERAL31_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_var_full_in_annotation_keyval635 ) ; \n\t\t\t$F10411 ( k , var_full ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , k ) $F2180269 ( ASSIGN24 , match , input , ASSIGN , FOLLOW_ASSIGN_in_annotation_keyval637 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN24_tree , adaptor , ASSIGN24 , root_0 ) $F1987 ( alt7 ) switch $F2180250 ( input ) { \n\t\t\t\tcase TO : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : $F12286 ( alt7 ) $F332 $F2180251 ( ID , alt7 ) $F2180251 ( FULL_ID , alt7 ) $F2180251 ( NUMFLOAT , alt7 ) $F2180251 ( NUMINT , alt7 ) $F2180251 ( NUMDOUBLE , alt7 ) $F2180251 ( TRUE , alt7 ) $F2180251 ( FALSE , alt7 ) $F2180251 ( STRING_LITERAL , alt7 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt7 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_var_reserved_in_annotation_keyval659 ) ; \n\t\t\t\t\t$F10411 ( vr , var_reserved ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , vr ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , ( vr != null ? input . toString ( vr . start , vr . stop ) : null ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( ID25 , match , input , ID , FOLLOW_ID_in_annotation_keyval679 ) $F2180271 ( state , retval ) $F2221571 ( state , ID25_tree , adaptor , ID25 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . putRef ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , $F2180352 ( ID25 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( fid , match , input , FULL_ID , FOLLOW_FULL_ID_in_annotation_keyval701 ) $F2180271 ( state , retval ) $F2221571 ( state , fid_tree , adaptor , fid , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . putRef ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , $F2180352 ( fid ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMFLOAT26 , match , input , NUMFLOAT , FOLLOW_NUMFLOAT_in_annotation_keyval721 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMFLOAT26_tree , adaptor , NUMFLOAT26 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Float . valueOf ( $F2180352 ( NUMFLOAT26 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMINT27 , match , input , NUMINT , FOLLOW_NUMINT_in_annotation_keyval741 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMINT27_tree , adaptor , NUMINT27 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Integer . valueOf ( $F2180352 ( NUMINT27 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMDOUBLE28 , match , input , NUMDOUBLE , FOLLOW_NUMDOUBLE_in_annotation_keyval761 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMDOUBLE28_tree , adaptor , NUMDOUBLE28 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Double . valueOf ( $F2180352 ( NUMDOUBLE28 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( TRUE29 , match , input , TRUE , FOLLOW_TRUE_in_annotation_keyval781 ) $F2180271 ( state , retval ) $F2221571 ( state , TRUE29_tree , adaptor , TRUE29 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Boolean . TRUE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( FALSE30 , match , input , FALSE , FOLLOW_FALSE_in_annotation_keyval801 ) $F2180271 ( state , retval ) $F2221571 ( state , FALSE30_tree , adaptor , FALSE30 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Boolean . FALSE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( STRING_LITERAL31 , match , input , STRING_LITERAL , FOLLOW_STRING_LITERAL_in_annotation_keyval821 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING_LITERAL31_tree , adaptor , STRING_LITERAL31 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tannotation . put ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL31 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . header_syntax_return header_syntax ( Proto proto ) throws RecognitionException { \n\tProtoParser . header_syntax_return retval = new ProtoParser . header_syntax_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( SYNTAX32 ) $F1979162 ( ASSIGN33 ) $F1979162 ( STRING_LITERAL34 ) $F1979162 ( SEMICOLON35 ) $F105146 ( SYNTAX32_tree ) $F105146 ( ASSIGN33_tree ) $F105146 ( STRING_LITERAL34_tree ) $F105146 ( SEMICOLON35_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SYNTAX32 , match , input , SYNTAX , FOLLOW_SYNTAX_in_header_syntax854 ) $F2180271 ( state , retval ) $F2221571 ( state , SYNTAX32_tree , adaptor , SYNTAX32 , root_0 ) $F2180269 ( ASSIGN33 , match , input , ASSIGN , FOLLOW_ASSIGN_in_header_syntax856 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN33_tree , adaptor , ASSIGN33 , root_0 ) $F2180269 ( STRING_LITERAL34 , match , input , STRING_LITERAL , FOLLOW_STRING_LITERAL_in_header_syntax858 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING_LITERAL34_tree , adaptor , STRING_LITERAL34 , root_0 ) $F2180269 ( SEMICOLON35 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_header_syntax860 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! $F5755 ( getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL34 ) ) ) ) { \n\t\t\t\t\tthrow new IllegalStateException ( STRING00 + getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL34 ) ) + STRING00 ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . header_package_return header_package ( Proto proto ) throws RecognitionException { \n\tProtoParser . header_package_return retval = new ProtoParser . header_package_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( PKG36 ) $F1979162 ( FULL_ID37 ) $F1979162 ( SEMICOLON39 ) ProtoParser . var_return var38 = null ; \n\t$F105146 ( PKG36_tree ) $F105146 ( FULL_ID37_tree ) $F105146 ( SEMICOLON39_tree ) $F4728 ( value ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( PKG36 , match , input , PKG , FOLLOW_PKG_in_header_package889 ) $F2180271 ( state , retval ) $F2221571 ( state , PKG36_tree , adaptor , PKG36 , root_0 ) $F1987 ( alt8 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( FULL_ID , alt8 ) case TO : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : case ID : $F12286 ( alt8 ) $F332 $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt8 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( FULL_ID37 , match , input , FULL_ID , FOLLOW_FULL_ID_in_header_package892 ) $F2180271 ( state , retval ) $F2221571 ( state , FULL_ID37_tree , adaptor , FULL_ID37 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tvalue = $F2180352 ( FULL_ID37 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_var_in_header_package898 ) ; \n\t\t\t\t\t$F10411 ( var38 , var ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , var38 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tvalue = ( var38 != null ? input . toString ( var38 . start , var38 . stop ) : null ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( SEMICOLON39 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_header_package903 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tif ( $F76244 ( proto ) != null ) $F3687 proto . setPackageName ( value ) ; \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . header_import_return header_import ( Proto proto ) throws RecognitionException { \n\tProtoParser . header_import_return retval = new ProtoParser . header_import_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( IMPORT40 ) $F1979162 ( STRING_LITERAL41 ) $F1979162 ( SEMICOLON42 ) $F105146 ( IMPORT40_tree ) $F105146 ( STRING_LITERAL41_tree ) $F105146 ( SEMICOLON42_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( IMPORT40 , match , input , IMPORT , FOLLOW_IMPORT_in_header_import931 ) $F2180271 ( state , retval ) $F2221571 ( state , IMPORT40_tree , adaptor , IMPORT40 , root_0 ) $F2180269 ( STRING_LITERAL41 , match , input , STRING_LITERAL , FOLLOW_STRING_LITERAL_in_header_import933 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING_LITERAL41_tree , adaptor , STRING_LITERAL41 , root_0 ) $F2180269 ( SEMICOLON42 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_header_import935 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tproto . importProto ( getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL41 ) ) ) ; \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . option_entry_return option_entry ( Proto proto , HasOptions ho ) throws RecognitionException { \n\tProtoParser . option_entry_return retval = new ProtoParser . option_entry_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( id ) $F1979162 ( fid ) $F1979162 ( OPTION43 ) $F1979162 ( LEFTPAREN44 ) $F1979162 ( RIGHTPAREN45 ) $F1979162 ( ASSIGN46 ) $F1979162 ( NUMFLOAT47 ) $F1979162 ( NUMINT48 ) $F1979162 ( NUMDOUBLE49 ) $F1979162 ( TRUE50 ) $F1979162 ( FALSE51 ) $F1979162 ( STRING_LITERAL52 ) $F1979162 ( SEMICOLON53 ) ProtoParser . var_full_return k = null ; \n\tProtoParser . var_reserved_return vr = null ; \n\t$F105146 ( id_tree ) $F105146 ( fid_tree ) $F105146 ( OPTION43_tree ) $F105146 ( LEFTPAREN44_tree ) $F105146 ( RIGHTPAREN45_tree ) $F105146 ( ASSIGN46_tree ) $F105146 ( NUMFLOAT47_tree ) $F105146 ( NUMINT48_tree ) $F105146 ( NUMDOUBLE49_tree ) $F105146 ( TRUE50_tree ) $F105146 ( FALSE51_tree ) $F105146 ( STRING_LITERAL52_tree ) $F105146 ( SEMICOLON53_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( OPTION43 , match , input , OPTION , FOLLOW_OPTION_in_option_entry959 ) $F2180271 ( state , retval ) $F2221571 ( state , OPTION43_tree , adaptor , OPTION43 , root_0 ) $F1987 ( alt9 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( LEFTPAREN , alt9 ) } \n\t\t\tswitch ( alt9 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( LEFTPAREN44 , match , input , LEFTPAREN , FOLLOW_LEFTPAREN_in_option_entry961 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTPAREN44_tree , adaptor , LEFTPAREN44 , root_0 ) } \n\t\t\t\t$F332 } \n\t\t\tpushFollow ( FOLLOW_var_full_in_option_entry966 ) ; \n\t\t\t$F10411 ( k , var_full ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , k ) $F1987 ( alt10 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( RIGHTPAREN , alt10 ) } \n\t\t\tswitch ( alt10 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( RIGHTPAREN45 , match , input , RIGHTPAREN , FOLLOW_RIGHTPAREN_in_option_entry968 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTPAREN45_tree , adaptor , RIGHTPAREN45 , root_0 ) } \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( ASSIGN46 , match , input , ASSIGN , FOLLOW_ASSIGN_in_option_entry971 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN46_tree , adaptor , ASSIGN46 , root_0 ) $F1987 ( alt11 ) switch $F2180250 ( input ) { \n\t\t\t\tcase TO : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : $F12286 ( alt11 ) $F332 $F2180251 ( ID , alt11 ) $F2180251 ( FULL_ID , alt11 ) $F2180251 ( NUMFLOAT , alt11 ) $F2180251 ( NUMINT , alt11 ) $F2180251 ( NUMDOUBLE , alt11 ) $F2180251 ( TRUE , alt11 ) $F2180251 ( FALSE , alt11 ) $F2180251 ( STRING_LITERAL , alt11 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt11 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_var_reserved_in_option_entry993 ) ; \n\t\t\t\t\t$F10411 ( vr , var_reserved ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , vr ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , ( vr != null ? input . toString ( vr . start , vr . stop ) : null ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( id , match , input , ID , FOLLOW_ID_in_option_entry1015 ) $F2180271 ( state , retval ) $F2221571 ( state , id_tree , adaptor , id , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putStandardOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , $F2180352 ( id ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( fid , match , input , FULL_ID , FOLLOW_FULL_ID_in_option_entry1037 ) $F2180271 ( state , retval ) $F2221571 ( state , fid_tree , adaptor , fid , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putStandardOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , $F2180352 ( fid ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMFLOAT47 , match , input , NUMFLOAT , FOLLOW_NUMFLOAT_in_option_entry1057 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMFLOAT47_tree , adaptor , NUMFLOAT47 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Float . valueOf ( $F2180352 ( NUMFLOAT47 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMINT48 , match , input , NUMINT , FOLLOW_NUMINT_in_option_entry1077 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMINT48_tree , adaptor , NUMINT48 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Integer . valueOf ( $F2180352 ( NUMINT48 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMDOUBLE49 , match , input , NUMDOUBLE , FOLLOW_NUMDOUBLE_in_option_entry1097 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMDOUBLE49_tree , adaptor , NUMDOUBLE49 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Double . valueOf ( $F2180352 ( NUMDOUBLE49 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( TRUE50 , match , input , TRUE , FOLLOW_TRUE_in_option_entry1117 ) $F2180271 ( state , retval ) $F2221571 ( state , TRUE50_tree , adaptor , TRUE50 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Boolean . TRUE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( FALSE51 , match , input , FALSE , FOLLOW_FALSE_in_option_entry1137 ) $F2180271 ( state , retval ) $F2221571 ( state , FALSE51_tree , adaptor , FALSE51 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , Boolean . FALSE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( STRING_LITERAL52 , match , input , STRING_LITERAL , FOLLOW_STRING_LITERAL_in_option_entry1157 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING_LITERAL52_tree , adaptor , STRING_LITERAL52 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tho . putExtraOption ( ( k != null ? input . toString ( k . start , k . stop ) : null ) , getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL52 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( SEMICOLON53 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_option_entry1171 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . message_block_return message_block ( Proto proto , Message parent ) throws RecognitionException { \n\tProtoParser . message_block_return retval = new ProtoParser . message_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( MESSAGE54 ) $F1979162 ( ID55 ) $F1979162 ( LEFTCURLY56 ) $F1979162 ( RIGHTCURLY58 ) ProtoParser . message_body_return message_body57 = null ; \n\t$F105146 ( MESSAGE54_tree ) $F105146 ( ID55_tree ) $F105146 ( LEFTCURLY56_tree ) $F105146 ( RIGHTCURLY58_tree ) Message message = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( MESSAGE54 , match , input , MESSAGE , FOLLOW_MESSAGE_in_message_block1204 ) $F2180271 ( state , retval ) $F2221571 ( state , MESSAGE54_tree , adaptor , MESSAGE54 , root_0 ) $F2180269 ( ID55 , match , input , ID , FOLLOW_ID_in_message_block1206 ) $F2180271 ( state , retval ) $F2221571 ( state , ID55_tree , adaptor , ID55 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tmessage = new Message ( $F2180352 ( ID55 ) , parent , proto ) ; \n\t\t\t\tproto . addAnnotationsTo ( message ) ; \n\t\t\t\t} \n\t\t\t$F2180269 ( LEFTCURLY56 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_message_block1219 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY56_tree , adaptor , LEFTCURLY56 , root_0 ) loop12 : do { \n\t\t\t\t$F1987 ( alt12 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase AT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : $F12286 ( alt12 ) $F332 } \n\t\t\t\tswitch ( alt12 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_message_body_in_message_block1222 ) ; \n\t\t\t\t\t\t$F14067 ( message_body57 , message_body , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , message_body57 ) } \n\t\t\t\t\t$F332 $F2377 break loop12 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY58 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_message_block1227 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY58_tree , adaptor , RIGHTCURLY58 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . message_body_return message_body ( Proto proto , Message message ) throws RecognitionException { \n\tProtoParser . message_body_return retval = new ProtoParser . message_body_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) ProtoParser . message_block_return message_block59 = null ; \n\tProtoParser . message_field_return message_field60 = null ; \n\tProtoParser . enum_block_return enum_block61 = null ; \n\tProtoParser . service_block_return service_block62 = null ; \n\tProtoParser . extend_block_return extend_block63 = null ; \n\tProtoParser . extensions_range_return extensions_range64 = null ; \n\tProtoParser . annotation_entry_return annotation_entry65 = null ; \n\tProtoParser . option_entry_return option_entry66 = null ; \n\ttry { \n\t\t$F1987 ( alt13 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( MESSAGE , alt13 ) case REQUIRED : case OPTIONAL : case REPEATED : $F12286 ( alt13 ) $F332 $F2180251 ( ENUM , alt13 ) $F2180251 ( SERVICE , alt13 ) $F2180251 ( EXTEND , alt13 ) $F2180251 ( EXTENSIONS , alt13 ) $F2180251 ( AT , alt13 ) $F2180251 ( OPTION , alt13 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt13 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_message_block_in_message_body1250 ) ; \n\t\t\t\t$F14067 ( message_block59 , message_block , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , message_block59 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_message_field_in_message_body1261 ) ; \n\t\t\t\t$F14067 ( message_field60 , message_field , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , message_field60 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_enum_block_in_message_body1272 ) ; \n\t\t\t\t$F14067 ( enum_block61 , enum_block , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , enum_block61 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_service_block_in_message_body1283 ) ; \n\t\t\t\t$F14067 ( service_block62 , service_block , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , service_block62 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_extend_block_in_message_body1294 ) ; \n\t\t\t\t$F14067 ( extend_block63 , extend_block , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , extend_block63 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_extensions_range_in_message_body1305 ) ; \n\t\t\t\t$F14067 ( extensions_range64 , extensions_range , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , extensions_range64 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_annotation_entry_in_message_body1316 ) ; \n\t\t\t\t$F10937 ( annotation_entry65 , annotation_entry , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_entry65 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_option_entry_in_message_body1327 ) ; \n\t\t\t\t$F14067 ( option_entry66 , option_entry , proto , message ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , option_entry66 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . extensions_range_return extensions_range ( Proto proto , Message message ) throws RecognitionException { \n\tProtoParser . extensions_range_return retval = new ProtoParser . extensions_range_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( f ) $F1979162 ( l ) $F1979162 ( EXTENSIONS67 ) $F1979162 ( TO68 ) $F1979162 ( MAX69 ) $F1979162 ( SEMICOLON70 ) $F105146 ( f_tree ) $F105146 ( l_tree ) $F105146 ( EXTENSIONS67_tree ) $F105146 ( TO68_tree ) $F105146 ( MAX69_tree ) $F105146 ( SEMICOLON70_tree ) $F3747 ( first ) $F3747 ( last ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( EXTENSIONS67 , match , input , EXTENSIONS , FOLLOW_EXTENSIONS_in_extensions_range1358 ) $F2180271 ( state , retval ) $F2221571 ( state , EXTENSIONS67_tree , adaptor , EXTENSIONS67 , root_0 ) $F2180269 ( f , match , input , NUMINT , FOLLOW_NUMINT_in_extensions_range1362 ) $F2180271 ( state , retval ) $F2221571 ( state , f_tree , adaptor , f , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tfirst = Integer . parseInt ( $F2180352 ( f ) ) ; \n\t\t\t\tlast = first ; \n\t\t\t\t} \n\t\t\t$F1987 ( alt15 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( TO , alt15 ) } \n\t\t\tswitch ( alt15 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( TO68 , match , input , TO , FOLLOW_TO_in_extensions_range1376 ) $F2180271 ( state , retval ) $F2221571 ( state , TO68_tree , adaptor , TO68 , root_0 ) $F1987 ( alt14 ) switch $F2180250 ( input ) { \n\t\t\t\t\t\t$F2180251 ( NUMINT , alt14 ) $F2180251 ( MAX , alt14 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t\t\t} \n\t\t\t\t\tswitch ( alt14 ) { \n\t\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t\t$F2180269 ( l , match , input , NUMINT , FOLLOW_NUMINT_in_extensions_range1382 ) $F2180271 ( state , retval ) $F2221571 ( state , l_tree , adaptor , l , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\t\t\tlast = Integer . parseInt ( $F2180352 ( l ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t\t\t$F2180269 ( MAX69 , match , input , MAX , FOLLOW_MAX_in_extensions_range1388 ) $F2180271 ( state , retval ) $F2221571 ( state , MAX69_tree , adaptor , MAX69 , root_0 ) if $F2180273 ( state ) $F12286 ( last ) } \n\t\t\t\t\t\t$F332 } \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( SEMICOLON70 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_extensions_range1405 ) $F2180271 ( state , retval ) if $F2180273 ( state ) { \n\t\t\t\tmessage . defineExtensionRange ( first , last ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . message_field_return message_field ( Proto proto , HasFields message ) throws RecognitionException { \n\tProtoParser . message_field_return retval = new ProtoParser . message_field_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( OPTIONAL71 ) $F1979162 ( REQUIRED72 ) $F1979162 ( REPEATED73 ) $F1979162 ( ASSIGN76 ) $F1979162 ( NUMINT77 ) $F1979162 ( SEMICOLON79 ) ProtoParser . field_type_return field_type74 = null ; \n\tProtoParser . var_return var75 = null ; \n\tProtoParser . field_options_return field_options78 = null ; \n\tProtoParser . ignore_block_return ignore_block80 = null ; \n\t$F105146 ( OPTIONAL71_tree ) $F105146 ( REQUIRED72_tree ) $F105146 ( REPEATED73_tree ) $F105146 ( ASSIGN76_tree ) $F105146 ( NUMINT77_tree ) $F105146 ( SEMICOLON79_tree ) Field . Modifier modifier = null ; \n\tFieldHolder fieldHolder = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F1987 ( alt16 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( OPTIONAL , alt16 ) $F2180251 ( REQUIRED , alt16 ) $F2180251 ( REPEATED , alt16 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt16 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( OPTIONAL71 , match , input , OPTIONAL , FOLLOW_OPTIONAL_in_message_field1439 ) $F2180271 ( state , retval ) $F2221571 ( state , OPTIONAL71_tree , adaptor , OPTIONAL71 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tmodifier = Field . Modifier . OPTIONAL ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( REQUIRED72 , match , input , REQUIRED , FOLLOW_REQUIRED_in_message_field1456 ) $F2180271 ( state , retval ) $F2221571 ( state , REQUIRED72_tree , adaptor , REQUIRED72 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tmodifier = Field . Modifier . REQUIRED ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( REPEATED73 , match , input , REPEATED , FOLLOW_REPEATED_in_message_field1473 ) $F2180271 ( state , retval ) $F2221571 ( state , REPEATED73_tree , adaptor , REPEATED73 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tmodifier = Field . Modifier . REPEATED ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\tif $F2180273 ( state ) { \n\t\t\t\tfieldHolder = new FieldHolder $F2 ; \n\t\t\t\t} \n\t\t\tpushFollow ( FOLLOW_field_type_in_message_field1488 ) ; \n\t\t\t$F16033 ( field_type74 , field_type , proto , message , fieldHolder ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_type74 ) pushFollow ( FOLLOW_var_in_message_field1500 ) ; \n\t\t\t$F10411 ( var75 , var ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , var75 ) $F2180269 ( ASSIGN76 , match , input , ASSIGN , FOLLOW_ASSIGN_in_message_field1502 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN76_tree , adaptor , ASSIGN76 , root_0 ) $F2180269 ( NUMINT77 , match , input , NUMINT , FOLLOW_NUMINT_in_message_field1504 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMINT77_tree , adaptor , NUMINT77 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif ( fieldHolder . field != null ) { \n\t\t\t\t\tfieldHolder . field . modifier = modifier ; \n\t\t\t\t\tfieldHolder . field . name = ( var75 != null ? input . toString ( var75 . start , var75 . stop ) : null ) ; \n\t\t\t\t\tfieldHolder . field . number = Integer . parseInt ( $F2180352 ( NUMINT77 ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F1987 ( alt17 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( LEFTSQUARE , alt17 ) } \n\t\t\tswitch ( alt17 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_field_options_in_message_field1518 ) ; \n\t\t\t\t\tfield_options78 = field_options ( proto , message , fieldHolder . field ) ; \n\t\t\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_options78 ) } \n\t\t\t\t$F332 } \n\t\t\tif $F2180273 ( state ) { \n\t\t\t\tif ( fieldHolder . field != null ) { \n\t\t\t\t\tproto . addAnnotationsTo ( fieldHolder . field , message . getEnclosingNamespace ( ) ) ; \n\t\t\t\t\tmessage . addField ( fieldHolder . field ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F1987 ( alt18 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( SEMICOLON , alt18 ) $F2180251 ( LEFTCURLY , alt18 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt18 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( SEMICOLON79 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_message_field1534 ) $F2180271 ( state , retval ) } \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_ignore_block_in_message_field1539 ) ; \n\t\t\t\t\t$F10411 ( ignore_block80 , ignore_block ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , ignore_block80 ) } \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . field_type_return field_type ( Proto proto , HasFields message , FieldHolder fieldHolder ) throws RecognitionException { \n\tProtoParser . field_type_return retval = new ProtoParser . field_type_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( INT3281 ) $F1979162 ( UINT3282 ) $F1979162 ( SINT3283 ) $F1979162 ( FIXED3284 ) $F1979162 ( SFIXED3285 ) $F1979162 ( INT6486 ) $F1979162 ( UINT6487 ) $F1979162 ( SINT6488 ) $F1979162 ( FIXED6489 ) $F1979162 ( SFIXED6490 ) $F1979162 ( FLOAT91 ) $F1979162 ( DOUBLE92 ) $F1979162 ( BOOL93 ) $F1979162 ( STRING94 ) $F1979162 ( BYTES95 ) $F1979162 ( GROUP96 ) $F1979162 ( FULL_ID97 ) $F1979162 ( ID98 ) $F105146 ( INT3281_tree ) $F105146 ( UINT3282_tree ) $F105146 ( SINT3283_tree ) $F105146 ( FIXED3284_tree ) $F105146 ( SFIXED3285_tree ) $F105146 ( INT6486_tree ) $F105146 ( UINT6487_tree ) $F105146 ( SINT6488_tree ) $F105146 ( FIXED6489_tree ) $F105146 ( SFIXED6490_tree ) $F105146 ( FLOAT91_tree ) $F105146 ( DOUBLE92_tree ) $F105146 ( BOOL93_tree ) $F105146 ( STRING94_tree ) $F105146 ( BYTES95_tree ) $F105146 ( GROUP96_tree ) $F105146 ( FULL_ID97_tree ) $F105146 ( ID98_tree ) try { \n\t\t$F1987 ( alt19 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( INT32 , alt19 ) $F2180251 ( UINT32 , alt19 ) $F2180251 ( SINT32 , alt19 ) $F2180251 ( FIXED32 , alt19 ) $F2180251 ( SFIXED32 , alt19 ) $F2180251 ( INT64 , alt19 ) $F2180251 ( UINT64 , alt19 ) $F2180251 ( SINT64 , alt19 ) $F2180251 ( FIXED64 , alt19 ) $F2180251 ( SFIXED64 , alt19 ) $F2180251 ( FLOAT , alt19 ) $F2180251 ( DOUBLE , alt19 ) $F2180251 ( BOOL , alt19 ) $F2180251 ( STRING , alt19 ) $F2180251 ( BYTES , alt19 ) $F2180251 ( GROUP , alt19 ) $F2180251 ( FULL_ID , alt19 ) $F2180251 ( ID , alt19 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt19 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( INT3281 , match , input , INT32 , FOLLOW_INT32_in_field_type1565 ) $F2180271 ( state , retval ) $F2221571 ( state , INT3281_tree , adaptor , INT3281 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Int32 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( UINT3282 , match , input , UINT32 , FOLLOW_UINT32_in_field_type1577 ) $F2180271 ( state , retval ) $F2221571 ( state , UINT3282_tree , adaptor , UINT3282 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . UInt32 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SINT3283 , match , input , SINT32 , FOLLOW_SINT32_in_field_type1589 ) $F2180271 ( state , retval ) $F2221571 ( state , SINT3283_tree , adaptor , SINT3283 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . SInt32 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( FIXED3284 , match , input , FIXED32 , FOLLOW_FIXED32_in_field_type1601 ) $F2180271 ( state , retval ) $F2221571 ( state , FIXED3284_tree , adaptor , FIXED3284 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Fixed32 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SFIXED3285 , match , input , SFIXED32 , FOLLOW_SFIXED32_in_field_type1613 ) $F2180271 ( state , retval ) $F2221571 ( state , SFIXED3285_tree , adaptor , SFIXED3285 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . SFixed32 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( INT6486 , match , input , INT64 , FOLLOW_INT64_in_field_type1625 ) $F2180271 ( state , retval ) $F2221571 ( state , INT6486_tree , adaptor , INT6486 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Int64 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( UINT6487 , match , input , UINT64 , FOLLOW_UINT64_in_field_type1637 ) $F2180271 ( state , retval ) $F2221571 ( state , UINT6487_tree , adaptor , UINT6487 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . UInt64 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SINT6488 , match , input , SINT64 , FOLLOW_SINT64_in_field_type1649 ) $F2180271 ( state , retval ) $F2221571 ( state , SINT6488_tree , adaptor , SINT6488 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . SInt64 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( FIXED6489 , match , input , FIXED64 , FOLLOW_FIXED64_in_field_type1661 ) $F2180271 ( state , retval ) $F2221571 ( state , FIXED6489_tree , adaptor , FIXED6489 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Fixed64 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SFIXED6490 , match , input , SFIXED64 , FOLLOW_SFIXED64_in_field_type1673 ) $F2180271 ( state , retval ) $F2221571 ( state , SFIXED6490_tree , adaptor , SFIXED6490 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . SFixed64 $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( FLOAT91 , match , input , FLOAT , FOLLOW_FLOAT_in_field_type1685 ) $F2180271 ( state , retval ) $F2221571 ( state , FLOAT91_tree , adaptor , FLOAT91 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Float $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( DOUBLE92 , match , input , DOUBLE , FOLLOW_DOUBLE_in_field_type1697 ) $F2180271 ( state , retval ) $F2221571 ( state , DOUBLE92_tree , adaptor , DOUBLE92 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Double $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( BOOL93 , match , input , BOOL , FOLLOW_BOOL_in_field_type1709 ) $F2180271 ( state , retval ) $F2221571 ( state , BOOL93_tree , adaptor , BOOL93 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Bool $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( STRING94 , match , input , STRING , FOLLOW_STRING_in_field_type1721 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING94_tree , adaptor , STRING94 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . String $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( BYTES95 , match , input , BYTES , FOLLOW_BYTES_in_field_type1733 ) $F2180271 ( state , retval ) $F2221571 ( state , BYTES95_tree , adaptor , BYTES95 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tfieldHolder . setField ( new Field . Bytes $F2 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( GROUP96 , match , input , GROUP , FOLLOW_GROUP_in_field_type1745 ) $F2180271 ( state , retval ) $F2221571 ( state , GROUP96_tree , adaptor , GROUP96 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tString suffix = $F15424 ( proto ) == null ? STRING00 : STRING00 + $F2014883 ( proto ) ; \n\t\t\t\t\twarn ( STRING00 + ( GROUP96 != null ? $F186503 ( GROUP96 ) : INT00 ) + suffix ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( FULL_ID97 , match , input , FULL_ID , FOLLOW_FULL_ID_in_field_type1757 ) $F2180271 ( state , retval ) $F2221571 ( state , FULL_ID97_tree , adaptor , FULL_ID97 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tString fullType = $F2180352 ( FULL_ID97 ) ; \n\t\t\t\t\t$F6990 ( lastDot , fullType ) $F2532 ( packageName , fullType , lastDot ) $F100656 ( type , fullType , lastDot ) fieldHolder . setField ( new Field . Reference $F2144 ( packageName , type , message ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( ID98 , match , input , ID , FOLLOW_ID_in_field_type1769 ) $F2180271 ( state , retval ) $F2221571 ( state , ID98_tree , adaptor , ID98 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\tString type = $F2180352 ( ID98 ) ; \n\t\t\t\t\tfieldHolder . setField ( new Field . Reference $F36140 ( type , message ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . field_options_return field_options ( Proto proto , HasFields message , Field field ) throws RecognitionException { \n\tProtoParser . field_options_return retval = new ProtoParser . field_options_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( LEFTSQUARE99 ) $F1979162 ( COMMA101 ) $F1979162 ( RIGHTSQUARE103 ) ProtoParser . field_options_keyval_return field_options_keyval100 = null ; \n\tProtoParser . field_options_keyval_return field_options_keyval102 = null ; \n\t$F105146 ( LEFTSQUARE99_tree ) $F105146 ( COMMA101_tree ) $F105146 ( RIGHTSQUARE103_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( LEFTSQUARE99 , match , input , LEFTSQUARE , FOLLOW_LEFTSQUARE_in_field_options1796 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTSQUARE99_tree , adaptor , LEFTSQUARE99 , root_0 ) pushFollow ( FOLLOW_field_options_keyval_in_field_options1798 ) ; \n\t\t\t$F119674 ( field_options_keyval100 , field_options_keyval , proto , message , field ) ; \n\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_options_keyval100 ) loop20 : do { \n\t\t\t\t$F1987 ( alt20 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( COMMA , alt20 ) } \n\t\t\t\tswitch ( alt20 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t$F2180269 ( COMMA101 , match , input , COMMA , FOLLOW_COMMA_in_field_options1811 ) $F2180271 ( state , retval ) $F2221571 ( state , COMMA101_tree , adaptor , COMMA101 , root_0 ) pushFollow ( FOLLOW_field_options_keyval_in_field_options1813 ) ; \n\t\t\t\t\t\t$F119674 ( field_options_keyval102 , field_options_keyval , proto , message , field ) ; \n\t\t\t\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_options_keyval102 ) } \n\t\t\t\t\t$F332 $F2377 break loop20 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTSQUARE103 , match , input , RIGHTSQUARE , FOLLOW_RIGHTSQUARE_in_field_options1818 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTSQUARE103_tree , adaptor , RIGHTSQUARE103 , root_0 ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . field_options_keyval_return field_options_keyval ( Proto proto , HasFields message , Field field , boolean checkDefault ) throws RecognitionException { \n\tProtoParser . field_options_keyval_return retval = new ProtoParser . field_options_keyval_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( val ) $F1979162 ( ASSIGN104 ) $F1979162 ( STRING_LITERAL105 ) $F1979162 ( NUMFLOAT106 ) $F1979162 ( NUMINT107 ) $F1979162 ( NUMDOUBLE108 ) $F1979162 ( HEX109 ) $F1979162 ( OCTAL110 ) $F1979162 ( TRUE111 ) $F1979162 ( FALSE112 ) $F1979162 ( FULL_ID113 ) $F1979162 ( EXP114 ) ProtoParser . var_full_return key = null ; \n\tProtoParser . var_reserved_return vr = null ; \n\tProtoParser . signed_constant_return signed_constant115 = null ; \n\t$F105146 ( val_tree ) $F105146 ( ASSIGN104_tree ) $F105146 ( STRING_LITERAL105_tree ) $F105146 ( NUMFLOAT106_tree ) $F105146 ( NUMINT107_tree ) $F105146 ( NUMDOUBLE108_tree ) $F105146 ( HEX109_tree ) $F105146 ( OCTAL110_tree ) $F105146 ( TRUE111_tree ) $F105146 ( FALSE112_tree ) $F105146 ( FULL_ID113_tree ) $F105146 ( EXP114_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_var_full_in_field_options_keyval1845 ) ; \n\t\t\t$F10411 ( key , var_full ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , key ) $F2180269 ( ASSIGN104 , match , input , ASSIGN , FOLLOW_ASSIGN_in_field_options_keyval1847 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN104_tree , adaptor , ASSIGN104 , root_0 ) $F1987 ( alt21 ) switch $F2180250 ( input ) { \n\t\t\t\tcase TO : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : $F12286 ( alt21 ) $F332 $F2180251 ( STRING_LITERAL , alt21 ) $F2180251 ( NUMFLOAT , alt21 ) $F2180251 ( NUMINT , alt21 ) $F2180251 ( NUMDOUBLE , alt21 ) $F2180251 ( HEX , alt21 ) $F2180251 ( OCTAL , alt21 ) $F2180251 ( TRUE , alt21 ) $F2180251 ( FALSE , alt21 ) $F2180251 ( ID , alt21 ) $F2180251 ( FULL_ID , alt21 ) $F2180251 ( EXP , alt21 ) $F2180251 ( MINUS , alt21 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt21 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_var_reserved_in_field_options_keyval1852 ) ; \n\t\t\t\t\t$F10411 ( vr , var_reserved ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , vr ) if $F2180273 ( state ) { \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , ( vr != null ? input . toString ( vr . start , vr . stop ) : null ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( STRING_LITERAL105 , match , input , STRING_LITERAL , FOLLOW_STRING_LITERAL_in_field_options_keyval1865 ) $F2180271 ( state , retval ) $F2221571 ( state , STRING_LITERAL105_tree , adaptor , STRING_LITERAL105 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . String ) field . defaultValue = getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL105 ) ) ; \n\t\t\t\t\t\t\telse if ( field instanceof Field . Bytes ) field . defaultValue = getBytesFromStringLiteral ( $F2180352 ( STRING_LITERAL105 ) ) ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , getStringFromStringLiteral ( $F2180352 ( STRING_LITERAL105 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMFLOAT106 , match , input , NUMFLOAT , FOLLOW_NUMFLOAT_in_field_options_keyval1877 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMFLOAT106_tree , adaptor , NUMFLOAT106 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Float ) field . defaultValue = Float . valueOf ( $F2180352 ( NUMFLOAT106 ) ) ; \n\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = Double . valueOf ( $F2180352 ( NUMFLOAT106 ) ) ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , Float . valueOf ( $F2180352 ( NUMFLOAT106 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMINT107 , match , input , NUMINT , FOLLOW_NUMINT_in_field_options_keyval1890 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMINT107_tree , adaptor , NUMINT107 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Number ) { \n\t\t\t\t\t\t\t\tif ( $F9272 ( field ) . endsWith ( STRING00 ) ) field . defaultValue = Integer . valueOf ( $F2180352 ( NUMINT107 ) ) ; \n\t\t\t\t\t\t\t\telse if ( $F9272 ( field ) . endsWith ( STRING00 ) ) field . defaultValue = Long . valueOf ( $F2180352 ( NUMINT107 ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Float ) field . defaultValue = Float . valueOf ( $F2180352 ( NUMINT107 ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = Double . valueOf ( $F2180352 ( NUMINT107 ) ) ; \n\t\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , Integer . valueOf ( $F2180352 ( NUMINT107 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( NUMDOUBLE108 , match , input , NUMDOUBLE , FOLLOW_NUMDOUBLE_in_field_options_keyval1902 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMDOUBLE108_tree , adaptor , NUMDOUBLE108 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Float ) field . defaultValue = Float . valueOf ( $F2180352 ( NUMDOUBLE108 ) ) ; \n\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = Double . valueOf ( $F2180352 ( NUMDOUBLE108 ) ) ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , Double . valueOf ( $F2180352 ( NUMDOUBLE108 ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( HEX109 , match , input , HEX , FOLLOW_HEX_in_field_options_keyval1914 ) $F2180271 ( state , retval ) $F2221571 ( state , HEX109_tree , adaptor , HEX109 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Number ) { \n\t\t\t\t\t\t\t\tif ( field instanceof Field . Int32 ) field . defaultValue = new Integer ( TextFormat . parseInt32 ( $F2180352 ( HEX109 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . UInt32 ) field . defaultValue = new Integer ( TextFormat . parseUInt32 ( $F2180352 ( HEX109 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Int64 ) field . defaultValue = new Long ( TextFormat . parseInt64 ( $F2180352 ( HEX109 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . UInt64 ) field . defaultValue = new Long ( TextFormat . parseUInt64 ( $F2180352 ( HEX109 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Float ) field . defaultValue = new Float ( Long . decode ( $F2180352 ( HEX109 ) ) . floatValue ( ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = new Double ( Long . decode ( $F2180352 ( HEX109 ) ) . doubleValue ( ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse if ( field instanceof Field . Bytes ) { \n\t\t\t\t\t\t\t\tfield . defaultValue = getBytesFromHexString ( $F2180352 ( HEX109 ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( HEX109 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( OCTAL110 , match , input , OCTAL , FOLLOW_OCTAL_in_field_options_keyval1926 ) $F2180271 ( state , retval ) $F2221571 ( state , OCTAL110_tree , adaptor , OCTAL110 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Number ) { \n\t\t\t\t\t\t\t\tif ( field instanceof Field . Int32 ) field . defaultValue = new Integer ( TextFormat . parseInt32 ( $F2180352 ( OCTAL110 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . UInt32 ) field . defaultValue = new Integer ( TextFormat . parseUInt32 ( $F2180352 ( OCTAL110 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Int64 ) field . defaultValue = new Long ( TextFormat . parseInt64 ( $F2180352 ( OCTAL110 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . UInt64 ) field . defaultValue = new Long ( TextFormat . parseUInt64 ( $F2180352 ( OCTAL110 ) ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Float ) field . defaultValue = new Float ( Long . decode ( $F2180352 ( OCTAL110 ) ) . floatValue ( ) ) ; \n\t\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = new Double ( Long . decode ( $F2180352 ( OCTAL110 ) ) . doubleValue ( ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( OCTAL110 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( TRUE111 , match , input , TRUE , FOLLOW_TRUE_in_field_options_keyval1938 ) $F2180271 ( state , retval ) $F2221571 ( state , TRUE111_tree , adaptor , TRUE111 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Bool ) field . defaultValue = Boolean . TRUE ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , Boolean . TRUE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( FALSE112 , match , input , FALSE , FOLLOW_FALSE_in_field_options_keyval1954 ) $F2180271 ( state , retval ) $F2221571 ( state , FALSE112_tree , adaptor , FALSE112 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Bool ) field . defaultValue = Boolean . FALSE ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , Boolean . FALSE ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( val , match , input , ID , FOLLOW_ID_in_field_options_keyval1968 ) $F2180271 ( state , retval ) $F2221571 ( state , val_tree , adaptor , val , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\t$F2233 ( refOption ) if ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 String refName = $F2180352 ( val ) ; \n\t\t\t\t\t\t\tif ( field instanceof Field . Reference ) field . defaultValue = refName ; \n\t\t\t\t\t\t\telse if ( field instanceof Field . Float ) { \n\t\t\t\t\t\t\t\tif $F25224 ( refName ) { \n\t\t\t\t\t\t\t\t\tfield . defaultValue = Float . POSITIVE_INFINITY ; \n\t\t\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse if $F25224 ( refName ) { \n\t\t\t\t\t\t\t\t\tfield . defaultValue = Float . NaN ; \n\t\t\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) { \n\t\t\t\t\t\t\t\tif $F25224 ( refName ) { \n\t\t\t\t\t\t\t\t\tfield . defaultValue = Double . POSITIVE_INFINITY ; \n\t\t\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse if $F25224 ( refName ) { \n\t\t\t\t\t\t\t\t\tfield . defaultValue = Double . NaN ; \n\t\t\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse $F24354 ( refOption ) } \n\t\t\t\t\t\telse $F24354 ( refOption ) if ( refOption ) field . putStandardOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( val ) ) ; \n\t\t\t\t\t\telse field . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( val ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( FULL_ID113 , match , input , FULL_ID , FOLLOW_FULL_ID_in_field_options_keyval1980 ) $F2180271 ( state , retval ) $F2221571 ( state , FULL_ID113_tree , adaptor , FULL_ID113 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tfield . putStandardOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( FULL_ID113 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( EXP114 , match , input , EXP , FOLLOW_EXP_in_field_options_keyval1992 ) $F2180271 ( state , retval ) $F2221571 ( state , EXP114_tree , adaptor , EXP114 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tif ( checkDefault && $F5755 ( ( key != null ? input . toString ( key . start , key . stop ) : null ) ) ) { \n\t\t\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 if ( field instanceof Field . Float ) field . defaultValue = Float . valueOf ( $F2180352 ( EXP114 ) ) ; \n\t\t\t\t\t\t\telse if ( field instanceof Field . Double ) field . defaultValue = Double . valueOf ( $F2180352 ( EXP114 ) ) ; \n\t\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , $F2180352 ( EXP114 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_signed_constant_in_field_options_keyval2004 ) ; \n\t\t\t\t\tsigned_constant115 = signed_constant ( proto , message , field , ( key != null ? input . toString ( key . start , key . stop ) : null ) , checkDefault ) ; \n\t\t\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , signed_constant115 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tfield . putExtraOption ( ( key != null ? input . toString ( key . start , key . stop ) : null ) , ( signed_constant115 != null ? input . toString ( signed_constant115 . start , signed_constant115 . stop ) : null ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . signed_constant_return signed_constant ( Proto proto , HasFields message , Field field , String key , boolean checkDefault ) throws RecognitionException { \n\tProtoParser . signed_constant_return retval = new ProtoParser . signed_constant_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( MINUS116 ) $F1979162 ( ID117 ) $F105146 ( MINUS116_tree ) $F105146 ( ID117_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( MINUS116 , match , input , MINUS , FOLLOW_MINUS_in_signed_constant2042 ) $F2180271 ( state , retval ) $F2221571 ( state , MINUS116_tree , adaptor , MINUS116 , root_0 ) $F2180269 ( ID117 , match , input , ID , FOLLOW_ID_in_signed_constant2044 ) $F2180271 ( state , retval ) $F2221571 ( state , ID117_tree , adaptor , ID117 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif $F2054238 ( checkDefault , key ) { \n\t\t\t\t\tif ( field . defaultValue != null || field . modifier == Field . Modifier . REPEATED ) $F3687 String refName = $F2180352 ( ID117 ) ; \n\t\t\t\t\tif ( field instanceof Field . Float ) { \n\t\t\t\t\t\tif $F25224 ( refName ) { \n\t\t\t\t\t\t\tfield . defaultValue = Float . NEGATIVE_INFINITY ; \n\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( field instanceof Field . Double ) { \n\t\t\t\t\t\tif $F25224 ( refName ) { \n\t\t\t\t\t\t\tfield . defaultValue = Double . NEGATIVE_INFINITY ; \n\t\t\t\t\t\t\tfield . defaultValueConstant = STRING00 ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse throw new IllegalStateException ( $F156028 ( field ) + field . name ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse throw new IllegalStateException ( $F320 ( refName ) + $F9272 ( field ) + STRING00 + field . name ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . enum_block_return enum_block ( Proto proto , Message message ) throws RecognitionException { \n\tProtoParser . enum_block_return retval = new ProtoParser . enum_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( ENUM118 ) $F1979162 ( ID119 ) $F1979162 ( LEFTCURLY120 ) $F1979162 ( RIGHTCURLY122 ) $F1979162 ( SEMICOLON123 ) ProtoParser . enum_body_return enum_body121 = null ; \n\t$F105146 ( ENUM118_tree ) $F105146 ( ID119_tree ) $F105146 ( LEFTCURLY120_tree ) $F105146 ( RIGHTCURLY122_tree ) $F105146 ( SEMICOLON123_tree ) EnumGroup enumGroup = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( ENUM118 , match , input , ENUM , FOLLOW_ENUM_in_enum_block2076 ) $F2180271 ( state , retval ) $F2221571 ( state , ENUM118_tree , adaptor , ENUM118 , root_0 ) $F2180269 ( ID119 , match , input , ID , FOLLOW_ID_in_enum_block2078 ) $F2180271 ( state , retval ) $F2221571 ( state , ID119_tree , adaptor , ID119 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tenumGroup = new EnumGroup ( $F2180352 ( ID119 ) , message , proto ) ; \n\t\t\t\tproto . addAnnotationsTo ( enumGroup ) ; \n\t\t\t\t} \n\t\t\t$F2180269 ( LEFTCURLY120 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_enum_block2091 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY120_tree , adaptor , LEFTCURLY120 , root_0 ) loop22 : do { \n\t\t\t\t$F1987 ( alt22 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase AT : case OPTION : case ID : $F12286 ( alt22 ) $F332 } \n\t\t\t\tswitch ( alt22 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_enum_body_in_enum_block2094 ) ; \n\t\t\t\t\t\t$F16033 ( enum_body121 , enum_body , proto , message , enumGroup ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , enum_body121 ) } \n\t\t\t\t\t$F332 $F2377 break loop22 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY122 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_enum_block2099 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY122_tree , adaptor , RIGHTCURLY122 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t{ \n\t\t\t\t$F1987 ( alt23 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( SEMICOLON , alt23 ) } \n\t\t\t\tswitch ( alt23 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t$F2180269 ( SEMICOLON123 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_enum_block2104 ) $F2180271 ( state , retval ) $F2221571 ( state , SEMICOLON123_tree , adaptor , SEMICOLON123 , root_0 ) } \n\t\t\t\t\t$F332 } \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . enum_body_return enum_body ( Proto proto , Message message , EnumGroup enumGroup ) throws RecognitionException { \n\tProtoParser . enum_body_return retval = new ProtoParser . enum_body_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) ProtoParser . enum_field_return enum_field124 = null ; \n\tProtoParser . annotation_entry_return annotation_entry125 = null ; \n\tProtoParser . option_entry_return option_entry126 = null ; \n\ttry { \n\t\t$F1987 ( alt24 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( ID , alt24 ) $F2180251 ( AT , alt24 ) $F2180251 ( OPTION , alt24 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt24 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_enum_field_in_enum_body2132 ) ; \n\t\t\t\t$F16033 ( enum_field124 , enum_field , proto , message , enumGroup ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , enum_field124 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_annotation_entry_in_enum_body2143 ) ; \n\t\t\t\t$F10937 ( annotation_entry125 , annotation_entry , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_entry125 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_option_entry_in_enum_body2154 ) ; \n\t\t\t\t$F14067 ( option_entry126 , option_entry , proto , enumGroup ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , option_entry126 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . enum_field_return enum_field ( Proto proto , Message message , EnumGroup enumGroup ) throws RecognitionException { \n\tProtoParser . enum_field_return retval = new ProtoParser . enum_field_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( ID127 ) $F1979162 ( ASSIGN128 ) $F1979162 ( NUMINT129 ) $F1979162 ( SEMICOLON131 ) ProtoParser . enum_options_return enum_options130 = null ; \n\t$F105146 ( ID127_tree ) $F105146 ( ASSIGN128_tree ) $F105146 ( NUMINT129_tree ) $F105146 ( SEMICOLON131_tree ) EnumGroup . Value v = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( ID127 , match , input , ID , FOLLOW_ID_in_enum_field2181 ) $F2180271 ( state , retval ) $F2221571 ( state , ID127_tree , adaptor , ID127 , root_0 ) $F2180269 ( ASSIGN128 , match , input , ASSIGN , FOLLOW_ASSIGN_in_enum_field2183 ) $F2180271 ( state , retval ) $F2221571 ( state , ASSIGN128_tree , adaptor , ASSIGN128 , root_0 ) $F2180269 ( NUMINT129 , match , input , NUMINT , FOLLOW_NUMINT_in_enum_field2185 ) $F2180271 ( state , retval ) $F2221571 ( state , NUMINT129_tree , adaptor , NUMINT129 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tv = new EnumGroup . Value ( $F2180352 ( ID127 ) , Integer . parseInt ( $F2180352 ( NUMINT129 ) ) , enumGroup ) ; \n\t\t\t\tproto . addAnnotationsTo ( v ) ; \n\t\t\t\t} \n\t\t\t$F1987 ( alt25 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( LEFTSQUARE , alt25 ) } \n\t\t\tswitch ( alt25 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_enum_options_in_enum_field2190 ) ; \n\t\t\t\t\t$F16033 ( enum_options130 , enum_options , proto , enumGroup , v ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , enum_options130 ) } \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( SEMICOLON131 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_enum_field2195 ) $F2180271 ( state , retval ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . enum_options_return enum_options ( Proto proto , EnumGroup enumGroup , EnumGroup . Value v ) throws RecognitionException { \n\tProtoParser . enum_options_return retval = new ProtoParser . enum_options_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( LEFTSQUARE132 ) $F1979162 ( COMMA134 ) $F1979162 ( RIGHTSQUARE136 ) ProtoParser . field_options_keyval_return field_options_keyval133 = null ; \n\tProtoParser . field_options_keyval_return field_options_keyval135 = null ; \n\t$F105146 ( LEFTSQUARE132_tree ) $F105146 ( COMMA134_tree ) $F105146 ( RIGHTSQUARE136_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( LEFTSQUARE132 , match , input , LEFTSQUARE , FOLLOW_LEFTSQUARE_in_enum_options2218 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTSQUARE132_tree , adaptor , LEFTSQUARE132 , root_0 ) pushFollow ( FOLLOW_field_options_keyval_in_enum_options2220 ) ; \n\t\t\tfield_options_keyval133 = field_options_keyval ( proto , null , v . field , false ) ; \n\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_options_keyval133 ) loop26 : do { \n\t\t\t\t$F1987 ( alt26 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( COMMA , alt26 ) } \n\t\t\t\tswitch ( alt26 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t$F2180269 ( COMMA134 , match , input , COMMA , FOLLOW_COMMA_in_enum_options2233 ) $F2180271 ( state , retval ) $F2221571 ( state , COMMA134_tree , adaptor , COMMA134 , root_0 ) pushFollow ( FOLLOW_field_options_keyval_in_enum_options2235 ) ; \n\t\t\t\t\t\tfield_options_keyval135 = field_options_keyval ( proto , null , v . field , false ) ; \n\t\t\t\t\t\t$F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , field_options_keyval135 ) } \n\t\t\t\t\t$F332 $F2377 break loop26 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTSQUARE136 , match , input , RIGHTSQUARE , FOLLOW_RIGHTSQUARE_in_enum_options2240 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTSQUARE136_tree , adaptor , RIGHTSQUARE136 , root_0 ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . service_block_return service_block ( Proto proto , Message message ) throws RecognitionException { \n\tProtoParser . service_block_return retval = new ProtoParser . service_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( SERVICE137 ) $F1979162 ( ID138 ) $F1979162 ( LEFTCURLY139 ) $F1979162 ( RIGHTCURLY141 ) $F1979162 ( SEMICOLON142 ) ProtoParser . service_body_return service_body140 = null ; \n\t$F105146 ( SERVICE137_tree ) $F105146 ( ID138_tree ) $F105146 ( LEFTCURLY139_tree ) $F105146 ( RIGHTCURLY141_tree ) $F105146 ( SEMICOLON142_tree ) Service service = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( SERVICE137 , match , input , SERVICE , FOLLOW_SERVICE_in_service_block2270 ) $F2180271 ( state , retval ) $F2221571 ( state , SERVICE137_tree , adaptor , SERVICE137 , root_0 ) $F2180269 ( ID138 , match , input , ID , FOLLOW_ID_in_service_block2272 ) $F2180271 ( state , retval ) $F2221571 ( state , ID138_tree , adaptor , ID138 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tservice = new Service ( $F2180352 ( ID138 ) , message , proto ) ; \n\t\t\t\tproto . addAnnotationsTo ( service ) ; \n\t\t\t\t} \n\t\t\t$F2180269 ( LEFTCURLY139 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_service_block2276 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY139_tree , adaptor , LEFTCURLY139 , root_0 ) $F1987 ( cnt27 ) loop27 : do { \n\t\t\t\t$F1987 ( alt27 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase AT : case OPTION : case RPC : $F12286 ( alt27 ) $F332 } \n\t\t\t\tswitch ( alt27 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_service_body_in_service_block2287 ) ; \n\t\t\t\t\t\t$F14067 ( service_body140 , service_body , proto , service ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , service_body140 ) } \n\t\t\t\t\t$F332 $F2377 if $F9869 ( cnt27 ) break loop27 ; \n\t\t\t\t\t$F2180257 ( state , retval ) $F2181741 ( eee , input ) throw eee ; \n\t\t\t\t\t} \n\t\t\t\tcnt27 ++ ; \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY141 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_service_block2292 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY141_tree , adaptor , RIGHTCURLY141 , root_0 ) { \n\t\t\t\t$F1987 ( alt28 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( SEMICOLON , alt28 ) } \n\t\t\t\tswitch ( alt28 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t$F2180269 ( SEMICOLON142 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_service_block2295 ) $F2180271 ( state , retval ) $F2221571 ( state , SEMICOLON142_tree , adaptor , SEMICOLON142 , root_0 ) } \n\t\t\t\t\t$F332 } \n\t\t\t\t} \n\t\t\tif $F2180273 ( state ) { \n\t\t\t\tif ( service . rpcMethods . isEmpty ( ) ) throw new IllegalStateException $F2283 ( service ) ; \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . service_body_return service_body ( Proto proto , Service service ) throws RecognitionException { \n\tProtoParser . service_body_return retval = new ProtoParser . service_body_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) ProtoParser . rpc_block_return rpc_block143 = null ; \n\tProtoParser . annotation_entry_return annotation_entry144 = null ; \n\tProtoParser . option_entry_return option_entry145 = null ; \n\ttry { \n\t\t$F1987 ( alt29 ) switch $F2180250 ( input ) { \n\t\t\t$F2180251 ( RPC , alt29 ) $F2180251 ( AT , alt29 ) $F2180251 ( OPTION , alt29 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt29 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_rpc_block_in_service_body2325 ) ; \n\t\t\t\t$F14067 ( rpc_block143 , rpc_block , proto , service ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , rpc_block143 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_annotation_entry_in_service_body2336 ) ; \n\t\t\t\t$F10937 ( annotation_entry144 , annotation_entry , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_entry144 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_option_entry_in_service_body2347 ) ; \n\t\t\t\t$F14067 ( option_entry145 , option_entry , proto , service ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , option_entry145 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . rpc_block_return rpc_block ( Proto proto , Service service ) throws RecognitionException { \n\tProtoParser . rpc_block_return retval = new ProtoParser . rpc_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( n ) $F1979162 ( ap ) $F1979162 ( a ) $F1979162 ( rp ) $F1979162 ( r ) $F1979162 ( RPC146 ) $F1979162 ( LEFTPAREN147 ) $F1979162 ( RIGHTPAREN148 ) $F1979162 ( RETURNS149 ) $F1979162 ( LEFTPAREN150 ) $F1979162 ( RIGHTPAREN151 ) $F1979162 ( SEMICOLON153 ) ProtoParser . rpc_body_block_return rpc_body_block152 = null ; \n\t$F105146 ( n_tree ) $F105146 ( ap_tree ) $F105146 ( a_tree ) $F105146 ( rp_tree ) $F105146 ( r_tree ) $F105146 ( RPC146_tree ) $F105146 ( LEFTPAREN147_tree ) $F105146 ( RIGHTPAREN148_tree ) $F105146 ( RETURNS149_tree ) $F105146 ( LEFTPAREN150_tree ) $F105146 ( RIGHTPAREN151_tree ) $F105146 ( SEMICOLON153_tree ) String argName = null , argPackage = null , retName = null , retPackage = null ; \n\tService . RpcMethod rm = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( RPC146 , match , input , RPC , FOLLOW_RPC_in_rpc_block2378 ) $F2180271 ( state , retval ) $F2221571 ( state , RPC146_tree , adaptor , RPC146 , root_0 ) $F2180269 ( n , match , input , ID , FOLLOW_ID_in_rpc_block2382 ) $F2180271 ( state , retval ) $F2221571 ( state , n_tree , adaptor , n , root_0 ) $F2180269 ( LEFTPAREN147 , match , input , LEFTPAREN , FOLLOW_LEFTPAREN_in_rpc_block2384 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTPAREN147_tree , adaptor , LEFTPAREN147 , root_0 ) $F1987 ( alt30 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( FULL_ID , alt30 ) case VOID : case ID : $F12286 ( alt30 ) $F332 $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt30 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( ap , match , input , FULL_ID , FOLLOW_FULL_ID_in_rpc_block2389 ) $F2180271 ( state , retval ) $F2221571 ( state , ap_tree , adaptor , ap , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tString argFull = $F2180352 ( ap ) ; \n\t\t\t\t\t\t$F6990 ( lastDot , argFull ) $F83682 ( argPackage , argFull , lastDot ) $F19735 ( argName , argFull , lastDot ) } \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\ta = ( Token ) $F1954510 ( input ) ; \n\t\t\t\t\tif ( ( $F1954449 ( input ) >= VOID && $F1954449 ( input ) <= ID ) ) { \n\t\t\t\t\t\t$F539485 ( input ) if $F2180273 ( state ) adaptor . addChild ( root_0 , $F2221567 ( adaptor , a ) ) ; \n\t\t\t\t\t\tstate . errorRecovery = false ; \n\t\t\t\t\t\t$F2180630 ( state ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F2180257 ( state , retval ) $F2180636 ( mse , input ) throw mse ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif $F2180273 ( state ) { \n\t\t\t\t\t\targName = $F2180352 ( a ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( RIGHTPAREN148 , match , input , RIGHTPAREN , FOLLOW_RIGHTPAREN_in_rpc_block2406 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTPAREN148_tree , adaptor , RIGHTPAREN148 , root_0 ) $F2180269 ( RETURNS149 , match , input , RETURNS , FOLLOW_RETURNS_in_rpc_block2417 ) $F2180271 ( state , retval ) $F2221571 ( state , RETURNS149_tree , adaptor , RETURNS149 , root_0 ) $F2180269 ( LEFTPAREN150 , match , input , LEFTPAREN , FOLLOW_LEFTPAREN_in_rpc_block2419 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTPAREN150_tree , adaptor , LEFTPAREN150 , root_0 ) $F1987 ( alt31 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( FULL_ID , alt31 ) case VOID : case ID : $F12286 ( alt31 ) $F332 $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt31 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( rp , match , input , FULL_ID , FOLLOW_FULL_ID_in_rpc_block2424 ) $F2180271 ( state , retval ) $F2221571 ( state , rp_tree , adaptor , rp , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tString retFull = $F2180352 ( rp ) ; \n\t\t\t\t\t\t$F6990 ( lastDot , retFull ) $F83682 ( retPackage , retFull , lastDot ) $F19735 ( retName , retFull , lastDot ) } \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\tr = ( Token ) $F1954510 ( input ) ; \n\t\t\t\t\tif ( ( $F1954449 ( input ) >= VOID && $F1954449 ( input ) <= ID ) ) { \n\t\t\t\t\t\t$F539485 ( input ) if $F2180273 ( state ) adaptor . addChild ( root_0 , $F2221567 ( adaptor , r ) ) ; \n\t\t\t\t\t\tstate . errorRecovery = false ; \n\t\t\t\t\t\t$F2180630 ( state ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F2180257 ( state , retval ) $F2180636 ( mse , input ) throw mse ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif $F2180273 ( state ) { \n\t\t\t\t\t\tretName = $F2180352 ( r ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( RIGHTPAREN151 , match , input , RIGHTPAREN , FOLLOW_RIGHTPAREN_in_rpc_block2441 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTPAREN151_tree , adaptor , RIGHTPAREN151 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\trm = service . addRpcMethod ( $F2180352 ( n ) , argName , argPackage , retName , retPackage ) ; \n\t\t\t\tproto . addAnnotationsTo ( rm ) ; \n\t\t\t\t} \n\t\t\t$F1987 ( alt32 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( LEFTCURLY , alt32 ) } \n\t\t\tswitch ( alt32 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\tpushFollow ( FOLLOW_rpc_body_block_in_rpc_block2445 ) ; \n\t\t\t\t\t$F14067 ( rpc_body_block152 , rpc_body_block , proto , rm ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , rpc_body_block152 ) } \n\t\t\t\t$F332 } \n\t\t\t$F2180269 ( SEMICOLON153 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_rpc_block2449 ) $F2180271 ( state , retval ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . rpc_body_block_return rpc_body_block ( Proto proto , Service . RpcMethod rm ) throws RecognitionException { \n\tProtoParser . rpc_body_block_return retval = new ProtoParser . rpc_body_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( LEFTCURLY154 ) $F1979162 ( RIGHTCURLY156 ) ProtoParser . option_entry_return option_entry155 = null ; \n\t$F105146 ( LEFTCURLY154_tree ) $F105146 ( RIGHTCURLY156_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( LEFTCURLY154 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_rpc_body_block2475 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY154_tree , adaptor , LEFTCURLY154 , root_0 ) loop33 : do { \n\t\t\t\t$F1987 ( alt33 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( OPTION , alt33 ) } \n\t\t\t\tswitch ( alt33 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_option_entry_in_rpc_body_block2477 ) ; \n\t\t\t\t\t\t$F14067 ( option_entry155 , option_entry , proto , rm ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , option_entry155 ) } \n\t\t\t\t\t$F332 $F2377 break loop33 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY156 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_rpc_body_block2481 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY156_tree , adaptor , RIGHTCURLY156 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . extend_block_return extend_block ( Proto proto , Message parent ) throws RecognitionException { \n\tProtoParser . extend_block_return retval = new ProtoParser . extend_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( EXTEND157 ) $F1979162 ( FULL_ID158 ) $F1979162 ( ID159 ) $F1979162 ( LEFTCURLY160 ) $F1979162 ( RIGHTCURLY162 ) $F1979162 ( SEMICOLON163 ) ProtoParser . extend_body_return extend_body161 = null ; \n\t$F105146 ( EXTEND157_tree ) $F105146 ( FULL_ID158_tree ) $F105146 ( ID159_tree ) $F105146 ( LEFTCURLY160_tree ) $F105146 ( RIGHTCURLY162_tree ) $F105146 ( SEMICOLON163_tree ) Extension extension = null ; \n\ttry { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( EXTEND157 , match , input , EXTEND , FOLLOW_EXTEND_in_extend_block2513 ) $F2180271 ( state , retval ) $F2221571 ( state , EXTEND157_tree , adaptor , EXTEND157 , root_0 ) $F1987 ( alt34 ) switch $F2180250 ( input ) { \n\t\t\t\t$F2180251 ( FULL_ID , alt34 ) $F2180251 ( ID , alt34 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t\t} \n\t\t\tswitch ( alt34 ) { \n\t\t\t\t$F60794 { \n\t\t\t\t\t$F2180269 ( FULL_ID158 , match , input , FULL_ID , FOLLOW_FULL_ID_in_extend_block2525 ) $F2180271 ( state , retval ) $F2221571 ( state , FULL_ID158_tree , adaptor , FULL_ID158 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\tString fullType = $F2180352 ( FULL_ID158 ) ; \n\t\t\t\t\t\t$F6990 ( lastDot , fullType ) $F2532 ( packageName , fullType , lastDot ) $F100656 ( type , fullType , lastDot ) extension = new Extension $F3192 ( proto , parent , packageName , type ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 $F60794 { \n\t\t\t\t\t$F2180269 ( ID159 , match , input , ID , FOLLOW_ID_in_extend_block2531 ) $F2180271 ( state , retval ) $F2221571 ( state , ID159_tree , adaptor , ID159 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\t\t\textension = new Extension ( proto , parent , null , $F2180352 ( ID159 ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F332 } \n\t\t\tif $F2180273 ( state ) { \n\t\t\t\tif $F112 ( parent ) proto . addExtension ( extension ) ; \n\t\t\t\telse parent . addNestedExtension ( extension ) ; \n\t\t\t\tproto . addAnnotationsTo ( extension ) ; \n\t\t\t\t} \n\t\t\t$F2180269 ( LEFTCURLY160 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_extend_block2547 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY160_tree , adaptor , LEFTCURLY160 , root_0 ) loop35 : do { \n\t\t\t\t$F1987 ( alt35 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase AT : case REQUIRED : case OPTIONAL : case REPEATED : $F12286 ( alt35 ) $F332 } \n\t\t\t\tswitch ( alt35 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_extend_body_in_extend_block2550 ) ; \n\t\t\t\t\t\t$F14067 ( extend_body161 , extend_body , proto , extension ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , extend_body161 ) } \n\t\t\t\t\t$F332 $F2377 break loop35 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY162 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_extend_block2555 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY162_tree , adaptor , RIGHTCURLY162 , root_0 ) if $F2180273 ( state ) { \n\t\t\t\tif ( ! proto . annotations . isEmpty ( ) ) throw new IllegalStateException ( STRING00 + proto . annotations ) ; \n\t\t\t\t} \n\t\t\t{ \n\t\t\t\t$F1987 ( alt36 ) switch $F2180250 ( input ) { \n\t\t\t\t\t$F2180251 ( SEMICOLON , alt36 ) } \n\t\t\t\tswitch ( alt36 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\t$F2180269 ( SEMICOLON163 , match , input , SEMICOLON , FOLLOW_SEMICOLON_in_extend_block2560 ) $F2180271 ( state , retval ) $F2221571 ( state , SEMICOLON163_tree , adaptor , SEMICOLON163 , root_0 ) } \n\t\t\t\t\t$F332 } \n\t\t\t\t} \n\t\t\t} \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . extend_body_return extend_body ( Proto proto , Extension extension ) throws RecognitionException { \n\tProtoParser . extend_body_return retval = new ProtoParser . extend_body_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) ProtoParser . message_field_return message_field164 = null ; \n\tProtoParser . annotation_entry_return annotation_entry165 = null ; \n\ttry { \n\t\t$F1987 ( alt37 ) switch $F2180250 ( input ) { \n\t\t\tcase REQUIRED : case OPTIONAL : case REPEATED : $F12286 ( alt37 ) $F332 $F2180251 ( AT , alt37 ) $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt37 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_message_field_in_extend_body2588 ) ; \n\t\t\t\t$F14067 ( message_field164 , message_field , proto , extension ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , message_field164 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_annotation_entry_in_extend_body2599 ) ; \n\t\t\t\t$F10937 ( annotation_entry165 , annotation_entry , proto ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , annotation_entry165 ) } \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . ignore_block_return ignore_block $F2 throws RecognitionException { \n\tProtoParser . ignore_block_return retval = new ProtoParser . ignore_block_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( LEFTCURLY166 ) $F1979162 ( RIGHTCURLY168 ) ProtoParser . ignore_block_body_return ignore_block_body167 = null ; \n\t$F105146 ( LEFTCURLY166_tree ) $F105146 ( RIGHTCURLY168_tree ) try { \n\t\t{ \n\t\t\t$F2221275 ( root_0 , adaptor ) $F2180269 ( LEFTCURLY166 , match , input , LEFTCURLY , FOLLOW_LEFTCURLY_in_ignore_block2623 ) $F2180271 ( state , retval ) $F2221571 ( state , LEFTCURLY166_tree , adaptor , LEFTCURLY166 , root_0 ) loop38 : do { \n\t\t\t\t$F1987 ( alt38 ) switch $F2180250 ( input ) { \n\t\t\t\t\tcase ASSIGN : case AT : case LEFTCURLY : case LEFTPAREN : case RIGHTPAREN : case LEFTSQUARE : case RIGHTSQUARE : case SEMICOLON : case COMMA : case PLUS : case MINUS : case TO : case TRUE : case FALSE : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : case ID : case FULL_ID : case NUMINT : case EXP : case NUMFLOAT : case NUMDOUBLE : case HEX_DIGIT : case HEX : case OCTAL : case COMMENT : case WS : case ESC_SEQ : case STRING_LITERAL : case UNICODE_ESC : case OCTAL_ESC : $F12286 ( alt38 ) $F332 } \n\t\t\t\tswitch ( alt38 ) { \n\t\t\t\t\t$F60794 { \n\t\t\t\t\t\tpushFollow ( FOLLOW_ignore_block_body_in_ignore_block2625 ) ; \n\t\t\t\t\t\t$F10411 ( ignore_block_body167 , ignore_block_body ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , ignore_block_body167 ) } \n\t\t\t\t\t$F332 $F2377 break loop38 ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile $F38432 ; \n\t\t\t$F2180269 ( RIGHTCURLY168 , match , input , RIGHTCURLY , FOLLOW_RIGHTCURLY_in_ignore_block2628 ) $F2180271 ( state , retval ) $F2221571 ( state , RIGHTCURLY168_tree , adaptor , RIGHTCURLY168 , root_0 ) } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final ProtoParser . ignore_block_body_return ignore_block_body $F2 throws RecognitionException { \n\tProtoParser . ignore_block_body_return retval = new ProtoParser . ignore_block_body_return $F2 ; \n\t$F2180249 ( retval , input ) $F105146 ( root_0 ) $F1979162 ( set170 ) ProtoParser . ignore_block_return ignore_block169 = null ; \n\t$F105146 ( set170_tree ) try { \n\t\t$F1987 ( alt39 ) switch $F2180250 ( input ) { \n\t\t\tcase LEFTCURLY : { \n\t\t\t\t$F1954452 ( LA39_1 , input ) if $F2180663 ( synpred1_ProtoParser ) $F12286 ( alt39 ) else if ( $F38432 ) $F12286 ( alt39 ) else $F2180792 ( state , retval , nvae , input ) } \n\t\t\t$F332 case ASSIGN : case AT : case LEFTPAREN : case RIGHTPAREN : case LEFTSQUARE : case RIGHTSQUARE : case SEMICOLON : case COMMA : case PLUS : case MINUS : case TO : case TRUE : case FALSE : case PKG : case SYNTAX : case IMPORT : case OPTION : case MESSAGE : case SERVICE : case ENUM : case REQUIRED : case OPTIONAL : case REPEATED : case EXTENSIONS : case EXTEND : case GROUP : case RPC : case RETURNS : case INT32 : case INT64 : case UINT32 : case UINT64 : case SINT32 : case SINT64 : case FIXED32 : case FIXED64 : case SFIXED32 : case SFIXED64 : case FLOAT : case DOUBLE : case BOOL : case STRING : case BYTES : case DEFAULT : case MAX : case VOID : case ID : case FULL_ID : case NUMINT : case EXP : case NUMFLOAT : case NUMDOUBLE : case HEX_DIGIT : case HEX : case OCTAL : case COMMENT : case WS : case ESC_SEQ : case STRING_LITERAL : case UNICODE_ESC : case OCTAL_ESC : $F12286 ( alt39 ) $F332 $F2377 $F2180257 ( state , retval ) $F2180264 ( nvae , input ) throw nvae ; \n\t\t\t} \n\t\tswitch ( alt39 ) { \n\t\t\t$F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) pushFollow ( FOLLOW_ignore_block_in_ignore_block_body2656 ) ; \n\t\t\t\t$F10411 ( ignore_block169 , ignore_block ) $F2180364 ( state ) $F2180271 ( state , retval ) if $F2180273 ( state ) $F2221326 ( adaptor , root_0 , ignore_block169 ) } \n\t\t\t$F332 $F60794 { \n\t\t\t\t$F2221275 ( root_0 , adaptor ) set170 = ( Token ) $F1954510 ( input ) ; \n\t\t\t\tif ( ( $F1954449 ( input ) >= ASSIGN && $F1954449 ( input ) <= LEFTCURLY ) || ( $F1954449 ( input ) >= LEFTPAREN && $F1954449 ( input ) <= OCTAL_ESC ) ) { \n\t\t\t\t\t$F539485 ( input ) if $F2180273 ( state ) adaptor . addChild ( root_0 , $F2221567 ( adaptor , set170 ) ) ; \n\t\t\t\t\tstate . errorRecovery = false ; \n\t\t\t\t\t$F2180630 ( state ) } \n\t\t\t\telse { \n\t\t\t\t\t$F2180257 ( state , retval ) $F2180636 ( mse , input ) throw mse ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F332 } \n\t\t$F2180301 ( retval , input ) if $F2180273 ( state ) { \n\t\t\tretval . tree = ( Object ) $F2221297 ( adaptor , root_0 ) ; \n\t\t\t$F2221303 ( adaptor , retval ) } \n\t\t} \n\tcatch ( RecognitionException re ) { \n\t\treportError ( re ) ; \n\t\t$F564 ( recover , input , re ) retval . tree = ( Object ) $F2221308 ( adaptor , input , retval , re ) ; \n\t\t} \n\t$F892625 return retval ; \n\t} \n"}, {"code": "public final boolean synpred1_ProtoParser $F2 $F2182122 ( state , start , input , synpred1_ProtoParser_fragment , System , re , success ) "}, {"code": "$F1 protected void doInitialize $F2 throws IOException { \n\tString path = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . getPath ( ) ; \n\t$F6990 ( index , path ) if $F3752 ( index ) { \n\t\tbasePath = $F1661287 ( System ) ; \n\t\tsettingsPath = $F1661287 ( System ) ; \n\t\tlibrariesPath = $F1661287 ( System ) ; \n\t\trepositoryPath = $F1661287 ( System ) ; \n\t\t} \n\telse { \n\t\t$F205532 ( path , System ) $F125780 ( basePath , path ) $F125780 ( settingsPath , path ) $F125780 ( librariesPath , path ) $F125780 ( repositoryPath , path ) } \n\t$F10937 ( initialized , readUsrTemplates , templateRepository ) } \n"}, {"code": "private boolean readUsrTemplates ( final ITemplateRepository templateRepository ) throws IOException { \n\t$F2595 ( usrSettingsFile , settingsPath ) if $F2486 ( usrSettingsFile ) { \n\t\ttry { \n\t\t\ttempelFileProcessor . process ( usrSettingsFile , new ITempelEntryProcessor $F2 { \n\t\t\t\t$F1 public void processObject ( Object object ) { \n\t\t\t\t\tUsrTemplateProviderElement . this . processObject ( object , null , templateRepository , new ITemplateSourceFactory $F2 { \n\t\t\t\t\t\t$F1 public ITemplateSource createTemplateSource ( Template $F45 template , String source ) { \n\t\t\t\t\t\t\t$F8494 ( templatePath , getTemplatePath , template ) if $F112 ( templatePath ) { \n\t\t\t\t\t\t\t\treturn new NullTemplateSource $F2 ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse try { \n\t\t\t\t\t\t\t\treturn new FileTemplateSource ( templatePath , source ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t$F88274 ( e ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t) ; \n\t\t\tif $F3507 ( supportLogger ) supportLogger . debug ( Logs . LOG_01 , ansiString ( GREEN , $F11884 ( usrSettingsFile ) ) ) ; \n\t\t\t$F232 } \n\t\tcatch ( Exception e ) { \n\t\t\tsupportLogger . error ( e , Logs . LOG_02 , ansiString ( GREEN , $F11884 ( usrSettingsFile ) ) ) ; \n\t\t\t$F11567 ( e ) } \n\t\t} \n\telse $F1668 } \n"}, {"code": "$F1 public void init $F2 throws IOException { \n\t$F21 labels = conf . getStrings ( SimpleJob . LABELS ) ; \n\tif $F112 ( labels ) { \n\t\tvalueCreator = new SimpleValueCreator ( separator , regex ) ; \n\t\t} \n\telse { \n\t\tboolean formatIgnored = conf . getBoolean ( SimpleJob . FORMAT_IGNORED , false ) ; \n\t\tvalueCreator = new LabelValueCreator $F3192 ( labels , formatIgnored , separator , regex ) ; \n\t\t} \n\t} \n"}, {"code": "public void setReferences ( IReferences references ) { \n\tObject contextInfo = references . getOneOptional ( new Descriptor ( $F115069 ) ) ; \n\tif ( contextInfo instanceof ContextInfo && contextInfo != null && _source == null ) _source = ( ( ContextInfo ) contextInfo ) . getName ( ) ; \n\t} \n"}, {"code": "protected String composeError ( Exception error ) { \n\t$F1200 ( builder ) while $F268 ( error ) { \n\t\t$F596715 ( builder ) $F8573 ( builder , error ) . append ( STRING00 ) . append ( $F10274 ( error ) ) ; \n\t\ttry { \n\t\t\terror = $F298 ( error ) . newInstance ( ) ; \n\t\t\t} \n\t\tcatch ( $F217967 e ) $F7454 ( e ) } \n\t$F1226 ( builder ) } \n"}, {"code": "protected void formatAndWrite ( LogLevel level , String correlationId , Exception error , String message , $F3244 args ) { \n\tmessage = $F139972 ( message ) ; \n\tif $F124033 ( args ) message = $F4182 ( String , message , args ) ; \n\t$F12601 ( write , level , correlationId , error , message ) } \n"}, {"code": "public void log ( LogLevel level , String correlationId , Exception error , String message , Object ... args ) $F277 ( formatAndWrite , level , correlationId , error , message , args ) "}, {"code": "public void fatal $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Fatal , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public void fatal $F705292 ( correlationId , error ) { \n\tformatAndWrite ( LogLevel . Fatal , correlationId , error , null , null ) ; \n\t} \n"}, {"code": "public void fatal ( String correlationId , Exception error , String message , Object ... args ) { \n\tformatAndWrite ( LogLevel . Fatal , correlationId , error , message , args ) ; \n\t} \n"}, {"code": "public void error $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Error , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public void error $F705292 ( correlationId , error ) { \n\tformatAndWrite ( LogLevel . Error , correlationId , error , null , null ) ; \n\t} \n"}, {"code": "public void warn $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Warn , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public void info $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Info , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public void debug $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Debug , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public void trace $F402611 ( correlationId , message , args ) { \n\tformatAndWrite ( LogLevel . Trace , correlationId , null , message , args ) ; \n\t} \n"}, {"code": "public static $F27567 listAll $F996 ( fstypes ) { \n\t$F27567 drives = null ; \n\tswitch ( $F323205 ( Platform ) ) { \n\t\tcase WINDOWS_32 : case WINDOWS_64 : $F10411 ( drives , listWindowsFileSystems ) $F332 case LINUX_32 : case LINUX_64 : case UNIX_32 : case UNIX_64 : try $F24579 ( drives , listUnixFileSystems , fstypes ) $F182731 ( logger , e ) $F332 $F2377 logger . error ( STRING00 , $F323205 ( Platform ) ) ; \n\t\t$F332 } \n\treturn drives ; \n\t} \n"}, {"code": "public static $F27567 listUnixFileSystems $F996 ( fstypes ) throws IOException { \n\t$F27690 ( drives ) $F13905 ( command ) if $F124033 ( fstypes ) { \n\t\t$F1218 ( command ) $F48974 ( first ) for ( String fstype : fstypes ) { \n\t\t\t$F71095 ( first , command ) $F1212 ( command , fstype ) first = false ; \n\t\t\t} \n\t\t} \n\t$F176425 ( logger , command ) Process process = $F314883 ( Runtime ) ( $F797 ( command ) ) ; \n\t$F647924 ( output , process ) Regex regex = new Regex $F6 ; \n\t$F4728 ( line ) while $F57865 ( line , output ) { \n\t\t$F91992 matches = regex . getAllMatches ( line ) ; \n\t\tif $F14587 ( matches ) { \n\t\t\tfor ( $F92026 ( group , matches ) ) { \n\t\t\t\tlogger . trace ( STRING00 , group [ INT00 ] , group [ INT00 ] , group [ INT00 ] ) ; \n\t\t\t\tdrives . add ( $F237649 ( group ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F1109 ( output ) return drives ; \n\t} \n"}, {"code": "public static long getID3v2Length ( File file ) throws IOException { \n\tBufferedInputStream $F889509 ( in , file ) ; \n\ttry { \n\t\tbyte buffer [ ] = $F18715 ; \n\t\tif ( $F33778 ( in , buffer ) != INT00 ) $F8383 if ( buffer [ INT00 ] != STRING00 || buffer [ INT00 ] != STRING00 || buffer [ INT00 ] != STRING00 ) $F8383 return INT00 + bytesToLength ( new byte [ ] { \n\t\t\tbuffer [ INT00 ] , buffer [ INT00 ] , buffer [ INT00 ] , buffer [ INT00 ] } \n\t\t) ; \n\t\t} \n\t$F2454 ( in ) } \n"}, {"code": "$F2893853 @ Configuration public org . apache . commons . configuration . Configuration getConfiguration ( InjectionPoint injectionPoint ) { \n\tConfigurationWrapper annotation = this . getConfigurationWrapper ( injectionPoint ) ; \n\treturn $F3080907 ( this , annotation ) ; \n\t} \n"}, {"code": "public org . apache . commons . configuration . Configuration getConfiguration ( ConfigurationWrapper wrapper ) { \n\tList < ISource > sources = this . locate ( wrapper ) ; \n\tOverrideCombiner combiner = new OverrideCombiner $F2 ; \n\tCombinedConfiguration combined = new CombinedConfiguration ( combiner ) ; \n\tfor ( ISource source : sources ) { \n\t\tSupportedType type = MimeGuesser . guess ( source ) ; \n\t\tif ( ! $F88338 ( source ) ) $F42718 InputStream $F9005 ( stream , source ) ; \n\t\tif ( SupportedType . XML . equals ( type ) ) { \n\t\t\tXMLConfiguration xmlConfiguration = new XMLConfiguration $F2 ; \n\t\t\ttry { \n\t\t\t\t$F29433 ( xmlConfiguration , stream ) combined . addConfiguration ( xmlConfiguration ) ; \n\t\t\t\t} \n\t\t\tcatch ( ConfigurationException e ) { \n\t\t\t\t$F36833 ( this ) ( $F4298 ( e ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tPropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration $F2 ; \n\t\t\ttry { \n\t\t\t\t$F29433 ( propertiesConfiguration , stream ) combined . addConfiguration ( propertiesConfiguration ) ; \n\t\t\t\t} \n\t\t\tcatch ( ConfigurationException e ) { \n\t\t\t\t$F36833 ( this ) ( $F4298 ( e ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\ttry $F2453 ( stream ) catch ( IOException e ) { \n\t\t\tthis . logger . trace ( STRING00 , stream ) ; \n\t\t\t} \n\t\tif ( ! wrapper . merge ( ) ) $F333 } \n\treturn combined ; \n\t} \n"}, {"code": "public static $F1372 $F618439 ofInstance $F71004 ( instance ) { \n\treturn new $F618439 $F2 { \n\t\t$F1 public T get $F2 $F356 ( instance ) } \n\t; \n\t} \n"}, {"code": "public static void enableAutoExpansion ( final JTree tree ) { \n\t$F113524 ( tree ) . addTreeModelListener ( new TreeModelListener $F2 { \n\t\tpublic void treeNodesChanged ( TreeModelEvent e ) $F1645 public void treeNodesInserted ( TreeModelEvent e ) { \n\t\t\ttree . expandPath ( e . getTreePath ( ) ) ; \n\t\t\t} \n\t\tpublic void treeNodesRemoved ( TreeModelEvent e ) $F1645 public void treeStructureChanged ( TreeModelEvent e ) $F1645 } \n\t) ; \n\t} \n"}, {"code": "Element getElement ( Node node ) { \n\t$F2201 ( node ) Object value = node . getUserData ( BACK_REF ) ; \n\tif $F268 ( value ) { \n\t\treturn ( Element ) value ; \n\t\t} \n\tElement el = new ElementImpl ( this , node ) ; \n\tnode . setUserData ( BACK_REF , el , null ) ; \n\treturn el ; \n\t} \n"}, {"code": "Element getElement ( NodeList nodeList ) { \n\t$F975 ( Params , nodeList ) if $F491905 ( nodeList ) $F2200 return getElement ( $F491906 ( nodeList ) ) ; \n\t} \n"}, {"code": "Element evaluateXPathNode ( Node contextNode , String expression , Object ... args ) { \n\t$F394690 ( evaluateXPathNodeNS , contextNode , expression , args ) } \n"}, {"code": "Element evaluateXPathNodeNS ( Node contextNode , NamespaceContext namespaceContext , String expression , Object ... args ) { \n\tif $F5678 ( args ) { \n\t\texpression = $F4182 ( Strings , expression , args ) ; \n\t\t} \n\t$F108749 ( node ) try { \n\t\tXPath xpath = $F6892 ( XPathFactory ) . newXPath ( ) ; \n\t\tif $F268 ( namespaceContext ) { \n\t\t\txpath . setNamespaceContext ( namespaceContext ) ; \n\t\t\t} \n\t\tObject result = xpath . evaluate ( expression , contextNode , XPathConstants . NODE ) ; \n\t\t$F2201 ( result ) $F1954627 ( node , result ) ; \n\t\tif ( $F384118 ( node ) != Node . ELEMENT_NODE ) { \n\t\t\t$F133680 ( log , xpath , contextNode ) $F724 } \n\t\t} \n\tcatch ( XPathExpressionException e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t$F867 ( getElement , node ) } \n"}, {"code": "EList evaluateXPathNodeList ( Node contextNode , String expression , Object ... args ) { \n\t$F394690 ( evaluateXPathNodeListNS , contextNode , expression , args ) } \n"}, {"code": "EList evaluateXPathNodeListNS ( Node contextNode , NamespaceContext namespaceContext , String expression , Object ... args ) { \n\tif $F5678 ( args ) { \n\t\texpression = $F4182 ( Strings , expression , args ) ; \n\t\t} \n\tNodeList nodeList = null ; \n\ttry { \n\t\tXPath xpath = $F6892 ( XPathFactory ) . newXPath ( ) ; \n\t\tif $F268 ( namespaceContext ) { \n\t\t\txpath . setNamespaceContext ( namespaceContext ) ; \n\t\t\t} \n\t\tObject result = xpath . evaluate ( expression , contextNode , XPathConstants . NODESET ) ; \n\t\tif $F268 ( result ) { \n\t\t\tnodeList = ( NodeList ) result ; \n\t\t\t} \n\t\t} \n\tcatch ( XPathExpressionException e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t$F1620 ( nodeList , EMPTY_NODE_LIST ) $F867 ( createEList , nodeList ) } \n"}, {"code": "String buildAttrXPath $F3019 ( name , value ) { \n\t$F1200 ( sb ) $F1218 ( sb ) $F1212 ( sb , name ) if $F4389 ( value ) { \n\t\t$F1218 ( sb ) $F83900 ( sb , value ) $F1218 ( sb ) } \n\t$F1218 ( sb ) $F1226 ( sb ) } \n"}, {"code": "public void setInetAddress $F62952 ( address ) { \n\ttry { \n\t\tthis . inetAddress = $F37610 ( InetAddress , address ) ; \n\t\t} \n\tcatch ( final UnknownHostException e ) $F96541 ( address ) } \n"}, {"code": "synchronized Process startWorker $F2 throws IOException { \n\tif $F112 ( worker ) { \n\t\tfinal Process $F37646 ( delegate , workerBuilder ) ; \n\t\tfinal Thread shutdownHook = new Thread $F2821 ( trialId ) { \n\t\t\t$F1 public void run $F2 $F124069 ( delegate ) } \n\t\t; \n\t\tshutdownHookRegistrar . addShutdownHook ( shutdownHook ) ; \n\t\tworker = new Process $F2 { \n\t\t\t$F1 public OutputStream getOutputStream $F2 { \n\t\t\t\treturn $F120506 ( delegate ) ; \n\t\t\t\t} \n\t\t\t$F1 public InputStream getInputStream $F2 { \n\t\t\t\t$F35381 ( delegate ) } \n\t\t\t$F1 public InputStream getErrorStream $F2 { \n\t\t\t\treturn $F193847 ( delegate ) ; \n\t\t\t\t} \n\t\t\t$F1 public int waitFor $F2 throws InterruptedException { \n\t\t\t\t$F40810 ( waitFor , delegate ) shutdownHookRegistrar . removeShutdownHook ( shutdownHook ) ; \n\t\t\t\treturn waitFor ; \n\t\t\t\t} \n\t\t\t$F1 public int exitValue $F2 { \n\t\t\t\t$F40810 ( exitValue , delegate ) shutdownHookRegistrar . removeShutdownHook ( shutdownHook ) ; \n\t\t\t\treturn exitValue ; \n\t\t\t\t} \n\t\t\t$F1 public void destroy $F2 { \n\t\t\t\t$F37676 ( delegate ) shutdownHookRegistrar . removeShutdownHook ( shutdownHook ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t; \n\t\t} \n\treturn worker ; \n\t} \n"}, {"code": "public void close $F2 { \n\ttry { \n\t\tstate = STRING00 ; \n\t\tif $F268 ( connection ) { \n\t\t\t$F16516 ( logger ) rollback ( ) ; \n\t\t\t} \n\t\tif $F1984472 ( events ) { \n\t\t\tstate = STRING00 ; \n\t\t\tdo { \n\t\t\t\tExecution exec = ( Execution ) $F22658 ( events ) ; \n\t\t\t\ttry { \n\t\t\t\t\tStack < Execution > stack ; \n\t\t\t\t\t$F1109 ( exec ) stack = eventCache . get ( $F6291 ( exec ) ) ; \n\t\t\t\t\tif $F268 ( stack ) $F22707 ( stack , exec ) } \n\t\t\t\tcatch ( Throwable t ) $F428174 ( logger , t ) } \n\t\t\twhile $F1984472 ( events ) ; \n\t\t\t} \n\t\tstate = STRING00 ; \n\t\t} \n\tfinally { \n\t\tif ( tracking ) { \n\t\t\ttransactions . remove ( $F108418 ( transactionId ) ) ; \n\t\t\t} \n\t\t$F39336 ( events ) $F39336 ( statements ) stackTrace = null ; \n\t\t} \n\t} \n"}, {"code": "public void commit $F2 throws PersistenceException { \n\ttry { \n\t\tif $F112 ( connection ) { \n\t\t\tif ( dirty ) { \n\t\t\t\tthrow new PersistenceException $F6 ; \n\t\t\t\t} \n\t\t\t$F254 } \n\t\tstate = STRING00 ; \n\t\ttry { \n\t\t\t$F374904 ( connection ) state = STRING00 ; \n\t\t\t$F1109 ( connection ) connection = null ; \n\t\t\tif $F3507 ( logger ) { \n\t\t\t\tlogger . debug ( connectionCloseLog ( ) ) ; \n\t\t\t\t} \n\t\t\tif ( tracking ) { \n\t\t\t\t$F147093 ( connections ) } \n\t\t\tclose ( ) ; \n\t\t\t} \n\t\tcatch ( SQLException e ) { \n\t\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\tif $F268 ( connection ) { \n\t\t\t\t$F38536 ( logger , transactionId ) rollback ( ) ; \n\t\t\t\t} \n\t\t\tdirty = true ; \n\t\t\t} \n\t\t} \n\t$F892625 } \n"}, {"code": "public $F110277 execute ( Execution event , $F2731 ( args ) ) throws PersistenceException { \n\t$F96 $F53152 ( r , execute , event , args ) ; \n\t$F2201 ( r ) if ( r instanceof HashMap ) { \n\t\treturn ( $F110277 ) r ; \n\t\t} \n\telse { \n\t\t$F671334 ( tmp ) $F7171 ( tmp , r ) return tmp ; \n\t\t} \n\t} \n"}, {"code": "private synchronized void open ( Execution event , String dsn ) throws SQLException , PersistenceException { \n\ttry { \n\t\tConnection conn ; \n\t\t$F231138 ( connection ) state = STRING00 ; \n\t\ttry { \n\t\t\tInitialContext $F501390 ( ctx ) ; \n\t\t\tDataSource ds ; \n\t\t\tif $F112 ( dsn ) { \n\t\t\t\tdsn = $F7950 ( event ) ; \n\t\t\t\t} \n\t\t\tif $F112 ( dsn ) { \n\t\t\t\tthrow new PersistenceException $F6 ; \n\t\t\t\t} \n\t\t\tstate = STRING00 ; \n\t\t\t$F13002 ( ds , dsCache , dsn ) if $F112 ( ds ) { \n\t\t\t\tds = ( DataSource ) $F175362 ( ctx , dsn ) ; \n\t\t\t\t$F173220 ( ds , dsCache , dsn ) } \n\t\t\tif $F112 ( ds ) { \n\t\t\t\tthrow new PersistenceException $F2821 ( dsn ) ; \n\t\t\t\t} \n\t\t\t$F380801 ( conn , ds ) $F100464 ( openTime , System ) $F1107464 ( logger , transactionId , dsn ) state = STRING00 ; \n\t\t\t} \n\t\tcatch ( NamingException e ) { \n\t\t\t$F433908 ( logger , e ) throw new PersistenceException $F26312 ( e ) ; \n\t\t\t} \n\t\t$F396485 ( conn ) conn . setReadOnly ( readOnly ) ; \n\t\tconnection = conn ; \n\t\tif ( tracking ) { \n\t\t\t$F177038 ( connections ) transactions . put ( $F108418 ( transactionId ) , this ) ; \n\t\t\t} \n\t\t} \n\t$F892625 } \n"}, {"code": "$F1 public T save ( T t ) { \n\tString $F437139 ( path , jcrom , t ) ; \n\t$F968485 ( name , jcrom , t ) if $F268 ( path ) { \n\t\ttry { \n\t\t\tif ( path . endsWith ( STRING00 + name ) && $F49732 ( repository ) . nodeExists ( path ) ) { \n\t\t\t\t$F1657937 ( dao , t ) } \n\t\t\telse { \n\t\t\t\tif ( $F49732 ( repository ) . nodeExists ( $F1201 ( path ) ? path + name : path + STRING00 + name ) ) { \n\t\t\t\t\tthrow new JcrMappingException $F24635 ( path , name ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( RepositoryException e ) { \n\t\t\tthrow new JcrMappingException $F5148 ( path , e ) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\tString parentPath = path . endsWith ( STRING00 + name ) ? path . substring ( INT00 , path . lastIndexOf ( STRING00 + name ) ) : path ; \n\t\tcheckPath ( parentPath ) ; \n\t\t$F72623 ( dao , parentPath , t ) } \n\tcatch ( RepositoryException e ) { \n\t\tthrow new JcrMappingException $F5148 ( path , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected HttpRequestBase process ( InvocationContext context , HttpRequestBase request ) { \n\ttry { \n\t\tURIBuilder uriBuilder = new URIBuilder ( $F8004 ( request ) ) ; \n\t\tList $F3625205 constantQueryParams = RequestUtils . findStaticQueryParams ( context ) ; \n\t\tfor ( Param param : constantQueryParams ) { \n\t\t\turiBuilder . setParameter ( $F2941 ( param ) , $F11145 ( param ) ) ; \n\t\t\t} \n\t\tList < Entry < QueryParam , Object > > queryParams = Metadata . onParams ( QueryParam . class , context ) ; \n\t\tfor ( Entry < QueryParam , Object > entry : queryParams ) { \n\t\t\tString name = $F712 ( entry ) . value ( ) ; \n\t\t\t$F4379 ( value , entry ) if ( ! $F27895 ( value ) ) { \n\t\t\t\tStringBuilder errorContext = $F171524 ( $F33472 . getName ( ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( STRING00 ) ; \n\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t} \n\t\t\turiBuilder . setParameter ( name , ( ( CharSequence ) value ) . toString ( ) ) ; \n\t\t\t} \n\t\tList < Entry < QueryParams , Object > > queryParamMaps = Metadata . onParams ( QueryParams . class , context ) ; \n\t\tfor ( Entry < QueryParams , Object > entry : queryParamMaps ) { \n\t\t\tParam [ ] constantParams = $F712 ( entry ) . value ( ) ; \n\t\t\tif $F124033 ( constantParams ) { \n\t\t\t\tfor ( Param param : constantParams ) { \n\t\t\t\t\turiBuilder . setParameter ( $F2941 ( param ) , $F11145 ( param ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F4379 ( map , entry ) if $F457550 ( map ) { \n\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) ; \n\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t} \n\t\t\t$F34560 ( nameAndValues , map ) for ( $F63175 nameAndValue : $F708 ( nameAndValues ) ) { \n\t\t\t\t$F457558 ( name , nameAndValue ) $F4379 ( value , nameAndValue ) if ( ! ( name instanceof CharSequence && ( value instanceof CharSequence || value instanceof Collection ) ) ) { \n\t\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) . append ( STRING00 ) ; \n\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif $F27895 ( value ) { \n\t\t\t\t\turiBuilder . addParameter ( ( ( CharSequence ) name ) . toString ( ) , ( ( CharSequence ) value ) . toString ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\t$F37414 ( multivalues , value ) for ( Object multivalue : multivalues ) { \n\t\t\t\t\t\tif ( ! $F27895 ( multivalue ) ) { \n\t\t\t\t\t\t\tStringBuilder errorContext = $F171524 ( STRING00 ) ; \n\t\t\t\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\turiBuilder . addParameter ( ( ( CharSequence ) name ) . toString ( ) , ( ( CharSequence ) multivalue ) . toString ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\trequest . setURI ( $F900 ( uriBuilder ) ) ; \n\t\treturn request ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow ( e instanceof RequestProcessorException ) ? ( RequestProcessorException ) e : new RequestProcessorException $F209248 ( context , getClass , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void load $F2 throws Exception { \n\t$F2090 ( resourceName , System , CONFIG_FILENAME_KEY ) $F4980 ( resourceName , CONFIG_FILENAME_KEY ) $F99950 ( in ) try { \n\t\tin = ClassLoader . getSystemResourceAsStream ( resourceName ) ; \n\t\tif $F112 ( in ) { \n\t\t\tthrow new IllegalStateException $F13407 ( resourceName ) ; \n\t\t\t} \n\t\tparse ( in ) ; \n\t\t} \n\tfinally { \n\t\tif $F268 ( in ) { \n\t\t\ttry $F2453 ( in ) $F188590 } \n\t\t} \n\t} \n"}, {"code": "protected void parse ( InputStream in ) throws Exception { \n\tDefaultHandler handler = new StateConfigHandler $F2 ; \n\t$F117558 ( saxFactory , SAXParserFactory ) saxFactory . setValidating ( true ) ; \n\tSAXParser $F1291456 ( parser , saxFactory ) ; \n\t$F88528 ( parser , in , handler ) } \n"}, {"code": "public void addLocale ( final LocaleId locale ) { \n\tsynchronized ( this . locales ) { \n\t\tif ( this . locales == null ) { \n\t\t\tthis . locales = new ArrayList < LocaleId > $F2 ; \n\t\t\t} \n\t\tthis . locales . add ( locale ) ; \n\t\t} \n\t} \n"}, {"code": "public void removeLocale ( final LocaleId locale ) { \n\t$F2117 ( LOG , locale ) synchronized ( locales ) { \n\t\tif $F8674 ( locales , locale ) $F6953 ( locales , locale ) } \n\t} \n"}, {"code": "public BagArray insert $F13577 ( index , object ) { \n\tgrow ( index ) ; \n\t$F73167 ( container , index , objectify , object ) return this ; \n\t} \n"}, {"code": "$F1 public Object getObject ( String key ) { \n\t$F101516 ( path , Key , key ) int $F24330 ( index , keyToIndex , path ) ; \n\tif ( $F9869 ( index ) && ( index < count ) ) { \n\t\t$F69277 ( found , container , index ) return $F4389 ( path ) ? found : ( ( Bag ) found ) . getObject ( path [ INT00 ] ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public String getString ( int index ) { \n\t$F6597 ( object , getObject , index ) try $F395760 ( object ) catch ( ClassCastException exception ) { \n\t\tlog . warn ( $F373600 ( object , index ) + STRING00 ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public Boolean getBoolean ( int index ) { \n\t$F8494 ( string , getString , index ) return $F268 ( string ) ? $F2091 ( Boolean , string ) : null ; \n\t} \n"}, {"code": "$F762 public Long getLong ( int index ) { \n\t$F8494 ( string , getString , index ) return $F268 ( string ) ? $F3003 ( Long , string ) : null ; \n\t} \n"}, {"code": "public Integer getInteger ( int index ) { \n\t$F42849 ( value , getLong , index ) return $F268 ( value ) ? $F4896 ( value ) : null ; \n\t} \n"}, {"code": "public Double getDouble ( int index ) { \n\t$F8494 ( string , getString , index ) return $F268 ( string ) ? $F79299 ( Double , string ) : null ; \n\t} \n"}, {"code": "public Float getFloat ( int index ) { \n\tDouble value = getDouble ( index ) ; \n\treturn $F268 ( value ) ? $F4923 ( value ) : null ; \n\t} \n"}, {"code": "public BagObject getBagObject ( int index ) { \n\t$F6597 ( object , getObject , index ) try { \n\t\treturn ( BagObject ) object ; \n\t\t} \n\tcatch ( ClassCastException exception ) { \n\t\tlog . warn ( $F373600 ( object , index ) + STRING00 ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public BagArray getBagArray ( int index ) { \n\t$F6597 ( object , getObject , index ) try { \n\t\treturn ( BagArray ) object ; \n\t\t} \n\tcatch ( ClassCastException exception ) { \n\t\tlog . warn ( $F373600 ( object , index ) + STRING00 ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static void create ( int dimensions , int numElements , Collection < ? super MutableIntTuple > target ) { \n\tfor ( $F6610 ( i , numElements ) ) { \n\t\ttarget . add ( $F4018 ( IntTuples , dimensions ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static List < MutableIntTuple > create $F12004 ( dimensions , numElements ) { \n\tList < MutableIntTuple > list = new ArrayList < MutableIntTuple > ( numElements ) ; \n\t$F5605 ( create , dimensions , numElements , list ) return list ; \n\t} \n"}, {"code": "public static List < MutableIntTuple > deepCopy ( Collection < ? extends IntTuple > tuples ) { \n\tList < MutableIntTuple > result = new ArrayList < MutableIntTuple > $F4371 ( tuples ) ; \n\tfor ( IntTuple t : tuples ) { \n\t\tif $F112 ( t ) $F399094 ( result ) else { \n\t\t\tresult . add ( $F106730 ( IntTuples , t ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple min ( Collection < ? extends IntTuple > tuples , MutableIntTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) IntTuple identity = IntTuples . constant ( size , Integer . MAX_VALUE ) ; \n\tMutableIntTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > IntTuples . copy ( identity ) , ( r , t ) - > IntTuples . min ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > IntTuples . min ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "public static MutableIntTuple add ( Collection < ? extends IntTuple > tuples , MutableIntTuple result ) { \n\t$F6156 ( tuples ) $F12232 ( size , getSize , result , tuples ) MutableIntTuple localResult = $F464217 ( tuples ) . collect ( ( ) - > IntTuples . create ( size ) , ( r , t ) - > IntTuples . add ( r , t , r ) , <missing ';'> $F17927 r0 , r1 ) - > IntTuples . add ( r0 , r1 , r0 ) ) ; \n\t$F3446 ( result , localResult ) $F57566 ( result , localResult ) return result ; \n\t} \n"}, {"code": "private void init $F2 { \n\tMeasure currSonarMeasure = null ; \n\t$F4728 ( currValue ) setValues ( new HashMap < HLAMeasure , String > $F2 ) ; \n\tsetValuesInt ( new HashMap < HLAMeasure , Integer > $F2 ) ; \n\tsetValuesDouble ( new HashMap < HLAMeasure , Double > $F2 ) ; \n\tsetMeasures ( new ArrayList < HLAMeasure > $F2 ) ; \n\tsetVersion ( getResource ( ) . getVersion ( ) ) ; \n\tfor ( $F46272 ( currMeasure , HLAMeasure ) ) { \n\t\tLOG . debug ( STRING00 + currMeasure . getSonarName ( ) ) ; \n\t\tcurrSonarMeasure = getResource ( ) . getMeasure ( currMeasure . getSonarName ( ) ) ; \n\t\tif $F268 ( currSonarMeasure ) { \n\t\t\tLOG . debug ( STRING00 + currMeasure . getSonarName ( ) ) ; \n\t\t\tcurrValue = currSonarMeasure . getFormattedValue ( ) ; \n\t\t\t$F15610 ( LOG , currValue ) $F193080 ( getValues ) ( currMeasure , $F13617 ( currValue , VALUE_NOT_AVAILABLE ) ) ; \n\t\t\t$F193080 ( getValuesInt ) ( currMeasure , $F825916 ( currSonarMeasure ) ) ; \n\t\t\t$F193080 ( getValuesDouble ) ( $F6560 ( currMeasure , currSonarMeasure ) ) ; \n\t\t\t$F142643 ( getMeasures , currMeasure ) } \n\t\t} \n\t} \n"}, {"code": "public static ActivityEngine getDefaultEngine $F2 { \n\tif $F112 ( defaultEngine ) { \n\t\tsynchronized ( ActivityEngineFactory . class ) { \n\t\t\t$F28972 ( defaultEngine , makeDefaultEngine ) } \n\t\t} \n\treturn defaultEngine ; \n\t} \n"}, {"code": "public int run $F18538 ( jobName , args ) { \n\t$F3747 ( status ) try { \n\t\tClass < ? extends SimpleJobTool > $F199 ( clazz , jobMap , jobName ) ; \n\t\tif $F112 ( clazz ) { \n\t\t\t$F265471 ( log , jobName ) return status ; \n\t\t\t} \n\t\tstatus = ToolRunner . run ( $F6892 ( clazz ) , args ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\t$F7453 ( e ) $F27417 ( log , e ) } \n\treturn status ; \n\t} \n"}, {"code": "public void addJob ( String name , Class < ? extends SimpleJobTool > clazz ) $F2726 ( jobMap , name , clazz ) "}, {"code": "public $F21 getJobList $F2 { \n\t$F21 strings = new String [ $F66154 ( jobMap ) ] ; \n\t$F1987 ( i ) for ( $F88222 ( s , jobMap ) ) $F58394 ( strings , i , s ) return strings ; \n\t} \n"}, {"code": "$F762 public static Morphia create ( final $F627861 classesToMap , final Set < Class < ? extends TypeConverter > > converters ) { \n\tMorphia morphia = ( classesToMap == null ? ( new Morphia $F2 ) : ( new Morphia ( classesToMap ) ) ) ; \n\tif $F98946 ( converters ) { \n\t\tDefaultConverters defaultConverters = $F476737 ( morphia ) . getConverters ( ) ; \n\t\tfor ( Class < ? extends TypeConverter > converter : converters ) { \n\t\t\tdefaultConverters . addConverter ( converter ) ; \n\t\t\t} \n\t\t} \n\treturn morphia ; \n\t} \n"}, {"code": "$F1 public $F21 split ( String str ) { \n\treturn StringUtil . split ( str , separator , false ) ; \n\t} \n"}, {"code": "public HttpResponse perform ( HttpRequest request ) throws IOException , HttpClientException { \n\tif ( request . isMultiPartFormData ( ) && $F21352 ( request ) != HttpMethod . POST ) { \n\t\tlogger . error ( STRING00 , $F21352 ( request ) . name ( ) ) ; \n\t\tthrow new HttpClientException ( STRING00 + $F21352 ( request ) . name ( ) + STRING00 ) ; \n\t\t} \n\tURL url = $F13277 ( request ) ; \n\tHttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( proxy != null ? proxy : Proxy . NO_PROXY ) ; \n\tconnection . setRequestMethod ( $F21352 ( request ) . name ( ) ) ; \n\tfor ( $F65939 header : $F30300 ( request ) . entrySet ( ) ) { \n\t\tconnection . setRequestProperty ( $F18327 ( header ) ) ; \n\t\t} \n\tif ( $F21352 ( request ) == HttpMethod . POST ) { \n\t\tif ( request . isMultiPartFormData ( ) ) { \n\t\t\tconnection . setRequestProperty ( STRING00 , STRING00 + request . getBoundary ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F475823 ( connection ) } \n\t\t$F176300 ( connection ) try ( DataOutputStream stream = new DataOutputStream $F314946 ( connection ) ) { \n\t\t\tif ( request . isMultiPartFormData ( ) ) { \n\t\t\t\tfor ( HttpParameter parameter : $F6573 ( request ) ) { \n\t\t\t\t\tstream . writeBytes ( STRING00 + request . getBoundary ( ) ) ; \n\t\t\t\t\t$F119281 ( stream , NEWLINE ) switch $F281904 ( parameter ) { \n\t\t\t\t\t\tcase TEXT : stream . writeBytes ( $F11903 ( parameter , NEWLINE ) ) ; \n\t\t\t\t\t\t$F119281 ( stream , NEWLINE ) stream . writeBytes ( ( ( HttpTextParameter ) parameter ) . getValue ( ) . toString ( ) + NEWLINE ) ; \n\t\t\t\t\t\t$F332 case FILE : stream . writeBytes ( $F11902 ( parameter ) + ( ( HttpFileParameter ) parameter ) . getFileName ( ) + STRING00 + NEWLINE ) ; \n\t\t\t\t\t\tstream . writeBytes ( STRING00 + ( ( HttpFileParameter ) parameter ) . getContentType ( ) + NEWLINE ) ; \n\t\t\t\t\t\tstream . writeBytes ( STRING00 + NEWLINE ) ; \n\t\t\t\t\t\t$F119281 ( stream , NEWLINE ) Streams . copy ( ( ( HttpFileParameter ) parameter ) . getInputStream ( ) , stream ) ; \n\t\t\t\t\t\t$F119281 ( stream , NEWLINE ) $F332 } \n\t\t\t\t\t} \n\t\t\t\tstream . writeBytes ( STRING00 + request . getBoundary ( ) + STRING00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tString values = HttpParameter . concatenate ( $F6573 ( request ) ) ; \n\t\t\t\t$F119281 ( stream , values ) } \n\t\t\t$F6369 ( stream ) $F1109 ( stream ) } \n\t\t} \n\telse if ( $F21352 ( request ) == HttpMethod . GET ) $F1645 return new HttpResponse ( connection ) ; \n\t} \n"}, {"code": "protected boolean isJsonType ( MediaType mediaType ) { \n\tif $F268 ( mediaType ) { \n\t\tString subtype = $F648009 ( mediaType ) ; \n\t\treturn $F9140 ( subtype ) || $F1201 ( subtype ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "public static $F1372 Expiring $F1372 of $F81342 ( elements ) { \n\treturn of ( Arrays . asList ( checkNotNull ( elements ) ) ) ; \n\t} \n"}, {"code": "public static $F1372 Expiring $F1372 of $F58489 ( iterable ) { \n\treturn of ( $F58545 ( checkNotNull , iterable ) ) ; \n\t} \n"}, {"code": "public static $F1372 Expiring $F1372 of ( $F58836 ( iterator ) ) { \n\treturn of ( Lists . newArrayList ( checkNotNull ( iterator ) ) ) ; \n\t} \n"}, {"code": "public static $F1372 Expiring $F1372 of $F67145 ( collection ) { \n\treturn new Expiring $F1372 ( collection ) ; \n\t} \n"}, {"code": "public static $F1372 Expiring $F1372 of ( Enumeration $F1372 enumeration ) { \n\treturn of ( Iterators . forEnumeration ( enumeration ) ) ; \n\t} \n"}, {"code": "public ExpiringSet $F1372 buildSet $F2 { \n\t$F8938 target = ( $F8938 ) ( handleExistEls ? Sets . $F1372 newHashSet $F2 : ( elements instanceof Set ? elements : $F380980 ( Sets , elements ) ) ) ; \n\tExpiringSet $F1372 expiringSet = new ExpirationSet $F1372 ( target , ticker . or ( systemTicker ( ) ) , defaultExpireTime . orNull ( ) , defaultExpireUnit . orNull ( ) ) ; \n\tif ( handleExistEls ) $F28731 ( expiringSet , elements ) return expiringSet ; \n\t} \n"}, {"code": "public Expiring $F1372 withDefault $F59368 ( expireTime , expireUnit ) { \n\tcheckArgument ( expireTime > INT00 ) ; \n\tthis . defaultExpireTime = $F326 ( Optional , expireTime ) ; \n\tthis . defaultExpireUnit = $F326 ( Optional , expireUnit ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Expiring $F1372 handleFormer $F2 { \n\tif ( null == this . defaultExpireTime || null == this . defaultExpireUnit ) $F60771 this . handleExistEls = true ; \n\treturn this ; \n\t} \n"}, {"code": "$F1 public Integer convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\treturn $F42850 ( FMT , valueStr ) . intValue ( ) ; \n\t} \n"}, {"code": "$F1 protected void exportNamespaceData ( final String prefix , final StringBuilder out , final int occ ) { \n\t$F1212 ( out , prefix ) $F1218 ( out ) out . append ( FMT . format ( getValue ( occ ) ) ) ; \n\t$F1218 ( out ) } \n"}, {"code": "$F1 public $F73786 getValueAsfloatArray $F2 throws ParseException { \n\tfinal $F73786 result = new float $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . floatValue ( ) ; \n\treturn result ; \n\t} \n"}, {"code": "public HttpClientBuilder basicAuth $F1195 ( username , password ) { \n\tbasicAuthUsername = username ; \n\tbasicAuthPassword = password ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder ssl ( String host ) { \n\t$F173220 ( sslHostConfig , sslHostConfigs , secureHost ) secureHost = host ; \n\tsslHostConfig = new SslHostConfig $F2 ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder sslEnabledProtocols $F22 ( protocols ) { \n\tif $F112 ( protocols ) $F67413 ( sslEnabledProtocols ) else { \n\t\t$F21683 ( sslEnabledProtocols , protocols ) ; \n\t\t$F35447 ( System , protocols , sslEnabledProtocols ) } \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder trustKeyStore $F41981 ( url , password ) { \n\t$F14196 ( sslHostConfig ) sslHostConfig . trustKeyStoreUrl = url ; \n\tsslHostConfig . trustKeyStorePassword = password ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder keyStore $F41981 ( url , password ) { \n\t$F14196 ( sslHostConfig ) sslHostConfig . keyStoreUrl = url ; \n\tsslHostConfig . keyStorePassword = password ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder secureSchema ( String schema ) { \n\t$F14196 ( sslHostConfig ) sslHostConfig . secureSchema = schema ; \n\treturn this ; \n\t} \n"}, {"code": "public HttpClientBuilder timeouts ( int connectionTimeout , int soTimeout , long connectionManagerTimeout ) { \n\t$F1357 ( this , connectionTimeout ) $F1357 ( this , soTimeout ) $F1357 ( this , connectionManagerTimeout ) return this ; \n\t} \n"}, {"code": "public HttpClient build $F2 { \n\tHttpClient httpClient = new HttpClient $F2 ; \n\tif $F268 ( proxyHost ) { \n\t\tProxyHost h ; \n\t\tif $F9467 ( proxyPort ) { \n\t\t\th = new ProxyHost ( proxyHost ) ; \n\t\t\t} \n\t\telse { \n\t\t\th = new ProxyHost ( proxyHost , proxyPort ) ; \n\t\t\t} \n\t\thttpClient . getHostConfiguration ( ) . setProxyHost ( h ) ; \n\t\t} \n\tif $F268 ( basicAuthUsername ) { \n\t\t$F103050 ( httpClient ) . setAuthenticationPreemptive ( authenticationPreemprive ) ; \n\t\tAuthScope authscope = new AuthScope ( basicAuthHost == null ? AuthScope . ANY_HOST : basicAuthHost , basicAuthPort == $F3745 ? AuthScope . ANY_PORT : basicAuthPort ) ; \n\t\tCredentials credentials = $F771017 ( basicAuthUsername , basicAuthPassword ) ; \n\t\t$F204311 ( httpClient ) . setCredentials ( authscope , credentials ) ; \n\t\t} \n\t$F173220 ( sslHostConfig , sslHostConfigs , secureHost ) for ( Entry < String , SslHostConfig > entry : $F708 ( sslHostConfigs ) ) { \n\t\t$F19202 ( host , entry ) SslHostConfig $F4377 ( config , entry ) ; \n\t\tAuthSSLProtocolSocketFactory factory = new AuthSSLProtocolSocketFactory ( config . keyStoreUrl , config . keyStorePassword , config . trustKeyStoreUrl , config . trustKeyStorePassword ) ; \n\t\tif $F268 ( sslEnabledProtocols ) { \n\t\t\tfactory . setEnabledProtocols ( sslEnabledProtocols ) ; \n\t\t\t} \n\t\tProtocol $F304 ( protocol , createProtocol , factory , config ) ; \n\t\thttpClient . getHostConfiguration ( ) . setHost ( host , config . securePort , protocol ) ; \n\t\t} \n\t$F103050 ( httpClient ) . setSoTimeout ( soTimeout ) ; \n\t$F103050 ( httpClient ) . setConnectionManagerTimeout ( connectionManagerTimeout ) ; \n\thttpClient . getHttpConnectionManager ( ) . getParams ( ) . setConnectionTimeout ( connectionTimeout ) ; \n\treturn httpClient ; \n\t} \n"}, {"code": "$F1 protected void addAttributesToInputElement $F50656 ( element , fieldName ) { \n\telement . setAttribute ( StandardDialect . PREFIX + STRING00 + AbstractSpringFieldAttrProcessor . ATTR_NAME , $F320 ( fieldName ) ) ; \n\t} \n"}, {"code": "static $F1372 T get ( $F2731 ( olm ) , String path , T def ) { \n\tObject ret = def ; \n\ttry { \n\t\t$F22194 ( parts , tokenizePath , path ) Object o = olm ; \n\t\tfor ( $F2674 ( i , parts ) ) { \n\t\t\t$F57272 $F77144 ( j , getNumber , parts , i ) ; \n\t\t\tString $F77144 ( name , getLocalName , parts , i ) ; \n\t\t\to = $F386356 ( o ) . get ( name ) ; \n\t\t\tif $F268 ( j ) { \n\t\t\t\tfor ( $F2674 ( k , j ) ) { \n\t\t\t\t\to = $F430703 ( o ) . get ( j [ k ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif $F268 ( o ) ret = o ; \n\t\telse ret = def ; \n\t\t} \n\t$F165638 $F21676 ( ret ) } \n"}, {"code": "$F762 protected void processObject ( Object tempelObject , $F8237 ( objectClassPath ) , ITemplateRepository templateRepository , ITemplateSourceFactory templateSourceFactory ) { \n\tif $F5619 ( tempelObject ) { \n\t\t$F97625 ( properties ) ; \n\t\t$F4357 scopeProperties = ( $F4357 ) tempelObject ; \n\t\tfor ( $F88222 ( key , scopeProperties ) ) { \n\t\t\t$F75598 ( value , scopeProperties , key ) $F2725 ( properties , key , value ) } \n\t\t$F254 } \n\tif $F44389 ( tempelObject ) { \n\t\tdependencies = ( List < TempelDependency > ) tempelObject ; \n\t\t$F254 } \n\tif ( tempelObject instanceof Template ) { \n\t\tTemplate $F45 template = ( Template $F45 ) tempelObject ; \n\t\ttemplate . addTemplateClassPathExtender ( new RepositoryTemplateClassPathExtender $F2 ) ; \n\t\ttemplate . addTemplateClassPathExtender ( new DependenciesTemplateClassPathExtender $F2 ) ; \n\t\ttemplate . addTemplateClassPathExtender ( new FixedSetTemplateClassPathExtender ( objectClassPath ) ) ; \n\t\tif ( $F47664 ( template ) != null ) { \n\t\t\tfor ( TemplateResource resource : $F47664 ( template ) ) { \n\t\t\t\tresource . setParentTemplateReference ( template ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tString gId = StringUtils . emptyIfBlank ( $F8078 ( template ) ) ; \n\t\tString tId = StringUtils . emptyIfBlank ( template . getTemplateId ( ) ) ; \n\t\tString ver = StringUtils . emptyIfBlank ( $F8088 ( template ) ) ; \n\t\tif $F337661 ( StringUtils , gId ) { \n\t\t\ttemplates . add ( $F74028 ( gId , tId , ver ) ) ; \n\t\t\ttemplateRepository . put ( $F375931 ( gId , tId , ver , template ) ) ; \n\t\t\t} \n\t\t$F19202 ( key , template ) if $F337661 ( StringUtils , key ) { \n\t\t\ttemplateRepository . put ( key , null , null , null , template ) ; \n\t\t\t} \n\t\ttemplate . setTemplateSourceFactory ( templateSourceFactory ) ; \n\t\t$F254 } \n\t} \n"}, {"code": "public String getHost $F2 { \n\t$F35473 ( host , getAsNullableString ) host = host != null ? host : getAsNullableString ( STRING00 ) ; \n\treturn host ; \n\t} \n"}, {"code": "public static ConnectionParams fromString ( String line ) { \n\t$F85456 ( map , StringValueMap , line ) return new ConnectionParams ( map ) ; \n\t} \n"}, {"code": "public static ConnectionParams fromTuples $F30965 ( tuples ) { \n\tStringValueMap map = StringValueMap . fromTuplesArray ( tuples ) ; \n\treturn new ConnectionParams ( map ) ; \n\t} \n"}, {"code": "public static List < ConnectionParams > manyFromConfig ( ConfigParams config , boolean configAsDefault ) { \n\tList < ConnectionParams > result = new ArrayList < ConnectionParams > $F2 ; \n\tConfigParams connections = config . getSection ( STRING00 ) ; \n\tif $F4340 ( connections ) { \n\t\t$F5033 connectionSections = connections . getSectionNames ( ) ; \n\t\tfor ( String section : connectionSections ) { \n\t\t\tConfigParams connection = connections . getSection ( section ) ; \n\t\t\tresult . add ( new ConnectionParams ( connection ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tConfigParams connection = config . getSection ( STRING00 ) ; \n\t\tif $F4340 ( connection ) result . add ( new ConnectionParams ( connection ) ) ; \n\t\telse if ( configAsDefault ) result . add ( new ConnectionParams ( config ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static ConnectionParams fromConfig ( ConfigParams config , boolean configAsDefault ) { \n\tList < ConnectionParams > $F304 ( connections , manyFromConfig , config , configAsDefault ) ; \n\treturn $F4339 ( connections ) ? $F3416 ( connections ) : null ; \n\t} \n"}, {"code": "public void transform ( final Source source , final Result result ) { \n\tTransformer transformer = _newTransformer ( ) ; \n\ttry { \n\t\t$F309707 ( transformer , source , result ) } \n\tcatch ( Exception ex ) { \n\t\tthrow new XmlException ( ex ) ; \n\t\t} \n\t} \n"}, {"code": "public void transform ( final InputStream is , final OutputStream os ) { \n\ttransform ( $F628855 ( is ) , $F309698 ( os ) ) ; \n\t} \n"}, {"code": "protected Transformer _newTransformer $F2 { \n\tTransformer transformer = null ; \n\tif $F112 ( _stylesheet ) { \n\t\ttry { \n\t\t\ttransformer = $F1102630 ( TransformerFactory ) ( ) ; \n\t\t\t} \n\t\tcatch ( Exception ex ) { \n\t\t\tthrow new XmlException ( ex ) ; \n\t\t\t} \n\t\treturn transformer ; \n\t\t} \n\t$F24580 ( _templates , _getTemplates , _stylesheet ) try { \n\t\t$F309703 ( transformer , _templates ) ; \n\t\tif $F4340 ( _params ) { \n\t\t\tfor ( $F88222 ( name , _params ) ) { \n\t\t\t\t$F2744 ( value , _params , name ) $F2057608 ( transformer , name , value ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new XmlException ( ex ) ; \n\t\t} \n\treturn transformer ; \n\t} \n"}, {"code": "protected static Templates _getTemplates $F739941 ( stylesheet ) { \n\tTemplates $F199 ( templates , _templatesCache , stylesheet ) ; \n\tif $F112 ( templates ) { \n\t\t$F99950 ( is ) try { \n\t\t\t$F133738 ( is , stylesheet ) templates = $F6892 ( TransformerFactory ) . newTemplates ( $F628855 ( is ) ) ; \n\t\t\t} \n\t\tcatch ( Exception ex ) { \n\t\t\tthrow new XmlException ( ex ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\ttry $F116931 ( is ) catch ( IOException io_ex ) { \n\t\t\t\t$F53214 ( _LOG_ , io_ex ) } \n\t\t\t} \n\t\t$F2725 ( _templatesCache , stylesheet , templates ) } \n\treturn templates ; \n\t} \n"}, {"code": "$F1 public void assignVariable $F532335 ( variableName , value ) throws Exception $F144166 ( assignVariable , variableName , value ) "}, {"code": "$F1 public void assignVariable ( final String variableName , final Object value , final boolean sysgen ) throws Exception { \n\tif $F257321 ( value ) $F193080 ( getVariables ) ( $F9283 ( variableName ) , new Variable ( variableName , CalendarFactory . convert ( ( Date ) value ) , sysgen ) ) ; \n\telse if $F380289 ( value ) $F193080 ( getVariables ) ( $F9283 ( variableName ) , new Variable ( variableName , CalendarFactory . convert ( ( Calendar ) value ) , sysgen ) ) ; \n\telse $F193080 ( getVariables ) ( $F9283 ( variableName ) , new Variable $F2144 ( variableName , value , sysgen ) ) ; \n\t} \n"}, {"code": "$F1 public void clear $F2 { \n\tfinal Enumeration $F1174163 varIter = getVariables ( ) . elements ( ) ; \n\twhile $F5506 ( varIter ) { \n\t\tfinal Variable $F5508 ( var , varIter ) ; \n\t\tif ( var . systemGenerated ) $F23605 $F1202885 ( removeVariable , var ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public $F5033 getVariableNames $F132136 ( includeSystemGenerated ) { \n\t$F208402 ( names ) for ( $F965096 ( name , variables ) ) { \n\t\tif ( ! includeSystemGenerated ) { \n\t\t\tfinal Variable $F68900 ( var , getVariables , name ) ; \n\t\t\tif ( var . systemGenerated ) $F23605 } \n\t\t$F528 ( names , name ) } \n\treturn names ; \n\t} \n"}, {"code": "$F1 public Hashtable $F183714 resolveRate ( final String tableName , final $F343628 baseDate , final double tableKey ) throws Exception { \n\tfinal Hashtable $F183714 $F26524 ( rates ) ; \n\trates . put ( new Double $F1415 , new Double $F1415 ) ; \n\treturn rates ; \n\t} \n"}, {"code": "$F1 public double resolveRate ( final String tableId , final $F343628 effectiveDate , final String key1 , final String key2 , final String key3 , final String key4 , final String key5 ) throws Exception $F37377 "}, {"code": "$F1 public Object resolveVariable $F62952 ( variableName ) throws Exception { \n\tfinal Variable $F68900 ( variable , getVariables , variableName ) ; \n\t$F90659 ( variable ) $F61396 ( variable ) } \n"}, {"code": "$F1 public Object resolveVariable ( final String variableName , final $F343628 baseDate ) throws Exception { \n\tfinal Variable $F68900 ( variable , getVariables , variableName ) ; \n\t$F90659 ( variable ) $F61396 ( variable ) } \n"}, {"code": "$F1 public void write ( char cbuf [ ] , int off , int len ) throws IOException { \n\tcheckNotClosed ( ) ; \n\ttarget . append ( $F174546 ( cbuf , off , len ) ) ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) { \n\tCommandLineParser commandLine = new CommandLineParser ( new String [ ] [ ] { \n\t\t{ \n\t\t\tSTRING00 , STRING00 , STRING00 , STRING00 , MathUtils . SEQUENCE_REGEXP } \n\t\t, { \n\t\t\tSTRING00 , STRING00 , STRING00 , STRING00 , MathUtils . DURATION_REGEXP } \n\t\t} \n\t) ; \n\tParsedProperties options = null ; \n\ttry { \n\t\toptions = new ParsedProperties ( commandLine . parseCommandLine ( args ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\te = null ; \n\t\t$F1292 ( System ) ( $F10113 ( commandLine ) ) ; \n\t\t$F1292 ( System ) ( $F47745 ( commandLine ) ) ; \n\t\t$F185563 ( System ) } \n\t$F111 ( sequence , options ) $F111 ( durationString , options ) $F1292 ( System ) ( STRING00 + $F35558 ( printArray , parseSequence , sequence ) ) ; \n\tif $F268 ( durationString ) { \n\t\t$F1292 ( System ) ( $F1018 ( parseDuration , durationString ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F57272 generateSequence $F65855 ( start , end , steps ) { \n\t$F90723 ( steps ) $F93353 ( result ) double fStart = start ; \n\tdouble fEnd = end ; \n\tdouble fCurrent = start ; \n\tfor ( $F6610 ( i , steps ) ) { \n\t\tfCurrent = ( ( ( fEnd - fStart ) / $F60967 ( steps ) ) * i ) + fStart ; \n\t\t$F564 ( roundAndAdd , result , fCurrent ) } \n\t$F867 ( intListToPrimitiveArray , result ) } \n"}, {"code": "public static $F57272 generateExpSequence $F65855 ( start , end , steps ) { \n\t$F90723 ( steps ) $F93353 ( result ) double fStart = start ; \n\tdouble fEnd = end ; \n\t$F63674 ( diff , fEnd , fStart ) double factor = java . lang . Math . pow ( diff , ( NUM00 / $F60967 ( steps ) ) ) ; \n\tfor ( $F6610 ( i , steps ) ) { \n\t\tif ( $F327391 ( i , steps ) ) $F529 ( result , end ) else { \n\t\t\troundAndAdd ( result , fStart - NUM00 + java . lang . Math . pow ( factor , i ) ) ; \n\t\t\t} \n\t\t} \n\t$F867 ( intListToPrimitiveArray , result ) } \n"}, {"code": "public static $F57272 parseSequence ( CharSequence sequenceDef ) { \n\t$F34959 ( matcher , SEQUENCE_PATTERN , sequenceDef ) if $F168122 ( matcher ) $F24432 int numGroups = $F187903 ( matcher ) ; \n\t$F34962 ( intArrayString , matcher ) $F30789 ( intSplits , intArrayString ) $F57272 sequence = new int $F98817 ( intSplits ) ; \n\tfor ( $F2674 ( i , intSplits ) ) { \n\t\t$F12139 ( sequence , i ) = $F155977 ( Integer , intSplits , i ) ; \n\t\t} \n\t$F1987 ( samples ) if ( $F3730 ( numGroups ) && $F154972 ( matcher ) ) { \n\t\t$F34962 ( samplesGroup , matcher ) String $F140320 ( samplesString , samplesGroup ) ; \n\t\t$F83696 ( samples , Integer , samplesString ) } \n\t$F2233 ( expFlag ) if ( $F3730 ( numGroups ) && $F154972 ( matcher ) ) $F24354 ( expFlag ) if ( $F319 ( samples ) && $F109195 ( sequence ) ) { \n\t\t$F90799 ( start , sequence ) int $F145492 ( end , sequence ) ; \n\t\tif ( ! expFlag ) $F109816 ( sequence , generateSequence , start , end , samples ) else $F109816 ( sequence , generateExpSequence , start , end , samples ) } \n\treturn sequence ; \n\t} \n"}, {"code": "public static long parseDuration ( CharSequence duration ) { \n\t$F34959 ( matcher , DURATION_PATTERN , duration ) if $F168122 ( matcher ) $F24432 $F57820 ( result ) int numGroups = $F187903 ( matcher ) ; \n\tif $F9869 ( numGroups ) { \n\t\t$F34962 ( daysString , matcher ) result += $F112 ( daysString ) ? INT00 : ( Long . parseLong ( $F1206 ( daysString ) ) * INT00 * INT00 * INT00 * INT00 ) ; \n\t\t} \n\tif $F9869 ( numGroups ) { \n\t\t$F34962 ( hoursString , matcher ) result += $F112 ( hoursString ) ? INT00 : ( Long . parseLong ( $F1206 ( hoursString ) ) * INT00 * INT00 * INT00 ) ; \n\t\t} \n\tif $F9869 ( numGroups ) { \n\t\t$F34962 ( minutesString , matcher ) result += $F112 ( minutesString ) ? INT00 : ( Long . parseLong ( $F1206 ( minutesString ) ) * INT00 * INT00 ) ; \n\t\t} \n\tif $F9869 ( numGroups ) { \n\t\t$F34962 ( secondsString , matcher ) result += $F112 ( secondsString ) ? INT00 : ( Long . parseLong ( $F1206 ( secondsString ) ) * INT00 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static String printArray $F60858 ( array ) { \n\t$F19733 ( result ) for ( $F2674 ( i , array ) ) { \n\t\t$F61020 ( result , array , i ) result += ( $F116315 ( i , array ) ) ? STRING00 : STRING00 ; \n\t\t} \n\tresult += STRING00 ; \n\treturn result ; \n\t} \n"}, {"code": "public static int maxInArray $F60858 ( values ) { \n\tif ( $F112 ( values ) || $F4389 ( values ) ) $F24432 $F90799 ( max , values ) for ( int value : values ) { \n\t\tmax = ( max < value ) ? value : max ; \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "private static $F57272 intListToPrimitiveArray $F113328 ( result ) { \n\t$F100506 ( resultArray , result ) $F1987 ( index ) for ( int r : result ) { \n\t\t$F44600 ( resultArray , index , result ) index ++ ; \n\t\t} \n\treturn resultArray ; \n\t} \n"}, {"code": "private static void roundAndAdd ( $F60869 ( result ) , double value ) { \n\tint roundedValue = ( int ) $F454266 ( Math , value ) ; \n\t$F215029 ( result , roundedValue ) } \n"}, {"code": "public void run ( $F205219 input , $F205219 output ) { \n\tif $F94933 ( input ) $F29219 ( fail ) $F53757 ( driver , conf ) Key key = $F3416 ( input ) . getKey ( ) ; \n\tboolean groupingNothing = $F3416 ( input ) . isGroupingNothing ( ) ; \n\t$F943368 values = new ArrayList $F943367 $F2 ; \n\tfor ( Record record : input ) { \n\t\tvalues . add ( record . isValueNothing ( ) ? $F144 ( NullWritable ) : $F269 ( record ) ) ; \n\t\t} \n\tdriver . withInput ( groupingNothing ? $F144 ( NullWritable ) : key , values ) ; \n\tif $F268 ( output ) { \n\t\tfor ( Record r : output ) { \n\t\t\tdriver . withOutput ( r . isGroupingNothing ( ) ? $F144 ( NullWritable ) : $F712 ( r ) , r . isValueNothing ( ) ? $F144 ( NullWritable ) : $F269 ( r ) ) ; \n\t\t\t} \n\t\t} \n\tdriver . runTest ( ) ; \n\t} \n"}, {"code": "$F762 public static $F28644 ImmutableSortedMap $F28644 of $F2 { \n\treturn EmptyImmutableSortedMap . forComparator ( NATURAL_ORDER ) ; \n\t} \n"}, {"code": "public $F27567 files $F2 throws ParseException , IOException { \n\tif $F112 ( files ) { \n\t\t$F74981 ( files ) for ( final String pattern : userSuppliedPatterns ) { \n\t\t\tfiles . addAll ( new WildPath ( pattern ) . files ( ) ) ; \n\t\t\t} \n\t\t} \n\treturn files ; \n\t} \n"}, {"code": "protected final void doDefaults ( final Map < K , $F60560 > defaults ) { \n\tapply ( $F384 ( defaults ) ? $F183489 ( Nop ) : new Defaults $F50 ( defaults ) ) ; \n\t} \n"}, {"code": "protected final void doRemove ( final $F398647 toRemove ) { \n\tapply ( $F384 ( toRemove ) ? $F183489 ( Nop ) : new Remove $F50 ( toRemove ) ) ; \n\t} \n"}, {"code": "protected final void doUpdates ( final K key , final Function < $F60570 , $F60560 > mutate ) { \n\tapply ( new Update $F50 ( key , mutate ) ) ; \n\t} \n"}, {"code": "protected final void doUpdates ( final Map < K , Function < $F60570 , $F60560 > > mutators ) { \n\tapply ( $F384 ( mutators ) ? $F183489 ( Nop ) : new Update $F50 ( mutators ) ) ; \n\t} \n"}, {"code": "protected final void doValues ( final Map < K , $F60560 > entries ) { \n\tapply ( $F384 ( entries ) ? $F183489 ( Nop ) : new Values $F50 ( entries ) ) ; \n\t} \n"}, {"code": "public static final boolean stringIsBlank $F62952 ( string ) { \n\tif $F90672 ( string ) $F233 $F12039 ( stringLength , string ) for ( $F6610 ( i , stringLength ) ) { \n\t\tif ( $F145798 ( Character , string , i ) == false ) $F1668 } \n\t$F232 } \n"}, {"code": "public static final String arrayToString $F542724 ( array ) { \n\t$F102635 ( builder ) $F1212 ( builder , ARRAY_START ) if $F124033 ( array ) $F565 ( appendNonEmptyArrayToString , array , builder ) $F1212 ( builder , ARRAY_END ) $F1226 ( builder ) } \n"}, {"code": "public static String replaceStringInString $F430081 ( text , searchString , replacement ) { \n\tif ( $F164463 ( stringIsBlank , text , searchString ) || replacement == null ) $F356 ( text ) $F1987 ( start ) $F145457 ( end , text , searchString , start ) $F79095 ( end , INDEX_NOT_FOUND , text ) $F83123 ( replacedLength , searchString ) $F102635 ( builder ) while ( end != INDEX_NOT_FOUND ) { \n\t\t$F377178 ( builder , text , start , end ) . append ( replacement ) ; \n\t\tstart = end + replacedLength ; \n\t\t$F162225 ( end , text , searchString , start ) } \n\t$F377176 ( builder , text , start ) $F1226 ( builder ) } \n"}, {"code": "public static boolean isEqualCollection ( $F992 ( list1 ) , $F992 ( list2 ) ) { \n\t$F378086 ( Validate , list1 ) $F378086 ( Validate , list2 ) $F48974 ( result ) if $F89754 ( list1 , list2 ) { \n\t\tfor ( final String currentString : list1 ) { \n\t\t\tif $F19273 ( list2 , currentString ) $F107350 ( result ) } \n\t\t} \n\telse $F57412 ( result ) return result ; \n\t} \n"}, {"code": "public JettyBoot go $F2 { \n\t$F35513 ( info , port , contextPath ) $F31223 ( development , registerShutdownHook ) prepareServer ( ) ; \n\tfinal URI uri = startServer ( ) ; \n\tinfo ( $F179089 ( development ) + uri ) ; \n\tbrowseOnDesktopIfNeeds ( uri ) ; \n\treturn this ; \n\t} \n"}, {"code": "protected String getResourceBase $F2 { \n\tif ( useEmbeddedWebroot ) { \n\t\t$F250029 ( path , WEBROOT_RESOURCE_PATH ) final URL webroot = $F48063 ( getClass , path ) ; \n\t\t$F4980 ( webroot , path ) try { \n\t\t\treturn $F5740 ( webroot ) . toASCIIString ( ) ; \n\t\t\t} \n\t\tcatch ( URISyntaxException e ) $F5152 ( webroot , e ) } \n\telse { \n\t\treturn $F431135 ( deriveWebappDir ) ; \n\t\t} \n\t} \n"}, {"code": "protected Configuration [ ] prepareConfigurations $F2 { \n\tfinal List $F38109 configList = new ArrayList $F38109 $F2 ; \n\tsetupConfigList ( configList ) ; \n\treturn configList . toArray ( new Configuration $F31920 ( configList ) ) ; \n\t} \n"}, {"code": "protected void setupClasspathJarResourceIfNeeds ( WebAppContext context ) { \n\tif ( isWarableWorld ( ) || ! isValidMetaInfConfiguration ( ) ) $F255 final $F5033 classpathList = extractJarClassspathList ( ) ; \n\tfor ( String classpath : classpathList ) { \n\t\t$F138322 ( jarPath , convertClasspathToJarPath , classpath ) final URL url ; \n\t\ttry $F880504 ( url , jarPath ) catch ( MalformedURLException e ) $F5152 ( jarPath , e ) $F30922 ( context ) . addContainerResource ( new JarResource ( url ) $F1645 ) ; \n\t\t} \n\t} \n"}, {"code": "public void await $F2 { \n\t$F14196 ( server ) try $F9120 ( server ) $F3085 ( e ) } \n"}, {"code": "protected void browseOnDesktopIfNeeds $F334154 ( uri ) { \n\t$F115853 ( browseOnDesktop ) final java . awt . Desktop desktop = java . awt . Desktop . getDesktop ( ) ; \n\ttry { \n\t\tdesktop . browse ( uri ) ; \n\t\t} \n\tcatch ( IOException e ) $F5152 ( uri , e ) } \n"}, {"code": "public void close $F2 { \n\t$F14196 ( server ) try $F187719 ( server ) $F3085 ( e ) finally { \n\t\ttry $F124069 ( server ) catch ( RuntimeException e ) $F3084 ( e ) } \n\t} \n"}, {"code": "$F1 public RestRepositories getRepositories ( Request request ) { \n\tRestRepositories repositories = new RestRepositories $F2 ; \n\tfor ( String repositoryName : getRepositoryManager ( ) . getJcrRepositoryNames ( ) ) $F5704 ( addRepository , request , repositories , repositoryName ) return repositories ; \n\t} \n"}, {"code": "private static void init ( ClassLoader classLoader , SecurityManager securityManager , $F8237 ( securedClasses ) ) { \n\t$F92938 ( classLoader ) $F92938 ( securityManager ) $F92938 ( securedClasses ) $F1357 ( Security , securityManager ) $F552850 ( cp , ClassPool ) for ( String securedClass : securedClasses ) $F5704 ( secure , classLoader , cp , securedClass ) } \n"}, {"code": "$F1 public NetworkInfo isAvailable $F2 { \n\tif ( ! PermissionUtils . isGranted ( context , Manifest . permission . ACCESS_NETWORK_STATE ) ) { \n\t\tthrow new IckleBotRuntimeException ( new PermissionDeniedException ( Manifest . permission . ACCESS_NETWORK_STATE , Profile . NETWORK ) ) ; \n\t\t} \n\tNetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo ( ) ; \n\treturn $F112 ( networkInfo ) ? null : $F263603 ( networkInfo ) ? networkInfo : null ; \n\t} \n"}, {"code": "$F1 public boolean isConnecting $F2 { \n\tNetworkInfo networkInfo = isAvailable ( ) ; \n\treturn $F112 ( networkInfo ) ? false : ( $F1112546 ( networkInfo ) ( State . CONNECTING ) ) ? true : false ; \n\t} \n"}, {"code": "$F1 public boolean isConnected $F2 { \n\tNetworkInfo networkInfo = isAvailable ( ) ; \n\treturn $F112 ( networkInfo ) ? false : ( $F1112546 ( networkInfo ) ( State . CONNECTED ) ) ? true : false ; \n\t} \n"}, {"code": "$F1 public boolean isSuspended $F2 { \n\tNetworkInfo networkInfo = isAvailable ( ) ; \n\treturn $F112 ( networkInfo ) ? false : ( $F1112546 ( networkInfo ) ( State . SUSPENDED ) ) ? true : false ; \n\t} \n"}, {"code": "$F1 public boolean isDisconnecting $F2 { \n\tNetworkInfo networkInfo = isAvailable ( ) ; \n\treturn $F112 ( networkInfo ) ? false : ( $F1112546 ( networkInfo ) ( State . DISCONNECTING ) ) ? true : false ; \n\t} \n"}, {"code": "$F1 public boolean isDisconnected $F2 { \n\tNetworkInfo networkInfo = isAvailable ( ) ; \n\treturn $F112 ( networkInfo ) ? false : ( $F1112546 ( networkInfo ) ( State . DISCONNECTED ) ) ? true : false ; \n\t} \n"}, {"code": "AllocationStats minus ( AllocationStats baseline ) { \n\tfor ( Entry < Allocation > entry : baseline . allocations . entrySet ( ) ) { \n\t\tint superCount = allocations . count ( $F61274 ( entry ) ) ; \n\t\tif ( superCount < $F61277 ( entry ) ) { \n\t\t\tthrow new IllegalStateException ( String . format ( $F3903 , $F61277 ( entry ) , $F61274 ( entry ) , superCount ) ) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\treturn new AllocationStats ( allocationCount - baseline . allocationCount , allocationSize - baseline . allocationSize , reps - baseline . reps , Multisets . difference ( allocations , baseline . allocations ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tthrow new IllegalStateException ( String . format ( $F3903 , baseline , this ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "ImmutableList $F2357373 toMeasurements $F2 { \n\tfor ( Entry < Allocation > entry : $F708 ( allocations ) ) { \n\t\tdouble allocsPerRep = ( ( double ) $F61277 ( entry ) ) / reps ; \n\t\t$F90311 ( System ) ( STRING00 , allocsPerRep , $F61274 ( entry ) ) ; \n\t\t} \n\treturn ImmutableList . of ( new Measurement . Builder $F2 . value ( $F707749 ( Value , allocationCount ) ) . description ( STRING00 ) . weight ( reps ) . build ( ) , new Measurement . Builder $F2 . value ( $F707749 ( Value , allocationSize ) ) . weight ( reps ) . description ( STRING00 ) . build ( ) ) ; \n\t} \n"}, {"code": "public E asymms $F191751 ( leftPos , rightPos ) { \n\treturn asymm ( leftPos , rightPos ) . result ( ) ; \n\t} \n"}, {"code": "public AsymmMultiPos < E , L , R > asymm $F191751 ( leftPos , rightPos ) { \n\tthis . asymmLR = $F63086 ( checkNotNull ( leftPos ) ) . append ( Strs . WHITE_SPACE ) . append ( checkNotNull ( rightPos ) ) . toString ( ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static void registerMixinType ( Session session , String mixin ) throws RepositoryException { \n\tNodeTypeManager nodeTypeManager = $F587883 ( session ) . getNodeTypeManager ( ) ; \n\tif ( ! nodeTypeManager . hasNodeType ( mixin ) ) { \n\t\tNodeTypeTemplate nodeTypeTemplate = nodeTypeManager . createNodeTypeTemplate ( ) ; \n\t\tnodeTypeTemplate . setMixin ( true ) ; \n\t\t$F13102 ( nodeTypeTemplate , mixin ) NodeTypeDefinition [ ] nodeTypes = new NodeTypeDefinition $F21535 ( nodeTypeTemplate ) ; \n\t\tnodeTypeManager . registerNodeTypes ( nodeTypes , true ) ; \n\t\t} \n\t} \n"}, {"code": "public static void registerAndAddMixinType ( Session session , Node node , String mixin ) throws RepositoryException { \n\t$F564 ( registerMixinType , session , mixin ) if ( ! Arrays . asList ( node . getMixinNodeTypes ( ) ) . contains ( mixin ) ) { \n\t\tnode . addMixin ( mixin ) ; \n\t\t} \n\t} \n"}, {"code": "private static Object __applyObject $F28114 ( defaultObj , custom ) { \n\t$F99796 ( custom ) return defaultObj ; \n\t} \n"}, {"code": "public static FileItem fromStream ( DataInputStream dataInputStream ) throws IOException { \n\t$F160644 ( binaryVersion , dataInputStream ) if $F9869 ( binaryVersion ) { \n\t\t$F99079 ( name , dataInputStream ) $F187436 ( length , dataInputStream ) $F187436 ( lastModified , dataInputStream ) $F99079 ( blobId , dataInputStream ) return new FileItem $F3192 ( name , blobId , length , lastModified ) ; \n\t\t} \n\telse $F504 ( binaryVersion ) } \n"}, {"code": "void startTransactionalBranch ( Xid xid ) { \n\tcleanupTransactionBinding ( ) ; \n\tfinal TransactionBindingType transactionBindingType = this . transactionBinding . getTransactionBindingType ( ) ; \n\tif ( transactionBindingType == TransactionBindingType . LocalTransaction ) { \n\t\tLocalTransactionProxy $F404 localTransactionProxy = this . toLocalTransaction ( ) ; \n\t\tValidate . isTrue ( ! localTransactionProxy . hasTransactionalData ( ) , STRING00 ) ; \n\t\tif ( localTransactionProxy . hasTransactionalData ( ) ) $F10873 XATransactionalBranch $F404 xaTransactionalBranch = this . xaTransactionalBranchDictionary . findTransactionalBranch ( xid ) ; \n\t\tif $F112 ( xaTransactionalBranch ) { \n\t\t\tIPhynixxManagedConnection $F404 $F380800 ( connection , localTransactionProxy ) ; \n\t\t\tif ( connection == null || $F165591 ( connection ) ) { \n\t\t\t\tconnection = this . createPhysicalConnection ( ) ; \n\t\t\t\t} \n\t\t\txaTransactionalBranch = this . xaTransactionalBranchDictionary . instanciateTransactionalBranch ( xid , connection ) ; \n\t\t\t} \n\t\telse $F2453 ( localTransactionProxy ) this . transactionBinding . release ( ) ; \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaTransactionalBranchDictionary . findTransactionalBranch ( xid ) ; \n\t\tValidate . isTrue ( $F27329 ( xaTransactionalBranch ) ) ; \n\t\tthis . transactionBinding . activateGlobalTransaction ( new GlobalTransactionProxy $F404 ( transactionalBranch ) ) ; \n\t\t} \n\telse if ( transactionBindingType == TransactionBindingType . NoTransaction ) { \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaTransactionalBranchDictionary . findTransactionalBranch ( xid ) ; \n\t\tif $F112 ( transactionalBranch ) { \n\t\t\tIPhynixxManagedConnection $F404 physicalConnection = this . createPhysicalConnection ( ) ; \n\t\t\ttransactionalBranch = this . xaTransactionalBranchDictionary . instanciateTransactionalBranch ( xid , physicalConnection ) ; \n\t\t\tthis . xaTransactionalBranchDictionary . instanciateTransactionalBranch ( xid , physicalConnection ) ; \n\t\t\t} \n\t\tthis . transactionBinding . activateGlobalTransaction ( new GlobalTransactionProxy $F404 ( transactionalBranch ) ) ; \n\t\t} \n\telse if ( transactionBindingType == TransactionBindingType . GlobalTransaction ) { \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaTransactionalBranchDictionary . findTransactionalBranch ( xid ) ; \n\t\tif $F112 ( transactionalBranch ) { \n\t\t\tIPhynixxManagedConnection $F404 physicalConnection = this . createPhysicalConnection ( ) ; \n\t\t\ttransactionalBranch = this . xaTransactionalBranchDictionary . instanciateTransactionalBranch ( xid , physicalConnection ) ; \n\t\t\tthis . xaTransactionalBranchDictionary . instanciateTransactionalBranch ( xid , physicalConnection ) ; \n\t\t\t} \n\t\tGlobalTransactionProxy $F404 previousGlobalTransactionProxy = this . transactionBinding . getEnlistedGlobalTransaction ( ) ; \n\t\tif $F268 ( previousGlobalTransactionProxy ) { \n\t\t\tXid previousXid = previousGlobalTransactionProxy . getXid ( ) ; \n\t\t\t$F1975 currentTransactionId = previousXid . getGlobalTransactionId ( ) ; \n\t\t\tif ( ! Arrays . equals ( xid . getGlobalTransactionId ( ) , currentTransactionId ) ) $F16517 ( LOG ) $F118194 ( previousGlobalTransactionProxy ) } \n\t\tthis . transactionBinding . activateGlobalTransaction ( new GlobalTransactionProxy $F404 ( transactionalBranch ) ) ; \n\t\t} \n\t} \n"}, {"code": "void closeTransactionalBranch ( Xid xid ) { \n\tif ( this . transactionBinding . getTransactionBindingType ( ) != TransactionBindingType . GlobalTransaction ) $F10873 GlobalTransactionProxy $F404 globalTransactionProxy = this . transactionBinding . getEnlistedGlobalTransaction ( ) ; \n\t$F1109 ( globalTransactionProxy ) delistTransaction ( ) ; \n\t} \n"}, {"code": "private void enlistTransaction $F2 { \n\tthis . cleanupTransactionBinding ( ) ; \n\tTransactionBindingType transactionBindingType = this . transactionBinding . getTransactionBindingType ( ) ; \n\tif ( this . isInGlobalTransaction ( ) && transactionBindingType != TransactionBindingType . GlobalTransaction ) { \n\t\ttry { \n\t\t\tTransaction ntx = this . transactionManager . getTransaction ( ) ; \n\t\t\tif $F119064 ( enlisted , ntx ) { \n\t\t\t\tthis . enlisted = true ; \n\t\t\t\tthis . enlisted = ntx . enlistResource ( this . xaResource ) ; \n\t\t\t\tif ( ! enlisted ) $F435040 ( LOG , xaResource ) else $F1645 } \n\t\t\telse $F155966 ( LOG ) } \n\t\tcatch ( RollbackException n ) { \n\t\t\tLOG . error ( $F39054 ( n ) ) ; \n\t\t\t} \n\t\tcatch ( SystemException n ) { \n\t\t\tLOG . error ( $F320 ( n ) + $F450167 ( ExceptionUtils , n ) ) ; \n\t\t\tthrow new DelegatedRuntimeException ( n ) ; \n\t\t\t} \n\t\t} \n\telse if ( transactionBindingType == TransactionBindingType . NoTransaction ) { \n\t\tthis . transactionBinding . activateLocalTransaction ( new LocalTransactionProxy $F404 ( this . managedConnectionFactory . getManagedConnection ( ) ) ) ; \n\t\t} \n\telse { \n\t\tif ( this . isInGlobalTransaction ( ) && transactionBindingType == TransactionBindingType . GlobalTransaction ) $F1645 else if ( ! this . isInGlobalTransaction ( ) && transactionBindingType == TransactionBindingType . LocalTransaction ) $F1645 } \n\t} \n"}, {"code": "$F1 $F762 protected void onCreate ( Bundle savedInstanceState ) { \n\t$F568580 ( super , savedInstanceState ) addPreferencesFromResource ( R . xml . prefs ) ; \n\tclp = ( ColorListPreference ) getPreferenceScreen ( ) . findPreference ( STRING00 ) ; \n\tapply ( ) ; \n\t} \n"}, {"code": "public void run ( IndentedWriter writer , FieldManager fieldManager , String uiOwner ) throws UnableToCompleteException { \n\tfor ( JMethod method : ownerClass . getUiHandlers ( ) ) { \n\t\t$F2250 ( boundMethod , method ) if ( $F1949635 ( method ) ) { \n\t\t\tlogger . die ( STRING00 , boundMethod ) ; \n\t\t\t} \n\t\tJParameter [ ] $F103071 ( parameters , method ) ; \n\t\tif $F15480 ( parameters ) { \n\t\t\tlogger . die ( STRING00 , boundMethod ) ; \n\t\t\t} \n\t\tJClassType eventType = parameters [ INT00 ] . getType ( ) . isClass ( ) ; \n\t\tif $F112 ( eventType ) { \n\t\t\tlogger . die ( STRING00 ) ; \n\t\t\t} \n\t\tJClassType handlerType = getHandlerForEvent ( eventType ) ; \n\t\tif $F112 ( handlerType ) { \n\t\t\tlogger . die ( $F4308 ( eventType ) ) ; \n\t\t\t} \n\t\tString handlerVarName = HANDLER_BASE_NAME + ( ++ varCounter ) ; \n\t\t$F39322 ( writeHandler , writer , uiOwner , handlerVarName , handlerType , eventType , boundMethod ) UiHandler annotation = method . getAnnotation ( UiHandler . class ) ; \n\t\tfor ( String objectName : $F11145 ( annotation ) ) { \n\t\t\tFieldWriter $F623267 ( fieldWriter , fieldManager , objectName ) ; \n\t\t\tif $F112 ( fieldWriter ) { \n\t\t\t\tlogger . die ( $F7851 , boundMethod , objectName ) ; \n\t\t\t\t} \n\t\t\tJMethod addHandlerMethodType = getAddHandlerMethodForObject ( fieldWriter . getInstantiableType ( ) , handlerType ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( $F603179 ( Type ) ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( Type . INFO , STRING00 + eventType ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( Type . INFO , STRING00 + oracle . findType ( DomEvent . class . getCanonicalName ( ) ) ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( Type . INFO , STRING00 + oracle . findType ( GwtEvent . class . getCanonicalName ( ) ) ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( Type . INFO , STRING00 + eventType . isAssignableTo ( oracle . findType ( DomEvent . class . getCanonicalName ( ) ) ) ) ; \n\t\t\tlogger . getTreeLogger ( ) . log ( Type . INFO , STRING00 + eventType . isAssignableTo ( oracle . findType ( GwtEvent . class . getCanonicalName ( ) ) ) ) ; \n\t\t\tif $F112 ( addHandlerMethodType ) { \n\t\t\t\tif ( eventType . isAssignableTo ( oracle . findType ( DomEvent . class . getCanonicalName ( ) ) ) ) { \n\t\t\t\t\twriteAddHandler ( writer , fieldManager , handlerVarName + STRING00 + $F587609 ( eventType ) + STRING00 + $F507 ( eventType ) + STRING00 , STRING00 , objectName ) ; \n\t\t\t\t\tlogger . getTreeLogger ( ) . log ( $F603179 ( Type ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\twriteAddHandler ( writer , fieldManager , handlerVarName + STRING00 + $F587609 ( eventType ) + STRING00 + $F507 ( eventType ) + STRING00 , STRING00 , objectName ) ; \n\t\t\t\t\tlogger . getTreeLogger ( ) . log ( $F603179 ( Type ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\twriteAddHandler ( writer , fieldManager , handlerVarName , $F507 ( addHandlerMethodType ) , objectName ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected void writeHandler ( IndentedWriter writer , String uiOwner , String handlerVarName , JClassType handlerType , JClassType eventType , String boundMethod ) throws UnableToCompleteException { \n\tJMethod [ ] $F391477 ( methods , handlerType ) ; \n\tif $F15480 ( methods ) { \n\t\tlogger . die ( $F4308 ( handlerType ) ) ; \n\t\t} \n\tJParameter [ ] parameters = methods [ INT00 ] . getParameters ( ) ; \n\tif ( $F15479 ( parameters ) || parameters [ INT00 ] . getType ( ) != eventType ) { \n\t\tlogger . die ( STRING00 , $F171604 ( methods ) , $F507 ( eventType ) ) ; \n\t\t} \n\t$F5307367 ( writer ) ; \n\twriter . write ( STRING00 , handlerType . getParameterizedQualifiedSourceName ( ) , handlerVarName ) ; \n\t$F1809590 ( writer ) writer . write ( STRING00 , $F171604 ( methods ) , eventType . getParameterizedQualifiedSourceName ( ) ) ; \n\t$F1809590 ( writer ) writer . write ( STRING00 , uiOwner , boundMethod ) ; \n\t$F7372757 ( writer ) $F36360 ( writer ) $F7372757 ( writer ) $F36360 ( writer ) } \n"}, {"code": "void writeAddHandler ( IndentedWriter writer , FieldManager fieldManager , String handlerVarName , String addHandlerMethodName , String objectName ) { \n\tif ( useLazyWidgetBuilders ) { \n\t\t$F3457087 ( fieldManager , objectName ) . addStatement ( $F16885 ( objectName , addHandlerMethodName , handlerVarName ) ) ; \n\t\t} \n\telse { \n\t\twriter . write ( $F16885 ( objectName , addHandlerMethodName , handlerVarName ) ) ; \n\t\t} \n\t} \n"}, {"code": "private JMethod getAddHandlerMethodForObject ( JClassType objectType , JClassType handlerType ) throws UnableToCompleteException { \n\tJMethod handlerMethod = null ; \n\tJMethod alternativeHandlerMethod = null ; \n\tfor ( JMethod method : objectType . getInheritableMethods ( ) ) { \n\t\tif ( $F20027 ( method ) == handlerRegistrationJClass ) { \n\t\t\tJParameter [ ] $F103071 ( parameters , method ) ; \n\t\t\tif $F15480 ( parameters ) $F42718 JType subjectHandler = parameters [ INT00 ] . getType ( ) ; \n\t\t\tif $F8962 ( handlerType , subjectHandler ) { \n\t\t\t\tif $F268 ( handlerMethod ) { \n\t\t\t\t\tlogger . die ( $F7851 , method , handlerMethod ) ; \n\t\t\t\t\t} \n\t\t\t\thandlerMethod = method ; \n\t\t\t\t} \n\t\t\tJParameterizedType ptype = handlerType . isParameterized ( ) ; \n\t\t\tif $F268 ( ptype ) { \n\t\t\t\tif ( subjectHandler . equals ( $F71280 ( ptype ) ) ) $F1619 ( alternativeHandlerMethod , method ) } \n\t\t\t} \n\t\t} \n\treturn $F10347 ( handlerMethod , alternativeHandlerMethod ) ; \n\t} \n"}, {"code": "private JClassType getHandlerForEvent ( JClassType eventType ) { \n\t$F2201 ( eventType ) JMethod method = eventType . findMethod ( STRING00 , new JType $F1478 ) ; \n\tif $F112 ( method ) { \n\t\tlogger . warn ( $F4308 ( eventType ) ) ; \n\t\t$F724 } \n\tJType $F20049 ( returnType , method ) ; \n\tif $F112 ( returnType ) { \n\t\tlogger . warn ( $F4308 ( eventType ) ) ; \n\t\t$F724 } \n\tJParameterizedType $F9005 ( isParameterized , returnType ) ; \n\tif $F112 ( isParameterized ) { \n\t\tlogger . warn ( $F4308 ( eventType ) ) ; \n\t\t$F724 } \n\tJClassType [ ] argTypes = $F1473008 ( isParameterized ) ; \n\tif ( $F15480 ( argTypes ) && ! argTypes [ INT00 ] . isAssignableTo ( eventHandlerJClass ) ) { \n\t\tlogger . warn ( $F4308 ( eventType ) ) ; \n\t\t$F724 } \n\t$F23691 ( argTypes ) } \n"}, {"code": "private static CloudErrorType toCloudErrorType ( String code ) { \n\tif $F25224 ( code ) { \n\t\treturn CloudErrorType . THROTTLING ; \n\t\t} \n\telse if $F25224 ( code ) { \n\t\treturn CloudErrorType . QUOTA ; \n\t\t} \n\telse if $F25224 ( code ) { \n\t\treturn CloudErrorType . AUTHENTICATION ; \n\t\t} \n\telse { \n\t\treturn CloudErrorType . GENERAL ; \n\t\t} \n\t} \n"}, {"code": "public static Document getEventDocFromUrl ( String url ) throws TVRageException { \n\tDocument doc ; \n\t$F99950 ( in ) try { \n\t\tin = new ByteArrayInputStream $F540 ( requestWebContent , url ) ; \n\t\t$F117558 ( dbf , DocumentBuilderFactory ) $F356672 ( db , dbf ) $F137427 ( doc , db , in ) $F356703 ( doc ) . normalize ( ) ; \n\t\treturn doc ; \n\t\t} \n\tcatch ( ParserConfigurationException | SAXException | IOException ex ) { \n\t\tthrow new TVRageException ( ApiExceptionType . MAPPING_FAILED , UNABLE_TO_PARSE , url , ex ) ; \n\t\t} \n\tfinally { \n\t\ttry $F116931 ( in ) catch ( IOException ex ) $F442640 ( LOG , ex ) } \n\t} \n"}, {"code": "private static $F1975 requestWebContent ( String url ) throws TVRageException { \n\ttry { \n\t\t$F5937 ( httpGet , url ) $F604924 ( httpGet ) final DigestedResponse response = DigestedResponseReader . requestContent ( httpClient , httpGet , CHARSET ) ; \n\t\tif ( $F24713 ( response ) >= INT00 ) { \n\t\t\tthrow new TVRageException ( ApiExceptionType . HTTP_503_ERROR , url ) ; \n\t\t\t} \n\t\telse if ( $F24713 ( response ) >= INT00 ) { \n\t\t\tthrow new TVRageException ( ApiExceptionType . HTTP_404_ERROR , url ) ; \n\t\t\t} \n\t\treturn $F6001 ( response ) . getBytes ( DEFAULT_CHARSET ) ; \n\t\t} \n\tcatch ( IOException ex ) { \n\t\tthrow new TVRageException ( ApiExceptionType . MAPPING_FAILED , UNABLE_TO_PARSE , url , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public File getRuntimeDir $F1693 ( applicationName , strict ) { \n\t$F16361 ( base , getRuntimeBase ) if $F112 ( base ) { \n\t\t$F106308 ( strict ) $F10411 ( base , getCacheBase ) } \n\t$F4282 ( createUserDir , base , applicationName ) } \n"}, {"code": "public static $F1372 Collection $F13776 addAll ( Collection $F13776 c , T ... elements ) { \n\t$F1675653 ( java ) . addAll ( c , elements ) ; \n\treturn c ; \n\t} \n"}, {"code": "public static Stream < MutableIntTuple > coordinates ( Order order , IntTuple arraySize ) { \n\tif ( order == Order . COLEXICOGRAPHICAL ) $F3342 ( colexicographicalCoordinates , arraySize ) $F867 ( lexicographicalCoordinates , arraySize ) } \n"}, {"code": "public static MutableIntTuple apply ( IntTuple t0 , IntTuple t1 , IntBinaryOperator op , MutableIntTuple result ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tresult = $F360706 ( IntTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F90858 ( operand0 , t0 , i ) $F90858 ( operand1 , t1 , i ) int r = op . applyAsInt ( operand0 , operand1 ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple apply ( IntTuple t0 , IntUnaryOperator op , MutableIntTuple result ) { \n\tresult = $F360706 ( IntTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F90858 ( operand0 , t0 , i ) int r = op . applyAsInt ( operand0 ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static int reduce ( IntTuple t0 , int identity , IntBinaryOperator op ) { \n\tint result = identity ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F90858 ( operand0 , t0 , i ) result = op . applyAsInt ( result , operand0 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableIntTuple inclusiveScan ( IntTuple t0 , IntBinaryOperator op , MutableIntTuple result ) { \n\tresult = $F360706 ( IntTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) if $F3730 ( n ) { \n\t\tresult . set ( INT00 , $F3416 ( t0 ) ) ; \n\t\tfor ( $F6610 ( i , n ) ) { \n\t\t\tint $F106718 ( operand0 , result , i ) ; \n\t\t\t$F90858 ( operand1 , t0 , i ) int r = op . applyAsInt ( operand0 , operand1 ) ; \n\t\t\t$F52836 ( result , i , r ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 protected Object onInitiate ( ProcessorChainLink < Object , ResponseProcessorException > root , Object ... args ) { \n\treturn root . getProcessor ( ) . run ( args ) ; \n\t} \n"}, {"code": "$F1 protected Object onTraverse ( Object result , ProcessorChainLink < Object , ResponseProcessorException > successor , Object ... args ) { \n\treturn successor . getProcessor ( ) . run ( args [ INT00 ] , args [ INT00 ] , result ) ; \n\t} \n"}, {"code": "public static Language defaultLanguage $F2 { \n\treturn $F1169 ( Config ) . as ( Language . class , Language . fromLocale ( $F112761 ( Locale ) ) ) ; \n\t} \n"}, {"code": "public static void exportTypeSystem ( $F410888 Resource output ) throws IOException { \n\ttry ( JsonWriter writer = new JsonWriter ( output ) ) { \n\t\twriter . beginDocument ( true ) ; \n\t\tfor ( $F46272 ( atv , AnnotationType ) ) { \n\t\t\t$F462743 ( writer ) writer . property ( $F550315 ( atv ) ) ; \n\t\t\twriter . property ( STRING00 , $F13768 ( atv ) ) ; \n\t\t\twriter . property ( STRING00 , $F1152 ( atv ) . name ( ) ) ; \n\t\t\twriter . property ( STRING00 , atv . getTagAttribute ( ) . name ( ) ) ; \n\t\t\t$F45695 ( writer ) } \n\t\tfor ( $F46272 ( atv , AttributeType ) ) { \n\t\t\t$F462743 ( writer ) writer . property ( $F550315 ( atv ) ) ; \n\t\t\twriter . property ( STRING00 , $F13768 ( atv ) ) ; \n\t\t\twriter . property ( STRING00 , $F219196 ( atv ) ) ; \n\t\t\t$F45695 ( writer ) } \n\t\tfor ( $F46272 ( rtv , RelationType ) ) { \n\t\t\t$F462743 ( writer ) writer . property ( $F550315 ( rtv ) ) ; \n\t\t\twriter . property ( STRING00 , $F13768 ( rtv ) ) ; \n\t\t\t$F45695 ( writer ) } \n\t\twriter . endDocument ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static String exportTypeSystem $F2 { \n\tResource out = new StringResource $F2 ; \n\ttry { \n\t\texportTypeSystem ( out ) ; \n\t\treturn out . readToString ( ) . trim ( ) ; \n\t\t} \n\t$F2328279 ( Throwables , e ) } \n"}, {"code": "public static $F21 initializeApplication $F22 ( args ) { \n\t$F25436 $F53490 ( elements , Thread ) ; \n\t$F19733 ( programName ) $F4728 ( packageName ) for ( int i = INT00 ; \n\ti < elements . length && StringUtils . isNullOrBlank ( programName ) ; \n\ti ++ ) { \n\t\tString className = $F53494 ( elements , i ) ; \n\t\tif ( ! className . equals ( Hermes . class . getName ( ) ) && $F12497 ( className ) ) { \n\t\t\t$F6990 ( idx , className ) $F19735 ( programName , className , idx ) $F83682 ( packageName , className , idx ) } \n\t\t} \n\t$F210 ( initializeApplication , programName , args , packageName ) } \n"}, {"code": "public static $F21 initializeApplication ( String programName , $F21 args , String ... packages ) { \n\t$F21 leftOver = $F189243 ( Config , programName , args ) ; \n\tConfig . loadPackageConfig ( HERMES_PACKAGE ) ; \n\tPreloader . preload ( ) ; \n\tif $F268 ( packages ) { \n\t\tfor ( String aPackage : packages ) { \n\t\t\tif $F42058 ( HERMES_PACKAGE , aPackage ) { \n\t\t\t\tConfig . loadPackageConfig ( aPackage ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn leftOver ; \n\t} \n"}, {"code": "public static $F1372 T loadModel ( $F410888 Object lock , $F410888 Language language , $F410888 String configProperty , $F410888 String modelName , $F410888 $F9735 modelGetter , $F410888 $F9747 modelSetter ) { \n\tif $F153163 ( modelGetter ) { \n\t\tsynchronized ( lock ) { \n\t\t\tif $F153163 ( modelGetter ) { \n\t\t\t\t$F208565 ( thrownException ) Resource $F2207 ( modelFile , findModel , language , configProperty , modelName ) ; \n\t\t\t\tif $F112 ( modelFile ) { \n\t\t\t\t\tthrownException = $F112545 ( modelName ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tT $F60638 ( model , modelFile ) ; \n\t\t\t\t\t\t$F14605 ( modelSetter , model ) return model ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F228174 ( thrownException , e ) } \n\t\t\t\t$F183970 ( Throwables , thrownException ) } \n\t\t\t} \n\t\t} \n\t$F2974 ( modelGetter ) } \n"}, {"code": "public static String getFilename $F739941 ( url ) throws UnsupportedEncodingException { \n\tif $F1064795 ( isJar , url , isEar ) { \n\t\tString fileName = URLDecoder . decode ( $F15424 ( url ) , STRING00 ) ; \n\t\t$F452996 ( fileName ) return fileName ; \n\t\t} \n\treturn URLDecoder . decode ( $F15424 ( url ) , STRING00 ) ; \n\t} \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tCollection < Injector . InjectionStrategy > $F101260 ( strategies , EXPLICIT_INJECTION_STRATEGIES ) ; \n\tfor ( InjectionStrategy strategy : strategies ) $F846886 ( strategy , config ) } \n"}, {"code": "$F1 public void handle ( String target , Request baseRequest , HttpServletRequest request , HttpServletResponse response ) throws IOException { \n\t$F8494 ( stackTrace , getStackTrace , baseRequest ) if $F268 ( stackTrace ) { \n\t\t$F481739 ( response ) ( getStackTrace ( baseRequest ) ) ; \n\t\t} \n\telse { \n\t\tsuper . handle ( target , baseRequest , request , response ) ; \n\t\t} \n\t} \n"}, {"code": "@ WebOperationMethod public $F96 upload ( $F2731 ( params ) , HttpServletRequest request , HttpServletResponse response ) throws Exception { \n\t$F96 result = Objects . newSOHashMap ( ) ; \n\t$F5601 ( database , params ) $F5601 ( collection , params ) $F5601 ( taskId , params ) if $F309775 ( Objects , collection ) collection = COLLECTION ; \n\tif $F55319 ( params ) { \n\t\t$F404335 ( id , UUID ) final FileParameter fp = ( FileParameter ) $F1169 ( params ) ; \n\t\twriteFile ( taskId , new Id $F2144 ( database , collection , id ) , fp ) ; \n\t\t$F6257 ( result , id ) } \n\telse { \n\t\t$F95965 ( ids ) $F1987 ( i ) while ( result . containsKey ( STRING00 + i ) ) { \n\t\t\t$F404335 ( id , UUID ) final FileParameter fp = ( FileParameter ) $F1954630 ( params , i ) ; \n\t\t\twriteFile ( taskId , new Id $F2144 ( database , collection , id ) , fp ) ; \n\t\t\t$F528 ( ids , id ) } \n\t\t$F6257 ( result , ids ) } \n\treturn result ; \n\t} \n"}, {"code": "@ WebOperationMethod public $F96 download ( $F2731 ( params ) , HttpServletRequest request , HttpServletResponse response ) throws Exception { \n\tString $F1714085 ( database , Objects , params ) ; \n\tString collection = Objects . get ( params , STRING00 , COLLECTION ) ; \n\tString $F1714085 ( id , Objects , params ) ; \n\tFileStorage . FileReadBean b = null ; \n\ttry { \n\t\tb = FileStorage . read ( new Id $F2144 ( database , collection , id ) ) ; \n\t\tresponse . setContentType ( $F1025475 ( b ) . getContentType ( ) ) ; \n\t\ttry { \n\t\t\tIOUtils . copy ( $F7587 ( b ) , $F120506 ( response ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F6096546 ( S1SystemError , e ) } \n\tcatch ( NotFoundException e ) { \n\t\t$F47925 ( response ) } \n\tfinally { \n\t\tFileStorage . closeAfterRead ( b ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "@ WebOperationMethod public $F96 downloadAsFile ( $F2731 ( params ) , HttpServletRequest request , HttpServletResponse response ) throws Exception { \n\tString $F1714085 ( database , Objects , params ) ; \n\tString collection = Objects . get ( params , STRING00 , COLLECTION ) ; \n\tString $F1714085 ( id , Objects , params ) ; \n\tString $F1714085 ( name , Objects , params ) ; \n\tFileStorage . FileReadBean b = null ; \n\ttry { \n\t\tb = FileStorage . read ( new Id $F2144 ( database , collection , id ) ) ; \n\t\tresponse . setContentType ( $F1025475 ( b ) . getContentType ( ) ) ; \n\t\tif $F309775 ( Objects , name ) { \n\t\t\tname = $F1025475 ( b ) . getName ( ) ; \n\t\t\tif $F1216 ( name ) $F243140 ( name ) if ( ! Objects . isNullOrEmpty ( $F1025475 ( b ) . getExt ( ) ) ) name += STRING00 + $F1025475 ( b ) . getExt ( ) ; \n\t\t\t} \n\t\tresponse . addHeader ( STRING00 , STRING00 + $F572448 ( URLEncoder , name ) ) ; \n\t\ttry { \n\t\t\tIOUtils . copy ( $F7587 ( b ) , $F120506 ( response ) ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) $F6096546 ( S1SystemError , e ) } \n\tcatch ( NotFoundException e ) { \n\t\t$F47925 ( response ) } \n\tfinally { \n\t\tFileStorage . closeAfterRead ( b ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public MultiPos $F182048 by $F80574 ( replacement ) { \n\treturn new MultiPos $F182048 ( $F43698 ( checkNotNull , replacement ) , null ) { \n\t\t$F1 protected String result $F2 { \n\t\t\treturn findingReplacing ( left , $F214148 . isInstance ( replacement ) ? STRING00 : STRING00 , pos , position ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public void add ( final S service ) { \n\t$F38495 ( service ) final K key = $F71134 ( this , service ) ; \n\t$F38495 ( key ) Collection $F4230 set = this . services . get ( key ) ; \n\t$F528 ( set , service ) if $F19799 ( set ) { \n\t\t$F5437231 ( this ) ( STRING00 , key , service ) ; \n\t\tthrow new ServiceConfigurationError $F61905 ( key , service ) ; \n\t\t} \n\tif ( this . log . isDebugEnabled ( ) ) { \n\t\t$F50418 ( this ) ( STRING00 , key ) ; \n\t\t} \n\t} \n"}, {"code": "private void setType ( Type type ) { \n\tsetSamplesPerSecond ( type . getSamplesPerSecond ( ) ) ; \n\tsetFramesPerSecond ( type . getFramesPerSecond ( ) ) ; \n\tsetUseSamples ( type . usesSamples ( ) ) ; \n\t} \n"}, {"code": "public void setCode ( String timecode ) throws Timecode . TimecodeException { \n\tclear ( ) ; \n\tsetHours ( $F52478 ( getToken , timecode ) ) ; \n\tsetMinutes ( $F52478 ( getToken , timecode ) ) ; \n\tsetSeconds ( $F52478 ( getToken , timecode ) ) ; \n\tsetFrames ( $F52478 ( getToken , timecode ) ) ; \n\tif $F560 ( useSamples ) { \n\t\ttry { \n\t\t\tsetSamples ( $F52478 ( getToken , timecode ) ) ; \n\t\t\t$F46535 ( setFramesPerSecond ) } \n\t\tcatch ( Timecode . TimecodeException ignored ) $F1645 } \n\tnormalize ( ) ; \n\t} \n"}, {"code": "$F762 public void normalize $F2 { \n\tint samplesPerFrame = ( int ) ( ( float ) getSamplesPerSecond ( ) / ( float ) getFramesPerSecond ( ) ) ; \n\tsetFrames ( getFrames ( ) + ( int ) ( getSamples ( ) * ( NUM00 / samplesPerFrame ) ) ) ; \n\tsetSamples ( getSamples ( ) % samplesPerFrame ) ; \n\tsetSeconds ( getSeconds ( ) + ( int ) ( ( float ) getFrames ( ) / getFramesPerSecond ( ) ) ) ; \n\tsetFrames ( ( int ) ( getFrames ( ) % getFramesPerSecond ( ) ) ) ; \n\twhile ( getSeconds ( ) >= INT00 ) { \n\t\tsetSeconds ( $F62155 ( getSeconds ) ) ; \n\t\tsetMinutes ( $F132887 ( getMinutes ) ) ; \n\t\t} \n\twhile ( getMinutes ( ) >= INT00 ) { \n\t\tsetMinutes ( $F62155 ( getMinutes ) ) ; \n\t\tsetHours ( $F132887 ( getHours ) ) ; \n\t\t} \n\t} \n"}, {"code": "public int toIntSeconds $F2 { \n\tint _minutes = $F95201 ( getHours ) ; \n\t$F153855 ( _minutes , getMinutes ) $F79894 ( _seconds , _minutes ) $F153855 ( _seconds , getSeconds ) return _seconds ; \n\t} \n"}, {"code": "public String toMMSS ( String delimiter ) { \n\t$F19733 ( outString ) int _minutes = $F95201 ( getHours ) ; \n\t$F153855 ( _minutes , getMinutes ) outString += ( _minutes < INT00 ? STRING00 + _minutes : STRING00 + _minutes ) + delimiter ; \n\toutString += ( $F214345 ( getSeconds ) ? $F3917 ( getSeconds ) : $F3917 ( getSeconds ) ) ; \n\treturn outString ; \n\t} \n"}, {"code": "public String toHHMMSS ( String delimiter ) { \n\t$F19733 ( outString ) outString += ( $F214345 ( getHours ) ? $F3917 ( getHours ) : $F3917 ( getHours ) ) + delimiter ; \n\toutString += ( $F214345 ( getMinutes ) ? $F3917 ( getMinutes ) : $F3917 ( getMinutes ) ) + delimiter ; \n\toutString += ( $F214345 ( getSeconds ) ? $F3917 ( getSeconds ) : $F3917 ( getSeconds ) ) ; \n\treturn outString ; \n\t} \n"}, {"code": "private int getToken $F11348 ( inString , index ) throws Timecode . TimecodeException { \n\t$F35682 ( inString ) $F19733 ( valid ) $F19733 ( token ) $F1987 ( count ) for ( $F8125 ( i , inString ) ) { \n\t\t$F14215 ( current , inString , i ) if ( $F3748 ( valid , current ) > $F3745 ) $F57826 ( token , current ) else { \n\t\t\tcount ++ ; \n\t\t\tif ( count > index ) $F332 token = STRING00 ; \n\t\t\t} \n\t\t} \n\tif ( count < index || $F14426 ( token ) ) throw new Timecode . TimecodeException $F61905 ( inString , index ) ; \n\ttry $F138237 ( Integer , token ) catch ( NumberFormatException ex ) { \n\t\tthrow new Timecode . TimecodeException $F24635 ( inString , token ) ; \n\t\t} \n\t} \n"}, {"code": "private static String __getExtension ( String path ) { \n\tfor ( $F70719 ( i , path ) ; \n\ti >= INT00 ; \n\ti -- ) { \n\t\tif $F124619 ( path , i ) $F157445 ( path , i ) } \n\t$F3956 } \n"}, {"code": "static String _getMimeType ( String uriOrPath ) { \n\tString $F509996 ( mime , MIME_MAP , __getExtension , uriOrPath ) ; \n\t$F1620 ( mime , DEFAULT_MIME ) return mime ; \n\t} \n"}, {"code": "private static long __parseLong $F45652 ( strLong , defaultValue ) { \n\ttry $F130962 ( Long , strLong ) catch ( NumberFormatException ex ) $F356 ( defaultValue ) } \n"}, {"code": "private static $F4357 __getRequestHeaderMap ( HttpServletRequest req ) { \n\t$F28528 ( reqHeaders ) $F5499 $F380549 ( headerNames , req ) ; \n\tif $F268 ( headerNames ) { \n\t\twhile $F5506 ( headerNames ) { \n\t\t\t$F5510 ( headerName , headerNames ) $F5499 headerValues = $F463368 ( req , headerName ) ; \n\t\t\tif $F268 ( headerValues ) { \n\t\t\t\t$F1200 ( headerValueBuilder ) $F1987 ( i ) while $F5506 ( headerValues ) { \n\t\t\t\t\t$F277317 ( i , headerValueBuilder ) headerValueBuilder . append ( $F5507 ( headerValues ) ) ; \n\t\t\t\t\ti ++ ; \n\t\t\t\t\t} \n\t\t\t\t$F5648 ( reqHeaders , headerName , headerValueBuilder ) } \n\t\t\telse $F45872 ( reqHeaders , headerName ) } \n\t\t} \n\treturn reqHeaders ; \n\t} \n"}, {"code": "private static void __flush ( InputStream is , OutputStream os , int bufferSize ) throws IOException { \n\t$F9435 ( buffer , bufferSize ) for ( int length = INT00 ; \n\t$F133739 ( length , is , buffer ) ; \n\t) $F34946 ( os , buffer , length ) } \n"}, {"code": "private static String __getStackTrace ( Throwable throwable ) { \n\t$F6364 ( stringWriter ) $F6367 ( throwable , stringWriter ) $F1226 ( stringWriter ) } \n"}, {"code": "private static void __serveStream ( HttpServletRequest request , HttpServletResponse response , InputStream is , String path , String mime , int bufferSize , long lastModified ) throws IOException { \n\t$F201483 ( reqHeaders , __getRequestHeaderMap , request ) $F477277 ( queryString , request ) $F24707 ( queryString ) String etag = Integer . toHexString ( ( path + lastModified + queryString + $F88338 ( is ) ) . hashCode ( ) ) ; \n\t$F57820 ( startFrom ) $F156021 ( endAt ) $F155962 ( range , reqHeaders ) if $F268 ( range ) { \n\t\tif $F5667 ( range ) { \n\t\t\t$F35357 ( range ) $F6110 ( minus , range ) if $F3730 ( minus ) { \n\t\t\t\tstartFrom = __parseLong ( $F2529 ( range , minus ) , INT00 ) ; \n\t\t\t\tendAt = __parseLong ( $F3735 ( range , minus ) , $F3745 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F604924 ( response ) long $F114462 ( fileLen , is ) ; \n\tif ( range != null && startFrom >= INT00 ) { \n\t\tif ( startFrom >= fileLen ) { \n\t\t\tresponse . setStatus ( HttpServletResponse . SC_REQUESTED_RANGE_NOT_SATISFIABLE ) ; \n\t\t\t$F40876 ( response ) response . addHeader ( $F6265 ( fileLen ) ) ; \n\t\t\t$F467558 ( response , etag ) } \n\t\telse { \n\t\t\tif $F2523 ( endAt ) $F68120 ( endAt , fileLen ) long $F107480 ( newLen , endAt , startFrom ) ; \n\t\t\t$F12287 ( newLen ) $F144864 ( dataLen , newLen ) $F354007 ( is , startFrom ) response . setStatus ( HttpServletResponse . SC_PARTIAL_CONTENT ) ; \n\t\t\t$F380642 ( response , mime ) __flush ( is , $F120506 ( response ) , bufferSize ) ; \n\t\t\tresponse . addHeader ( $F6265 ( dataLen ) ) ; \n\t\t\tresponse . addHeader ( STRING00 , $F9971 ( startFrom , endAt , fileLen ) ) ; \n\t\t\t$F467558 ( response , etag ) } \n\t\t} \n\telse { \n\t\tif ( etag . equals ( $F1169 ( reqHeaders ) ) ) { \n\t\t\tresponse . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; \n\t\t\t$F380642 ( response , mime ) } \n\t\telse { \n\t\t\t$F469036 ( response , HttpServletResponse ) $F380642 ( response , mime ) __flush ( is , $F120506 ( response ) , bufferSize ) ; \n\t\t\tresponse . addHeader ( $F6265 ( fileLen ) ) ; \n\t\t\t$F467558 ( response , etag ) } \n\t\t} \n\t} \n"}, {"code": "protected void onUncaughtException ( HttpServletRequest request , HttpServletResponse response , RuntimeException error ) throws IOException { \n\tresponse . setStatus ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; \n\t$F481739 ( response ) ( __getStackTrace ( error ) ) ; \n\t} \n"}, {"code": "public $F26212 E get $F52985 ( clss ) { \n\ttestControllerClass ( clss ) ; \n\tsynchronized ( controllers ) { \n\t\tfor ( Controller controller : controllers ) { \n\t\t\tif $F36515 ( clss , controller ) $F14241 ( clss , controller ) } \n\t\t} \n\t$F724 } \n"}, {"code": "public long getMillisecondsFromId ( final Object id , final long offset ) { \n\tif ( id instanceof String && $F158193 ( id ) >= MAX_LONG_ALPHANUMERIC_VALUE_LENGTH ) { \n\t\t$F83136 ( buffer , MAX_LONG_ALPHANUMERIC_VALUE_LENGTH ) System . arraycopy ( $F797 ( id ) . toCharArray ( ) , INT00 , buffer , INT00 , MAX_LONG_ALPHANUMERIC_VALUE_LENGTH ) ; \n\t\tfinal boolean overflow = buffer [ INT00 ] > STRING00 ; \n\t\tif ( overflow ) { \n\t\t\tbuffer [ INT00 ] -= INT00 ; \n\t\t\t} \n\t\tlong value = Long . parseLong ( $F2691 ( buffer ) , ALPHA_NUMERIC_CHARSET_SIZE ) ; \n\t\tif ( overflow ) { \n\t\t\tvalue -= Long . MAX_VALUE + INT00 ; \n\t\t\t} \n\t\treturn value + offset ; \n\t\t} \n\t$F9653 ( id ) } \n"}, {"code": "public static Date iso8601ToDate $F62952 ( dateString ) throws ParseException { \n\tfinal SimpleDateFormat $F37810 ( df ) ; \n\tfinal String str = StringUtils . substringBeforeLast ( dateString , STRING00 ) + StringUtils . substringAfterLast ( dateString , STRING00 ) ; \n\t$F47343 ( df , str ) } \n"}, {"code": "$F762 private ComponentGroup resolve ( $F987604 ( elements ) , Context context , $F3244 inputs ) { \n\tif $F6132 ( elements ) $F43977 ( ComponentGroup ) $F1026179 list = new ArrayList $F44760 $F2 ; \n\t$F1987 ( implicitArgCounter ) for ( Element element : elements ) { \n\t\tComponent out ; \n\t\tArguments arguments = Arguments . NONE ; \n\t\tif ( element instanceof TextComponent ) { \n\t\t\tout = ( Component ) element ; \n\t\t\t} \n\t\telse if ( element instanceof Macro ) { \n\t\t\tMacro macro = ( Macro ) element ; \n\t\t\tint argIndex ; \n\t\t\tboolean explicitIndex ; \n\t\t\tif ( macro instanceof Indexed ) { \n\t\t\t\targIndex = ( ( Indexed ) element ) . getIndex ( ) ; \n\t\t\t\texplicitIndex = true ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\targIndex = implicitArgCounter ; \n\t\t\t\texplicitIndex = false ; \n\t\t\t\t} \n\t\t\t$F4728 ( name ) if ( macro instanceof NamedMacro ) { \n\t\t\t\tNamedMacro named = ( NamedMacro ) macro ; \n\t\t\t\t$F105043 ( name , named ) $F2095 ( arguments , named ) ; \n\t\t\t\t} \n\t\t\tObject input = argIndex < inputs . length ? inputs [ argIndex ] : null ; \n\t\t\tMacroResolutionResult res = this . findFormatter ( name , input ) ; \n\t\t\tFormatter formatter = res . getFormatter ( ) ; \n\t\t\tboolean isConstant = formatter instanceof ConstantFormatter ; \n\t\t\tif ( $F4536950 ( res ) ) { \n\t\t\t\tout = new ResolvedMacro ( ( Formatter $F282 ) formatter , isConstant ? null : input , arguments ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tout = new UnresolvableMacro ( macro , input , $F204311 ( res ) ) ; \n\t\t\t\t} \n\t\t\tif $F140872 ( explicitIndex , isConstant ) $F16091 ( implicitArgCounter ) } \n\t\telse { \n\t\t\tthrow new IllegalStateException $F85647 ( element ) ; \n\t\t\t} \n\t\t$F10683 ( list , applyPostProcessors , out , context , arguments ) } \n\treturn new ComponentGroup ( list ) ; \n\t} \n"}, {"code": "private Component applyPostProcessors ( Component in , Context context , Arguments args ) { \n\tComponent out = in ; \n\tfor ( final PostProcessor postProcessor : postProcessors ) { \n\t\tout = $F374781 ( postProcessor , out , context , args ) ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "$F1 protected void doRead ( final Action $F131632 chunkAction ) { \n\tnew Thread ( new Runnable $F2 { \n\t\t$F1 public void run $F2 { \n\t\t\tchunkAction . on ( ByteBuffer . wrap ( $F181814 ( request ) . asRaw ( ) . asBytes ( ) ) ) ; \n\t\t\tendActions . fire ( ) ; \n\t\t\t} \n\t\t} \n\t) . start ( ) ; \n\t} \n"}, {"code": "public void setBindingToNegate ( final Binding binding ) { \n\t$F24434 ( binding ) if ( binding == this ) $F24432 _bindingToNegate = binding ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > mooreNeighborhoodIterable ( IntTuple center , int radius , Order order ) { \n\treturn mooreNeighborhoodIterable ( $F4512164 ( center , radius , order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > mooreNeighborhoodIterable ( IntTuple center , final int radius , IntTuple min , IntTuple max , Order order ) { \n\t$F292612 ( Objects , order ) if $F268 ( min ) { \n\t\tUtils . checkForEqualSize ( center , min ) ; \n\t\t} \n\tif $F268 ( max ) { \n\t\tUtils . checkForEqualSize ( center , max ) ; \n\t\t} \n\tfinal IntTuple $F233081 ( localCenter , IntTuples , center ) ; \n\tfinal IntTuple localMin = min == null ? null : $F106730 ( IntTuples , min ) ; \n\tfinal IntTuple localMax = max == null ? null : $F106730 ( IntTuples , max ) ; \n\t$F15270 $F15271 - > IntTupleNeighborhoodIterators . mooreNeighborhoodIterator ( $F274 ( localCenter , radius , localMin , localMax , order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > vonNeumannNeighborhoodIterable ( IntTuple center , final int radius ) { \n\tfinal IntTuple $F233081 ( localCenter , IntTuples , center ) ; \n\treturn new Iterable < MutableIntTuple > $F2 { \n\t\t$F1 public Iterator < MutableIntTuple > iterator $F2 { \n\t\t\treturn new VonNeumannIntTupleIterator ( localCenter , radius ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static void bind ( Class clazz , Class < ? extends Extension > implementation ) $F2726 ( bind , clazz , implementation ) "}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal $F3244 ops = values . ensureSameTypes ( ) ; \n\t\tvalues . push ( new Boolean ( $F1825 ( ops ) ( ops [ INT00 ] ) ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t$F254 } \n"}, {"code": "public static $F1372 Parser $F1372 conventionalParser $F7907 ( resultType ) throws NoSuchMethodException { \n\tif $F4870 ( resultType ) { \n\t\t$F762 Parser $F1372 identity = ( Parser $F1372 ) IDENTITY ; \n\t\treturn identity ; \n\t\t} \n\tfinal $F7905 $F57988 ( wrappedResultType , Primitives , resultType ) ; \n\tfor ( String methodName : CONVERSION_METHOD_NAMES ) { \n\t\ttry { \n\t\t\tfinal Method method = wrappedResultType . getDeclaredMethod ( $F11524 ( methodName ) ) ; \n\t\t\tif ( $F381185 ( Util , method ) && wrappedResultType . isAssignableFrom ( $F20027 ( method ) ) ) { \n\t\t\t\t$F10869 ( method ) return new InvokingParser $F1372 $F2 { \n\t\t\t\t\t$F1 protected T invoke ( String input ) throws Exception { \n\t\t\t\t\t\treturn wrappedResultType . cast ( $F56939 ( method , input ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception tryAgain ) $F1645 } \n\tfinal $F48912 constr = wrappedResultType . getDeclaredConstructor ( $F4868 ) ; \n\t$F10869 ( constr ) return new InvokingParser $F1372 $F2 { \n\t\t$F1 protected T invoke ( String input ) throws Exception { \n\t\t\treturn wrappedResultType . cast ( $F29330 ( constr , input ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public final void process ( $F109288 argq , T state ) { \n\t$F198730 ( args , argq ) $F39336 ( argq ) $F564 ( run , args , state ) } \n"}, {"code": "$F762 static public < T extends Execution > T getInstance $F7907 ( cls ) { \n\t$F45360 ( logger ) try { \n\t\tStack < Execution > stack ; \n\t\tsynchronized ( cache ) { \n\t\t\tif ( $F673700 ( cache , cls ) ) $F6894 ( cls ) else { \n\t\t\t\t$F145075 ( stack , cache , cls ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tsynchronized ( stack ) { \n\t\t\tif ( $F9162 ( stack ) ) $F6894 ( cls ) else { \n\t\t\t\treturn ( T ) $F22658 ( stack ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( InstantiationException e ) $F365141 ( e ) catch ( IllegalAccessException e ) $F365141 ( e ) finally $F155966 ( logger ) } \n"}, {"code": "public void close $F2 { \n\t$F45360 ( logger ) try { \n\t\tconnection = null ; \n\t\tdata = null ; \n\t\tsynchronized ( executions ) { \n\t\t\t$F528 ( executions , this ) $F212970 ( executions ) } \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "public $F110277 execute ( Transaction trans , $F2731 ( args ) ) throws PersistenceException { \n\t$F96 $F11466 ( r , executeEvent , trans , args ) ; \n\tif ( r instanceof HashMap ) { \n\t\treturn ( $F110277 ) r ; \n\t\t} \n\telse { \n\t\t$F671334 ( tmp ) $F7171 ( tmp , r ) return tmp ; \n\t\t} \n\t} \n"}, {"code": "$F96 executeEvent ( Transaction trans , $F2731 ( args ) , StringBuilder statementHolder ) throws PersistenceException { \n\t$F45360 ( logger ) state = STRING00 ; \n\ttry { \n\t\tif $F3507 ( logger ) { \n\t\t\tlogger . debug ( STRING00 + $F1151246 ( trans ) ) ; \n\t\t\t} \n\t\t$F380801 ( connection , trans ) data = args ; \n\t\ttry { \n\t\t\t$F5618 ( sql , loadStatement , connection , args ) $F57665 ( res ) $F194609 ( logger , sql ) if $F268 ( statementHolder ) $F8284 ( statementHolder , sql ) $F1754961 ( statement , connection , sql ) try { \n\t\t\t\t$F45360 ( logger ) $F14067 ( res , run , trans , args ) } \n\t\t\tfinally { \n\t\t\t\ttry $F114016 ( statement ) $F135087 } \n\t\t\t$F194609 ( logger , res ) if $F112 ( res ) $F2200 else if ( res instanceof HashMap ) { \n\t\t\t\treturn ( $F110277 ) res ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F671334 ( tmp ) $F7171 ( tmp , res ) return tmp ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( SQLException e ) { \n\t\t\tlogger . debug ( $F14745 ( e ) ) ; \n\t\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tstate = STRING00 ; \n\t\t$F45360 ( logger ) } \n\t} \n"}, {"code": "public static void checkForEqualSize ( Tuple t0 , Tuple t1 ) { \n\tif ( $F1976 ( t0 ) != $F1976 ( t1 ) ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t0 ) + STRING00 + $F1976 ( t1 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void checkForValidSubTupleIndices $F65855 ( parentSize , fromIndex , toIndex ) { \n\t$F411174 ( fromIndex ) if ( toIndex > parentSize ) $F61909 ( toIndex , parentSize ) if ( fromIndex > toIndex ) $F61909 ( fromIndex , toIndex ) } \n"}, {"code": "public static void checkForValidIndex $F12004 ( index , size ) { \n\tif $F2523 ( index ) { \n\t\tthrow new IndexOutOfBoundsException $F500 ( index ) ; \n\t\t} \n\tif ( index >= size ) { \n\t\tthrow new IndexOutOfBoundsException $F61905 ( index , size ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void save ( List < Counter > counters ) { \n\t$F88368 ( _logger ) if $F3415 ( counters ) $F254 $F235598 ( Collections , counters , c1 , c2 ) - $F6777 ( c1 ) . compareTo ( $F507 ( c2 ) ) ) ; \n\tfor ( Counter counter : counters ) { \n\t\t_logger . info ( $F6539 ( counterToString , counter ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected void ensureLongestLemma ( String lemma ) { \n\tthis . longestLemma = Math . max ( this . longestLemma , $F2495 ( lemma ) . length ) ; \n\t} \n"}, {"code": "protected String normalize ( CharSequence sequence ) { \n\tif $F560 ( isCaseSensitive ) $F33492 ( sequence ) return $F320744 ( sequence ) ; \n\t} \n"}, {"code": "protected List < HString > viterbi ( $F410888 HString source ) { \n\t$F26726 $F9005 ( tokens , source ) ; \n\t$F23123 ( n , tokens ) $F68266 ( maxLen , longestLemma ) LexiconMatch [ ] matches = new LexiconMatch $F93608 ( n ) ; \n\t$F79106 best = new double $F93608 ( n ) ; \n\t$F90287 ( best ) for ( $F88761 ( end , n ) ) { \n\t\tmatches [ end ] = new LexiconMatch ( $F85195 ( tokens , end ) , NUM00 , STRING00 , null ) ; \n\t\tfor ( $F58467 ( start , end ) ; \n\t\tstart >= INT00 && start >= ( end - maxLen ) ; \n\t\tstart -- ) { \n\t\t\tHString span = HString . union ( $F67814 ( tokens , start , end ) ) ; \n\t\t\tLexiconEntry entry = $F340806 ( getEntries , span ) . findFirst ( ) . orElse ( new LexiconEntry ( STRING00 , INT00 , null , null ) ) ; \n\t\t\tLexiconMatch score = new LexiconMatch ( span , entry . getProbability ( ) , $F3422508 ( entry ) , $F536177 ( entry ) ) ; \n\t\t\tdouble segmentScore = $F491739 ( score ) + best [ start ] ; \n\t\t\tif ( segmentScore >= best [ end ] ) { \n\t\t\t\t$F62115 ( best , end , segmentScore ) $F62115 ( matches , end , score ) } \n\t\t\t} \n\t\t} \n\tint i = n ; \n\tList < HString > $F35088 ( results ) ; \n\twhile $F3730 ( i ) { \n\t\tLexiconMatch match = matches [ i ] ; \n\t\tif ( $F491739 ( match ) > INT00 ) $F5220 ( results , createFragment , match ) i = i - matches [ i ] . getSpan ( ) . tokenLength ( ) ; \n\t\t} \n\t$F16921 ( Collections , results ) return results ; \n\t} \n"}, {"code": "protected List < HString > longestMatchFirst ( $F410888 HString source ) { \n\tList < HString > $F35088 ( results ) ; \n\t$F26726 $F9005 ( tokens , source ) ; \n\tPredicate < HString > prefix = ( this instanceof PrefixSearchable ) ? Cast . < PrefixSearchable > as ( this ) : : isPrefixMatch : h - $F634 ; \n\tfor ( int i = INT00 ; \n\t$F10913 ( i , tokens ) ; \n\t) { \n\t\tAnnotation $F199 ( token , tokens , i ) ; \n\t\tif $F65607 ( prefix , token ) { \n\t\t\tLexiconMatch bestMatch = null ; \n\t\t\tfor ( $F68134 ( j , i ) ; \n\t\t\t$F90526 ( j , tokens ) && j < ( i + INT00 + longestLemma ) ; \n\t\t\tj ++ ) { \n\t\t\t\tHString temp = HString . union ( $F67814 ( tokens , i , j ) ) ; \n\t\t\t\tList < LexiconEntry > entries = getEntries ( temp ) ; \n\t\t\t\tif $F4340 ( entries ) { \n\t\t\t\t\tbestMatch = new LexiconMatch ( $F41709 ( temp , entries ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( $F299509 ( prefix , temp ) ) $F333 } \n\t\t\tif $F268 ( bestMatch ) { \n\t\t\t\t$F5219 ( results , createFragment , bestMatch ) i += $F1139048 ( bestMatch ) . tokenLength ( ) ; \n\t\t\t\t} \n\t\t\telse $F16091 ( i ) } \n\t\telse if $F540 ( test , token ) { \n\t\t\tresults . add ( createFragment ( new LexiconMatch ( token , $F86720 ( getEntries , token ) ( INT00 ) ) ) ) ; \n\t\t\ti ++ ; \n\t\t\t} \n\t\telse $F16091 ( i ) } \n\treturn results ; \n\t} \n"}, {"code": "$F1 public void readFields ( DataInput in ) throws IOException { \n\ttry { \n\t\t$F215657 ( super , in ) $F39336 ( sortMap ) $F60627 ( entries , in ) for ( $F6610 ( i , entries ) ) { \n\t\t\tSortWritable sw = new SortWritable $F2 ; \n\t\t\t$F215657 ( sw , in ) sortMap . put ( sw . getSortPriority ( ) . get ( ) , sw ) ; \n\t\t\t} \n\t\t} \n\t$F11569 ( e ) } \n"}, {"code": "$F1 public void write ( DataOutput out ) throws IOException { \n\t$F21494 ( super , out ) $F61240 ( out , sortMap ) for ( Entry < Integer , SortWritable > entry : $F708 ( sortMap ) ) { \n\t\t$F269 ( entry ) . write ( out ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int compareTo ( Key key ) { \n\tText one = ( Text ) $F817900 ( this ) ; \n\tText other = ( Text ) $F817900 ( key ) ; \n\t$F43821 ( one , other ) } \n"}, {"code": "public static int inconsistentCompare ( MimeType o1 , MimeType o2 ) { \n\tif $F1115482 ( o1 , o2 ) $F17553 $F26095 ( o1 ) $F43807 ( o2 ) $F12232 ( wilchCharComparison , compareByWildCardCount , o1 , o2 ) if $F2015 ( wilchCharComparison ) { \n\t\tfloat q1 = getQ ( o1 ) ; \n\t\tfloat q2 = getQ ( o2 ) ; \n\t\tif ( q1 == q2 ) $F14249 ( fallBackCompare , o1 , o2 ) if ( q1 > q2 ) $F17551 else $F17553 } \n\telse $F356 ( wilchCharComparison ) } \n"}, {"code": "public static OutputArchive fromOutputStream ( OutputStream stream ) throws IOException { \n\tif ( stream instanceof ObjectOutput ) { \n\t\treturn new OutputArchive ( ( ObjectOutput ) stream ) ; \n\t\t} \n\telse { \n\t\treturn new OutputArchive ( $F40819 ( stream ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String resolveProperties ( String fullString , $F53145 ( bootstrapProperties ) ) { \n\treturn resolveProperties ( fullString , bootstrapProperties , $F2745 ( Collections ) ) ; \n\t} \n"}, {"code": "$F1 public String resolveProperties ( String fullString , $F53145 ( bootstrapProperties ) , $F53145 ( defaultProperties ) ) { \n\t$F130047 ( previousValues ) String output = fullString ; \n\t$F528 ( previousValues , output ) while $F38432 { \n\t\t$F21 foundTokens = StringUtils . substringsBetween ( $F3725 ( output ) ) ; \n\t\tif $F44788 ( foundTokens ) $F333 for ( String token : foundTokens ) { \n\t\t\t$F90687 ( token ) $F4728 ( property ) if $F34964 ( bootstrapProperties , token ) { \n\t\t\t\tproperty = $F142789 ( String , bootstrapProperties , token ) ; \n\t\t\t\t} \n\t\t\telse if ( $F531261 ( System ) ( token ) ) $F148587 ( property , System , token ) else if $F34964 ( defaultProperties , token ) { \n\t\t\t\tproperty = $F142789 ( String , defaultProperties , token ) ; \n\t\t\t\t} \n\t\t\t$F90687 ( property ) $F109298 ( token , property ) output = StringUtils . replace ( output , $F320 ( token ) , property ) ; \n\t\t\t} \n\t\tthis . logger . trace ( STRING00 , fullString , output ) ; \n\t\tif $F8674 ( previousValues , output ) { \n\t\t\tthis . logger . trace ( STRING00 , output ) ; \n\t\t\t$F332 } \n\t\t$F528 ( previousValues , output ) } \n\treturn output ; \n\t} \n"}, {"code": "$F1 public HttpResponse execute ( final InvocationContext context , final HttpRequestBase request ) { \n\tASYNC_EXECUTOR_SERVICE . execute ( new Runnable $F2 { \n\t\t$F1 public void run $F2 { \n\t\t\tAsyncRequestExecutor . super . execute ( context , request ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t$F724 } \n"}, {"code": "public static Comparator < DoubleTuple > byDistanceComparator ( DoubleTuple reference , final ToDoubleBiFunction < ? super DoubleTuple , ? super DoubleTuple > distanceFunction ) { \n\tfinal DoubleTuple $F233081 ( fReference , DoubleTuples , reference ) ; \n\treturn new Comparator < DoubleTuple > $F2 { \n\t\t$F1 public int compare ( DoubleTuple t0 , DoubleTuple t1 ) { \n\t\t\tdouble d0 = distanceFunction . applyAsDouble ( fReference , t0 ) ; \n\t\t\tdouble d1 = distanceFunction . applyAsDouble ( fReference , t1 ) ; \n\t\t\t$F18621 ( Double , d0 , d1 ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "public static double computeEuclidean ( DoubleTuple t0 , DoubleTuple t1 ) { \n\treturn Math . sqrt ( computeEuclideanSquared ( t0 , t1 ) ) ; \n\t} \n"}, {"code": "public static double computeEuclideanSquared ( DoubleTuple t0 , DoubleTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F91677 ( sum ) $F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F637610 ( value0 , t0 , i ) $F637610 ( value1 , t1 , i ) $F63674 ( d , value1 , value0 ) $F1056143 ( dd , d ) sum += dd ; \n\t\t} \n\treturn sum ; \n\t} \n"}, {"code": "private static double computeCosineSimilarity ( DoubleTuple t0 , DoubleTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tdouble $F40256 ( dot , DoubleTuples , t0 , t1 ) ; \n\t$F91971 ( epsilon ) if ( $F91759 ( Math , dot ) < epsilon ) $F17553 double tt0 = DoubleTuples . computeL2 ( t0 ) ; \n\tdouble tt1 = DoubleTuples . computeL2 ( t1 ) ; \n\t$F698881 ( tt , tt0 , tt1 ) double result = clamp ( dot / tt , $F89328 , FLOAT00 ) ; \n\treturn result ; \n\t} \n"}, {"code": "private static double clamp $F60978 ( d , min , max ) { \n\tif ( d < min ) $F356 ( min ) if ( d > max ) $F356 ( max ) return d ; \n\t} \n"}, {"code": "static double computeAngularSimilarity ( DoubleTuple t0 , DoubleTuple t1 ) { \n\treturn INT00 - Math . acos ( computeCosineSimilarity ( t0 , t1 ) ) / Math . PI ; \n\t} \n"}, {"code": "public Integer getKeySize $F2 { \n\tif $F112 ( keySize ) { \n\t\tswitch ( algorithm ) { \n\t\t\t$F574756 ( DES , keySize , DEFAULT_DES_KEY_SIZE ) $F2377 keySize = DEFAULT_AES_KEY_SIZE ; \n\t\t\t$F332 } \n\t\t} \n\treturn keySize ; \n\t} \n"}, {"code": "public void addMappings ( Mappings other ) { \n\t$F3653317 ( mappings ) . addAll ( $F3653317 ( other ) ) ; \n\t$F9985 ( mappings ) . addAll ( $F9985 ( other ) ) ; \n\t$F660273 ( mappings ) . addAll ( $F660273 ( other ) ) ; \n\t} \n"}, {"code": "private $F5033 getNamespaceMapping $F2614 ( clazz ) { \n\t$F1987 ( bestScore ) String bestNamespace = $F507 ( clazz ) . replaceAll ( $F1286 ) ; \n\tfor ( Namespace namespace : $F660273 ( mappings ) ) { \n\t\tif ( namespace . getJavaPackage ( ) . length ( ) > bestScore && $F507 ( clazz ) . matches ( namespace . getJavaPackage ( ) ) ) { \n\t\t\tbestScore = namespace . getJavaPackage ( ) . length ( ) ; \n\t\t\tbestNamespace = Utils . isNullOrEmpty ( $F231733 ( namespace ) ) ? $F19101 ( clazz ) : String . format ( STRING00 , $F231733 ( namespace ) , $F19101 ( clazz ) ) ; \n\t\t\t} \n\t\t} \n\treturn $F185708 ( Arrays , bestNamespace ) ; \n\t} \n"}, {"code": "public $F5033 getNamespace $F2614 ( clazz ) { \n\t$F184463 ( namespace ) if ( $F76865 ( clazz ) == null ) $F24579 ( namespace , getNamespaceMapping , clazz ) else { \n\t\t$F7909 ( enclosing , clazz ) Deque $F5020 stack = new ArrayDeque $F5020 $F2 ; \n\t\twhile ( $F76865 ( enclosing ) != null ) { \n\t\t\t$F528 ( stack , enclosing ) enclosing = $F76865 ( enclosing ) ; \n\t\t\t} \n\t\t$F10937 ( namespace , getNamespace , enclosing ) while $F386 ( stack ) { \n\t\t\tnamespace . add ( getCppName ( $F160190 ( stack ) ) ) ; \n\t\t\t} \n\t\t} \n\t$F12514 ( escapedNamespace , newArrayList ) $F94614 ( name , namespace , escapedNamespace , escapeName ) escapedNamespace . set ( $F40941 ( escapedNamespace ) , getCppName ( clazz ) ) ; \n\treturn escapedNamespace ; \n\t} \n"}, {"code": "public String getCppName $F2614 ( clazz ) { \n\tClassMapping $F199 ( mapping , mappingCache , clazz ) ; \n\tJava4Cpp annotation = clazz . getAnnotation ( Java4Cpp . class ) ; \n\tif $F268 ( mapping ) { \n\t\tif ( ! Utils . isNullOrEmpty ( mapping . getCppName ( ) ) ) { \n\t\t\treturn mapping . getCppName ( ) ; \n\t\t\t} \n\t\t} \n\tif ( annotation != null && ! Utils . isNullOrEmpty ( $F2941 ( annotation ) ) ) { \n\t\t$F374404 ( annotation ) } \n\treturn escapeName ( $F19101 ( clazz ) ) ; \n\t} \n"}, {"code": "public Object parse ( Reader in , ContainerFactory containerFactory ) throws $F287380 { \n\treset ( in ) ; \n\tLinkedList $F542270 ( statusStack ) ; \n\tLinkedList $F542270 ( valueStack ) ; \n\ttry { \n\t\tdo { \n\t\t\tnextToken ( ) ; \n\t\t\tswitch ( status ) { \n\t\t\t\tcase S_INIT : switch $F93832 ( token ) { \n\t\t\t\t\tcase Yytoken . TYPE_VALUE : status = S_IN_FINISHED_VALUE ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\tvalueStack . addFirst ( token . value ) ; \n\t\t\t\t\t$F332 case Yytoken . TYPE_LEFT_BRACE : status = S_IN_OBJECT ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\tvalueStack . addFirst ( createObjectContainer ( containerFactory ) ) ; \n\t\t\t\t\t$F332 case Yytoken . TYPE_LEFT_SQUARE : status = S_IN_ARRAY ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\tvalueStack . addFirst ( createArrayContainer ( containerFactory ) ) ; \n\t\t\t\t\t$F332 $F2377 status = S_IN_ERROR ; \n\t\t\t\t\t} \n\t\t\t\t$F332 case S_IN_FINISHED_VALUE : if ( token . type == Yytoken . TYPE_EOF ) return $F35091 ( valueStack ) ; \n\t\t\t\telse throw new ParseException ( getPosition ( ) , ParseException . ERROR_UNEXPECTED_TOKEN , token ) ; \n\t\t\t\tcase S_IN_OBJECT : switch $F93832 ( token ) { \n\t\t\t\t\tcase Yytoken . TYPE_COMMA : $F332 case Yytoken . TYPE_VALUE : if ( token . value instanceof String ) { \n\t\t\t\t\t\tString key = ( String ) token . value ; \n\t\t\t\t\t\t$F1183 ( valueStack , key ) status = S_PASSED_PAIR_KEY ; \n\t\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse $F1619 ( status , S_IN_ERROR ) $F332 case Yytoken . TYPE_RIGHT_BRACE : if $F4340 ( valueStack ) { \n\t\t\t\t\t\t$F35092 ( statusStack ) $F35092 ( valueStack ) $F10937 ( status , peekStatus , statusStack ) } \n\t\t\t\t\telse $F1619 ( status , S_IN_FINISHED_VALUE ) $F332 $F2377 status = S_IN_ERROR ; \n\t\t\t\t\t$F332 } \n\t\t\t\t$F332 case S_PASSED_PAIR_KEY : switch $F93832 ( token ) { \n\t\t\t\t\tcase Yytoken . TYPE_COLON : $F332 case Yytoken . TYPE_VALUE : $F35092 ( statusStack ) String key = ( String ) $F35091 ( valueStack ) ; \n\t\t\t\t\tMap parent = ( Map ) $F89557 ( valueStack ) ; \n\t\t\t\t\tparent . put ( key , token . value ) ; \n\t\t\t\t\t$F10937 ( status , peekStatus , statusStack ) $F332 case Yytoken . TYPE_LEFT_SQUARE : $F35092 ( statusStack ) key = ( String ) $F35091 ( valueStack ) ; \n\t\t\t\t\tparent = ( Map ) $F89557 ( valueStack ) ; \n\t\t\t\t\tList newArray = createArrayContainer ( containerFactory ) ; \n\t\t\t\t\t$F2725 ( parent , key , newArray ) status = S_IN_ARRAY ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\t$F1183 ( valueStack , newArray ) $F332 case Yytoken . TYPE_LEFT_BRACE : $F35092 ( statusStack ) key = ( String ) $F35091 ( valueStack ) ; \n\t\t\t\t\tparent = ( Map ) $F89557 ( valueStack ) ; \n\t\t\t\t\tMap newObject = createObjectContainer ( containerFactory ) ; \n\t\t\t\t\t$F2725 ( parent , key , newObject ) status = S_IN_OBJECT ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\t$F1183 ( valueStack , newObject ) $F332 $F2377 status = S_IN_ERROR ; \n\t\t\t\t\t} \n\t\t\t\t$F332 case S_IN_ARRAY : switch $F93832 ( token ) { \n\t\t\t\t\tcase Yytoken . TYPE_COMMA : $F332 case Yytoken . TYPE_VALUE : List val = ( List ) $F89557 ( valueStack ) ; \n\t\t\t\t\tval . add ( token . value ) ; \n\t\t\t\t\t$F332 case Yytoken . TYPE_RIGHT_SQUARE : if $F4340 ( valueStack ) { \n\t\t\t\t\t\t$F35092 ( statusStack ) $F35092 ( valueStack ) $F10937 ( status , peekStatus , statusStack ) } \n\t\t\t\t\telse $F1619 ( status , S_IN_FINISHED_VALUE ) $F332 case Yytoken . TYPE_LEFT_BRACE : val = ( List ) $F89557 ( valueStack ) ; \n\t\t\t\t\tMap newObject = createObjectContainer ( containerFactory ) ; \n\t\t\t\t\t$F528 ( val , newObject ) status = S_IN_OBJECT ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\t$F1183 ( valueStack , newObject ) $F332 case Yytoken . TYPE_LEFT_SQUARE : val = ( List ) $F89557 ( valueStack ) ; \n\t\t\t\t\tList newArray = createArrayContainer ( containerFactory ) ; \n\t\t\t\t\t$F528 ( val , newArray ) status = S_IN_ARRAY ; \n\t\t\t\t\tstatusStack . addFirst ( $F108418 ( status ) ) ; \n\t\t\t\t\t$F1183 ( valueStack , newArray ) $F332 $F2377 status = S_IN_ERROR ; \n\t\t\t\t\t} \n\t\t\t\t$F332 case S_IN_ERROR : throw new ParseException ( getPosition ( ) , ParseException . ERROR_UNEXPECTED_TOKEN , token ) ; \n\t\t\t\t} \n\t\t\tif ( status == S_IN_ERROR ) { \n\t\t\t\tthrow new ParseException ( getPosition ( ) , ParseException . ERROR_UNEXPECTED_TOKEN , token ) ; \n\t\t\t\t} \n\t\t\t} \n\t\twhile ( token . type != Yytoken . TYPE_EOF ) ; \n\t\t} \n\t$F49439 ( ie ) throw new ParseException ( getPosition ( ) , ParseException . ERROR_UNEXPECTED_TOKEN , token ) ; \n\t} \n"}, {"code": "public static $F1372 $F7905 forceInit $F7907 ( c ) { \n\ttry { \n\t\tClass . forName ( $F507 ( c ) , true , $F7047 ( c ) ) ; \n\t\t} \n\tcatch ( ClassNotFoundException cause ) $F60682 ( cause ) return c ; \n\t} \n"}, {"code": "public static void registerLog ( LogController controller ) throws UnsupportedLocaleException { \n\tforceInit ( Library . class ) ; \n\tString $F600773 ( locale , Library ) ; \n\tif ( controller . isLocaleSupported ( locale ) ) { \n\t\t$F1355814 ( controller , locale ) } \n\telse { \n\t\t$F36311 ( System , locale , controller ) throw new UnsupportedLocaleException ( locale ) ; \n\t\t} \n\tif $F112 ( CONTROLLERS ) { \n\t\tCONTROLLERS = new LogController $F21535 ( controller ) ; \n\t\t} \n\telse { \n\t\t$F58133 ( size , CONTROLLERS ) LogController [ ] temp = new LogController $F93608 ( size ) ; \n\t\t$F63624 ( System , CONTROLLERS , temp , size ) $F62115 ( temp , size , controller ) CONTROLLERS = temp ; \n\t\t} \n\t} \n"}, {"code": "public static void setLocale ( String newLocale ) throws IllegalArgumentException , UnsupportedLocaleException { \n\tPreconditions . checkArgument ( $F192245 ( newLocale ) ) ; \n\t$F10882 ( size , assertLocaleSupportedByAllControllers , newLocale ) $F564 ( changeLocaleOnAllControllers , newLocale , size ) } \n"}, {"code": "public SolrDocumentList runQuery ( String q , $F14584 ( fieldList ) , int results ) throws SolrServerException { \n\tSolrQuery query = new SolrQuery $F2 ; \n\tquery . setQuery ( escapeQuery ( q ) ) ; \n\tquery . setRows ( results ) ; \n\tquery . setFields ( $F28561 ( fieldList ) ) ; \n\tQueryResponse rsp = server . query ( query , METHOD . POST ) ; \n\treturn $F188379 ( rsp ) ; \n\t} \n"}, {"code": "public SolrInputDocument buildSolrDocument ( $F666120 ( hshMap ) ) throws Exception { \n\tSolrInputDocument doc = new SolrInputDocument $F2 ; \n\t$F922111 ( keys , hshMap ) while $F11310 ( keys ) { \n\t\t$F93978 ( key , keys ) $F2744 ( value , hshMap , key ) SolrInputField field = new SolrInputField ( key ) ; \n\t\ttry { \n\t\t\tdoc . addField ( $F507 ( field ) , value , NUM00 ) ; \n\t\t\t} \n\t\t$F153429 ( e ) } \n\treturn doc ; \n\t} \n"}, {"code": "public void indexDocument ( String docXML ) throws Exception { \n\t$F9662 ( xml , docXML ) DirectXmlRequest xmlreq = new DirectXmlRequest $F2756 ( xml ) ; \n\t$F415592 ( server , xmlreq ) ; \n\t} \n"}, {"code": "public void indexDocument ( $F666120 ( indexMap ) ) throws Exception { \n\tSolrInputDocument solrDoc = this . buildSolrDocument ( indexMap ) ; \n\tString docXML = this . convertSolrDocInXML ( solrDoc ) ; \n\t$F9662 ( xml , docXML ) DirectXmlRequest xmlreq = new DirectXmlRequest $F2756 ( xml ) ; \n\t$F415592 ( server , xmlreq ) ; \n\t} \n"}, {"code": "static long getTotalSize ( Collection < Allocation > allocations ) { \n\t$F57820 ( totalSize ) for ( Allocation allocation : allocations ) { \n\t\ttotalSize += allocation . size ; \n\t\t} \n\treturn totalSize ; \n\t} \n"}, {"code": "public static Process openUri $F62952 ( uri ) { \n\tif ( SystemUtils . IS_OS_MAC_OSX ) $F3342 ( openSiteMac , uri ) else if ( SystemUtils . IS_OS_WINDOWS ) $F3342 ( openSiteWindows , uri ) $F724 } \n"}, {"code": "public static void addTray ( final Image image , final String name , final PopupMenu popup ) { \n\tfinal $F33567 trayIconArgTypes = new Class [ ] { \n\t\tjava . awt . Image . class , $F4452088 , java . awt . PopupMenu . class } \n\t; \n\ttry { \n\t\tfinal Class $F158636 ( trayIconClass , Class ) ; \n\t\tfinal Constructor $F224759 ( trayIconConstructor , trayIconClass , trayIconArgTypes ) ; \n\t\tfinal Object trayIcon = $F131357 ( trayIconConstructor , image , name , popup ) ; \n\t\tfinal Class $F158636 ( trayClass , Class ) ; \n\t\tfinal Object obj = trayClass . getDeclaredMethod ( STRING00 ) . invoke ( null ) ; \n\t\tfinal $F33567 trayAddArgTypes = $F301079 ( trayIconClass ) ; \n\t\ttrayClass . getDeclaredMethod ( STRING00 , trayAddArgTypes ) . invoke ( obj , trayIcon ) ; \n\t\t} \n\tcatch ( final Exception e ) $F26017 ( LOG , e ) } \n"}, {"code": "public static boolean supportsTray $F2 { \n\ttry { \n\t\tfinal Class $F158636 ( trayClass , Class ) ; \n\t\tfinal Boolean bool = ( Boolean ) trayClass . getDeclaredMethod ( STRING00 ) . invoke ( null ) ; \n\t\t$F923447 ( bool ) } \n\tcatch ( final Exception e ) $F196257 ( LOG , e ) } \n"}, {"code": "protected Session getSession ( Request request , String rawRepositoryName , String rawWorkspaceName ) throws RepositoryException { \n\t$F90518 ( request ) if $F153163 ( ACTIVE_SESSION ) { \n\t\tSession session = $F1316230 ( getRepositoryManager ) ( request , repositoryNameFor ( rawRepositoryName ) , workspaceNameFor ( rawWorkspaceName ) ) ; \n\t\t$F57566 ( ACTIVE_SESSION , session ) } \n\t$F2974 ( ACTIVE_SESSION ) } \n"}, {"code": "$F1 public final OUTPUT run ( InvocationContext context , HttpResponse response ) { \n\t$F2612 requestReturnType = $F12746 ( context ) . getReturnType ( ) ; \n\ttry { \n\t\tthrowIfNotAssignable ( requestReturnType ) ; \n\t\t$F4282 ( deserialize , context , response ) } \n\tcatch ( Exception e ) { \n\t\tthrow new DeserializerException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static < T , E extends I18nId > SLF4JLogger < ? , ? , E > getLogger ( String name ) { \n\torg . slf4j . Logger $F53602 ( logger , LoggerFactory , name ) ; \n\tif ( logger instanceof LocationAwareLogger ) { \n\t\treturn new SLF4JLocationAwareLogger $F65781 ( ( LocationAwareLogger ) logger ) ; \n\t\t} \n\telse { \n\t\treturn new SLF4JLogger < T , org . slf4j . Logger , E > ( logger ) ; \n\t\t} \n\t} \n"}, {"code": "public static < T , E extends I18nId > SLF4JLogger < T , ? , E > getLogger ( $F7906 ( clazz ) , $F2613 ( caller ) ) { \n\torg . slf4j . Logger $F53602 ( logger , LoggerFactory , clazz ) ; \n\tif ( logger instanceof LocationAwareLogger ) { \n\t\treturn new SLF4JCallerLocationAwareLogger $F65781 ( ( LocationAwareLogger ) logger , caller ) ; \n\t\t} \n\telse { \n\t\treturn new SLF4JLogger < T , org . slf4j . Logger , E > ( logger ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean isEmpty $F2 throws IOException { \n\t$F25311 ( closer , Closer ) try { \n\t\tInputStream in = closer . register ( openStream ( ) ) ; \n\t\treturn $F24551 ( in ) == $F3745 ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public long size $F2 throws IOException { \n\t$F25311 ( closer , Closer ) try { \n\t\tInputStream in = closer . register ( openStream ( ) ) ; \n\t\t$F867 ( countBySkipping , in ) } \n\t$F72290 $F2454 ( closer ) $F72292 ( closer , Closer ) try { \n\t\tInputStream in = closer . register ( openStream ( ) ) ; \n\t\t$F867 ( countByReading , in ) } \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "private long countBySkipping ( InputStream in ) throws IOException { \n\t$F57820 ( count ) while $F38432 { \n\t\tlong skipped = in . skip ( Math . min ( $F88338 ( in ) , Integer . MAX_VALUE ) ) ; \n\t\tif $F9104 ( skipped ) { \n\t\t\tif ( $F24551 ( in ) == $F3745 ) $F356 ( count ) else if ( count == INT00 && $F582338 ( in ) ) $F2049938 count ++ ; \n\t\t\t} \n\t\telse $F57826 ( count , skipped ) } \n\t} \n"}, {"code": "public long copyTo ( OutputStream output ) throws IOException { \n\tcheckNotNull ( output ) ; \n\t$F25311 ( closer , Closer ) try { \n\t\tInputStream in = closer . register ( openStream ( ) ) ; \n\t\treturn $F47448 ( ByteStreams , in , output ) ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public long copyTo ( ByteSink sink ) throws IOException { \n\tcheckNotNull ( sink ) ; \n\t$F25311 ( closer , Closer ) try { \n\t\tInputStream in = closer . register ( openStream ( ) ) ; \n\t\tOutputStream out = closer . register ( $F5158 ( sink ) ) ; \n\t\treturn $F47448 ( ByteStreams , in , out ) ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "private static CharSequence reverse ( CharSequence s ) { \n\t$F40810 ( length , s ) $F122837 ( length , s ) $F44616 ( buffer , length ) buffer [ INT00 ] = $F48429 ( s , length ) ; \n\tfor ( $F6610 ( i , length ) ) { \n\t\tbuffer [ i ] = s . charAt ( length - INT00 - i ) ; \n\t\tif ( Character . isSurrogatePair ( buffer [ i ] , $F12139 ( buffer , i ) ) ) { \n\t\t\tswap ( buffer , i - INT00 , i ) ; \n\t\t\t} \n\t\t} \n\t$F2692 ( buffer ) } \n"}, {"code": "public void in ( Object key , Object value , Integer type ) throws SQLException { \n\tif $F184628 ( key ) { \n\t\tif $F112 ( type ) { \n\t\t\tbase . setObject ( ( Integer ) key , value ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbase . setObject ( ( Integer ) key , value , type ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F112 ( type ) { \n\t\t\tbase . setObject ( $F35330 ( key , value ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbase . setObject ( ( String ) key , value , type ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void out ( Object key , int type , String struct ) throws SQLException { \n\tif $F184628 ( key ) { \n\t\tif $F112 ( struct ) { \n\t\t\tbase . registerOutParameter ( ( Integer ) key , type ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbase . registerOutParameter ( ( Integer ) key , type , struct ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tif $F112 ( struct ) { \n\t\t\tbase . registerOutParameter ( $F35330 ( key , type ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tbase . registerOutParameter ( ( String ) key , type , struct ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Object read ( Object key ) throws SQLException { \n\tif $F184628 ( key ) { \n\t\treturn base . getObject ( ( Integer ) key ) ; \n\t\t} \n\telse { \n\t\treturn base . getObject ( ( String ) key ) ; \n\t\t} \n\t} \n"}, {"code": "protected $F1372 $F560674 doDelete ( WebClient webClient , $F3668909 request ) { \n\twebClient = webClient . path ( inquirePath ( request ) ) ; \n\twebClient = RequestUtil . resolveAndSetQueryPart ( request , webClient ) ; \n\tTimer timer = Timer . tic ( ) ; \n\tjavax . ws . rs . core . Response $F145766 ( cxfResponse , webClient ) ; \n\ttimer . toc ( ) ; \n\tlog . debug ( $F2373 ( cxfResponse ) + STRING00 + webClient . getCurrentURI ( ) + STRING00 + timer . getDifference ( ) + STRING00 ) ; \n\t$F560674 $F2207 ( response , toResponse , timer , cxfResponse , request ) ; \n\t$F15841 ( log , response ) return response ; \n\t} \n"}, {"code": "$F1 public ICmdLine convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException , IOException { \n\tICmdLine cmdline = null ; \n\tfinal Object newtarget = null ; \n\ttry { \n\t\t$F3037617 ( cmdline , templateCmdLine ) $F88528 ( cmdline , newtarget , valueStr ) } \n\tcatch ( final CloneNotSupportedException e ) $F216299 ( e ) return cmdline ; \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder str , final int occ ) { \n\t$F1218 ( str ) getValue ( occ ) . exportCommandLine ( str ) ; \n\t$F1218 ( str ) } \n"}, {"code": "$F1 protected void exportNamespaceData ( final String prefix , final StringBuilder out , final int occ ) { \n\tgetValue ( occ ) . exportNamespace ( prefix + STRING00 , out ) ; \n\t} \n"}, {"code": "$F1 public void exportXml $F968436 ( out ) { \n\t$F1218 ( out ) if $F560 ( isPositional ) $F1218 ( out ) else if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) for ( $F81130 ( d , size ) ) { \n\t\tif $F3730 ( d ) if $F560 ( isPositional ) { \n\t\t\t$F1218 ( out ) $F1218 ( out ) } \n\t\telse if $F268 ( keychar ) { \n\t\t\t$F41421 ( out , keychar ) $F41421 ( out , keychar ) } \n\t\telse if $F268 ( keyword ) { \n\t\t\t$F41421 ( out , keyword ) $F41421 ( out , keyword ) } \n\t\t$F564 ( exportXmlData , out , d ) } \n\t$F1218 ( out ) if $F560 ( isPositional ) $F1218 ( out ) else if $F268 ( keychar ) out . append ( keychar . charValue ( ) ) ; \n\telse if $F268 ( keyword ) $F1212 ( out , keyword ) $F1218 ( out ) } \n"}, {"code": "public static $F1372 $F931805 createFrom ( MappedSchema $F1372 ms , Instantiator $F1372 instantiator , Factory vf , Predicate . Factory pf , String ... args ) { \n\treturn vf . create ( ms . typeClass , ms . fields , ms . fieldsByNumber , ms . fieldsByName , instantiator , pf , args ) ; \n\t} \n"}, {"code": "public int getCount $F2 { \n\tif ( metadata != null && $F465338 ( metadata ) ) { \n\t\treturn $F3429265 ( Integer , metadata ) ; \n\t\t} \n\tif $F16029 ( entities , entity ) $F17553 $F8383 } \n"}, {"code": "public void setClassDefinition $F234476 ( name , def ) { \n\tclassDefs . put ( name , $F57987 ( ByteBuffer , def ) ) ; \n\t} \n"}, {"code": "$F1 public int run $F22 ( args ) throws Exception { \n\tthis . opt = new OptionUtil ( args ) ; \n\tthis . args = $F2094 ( opt ) ; \n\tthis . conf = getConf ( ) ; \n\tif ( opt . isLocalMode ( ) ) { \n\t\tthis . pathUtils = new LocalPathUtils $F2 ; \n\t\t} \n\telse { \n\t\tthis . pathUtils = new HDFSUtils ( conf ) ; \n\t\t} \n\tthis . jobName = StringUtil . createInternalJobID ( ) ; \n\tinput = setInputPath ( this . args ) ; \n\toutput = setOutputPath ( this . args ) ; \n\tsetup ( ) ; \n\t$F106016 ( beforeSummarizerOutputLabel ) if ( autoIntermediatePath ) { \n\t\tSequencalJobChain tempChain = new SequencalJobChain $F2 ; \n\t\tJob lastJob = null ; \n\t\t$F4728 ( lastIntermediatePath ) for ( Job j : sequencalJobChain . getJobs ( ) ) { \n\t\t\tif $F112 ( lastJob ) { \n\t\t\t\tif ( j instanceof SimpleJob ) { \n\t\t\t\t\tSimpleJob sj = ( SimpleJob ) j ; \n\t\t\t\t\tif ( ! sj . isNatural ( ) ) { \n\t\t\t\t\t\tSimpleTextInputFormat . setInputPaths ( j , input ) ; \n\t\t\t\t\t\tj . setInputFormatClass ( SimpleTextInputFormat . class ) ; \n\t\t\t\t\t\tif ( sj . isBigJoin ( ) ) { \n\t\t\t\t\t\t\tSimpleJob joinJob = addBigJoinJob ( sj ) ; \n\t\t\t\t\t\t\tString masterPath = $F5105 ( joinJob ) . get ( SimpleJob . MASTER_PATH ) ; \n\t\t\t\t\t\t\tMultipleInputs . addInputPath ( joinJob , $F183610 ( input ) , ValueTextInputFormat . class , ValueJoinFilter . class ) ; \n\t\t\t\t\t\t\tMultipleInputs . addInputPath ( joinJob , $F183610 ( masterPath ) , MasterTextInputFormat . class , MasterJoinFilter . class ) ; \n\t\t\t\t\t\t\t$F528 ( tempChain , joinJob ) lastIntermediatePath = String . format ( INTERMEDIATE_PATH , output , jobName , sequencalJobChain . getJobs ( ) . size ( ) ) ; \n\t\t\t\t\t\t\t$F528 ( intermediatePaths , lastIntermediatePath ) SequenceFileOutputFormat . setOutputPath ( joinJob , $F183610 ( lastIntermediatePath ) ) ; \n\t\t\t\t\t\t\tjoinJob . setOutputFormatClass ( SequenceFileOutputFormat . class ) ; \n\t\t\t\t\t\t\tlastJob = joinJob ; \n\t\t\t\t\t\t\tSequenceFileInputFormat . setInputPaths ( j , lastIntermediatePath ) ; \n\t\t\t\t\t\t\tj . setInputFormatClass ( SequenceFileInputFormat . class ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tTextInputFormat . setInputPaths ( j , input ) ; \n\t\t\t\t\t\tj . setInputFormatClass ( TextInputFormat . class ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tSequenceFileInputFormat . setInputPaths ( j , lastIntermediatePath ) ; \n\t\t\t\tj . setInputFormatClass ( SequenceFileInputFormat . class ) ; \n\t\t\t\t} \n\t\t\tif ( j instanceof SimpleJob ) { \n\t\t\t\tSimpleJob sj = ( SimpleJob ) j ; \n\t\t\t\tif ( ! sj . isNatural ( ) ) { \n\t\t\t\t\tif ( ! sj . isMapper ( ) && ! sj . isReducer ( ) ) $F42718 if $F268 ( beforeSummarizerOutputLabel ) { \n\t\t\t\t\t\t$F5105 ( j ) . setStrings ( SimpleJob . BEFORE_SUMMARIZER_OUTPUT_LABELS , beforeSummarizerOutputLabel ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F21 summarizerOutputLabels = sj . getSummarizerOutputLabels ( ) ; \n\t\t\t\t\t$F41745 ( summarizerOutputLabels , beforeSummarizerOutputLabel ) } \n\t\t\t\t} \n\t\t\tlastIntermediatePath = String . format ( INTERMEDIATE_PATH , output , jobName , sequencalJobChain . getJobs ( ) . size ( ) ) ; \n\t\t\t$F528 ( intermediatePaths , lastIntermediatePath ) SequenceFileOutputFormat . setOutputPath ( j , $F183610 ( lastIntermediatePath ) ) ; \n\t\t\tj . setOutputFormatClass ( SequenceFileOutputFormat . class ) ; \n\t\t\t$F528 ( tempChain , j ) lastJob = j ; \n\t\t\t} \n\t\tsequencalJobChain = tempChain ; \n\t\tfor ( Job j : sequencalJobChain . getJobs ( ) ) { \n\t\t\tif ( j instanceof SimpleJob ) { \n\t\t\t\tSimpleJob jj = ( SimpleJob ) j ; \n\t\t\t\tif ( ! jj . isReducer ( ) ) { \n\t\t\t\t\tjj . setNumReduceTasks ( INT00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F6953 ( intermediatePaths , lastIntermediatePath ) TextOutputFormat . setOutputPath ( lastJob , $F183610 ( output ) ) ; \n\t\tlastJob . setOutputFormatClass ( TextOutputFormat . class ) ; \n\t\t} \n\tSequencalJobExecuteResults results = sequencalJobChain . runAll ( ) ; \n\tif ( deleteIntermediatePath ) { \n\t\tfor ( String path : intermediatePaths ) $F74933 ( pathUtils , path ) } \n\treturn results . isAllJobSuccessful ( ) ? INT00 : $F3745 ; \n\t} \n"}, {"code": "private SimpleJob addBigJoinJob ( SimpleJob job ) throws IOException { \n\t$F205590 ( conf , job ) $F21 labels = conf . getStrings ( SimpleJob . LABELS ) ; \n\tString separator = conf . get ( SimpleJob . SEPARATOR ) ; \n\tboolean regex = conf . getBoolean ( SimpleJob . SEPARATOR_REGEX , false ) ; \n\tboolean formatIgnored = conf . getBoolean ( SimpleJob . FORMAT_IGNORED , false ) ; \n\tSimpleJob joinJob = new SimpleJob $F5186 ( conf , jobName ) ; \n\t$F276 ( setConfiguration , joinJob , labels , separator , formatIgnored , regex ) int type = conf . getInt ( SimpleJob . READER_TYPE , $F3745 ) ; \n\t$F205590 ( joinConf , joinJob ) joinConf . setInt ( SimpleJob . READER_TYPE , type ) ; \n\tjoinConf . setStrings ( SimpleJob . MASTER_LABELS , conf . getStrings ( SimpleJob . MASTER_LABELS ) ) ; \n\tif ( type == SimpleJob . SINGLE_COLUMN_JOIN_READER ) { \n\t\tjoinConf . set ( SimpleJob . JOIN_MASTER_COLUMN , conf . get ( SimpleJob . JOIN_MASTER_COLUMN ) ) ; \n\t\tjoinConf . set ( SimpleJob . JOIN_DATA_COLUMN , conf . get ( SimpleJob . JOIN_DATA_COLUMN ) ) ; \n\t\t} \n\telse if ( type == SimpleJob . SOME_COLUMN_JOIN_READER ) { \n\t\tjoinConf . setStrings ( SimpleJob . JOIN_MASTER_COLUMN , conf . getStrings ( SimpleJob . JOIN_MASTER_COLUMN ) ) ; \n\t\tjoinConf . setStrings ( SimpleJob . JOIN_DATA_COLUMN , conf . getStrings ( SimpleJob . JOIN_DATA_COLUMN ) ) ; \n\t\t} \n\tjoinConf . set ( SimpleJob . MASTER_PATH , conf . get ( SimpleJob . MASTER_PATH ) ) ; \n\tjoinConf . set ( SimpleJob . MASTER_SEPARATOR , conf . get ( SimpleJob . MASTER_SEPARATOR ) ) ; \n\tjoinJob . setMapOutputKeyClass ( Key . class ) ; \n\tjoinJob . setMapOutputValueClass ( Value . class ) ; \n\tjoinJob . setPartitionerClass ( SimplePartitioner . class ) ; \n\tjoinJob . setGroupingComparatorClass ( SimpleGroupingComparator . class ) ; \n\tjoinJob . setSortComparatorClass ( SimpleSortComparator . class ) ; \n\tjoinJob . setSummarizer ( JoinSummarizer . class ) ; \n\tif ( ! job . isMapper ( ) && ! job . isReducer ( ) ) { \n\t\tjoinConf . setBoolean ( SimpleJob . ONLY_JOIN , true ) ; \n\t\tjoinJob . setOutputKeyClass ( Value . class ) ; \n\t\tjoinJob . setOutputValueClass ( NullWritable . class ) ; \n\t\t} \n\telse { \n\t\tjoinJob . setOutputKeyClass ( Key . class ) ; \n\t\tjoinJob . setOutputValueClass ( Value . class ) ; \n\t\t} \n\treturn joinJob ; \n\t} \n"}, {"code": "private void setConfiguration ( SimpleJob job , $F21 labels , String separator , boolean formatIgnored , boolean regex ) { \n\t$F205590 ( conf , job ) conf . setInt ( SimpleJob . READER_TYPE , SimpleJob . SIMPLE_READER ) ; \n\tif $F268 ( labels ) { \n\t\tconf . setStrings ( SimpleJob . LABELS , labels ) ; \n\t\tconf . setInt ( SimpleJob . READER_TYPE , SimpleJob . LABELS_READER ) ; \n\t\t} \n\tif $F268 ( separator ) { \n\t\tconf . set ( SimpleJob . SEPARATOR , separator ) ; \n\t\t} \n\tif ( regex ) { \n\t\tconf . setBoolean ( SimpleJob . SEPARATOR_REGEX , true ) ; \n\t\t} \n\tjob . setPathUtils ( pathUtils ) ; \n\tif ( pathUtils instanceof HDFSUtils ) { \n\t\tconf . setInt ( SimpleJob . CLUSTER_TYPE , SimpleJob . CLUSTER_TYPE_ONPREMISE ) ; \n\t\t} \n\telse if ( pathUtils instanceof S3Utils ) { \n\t\tconf . setInt ( SimpleJob . CLUSTER_TYPE , SimpleJob . CLUSTER_TYPE_AWS ) ; \n\t\tS3Utils u = ( S3Utils ) pathUtils ; \n\t\tconf . set ( SimpleJob . AWS_ACCESS_KEY , u . getAccessKey ( ) ) ; \n\t\tconf . set ( SimpleJob . AWS_SECRET_KEY , u . getSecretKey ( ) ) ; \n\t\tif $F6132 ( sequencalJobChain ) { \n\t\t\tFileInputFormat . setMinInputSplitSize ( job , INT00 ) ; \n\t\t\tFileInputFormat . setMaxInputSplitSize ( job , INT00 ) ; \n\t\t\t} \n\t\t} \n\telse if ( pathUtils instanceof LocalPathUtils ) { \n\t\tconf . setInt ( SimpleJob . CLUSTER_TYPE , SimpleJob . CLUSTER_TYPE_LOCAL ) ; \n\t\t} \n\tjob . setJarByClass ( SimpleJobTool . class ) ; \n\tjob . setFormatIgnored ( formatIgnored ) ; \n\t} \n"}, {"code": "public void parseAndInject ( $F21 args , T injectee ) throws InvalidCommandException { \n\t$F1357 ( this , injectee ) $F39336 ( pendingInjections ) $F63081 argsIter = Iterators . forArray ( args ) ; \n\t$F838473 $F9005 ( builder , ImmutableList ) ; \n\twhile $F11310 ( argsIter ) { \n\t\t$F93978 ( arg , argsIter ) if $F42444 ( arg ) $F333 else if $F5667 ( arg ) $F565 ( parseLongOption , arg , argsIter ) else if $F5667 ( arg ) $F565 ( parseShortOptions , arg , argsIter ) else $F529 ( builder , arg ) } \n\tfor ( PendingInjection pi : pendingInjections ) { \n\t\tpi . injectableOption . inject ( pi . value , injectee ) ; \n\t\t} \n\t$F57857 leftovers = $F307 ( builder , argsIter ) . build ( ) ; \n\tinvokeMethod ( injectee , injectionMap . leftoversMethod , leftovers ) ; \n\t} \n"}, {"code": "private void parseShortOptions ( String arg , $F105049 ( args ) ) throws InvalidCommandException { \n\tfor ( $F90612 ( i , arg ) ) { \n\t\tString name = STRING00 + $F14212 ( arg , i ) ; \n\t\tInjectableOption injectable = injectionMap . getInjectableOption ( name ) ; \n\t\tString value ; \n\t\tif ( $F685983 ( injectable ) ) $F24706 ( value ) else { \n\t\t\tif ( $F97051 ( i , arg ) ) { \n\t\t\t\t$F19735 ( value , arg , i ) $F70718 ( i , arg ) ; \n\t\t\t\t} \n\t\t\telse $F14068 ( value , grabNextValue , args , name ) } \n\t\t$F564 ( injectNowOrLater , injectable , value ) } \n\t} \n"}, {"code": "$F1 public void activateOptions $F2 { \n\tif $F380519 ( StringUtils , propertiesLocation ) { \n\t\tLogLog . debug ( $F44232 ( this ) + propertiesLocation ) ; \n\t\t$F31764 ( properties , loadProperties , propertiesLocation ) if ( $F1930 ( StringUtils , url ) && $F380393 ( StringUtils , propertyUrl ) ) $F148587 ( url , properties , propertyUrl ) if ( $F1930 ( StringUtils , driver ) && $F380393 ( StringUtils , propertyDriver ) ) $F148587 ( driver , properties , propertyDriver ) if ( $F1930 ( StringUtils , username ) && $F380393 ( StringUtils , propertyUsername ) ) $F148587 ( username , properties , propertyUsername ) if ( $F1930 ( StringUtils , password ) && $F380393 ( StringUtils , propertyPassword ) ) $F148587 ( password , properties , propertyPassword ) if ( $F1930 ( StringUtils , sqlQuery ) && $F380393 ( StringUtils , propertySqlQuery ) ) $F148587 ( sqlQuery , properties , propertySqlQuery ) } \n\tif $F109626 ( StringUtils , dataSourceBeanName ) { \n\t\ttry { \n\t\t\tLogLog . debug ( $F44232 ( this ) + url ) ; \n\t\t\t$F45914 ( Class , driver ) ; \n\t\t\tconn = $F343751 ( DriverManager , url , username , password ) ; \n\t\t\t$F10937 ( stmt , prepareStatement , conn ) LogLog . debug ( $F44232 ( this ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\terrorHandler . error ( $F44232 ( this ) + url , e , ErrorCode . GENERIC_FAILURE ) ; \n\t\t\t$F11567 ( e ) } \n\t\t} \n\telse { \n\t\tLogLog . debug ( $F44232 ( this ) + dataSourceBeanName ) ; \n\t\tThread thread = new Thread ( new Runnable $F2 { \n\t\t\t$F1 public void run $F2 { \n\t\t\t\ttry { \n\t\t\t\t\tDataSource dataSource = BeanUtils . getBean ( dataSourceBeanName , $F2125 , dataSourceBeanWaitTime ) ; \n\t\t\t\t\t$F380801 ( conn , dataSource ) $F10937 ( stmt , prepareStatement , conn ) $F13173 ( LogLog , name , dataSourceBeanName ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\terrorHandler . error ( $F4241 ( name , dataSourceBeanName ) , e , ErrorCode . GENERIC_FAILURE ) ; \n\t\t\t\t\t$F11567 ( e ) } \n\t\t\t\t} \n\t\t\t} \n\t\t, $F9319 ( this ) ) ; \n\t\tif $F2015 ( dataSourceBeanWaitTime ) $F4581 ( thread ) else $F25018 ( thread ) } \n\t} \n"}, {"code": "protected void fillStatement ( PreparedStatement stmt , LoggingEvent event ) throws SQLException { \n\tObject value ; \n\tstmt . setString ( INT00 , $F5227 ( event ) . toString ( ) ) ; \n\tstmt . setTimestamp ( INT00 , new Timestamp ( $F962855 ( event ) ) ) ; \n\t$F581648 ( value , event ) stmt . setString ( INT00 , $F119889 ( value ) ) ; \n\tstmt . setString ( INT00 , $F189987 ( event ) ) ; \n\tstmt . setString ( INT00 , $F9793 ( event ) ) ; \n\tstmt . setString ( INT00 , event . getLocationInformation ( ) . fullInfo ) ; \n\tif ( null == event . getThrowableStrRep ( ) ) { \n\t\tstmt . setString ( $F162649 ) ; \n\t\t} \n\telse { \n\t\t$F405643 ( value ) for ( String string : event . getThrowableStrRep ( ) ) { \n\t\t\t( ( StringBuffer ) value ) . append ( string ) . append ( STRING00 ) ; \n\t\t\t} \n\t\tstmt . setString ( $F1640769 ( value ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected ConfigurationWrapper getConfigurationWrapper ( InjectionPoint injectionPoint ) { \n\tConfiguration configuration = $F2217416 ( injectionPoint ) . getAnnotation ( $F53706 ) ; \n\t$F500669 ( WrapperFactory , configuration ) } \n"}, {"code": "protected List < ISource > locate ( ConfigurationWrapper configuration ) { \n\t$F24434 ( configuration ) ResolverWrapper resolverWrapper = configuration . resolver ( ) ; \n\tPropertyResolver resolver = this . resolverFactory . createPropertyResolver ( resolverWrapper ) ; \n\t$F53092 bootstrapMap = this . resolverFactory . getBootstrapProperties ( resolverWrapper ) ; \n\t$F53092 defaultMap = this . resolverFactory . getDefaultProperties ( resolverWrapper ) ; \n\tList < ISource > foundSources = new ArrayList < ISource > $F1415 ; \n\tList < Source > sources = new ArrayList < Source > ( Arrays . asList ( configuration . sources ( ) ) ) ; \n\tfor ( Source source : sources ) { \n\t\tISource found = this . resloveSource ( source , resolver , bootstrapMap , defaultMap ) ; \n\t\t$F12701 ( found , foundSources ) } \n\tif $F6132 ( foundSources ) { \n\t\tfoundSources . add ( new UnfoundSource $F2 ) ; \n\t\t} \n\treturn foundSources ; \n\t} \n"}, {"code": "private ISource resloveSource ( Source source , PropertyResolver resolver , $F53145 ( bootstrapMap ) , $F53145 ( defaultMap ) ) { \n\tClass < ? extends Locator > locatorClass = source . locator ( ) ; \n\tif $F112 ( locatorClass ) { \n\t\tlocatorClass = NullLocator . class ; \n\t\t} \n\tLocator locator = this . beanResolver . resolveBeanWithDefaultClass ( locatorClass , NullLocator . class ) ; \n\tthis . logger . trace ( $F6292 ( locator ) ) ; \n\t$F105042 ( path , source ) if ( resolver != null && $F39314 ( source ) ) { \n\t\tpath = resolver . resolveProperties ( path , bootstrapMap , defaultMap ) ; \n\t\t} \n\tthis . logger . trace ( STRING00 , path ) ; \n\tISource foundSource = locator . locate ( path ) ; \n\tthis . logger . trace ( STRING00 , foundSource , $F6291 ( locator ) ) ; \n\treturn foundSource ; \n\t} \n"}, {"code": "public static Sprite circle $F65855 ( diameter , color , lineWidth ) { \n\t$F57272 pix = new int [ diameter * diameter ] ; \n\tfor ( $F6610 ( i , lineWidth ) ) { \n\t\tdrawCircle ( pix , diameter - i , diameter , color ) ; \n\t\t} \n\treturn new Sprite ( diameter , diameter , pix ) ; \n\t} \n"}, {"code": "public static Sprite scale ( Sprite original , float scale , ScalingMethod method ) { \n\tif $F64922 ( scale ) return $F40000 ( original ) ; \n\tswitch ( method ) { \n\t\t$F142287 ( NEAREST , scaleNearest , original , scale ) $F142287 ( BILINEAR , scaleBilinear , original , scale ) } \n\t$F724 } \n"}, {"code": "public static Sprite flipH ( Sprite original ) { \n\t$F57272 newPix = new int [ original . getPixels ( ) . length ] ; \n\tfor ( int y = INT00 ; \n\t$F12346 ( y , original ) ; \n\ty ++ ) { \n\t\tint newY = $F567583 ( original , y ) - INT00 ; \n\t\tSystem . arraycopy ( original . getPixels ( ) , y * $F12288 ( original ) , newPix , newY * $F12288 ( original ) , $F12288 ( original ) ) ; \n\t\t} \n\treturn new Sprite ( $F12288 ( original ) , $F12294 ( original ) , newPix ) ; \n\t} \n"}, {"code": "public static Sprite flipV ( Sprite original ) { \n\t$F57272 newPix = new int [ original . getPixels ( ) . length ] ; \n\tfor ( int x = INT00 ; \n\t$F12350 ( x , original ) ; \n\tx ++ ) { \n\t\tint newX = $F392261 ( original , x ) - INT00 ; \n\t\tfor ( int y = INT00 ; \n\t\t$F12346 ( y , original ) ; \n\t\ty ++ ) { \n\t\t\tnewPix [ newX + y * $F12288 ( original ) ] = original . getPixels ( ) [ x + y * $F12288 ( original ) ] ; \n\t\t\t} \n\t\t} \n\treturn new Sprite ( $F12288 ( original ) , $F12294 ( original ) , newPix ) ; \n\t} \n"}, {"code": "public static Sprite rotate ( Sprite original , double angle ) { \n\tif $F91757 ( angle ) return SpriteUtil . rotate90 ( original , Rotation . _90 ) ; \n\telse if $F91757 ( angle ) return SpriteUtil . rotate90 ( original , Rotation . _180 ) ; \n\telse if ( angle == FLOAT00 || angle == $F89328 ) return SpriteUtil . rotate90 ( original , Rotation . _270 ) ; \n\tfinal double radians = $F392311 ( Math , angle ) ; \n\tfinal double $F22378 ( cos , Math , radians ) ; \n\tfinal double $F22378 ( sin , Math , radians ) ; \n\tint newWidth = ( int ) ( cos * $F12288 ( original ) + sin * $F12294 ( original ) ) ; \n\tint newHeight = ( int ) ( cos * $F12294 ( original ) + sin * $F12288 ( original ) ) ; \n\tint xDelta = ( newWidth - $F12288 ( original ) ) / INT00 ; \n\tint yDelta = ( newHeight - $F12294 ( original ) ) / INT00 ; \n\tfinal $F57272 $F572325 ( pixels2 , newWidth , newHeight ) ; \n\tint centerX = $F570092 ( original ) ; \n\tint centerY = $F570096 ( original ) ; \n\tfor ( int x = - xDelta ; \n\tx < newWidth - xDelta ; \n\tx ++ ) for ( int y = - yDelta ; \n\ty < newHeight - yDelta ; \n\ty ++ ) { \n\t\t$F62358 ( m , x , centerX ) $F62358 ( n , y , centerY ) int j = ( int ) ( m * cos + n * sin + centerX ) ; \n\t\tint k = ( int ) ( n * cos - m * sin + centerY ) ; \n\t\tif ( j >= INT00 && $F12350 ( j , original ) && k >= INT00 && $F12346 ( k , original ) ) { \n\t\t\tpixels2 [ $F579515 ( y , yDelta , newWidth ) + x + xDelta ] = original . getPixels ( ) [ k * $F12288 ( original ) + j ] ; \n\t\t\t} \n\t\t} \n\treturn new Sprite $F2144 ( newWidth , newHeight , pixels2 ) ; \n\t} \n"}, {"code": "public static Sprite rotate90 ( Sprite original , Rotation angle ) { \n\tint newWidth = angle == Rotation . _180 ? $F12288 ( original ) : $F12294 ( original ) ; \n\tint newHeight = angle == Rotation . _180 ? $F12294 ( original ) : $F12288 ( original ) ; \n\t$F57272 newPix = new int [ original . getPixels ( ) . length ] ; \n\tfor ( int x = INT00 ; \n\t$F12350 ( x , original ) ; \n\tx ++ ) { \n\t\tfor ( int y = INT00 ; \n\t\t$F12346 ( y , original ) ; \n\t\ty ++ ) { \n\t\t\tint newY = angle == Rotation . _90 ? x : angle == Rotation . _180 ? $F567583 ( original , y ) - INT00 : $F392261 ( original , x ) - INT00 ; \n\t\t\tint newX = angle == Rotation . _90 ? $F567583 ( original , y ) - INT00 : angle == Rotation . _180 ? $F392261 ( original , x ) - INT00 : y ; \n\t\t\tnewPix [ newX + newY * newWidth ] = original . getPixels ( ) [ x + y * $F12288 ( original ) ] ; \n\t\t\t} \n\t\t} \n\treturn new Sprite $F2144 ( newWidth , newHeight , newPix ) ; \n\t} \n"}, {"code": "public static Sprite addBorder ( Sprite original , int color , int size ) { \n\t$F57272 newPix = Arrays . copyOf ( original . getPixels ( ) , original . getPixels ( ) . length ) ; \n\tfor ( int x = INT00 ; \n\t$F12350 ( x , original ) ; \n\tx ++ ) { \n\t\tfor ( int y = INT00 ; \n\t\t$F12346 ( y , original ) ; \n\t\ty ++ ) { \n\t\t\tif ( x < size || x >= $F392261 ( original , size ) || y < size || y >= $F567583 ( original , size ) ) { \n\t\t\t\tnewPix [ x + y * $F12288 ( original ) ] = color ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn new Sprite ( $F12288 ( original ) , $F12294 ( original ) , newPix ) ; \n\t} \n"}, {"code": "public < A extends Appendable > A appendTo ( A appendable , $F58426 ( parts ) ) throws IOException { \n\treturn appendTo ( appendable , $F16599 ( parts ) ) ; \n\t} \n"}, {"code": "public final < A extends Appendable > A appendTo ( A appendable , $F3244 parts ) throws IOException $F60738 ( appendTo , appendable , Arrays , parts ) "}, {"code": "public final StringBuilder appendTo ( StringBuilder builder , $F11424 parts ) { \n\ttry { \n\t\tappendTo ( ( Appendable ) builder , parts ) ; \n\t\t} \n\tcatch ( IOException impossible ) $F60682 ( impossible ) return builder ; \n\t} \n"}, {"code": "$F67996 public Joiner useForNull $F62952 ( nullText ) { \n\tcheckNotNull ( nullText ) ; \n\treturn new Joiner ( this ) { \n\t\t$F1 CharSequence toString $F59695 ( part ) { \n\t\t\treturn $F112 ( part ) ? nullText : Joiner . this . toString ( part ) ; \n\t\t\t} \n\t\t$F1 public Joiner useForNull ( String nullText ) $F60771 $F1 public Joiner skipNulls $F2 $F60771 } \n\t; \n\t} \n"}, {"code": "private static void sort ( $F120572 ( array ) , final int start , final int end , final TransactionIterator it1 , final TransactionIterator it2 , int prefixEnd ) { \n\tif ( start >= end - INT00 ) $F255 else if ( end - start == INT00 ) { \n\t\tit1 . setTransaction ( array [ start ] ) ; \n\t\tit2 . setTransaction ( $F64146 ( array , start ) ) ; \n\t\t$F5605 ( merge , it1 , it2 , prefixEnd ) } \n\telse { \n\t\tint pivotPos = start + ( $F57288 ( end , start ) ) ; \n\t\t$F62114 ( pivotVal , array , pivotPos ) array [ pivotPos ] = $F12139 ( array , end ) ; \n\t\t$F104472 ( array , end , pivotVal ) int insertInf = start ; \n\t\t$F74108 ( insertSup , end ) for ( int i = start ; \n\t\ti <= insertSup ; \n\t\t) { \n\t\t\tit1 . setTransaction ( pivotVal ) ; \n\t\t\tit2 . setTransaction ( array [ i ] ) ; \n\t\t\t$F9461 ( comp , merge , it1 , it2 , prefixEnd ) if $F2523 ( comp ) { \n\t\t\t\t$F62114 ( valI , array , i ) $F62115 ( array , insertInf , valI ) insertInf ++ ; \n\t\t\t\ti ++ ; \n\t\t\t\t} \n\t\t\telse if $F3730 ( comp ) { \n\t\t\t\t$F62114 ( valI , array , i ) $F62160 ( array , i , insertSup ) $F62115 ( array , insertSup , valI ) insertSup -- ; \n\t\t\t\t} \n\t\t\telse $F16091 ( i ) } \n\t\t$F12139 ( array , end ) = $F64146 ( array , insertSup ) ; \n\t\t$F93628 ( array , insertSup , pivotVal ) $F39322 ( sort , array , start , insertInf , it1 , it2 , prefixEnd ) sort ( array , insertSup + INT00 , end , it1 , it2 , prefixEnd ) ; \n\t\t} \n\t} \n"}, {"code": "$F762 public static void checkService ( $F3137150 ( context ) , $F410888 final ComponentName service ) { \n\tfinal PackageManager $F577457 ( packageManager , context ) ; \n\ttry { \n\t\tpackageManager . getServiceInfo ( service , INT00 ) ; \n\t\t} \n\tcatch ( $F700211 e ) { \n\t\tthrow new IllegalStateException ( $F2019168 ( service ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean hasPermission ( $F3137150 ( context ) , $F1056867 ( permission ) ) { \n\t$F406761 ( TextUtils , permission ) try { \n\t\tfinal PackageInfo info = $F570439 ( context ) . getPackageInfo ( $F76244 ( context ) , PackageManager . GET_PERMISSIONS ) ; \n\t\tfinal $F21 requestedPermissions = info . requestedPermissions ; \n\t\tif $F268 ( requestedPermissions ) { \n\t\t\tfor ( String requestedPermission : requestedPermissions ) { \n\t\t\t\tif $F230091 ( TextUtils , permission , requestedPermission ) $F233 } \n\t\t\t} \n\t\t} \n\tcatch ( $F700211 ignore ) $F1645 $F213 } \n"}, {"code": "public static void checkPermission ( $F3137150 ( context ) , $F1056867 ( permission ) ) { \n\tcheckPermission ( context , permission , String . format ( Locale . US , STRING00 , permission ) ) ; \n\t} \n"}, {"code": "public static void checkPermission ( $F3137150 ( context ) , $F1056867 ( permission ) , $F1056867 ( exceptionMessage ) ) { \n\tif $F12600 ( hasPermission , context , permission ) { \n\t\tthrow new SecurityException ( exceptionMessage ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean hasMetadata ( $F3137150 ( context ) , $F1056867 ( metadataKey ) ) { \n\t$F406761 ( TextUtils , metadataKey ) try { \n\t\tfinal PackageInfo info = $F570439 ( context ) . getPackageInfo ( $F76244 ( context ) , PackageManager . GET_META_DATA ) ; \n\t\tfinal Bundle metaData = info . applicationInfo . metaData ; \n\t\tif ( metaData != null && $F108685 ( metaData , metadataKey ) ) $F233 } \n\tcatch ( $F700211 e ) $F1645 $F213 } \n"}, {"code": "public static void checkReceiver ( $F3137150 ( context ) , $F410888 final Intent broadcastIntent ) { \n\tcheckReceiver ( $F540503 ( context , broadcastIntent ) ) ; \n\t} \n"}, {"code": "public static void checkReceiver ( $F3137150 ( context ) , $F1056867 ( receiverName ) , $F410888 final Intent broadcastIntent ) $F54552 ( checkReceiver , context , receiverName , broadcastIntent ) "}, {"code": "public static void checkReceiver ( $F3137150 ( context ) , $F213411 ( receiverName ) , $F410888 final Intent broadcastIntent , $F213411 ( permission ) ) { \n\tif ( Intent . ACTION_BOOT_COMPLETED . equals ( $F7689 ( broadcastIntent ) ) ) $F47902 ( checkReceiverInManifest , context , receiverName ) final PackageManager $F577457 ( packageManager , context ) ; \n\tfinal List < ResolveInfo > receivers = packageManager . queryBroadcastReceivers ( broadcastIntent , PackageManager . GET_INTENT_FILTERS ) ; \n\tif $F28525 ( receivers ) { \n\t\tthrow new IllegalStateException $F45921 ( OPFUtils , broadcastIntent ) ; \n\t\t} \n\tResolveInfo neededReceiver = null ; \n\tfor ( ResolveInfo receiver : receivers ) { \n\t\tfinal boolean isRightName = receiverName == null || receiver . activityInfo . name . equals ( receiverName ) ; \n\t\tif ( isRightName && receiver . activityInfo . packageName . equals ( $F76244 ( context ) ) ) $F67525 ( neededReceiver , receiver ) } \n\t$F35456 ( neededReceiver , receiverName ) if ( permission != null && ! permission . equals ( neededReceiver . activityInfo . permission ) ) $F84525 ( permission , receiverName ) } \n"}, {"code": "static IntTupleIncrementor incrementor ( Order order ) { \n\t$F2201 ( order ) switch ( order ) { \n\t\t$F181992 ( LEXICOGRAPHICAL , lexicographicalIncrementor ) $F181992 ( COLEXICOGRAPHICAL , colexicographicalIncrementor ) $F107112 } \n\t$F724 } \n"}, {"code": "static IntTupleIncrementor lexicographicalIncrementor $F2 { \n\t$F15270 $F17927 t , min , max ) - > IntTuples . incrementLexicographically ( t , min , max , t ) ; \n\t} \n"}, {"code": "static IntTupleIncrementor colexicographicalIncrementor $F2 { \n\t$F15270 $F17927 t , min , max ) - > IntTuples . incrementColexicographically ( t , min , max , t ) ; \n\t} \n"}, {"code": "public static $F27567 findFile ( String pattern , boolean recurse , String ... roots ) { \n\t$F27690 ( files ) if $F268 ( roots ) { \n\t\tfor ( String root : roots ) { \n\t\t\ttry { \n\t\t\t\tPath path = $F112761 ( FileSystems ) . getPath ( root ) ; \n\t\t\t\tlogger . trace ( STRING00 , $F11790 ( path ) ) ; \n\t\t\t\tFiles . walkFileTree ( path , new FileFinderVisitor ( pattern , files ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException e ) $F442640 ( logger , e ) } \n\t\t} \n\treturn files ; \n\t} \n"}, {"code": "public static XPathUtils newXPath $F739941 ( url ) { \n\tfinal DefaultHttpClient client = new DefaultHttpClientImpl $F2 ; \n\tfinal GetMethod method = new GetMethod ( $F41939 ( url ) ) ; \n\ttry { \n\t\tfinal int responseCode = client . executeMethod ( method ) ; \n\t\tif ( responseCode != HttpStatus . SC_OK ) $F160915 ( LOG , responseCode ) else { \n\t\t\tfinal InputStream is = method . getResponseBodyAsStream ( ) ; \n\t\t\treturn XPathUtils . newXPath ( is ) ; \n\t\t\t} \n\t\t} \n\tcatch ( final HttpException e ) $F26017 ( LOG , e ) catch ( final IOException e ) $F26017 ( LOG , e ) catch ( final SAXException e ) $F26017 ( LOG , e ) finally $F438431 ( method ) $F724 } \n"}, {"code": "public static XPathUtils newXPath $F62952 ( str ) throws $F592403 { \n\t$F384036 ( xpfactory , XPathFactory ) final XPath xPath = xpfactory . newXPath ( ) ; \n\tfinal Document doc = XmlUtils . toDoc ( str ) ; \n\treturn new XPathUtils ( xPath , doc ) ; \n\t} \n"}, {"code": "public static XPathUtils newXPath $F605604 ( is ) throws $F592403 { \n\t$F384036 ( xpfactory , XPathFactory ) final XPath xPath = xpfactory . newXPath ( ) ; \n\tfinal Document doc = XmlUtils . toDoc ( is ) ; \n\treturn new XPathUtils ( xPath , doc ) ; \n\t} \n"}, {"code": "public static XPathUtils newXPath $F724210 ( doc ) { \n\t$F384036 ( xpfactory , XPathFactory ) final XPath xPath = xpfactory . newXPath ( ) ; \n\treturn new XPathUtils ( xPath , doc ) ; \n\t} \n"}, {"code": "public static HashMap $F3015882 getRootDistribution ( HashMap data , String var , String m , String pp , String rd ) { \n\t$F159660 ( sllbs ) String k ; \n\tHashMap $F3015882 results = new HashMap $F3015882 $F2 ; \n\t$F96338 ( result ) $F16845591 soilLayers = getSoilLayer ( data ) ; \n\tif $F112 ( soilLayers ) $F356 ( results ) else if $F6132 ( soilLayers ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\telse { \n\t\ttry { \n\t\t\t$F111040 ( sllbs , soilLayers ) k = divide ( Math . log ( FLOAT00 ) + STRING00 , substract ( rd , pp ) ) ; \n\t\t\tfor ( $F10914 ( i , soilLayers ) ) { \n\t\t\t\tsllbs [ i ] = $F86089 ( soilLayers , i ) ( STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( NumberFormatException e ) { \n\t\t\tLOG . error ( $F5963 ( e ) ) ; \n\t\t\treturn results ; \n\t\t\t} \n\t\t} \n\tresult . add ( round ( getGrowthFactor ( divide ( $F24322 ( sllbs ) ) , pp , k , m ) , INT00 ) ) ; \n\tfor ( $F2674 ( i , sllbs ) ) { \n\t\tresult . add ( round ( getGrowthFactor ( average ( sllbs [ i ] , $F12139 ( sllbs , i ) ) , pp , k , m ) , INT00 ) ) ; \n\t\t} \n\t$F2725 ( results , var , result ) return results ; \n\t} \n"}, {"code": "public static HashMap $F3015882 getIcnDistribution ( HashMap data , String icin ) { \n\tHashMap $F3015882 results = new HashMap $F3015882 $F2 ; \n\t$F16845591 soilLayers ; \n\t$F10937 ( soilLayers , getSoilLayer , data ) $F10508 ( icin , sum ) if $F112 ( icin ) { \n\t\t$F5572 ( LOG , icin ) return results ; \n\t\t} \n\t$F19733 ( lastSllb ) $F90535 ( productSBXTH , soilLayers ) for ( $F10914 ( i , soilLayers ) ) { \n\t\t$F129099 $F199 ( soilLayer , soilLayers , i ) ; \n\t\t$F1979370 ( sllb , getValueOr , soilLayer ) $F1979370 ( slbdm , getValueOr , soilLayer ) $F5618 ( thick , substract , sllb , lastSllb ) $F62172 ( productSBXTH , i , product , slbdm , thick ) if $F32580 ( productSBXTH , i ) { \n\t\t\t$F182618 ( LOG , sllb , slbdm ) return results ; \n\t\t\t} \n\t\tlastSllb = sllb ; \n\t\t} \n\t$F8494 ( totalSBXTH , sum , productSBXTH ) if ( compare ( totalSBXTH , STRING00 , CompareMode . EQUAL ) ) { \n\t\t$F15466 ( LOG ) return results ; \n\t\t} \n\tString nppm = divide ( $F2754 ( product , icin ) , totalSBXTH ) ; \n\t$F573849 ( icnh4 , product , nppm ) $F573849 ( icno3 , product , nppm ) $F88216 $F8444 ( icnTotArr ) ; \n\t$F88216 $F8444 ( icnh4Arr ) ; \n\t$F88216 $F8444 ( icno3Arr ) ; \n\tfor ( $F2674 ( i , productSBXTH ) ) { \n\t\tString icn_tot = divide ( $F14117 ( product , productSBXTH , i , icin ) , totalSBXTH ) ; \n\t\ticnTotArr . add ( $F52478 ( round , icn_tot ) ) ; \n\t\ticnh4Arr . add ( $F52478 ( round , icnh4 ) ) ; \n\t\ticno3Arr . add ( $F52478 ( round , icno3 ) ) ; \n\t\t} \n\t$F6257 ( results , icnTotArr ) $F6257 ( results , icnh4Arr ) $F6257 ( results , icno3Arr ) return results ; \n\t} \n"}, {"code": "protected static String getGrowthFactor $F1245 ( mid , pp , k , m ) { \n\tif ( compare ( mid , pp , CompareMode . NOTGREATER ) ) $F356 ( m ) else { \n\t\treturn multiply ( m , exp ( $F127556 ( multiply , k , substract , mid , pp ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected static ArrayList getSoilLayer ( HashMap data ) { \n\tif ( $F30148 ( data ) || $F473374 ( data ) ) { \n\t\treturn MapUtil . getBucket ( data , STRING00 ) . getDataList ( ) ; \n\t\t} \n\telse { \n\t\treturn new BucketEntry ( data ) . getDataList ( ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F16845591 splittingSoillayer ( HashMap data , boolean isICLayer ) { \n\tif ( isICLayer ) { \n\t\treturn splittingLayers ( ExperimentHelper . getICLayer ( data ) , STRING00 , STRING00 , STRING00 ) ; \n\t\t} \n\telse { \n\t\treturn splittingLayers ( getSoilLayer ( data ) , STRING00 , STRING00 , STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F16845591 splittingSoillayer ( HashMap data , boolean isICLayer , String fstLyrThk , String sndLyrThk ) { \n\tif ( isICLayer ) { \n\t\treturn splittingLayers ( ExperimentHelper . getICLayer ( data ) , STRING00 , fstLyrThk , sndLyrThk ) ; \n\t\t} \n\telse { \n\t\treturn splittingLayers ( getSoilLayer ( data ) , STRING00 , fstLyrThk , sndLyrThk ) ; \n\t\t} \n\t} \n"}, {"code": "public static HashMap $F3015882 getSoilValsFromOthPara ( HashMap data , String calcMethod , $F252701 ( calcVars ) ) { \n\tHashMap $F3015882 $F604449 ( rets ) ; \n\t$F1399019 calcMtds ; \n\t$F252701 ( calcVarsFinal ) ; \n\tif $F187691 ( calcMethod ) $F24706 ( calcMethod ) try { \n\t\tString packageName = SoilHelper . class . getPackage ( ) . getName ( ) ; \n\t\tClass calClass = Class . forName ( packageName + STRING00 + calcMethod ) ; \n\t\t$F1955127 ( calcMtds ) $F1955127 ( calcVarsFinal ) if $F23577 ( calcVars ) { \n\t\t\tfor ( $F159648 ( mtd , calClass ) ) { \n\t\t\t\t$F2250 ( mtdName , mtd ) if $F5667 ( mtdName ) { \n\t\t\t\t\t$F528 ( calcMtds , mtd ) String var = $F20064 ( mtdName ) . toLowerCase ( ) ; \n\t\t\t\t\t$F528 ( calcVarsFinal , var ) rets . put ( var , $F8443 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tfor ( String var : calcVars ) { \n\t\t\t\ttry { \n\t\t\t\t\tif $F28586 ( rets , var ) { \n\t\t\t\t\t\tcalcMtds . add ( calClass . getDeclaredMethod ( STRING00 + $F89435 ( var ) , $F25603 ) ) ; \n\t\t\t\t\t\tcalcVarsFinal . add ( $F9283 ( var ) ) ; \n\t\t\t\t\t\trets . put ( var , $F8443 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse $F26017 ( LOG , var ) } \n\t\t\t\tcatch ( NoSuchMethodException e ) $F182619 ( LOG , var , calcMethod ) } \n\t\t\t} \n\t\t$F16845591 layers = getSoilLayer ( data ) ; \n\t\tfor ( $F129099 layer : layers ) { \n\t\t\t$F235538 ( vals ) if $F42444 ( calcMethod ) { \n\t\t\t\t$F1979370 ( sand , getValueOr , layer ) $F1979370 ( clay , getValueOr , layer ) String om = product ( $F3726 ( getValueOr , layer ) , STRING00 ) ; \n\t\t\t\t$F1979370 ( grave , getValueOr , layer ) if $F25224 ( sand ) { \n\t\t\t\t\tsand = substract ( STRING00 , clay , $F3726 ( getValueOr , layer ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( $F7429 ( om , sand ) || $F14426 ( clay ) ) { \n\t\t\t\t\t$F16516 ( LOG ) $F23605 } \n\t\t\t\tvals = new String $F60828 ( sand , clay , om , grave ) ; \n\t\t\t\t} \n\t\t\tfor ( $F10914 ( i , calcVarsFinal ) ) { \n\t\t\t\t$F75598 ( var , calcVarsFinal , i ) try { \n\t\t\t\t\tString val ; \n\t\t\t\t\tval = ( String ) $F198 ( calcMtds , i ) . invoke ( $F128902 ( calClass , vals ) ) ; \n\t\t\t\t\t$F9874 ( rets , var , val ) } \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tLOG . error ( $F450167 ( Functions , e ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( ClassNotFoundException e ) { \n\t\t$F5572 ( LOG , calcMethod ) return rets ; \n\t\t} \n\treturn rets ; \n\t} \n"}, {"code": "public static void writeFile ( BufferedInputStream reader , BufferedOutputStream writer ) throws IOException { \n\t$F18718 ( buff ) int numChars ; \n\twhile ( $F101757 ( numChars , reader , buff ) != $F3745 ) $F34946 ( writer , buff , numChars ) } \n"}, {"code": "public static void createIntermediateFolders ( String absoluteFile ) throws FileNotFoundException { \n\tif $F112 ( absoluteFile ) { \n\t\t$F242160 ( absoluteFile ) } \n\t$F8494 ( normalizedAbsoluteFile , normalizePath , absoluteFile ) int endIndex = normalizedAbsoluteFile . endsWith ( PathUtils . SLASH ) ? $F1203 ( normalizedAbsoluteFile ) : normalizedAbsoluteFile . lastIndexOf ( PathUtils . SLASH ) ; \n\t$F2532 ( filePath , normalizedAbsoluteFile , endIndex ) $F2592 ( filePath ) . mkdirs ( ) ; \n\t} \n"}, {"code": "public static String normalizePath ( String path ) { \n\tString retval = path ; \n\tretval = retval . replaceAll ( PathUtils . REGEX_MULTIPLE_SLASH , PathUtils . REGEX_SLASH ) ; \n\tretval = retval . replaceAll ( PathUtils . REGEX_BACKSLASH , PathUtils . REGEX_SLASH ) ; \n\treturn retval ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\t$F102635 ( buf ) try ( final Formatter fmt = new Formatter ( buf ) ) { \n\t\t\tfmt . format ( STRING00 , new Object [ ] { \n\t\t\t\t( int ) values . popDouble ( ) } \n\t\t\t) ; \n\t\t\t} \n\t\tvalues . push ( $F797 ( buf ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static DB getConnection ( String instance ) { \n\tif $F309775 ( Objects , instance ) instance = DEFAULT_INSTANCE ; \n\tif $F28586 ( connections , instance ) $F890 ( initialize , instance ) $F30910 ( connections , instance ) } \n"}, {"code": "public static void set ( MutableLongArrayND a0 , LongSupplier s ) { \n\ta0 . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\ta0 . set ( t , $F67173 ( s ) ) ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public static MutableLongArrayND apply ( LongArrayND a0 , LongArrayND a1 , LongBinaryOperator op , MutableLongArrayND result ) { \n\tUtils . checkForEqualSizes ( a0 , a1 ) ; \n\tMutableLongArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F61827 ( operand0 , a0 , t ) $F61827 ( operand1 , a1 , t ) long r = op . applyAsLong ( operand0 , operand1 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "public static MutableLongArrayND apply ( LongArrayND a0 , LongUnaryOperator op , MutableLongArrayND result ) { \n\tMutableLongArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F61827 ( operand0 , a0 , t ) long r = op . applyAsLong ( operand0 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "private static MutableLongArrayND validate ( LongArrayND a , MutableLongArrayND result ) { \n\tif $F112 ( result ) { \n\t\tresult = LongArraysND . create ( $F1976 ( a ) ) ; \n\t\t} \n\telse { \n\t\tUtils . checkForEqualSizes ( a , result ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static void copyBufferedStream ( BufferedInputStream sourceStream , BufferedOutputStream destinationStream , boolean closeStreams ) throws IOException { \n\t$F18718 ( buffer ) $F1987 ( bytesRead ) try { \n\t\t$F34947 ( bytesRead , sourceStream , buffer , destinationStream ) } \n\tfinally { \n\t\tif ( closeStreams ) $F235435 ( sourceStream , destinationStream ) } \n\t} \n"}, {"code": "public static void copyStream ( InputStream sourceStream , OutputStream destinationStream , boolean closeStreams ) throws IOException { \n\tBufferedOutputStream bufferedOutputStream = $F59641 ( destinationStream ) ; \n\ttry { \n\t\tcopyBufferedStream ( $F72276 ( sourceStream ) , bufferedOutputStream , closeStreams ) ; \n\t\t} \n\tfinally { \n\t\tif ( ! closeStreams ) $F82687 ( bufferedOutputStream ) } \n\t} \n"}, {"code": "public static $F1975 getBytes ( InputStream sourceStream , boolean closeStream ) throws IOException { \n\t$F21492 ( destinationStream ) Streams . copyStream ( sourceStream , destinationStream , closeStream ) ; \n\t$F40825 ( destinationStream ) } \n"}, {"code": "$F1 protected HttpRequestBase onInitiate ( ProcessorChainLink < HttpRequestBase , RequestProcessorException > root , Object ... args ) { \n\tInvocationContext context = assertAssignable ( assertNotEmpty ( args ) [ INT00 ] , InvocationContext . class ) ; \n\tHttpRequestBase request = RequestUtils . translateRequestMethod ( context ) ; \n\treturn root . getProcessor ( ) . run ( context , request ) ; \n\t} \n"}, {"code": "$F1 protected HttpRequestBase onTraverse ( HttpRequestBase result , ProcessorChainLink < HttpRequestBase , RequestProcessorException > successor , Object ... args ) { \n\treturn successor . getProcessor ( ) . run ( $F88900 ( args , result ) ) ; \n\t} \n"}, {"code": "public static WebValidator notBlankSpace $F1195 ( propertyName , propertyValue ) { \n\tWebValidator valid ; \n\tif ( $F1930 ( StringUtils , propertyValue ) || $F96377 ( propertyValue ) != INT00 ) { \n\t\tvalid = new WebValidator ( $F2046582 ) ; \n\t\t} \n\telse { \n\t\tvalid = new WebValidator ( false , propertyName + STRING00 ) ; \n\t\t} \n\treturn valid ; \n\t} \n"}, {"code": "public static WebValidator length $F1684389 ( propertyName , propertyValue , start , end ) { \n\tWebValidator valid = new WebValidator ( $F2046582 ) ; \n\tif $F109626 ( StringUtils , propertyValue ) $F356 ( valid ) $F57428 ( length , ValidatorUtils , propertyValue ) if ( start == INT00 && length > end ) { \n\t\tvalid = new WebValidator ( false , $F55709 ( propertyName , end ) ) ; \n\t\t} \n\telse if $F91079 ( length , start , end ) { \n\t\t$F1200 ( s ) $F125697 ( s , propertyName , start , end ) . append ( STRING00 ) ; \n\t\tvalid = new WebValidator ( false , $F797 ( s ) ) ; \n\t\t} \n\treturn valid ; \n\t} \n"}, {"code": "public static $F1372 T parseInMain ( $F7906 ( argsType ) , $F21 args ) { \n\treturn parseInMain ( argsType , args , Parsers . createFieldParserFactory ( ) ) ; \n\t} \n"}, {"code": "public static $F1372 T parseInMain ( $F7906 ( argsType ) , $F21 args , FieldParserFactory parsers ) { \n\ttry $F12176 ( parse , argsType , args , parsers ) catch ( YarrgParseException e ) { \n\t\t$F10394 ( System ) ( e . getExitMessage ( ) ) ; \n\t\t$F17380 ( System ) $F3687 } \n\t} \n"}, {"code": "public static $F1372 T parse ( $F7906 ( argsType ) , $F21 args ) throws YarrgParseException { \n\treturn parse ( argsType , args , Parsers . createFieldParserFactory ( ) ) ; \n\t} \n"}, {"code": "public static $F1372 T parse ( $F7906 ( argsType ) , $F21 args , FieldParserFactory parsers ) throws YarrgParseException { \n\treturn new Command $F1372 ( argsType , parsers ) . parse ( args ) ; \n\t} \n"}, {"code": "$F9476 public void setCtx ( ApplicationContext _ctx ) { \n\tif ( LambdaSpringUtil . ctx == null ) { \n\t\tLambdaSpringUtil . ctx = _ctx ; \n\t\t} \n\t} \n"}, {"code": "public static void wireInSpring $F2317 ( o , myBeanName ) { \n\tif $F112 ( ctx ) { \n\t\tsynchronized ( lck ) { \n\t\t\tif $F112 ( ctx ) { \n\t\t\t\t$F2109 ( LOG ) ctx = new ClassPathXmlApplicationContext ( globalRootContextPath ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse $F155966 ( LOG ) AutowireCapableBeanFactory factory = ctx . getAutowireCapableBeanFactory ( ) ; \n\tfactory . autowireBean ( o ) ; \n\tfactory . initializeBean ( INT00 , myBeanName ) ; \n\t} \n"}, {"code": "$F1 public ArrayFList $F26212 filter ( Predicate $F59476 filter ) { \n\treturn $F4018 ( ArrayFList , inner ) . filter ( filter ) ; \n\t} \n"}, {"code": "$F1 public void marshal ( final Object obj , final Result result ) { \n\tif $F112 ( _transformer ) { \n\t\t$F562087 ( super , obj , result ) } \n\telse { \n\t\t$F8494 ( xml , _simpleMarshalToString , obj ) Source source = new StreamSource $F49963 ( xml ) ; \n\t\t$F309707 ( _transformer , source , result ) } \n\t} \n"}, {"code": "public static final String join ( CharSequence delimiter , CharSequence ... strs ) { \n\treturn StringUtils . join ( $F5646 ( strs , delimiter ) ) ; \n\t} \n"}, {"code": "public static $F21 split $F24307 ( str , delim ) { \n\t$F184463 ( strs ) int len ; \n\tint start , end ; \n\t$F92286 ( str , EMPTY_STRING_ARRAY ) if ( ( $F12037 ( len , str ) ) == INT00 ) return $F199040 ; \n\t$F97850 ( strs , len ) ; \n\tfor ( start = INT00 ; \n\tstart < len && ( $F36089 ( end , str , delim , start ) ) >= INT00 ; \n\tstart = end + INT00 ) $F96759 ( strs , str , start , end ) strs . add ( $F6991 ( str , start ) ) ; \n\t$F58520 ( strs , EMPTY_STRING_ARRAY ) } \n"}, {"code": "private void exploreClass $F2614 ( clazzToAdd ) throws IntrospectionException { \n\tList < InnerPropertyDescriptor > classList = getProperties ( clazzToAdd ) ; \n\tfor ( InnerPropertyDescriptor descriptor : classList ) $F243265 ( map , descriptor ) this . list . addAll ( classList ) ; \n\t$F285918 ( superClazz , clazzToAdd ) $F20969 ( superClazz , exploreClass ) } \n"}, {"code": "public void readToExistingBean ( InputStream is , ThirdPartyParseable target ) throws IllegalAccessException , UnrecognizedFormatException { \n\treadToExistingBean ( new EndianAwareDataInputStream ( $F80518 ( is ) ) , target ) ; \n\t} \n"}, {"code": "public void readToExistingBean ( EndianAwareDataInputStream is , ThirdPartyParseable target ) throws IllegalAccessException , UnrecognizedFormatException { \n\t$F564 ( ensureContextInstantiatedForReading , is , target ) target . describeFormat ( this ) ; \n\tpopBean ( ) ; \n\t} \n"}, {"code": "public < CLASS extends ThirdPartyParseable > CLASS readToNewBean ( InputStream is , Class < CLASS > clazz ) throws IllegalAccessException , UnrecognizedFormatException { \n\treturn readToNewBean ( new EndianAwareDataInputStream ( $F80518 ( is ) ) , clazz ) ; \n\t} \n"}, {"code": "public < CLASS extends ThirdPartyParseable > CLASS readToNewBean ( EndianAwareDataInputStream is , Class < CLASS > clazz ) throws IllegalAccessException , UnrecognizedFormatException { \n\tCLASS result = null ; \n\ttry { \n\t\tresult = ( CLASS ) $F6892 ( clazz ) ; \n\t\t$F564 ( ensureContextInstantiatedForReading , is , result ) result . describeFormat ( this ) ; \n\t\t} \n\tcatch ( InstantiationException e ) $F7454 ( e ) $F24161 ( popBean ) return result ; \n\t} \n"}, {"code": "public void writeBean ( ThirdPartyParseable bean , OutputStream os ) { \n\twriteBean ( bean , new EndianAwareDataOutputStream ( $F314294 ( os ) ) ) ; \n\t} \n"}, {"code": "public void writeBean ( ThirdPartyParseable bean , EndianAwareDataOutputStream os ) { \n\t$F184750 ( bean ) $F564 ( ensureContextInstantiatedForWriting , os , bean ) try { \n\t\tbean . describeFormat ( this ) ; \n\t\t} \n\tcatch ( UnrecognizedFormatException e ) $F7454 ( e ) popBean ( ) ; \n\t} \n"}, {"code": "private void ensureContextInstantiatedForReading ( EndianAwareDataInputStream is , ThirdPartyParseable bean ) { \n\tos = null ; \n\t$F1357 ( this , is ) pushBean ( bean ) ; \n\tparseMode = ParseMode . READ ; \n\t} \n"}, {"code": "$F762 private < CLASS > CLASS get ( ThirdPartyParseable obj , String property , Class < ? extends CLASS > propertyReturnClass ) { \n\ttry { \n\t\tfinal $F3703 nullClasses = null ; \n\t\tMethod meth = $F289328 ( obj ) ( STRING00 + $F35733 ( Character , property ) + $F20064 ( property ) , nullClasses ) ; \n\t\tif $F4870 ( propertyReturnClass ) { \n\t\t\tObject result = $F104986 ( meth , obj ) ; \n\t\t\tif ( ! $F298 ( result ) . isEnum ( ) ) return ( CLASS ) new String $F2821 ( result ) ; \n\t\t\telse return ( CLASS ) ( ( $F83793 ( result ) ) . ordinal ( ) + STRING00 ) ; \n\t\t\t} \n\t\treturn ( CLASS ) $F104986 ( meth , obj ) ; \n\t\t} \n\t$F11569 ( e ) } \n"}, {"code": "public void bytesOfCount ( final int count , $F762 final PropertyDestination dest ) { \n\tnew RWHelper $F2 { \n\t\t$F762 $F1 public void read ( EndianAwareDataInputStream is , ThirdPartyParseable bean ) throws IOException { \n\t\t\t$F9435 ( data , count ) if $F3730 ( count ) { \n\t\t\t\t$F248405 ( is , data ) $F52836 ( dest , data , bean ) } \n\t\t\telse if $F2015 ( count ) { \n\t\t\t\t$F248405 ( is , data ) dest . set ( $F88900 ( data , bean ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F1 public void write ( EndianAwareDataOutputStream os , ThirdPartyParseable bean ) throws IOException { \n\t\t\t$F2744 ( obj , dest , bean ) if $F184886 ( obj ) { \n\t\t\t\tos . write ( $F162293 ( obj ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tos . write ( new byte [ ] { \n\t\t\t\t\t( Byte ) obj } \n\t\t\t\t) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t. go ( ) ; \n\t} \n"}, {"code": "$F19091891 public String render ( final String templateName , final String templateChars , final Object dataModel ) throws IOException , TemplateException { \n\treturn templateLoader . withTemplateSource ( templateName , templateChars , new TemplateLoaderFromThreadLocal . Block $F2 { \n\t\t$F1 public String exec ( final TemplateSource templateSource ) throws IOException , TemplateException { \n\t\t\t$F382483 ( sw ) final Template template = cfg . getTemplate ( $F1707675 ( templateSource ) ) ; \n\t\t\t$F283966 ( template , dataModel , sw ) $F1226 ( sw ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F1 public $F197020 $F54755 launchMany ( final $F197020 VMLaunchOptions withLaunchOptions , final $F262554 int count ) throws $F22199250 { \n\tif $F2523 ( count ) { \n\t\tthrow new InternalException $F500 ( count ) ; \n\t\t} \n\tif $F2015 ( count ) { \n\t\treturn Collections . singleton ( launch ( withLaunchOptions ) . getProviderVirtualMachineId ( ) ) ; \n\t\t} \n\tfinal List < $F2542378 > results = new ArrayList < $F2542378 > $F2 ; \n\tNamingConstraints c = NamingConstraints . getAlphaNumeric ( $F34029 ) . withNoSpaces ( ) . withRegularExpression ( STRING00 ) . lowerCaseOnly ( ) . constrainedBy ( STRING00 ) ; \n\tString baseHost = c . convertToValidName ( $F38560 ( withLaunchOptions ) , Locale . US ) ; \n\tif $F112 ( baseHost ) { \n\t\tbaseHost = $F38560 ( withLaunchOptions ) ; \n\t\t} \n\tfor ( $F88761 ( i , count ) ) { \n\t\tString hostName = c . incrementName ( baseHost , i ) ; \n\t\tString friendlyName = withLaunchOptions . getFriendlyName ( ) + STRING00 + i ; \n\t\tVMLaunchOptions options = withLaunchOptions . copy ( hostName == null ? $F38560 ( withLaunchOptions ) + STRING00 + i : hostName , friendlyName ) ; \n\t\t$F5219 ( results , launchAsync , options ) } \n\tPopulatorThread $F641 populator = new PopulatorThread $F641 ( new JiteratorPopulator $F641 $F2 { \n\t\t$F1 public void populate ( $F197020 Jiterator $F641 iterator ) throws Exception { \n\t\t\tList < $F2542378 > original = results ; \n\t\t\tList < $F2542378 > copy = new ArrayList < $F2542378 > $F2 ; \n\t\t\t$F208565 ( exception ) $F2233 ( loaded ) while $F386 ( original ) { \n\t\t\t\tfor ( $F2542378 result : original ) { \n\t\t\t\t\tif $F73004 ( result ) { \n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\titerator . push ( $F144 ( result ) ) ; \n\t\t\t\t\t\t\tloaded = true ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t$F228174 ( exception , e ) } \n\t\t\t\t\telse $F529 ( copy , result ) } \n\t\t\t\toriginal = copy ; \n\t\t\t\tcopy = new ArrayList < $F2542378 > $F2 ; \n\t\t\t\t} \n\t\t\tif $F53108 ( exception , loaded ) $F4760 ( exception ) } \n\t\t} \n\t) ; \n\tpopulator . populate ( ) ; \n\t$F115962 ( populator ) } \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws IOException , TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tif $F2911100 ( element ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tFormat format = ( Format ) arguments [ INT00 ] ; \n\tString text = content . getString ( scope , propertyPath , format ) ; \n\tif $F268 ( text ) { \n\t\tserializer . writeTextContent ( text ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "$F1 public Object format ( Object value ) { \n\t$F3446 ( value , nullStringValue ) if $F6605 ( value ) $F3342 ( asList , value ) else if $F257321 ( value ) { \n\t\tDate $F230697 ( date , value ) ; \n\t\tif ( $F31809 ( date ) % ONE_DAY_IN_MILLIS == INT00 ) { \n\t\t\treturn $F277222 ( datePattern ) . format ( date ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn $F277222 ( dateTimePattern ) . format ( date ) ; \n\t\t\t} \n\t\t} \n\telse if ( value instanceof CompositeData ) { \n\t\treturn toMap ( ( CompositeData ) value ) ; \n\t\t} \n\telse if $F356693 ( value ) { \n\t\treturn parseXmlElement ( ( Element ) value ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "private String parseXmlElement ( Element element ) { \n\tif ( $F356739 ( element ) instanceof Text ) { \n\t\tText text = ( Text ) $F356739 ( element ) ; \n\t\t$F454632 ( text ) } \n\t$F867 ( toXml , element ) } \n"}, {"code": "private String toXml ( Node node ) { \n\ttry { \n\t\tTransformer transformer = $F1102630 ( TransformerFactory ) ( ) ; \n\t\tStreamResult result = new StreamResult ( $F6361 ) ; \n\t\tDOMSource $F309695 ( source , node ) ; \n\t\t$F309707 ( transformer , source , result ) return $F30486 ( result ) . toString ( ) ; \n\t\t} \n\tcatch ( TransformerException ex ) $F5457 ( node , ex ) } \n"}, {"code": "private Object asList ( Object value ) { \n\t$F2612 $F64290 ( componentClass , value ) ; \n\tif $F214120 ( componentClass ) { \n\t\tif ( $F201942 ( componentClass ) ) $F3342 ( asIntList , value ) else if ( $F201958 ( componentClass ) ) $F3342 ( asLongList , value ) else if ( componentClass . equals ( $F48913 ) ) $F3342 ( asBooleanList , value ) else if ( componentClass . equals ( $F379841 ) ) $F3342 ( asShortList , value ) else if ( componentClass . equals ( $F155766 ) ) $F3342 ( asByteList , value ) else $F3342 ( asCharList , value ) } \n\telse $F14249 ( asList , value , componentClass ) } \n"}, {"code": "private $F87249 asIntList ( Object value ) { \n\t$F57272 values = $F162317 ( value ) ; \n\t$F87249 list = new $F92623 $F27612 ( values ) ; \n\tfor ( int integer : values ) $F529 ( list , integer ) return list ; \n\t} \n"}, {"code": "private $F83924 asLongList ( Object value ) { \n\t$F55422 values = $F162325 ( value ) ; \n\t$F83924 list = new $F203677 $F27612 ( values ) ; \n\tfor ( long longValue : values ) $F529 ( list , longValue ) return list ; \n\t} \n"}, {"code": "private List $F83784 asShortList ( Object value ) { \n\t$F83763 values = $F162309 ( value ) ; \n\tList $F83784 list = new ArrayList $F83784 $F27612 ( values ) ; \n\tfor ( short shortValue : values ) $F529 ( list , shortValue ) return list ; \n\t} \n"}, {"code": "private List $F86119 asByteList ( Object value ) { \n\t$F259897 ( values , value ) List $F86119 list = new ArrayList $F86119 $F27612 ( values ) ; \n\tfor ( byte byteValue : values ) $F529 ( list , byteValue ) return list ; \n\t} \n"}, {"code": "private $F1776 asCharList ( Object value ) { \n\t$F2666 values = $F162301 ( value ) ; \n\t$F1776 list = new ArrayList $F1775 $F27612 ( values ) ; \n\tfor ( char charValue : values ) $F529 ( list , charValue ) return list ; \n\t} \n"}, {"code": "private $F65541 asBooleanList ( Object value ) { \n\t$F18550 values = $F162286 ( value ) ; \n\t$F65541 list = new ArrayList $F34636 $F27612 ( values ) ; \n\tfor ( boolean booleanValue : values ) $F529 ( list , booleanValue ) return list ; \n\t} \n"}, {"code": "private $F1372 $F23339 asList $F49756 ( value , ofClass ) { \n\t$F762 $F58224 values = ( $F58224 ) value ; \n\t$F26753 ( Arrays , values ) } \n"}, {"code": "$F762 private static void log ( final int level , $F1056867 ( messageFormat ) , $F623 final Object ... args ) { \n\tif $F540 ( shouldLog , level ) { \n\t\tLog . println ( level , TAG , $F4182 ( String , messageFormat , args ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void logMethod ( $F623 final Object ... args ) { \n\tif $F540 ( shouldLog , DEBUG ) { \n\t\tLog . println ( $F146303 ( DEBUG , TAG , getMethodLog , args ) ) ; \n\t\t} \n\t} \n"}, {"code": "public IValidator appendError ( IValidator validator ) { \n\t$F92286 ( validator , this ) if ( ! ( validator instanceof WebValidator ) ) $F24432 WebValidator valid = ( WebValidator ) validator ; \n\tif $F126624 ( valid ) return this ; \n\tif ( this . success ) { \n\t\tthis . msg = valid . msg ; \n\t\tthis . success = valid . success ; \n\t\t} \n\telse { \n\t\t$F1232 ( msg ) ( $F614374 ( valid ) ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public IValidator notBlankSpace $F1195 ( propertyTitle , propertyValue ) { \n\treturn this . appendError ( WebValidatorRestrictor . notBlankSpace ( propertyTitle , propertyValue ) ) ; \n\t} \n"}, {"code": "static Class resolveObjectClass ( Type objectType ) { \n\tfinal Class $F199 ( type , PRIMITIVE_PARAMETER_TYPES , objectType ) ; \n\t$F3279 ( type ) if $F540 ( isOptionalType , objectType ) $F51498 ( resolveObjectClass , extractTypeFromOptional , objectType ) try { \n\t\treturn ( Class ) objectType ; \n\t\t} \n\tcatch ( ClassCastException e ) $F5152 ( objectType , e ) } \n"}, {"code": "public SearchCriteria setOrders ( final List < ? extends Order > orders ) { \n\tif $F65330 ( orders , getOrders ) $F356 ( this ) if $F98509 ( orders ) $F122746 ( clearOrders , this ) synchronized ( orders ) { \n\t\tfor ( Order order : orders ) { \n\t\t\t$F24434 ( order ) } \n\t\tclearOrders ( ) ; \n\t\tfor ( Order order : orders ) $F890 ( addOrder , order ) } \n\treturn this ; \n\t} \n"}, {"code": "public SearchCriteria addOrder ( final Order order ) { \n\t$F24434 ( order ) $F528 ( _orders , order ) return this ; \n\t} \n"}, {"code": "public SearchCriteria setProjections ( final List < ? extends Projection > projections ) { \n\tif $F98509 ( projections ) $F122746 ( clearProjections , this ) synchronized ( projections ) { \n\t\tfor ( Projection proj : projections ) { \n\t\t\t$F24434 ( proj ) } \n\t\tclearProjections ( ) ; \n\t\tfor ( Projection proj : projections ) $F890 ( addProjection , proj ) } \n\treturn this ; \n\t} \n"}, {"code": "public SearchCriteria addProjection ( final Projection projection ) { \n\t$F24434 ( projection ) $F528 ( _projections , projection ) return this ; \n\t} \n"}, {"code": "private static void resetJavaLibraryPath $F2 { \n\tsynchronized ( $F22867 ( Runtime ) ) { \n\t\ttry { \n\t\t\tField field = $F8989 . getDeclaredField ( STRING00 ) ; \n\t\t\t$F10869 ( field ) field . set ( $F23355 ) ; \n\t\t\tfield = $F8989 . getDeclaredField ( STRING00 ) ; \n\t\t\t$F10869 ( field ) field . set ( $F23355 ) ; \n\t\t\t} \n\t\tcatch ( NoSuchFieldException e ) $F11568 ( e ) $F61685 ( e ) } \n\t} \n"}, {"code": "protected final void setProperty ( Synset synset , PropertyName name , Property property ) { \n\tCast . as ( synset , SynsetImpl . class ) . setProperty ( name , property ) ; \n\t} \n"}, {"code": "public static void copyFile $F24631 ( from , to ) throws RuntimeIOException $F144166 ( copyFile , from , to ) "}, {"code": "$F762 public static void copyFile ( File from , File to , boolean overwrite ) throws RuntimeIOException { \n\tFileChannel inputChannel = null ; \n\tFileChannel outputChannel = null ; \n\ttry { \n\t\tif $F11857 ( from ) throw new RuntimeIOException . FileNotFound ( from ) ; \n\t\tif $F15346 ( to ) { \n\t\t\tto = new File ( $F2515 ( to ) + File . separator + $F507 ( from ) ) ; \n\t\t\t} \n\t\tif $F2486 ( to ) { \n\t\t\tif ( ! overwrite ) throw new RuntimeIOException . FileAlreadyExists ( to ) ; \n\t\t\t} \n\t\telse if ( $F31794 ( to ) ) throw new RuntimeIOException . FailedToCreate ( to ) ; \n\t\tinputChannel = $F1097 ( from ) . getChannel ( ) ; \n\t\toutputChannel = $F11930 ( to ) . getChannel ( ) ; \n\t\t$F45704 ( size , inputChannel ) $F58269 ( copied ) while ( copied < size ) copied += outputChannel . transferFrom ( $F77505 ( inputChannel , copied , size ) ) ; \n\t\t} \n\tcatch ( $F61842 e ) { \n\t\tthrow new RuntimeIOException $F18430 ( e ) ; \n\t\t} \n\t$F403186 ( closeChannels , inputChannel , outputChannel ) } \n"}, {"code": "public static void closeChannels ( AbstractInterruptibleChannel ... channels ) { \n\tfor ( AbstractInterruptibleChannel channel : channels ) { \n\t\t$F92262 ( channel ) try $F2453 ( channel ) catch ( Exception e ) $F47953 ( log , FAILED_TO_CLOSE_CHANNEL , e ) } \n\t} \n"}, {"code": "public static void emptyAndDelete ( File fileOrDir ) { \n\tif $F15346 ( fileOrDir ) { \n\t\t$F49579 ( files , fileOrDir ) for ( File file : files ) $F890 ( emptyAndDelete , file ) } \n\t$F21241 ( fileOrDir ) } \n"}, {"code": "public static $F27567 listFilesRecursively ( File dir ) { \n\t$F27567 fileList = newArrayList ( ) ; \n\t$F564 ( addFilesRecursively , dir , fileList ) return fileList ; \n\t} \n"}, {"code": "public static void addFilesRecursively ( File dir , $F372281 ( fileCollection ) ) { \n\tlog . debug ( $F186722 ( dir ) ) ; \n\t$F49579 ( files , dir ) for ( File file : files ) { \n\t\tif $F15346 ( file ) $F564 ( addFilesRecursively , file , fileCollection ) else $F529 ( fileCollection , file ) } \n\t} \n"}, {"code": "public static String sha1 ( File file ) { \n\t$F99950 ( is ) try { \n\t\t$F101168 ( is , file ) $F867 ( sha1 , is ) } \n\tcatch ( FileNotFoundException fnfe ) { \n\t\tthrow new RuntimeIOException . FileNotFound ( file ) ; \n\t\t} \n\tfinally { \n\t\tif $F268 ( is ) { \n\t\t\ttry $F2453 ( is ) catch ( IOException ioe ) { \n\t\t\t\t$F160923 ( log , file , ioe ) throw new RuntimeIOException ( ioe ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String sha1 ( URL url ) { \n\t$F99950 ( is ) try { \n\t\t$F133738 ( is , url ) $F867 ( sha1 , is ) } \n\tcatch ( IOException ioe ) { \n\t\t$F160923 ( log , url , ioe ) throw new RuntimeIOException ( ioe ) ; \n\t\t} \n\tfinally { \n\t\tif $F268 ( is ) { \n\t\t\ttry $F2453 ( is ) catch ( IOException ioe ) { \n\t\t\t\t$F160923 ( log , url , ioe ) throw new RuntimeIOException ( ioe ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String sha1 ( InputStream is ) { \n\t$F1975 buf = new byte [ $F97766 ] ; \n\t$F1987 ( bytesRead ) MessageDigest md ; \n\ttry $F397264 ( md , MessageDigest ) catch ( NoSuchAlgorithmException nsae ) { \n\t\tthrow new RuntimeIOException $F18430 ( nsae ) ; \n\t\t} \n\ttry { \n\t\twhile $F133740 ( bytesRead , is , buf ) { \n\t\t\t$F380247 ( md , buf , bytesRead ) } \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tthrow new RuntimeIOException $F18430 ( ioe ) ; \n\t\t} \n\t$F129533 ( digest , md ) String hexDigest = new String ( Hex . encodeHex ( digest ) ) ; \n\treturn hexDigest ; \n\t} \n"}, {"code": "public void add ( Object source ) { \n\tif ( source instanceof InputStream ) { \n\t\tadd ( ( InputStream ) source ) ; \n\t\t} \n\telse if ( source instanceof URL ) { \n\t\tadd ( ( URL ) source ) ; \n\t\t} \n\telse if $F4380 ( source ) $F102451 ( add , source ) else { \n\t\tthrow new JclException $F6 ; \n\t\t} \n\t} \n"}, {"code": "public void unloadClass ( String className ) { \n\tif $F632655 ( logger , Level ) { \n\t\t$F2476398 ( logger , className ) } \n\tif $F33656 ( classes , className ) { \n\t\tif $F632655 ( logger , Level ) { \n\t\t\t$F2476398 ( logger , className ) } \n\t\t$F6953 ( classes , className ) try { \n\t\t\tclasspathResources . unload ( formatClassName ( className ) ) ; \n\t\t\t} \n\t\tcatch ( ResourceNotFoundException e ) { \n\t\t\tthrow new JclException $F17437 ( e ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\ttry { \n\t\t\tclasspathResources . unload ( formatClassName ( className ) ) ; \n\t\t\t} \n\t\tcatch ( ResourceNotFoundException e ) { \n\t\t\tthrow new JclException $F17437 ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected String formatClassName ( String className ) { \n\t$F14508 ( className ) if $F24340 ( classNameReplacementChar ) { \n\t\tclassName = $F20675 ( className ) ; \n\t\t} \n\telse { \n\t\tclassName = $F386636 ( className , classNameReplacementChar ) + STRING00 ; \n\t\t} \n\t$F14508 ( className ) return className ; \n\t} \n"}, {"code": "public void setDAO ( final Collection < ? extends DAO $F19378 > dao_list ) { \n\t$F15530 ( dao_list ) for ( DAO $F19378 dao : dao_list ) { \n\t\t$F90687 ( dao ) $F2612 entityClass = $F699823 ( dao ) ; \n\t\t$F15610 ( _LOG_ , entityClass ) $F2725 ( _daoMap , entityClass , dao ) if ( dao instanceof BaseDAO ) { \n\t\t\tBaseDAO . class . cast ( dao ) . setDAORegistry ( this ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "protected < T , K extends Serializable > $F810343 _buildQuery ( final DAO $F208153 dao , $F58638 ( type ) , final QueryParams params ) { \n\t$F810343 query = null ; \n\ttry { \n\t\tquery = dao . createQuery ( ) ; \n\t\tQueryBuilder builder = _getQueryBuilderFactory ( ) . newBuilder ( type ) ; \n\t\tquery = $F88239 ( builder , query , params ) ; \n\t\t} \n\tcatch ( RepositoryConfigurationException ex ) $F4760 ( ex ) catch ( QueryException ex ) $F4760 ( ex ) catch ( Exception ex ) { \n\t\tthrow new QueryException ( ex ) ; \n\t\t} \n\treturn query ; \n\t} \n"}, {"code": "protected static final < T , K extends Serializable > K _key2Id ( final $F618410 key ) { \n\tK id = null ; \n\ttry { \n\t\t$F762 K obj = ( K ) $F6210 ( key ) ; \n\t\tid = obj ; \n\t\t} \n\tcatch ( Exception ex ) $F8383063 ( ex ) return id ; \n\t} \n"}, {"code": "protected static final < T , K extends Serializable > $F283959 _keys2Ids ( final Collection < $F618410 > keys ) { \n\t$F283959 ids = new ArrayList $F53007 $F2 ; \n\tif $F268 ( keys ) { \n\t\tfor ( $F618410 key : keys ) { \n\t\t\t$F762 K id = ( K ) $F6210 ( key ) ; \n\t\t\t$F528 ( ids , id ) } \n\t\t} \n\treturn ids ; \n\t} \n"}, {"code": "public < T , K extends Serializable > T findById ( $F58638 ( type ) , final K id ) { \n\t$F12095 ( _LOG_ , type , id ) $F24610 ( ts_start , System ) $F67491 ( p_object ) try { \n\t\tp_object = $F202750 ( getDAO , type , id ) ; \n\t\t} \n\tcatch ( Exception ex ) $F8383063 ( ex ) _LOG_ . info ( $F376968 ( System , ts_start ) ) ; \n\t_LOG_ . debug ( ( $F686487 ( p_object ) ) ) ; \n\tif $F112 ( p_object ) { \n\t\tObjectNotFoundException ex = new ObjectNotFoundException $F61905 ( type , id ) ; \n\t\t$F362631 ( ex , type ) $F45168 ( ex , id ) throw ex ; \n\t\t} \n\treturn p_object ; \n\t} \n"}, {"code": "public $F208153 DAO $F208153 getDAO $F65165 ( entityClass ) { \n\tif $F112 ( entityClass ) { \n\t\tthrow new ObjectTypeException $F6 ; \n\t\t} \n\tDAO $F208153 dao = null ; \n\ttry { \n\t\t$F762 DAO $F208153 dao_tmp = ( DAO $F208153 ) $F198 ( _daoMap , entityClass ) ; \n\t\tdao = dao_tmp ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new RepositoryConfigurationException ( ex ) ; \n\t\t} \n\tif $F112 ( dao ) { \n\t\tthrow new RepositoryConfigurationException $F2821 ( entityClass ) ; \n\t\t} \n\treturn dao ; \n\t} \n"}, {"code": "public synchronized ProgressMonitor createProgressMonitor $F62952 ( title ) { \n\tfinal TableRowProgressMonitor monitor = new TableRowProgressMonitor ( title ) ; \n\t$F75568 ( row , monitors ) $F528 ( monitors , monitor ) SwingUtilities . invokeLater ( new Runnable $F2 { \n\t\tpublic void run $F2 { \n\t\t\tmonitor . setProgressBar ( new JProgressBar $F2 ) ; \n\t\t\t$F66231 ( fireTableRowsInserted , row ) } \n\t\t} \n\t) ; \n\treturn monitor ; \n\t} \n"}, {"code": "public synchronized Object getValueAt $F12004 ( rowIndex , columnIndex ) { \n\tTableRowProgressMonitor $F199 ( monitor , monitors , rowIndex ) ; \n\tswitch ( columnIndex ) { \n\t\tcase TITLE_COLUMN : return $F463425 ( monitor ) ; \n\t\tcase PROGRESS_COLUMN : return monitor . getProgressBar ( ) ; \n\t\tcase STATUS_COLUMN : return $F2373 ( monitor ) ; \n\t\t$F2377 $F18006 } \n\t} \n"}, {"code": "private synchronized void fireProgressUpdated ( TableRowProgressMonitor source ) { \n\t$F3751 ( row , monitors , source ) if $F9869 ( row ) $F565 ( fireTableCellUpdated , row , PROGRESS_COLUMN ) } \n"}, {"code": "private synchronized void fireStatusUpdated ( TableRowProgressMonitor source ) { \n\t$F3751 ( row , monitors , source ) if $F9869 ( row ) $F565 ( fireTableCellUpdated , row , STATUS_COLUMN ) } \n"}, {"code": "private synchronized void remove ( TableRowProgressMonitor monitor ) { \n\t$F231079 ( row , monitors , monitor ) if $F9869 ( row ) { \n\t\t$F6953 ( monitors , row ) SwingUtilities . invokeLater ( new Runnable $F2 { \n\t\t\tpublic void run $F2 { \n\t\t\t\t$F66231 ( fireTableRowsDeleted , row ) } \n\t\t\t} \n\t\t) ; \n\t\t} \n\t} \n"}, {"code": "$F762 protected RESTBaseElementV1 $F45 getEntity $F80574 ( entity ) { \n\tif ( entity instanceof ProxyObject ) { \n\t\tfinal MethodHandler handler = ( ( ProxyObject ) entity ) . getHandler ( ) ; \n\t\tif ( handler instanceof RESTBaseEntityV1ProxyHandler ) { \n\t\t\treturn ( ( RESTBaseEntityV1ProxyHandler ) handler ) . getEntity ( ) ; \n\t\t\t} \n\t\t} \n\treturn ( RESTBaseElementV1 $F45 ) entity ; \n\t} \n"}, {"code": "public void register ( Object locator , IComponentFactory factory ) { \n\t$F544121 ( locator ) $F544121 ( factory ) _registrations . add ( new Registration ( locator , factory ) ) ; \n\t} \n"}, {"code": "public void registerAsType $F70590 ( locator , type ) { \n\t$F544121 ( locator ) $F544121 ( type ) IComponentFactory factory = new DefaultComponentFactory ( type ) ; \n\t_registrations . add ( new Registration ( locator , factory ) ) ; \n\t} \n"}, {"code": "$F1 public Object canCreate ( Object locator ) { \n\tfor ( Registration registration : _registrations ) { \n\t\tObject thisLocator = $F2010541 ( registration ) ; \n\t\tif $F8962 ( thisLocator , locator ) return thisLocator ; \n\t\t} \n\t$F724 } \n"}, {"code": "$F1 public Object create ( Object locator ) throws CreateException { \n\tfor ( Registration registration : _registrations ) { \n\t\tif ( $F2010541 ( registration ) . equals ( locator ) ) { \n\t\t\ttry { \n\t\t\t\treturn $F230804 ( registration ) . create ( locator ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception ex ) { \n\t\t\t\tif ( ex instanceof CreateException ) throw ( CreateException ) ex ; \n\t\t\t\tthrow ( CreateException ) new CreateException ( null , STRING00 + locator ) . withCause ( ex ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "$F1 protected HttpRequestBase process ( InvocationContext context , HttpRequestBase request ) { \n\ttry { \n\t\tEndpoint endpoint = $F713495 ( context ) . getAnnotation ( Endpoint . class ) ; \n\t\tString path = $F11145 ( endpoint ) + Metadata . findPath ( $F12746 ( context ) ) ; \n\t\tList < Entry < PathParam , Object > > pathParams = Metadata . onParams ( PathParam . class , context ) ; \n\t\tfor ( Entry < PathParam , Object > entry : pathParams ) { \n\t\t\tString name = $F712 ( entry ) . value ( ) ; \n\t\t\t$F4379 ( value , entry ) if ( ! $F27895 ( value ) ) { \n\t\t\t\tStringBuilder errorContext = $F171524 ( $F33472 . getName ( ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( STRING00 ) ; \n\t\t\t\tthrow new RequestProcessorException ( $F206575 ( errorContext ) ) ; \n\t\t\t\t} \n\t\t\tpath = path . replaceAll ( Pattern . quote ( $F320 ( name ) ) , ( ( CharSequence ) value ) . toString ( ) ) ; \n\t\t\t} \n\t\trequest . setURI ( $F4018 ( URI , path ) ) ; \n\t\treturn request ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new RequestProcessorException $F209248 ( context , getClass , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public DynamicMBean getMBeanFor ( Object object ) throws IllegalStateException { \n\tJmxBean jmxBean = AnnotationUtils . getAnnotation ( $F298 ( object ) , JmxBean . class ) ; \n\tif $F112 ( jmxBean ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + JmxBean . class + STRING00 + $F298 ( object ) ) ; \n\t\t} \n\ttry { \n\t\tClassIntrospector classIntrospector = new ClassIntrospectorImpl ( $F298 ( object ) ) ; \n\t\tDynamicMBeanImpl mbean = new DynamicMBeanImpl ( object ) ; \n\t\tmbean . setmBeanInfo ( getInfo ( object , classIntrospector ) ) ; \n\t\t$F2141314 getters = new HashMap $F1529169 $F2 ; \n\t\t$F2141314 setters = new HashMap $F1529169 $F2 ; \n\t\t$F5605 ( resolveGettersAndSetters , classIntrospector , getters , setters ) mbean . setGetters ( getters ) ; \n\t\tmbean . setSetters ( setters ) ; \n\t\tmbean . setOperations ( getOperationsMap ( classIntrospector ) ) ; \n\t\treturn mbean ; \n\t\t} \n\tcatch ( Exception e ) $F5152 ( object , e ) } \n"}, {"code": "private MBeanInfo getInfo ( Object object , ClassIntrospector classIntrospector ) throws IntrospectionException { \n\tJmxBean jmxBean = AnnotationUtils . getAnnotation ( $F298 ( object ) , JmxBean . class ) ; \n\tMBeanInfo beanInfo = new MBeanInfo ( $F6291 ( object ) , $F104967 ( jmxBean ) , getAttributes ( classIntrospector ) , getConstructors ( classIntrospector ) , getOperations ( classIntrospector ) , getNotifications ( object ) ) ; \n\treturn beanInfo ; \n\t} \n"}, {"code": "public Statement generateSetupStatement $F2 { \n\treturn new Statement $F2 { \n\t\t$F1 public void evaluate $F2 throws Throwable { \n\t\t\tAunitRuntime . setParserFactory ( new ParserFactory $F2144 ( parserClass , failOnError , parserSetup ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static int copy ( final InputStream is , final OutputStream os , final WriteListener listener ) throws IOException { \n\t$F38495 ( is ) $F38495 ( os ) $F127211 ( buffer , DEFAULT_BUFFER_SIZE ) $F1987 ( count ) $F1987 ( n ) while ( $F3745 != $F34941 ( n , is , buffer ) ) { \n\t\t$F34945 ( os , buffer , n ) listener . onBytesRead ( n ) ; \n\t\tcount += n ; \n\t\t} \n\t$F42436 ( LOG , count ) return count ; \n\t} \n"}, {"code": "public static long copy ( final InputStream in , final OutputStream out , final long originalByteCount ) throws IOException { \n\t$F411174 ( originalByteCount ) final byte buffer [ ] = $F9432 ( DEFAULT_BUFFER_SIZE ) ; \n\t$F1987 ( len ) $F57820 ( written ) long byteCount = originalByteCount ; \n\ttry { \n\t\twhile $F3730 ( byteCount ) { \n\t\t\tif ( byteCount < DEFAULT_BUFFER_SIZE ) { \n\t\t\t\tlen = in . read ( buffer , INT00 , ( int ) byteCount ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F169731 ( len , in , buffer , DEFAULT_BUFFER_SIZE ) ; \n\t\t\t\t} \n\t\t\tif $F9467 ( len ) { \n\t\t\t\t$F45360 ( LOG ) $F332 } \n\t\t\tbyteCount -= len ; \n\t\t\t$F29452 ( LOG , written ) $F34945 ( out , buffer , len ) written += len ; \n\t\t\t} \n\t\treturn written ; \n\t\t} \n\tcatch ( final IOException e ) { \n\t\tLOG . debug ( $F4242 ( written , originalByteCount , e ) ) ; \n\t\t$F7453 ( e ) throw e ; \n\t\t} \n\tcatch ( final RuntimeException e ) { \n\t\tLOG . debug ( $F4242 ( written , originalByteCount , e ) ) ; \n\t\t$F7453 ( e ) throw e ; \n\t\t} \n\tfinally $F82687 ( out ) } \n"}, {"code": "public static long copy ( final InputStream is , final RandomAccessFile raf , final long offset , long length ) throws IOException { \n\treturn $F2292971 ( copy , is , raf , offset , length ) ; \n\t} \n"}, {"code": "public static long copy ( final InputStream is , final RandomAccessFile raf , final long offset , long length , final LongRangeListener lrl , final WriteListener wl ) throws IOException { \n\t$F411174 ( length ) final byte buffer [ ] = $F9432 ( DEFAULT_BUFFER_SIZE ) ; \n\t$F1987 ( bytesRead ) $F57820 ( written ) long filePosition = offset ; \n\ttry { \n\t\twhile $F3730 ( length ) { \n\t\t\tif ( length < DEFAULT_BUFFER_SIZE ) { \n\t\t\t\tbytesRead = is . read ( buffer , INT00 , ( int ) length ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F169731 ( bytesRead , is , buffer , DEFAULT_BUFFER_SIZE ) ; \n\t\t\t\t} \n\t\t\t$F84338 ( bytesRead ) length -= bytesRead ; \n\t\t\tsynchronized ( raf ) { \n\t\t\t\t$F243434 ( raf , filePosition ) $F34945 ( raf , buffer , bytesRead ) } \n\t\t\tif $F268 ( wl ) { \n\t\t\t\twl . onBytesRead ( bytesRead ) ; \n\t\t\t\t} \n\t\t\tif $F268 ( lrl ) { \n\t\t\t\tlrl . onRangeComplete ( new LongRange ( filePosition , filePosition + bytesRead - INT00 ) ) ; \n\t\t\t\t} \n\t\t\tfilePosition += bytesRead ; \n\t\t\twritten += bytesRead ; \n\t\t\t} \n\t\treturn written ; \n\t\t} \n\tcatch ( final IOException e ) { \n\t\t$F3509 ( LOG , e ) throw e ; \n\t\t} \n\tcatch ( final RuntimeException e ) { \n\t\t$F26016 ( LOG , e ) throw e ; \n\t\t} \n\t} \n"}, {"code": "public void setActive ( boolean active ) { \n\tsuper . setActive ( active ) ; \n\tif ( active ) { \n\t\tthis . start = new AtomicLong $F201471 ( System ) ; \n\t\t} \n\telse { \n\t\tthis . start = new AtomicLong $F62743 ; \n\t\t} \n\t} \n"}, {"code": "public boolean checkCondition $F2 { \n\tlong timeElapsed = $F13205 ( System ) - $F144 ( start ) ; \n\tif ( timeElapsed > this . timeout . get ( ) ) { \n\t\tif $F3507 ( LOG ) { \n\t\t\tString logString = $F566632 ( System ) + STRING00 + timeElapsed + STRING00 ; \n\t\t\tLOG . debug ( new CheckConditionFailedLog ( this , logString ) . toString ( ) ) ; \n\t\t\t} \n\t\t$F213 } \n\t$F232 } \n"}, {"code": "$F762 public static String convertDomToString ( Document doc ) throws $F22199250 { \n\ttry { \n\t\t$F90659 ( doc ) $F6364 ( stw ) Transformer serializer = $F1102630 ( TransformerFactory ) ( ) ; \n\t\tserializer . transform ( $F309694 ( doc ) , $F309698 ( stw ) ) ; \n\t\t$F445298 ( stw ) $F724 } \n\tcatch ( TransformerConfigurationException e ) $F10474555 ( e ) catch ( TransformerFactoryConfigurationError e ) $F10474555 ( e ) catch ( TransformerException e ) $F10474555 ( e ) } \n"}, {"code": "$F1 public ICriteria addIfNotBlank ( Restrictor restrictor ) { \n\tif ( restrictor instanceof SimpleRestrictor ) { \n\t\tObject val = ( ( SimpleRestrictor ) restrictor ) . getValue ( ) ; \n\t\t$F92286 ( val , this ) if $F4380 ( val ) { \n\t\t\t$F105093 ( valStr , val ) if $F96379 ( valStr ) return this ; \n\t\t\t} \n\t\telse if $F184631 ( val ) { \n\t\t\tLong $F184700 ( valLong , val ) ; \n\t\t\t$F91391 ( valLong , this ) } \n\t\telse if $F184628 ( val ) { \n\t\t\tInteger $F184694 ( valInteger , val ) ; \n\t\t\t$F91391 ( valInteger , this ) } \n\t\t} \n\treturn this . addRestrictor ( restrictor ) ; \n\t} \n"}, {"code": "private ICriteria addSimpleExpression ( Restrictor criterion ) { \n\tSimpleRestrictor e = ( SimpleRestrictor ) criterion ; \n\tString restriction = e . getRestriction ( ) ; \n\tif ( this . hasAlias ( ) ) { \n\t\tqueryString . append ( this . alias ) . append ( STRING00 ) ; \n\t\t} \n\tqueryString . append ( $F6163 ( e ) ) ; \n\t$F1212 ( queryString , restriction ) if $F598850 ( restriction , restriction_isNull , restriction_isNotNull ) $F356 ( this ) if ( this . namedParam ) { \n\t\t$F6788 ( queryString , VALUE_NAMED_SIGN ) ( $F6163 ( e ) ) ; \n\t\tnamedValues . put ( $F6163 ( e ) . trim ( ) , $F269 ( e ) ) ; \n\t\t} \n\telse { \n\t\t$F1212 ( queryString , VALUE_PLACEHOLDER ) $F72505 ( values , e ) } \n\treturn this ; \n\t} \n"}, {"code": "private ICriteria addExpressionCriterion ( Restrictor criterion ) { \n\tExpressionRestrictor e = ( ExpressionRestrictor ) criterion ; \n\tif ( this . hasAlias ( ) ) { \n\t\tqueryString . append ( this . alias ) . append ( STRING00 ) ; \n\t\t} \n\tqueryString . append ( $F6163 ( e ) ) ; \n\tqueryString . append ( e . getRestriction ( ) ) ; \n\tqueryString . append ( $F28270 ( e ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "private ICriteria addLogicalExpression ( Restrictor criterion ) { \n\tLogicRestrictor e = ( LogicRestrictor ) criterion ; \n\tRestrictor $F219108 ( ic1 , e ) ; \n\tRestrictor $F219111 ( ic2 , e ) ; \n\tboolean isOr = RestrictType . or . toString ( ) . equals ( e . getRestriction ( ) ) ; \n\t$F1026647 ( isOr , queryString ) if ( ic1 instanceof SimpleRestrictor ) addSimpleExpression ( ic1 ) ; \n\telse if ( ic1 instanceof LogicRestrictor ) addLogicalExpression ( ic1 ) ; \n\t$F1232 ( queryString ) ( e . getRestriction ( ) ) . append ( STRING00 ) ; \n\tif ( ic2 instanceof SimpleRestrictor ) addSimpleExpression ( ic2 ) ; \n\telse if ( ic2 instanceof LogicRestrictor ) addLogicalExpression ( ic2 ) ; \n\t$F1026647 ( isOr , queryString ) return this ; \n\t} \n"}, {"code": "$F1 public $F2612 loadClass $F1693 ( className , resolveIt ) { \n\ttry $F20130 ( cl , className ) catch ( ClassNotFoundException e ) $F2200 } \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tContext baseContext = ContextUtils . discover ( $F20708 ( config ) ) ; \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . SYSTEM_SERVICE ) ; \n\tfor ( Field field : fields ) { \n\t\tif $F498138 ( field ) $F10869 ( field ) try { \n\t\t\tString serviceName = field . getAnnotation ( InjectSystemService . class ) . value ( ) ; \n\t\t\tfield . set ( $F20708 ( config ) , baseContext . getSystemService ( serviceName ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws TemplateException { \n\tif ( ! ( $F14426 ( propertyPath ) || isStrictObject ( scope ) ) ) { \n\t\tthrow new TemplateException ( STRING00 , element , $F298 ( scope ) ) ; \n\t\t} \n\tObject value = $F124779 ( content , scope , propertyPath ) ; \n\tif $F112 ( value ) $F131443 ( log , propertyPath , element ) else if ( ! ( $F14426 ( propertyPath ) || isStrictObject ( value ) ) ) { \n\t\tthrow new TemplateException ( propertyPath , STRING00 , $F298 ( value ) ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "$F1 public void execute ( final Object context , int uiTaskId , final Object ... args ) { \n\tActivity activity = ContextUtils . asActivity ( context ) ; \n\t$F68542 methods = MethodUtils . getAllMethods ( context , UI . class ) ; \n\tfor ( final Method method : methods ) { \n\t\tfinal UI uiTask = method . getAnnotation ( UI . class ) ; \n\t\tif ( $F11145 ( uiTask ) == uiTaskId ) { \n\t\t\tfinal Runnable runnable = new Runnable $F2 { \n\t\t\t\t$F1 public void run $F2 { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tif $F498138 ( method ) $F10869 ( method ) $F128915 ( method , context , args ) } \n\t\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\t\tStringBuilder stringBuilder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( context ) ) . append ( STRING00 ) . append ( $F18256 ( Arrays , args ) ) . append ( STRING00 ) ; \n\t\t\t\t\t\tLog . e ( UITaskService . class . getName ( ) , $F797 ( stringBuilder ) , e ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t; \n\t\t\tif ( uiTask . delay ( ) > NUM00 ) { \n\t\t\t\ttry { \n\t\t\t\t\tThread . sleep ( uiTask . delay ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( InterruptedException ie ) { \n\t\t\t\t\tStringBuilder stringBuilder = $F171524 ( uiTask . delay ( ) ) . append ( STRING00 ) . append ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( context ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F170941 ( getClass ) , $F797 ( stringBuilder ) , ie ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tactivity . runOnUiThread ( runnable ) ; \n\t\t\t$F332 } \n\t\t} \n\t} \n"}, {"code": "$F1 public Population $F34214 kill ( Arguments arguments , Population $F34214 population , Collection $F34214 selected ) { \n\tSet $F34214 organisms = new $F3376 ( $F39719 ( population ) ) ; \n\t$F24149 ( organisms , selected ) return new Population . Default $F50 ( organisms ) ; \n\t} \n"}, {"code": "private void register ( Class < ? extends YamlNode > type , Represent represent ) { \n\tthis . representers . put ( type , represent ) ; \n\tthis . multiRepresenters . put ( type , represent ) ; \n\t} \n"}, {"code": "private Node delegate ( Tag tag , Object value ) { \n\t$F361312 ( Objects , tag ) $F617002 ( node , delegate , value ) $F934341 ( node , tag ) return node ; \n\t} \n"}, {"code": "private MappingNode delegate ( Tag tag , Iterable < Entry < YamlNode , YamlNode > > mapping ) { \n\tList < NodeTuple > $F35088 ( value ) ; \n\tMappingNode node = new MappingNode $F83235 ( tag , value ) ; \n\t$F2725 ( representedObjects , objectToRepresent , node ) $F48974 ( bestStyle ) for ( $F295391 entry : mapping ) { \n\t\tNode $F65941 ( nodeKey , representData , entry ) ; \n\t\tNode $F87877 ( nodeValue , representData , entry ) ; \n\t\tbestStyle = $F156214 ( bestStyle , nodeKey ) ; \n\t\tbestStyle = $F156214 ( bestStyle , nodeValue ) ; \n\t\tvalue . add ( new NodeTuple ( nodeKey , nodeValue ) ) ; \n\t\t} \n\tif ( getDefaultFlowStyle ( ) != FlowStyle . AUTO ) { \n\t\tnode . setFlowStyle ( getDefaultFlowStyle ( ) . getStyleBoolean ( ) ) ; \n\t\t} \n\telse { \n\t\tnode . setFlowStyle ( bestStyle ) ; \n\t\t} \n\treturn node ; \n\t} \n"}, {"code": "private boolean bestStyle ( Node node , boolean bestStyle ) { \n\tif ( node instanceof ScalarNode ) { \n\t\tScalarNode scalar = ( ScalarNode ) node ; \n\t\tif ( $F575660 ( scalar ) == null ) $F1668 } \n\treturn bestStyle ; \n\t} \n"}, {"code": "public static $F1372 Supplier < $F48912 > constructor ( $F7906 ( clazz ) , $F3636 ( parameterTypes ) ) { \n\treturn new ConstructorSupplier $F1372 ( clazz , parameterTypes ) ; \n\t} \n"}, {"code": "public static $F1372 Supplier < $F48912 > constructor ( $F7906 ( clazz ) , Object ... parameters ) { \n\t$F10793 parameterTypes = Lists . newLinkedList ( ) ; \n\tfor ( Object parameter : parameters ) { \n\t\tparameterTypes . add ( $F298 ( parameter ) ) ; \n\t\t} \n\treturn constructor ( clazz , parameterTypes . toArray ( new $F2612 $F31920 ( parameterTypes ) ) ) ; \n\t} \n"}, {"code": "public static $F1372 $F9735 newInstance ( $F7906 ( clazz ) , Object ... parameters ) { \n\treturn new ClassConstructorNewInstanceSupplier $F1372 ( clazz , parameters ) ; \n\t} \n"}, {"code": "public static $F1372 $F9735 newInstance ( $F48912 constructor , Object ... parameters ) { \n\treturn new ConstructorNewInstanceSupplier $F1372 ( constructor , parameters ) ; \n\t} \n"}, {"code": "public static $F3215 $F303293 call ( Object target , Method method , Object ... parameters ) { \n\treturn new MethodSupplier $F3215 $F2144 ( target , method , parameters ) ; \n\t} \n"}, {"code": "protected Dataset < Sequence > getDataset ( SequenceFeaturizer $F26725 featurizer ) { \n\tCorpus c = $F216998 ( Corpus , corpusType ) . source ( corpus ) . format ( corpusFormat ) . build ( ) ; \n\tAnnotatableType [ ] $F57803 ( required ) ; \n\tif $F5678 ( required ) { \n\t\tc = c . annotate ( required ) ; \n\t\t} \n\treturn c . asSequenceDataSet ( new BIOLabelMaker $F46456 ( trainingAnnotation , validTags ) , featurizer ) ; \n\t} \n"}, {"code": "protected PreprocessorList < Sequence > getPreprocessors $F2 { \n\tif $F3730 ( minFeatureCount ) { \n\t\treturn PreprocessorList . create ( new MinCountFilter ( minFeatureCount ) . asSequenceProcessor ( ) ) ; \n\t\t} \n\t$F9163 ( PreprocessorList ) } \n"}, {"code": "protected void train $F2 throws Exception { \n\tfinal SequenceFeaturizer $F26725 featurizer = getFeaturizer ( ) ; \n\tDataset < Sequence > train = getDataset ( featurizer ) ; \n\tPreprocessorList < Sequence > preprocessors = getPreprocessors ( ) ; \n\tif $F98946 ( preprocessors ) { \n\t\ttrain = train . preprocess ( preprocessors ) ; \n\t\t} \n\t$F181664 ( train ) ; \n\tSequenceLabelerLearner learner = getLearner ( ) ; \n\tlearner . setValidator ( getValidator ( ) ) ; \n\tSequenceLabeler $F207814 ( labeler , learner , train ) ; \n\tBIOTagger tagger = new BIOTagger $F2144 ( featurizer , annotationType , labeler ) ; \n\t$F21494 ( tagger , model ) } \n"}, {"code": "$F623 public static UtcTime getNullableUtcTime ( $F197020 ResultSet rs , $F197020 String columnName , $F623 UtcTime defaultTime ) throws SQLException { \n\tfinal Timestamp timestamp = rs . getTimestamp ( columnName , UtcTime . newUtcCalendar ( ) ) ; \n\t$F3446 ( timestamp , defaultTime ) return UtcTime . valueOf ( $F31809 ( timestamp ) ) ; \n\t} \n"}, {"code": "$F197020 public static UtcTime getUtcTime ( $F197020 ResultSet rs , $F197020 String columnName , $F623 UtcTime defaultTime ) throws SQLException { \n\tfinal UtcTime $F2207 ( result , getNullableUtcTime , rs , columnName , defaultTime ) ; \n\t$F3279 ( result ) $F2824 ( columnName ) } \n"}, {"code": "$F1 public MailSendResult send ( MailMessage message ) { \n\t$F975 ( Assert , message ) $F472 ( props ) $F4395 ( props ) $F6257 ( props , smtpHost ) $F6257 ( props , smtpPort ) Session $F2207 ( session , getSession , props , smtpUsername , smtpPassword ) ; \n\ttry { \n\t\tMessage msg = $F665284 ( message , session ) ; \n\t\tEnumeration enumer = $F1104446 ( msg ) ; \n\t\twhile $F5506 ( enumer ) { \n\t\t\tHeader header = ( Header ) $F5507 ( enumer ) ; \n\t\t\tlog . info ( $F828 ( header ) + $F269 ( header ) ) ; \n\t\t\t} \n\t\t$F2109 ( log ) Transport transport = session . getTransport ( STRING00 ) ; \n\t\t$F12095 ( log , smtpHost , smtpPort ) $F134144 ( transport ) transport . sendMessage ( msg , msg . getAllRecipients ( ) ) ; \n\t\t$F2109 ( log ) $F1109 ( transport ) } \n\tcatch ( Exception e ) { \n\t\t$F428173 ( log , e ) return MailSendResult . fail ( ) ; \n\t\t} \n\t$F589511 ( MailSendResult ) } \n"}, {"code": "$F1 public Iterable < LoadBalancerHealthCheck > listLBHealthChecks ( $F623 HealthCheckFilterOptions opts ) throws $F22199250 { \n\t$F11106846 ( APITrace , provider ) gce = provider . getGoogleCompute ( ) ; \n\tArrayList < LoadBalancerHealthCheck > lbhc = new ArrayList < LoadBalancerHealthCheck > $F2 ; \n\ttry { \n\t\tTargetPoolList tpl = gce . targetPools ( ) . list ( $F1726155 ( ctx ) , $F19451481 ( ctx ) ) . execute ( ) ; \n\t\tif ( $F2417 ( tpl ) != null ) { \n\t\t\tIterator < TargetPool > loadBalancers = $F2417 ( tpl ) . iterator ( ) ; \n\t\t\twhile $F11310 ( loadBalancers ) { \n\t\t\t\tTargetPool $F11312 ( lb , loadBalancers ) ; \n\t\t\t\t$F2250 ( loadBalancerName , lb ) $F5033 hcs = lb . getHealthChecks ( ) ; \n\t\t\t\tif ( $F268 ( hcs ) && $F386 ( hcs ) ) { \n\t\t\t\t\t$F60210 ( healthCheckName , hcs ) if $F268 ( healthCheckName ) { \n\t\t\t\t\t\t$F51172 ( healthCheckName ) HttpHealthCheck hc = gce . httpHealthChecks ( ) . get ( $F1726155 ( ctx ) , healthCheckName ) . execute ( ) ; \n\t\t\t\t\t\tif $F268 ( hc ) { \n\t\t\t\t\t\t\tLoadBalancerHealthCheck $F304 ( healthCheckItem , toLoadBalancerHealthCheck , loadBalancerName , hc ) ; \n\t\t\t\t\t\t\t$F528 ( lbhc , healthCheckItem ) } \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\tif ( $F298 ( e ) == GoogleJsonResponseException . class ) { \n\t\t\tGoogleJsonResponseException gjre = ( GoogleJsonResponseException ) e ; \n\t\t\tthrow new GoogleException ( CloudErrorType . GENERAL , $F24713 ( gjre ) , $F6001 ( gjre ) , $F56162 ( gjre ) . getMessage ( ) ) ; \n\t\t\t} \n\t\telse $F22213712 ( e ) } \n\t$F133621 ( APITrace ) return lbhc ; \n\t} \n"}, {"code": "public T first $F2 { \n\t$F58580 $F57803 ( iterator ) ; \n\treturn ( $F379330 ( iterator ) ) ; \n\t} \n"}, {"code": "public static boolean isRunnable ( Method method , $F21 filters ) { \n\tRoxableTest mAnnotation = method . getAnnotation ( RoxableTest . class ) ; \n\tRoxableTestClass cAnnotation = $F65121 ( method ) . getAnnotation ( RoxableTestClass . class ) ; \n\tif $F45819 ( mAnnotation , cAnnotation ) { \n\t\treturn isRunnable ( new FilterTargetData $F2144 ( method , mAnnotation , cAnnotation ) , filters ) ; \n\t\t} \n\t$F232 } \n"}, {"code": "$F762 public static boolean isRunnable ( Class cl , String methodName , $F21 filters ) { \n\ttry { \n\t\tMethod $F1383135 ( m , cl , methodName ) ; \n\t\t$F4282 ( isRunnable , m , filters ) } \n\tcatch ( NoSuchMethodException | SecurityException e ) $F233 } \n"}, {"code": "public static boolean isRunnable ( String name , String technicalName , String key , String tags , String tickets , $F21 filters ) { \n\treturn isRunnable ( new FilterTargetData $F11487 ( tags , tickets , technicalName , name , key ) , filters ) ; \n\t} \n"}, {"code": "private static boolean isRunnable ( FilterTargetData targetData , $F21 filters ) { \n\tif $F44788 ( filters ) $F233 for ( String filter : filters ) { \n\t\t$F30789 ( filterSplitted , filter ) if ( ( $F4388 ( filterSplitted ) && targetData . anyMatch ( filterSplitted [ INT00 ] ) ) || ( $F9139 ( filterSplitted [ INT00 ] ) && targetData . keyMatch ( filterSplitted [ INT00 ] ) ) || ( $F9139 ( filterSplitted [ INT00 ] ) && targetData . nameMatch ( filterSplitted [ INT00 ] ) ) || ( $F9139 ( filterSplitted [ INT00 ] ) && targetData . tagMatch ( filterSplitted [ INT00 ] ) ) || ( $F9139 ( filterSplitted [ INT00 ] ) && targetData . ticketMatch ( filterSplitted [ INT00 ] ) ) ) $F233 } \n\t$F213 } \n"}, {"code": "private String attemptDecryption $F1195 ( key , property ) { \n\ttry { \n\t\tif ( StringUtils . endsWithIgnoreCase ( key , ENCRYPTED_SUFFIX ) ) { \n\t\t\tif $F112 ( encryptionProvider ) throw new RuntimeCryptoException $F6 ; \n\t\t\treturn $F3055519 ( encryptionProvider , property ) ; \n\t\t\t} \n\t\telse $F356 ( property ) } \n\tcatch ( MissingParameterException e ) { \n\t\tthrow new RuntimeCryptoException $F6 ; \n\t\t} \n\t} \n"}, {"code": "private String attemptEncryption $F1195 ( key , property ) { \n\ttry { \n\t\tif ( StringUtils . endsWithIgnoreCase ( key , UNENCRYPTED_SUFFIX ) ) { \n\t\t\tif $F112 ( encryptionProvider ) throw new RuntimeCryptoException $F6 ; \n\t\t\treturn $F590483 ( encryptionProvider , property ) ; \n\t\t\t} \n\t\telse $F356 ( property ) } \n\tcatch ( MissingParameterException mpre ) { \n\t\tthrow new RuntimeCryptoException $F6 ; \n\t\t} \n\t} \n"}, {"code": "private void initializeEncryptionProvider $F2 { \n\tif $F268 ( key ) { \n\t\ttry { \n\t\t\tencryptionProvider = EncryptionProviderFactory . getProvider ( key ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedKeySizeException e ) { \n\t\t\tthrow new RuntimeCryptoException $F18430 ( e ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedAlgorithmException e ) { \n\t\t\tthrow new RuntimeCryptoException $F18430 ( e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void loadKeystore $F2 { \n\t$F2090 ( keypath , this , KEY_PATH_PROPERTY_KEY ) $F2090 ( keyEntryName , this , ENTRY_NAME_PROPERTY_KEY ) $F2090 ( keyStorePassword , this , KEYSTORE_PASSWORD_PROPERTY_KEY ) $F5605 ( loadKeystore , keypath , keyStorePassword , keyEntryName ) } \n"}, {"code": "public void setElements ( final List < ? extends Binding > bindings ) { \n\tif $F98509 ( bindings ) $F139326 ( clear ) for ( Binding binding : bindings ) { \n\t\t$F24434 ( binding ) } \n\tclear ( ) ; \n\tfor ( Binding binding : bindings ) $F890 ( addElement , binding ) } \n"}, {"code": "public int readTag $F2 throws IOException { \n\tif $F560 ( isAtEnd ) { \n\t\tlastTag = INT00 ; \n\t\t$F8383 } \n\t$F147835 ( tag , readRawVarint32 ) if ( tag > > > WireFormat . TAG_TYPE_BITS == INT00 ) { \n\t\tthrow ProtobufException . invalidTag ( ) ; \n\t\t} \n\tlastTag = tag ; \n\treturn tag ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new ParseException $F204847 ; \n\ttry { \n\t\tfinal Object rightSideResult = values . popWhatever ( ) ; \n\t\tvalues . popWhatever ( ) ; \n\t\t$F22657 ( values , rightSideResult ) } \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void writeJSONString ( Collection collection , Writer out ) throws IOException { \n\tif $F112 ( collection ) { \n\t\t$F36360 ( out ) $F254 } \n\t$F48974 ( first ) $F680835 ( iter , collection ) $F36360 ( out ) while $F11310 ( iter ) { \n\t\tif ( first ) first = false ; \n\t\telse $F36360 ( out ) $F58862 ( value , iter ) if $F112 ( value ) { \n\t\t\t$F36360 ( out ) $F23605 } \n\t\tJSONValue . writeJSONString ( value , out ) ; \n\t\t} \n\t$F36360 ( out ) } \n"}, {"code": "public static String toJSONString ( Collection collection ) { \n\t$F382483 ( writer ) try { \n\t\t$F564 ( writeJSONString , collection , writer ) $F1226 ( writer ) } \n\t$F88274 ( e ) } \n"}, {"code": "private void initialiseProviders $F2 { \n\tfinal DBTopicProvider topicProvider = new DBTopicProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTopicProvider . class , topicProvider ) ; \n\tproviderMap . put ( TopicProvider . class , topicProvider ) ; \n\tfinal DBTagProvider tagProvider = new DBTagProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTagProvider . class , tagProvider ) ; \n\tproviderMap . put ( TagProvider . class , tagProvider ) ; \n\tfinal DBTranslatedTopicProvider translatedTopicProvider = new DBTranslatedTopicProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslatedTopicProvider . class , translatedTopicProvider ) ; \n\tproviderMap . put ( TranslatedTopicProvider . class , translatedTopicProvider ) ; \n\tfinal DBTranslatedTopicStringProvider translatedTopicStringProvider = new DBTranslatedTopicStringProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslatedTopicStringProvider . class , translatedTopicStringProvider ) ; \n\tproviderMap . put ( TranslatedTopicStringProvider . class , translatedTopicStringProvider ) ; \n\tfinal DBUserProvider userProvider = new DBUserProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBUserProvider . class , userProvider ) ; \n\tproviderMap . put ( UserProvider . class , userProvider ) ; \n\tfinal DBStringConstantProvider stringConstantProvider = new DBStringConstantProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBStringConstantProvider . class , stringConstantProvider ) ; \n\tproviderMap . put ( StringConstantProvider . class , stringConstantProvider ) ; \n\tfinal DBBlobConstantProvider blobConstantProvider = new DBBlobConstantProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBBlobConstantProvider . class , blobConstantProvider ) ; \n\tproviderMap . put ( BlobConstantProvider . class , blobConstantProvider ) ; \n\tfinal DBFileProvider fileProvider = new DBFileProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBFileProvider . class , fileProvider ) ; \n\tproviderMap . put ( FileProvider . class , fileProvider ) ; \n\tfinal DBLanguageFileProvider languageFileProvider = new DBLanguageFileProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBLanguageFileProvider . class , languageFileProvider ) ; \n\tproviderMap . put ( LanguageFileProvider . class , languageFileProvider ) ; \n\tfinal DBImageProvider imageProvider = new DBImageProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBImageProvider . class , imageProvider ) ; \n\tproviderMap . put ( ImageProvider . class , imageProvider ) ; \n\tfinal DBLanguageImageProvider languageImageProvider = new DBLanguageImageProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBLanguageImageProvider . class , languageImageProvider ) ; \n\tproviderMap . put ( LanguageImageProvider . class , languageImageProvider ) ; \n\tfinal DBCategoryProvider categoryProvider = new DBCategoryProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBCategoryProvider . class , categoryProvider ) ; \n\tproviderMap . put ( CategoryProvider . class , categoryProvider ) ; \n\tfinal DBTopicSourceURLProvider topicSourceURLProvider = new DBTopicSourceURLProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTopicSourceURLProvider . class , topicSourceURLProvider ) ; \n\tproviderMap . put ( TopicSourceURLProvider . class , topicSourceURLProvider ) ; \n\tfinal DBPropertyTagProvider propertyTagProvider = new DBPropertyTagProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBPropertyTagProvider . class , propertyTagProvider ) ; \n\tproviderMap . put ( PropertyTagProvider . class , propertyTagProvider ) ; \n\tfinal DBContentSpecProvider contentSpecProvider = new DBContentSpecProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBContentSpecProvider . class , contentSpecProvider ) ; \n\tproviderMap . put ( ContentSpecProvider . class , contentSpecProvider ) ; \n\tfinal DBTextContentSpecProvider textContentSpecProvider = new DBTextContentSpecProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTextContentSpecProvider . class , textContentSpecProvider ) ; \n\tproviderMap . put ( TextContentSpecProvider . class , textContentSpecProvider ) ; \n\tfinal DBCSNodeProvider csNodeProvider = new DBCSNodeProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBCSNodeProvider . class , csNodeProvider ) ; \n\tproviderMap . put ( CSNodeProvider . class , csNodeProvider ) ; \n\tfinal DBCSInfoNodeProvider csNodeInfoProvider = new DBCSInfoNodeProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBCSInfoNodeProvider . class , csNodeInfoProvider ) ; \n\tproviderMap . put ( CSInfoNodeProvider . class , csNodeInfoProvider ) ; \n\tfinal DBTranslatedContentSpecProvider translatedContentSpecProvider = new DBTranslatedContentSpecProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslatedContentSpecProvider . class , translatedContentSpecProvider ) ; \n\tproviderMap . put ( TranslatedContentSpecProvider . class , translatedContentSpecProvider ) ; \n\tfinal DBTranslatedCSNodeProvider translatedCSNodeProvider = new DBTranslatedCSNodeProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslatedCSNodeProvider . class , translatedCSNodeProvider ) ; \n\tproviderMap . put ( TranslatedCSNodeProvider . class , translatedCSNodeProvider ) ; \n\tfinal DBTranslatedCSNodeStringProvider translatedCSNodeStringProvider = new DBTranslatedCSNodeStringProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslatedCSNodeStringProvider . class , translatedCSNodeStringProvider ) ; \n\tproviderMap . put ( TranslatedCSNodeStringProvider . class , translatedCSNodeStringProvider ) ; \n\tfinal DBLogMessageProvider logMessageProvider = new DBLogMessageProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBLogMessageProvider . class , logMessageProvider ) ; \n\tproviderMap . put ( LogMessageProvider . class , logMessageProvider ) ; \n\tfinal DBServerSettingsProvider serverSettingsProvider = new DBServerSettingsProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBServerSettingsProvider . class , serverSettingsProvider ) ; \n\tproviderMap . put ( ServerSettingsProvider . class , serverSettingsProvider ) ; \n\tfinal DBLocaleProvider localeProvider = new DBLocaleProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBLocaleProvider . class , localeProvider ) ; \n\tproviderMap . put ( LocaleProvider . class , localeProvider ) ; \n\tfinal DBTranslationServerProvider translationServerProvider = new DBTranslationServerProvider ( $F120458 ( getEntityManager , this , getListeners ) ) ; \n\tproviderMap . put ( DBTranslationServerProvider . class , translationServerProvider ) ; \n\tprovidersInitialised = true ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\t$F1968400 ( super , values ) values . push ( new Boolean ( ! values . popBoolean ( ) ) ) ; \n\t$F254 } \n"}, {"code": "public static CloudControlClient createCloudControlClient $F2 { \n\tCredentials credentials = retrieveCredentials ( ) ; \n\tCloudControlClient cloudControlClient = new CloudControlClient ( credentials ) ; \n\treturn cloudControlClient ; \n\t} \n"}, {"code": "public static UpdateDeploymentRequest createUpdateDeploymentRequest $F16060 ( applicationName , deploymentName , commitId ) { \n\tUpdateDeploymentRequest updateDeploymentRequest = new UpdateDeploymentRequest $F2 ; \n\tupdateDeploymentRequest . setApplicationName ( applicationName ) ; \n\tupdateDeploymentRequest . setDeploymentName ( deploymentName ) ; \n\t$F134405 ( updateDeploymentRequest , commitId ) return updateDeploymentRequest ; \n\t} \n"}, {"code": "public static ApplicationRequest createApplicationRequest ( String applicationName ) { \n\tApplicationRequest applicationRequest = new ApplicationRequest $F2 ; \n\tapplicationRequest . setApplicationName ( applicationName ) ; \n\treturn applicationRequest ; \n\t} \n"}, {"code": "public static $F1372 Reflecter $F1372 addJsonExchangeFunc ( Reflecter $F1372 target ) { \n\treturn checkNotNull ( target ) . exchWithField ( JSON_READ_FUNC , JSON_READ_DECISION ) ; \n\t} \n"}, {"code": "public < R , W > JSONer register ( Converter < R , W > converter , String ... properties ) { \n\tfor ( $F24293 ( property , checkNotNull , properties ) ) $F821133 ( converts , property , checkNotNull , converter ) return this ; \n\t} \n"}, {"code": "public < R , W > JSONer register ( Converter < R , W > converter , $F3636 ( types ) ) { \n\tfor ( $F2612 type : checkNotNull ( types ) ) $F821133 ( typeConverts , type , checkNotNull , converter ) return this ; \n\t} \n"}, {"code": "public ReadJSON reader $F2 { \n\tObject obj = checkNotNull ( this . delegate . orNull ( ) , STRING00 ) ; \n\tcheckArgument ( obj instanceof String , STRING00 ) ; \n\treturn new ReadJSON ( $F35330 ( obj , this ) ) ; \n\t} \n"}, {"code": "$F762 public < R , W > Converter < R , W > getTypeConverter $F2614 ( key ) { \n\treturn ( Converter < R , W > ) $F198 ( typeConverts , key ) ; \n\t} \n"}, {"code": "$F762 public < R , W > Converter < R , W > getConverter ( String key ) { \n\treturn ( Converter < R , W > ) $F198 ( converts , key ) ; \n\t} \n"}, {"code": "public final void process ( $F109288 argq , T state ) { \n\ttry { \n\t\tField field = $F298 ( state ) . getField ( fieldName ) ; \n\t\t$F6597 ( value , getOptionValue , argq ) $F52836 ( field , state , value ) } \n\tcatch ( NoSuchFieldException e ) { \n\t\t$F7453 ( e ) throw new UnexpectedException ( e ) ; \n\t\t} \n\tcatch ( IllegalAccessException e ) { \n\t\t$F7453 ( e ) throw new UnexpectedException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1372 int writeListTo ( OutputStream out , $F40294 ( messages ) , $F931805 schema , LinkedBuffer buffer ) throws IOException { \n\tif ( buffer . start != buffer . offset ) $F24431 final YamlOutput output = new YamlOutput $F2144 ( buffer , out , schema ) ; \n\toutput . tail = YamlOutput . writeTag ( schema . messageName ( ) , true , output . sink , output , output . sink . writeByteArray ( START_DIRECTIVE , output , buffer ) ) ; \n\tfor ( T m : messages ) { \n\t\tschema . writeTo ( output . writeSequenceDelim ( ) , m ) ; \n\t\t$F800405 ( LinkedBuffer , out , buffer ) output . clear ( $F11973 ) ; \n\t\t} \n\treturn $F1976 ( output ) ; \n\t} \n"}, {"code": "$F1 public void setReferences ( IReferences references ) { \n\t$F619 loggers = references . getOptional ( new Descriptor ( null , STRING00 , null , null , null ) ) ; \n\tfor ( Object logger : loggers ) { \n\t\tif ( logger instanceof ILogger && logger != this ) _loggers . add ( ( ILogger ) logger ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void write ( LogLevel level , String correlationId , Exception error , String message ) { \n\tfor ( ILogger logger : _loggers ) logger . log ( level , correlationId , error , message ) ; \n\t} \n"}, {"code": "$F1 public void map ( Key key , Value value , Context context ) throws $F10627 { \n\t$F7280 ( writer , context ) init ( ) ; \n\tRecord record = new Record $F2 ; \n\tif $F268 ( inputLabels ) { \n\t\t$F1987 ( i ) for ( ValueWritable vw : key . getGrouping ( ) ) { \n\t\t\t$F89392 ( vw ) . set ( inputLabels [ i ++ ] ) ; \n\t\t\t} \n\t\tfor ( ValueWritable vw : $F6534 ( value ) ) { \n\t\t\t$F89392 ( vw ) . set ( inputLabels [ i ++ ] ) ; \n\t\t\t} \n\t\t} \n\t$F205228 ( record , key ) $F28157 ( record , value ) writer . setDefaultRecord ( record ) ; \n\t$F564 ( filter , record , writer ) } \n"}, {"code": "$F1 public void setup ( Context context ) throws $F10627 { \n\t$F1357 ( this , context ) inputLabels = $F5105 ( context ) . getStrings ( SimpleJob . BEFORE_SUMMARIZER_OUTPUT_LABELS ) ; \n\tboolean label = $F5105 ( context ) . getStrings ( SimpleJob . FILETER_OUTPUT_LABELS ) == null ? true : false ; \n\ttry { \n\t\tif ( context . getCombinerClass ( ) != null ) { \n\t\t\twriter = new CombineWriter ( context . getCombinerClass ( ) , getIntParameter ( SimpleJob . COMBINE_CACHE ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\twriter = new BasicWriter ( label ) ; \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\twriter = new BasicWriter ( label ) ; \n\t\t} \n\tfilterSetup ( ) ; \n\t} \n"}, {"code": "$F1 protected void cleanup ( Context context ) throws $F10627 { \n\tsuper . cleanup ( context ) ; \n\t$F6369 ( writer ) } \n"}, {"code": "$F10880 protected Enum getEnumParameter ( String name ) { \n\treturn $F5105 ( context ) . getEnum ( name , null ) ; \n\t} \n"}, {"code": "$F1 public void link ( EventLinker . Configuration config ) { \n\tfinal Object $F201437 ( listenerTemplate , config ) ; \n\t$F68542 methods = config . getListenerTargets ( EventCategory . ITEM_CLICK ) ; \n\tfor ( final Method method : methods ) { \n\t\tOnItemClickListener onItemClickListener = new OnItemClickListener $F2 { \n\t\t\t$F1 public void onItemClick $F1808309 ( parent , view , position , id ) { \n\t\t\t\ttry { \n\t\t\t\t\tif $F498138 ( method ) $F10869 ( method ) $F75735 ( paramTypes , method ) $F105022 ( params ) for ( $F10839 ( paramType , paramTypes ) ) { \n\t\t\t\t\t\tif ( paramType . equals ( AdapterView . class ) ) $F528 ( params , parent ) else if ( paramType . equals ( $F618006 ) ) $F528 ( params , view ) else if ( $F201942 ( paramType ) ) $F528 ( params , position ) else if ( $F201958 ( paramType ) ) $F528 ( params , id ) } \n\t\t\t\t\tif ( paramTypes . length == $F3413 ( params ) ) method . invoke ( $F462929 ( listenerTemplate , params ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t; \n\t\ttry { \n\t\t\t$F57272 views = method . getAnnotation ( ItemClick . class ) . value ( ) ; \n\t\t\tfor ( int id : views ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( ContextUtils . isActivity ( listenerTemplate ) ) { \n\t\t\t\t\t\t( ( $F584244 ) ContextUtils . asActivity ( listenerTemplate ) . findViewById ( id ) ) . setOnItemClickListener ( onItemClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isFragment ( listenerTemplate ) ) { \n\t\t\t\t\t\t( ( $F584244 ) ContextUtils . asFragment ( listenerTemplate ) . getView ( ) . findViewById ( id ) ) . setOnItemClickListener ( onItemClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse if ( ContextUtils . isSupportFragment ( listenerTemplate ) ) { \n\t\t\t\t\t\t( ( $F584244 ) ContextUtils . asSupportFragment ( listenerTemplate ) . getView ( ) . findViewById ( id ) ) . setOnItemClickListener ( onItemClickListener ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( Exception e ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) . append ( ContextUtils . isActivity ( listenerTemplate ) ? ContextUtils . asActivity ( listenerTemplate ) . getResources ( ) . getResourceName ( id ) : ContextUtils . asFragment ( listenerTemplate ) . getResources ( ) . getResourceName ( id ) ) . append ( STRING00 ) ; \n\t\t\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tStringBuilder builder = $F171524 ( $F507 ( method ) ) . append ( STRING00 ) . append ( $F6291 ( listenerTemplate ) ) . append ( STRING00 ) ; \n\t\t\tLog . e ( $F40175 ( getClass ) , $F797 ( builder ) , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static String signAndEncode $F96892 ( accessKey , canonicalString ) { \n\tif $F109626 ( StringUtils , accessKey ) { \n\t\t$F16516 ( LOG ) $F24431 } \n\tfinal SecretKeySpec signingKey = new SecretKeySpec ( $F15649 ( accessKey ) , HMAC_SHA1_ALGORITHM ) ; \n\tfinal Mac mac ; \n\ttry $F125545 ( mac , Mac , HMAC_SHA1_ALGORITHM ) catch ( final NoSuchAlgorithmException e ) { \n\t\t$F5572 ( LOG , e ) $F52052 ( e ) } \n\ttry { \n\t\t$F35014 ( mac , signingKey ) } \n\tcatch ( final InvalidKeyException e ) { \n\t\t$F5572 ( LOG , e ) $F52052 ( e ) } \n\tfinal String b64 = Base64 . encodeBytes ( mac . doFinal ( $F15649 ( canonicalString ) ) ) ; \n\treturn b64 ; \n\t} \n"}, {"code": "public static void add ( Id id , $F2731 ( data ) ) { \n\tDDSCluster . call ( new MessageBean ( MongoDBDDS . class , $F440748 ( id ) , $F717364 ( id ) , $F5919 ( id ) , STRING00 , data ) ) ; \n\t} \n"}, {"code": "$F1 public boolean containsValidPrefix $F62952 ( key ) { \n\tif $F268 ( key ) { \n\t\t$F444435 ( lock ) try { \n\t\t\tfor ( final String aPrefix : prefixes ) { \n\t\t\t\tif ( $F5249 ( key , aPrefix ) || key . startsWith ( aPrefix + getPrefixDelimiter ( ) ) ) $F233 } \n\t\t\t} \n\t\t$F444443 ( lock ) } \n\t$F213 } \n"}, {"code": "private $F63081 getIterator $F2 { \n\tfinal $F1043 copy = getPrefixes ( ) ; \n\tfinal $F63081 $F60361 ( copyIt , copy ) ; \n\treturn new $F63081 $F2 { \n\t\tprivate $F4728 ( lastOne ) $F58993 ( copyIt ) $F1 public String next $F2 { \n\t\t\tif $F11310 ( copyIt ) $F357240 ( lastOne , copyIt ) else $F58101 return lastOne ; \n\t\t\t} \n\t\t$F1 public void remove $F2 { \n\t\t\ttry { \n\t\t\t\t$F444450 ( lock ) $F6953 ( prefixes , lastOne ) } \n\t\t\t$F444463 ( lock ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public String getPrefix $F2 { \n\tfinal String $F145 ( result , localPrefix ) ; \n\t$F3446 ( result , defaultPrefix ) return result ; \n\t} \n"}, {"code": "$F1 public String getPrefixedKey $F536555 ( key , useOnlyLocalPrefixes ) { \n\t$F444435 ( lock ) try { \n\t\tfinal String prefix = ( useOnlyLocalPrefixes ) ? getLocalPrefix ( ) : getPrefix ( ) ; \n\t\treturn $F268 ( prefix ) ? getPrefixedKey ( prefix , key ) : key ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public String getPrefixedKey $F96892 ( prefixString , key ) { \n\t$F444435 ( lock ) try { \n\t\tif ( prefixString != null && $F6948 ( prefixes , prefixString ) && key != null ) { \n\t\t\treturn $F69025 ( prefixString ) ( getPrefixDelimiter ( ) ) . append ( key ) . toString ( ) ; \n\t\t\t} \n\t\t} \n\t$F444443 ( lock ) $F24431 } \n"}, {"code": "$F1 public $F1043 getPrefixes $F2 { \n\t$F444435 ( lock ) try { \n\t\treturn new $F90455 ( prefixes ) ; \n\t\t} \n\t$F444443 ( lock ) } \n"}, {"code": "$F1 public String getPrefixPart $F62952 ( key ) { \n\tif $F268 ( key ) { \n\t\t$F444435 ( lock ) try { \n\t\t\tfor ( final String prefixString : prefixes ) { \n\t\t\t\tif ( key . startsWith ( prefixString + getPrefixDelimiter ( ) ) ) { \n\t\t\t\t\treturn prefixString + getPrefixDelimiter ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F444443 ( lock ) $F3956 } \n\t$F24431 } \n"}, {"code": "$F1 public void setDefaultPrefix $F62952 ( prefixString ) { \n\t$F444450 ( lock ) try { \n\t\tif ( prefixString == null || $F109625 ( StringUtils , prefixString ) ) $F67413 ( defaultPrefix ) else { \n\t\t\tif $F268 ( prefixes ) { \n\t\t\t\tif $F19273 ( prefixes , prefixString ) $F24432 } \n\t\t\tdefaultPrefix = prefixString ; \n\t\t\t} \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "$F1 public void setPrefix $F62952 ( prefixString ) { \n\t$F444450 ( lock ) try { \n\t\tif ( prefixString == null || $F109625 ( StringUtils , prefixString ) ) $F51479 ( localPrefix ) else { \n\t\t\tif $F268 ( prefixes ) { \n\t\t\t\tif $F19273 ( prefixes , prefixString ) $F24432 } \n\t\t\t$F57566 ( localPrefix , prefixString ) } \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "protected void setPrefixes $F539861 ( prefixesToSet ) { \n\t$F24434 ( prefixesToSet ) final $F1043 $F90458 ( newPrefixes ) ; \n\tfor ( final String prefixString : prefixesToSet ) { \n\t\tif $F206736 ( StringUtils , prefixString ) $F529 ( newPrefixes , prefixString ) } \n\t$F444450 ( lock ) try { \n\t\tprefixes = newPrefixes ; \n\t\tif ( $F871 ( getPrefix ) && ! prefixes . contains ( getPrefix ( ) ) ) { \n\t\t\tdefaultPrefix = null ; \n\t\t\t$F16605 ( localPrefix ) } \n\t\t} \n\t$F444463 ( lock ) } \n"}, {"code": "$F1 public boolean startsWithCurrentPrefix $F62952 ( key ) { \n\t$F444435 ( lock ) try { \n\t\tif ( $F871 ( getPrefix ) && key != null ) { \n\t\t\treturn key . startsWith ( $F153885 ( getPrefix , getPrefixDelimiter ) ) ; \n\t\t\t} \n\t\t} \n\t$F444443 ( lock ) $F213 } \n"}, {"code": "$F762 public static $F26212 ImmutableMultiset $F26212 of ( E e1 , E e2 ) $F14249 ( copyOfInternal , e1 , e2 ) "}, {"code": "public static $F26212 ImmutableMultiset $F26212 copyOf ( $F64808 elements ) $F48385 ( copyOf , Arrays , elements ) "}, {"code": "public static $F26212 ImmutableMultiset $F26212 copyOf ( Iterator $F39164 elements ) { \n\tMultiset $F26212 $F25309 ( multiset , LinkedHashMultiset ) ; \n\t$F26089 ( Iterators , multiset , elements ) $F867 ( copyOfInternal , multiset ) } \n"}, {"code": "protected Map < PropertyKey , Object > properties $F2 { \n\tif $F112 ( properties ) { \n\t\tproperties = new EnumMap $F50 ( PropertyKey . class ) ; \n\t\t} \n\treturn properties ; \n\t} \n"}, {"code": "public PropertyResolver createPropertyResolver ( ResolverWrapper resolverAnnotation ) { \n\tPropertyResolver resolver = null ; \n\tClass < ? extends PropertyResolver > propertyResolverClass = resolverAnnotation . impl ( ) ; \n\tif $F112 ( propertyResolverClass ) { \n\t\t$F16929 ( this ) ( STRING00 ) ; \n\t\tpropertyResolverClass = DefaultPropertyResolver . class ; \n\t\t} \n\telse { \n\t\t$F16929 ( this ) ( $F4308 ( propertyResolverClass ) ) ; \n\t\t} \n\tresolver = this . beanResolver . resolveBeanWithDefaultClass ( propertyResolverClass , DefaultPropertyResolver . class ) ; \n\treturn resolver ; \n\t} \n"}, {"code": "public $F53092 getBootstrapProperties ( ResolverWrapper resolver ) { \n\tif ( resolver . bootstrap ( ) == null ) $F2747 ( Collections ) ConfigurationWrapper wrapper = WrapperFactory . wrap ( resolver . bootstrap ( ) ) ; \n\tif ( wrapper . sources ( ) == null || wrapper . sources ( ) . length == INT00 ) $F2747 ( Collections ) CommonsConfigurationProducer instance = this . producer . get ( ) ; \n\torg . apache . commons . configuration . Configuration config = $F3080907 ( instance , wrapper ) ; \n\tConfigurationMap map = new ConfigurationMap ( config ) ; \n\treturn map ; \n\t} \n"}, {"code": "public $F53092 getDefaultProperties ( ResolverWrapper resolver ) { \n\tif ( resolver == null || $F1202465 ( resolver ) == null || $F1202465 ( resolver ) . length == INT00 ) $F2747 ( Collections ) DefaultProperty [ ] $F9005 ( properties , resolver ) ; \n\t$F53092 propertyMap = new $F1173 $F27612 ( properties ) ; \n\tfor ( DefaultProperty property : properties ) { \n\t\tif ( $F93066 ( property ) == null || $F93066 ( property ) . isEmpty ( ) || $F11145 ( property ) == null ) $F42718 if ( propertyMap . containsKey ( $F93066 ( property ) ) ) $F42718 propertyMap . put ( $F93066 ( property ) , $F11145 ( property ) ) ; \n\t\t} \n\treturn propertyMap ; \n\t} \n"}, {"code": "public $F79106 toDoubleArray $F2 { \n\t$F79110 ( copy , size ) for ( $F6610 ( i , size ) ) $F79113 ( copy , i , elements ) return copy ; \n\t} \n"}, {"code": "public boolean addAll ( DoubleArray items ) { \n\tensureCapacity ( size + items . size ) ; \n\tfor ( $F57279 ( i , items ) ) { \n\t\telements [ size ++ ] = items . elements [ i ] ; \n\t\t} \n\treturn items . size > INT00 ; \n\t} \n"}, {"code": "public static $F96 evalJSON ( String json ) throws JSONFormatException { \n\tJSONParser parser = new JSONParser $F2 ; \n\t$F677673 ( o ) try { \n\t\to = ( JSONObject ) $F42850 ( parser , json ) ; \n\t\t} \n\tcatch ( ParseException e ) { \n\t\tthrow new JSONFormatException $F18430 ( e ) ; \n\t\t} \n\treturn o ; \n\t} \n"}, {"code": "$F1 public RestItem nodeWithId ( Request request , String repositoryName , String workspaceName , String id , int depth ) throws RepositoryException { \n\tSession $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\t$F2289085 ( node , nodeWithId , id , session ) $F4845 ( createRestItem , request , depth , session , node ) } \n"}, {"code": "$F1 public RestItem updateNodeWithId ( Request request , String rawRepositoryName , String rawWorkspaceName , String id , String requestContent ) throws RepositoryException { \n\tSession $F2207 ( session , getSession , request , rawRepositoryName , rawWorkspaceName ) ; \n\t$F2289085 ( node , nodeWithId , id , session ) node = $F39124 ( updateNode , node , stringToJSONObject , requestContent ) ; \n\t$F488159 ( session ) return $F40543 ( createRestItem , request , session , node ) ; \n\t} \n"}, {"code": "$F1 public void deleteNodeWithId ( Request request , String rawRepositoryName , String rawWorkspaceName , String id ) throws RepositoryException { \n\t$F90518 ( rawRepositoryName ) $F90518 ( rawWorkspaceName ) $F90518 ( id ) Session $F2207 ( session , getSession , request , rawRepositoryName , rawWorkspaceName ) ; \n\t$F2289085 ( node , nodeWithId , id , session ) $F16605 ( node ) $F488159 ( session ) } \n"}, {"code": "public static MonitorAndManagementSettings newInstance ( URL settingsXml ) throws IOException , JAXBException { \n\t$F5161 ( istream , settingsXml ) JAXBContext ctx = JAXBContext . newInstance ( MonitorAndManagementSettings . class ) ; \n\treturn ( MonitorAndManagementSettings ) $F560593 ( ctx ) . unmarshal ( istream ) ; \n\t} \n"}, {"code": "public static MonitorAndManagementSettings newInstance ( String settingsXml ) throws JAXBException { \n\tInputStream istream = MonitorAndManagementSettings . class . getResourceAsStream ( settingsXml ) ; \n\tJAXBContext ctx = JAXBContext . newInstance ( MonitorAndManagementSettings . class ) ; \n\treturn ( MonitorAndManagementSettings ) $F560593 ( ctx ) . unmarshal ( istream ) ; \n\t} \n"}, {"code": "public static String urlNonFormEncode $F62952 ( s ) { \n\tif $F109626 ( StringUtils , s ) { \n\t\t$F16516 ( LOG ) $F24431 } \n\ttry { \n\t\treturn URIUtil . encodeQuery ( s , STRING00 ) ; \n\t\t} \n\tcatch ( final URIException e ) { \n\t\t$F182651 ( LOG , s , e ) $F605699 return s ; \n\t\t} \n\t} \n"}, {"code": "public static String urlFormEncode $F62952 ( s ) { \n\tif $F109626 ( StringUtils , s ) { \n\t\t$F16516 ( LOG ) $F24431 } \n\ttry { \n\t\treturn $F572448 ( URLEncoder , s ) ; \n\t\t} \n\tcatch ( final UnsupportedEncodingException e ) { \n\t\t$F182651 ( LOG , s , e ) return s ; \n\t\t} \n\t} \n"}, {"code": "public static String urlFormDecode $F62952 ( s ) { \n\tif $F109626 ( StringUtils , s ) { \n\t\t$F16516 ( LOG ) $F24431 } \n\ttry { \n\t\treturn $F35353 ( URLDecoder , s ) ; \n\t\t} \n\tcatch ( final UnsupportedEncodingException e ) { \n\t\t$F182651 ( LOG , s , e ) return s ; \n\t\t} \n\t} \n"}, {"code": "private static String getKeyValuePair ( final $F362768 param , final boolean formEncoding ) { \n\ttry { \n\t\treturn getKeyValuePair ( $F89557 ( param ) , $F103019 ( param ) , formEncoding ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\t$F182618 ( LOG , param , e ) $F3956 } \n\t} \n"}, {"code": "private static String getKeyValuePair ( final $F65939 param , final boolean formEncoding ) { \n\ttry { \n\t\treturn getKeyValuePair ( $F19016 ( param , formEncoding ) ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\t$F182618 ( LOG , param , e ) $F3956 } \n\t} \n"}, {"code": "private static String getKeyValuePair $F430216 ( key , value , formEncoding ) { \n\t$F102635 ( sb ) final String firstEncoded ; \n\tfinal String secondEncoded ; \n\tif ( formEncoding ) { \n\t\t$F10937 ( firstEncoded , urlFormEncode , key ) $F10937 ( secondEncoded , urlFormEncode , value ) } \n\telse { \n\t\t$F10937 ( firstEncoded , urlNonFormEncode , key ) $F10937 ( secondEncoded , urlNonFormEncode , value ) } \n\t$F1212 ( sb , firstEncoded ) $F1218 ( sb ) $F1212 ( sb , secondEncoded ) $F1226 ( sb ) } \n"}, {"code": "private static String getUrlParameters ( final Collection $F873191 parameters , final boolean formEncoding ) { \n\t$F102635 ( sb ) final Iterator $F873191 $F60361 ( i , parameters ) ; \n\tif $F11310 ( i ) { \n\t\tfinal $F362768 $F11312 ( first , i ) ; \n\t\t$F1218 ( sb ) $F22215 ( sb , getKeyValuePair , first , formEncoding ) while $F11310 ( i ) { \n\t\t\tfinal $F362768 $F11312 ( current , i ) ; \n\t\t\t$F1218 ( sb ) $F22215 ( sb , getKeyValuePair , current , formEncoding ) } \n\t\t$F1226 ( sb ) } \n\telse $F33492 ( sb ) } \n"}, {"code": "public static String newUrl ( final String baseUrl , final Collection $F873191 params ) { \n\t$F102635 ( sb ) $F1212 ( sb , baseUrl ) sb . append ( $F33951 ( getUrlParameters , params ) ) ; \n\t$F1226 ( sb ) } \n"}, {"code": "public static String newUrl ( final String baseUrl , $F229410 ( paramMap ) ) { \n\t$F102635 ( sb ) $F1212 ( sb , baseUrl ) sb . append ( $F33951 ( getUrlParameters , paramMap ) ) ; \n\t$F1226 ( sb ) } \n"}, {"code": "public static String newWwwUrlEncodedUrl ( final String baseUrl , final Collection $F873191 params ) { \n\t$F102635 ( sb ) $F1212 ( sb , baseUrl ) sb . append ( $F37870 ( getUrlParameters , params ) ) ; \n\t$F1226 ( sb ) } \n"}, {"code": "public static String newWwwUrlEncodedUrl ( final String baseUrl , $F229410 ( paramMap ) ) { \n\t$F102635 ( sb ) $F1212 ( sb , baseUrl ) sb . append ( $F37870 ( getUrlParameters , paramMap ) ) ; \n\t$F1226 ( sb ) } \n"}, {"code": "public static $F362768 pair $F96892 ( s1 , s2 ) { \n\tif $F109626 ( StringUtils , s1 ) $F16517 ( LOG ) if $F109626 ( StringUtils , s2 ) $F160915 ( LOG , s1 ) return new PairImpl $F4356 ( s1 , s2 ) ; \n\t} \n"}, {"code": "public static $F362768 pair $F536555 ( name , value ) { \n\treturn $F120303 ( pair , name , String , value ) ; \n\t} \n"}, {"code": "public static $F362768 pair ( final String name , final URI value ) { \n\treturn pair ( name , $F125860 ( value ) ) ; \n\t} \n"}, {"code": "public static String stripHost $F62952 ( uri ) { \n\tif $F12498 ( uri ) $F356 ( uri ) final String noHttpUri = StringUtils . substringAfter ( uri , STRING00 ) ; \n\t$F397995 ( slashIndex , noHttpUri ) if $F9467 ( slashIndex ) $F4801 final String $F6992 ( noHostUri , noHttpUri , slashIndex ) ; \n\treturn noHostUri ; \n\t} \n"}, {"code": "$F119429 boolean isSpace ( int reps ) { \n\t$F2233 ( dummy ) if ( overload == Overload . CHAR ) { \n\t\tfor ( $F72243 ( i , reps ) ) { \n\t\t\tfor ( $F90123 ( ch ) ) { \n\t\t\t\tdummy ^= ( ( char ) ch == STRING00 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\telse { \n\t\tfor ( $F72243 ( i , reps ) ) { \n\t\t\tfor ( $F90123 ( ch ) ) { \n\t\t\t\tdummy ^= $F24340 ( ch ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn dummy ; \n\t} \n"}, {"code": "public boolean execDelete ( Class < ? extends D6Model > modelObj ) { \n\t$F2233 ( retVal ) final D6CrudDeleteHelper dh = new D6CrudDeleteHelper ( modelObj ) ; \n\tfinal String updateSQL = dh . createDeleteAllPreparedSQLStatement ( ) ; \n\t$F35513 ( log , modelObj , updateSQL ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\t$F403331 ( preparedStmt ) $F396485 ( conn ) $F1754961 ( preparedStmt , conn , updateSQL ) $F403369 ( preparedStmt ) $F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\tretVal = false ; \n\t\t\t$F62615 ( loge , e ) } \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public boolean execDelete ( D6Model [ ] modelObjs ) { \n\tif $F44788 ( modelObjs ) $F1668 $F2233 ( retVal ) final D6CrudDeleteHelper dh = new D6CrudDeleteHelper ( $F258213 ( modelObjs ) ) ; \n\tfinal String deleteSQL = dh . createDeletePreparedSQLStatement ( ) ; \n\t$F35513 ( log , modelObjs , deleteSQL ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\t$F403331 ( preparedStmt ) $F396485 ( conn ) $F1754961 ( preparedStmt , conn , deleteSQL ) for ( D6Model modelObj : modelObjs ) { \n\t\t\t$F518773 ( dh , modelObj , preparedStmt ) ; \n\t\t\t$F403369 ( preparedStmt ) } \n\t\t$F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tcatch ( D6Exception e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\tretVal = false ; \n\t\t\t$F62615 ( loge , e ) } \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public boolean execUpdate ( D6Model modelObj , D6Inex includeExcludeColumnNames ) { \n\t$F2233 ( retVal ) $F3446 ( modelObj , retVal ) final D6CrudUpdateHelper d6CrudUpdateHelper = new D6CrudUpdateHelper ( $F298 ( modelObj ) ) ; \n\tfinal String updateSQL = d6CrudUpdateHelper . createUpdatePreparedSQLStatement ( includeExcludeColumnNames ) ; \n\t$F10467 ( log , updateSQL ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\t$F403331 ( preparedStmt ) $F396485 ( conn ) $F1754961 ( preparedStmt , conn , updateSQL ) d6CrudUpdateHelper . map ( modelObj , preparedStmt , includeExcludeColumnNames ) ; \n\t\t$F403369 ( preparedStmt ) $F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tcatch ( D6Exception e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\tretVal = false ; \n\t\t\t$F62615 ( loge , e ) } \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public boolean execUpdateByRawSQL $F379663 ( preparedSQL , preparedValues ) { \n\t$F2233 ( retVal ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\t$F403331 ( preparedStmt ) $F396485 ( conn ) $F1754961 ( preparedStmt , conn , preparedSQL ) $F102635 ( logSb ) if $F268 ( preparedValues ) { \n\t\t\t$F1218 ( logSb ) for ( $F2674 ( i , preparedValues ) ) { \n\t\t\t\tsetObject ( $F49368 ( i ) , preparedStmt , preparedValues [ i ] ) ; \n\t\t\t\tlogSb . append ( $F120174 ( i ) + preparedValues [ i ] ) ; \n\t\t\t\t$F1218 ( logSb ) } \n\t\t\t} \n\t\tlog ( $F101680 ( preparedSQL , logSb ) ) ; \n\t\t$F403369 ( preparedStmt ) $F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\tretVal = false ; \n\t\t\t$F62615 ( loge , e ) } \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public boolean execUpdateByRawSQL ( String updateRawSQL ) { \n\t$F2233 ( retVal ) $F10467 ( log , updateRawSQL ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\t$F403405 ( stmt ) $F396485 ( conn ) $F403408 ( stmt , conn ) $F1374599 ( stmt , updateRawSQL ) $F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\tretVal = false ; \n\t\t\t$F62615 ( loge , e ) } \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public boolean execInsert ( D6Model [ ] modelObjects ) { \n\tfinal D6Inex includeExcludeColumnNames = null ; \n\t$F28329 ( execInsert , modelObjects , includeExcludeColumnNames ) } \n"}, {"code": "public boolean execInsertIgnoreDuplicate ( D6Model [ ] modelObjects ) { \n\tfinal D6Inex includeExcludeColumnNames = null ; \n\t$F56237 ( execInsert , modelObjects , includeExcludeColumnNames ) } \n"}, {"code": "public boolean execInsert ( D6Model [ ] modelObjects , D6Inex includeExcludeColumnNames ) { \n\t$F2233 ( ignoreDuplicate ) $F210 ( execInsert , modelObjects , includeExcludeColumnNames , ignoreDuplicate ) } \n"}, {"code": "public boolean execInsert ( D6Model [ ] modelObjects , D6Inex includeExcludeColumnNames , boolean ignoreDuplicate ) { \n\t$F29218 ( log ) $F2233 ( retVal ) $F3446 ( modelObjects , retVal ) $F84680 ( numOfModelObjects , modelObjects ) $F2016 ( numOfModelObjects , retVal ) final D6Model $F26393 ( firstModelObject , modelObjects ) ; \n\tfinal D6CrudInsertHelper d6CrudInsertHelper = new D6CrudInsertHelper ( $F298 ( firstModelObject ) ) ; \n\tfinal String insertSQL = d6CrudInsertHelper . createInsertPreparedSQLStatement ( includeExcludeColumnNames , ignoreDuplicate ) ; \n\t$F380799 ( conn ) try { \n\t\t$F403331 ( preparedStmt ) $F10411 ( conn , createConnection ) $F396485 ( conn ) $F1754961 ( preparedStmt , conn , insertSQL ) for ( $F2674 ( i , modelObjects ) ) { \n\t\t\tD6Model model = modelObjects [ i ] ; \n\t\t\td6CrudInsertHelper . map ( model , preparedStmt , includeExcludeColumnNames ) ; \n\t\t\t$F403369 ( preparedStmt ) } \n\t\t$F374904 ( conn ) retVal = true ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tcatch ( D6Exception e ) { \n\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t} \n\tfinally { \n\t\tif $F268 ( conn ) { \n\t\t\ttry $F2453 ( conn ) catch ( SQLException e ) { \n\t\t\t\t$F62615 ( loge , e ) retVal = false ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn retVal ; \n\t} \n"}, {"code": "public int execSelectCount ( Class < ? extends D6Model > modelClazz ) { \n\tfinal D6CrudSelectHelper d6CrudSelectHelper = new D6CrudSelectHelper ( modelClazz ) ; \n\tfinal String sqlForSelectCount = d6CrudSelectHelper . getSQLForSelectCount ( ) ; \n\t$F867 ( execSelectCount , sqlForSelectCount ) } \n"}, {"code": "public int execSelectCount ( Class < ? extends D6Model > modelClazz , WhereCondition whereCondition ) { \n\tfinal D6CrudSelectHelper d6CrudSelectHelper = new D6CrudSelectHelper ( modelClazz ) ; \n\tfinal String sqlForSelectCount = d6CrudSelectHelper . getSQLForSelectCount ( ) ; \n\tString sql = sqlForSelectCount + STRING00 + whereCondition . toSql ( ) ; \n\t$F867 ( execSelectCount , sql ) } \n"}, {"code": "public int execSelectCount $F379663 ( preparedSql , searchKeys ) { \n\t$F35513 ( log , preparedSql , searchKeys ) $F1987 ( retVal ) $F403331 ( preparedStmt ) $F391030 ( rs ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\tpreparedStmt = conn . prepareStatement ( preparedSql , ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; \n\t\t$F102635 ( logSb ) if $F268 ( searchKeys ) { \n\t\t\t$F1218 ( logSb ) for ( $F2674 ( i , searchKeys ) ) { \n\t\t\t\tsetObject ( $F49368 ( i ) , preparedStmt , searchKeys [ i ] ) ; \n\t\t\t\tlogSb . append ( $F120174 ( i ) + searchKeys [ i ] ) ; \n\t\t\t\t$F1218 ( logSb ) } \n\t\t\t} \n\t\tlog ( $F101680 ( preparedSql , logSb ) ) ; \n\t\t$F359656 ( rs , preparedStmt ) while $F88402 ( rs ) { \n\t\t\t$F881971 ( retVal , rs ) } \n\t\t} \n\tcatch ( Exception e ) $F182041 ( loge , e ) finally { \n\t\ttry { \n\t\t\t$F26010 ( rs ) $F26010 ( preparedStmt ) $F26010 ( conn ) } \n\t\tcatch ( SQLException e ) $F182041 ( loge , e ) } \n\treturn retVal ; \n\t} \n"}, {"code": "public < T extends D6Model > $F58224 execSelectTable $F7907 ( modelClazz ) { \n\tfinal DBTable dbTable = modelClazz . getAnnotation ( DBTable . class ) ; \n\tfinal String dbTableName = dbTable . tableName ( ) ; \n\treturn ( $F58224 ) $F647176 ( execSelectTable , dbTableName , modelClazz ) ; \n\t} \n"}, {"code": "public < T extends D6Model > $F58224 execSelectTable $F26567 ( preparedSql , modelClazz ) $F35506 ( execSelectTable , preparedSql , modelClazz ) "}, {"code": "public < T extends D6Model > $F58224 execSelectTable ( String preparedSql , $F3244 searchKeys , $F7906 ( modelClazz ) ) { \n\t$F762 final Map < $F2612 , $F619 > $F2207 ( result , execSelectTableWithJoin , preparedSql , searchKeys , modelClazz ) ; \n\tfinal $F619 $F199 ( rowList , result , modelClazz ) ; \n\t$F4282 ( toArray , rowList , modelClazz ) } \n"}, {"code": "$F10880 public Map < $F2612 , $F619 > execSelectTableWithJoin ( String preparedSql , $F3244 searchKeys , Class < ? extends D6Model > ... modelClazz ) { \n\tlog ( $F9971 ( preparedSql , searchKeys , modelClazz ) ) ; \n\tfinal Map < $F2612 , $F619 > resultMap = new HashMap < $F2612 , $F619 > $F2 ; \n\tfinal List < ModelWrapper > modelList = new ArrayList < ModelWrapper > $F2 ; \n\tfor ( $F2674 ( i , modelClazz ) ) { \n\t\t$F762 final ModelWrapper model = new ModelWrapper $F77504 ( modelClazz , i ) ; \n\t\t$F528 ( modelList , model ) } \n\t$F403331 ( preparedStmt ) $F391030 ( rs ) final Connection conn = createConnection ( ) ; \n\ttry { \n\t\tpreparedStmt = conn . prepareStatement ( preparedSql , ResultSet . TYPE_SCROLL_INSENSITIVE , ResultSet . CONCUR_READ_ONLY ) ; \n\t\t$F102635 ( logSb ) if $F268 ( searchKeys ) { \n\t\t\t$F1218 ( logSb ) for ( $F2674 ( i , searchKeys ) ) { \n\t\t\t\t$F69277 ( object , searchKeys , i ) setObject ( $F49368 ( i ) , preparedStmt , object ) ; \n\t\t\t\tlogSb . append ( $F120174 ( i ) + searchKeys [ i ] ) ; \n\t\t\t\t$F1218 ( logSb ) } \n\t\t\t} \n\t\tlog ( $F101680 ( preparedSql , logSb ) ) ; \n\t\t$F359656 ( rs , preparedStmt ) final ResultSetMetaData $F380815 ( rsMetaData , rs ) ; \n\t\tfinal int $F385477 ( numberOfColumns , rsMetaData ) ; \n\t\t$F172635 ( columnNameList ) for ( $F6610 ( i , numberOfColumns ) ) { \n\t\t\tString columnName = rsMetaData . getColumnName ( i + INT00 ) ; \n\t\t\t$F528 ( columnNameList , columnName ) } \n\t\twhile $F88402 ( rs ) { \n\t\t\tfor ( $F6610 ( i , numberOfColumns ) ) { \n\t\t\t\t$F358736 ( columnName , columnNameList , i ) final Object value = rs . getObject ( i + INT00 ) ; \n\t\t\t\tfor ( ModelWrapper model : modelList ) { \n\t\t\t\t\t$F2276 ( model , columnName , value ) } \n\t\t\t\t} \n\t\t\tfor ( ModelWrapper model : modelList ) { \n\t\t\t\tfinal $F2612 modelClazzName = $F486577 ( model ) ; \n\t\t\t\t$F619 $F199 ( modelObjectList , resultMap , modelClazzName ) ; \n\t\t\t\tif $F112 ( modelObjectList ) { \n\t\t\t\t\t$F460615 ( modelObjectList ) $F2725 ( resultMap , modelClazzName , modelObjectList ) } \n\t\t\t\tfinal Object resultModelObject = model . getAsObject ( ) ; \n\t\t\t\t$F528 ( modelObjectList , resultModelObject ) model . initializeFieldMap ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) $F182041 ( loge , e ) finally { \n\t\ttry { \n\t\t\t$F26010 ( rs ) $F26010 ( preparedStmt ) $F26010 ( conn ) } \n\t\tcatch ( SQLException e ) $F182041 ( loge , e ) } \n\treturn resultMap ; \n\t} \n"}, {"code": "private void setObject ( int parameterIndex , PreparedStatement preparedStmt , Object value ) throws SQLException { \n\t$F176962 ( preparedStmt , parameterIndex , value ) } \n"}, {"code": "private < T extends D6Model > $F58224 toArray ( $F33345 ( objectList ) , $F7906 ( modelClazz ) ) { \n\tif $F112 ( objectList ) { \n\t\treturn ( $F58224 ) $F53038 ( Array , modelClazz ) ; \n\t\t} \n\tfinal $F58224 resultObjects = objectList . toArray ( ( $F58224 ) $F53038 ( Array , modelClazz ) ) ; \n\treturn resultObjects ; \n\t} \n"}, {"code": "public $F3244 getAsModel ( Map < $F2612 , $F619 > o , Class < ? extends D6Model > modelClazz ) { \n\treturn toArray ( $F65956 ( o , modelClazz ) ) ; \n\t} \n"}, {"code": "private Connection createConnection $F2 { \n\tif $F268 ( mConnInfo ) { \n\t\tDBConnCreator dbConnCreator = new DBConnCreator ( mConnInfo ) ; \n\t\tConnection conn = dbConnCreator . createDBConnection ( ) ; \n\t\treturn conn ; \n\t\t} \n\telse if $F268 ( mDbcpPropertyFile ) { \n\t\t$F472 ( properties ) InputStream is = $F462857 ( Thread , mDbcpPropertyFile ) ; \n\t\ttry { \n\t\t\t$F29433 ( properties , is ) DataSource ds ; \n\t\t\tds = BasicDataSourceFactory . createDataSource ( properties ) ; \n\t\t\t$F529814 ( conn , ds ) return conn ; \n\t\t\t} \n\t\t$F114755 ( e ) $F153429 ( e ) } \n\t$F724 } \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\tfinal Object op3 = values . popWhatever ( ) ; \n\tfinal Object op2 = values . popWhatever ( ) ; \n\tfinal boolean op1 = values . popBoolean ( ) ; \n\tvalues . push ( op1 ? op2 : op3 ) ; \n\t} \n"}, {"code": "$F5446012 public final ByteSink encodingSink ( final CharSink encodedSink ) { \n\tcheckNotNull ( encodedSink ) ; \n\treturn new ByteSink $F2 { \n\t\t$F1 public OutputStream openStream $F2 throws IOException { \n\t\t\treturn encodingStream ( $F5158 ( encodedSink ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F5446012 public final ByteSource decodingSource ( final CharSource encodedSource ) { \n\tcheckNotNull ( encodedSource ) ; \n\treturn new ByteSource $F2 { \n\t\t$F1 public InputStream openStream $F2 throws IOException { \n\t\t\treturn decodingStream ( $F5158 ( encodedSource ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public RestNodeType getNodeType ( Request request , String repositoryName , String workspaceName , String nodeTypeName ) throws RepositoryException { \n\tSession $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tNodeTypeManager nodeTypeManager = $F587883 ( session ) . getNodeTypeManager ( ) ; \n\tNodeType nodeType = nodeTypeManager . getNodeType ( nodeTypeName ) ; \n\treturn new RestNodeType ( nodeType , RestHelper . repositoryUrl ( request ) ) ; \n\t} \n"}, {"code": "$F1 public Result importCND ( Request request , String repositoryName , String workspaceName , boolean allowUpdate , InputStream cndInputStream ) throws RepositoryException { \n\t$F2508946 ( CheckArg , cndInputStream ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tNodeTypeManager nodeTypeManager = $F587883 ( session ) . getNodeTypeManager ( ) ; \n\tif ( ! ( nodeTypeManager instanceof org . modeshape . jcr . api . nodetype . NodeTypeManager ) ) { \n\t\treturn new Result ( Result . NOT_IMPLEMENTED ) ; \n\t\t} \n\torg . modeshape . jcr . api . nodetype . NodeTypeManager modeshapeTypeManager = ( org . modeshape . jcr . api . nodetype . NodeTypeManager ) nodeTypeManager ; \n\ttry { \n\t\tList < RestNodeType > $F10213 ( registeredTypes , registerCND , request , allowUpdate , cndInputStream , modeshapeTypeManager ) ; \n\t\t$F867 ( createOkResponse , registeredTypes ) } \n\tcatch ( IOException e ) $F8383063 ( e ) } \n"}, {"code": "public void conditionViolated $F2 { \n\ttry { \n\t\tif ( this . xaConnection != null ) { \n\t\t\tXATransactionalBranch $F404 transactionalBranch = this . xaConnection . toGlobalTransactionBranch ( ) ; \n\t\t\tif $F268 ( transactionalBranch ) { \n\t\t\t\ttransactionalBranch . setRollbackOnly ( true ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F14980 ( LOG ) { \n\t\t\tString logString = $F234820 ( this ) ; \n\t\t\tLOG . info ( new ConditionViolatedLog ( this . timeoutCondition , logString ) . toString ( ) ) ; \n\t\t\t} \n\t\t} \n\tfinally $F54027 ( setTimeOutActive ) } \n"}, {"code": "$F1 public void start ( Xid xid , int flags ) throws XAException { \n\ttry { \n\t\tif $F112 ( xid ) { \n\t\t\tthrow new XAException ( XAException . XAER_INVAL ) ; \n\t\t\t} \n\t\tif ( flags == TMRESUME ) { \n\t\t\tthis . xaConnection . resumeTransactionalBranch ( xid ) ; \n\t\t\t} \n\t\telse if $F81863 ( flags , TMJOIN , TMNOFLAGS ) { \n\t\t\tthis . xaConnection . startTransactionalBranch ( xid ) ; \n\t\t\t} \n\t\tLOG . debug ( $F694120 ( this , xid ) + STRING00 + ConstantsPrinter . getXAResourceMessage ( flags ) + STRING00 + STRING00 + this . xaConnection ) ; \n\t\tthis . setTimeOutActive ( true ) ; \n\t\t} \n\tcatch ( XAException xaExc ) { \n\t\tLOG . error ( $F694120 ( this , xid ) + STRING00 + ConstantsPrinter . getXAResourceMessage ( flags ) + STRING00 + STRING00 + ConstantsPrinter . getXAErrorCode ( xaExc . errorCode ) ) ; \n\t\tthrow xaExc ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tLOG . error ( $F6035 ( xid , flags ) + this . xaId + STRING00 + ex + STRING00 + $F450167 ( ExceptionUtils , ex ) ) ; \n\t\tthrow new DelegatedRuntimeException ( $F6035 ( xid , flags ) + this . xaId , ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public int prepare ( Xid xid ) throws XAException { \n\ttry { \n\t\tLOG . debug ( $F694120 ( this , xid ) ) ; \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaConnection . toGlobalTransactionBranch ( ) ; \n\t\tif $F112 ( xid ) { \n\t\t\t$F15466 ( LOG ) throw new XAException ( XAException . XAER_INVAL ) ; \n\t\t\t} \n\t\tif $F112 ( transactionalBranch ) { \n\t\t\t$F15466 ( LOG ) throw new XAException ( XAException . XAER_PROTO ) ; \n\t\t\t} \n\t\tif ( ! transactionalBranch . getXid ( ) . equals ( xid ) ) { \n\t\t\t$F443578 ( LOG , this , xid ) throw new XAException ( XAException . XAER_PROTO ) ; \n\t\t\t} \n\t\tint retVal = $F438723 ( transactionalBranch ) ; \n\t\tif ( retVal == XAResource . XA_RDONLY ) { \n\t\t\tthis . xaConnection . closeTransactionalBranch ( xid ) ; \n\t\t\t} \n\t\treturn retVal ; \n\t\t} \n\tcatch ( XAException xaExc ) { \n\t\tLOG . error ( $F694120 ( this , xid ) + STRING00 + ConstantsPrinter . getXAErrorCode ( xaExc . errorCode ) ) ; \n\t\tthrow xaExc ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tLOG . error ( $F320 ( xid ) + this . xaId + STRING00 + ex + STRING00 + $F450167 ( ExceptionUtils , ex ) ) ; \n\t\tthrow new DelegatedRuntimeException ( $F320 ( xid ) + this . xaId , ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void end ( Xid xid , int flags ) throws XAException { \n\ttry { \n\t\t$F45360 ( LOG ) LOG . debug ( $F694120 ( this , xid ) + STRING00 + ConstantsPrinter . getXAResourceMessage ( flags ) + STRING00 ) ; \n\t\tif $F112 ( xid ) { \n\t\t\t$F15466 ( LOG ) throw new XAException ( XAException . XAER_INVAL ) ; \n\t\t\t} \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaConnection . toGlobalTransactionBranch ( ) ; \n\t\tif $F112 ( transactionalBranch ) { \n\t\t\t$F15466 ( LOG ) throw new XAException ( XAException . XAER_PROTO ) ; \n\t\t\t} \n\t\tif ( ! transactionalBranch . getXid ( ) . equals ( xid ) ) { \n\t\t\t$F443578 ( LOG , this , xid ) throw new XAException ( XAException . XAER_PROTO ) ; \n\t\t\t} \n\t\tif ( flags == TMSUSPEND ) { \n\t\t\tthis . xaConnection . suspendTransactionalBranch ( xid ) ; \n\t\t\t} \n\t\telse if ( flags == TMSUCCESS ) { \n\t\t\tif ( transactionalBranch . isXAProtocolFinished ( ) ) { \n\t\t\t\t$F1109 ( transactionalBranch ) $F206489 ( LOG , this ) } \n\t\t\t} \n\t\telse if ( flags == TMFAIL ) { \n\t\t\ttransactionalBranch . setRollbackOnly ( true ) ; \n\t\t\t} \n\t\t} \n\tcatch ( XAException xaExc ) { \n\t\tLOG . error ( $F694120 ( this , xid ) + STRING00 + ConstantsPrinter . getXAResourceMessage ( flags ) + STRING00 + STRING00 + ConstantsPrinter . getXAErrorCode ( xaExc . errorCode ) ) ; \n\t\tthrow xaExc ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tLOG . error ( $F6035 ( xid , flags ) + this . xaId + STRING00 + ex + STRING00 + $F450167 ( ExceptionUtils , ex ) ) ; \n\t\tthrow new DelegatedRuntimeException ( $F6035 ( xid , flags ) + this . xaId , ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void forget ( Xid xid ) throws XAException { \n\ttry { \n\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\tif $F112 ( xid ) throw new XAException ( XAException . XAER_INVAL ) ; \n\t\tXATransactionalBranch $F404 transactionalBranch = this . xaConnection . toGlobalTransactionBranch ( ) ; \n\t\t$F15530 ( transactionalBranch ) this . xaConnection . closeTransactionalBranch ( xid ) ; \n\t\tthis . xaConnection . close ( ) ; \n\t\t} \n\tfinally { \n\t\tthis . setTimeOutActive ( false ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public boolean isSameRM ( XAResource xaResource ) throws XAException { \n\tif $F8962 ( this , xaResource ) { \n\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\t$F232 } \n\tif ( ! ( xaResource instanceof PhynixxXAResource ) ) { \n\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\t$F213 } \n\t$F10880 PhynixxXAResource $F404 sampleXARes = ( PhynixxXAResource ) xaResource ; \n\ttry { \n\t\tif $F182613 ( xaResourceFactory , sampleXARes ) { \n\t\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\t\t$F232 } \n\t\telse { \n\t\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\t\t$F213 } \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tLOG . error ( STRING00 + sampleXARes . xaId + STRING00 + this . xaId + STRING00 + ex + STRING00 + $F450167 ( ExceptionUtils , ex ) ) ; \n\t\tthrow new DelegatedRuntimeException ( STRING00 + sampleXARes . xaId + STRING00 + this . xaId , ex ) ; \n\t\t} \n\t} \n"}, {"code": "public void close $F2 { \n\tif ( this . xaConnection != null ) { \n\t\tthis . xaConnection . doClose ( ) ; \n\t\t} \n\tthis . closed = true ; \n\tthis . notifyClosed ( ) ; \n\tif $F3507 ( LOG ) { \n\t\tLOG . debug ( $F234820 ( this ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Xid [ ] recover ( int flags ) throws XAException { \n\tLOG . info ( $F234820 ( this ) + ConstantsPrinter . getXAResourceMessage ( flags ) ) ; \n\tif ( $F21721 ( flags , TMSTARTRSCAN , TMENDRSCAN ) && flags != TMNOFLAGS ) { \n\t\tthrow new XAException ( XAException . XAER_INVAL ) ; \n\t\t} \n\tXid [ ] retval = null ; \n\tretval = this . xaResourceFactory . recover ( ) ; \n\treturn retval ; \n\t} \n"}, {"code": "public static void notNull $F30965 ( objects ) { \n\tnotNull ( ( Object ) objects ) ; \n\tfor ( Object object : objects ) $F890 ( notNull , object ) } \n"}, {"code": "public static void notEmpty $F1195 ( message , string ) { \n\tif $F5449 ( string ) $F75351 ( message ) } \n"}, {"code": "private $F21 getMembersValues ( Node attribute ) { \n\t$F95965 ( actions ) $F356718 ( actionNodes , attribute ) for ( $F12267 ( j , actionNodes ) ) { \n\t\t$F356721 ( actionNode , actionNodes , j ) if $F2486380 ( actionNode ) { \n\t\t\tactions . add ( provider . getTextValue ( actionNode ) ) ; \n\t\t\t} \n\t\t} \n\t$F592090 ( actions ) $F255441 ( actions ) } \n"}, {"code": "private Metric toMetric ( Node node ) { \n\t$F2201 ( node ) Metric metric = new Metric $F2 ; \n\t$F356718 ( attributes , node ) for ( $F12267 ( i , attributes ) ) { \n\t\t$F356721 ( attribute , attributes , i ) $F581981 ( name , attribute ) if $F42444 ( name ) { \n\t\t\tmetric . setName ( provider . getTextValue ( attribute ) ) ; \n\t\t\t} \n\t\telse if $F42444 ( name ) { \n\t\t\tmetric . setNamespace ( provider . getTextValue ( attribute ) ) ; \n\t\t\t} \n\t\telse if $F42444 ( name ) { \n\t\t\t$F4357 dimensions = toMetadata ( $F356715 ( attribute ) ) ; \n\t\t\tif $F268 ( dimensions ) { \n\t\t\t\tmetric . addMetadata ( dimensions ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn metric ; \n\t} \n"}, {"code": "private $F4357 toMetadata ( NodeList blocks ) { \n\t$F199346 ( dimensions ) for ( $F12267 ( i , blocks ) ) { \n\t\t$F356721 ( dimensionNode , blocks , i ) if $F2486380 ( dimensionNode ) { \n\t\t\t$F4728 ( dimensionName ) $F4728 ( dimensionValue ) $F356718 ( dimensionAttributes , dimensionNode ) for ( $F12267 ( j , dimensionAttributes ) ) { \n\t\t\t\t$F356721 ( attribute , dimensionAttributes , j ) $F581981 ( name , attribute ) if $F42444 ( name ) { \n\t\t\t\t\tdimensionName = provider . getTextValue ( attribute ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F42444 ( name ) { \n\t\t\t\t\tdimensionValue = provider . getTextValue ( attribute ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F303779 ( dimensionName , dimensions , dimensionValue ) } \n\t\t} \n\t$F592090 ( dimensions ) return dimensions ; \n\t} \n"}, {"code": "private $F4357 getMetricFilterParameters ( MetricFilterOptions options ) { \n\t$F2201 ( options ) $F199346 ( parameters ) AWSCloud . addValueIfNotNull ( parameters , STRING00 , options . getMetricName ( ) ) ; \n\tAWSCloud . addValueIfNotNull ( parameters , STRING00 , options . getMetricNamespace ( ) ) ; \n\tAWSCloud . addIndexedParameters ( parameters , STRING00 , options . getMetricMetadata ( ) ) ; \n\t$F592090 ( parameters ) return parameters ; \n\t} \n"}, {"code": "private $F4357 getAlarmFilterParameters ( AlarmFilterOptions options ) { \n\t$F2201 ( options ) $F199346 ( parameters ) if ( options . getStateValue ( ) != null ) { \n\t\tAWSCloud . addValueIfNotNull ( parameters , STRING00 , options . getStateValue ( ) . name ( ) ) ; \n\t\t} \n\tAWSCloud . addIndexedParameters ( parameters , STRING00 , options . getAlarmNames ( ) ) ; \n\t$F592090 ( parameters ) return parameters ; \n\t} \n"}, {"code": "private String getCloudWatchUrl $F2 { \n\treturn ( STRING00 + $F20708 ( provider ) . getRegionId ( ) + AWSCloud . getRegionSuffix ( $F20708 ( provider ) . getRegionId ( ) ) ) ; \n\t} \n"}, {"code": "public static final $F1372 T getContextAttribute ( ServletContext ctx , String name , $F7906 ( cls ) , Set < GetOpts > opts , T defaultValue ) { \n\tObject o ; \n\tif ( ( $F463880 ( o , ctx , name ) ) == null ) { \n\t\tif ( opts . contains ( GetOpts . THROW_ON_MISSING ) ) $F503 ( name ) if ( opts . contains ( GetOpts . LOG_ON_MISSING ) ) $F26016 ( logger , name ) return defaultValue ; \n\t\t} \n\tif $F21668 ( cls , o ) { \n\t\tif ( opts . contains ( GetOpts . THROW_ON_WRONG_TYPE ) ) throw new IllegalStateException ( $F191625 ( name , cls ) + $F6291 ( o ) ) ; \n\t\tif ( opts . contains ( GetOpts . LOG_ON_WRONG_TYPE ) && $F14225 ( logger ) ) logger . warn ( $F191625 ( name , cls ) + $F6291 ( o ) ) ; \n\t\treturn defaultValue ; \n\t\t} \n\t$F14240 ( cls , o ) } \n"}, {"code": "public static final $F1372 T getContextAttribute ( ServletConfig conf , String name , $F7906 ( cls ) , Set < GetOpts > opts , T defaultValue ) { \n\treturn getContextAttribute ( $F8813 ( conf ) , name , cls , opts , defaultValue ) ; \n\t} \n"}, {"code": "public static final $F1372 T getContextAttribute ( Servlet servlet , String name , $F7906 ( cls ) , Set < GetOpts > opts , T defaultValue ) { \n\treturn getContextAttribute ( servlet . getServletConfig ( ) , name , cls , opts , defaultValue ) ; \n\t} \n"}, {"code": "public static final $F1372 T getContextAttribute ( HttpServlet servlet , String name , $F7906 ( cls ) , Set < GetOpts > opts , T defaultValue ) { \n\treturn getContextAttribute ( ( ServletConfig ) servlet , name , cls , opts , defaultValue ) ; \n\t} \n"}, {"code": "public static String getServletParameter ( ServletConfig conf , String name , Set < GetOpts > opts , String defaultValue ) { \n\tString ret ; \n\t$F544121 ( conf ) $F544121 ( name ) $F103706 ( opts , EMPTY_OPTS ) if ( ( $F593184 ( ret , conf , name ) ) != null ) return ret ; \n\tif ( opts . contains ( GetOpts . THROW_ON_MISSING ) ) $F503 ( name ) if ( opts . contains ( GetOpts . LOG_ON_MISSING ) ) $F26016 ( logger , name ) return defaultValue ; \n\t} \n"}, {"code": "public static String getServletParameter ( Servlet servlet , String name , Set < GetOpts > opts , String defaultValue ) { \n\treturn getServletParameter ( servlet . getServletConfig ( ) , name , opts , defaultValue ) ; \n\t} \n"}, {"code": "public static String getServletParameter ( HttpServlet servlet , String name , Set < GetOpts > opts , String defaultValue ) { \n\treturn getServletParameter ( ( ServletConfig ) servlet , name , opts , defaultValue ) ; \n\t} \n"}, {"code": "public static $F1372 T getRequestAttribute ( ServletRequest req , String name , $F7906 ( cls ) , Set < GetOpts > opts , T defaultValue ) { \n\tObject o ; \n\t$F544121 ( req ) $F544121 ( name ) $F544121 ( cls ) $F103706 ( opts , EMPTY_OPTS ) if ( ( $F463880 ( o , req , name ) ) == null ) { \n\t\tif ( opts . contains ( GetOpts . THROW_ON_MISSING ) ) $F503 ( name ) if ( opts . contains ( GetOpts . LOG_ON_MISSING ) ) $F14229 ( logger , name ) return defaultValue ; \n\t\t} \n\tif $F21668 ( cls , o ) { \n\t\tif ( opts . contains ( GetOpts . THROW_ON_WRONG_TYPE ) ) throw new IllegalStateException ( $F243134 ( name , o ) + $F507 ( cls ) ) ; \n\t\tif ( opts . contains ( GetOpts . LOG_ON_MISSING ) ) logger . warn ( $F243134 ( name , o ) + $F507 ( cls ) ) ; \n\t\treturn defaultValue ; \n\t\t} \n\t$F14240 ( cls , o ) } \n"}, {"code": "public static DropboxAuthentication build $F1195 ( appKey , appSecret ) { \n\tDropboxClientBuilder builder = new DropboxClientBuilder ( appKey , appSecret ) ; \n\tbuilder . requestToken = builder . service . getRequestToken ( ) ; \n\treturn builder ; \n\t} \n"}, {"code": "public static DropboxClient build ( String appKey , String appSecret , Token accessToken ) { \n\t$F131745 ( Preconditions , accessToken ) DropboxClientBuilder builder = new DropboxClientBuilder ( appKey , appSecret ) ; \n\t$F1357 ( builder , accessToken ) return builder . buildDropboxClient ( ) ; \n\t} \n"}, {"code": "public static DropboxClient build $F1245 ( appKey , appSecret , token , secret ) { \n\t$F131745 ( Preconditions , token ) $F131745 ( Preconditions , secret ) DropboxClientBuilder builder = new DropboxClientBuilder ( appKey , appSecret ) ; \n\tbuilder . accessToken = new Token ( token , secret ) ; \n\treturn builder . buildDropboxClient ( ) ; \n\t} \n"}, {"code": "public DropboxClient authenticate $F1195 ( email , password ) { \n\tOAuthRequest request = new OAuthRequest ( Verb . GET , DropboxApi . MOBILE_AUTH_URL ) ; \n\trequest . addQuerystringParameter ( STRING00 , email ) ; \n\trequest . addQuerystringParameter ( STRING00 , password ) ; \n\tservice . signRequest ( requestToken , request ) ; \n\taccessToken = Json . parse ( $F389896 ( request ) . getBody ( ) , DropboxAccessToken . class ) . toOauthToken ( ) ; \n\t$F24894 ( buildDropboxClient ) } \n"}, {"code": "$F1 public MaybeNode get ( int index ) { \n\tif $F2015 ( index ) { \n\t\tfinal OMElement first = element . getFirstElement ( ) ; \n\t\treturn factory ( ) . newNode ( first , pathBuilder ( ) . withPart ( STRING00 ) . atIndex ( INT00 ) ) ; \n\t\t} \n\treturn NodeFactory . noneNode ( pathBuilder ( ) . atIndex ( index ) ) ; \n\t} \n"}, {"code": "public WriteRequest add ( Series series , DataPoint datapoint ) { \n\tWritableDataPoint mdp = new WritableDataPoint ( series , $F9710 ( datapoint ) , $F269 ( datapoint ) ) ; \n\t$F528 ( data , mdp ) return this ; \n\t} \n"}, {"code": "public static AnnotatorCache getInstance $F2 { \n\tif $F112 ( INSTANCE ) { \n\t\tsynchronized ( AnnotatorCache . class ) { \n\t\t\tif $F112 ( INSTANCE ) { \n\t\t\t\tINSTANCE = new AnnotatorCache $F2 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn INSTANCE ; \n\t} \n"}, {"code": "public Annotator get ( $F410888 AnnotatableType annotationType , $F410888 Language language ) { \n\t$F5618 ( key , createKey , annotationType , language ) if $F28586 ( cache , key ) { \n\t\tcache . put ( key , annotationType . getAnnotator ( language ) ) ; \n\t\t} \n\t$F30910 ( cache , key ) } \n"}, {"code": "public void remove ( $F410888 AnnotationType annotationType , $F410888 Language language ) { \n\tcache . invalidate ( createKey ( annotationType , language ) ) ; \n\t} \n"}, {"code": "public void setAnnotator ( $F410888 AnnotationType annotationType , $F410888 Language language , $F410888 Annotator annotator ) { \n\tPreconditions . checkArgument ( annotator . satisfies ( ) . contains ( annotationType ) , $F27281 ( annotator ) + $F2941 ( annotationType ) + STRING00 ) ; \n\tcache . put ( $F782 ( createKey , annotationType , language , annotator ) ) ; \n\tif ( language == Language . UNKNOWN ) { \n\t\tConfig . setProperty ( $F33383 ( annotationType ) , STRING00 ) ; \n\t\t} \n\telse { \n\t\tConfig . setProperty ( $F33383 ( annotationType ) + language , STRING00 ) ; \n\t\t} \n\tassert cache . containsKey ( createKey ( annotationType , language ) ) ; \n\t} \n"}, {"code": "$F1 protected String serialize ( InvocationContext context , Object input ) { \n\tif ( unavailable || incompatible ) { \n\t\tthrow new IllegalStateException $F39570 ( unavailable , ERROR_CONTEXT_UNAVAILABLE , ERROR_CONTEXT_INCOMPATIBLE ) ; \n\t\t} \n\t$F2201 ( input ) try { \n\t\t$F21492 ( baos ) $F140379 ( Persister_write , persister , input , baos ) ; \n\t\t$F1226 ( baos ) } \n\tcatch ( Exception e ) { \n\t\tthrow new SerializerException ( $F81320 ( $F12746 ( context ) . getName ( ) ) . append ( STRING00 ) . append ( $F713495 ( context ) . getName ( ) ) . append ( STRING00 ) . toString ( ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void configure $F2 { \n\t$F2109 ( LOGGER ) $F74981 ( calculators ) if ( fieldExtractorEnabled ) { \n\t\tfieldExtractor = new FieldExtractor ( schema ) ; \n\t\t$F528 ( calculators , fieldExtractor ) } \n\tif ( completenessMeasurementEnabled ) { \n\t\tcompletenessCalculator = new CompletenessCalculator ( schema ) ; \n\t\tcompletenessCalculator . collectFields ( completenessCollectFields ) ; \n\t\tcompletenessCalculator . setExistence ( fieldExistenceMeasurementEnabled ) ; \n\t\tcompletenessCalculator . setCardinality ( fieldCardinalityMeasurementEnabled ) ; \n\t\t$F528 ( calculators , completenessCalculator ) } \n\tif ( tfIdfMeasurementEnabled ) { \n\t\ttfidfCalculator = new TfIdfCalculator ( schema ) ; \n\t\tif $F268 ( solrConfiguration ) { \n\t\t\ttfidfCalculator . setSolrConfiguration ( solrConfiguration ) ; \n\t\t\t} \n\t\telse $F24432 tfidfCalculator . enableTermCollection ( collectTfIdfTerms ) ; \n\t\t$F528 ( calculators , tfidfCalculator ) } \n\tif ( problemCatalogMeasurementEnabled ) { \n\t\tif ( schema instanceof EdmSchema ) { \n\t\t\tProblemCatalog problemCatalog = new ProblemCatalog ( ( EdmSchema ) schema ) ; \n\t\t\tnew LongSubject ( problemCatalog ) ; \n\t\t\tnew TitleAndDescriptionAreSame ( problemCatalog ) ; \n\t\t\tnew EmptyStrings ( problemCatalog ) ; \n\t\t\t$F528 ( calculators , problemCatalog ) } \n\t\t} \n\tif ( languageMeasurementEnabled ) { \n\t\tlanguageCalculator = new LanguageCalculator ( schema ) ; \n\t\t$F528 ( calculators , languageCalculator ) } \n\tif ( multilingualSaturationMeasurementEnabled ) { \n\t\tmultilingualSaturationCalculator = new MultilingualitySaturationCalculator ( schema ) ; \n\t\tif ( saturationExtendedResult ) { \n\t\t\tmultilingualSaturationCalculator . setResultType ( MultilingualitySaturationCalculator . ResultTypes . EXTENDED ) ; \n\t\t\t} \n\t\t$F528 ( calculators , multilingualSaturationCalculator ) } \n\tif ( uniquenessMeasurementEnabled ) { \n\t\tif $F46336 ( solrClient , solrConfiguration ) $F24432 if $F112 ( solrClient ) { \n\t\t\tsolrClient = new DefaultSolrClient ( solrConfiguration ) ; \n\t\t\t} \n\t\tcalculators . add ( new UniquenessCalculator ( solrClient , schema ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected < T extends XmlFieldInstance > String measureWithGenerics ( String jsonRecord ) throws InvalidJsonException { \n\tchanged ( ) ; \n\tcache = new JsonPathCache $F50 ( jsonRecord ) ; \n\t$F5088 ( items ) for ( Calculator calculator : getCalculators ( ) ) { \n\t\tcalculator . measure ( cache ) ; \n\t\titems . add ( calculator . getCsv ( false , compressionLevel ) ) ; \n\t\t} \n\t$F608110 ( StringUtils , items ) } \n"}, {"code": "public void collectTfIdfTerms ( boolean collectTfIdfTerms ) { \n\tif $F150531 ( this , collectTfIdfTerms ) { \n\t\t$F1357 ( this , collectTfIdfTerms ) changed = true ; \n\t\tif $F268 ( tfidfCalculator ) { \n\t\t\ttfidfCalculator . enableTermCollection ( collectTfIdfTerms ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F96 getResults $F2 { \n\t$F6237 ( results ) for ( Calculator calculator : calculators ) { \n\t\tresults . putAll ( calculator . getResultMap ( ) ) ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal double multiplier = Math . pow ( INT00 , values . popDouble ( ) ) ; \n\t\tvalues . push ( new Double ( Math . round ( values . popDouble ( ) * multiplier ) / multiplier ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String parse ( String argument ) throws CommandLineException { \n\t$F2595 ( file , argument ) try { \n\t\tAssert . isTrue ( $F2475 ( file ) , $F320 ( file ) ) ; \n\t\tAssert . isFalse ( $F2602 ( file ) , $F320 ( file ) ) ; \n\t\tAssert . isTrue ( $F6713 ( file ) , $F320 ( file ) ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) { \n\t\tthrow new CommandLineException $F26312 ( e ) ; \n\t\t} \n\t$F194971 ( file ) } \n"}, {"code": "public $F1372 $F23339 apply ( $F598407 ( objects ) ) { \n\t$F1488180 ( results ) if $F98509 ( objects ) $F356 ( results ) $F40810 ( size , objects ) $F38334 ( fromIndex , getOffset ) int toIndex = fromIndex + getCount ( ) ; \n\t$F77147 ( size , toIndex ) if ( fromIndex >= size || toIndex == fromIndex ) $F1645 else { \n\t\tresults . addAll ( $F67814 ( objects , fromIndex , toIndex ) ) ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "public static ImmutableSet $F9030 findJarFiles ( ClassLoader first , ClassLoader ... rest ) throws IOException { \n\tScanner scanner = new Scanner $F2 ; \n\tMap < URI , ClassLoader > $F61204 ( map , Maps ) ; \n\tfor ( ClassLoader classLoader : $F22156 ( Lists , first , rest ) ) { \n\t\t$F11484 ( map , getClassPathEntries , classLoader ) } \n\tfor ( Map . Entry < URI , ClassLoader > entry : $F708 ( map ) ) { \n\t\tscanner . scan ( $F18327 ( entry ) ) ; \n\t\t} \n\treturn scanner . jarFiles ( ) ; \n\t} \n"}, {"code": "public static Map < String , Preset > autoConfigure $F2 throws MnoConfigurationException { \n\tString host = MnoPropertiesHelper . readEnvironment ( $F1286 ) ; \n\tString apiPath = MnoPropertiesHelper . readEnvironment ( $F1286 ) ; \n\tString apiKey = MnoPropertiesHelper . readEnvironment ( STRING00 ) ; \n\tString apiSecret = MnoPropertiesHelper . readEnvironment ( STRING00 ) ; \n\t$F4845 ( autoConfigure , host , apiPath , apiKey , apiSecret ) } \n"}, {"code": "public static Map < String , Preset > autoConfigure ( String devPlatformPropertiesFile ) throws MnoConfigurationException { \n\t$F31764 ( properties , loadProperties , devPlatformPropertiesFile ) Properties $F22378 ( trimProperties , MnoPropertiesHelper , properties ) ; \n\t$F867 ( autoConfigure , trimProperties ) } \n"}, {"code": "public static Map < String , Preset > autoConfigure ( Properties properties ) throws MnoConfigurationException { \n\tDevPlatform devplatformConfiguration = new DevPlatform ( properties ) ; \n\t$F867 ( autoconfigure , devplatformConfiguration ) } \n"}, {"code": "public static Preset reloadConfiguration $F497998 ( marketplace , props ) throws MnoConfigurationException { \n\tPreset preset = new Preset ( marketplace , props ) ; \n\t$F2725 ( configurations , marketplace , preset ) return preset ; \n\t} \n"}, {"code": "public static Preset get ( String marketplace ) throws MnoConfigurationException { \n\tPreset $F199 ( maestrano , configurations , marketplace ) ; \n\tif $F112 ( maestrano ) { \n\t\tthrow new MnoConfigurationException ( $F124950 ( marketplace ) ) ; \n\t\t} \n\treturn maestrano ; \n\t} \n"}, {"code": "public static Properties loadProperties ( String filePath ) throws MnoConfigurationException { \n\t$F472 ( properties ) $F1300613 ( input , getInputStreamFromClassPathOrFile , filePath ) try $F130036 ( properties , input ) catch ( IOException e ) { \n\t\tthrow new MnoConfigurationException $F5148 ( filePath , e ) ; \n\t\t} \n\t$F191053 ( IOUtils , input ) return properties ; \n\t} \n"}, {"code": "public static String beanToSQLClause $F2317 ( bean , split ) throws JibuException { \n\t$F1200 ( sb ) try { \n\t\tif $F206761 ( bean ) { \n\t\t\tBeanInfo beanInfo = Introspector . getBeanInfo ( $F298 ( bean ) ) ; \n\t\t\t$F391516 pds = $F2052575 ( beanInfo ) ; \n\t\t\tfor ( PropertyDescriptor pd : pds ) { \n\t\t\t\tString clause = columnClause ( $F2282 ( pd ) , $F1995865 ( pd ) , $F104948 ( pd ) . invoke ( bean ) ) ; \n\t\t\t\tif $F206761 ( clause ) { \n\t\t\t\t\tsb . append ( clause + split + STRING00 ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new JibuException $F26312 ( e ) ; \n\t\t} \n\t$F1226 ( sb ) } \n"}, {"code": "public static String getWhereClause ( String sql ) { \n\t$F436267 ( sql ) $F36844 ( s , sql ) $F12039 ( len , s ) $F6990 ( last , s ) if ( len > INT00 && $F110432 ( last , len ) ) { \n\t\tif $F28022 ( s ) { \n\t\t\ts = STRING00 + $F628002 ( s , len ) ; \n\t\t\t} \n\t\telse { \n\t\t\ts = $F628002 ( s , len ) ; \n\t\t\t} \n\t\t} \n\treturn s ; \n\t} \n"}, {"code": "public static String getPagingClause ( String sql , Criteria crt ) { \n\t$F436267 ( sql ) if $F107295 ( crt ) return sql ; \n\tif ( $F495074 ( crt ) > INT00 ) { \n\t\t$F111 ( databaseType , JibuConfig ) if $F25224 ( databaseType ) { \n\t\t\treturn sql + STRING00 + $F88133 ( crt ) + STRING00 + $F495074 ( crt ) + STRING00 ; \n\t\t\t} \n\t\telse if $F17186 ( databaseType ) { \n\t\t\treturn sql + STRING00 + $F495074 ( crt ) + STRING00 + $F88133 ( crt ) + STRING00 ; \n\t\t\t} \n\t\telse if $F25224 ( databaseType ) { \n\t\t\treturn ( $F125987 ( sql ) + STRING00 + ( $F88133 ( crt ) + $F495074 ( crt ) ) + STRING00 + STRING00 + $F88133 ( crt ) ) ; \n\t\t\t} \n\t\t} \n\treturn sql ; \n\t} \n"}, {"code": "public static String getSortClause ( String sql , Criteria crt ) { \n\t$F436267 ( sql ) if ( null != crt && null != $F810184 ( crt ) ) { \n\t\t$F21 sorts = $F810184 ( crt ) . split ( STRING00 ) ; \n\t\t$F19733 ( s ) for ( String sort : sorts ) { \n\t\t\tif $F43975 ( s ) s = sort + STRING00 + $F4581677 ( crt ) ; \n\t\t\telse s = $F55709 ( s , sort ) + $F4581677 ( crt ) ; \n\t\t\t} \n\t\t$F5670 ( sql , s ) } \n\treturn sql ; \n\t} \n"}, {"code": "public $F61574 X cast ( final $F61575 iface ) { \n\t$F24434 ( iface ) if $F36515 ( iface , this ) $F14241 ( iface , this ) throw new ClassCastException ( $F238672 ( this ) + iface + STRING00 ) ; \n\t} \n"}, {"code": "$F1 protected Future < ActivityData > submit ( ActivityCallable callable ) { \n\t$F42520 ( logger ) return $F65736 ( service , callable ) ; \n\t} \n"}, {"code": "$F1 public void close $F2 throws IOException { \n\tfinal MapAppender appender = mapAppender ; \n\t$F26010 ( appender ) mapAppender = null ; \n\trecordCache = null ; \n\t} \n"}, {"code": "$F197020 protected MapAppender createMapDumper ( $F197020 OutputStream outputStream , $F197020 RecordCache recordCache ) { \n\treturn new JacksonMapAppender ( outputStream , recordCache ) ; \n\t} \n"}, {"code": "public static void setExpiresHeader ( final HttpServletResponse response , final long expiresSeconds ) { \n\tresponse . setDateHeader ( HttpHeaders . EXPIRES , $F13205 ( System ) + expiresSeconds * INT00 ) ; \n\tresponse . setHeader ( HttpHeaders . CACHE_CONTROL , STRING00 + expiresSeconds ) ; \n\t} \n"}, {"code": "public static void setNoCacheHeader ( final HttpServletResponse response ) { \n\tresponse . setDateHeader ( HttpHeaders . EXPIRES , NUM00 ) ; \n\tresponse . addHeader ( HttpHeaders . PRAGMA , STRING00 ) ; \n\tresponse . setHeader ( HttpHeaders . CACHE_CONTROL , STRING00 ) ; \n\t} \n"}, {"code": "public static void setEtag ( final HttpServletResponse response , final String etag ) { \n\tresponse . setHeader ( HttpHeaders . ETAG , etag ) ; \n\t} \n"}, {"code": "public static void setFileDownloadHeader ( final HttpServletResponse response , final String filename ) { \n\tString encodedFilename = Encodes . urlEncode ( filename ) ; \n\tresponse . setHeader ( HttpHeaders . CONTENT_DISPOSITION , $F320 ( encodedFilename ) ) ; \n\t} \n"}, {"code": "private String footprint ( Test test ) { \n\t$F1200 ( sb ) sb . append ( $F210436 ( test ) ) . append ( $F507 ( test ) ) . append ( $F506920 ( test ) ) ; \n\tfor ( String tag : $F11283 ( test ) ) $F8284 ( sb , tag ) for ( String ticket : test . getTickets ( ) ) $F8284 ( sb , ticket ) for ( $F11301 entry : $F200493 ( test ) . entrySet ( ) ) { \n\t\t$F11278 ( sb , entry ) ( $F269 ( entry ) ) ; \n\t\t} \n\treturn FootprintGenerator . footprint ( $F797 ( sb ) ) ; \n\t} \n"}, {"code": "public void close $F2 { \n\t$F37676 ( proc ) try { \n\t\t$F1109 ( inStream ) $F1109 ( outStream ) $F1109 ( errStream ) } \n\t$F191048 inStream = null ; \n\toutStream = null ; \n\terrStream = null ; \n\tproc = null ; \n\t} \n"}, {"code": "private static $F5033 splitProperty ( String propertyString ) throws InvalidCommandException { \n\t$F5033 tokens = ImmutableList . copyOf ( $F63084 ( Splitter ) . limit ( INT00 ) . split ( propertyString ) ) ; \n\tif $F19799 ( tokens ) { \n\t\tthrow new InvalidCommandException $F2821 ( propertyString ) ; \n\t\t} \n\treturn tokens ; \n\t} \n"}, {"code": "public static LongArrayND wrap ( LongTuple t , IntTuple size ) { \n\t$F292612 ( Objects , t ) $F292612 ( Objects , size ) int totalSize = IntTupleFunctions . reduce ( size , INT00 , <missing ')'> ( a , b ) - > a * b ) ; \n\tif ( $F1976 ( t ) != totalSize ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + STRING00 + size + STRING00 + totalSize + STRING00 ) ; \n\t\t} \n\treturn new TupleLongArrayND ( t , size ) ; \n\t} \n"}, {"code": "public static MutableLongArrayND wrap ( MutableLongTuple t , IntTuple size ) { \n\t$F292612 ( Objects , t ) $F292612 ( Objects , size ) int totalSize = IntTupleFunctions . reduce ( size , INT00 , <missing ')'> ( a , b ) - > a * b ) ; \n\tif ( $F1976 ( t ) != totalSize ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + STRING00 + size + STRING00 + totalSize + STRING00 ) ; \n\t\t} \n\treturn new MutableTupleLongArrayND ( t , size ) ; \n\t} \n"}, {"code": "public static ToLongFunction < IntTuple > asFunction ( final LongArrayND array ) { \n\t$F292612 ( Objects , array ) return new ToLongFunction < IntTuple > $F2 { \n\t\t$F1 public long applyAsLong ( IntTuple s ) $F30911 ( array , s ) } \n\t; \n\t} \n"}, {"code": "public static LongArrayND createSubArray ( LongArrayND parent , IntTuple fromIndices , IntTuple toIndices ) { \n\treturn new SubLongArrayND $F2144 ( parent , fromIndices , toIndices ) ; \n\t} \n"}, {"code": "public static MutableLongArrayND createSubArray ( MutableLongArrayND parent , IntTuple fromIndices , IntTuple toIndices ) { \n\treturn new MutableSubLongArrayND $F2144 ( parent , fromIndices , toIndices ) ; \n\t} \n"}, {"code": "public static long min ( LongArrayND array ) { \n\treturn $F5025 ( array ) . parallel ( ) . reduce ( Long . MAX_VALUE , Math : : <missing ';'> min ) ; \n\t} \n"}, {"code": "public static long max ( LongArrayND array ) { \n\treturn $F5025 ( array ) . parallel ( ) . reduce ( Long . MIN_VALUE , Math : : <missing ';'> max ) ; \n\t} \n"}, {"code": "public static String toFormattedString ( LongArrayND array , String format ) { \n\t$F45711 ( array ) $F1200 ( sb ) Iterable < MutableIntTuple > iterable = IntTupleIterables . lexicographicalIterable ( $F1976 ( array ) ) ; \n\tIntTuple previous = null ; \n\tfor ( IntTuple coordinates : iterable ) { \n\t\tif $F268 ( previous ) { \n\t\t\tint c = Utils . countDifferences ( previous , coordinates ) ; \n\t\t\tfor ( $F84698 ( i , c ) ) $F1219 ( sb ) } \n\t\t$F61827 ( value , array , coordinates ) sb . append ( String . format ( format + STRING00 , value ) ) ; \n\t\tprevious = coordinates ; \n\t\t} \n\t$F1226 ( sb ) } \n"}, {"code": "protected void logInParams ( I params ) { \n\t$F19733 ( s ) $F600978 ( params , s , inToString ) if $F19100 ( LOG ) $F2171248 ( LOG , s ) else if $F3507 ( LOG ) { \n\t\tif $F1216 ( s ) s = $F442050 ( s ) ; \n\t\t$F15610 ( LOG , s ) } \n\t} \n"}, {"code": "protected void logRequest ( String method , HttpServletRequest request ) { \n\tif $F3507 ( LOG ) { \n\t\tLOG . debug ( $F3902 + $F6291 ( this ) + STRING00 + STRING00 + method + STRING00 + STRING00 + Session . getSessionBean ( ) . getUserId ( ) + STRING00 + STRING00 + Session . getSessionBean ( ) . getId ( ) + STRING00 + STRING00 + $F194541 ( request ) + STRING00 + STRING00 + $F51310 ( request ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected void logOut ( O out ) { \n\t$F19733 ( s ) $F600978 ( out , s , outToString ) if $F19100 ( LOG ) $F2171248 ( LOG , s ) else if $F3507 ( LOG ) { \n\t\tif $F1216 ( s ) s = $F442050 ( s ) ; \n\t\t$F15610 ( LOG , s ) } \n\t} \n"}, {"code": "public void request ( final String method , final HttpServletRequest request , final HttpServletResponse response ) throws $F26611 { \n\t$F4728 ( id ) try { \n\t\t$F57566 ( requests , request ) id = Session . start ( getSessionId ( request , response ) ) ; \n\t\t$F24610 ( t , System ) try { \n\t\t\t$F404335 ( requestId , UUID ) $F6257 ( MDC , requestId ) $F564 ( logRequest , method , request ) I params = parseInput ( request ) ; \n\t\t\tlogInParams ( params ) ; \n\t\t\t$F5605 ( checkAccess , method , params , request ) O $F10213 ( out , process , method , params , request , response ) ; \n\t\t\tif $F268 ( out ) { \n\t\t\t\tlogOut ( out ) ; \n\t\t\t\tformatOutput ( $F2112 ( out , request , response ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( Throwable e ) { \n\t\t\tlogError ( e ) ; \n\t\t\ttry { \n\t\t\t\tO $F2207 ( out , transformError , e , request , response ) ; \n\t\t\t\tformatOutput ( $F291024 ( out , request , response ) ) ; \n\t\t\t\t} \n\t\t\t$F5574 ( LOG , ex ) } \n\t\tlogResult ( $F24611 ( System , t ) ) ; \n\t\t} \n\tfinally { \n\t\t$F16605 ( requests ) $F1255553 ( Session , id ) ; \n\t\t} \n\t} \n"}, {"code": "public static void addInitParameters ( Holder holder , Properties subSection ) { \n\tProperties properties = PropertiesSupport . getSubsection ( subSection , STRING00 ) ; \n\tfor ( $F75783 ( key , properties ) ) { \n\t\tholder . setInitParameter ( $F797 ( key ) , $F194833 ( properties , key ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public View onCreateView $F700123 ( inflater , container , savedInstanceState ) { \n\tView view = IckleSupportFragment . shadow ( this ) . onCreateView ( inflater , container , savedInstanceState ) ; \n\treturn $F268 ( view ) ? view : super . onCreateView ( inflater , container , savedInstanceState ) ; \n\t} \n"}, {"code": "public static void setPropertiesDir ( String propertiesDir ) { \n\t$F95338 ( propertiesDir ) $F35682 ( propertiesDir ) if $F198048 ( propertiesDir ) propertiesDir += STRING00 ; \n\t$F1357 ( ConfigFactory , propertiesDir ) init ( ) ; \n\t} \n"}, {"code": "$F1 protected $F1372 $F560674 deserializeError ( InputStream inputStream , $F3668909 request ) { \n\t$F4728 ( content ) try { \n\t\tcontent = IOUtils . readStringFromStream ( inputStream ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new SerializationException ( e ) ; \n\t\t} \n\t$F4282 ( deserializeError , content , request ) } \n"}, {"code": "$F1 protected $F1372 $F560674 deserializeError ( String response , $F3668909 request ) { \n\t$F560674 target = RequestUtil . getInstanceOfParameterizedType ( request ) ; \n\ttarget . setError ( true ) ; \n\t$F128853 ( target , response ) return target ; \n\t} \n"}, {"code": "$F1 protected $F1372 $F560674 deserialize ( String response , $F3668909 request ) { \n\t$F560674 target = RequestUtil . getInstanceOfParameterizedType ( request ) ; \n\t$F128853 ( target , response ) target . setError ( false ) ; \n\ttry { \n\t\treturn jsonDeserializer . fromJSON ( response , target ) ; \n\t\t} \n\tcatch ( SerializationException jse ) $F356 ( target ) } \n"}, {"code": "public static String getTargetUrl $F2 { \n\tString $F9829 ( targetUrl , System , ENV_API_URL_KEY ) ; \n\tif $F268 ( targetUrl ) $F356 ( targetUrl ) else $F1619 ( targetUrl , apiUrl ) return targetUrl ; \n\t} \n"}, {"code": "protected String toBase64 $F1195 ( user , password ) { \n\t$F34957 ( stringBuffer ) $F1212 ( stringBuffer , user ) $F1218 ( stringBuffer ) $F1212 ( stringBuffer , password ) return Base64Utility . encode ( $F2660 ( stringBuffer ) ) ; \n\t} \n"}, {"code": "protected WebClient instantiateWebClient ( String targetUrl ) { \n\tWebClient webClient = $F4018 ( WebClient , targetUrl ) . type ( STRING00 ) . accept ( MediaType . TEXT_PLAIN ) . accept ( MediaType . APPLICATION_JSON ) ; \n\twebClient = $F354538 ( Header , webClient ) ; \n\tHTTPConduit conduit = $F2068513 ( WebClient , webClient ) . getHttpConduit ( ) ; \n\tTLSClientParameters params = conduit . getTlsClientParameters ( ) ; \n\tif $F112 ( params ) { \n\t\tparams = new TLSClientParameters $F2 ; \n\t\tconduit . setTlsClientParameters ( params ) ; \n\t\t} \n\tparams . setTrustManagers ( new TrustManager [ ] { \n\t\tnew DumbX509TrustManager $F2 } \n\t) ; \n\tparams . setDisableCNCheck ( true ) ; \n\tHTTPClientPolicy policy = new HTTPClientPolicy $F2 ; \n\tpolicy . setConnectionTimeout ( INT00 ) ; \n\tpolicy . setReceiveTimeout ( INT00 ) ; \n\tpolicy . setAllowChunking ( false ) ; \n\tconduit . setClient ( policy ) ; \n\treturn webClient ; \n\t} \n"}, {"code": "void resolveReferences ( Message root ) { \n\tfinal Proto proto = getProto ( ) ; \n\t$F70668 ( fullName , getFullName ) for ( $F5363363 f : $F387 ( fields ) ) { \n\t\tf . owner = this ; \n\t\tif ( $F3058470 ( f ) ) { \n\t\t\trepeatedFieldCount ++ ; \n\t\t\troot . repeatedFieldPresent = true ; \n\t\t\t} \n\t\telse { \n\t\t\tsingularFieldCount ++ ; \n\t\t\tif $F664832 ( f ) { \n\t\t\t\trequiredFieldCount ++ ; \n\t\t\t\troot . requiredFieldPresent = true ; \n\t\t\t\t} \n\t\t\t} \n\t\tif ( ! annotationPresentOnFields && ! f . annotations . isEmpty ( ) ) annotationPresentOnFields = true ; \n\t\tif ( f instanceof Field . Bytes ) { \n\t\t\tif ( $F3058470 ( f ) ) repeatedBytesFieldCount ++ ; \n\t\t\telse { \n\t\t\t\tsingularBytesFieldCount ++ ; \n\t\t\t\tif $F664832 ( f ) requiredBytesFieldCount ++ ; \n\t\t\t\t} \n\t\t\tif ( ! root . bytesFieldPresent ) root . bytesFieldPresent = true ; \n\t\t\tif ( ! root . bytesOrStringDefaultValuePresent && f . defaultValue != null ) root . bytesOrStringDefaultValuePresent = true ; \n\t\t\t} \n\t\telse if ( f instanceof Field . String ) { \n\t\t\tif ( $F3058470 ( f ) ) repeatedStringFieldCount ++ ; \n\t\t\telse { \n\t\t\t\tsingularStringFieldCount ++ ; \n\t\t\t\tif $F664832 ( f ) requiredStringFieldCount ++ ; \n\t\t\t\t} \n\t\t\tif ( ! root . bytesOrStringDefaultValuePresent && f . defaultValue != null ) root . bytesOrStringDefaultValuePresent = true ; \n\t\t\t} \n\t\telse if ( f instanceof Field . Reference ) { \n\t\t\tField . Reference fr = ( Field . Reference ) f ; \n\t\t\t$F10410 ( refName , fr ) $F10410 ( packageName , fr ) String fullRefName = ( packageName == null ? refName : packageName + STRING00 + refName ) ; \n\t\t\tHasName refObj = proto . findReference ( fullRefName , fullName ) ; \n\t\t\tif ( refObj instanceof Message ) { \n\t\t\t\tMessageField mf = newMessageField ( ( Message ) refObj , fr , this ) ; \n\t\t\t\tfields . put ( $F468614 ( mf ) ) ; \n\t\t\t\tif ( $F3058470 ( mf ) ) repeatedMessageFieldCount ++ ; \n\t\t\t\telse { \n\t\t\t\t\tsingularMessageFieldCount ++ ; \n\t\t\t\t\tif $F664832 ( mf ) requiredMessageFieldCount ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( ! mf . standardOptions . isEmpty ( ) ) proto . references . add ( new ConfiguredReference ( mf . standardOptions , mf . extraOptions , fullName ) ) ; \n\t\t\t\t$F23605 } \n\t\t\tif ( refObj instanceof EnumGroup ) { \n\t\t\t\tEnumField ef = newEnumField ( ( EnumGroup ) refObj , fr , this ) ; \n\t\t\t\tfields . put ( $F468614 ( ef ) ) ; \n\t\t\t\tif ( $F3058470 ( ef ) ) repeatedEnumFieldCount ++ ; \n\t\t\t\telse { \n\t\t\t\t\tsingularEnumFieldCount ++ ; \n\t\t\t\t\tif $F664832 ( ef ) requiredEnumFieldCount ++ ; \n\t\t\t\t\t} \n\t\t\t\tif ( ! ef . standardOptions . isEmpty ( ) ) proto . references . add ( new ConfiguredReference ( ef . standardOptions , ef . extraOptions , fullName ) ) ; \n\t\t\t\t$F23605 } \n\t\t\tthrow err ( STRING00 + fullRefName , getProto ( ) ) ; \n\t\t\t} \n\t\tif ( ! f . standardOptions . isEmpty ( ) ) proto . references . add ( new ConfiguredReference ( f . standardOptions , f . extraOptions , fullName ) ) ; \n\t\t} \n\t$F97435 ( sortedFields , fields ) $F5223 ( Collections , sortedFields ) for ( Extension extension : this . nestedExtensions ) extension . resolveReferences ( ) ; \n\tfor ( Service s : $F387 ( nestedServices ) ) s . resolveReferences ( ) ; \n\tfor ( Message m : $F387 ( nestedMessages ) ) m . resolveReferences ( root ) ; \n\t} \n"}, {"code": "public static $F96 getAnnotation ( $F2613 ( annotationType ) , Element element ) { \n\tfor ( AnnotationMirror annotation : $F50657 ( element ) ) { \n\t\tif ( ! rawTypeToString ( $F35115 ( annotation ) , STRING00 ) . equals ( $F507 ( annotationType ) ) ) $F42718 $F4282 ( parseAnnotationMirror , annotationType , annotation ) } \n\t$F724 } \n"}, {"code": "private String createCSV $F2 { \n\t$F4728 ( csvData ) if $F560 ( isAggregate ) $F10411 ( csvData , createAggregatedProjectCSV ) else $F10411 ( csvData , createMultiProjectCSV ) return csvData ; \n\t} \n"}, {"code": "private String createMultiProjectCSV $F2 { \n\t$F4728 ( csvData ) List < IProject > projects = null ; \n\tIProject project = null ; \n\tif $F560 ( isProjectKeyProvided ) { \n\t\tproject = getExtractor ( ) . getProject ( getProjectKey ( ) ) ; \n\t\tprojects = new ArrayList < IProject > $F2 ; \n\t\t$F528 ( projects , project ) } \n\telse if $F560 ( isProjectKeyPatternProvided ) { \n\t\tprojects = getExtractor ( ) . getProjects ( getProjectKeyPattern ( ) ) ; \n\t\t} \n\telse { \n\t\tprojects = getExtractor ( ) . getAllProjects ( ) ; \n\t\t} \n\tcsvData = getConverter ( ) . getCSVData ( projects , getMeasureObjects ( ) , isCleanValues ( ) , isSurroundFields ( ) ) ; \n\t$F2109 ( LOG_INFO ) return csvData ; \n\t} \n"}, {"code": "void prepare $F2 { \n\tif ( $F46454 ( getMeasures ) || $F195922 ( getMeasures ) ) setMeasureObjects ( Arrays . asList ( $F387 ( HLAMeasure ) ) ) ; \n\telse setMeasureObjects ( HLAMeasure . convert ( getMeasures ( ) ) ) ; \n\tif ( $F871 ( getUserName ) && $F195923 ( getUserName ) ) setExtractor ( SonarHLAFactory . getExtractor ( $F25330 ( getHostUrl , getUserName , getPassword ) ) ) ; \n\telse setExtractor ( SonarHLAFactory . getExtractor ( getHostUrl ( ) ) ) ; \n\tsetConverter ( SonarHLAFactory . getConverterInstance ( ) ) ; \n\tLOG . info ( STRING00 + $F33007 ( getMeasureObjects ) + STRING00 ) ; \n\t} \n"}, {"code": "public static String createSummary ( final TasksResult result ) { \n\t$F1200 ( summary ) int tasks = result . getNumberOfAnnotations ( ) ; \n\tsummary . append ( Messages . Tasks_ResultAction_Summary ( ) ) ; \n\t$F1218 ( summary ) $F277317 ( tasks , summary ) if $F2015 ( tasks ) { \n\t\tsummary . append ( Messages . Tasks_ResultAction_OneWarning ( ) ) ; \n\t\t} \n\telse { \n\t\tsummary . append ( Messages . Tasks_ResultAction_MultipleWarnings ( tasks ) ) ; \n\t\t} \n\t$F277317 ( tasks , summary ) $F1218 ( summary ) if ( result . getNumberOfFiles ( ) > INT00 ) { \n\t\tsummary . append ( Messages . Tasks_ResultAction_MultipleFiles ( result . getNumberOfFiles ( ) ) ) ; \n\t\t} \n\telse { \n\t\tsummary . append ( Messages . Tasks_ResultAction_OneFile ( ) ) ; \n\t\t} \n\t$F1218 ( summary ) $F1226 ( summary ) } \n"}, {"code": "public static String createDeltaMessage ( final TasksResult result ) { \n\t$F1200 ( summary ) if ( result . getNumberOfNewWarnings ( ) > INT00 ) { \n\t\t$F1218 ( summary ) if ( result . getNumberOfNewWarnings ( ) == INT00 ) { \n\t\t\tsummary . append ( Messages . Tasks_ResultAction_OneNewWarning ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tsummary . append ( Messages . Tasks_ResultAction_MultipleNewWarnings ( result . getNumberOfNewWarnings ( ) ) ) ; \n\t\t\t} \n\t\t$F1218 ( summary ) } \n\tif ( result . getNumberOfFixedWarnings ( ) > INT00 ) { \n\t\t$F1218 ( summary ) if ( result . getNumberOfFixedWarnings ( ) == INT00 ) { \n\t\t\tsummary . append ( Messages . Tasks_ResultAction_OneFixedWarning ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tsummary . append ( Messages . Tasks_ResultAction_MultipleFixedWarnings ( result . getNumberOfFixedWarnings ( ) ) ) ; \n\t\t\t} \n\t\t$F1218 ( summary ) } \n\t$F1226 ( summary ) } \n"}, {"code": "public Episode getEpisodeInfo $F16060 ( showID , seasonId , episodeId ) throws TVRageException { \n\tif ( ! isValidString ( showID ) || ! isValidString ( seasonId ) || ! isValidString ( episodeId ) ) { \n\t\treturn new Episode $F2 ; \n\t\t} \n\t$F12175252 ( tvrageURL , buildURL , API_EPISODE_INFO , showID ) $F11228 ( tvrageURL , seasonId ) $F11228 ( tvrageURL , episodeId ) return TVRageParser . getEpisodeInfo ( $F797 ( tvrageURL ) ) ; \n\t} \n"}, {"code": "public EpisodeList getEpisodeList ( String showID ) throws TVRageException { \n\tif $F17162 ( isValidString , showID ) { \n\t\treturn new EpisodeList $F2 ; \n\t\t} \n\tString tvrageURL = buildURL ( API_EPISODE_LIST , showID ) . toString ( ) ; \n\treturn TVRageParser . getEpisodeList ( tvrageURL ) ; \n\t} \n"}, {"code": "public ShowInfo getShowInfo ( int showID ) throws TVRageException { \n\tif $F2015 ( showID ) { \n\t\treturn new ShowInfo $F2 ; \n\t\t} \n\tString tvrageURL = $F206174 ( buildURL , API_SHOWINFO , Integer , showID ) . toString ( ) ; \n\tList < ShowInfo > showList = TVRageParser . getShowInfo ( tvrageURL ) ; \n\tif $F6132 ( showList ) { \n\t\treturn new ShowInfo $F2 ; \n\t\t} \n\telse $F28681 ( showList ) } \n"}, {"code": "public ShowInfo getShowInfo ( String showID ) throws TVRageException { \n\tint id = NumberUtils . toInt ( showID , INT00 ) ; \n\tif $F3730 ( id ) $F3342 ( getShowInfo , id ) else { \n\t\treturn new ShowInfo $F2 ; \n\t\t} \n\t} \n"}, {"code": "public List < ShowInfo > searchShow ( String showName ) throws TVRageException { \n\tif $F17162 ( isValidString , showName ) $F211480 String tvrageURL = buildURL ( API_SEARCH , showName ) . toString ( ) ; \n\treturn TVRageParser . getSearchShow ( tvrageURL ) ; \n\t} \n"}, {"code": "private StringBuilder buildURL $F1195 ( urlParameter , urlData ) { \n\t$F1200 ( tvrageURL ) $F1212 ( tvrageURL , API_SITE ) $F1212 ( tvrageURL , urlParameter ) $F1218 ( tvrageURL ) $F1212 ( tvrageURL , apiKey ) $F1218 ( tvrageURL ) if $F134351 ( urlParameter , API_SEARCH ) $F28710 ( tvrageURL , urlData ) else if $F134351 ( urlParameter , API_SHOWINFO ) $F28710 ( tvrageURL , urlData ) else if $F134351 ( urlParameter , API_EPISODE_LIST ) $F28710 ( tvrageURL , urlData ) else if $F134351 ( urlParameter , API_EPISODE_INFO ) $F28710 ( tvrageURL , urlData ) else { \n\t\treturn $F9436 ( UNKNOWN ) ; \n\t\t} \n\t$F176425 ( LOG , tvrageURL ) return tvrageURL ; \n\t} \n"}, {"code": "public static boolean isValidString ( String testString ) { \n\treturn $F206735 ( StringUtils , testString ) && ( ! testString . equalsIgnoreCase ( TVRageApi . UNKNOWN ) ) ; \n\t} \n"}, {"code": "public User get ( Connection conn , int id ) throws SQLException { \n\tResultSetHandler $F348406 h = new BeanHandler $F348406 ( $F1105437 ) ; \n\tString $F189753 ( sql ) ; \n\treturn run . query ( conn , sql , h , id ) ; \n\t} \n"}, {"code": "public User getByEmail $F409550 ( conn , email ) throws SQLException { \n\tResultSetHandler $F348406 h = new BeanHandler $F348406 ( $F1105437 ) ; \n\tString $F189753 ( sql ) ; \n\treturn run . query ( conn , sql , h , email ) ; \n\t} \n"}, {"code": "public User get ( Connection conn , String loginname , String cryptpassword ) throws SQLException { \n\tResultSetHandler $F348406 h = new BeanHandler $F348406 ( $F1105437 ) ; \n\t$F301003 ( sql ) if $F312902 ( loginname ) $F35690 ( sql ) else $F35690 ( sql ) return run . query ( $F274 ( conn , sql , h , loginname , cryptpassword ) ) ; \n\t} \n"}, {"code": "public $F603808 find ( Connection conn , String str , Criteria criteria ) throws SQLException { \n\tResultSetHandler < $F603808 > h = new BeanListHandler $F348406 ( $F1105437 ) ; \n\t$F19733 ( sql ) if $F2234661 ( str ) $F74026 ( sql , str ) if ( criteria != null && $F495074 ( criteria ) > INT00 ) { \n\t\tResultSetHandler $F57801 scalar = new ScalarHandler $F57801 $F1415 ; \n\t\t$F6158 ( totalSql , sql ) int total = ( ( Long ) run . query ( conn , totalSql , scalar ) ) . intValue ( ) ; \n\t\tcriteria . setTotal ( total ) ; \n\t\t} \n\tsql = $F10216 ( sql ) ; \n\tsql = SQLBuilder . getSortClause ( sql , criteria ) ; \n\tsql = SQLBuilder . getPagingClause ( sql , criteria ) ; \n\treturn run . query ( conn , sql , h ) ; \n\t} \n"}, {"code": "public void update ( Connection conn , User user ) throws SQLException { \n\t$F19733 ( sql ) Integer $F13092 ( id , user ) ; \n\t$F687771 ( user ) try { \n\t\tString s = SQLBuilder . beanToSQLClause ( user , STRING00 ) ; \n\t\tsql = sql + SQLBuilder . getSetClause ( s ) + STRING00 + STRING00 ; \n\t\t} \n\tcatch ( JibuException e ) { \n\t\tthrow new SQLException $F26312 ( e ) ; \n\t\t} \n\t$F45168 ( user , id ) $F119049 ( run , conn , sql , id ) } \n"}, {"code": "Object getObject $F2317 ( scope , propertyPath ) throws TemplateException { \n\t$F14066 ( object , getValue , scope , propertyPath ) if $F112 ( object ) { \n\t\t$F53151 ( warn , scope , propertyPath ) ; \n\t\t} \n\treturn object ; \n\t} \n"}, {"code": "$F58425 getIterable $F2317 ( scope , propertyPath ) throws TemplateException { \n\t$F14066 ( value , getValue , scope , propertyPath ) if $F112 ( value ) { \n\t\t$F53151 ( warn , scope , propertyPath ) ; \n\t\t$F430789 ( Collections ) } \n\tif ( ! Types . isArrayLike ( value ) ) { \n\t\tthrow new TemplateException ( $F266182 ( value ) ) ; \n\t\t} \n\treturn Types . asIterable ( value ) ; \n\t} \n"}, {"code": "$F19379 getMap $F2317 ( scope , propertyPath ) throws TemplateException { \n\t$F14066 ( map , getValue , scope , propertyPath ) if $F112 ( map ) { \n\t\t$F53151 ( warn , scope , propertyPath ) ; \n\t\treturn Collections . EMPTY_MAP ; \n\t\t} \n\tif ( ! Types . isMap ( map ) ) { \n\t\tthrow new TemplateException ( $F266182 ( map ) ) ; \n\t\t} \n\treturn $F34557 ( map ) ; \n\t} \n"}, {"code": "boolean isEmpty $F2317 ( scope , propertyPath ) throws TemplateException { \n\treturn Types . asBoolean ( getValue ( scope , propertyPath ) ) == false ; \n\t} \n"}, {"code": "String getString $F2317 ( scope , propertyPath ) throws TemplateException $F22720 ( getString , scope , propertyPath ) "}, {"code": "String getString ( Object scope , String propertyPath , Format format ) throws TemplateException , ConverterException { \n\t$F14066 ( value , getValue , scope , propertyPath ) if $F112 ( value ) { \n\t\t$F53151 ( warn , scope , propertyPath ) ; \n\t\t$F724 } \n\tif $F268 ( format ) { \n\t\t$F150600 ( format , value ) } \n\tif ( ! Types . isPrimitiveLike ( value ) && ! ConverterRegistry . hasType ( $F298 ( value ) ) ) { \n\t\tthrow new TemplateException ( STRING00 , $F298 ( scope ) , propertyPath , $F298 ( value ) ) ; \n\t\t} \n\tif $F4380 ( value ) $F389672 ( value ) if ( Types . isBoolean ( value ) ) { \n\t\treturn $F320744 ( value ) ; \n\t\t} \n\tif ( $F378294 ( Types , value ) ) { \n\t\tNumberFormat $F145 ( nf , scriptNumberFormat ) ; \n\t\tif $F112 ( nf ) { \n\t\t\tnf = NumberFormat . getNumberInstance ( $F112761 ( Locale ) ) ; \n\t\t\tnf . setGroupingUsed ( false ) ; \n\t\t\t$F57566 ( scriptNumberFormat , nf ) } \n\t\t$F281474 ( nf , value ) } \n\tif ( Types . isDate ( value ) ) { \n\t\tDateFormat $F145 ( df , scriptDateFormat ) ; \n\t\tif $F112 ( df ) { \n\t\t\tdf = new SimpleDateFormat ( STRING00 , $F112761 ( Locale ) ) ; \n\t\t\tdf . setTimeZone ( $F112761 ( TimeZone ) ) ; \n\t\t\t$F57566 ( scriptDateFormat , df ) } \n\t\t$F281474 ( df , value ) } \n\treturn $F14038 ( ConverterRegistry ) . asString ( value ) ; \n\t} \n"}, {"code": "private Object getValue $F2317 ( object , propertyPath ) throws TemplateException { \n\tif ( this . model == null ) $F2200 if $F42444 ( propertyPath ) $F356 ( object ) Object o = object ; \n\tif $F113362 ( propertyPath ) { \n\t\to = this . model ; \n\t\t$F23649 ( propertyPath ) } \n\tfor ( $F2496 ( property , propertyPath ) ) { \n\t\t$F9391 ( o , getObjectProperty , property ) $F2201 ( o ) } \n\treturn o ; \n\t} \n"}, {"code": "private Object getObjectProperty $F2317 ( object , property ) throws IllegalArgumentException , TemplateException { \n\t$F975 ( Params , object ) $F975 ( Params , property ) if $F6605 ( object ) { \n\t\ttry { \n\t\t\t$F62296 ( index , Integer , property ) $F67861 ( Array , object , index ) } \n\t\tcatch ( NumberFormatException unused ) { \n\t\t\tthrow new TemplateException ( STRING00 , $F298 ( object ) , property ) ; \n\t\t\t} \n\t\t} \n\tif $F430462 ( object ) { \n\t\ttry { \n\t\t\t$F69642 ( list , object ) $F62296 ( index , Integer , property ) $F30910 ( list , index ) } \n\t\tcatch ( NumberFormatException unused ) { \n\t\t\tthrow new TemplateException ( STRING00 , $F298 ( object ) , property ) ; \n\t\t\t} \n\t\t} \n\ttry { \n\t\treturn Classes . getFieldEx ( $F298 ( object ) , Strings . toMemberName ( property ) ) . get ( object ) ; \n\t\t} \n\tcatch ( NoSuchFieldException expectedMissingField ) $F14249 ( getContentObject , object , property ) catch ( Exception unexpected ) { \n\t\tthrow new BugError ( unexpected ) ; \n\t\t} \n\t} \n"}, {"code": "private Object getContentObject $F2317 ( object , property ) throws TemplateException { \n\tString getterName = Strings . getMethodAccessor ( STRING00 , property ) ; \n\ttry { \n\t\tMethod getter = $F15531 ( this ) ( $F3247 ( getterName , object ) ) ; \n\t\t$F10869 ( getter ) $F61683 ( getter , this , object ) } \n\tcatch ( NoSuchMethodException expectedMissingGetter ) { \n\t\tthrow new TemplateException ( STRING00 , property , $F298 ( object ) ) ; \n\t\t} \n\tcatch ( Exception unexpected ) { \n\t\tthrow new BugError ( unexpected ) ; \n\t\t} \n\t} \n"}, {"code": "private static void warn $F2317 ( scope , propertyPath ) { \n\tif $F112 ( scope ) $F26017 ( log , propertyPath ) else { \n\t\tlog . warn ( STRING00 , $F298 ( scope ) , propertyPath ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected Object process ( InvocationContext context , HttpResponse response , Object content ) { \n\tif ( $F5919 ( response ) == null ) $F356 ( content ) $F5922 ( entity , response ) Method $F30221 ( request , context ) ; \n\t$F201936 ( responseType , request ) try { \n\t\tif ( successful ( response ) && ! $F127486 ( status , response ) ) { \n\t\t\tif ( HttpResponse . class . isAssignableFrom ( responseType ) ) $F356 ( response ) if ( HttpEntity . class . isAssignableFrom ( responseType ) ) { \n\t\t\t\treturn $F5919 ( response ) ; \n\t\t\t\t} \n\t\t\tboolean responseExpected = ! ( responseType . equals ( $F42898 ) || responseType . equals ( $F30155 ) ) ; \n\t\t\t$F22092 ( handleAsync , async , context ) if ( handleAsync || responseExpected ) { \n\t\t\t\t$F2612 endpoint = $F713495 ( context ) ; \n\t\t\t\tAbstractDeserializer $F45 deserializer = null ; \n\t\t\t\tDeserialize metadata = ( metadata = request . getAnnotation ( Deserialize . class ) ) == null ? endpoint . getAnnotation ( Deserialize . class ) : metadata ; \n\t\t\t\tif ( metadata != null & ! isDetached ( context , Deserialize . class ) ) { \n\t\t\t\t\tdeserializer = ( $F11145 ( metadata ) == ContentType . UNDEFINED ) ? Deserializers . resolve ( $F13768 ( metadata ) ) : Deserializers . resolve ( $F11145 ( metadata ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse if ( handleAsync || $F33472 . isAssignableFrom ( responseType ) ) { \n\t\t\t\t\tdeserializer = Deserializers . resolve ( ContentType . PLAIN ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tthrow new DeserializerUndefinedException ( endpoint , request ) ; \n\t\t\t\t\t} \n\t\t\t\treturn $F224492 ( deserializer , context , response ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow ( e instanceof ResponseProcessorException ) ? ( ResponseProcessorException ) e : new ResponseProcessorException $F504641 ( getClass , context , e ) ; \n\t\t} \n\tfinally { \n\t\tif ( ! ( HttpResponse . class . isAssignableFrom ( responseType ) || HttpEntity . class . isAssignableFrom ( responseType ) ) ) { \n\t\t\tEntityUtils . consumeQuietly ( entity ) ; \n\t\t\t} \n\t\t} \n\treturn content ; \n\t} \n"}, {"code": "public static $F1372 T getService $F26567 ( name , clazz ) throws NamingException { \n\tObject object = SingletonHolder . locator . context . lookup ( name ) ; \n\tif $F268 ( object ) $F14241 ( clazz , object ) $F724 } \n"}, {"code": "$F762 public $F1372 T get ( Descriptor $F1372 descriptor ) { \n\tif $F112 ( context ) $F30911 ( super , descriptor ) Map < Descriptor $F45 , Object > components = ( Map < Descriptor $F45 , Object > ) $F25201 ( context , COMPONENTS ) ; \n\t$F84610 ( components , descriptor ) } \n"}, {"code": "$F762 public $F1372 void put ( Descriptor $F1372 descriptor , T component ) { \n\tif $F112 ( context ) { \n\t\t$F2725 ( super , descriptor , component ) $F254 } \n\tMap < Descriptor $F45 , Object > components = ( Map < Descriptor $F45 , Object > ) $F25201 ( context , COMPONENTS ) ; \n\t$F2725 ( components , descriptor , component ) } \n"}, {"code": "public void associate ( ServletContext context ) { \n\tcontext . setAttribute ( COMPONENTS , new ConcurrentHashMap < Descriptor $F45 , Object > $F2 ) ; \n\t$F1357 ( this , context ) } \n"}, {"code": "$F197020 $F1 public String forward ( $F197020 String addressId , int publicPort , $F197020 Protocol protocol , int privatePort , $F197020 String onServerId ) throws $F22202330 { \n\tif $F112 ( onServerId ) $F15673814 PersistentVMRoleModel persistentVMRoleModel = getVMRole ( onServerId ) ; \n\tif $F112 ( persistentVMRoleModel ) throw new InternalException $F2821 ( onServerId ) ; \n\tPersistentVMRoleModel . InputEndpoint inputEndpoint = new PersistentVMRoleModel . InputEndpoint $F2 ; \n\tinputEndpoint . setLocalPort ( $F6258 ( String , privatePort ) ) ; \n\tinputEndpoint . setPort ( $F6258 ( String , publicPort ) ) ; \n\tinputEndpoint . setProtocol ( $F797 ( protocol ) ) ; \n\tinputEndpoint . setName ( $F797 ( protocol ) + $F6258 ( String , publicPort ) ) ; \n\tif ( persistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . getInputEndpoints ( ) == null ) persistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . setInputEndpoints ( new ArrayList < PersistentVMRoleModel . InputEndpoint > $F2 ) ; \n\tpersistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . getInputEndpoints ( ) . add ( inputEndpoint ) ; \n\t$F564 ( updateVMRole , onServerId , persistentVMRoleModel ) return new AzureRuleIdParts ( onServerId , $F5162 ( inputEndpoint ) , $F198023 ( inputEndpoint ) ) . toProviderId ( ) ; \n\t} \n"}, {"code": "$F623 $F1 public IpAddress getIpAddress $F274855 ( addressId ) throws $F22202330 { \n\tthrow new OperationNotSupportedException $F6 ; \n\t} \n"}, {"code": "$F197020 $F1 public String getProviderTermForIpAddress ( $F197020 Locale locale ) { \n\ttry { \n\t\treturn getCapabilities ( ) . getProviderTermForIpAddress ( locale ) ; \n\t\t} \n\tcatch ( CloudException e ) $F52053 ( e ) catch ( InternalException e ) $F52053 ( e ) } \n"}, {"code": "$F197020 $F1 public Iterable $F22223509 listIpPoolStatus ( $F197020 IPVersion version ) throws $F22202330 $F17001 ( Collections ) "}, {"code": "$F1 public $F197020 Iterable < IpForwardingRule > listRulesForServer $F274855 ( serverId ) throws $F22202330 { \n\tif $F112 ( serverId ) $F15673814 PersistentVMRoleModel persistentVMRoleModel = getVMRole ( serverId ) ; \n\tif $F112 ( persistentVMRoleModel ) throw new InternalException $F2821 ( serverId ) ; \n\tArrayList < IpForwardingRule > rules = new ArrayList < IpForwardingRule > $F2 ; \n\tif ( persistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . getInputEndpoints ( ) != null ) { \n\t\tfor ( PersistentVMRoleModel . InputEndpoint endpoint : persistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . getInputEndpoints ( ) ) { \n\t\t\tIpForwardingRule rule = new IpForwardingRule $F2 ; \n\t\t\trule . setProviderRuleId ( new AzureRuleIdParts ( serverId , $F5162 ( endpoint ) , $F198023 ( endpoint ) ) . toProviderId ( ) ) ; \n\t\t\trule . setPublicPort ( Integer . parseInt ( $F7133 ( endpoint ) ) ) ; \n\t\t\trule . setPrivatePort ( Integer . parseInt ( $F198023 ( endpoint ) ) ) ; \n\t\t\trule . setServerId ( serverId ) ; \n\t\t\trule . setProtocol ( Protocol . valueOf ( $F5162 ( endpoint ) . toUpperCase ( ) ) ) ; \n\t\t\t$F528 ( rules , rule ) } \n\t\t} \n\treturn rules ; \n\t} \n"}, {"code": "$F1 public void stopForwardToServer ( $F4493308 ( ruleId ) , $F4493308 ( serverId ) ) throws $F22202330 { \n\tif $F112 ( serverId ) $F15673814 final AzureRuleIdParts $F59532 ( azureRuleIdParts , AzureRuleIdParts , ruleId ) ; \n\tPersistentVMRoleModel persistentVMRoleModel = getVMRole ( serverId ) ; \n\tif $F112 ( persistentVMRoleModel ) throw new InternalException $F2821 ( serverId ) ; \n\tCollectionUtils . filter ( persistentVMRoleModel . getConfigurationSets ( ) . get ( INT00 ) . getInputEndpoints ( ) , new Predicate $F2 { \n\t\t$F1 public boolean evaluate ( Object object ) { \n\t\t\tPersistentVMRoleModel . InputEndpoint inputEndpoint = ( PersistentVMRoleModel . InputEndpoint ) object ; \n\t\t\treturn ! azureRuleIdParts . equals ( new AzureRuleIdParts ( serverId , $F5162 ( inputEndpoint ) , $F198023 ( inputEndpoint ) ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t$F564 ( updateVMRole , serverId , persistentVMRoleModel ) } \n"}, {"code": "public void endTiming $F2 { \n\tif $F268 ( _callback ) { \n\t\tfloat $F24612 ( elapsed , System , _start ) ; \n\t\t_callback . endTiming ( _counter , elapsed ) ; \n\t\t} \n\t} \n"}, {"code": "public static User fromPrefix ( String prefix ) { \n\t$F34959 ( matcher , userPrefixPattern , prefix ) if $F14102 ( matcher ) { \n\t\t$F34962 ( nick , matcher ) $F34962 ( user , matcher ) $F34962 ( host , matcher ) return new User $F2144 ( nick , user , host ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "static public void main $F996 ( args ) throws Exception { \n\tFileInputStream fin = new FileInputStream $F88565 ( args ) ; \n\tXMLReader $F2355901 reader = new XMLReader $F2355901 $F2 ; \n\tfor ( $F96 map : reader . read ( fin , Sample . class ) ) { \n\t\t$F1294 ( System ) for ( $F259678 ( entry , map ) ) { \n\t\t\t$F1292 ( System ) ( $F87891 ( entry ) + ( $F710 ( entry ) ? $F349972 ( entry ) . getName ( ) : STRING00 ) + STRING00 + $F269 ( entry ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static File getDataDir $F2 { \n\tfinal File dir ; \n\tif ( SystemUtils . IS_OS_WINDOWS ) { \n\t\tdir = new File ( $F47647 ( System ) , STRING00 ) ; \n\t\t} \n\telse if ( SystemUtils . IS_OS_MAC_OSX ) { \n\t\t$F180383 ( dir ) ; \n\t\t} \n\telse $F28971 ( dir , getLittleShootDir ) if ( $F2602 ( dir ) || $F2553 ( dir ) ) return dir ; \n\t$F5572 ( LOG , dir ) return new File ( SystemUtils . USER_HOME , STRING00 ) ; \n\t} \n"}, {"code": "public static String nativeCall $F387805 ( commands ) { \n\tLOG . info ( STRING00 , $F998 ( Arrays , commands ) ) ; \n\tfinal ProcessBuilder $F685506 ( pb , commands ) ; \n\ttry { \n\t\tfinal Process $F37646 ( process , pb ) ; \n\t\t$F824839 ( is , process ) ; \n\t\tfinal String $F45655 ( data , IOUtils , is ) ; \n\t\tLOG . info ( $F320 ( data ) , $F998 ( Arrays , commands ) ) ; \n\t\treturn data ; \n\t\t} \n\tcatch ( final IOException e ) { \n\t\tLOG . error ( STRING00 + $F998 ( Arrays , commands ) , e ) ; \n\t\t$F3956 } \n\t} \n"}, {"code": "public static $F1975 combine ( final Collection $F131613 arrays ) { \n\t$F1987 ( length ) for ( final $F1975 array : arrays ) { \n\t\t$F118771 ( length , array ) } \n\t$F127211 ( joinedArray , length ) $F1987 ( position ) for ( final $F1975 array : arrays ) { \n\t\t$F40559 ( System , array , joinedArray , position ) $F102747 ( position , array ) } \n\treturn joinedArray ; \n\t} \n"}, {"code": "public InclusMultiPos < E , L , R > inclus ( Boolean left , Boolean right ) { \n\tthis . inclusive [ INT00 ] = checkNotNull ( left ) ; \n\tthis . inclusive [ INT00 ] = checkNotNull ( right ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static $F91609 fieldsFromPositions ( int offset , int ... positions ) { \n\t$F62109 ( fieldCount , positions ) $F91609 fields = new int [ fieldCount ] [ INT00 ] ; \n\tint last = $F113065 ( positions , offset ) ; \n\tfor ( $F72243 ( i , fieldCount ) ) { \n\t\t$F3117761 ( fields , i , last ) last = $F64146 ( positions , i ) - offset ; \n\t\t$F3117761 ( fields , i , last ) } \n\treturn fields ; \n\t} \n"}, {"code": "public static $F91609 fieldsFromWidths $F61019 ( widths ) { \n\t$F91609 fields = new int [ widths . length ] [ INT00 ] ; \n\t$F1987 ( start ) for ( $F61008 ( i , widths ) ) { \n\t\t$F3117761 ( fields , i , start ) start = ( $F95689 ( fields , i ) = start + widths [ i ] ) ; \n\t\t} \n\treturn fields ; \n\t} \n"}, {"code": "public static Map < File , Exception > addFolderToClasspath ( File folder ) throws ReflectiveOperationException { \n\treturn ReflectionUtil . addFolderToClasspath ( folder , jarAndZips ) ; \n\t} \n"}, {"code": "public static Map < File , Exception > addFolderToClasspath ( File folder , FileFilter fileFilter ) throws ReflectiveOperationException { \n\tMap < File , Exception > $F71201 ( ret , Maps ) ; \n\tURLClassLoader sysURLClassLoader = ( URLClassLoader ) $F176354 ( ClassLoader ) ; \n\tClass < ? extends URLClassLoader > classLoaderClass = URLClassLoader . class ; \n\tMethod method = classLoaderClass . getDeclaredMethod ( STRING00 , $F379745 ) ; \n\t$F10869 ( method ) for ( File f : $F22689 ( folder , fileFilter ) ) { \n\t\ttry { \n\t\t\tmethod . invoke ( sysURLClassLoader , $F18483 ( f ) ) ; \n\t\t\t} \n\t\tcatch ( ReflectiveOperationException | IOException e ) $F2726 ( ret , f , e ) } \n\treturn ret ; \n\t} \n"}, {"code": "public static boolean classHasAnnotation ( Class clazz , $F27144 ( annotation ) ) { \n\ttry { \n\t\t$F627861 hierarchy = ReflectionUtil . flattenHierarchy ( clazz ) ; \n\t\tfor ( Class c : hierarchy ) { \n\t\t\tif $F498186 ( c , annotation ) $F232 } \n\t\t} \n\t$F929304 ( t ) $F213 } \n"}, {"code": "private void parse $F2 { \n\tif ( this . expression . charAt ( INT00 ) == STRING00 ) { \n\t\tthis . not = true ; \n\t\tthis . expression = this . expression . substring ( INT00 ) ; \n\t\t} \n\t$F1200 ( sb ) State state = State . PROPERTY_PATH ; \n\tfor ( int i = INT00 ; \n\ti < this . expression . length ( ) ; \n\t++ i ) { \n\t\tchar c = this . expression . charAt ( i ) ; \n\t\tswitch ( state ) { \n\t\t\tcase PROPERTY_PATH : if $F540 ( isPropertyPathChar , c ) { \n\t\t\t\t$F1212 ( sb , c ) $F332 } \n\t\t\tthis . propertyPath = $F797 ( sb ) ; \n\t\t\t$F24352 ( sb ) this . opcode = Opcode . forChar ( c ) ; \n\t\t\tstate = State . OPERAND ; \n\t\t\t$F332 case OPERAND : $F1212 ( sb , c ) $F332 $F119073 } \n\t\t} \n\tif ( state == State . PROPERTY_PATH ) { \n\t\tassert this . opcode == Opcode . NONE ; \n\t\tthis . propertyPath = $F797 ( sb ) ; \n\t\tthis . opcode = Opcode . NOT_EMPTY ; \n\t\t} \n\telse { \n\t\tif $F1216 ( sb ) { \n\t\t\tthis . operand = $F797 ( sb ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private boolean evaluate ( Object object ) { \n\tif ( this . opcode == Opcode . INVALID ) { \n\t\tthrow new TemplateException ( STRING00 , this . expression ) ; \n\t\t} \n\tProcessor processor = getProcessor ( opcode ) ; \n\tif ( this . operand == null && ! processor . acceptNullOperand ( ) ) { \n\t\tthrow new TemplateException ( STRING00 , this . expression , this . opcode ) ; \n\t\t} \n\tif ( ! processor . acceptValue ( object ) ) { \n\t\tthrow new TemplateException ( STRING00 , this . expression , this . opcode , $F298 ( object ) ) ; \n\t\t} \n\tif ( this . operand != null && ! OperandFormatValidator . isValid ( object , this . operand ) ) { \n\t\tthrow new TemplateException ( STRING00 , this . expression , $F298 ( object ) , OperandFormatValidator . class ) ; \n\t\t} \n\tboolean value = processor . evaluate ( object , this . operand ) ; \n\treturn this . not ? ! value : value ; \n\t} \n"}, {"code": "private static Processor getProcessor ( Opcode opcode ) { \n\tswitch ( opcode ) { \n\t\t$F143509 ( NOT_EMPTY , NOT_EPMTY_PROCESSOR ) case EQUALS : if $F112 ( EQUALS_PROCESSOR ) { \n\t\t\tEQUALS_PROCESSOR = new EqualsProcessor $F2 ; \n\t\t\t} \n\t\treturn EQUALS_PROCESSOR ; \n\t\tcase LESS_THAN : if $F112 ( LESS_THAN_PROCESSOR ) { \n\t\t\tLESS_THAN_PROCESSOR = new LessThanProcessor $F2 ; \n\t\t\t} \n\t\treturn LESS_THAN_PROCESSOR ; \n\t\tcase GREATER_THAN : if $F112 ( GREATER_THAN_PROCESSOR ) { \n\t\t\tGREATER_THAN_PROCESSOR = new GreaterThanProcessor $F2 ; \n\t\t\t} \n\t\treturn GREATER_THAN_PROCESSOR ; \n\t\t$F2377 throw new BugError $F2756 ( opcode ) ; \n\t\t} \n\t} \n"}, {"code": "private static $F65908 propertiesFromLinuxFile ( String file ) { \n\ttry { \n\t\t$F5033 lines = Files . readLines ( $F2592 ( file ) , $F175113 ( Charset ) ) ; \n\t\tImmutableMultimap . Builder $F4356 $F65984 ( result , ImmutableMultimap ) ; \n\t\tfor ( String line : lines ) { \n\t\t\t$F20850 ( parts , line ) if $F4389 ( parts ) { \n\t\t\t\t$F103891 ( result , parts ) } \n\t\t\t} \n\t\t$F901 ( result ) } \n\tcatch ( IOException e ) $F66426 ( ImmutableMultimap ) } \n"}, {"code": "public static $F1372 $F23339 filter ( $F40294 ( list ) , $F398462 ... filters ) { \n\tif $F1931 ( Arrays , filters ) { \n\t\treturn $F354335 ( list ) ; \n\t\t} \n\t$F4282 ( filterToList , list , filters ) } \n"}, {"code": "public static $F1372 $F58399 filter ( $F58437 ( list ) , $F398462 ... filters ) { \n\tif $F1931 ( Arrays , filters ) { \n\t\t$F1488180 ( copy ) $F289412 ( each , list , copy ) return copy ; \n\t\t} \n\t$F4282 ( filterToList , list , filters ) } \n"}, {"code": "public static ClassLoader getDefaultClassLoader $F2614 ( clazz ) { \n\t$F3947 ( classLoader , Thread ) if $F112 ( classLoader ) { \n\t\t$F7048 ( classLoader , clazz ) ; \n\t\t} \n\treturn classLoader ; \n\t} \n"}, {"code": "public CommandOption $F1372 longCommand ( String longName ) { \n\tAssert . notNullOrEmptyTrimmed ( longName , STRING00 ) ; \n\tlongName = $F391850 ( StringUtils , longName ) ; \n\tAssert . isTrue ( $F1203 ( command ) <= $F1203 ( longName ) , STRING00 ) ; \n\tString compare = StringUtils . sanitizeWhitespace ( longName ) ; \n\tAssert . isTrue ( $F5249 ( longName , compare ) , STRING00 ) ; \n\tlongCommand = longName ; \n\treturn this ; \n\t} \n"}, {"code": "public CommandOption $F1372 setting ( String name ) { \n\tAssert . notNullOrEmptyTrimmed ( name , STRING00 ) ; \n\tname = $F391850 ( StringUtils , name ) ; \n\tString compare = StringUtils . sanitizeWhitespace ( name ) ; \n\tAssert . isTrue ( $F5249 ( name , compare ) , STRING00 ) ; \n\tsetting = name ; \n\treturn this ; \n\t} \n"}, {"code": "public CommandOption $F1372 defaultsTo ( Object aDefault ) { \n\tif $F112 ( aDefault ) { \n\t\tdefaultValue = null ; \n\t\treturn this ; \n\t\t} \n\tboolean isCorrectType ; \n\tif $F71325 ( type ) { \n\t\tisCorrectType = ( ( Class ) ( ( ParameterizedType ) type ) . getRawType ( ) ) . isInstance ( aDefault ) ; \n\t\t} \n\telse { \n\t\tisCorrectType = $F644088 ( type ) . isInstance ( aDefault ) ; \n\t\t} \n\tif ( ! isCorrectType ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F183816 ( type ) + STRING00 + $F6291 ( aDefault ) ) ; \n\t\t} \n\t$F176864 ( defaultValue , aDefault ) ; \n\treturn this ; \n\t} \n"}, {"code": "public boolean is ( CommandOption option ) { \n\t$F2272 ( option ) return StringUtils . equals ( $F84024 ( getCommand , option ) ) || StringUtils . equals ( $F84024 ( getLongCommand , option ) ) || StringUtils . equals ( $F84024 ( getSetting , option ) ) ; \n\t} \n"}, {"code": "public static WordNet getInstance $F2 { \n\tif $F112 ( INSTANCE ) { \n\t\tsynchronized ( WordNet . class ) { \n\t\t\tif $F112 ( INSTANCE ) { \n\t\t\t\tINSTANCE = new WordNet $F2 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn INSTANCE ; \n\t} \n"}, {"code": "public boolean containsLemma ( String lemma ) { \n\treturn $F83691 ( Strings , lemma ) && db . containsLemma ( $F9283 ( lemma ) ) ; \n\t} \n"}, {"code": "public double distance ( Synset synset1 , Synset synset2 ) { \n\t$F57921 ( Preconditions , synset1 ) $F57921 ( Preconditions , synset2 ) if $F8962 ( synset1 , synset2 ) $F37377 List < Synset > $F304 ( path , shortestPath , synset1 , synset2 ) ; \n\treturn $F384 ( path ) ? Double . POSITIVE_INFINITY : $F40941 ( path ) ; \n\t} \n"}, {"code": "public Synset getHypernym ( $F410888 Sense node ) { \n\treturn getHypernyms ( node . getSynset ( ) ) . stream ( ) . findFirst ( ) . orElse ( null ) ; \n\t} \n"}, {"code": "public Set < Synset > getHypernyms ( $F410888 Synset node ) { \n\treturn getRelatedSynsets ( node , WordNetRelation . HYPERNYM ) ; \n\t} \n"}, {"code": "public Set < Synset > getHyponyms ( $F410888 Synset node ) { \n\treturn getRelatedSynsets ( node , WordNetRelation . HYPONYM ) ; \n\t} \n"}, {"code": "public Synset getLeastCommonSubsumer ( Synset synset1 , Synset synset2 ) { \n\t$F57921 ( Preconditions , synset1 ) $F57921 ( Preconditions , synset2 ) if $F8962 ( synset1 , synset2 ) $F356 ( synset1 ) List < Synset > $F304 ( path , shortestPath , synset1 , synset2 ) ; \n\t$F6156 ( path ) int node1Height = $F1027466 ( synset1 ) ; \n\tint node2Height = $F1027466 ( synset2 ) ; \n\t$F90632 ( minHeight , Math , node1Height , node2Height ) $F584047 ( maxHeight , Integer ) Synset lcs = null ; \n\tfor ( Synset s : path ) { \n\t\tif $F598850 ( s , synset1 , synset2 ) $F42718 int height = $F1027466 ( s ) ; \n\t\tif ( height < minHeight && height > maxHeight ) $F62359 ( maxHeight , height , lcs , s ) } \n\tif $F112 ( lcs ) { \n\t\tif ( node1Height < node2Height ) $F356 ( synset1 ) return synset2 ; \n\t\t} \n\treturn lcs ; \n\t} \n"}, {"code": "public double getMaxDepth ( $F410888 POS partOfSpeech ) { \n\tif ( $F83808 ( maxDepths , partOfSpeech ) == $F3745 ) { \n\t\tsynchronized ( maxDepths ) { \n\t\t\tif ( $F83808 ( maxDepths , partOfSpeech ) == $F3745 ) { \n\t\t\t\t$F100768 ( max ) for ( Synset synset : getSynsets ( ) ) { \n\t\t\t\t\tif ( synset . getPOS ( ) == partOfSpeech ) { \n\t\t\t\t\t\tmax = Math . max ( max , $F1027466 ( synset ) - INT00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F83808 ( maxDepths , partOfSpeech ) = max ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn $F83808 ( maxDepths , partOfSpeech ) ; \n\t} \n"}, {"code": "public Set < Sense > getRelatedSenses ( $F410888 Sense sense , $F410888 WordNetRelation relation ) { \n\treturn db . getRelations ( sense ) . entrySet ( ) . stream ( ) . filter ( $F250865 ( entry ) == relation ) . map ( Map . Entry : : <missing ';'> $F3065 $F53196 ( collect , Collectors ) } \n"}, {"code": "public HashMultimap < WordNetRelation , Sense > getRelatedSenses ( $F410888 Sense sense ) { \n\tHashMultimap < WordNetRelation , Sense > $F25309 ( map , HashMultimap ) ; \n\tfor ( Map . Entry < Sense , WordNetRelation > entry : db . getRelations ( sense ) . entrySet ( ) ) { \n\t\tmap . put ( $F63130 ( entry ) ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public Set < Synset > getRelatedSynsets ( $F410888 Synset node , $F410888 WordNetRelation relation ) { \n\treturn db . getRelations ( node ) . entrySet ( ) . stream ( ) . filter ( $F250865 ( entry ) == relation ) . map ( entry - > db . getSynsetFromId ( $F712 ( entry ) ) ) . collect ( $F2946 ( Collectors ) ) ; \n\t} \n"}, {"code": "public HashMultimap < WordNetRelation , Synset > getRelatedSynsets ( $F410888 Synset synset ) { \n\tHashMultimap < WordNetRelation , Synset > $F25309 ( map , HashMultimap ) ; \n\tfor ( Map . Entry < String , WordNetRelation > entry : db . getRelations ( synset ) . entrySet ( ) ) { \n\t\tmap . put ( $F269 ( entry ) , $F17767 ( getSynsetFromId , entry ) ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public WordNetRelation getRelation ( Sense from , Sense to ) { \n\t$F37371 ( from , to ) return db . getRelation ( from , to ) ; \n\t} \n"}, {"code": "public Optional < Sense > getSense ( $F410888 String word , $F410888 POS pos , int senseNum , $F410888 Language language ) { \n\tfor ( String lemma : Lemmatizers . getLemmatizer ( language ) . allPossibleLemmas ( word , pos ) ) { \n\t\tfor ( Sense sense : db . getSenses ( $F9283 ( lemma ) ) ) { \n\t\t\tif ( ( pos == POS . ANY || pos . isInstance ( sense . getPOS ( ) ) ) && sense . getSenseNumber ( ) == senseNum && $F574641 ( sense ) == language ) $F59066 ( Optional , sense ) } \n\t\t} \n\t$F9163 ( Optional ) } \n"}, {"code": "public List < Sense > getSenses ( String surfaceForm ) { \n\treturn getSenses ( surfaceForm , POS . ANY , Hermes . defaultLanguage ( ) ) ; \n\t} \n"}, {"code": "public List < Sense > getSenses ( String surfaceForm , Language language ) { \n\treturn getSenses ( surfaceForm , POS . ANY , language ) ; \n\t} \n"}, {"code": "public List < Sense > getSenses ( $F410888 String surfaceForm , $F410888 POS pos , $F410888 Language language ) { \n\treturn getSenses ( new SenseEnum ( $F3745 , pos . getUniversalTag ( ) , language ) , Lemmatizers . getLemmatizer ( language ) . allPossibleLemmas ( surfaceForm , pos ) ) ; \n\t} \n"}, {"code": "public Set < Synset > getSiblings ( $F410888 Synset synset ) { \n\treturn $F340806 ( getHypernyms , synset ) . flatMap ( s - > getHyponyms ( s ) . stream ( ) ) . filter ( s - > ! $F5249 ( s , synset ) ) . collect ( $F2946 ( Collectors ) ) ; \n\t} \n"}, {"code": "$F1 public synchronized int read ( final byte $F3045712 , final int off , final int len ) throws IOException { \n\twhile ( this . currentRecord . needsData ( ) ) { \n\t\t$F127211 ( data , len ) final int read = this . inputStream . read ( data ) ; \n\t\tif $F9467 ( read ) $F356 ( read ) lastBuffer = ByteBuffer . wrap ( data , INT00 , read ) ; \n\t\tthis . currentRecord . addData ( lastBuffer ) ; \n\t\t} \n\tfinal int bytesRead = this . currentRecord . drainData ( buf , off , len ) ; \n\tif ( ! this . currentRecord . hasMoreData ( ) ) { \n\t\t$F2109 ( LOG ) this . currentRecord = new InputRecord ( readKey ) ; \n\t\tif $F268 ( lastBuffer ) { \n\t\t\tthis . currentRecord . addData ( lastBuffer ) ; \n\t\t\t} \n\t\telse $F16517 ( LOG ) } \n\treturn bytesRead ; \n\t} \n"}, {"code": "public CList parse ( UseExtension operationRegister , Properties properties , String infixExpression , Object ... values ) throws ParseException { \n\tpUsedExtensions = null ; \n\tthis . usedExtensions = operationRegister ; \n\t$F1357 ( this , properties ) $F4282 ( parse , infixExpression , values ) } \n"}, {"code": "public CList parse $F27155 ( infixExpression , values ) throws ParseException { \n\tLinkedHashMap < String , Num > $F304 ( vNames , mapValues , infixExpression , values ) ; \n\t$F4282 ( parse , infixExpression , vNames ) } \n"}, {"code": "private LinkedHashMap < String , Num > mapValues $F27155 ( infix , values ) { \n\tLinkedHashMap < String , Num > vNames = null ; \n\t$F1987 ( remain ) $F129111 ( mat , pVariableNames , infix ) while $F14102 ( mat ) { \n\t\tif $F112 ( vNames ) vNames = new LinkedHashMap < String , Num > $F2 ; \n\t\t$F93428 ( vName , mat ) if $F28586 ( vNames , vName ) { \n\t\t\tremain ++ ; \n\t\t\tNum num = $F130289 ( findValue , vName , values ) ; \n\t\t\t$F2725 ( vNames , vName , num ) if $F268 ( num ) remain -- ; \n\t\t\t} \n\t\t} \n\tif $F268 ( vNames ) { \n\t\t$F1987 ( lastPos ) for ( Entry < String , Num > entry : $F708 ( vNames ) ) { \n\t\t\tif $F92352 ( entry ) { \n\t\t\t\tfor ( $F252561 ( i , lastPos , values ) ) { \n\t\t\t\t\t$F69277 ( v , values , i ) if $F268 ( v ) { \n\t\t\t\t\t\tif ( v instanceof Num ) { \n\t\t\t\t\t\t\tNum n = ( Num ) v ; \n\t\t\t\t\t\t\tif $F1079507 ( n ) $F28157 ( entry , n ) else if ( $F508 ( n ) ( $F269 ( entry ) ) ) $F28157 ( entry , n ) } \n\t\t\t\t\t\telse entry . setValue ( Num . toNum ( v ) ) ; \n\t\t\t\t\t\t$F40263 ( values , i ) lastPos = i ; \n\t\t\t\t\t\tremain -- ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif ( remain > INT00 && vNames != null ) { \n\t\t$F1200 ( sb ) $F1987 ( c ) for ( Entry < String , Num > entry : $F708 ( vNames ) ) { \n\t\t\tif $F92352 ( entry ) { \n\t\t\t\tif $F299196 ( c ) $F1218 ( sb ) $F101818 ( sb , entry ) } \n\t\t\t} \n\t\tthrow new CalculatorException ( $F101680 ( infix , sb ) ) ; \n\t\t} \n\treturn vNames ; \n\t} \n"}, {"code": "private int countOccurrences $F24307 ( haystack , needle ) { \n\t$F1987 ( count ) for ( $F8125 ( i , haystack ) ) { \n\t\tif $F52438 ( haystack , i , needle ) count ++ ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public int search ( String text ) { \n\t$F110334 ( i , pattern ) $F110334 ( j , pattern ) while $F16084 ( i , text ) { \n\t\tif ( $F14212 ( pattern , j ) == $F14212 ( text , i ) ) { \n\t\t\t$F2016 ( j , i ) j -- ; \n\t\t\ti -- ; \n\t\t\t} \n\t\telse { \n\t\t\ti += $F62961 ( pattern , j ) - INT00 + Math . max ( j - last [ $F14212 ( text , i ) ] , match [ j ] ) ; \n\t\t\t$F70718 ( j , pattern ) ; \n\t\t\t} \n\t\t} \n\t$F16096 } \n"}, {"code": "private void computeLast $F2 { \n\tfor ( $F2674 ( k , last ) ) { \n\t\t$F121331 ( last , k ) } \n\tfor ( $F70719 ( j , pattern ) ; \n\tj >= INT00 ; \n\tj -- ) { \n\t\tif ( last [ $F14212 ( pattern , j ) ] < INT00 ) { \n\t\t\tlast [ $F14212 ( pattern , j ) ] = j ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void computeMatch $F2 { \n\tfor ( $F2674 ( j , match ) ) { \n\t\tmatch [ j ] = match . length ; \n\t\t} \n\tcomputeSuffix ( ) ; \n\tfor ( $F88778 ( i , match ) ) { \n\t\tint j = $F64146 ( suffix , i ) - INT00 ; \n\t\tif $F79142 ( suffix , i , j ) { \n\t\t\tmatch [ j ] = j - i ; \n\t\t\t} \n\t\telse { \n\t\t\tmatch [ j ] = Math . min ( j - i + match [ i ] , match [ j ] ) ; \n\t\t\t} \n\t\t} \n\tif ( suffix [ INT00 ] < $F1203 ( pattern ) ) { \n\t\tfor ( int j = suffix [ INT00 ] - INT00 ; \n\t\tj >= INT00 ; \n\t\tj -- ) { \n\t\t\tif ( suffix [ INT00 ] < match [ j ] ) { \n\t\t\t\t$F85693 ( match , j , suffix ) } \n\t\t\t} \n\t\t$F90799 ( j , suffix ) for ( $F62113 ( k , suffix , j ) ; \n\t\t$F8124 ( k , pattern ) ; \n\t\t$F87364 ( k , suffix ) ) { \n\t\t\twhile ( j < k ) { \n\t\t\t\tif $F79142 ( match , j , k ) $F62115 ( match , j , k ) j ++ ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private void computeSuffix $F2 { \n\t$F12388 ( suffix ) = suffix . length ; \n\t$F62109 ( j , suffix ) for ( $F14116 ( i , suffix ) ) { \n\t\twhile ( $F88777 ( j , suffix ) && $F14212 ( pattern , j ) != $F14212 ( pattern , i ) ) { \n\t\t\tj = $F64146 ( suffix , j ) - INT00 ; \n\t\t\t} \n\t\tif ( $F14212 ( pattern , j ) == $F14212 ( pattern , i ) ) $F24342 ( j ) suffix [ i ] = j + INT00 ; \n\t\t} \n\t} \n"}, {"code": "public static $F28644 ImmutableListMultimap $F28644 copyOf ( Multimap $F60561 multimap ) { \n\tif $F6132 ( multimap ) $F24895 ( of ) if ( multimap instanceof ImmutableListMultimap ) { \n\t\t$F762 ImmutableListMultimap $F28644 kvMultimap = ( ImmutableListMultimap $F28644 ) multimap ; \n\t\tif ( ! kvMultimap . isPartialView ( ) ) $F356 ( kvMultimap ) } \n\tImmutableMap . Builder < K , ImmutableList $F2338 > builder = new ImmutableMap . Builder < K , ImmutableList $F2338 > ( $F18315 ( multimap ) . size ( ) ) ; \n\t$F1987 ( size ) for ( Entry < $F60559 , ? extends Collection $F61097 > entry : $F59739 ( multimap ) ) { \n\t\tImmutableList $F2338 list = ImmutableList . copyOf ( $F269 ( entry ) ) ; \n\t\tif $F386 ( list ) { \n\t\t\t$F99456 ( builder , entry , list ) $F60133 ( size , list ) } \n\t\t} \n\treturn new ImmutableListMultimap $F28644 ( $F82054 ( builder , size ) ) ; \n\t} \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . POJO ) ; \n\tfor ( Field field : fields ) { \n\t\tPojo pojo = $F511 ( field ) . getAnnotation ( Pojo . class ) ; \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) field . set ( $F20708 ( config ) , $F11145 ( pojo ) . newInstance ( ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public $F1372 T unwrap $F7907 ( clazz ) { \n\treturn Request . class . isAssignableFrom ( clazz ) ? $F14239 ( clazz , request ) : Out . class . isAssignableFrom ( clazz ) ? $F14239 ( clazz , out ) : null ; \n\t} \n"}, {"code": "public void addAttachment ( $F117585 ( content ) , final String filename , final String mimetype ) throws MessagingException { \n\tfinal DataSource dataSource = new ByteArrayDataSource ( content , mimetype ) ; \n\tfinal DataHandler dataHandler = new DataHandler ( dataSource ) ; \n\t$F564 ( addAttachment , dataHandler , filename ) } \n"}, {"code": "public void addAttachment ( final DataHandler handler , final String filename ) throws MessagingException { \n\tfinal BodyPart $F408274 ( part ) ; \n\tpart . setFileName ( filename ) ; \n\tpart . setDataHandler ( handler ) ; \n\taddAttachment ( part ) ; \n\t} \n"}, {"code": "public void addAttachment $F347039 ( file ) throws MessagingException { \n\tDataSource dataSource ; \n\tdataSource = new FileDataSource ( file ) ; \n\tfinal DataHandler dataHandler = new DataHandler ( dataSource ) ; \n\t$F13128 ( addAttachment , dataHandler , file ) ; \n\t} \n"}, {"code": "public void addAttachment $F600496 ( file , newFilename ) throws MessagingException { \n\tDataSource dataSource ; \n\tdataSource = new FileDataSource ( file ) ; \n\tfinal DataHandler dataHandler = new DataHandler ( dataSource ) ; \n\t$F564 ( addAttachment , dataHandler , newFilename ) } \n"}, {"code": "$F1 public void delete ( String path ) throws $F372272 { \n\t$F38670 ( uri , path ) $F140167 ( bucketName , uri ) String key = $F242391 ( uri ) ( INT00 , $F2515 ( uri ) . length ( ) ) ; \n\tList < DeleteObjectsRequest . KeyVersion > keys = new ArrayList < DeleteObjectsRequest . KeyVersion > $F2 ; \n\t$F4728 ( marker ) for ( $F117278 ) { \n\t\tObjectListing ol = s3 . listObjects ( new ListObjectsRequest $F2 . withBucketName ( bucketName ) . withPrefix ( key ) . withMarker ( marker ) ) ; \n\t\tfor ( S3ObjectSummary objectSummary : ol . getObjectSummaries ( ) ) { \n\t\t\tkeys . add ( new DeleteObjectsRequest . KeyVersion $F508614 ( objectSummary ) ) ; \n\t\t\t} \n\t\tmarker = ol . getNextMarker ( ) ; \n\t\t$F334 ( marker ) } \n\ts3 . deleteObjects ( new DeleteObjectsRequest ( bucketName ) . withKeys ( keys ) ) ; \n\ts3 . deleteObject ( bucketName , key ) ; \n\t} \n"}, {"code": "$F1 public long getFileSize ( String path ) throws $F372272 { \n\t$F38670 ( uri , path ) String key = $F242391 ( uri ) ( INT00 ) ; \n\tS3Object s3Object = s3 . getObject ( $F7130 ( uri ) , key ) ; \n\treturn s3Object . getObjectMetadata ( ) . getContentLength ( ) ; \n\t} \n"}, {"code": "$F1 public $F36788 getSimpleMaster ( $F21 masterLabels , int joinColumnNo , String path , String separator ) throws $F372272 { \n\t$F4352402 ( m ) $F38670 ( uri , path ) String key = $F242391 ( uri ) ( INT00 ) ; \n\tS3Object s3Object = s3 . getObject ( $F7130 ( uri ) , key ) ; \n\tBufferedReader br = new BufferedReader ( new InputStreamReader ( s3Object . getObjectContent ( ) , STRING00 ) ) ; \n\tString line ; \n\twhile $F57865 ( line , br ) { \n\t\t$F21 strings = StringUtil . split ( line , separator , false ) ; \n\t\tif $F250577 ( masterLabels , strings ) $F42718 $F21687 ( joinData , strings , joinColumnNo ) $F21685 ( data , strings ) $F104473 ( i , strings , data ) $F2725 ( m , joinData , data ) } \n\t$F1109 ( br ) return m ; \n\t} \n"}, {"code": "$F1 public void addEntry ( Archivable arch ) throws IOException { \n\tfinal String $F11805 ( fn , arch ) ; \n\tTarArchiveEntry entry = new TarArchiveEntry ( fn ) ; \n\t$F182281 ( cbytes , arch ) entry . setSize ( cbytes . length ) ; \n\tthis . tos . putArchiveEntry ( entry ) ; \n\ttry ( $F226898 ( bis , cbytes ) ) { \n\t\t$F47449 ( IOUtils , bis , tos ) tos . closeArchiveEntry ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F762 public T addHeader $F96892 ( name , value ) { \n\t$F95965 ( values ) $F528 ( values , value ) this . headers . put ( name , values ) ; \n\t$F21676 ( this ) } \n"}, {"code": "$F762 public T setHeaders ( final $F5496 headers ) { \n\t$F1357 ( this , headers ) $F21676 ( this ) } \n"}, {"code": "public static Map extractToMap ( final Collection collection , final String keyPropertyName , final String valuePropertyName ) { \n\tMap map = new HashMap $F4371 ( collection ) ; \n\ttry { \n\t\tfor ( Object obj : collection ) { \n\t\t\tmap . put ( $F6799 ( PropertyUtils , obj , keyPropertyName ) , $F6799 ( PropertyUtils , obj , valuePropertyName ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( ReflectiveOperationException e ) { \n\t\tthrow new ReflectionRuntimeException ( e ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public static List extractToList ( final Collection collection , final String propertyName ) { \n\tList list = new ArrayList $F4371 ( collection ) ; \n\ttry { \n\t\tfor ( Object obj : collection ) { \n\t\t\tlist . add ( $F6799 ( PropertyUtils , obj , propertyName ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( ReflectiveOperationException e ) { \n\t\tthrow new ReflectionRuntimeException ( e ) ; \n\t\t} \n\treturn list ; \n\t} \n"}, {"code": "public static String extractToString ( final Collection collection , final String propertyName , final String separator ) { \n\tList $F304 ( list , extractToList , collection , propertyName ) ; \n\treturn $F347588 ( StringUtils , list , separator ) ; \n\t} \n"}, {"code": "public static String convertToString ( final Collection collection , final String prefix , final String postfix ) { \n\t$F1200 ( builder ) for ( Object o : collection ) { \n\t\t$F201467 ( builder , prefix , o , postfix ) ; \n\t\t} \n\t$F1226 ( builder ) } \n"}, {"code": "public T getValue $F62952 ( name ) { \n\t$F2201 ( name ) String $F971053 ( uppercased , name ) ; \n\t$F30910 ( namesToValues , uppercased ) } \n"}, {"code": "public static final String encodeString $F1195 ( string , encoding ) throws RuntimeException { \n\treturn StringConverter . byteToHex ( digestString ( string , encoding ) ) ; \n\t} \n"}, {"code": "public static $F1975 digestString $F1195 ( string , encoding ) throws RuntimeException { \n\t$F108364 ( data ) $F24707 ( encoding ) try { \n\t\t$F99116 ( data , string , encoding ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException x ) { \n\t\tthrow new RuntimeException $F5478 ( x ) ; \n\t\t} \n\t$F867 ( digestBytes , data ) } \n"}, {"code": "public static final $F1975 digestBytes $F2665 ( data ) throws RuntimeException { \n\tsynchronized ( MD5 . class ) { \n\t\tif $F112 ( md5 ) { \n\t\t\ttry $F397264 ( md5 , MessageDigest ) catch ( NoSuchAlgorithmException e ) { \n\t\t\t\tthrow new RuntimeException $F5478 ( e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn $F397267 ( md5 , data ) ; \n\t\t} \n\t} \n"}, {"code": "$F762 public void pull ( final ICmdLineArg $F45 arg , final Object variableSource ) throws ParseException , IllegalArgumentException , IllegalAccessException { \n\t$F7296 ( arg ) if ( arg . isSystemGenerated ( ) ) $F254 final String errMsg = STRING00 + $F304005 ( arg ) + STRING00 + $F6291 ( variableSource ) ; \n\tfinal Field field = VariableAssigner . findFieldInAnyParentOrMyself ( arg , $F298 ( variableSource ) , errMsg ) ; \n\t$F88368 ( field ) final boolean $F1997037 ( wasAccessible , field ) ; \n\ttry { \n\t\t$F10869 ( field ) if ( $F511 ( field ) == $F33484 ) { \n\t\t\tfinal $F619 values = ( $F619 ) $F198 ( field , variableSource ) ; \n\t\t\tif $F268 ( values ) for ( final Object value : values ) if ( arg instanceof CmdLineCLA ) { \n\t\t\t\tfinal ICmdLine cmdline = ( ( ( CmdLineCLA ) arg ) . templateCmdLine ) . clone ( ) ; \n\t\t\t\t$F1396737 ( arg , cmdline ) for ( final ICmdLineArg $F45 innerArg : cmdline . allArgs ( ) ) $F565 ( pull , innerArg , value ) } \n\t\t\telse $F1396737 ( arg , value ) } \n\t\telse if ( $F511 ( field ) . isArray ( ) ) { \n\t\t\tfinal $F3244 values = ( $F3244 ) $F198 ( field , variableSource ) ; \n\t\t\tif $F268 ( values ) for ( final Object value : values ) if ( arg instanceof CmdLineCLA ) { \n\t\t\t\tfinal ICmdLine cmdline = ( ( ( CmdLineCLA ) arg ) . templateCmdLine ) . clone ( ) ; \n\t\t\t\t$F1396737 ( arg , cmdline ) for ( final ICmdLineArg $F45 innerArg : cmdline . allArgs ( ) ) $F565 ( pull , innerArg , value ) } \n\t\t\telse $F1396737 ( arg , value ) } \n\t\telse { \n\t\t\t$F384819 ( value , field , variableSource ) if $F268 ( value ) { \n\t\t\t\tif ( arg instanceof CmdLineCLA ) { \n\t\t\t\t\tfinal ICmdLine cmdline = ( ( ( CmdLineCLA ) arg ) . templateCmdLine ) . clone ( ) ; \n\t\t\t\t\t$F1396737 ( arg , cmdline ) for ( final ICmdLineArg $F45 innerArg : cmdline . allArgs ( ) ) $F565 ( pull , innerArg , value ) } \n\t\t\t\telse $F1396737 ( arg , value ) } \n\t\t\t} \n\t\t} \n\tcatch ( final CloneNotSupportedException e ) $F47953 ( logger , errMsg , e ) finally { \n\t\t$F1382132 ( field , wasAccessible ) } \n\t} \n"}, {"code": "$F1 public void execute $F2 throws $F18250 { \n\tString deploymentQualifier = application + ( deployment != null ? STRING00 + deployment + ( $F1125670 ( commitId ) ) : STRING00 ) ; \n\t$F2117 ( log , deploymentQualifier ) $F4771 ( remoteRepository , retrieveRemoteRepositoryLocation ) log . info ( $F35284 ( retrieveBranch , remoteRepository ) ) ; \n\t$F8494 ( output , push , remoteRepository ) $F1299 ( System , output ) log . info ( $F160068 ( deploymentQualifier , retrieveBranch ) + remoteRepository + STRING00 ) ; \n\t} \n"}, {"code": "$F1 public void tag ( Annotation sentence ) { \n\tSequenceInput $F26725 sequenceInput = new SequenceInput $F50 ( sentence . tokens ( ) ) ; \n\tLabeling result = labeler . label ( featurizer . extractSequence ( $F16599 ( sequenceInput ) ) ) ; \n\tfor ( int i = INT00 ; \n\ti < sentence . tokenLength ( ) ; \n\t) { \n\t\tif ( $F2107147 ( result , i ) . equals ( STRING00 ) ) $F16091 ( i ) else { \n\t\t\tAnnotation start = sentence . tokenAt ( i ) ; \n\t\t\tString type = $F2107147 ( result , i ) . substring ( INT00 ) ; \n\t\t\ti ++ ; \n\t\t\twhile ( i < sentence . tokenLength ( ) && $F2107147 ( result , i ) . startsWith ( STRING00 ) ) $F16091 ( i ) Annotation end = sentence . tokenAt ( i - INT00 ) ; \n\t\t\tHString span = $F218857 ( start , end ) ; \n\t\t\tAnnotation entity = sentence . document ( ) . annotationBuilder ( ) . type ( annotationType ) . bounds ( span ) . createAttached ( ) ; \n\t\t\tentity . put ( annotationType . getTagAttribute ( ) , annotationType . getTagAttribute ( ) . getValueType ( ) . decode ( type ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public String combine $F1195 ( pattern1 , pattern2 ) { \n\tif ( ! hasText ( pattern1 ) && ! hasText ( pattern2 ) ) $F4801 if $F17162 ( hasText , pattern1 ) $F356 ( pattern2 ) if $F17162 ( hasText , pattern2 ) $F356 ( pattern1 ) boolean pattern1ContainsUriVar = $F483311 ( pattern1 ) ; \n\tif ( $F27658 ( pattern1 , pattern2 ) && ! pattern1ContainsUriVar && match ( pattern1 , pattern2 ) ) $F356 ( pattern2 ) if ( pattern1 . endsWith ( this . pathSeparatorPatternCache . getEndsOnWildCard ( ) ) ) { \n\t\treturn concat ( $F1206 ( pattern1 ) , pattern2 ) ; \n\t\t} \n\tif ( pattern1 . endsWith ( this . pathSeparatorPatternCache . getEndsOnDoubleWildCard ( ) ) ) $F14249 ( concat , pattern1 , pattern2 ) $F6110 ( starDotPos1 , pattern1 ) if ( pattern1ContainsUriVar || starDotPos1 == $F3745 || this . pathSeparator . equals ( STRING00 ) ) $F14249 ( concat , pattern1 , pattern2 ) $F100656 ( ext1 , pattern1 , starDotPos1 ) $F6110 ( dotPos2 , pattern2 ) String file2 = ( dotPos2 == $F3745 ? pattern2 : $F2529 ( pattern2 , dotPos2 ) ) ; \n\tString ext2 = ( dotPos2 == $F3745 ? STRING00 : $F6991 ( pattern2 , dotPos2 ) ) ; \n\tboolean ext1All = ( $F14426 ( ext1 ) || $F384 ( ext1 ) ) ; \n\tboolean ext2All = ( $F14426 ( ext2 ) || $F384 ( ext2 ) ) ; \n\tif $F140872 ( ext1All , ext2All ) $F61909 ( pattern1 , pattern2 ) String ext = $F39570 ( ext1All , ext2 , ext1 ) ; \n\treturn file2 + ext ; \n\t} \n"}, {"code": "public String decrypt ( String cipherText ) throws MissingParameterException { \n\tif $F109626 ( StringUtils , cipherText ) { \n\t\tthrow new MissingParameterException $F6 ; \n\t\t} \n\treturn $F3055519 ( stringEncryptor , cipherText ) ; \n\t} \n"}, {"code": "public String encrypt ( String clearText ) throws MissingParameterException { \n\tif $F109626 ( StringUtils , clearText ) { \n\t\tthrow new MissingParameterException $F6 ; \n\t\t} \n\treturn $F590483 ( stringEncryptor , clearText ) ; \n\t} \n"}, {"code": "public $F1975 decrypt $F2665 ( cipherBytes ) throws MissingParameterException { \n\tif $F44788 ( cipherBytes ) { \n\t\tthrow new MissingParameterException $F6 ; \n\t\t} \n\treturn $F3055519 ( byteEncryptor , cipherBytes ) ; \n\t} \n"}, {"code": "$F1 public EquPart morph $F2 throws Exception { \n\tfinal EquPart part = $F2074 ( Equ ) . operator ( this ) ; \n\t$F92286 ( part , this ) return part ; \n\t} \n"}, {"code": "public final void enableRenaming $F62952 ( picturePath ) { \n\tHBox hb = new HBox $F2 ; \n\tImageView iv = getIcon ( picturePath ) ; \n\tiv . setOnMouseClicked ( new EventHandler $F186495 $F2 { \n\t\t$F1 public void handle ( Event mouseEvent ) { \n\t\t\tif ( ( ( MouseEvent ) mouseEvent ) . getButton ( ) . equals ( MouseButton . PRIMARY ) ) { \n\t\t\t\tif ( ( ( MouseEvent ) mouseEvent ) . getClickCount ( ) == INT00 ) { \n\t\t\t\t\tTextInputDialog input = new TextInputDialog ( $F213652 ( textProperty ) ) ; \n\t\t\t\t\tinput . setTitle ( $F2303 ( MessagesUtil ) ) ; \n\t\t\t\t\tinput . setContentText ( null ) ; \n\t\t\t\t\tinput . setHeaderText ( $F2303 ( MessagesUtil ) ) ; \n\t\t\t\t\tinput . setGraphic ( null ) ; \n\t\t\t\t\t$F215031 ret = input . showAndWait ( ) ; \n\t\t\t\t\tif ( $F30197 ( ret ) && StringUtils . isNoneBlank ( $F144 ( ret ) ) ) { \n\t\t\t\t\t\t$F80036 ( updateTitle , ret ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t) ; \n\t$F1507034 ( hb , iv ) setGraphic ( hb ) ; \n\t} \n"}, {"code": "protected ImageView getIcon $F62952 ( picturePath ) { \n\tImageView iv = null ; \n\tif $F112 ( picturePath ) { \n\t\tiv = new ImageView ( new Image ( DEFAULT_ICON ) ) ; \n\t\t} \n\telse { \n\t\tiv = new ImageView ( new Image ( picturePath ) ) ; \n\t\t} \n\tiv . setPreserveRatio ( true ) ; \n\tiv . setFitHeight ( INT00 ) ; \n\treturn iv ; \n\t} \n"}, {"code": "$F762 final void startRecording $F2 { \n\tif ( firstTime ) { \n\t\tObject obj ; \n\t\tdoStartRecording ( ) ; \n\t\t$F86992 ( obj ) ; \n\t\tAllocationStats $F118892 ( stats , stopRecording ) ; \n\t\tif ( stats . getAllocationCount ( ) != INT00 || stats . getAllocationSize ( ) < INT00 ) { \n\t\t\tthrow new IllegalStateException ( $F40216 ( String , stats ) ) ; \n\t\t\t} \n\t\tfirstTime = false ; \n\t\t} \n\tdoStartRecording ( ) ; \n\t} \n"}, {"code": "VmSpec vmSpec $F2 { \n\t$F857709 $F27715 ( options , vmOptionsBuilder ) ; \n\tcheckState ( $F385 ( options ) ) ; \n\treturn new VmSpec . Builder $F2 . addAllProperties ( $F144 ( vmProperties ) ) . addAllOptions ( options ) . build ( ) ; \n\t} \n"}, {"code": "public long getRateLimitReset $F2 { \n\tif ( $F9236 ( retrofitError ) == null ) $F17551 for ( Header header : $F9236 ( retrofitError ) . getHeaders ( ) ) { \n\t\tif $F462810 ( header ) { \n\t\t\treturn Long . parseLong ( $F269 ( header ) ) ; \n\t\t\t} \n\t\t} \n\t$F16096 } \n"}, {"code": "public static $F4357 toMap ( ResourceBundle bundle ) { \n\t$F199346 ( map ) $F5499 $F395730 ( keys , bundle ) ; \n\twhile $F5506 ( keys ) { \n\t\t$F5510 ( key , keys ) map . put ( key , $F11403 ( bundle , key ) ) ; \n\t\t} \n\treturn map ; \n\t} \n"}, {"code": "public static $F1975 toByteArray ( InputStream stream ) throws IOException { \n\tlong $F114462 ( length , stream ) ; \n\tif $F62886 ( length , Integer ) $F47777 $F1975 bytes = $F13974 ( length ) ; \n\t$F1987 ( offset ) $F1987 ( numRead ) while ( offset < bytes . length && ( numRead = $F101709 ( stream , bytes , offset ) ) >= INT00 ) $F57826 ( offset , numRead ) if $F62228 ( offset , bytes ) $F9471 $F1109 ( stream ) return bytes ; \n\t} \n"}, {"code": "public static String toHexString ( byte in [ ] ) { \n\tif ( in == null || $F84355 ( in ) ) $F2200 $F1987 ( i ) $F117517 ( ch ) String pseudo [ ] = { \n\t\tSTRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 } \n\t; \n\tStringBuffer out = new StringBuffer $F39966 ( in ) ; \n\twhile $F62228 ( i , in ) { \n\t\tch = ( byte ) $F65706 ( in , i ) ; \n\t\tch = $F81928 ( ch ) ; \n\t\tch = $F131536 ( ch ) ; \n\t\tout . append ( $F1037666 ( pseudo , ch ) ) ; \n\t\tch = ( byte ) $F65706 ( in , i ) ; \n\t\tout . append ( $F1037666 ( pseudo , ch ) ) ; \n\t\t$F1218 ( out ) i ++ ; \n\t\t} \n\t$F2692 ( out ) } \n"}, {"code": "public static String toDigest $F388032 ( bytes , algorithm ) throws NoSuchAlgorithmException { \n\t$F14492 ( digest , MessageDigest ) $F98647 ( digest , bytes ) $F1975 $F145037 ( hash , digest ) ; \n\t$F34957 ( result ) for ( $F2674 ( i , hash ) ) { \n\t\tString s = Integer . toHexString ( hash [ i ] ) ; \n\t\t$F40810 ( length , s ) if $F9869 ( length ) { \n\t\t\tresult . append ( s . substring ( length - INT00 , length ) ) ; \n\t\t\t} \n\t\telse $F105011 ( result , s ) } \n\t$F1226 ( result ) } \n"}, {"code": "public static boolean hasDigit ( String str ) { \n\tfinal Pattern $F93414 ( pattern , Pattern ) ; \n\t$F231081 ( matcher , pattern , str ) while $F14102 ( matcher ) $F233 $F213 } \n"}, {"code": "public static String pad ( String rawString , int length , char padChar ) { \n\tString padded = rawString ; \n\t$F4728 ( padFiller ) if ( $F66861 ( padded , length ) ) $F356 ( padded ) if ( $F1203 ( padded ) < length ) { \n\t\t$F2111077 ( buff , length ) for ( $F12038 ( i , buff ) ; \n\t\ti < length ; \n\t\ti ++ ) $F8284 ( buff , padChar ) $F34965 ( padFiller , buff ) padded = rawString + padFiller ; \n\t\t$F6111 ( padded , length ) } \n\telse $F6112 ( padded , length ) } \n"}, {"code": "public static String convertInputStreamToString $F55099 ( is , charset ) throws IOException { \n\t$F3446 ( is , EMPTY ) $F102635 ( sb ) $F89072 ( reader ) try { \n\t\tif $F268 ( charset ) { \n\t\t\treader = new BufferedReader ( $F44609 ( is , charset ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F261428 ( reader , is ) ; \n\t\t\t} \n\t\tString line ; \n\t\t$F977568 ( line , reader , sb ) } \n\t$F116932 ( reader ) $F1226 ( sb ) } \n"}, {"code": "public static String upperCaseFirst ( String str ) { \n\tif $F654564 ( str , EMPTY ) $F356 ( str ) return $F35733 ( Character , str ) + $F20064 ( str ) ; \n\t} \n"}, {"code": "public static String join ( $F37418 ( collection ) , String separator ) { \n\treturn $F347588 ( StringUtils , collection , separator ) ; \n\t} \n"}, {"code": "public static $F5033 split $F1195 ( str , separatorChars ) { \n\tfinal $F21 array = StringUtils . split ( str , separatorChars ) ; \n\t$F26753 ( Arrays , array ) } \n"}, {"code": "public static boolean isNullOrEmpty $F624 ( string ) { \n\tif $F28525 ( string ) $F233 $F213 } \n"}, {"code": "public static boolean compare ( $F623 String str1 , $F623 String str2 ) { \n\treturn ( str1 == null ? str2 == null : $F5249 ( str1 , str2 ) ) ; \n\t} \n"}, {"code": "public Object store ( String correlationId , String key , Object value , long timeToLive ) $F356 ( value ) "}, {"code": "public static Stemmer getStemmer ( Language language ) { \n\t$F57921 ( Preconditions , language ) if $F28586 ( stemmerMap , language ) { \n\t\tif ( Config . hasProperty ( STRING00 , language ) ) { \n\t\t\tStemmer stemmer = $F2912357 ( Config , language ) . as ( Stemmer . class ) ; \n\t\t\t$F168112 ( stemmerMap , language , stemmer ) } \n\t\telse { \n\t\t\tstemmerMap . putIfAbsent ( language , NoOptStemmer . INSTANCE ) ; \n\t\t\t} \n\t\t} \n\t$F30910 ( stemmerMap , language ) } \n"}, {"code": "private void initComponents $F2 { \n\t$F1306946 ( statusLabel ) progressBar = new javax . swing . JProgressBar $F2 ; \n\t$F1332218 ( cancelButton ) setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ; \n\t$F567114 ( statusLabel ) progressBar . setIndeterminate ( true ) ; \n\t$F11026747 ( cancelButton ) $F567114 ( cancelButton ) $F6058625 ( cancelButton , evt , cancelButtonActionPerformed ) $F1332276 layout = new $F1332276 $F560 ( getContentPane ) ; \n\tgetContentPane ( ) . setLayout ( layout ) ; \n\tlayout . setHorizontalGroup ( $F1332286 ( layout , javax ) ( $F1318565 ( layout ) . addGroup ( $F1332285 ( layout , javax ) . addComponent ( progressBar , $F1332291 ( javax ) , INT00 , Short . MAX_VALUE ) . addComponent ( statusLabel , $F1332291 ( javax ) , INT00 , Short . MAX_VALUE ) . addComponent ( cancelButton , $F1332287 ( javax ) ) ) . addContainerGap ( ) ) ) ; \n\tlayout . setVerticalGroup ( $F1332286 ( layout , javax ) ( $F1318565 ( layout ) . addComponent ( statusLabel ) . addPreferredGap ( $F1332298 ( javax ) ) . addComponent ( $F1332368 ( progressBar , javax ) ) . addPreferredGap ( $F1332298 ( javax ) ) . addComponent ( cancelButton ) . addContainerGap ( $F1332291 ( javax ) , Short . MAX_VALUE ) ) ) ; \n\tpack ( ) ; \n\t} \n"}, {"code": "public boolean notifyProgress $F12004 ( value , maximum ) { \n\tthis . ensureVisible ( ) ; \n\tthis . setProgressBarValue ( value , maximum ) ; \n\tthis . setProgressText ( value , maximum ) ; \n\treturn ! this . isCancelPending ( ) ; \n\t} \n"}, {"code": "private void setProgressBarValue $F12004 ( value , maximum ) { \n\tthis . progressBar . setIndeterminate ( false ) ; \n\tif ( this . progressBar . getMaximum ( ) != maximum ) { \n\t\tthis . progressBar . setMaximum ( maximum ) ; \n\t\t} \n\tthis . progressBar . setValue ( value ) ; \n\t} \n"}, {"code": "public void doConfigure $F2763 ( properties ) throws IOException { \n\tSettingsBuildingRequest request = new DefaultSettingsBuildingRequest $F2 ; \n\t$F133709 ( mavenSettingsFile ) if $F33656 ( properties , MAVEN_SETTINS_PATH_PROPERTY ) { \n\t\tmavenSettingsFile = new File ( $F457286 ( properties , MAVEN_SETTINS_PATH_PROPERTY ) ) ; \n\t\t} \n\telse $F34864 ( mavenSettingsFile , DEFAULT_MAVEN_SETTINGS_PATH ) if $F2486 ( mavenSettingsFile ) { \n\t\trequest . setUserSettingsFile ( mavenSettingsFile ) ; \n\t\tresolver = Maven . configureResolver ( ) . fromFile ( mavenSettingsFile ) ; \n\t\tif $F3507 ( supportLogger ) supportLogger . debug ( Logs . LOG_01 , ansiString ( GREEN , $F11884 ( mavenSettingsFile ) ) ) ; \n\t\t} \n\telse { \n\t\t$F58904 ( resolver , Maven ) if $F123667 ( supportLogger ) supportLogger . warn ( Logs . LOG_02 , ansiString ( GREEN , $F11884 ( mavenSettingsFile ) ) ) ; \n\t\t} \n\tif $F19100 ( supportLogger ) supportLogger . trace ( Logs . LOG_03 , ansiString ( GREEN , ObjectUtils . toStringBuilder ( request ) ) ) ; \n\tsettings = new MavenSettingsBuilder $F2 . buildSettings ( request ) ; \n\tif $F19100 ( supportLogger ) { \n\t\tsupportLogger . trace ( Logs . LOG_04 , ansiString ( GREEN , ObjectUtils . toStringBuilder ( settings ) ) ) ; \n\t\t} \n\telse if $F3507 ( supportLogger ) { \n\t\tsupportLogger . trace ( Logs . LOG_05 , ansiString ( GREEN , settings . getLocalRepository ( ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "public void throttle $F2 throws InterruptedException { \n\tif ( ! firstCall ) { \n\t\t$F56643 ( remainingTimeNanos , timeToThrottleNanos ) while $F3730 ( remainingTimeNanos ) { \n\t\t\t$F446895 ( milliPause , remainingTimeNanos ) int nanoPause = ( int ) $F62853 ( remainingTimeNanos ) ; \n\t\t\t$F127157 ( System , milliPause , nanoPause ) Thread . sleep ( milliPause , nanoPause ) ; \n\t\t\t$F10411 ( remainingTimeNanos , timeToThrottleNanos ) } \n\t\t} \n\telse $F57412 ( firstCall ) } \n"}, {"code": "public static PathType getVariableType ( String var ) { \n\tif $F112 ( var ) { \n\t\t$F4076 ( PathType ) } \n\tAcePathfinder instance = getInstance ( ) ; \n\tString $F437139 ( path , instance , var ) ; \n\t$F13173 ( LOG , var , path ) if $F112 ( path ) { \n\t\t$F4076 ( PathType ) } \n\tif $F23577 ( path ) { \n\t\treturn PathType . WEATHER ; \n\t\t} \n\telse if $F23577 ( path ) { \n\t\tif $F23577 ( path ) { \n\t\t\treturn PathType . EXPERIMENT ; \n\t\t\t} \n\t\treturn PathType . SOIL ; \n\t\t} \n\telse { \n\t\treturn PathType . EXPERIMENT ; \n\t\t} \n\t} \n"}, {"code": "public static void insertValue ( HashMap m , String var , String val ) $F54552 ( insertValue , m , var , val ) "}, {"code": "public static void insertValue ( HashMap m , String var , String val , String path ) { \n\t$F95266 ( insertValue , m , var , val , path ) } \n"}, {"code": "public static void insertValue ( HashMap m , String var , String val , String path , boolean eventAppendMode ) { \n\t$F261221 ( m , var ) if $F112 ( path ) { \n\t\tvar = AcePathfinder . INSTANCE . getAlias ( var ) ; \n\t\tpath = AcePathfinder . INSTANCE . getPath ( var ) ; \n\t\t} \n\t$F24707 ( path ) $F30789 ( paths , path ) $F58133 ( l , paths ) for ( $F6610 ( i , l ) ) { \n\t\tif $F97124 ( paths , i ) { \n\t\t\tif $F102088 ( paths , i ) $F2726 ( m , var , val ) else { \n\t\t\t\tif ( $F255428 ( paths , i ) ( STRING00 ) ) { \n\t\t\t\t\t$F157012 ( buildPath , m , paths , i ) $F2233 ( isEvent ) $F21 $F111630 ( temp , paths , i ) ; \n\t\t\t\t\tif ( $F255428 ( paths , i ) ( STRING00 ) ) isEvent = true ; \n\t\t\t\t\tHashMap $F457055 ( pointer , traverseToPoint , m , temp ) ; \n\t\t\t\t\tArrayList a = ( ArrayList ) $F15481 ( pointer , temp ) ; \n\t\t\t\t\tif $F6132 ( a ) $F157012 ( newRecord , m , paths , i ) HashMap d = ( HashMap ) $F58727 ( a ) ; \n\t\t\t\t\tif ( isEvent ) { \n\t\t\t\t\t\tif ( eventAppendMode ) { \n\t\t\t\t\t\t\tfor ( $F58460 ( j , a ) ; \n\t\t\t\t\t\t\tj > $F3745 ; \n\t\t\t\t\t\t\tj -- ) { \n\t\t\t\t\t\t\t\tHashMap tmp = ( HashMap ) $F198 ( a , j ) ; \n\t\t\t\t\t\t\t\tif $F55319 ( tmp ) { \n\t\t\t\t\t\t\t\t\tif ( ( $F5598 ( tmp ) ) . equals ( temp [ INT00 ] ) ) $F67525 ( d , tmp ) } \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif $F55319 ( d ) { \n\t\t\t\t\t\t\tif ( ! ( $F5598 ( d ) ) . equals ( temp [ INT00 ] ) ) { \n\t\t\t\t\t\t\t\t$F157012 ( newRecord , m , paths , i ) d = ( HashMap ) $F58727 ( a ) ; \n\t\t\t\t\t\t\t\td . put ( $F4391 ( temp ) ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\td . put ( $F4391 ( temp ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t$F9391 ( var , setEventDateVar , isEvent ) if $F33656 ( d , var ) { \n\t\t\t\t\t\t$F157012 ( newRecord , m , paths , i ) d = ( HashMap ) $F58727 ( a ) ; \n\t\t\t\t\t\tif ( isEvent ) d . put ( $F4391 ( temp ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F2725 ( d , var , val ) } \n\t\t\t\telse { \n\t\t\t\t\t$F157012 ( buildNestedBuckets , m , paths , i ) HashMap pointer = $F62643 ( traverseToPoint , m , paths , i ) ; \n\t\t\t\t\t$F2725 ( pointer , var , val ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void newRecord ( HashMap m , String path ) { \n\tif $F268 ( path ) { \n\t\t$F30789 ( paths , path ) $F58133 ( l , paths ) for ( $F6610 ( i , l ) ) { \n\t\t\tif ( $F255428 ( paths , i ) ( STRING00 ) ) { \n\t\t\t\tString temp [ ] = $F111629 ( paths , i ) ; \n\t\t\t\t$F157012 ( buildPath , m , paths , i ) HashMap $F457055 ( pointer , traverseToPoint , m , temp ) ; \n\t\t\t\tArrayList a = ( ArrayList ) $F15481 ( pointer , temp ) ; \n\t\t\t\ta . add ( $F604448 ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void buildPath ( HashMap m , String p ) { \n\t$F2233 ( isEvent ) if $F23577 ( p ) { \n\t\t$F30789 ( components , p ) $F58133 ( cl , components ) $F161166 ( buildNestedBuckets , m , components ) if $F2015 ( cl ) { \n\t\t\tif $F23577 ( p ) isEvent = true ; \n\t\t\tHashMap $F457055 ( pointer , traverseToPoint , m , components ) ; \n\t\t\tString d ; \n\t\t\tif ( isEvent ) { \n\t\t\t\t$F206407 ( temp , components ) $F83675 ( d , temp ) } \n\t\t\telse $F224450 ( d , components ) if $F28586 ( pointer , d ) pointer . put ( d , $F8443 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void buildNestedBuckets ( HashMap m , String p ) { \n\t$F30789 ( components , p ) $F58133 ( cl , components ) if $F2015 ( cl ) { \n\t\tif ( ! m . containsKey ( components [ INT00 ] ) ) m . put ( components [ INT00 ] , $F604448 ) ; \n\t\t} \n\telse { \n\t\tHashMap temp = m ; \n\t\tfor ( $F6610 ( i , cl ) ) { \n\t\t\tif ( ! temp . containsKey ( components [ i ] ) ) temp . put ( components [ i ] , $F604448 ) ; \n\t\t\ttemp = ( HashMap ) $F94578 ( temp , components , i ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static HashMap traverseToPoint ( HashMap m , String p ) { \n\tHashMap pointer = m ; \n\t$F30789 ( base , p ) $F206407 ( b , base ) $F58133 ( bl , b ) for ( $F6610 ( i , bl ) ) { \n\t\tpointer = ( HashMap ) $F94578 ( pointer , b , i ) ; \n\t\t} \n\treturn pointer ; \n\t} \n"}, {"code": "public static String getEventDateVar $F1195 ( event , var ) { \n\t$F90983 ( var ) if ( event == null || $F1201 ( var ) || $F1201 ( var ) ) return var ; \n\tif $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) else if $F42444 ( event ) $F24706 ( var ) return var ; \n\t} \n"}, {"code": "$F2893853 @ Configuration public InputStream getInputStream ( InjectionPoint injectionPoint ) { \n\tConfigurationWrapper wrapper = this . getConfigurationWrapper ( injectionPoint ) ; \n\tList < ISource > sources = this . locate ( wrapper ) ; \n\tfor ( ISource source : sources ) { \n\t\tif ( $F88338 ( source ) ) { \n\t\t\treturn $F5025 ( source ) ; \n\t\t\t} \n\t\t} \n\treturn $F3416 ( sources ) . stream ( ) ; \n\t} \n"}, {"code": "public static Object readObject ( String correlationId , String path , ConfigParams parameters ) throws ApplicationException { \n\treturn new YamlConfigReader ( path ) . readObject ( correlationId , parameters ) ; \n\t} \n"}, {"code": "public static ConfigParams readConfig ( String correlationId , String path , ConfigParams parameters ) throws ApplicationException { \n\treturn new YamlConfigReader ( path ) . readConfig ( correlationId , parameters ) ; \n\t} \n"}, {"code": "public static String asterisked $F100524 ( str , keepSize , keepStart ) { \n\tif $F109626 ( StringUtils , str ) $F3956 $F40810 ( length , str ) if ( length < keepSize ) return str ; \n\tif $F2523 ( keepSize ) $F867 ( getAsterisks , length ) $F62358 ( notKeepSize , length , keepSize ) String keep ; \n\tif ( keepStart ) { \n\t\t$F83682 ( keep , str , keepSize ) return keep + getAsterisks ( notKeepSize ) ; \n\t\t} \n\telse { \n\t\t$F134473 ( keep , str , notKeepSize ) return getAsterisks ( notKeepSize ) + keep ; \n\t\t} \n\t} \n"}, {"code": "public static String getAsterisks ( int length ) { \n\tif $F2523 ( length ) $F3956 $F1200 ( sb ) $F430745 ( i , length , sb ) $F1226 ( sb ) } \n"}, {"code": "public static String addDoubleQuotesIfNo ( String text ) { \n\t$F626695 ( text ) $F48365 ( trim , text ) if $F71521 ( trim ) return text ; \n\t$F867 ( addDoubleQuotes , text ) } \n"}, {"code": "public static String removeIllegalCharsFromFileName ( String name ) { \n\tif $F1216 ( name ) { \n\t\t$F6990 ( extStart , name ) if $F9467 ( extStart ) { \n\t\t\t$F243140 ( name ) } \n\t\telse { \n\t\t\tint $F62962 ( extLength , name , extStart ) ; \n\t\t\tint extEnd = extLength > INT00 ? extStart + INT00 : $F1203 ( name ) ; \n\t\t\tname = name . substring ( INT00 , INT00 - extLength ) + $F41955 ( name , extStart , extEnd ) ; \n\t\t\t} \n\t\t} \n\tfor ( $F2674 ( i , ILLEGAL_CHARS_ANY_OS ) ) name = name . replace ( $F124608 ( ILLEGAL_CHARS_ANY_OS , i ) ) ; \n\tif ( SystemUtils . IS_OS_WINDOWS ) { \n\t\tfor ( $F2674 ( i , ILLEGAL_CHARS_WINDOWS ) ) name = name . replace ( $F124608 ( ILLEGAL_CHARS_WINDOWS , i ) ) ; \n\t\t} \n\telse if ( SystemUtils . IS_OS_UNIX ) { \n\t\tfor ( $F2674 ( i , ILLEGAL_CHARS_UNIX ) ) name = name . replace ( $F124608 ( ILLEGAL_CHARS_UNIX , i ) ) ; \n\t\t} \n\treturn name ; \n\t} \n"}, {"code": "private String getMessageId ( String response ) { \n\tif ( StringUtils . isNullOrEmptyTrimmed ( response ) ) $F2200 try { \n\t\tMailGunSendResponse res = JsonUtils . fromJson ( response , MailGunSendResponse . class ) ; \n\t\treturn res != null ? res . id : null ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) $F303410 ( log , e ) } \n"}, {"code": "public static JSONObject toJSONObject ( String string ) throws JSONException { \n\t$F6477 ( o ) HTTPTokener x = new HTTPTokener ( string ) ; \n\tString t ; \n\t$F651269 ( t , x ) if ( $F89435 ( t ) . startsWith ( STRING00 ) ) { \n\t\t$F6257 ( o , t ) o . put ( STRING00 , $F29197 ( x ) ) ; \n\t\to . put ( STRING00 , x . nextTo ( STRING00 ) ) ; \n\t\t$F58799 ( x ) } \n\telse { \n\t\t$F6257 ( o , t ) o . put ( STRING00 , $F29197 ( x ) ) ; \n\t\to . put ( STRING00 , $F29197 ( x ) ) ; \n\t\t} \n\twhile ( x . more ( ) ) { \n\t\tString name = x . nextTo ( STRING00 ) ; \n\t\tx . next ( STRING00 ) ; \n\t\to . put ( name , x . nextTo ( STRING00 ) ) ; \n\t\t$F58799 ( x ) } \n\treturn o ; \n\t} \n"}, {"code": "$F1 public T call $F2 throws Exception { \n\t$F3509 ( logger , id ) try { \n\t\t$F403343 ( task ) } \n\tfinally { \n\t\tlogger . debug ( $F531690 ( id , queue ) ) ; \n\t\t$F109302 ( queue , id ) } \n\t} \n"}, {"code": "static void configureLog4j $F2 { \n\t$F2048641 ( org ) . LogManager . resetConfiguration ( ) ; \n\t$F2048641 ( org ) . Logger . getRootLogger ( ) . addAppender ( new org . apache . log4j . Appender $F2 { \n\t\tprivate String name ; \n\t\t$F1 public void setName ( String name ) $F7668 ( this , name ) $F1 public void setLayout ( org . apache . log4j . Layout layout ) $F1645 $F1 public void setErrorHandler ( org . apache . log4j . spi . ErrorHandler errorHandler ) $F1645 $F1 public boolean requiresLayout $F2 $F1668 $F1 public String getName $F2 $F356 ( name ) $F1 public org . apache . log4j . Layout getLayout $F2 $F2200 $F1 public org . apache . log4j . spi . Filter getFilter $F2 $F2200 $F1 public org . apache . log4j . spi . ErrorHandler getErrorHandler $F2 $F2200 $F1 public void doAppend ( org . apache . log4j . spi . LoggingEvent event ) { \n\t\t\tLogger logger = Logging . getLogger ( $F9793 ( event ) ) ; \n\t\t\tlogger . genericLog ( $F47756 ( event ) , event . getThrowableInformation ( ) == null ? null : event . getThrowableInformation ( ) . getThrowable ( ) , convertPriority ( $F5227 ( event ) ) ) ; \n\t\t\t} \n\t\tprivate Priority convertPriority ( org . apache . log4j . Level level ) { \n\t\t\tswitch ( $F950644 ( level ) ) { \n\t\t\t\tcase $F2048641 ( org ) . Level . ALL_INT : return Priority . ALL ; \n\t\t\t\tcase $F2048641 ( org ) . Level . TRACE_INT : return Priority . VERBOSE ; \n\t\t\t\tcase $F2048641 ( org ) . Level . DEBUG_INT : return Priority . DEBUG ; \n\t\t\t\tcase $F2048641 ( org ) . Level . WARN_INT : return Priority . WARN ; \n\t\t\t\tcase $F2048641 ( org ) . Level . INFO_INT : return Priority . INFO ; \n\t\t\t\tcase $F2048641 ( org ) . Level . ERROR_INT : $F51339 ( Priority ) case $F2048641 ( org ) . Level . FATAL_INT : return Priority . FATAL ; \n\t\t\t\t} \n\t\t\treturn Priority . OFF ; \n\t\t\t} \n\t\t$F192358 $F1 public void clearFilters $F2 $F1645 $F1 public void addFilter ( org . apache . log4j . spi . Filter newFilter ) $F1645 } \n\t) ; \n\t} \n"}, {"code": "$F1 public void close $F2 { \n\tif $F268 ( raf ) { \n\t\ttry { \n\t\t\t$F1109 ( raf ) file = null ; \n\t\t\t} \n\t\t$F148617 $F67414 ( raf ) } \n\t} \n"}, {"code": "public static long copy $F34940 ( input , output ) throws IOException $F28330 ( copy , input , output ) "}, {"code": "public static long copy ( InputStream input , OutputStream output , boolean autoclose ) throws IOException { \n\tif $F112 ( input ) { \n\t\t$F15466 ( logger ) throw new InvalidParameterException $F6 ; \n\t\t} \n\tif $F112 ( output ) { \n\t\t$F15466 ( logger ) throw new InvalidParameterException $F6 ; \n\t\t} \n\ttry { \n\t\t$F57820 ( total ) $F9435 ( buffer , DEFAULT_BUFFER_SIZE ) $F1987 ( read ) while ( $F453112 ( read , input , buffer ) > INT00 ) { \n\t\t\ttotal += read ; \n\t\t\t$F34945 ( output , buffer , read ) } \n\t\treturn total ; \n\t\t} \n\tfinally { \n\t\tif ( autoclose ) { \n\t\t\ttry $F2453 ( input ) $F118106 ( logger , e ) try $F2453 ( output ) $F118106 ( logger , e ) } \n\t\t} \n\t} \n"}, {"code": "public static InputStream fromURL ( String url ) throws IOException { \n\tif ( $F127290 ( Strings , url ) ) { \n\t\treturn fromURL ( URLFactory . makeURL ( url ) ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static InputStream fromURL ( URL url ) throws IOException { \n\tif $F268 ( url ) { \n\t\treturn $F5158 ( url ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static InputStream fromFile ( File file ) throws FileNotFoundException { \n\tif ( file != null && $F2502 ( file ) && $F6713 ( file ) ) $F35373 ( file ) $F724 } \n"}, {"code": "public static InputStream fromFile ( String filepath ) throws FileNotFoundException { \n\tif ( $F127290 ( Strings , filepath ) ) { \n\t\treturn $F612872 ( fromFile , filepath ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static OutputStream toFile ( File file ) throws FileNotFoundException { \n\tif $F268 ( file ) { \n\t\treturn $F11930 ( file ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static OutputStream toFile ( String filepath ) throws FileNotFoundException { \n\tif ( $F127290 ( Strings , filepath ) ) { \n\t\treturn new FileOutputStream $F243864 ( filepath ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static void safelyClose ( OutputStream stream ) { \n\tif $F268 ( stream ) { \n\t\ttry $F2453 ( stream ) $F118106 ( logger , e ) } \n\t} \n"}, {"code": "public void share $F2 { \n\ttry { \n\t\t$F570439 ( mContext ) . getPackageInfo ( $F264476 ( getPackage ) ) ; \n\t\tIntent shareIntent = new Intent ( Intent . ACTION_SEND ) ; \n\t\t$F362631 ( shareIntent , TYPE ) shareIntent . setPackage ( getPackage ( ) ) ; \n\t\tshareIntent . putExtra ( android . content . Intent . EXTRA_TEXT , mLink ) ; \n\t\t$F570464 ( mContext , shareIntent ) } \n\tcatch ( Exception e ) { \n\t\tIntent openURL = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getURL ( ) + mLink ) ) ; \n\t\t$F570464 ( mContext , openURL ) } \n\t} \n"}, {"code": "private IXADataRecorder createXADataRecorder $F2 { \n\ttry { \n\t\tlong xaDataRecorderId = this . messageSeqGenerator . generate ( ) ; \n\t\tIDataLogger dataLogger = this . dataLoggerFactory . instanciateLogger ( $F18256 ( Long , xaDataRecorderId ) ) ; \n\t\tXADataLogger xaDataLogger = new XADataLogger ( dataLogger ) ; \n\t\tPhynixxXADataRecorder xaDataRecorder = PhynixxXADataRecorder . openRecorderForWrite ( xaDataRecorderId , xaDataLogger , this ) ; \n\t\tsynchronized ( this ) $F890 ( addXADataRecorder , xaDataRecorder ) LOG . info ( $F320 ( xaDataRecorderId ) + $F3534 ( Thread ) + STRING00 ) ; \n\t\treturn xaDataRecorder ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private Document buildDocument ( String location ) { \n\ttry { \n\t\treturn $F195955 ( documentBuilderFactory ) . parse ( ClassPathResource . asInputStream ( location ) ) ; \n\t\t} \n\tcatch ( ParserConfigurationException | SAXException | IOException | RuntimeException e ) { \n\t\tthrow new XmlRuleSetException $F4489 ( location , e ) ; \n\t\t} \n\t} \n"}, {"code": "private void addRulesFromDocument ( Document document ) { \n\t$F1108468 ( ruleNodes , document ) for ( $F12267 ( i , ruleNodes ) ) { \n\t\taddRule ( $F3463997 ( extractClassAttributeFromNode , ruleNodes , i ) , $F3463997 ( extractPriorityAttributeFromNode , ruleNodes , i ) ) ; \n\t\t} \n\t} \n"}, {"code": "private Priority extractPriorityAttributeFromNode ( Node node ) { \n\t$F1514427 ( priority , node ) return priority == null ? Priority . NORMAL : Priority . valueOf ( $F384104 ( priority ) . toUpperCase ( ) ) ; \n\t} \n"}, {"code": "private void addRule ( String className , Priority priority ) { \n\tRule rule ; \n\ttry { \n\t\trule = ( Rule ) $F45914 ( Class , className ) ; \n\t\t} \n\tcatch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) { \n\t\tthrow new XmlRuleSetException $F4489 ( className , e ) ; \n\t\t} \n\t$F171895 ( rule , priority ) addRule ( rule ) ; \n\t} \n"}, {"code": "public Connection createDBConnection $F2 { \n\tif $F268 ( mDBConnInfo ) { \n\t\treturn getConnectionViaDriverMangaer ( mDBConnInfo . DBDriver , mDBConnInfo . DBUrl , mDBConnInfo . DBUser , mDBConnInfo . DBPassword ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "private Connection getConnectionViaDriverMangaer $F1245 ( driver , url , user , password ) { \n\t$F380799 ( conn ) try { \n\t\t$F24414 ( Class , driver ) conn = $F343751 ( DriverManager , url , user , password ) ; \n\t\t} \n\tcatch ( ClassNotFoundException e ) $F7454 ( e ) $F1441403 ( e ) return conn ; \n\t} \n"}, {"code": "private void rollLog $F2 { \n\tfinal File file = currentFile ; \n\t$F14196 ( file ) final OutputStream stream = currentStream ; \n\t$F14196 ( stream ) this . currentFile = null ; \n\tthis . currentStream = null ; \n\t$F15530 ( compressor ) final Thread compressingThread = new Thread ( new Runnable $F2 { \n\t\t$F1 public void run $F2 { \n\t\t\t$F176425 ( log , file ) $F182732 ( stream , log , e ) $F564 ( compressFileContents , compressor , file ) currentCompressingThread = null ; \n\t\t\t} \n\t\t} \n\t) ; \n\t$F4580 ( compressingThread ) currentCompressingThread = compressingThread ; \n\t} \n"}, {"code": "public void setAttribute $F1195 ( key , value ) { \n\tif $F112 ( nodeAttributes ) { \n\t\t$F309367 ( nodeAttributes ) } \n\t$F26648 ( nodeAttributes , key , value ) } \n"}, {"code": "public void parse $F1693 ( xmlInput , strict ) throws ParseException { \n\t$F24434 ( xmlInput ) ArrayList $F48722 ( splitContents , split , xmlInput , interpreteAsXHTML ) ; \n\t$F564 ( build , splitContents , interpreteAsXHTML ) } \n"}, {"code": "public static boolean setInitFilePath ( String filePath ) { \n\tif $F268 ( filePath ) { \n\t\t$F50634 ( init , filePath ) String defaultPath = System . getProperty ( GlobalFileProperties . class . getName ( ) + STRING00 ) ; \n\t\tString newPath = $F182737 ( defaultPath , File , filePath ) ; \n\t\t$F50634 ( init , newPath ) } \n\tString defaultPath = System . getProperty ( GlobalFileProperties . class . getName ( ) + STRING00 ) ; \n\tif $F540 ( init , defaultPath ) $F233 else { \n\t\tlog . error ( GlobalFileProperties . class . getName ( ) + STRING00 + filePath + STRING00 + GlobalFileProperties . class . getName ( ) + STRING00 ) ; \n\t\t$F213 } \n\t} \n"}, {"code": "private synchronized static void loadAll $F2 throws DaoManagerException { \n\tif $F112 ( setImpl ) { \n\t\tlong $F612807 ( implLastModifiedTime , impl ) ; \n\t\tif ( lastModified < implLastModifiedTime ) { \n\t\t\t$F391545 $F546090 ( staticValues , impl ) ; \n\t\t\tsynchronized ( cache ) { \n\t\t\t\t$F39336 ( cache ) $F7171 ( cache , staticValues ) } \n\t\t\t$F100464 ( lastModified , System ) notifyPropertiesChangedListers ( lastModified ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tlong $F612807 ( implLastModifiedTime , impl ) ; \n\t\tlong $F612807 ( setImplLastModifiedTime , setImpl ) ; \n\t\tif ( lastModified < implLastModifiedTime || lastModified < setImplLastModifiedTime ) { \n\t\t\t$F391545 $F546090 ( staticValues , impl ) ; \n\t\t\t$F391545 $F546090 ( dynamicValues , setImpl ) ; \n\t\t\tsynchronized ( cache ) { \n\t\t\t\t$F39336 ( cache ) $F7171 ( cache , staticValues ) $F7171 ( cache , dynamicValues ) } \n\t\t\t$F100464 ( lastModified , System ) notifyPropertiesChangedListers ( lastModified ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static String getFilePath $F1195 ( defaultPath , filePath ) { \n\treturn $F182737 ( defaultPath , File , filePath ) ; \n\t} \n"}, {"code": "public static < T extends Closeable > T close ( T toClose , Logger logExceptionTo , Object name ) { \n\t$F90659 ( toClose ) try $F2453 ( toClose ) catch ( IOException e ) { \n\t\t( $F63500 ( logExceptionTo , logger ) ) . warn ( STRING00 + ( name == null ? $F797 ( toClose ) : name ) + STRING00 , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static < T extends Closeable > T close ( T toClose , Object name ) $F35506 ( close , toClose , name ) "}, {"code": "public static < T extends Closeable > T close ( T toClose ) $F69773 ( close , toClose ) "}, {"code": "Object exec ( Element element , Object scope , String operand , Object ... arguments ) throws IOException , TemplateException { \n\ttry $F10338 ( doExec , element , scope , operand , arguments ) catch ( TemplateException exception ) { \n\t\tlog . warn ( $F191652 , element . trace ( ) , getClass ( ) , operand , scope , exception ) ; \n\t\tthrow exception ; \n\t\t} \n\t} \n"}, {"code": "public static Restrictor and ( Restrictor c1 , Restrictor c2 ) { \n\treturn new LogicRestrictor ( c1 , c2 , RestrictType . and ) ; \n\t} \n"}, {"code": "public static Restrictor or ( Restrictor c1 , Restrictor c2 ) { \n\treturn new LogicRestrictor ( c1 , c2 , RestrictType . or ) ; \n\t} \n"}, {"code": "public static Restrictor eq $F844 ( property , value ) { \n\treturn new SimpleRestrictor ( property , value , RestrictType . eq ) ; \n\t} \n"}, {"code": "public $F1372 void select ( $F5215118 ( collection ) , final $F17821 predicate , $F534976 ( result ) ) { \n\tfor ( final T current : collection ) { \n\t\tif ( $F186237 ( predicate , current ) ) $F529 ( result , current ) } \n\t} \n"}, {"code": "public $F1372 $F25622 select ( $F5215118 ( collection ) , final $F17821 predicate ) { \n\tfinal $F398215 result = new $F398215 $F2 ; \n\t$F5605 ( select , collection , predicate , result ) return result ; \n\t} \n"}, {"code": "public $F1372 void forAllDo ( $F5215118 ( collection ) , final $F1954773 closure ) { \n\tfor ( final T current : collection ) $F72731 ( closure , current ) } \n"}, {"code": "public $F1372 void forAllDoSynchronized ( $F5215118 ( collection ) , final $F1954773 closure ) { \n\tsynchronized ( collection ) $F565 ( forAllDo , collection , closure ) } \n"}, {"code": "public $F276197 Collection $F64714 map ( final Collection < ? extends T1 > collection , final F1 $F276197 f ) { \n\tfinal Collection $F64714 result = new LinkedList $F64714 $F2 ; \n\tfor ( final T1 object : collection ) { \n\t\tresult . add ( $F40 ( f , object ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public $F276197 T2 foldl ( final F2 < T2 , T1 , T2 > f , final T2 initial , final Collection < ? extends T1 > collection ) { \n\tT2 result = initial ; \n\tfor ( final T1 current : collection ) { \n\t\tresult = $F224492 ( f , result , current ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public long sum ( final $F63709 c ) { \n\tfinal F2 < Long , Long , Long > f = new F2 < Long , Long , Long > $F2 { \n\t\tpublic Long run ( final Long x , final Long y ) $F5668 ( x , y ) } \n\t; \n\treturn foldl ( f , NUM00 , c ) ; \n\t} \n"}, {"code": "public static Locale current $F2 { \n\tLocale $F145 ( current , currentHolder ) ; \n\tif $F112 ( current ) { \n\t\t$F232088 ( current , Locale ) $F57566 ( currentHolder , current ) } \n\treturn current ; \n\t} \n"}, {"code": "public Statement generateSetupStatement $F2 { \n\treturn new Statement $F2 { \n\t\t$F1 public void evaluate $F2 throws Throwable { \n\t\t\tAunitRuntime . setLexerFactory ( new LexerFactory $F2144 ( lexerClass , failOnError , lexerSetup ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . POJO ) ; \n\tfor ( Field field : fields ) { \n\t\tif $F498138 ( field ) $F10869 ( field ) try { \n\t\t\t$F104884 ( fieldType , field ) $F502965 pojoType = null ; \n\t\t\tif ( field . getAnnotation ( InjectPojo . class ) . value ( ) . equals ( $F30155 ) ) { \n\t\t\t\tif ( ! fieldType . isAnnotationPresent ( Pojo . class ) ) { \n\t\t\t\t\tStringBuilder builder = $F171524 ( $F507 ( field ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( $F507 ( fieldType ) ) . append ( STRING00 ) ; \n\t\t\t\t\tthrow new InjectionException $F5478 ( builder ) ; \n\t\t\t\t\t} \n\t\t\t\tpojoType = fieldType . getAnnotation ( Pojo . class ) . value ( ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpojoType = field . getAnnotation ( InjectPojo . class ) . value ( ) ; \n\t\t\t\t} \n\t\t\tfield . set ( $F20708 ( config ) , $F6892 ( pojoType ) ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void init $F2 throws IOException { \n\ttry { \n\t\tPathUtils pathUtils = null ; \n\t\tint clusterType = conf . getInt ( SimpleJob . CLUSTER_TYPE , $F3745 ) ; \n\t\tswitch ( clusterType ) { \n\t\t\tcase SimpleJob . CLUSTER_TYPE_ONPREMISE : pathUtils = new HDFSUtils ( conf ) ; \n\t\t\t$F332 case SimpleJob . CLUSTER_TYPE_AWS : pathUtils = new S3Utils ( conf . get ( SimpleJob . AWS_ACCESS_KEY ) , conf . get ( SimpleJob . AWS_SECRET_KEY ) ) ; \n\t\t\t$F332 case SimpleJob . CLUSTER_TYPE_LOCAL : pathUtils = new LocalPathUtils $F2 ; \n\t\t\t$F332 $F2377 pathUtils = new HDFSUtils ( conf ) ; \n\t\t\t$F332 } \n\t\t$F21 labels = conf . getStrings ( SimpleJob . LABELS ) ; \n\t\tboolean formatIgnored = conf . getBoolean ( SimpleJob . FORMAT_IGNORED , false ) ; \n\t\tint type = conf . getInt ( SimpleJob . READER_TYPE , $F3745 ) ; \n\t\tswitch ( type ) { \n\t\t\tcase SimpleJob . SIMPLE_READER : valueCreator = new SimpleValueCreator ( separator , regex ) ; \n\t\t\t$F332 case SimpleJob . LABELS_READER : valueCreator = new LabelValueCreator $F3192 ( labels , formatIgnored , separator , regex ) ; \n\t\t\t$F332 case SimpleJob . SINGLE_COLUMN_JOIN_READER : $F36788 simpleJoinMap = pathUtils . getSimpleMaster ( conf ) ; \n\t\t\tif ( ! conf . getBoolean ( SimpleJob . JOIN_REGEX , false ) ) { \n\t\t\t\tvalueCreator = new JoinValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleJoinMap , conf ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tMap < Pattern , $F21 > simpleJoinRegexMap = new HashMap < Pattern , $F21 > $F2 ; \n\t\t\t\tfor ( Entry $F36787 entry : $F708 ( simpleJoinMap ) ) { \n\t\t\t\t\tPattern p = Pattern . compile ( $F712 ( entry ) ) ; \n\t\t\t\t\t$F97568 ( simpleJoinRegexMap , p , entry ) } \n\t\t\t\tvalueCreator = new JoinRegexValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleJoinRegexMap , conf ) ; \n\t\t\t\t} \n\t\t\t$F332 case SimpleJob . SOME_COLUMN_JOIN_READER : Map < $F5033 , $F21 > simpleColumnsJoinMap = pathUtils . getSimpleColumnsMaster ( conf ) ; \n\t\t\tif ( ! conf . getBoolean ( SimpleJob . JOIN_REGEX , false ) ) { \n\t\t\t\tvalueCreator = new JoinSomeValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleColumnsJoinMap , conf ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tMap < $F19413 , $F21 > simpleColumnsJoinRegexMap = new HashMap < $F19413 , $F21 > $F2 ; \n\t\t\t\tfor ( Entry < $F5033 , $F21 > entry : $F708 ( simpleColumnsJoinMap ) ) { \n\t\t\t\t\t$F5033 $F14625 ( l , entry ) ; \n\t\t\t\t\t$F19413 p = new ArrayList $F19412 $F2 ; \n\t\t\t\t\tfor ( String s : l ) { \n\t\t\t\t\t\tp . add ( $F627 ( Pattern , s ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F97568 ( simpleColumnsJoinRegexMap , p , entry ) } \n\t\t\t\tvalueCreator = new JoinSomeRegexValueCreator ( labels , formatIgnored , separator , formatIgnored , simpleColumnsJoinRegexMap , conf ) ; \n\t\t\t\t} \n\t\t\t$F332 $F107112 } \n\t\t} \n\tcatch ( URISyntaxException e ) $F7454 ( e ) } \n"}, {"code": "public static MimeType mimeType ( String type ) { \n\ttry { \n\t\treturn new MimeType ( type ) ; \n\t\t} \n\tcatch ( MimeTypeParseException ex ) $F11568 ( ex ) } \n"}, {"code": "$F1 protected void onFirstOutput $F2 throws IOException { \n\tif $F108359 ( prefix ) { \n\t\tprint ( prefix ) ; \n\t\tprefix = null ; \n\t\t} \n\t} \n"}, {"code": "public static $F26212 int binarySearch ( List $F39164 list , $F623 E key , $F66518 comparator , KeyPresentBehavior presentBehavior , KeyAbsentBehavior absentBehavior ) { \n\tcheckNotNull ( comparator ) ; \n\tcheckNotNull ( list ) ; \n\tcheckNotNull ( presentBehavior ) ; \n\tcheckNotNull ( absentBehavior ) ; \n\tif ( ! $F67714 ( list ) ) { \n\t\tlist = $F58884 ( Lists , list ) ; \n\t\t} \n\t$F1987 ( lower ) $F94909 ( upper , list ) while ( lower <= upper ) { \n\t\tint $F79151 ( middle , lower , upper ) ; \n\t\tint c = comparator . compare ( $F33691 ( key , list , middle ) ) ; \n\t\tif $F2523 ( c ) $F68120 ( upper , middle ) else if $F3730 ( c ) $F79132 ( lower , middle ) else { \n\t\t\treturn lower + presentBehavior . resultIndex ( comparator , key , list . subList ( lower , upper + INT00 ) , middle - lower ) ; \n\t\t\t} \n\t\t} \n\treturn absentBehavior . resultIndex ( lower ) ; \n\t} \n"}, {"code": "public void resolveDependencies $F2 { \n\tif ( dependenciesResolved ) { \n\t\t$F122427 } \n\tdependenciesResolved = true ; \n\tfor ( ClassModel classModel : $F387 ( classes ) ) { \n\t\tclassModel . resolveOuterClass ( ) ; \n\t\t} \n\tfor ( ClassModel classModel : $F387 ( classes ) ) { \n\t\tclassModel . resolveUsedClasses ( ) ; \n\t\tif ( classModel . outerClass == null ) { \n\t\t\tclassModel . resolveModule ( ) ; \n\t\t\t} \n\t\t} \n\tfor ( ClassModel classModel : $F326028 ( classes ) ) { \n\t\tif ( classModel . outerClass != null ) { \n\t\t\tclassModel . getToplevelClass ( ) . usesClasses . addAll ( classModel . usesClasses ) ; \n\t\t\tclasses . remove ( $F329396 ( classModel ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( ModuleModel moduleModel : $F387 ( modules ) ) { \n\t\tmoduleModel . resolveDependencies ( ) ; \n\t\t} \n\tcalculateModuleDepenendencies ( ) ; \n\t} \n"}, {"code": "public void checkDependencyCycles $F14585 ( errors ) { \n\tif ( ! dependenciesResolved ) { \n\t\t$F122427 } \n\tSimpleDirectedGraph < ModuleModel , Edge > g = buildModuleDependencyGraph ( ) ; \n\tCycleDetector < ModuleModel , Edge > detector = new CycleDetector $F50 ( g ) ; \n\tSet < ModuleModel > cycleModules = detector . findCycles ( ) ; \n\tif $F386 ( cycleModules ) $F18366 ( errors , cycleModules ) } \n"}, {"code": "private SimpleDirectedGraph < ModuleModel , Edge > buildModuleDependencyGraph $F2 { \n\tSimpleDirectedGraph < ModuleModel , Edge > g = buildExportGraph ( ) ; \n\tfor ( ModuleModel module : $F387 ( modules ) ) { \n\t\tfor ( ModuleModel imported : module . importedModules ) { \n\t\t\tg . addEdge ( module , imported ) ; \n\t\t\t} \n\t\t} \n\treturn g ; \n\t} \n"}, {"code": "public void checkClassAccessibility $F14585 ( errors ) { \n\tfor ( ClassModel clazz : $F387 ( classes ) ) { \n\t\tclazz . checkAccessibilityOfUsedClasses ( errors ) ; \n\t\t} \n\t} \n"}, {"code": "public void checkAllClassesInModule $F14585 ( errors ) { \n\tfor ( ClassModel clazz : $F387 ( classes ) ) { \n\t\tif ( $F327407 ( clazz ) == null ) { \n\t\t\t$F35288 ( errors , clazz ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal Object op2 = values . popWhatever ( ) ; \n\t\tfinal Object op1 = values . popWhatever ( ) ; \n\t\tif ( op2 instanceof TokVariable ) { \n\t\t\tthrow new Exception $F206659 ( op2 ) ; \n\t\t\t} \n\t\tif ( op1 instanceof TokVariable && ! ( op2 instanceof TokVariable ) ) { \n\t\t\t$F2074 ( Equ ) . getSupport ( ) . assignVariable ( ( ( TokVariable ) op1 ) . getValue ( ) . toString ( ) , op2 ) ; \n\t\t\t$F22657 ( values , op2 ) $F254 } \n\t\tthrow new Exception $F206659 ( op1 ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public synchronized void cleanup $F2 { \n\tString pattern = MessageFormat . format ( LOGGER_SYSTEM_FORMAT_PATTERN , this . loggerSystemName ) ; \n\tLogFilenameMatcher matcher = new LogFilenameMatcher ( pattern ) ; \n\tLogFileTraverser . ICollectorCallback cb = new LogFileTraverser . ICollectorCallback $F2 { \n\t\t$F1 public void match ( File file , LogFilenameMatcher . LogFilenameParts parts ) { \n\t\t\tboolean $F145766 ( success , file ) ; \n\t\t\t$F13175 ( LOGGER , file , success ) } \n\t\t} \n\t; \n\tnew LogFileTraverser ( matcher , FileChannelDataLoggerFactory . this . getLoggingDirectory ( ) , cb ) ; \n\t} \n"}, {"code": "public static $F1372 T copy $F71004 ( object ) { \n\t$F90659 ( object ) TypeEnum type = TypeEnum . dataTypeOf ( $F298 ( object ) ) ; \n\t$F4282 ( copy , object , type ) } \n"}, {"code": "$F762 public static < T extends Message > T copy $F71004 ( message ) { \n\treturn message == null ? null : ( T ) $F40000 ( message ) ; \n\t} \n"}, {"code": "public static $F1372 $F23339 copy ( $F598407 ( list ) ) { \n\t$F2201 ( list ) TypeEnum elementType = null ; \n\t$F1488180 ( copy ) for ( T element : list ) { \n\t\t$F67491 ( elementCopy ) if $F268 ( element ) { \n\t\t\tif $F112 ( elementType ) { \n\t\t\t\telementType = TypeEnum . dataTypeOf ( $F298 ( element ) ) ; \n\t\t\t\t} \n\t\t\t$F14067 ( elementCopy , copy , element , elementType ) } \n\t\t$F528 ( copy , elementCopy ) } \n\treturn copy ; \n\t} \n"}, {"code": "public static $F1372 $F8938 copy ( final $F8938 set ) { \n\t$F2201 ( set ) TypeEnum elementType = null ; \n\t$F8938 copy = $F398159 ; \n\tfor ( T element : set ) { \n\t\t$F67491 ( elementCopy ) if $F268 ( element ) { \n\t\t\tif $F112 ( elementType ) { \n\t\t\t\telementType = TypeEnum . dataTypeOf ( $F298 ( element ) ) ; \n\t\t\t\t} \n\t\t\t$F14067 ( elementCopy , copy , element , elementType ) } \n\t\t$F528 ( copy , elementCopy ) } \n\treturn copy ; \n\t} \n"}, {"code": "public static $F28644 $F53004 copy ( $F167130 ( map ) ) { \n\t$F2201 ( map ) TypeEnum keyType = null ; \n\tTypeEnum valueType = null ; \n\t$F53004 copy = new $F77681 $F2 ; \n\tfor ( $F61242 ( entry , map ) ) { \n\t\t$F59748 ( key , entry ) V $F4377 ( value , entry ) ; \n\t\tK keyCopy = null ; \n\t\tif $F268 ( key ) { \n\t\t\tif $F112 ( keyType ) { \n\t\t\t\tkeyType = TypeEnum . dataTypeOf ( $F298 ( key ) ) ; \n\t\t\t\t} \n\t\t\t$F14067 ( keyCopy , copy , key , keyType ) } \n\t\t$F82072 ( valueCopy ) if $F268 ( value ) { \n\t\t\tif $F112 ( valueType ) { \n\t\t\t\tvalueType = TypeEnum . dataTypeOf ( $F298 ( value ) ) ; \n\t\t\t\t} \n\t\t\t$F14067 ( valueCopy , copy , value , valueType ) } \n\t\t$F2725 ( copy , keyCopy , valueCopy ) } \n\treturn copy ; \n\t} \n"}, {"code": "public static $F1372 T copy ( final T object , final DataTypeDescriptor $F1372 descriptor ) { \n\t$F38495 ( descriptor ) return $F233953 ( copy , object , descriptor ) ; \n\t} \n"}, {"code": "private static void assignList ( final Field field , final ICmdLineArg $F45 arg , final Object target ) throws IllegalAccessException { \n\t$F762 $F283 alist = ( $F283 ) $F198 ( field , target ) ; \n\tif $F112 ( alist ) { \n\t\t$F74981 ( alist ) $F52836 ( field , target , alist ) } \n\tfor ( $F10914 ( v , arg ) ) alist . add ( arg . getDelegateOrValue ( v ) ) ; \n\t} \n"}, {"code": "static public Field findFieldInAnyParentOrMyself ( final ICmdLineArg $F45 arg , $F105143 ( targetClass ) , final String errMsg ) throws ParseException { \n\t$F511269 ( field ) try { \n\t\tfield = targetClass . getDeclaredField ( $F304005 ( arg ) ) ; \n\t\t} \n\tcatch ( final SecurityException e ) { \n\t\tthrow new ParseException ( STRING00 + errMsg , $F3745 ) ; \n\t\t} \n\tcatch ( final NoSuchFieldException e ) { \n\t\tif ( $F7914 ( targetClass ) == null ) throw new ParseException ( STRING00 + errMsg , $F3745 ) ; \n\t\treturn findFieldInAnyParentOrMyself ( arg , $F7914 ( targetClass ) , errMsg ) ; \n\t\t} \n\treturn field ; \n\t} \n"}, {"code": "static public IVariableAssigner setInstance ( final IVariableAssigner newInstance ) { \n\tfinal IVariableAssigner previousAssigner = instance ; \n\tinstance = newInstance ; \n\treturn previousAssigner ; \n\t} \n"}, {"code": "$F1 public void assign ( final ICmdLineArg $F45 arg , final Object target ) throws ParseException { \n\t$F88368 ( arg ) $F88368 ( target ) final String errMsg = STRING00 + $F349972 ( arg ) . getName ( ) + STRING00 + $F304005 ( arg ) + STRING00 + $F6291 ( target ) ; \n\tfinal Field field = findFieldInAnyParentOrMyself ( arg , $F298 ( target ) , errMsg ) ; \n\t$F5605 ( assign , field , arg , target ) } \n"}, {"code": "$F1 public Object newGroupVariable ( final CmdLineCLA group , final Object target , final ICmdLineArg $F45 factoryValueArg ) throws ParseException { \n\ttry { \n\t\tif ( $F304005 ( group ) == null ) $F724 $F90659 ( target ) final Field field = $F242703 ( target ) ( $F304005 ( group ) ) ; \n\t\t$F10869 ( field ) $F105146 ( groupInstance ) if ( $F4576901 ( group ) ) { \n\t\t\tString baseClassName ; \n\t\t\tif ( group . getInstanceClass ( ) != null ) { \n\t\t\t\tif ( $F28230 ( field ) . charAt ( INT00 ) == STRING00 ) { \n\t\t\t\t\tbaseClassName = group . getInstanceClass ( ) ; \n\t\t\t\t\tfinal $F3244 $F304 ( array , newArray , target , field ) ; \n\t\t\t\t\t$F12388 ( array ) = $F239005 ( newInstanceForGroup , group , target , field , baseClassName , factoryValueArg ) ; \n\t\t\t\t\t$F480945 ( groupInstance , array ) } \n\t\t\t\telse { \n\t\t\t\t\tfinal $F85106 $F304 ( arrayList , newList , target , field ) ; \n\t\t\t\t\tgroupInstance = newInstanceForGroup ( group , target , field , null , factoryValueArg , false ) ; \n\t\t\t\t\t$F528 ( arrayList , groupInstance ) } \n\t\t\t\t} \n\t\t\telse if ( $F28230 ( field ) . charAt ( INT00 ) == STRING00 ) { \n\t\t\t\tbaseClassName = $F28230 ( field ) . substring ( INT00 , $F28230 ( field ) . length ( ) - INT00 ) ; \n\t\t\t\tfinal $F3244 $F304 ( array , newArray , target , field ) ; \n\t\t\t\t$F12388 ( array ) = $F239005 ( newInstanceForGroup , group , target , field , baseClassName , factoryValueArg ) ; \n\t\t\t\t$F480945 ( groupInstance , array ) } \n\t\t\telse { \n\t\t\t\tfinal $F85106 $F304 ( arrayList , newList , target , field ) ; \n\t\t\t\tgroupInstance = newInstanceForGroup ( group , target , field , null , factoryValueArg , false ) ; \n\t\t\t\t$F528 ( arrayList , groupInstance ) } \n\t\t\t} \n\t\telse { \n\t\t\tgroupInstance = newInstanceForGroup ( group , target , field , null , factoryValueArg , true ) ; \n\t\t\t$F52836 ( field , target , groupInstance ) } \n\t\treturn groupInstance ; \n\t\t} \n\tcatch ( final ClassNotFoundException e ) { \n\t\tthrow new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final InstantiationException e ) { \n\t\t$F7453 ( e ) throw new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final IllegalAccessException e ) { \n\t\tthrow new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final SecurityException e ) { \n\t\tthrow new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final NoSuchFieldException e ) { \n\t\tthrow new ParseException ( $F156028 ( target ) + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final IllegalArgumentException e ) { \n\t\tthrow new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final NoSuchMethodException e ) { \n\t\tthrow new ParseException ( $F156028 ( target ) + $F304005 ( group ) + STRING00 + group . getFactoryMethodName ( ) + STRING00 , $F3745 ) ; \n\t\t} \n\tcatch ( final InvocationTargetException e ) { \n\t\tthrow new ParseException ( STRING00 + $F304005 ( group ) + STRING00 , $F3745 ) ; \n\t\t} \n\t} \n"}, {"code": "private void setup $F2 { \n\tsuper . setMapperClass ( Mapper . class ) ; \n\tsuper . setMapOutputKeyClass ( Key . class ) ; \n\tsuper . setMapOutputValueClass ( Value . class ) ; \n\tsuper . setPartitionerClass ( SimplePartitioner . class ) ; \n\tsuper . setGroupingComparatorClass ( SimpleGroupingComparator . class ) ; \n\tsuper . setSortComparatorClass ( SimpleSortComparator . class ) ; \n\tsuper . setReducerClass ( Reducer . class ) ; \n\tsuper . setOutputKeyClass ( Key . class ) ; \n\tsuper . setOutputValueClass ( Value . class ) ; \n\t} \n"}, {"code": "public SimpleJob setFilter ( Class < ? extends Mapper < Key , Value , Key , Value > > clazz ) { \n\tsuper . setMapperClass ( clazz ) ; \n\tmapper = true ; \n\treturn this ; \n\t} \n"}, {"code": "public SimpleJob setSummarizer ( Class < ? extends Reducer < Key , Value , Key , Value > > clazz ) { \n\treturn setSummarizer ( clazz , false , INT00 ) ; \n\t} \n"}, {"code": "public SimpleJob setSummarizer ( Class < ? extends Reducer < Key , Value , Key , Value > > clazz , boolean combine ) $F12176 ( setSummarizer , clazz , combine , DEFAULT_COMBAIN_CACHE ) "}, {"code": "public SimpleJob setSummarizer ( Class < ? extends Reducer < Key , Value , Key , Value > > clazz , boolean combine , int cache ) { \n\tsuper . setReducerClass ( clazz ) ; \n\treducer = true ; \n\t$F6297 ( combine , setCombiner , clazz , cache ) return this ; \n\t} \n"}, {"code": "public SimpleJob setCombiner ( Class < ? extends Reducer < Key , Value , Key , Value > > clazz ) throws IllegalStateException $F14249 ( setCombiner , clazz , DEFAULT_COMBAIN_CACHE ) "}, {"code": "public SimpleJob setCombiner ( Class < ? extends Reducer < Key , Value , Key , Value > > clazz , int cache ) throws IllegalStateException { \n\tsuper . setCombinerClass ( clazz ) ; \n\tgetConfiguration ( ) . setInt ( COMBINE_CACHE , cache ) ; \n\treturn this ; \n\t} \n"}, {"code": "$F762 $F1 public void setMapperClass ( Class < ? extends Mapper > cls ) throws IllegalStateException { \n\tsuper . setMapperClass ( cls ) ; \n\tmapper = true ; \n\t} \n"}, {"code": "$F762 $F1 public void setReducerClass ( Class < ? extends Reducer > cls ) throws IllegalStateException { \n\tsuper . setReducerClass ( cls ) ; \n\treducer = true ; \n\t} \n"}, {"code": "public SimpleJob setSimpleJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath ) { \n\t$F75598 ( separator , conf , SEPARATOR ) return $F239005 ( setSimpleJoin , masterLabels , masterColumn , dataColumn , masterPath , separator ) ; \n\t} \n"}, {"code": "public SimpleJob setSimpleJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath , String separator , boolean regex ) { \n\t$F105613 ( conf , READER_TYPE , SINGLE_COLUMN_JOIN_READER ) conf . setStrings ( MASTER_LABELS , masterLabels ) ; \n\t$F52836 ( conf , JOIN_MASTER_COLUMN , masterColumn ) $F52836 ( conf , JOIN_DATA_COLUMN , dataColumn ) $F52836 ( conf , MASTER_PATH , masterPath ) $F52836 ( conf , MASTER_SEPARATOR , separator ) conf . setBoolean ( JOIN_REGEX , regex ) ; \n\treturn this ; \n\t} \n"}, {"code": "public SimpleJob setSimpleJoin ( $F21 masterLabels , $F21 masterColumns , $F21 dataColumns , String masterPath ) throws DataFormatException { \n\t$F75598 ( separator , conf , SEPARATOR ) return $F239005 ( setSimpleJoin , masterLabels , masterColumns , dataColumns , masterPath , separator ) ; \n\t} \n"}, {"code": "public SimpleJob setSimpleJoin ( $F21 masterLabels , $F21 masterColumns , $F21 dataColumns , String masterPath , String separator , boolean regex ) throws DataFormatException { \n\tif $F250577 ( masterColumns , dataColumns ) { \n\t\tthrow new DataFormatException $F6 ; \n\t\t} \n\t$F105613 ( conf , READER_TYPE , SOME_COLUMN_JOIN_READER ) conf . setStrings ( MASTER_LABELS , masterLabels ) ; \n\tconf . setStrings ( JOIN_MASTER_COLUMN , masterColumns ) ; \n\tconf . setStrings ( JOIN_DATA_COLUMN , dataColumns ) ; \n\t$F52836 ( conf , MASTER_PATH , masterPath ) $F52836 ( conf , MASTER_SEPARATOR , separator ) conf . setBoolean ( JOIN_REGEX , regex ) ; \n\treturn this ; \n\t} \n"}, {"code": "public SimpleJob setBigJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath ) { \n\t$F75598 ( separator , conf , SEPARATOR ) $F276 ( setBigJoin , masterLabels , masterColumn , dataColumn , masterPath , separator ) return this ; \n\t} \n"}, {"code": "public SimpleJob setBigJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath , String separator ) { \n\tif ( natural ) $F47777 bigJoin = true ; \n\t$F105613 ( conf , READER_TYPE , SINGLE_COLUMN_JOIN_READER ) conf . setStrings ( MASTER_LABELS , masterLabels ) ; \n\t$F52836 ( conf , JOIN_MASTER_COLUMN , masterColumn ) $F52836 ( conf , JOIN_DATA_COLUMN , dataColumn ) $F52836 ( conf , MASTER_PATH , masterPath ) $F52836 ( conf , MASTER_SEPARATOR , separator ) return this ; \n\t} \n"}, {"code": "public SimpleJob setBigJoin ( $F21 masterLabels , $F21 masterColumns , $F21 dataColumns , String masterPath ) throws DataFormatException { \n\t$F75598 ( separator , conf , SEPARATOR ) $F51734 ( setBigJoin , masterLabels , masterColumns , dataColumns , masterPath , separator ) } \n"}, {"code": "public SimpleJob setBigJoin ( $F21 masterLabels , $F21 masterColumns , $F21 dataColumns , String masterPath , String separator ) throws DataFormatException { \n\tif ( natural ) $F47777 if $F250577 ( masterColumns , dataColumns ) { \n\t\tthrow new DataFormatException $F6 ; \n\t\t} \n\tbigJoin = true ; \n\t$F105613 ( conf , READER_TYPE , SOME_COLUMN_JOIN_READER ) conf . setStrings ( MASTER_LABELS , masterLabels ) ; \n\tconf . setStrings ( JOIN_MASTER_COLUMN , masterColumns ) ; \n\tconf . setStrings ( JOIN_DATA_COLUMN , dataColumns ) ; \n\t$F52836 ( conf , MASTER_PATH , masterPath ) $F52836 ( conf , MASTER_SEPARATOR , separator ) return this ; \n\t} \n"}, {"code": "public SimpleJob setJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath ) throws $F372272 { \n\t$F75598 ( separator , conf , SEPARATOR ) return setJoin ( masterLabels , masterColumn , dataColumn , masterPath , separator , false , DEFAULT_AUTOJOIN_THRESHOLD ) ; \n\t} \n"}, {"code": "public SimpleJob setJoin ( $F21 masterLabels , String masterColumn , String dataColumn , String masterPath , String separator , boolean regex , int threshold ) throws $F372272 { \n\tif ( regex ) $F263264 ( setSimpleJoin , masterLabels , masterColumn , dataColumn , masterPath , separator , regex ) $F155962 ( javaOpt , conf ) String xmx = StringUtil . getXmx ( javaOpt ) ; \n\tint xmxSize = SizeUtils . xmx2MB ( xmx ) ; \n\tint masterSize = SizeUtils . byte2Mbyte ( pathUtils . getFileSize ( masterPath ) ) ; \n\tint freeSize = xmxSize - DEFALUT_CHILD_MEM_SIZE - masterSize ; \n\tif ( freeSize < threshold ) $F51736 ( setBigJoin , masterLabels , masterColumn , dataColumn , masterPath , separator ) $F230320 ( setSimpleJoin , masterLabels , masterColumn , dataColumn , masterPath , separator , regex ) } \n"}, {"code": "public SimpleJob setJoin ( $F21 masterLabels , $F21 masterColumns , $F21 dataColumns , String masterPath ) throws $F372272 { \n\t$F75598 ( separator , conf , SEPARATOR ) return setJoin ( masterLabels , masterColumns , dataColumns , masterPath , separator , false , DEFAULT_AUTOSOMEJOIN_THRESHOLD ) ; \n\t} \n"}, {"code": "public String encode ( Object source ) { \n\treturn net . arnx . jsonic . JSON . encode ( source , true ) ; \n\t} \n"}, {"code": "public void encode ( Object source , File file ) throws IOException , ParserException { \n\t$F101989 ( writer ) try { \n\t\twriter = new Writer ( file ) ; \n\t\tnet . arnx . jsonic . JSON . encode ( source , writer , true ) ; \n\t\t} \n\tcatch ( net . arnx . jsonic . JSONException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t$F94251 ( writer ) } \n"}, {"code": "public String encode ( XML xml ) throws ParserException , SAXException , IOException { \n\t$F117558 ( dbFactory , DocumentBuilderFactory ) DocumentBuilder builder = null ; \n\tInputSource is = new InputSource ( new StringReader $F5478 ( xml ) ) ; \n\ttry { \n\t\t$F195956 ( builder , dbFactory ) ; \n\t\t$F476657 ( doc , builder , is ) return net . arnx . jsonic . JSON . encode ( doc , true ) ; \n\t\t} \n\tcatch ( SAXException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\tcatch ( ParserConfigurationException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public $F1372 T decode ( String source , $F13805 ( cls ) ) { \n\treturn net . arnx . jsonic . JSON . decode ( source , cls ) ; \n\t} \n"}, {"code": "public $F1372 T decode ( File file , $F13805 ( cls ) ) throws ParserException , IOException { \n\treturn decode ( new Reader ( file ) , cls ) ; \n\t} \n"}, {"code": "public $F1372 T decode ( Reader reader , $F13805 ( cls ) ) throws ParserException , IOException { \n\ttry { \n\t\treturn net . arnx . jsonic . JSON . decode ( reader , cls ) ; \n\t\t} \n\tcatch ( net . arnx . jsonic . JSONException e ) { \n\t\tthrow new ParserException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public Object canCreate ( Object locator ) { \n\t$F544121 ( locator ) for ( $F84725 ( index , _factories ) ) { \n\t\tObject thisLocator = $F198 ( _factories , index ) . canCreate ( locator ) ; \n\t\t$F99796 ( thisLocator ) } \n\t$F724 } \n"}, {"code": "public Object create ( Object locator ) throws CreateException { \n\t$F544121 ( locator ) for ( $F84725 ( index , _factories ) ) { \n\t\tIFactory $F199 ( factory , _factories , index ) ; \n\t\tif ( factory . canCreate ( locator ) != null ) $F4019 ( factory , locator ) } \n\tthrow new CreateException $F78571 ( locator ) ; \n\t} \n"}, {"code": "static public BagArray resource $F139786 ( context , name ) { \n\treturn resource ( context , name , ( ) - $F253106 ) ; \n\t} \n"}, {"code": "static public BagArray url ( String urlString , Bag postData , String postDataMimeType ) { \n\treturn url ( urlString , postData , postDataMimeType , ( ) - $F253106 ) ; \n\t} \n"}, {"code": "private static final String createMessage ( Object illegalContext , $F27272 ( applicableContexts ) ) { \n\t$F1200 ( stringBuilder ) $F1218 ( stringBuilder ) stringBuilder . append ( $F6291 ( illegalContext ) ) ; \n\t$F1218 ( stringBuilder ) if $F98946 ( applicableContexts ) { \n\t\t$F1218 ( stringBuilder ) for ( $F10839 ( contextClass , applicableContexts ) ) { \n\t\t\t$F1218 ( stringBuilder ) $F298342 ( stringBuilder , contextClass ) } \n\t\t} \n\t$F1218 ( stringBuilder ) $F1226 ( stringBuilder ) } \n"}, {"code": "public long writeFrom ( Readable readable ) throws IOException { \n\tcheckNotNull ( readable ) ; \n\t$F25311 ( closer , Closer ) try { \n\t\tWriter out = closer . register ( openStream ( ) ) ; \n\t\tlong written = $F47448 ( CharStreams , readable , out ) ; \n\t\t$F6369 ( out ) return written ; \n\t\t} \n\tcatch ( Throwable e ) $F57814 ( closer , e ) $F2454 ( closer ) } \n"}, {"code": "public static String propToColumn ( String propName ) { \n\t$F70749 ( arr , propName ) for ( $F2674 ( i , arr ) ) { \n\t\tif ( Character . isUpperCase ( arr [ i ] ) ) { \n\t\t\t$F2532 ( s1 , propName , i ) String s = STRING00 + Character . toLowerCase ( arr [ i ] ) ; \n\t\t\t$F100656 ( s2 , propName , i ) return propToColumn ( s1 + s + s2 ) ; \n\t\t\t} \n\t\t} \n\treturn propName ; \n\t} \n"}, {"code": "$F1 public Object fetch ( IParamReader reader , IParamData param ) { \n\t$F10838 ( beanClass ) BeanInfo beanInfo = null ; \n\t$F105146 ( beanInstance ) try { \n\t\t$F3947 ( classLoader , Thread ) beanClass = Class . forName ( $F511 ( param ) , true , classLoader ) ; \n\t\tbeanInfo = $F2442112 ( Introspector , beanClass ) ; \n\t\t$F146792 ( beanInstance , beanClass ) $F391516 propertyDescriptors = $F2052575 ( beanInfo ) ; \n\t\tfor ( BeanProperty beanProperty : properties ) { \n\t\t\tString $F1325730 ( propertyName , beanProperty ) ; \n\t\t\t$F462595 ( attributeName , beanProperty ) $F462595 ( attributeValue , beanProperty ) String propertyValue = reader . getParamValue ( $F28553 ( param ) + propertyName , attributeName , attributeValue ) ; \n\t\t\t$F289127 ( writeMethod ) for ( PropertyDescriptor propertyDescriptor : propertyDescriptors ) { \n\t\t\t\tif $F26397 ( propertyDescriptor , propertyName ) { \n\t\t\t\t\t$F104978 ( writeMethod , propertyDescriptor ) ; \n\t\t\t\t\t$F332 } \n\t\t\t\t} \n\t\t\tif $F112 ( writeMethod ) { \n\t\t\t\tthrow new RuntimeException ( $F7207 ( propertyName ) + $F214962 ( beanClass ) ) ; \n\t\t\t\t} \n\t\t\t$F128915 ( writeMethod , beanInstance , propertyValue ) } \n\t\t} \n\t$F11569 ( e ) return beanInstance ; \n\t} \n"}, {"code": "public Optional $F20797 getTag $F2 { \n\tAttributeType tagAttributeType = annotationType . getTagAttribute ( ) ; \n\tif $F112 ( tagAttributeType ) { \n\t\treturn Optional . ofNullable ( get ( Types . TAG ) . as ( Tag . class ) ) ; \n\t\t} \n\treturn Optional . ofNullable ( get ( tagAttributeType ) . as ( Tag . class ) ) ; \n\t} \n"}, {"code": "public < T extends Tag > $F57897 getTag ( $F410888 $F7905 tClass ) { \n\treturn $F22410 ( getTag ) ( tClass : : <missing ';'> $F25094 $F161 ( map , Cast ) $F1372 as <missing '('> ) ; \n\t} \n"}, {"code": "public boolean isInstanceOfTag ( String tag ) { \n\treturn ! StringUtils . isNullOrBlank ( tag ) && isInstanceOfTag ( Cast . $F20797 as ( getType ( ) . getTagAttribute ( ) . getValueType ( ) . decode ( tag ) ) ) ; \n\t} \n"}, {"code": "public boolean isInstanceOfTag ( Tag tag ) { \n\treturn tag != null && $F22410 ( getTag ) ( t - > t . isInstance ( tag ) ) . isPresent ( ) ; \n\t} \n"}, {"code": "public Annotation next ( $F410888 AnnotationType type ) { \n\treturn $F46454 ( document ) ? Fragments . detachedEmptyAnnotation ( ) : document ( ) . getAnnotationSet ( ) . next ( this , type ) ; \n\t} \n"}, {"code": "public Annotation previous ( AnnotationType type ) { \n\treturn $F46454 ( document ) ? Fragments . detachedEmptyAnnotation ( ) : document ( ) . getAnnotationSet ( ) . previous ( this , type ) ; \n\t} \n"}, {"code": "public static Failure copy ( Failure failure ) { \n\t$F2201 ( failure ) Failure result = new Failure $F2 ; \n\tresult . code = failure . code ; \n\tresult . details = failure . details ; \n\tresult . title = failure . title ; \n\treturn result ; \n\t} \n"}, {"code": "public static Failure parse ( String failure ) { \n\tFailure result = new Failure $F2 ; \n\t$F6110 ( dash , failure ) $F6110 ( leftBracet , failure ) $F6110 ( rightBracet , failure ) result . title = $F317630 ( failure , leftBracet ) ; \n\tresult . code = $F101730 ( failure , leftBracet , rightBracet ) . trim ( ) ; \n\tif $F3730 ( dash ) { \n\t\tresult . details = $F317641 ( failure , dash ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 protected void initialize ( $F15785 ( sharedState ) , $F15785 ( options ) ) { \n\t$F5601 ( fileName , options ) $F34863 ( passwordFile , fileName ) } \n"}, {"code": "public boolean login $F2 throws LoginException { \n\tNameCallback user = new NameCallback $F6 ; \n\tPasswordCallback pass = new PasswordCallback $F201634 ; \n\tPasswordEncryptionService enc = new PasswordEncryptionService $F2 ; \n\ttry { \n\t\t$F564 ( callback , user , pass ) $F96169 ( reader , passwordFile ) while ( $F348006 ( reader ) ) { \n\t\t\t$F21 fields = $F57850 ( reader ) . split ( STRING00 ) ; \n\t\t\tif ( $F1825 ( fields ) ( $F507 ( user ) ) ) { \n\t\t\t\tString loginPassword = new String ( $F2962 ( pass ) ) ; \n\t\t\t\t$F1975 salt = StringUtil . hexToByteArray ( fields [ INT00 ] ) ; \n\t\t\t\t$F1975 realDigest = StringUtil . hexToByteArray ( fields [ INT00 ] ) ; \n\t\t\t\tif ( enc . authenticate ( loginPassword , realDigest , salt ) ) { \n\t\t\t\t\taddPrincipal ( new UserPrincipal $F88565 ( fields ) ) ; \n\t\t\t\t\tfor ( $F2674 ( i , fields ) ) { \n\t\t\t\t\t\taddPrincipal ( new RolePrincipal $F77504 ( fields , i ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F232 } \n\t\t\t\t$F332 } \n\t\t\t} \n\t\t} \n\tcatch ( FileNotFoundException e ) $F11568 ( e ) $F72290 catch ( UnsupportedCallbackException e ) $F1645 throw new FailedLoginException $F2 ; \n\t} \n"}, {"code": "public static Character toCharacterObject ( char ch ) { \n\tif $F62228 ( ch , CHAR_ARRAY ) $F12383 ( CHAR_ARRAY , ch ) return new Character ( ch ) ; \n\t} \n"}, {"code": "public static Character toCharacterObject ( String str ) { \n\t$F28087 ( StringUtils , str ) return $F70625 ( toCharacterObject , str ) ; \n\t} \n"}, {"code": "public static char toChar $F24307 ( str , defaultValue ) { \n\t$F1932 ( StringUtils , str , defaultValue ) $F368174 ( str ) } \n"}, {"code": "protected HttpResponse fetchResponse ( InvocationContext context , HttpRequestBase request ) { \n\ttry { \n\t\t$F2612 endpoint = $F713495 ( context ) ; \n\t\tHttpClient httpClient = HttpClientDirectory . INSTANCE . lookup ( endpoint ) ; \n\t\treturn endpoint . isAnnotationPresent ( Stateful . class ) ? httpClient . execute ( request , HttpContextDirectory . INSTANCE . lookup ( endpoint ) ) : $F66301 ( httpClient , request ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new RequestExecutionException ( $F12746 ( context ) , $F713495 ( context ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public HttpResponse execute ( InvocationContext context , HttpRequestBase request ) { \n\t$F721326 ( response ) try $F14068 ( response , fetchResponse , context , request ) catch ( RequestExecutionException ree ) { \n\t\t$F938352 ( executionHandler , context , ree ) } \n\tif $F268 ( response ) { \n\t\tif $F540 ( successful , response ) $F3635486 ( executionHandler , context , response ) else { \n\t\t\texecutionHandler . onFailure ( context , response ) ; \n\t\t\t} \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "$F1 protected Object getOptionValue ( $F109288 argq ) { \n\tString $F72068 ( name , argq ) ; \n\t$F2595 ( file , name ) if ( mustExist && $F9040 ( file ) ) { \n\t\t$F111915 ( System , name ) $F17380 ( System ) } \n\treturn file ; \n\t} \n"}, {"code": "static Method checkTimeMethod ( Method timeMethod ) throws InvalidBenchmarkException { \n\t$F66337 ( checkArgument , isTimeMethod , timeMethod ) $F75735 ( parameterTypes , timeMethod ) if ( ! Arrays . equals ( parameterTypes , new $F2612 [ ] { \n\t\t$F15889 } \n\t) && ! Arrays . equals ( parameterTypes , new $F2612 [ ] { \n\t\t$F73980 } \n\t) ) { \n\t\tthrow new InvalidBenchmarkException $F2283 ( timeMethod ) ; \n\t\t} \n\tif ( $F381185 ( Util , timeMethod ) ) { \n\t\tthrow new InvalidBenchmarkException $F2283 ( timeMethod ) ; \n\t\t} \n\treturn timeMethod ; \n\t} \n"}, {"code": "$F2893853 @ Logging public Logger createLogger ( InjectionPoint injectionPoint ) { \n\tLogging annotation = $F2217416 ( injectionPoint ) . getAnnotation ( Logging . class ) ; \n\t$F48365 ( name , annotation ) if $F28525 ( name ) { \n\t\treturn this . createClassLogger ( injectionPoint ) ; \n\t\t} \n\tResolver resolverAnnotation = annotation . resolver ( ) ; \n\tResolverWrapper wrapper = new ResolverAnnotationWrapper ( resolverAnnotation ) ; \n\tPropertyResolver resolver = this . resolverFactory . createPropertyResolver ( wrapper ) ; \n\t$F53092 bootstrapMap = this . resolverFactory . getBootstrapProperties ( wrapper ) ; \n\t$F53092 defaultMap = this . resolverFactory . getDefaultProperties ( wrapper ) ; \n\tString resolvedName = resolver . resolveProperties ( name , bootstrapMap , defaultMap ) ; \n\treturn $F7386 ( Logger , resolvedName ) ; \n\t} \n"}, {"code": "private Logger createClassLogger ( InjectionPoint injectionPoint ) { \n\treturn Logger . getLogger ( $F515882 ( injectionPoint ) . getDeclaringClass ( ) . getName ( ) ) ; \n\t} \n"}, {"code": "public static Version valueOf $F62952 ( value ) { \n\tfinal Optional < Instant > time = parse ( value ) ; \n\tif $F30198 ( time ) { \n\t\treturn new Version $F176532 ( time ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static boolean isDuplicated $F62952 ( input ) { \n\t$F12039 ( len , input ) if $F100188 ( len ) { \n\t\t$F69329 ( half , len ) if ( $F151662 ( hasEqualParts , input , half ) ) $F233 if ( $F108518 ( input , half ) . equals ( STRING00 ) && input . substring ( half - INT00 , half ) . matches ( STRING00 ) ) { \n\t\t\treturn hasEqualParts ( input , half - INT00 , half + INT00 ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\t$F69329 ( half , len ) String middlePart = input . substring ( half - INT00 , half + INT00 ) ; \n\t\tif $F540 ( isSpaceCommaSpace , middlePart ) { \n\t\t\treturn hasEqualParts ( input , half - INT00 , half + INT00 ) ; \n\t\t\t} \n\t\telse if $F1064795 ( isCommaInTheMiddle , middlePart , isLineBreakInTheMiddle ) { \n\t\t\treturn hasEqualParts ( input , half , half + INT00 ) ; \n\t\t\t} \n\t\t} \n\t$F213 } \n"}, {"code": "private static boolean hasEqualParts $F526304 ( input , beginTo , endFrom ) { \n\t$F2532 ( begin , input , beginTo ) $F6994 ( end , input , endFrom ) $F66747 ( begin , end ) } \n"}, {"code": "public long addAndGet ( K key , long delta ) { \n\touter : for ( $F117278 ) { \n\t\tAtomicLong $F199 ( atomic , map , key ) ; \n\t\tif $F112 ( atomic ) { \n\t\t\tatomic = map . putIfAbsent ( key , new AtomicLong ( delta ) ) ; \n\t\t\t$F3446 ( atomic , delta ) } \n\t\tfor ( $F117278 ) { \n\t\t\t$F80298 ( oldValue , atomic ) if $F64922 ( oldValue ) { \n\t\t\t\tif ( map . replace ( key , atomic , new AtomicLong ( delta ) ) ) $F356 ( delta ) $F73796 } \n\t\t\t$F128491 ( newValue , oldValue , delta ) if $F61991 ( atomic , oldValue , newValue ) $F356 ( newValue ) } \n\t\t} \n\t} \n"}, {"code": "public long remove ( K key ) { \n\tAtomicLong $F199 ( atomic , map , key ) ; \n\tif $F112 ( atomic ) $F37377 for ( $F117278 ) { \n\t\t$F80298 ( oldValue , atomic ) if ( oldValue == NUM00 || atomic . compareAndSet ( oldValue , NUM00 ) ) { \n\t\t\t$F80302 ( map , key , atomic ) return oldValue ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "long putIfAbsent ( K key , long newValue ) { \n\tfor ( $F117278 ) { \n\t\tAtomicLong $F199 ( atomic , map , key ) ; \n\t\tif $F112 ( atomic ) { \n\t\t\tatomic = map . putIfAbsent ( key , new AtomicLong ( newValue ) ) ; \n\t\t\tif $F112 ( atomic ) $F37377 } \n\t\t$F80298 ( oldValue , atomic ) if $F64922 ( oldValue ) { \n\t\t\tif ( map . replace ( key , atomic , new AtomicLong ( newValue ) ) ) $F37377 $F23605 } \n\t\treturn oldValue ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void execute ( Runnable r ) { \n\t$F131745 ( Preconditions , r ) $F2233 ( scheduleTaskRunner ) synchronized ( internalLock ) { \n\t\t$F528 ( waitQueue , r ) if ( ! isThreadScheduled ) $F191281 ( isThreadScheduled , scheduleTaskRunner ) } \n\tif ( scheduleTaskRunner ) { \n\t\t$F48974 ( threw ) try { \n\t\t\t$F66302 ( executor , taskRunner ) threw = false ; \n\t\t\t} \n\t\tfinally { \n\t\t\tif ( threw ) { \n\t\t\t\tsynchronized ( internalLock ) $F57412 ( isThreadScheduled ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static Object getProperty $F816803 ( src , propertyName ) { \n\t$F24434 ( src ) $F24434 ( propertyName ) $F43477 ( clazz , src ) PropertyAccessor $F304 ( accessor , _findAccessor , clazz , propertyName ) ; \n\tif $F112 ( accessor ) { \n\t\tthrow new IllegalStateException $F26571 ( clazz , propertyName ) ; \n\t\t} \n\t$F17025 ( accessor , src ) } \n"}, {"code": "public static void setProperty ( final Object dst , final String propertyName , final Object value ) { \n\t$F24434 ( dst ) $F24434 ( propertyName ) $F43477 ( clazz , dst ) PropertyAccessor $F304 ( accessor , _findAccessor , clazz , propertyName ) ; \n\tif $F112 ( accessor ) { \n\t\tthrow new IllegalStateException $F26571 ( clazz , propertyName ) ; \n\t\t} \n\t$F26648 ( accessor , dst , value ) } \n"}, {"code": "public static boolean isPropertyGettable $F816803 ( src , propertyName ) { \n\t$F24434 ( src ) return $F53151 ( isPropertyGettable , src , propertyName ) ; \n\t} \n"}, {"code": "public static boolean isPropertyGettable $F2724516 ( clazz , propertyName ) { \n\t$F24434 ( clazz ) $F24434 ( propertyName ) PropertyAccessor $F304 ( accessor , _findAccessor , clazz , propertyName ) ; \n\treturn ( accessor == null ? false : accessor . isGettable ( ) ) ; \n\t} \n"}, {"code": "public static boolean isPropertySettable $F816803 ( dst , propertyName ) { \n\t$F24434 ( dst ) return $F53151 ( isPropertySettable , dst , propertyName ) ; \n\t} \n"}, {"code": "public static boolean isPropertySettable $F2724516 ( clazz , propertyName ) { \n\t$F24434 ( clazz ) $F24434 ( propertyName ) PropertyAccessor $F304 ( accessor , _findAccessor , clazz , propertyName ) ; \n\treturn ( accessor == null ? false : accessor . isSettable ( ) ) ; \n\t} \n"}, {"code": "public static $F991 getPropertyNames $F80574 ( object ) { \n\t$F24434 ( object ) return $F75709 ( getPropertyNames , object ) ; \n\t} \n"}, {"code": "public static $F991 getPropertyNames $F178750 ( clazz ) { \n\t$F24434 ( clazz ) Map < String , PropertyAccessor > accessors = _getAccessors ( clazz ) ; \n\treturn $F7837 ( accessors ) ; \n\t} \n"}, {"code": "public static int copyProperty ( final Object dst , final Object src , final String propertyName ) { \n\t$F1987 ( count ) if ( isPropertyGettable ( src , propertyName ) && isPropertySettable ( dst , propertyName ) ) { \n\t\t$F14066 ( value , getProperty , src , propertyName ) $F5605 ( setProperty , dst , propertyName , value ) count ++ ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public static int copyProperties ( final Object dst , final Object src , $F127928 ( properties ) ) { \n\t$F24434 ( properties ) $F1987 ( count ) for ( String p : properties ) { \n\t\t$F90687 ( p ) count += $F209 ( copyProperty , dst , src , p ) ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "public static int copyPropertiesExcept ( final Object dst , final Object src , $F127928 ( properties ) ) { \n\t$F24434 ( dst ) $F24434 ( src ) $F991 excepts = null ; \n\tif $F124033 ( properties ) { \n\t\t$F345642 ( excepts , Arrays , properties ) } \n\t$F1987 ( count ) $F991 names = getPropertyNames ( src ) ; \n\tfor ( String name : names ) { \n\t\tif $F446554 ( excepts , name ) $F42718 count += $F209 ( copyProperty , dst , src , name ) ; \n\t\t} \n\treturn count ; \n\t} \n"}, {"code": "private static Map < String , PropertyAccessor > _getAccessors $F178750 ( clazz ) { \n\tMap < String , PropertyAccessor > accessors = null ; \n\tsynchronized ( _ACCESSORS_REG_ ) { \n\t\t$F13002 ( accessors , _ACCESSORS_REG_ , clazz ) if $F112 ( accessors ) { \n\t\t\taccessors = PropertyAccessor . findAll ( clazz ) ; \n\t\t\t$F2725 ( _ACCESSORS_REG_ , clazz , accessors ) } \n\t\t} \n\treturn accessors ; \n\t} \n"}, {"code": "public static Value parse ( Reader reader ) throws JSONException { \n\ttry { \n\t\treturn new Parser ( reader ) . parse ( ) ; \n\t\t} \n\t$F1663429 ( reader ) } \n"}, {"code": "public static String serialize ( Value value ) throws JSONException { \n\t$F6364 ( writer ) $F62276 ( Serializer , value , writer ) $F1226 ( writer ) } \n"}, {"code": "public static void serialize ( Value value , Writer writer ) throws JSONException { \n\t$F62276 ( Serializer , value , writer ) } \n"}, {"code": "public static Value parse ( File file , Charset charset ) throws JSONException { \n\ttry { \n\t\treturn parse ( new InputStreamReader ( $F309494 ( file ) , charset ) ) ; \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\t$F388354 ( e ) } \n\t} \n"}, {"code": "public static Value parse ( File file ) throws JSONException { \n\t$F99950 ( input ) try { \n\t\t$F18718 ( header ) $F101168 ( input , file ) $F33779 ( input , header ) Charset charset ; \n\t\tif $F62414 ( header ) { \n\t\t\tcharset = ( $F62413 ( header ) ? UTF32BE : UTF16BE ) ; \n\t\t\t} \n\t\telse if $F62414 ( header ) { \n\t\t\tcharset = ( $F62413 ( header ) ? UTF32LE : UTF16LE ) ; \n\t\t\t} \n\t\telse $F1619 ( charset , UTF8 ) $F1109 ( input ) input = null ; \n\t\t$F4282 ( parse , file , charset ) } \n\tcatch ( IOException e ) { \n\t\t$F388354 ( e ) } \n\t$F447759 ( input ) } \n"}, {"code": "$F1 public void onResume $F2 { \n\t$F578434 ( super ) if ( ProfileService . getInstance ( getActivity ( ) . getApplicationContext ( ) ) . isActive ( this , Profile . NETWORK ) ) { \n\t\tif ( ! PermissionUtils . isGranted ( this , Manifest . permission . ACCESS_NETWORK_STATE ) ) { \n\t\t\tLog . e ( $F170941 ( getClass ) , STRING00 , new IckleBotRuntimeException ( new PermissionDeniedException ( Manifest . permission . ACCESS_NETWORK_STATE , Profile . NETWORK ) ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tIntentFilter intentFilter = new IntentFilter $F2 ; \n\t\t\tintentFilter . addAction ( ConnectivityManager . CONNECTIVITY_ACTION ) ; \n\t\t\tgetActivity ( ) . registerReceiver ( networkStateReceiver , intentFilter ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public void onPause $F2 { \n\tsuper . onPause ( ) ; \n\tif ( ProfileService . getInstance ( getActivity ( ) . getApplicationContext ( ) ) . isActive ( this , Profile . NETWORK ) && PermissionUtils . isGranted ( this , Manifest . permission . ACCESS_NETWORK_STATE ) ) { \n\t\tgetActivity ( ) . unregisterReceiver ( networkStateReceiver ) ; \n\t\t} \n\t} \n"}, {"code": "private ImmutableSet < $F76331 > getImmediateRawTypes $F2 { \n\t$F10880 ImmutableSet < $F76331 > result = ( ImmutableSet ) getRawTypes ( runtimeType ) ; \n\treturn result ; \n\t} \n"}, {"code": "public final Invokable $F76541 method ( Method method ) { \n\tcheckArgument ( $F587635 ( of , method ) . isAssignableFrom ( this ) , STRING00 , method , this ) ; \n\treturn new Invokable . MethodInvokable $F1372 ( method ) { \n\t\t$F1 Type getGenericReturnType $F2 { \n\t\t\treturn resolveType ( $F76548 ( super ) ) . getType ( ) ; \n\t\t\t} \n\t\t$F1 $F71242 getGenericParameterTypes $F2 { \n\t\t\treturn resolveInPlace ( $F76555 ( super ) ) ; \n\t\t\t} \n\t\t$F1 $F71242 getGenericExceptionTypes $F2 { \n\t\t\treturn resolveInPlace ( super . getGenericExceptionTypes ( ) ) ; \n\t\t\t} \n\t\t$F1 public $F76322 getOwnerType $F2 $F67624 ( TypeToken ) $F1 public String toString $F2 { \n\t\t\treturn $F34544 ( getOwnerType ) + $F797 ( super ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F63111 static $F1372 TypeToken $F8941 toGenericType $F7907 ( cls ) { \n\tif $F76445 ( cls ) { \n\t\tType arrayOfGenericType = Types . newArrayType ( $F53054 ( toGenericType , cls ) . runtimeType ) ; \n\t\t$F762 TypeToken $F8941 result = ( TypeToken $F8941 ) of ( arrayOfGenericType ) ; \n\t\treturn result ; \n\t\t} \n\tTypeVariable < $F7905 > [ ] $F76653 ( typeParams , cls ) ; \n\tif $F5678 ( typeParams ) { \n\t\t$F762 TypeToken $F8941 type = ( TypeToken $F8941 ) of ( Types . newParameterizedType ( cls , typeParams ) ) ; \n\t\treturn type ; \n\t\t} \n\telse $F3342 ( of , cls ) } \n"}, {"code": "public static $F28644 Mapper $F28644 from $F73990 ( map ) { \n\treturn new Mapper $F28644 ( map ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 asDeepMap $F73990 ( map ) { \n\treturn from ( map ) . deepLook ( ) . map ( ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 asTierMap $F73990 ( map ) { \n\treturn from ( map ) . tierKey ( ) . map ( ) ; \n\t} \n"}, {"code": "public static $F28644 $F53004 asDeepTierMap $F73990 ( map ) { \n\treturn from ( map ) . deepLook ( ) . tierKey ( ) . map ( ) ; \n\t} \n"}, {"code": "public Mapper $F28644 constraint ( Restraint $F28644 constraint ) $F3342 ( addConstraint , constraint ) "}, {"code": "$F762 public Mapper $F28644 keyAndValueNotNull $F2 { \n\treturn addConstraint ( ( MapConstraint $F28644 ) MapConstraints . notNull ( ) ) ; \n\t} \n"}, {"code": "$F762 public Mapper $F28644 keyNotNull $F2 { \n\treturn addConstraint ( ( MapConstraint $F28644 ) KeyNotNullRestraint . INSTANCE ) ; \n\t} \n"}, {"code": "$F762 public Mapper $F28644 valueNotNull $F2 { \n\treturn addConstraint ( ( MapConstraint $F28644 ) ValueNotNullRestraint . INSTANCE ) ; \n\t} \n"}, {"code": "public Mapper $F28644 uniqueKey $F2 { \n\treturn addConstraint ( new Restraint $F28644 $F2 { \n\t\t$F1 public void checkKeyValue $F59671 ( key , value ) { \n\t\t\tcheckArgument ( ! $F144 ( delegate ) . containsKey ( key ) , STRING00 , key ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Gather $F58198 entryLoop ( Decision $F58198 decision ) { \n\treturn entryGather ( ) . loop ( decision ) ; \n\t} \n"}, {"code": "public Gather $F58198 entryGather $F2 { \n\treturn Gather . from ( $F144 ( delegate ) . entrySet ( ) ) ; \n\t} \n"}, {"code": "public Mapper $F28644 filter ( Decision $F58198 decision ) { \n\tdelegate = Optional . of ( Maps . filterEntries ( $F63229 ( delegate , decision ) ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Mapper $F28644 deepLook $F2 { \n\tif ( ! ( $F144 ( delegate ) instanceof DeepLookMap ) ) { \n\t\tdelegate = Optional . of ( ( $F53004 ) DeepLookMap . from ( $F144 ( delegate ) ) ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public Mapper $F28644 tierKey $F2 { \n\tif ( ! ( $F144 ( delegate ) instanceof TierKeyMap ) ) { \n\t\tdelegate = Optional . of ( ( $F53004 ) TierKeyMap . from ( $F144 ( delegate ) ) ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "private Mapper $F28644 addConstraint ( MapConstraint $F28644 constraint ) { \n\tthis . delegate = Optional . of ( MapConstraints . constrainedMap ( $F63229 ( delegate , constraint ) ) ) ; \n\treturn this ; \n\t} \n"}, {"code": "public static MultimapBuilderWithKeys $F282 hashKeys $F63043 ( expectedKeys ) { \n\t$F2755 ( checkNonnegative , expectedKeys ) return new MultimapBuilderWithKeys $F282 $F2 { \n\t\t$F1 $F28644 Map $F59729 createMap $F2 { \n\t\t\treturn new HashMap $F59729 ( expectedKeys ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public void buildGroup ( ComponentGroup group , BuilderT builder , Context context ) { \n\tfor ( Component component : $F1745399 ( group ) ) $F5704 ( buildAny , component , builder , context ) } \n"}, {"code": "protected final void buildAny ( Component component , BuilderT builder , Context context ) { \n\tif ( component instanceof ResolvedMacro ) { \n\t\tbuildResolved ( ( ResolvedMacro ) component , builder , context ) ; \n\t\t} \n\telse if ( component instanceof UnresolvableMacro ) { \n\t\tbuildUnresolvable ( ( UnresolvableMacro ) component , builder , context ) ; \n\t\t} \n\telse if ( component instanceof TextComponent ) { \n\t\tbuildText ( ( TextComponent ) component , builder , context ) ; \n\t\t} \n\telse if ( component instanceof ComponentGroup ) { \n\t\tbuildGroup ( ( ComponentGroup ) component , builder , context ) ; \n\t\t} \n\telse $F5704 ( buildOther , component , builder , context ) } \n"}, {"code": "protected final void buildResolved ( ResolvedMacro c , BuilderT builder , Context context ) { \n\tComponent processed = c . getFormatter ( ) . process ( $F212796 ( c ) , context , $F14369 ( c ) ) ; \n\t$F5605 ( buildAny , processed , builder , context ) } \n"}, {"code": "ImmutableSet < Experiment > dryRun ( Iterable < Experiment > experiments ) throws InvalidBenchmarkException { \n\tImmutableSet . Builder < Experiment > $F9005 ( builder , ImmutableSet ) ; \n\tfor ( Experiment experiment : experiments ) { \n\t\t$F2612 $F145037 ( clazz , benchmarkClass ) ; \n\t\ttry { \n\t\t\tObject benchmark = injector . createChildInjector ( ExperimentModule . forExperiment ( experiment ) ) . getInstance ( $F198 ( Key , clazz ) ) ; \n\t\t\tbenchmarkClass . setUpBenchmark ( benchmark ) ; \n\t\t\ttry { \n\t\t\t\texperiment . instrumentation ( ) . dryRun ( benchmark ) ; \n\t\t\t\t$F528 ( builder , experiment ) } \n\t\t\tfinally { \n\t\t\t\tbenchmarkClass . cleanup ( benchmark ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( ProvisionException e ) { \n\t\t\t$F13855 ( cause , e ) if $F268 ( cause ) { \n\t\t\t\tthrow new UserCodeException ( cause ) ; \n\t\t\t\t} \n\t\t\tthrow e ; \n\t\t\t} \n\t\tcatch ( CreationException e ) { \n\t\t\t$F13905 ( message ) $F1987 ( errorNum ) for ( Message guiceMessage : e . getErrorMessages ( ) ) { \n\t\t\t\t$F1232 ( message ) ( ++ errorNum ) . append ( STRING00 ) . append ( $F2443 ( guiceMessage ) ) ; \n\t\t\t\t} \n\t\t\tthrow new InvalidBenchmarkException $F94896 ( message , e ) ; \n\t\t\t} \n\t\tcatch ( SkipThisScenarioException innocuous ) $F1645 } \n\t$F901 ( builder ) } \n"}, {"code": "$F197020 $F1 public AffinityGroup create ( $F197020 AffinityGroupCreateOptions options ) throws $F22202330 { \n\tif ( options == null || $F687055 ( options ) ) $F15673814 CreateAffinityGroupModel createAffinityGroupModel = new CreateAffinityGroupModel $F2 ; \n\t$F531847 ( createAffinityGroupModel , options ) $F28607 ( createAffinityGroupModel , options ) createAffinityGroupModel . setLocation ( $F20708 ( provider ) . getRegionId ( ) ) ; \n\tcreateAffinityGroupModel . setLabel ( new String ( Base64 . encodeBase64 ( $F507 ( options ) . getBytes ( ) ) ) ) ; \n\tAzureMethod azureMethod = new AzureMethod ( this . provider ) ; \n\ttry { \n\t\t$F1754014 ( azureMethod , RESOURCE_AFFINITYGROUPS , createAffinityGroupModel ) ; \n\t\t} \n\tcatch ( JAXBException e ) { \n\t\t$F429327 ( logger , e ) $F10474554 ( e ) } \n\treturn AffinityGroup . getInstance ( $F507 ( createAffinityGroupModel ) , $F507 ( createAffinityGroupModel ) , $F6483 ( createAffinityGroupModel ) , $F7418 ( createAffinityGroupModel ) , null ) ; \n\t} \n"}, {"code": "$F1 public void delete $F274855 ( affinityGroupId ) throws $F22202330 { \n\tif $F28525 ( affinityGroupId ) $F15673814 AzureMethod method = new AzureMethod ( this . provider ) ; \n\tmethod . invoke ( STRING00 , this . provider . getContext ( ) . getAccountNumber ( ) , $F4182 ( String , RESOURCE_AFFINITYGROUP , affinityGroupId ) , null ) ; \n\t} \n"}, {"code": "$F197020 $F1 public AffinityGroup get $F274855 ( affinityGroupId ) throws $F22202330 { \n\tif $F28525 ( affinityGroupId ) $F15673814 AzureMethod method = new AzureMethod ( this . provider ) ; \n\tfinal AffinityGroupModel affinityGroupModel = method . get ( AffinityGroupModel . class , $F4182 ( String , RESOURCE_AFFINITYGROUP , affinityGroupId ) ) ; \n\treturn AffinityGroup . getInstance ( $F507 ( affinityGroupModel ) , $F507 ( affinityGroupModel ) , $F6483 ( affinityGroupModel ) , $F7418 ( affinityGroupModel ) , null ) ; \n\t} \n"}, {"code": "$F197020 $F1 public Iterable < AffinityGroup > list ( $F197020 AffinityGroupFilterOptions options ) throws $F22202330 { \n\tAzureMethod method = new AzureMethod ( this . provider ) ; \n\tfinal AffinityGroupsModel affinityGroupsModel = method . get ( AffinityGroupsModel . class , RESOURCE_AFFINITYGROUPS ) ; \n\tArrayList < AffinityGroup > affinityGroups = new ArrayList < AffinityGroup > $F2 ; \n\tfor ( AffinityGroupModel affinityGroupModel : affinityGroupsModel . getAffinityGroups ( ) ) { \n\t\tAffinityGroup affinityGroup = AffinityGroup . getInstance ( $F507 ( affinityGroupModel ) , $F507 ( affinityGroupModel ) , $F6483 ( affinityGroupModel ) , $F7418 ( affinityGroupModel ) , null ) ; \n\t\tif ( options != null && $F19771 ( options , affinityGroup ) ) $F528 ( affinityGroups , affinityGroup ) } \n\treturn affinityGroups ; \n\t} \n"}, {"code": "$F1 public AffinityGroup modify ( $F197020 String affinityGroupId , $F197020 AffinityGroupCreateOptions options ) throws $F22202330 { \n\tif $F28525 ( affinityGroupId ) $F15673814 if ( options == null || $F6483 ( options ) == null ) $F15673814 UpdateAffinityGroupModel updateAffinityGroupModel = new UpdateAffinityGroupModel $F2 ; \n\t$F28607 ( updateAffinityGroupModel , options ) AzureMethod method = new AzureMethod ( this . provider ) ; \n\ttry { \n\t\tmethod . put ( $F4182 ( String , RESOURCE_AFFINITYGROUP , affinityGroupId ) , updateAffinityGroupModel ) ; \n\t\t} \n\tcatch ( JAXBException e ) { \n\t\t$F429327 ( logger , e ) $F10474554 ( e ) } \n\t$F867 ( get , affinityGroupId ) } \n"}, {"code": "$F1 protected Properties mergeProperties $F2 throws IOException { \n\tfinal PrefixedProperties myProperties = createProperties ( ) ; \n\t$F7943 ( localOverride , loadProperties , myProperties ) if $F268 ( localProperties ) { \n\t\tfor ( $F2674 ( i , localProperties ) ) { \n\t\t\tfinal Properties props = localProperties [ i ] ; \n\t\t\tif $F268 ( props ) { \n\t\t\t\tfor ( final Enumeration $F282 $F11501 ( en , props ) ; \n\t\t\t\t$F5505 ( en ) ; \n\t\t\t\t) { \n\t\t\t\t\tfinal Object $F5508 ( key , en ) ; \n\t\t\t\t\t$F382000 ( myProperties , key , props ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F65112 ( localOverride , loadProperties , myProperties ) return myProperties ; \n\t} \n"}, {"code": "$F1 public Object postProcessAfterInitialization $F816803 ( bean , beanName ) throws BeansException { \n\tif ( bean instanceof Properties && bean != getPrefixedProperties ( ) && getProcessOtherProperties ( ) ) { \n\t\tfinal Properties props = ( Properties ) bean ; \n\t\tfinal PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper $F3192 ( placeholderPrefix , placeholderSuffix , valueSeparator , ignoreUnresolvablePlaceholders ) ; \n\t\tfinal PrefixedProperties $F71753 ( clone , getPrefixedProperties ) ; \n\t\t$F7171 ( clone , props ) final Properties beanProperty = ( Properties ) bean ; \n\t\tfor ( final Object key : $F7837 ( beanProperty ) ) { \n\t\t\tif $F4380 ( key ) { \n\t\t\t\t$F1951471 ( stringKey , key ) props . setProperty ( stringKey , helper . replacePlaceholders ( $F767 ( beanProperty , stringKey ) , clone ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn bean ; \n\t} \n"}, {"code": "public void setProperties ( Properties properties ) { \n\tsessionTimeout = Integer . valueOf ( properties . getProperty ( $F6265 ( sessionTimeout ) ) ) ; \n\t$F1292 ( System ) ( new LogEntry $F500 ( sessionTimeout ) ) ; \n\tdefaultAdminPassword = properties . getProperty ( STRING00 , defaultAdminPassword ) ; \n\t} \n"}, {"code": "private Request bindThreadToRequest ( Thread thread , EntryPoint entryPoint ) { \n\tStandardRequest boundRequest ; \n\t$F74121 ( threadId , thread ) synchronized ( requestsByThreadId ) { \n\t\tStandardRequest previouslyBoundRequest = ( StandardRequest ) $F198 ( requestsByThreadId , threadId ) ; \n\t\tif $F112 ( previouslyBoundRequest ) { \n\t\t\tboundRequest = new StandardRequest ( entryPoint , this ) ; \n\t\t\t$F2725 ( requestsByThreadId , threadId , boundRequest ) } \n\t\telse { \n\t\t\tpreviouslyBoundRequest . increaseTimesEntered ( ) ; \n\t\t\tboundRequest = previouslyBoundRequest ; \n\t\t\t} \n\t\t} \n\treturn boundRequest ; \n\t} \n"}, {"code": "public void register ( Authenticator authenticator ) { \n\tif ( this . authenticator == null ) $F7668 ( this , authenticator ) else if ( ! $F9272 ( authenticator ) . equals ( this . authenticator . getClass ( ) . getSimpleName ( ) ) ) { \n\t\tthrow new ConfigurationException ( STRING00 + this . authenticator . getClass ( ) . getSimpleName ( ) + STRING00 + $F9272 ( authenticator ) ) ; \n\t\t} \n\t} \n"}, {"code": "public Request releaseRequest ( Thread thread ) { \n\t$F74121 ( threadId , thread ) synchronized ( requestsByThreadId ) { \n\t\tStandardRequest request = ( StandardRequest ) $F198 ( requestsByThreadId , threadId ) ; \n\t\tif $F268 ( request ) { \n\t\t\tif ( request . getTimesEntered ( ) > INT00 ) { \n\t\t\t\trequest . decreaseTimesEntered ( ) ; \n\t\t\t\t} \n\t\t\telse $F6954 ( requestsByThreadId , threadId ) return request ; \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public StandardSession getSessionByToken ( String token ) { \n\tStandardSession session ; \n\tsynchronized ( sessions ) { \n\t\tsession = ( StandardSession ) $F198 ( sessions , token ) ; \n\t\tif $F268 ( session ) { \n\t\t\tsession . updateLastAccessedTime ( ) ; \n\t\t\t} \n\t\t} \n\treturn session ; \n\t} \n"}, {"code": "private Session getCurrentSession $F2 { \n\tsynchronized ( requestsByThreadId ) { \n\t\tStandardRequest request = ( StandardRequest ) requestsByThreadId . get ( $F3534 ( Thread ) . hashCode ( ) ) ; \n\t\tif $F268 ( request ) { \n\t\t\treturn $F45262 ( request ) ; \n\t\t\t} \n\t\t} \n\t$F724 } \n"}, {"code": "public StandardSession createSession ( Properties defaultUserSettings ) { \n\tStandardSession session = new StandardSession $F2144 ( this , sessionTimeout , defaultUserSettings ) ; \n\tsynchronized ( sessions ) { \n\t\tsynchronized ( sessionsMirror ) { \n\t\t\tsessions . put ( $F530852 ( session ) , session ) ; \n\t\t\tsessionsMirror . put ( $F530852 ( session ) , session ) ; \n\t\t\t} \n\t\t} \n\t$F1292 ( System ) ( new LogEntry $F500 ( session ) ) ; \n\treturn session ; \n\t} \n"}, {"code": "private void destroySessionByToken ( String id ) { \n\t$F1292 ( System ) ( new LogEntry $F2821 ( id ) ) ; \n\tsynchronized ( sessions ) { \n\t\tsynchronized ( sessionsMirror ) { \n\t\t\tStandardSession session = ( StandardSession ) $F198 ( sessions , id ) ; \n\t\t\tif $F268 ( session ) { \n\t\t\t\tsession . onDestruction ( ) ; \n\t\t\t\t$F6953 ( sessions , id ) $F6953 ( sessionsMirror , id ) } \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void onPageEvent ( long officialTime ) { \n\tArrayList garbage = new ArrayList $F4371 ( sessionsMirror ) ; \n\tIterator i ; \n\tStandardSession session ; \n\tsynchronized ( sessionsMirror ) { \n\t\t$F71936 ( i , sessionsMirror ) ; \n\t\twhile $F11310 ( i ) { \n\t\t\tsession = ( StandardSession ) $F11311 ( i ) ; \n\t\t\tif ( $F381640 ( session ) ) $F529 ( garbage , session ) } \n\t\t} \n\t$F96963 ( i , garbage ) while $F11310 ( i ) { \n\t\tsession = ( StandardSession ) $F11311 ( i ) ; \n\t\t$F1292 ( System ) ( new LogEntry ( STRING00 + $F530852 ( session ) + STRING00 ) ) ; \n\t\tthis . destroySessionByToken ( $F530852 ( session ) ) ; \n\t\t} \n\t} \n"}, {"code": "public $F1372 void register ( AgentFactory $F1372 agentFactory ) { \n\tagentFactoriesByAgentId . put ( agentFactory . getAgentId ( ) , agentFactory ) ; \n\t} \n"}, {"code": "$F1 public void debug $F166319 ( msg , e ) { \n\tlog . logIfEnabled ( FQCN , Level . DEBUG , null , msg , e ) ; \n\t} \n"}, {"code": "$F1 public void debug ( String msg ) { \n\tlog . logIfEnabled ( FQCN , Level . DEBUG , null , msg , $F1981672 ) ; \n\t} \n"}, {"code": "$F1 public void error $F166319 ( msg , e ) { \n\tlog . logIfEnabled ( FQCN , Level . ERROR , null , msg , e ) ; \n\t} \n"}, {"code": "$F1 public void error ( String msg ) { \n\tlog . logIfEnabled ( FQCN , Level . ERROR , null , msg , $F1981672 ) ; \n\t} \n"}, {"code": "$F1 public void fatal ( String msg ) { \n\tlog . logIfEnabled ( FQCN , Level . FATAL , null , msg , $F1981672 ) ; \n\t} \n"}, {"code": "$F1 public void fatal $F166319 ( msg , e ) { \n\tlog . logIfEnabled ( FQCN , Level . FATAL , null , msg , e ) ; \n\t} \n"}, {"code": "public static $F5033 tagsFromCSV ( String tags ) { \n\t$F96338 ( list ) for ( $F2496 ( tag , tags ) ) $F529 ( list , tag ) return list ; \n\t} \n"}, {"code": "public static $F1372 $F58580 getArrayIterator $F81342 ( array ) { \n\tif $F44788 ( array ) $F24894 ( getEmptyIterator ) return new ArrayIterator $F1372 ( array ) ; \n\t} \n"}, {"code": "$F1 public int read $F9459 ( b , off , len ) throws IOException { \n\tint bytes = inner . read ( b , off , $F3753 ( Math , len , remaining ) ) ; \n\tif $F3730 ( bytes ) $F121422 ( remaining , bytes ) return bytes ; \n\t} \n"}, {"code": "$F1 public long skip ( long n ) throws IOException { \n\treturn n > INT00 ? ( long ) inner . skip ( $F3753 ( Math , n , remaining ) ) : INT00 ; \n\t} \n"}, {"code": "public void moveToEnd $F2 throws IOException { \n\tint bytes ; \n\twhile $F3730 ( remaining ) { \n\t\tbytes = ( int ) $F59903 ( inner , remaining ) ; \n\t\t$F119546 ( bytes ) remaining -= bytes ; \n\t\t} \n\t} \n"}, {"code": "public long toc $F2 { \n\t$F1299346 ( end ) difference = $F403580 ( end , start ) ; \n\treturn difference ; \n\t} \n"}, {"code": "public static boolean createPath $F11972 ( root , relativePathToCreate ) { \n\t$F2501 ( target , root , relativePathToCreate ) if $F11857 ( target ) { \n\t\treturn $F2553 ( target ) ; \n\t\t} \n\telse $F233 } \n"}, {"code": "public static File createPathAndGetFile $F11972 ( root , relativePathToCreate ) { \n\t$F2501 ( target , root , relativePathToCreate ) if $F11857 ( target ) { \n\t\tif ( $F2553 ( target ) ) $F356 ( target ) else { \n\t\t\tlog . warn ( $F11870 ( target ) ) ; \n\t\t\t$F724 } \n\t\t} \n\telse $F356 ( target ) } \n"}, {"code": "public static String getRelativePath $F24631 ( file , root ) { \n\tif $F112 ( root ) { \n\t\t$F194971 ( file ) } \n\t$F2201 ( file ) $F300984 ( rootAbsolutePath , root ) $F300984 ( fileAbsolutePath , file ) if $F19401 ( fileAbsolutePath , rootAbsolutePath ) { \n\t\t$F13100 ( ret , fileAbsolutePath , rootAbsolutePath ) if $F25224 ( ret ) $F4801 else $F356 ( ret ) } \n\telse $F356 ( fileAbsolutePath ) } \n"}, {"code": "public static boolean verifyDir ( File dir , Logger logger ) { \n\tif $F112 ( dir ) { \n\t\t$F15466 ( logger ) $F213 } \n\t$F300984 ( fileName , dir ) $F2272 ( fileName ) if $F11857 ( dir ) { \n\t\t$F265471 ( logger , fileName ) $F213 } \n\tif $F11928 ( dir ) { \n\t\t$F265471 ( logger , fileName ) $F213 } \n\tif $F125808 ( dir ) { \n\t\t$F265471 ( logger , fileName ) $F213 } \n\tif $F206605 ( dir ) { \n\t\t$F265471 ( logger , fileName ) $F213 } \n\t$F232 } \n"}, {"code": "public static String verifyReadFile ( File file ) { \n\t$F45711 ( file ) $F300984 ( absolutePath , file ) if $F11857 ( file ) $F74548 ( absolutePath ) if $F154394 ( file ) $F74548 ( absolutePath ) if $F125808 ( file ) $F74548 ( absolutePath ) $F724 } \n"}, {"code": "public static String verifyReadFile ( String filePath ) { \n\t$F45711 ( filePath ) $F2595 ( dir , filePath ) $F867 ( verifyReadFile , dir ) } \n"}, {"code": "public static void copyFromFileToFile $F24631 ( source , dest ) throws IOException { \n\ttry { \n\t\t$F1100 ( in , source ) $F80655 ( out , dest ) try { \n\t\t\t$F94326 ( canalFuente , in ) $F94326 ( canalDestino , out ) canalFuente . transferTo ( INT00 , $F3413 ( canalFuente ) , canalDestino ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new IOException ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t\t} \n\t\t$F377025 ( IOUtils , in , out ) } \n\tcatch ( FileNotFoundException e ) { \n\t\tthrow new IOException ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static void append $F24631 ( source , dest ) throws IOException { \n\ttry { \n\t\t$F1100 ( in , source ) $F544578 ( out , dest ) try { \n\t\t\t$F94326 ( canalFuente , in ) $F94326 ( canalDestino , out ) long count = canalDestino . transferFrom ( canalFuente , $F3413 ( canalDestino ) , $F3413 ( canalFuente ) ) ; \n\t\t\tcanalDestino . force ( true ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tthrow new IOException ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t\t} \n\t\tfinally { \n\t\t\t$F100004 ( IOUtils , in ) $F1109 ( out ) } \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tthrow new IOException ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static boolean copyFile $F24631 ( source , dest ) { \n\ttry { \n\t\t$F1100 ( in , source ) $F80655 ( out , dest ) try { \n\t\t\t$F94326 ( canalFuente , in ) $F94326 ( canalDestino , out ) $F57820 ( count ) $F45704 ( size , canalFuente ) while ( ( count += canalDestino . transferFrom ( $F77505 ( canalFuente , count , size ) ) ) < size ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tlog . error ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t\t$F213 } \n\t\t$F377025 ( IOUtils , in , out ) } \n\tcatch ( FileNotFoundException e ) { \n\t\tlog . error ( $F11870 ( source ) + $F11868 ( dest ) + STRING00 , e ) ; \n\t\t$F213 } \n\t$F232 } \n"}, {"code": "public static boolean moveFilesFromDirectoryToDirectory ( File origDir , File destDir , File baseDir ) { \n\tif $F11857 ( origDir ) $F1668 if $F11857 ( baseDir ) $F1668 $F11859 ( destDir ) File array [ ] = $F22047 ( origDir ) ; \n\tif $F268 ( array ) { \n\t\tfor ( File file : array ) { \n\t\t\t$F11895 ( destFile , destDir , file ) if $F15346 ( file ) $F5704 ( moveFilesFromDirectoryToDirectory , file , destFile , baseDir ) else { \n\t\t\t\t$F64960 ( copyFile , file , destFile ) } \n\t\t\t} \n\t\t} \n\telse $F1668 if $F540 ( deleteFilesOfDir , origDir ) $F60155 ( cleanParentDirectories , origDir , baseDir ) else $F1668 } \n"}, {"code": "public static boolean copyFilesFromDirectoryToDirectory $F24631 ( origDir , destDir ) { \n\tif $F11857 ( origDir ) $F1668 $F11859 ( destDir ) File array [ ] = $F22047 ( origDir ) ; \n\tif $F268 ( array ) { \n\t\tfor ( File file : array ) { \n\t\t\t$F11895 ( destFile , destDir , file ) if $F15346 ( file ) $F565 ( copyFilesFromDirectoryToDirectory , file , destFile ) else { \n\t\t\t\t$F64960 ( copyFile , file , destFile ) } \n\t\t\t} \n\t\t} \n\telse $F1668 $F232 } \n"}, {"code": "public static boolean deleteFilesOfDir ( File dir ) { \n\tif $F1313008 ( dir ) { \n\t\tlog . warn ( $F11870 ( dir ) ) ; \n\t\t$F213 } \n\t$F48974 ( succed ) File listFile [ ] = $F22047 ( dir ) ; \n\tfor ( File file : listFile ) { \n\t\tif $F11956 ( file ) { \n\t\t\tlog . warn ( $F11870 ( file ) ) ; \n\t\t\tsucced = false ; \n\t\t\t} \n\t\t} \n\treturn succed ; \n\t} \n"}, {"code": "public static boolean deleteDirRecursively ( File dir ) { \n\tif $F1313008 ( dir ) { \n\t\tlog . warn ( $F11870 ( dir ) ) ; \n\t\t$F213 } \n\t$F48974 ( succed ) File listFile [ ] = $F22047 ( dir ) ; \n\tfor ( File file : listFile ) { \n\t\tif $F15346 ( file ) $F890 ( deleteDirRecursively , file ) else { \n\t\t\tif $F11956 ( file ) { \n\t\t\t\tlog . warn ( $F11870 ( file ) ) ; \n\t\t\t\tsucced = false ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tif $F11956 ( dir ) { \n\t\tlog . warn ( $F11870 ( dir ) ) ; \n\t\tsucced = false ; \n\t\t} \n\treturn succed ; \n\t} \n"}, {"code": "public static void deleteChilsDirsIfEmpty ( File dir ) { \n\tFile childs [ ] = getChildDirs ( dir ) ; \n\tfor ( File file : childs ) { \n\t\tdeleteChilsDirsIfEmpty ( file ) ; \n\t\tif $F11956 ( file ) { \n\t\t\t$F187045 ( log , file ) } \n\t\t} \n\t} \n"}, {"code": "public static void cleanParentDirectories $F24631 ( currentPathFile , basePathFile ) { \n\tif $F112 ( currentPathFile ) $F223381 ( log ) if $F112 ( basePathFile ) $F223381 ( log ) try { \n\t\tif $F42058 ( basePathFile , currentPathFile ) { \n\t\t\tif ( $F2602 ( currentPathFile ) && $F51520 ( currentPathFile ) . length == INT00 ) { \n\t\t\t\tif $F3507 ( log ) { \n\t\t\t\t\tlog . debug ( $F11870 ( currentPathFile ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( $F11954 ( currentPathFile ) ) { \n\t\t\t\t\tcleanParentDirectories ( $F2533 ( currentPathFile ) , basePathFile ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tlog . error ( $F11870 ( currentPathFile ) + $F11868 ( basePathFile ) + STRING00 ) ; \n\t\t$F254 } \n\t} \n"}, {"code": "public static boolean esPDF ( File file ) { \n\t$F2233 ( ret ) FileReader reader = null ; \n\ttry { \n\t\t$F29429 ( reader , file ) ; \n\t\t$F85664 ( buffer ) $F1361934 ( reader , buffer ) ; \n\t\tret = ( $F5755 ( $F6258 ( String , buffer ) ) ) ; \n\t\t} \n\tcatch ( FileNotFoundException e ) { \n\t\tlog . error ( $F11869 ( file ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlog . error ( $F11869 ( file ) ) ; \n\t\t} \n\tfinally { \n\t\ttry $F2453 ( reader ) catch ( IOException e ) { \n\t\t\tlog . error ( $F11869 ( file ) ) ; \n\t\t\t} \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public static $F18352 listDirs ( File file ) { \n\t$F3446 ( file , EMPTY_FILE_LIST ) File ret [ ] = $F22689 ( file , DIR_FILTER ) ; \n\tif $F112 ( ret ) $F356 ( EMPTY_FILE_LIST ) else $F356 ( ret ) } \n"}, {"code": "public static $F18352 listFiles ( File file ) { \n\t$F3446 ( file , EMPTY_FILE_LIST ) File ret [ ] = $F22689 ( file , FILE_FILTER ) ; \n\tif $F112 ( ret ) $F356 ( EMPTY_FILE_LIST ) else $F356 ( ret ) } \n"}, {"code": "public static boolean iterateOnChildDirs ( File parentDir , FileIterator iterator ) { \n\tif $F112 ( parentDir ) { \n\t\t$F16516 ( log ) $F232 } \n\t$F8494 ( message , verifyReadDir , parentDir ) if $F268 ( message ) { \n\t\t$F28507 ( log , message ) $F232 } \n\tFile childs [ ] = $F22689 ( parentDir , DIR_FILTER ) ; \n\tif $F112 ( childs ) { \n\t\tlog . info ( $F11870 ( parentDir ) ) ; \n\t\t$F232 } \n\telse { \n\t\tfor ( File child : childs ) { \n\t\t\tboolean iteratorRet = iterator . iterate ( child ) ; \n\t\t\tif $F385413 ( iteratorRet ) { \n\t\t\t\tif $F3507 ( log ) { \n\t\t\t\t\tlog . debug ( $F11870 ( parentDir ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F213 } \n\t\t\t} \n\t\t$F232 } \n\t} \n"}, {"code": "public static boolean canReadFile ( String abstolutePath ) { \n\t$F2595 ( file , abstolutePath ) if ( $F6713 ( file ) && $F11927 ( file ) ) $F233 else $F1668 } \n"}, {"code": "public static boolean canReadFile ( File file ) { \n\tif ( file != null && $F6713 ( file ) && $F11927 ( file ) ) $F233 else $F1668 } \n"}, {"code": "public static boolean canWriteFile ( File file ) { \n\tif ( file != null && $F13145 ( file ) && $F11927 ( file ) ) $F233 else $F1668 } \n"}, {"code": "public static String getExtension ( String fileName ) { \n\tif $F112 ( fileName ) $F2200 else { \n\t\t$F6990 ( number , fileName ) if $F9869 ( number ) { \n\t\t\treturn $F142893 ( fileName , number ) ; \n\t\t\t} \n\t\telse $F2200 } \n\t} \n"}, {"code": "public static String getFileNameWithoutExtenxion ( String fileName ) { \n\tif $F112 ( fileName ) $F2200 else { \n\t\t$F6990 ( number , fileName ) if $F9869 ( number ) $F6112 ( fileName , number ) else $F356 ( fileName ) } \n\t} \n"}, {"code": "public static String getFileName ( String fileNameAndPath ) { \n\t$F2201 ( fileNameAndPath ) String fileSeparator ; \n\tif $F23577 ( fileNameAndPath ) $F24706 ( fileSeparator ) else $F24706 ( fileSeparator ) $F57428 ( lastIndexOf , fileNameAndPath , fileSeparator ) if $F2523 ( lastIndexOf ) $F356 ( fileNameAndPath ) else { \n\t\treturn $F142893 ( fileNameAndPath , lastIndexOf ) ; \n\t\t} \n\t} \n"}, {"code": "public static String getFilePath ( String fileNameAndPath ) { \n\t$F2201 ( fileNameAndPath ) String fileSeparator ; \n\tif $F23577 ( fileNameAndPath ) $F24706 ( fileSeparator ) else $F24706 ( fileSeparator ) $F57428 ( lastIndexOf , fileNameAndPath , fileSeparator ) if $F2523 ( lastIndexOf ) $F4801 else $F6112 ( fileNameAndPath , lastIndexOf ) } \n"}, {"code": "public String getWordCommand $F2 { \n\t$F99796 ( cachedWordCommand ) if ( ! isWordCommand ( ) || $F662090 ( getValue ) < INT00 ) $F724 cachedWordCommand = getValue ( ) . substring ( INT00 ) ; \n\treturn cachedWordCommand ; \n\t} \n"}, {"code": "public boolean isCharCommand ( final ICmdLineArg $F45 argDef ) { \n\treturn argDef . getKeychar ( ) != null && isCharCommand ( ) && ( charCommand ( ) == argDef . getKeychar ( ) . charValue ( ) ) ; \n\t} \n"}, {"code": "public boolean isGroupEnd $F2 { \n\tif ( $F46454 ( getValue ) || isCommand ( ) || $F662090 ( getValue ) != INT00 ) $F213 return getValue ( ) . charAt ( INT00 ) == STRING00 || getValue ( ) . charAt ( INT00 ) == STRING00 ; \n\t} \n"}, {"code": "public boolean isGroupStart $F2 { \n\tif ( $F46454 ( getValue ) || isCommand ( ) || $F662090 ( getValue ) != INT00 ) $F213 return getValue ( ) . charAt ( INT00 ) == STRING00 || getValue ( ) . charAt ( INT00 ) == STRING00 ; \n\t} \n"}, {"code": "public boolean isIncludeFile $F2 { \n\tif ( $F108358 ( value ) && CmdLine . INCLUDE_FILE_PREFIX . charAt ( INT00 ) == $F20069 ( value ) ) $F232 $F213 } \n"}, {"code": "public boolean isParserDirective $F2 { \n\tif ( $F46454 ( getValue ) || isCommand ( ) || $F662090 ( getValue ) == INT00 ) $F213 if ( getValue ( ) . charAt ( INT00 ) == STRING00 ) $F232 if ( $F662090 ( getValue ) == INT00 && getValue ( ) . charAt ( INT00 ) == STRING00 ) $F232 $F213 } \n"}, {"code": "public boolean isWordCommand ( final ICmdLineArg $F45 argDef ) { \n\tif ( $F2454152 ( argDef ) == null || isUsed ( ) || ! isWordCommand ( ) || $F662090 ( getValue ) < INT00 ) $F213 if ( $F662090 ( getWordCommand ) == $F2454152 ( argDef ) . length ( ) ) { \n\t\tif ( getWordCommand ( ) . equalsIgnoreCase ( $F2454152 ( argDef ) ) ) $F232 } \n\telse if ( $F662090 ( getWordCommand ) < $F2454152 ( argDef ) . length ( ) ) { \n\t\tif ( $F2454152 ( argDef ) . substring ( INT00 , $F662090 ( getWordCommand ) ) . equalsIgnoreCase ( getWordCommand ( ) ) ) $F232 if ( argDef . isCamelCapsAllowed ( ) ) if ( argDef . getCamelCaps ( ) != null ) if ( argDef . getCamelCaps ( ) . equalsIgnoreCase ( getWordCommand ( ) ) ) $F232 if ( argDef . isMetaphoneAllowed ( ) ) if ( argDef . getMetaphone ( ) != null ) if ( new Metaphone $F2 . metaphone ( getWordCommand ( ) ) . equals ( argDef . getMetaphone ( ) ) ) $F232 } \n\t$F213 } \n"}, {"code": "public String remainderValue $F2 { \n\tif $F560 ( isCharCommand ) { \n\t\tif ( $F662090 ( getValue ) == INT00 ) $F724 return getValue ( ) . substring ( INT00 ) ; \n\t\t} \n\tif $F560 ( isWordCommand ) $F724 $F24894 ( getValue ) } \n"}, {"code": "public void removeCharCommand $F2 { \n\t$F196709 ( isCharCommand ) if $F46455 ( getValue ) $F254 if ( $F662090 ( getValue ) < INT00 ) $F254 if ( $F662090 ( getValue ) == INT00 ) { \n\t\t$F21273 ( setValue ) $F31376 ( setUsed ) $F254 } \n\tsetValue ( STRING00 + getValue ( ) . substring ( INT00 ) ) ; \n\t} \n"}, {"code": "public Option [ ] getOptions $F2 throws IllegalAccessException , InvocationTargetException , InstantiationException { \n\tif $F112 ( options ) { \n\t\tList $F44783 options = new ArrayList $F44783 $F2 ; \n\t\tConfiguration config = getMethod ( ) . getAnnotation ( $F53706 ) ; \n\t\tfor ( Class < ? extends CompositeOption > option : config . extend ( ) ) { \n\t\t\toptions . addAll ( Arrays . asList ( $F6892 ( option ) . getOptions ( ) ) ) ; \n\t\t\t} \n\t\toptions . addAll ( Arrays . asList ( ( Option [ ] ) $F1998574 ( getMethod ) ( configInstance ) ) ) ; \n\t\tthis . options = options . toArray ( new Option $F31920 ( options ) ) ; \n\t\t} \n\treturn options ; \n\t} \n"}, {"code": "private static IRating createRatingFromActivity ( JSONObject verb ) throws JSONException { \n\tRating rating = new Rating $F2 ; \n\t$F11482 ( measure , verb ) $F90659 ( measure ) rating . setMin ( $F218337 ( measure ) ) ; \n\trating . setMax ( $F218337 ( measure ) ) ; \n\trating . setRating ( $F218337 ( measure ) ) ; \n\treturn rating ; \n\t} \n"}, {"code": "private static IRatings createRatingsFromActivity ( JSONObject verb ) throws JSONException { \n\tRatings ratings = new Ratings $F2 ; \n\t$F11482 ( measure , verb ) $F90659 ( measure ) ratings . setMin ( $F218337 ( measure ) ) ; \n\tratings . setMax ( $F218337 ( measure ) ) ; \n\tratings . setAverage ( $F977264 ( measure ) ) ; \n\tratings . setSample ( $F218337 ( measure ) ) ; \n\treturn ratings ; \n\t} \n"}, {"code": "private static IReview createReviewFromActivity ( JSONObject activity ) throws JSONException { \n\tReview review = new Review $F2 ; \n\treview . setComment ( $F2303 ( activity ) ) ; \n\treturn review ; \n\t} \n"}, {"code": "public final boolean between ( $F197020 UtcTime begin , $F197020 UtcTime end ) { \n\treturn ( time >= begin . time ) && ( time <= end . time ) ; \n\t} \n"}, {"code": "$F19091891 public Clob downloadMetaModel $F2 { \n\tfinal Collection < ObjectSpecification > specifications = specificationLoader . allSpecifications ( ) ; \n\tfinal List < MetaModelRow > $F57859 ( rows , Lists ) ; \n\tfor ( final ObjectSpecification spec : specifications ) { \n\t\t$F184044 ( exclude , spec ) final List < ObjectAssociation > properties = spec . getAssociations ( Contributed . EXCLUDED , ObjectAssociation . Filters . PROPERTIES ) ; \n\t\tfor ( final ObjectAssociation property : properties ) { \n\t\t\tfinal OneToOneAssociation otoa = ( OneToOneAssociation ) property ; \n\t\t\t$F184044 ( exclude , otoa ) rows . add ( new MetaModelRow ( spec , otoa ) ) ; \n\t\t\t} \n\t\tfinal List < ObjectAssociation > associations = spec . getAssociations ( Contributed . EXCLUDED , ObjectAssociation . Filters . COLLECTIONS ) ; \n\t\tfor ( final ObjectAssociation collection : associations ) { \n\t\t\tfinal OneToManyAssociation otma = ( OneToManyAssociation ) collection ; \n\t\t\t$F184044 ( exclude , otma ) rows . add ( new MetaModelRow ( spec , otma ) ) ; \n\t\t\t} \n\t\tfinal List < ObjectAction > actions = spec . getObjectActions ( Contributed . INCLUDED ) ; \n\t\tfor ( final ObjectAction action : actions ) { \n\t\t\t$F184044 ( exclude , action ) rows . add ( new MetaModelRow ( spec , action ) ) ; \n\t\t\t} \n\t\t} \n\t$F5223 ( Collections , rows ) $F102635 ( buf ) buf . append ( MetaModelRow . header ( ) ) . append ( STRING00 ) ; \n\tfor ( final MetaModelRow row : rows ) { \n\t\tbuf . append ( row . asTextCsv ( ) ) . append ( STRING00 ) ; \n\t\t} \n\treturn new Clob ( STRING00 , mimeTypeTextCsv , $F797 ( buf ) . toCharArray ( ) ) ; \n\t} \n"}, {"code": "$F19091891 public void refreshServices $F2 { \n\tfinal Collection < ObjectSpecification > specifications = Lists . newArrayList ( specificationLoader . allSpecifications ( ) ) ; \n\tfor ( final ObjectSpecification objectSpec : specifications ) { \n\t\tif ( objectSpec . isService ( ) ) { \n\t\t\tspecificationLoader . invalidateCache ( objectSpec . getCorrespondingClass ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public Clob downloadLayout $F80574 ( domainObject ) { \n\tfinal ObjectAdapter $F22378 ( adapterFor , adapterManager , domainObject ) ; \n\tfinal ObjectSpecification objectSpec = adapterFor . getSpecification ( ) ; \n\tfinal LayoutJsonExporter exporter = new LayoutJsonExporter $F2 ; \n\tfinal String json = exporter . asJson ( objectSpec ) ; \n\treturn new Clob ( objectSpec . getShortIdentifier ( ) + STRING00 , mimeTypeApplicationJson , json ) ; \n\t} \n"}, {"code": "$F19091891 public Blob downloadLayouts $F2 { \n\tfinal LayoutJsonExporter exporter = new LayoutJsonExporter $F2 ; \n\tfinal Collection < ObjectSpecification > allSpecs = specificationLoader . allSpecifications ( ) ; \n\tfinal Collection < ObjectSpecification > domainObjectSpecs = Collections2 . filter ( allSpecs , new Predicate < ObjectSpecification > $F2 { \n\t\t$F1 public boolean apply ( final ObjectSpecification input ) { \n\t\t\treturn $F1418229 ( input ) && ! input . isService ( ) && ! input . isValue ( ) && ! input . isParentedOrFreeCollection ( ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\ttry { \n\t\t$F325745 ( baos ) final ZipOutputStream zos = $F474200 ( baos ) ; \n\t\tfinal OutputStreamWriter $F2708674 ( writer , zos ) ; \n\t\tfor ( final ObjectSpecification objectSpec : domainObjectSpecs ) { \n\t\t\tzos . putNextEntry ( new ZipEntry $F540 ( zipEntryNameFor , objectSpec ) ) ; \n\t\t\twriter . write ( exporter . asJson ( objectSpec ) ) ; \n\t\t\t$F6369 ( writer ) $F11940 ( zos ) } \n\t\t$F1109 ( writer ) return new Blob ( STRING00 , mimeTypeApplicationZip , $F21499 ( baos ) ) ; \n\t\t} \n\tcatch ( final IOException ex ) { \n\t\tthrow new FatalException $F2756 ( ex ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected $F27567 resolve ( String fqtn ) throws Exception { \n\tStringTokenizer tokenizer = new StringTokenizer ( $F16411 ( fqtn ) ) ; \n\t$F201502 ( groupId , tokenizer ) $F201502 ( templateId , tokenizer ) $F201502 ( version , tokenizer ) Dependency dependency = new Dependency ( new DefaultArtifact ( $F74028 ( groupId , templateId , version ) ) , null ) ; \n\tCollectRequest collectRequest = new CollectRequest $F2 ; \n\tcollectRequest . setRoot ( dependency ) ; \n\tcollectRequest . addRepository ( local ) ; \n\tcollectRequest . addRepository ( central ) ; \n\tRepositorySystemSession session = newSession ( repoSystem ) ; \n\tDependencyNode node = repoSystem . collectDependencies ( session , collectRequest ) . getRoot ( ) ; \n\tDependencyRequest dependencyRequest = new DependencyRequest $F10548 ( node ) ; \n\trepoSystem . resolveDependencies ( session , dependencyRequest ) ; \n\tPreorderNodeListGenerator nlg = new PreorderNodeListGenerator $F2 ; \n\t$F14605 ( node , nlg ) return $F31492 ( nlg ) ; \n\t} \n"}, {"code": "private static RepositorySystem newRepositorySystem $F2 { \n\tMavenServiceLocator locator = new MavenServiceLocator $F2 ; \n\tlocator . setServices ( WagonProvider . class , new ManualWagonProvider $F2 ) ; \n\tlocator . addService ( RepositoryConnectorFactory . class , WagonRepositoryConnectorFactory . class ) ; \n\treturn locator . getService ( RepositorySystem . class ) ; \n\t} \n"}, {"code": "public void parse ( InputStream in ) throws $F287380 { \n\tString input = new String ( StreamSupport . absorbInputStream ( in ) ) ; \n\tparse ( input ) ; \n\t} \n"}, {"code": "public void parse $F1693 ( xmlInput , strict ) throws ParseException { \n\t$F24434 ( xmlInput ) ArrayList $F48722 ( splitContents , split , xmlInput , interpreteAsXHTML ) ; \n\t$F564 ( build , splitContents , interpreteAsXHTML ) $F1987 ( nodeCount ) $F989674 ( contentsToRemove ) $F680835 ( i , contents ) while $F11310 ( i ) { \n\t\t$F58862 ( element , i ) if $F1513914 ( element ) $F16091 ( nodeCount ) else if ( element instanceof Tag ) { \n\t\t\tTag tag = ( Tag ) element ; \n\t\t\tif ( ! ( $F511 ( tag ) == Tag . INSTRUCTION_TAG || $F511 ( tag ) == Tag . COMMENT_TAG ) ) { \n\t\t\t\tthrow new ParseException ( STRING00 + StringSupport . condenseWhitespace ( StringSupport . trim ( $F797 ( element ) , INT00 , STRING00 ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tif ( $F100248 ( element ) . length ( ) > INT00 ) $F529 ( contentsToRemove , element ) } \n\t\tif $F3730 ( nodeCount ) { \n\t\t\tthrow new ParseException ( STRING00 + StringSupport . condenseWhitespace ( StringSupport . trim ( $F797 ( element ) , INT00 , STRING00 ) ) ) ; \n\t\t\t} \n\t\t} \n\t$F96963 ( i , contentsToRemove ) while $F11310 ( i ) { \n\t\tcontents . remove ( $F11311 ( i ) ) ; \n\t\t} \n\t} \n"}, {"code": "private synchronized boolean isUsed $F71004 ( candidate ) { \n\t$F15610 ( LOG , candidate ) LOG . debug ( STRING00 + $F6948 ( m_usedServerIds , candidate ) ) ; \n\treturn $F8674 ( m_usedServerIds , candidate ) ; \n\t} \n"}, {"code": "private $F57897 getServerIdToTry $F2 { \n\tif $F6132 ( m_serverIdsToTry ) { \n\t\tfinal $F25622 moreCandidates = getMoreCandidates ( ) ; \n\t\tif $F6132 ( moreCandidates ) { \n\t\t\tm_sleepBeforeTryingToGetMoreCandidates = true ; \n\t\t\treturn ( new NoneImpl $F1372 $F2 ) ; \n\t\t\t} \n\t\telse { \n\t\t\tm_sleepBeforeTryingToGetMoreCandidates = false ; \n\t\t\t$F308 ( m_serverIdsToTry , moreCandidates ) return ( new SomeImpl $F1372 ( $F18644 ( m_serverIdsToTry ) ) ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\treturn ( new SomeImpl $F1372 ( $F18644 ( m_serverIdsToTry ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "private $F25622 getMoreCandidates $F2 { \n\tfinal $F17821 unusedPredicate = new UnusedServer $F2 ; \n\tfinal $F25622 servers = new $F398215 $F2 ; \n\t$F1987 ( tries ) while ( $F384 ( servers ) && $F2523 ( tries ) ) { \n\t\t$F45360 ( LOG ) if ( m_sleepBeforeTryingToGetMoreCandidates ) { \n\t\t\t$F45360 ( LOG ) ThreadUtils . safeSleep ( INT00 ) ; \n\t\t\t} \n\t\telse if ( ! m_firstRun ) { \n\t\t\t$F45360 ( LOG ) ThreadUtils . safeSleep ( INT00 ) ; \n\t\t\t} \n\t\tm_firstRun = false ; \n\t\tfinal $F25622 candidates = m_candidateProvider . getCandidates ( ) ; \n\t\t$F45360 ( LOG ) final $F25622 unusedCandidates = m_collectionUtils . select ( candidates , unusedPredicate ) ; \n\t\t$F308 ( servers , unusedCandidates ) ++ tries ; \n\t\t} \n\t$F432872 ( LOG , servers ) return servers ; \n\t} \n"}, {"code": "private void establish $F71004 ( serverId ) { \n\t$F15610 ( LOG , serverId ) final ConnectionMaintainerListener < ServerT > listener = new MyListener ( serverId ) ; \n\tsynchronized ( this ) { \n\t\t++ m_outstanding ; \n\t\t$F528 ( m_usedServerIds , serverId ) } \n\tm_establisher . establish ( serverId , listener ) ; \n\t} \n"}, {"code": "private void tryConnecting $F2 { \n\t$F45360 ( LOG ) final $F57897 optionalServerIdToTry = getServerIdToTry ( ) ; \n\tfinal OptionalVisitor < Void , T > serverToTryVisitor = new OptionalVisitor < Void , T > $F2 { \n\t\tpublic Void visitNone ( final None $F1372 none ) $F45361 ( LOG ) public Void visitSome ( final Some $F1372 some ) { \n\t\t\t$F45360 ( LOG ) establish ( $F3051101 ( some ) ) ; \n\t\t\t$F724 } \n\t\t} \n\t; \n\t$F14605 ( optionalServerIdToTry , serverToTryVisitor ) } \n"}, {"code": "public $F1372 String write ( final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) throws IOException { \n\t$F544121 ( descriptor ) $F6364 ( out ) JsonGenerator generator = factory . createGenerator ( out ) ; \n\tif ( indent ) { \n\t\tgenerator . useDefaultPrettyPrinter ( ) ; \n\t\t} \n\t$F5605 ( write , object , descriptor , generator ) $F6369 ( generator ) $F1226 ( out ) } \n"}, {"code": "public $F1372 void write ( final OutputStream stream , final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) throws IOException { \n\t$F544121 ( stream ) $F544121 ( descriptor ) JsonGenerator generator = factory . createGenerator ( stream ) ; \n\tif ( indent ) { \n\t\tgenerator . useDefaultPrettyPrinter ( ) ; \n\t\t} \n\t$F5605 ( write , object , descriptor , generator ) $F6369 ( generator ) } \n"}, {"code": "public $F1372 void write ( final PrintWriter writer , final T object , final DataTypeDescriptor $F1372 descriptor , final boolean indent ) throws IOException { \n\t$F544121 ( writer ) $F544121 ( descriptor ) JsonGenerator generator = factory . createGenerator ( writer ) ; \n\tif ( indent ) { \n\t\tgenerator . useDefaultPrettyPrinter ( ) ; \n\t\t} \n\t$F5605 ( write , object , descriptor , generator ) $F6369 ( generator ) } \n"}, {"code": "public $F1372 T read ( final String s , final DataTypeDescriptor $F1372 descriptor ) throws Exception { \n\t$F544121 ( descriptor ) $F90659 ( s ) JsonParser parser = factory . createParser ( s ) ; \n\t$F4282 ( read , parser , descriptor ) } \n"}, {"code": "public $F1372 T read ( final InputStream stream , final DataTypeDescriptor $F1372 descriptor ) throws Exception { \n\t$F544121 ( stream ) $F544121 ( descriptor ) JsonParser parser = factory . createParser ( stream ) ; \n\t$F4282 ( read , parser , descriptor ) } \n"}, {"code": "public $F1372 T read ( final Reader reader , final DataTypeDescriptor $F1372 descriptor ) throws Exception { \n\t$F544121 ( reader ) $F544121 ( descriptor ) JsonParser parser = factory . createParser ( reader ) ; \n\t$F4282 ( read , parser , descriptor ) } \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\tObject value = $F124779 ( content , scope , propertyPath ) ; \n\t$F2201 ( value ) if ( value instanceof URL ) { \n\t\tvalue = ( ( URL ) value ) . toExternalForm ( ) ; \n\t\t} \n\tif $F38436 ( value ) { \n\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t} \n\treturn new AttrImpl ( STRING00 , ( String ) value ) ; \n\t} \n"}, {"code": "public static Either $F4356 getBuildVersion $F2 { \n\tClass clazz = BuildNumberCommand . class ; \n\tString className = $F587604 ( clazz ) ; \n\tString classPath = $F7620 ( clazz , className ) . toString ( ) ; \n\tif $F12498 ( classPath ) { \n\t\treturn Either . right ( STRING00 ) ; \n\t\t} \n\tString manifestPath = classPath . substring ( INT00 , $F21451 ( classPath ) ) + STRING00 ; \n\ttry { \n\t\tManifest manifest = new Manifest ( $F10819 ( manifestPath ) . openStream ( ) ) ; \n\t\tString build = $F4973 ( manifest ) ( BUILD_VERSION ) ; \n\t\tif $F112 ( build ) { \n\t\t\treturn Either . right ( $F19001 ( String , BUILD_VERSION , MANIFEST ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn Either . left ( build ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException e ) { \n\t\treturn Either . right ( $F19001 ( String , manifestPath , e ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static synchronized Lemmatizer getLemmatizer ( $F410888 Language language ) { \n\tif $F28586 ( lemmatizerMap , language ) { \n\t\tif ( Config . hasProperty ( STRING00 , language ) ) { \n\t\t\tLemmatizer lemmatizer = $F2912357 ( Config , language ) . as ( Lemmatizer . class ) ; \n\t\t\t$F2725 ( lemmatizerMap , language , lemmatizer ) } \n\t\telse { \n\t\t\tlemmatizerMap . put ( language , NoOptLemmatizer . INSTANCE ) ; \n\t\t\t} \n\t\t} \n\t$F30910 ( lemmatizerMap , language ) } \n"}, {"code": "$F1 public void inject ( Configuration config ) { \n\tObject $F201437 ( context , config ) ; \n\tif ( ContextUtils . isActivity ( context ) ) { \n\t\tLayout layout = TypeUtils . getAnnotation ( context , Layout . class ) ; \n\t\tif $F268 ( layout ) ContextUtils . asActivity ( context ) . setContentView ( $F11145 ( layout ) ) ; \n\t\t} \n\t$F1105070 fields = config . getInjectionTargets ( InjectionCategory . LAYOUT ) ; \n\tContext baseContext = ContextUtils . discover ( context ) ; \n\tfor ( Field field : fields ) { \n\t\ttry { \n\t\t\tif $F498138 ( field ) $F10869 ( field ) int id = field . getAnnotation ( Layout . class ) . value ( ) ; \n\t\t\tView layoutView = $F1808214 ( LayoutInflater , baseContext ) ( id , null ) ; \n\t\t\t$F52836 ( field , context , layoutView ) } \n\t\tcatch ( Exception e ) { \n\t\t\tLog . e ( $F40175 ( getClass ) , STRING00 , e ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static $F1975 generateKey $F2 throws GeneralSecurityException { \n\t$F75347 ( keyGenerator , KeyGenerator , KEY_ALGORITHM ) keyGenerator . init ( INT00 ) ; \n\tSecretKey secretKey = keyGenerator . generateKey ( ) ; \n\treturn $F120056 ( secretKey ) ; \n\t} \n"}, {"code": "public static String encrypt $F234476 ( data , key ) { \n\ttry { \n\t\tKey k = toSecretKey ( key ) ; \n\t\t$F75347 ( cipher , Cipher , CIPHER_ALGORITHM ) $F382251 ( cipher , Cipher , k ) $F182281 ( toByteArray , data ) $F1975 $F380233 ( encrypted , cipher , toByteArray ) ; \n\t\treturn Hex . encodeHexString ( encrypted ) ; \n\t\t} \n\tcatch ( GeneralSecurityException e ) $F52053 ( e ) } \n"}, {"code": "public static String decrypt $F234476 ( data , key ) { \n\ttry { \n\t\tKey k = toSecretKey ( key ) ; \n\t\t$F75347 ( cipher , Cipher , CIPHER_ALGORITHM ) cipher . init ( Cipher . DECRYPT_MODE , k ) ; \n\t\t$F1975 toByteArray = Hex . decodeHex ( $F17783 ( data ) ) ; \n\t\t$F1975 $F380233 ( decrypted , cipher , toByteArray ) ; \n\t\treturn $F136017 ( decrypted ) ; \n\t\t} \n\tcatch ( GeneralSecurityException e ) $F52053 ( e ) $F477294 ( e ) catch ( DecoderException e ) $F11568 ( e ) } \n"}, {"code": "public String getDocUrl ( String className ) { \n\tif $F28586 ( cache , className ) { \n\t\t$F8494 ( url , resolveDocByClass , className ) $F24580 ( url , resolveDocByPackage , className ) $F2725 ( cache , className , url ) } \n\t$F30910 ( cache , className ) } \n"}, {"code": "private String resolveDocByClass ( String className ) { \n\t$F2090 ( urlBase , doc , className ) if $F268 ( urlBase ) { \n\t\treturn urlBase + $F4118 ( className ) + STRING00 ; \n\t\t} \n\t$F724 } \n"}, {"code": "private String resolveDocByPackage ( String className ) { \n\t$F6990 ( index , className ) String packageName = className ; \n\twhile $F3730 ( index ) { \n\t\t$F19737 ( packageName , index ) $F2090 ( urlBase , doc , packageName ) if $F268 ( urlBase ) { \n\t\t\treturn urlBase + $F4118 ( className ) + STRING00 ; \n\t\t\t} \n\t\t$F83715 ( index , packageName ) } \n\t$F724 } \n"}, {"code": "public void encode ( BsonWriter writer , T value , EncoderContext encoderContext ) { \n\t$F6261680 ( writer ) $F5605 ( encodeVariables , writer , value , encoderContext ) $F688878 ( writer ) } \n"}, {"code": "$F10880 protected void encode ( BsonWriter writer , $F37418 ( coll ) , EncoderContext encoderContext ) { \n\t$F309796 ( writer ) $F11424 $F9005 ( iterator , coll ) ; \n\twhile $F11310 ( iterator ) { \n\t\t$F604505 ( next , iterator ) if $F112 ( next ) $F2077079 ( writer ) else { \n\t\t\tCodec $F283890 ( codec , registry , next ) ; \n\t\t\tencoderContext . encodeWithChildContext ( codec , writer , next ) ; \n\t\t\t} \n\t\t} \n\t$F302921 ( writer ) } \n"}, {"code": "$F1 public T decode ( BsonReader reader , DecoderContext decoderContext ) { \n\t$F83993 ( instance , instantiate ) reader . readStartDocument ( ) ; \n\twhile ( reader . readBsonType ( ) != BsonType . END_OF_DOCUMENT ) { \n\t\tString fieldName = reader . readName ( ) ; \n\t\tBsoneeBaseSetter $F1372 $F199 ( bsoneeBaseSetter , settersByName , fieldName ) ; \n\t\tif $F268 ( bsoneeBaseSetter ) { \n\t\t\t$F33048 ( bsoneeBaseSetter , instance , reader , decoderContext ) } \n\t\telse { \n\t\t\t$F38536 ( logger , fieldName ) $F462756 ( reader ) } \n\t\t} \n\treader . readEndDocument ( ) ; \n\treturn instance ; \n\t} \n"}, {"code": "public static $F1105070 getInstanceFields ( $F2613 ( clazz ) , Filter $F278543 filter ) { \n\treturn getFields ( clazz , new And $F278543 ( filter != null ? filter : new True $F278543 $F2 , new Not $F278543 ( new IsStatic $F278543 $F2 ) , new Not $F278543 ( new IsOverridden $F278543 $F2 ) ) ) ; \n\t} \n"}, {"code": "public static $F68542 getInstanceMethods ( $F2613 ( clazz ) , Filter $F68541 filter ) { \n\treturn getMethods ( clazz , new And $F68541 ( filter != null ? filter : new True $F68541 $F2 , new Not $F68541 ( new IsStatic $F68541 $F2 ) , new Not $F68541 ( new IsOverridden $F68541 $F2 ) ) ) ; \n\t} \n"}, {"code": "public static $F1105070 getFields ( $F2613 ( clazz ) , Filter $F278543 filter ) { \n\t$F1105070 fields = new HashSet $F278543 $F2 ; \n\t$F7909 ( cursor , clazz ) while ( $F993157 ( cursor ) ) { \n\t\tfields . addAll ( Filter . apply ( filter , $F243263 ( cursor ) ) ) ; \n\t\t$F7916 ( cursor ) } \n\treturn fields ; \n\t} \n"}, {"code": "public static $F68542 getMethods ( $F2613 ( clazz ) , Filter $F68541 filter ) { \n\t$F68542 methods = new HashSet $F68541 $F2 ; \n\t$F7909 ( cursor , clazz ) while ( $F993157 ( cursor ) ) { \n\t\tmethods . addAll ( Filter . apply ( filter , $F159647 ( cursor ) ) ) ; \n\t\t$F7916 ( cursor ) } \n\treturn methods ; \n\t} \n"}, {"code": "public static Set $F2476882 getMembers ( $F2613 ( clazz ) , Filter $F2476882 filter ) { \n\tSet $F2476882 members = new HashSet $F2476882 $F2 ; \n\t$F7909 ( cursor , clazz ) while ( $F993157 ( cursor ) ) { \n\t\tmembers . addAll ( Filter . apply ( filter , $F243263 ( cursor ) ) ) ; \n\t\tmembers . addAll ( Filter . apply ( filter , $F159647 ( cursor ) ) ) ; \n\t\t$F7916 ( cursor ) } \n\treturn members ; \n\t} \n"}, {"code": "public BigDecimal append ( BigDecimal s1 , BigDecimal s2 ) { \n\t$F37371 ( s1 , s2 ) $F96381 ( s1 , s2 ) } \n"}, {"code": "public static String getPackageName $F2614 ( cls ) { \n\tPackage pkg ; \n\tString str ; \n\tint pos ; \n\t$F544121 ( cls ) if ( ( $F38264 ( pkg , cls ) ) != null ) $F2804 ( pkg ) $F105043 ( str , cls ) if ( ( $F6988 ( pos , str ) ) >= INT00 ) $F6111 ( str , pos ) $F3956 } \n"}, {"code": "public static String getPackageName ( Object obj ) { \n\t$F544121 ( obj ) return $F75709 ( getPackageName , obj ) ; \n\t} \n"}, {"code": "protected static StringBuilder appendResourcePathPrefixFor $F22208 ( sb , pkgName ) { \n\t$F544121 ( pkgName ) if $F112 ( sb ) $F162202 ( sb , pkgName ) ; \n\t$F1218 ( sb ) if $F43975 ( pkgName ) return sb ; \n\tsb . append ( $F4118 ( pkgName ) ) ; \n\tpkgName = null ; \n\t$F1218 ( sb ) return sb ; \n\t} \n"}, {"code": "protected static StringBuilder appendResourcePathPrefixFor ( StringBuilder sb , $F2613 ( cls ) ) { \n\t$F544121 ( cls ) $F39125 ( appendResourcePathPrefixFor , sb , getPackageName , cls ) } \n"}, {"code": "protected static StringBuilder appendResourcePathPrefixFor ( StringBuilder sb , Object obj ) { \n\t$F544121 ( obj ) $F39125 ( appendResourcePathPrefixFor , sb , getPackageName , obj ) } \n"}, {"code": "public static String getResourcePathFor ( CharSequence name , $F2613 ( cls ) ) { \n\tint nameLen ; \n\tStringBuilder sb ; \n\t$F544121 ( name ) $F544121 ( cls ) $F94362 ( nameLen , name ) sb = new StringBuilder ( $F1995 ( cls ) + nameLen + INT00 ) ; \n\t$F564 ( appendResourcePathPrefixFor , sb , cls ) cls = null ; \n\tif $F409685 ( name ) $F44618 ( sb , name , nameLen ) else $F1212 ( sb , name ) name = null ; \n\t$F1226 ( sb ) } \n"}, {"code": "public static String getResourcePathFor ( CharSequence name , Object obj ) { \n\t$F544121 ( obj ) return $F474799 ( getResourcePathFor , name , obj ) ; \n\t} \n"}, {"code": "public static InputStream getFor $F27515 ( name , cls ) { \n\tInputStream ret ; \n\t$F544121 ( cls ) if ( ( ret = cls . getResourceAsStream ( getResourcePathFor ( name , cls ) ) ) == null ) throw new ResourceException $F61905 ( name , cls ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static InputStream getFor $F844 ( name , obj ) { \n\t$F544121 ( obj ) return $F474799 ( getFor , name , obj ) ; \n\t} \n"}, {"code": "public InputStream get ( String name ) { \n\tInputStream ret ; \n\t$F544121 ( name ) if ( ( ret = loader . getResourceAsStream ( prefix + name ) ) == null ) throw new ResourceException $F2821 ( name ) ; \n\treturn ret ; \n\t} \n"}, {"code": "public static String getStringFor $F27515 ( name , cls ) { \n\t$F99950 ( in ) try { \n\t\tif ( $F225685 ( in , getFor , name , cls ) == null ) throw new ResourceException $F61905 ( name , cls ) ; \n\t\t$F45705 ( IOUtils , in ) } \n\tcatch ( IOException e ) { \n\t\tthrow new ResourceException $F5148 ( name , e ) ; \n\t\t} \n\tfinally { \n\t\tCloser . close ( $F151068 ( in , logger , name ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String getStringFor $F844 ( name , obj ) { \n\t$F544121 ( obj ) return $F474799 ( getStringFor , name , obj ) ; \n\t} \n"}, {"code": "public String getString ( String name ) { \n\t$F99950 ( in ) $F544121 ( name ) try { \n\t\tif ( ( in = loader . getResourceAsStream ( prefix + name ) ) == null ) throw new ResourceException $F2821 ( name ) ; \n\t\t$F45705 ( IOUtils , in ) } \n\tcatch ( IOException e ) { \n\t\tthrow new ResourceException $F5148 ( name , e ) ; \n\t\t} \n\tfinally { \n\t\tCloser . close ( $F151068 ( in , logger , name ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1975 getBytesFor $F27515 ( name , cls ) { \n\t$F99950 ( in ) try { \n\t\tif ( $F225685 ( in , getFor , name , cls ) == null ) throw new ResourceException $F61905 ( name , cls ) ; \n\t\treturn $F72312 ( IOUtils , in ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new ResourceException $F6 ; \n\t\t} \n\tfinally { \n\t\tCloser . close ( in , logger , STRING00 ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1975 getBytesFor $F844 ( name , obj ) { \n\t$F544121 ( obj ) return $F474799 ( getBytesFor , name , obj ) ; \n\t} \n"}, {"code": "$F119429 int setBitSetX64 ( int reps ) { \n\tlong count = NUM00 * reps ; \n\tfor ( $F6610 ( i , count ) ) { \n\t\tbitSet . set ( i & INT00 , true ) ; \n\t\t} \n\treturn $F57255 ( bitSet ) ; \n\t} \n"}, {"code": "$F119429 long setMaskX64 ( int reps ) { \n\tlong count = NUM00 * reps ; \n\t$F58269 ( bitMask ) for ( $F6610 ( i , count ) ) { \n\t\tbitMask |= INT00 < < $F18692 ( i ) ; \n\t\t} \n\treturn bitMask ; \n\t} \n"}, {"code": "$F119429 String charsToBitSet ( int reps ) { \n\tfor ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F2674 ( n , bitString ) ) { \n\t\t\tbitSet . set ( n , $F77497 ( bitString , n ) ) ; \n\t\t\t} \n\t\t} \n\t$F1226 ( bitSet ) } \n"}, {"code": "$F119429 long charsToMask ( int reps ) { \n\t$F57820 ( bitMask ) for ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F2674 ( n , bitString ) ) { \n\t\t\tlong $F123322 ( m , n ) ; \n\t\t\tif $F377917 ( bitString , n ) $F117503 ( bitMask , m ) else { \n\t\t\t\tbitMask &= ~ m ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn bitMask ; \n\t} \n"}, {"code": "$F119429 long baselineIteration ( int reps ) { \n\t$F1987 ( badHash ) for ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F2674 ( n , bitString ) ) $F61021 ( badHash , bitString , n ) } \n\treturn badHash ; \n\t} \n"}, {"code": "$F1 public void delete ( String path ) throws IOException { \n\t$F201 ( fs , FileSystem , conf ) $F214572 fstatuss = fs . listStatus ( $F183610 ( path ) ) ; \n\tif $F268 ( fstatuss ) { \n\t\tfor ( FileStatus fstatus : fstatuss ) { \n\t\t\tfs . delete ( $F2515 ( fstatus ) , true ) ; \n\t\t\t} \n\t\t} \n\tfs . delete ( $F183610 ( path ) , true ) ; \n\t} \n"}, {"code": "$F1 public long getFileSize ( String path ) throws $F372272 { \n\t$F201 ( fs , FileSystem , conf ) FileStatus fstatus = fs . getFileStatus ( $F183610 ( path ) ) ; \n\t$F43807 ( fstatus ) return $F214504 ( fstatus ) ; \n\t} \n"}, {"code": "$F1 public Map < $F5033 , $F21 > getSimpleColumnsMaster ( $F21 masterLabels , $F57272 joinColumnNo , String path , String separator ) throws $F372272 { \n\tMap < $F5033 , $F21 > m = new HashMap < $F5033 , $F21 > $F2 ; \n\t$F201 ( fs , FileSystem , conf ) FileStatus fstatus = fs . getFileStatus ( $F183610 ( path ) ) ; \n\t$F2201 ( fstatus ) BufferedReader br = new BufferedReader ( new InputStreamReader ( fs . open ( $F2515 ( fstatus ) ) ) ) ; \n\tString line ; \n\twhile $F57865 ( line , br ) { \n\t\t$F21 strings = StringUtil . split ( line , separator , false ) ; \n\t\tif $F250577 ( masterLabels , strings ) $F42718 $F95965 ( joinData ) for ( int i : joinColumnNo ) $F40275 ( joinData , strings , i ) $F21685 ( data , strings ) $F104473 ( i , strings , data ) $F2725 ( m , joinData , data ) } \n\t$F1109 ( br ) return m ; \n\t} \n"}, {"code": "public boolean send ( RoxPayload payload ) throws MalformedURLException { \n\tfinal URL payloadResourceUrl = getPayloadResourceUrl ( ) ; \n\t$F2272 ( payloadResourceUrl ) LOGGER . info ( STRING00 , configuration . getServerConfiguration ( ) . getApiUrl ( ) ) ; \n\tif ( configuration . isPayloadPrint ( ) ) { \n\t\tOutputStreamWriter payloadOsw = null ; \n\t\ttry { \n\t\t\tpayloadOsw = new OutputStreamWriter $F88589 ( System ) ; \n\t\t\tserializer . serializePayload ( payloadOsw , payload , true ) ; \n\t\t\t} \n\t\t$F188590 finally { \n\t\t\tif $F268 ( payloadOsw ) { \n\t\t\t\ttry $F2453 ( payloadOsw ) catch ( IOException closeIoe ) $F1645 } \n\t\t\t} \n\t\t} \n\toptimizeStart ( ) ; \n\tboolean result = sendPayload ( payloadResourceUrl , optimize ( payload ) , true ) ; \n\toptimizeStop ( result ) ; \n\tif ( ! result ) { \n\t\t$F48739 ( result , sendPayload , payloadResourceUrl , payload ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "private boolean sendPayload ( URL payloadResourceUrl , RoxPayload payload , boolean optimized ) { \n\t$F475820 ( conn ) final String $F183472 ( payloadLogString , optimized ) ; \n\ttry { \n\t\t$F14067 ( conn , uploadPayload , payloadResourceUrl , payload ) if ( $F18916 ( conn ) == INT00 ) { \n\t\t\t$F129732 ( LOGGER , payloadLogString ) $F232 } \n\t\telse { \n\t\t\tLOGGER . error ( STRING00 , payloadLogString , $F18916 ( conn ) , readInputStream ( $F7587 ( conn ) ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( IOException ioe ) { \n\t\tif ( ! configuration . isPayloadPrint ( ) ) { \n\t\t\tOutputStreamWriter baos = null ; \n\t\t\ttry { \n\t\t\t\tbaos = new OutputStreamWriter ( $F21489 , Charset . forName ( Constants . ENCODING ) . newEncoder ( ) ) ; \n\t\t\t\tserializer . serializePayload ( baos , payload , true ) ; \n\t\t\t\tLOGGER . error ( $F366784 ( payloadLogString , baos ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException baosIoe ) $F1645 finally { \n\t\t\t\ttry $F116931 ( baos ) catch ( IOException baosIoe ) $F1645 } \n\t\t\tif $F268 ( conn ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( $F193847 ( conn ) != null ) { \n\t\t\t\t\t\tLOGGER . error ( STRING00 , payloadLogString , readInputStream ( $F193847 ( conn ) ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse $F231891 ( LOGGER , payloadLogString , ioe ) } \n\t\t\t\tcatch ( IOException errorIoe ) $F5573 ( LOGGER , payloadLogString ) } \n\t\t\telse { \n\t\t\t\tLOGGER . error ( $F255107 ( payloadLogString , ioe ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t$F213 } \n"}, {"code": "private void optimizeStart $F2 { \n\tif ( configuration . isPayloadCache ( ) ) { \n\t\tif ( configuration . getOptimizerStoreClass ( ) == null ) { \n\t\t\tstore = new CacheOptimizerStore $F2 ; \n\t\t\t$F47257 ( store , configuration ) $F254 } \n\t\ttry { \n\t\t\tstore = ( OptimizerStore ) Class . forName ( configuration . getOptimizerStoreClass ( ) ) . newInstance ( ) ; \n\t\t\t$F47257 ( store , configuration ) } \n\t\tcatch ( ClassNotFoundException cnfe ) { \n\t\t\tLOGGER . warn ( STRING00 , configuration . getOptimizerStoreClass ( ) ) ; \n\t\t\t} \n\t\tcatch ( InstantiationException ex ) { \n\t\t\tLOGGER . warn ( STRING00 , configuration . getOptimizerStoreClass ( ) ) ; \n\t\t\t} \n\t\tcatch ( IllegalAccessException ex ) { \n\t\t\tLOGGER . warn ( STRING00 , configuration . getOptimizerStoreClass ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private RoxPayload optimize ( RoxPayload payload ) { \n\tif $F268 ( store ) { \n\t\treturn payload . getOptimizer ( ) . optimize ( store , payload ) ; \n\t\t} \n\treturn payload ; \n\t} \n"}, {"code": "public void start $F2 { \n\t$F2109 ( logger ) try { \n\t\tContainer container = this . getActualContainer ( ) ; \n\t\tServer server = new ContainerServer ( container ) ; \n\t\tconnection = new SocketConnection ( server ) ; \n\t\tSocketAddress address = new InetSocketAddress ( port ) ; \n\t\tsocketAddress = ( InetSocketAddress ) $F133153 ( connection , address ) ; \n\t\tthis . isRunning = true ; \n\t\tlogger . info ( STRING00 + this . getSimulatorName ( ) + STRING00 + STRING00 + $F7133 ( socketAddress ) ) ; \n\t\t} \n\t$F88274 ( e ) } \n"}, {"code": "$F1 public void stop $F2 { \n\ttry { \n\t\t$F2109 ( logger ) $F1109 ( connection ) this . isRunning = false ; \n\t\tlogger . info ( $F24138 ( getSimulatorName ) ) ; \n\t\t} \n\t$F88274 ( e ) } \n"}, {"code": "private $F3244 _asArray $F80574 ( obj ) { \n\t$F508297 ( array ) if $F402814 ( obj ) { \n\t\t$F236074 ( array , obj ) ; \n\t\t$F90724 ( array ) } \n\telse { \n\t\t$F1990915 ( array , obj ) ; \n\t\t} \n\treturn array ; \n\t} \n"}, {"code": "protected T _jdoLoad $F59714 ( id ) { \n\t$F2201 ( id ) $F105146 ( p_object ) try { \n\t\tp_object = getCastorTemplate ( ) . load ( _objectType , id ) ; \n\t\t} \n\tcatch ( DataAccessException ex ) { \n\t\tThrowable cause = ex . getMostSpecificCause ( ) ; \n\t\tif ( ObjectNotFoundException . class . isInstance ( cause ) ) $F67413 ( p_object ) else $F5070055 ( cause ) } \n\tT $F58538 ( typedObject , _objectType , p_object ) ; \n\treturn typedObject ; \n\t} \n"}, {"code": "private $F619 _jdoExecuteQuery ( final String oql , $F60785 ( params ) ) { \n\t$F619 results = null ; \n\ttry { \n\t\tresults = getExtendedCastorTemplate ( ) . findByQuery ( oql , params ) ; \n\t\t} \n\tcatch ( DataAccessException ex ) { \n\t\tthrow new PersistenceException ( ex . getMostSpecificCause ( ) ) ; \n\t\t} \n\treturn results ; \n\t} \n"}, {"code": "protected < L , S extends Persistable $F71542 > S _daoLoadOrCreate ( final $F4231 type , final S object ) { \n\tCastorDao < L , S > dao = getForwardingDao ( type ) ; \n\tS p_object = dao . _loadCorrespondent ( object ) ; \n\tif $F112 ( p_object ) { \n\t\tdao . _create ( object ) ; \n\t\t} \n\treturn p_object ; \n\t} \n"}, {"code": "protected < L , S extends Persistable $F71542 > void _update ( final $F4231 type , final S object ) { \n\tif $F19100 ( _LOG_ ) { \n\t\t_LOG_ . trace ( $F2282 ( type ) ) ; \n\t\t$F21194 ( _LOG_ , object ) } \n\tCastorDao < L , S > dao = getForwardingDao ( type ) ; \n\tdao . _update ( object ) ; \n\t} \n"}, {"code": "protected < L , S extends Persistable $F71542 > S _sync ( final $F4231 type , final S object ) { \n\tif $F19100 ( _LOG_ ) { \n\t\t_LOG_ . trace ( $F2282 ( type ) ) ; \n\t\t$F21194 ( _LOG_ , object ) } \n\t$F2201 ( object ) CastorDao < L , S > dao = getForwardingDao ( type ) ; \n\tS p_object = dao . _sync ( object ) ; \n\treturn p_object ; \n\t} \n"}, {"code": "protected void _syncProperties ( final T object , final T p_object ) { \n\tBeansUtil . copyPropertiesExcept ( p_object , object , $F199040 ) ; \n\t} \n"}, {"code": "public static String dumpStack $F61660 ( cause ) { \n\t$F45711 ( cause ) $F382483 ( sw ) final PrintWriter $F9808 ( s , sw ) ; \n\t$F49958 ( cause , s ) $F127965 ( stack , sw ) try $F2453 ( sw ) catch ( final IOException e ) $F26017 ( LOG , e ) $F1109 ( s ) return stack ; \n\t} \n"}, {"code": "public File extractData ( final ClientHttpResponse response ) throws IOException { \n\tIoUtil . copy ( $F575620 ( response , _file ) ) ; \n\treturn _file ; \n\t} \n"}, {"code": "public Statement generateSetupStatement $F2 { \n\treturn new Statement $F2 { \n\t\t$F1 public void evaluate $F2 throws Throwable { \n\t\t\tAunitRuntime . setTreeParserFactory ( new TreeParserFactory $F2144 ( treeParserClass , failOnError , treeParserSetup ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static Digest valueOf $F62952 ( value ) { \n\tfinal $F21 $F20848 ( parts , value ) ; \n\tif $F4389 ( parts ) { \n\t\treturn new Digest $F88571 ( parts ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "private void addUserToGroup ( $F197020 String providerUserId , $F197020 String providerGroupId ) throws $F22199250 { \n\tif $F19100 ( logger ) { \n\t\tlogger . trace ( STRING00 + IAM . class . getName ( ) + STRING00 + providerUserId + STRING00 + providerGroupId + STRING00 ) ; \n\t\t} \n\ttry { \n\t\tCloudUser user = getUser ( providerUserId ) ; \n\t\tif $F112 ( user ) { \n\t\t\tthrow new CloudException $F2821 ( providerUserId ) ; \n\t\t\t} \n\t\tCloudGroup group = getGroup ( providerGroupId ) ; \n\t\tif $F112 ( group ) { \n\t\t\tthrow new CloudException $F2821 ( providerGroupId ) ; \n\t\t\t} \n\t\t$F5688 ( parameters ) $F6479 ( parameters , group ) parameters . put ( STRING00 , $F199648 ( user ) ) ; \n\t\ttry { \n\t\t\tif $F14980 ( logger ) { \n\t\t\t\t$F105723 ( logger , providerUserId , providerGroupId ) } \n\t\t\tinvoke ( IAMMethod . ADD_USER_TO_GROUP , parameters ) ; \n\t\t\t$F240129 ( logger ) } \n\t\t$F22782929 ( logger , e ) } \n\tfinally { \n\t\tif $F19100 ( logger ) { \n\t\t\tlogger . trace ( STRING00 + IAM . class . getName ( ) + STRING00 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void storeStream ( String id , InputStream inputStream , ByteTransferListener listener ) throws IOException { \n\t$F8523740 ( Assert , id ) $F8523740 ( Assert , inputStream ) CountingInputStream countingInputStream = new CountingInputStream ( inputStream ) ; \n\tcountingInputStream . addByteTransferListener ( new ByteTransferListener $F2 { \n\t\tpublic void handleByteTransfer ( ByteTransferEvent event ) { \n\t\t\tbytesWritten += event . getBytesSinceLastEvent ( ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\tif $F268 ( listener ) { \n\t\tcountingInputStream . addByteTransferListener ( listener ) ; \n\t\t} \n\t$F564 ( store , id , countingInputStream ) } \n"}, {"code": "public void storeStream $F21370 ( id , inputStream ) throws IOException $F24422 ( storeStream , id , inputStream ) "}, {"code": "$F1 public void close $F2 { \n\t$F8479 ( System , addOnModel ) closeCallback . accept ( null ) ; \n\t$F1109 ( line ) } \n"}, {"code": "$F1 public Control [ ] getControls $F2 { \n\tControl [ ] controls = line . getControls ( ) ; \n\tfor ( $F2674 ( i , controls ) ) { \n\t\tControl control = controls [ i ] ; \n\t\tif ( $F227177 ( control ) . equals ( BooleanControl . Type . MUTE . toString ( ) ) ) { \n\t\t\tcontrols [ i ] = new FakeMuteControl $F2 ; \n\t\t\t} \n\t\t} \n\treturn controls ; \n\t} \n"}, {"code": "$F1 public Control getControl ( Control . Type control ) throws IllegalArgumentException { \n\tif ( $F39589 ( control ) ( BooleanControl . Type . MUTE . toString ( ) ) ) { \n\t\treturn new FakeMuteControl $F2 ; \n\t\t} \n\telse { \n\t\treturn line . getControl ( control ) ; \n\t\t} \n\t} \n"}, {"code": "protected String parseDateToString ( Date date , Context context , Arguments args ) { \n\tfinal DateFormat $F304 ( dateFormat , parseFormatter , context , args ) ; \n\tdateFormat . setTimeZone ( context . get ( Contexts . TIMEZONE ) ) ; \n\t$F281474 ( dateFormat , date ) } \n"}, {"code": "private DateFormat parseFormatter ( Context context , Arguments args ) { \n\t$F358736 ( format , args , FORMAT_PARAM_NAME ) final Locale $F199 ( locale , context , LOCALE ) ; \n\tif $F268 ( format ) { \n\t\treturn new SimpleDateFormat ( format , locale ) ; \n\t\t} \n\t$F126801 ( defaultFormatStyle , parseDateFormatStyle , args ) final int dateFormatStyle = $F94143 ( parseDateFormatStyle , args , DATE_PARAM_NAME , defaultFormatStyle ) ; \n\tfinal int timeFormatStyle = $F94143 ( parseDateFormatStyle , args , TIME_PARAM_NAME , defaultFormatStyle ) ; \n\tif ( Mode . DATE_TIME . equals ( mode ) ) { \n\t\treturn DateFormat . getDateTimeInstance ( dateFormatStyle , timeFormatStyle , locale ) ; \n\t\t} \n\telse if ( Mode . DATE . equals ( mode ) ) { \n\t\treturn DateFormat . getDateInstance ( dateFormatStyle , locale ) ; \n\t\t} \n\telse if ( Mode . TIME . equals ( mode ) ) { \n\t\treturn DateFormat . getTimeInstance ( timeFormatStyle , locale ) ; \n\t\t} \n\t$F209216 ( DateFormat ) } \n"}, {"code": "private int parseDateFormatStyle $F11348 ( text , defaultStyle ) { \n\t$F3446 ( text , defaultStyle ) if $F134351 ( SHORT_STYLE , text ) { \n\t\treturn DateFormat . SHORT ; \n\t\t} \n\telse if $F134351 ( MEDIUM_STYLE , text ) { \n\t\treturn DateFormat . MEDIUM ; \n\t\t} \n\telse if $F134351 ( LONG_STYLE , text ) { \n\t\treturn DateFormat . LONG ; \n\t\t} \n\telse if $F134351 ( FULL_STYLE , text ) { \n\t\treturn DateFormat . FULL ; \n\t\t} \n\treturn defaultStyle ; \n\t} \n"}, {"code": "private int parseDateFormatStyle ( Arguments args ) { \n\tif $F11436 ( args , SHORT_STYLE ) { \n\t\treturn DateFormat . SHORT ; \n\t\t} \n\telse if $F11436 ( args , MEDIUM_STYLE ) { \n\t\treturn DateFormat . MEDIUM ; \n\t\t} \n\telse if $F11436 ( args , LONG_STYLE ) { \n\t\treturn DateFormat . LONG ; \n\t\t} \n\telse if $F11436 ( args , FULL_STYLE ) { \n\t\treturn DateFormat . FULL ; \n\t\t} \n\treturn DateFormat . DEFAULT ; \n\t} \n"}, {"code": "static $F2612 getKeyTypeFromEnumMap ( Object enumMap ) { \n\tif $F112 ( __keyTypeFromEnumMap ) $F214343 try { \n\t\treturn ( $F2612 ) $F198 ( __keyTypeFromEnumMap , enumMap ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) $F11568 ( e ) $F61685 ( e ) } \n"}, {"code": "static $F2612 getElementTypeFromEnumSet ( Object enumSet ) { \n\tif $F112 ( __elementTypeFromEnumSet ) $F214343 try { \n\t\treturn ( $F2612 ) $F198 ( __elementTypeFromEnumSet , enumSet ) ; \n\t\t} \n\tcatch ( IllegalArgumentException e ) $F11568 ( e ) $F61685 ( e ) } \n"}, {"code": "public static void writeTo ( Output output , int number , boolean repeated , $F65119 ( e ) ) throws IOException { \n\tif ( ENUMS_BY_NAME ) output . writeString ( number , $F2941 ( e ) , repeated ) ; \n\telse output . writeEnum ( number , $F83285 ( e ) , repeated ) ; \n\t} \n"}, {"code": "public static < F , S > TryType < F , S > failure ( final F x ) { \n\treturn Failure . failure ( x ) ; \n\t} \n"}, {"code": "public static < F , S > TryType < F , S > success ( final S x ) { \n\treturn $F27414 ( Success , x ) ; \n\t} \n"}, {"code": "public static void update ( String id , FileStreamWriter fileStreamWriter ) throws DaoManagerException { \n\tif $F540 ( isCurrentServer , id ) { \n\t\t$F341547 ( connector , id , fileStreamWriter ) } \n\telse { \n\t\t$F257420 ( log , id , serverName ) } \n\t} \n"}, {"code": "public static $F28644 $F77681 newHashMap $F59671 ( key , value ) { \n\t$F77681 map = new $F77681 $F2 ; \n\t$F2725 ( map , key , value ) return map ; \n\t} \n"}, {"code": "public static InputStream getFileOrResource ( String name ) throws IOException { \n\t$F99950 ( is ) if ( $F2592 ( name ) . isFile ( ) ) $F636649 ( is , name ) else { \n\t\tis = $F462857 ( Thread , name ) ; \n\t\t} \n\t$F189700 ( is , name ) return is ; \n\t} \n"}, {"code": "public $F60461 stream ( $F410888 HString hString ) { \n\treturn $F324969 ( annotationStream , hString ) ( getTrimFunction ( ) ) . filter ( getFilter ( ) ) . filter ( Objects : : <missing ';'> $F29989 filter ( $F273311 ( h ) ) . map ( getToStringFunction ( ) ) . filter ( StringUtils : : <missing ';'> isNotNullOrBlank ) ; \n\t} \n"}, {"code": "public $F5033 collect ( $F410888 HString hString ) { \n\treturn stream ( hString ) . collect ( $F1507 ( Collectors ) ) ; \n\t} \n"}, {"code": "public $F1043 unique ( $F410888 HString hString ) { \n\treturn stream ( hString ) . collect ( $F2946 ( Collectors ) ) ; \n\t} \n"}, {"code": "public Counter $F641 count ( $F410888 HString hString ) { \n\treturn getValueCalculator ( ) . adjust ( Counters . newCounter ( hString . stream ( getAnnotationType ( ) ) . map ( getTrimFunction ( ) ) . filter ( getFilter ( ) ) . map ( getToStringFunction ( ) ) . filter ( StringUtils : : isNotNullOrBlank ) ) ) ; \n\t} \n"}, {"code": "public static InvocationException newInstance ( InvocationContext context , HttpResponse response , Throwable rootCause ) { \n\tif ( rootCause instanceof InvocationException ) { \n\t\treturn ( InvocationException ) rootCause ; \n\t\t} \n\treturn new InvocationException $F2144 ( context , response , rootCause ) ; \n\t} \n"}, {"code": "public static InvocationException newInstance ( InvocationContext context , Throwable rootCause ) { \n\tif ( rootCause instanceof InvocationException ) { \n\t\treturn ( InvocationException ) rootCause ; \n\t\t} \n\treturn new InvocationException ( context , rootCause ) ; \n\t} \n"}, {"code": "public $F5033 asList $F2 { \n\treturn Lists . newLinkedList ( Splitter . on ( $F797 ( separator ) ) . split ( gets ( ) ) ) ; \n\t} \n"}, {"code": "public MultiPos $F182048 find $F2 { \n\treturn new MultiPos $F182048 $F260681 { \n\t\t$F1 protected String result $F2 { \n\t\t\treturn $F151029 ( findingReplacing , EMPTY , pos , position ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static Comparator < LongTuple > byDistanceComparator ( LongTuple reference , final ToDoubleBiFunction < ? super LongTuple , ? super LongTuple > distanceFunction ) { \n\tfinal LongTuple $F233081 ( fReference , LongTuples , reference ) ; \n\treturn new Comparator < LongTuple > $F2 { \n\t\t$F1 public int compare ( LongTuple t0 , LongTuple t1 ) { \n\t\t\tdouble d0 = distanceFunction . applyAsDouble ( fReference , t0 ) ; \n\t\t\tdouble d1 = distanceFunction . applyAsDouble ( fReference , t1 ) ; \n\t\t\t$F18621 ( Double , d0 , d1 ) } \n\t\t} \n\t; \n\t} \n"}, {"code": "static double computeEuclidean ( LongTuple t0 , LongTuple t1 ) { \n\treturn Math . sqrt ( computeEuclideanSquared ( t0 , t1 ) ) ; \n\t} \n"}, {"code": "static double computeEuclideanSquared ( LongTuple t0 , LongTuple t1 ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F57820 ( sum ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tlong d = $F198 ( t0 , i ) - $F198 ( t1 , i ) ; \n\t\t$F103744 ( sum , d ) } \n\treturn sum ; \n\t} \n"}, {"code": "static double computeWrappedEuclidean ( LongTuple t0 , LongTuple t1 , LongTuple size ) { \n\treturn Math . sqrt ( $F209 ( computeWrappedEuclideanSquared , t0 , t1 , size ) ) ; \n\t} \n"}, {"code": "static long computeWrappedChebyshev ( LongTuple t0 , LongTuple t1 , LongTuple size ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\t$F57820 ( max ) for ( int i = INT00 ; \n\t$F43999 ( i , t0 ) ; \n\ti ++ ) { \n\t\tlong d = MathUtils . wrappedDistance ( $F198 ( t0 , i ) , $F198 ( t1 , i ) , $F198 ( size , i ) ) ; \n\t\tmax = Math . max ( max , $F91759 ( Math , d ) ) ; \n\t\t} \n\treturn max ; \n\t} \n"}, {"code": "$F1 public void checkPermission ( Permission permission , AddOnModel addon ) throws IzouPermissionException { \n\tString canonicalName = $F507 ( permission ) . intern ( ) . toLowerCase ( ) ; \n\tString canonicalAction = $F597700 ( permission ) . intern ( ) . toLowerCase ( ) ; \n\tif ( $F9287 ( canonicalName ) || $F14426 ( canonicalAction ) ) { \n\t\tthrow $F22398 ( getException , permission ) ; \n\t\t} \n\tif $F42444 ( canonicalAction ) $F890 ( fileReadCheck , canonicalName ) $F564 ( fileWriteCheck , canonicalName , addon ) } \n"}, {"code": "void fileReadCheck ( String filePath ) { \n\t$F2595 ( potentialFile , filePath ) String canonicalPath ; \n\ttry { \n\t\t$F11896 ( canonicalPath , potentialFile ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F62615 ( error , e ) $F157851 ( getException , filePath ) } \n\tif ( $F11721 ( forbiddenReadFiles ) ( canonicalPath : : startsWith ) ) $F157852 ( getException , filePath ) } \n"}, {"code": "void fileWriteCheck ( String filePath , AddOnModel addOnModel ) { \n\tFile request ; \n\ttry { \n\t\trequest = $F2592 ( filePath ) . getCanonicalFile ( ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F62615 ( error , e ) $F157851 ( getException , filePath ) } \n\t$F564 ( isForbidden , request , addOnModel ) $F2233 ( success ) if ( $F11721 ( allowedWriteDirectories ) ( compare - > request . toPath ( ) . startsWith ( $F21277 ( compare ) ) ) ) $F24354 ( success ) for ( String name : forbiddenWriteFilesNames ) { \n\t\tif $F26397 ( request , name ) $F57412 ( success ) } \n\tif ( ! success ) $F157852 ( getException , filePath ) if ( ! getSecurityManager ( ) . getSecureAccess ( ) . checkForExistingFileOrDirectory ( $F797 ( request ) ) || getSecurityManager ( ) . getSecureAccess ( ) . checkForDirectory ( $F797 ( request ) ) ) $F255 } \n"}, {"code": "private void isForbidden ( File request , AddOnModel addOnModel ) { \n\tif ( $F11721 ( forbiddenWriteDirectories ) ( compare - > request . toPath ( ) . startsWith ( $F21277 ( compare ) ) ) ) { \n\t\tthrow getException ( $F39055 ( request ) + $F181913 ( addOnModel ) ) ; \n\t\t} \n\t} \n"}, {"code": "public User get ( int id ) { \n\t$F380799 ( conn ) User user = null ; \n\ttry { \n\t\t$F380801 ( conn , ConnectionUtils ) $F183995 ( user , userDAO , conn , id ) } \n\tcatch ( SQLException e ) $F713916 ( logger , e ) $F191053 ( DbUtils , conn ) return user ; \n\t} \n"}, {"code": "public User get $F1195 ( loginname , password ) { \n\t$F380799 ( conn ) User user = null ; \n\t$F106075 ( loginname , password ) String cryptpassword = MD5 . encodeString ( password , null ) ; \n\ttry { \n\t\t$F380801 ( conn , ConnectionUtils ) user = $F58042 ( userDAO , conn , loginname , cryptpassword ) ; \n\t\t} \n\tcatch ( SQLException e ) $F713916 ( logger , e ) $F191053 ( DbUtils , conn ) return user ; \n\t} \n"}, {"code": "public $F603808 find ( String str , Criteria criteria ) { \n\t$F380799 ( conn ) $F603808 users = null ; \n\ttry { \n\t\t$F380801 ( conn , ConnectionUtils ) users = userDAO . find ( conn , str , criteria ) ; \n\t\t} \n\tcatch ( SQLException e ) $F713916 ( logger , e ) $F191053 ( DbUtils , conn ) return users ; \n\t} \n"}, {"code": "$F1 public final void marshal ( Object graph , Result result ) throws IOException , XmlMappingException { \n\tif ( result instanceof DOMResult ) { \n\t\tmarshalDomResult ( graph , ( DOMResult ) result ) ; \n\t\t} \n\telse if ( StaxUtils . isStaxResult ( result ) ) $F565 ( marshalStaxResult , graph , result ) else if ( result instanceof SAXResult ) { \n\t\tmarshalSaxResult ( graph , ( SAXResult ) result ) ; \n\t\t} \n\telse if ( result instanceof StreamResult ) { \n\t\tmarshalStreamResult ( graph , ( StreamResult ) result ) ; \n\t\t} \n\telse $F433155 ( result ) } \n"}, {"code": "$F1 public final Object unmarshal ( Source source ) throws IOException , XmlMappingException { \n\tif ( source instanceof DOMSource ) { \n\t\treturn unmarshalDomSource ( ( DOMSource ) source ) ; \n\t\t} \n\telse if ( StaxUtils . isStaxSource ( source ) ) $F3342 ( unmarshalStaxSource , source ) else if ( source instanceof SAXSource ) { \n\t\treturn unmarshalSaxSource ( ( SAXSource ) source ) ; \n\t\t} \n\telse if ( source instanceof StreamSource ) { \n\t\treturn unmarshalStreamSource ( ( StreamSource ) source ) ; \n\t\t} \n\telse $F433155 ( source ) } \n"}, {"code": "protected void marshalDomResult ( Object graph , DOMResult domResult ) throws XmlMappingException { \n\tif ( $F360293 ( domResult ) == null ) { \n\t\ttry { \n\t\t\tsynchronized ( this . documentBuilderFactoryMonitor ) { \n\t\t\t\tif ( this . documentBuilderFactory == null ) { \n\t\t\t\t\tthis . documentBuilderFactory = createDocumentBuilderFactory ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tDocumentBuilder documentBuilder = createDocumentBuilder ( this . documentBuilderFactory ) ; \n\t\t\tdomResult . setNode ( $F2124652 ( documentBuilder ) ) ; \n\t\t\t} \n\t\tcatch ( ParserConfigurationException ex ) { \n\t\t\tthrow new UnmarshallingFailureException $F14746 ( ex ) ; \n\t\t\t} \n\t\t} \n\tmarshalDomNode ( graph , $F360293 ( domResult ) ) ; \n\t} \n"}, {"code": "protected void marshalStaxResult ( Object graph , Result staxResult ) throws XmlMappingException { \n\tXMLStreamWriter streamWriter = StaxUtils . getXMLStreamWriter ( staxResult ) ; \n\tif $F268 ( streamWriter ) $F565 ( marshalXmlStreamWriter , graph , streamWriter ) else { \n\t\tXMLEventWriter eventWriter = StaxUtils . getXMLEventWriter ( staxResult ) ; \n\t\tif $F268 ( eventWriter ) $F565 ( marshalXmlEventWriter , graph , eventWriter ) else $F24432 } \n\t} \n"}, {"code": "protected void marshalSaxResult ( Object graph , SAXResult saxResult ) throws XmlMappingException { \n\tContentHandler contentHandler = $F433453 ( saxResult ) ; \n\t$F975 ( Assert , contentHandler ) LexicalHandler lexicalHandler = saxResult . getLexicalHandler ( ) ; \n\t$F5605 ( marshalSaxHandlers , graph , contentHandler , lexicalHandler ) } \n"}, {"code": "protected void marshalStreamResult ( Object graph , StreamResult streamResult ) throws XmlMappingException , IOException { \n\tif ( $F120506 ( streamResult ) != null ) { \n\t\tmarshalOutputStream ( $F462862 ( graph , streamResult ) ) ; \n\t\t} \n\telse if ( $F30486 ( streamResult ) != null ) { \n\t\tmarshalWriter ( graph , $F30486 ( streamResult ) ) ; \n\t\t} \n\telse $F24432 } \n"}, {"code": "protected Object unmarshalDomSource ( DOMSource domSource ) throws XmlMappingException { \n\tif ( $F360293 ( domSource ) == null ) { \n\t\ttry { \n\t\t\tsynchronized ( this . documentBuilderFactoryMonitor ) { \n\t\t\t\tif ( this . documentBuilderFactory == null ) { \n\t\t\t\t\tthis . documentBuilderFactory = createDocumentBuilderFactory ( ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tDocumentBuilder documentBuilder = createDocumentBuilder ( this . documentBuilderFactory ) ; \n\t\t\tdomSource . setNode ( $F2124652 ( documentBuilder ) ) ; \n\t\t\t} \n\t\tcatch ( ParserConfigurationException ex ) { \n\t\t\tthrow new UnmarshallingFailureException $F14746 ( ex ) ; \n\t\t\t} \n\t\t} \n\treturn unmarshalDomNode ( $F360293 ( domSource ) ) ; \n\t} \n"}, {"code": "protected Object unmarshalStaxSource ( Source staxSource ) throws XmlMappingException { \n\tXMLStreamReader streamReader = StaxUtils . getXMLStreamReader ( staxSource ) ; \n\tif $F268 ( streamReader ) $F3342 ( unmarshalXmlStreamReader , streamReader ) else { \n\t\tXMLEventReader eventReader = StaxUtils . getXMLEventReader ( staxSource ) ; \n\t\tif $F268 ( eventReader ) $F3342 ( unmarshalXmlEventReader , eventReader ) else $F24432 } \n\t} \n"}, {"code": "protected Object unmarshalSaxSource ( SAXSource saxSource ) throws XmlMappingException , IOException { \n\tif ( $F3323000 ( saxSource ) == null ) { \n\t\ttry { \n\t\t\tsaxSource . setXMLReader ( createXmlReader ( ) ) ; \n\t\t\t} \n\t\tcatch ( SAXException ex ) { \n\t\t\tthrow new UnmarshallingFailureException $F2756 ( ex ) ; \n\t\t\t} \n\t\t} \n\tif ( saxSource . getInputSource ( ) == null ) { \n\t\tsaxSource . setInputSource ( new InputSource $F2 ) ; \n\t\t} \n\treturn unmarshalSaxReader ( $F3323000 ( saxSource ) , saxSource . getInputSource ( ) ) ; \n\t} \n"}, {"code": "protected Object unmarshalStreamSource ( StreamSource streamSource ) throws XmlMappingException , IOException { \n\tif ( $F7587 ( streamSource ) != null ) { \n\t\treturn unmarshalInputStream ( $F7587 ( streamSource ) ) ; \n\t\t} \n\telse if ( $F253159 ( streamSource ) != null ) { \n\t\treturn unmarshalReader ( $F253159 ( streamSource ) ) ; \n\t\t} \n\telse $F24432 } \n"}, {"code": "$F119429 void reverseNoSurrogates ( int reps ) { \n\tfinal int length = Math . min ( this . length , MIN_SURROGATE ) ; \n\t$F1200 ( sb ) for ( $F6610 ( j , length ) ) { \n\t\t$F194866 ( sb , j ) } \n\tfor ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F62468 ( j ) ) { \n\t\t\t$F69968 ( sb ) ; \n\t\t\t} \n\t\tif ( sb . codePointAt ( INT00 ) > MIN_SURROGATE ) throw $F117127 ; \n\t\t} \n\t} \n"}, {"code": "$F119429 void codePointAtNoSurrogates ( int reps ) { \n\tfinal int length = Math . min ( this . length , MIN_SURROGATE ) ; \n\t$F1200 ( sb ) for ( $F6610 ( j , length ) ) { \n\t\t$F194866 ( sb , j ) } \n\tfor ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F62468 ( j ) ) { \n\t\t\tfor ( $F84698 ( k , length ) ) { \n\t\t\t\tif ( $F107491 ( sb , k ) > MIN_SURROGATE ) throw $F117127 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F119429 void codePointBeforeNoSurrogates ( int reps ) { \n\tfinal int length = Math . min ( this . length , MIN_SURROGATE ) ; \n\t$F1200 ( sb ) for ( $F6610 ( j , length ) ) { \n\t\t$F194866 ( sb , j ) } \n\tfor ( $F6610 ( i , reps ) ) { \n\t\tfor ( $F62468 ( j ) ) { \n\t\t\tfor ( $F6610 ( k , length ) ) { \n\t\t\t\tif ( sb . codePointBefore ( k ) > MIN_SURROGATE ) throw $F117127 ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public long list ( $F288130 ( list ) , $F2731 ( search ) , int skip , int max ) $F17553 "}, {"code": "$F1 public DateTimeFormatter [ ] getValueAsDateTimeFormatterArray $F2 throws ParseException { \n\tfinal DateTimeFormatter [ ] result = new DateTimeFormatter $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . delegate ; \n\treturn result ; \n\t} \n"}, {"code": "public static BigDecimal cutInvalidSacle ( BigDecimal val ) { \n\t$F90659 ( val ) $F362256 ( d , val ) $F494051 ( i , val ) if ( d == i ) $F341258 ( i ) return new BigDecimal $F1373384 ( Double , d ) ; \n\t} \n"}, {"code": "public static boolean isValueEquals ( BigDecimal decimal1 , BigDecimal decimal2 ) { \n\tif $F46336 ( decimal1 , decimal2 ) $F232 if $F16029 ( decimal1 , decimal2 ) $F213 if $F54606 ( decimal1 , decimal2 ) $F213 return $F34166 ( cutInvalidSacle , decimal1 ) ( cutInvalidSacle ( decimal2 ) ) ; \n\t} \n"}, {"code": "protected $F1372 $F931805 newSchema $F7907 ( typeClass ) { \n\tif $F268 ( primaryGroup ) { \n\t\tfinal $F931805 s = primaryGroup . getSchemaWrapper ( typeClass , true ) . getSchema ( ) ; \n\t\tif ( s instanceof RuntimeSchema ) { \n\t\t\tfinal RuntimeSchema $F1372 rs = ( RuntimeSchema $F1372 ) s ; \n\t\t\tfinal ArrayList < Field $F1372 > fields = new ArrayList < MappedSchema . Field $F1372 > ( rs . fields . length ) ; \n\t\t\tfor ( Field $F1372 f : rs . fields ) { \n\t\t\t\t$F118058 ( groupFilter , f ) if $F319 ( groupFilter ) { \n\t\t\t\t\tfinal int set ; \n\t\t\t\t\tif $F3730 ( groupFilter ) { \n\t\t\t\t\t\tset = ~ groupFilter & INT00 ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tset = - groupFilter ; \n\t\t\t\t\t\t} \n\t\t\t\t\tif ( INT00 != ( groupId & set ) ) $F42718 } \n\t\t\t\t$F528 ( fields , f ) } \n\t\t\t$F119109 ( size , fields ) if ( size == rs . fields . length ) $F356 ( rs ) if $F2015 ( size ) { \n\t\t\t\tthrow new RuntimeException ( STRING00 + rs . messageFullName ( ) + STRING00 + groupId ) ; \n\t\t\t\t} \n\t\t\treturn new RuntimeSchema $F1372 ( typeClass , fields , $F85195 ( fields , size ) . number , rs . instantiator ) ; \n\t\t\t} \n\t\treturn s ; \n\t\t} \n\treturn RuntimeSchema . createFrom ( typeClass , this ) ; \n\t} \n"}, {"code": "public void init $F11167 ( name , config ) { \n\tif $F112 ( config ) config = Objects . newSOHashMap ( ) ; \n\t$F1357 ( this , name ) $F1357 ( this , config ) } \n"}, {"code": "public synchronized Session getSession $F2 { \n\tif $F112 ( session ) { \n\t\tif $F268 ( authenticator ) { \n\t\t\t$F394537 ( session , Session , properties , authenticator ) ; \n\t\t\t} \n\t\telse $F125545 ( session , Session , properties ) } \n\treturn session ; \n\t} \n"}, {"code": "private void loadPropertiesQueitly $F2 { \n\ttry { \n\t\tproperties = PropertiesFileExtensions . loadProperties ( this , EmailConstants . PROPERTIES_FILENAME ) ; \n\t\t} \n\t$F114755 ( e ) } \n"}, {"code": "$F1 public String sendEmail $F528898 ( to , from , subject , message ) throws AddressException , UnsupportedEncodingException , MessagingException { \n\t$F4728 ( messageId ) final Address [ ] fromAddress = EmailExtensions . getAddressArray ( EmailExtensions . newAddress ( from , null ) ) ; \n\tfinal Address toAddress = EmailExtensions . newAddress ( $F69770 ( to ) ) ; \n\tfinal EmailMessage email = new EmailMessage $F2 ; \n\temail . addFrom ( fromAddress ) ; \n\temail . addTo ( toAddress ) ; \n\t$F428299 ( email , subject ) email . setContent ( message , EmailConstants . MIMETYPE_TEXT_PLAIN ) ; \n\t$F10937 ( messageId , sendEmailMessage , email ) return messageId ; \n\t} \n"}, {"code": "$F1 public String sendEmailMessage ( final EmailMessage emailMessage ) throws MessagingException { \n\t$F179957 ( Transport , emailMessage ) return emailMessage . getMessageID ( ) ; \n\t} \n"}, {"code": "$F1 public $F991 sendEmailMessages ( final Collection < EmailMessage > emailMessages ) throws MessagingException { \n\t$F208402 ( messageIds ) for ( final EmailMessage emailMessage : emailMessages ) { \n\t\t$F138322 ( messageId , sendEmailMessage , emailMessage ) $F528 ( messageIds , messageId ) } \n\treturn messageIds ; \n\t} \n"}, {"code": "$F1 public $F991 sendEmailMessagesWithAtachments ( final Collection < EmailMessageWithAttachments > emailAttachments ) throws MessagingException { \n\t$F208402 ( messageIds ) for ( final EmailMessageWithAttachments emailAttachment : emailAttachments ) { \n\t\t$F138322 ( messageId , sendEmailMessageWithAttachments , emailAttachment ) $F528 ( messageIds , messageId ) } \n\treturn messageIds ; \n\t} \n"}, {"code": "protected Runtime createRuntime ( ResourceLoader resourceLoader , ClassLoader classLoader , RuntimeOptions runtimeOptions ) throws InitializationError , IOException { \n\tClassFinder classFinder = new ResourceLoaderClassFinder ( resourceLoader , classLoader ) ; \n\treturn new Runtime $F3192 ( resourceLoader , classFinder , classLoader , runtimeOptions ) ; \n\t} \n"}, {"code": "$F1 public ITemplateSource createTemplateSource ( Template $F45 template , String source ) { \n\ttry { \n\t\treturn new JarTemplateSource $F2509 ( getTemplatePath , template , source ) ; \n\t\t} \n\t$F88274 ( e ) } \n"}, {"code": "private static void processSeasons ( EpisodeList epList , NodeList nlSeasons ) { \n\tif ( nlSeasons == null || $F491904 ( nlSeasons ) ) $F255 Node nEpisodeList ; \n\tfor ( $F12267 ( loop , nlSeasons ) ) { \n\t\t$F356719 ( nEpisodeList , nlSeasons , loop ) ; \n\t\tif $F1582724 ( nEpisodeList , Node ) { \n\t\t\tprocessSeasonEpisodes ( ( Element ) nEpisodeList , epList ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void processSeasonEpisodes ( Element eEpisodeList , EpisodeList epList ) { \n\t$F462595 ( season , eEpisodeList ) NodeList $F384082 ( nlEpisode , eEpisodeList , EPISODE ) ; \n\tif ( nlEpisode == null || $F491904 ( nlEpisode ) ) $F255 for ( $F12267 ( eLoop , nlEpisode ) ) { \n\t\t$F356721 ( nEpisode , nlEpisode , eLoop ) if $F1582724 ( nEpisode , Node ) { \n\t\t\tepList . addEpisode ( parseEpisode ( ( Element ) nEpisode , season ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static List < ShowInfo > processShowInfo $F1195 ( searchUrl , tagName ) throws TVRageException { \n\tList < ShowInfo > $F54 ( showList ) ; \n\tShowInfo showInfo ; \n\t$F98275 ( doc , getDocFromUrl , searchUrl ) NodeList $F384082 ( nlShowInfo , doc , tagName ) ; \n\tif ( nlShowInfo == null || $F491904 ( nlShowInfo ) ) $F356 ( showList ) for ( $F12267 ( loop , nlShowInfo ) ) { \n\t\t$F356721 ( nShowInfo , nlShowInfo , loop ) if $F1582724 ( nShowInfo , Node ) { \n\t\t\t$F356726 ( eShowInfo , nShowInfo ) $F10937 ( showInfo , parseNextShowInfo , eShowInfo ) $F528 ( showList , showInfo ) } \n\t\t} \n\treturn showList ; \n\t} \n"}, {"code": "private static Episode parseEpisode $F50656 ( eEpisode , season ) { \n\tEpisode episode = new Episode $F2 ; \n\tEpisodeNumber en = new EpisodeNumber $F2 ; \n\t$F17492207 ( en , season ) en . setEpisode ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\ten . setAbsolute ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\tepisode . setEpisodeNumber ( en ) ; \n\tepisode . setProductionId ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\tepisode . setAirDate ( DOMHelper . getValueFromElement ( eEpisode , AIRDATE ) ) ; \n\tepisode . setLink ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\tepisode . setTitle ( DOMHelper . getValueFromElement ( eEpisode , TITLE ) ) ; \n\tepisode . setSummary ( DOMHelper . getValueFromElement ( eEpisode , SUMMARY ) ) ; \n\tepisode . setRating ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\tepisode . setScreenCap ( DOMHelper . getValueFromElement ( eEpisode , STRING00 ) ) ; \n\treturn episode ; \n\t} \n"}, {"code": "private static Episode parseEpisodeInfo ( Element eEpisodeInfo ) { \n\tEpisode episode = new Episode $F2 ; \n\tepisode . setTitle ( DOMHelper . getValueFromElement ( eEpisodeInfo , TITLE ) ) ; \n\tepisode . setAirDate ( DOMHelper . getValueFromElement ( eEpisodeInfo , AIRDATE ) ) ; \n\tepisode . setLink ( DOMHelper . getValueFromElement ( eEpisodeInfo , STRING00 ) ) ; \n\tepisode . setSummary ( DOMHelper . getValueFromElement ( eEpisodeInfo , SUMMARY ) ) ; \n\t$F93416 ( pattern , Pattern ) Matcher matcher = pattern . matcher ( DOMHelper . getValueFromElement ( eEpisodeInfo , STRING00 ) ) ; \n\tif $F14102 ( matcher ) { \n\t\tEpisodeNumber en = new EpisodeNumber $F2 ; \n\t\ten . setSeason ( $F126163 ( matcher , MATCH_SEASON ) ) ; \n\t\ten . setEpisode ( $F126163 ( matcher , MATCH_EPISODE ) ) ; \n\t\tepisode . setEpisodeNumber ( en ) ; \n\t\t} \n\treturn episode ; \n\t} \n"}, {"code": "private static ShowInfo parseNextShowInfo ( Element eShowInfo ) { \n\tShowInfo showInfo = new ShowInfo $F2 ; \n\tString text ; \n\tshowInfo . setShowID ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\ttext = DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ; \n\tif ( ! TVRageApi . isValidString ( text ) ) { \n\t\ttext = DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ; \n\t\t} \n\tshowInfo . setShowName ( text ) ; \n\ttext = DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ; \n\tif ( ! TVRageApi . isValidString ( text ) ) { \n\t\ttext = DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ; \n\t\t} \n\tshowInfo . setShowLink ( text ) ; \n\ttext = DOMHelper . getValueFromElement ( eShowInfo , COUNTRY ) ; \n\tif ( ! TVRageApi . isValidString ( text ) ) { \n\t\ttext = DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ; \n\t\t} \n\tshowInfo . setCountry ( text ) ; \n\tshowInfo . setStarted ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setStartDate ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setEnded ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setTotalSeasons ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setStatus ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setClassification ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setSummary ( DOMHelper . getValueFromElement ( eShowInfo , SUMMARY ) ) ; \n\tshowInfo . setRuntime ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setAirTime ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setAirDay ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\tshowInfo . setTimezone ( DOMHelper . getValueFromElement ( eShowInfo , STRING00 ) ) ; \n\t$F564 ( processNetwork , showInfo , eShowInfo ) $F564 ( processAka , showInfo , eShowInfo ) $F564 ( processGenre , showInfo , eShowInfo ) return showInfo ; \n\t} \n"}, {"code": "private static void processNetwork ( ShowInfo showInfo , Element eShowInfo ) { \n\t$F1108468 ( nlNetwork , eShowInfo ) for ( $F12267 ( nodeLoop , nlNetwork ) ) { \n\t\t$F356721 ( nShowInfo , nlNetwork , nodeLoop ) if $F1582724 ( nShowInfo , Node ) { \n\t\t\t$F356726 ( eNetwork , nShowInfo ) CountryDetail newNetwork = new CountryDetail $F2 ; \n\t\t\tnewNetwork . setCountry ( $F25201 ( eNetwork , COUNTRY ) ) ; \n\t\t\tnewNetwork . setDetail ( $F384104 ( eNetwork ) ) ; \n\t\t\tshowInfo . addNetwork ( newNetwork ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void processAka ( ShowInfo showInfo , Element eShowInfo ) { \n\t$F1108468 ( nlAkas , eShowInfo ) for ( $F12267 ( loop , nlAkas ) ) { \n\t\t$F356721 ( nShowInfo , nlAkas , loop ) if $F1582724 ( nShowInfo , Node ) { \n\t\t\t$F356726 ( eAka , nShowInfo ) CountryDetail newAka = new CountryDetail $F2 ; \n\t\t\tnewAka . setCountry ( $F25201 ( eAka , COUNTRY ) ) ; \n\t\t\tnewAka . setDetail ( $F384104 ( eAka ) ) ; \n\t\t\tshowInfo . addAka ( newAka ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static void processGenre ( ShowInfo showInfo , Element eShowInfo ) { \n\t$F1108468 ( nlGenres , eShowInfo ) for ( $F12267 ( loop , nlGenres ) ) { \n\t\t$F356721 ( nGenre , nlGenres , loop ) if $F1582724 ( nGenre , Node ) { \n\t\t\t$F356726 ( eGenre , nGenre ) if ( $F356739 ( eGenre ) != null ) { \n\t\t\t\tshowInfo . addGenre ( $F6386826 ( eGenre ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public $F839281 getTimeMapBuilder ( final LdpRequest req , final IOService serializer , final String baseUrl ) { \n\tfinal $F11711 acceptableTypes = $F30300 ( req ) . getAcceptableMediaTypes ( ) ; \n\tfinal String identifier = getBaseUrl ( baseUrl , req ) + $F251039 ( req ) + $F2515 ( req ) ; \n\tfinal $F6546886 links = getMementoLinks ( identifier , resource . getMementos ( ) ) . collect ( toList ( ) ) ; \n\tfinal $F839281 builder = $F44633 ( Response ) . link ( $F641128 ( identifier , ORIGINAL , TIMEGATE ) ) ; \n\tbuilder . links ( links . toArray ( new Link $F1478 ) ) . link ( Resource . getIRIString ( ) , STRING00 ) . link ( RDFSource . getIRIString ( ) , STRING00 ) . header ( ALLOW , $F16886 ( join , GET , HEAD , OPTIONS ) ) ; \n\tfinal RDFSyntax syntax = $F39124 ( getSyntax , acceptableTypes , of , APPLICATION_LINK_FORMAT ) . orElse ( null ) ; \n\tif $F540 ( nonNull , syntax ) { \n\t\tfinal IRI profile = $F15151 ( ofNullable , getProfile , acceptableTypes , syntax ) . orElse ( expanded ) ; \n\t\tfinal List $F2207140 extraData = getExtraTriples ( identifier ) ; \n\t\tfor ( final Link l : links ) { \n\t\t\tif ( l . getRels ( ) . contains ( MEMENTO ) ) { \n\t\t\t\textraData . add ( rdf . createTriple ( rdf . createIRI ( identifier ) , Memento . memento , rdf . createIRI ( $F31116 ( l ) . toString ( ) ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfinal StreamingOutput stream = new StreamingOutput $F2 { \n\t\t\t$F1 public void write $F204444 ( out ) throws IOException { \n\t\t\t\tserializer . write ( concat ( $F6628 ( links ) ( linkToTriples ) , $F5025 ( extraData ) ) , out , syntax , profile ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t; \n\t\treturn builder . type ( syntax . mediaType ) . entity ( stream ) ; \n\t\t} \n\treturn $F1679267 ( builder , APPLICATION_LINK_FORMAT ) . entity ( $F5027 ( links , Link ) toString ) . collect ( joining ( STRING00 ) ) + STRING00 ) ; \n\t} \n"}, {"code": "public $F839281 getTimeGateBuilder ( final LdpRequest req , final String baseUrl ) { \n\tfinal String identifier = getBaseUrl ( baseUrl , req ) + $F251039 ( req ) + $F2515 ( req ) ; \n\treturn $F11643 ( Response , FOUND ) . location ( fromUri ( identifier + STRING00 + req . getDatetime ( ) . getInstant ( ) . toEpochMilli ( ) ) . build ( ) ) . link ( $F641128 ( identifier , ORIGINAL , TIMEGATE ) ) . links ( getMementoLinks ( identifier , resource . getMementos ( ) ) . toArray ( Link [ ] : : new ) ) . header ( VARY , ACCEPT_DATETIME ) ; \n\t} \n"}, {"code": "public static Stream $F6546885 getMementoLinks ( final String identifier , final List < VersionRange > mementos ) { \n\treturn concat ( getTimeMap ( identifier , $F5025 ( mementos ) ) , $F5026 ( mementos ) ( mementoToLink ( identifier ) ) ) ; \n\t} \n"}, {"code": "public static void main $F22 ( args ) { \n\t$F1292 ( System ) ( $F4241 ( MAJOR , MINER ) + BUILD ) ; \n\t$F1294 ( System ) } \n"}, {"code": "public static void runAsyncTask ( Object context , int asyncTaskId , Object ... args ) { \n\tif ( ! $F30623 ( ProfileService , context ) . isActive ( context , Profile . THREADING ) ) { \n\t\tStringBuilder builder = $F647672 ( asyncTaskId ) ; \n\t\tLog . w ( $F6370 ( builder ) ) ; \n\t\t$F254 } \n\tTaskManagers . ASYNC . execute ( context , asyncTaskId , args ) ; \n\t} \n"}, {"code": "public static void runUITask ( Object context , int uiTaskId , final Object ... args ) { \n\tif ( ! $F30623 ( ProfileService , context ) . isActive ( context , Profile . THREADING ) ) { \n\t\tStringBuilder builder = $F647672 ( uiTaskId ) ; \n\t\tLog . w ( $F6370 ( builder ) ) ; \n\t\t$F254 } \n\tTaskManagers . UI . execute ( context , uiTaskId , args ) ; \n\t} \n"}, {"code": "public static ClassInclusion classOf $F178750 ( proposedClass ) { \n\treturn new ClassInclusion $F2 { \n\t\t$F1 public $F33567 propose $F2 { \n\t\t\tif ( proposedClass . isAssignableFrom ( ThirdPartyParseable . class ) && $F37558 ( Modifier , proposedClass ) ) return $F301079 ( proposedClass ) ; \n\t\t\treturn $F301079 ( proposedClass ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static ClassInclusion classInIncludes $F96892 ( registryKey , classSimpleName ) { \n\treturn new ClassInclusion $F2 { \n\t\t$F1 public $F3703 propose $F2 { \n\t\t\tLinkedList $F5020 resultList = new LinkedList $F5020 $F2 ; \n\t\t\tfor ( $F2612 clazz : ParserRegistry . getClassesIn ( registryKey ) ) { \n\t\t\t\tif ( clazz . isAssignableFrom ( ThirdPartyParseable . class ) && $F19101 ( clazz ) . contentEquals ( classSimpleName ) && $F37558 ( Modifier , clazz ) ) $F528 ( resultList , clazz ) } \n\t\t\treturn resultList . toArray ( $F4528367 ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F57800 public static Long tryParse ( String string ) { \n\tif ( checkNotNull ( string ) . isEmpty ( ) ) $F2200 boolean negative = $F43979 ( string ) ; \n\t$F103704 ( index , negative ) if $F23242 ( index , string ) $F2200 int digit = $F12045 ( string , index ) - STRING00 ; \n\tif $F134780 ( digit ) $F2200 long accum = - digit ; \n\twhile $F16084 ( index , string ) { \n\t\tdigit = $F12045 ( string , index ) - STRING00 ; \n\t\tif ( $F134779 ( digit ) || accum < Long . MIN_VALUE / INT00 ) $F2200 accum *= INT00 ; \n\t\tif ( accum < Long . MIN_VALUE + digit ) $F2200 accum -= digit ; \n\t\t} \n\tif ( negative ) $F356 ( accum ) else if $F231645 ( accum , Long ) $F2200 else { \n\t\treturn - accum ; \n\t\t} \n\t} \n"}, {"code": "public $F21 tokenise ( String string ) { \n\tString str = string ; \n\tif $F90672 ( str ) $F2200 $F95965 ( list ) $F40810 ( length , delimiter ) $F3751 ( idx , str , delimiter ) while $F3752 ( idx ) { \n\t\t$F2532 ( token , str , idx ) str = str . substring ( idx + length ) ; \n\t\tif ( trimTokens ) $F159825 ( token ) if ( ! skimEmpty || $F1215 ( token ) ) $F529 ( list , token ) $F1085748 ( idx , str , delimiter ) } \n\tif $F100166 ( str ) { \n\t\tif ( trimTokens ) $F159825 ( str ) $F528 ( list , str ) } \n\t$F90535 ( tokens , list ) $F88953 ( list , tokens ) return tokens ; \n\t} \n"}, {"code": "$F1 protected Object doExec ( Element element , Object scope , String propertyPath , Object ... arguments ) throws TemplateException { \n\tif ( $F14427 ( propertyPath ) && ConverterRegistry . hasType ( $F298 ( scope ) ) ) { \n\t\tthrow new TemplateException $F6 ; \n\t\t} \n\t$F4728 ( value ) Format format = ( Format ) arguments [ INT00 ] ; \n\tif $F268 ( format ) { \n\t\tvalue = this . content . getString ( scope , propertyPath , format ) ; \n\t\t} \n\telse { \n\t\tObject object = this . content . getObject ( scope , propertyPath ) ; \n\t\tif $F268 ( object ) { \n\t\t\tif ( ! ConverterRegistry . hasType ( $F298 ( object ) ) ) { \n\t\t\t\tthrow new TemplateException $F2756 ( element ) ; \n\t\t\t\t} \n\t\t\tvalue = $F14038 ( ConverterRegistry ) . asString ( object ) ; \n\t\t\t} \n\t\t} \n\t$F2201 ( value ) return new AttrImpl $F2756 ( value ) ; \n\t} \n"}, {"code": "public static SecureStorage createSecureStorage ( Main main ) throws IllegalAccessException { \n\tif ( ! exists ) { \n\t\tSecureStorage secureStorage = new SecureStorageImpl ( main ) ; \n\t\texists = true ; \n\t\t$F1357 ( SecureStorageImpl , secureStorage ) return secureStorage ; \n\t\t} \n\tthrow new IllegalAccessException $F6 ; \n\t} \n"}, {"code": "$F1 public void store ( PluginDescriptor descriptor , SecureContainer container ) { \n\t$F129099 clearTextData = container . getClearTextData ( ) ; \n\tHashMap $F182786 cryptData = container . getCryptData ( ) ; \n\tSecretKey secretKey = retrieveKey ( ) ; \n\tSecurityFunctions module = new SecurityFunctions $F2 ; \n\tfor ( $F1975 key : $F7837 ( cryptData ) ) { \n\t\tclearTextData . put ( module . decryptAES ( key , secretKey ) , module . decryptAES ( $F94142 ( cryptData , key , secretKey ) ) ) ; \n\t\t$F6953 ( cryptData , key ) } \n\tcontainer . setCryptData ( cryptData ) ; \n\tcontainers . put ( descriptor . getSecureID ( ) , container ) ; \n\tsaveContainers ( ) ; \n\t} \n"}, {"code": "private void saveContainers $F2 { \n\tString workingDir = getMain ( ) . getFileSystemManager ( ) . getSystemDataLocation ( ) . getAbsolutePath ( ) ; \n\tfinal String containerFile = $F1500415 ( workingDir , File ) ; \n\ttry { \n\t\t$F80655 ( fileOut , containerFile ) $F40822 ( out , fileOut ) $F40824 ( out , containers ) $F1109 ( out ) $F1109 ( fileOut ) } \n\t$F182731 ( logger , e ) } \n"}, {"code": "private HashMap < SecretKey , SecureContainer > retrieveContainers $F2 { \n\tHashMap < SecretKey , SecureContainer > containers = null ; \n\tString workingDir = getMain ( ) . getFileSystemManager ( ) . getSystemDataLocation ( ) . getAbsolutePath ( ) ; \n\tfinal String containerFile = $F1500415 ( workingDir , File ) ; \n\ttry { \n\t\t$F1100 ( fileIn , containerFile ) $F98139 ( in , fileIn ) $F60640 ( o , in ) if ( o instanceof HashMap ) { \n\t\t\tcontainers = ( HashMap ) o ; \n\t\t\t} \n\t\t$F1109 ( in ) $F1109 ( fileIn ) } \n\tcatch ( FileNotFoundException e ) $F2200 catch ( IOException | ClassNotFoundException e ) $F5573 ( logger , e ) return containers ; \n\t} \n"}, {"code": "private SecretKey retrieveKey $F2 { \n\tSecretKey key = null ; \n\ttry { \n\t\tString workingDir = getMain ( ) . getFileSystemManager ( ) . getSystemLocation ( ) . getAbsolutePath ( ) ; \n\t\tfinal String keyStoreFile = $F1500415 ( workingDir , File ) ; \n\t\tKeyStore $F6248 ( keyStore , createKeyStore , keyStoreFile ) ; \n\t\tKeyStore . PasswordProtection keyPassword = new KeyStore . PasswordProtection ( $F163641 ) ; \n\t\tKeyStore . Entry entry = keyStore . getEntry ( STRING00 , keyPassword ) ; \n\t\tkey = ( ( KeyStore . SecretKeyEntry ) entry ) . getSecretKey ( ) ; \n\t\t} \n\tcatch ( NullPointerException e ) $F2200 catch ( UnrecoverableEntryException | NoSuchAlgorithmException | KeyStoreException e ) $F5573 ( logger , e ) return key ; \n\t} \n"}, {"code": "private void storeKey ( SecretKey key ) { \n\tfinal String keyStoreFile = getMain ( ) . getFileSystemManager ( ) . getSystemLocation ( ) + File . separator + STRING00 ; \n\tKeyStore $F6248 ( keyStore , createKeyStore , keyStoreFile ) ; \n\ttry { \n\t\tKeyStore . SecretKeyEntry keyStoreEntry = new KeyStore . SecretKeyEntry ( key ) ; \n\t\tKeyStore . PasswordProtection keyPassword = new KeyStore . PasswordProtection ( $F163641 ) ; \n\t\tkeyStore . setEntry ( STRING00 , keyStoreEntry , keyPassword ) ; \n\t\tkeyStore . store ( $F11930 ( keyStoreFile ) , $F163641 ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException | KeyStoreException | CertificateException | IOException e ) $F5573 ( logger , e ) } \n"}, {"code": "private KeyStore createKeyStore $F1195 ( fileName , password ) { \n\t$F2595 ( file , fileName ) KeyStore keyStore = null ; \n\ttry { \n\t\t$F2621 ( keyStore , KeyStore ) if $F2486 ( file ) { \n\t\t\tkeyStore . load ( $F1097 ( file ) , $F17783 ( password ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tkeyStore . load ( $F23355 ) ; \n\t\t\tkeyStore . store ( $F11930 ( fileName ) , $F17783 ( password ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( CertificateException | IOException | KeyStoreException | NoSuchAlgorithmException e ) $F5573 ( logger , e ) return keyStore ; \n\t} \n"}, {"code": "public static $F1975 decodeHex $F88659 ( data ) throws DecoderException { \n\t$F58133 ( len , data ) if $F62768 ( len ) { \n\t\tthrow new DecoderException $F6 ; \n\t\t} \n\t$F1975 out = new byte [ len > > INT00 ] ; \n\tfor ( $F102735 ( i , j ) ; \n\tj < len ; \n\ti ++ ) { \n\t\tint f = toDigit ( data [ j ] , j ) < < INT00 ; \n\t\tj ++ ; \n\t\tf = f | toDigit ( data [ j ] , j ) ; \n\t\tj ++ ; \n\t\tout [ i ] = $F131536 ( f ) ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "protected static int toDigit ( char ch , int index ) throws DecoderException { \n\tint digit = Character . digit ( ch , INT00 ) ; \n\tif $F9467 ( digit ) { \n\t\tthrow new DecoderException $F61905 ( ch , index ) ; \n\t\t} \n\treturn digit ; \n\t} \n"}, {"code": "public static $F2666 encodeHex $F2665 ( data ) { \n\t$F58133 ( l , data ) $F2666 out = new char [ l < < INT00 ] ; \n\tfor ( $F382971 ( i , j , l ) ) { \n\t\tout [ j ++ ] = DIGITS [ ( $F310753 ( data , i ) ) > > > INT00 ] ; \n\t\tout [ j ++ ] = DIGITS [ $F310753 ( data , i ) ] ; \n\t\t} \n\treturn out ; \n\t} \n"}, {"code": "public Object decode ( Object object ) throws DecoderException { \n\ttry { \n\t\t$F2666 charArray = object instanceof String ? $F57885 ( object ) . toCharArray ( ) : $F162301 ( object ) ; \n\t\t$F867 ( decodeHex , charArray ) } \n\tcatch ( ClassCastException e ) { \n\t\tthrow new DecoderException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public Object encode ( Object object ) throws EncoderException { \n\ttry { \n\t\t$F1975 byteArray = object instanceof String ? $F57885 ( object ) . getBytes ( ) : $F162293 ( object ) ; \n\t\t$F867 ( encodeHex , byteArray ) } \n\tcatch ( ClassCastException e ) { \n\t\tthrow new EncoderException $F26312 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "static TrialContext makeContext ( UUID trialId , int trialNumber , Experiment experiment ) { \n\treturn new TrialContext $F2144 ( trialId , trialNumber , experiment ) ; \n\t} \n"}, {"code": "public void add ( JComponent component , String label ) { \n\t$F528 ( components , component ) $F2725 ( component2LabelMap , component , label ) if $F3415 ( components ) $F529 ( baseComponent , component ) else if $F4340 ( components ) { \n\t\t$F168495 ( baseComponent ) for ( JComponent c : components ) { \n\t\t\ttabbedPane . add ( $F65956 ( component2LabelMap , c ) ) ; \n\t\t\t} \n\t\t$F528 ( baseComponent , tabbedPane ) } \n\tif ( component instanceof NodeComponent ) { \n\t\t( ( NodeComponent ) component ) . addedToNode ( this ) ; \n\t\t} \n\t} \n"}, {"code": "public String getLabel ( JComponent component ) { \n\t$F75598 ( label , component2LabelMap , component ) if $F268 ( label ) $F356 ( label ) else $F4801 } \n"}, {"code": "public static $F4357 mapBean $F816803 ( bean , exclude ) { \n\t$F1978757 ( excludes ) if $F337661 ( StringUtils , exclude ) $F529 ( excludes , exclude ) $F4282 ( mapBean , bean , excludes ) } \n"}, {"code": "public static $F4357 mapBean ( final Object bean , $F436484 ( excludes ) ) { \n\t$F5090 ( excludes ) final $F3244 $F140472 ( emptyParams ) ; \n\tfinal $F335359 methods = $F346799 ( bean ) ; \n\t$F1951613 ( fields ) for ( final Method method : methods ) { \n\t\tif ( $F350698 ( method ) > INT00 ) $F42718 $F213834 ( name , method ) if ( $F5666 ( name ) && $F6949 ( excludes , name ) ) { \n\t\t\t$F3509 ( LOG , name ) try { \n\t\t\t\tfinal Object $F209013 ( returnVal , method , bean , emptyParams ) ; \n\t\t\t\t$F3509 ( LOG , returnVal ) $F141496 ( beanValue , String , returnVal ) final String beanData = StringUtils . substringAfter ( name , STRING00 ) ; \n\t\t\t\tfields . put ( StringUtils . uncapitalize ( beanData ) , beanValue ) ; \n\t\t\t\t} \n\t\t\tcatch ( final IllegalAccessException e ) { \n\t\t\t\tLOG . debug ( STRING00 + $F384872 ( method ) , e ) ; \n\t\t\t\t} \n\t\t\tcatch ( final InvocationTargetException e ) { \n\t\t\t\tLOG . debug ( STRING00 + $F384872 ( method ) , e ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn fields ; \n\t} \n"}, {"code": "public static void populateBean ( final Object bean , $F229410 ( params ) ) { \n\tfinal $F335359 methods = $F346799 ( bean ) ; \n\tfor ( final Method method : methods ) { \n\t\t$F381096 ( types , method ) $F118058 ( length , types ) if $F319 ( length ) $F42718 $F213834 ( name , method ) if $F12498 ( name ) $F42718 final String fieldName = $F20064 ( name ) . toLowerCase ( ) ; \n\t\t$F358736 ( str , params , fieldName ) $F90687 ( str ) $F318478 ( val , str ) final $F2612 $F26393 ( type , types ) ; \n\t\tfinal Object toAssign ; \n\t\tif ( type . isAssignableFrom ( $F4868 ) ) $F1619 ( toAssign , val ) else if ( type . isAssignableFrom ( $F15889 ) ) $F83697 ( toAssign , Integer , val ) else if ( type . isAssignableFrom ( $F48913 ) ) $F24579 ( toAssign , toBoolean , val ) else if ( type . isAssignableFrom ( $F3292 ) ) $F24579 ( toAssign , toBoolean , val ) else if ( type . isAssignableFrom ( $F229764 ) ) $F34864 ( toAssign , val ) else if ( type . isAssignableFrom ( $F379742 ) ) { \n\t\t\ttry $F334135 ( toAssign , val ) catch ( final URISyntaxException e ) { \n\t\t\t\t$F5572 ( LOG , e ) $F61623 ( e ) } \n\t\t\t} \n\t\telse if ( type . isAssignableFrom ( $F4893 ) ) $F83697 ( toAssign , Integer , val ) else if ( type . isAssignableFrom ( $F15889 ) ) $F83697 ( toAssign , Integer , val ) else if ( type . isAssignableFrom ( $F4920 ) ) { \n\t\t\t$F438269 ( toAssign , Float , val ) ; \n\t\t\t} \n\t\telse if ( type . isAssignableFrom ( $F379859 ) ) { \n\t\t\t$F438269 ( toAssign , Float , val ) ; \n\t\t\t} \n\t\telse if ( type . isAssignableFrom ( $F4911 ) ) $F1666920 ( toAssign , Double , val ) else if ( type . isAssignableFrom ( $F379856 ) ) $F1666920 ( toAssign , Double , val ) else if ( type . isAssignableFrom ( $F4884 ) ) $F318495 ( toAssign , Long , val ) else if ( type . isAssignableFrom ( $F73980 ) ) $F318495 ( toAssign , Long , val ) else { \n\t\t\tfinal String msg = $F11903 ( type , fieldName ) ; \n\t\t\t$F27417 ( LOG , msg ) $F75350 ( msg ) } \n\t\ttry $F128916 ( method , bean , toAssign ) catch ( final IllegalArgumentException e ) $F5573 ( LOG , e ) catch ( final IllegalAccessException e ) $F5573 ( LOG , e ) catch ( final InvocationTargetException e ) $F5573 ( LOG , e ) } \n\t} \n"}, {"code": "public boolean anyMatch ( String lookupAny ) { \n\treturn $F38931 ( keyMatch , lookupAny , nameMatch ) || tagMatch ( lookupAny ) || ticketMatch ( lookupAny ) ; \n\t} \n"}, {"code": "public boolean keyMatch ( String lookupKey ) { \n\tif $F6132 ( key ) $F81572 ( technicalName , lookupKey ) else $F81572 ( key , lookupKey ) } \n"}, {"code": "private static String mergeTags ( RoxableTest mAnnotation , RoxableTestClass cAnnotation ) { \n\t$F5088 ( tags ) if $F268 ( mAnnotation ) { \n\t\ttags . addAll ( Arrays . asList ( $F93841 ( mAnnotation ) ) ) ; \n\t\t} \n\tif $F268 ( cAnnotation ) { \n\t\ttags . addAll ( Arrays . asList ( $F93841 ( cAnnotation ) ) ) ; \n\t\t} \n\treturn Arrays . toString ( $F193953 ( tags ) ) ; \n\t} \n"}, {"code": "private static String mergeTickets ( RoxableTest mAnnotation , RoxableTestClass cAnnotation ) { \n\t$F5088 ( tickets ) if $F268 ( mAnnotation ) { \n\t\ttickets . addAll ( Arrays . asList ( mAnnotation . tickets ( ) ) ) ; \n\t\t} \n\tif $F268 ( cAnnotation ) { \n\t\ttickets . addAll ( Arrays . asList ( cAnnotation . tickets ( ) ) ) ; \n\t\t} \n\treturn Arrays . toString ( $F193953 ( tickets ) ) ; \n\t} \n"}, {"code": "public void copyPropertiesfromAnother ( CloudControlledMojo $F45 ccmojo ) { \n\tthis . setApplication ( $F1532710 ( ccmojo ) ) ; \n\tthis . setDeployment ( $F42176 ( ccmojo ) ) ; \n\tthis . setCommitId ( ccmojo . getCommitId ( ) ) ; \n\tthis . setLog ( $F476080 ( ccmojo ) ) ; \n\tthis . setPluginContext ( ccmojo . getPluginContext ( ) ) ; \n\tthis . setBaseDir ( $F1409389 ( ccmojo ) ) ; \n\t} \n"}, {"code": "public String retrieveBranch $F2 throws MojoExecutionException { \n\ttry { \n\t\treturn getRepository ( ) . getBranch ( ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tthrow new MojoExecutionException ( $F9272 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public static String getSLLL $F22 ( soilParas ) { \n\tif ( soilParas != null && $F109194 ( soilParas ) ) { \n\t\treturn divide ( calcMoisture1500Kpa ( $F30790 ( soilParas ) ) , STRING00 , INT00 ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "public static String getSLDUL $F22 ( soilParas ) { \n\tif ( soilParas != null && $F109194 ( soilParas ) ) { \n\t\treturn divide ( calcMoisture33Kpa ( $F30790 ( soilParas ) ) , STRING00 , INT00 ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "public static String getSLSAT $F22 ( soilParas ) { \n\tif ( soilParas != null && $F109194 ( soilParas ) ) { \n\t\treturn divide ( calcSaturatedMoisture ( $F30790 ( soilParas ) ) , STRING00 , INT00 ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "public static String getSKSAT $F22 ( soilParas ) { \n\tif ( soilParas != null && $F109194 ( soilParas ) ) { \n\t\tif $F109195 ( soilParas ) { \n\t\t\treturn divide ( calcSatBulk ( soilParas [ INT00 ] , soilParas [ INT00 ] , soilParas [ INT00 ] , divide ( $F24322 ( soilParas ) ) ) , STRING00 , INT00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn divide ( calcSatMatric ( $F30790 ( soilParas ) ) , STRING00 , INT00 ) ; \n\t\t\t} \n\t\t} \n\telse $F2200 } \n"}, {"code": "public static String getSLBDM $F22 ( soilParas ) { \n\tif ( soilParas != null && $F109194 ( soilParas ) ) { \n\t\tif $F109195 ( soilParas ) { \n\t\t\treturn round ( calcGravePlusDensity ( soilParas [ INT00 ] , soilParas [ INT00 ] , soilParas [ INT00 ] , divide ( $F24322 ( soilParas ) ) ) , INT00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn round ( calcNormalDensity ( $F30790 ( soilParas ) ) , INT00 ) ; \n\t\t\t} \n\t\t} \n\telse $F2200 } \n"}, {"code": "public static String calcMoisture1500Kpa $F16060 ( slsnd , slcly , omPct ) { \n\tif ( ( $F10507 ( slsnd , checkPctVal ) ) == null || ( $F10507 ( slcly , checkPctVal ) ) == null || ( $F10507 ( omPct , checkPctVal ) ) == null ) $F15467 ( LOG ) String ret = sum ( $F4501 ( product , slsnd ) , $F4501 ( product , slcly ) , $F4501 ( product , omPct ) , $F811 ( product , slsnd , omPct ) , $F811 ( product , slcly , omPct ) , $F811 ( product , slsnd , slcly ) , STRING00 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcMoisture33Kpa $F16060 ( slsnd , slcly , omPct ) { \n\tString ret ; \n\tif ( ( $F10507 ( slsnd , checkPctVal ) ) == null || ( $F10507 ( slcly , checkPctVal ) ) == null || ( $F10507 ( omPct , checkPctVal ) ) == null ) $F15467 ( LOG ) $F16027 ( mt33Fst , calcMoisture33KpaFst , slsnd , slcly , omPct ) ret = sum ( product ( $F2754 ( pow , mt33Fst ) , STRING00 ) , $F2754 ( product , mt33Fst ) , STRING00 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "private static String calcMoisture33KpaFst $F16060 ( slsnd , slcly , omPct ) { \n\tString ret = sum ( $F4501 ( product , slsnd ) , $F4501 ( product , slcly ) , $F4501 ( product , omPct ) , $F811 ( product , slsnd , omPct ) , $F811 ( product , slcly , omPct ) , $F811 ( product , slsnd , slcly ) , STRING00 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcSaturatedMoisture $F16060 ( slsnd , slcly , omPct ) { \n\t$F16027 ( mt33 , calcMoisture33Kpa , slsnd , slcly , omPct ) $F16027 ( mtSAT33 , calcMoistureSAT33Kpa , slsnd , slcly , omPct ) String ret = sum ( mt33 , mtSAT33 , $F2754 ( product , slsnd ) , STRING00 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcNormalDensity $F16060 ( slsnd , slcly , omPct ) { \n\t$F16027 ( satMt , calcSaturatedMoisture , slsnd , slcly , omPct ) String ret = product ( $F4501 ( substract , satMt ) , STRING00 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcAdjustedDensity $F1245 ( slsnd , slcly , omPct , df ) { \n\tif ( compare ( df , STRING00 , CompareMode . NOTLESS ) && compare ( df , STRING00 , CompareMode . NOTGREATER ) ) { \n\t\t$F16027 ( normalDensity , calcNormalDensity , slsnd , slcly , omPct ) $F5618 ( ret , product , normalDensity , df ) $F3509 ( LOG , ret ) return ret ; \n\t\t} \n\telse $F212308 ( LOG , df ) } \n"}, {"code": "public static String calcAdjustedSaturatedMoisture $F1245 ( slsnd , slcly , omPct , df ) { \n\t$F10215 ( adjDensity , calcAdjustedDensity , slsnd , slcly , omPct , df ) String ret = substract ( STRING00 , $F2754 ( divide , adjDensity ) ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcAdjustedMoisture33Kpa $F1245 ( slsnd , slcly , omPct , df ) { \n\t$F16027 ( mt33 , calcMoisture33Kpa , slsnd , slcly , omPct ) $F16027 ( satMt , calcSaturatedMoisture , slsnd , slcly , omPct ) $F10215 ( adjSatMt , calcAdjustedSaturatedMoisture , slsnd , slcly , omPct , df ) String ret = substract ( mt33 , product ( substract ( satMt , adjSatMt ) , STRING00 ) ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcAdjustedMoistureSAT33Kpa $F1245 ( slsnd , slcly , omPct , df ) { \n\t$F10215 ( adjSatMt , calcAdjustedSaturatedMoisture , slsnd , slcly , omPct , df ) $F10215 ( adjMt33 , calcAdjustedMoisture33Kpa , slsnd , slcly , omPct , df ) $F5618 ( ret , substract , adjSatMt , adjMt33 ) $F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "private static String calcLamda $F16060 ( slsnd , slcly , omPct ) { \n\tString mt33 = divide ( $F209 ( calcMoisture33Kpa , slsnd , slcly , omPct ) , STRING00 ) ; \n\tString mt1500 = divide ( $F209 ( calcMoisture1500Kpa , slsnd , slcly , omPct ) , STRING00 ) ; \n\tString ret = divide ( $F63469 ( substract , log , mt33 , mt1500 ) , CONST_LN1500_LN33 ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcSatMatric $F16060 ( slsnd , slcly , omPct ) { \n\tString satMt = divide ( $F209 ( calcSaturatedMoisture , slsnd , slcly , omPct ) , STRING00 ) ; \n\tString mt33 = divide ( $F209 ( calcMoisture33Kpa , slsnd , slcly , omPct ) , STRING00 ) ; \n\t$F16027 ( lamda , calcLamda , slsnd , slcly , omPct ) String ret = product ( STRING00 , pow ( substract ( satMt , mt33 ) , $F4501 ( substract , lamda ) ) ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcGravePlusDensity $F1245 ( slsnd , slcly , omPct , slcf ) { \n\t$F16027 ( slbdm , calcNormalDensity , slsnd , slcly , omPct ) $F6377 ( alpha , divide , slbdm ) String slcfv = divide ( product ( alpha , slcf ) , substract ( STRING00 , slcf , $F811 ( product , slcf , alpha ) ) ) ; \n\tString ret = sum ( product ( slbdm , $F4501 ( substract , slcfv ) ) , $F2754 ( product , slcfv ) ) ; \n\t$F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public static String calcSatBulk $F1245 ( slsnd , slcly , omPct , slcf ) { \n\t$F16027 ( satMatric , calcSatMatric , slsnd , slcly , omPct ) $F16027 ( slbdm , calcNormalDensity , slsnd , slcly , omPct ) $F6377 ( alpha , divide , slbdm ) String ratio = divide ( $F4501 ( substract , slcf ) , substract ( STRING00 , slcf , $F811 ( product , slcf , alpha ) ) ) ; \n\t$F5618 ( ret , product , satMatric , ratio ) $F3509 ( LOG , ret ) return ret ; \n\t} \n"}, {"code": "public WhereCondition WHERE ( WhereCondition whereCondition ) { \n\tcheckTokenOrderIsCorrect ( ESqlToken . WHERE ) ; \n\t$F1218 ( mSgSQL ) mSgSQL . append ( whereCondition . toWhereConditionPart ( ) ) ; \n\t$F1218 ( mSgSQL ) $F67623 ( WhereCondition ) } \n"}, {"code": "public WhereCondition Col ( String columnName ) { \n\t$F1212 ( mSgSQL , columnName ) checkTokenOrderIsCorrect ( ESqlToken . COLUMN ) ; \n\t$F67623 ( WhereCondition ) } \n"}, {"code": "public WhereCondition Val ( Object val ) { \n\tif $F25224 ( val ) $F1219 ( mSgSQL ) else { \n\t\t$F1218 ( mSgSQL ) $F7255 ( mSgSQL , val ) $F1218 ( mSgSQL ) } \n\tcheckTokenOrderIsCorrect ( ESqlToken . VALUE ) ; \n\t$F67623 ( WhereCondition ) } \n"}, {"code": "private void checkTokenOrderIsCorrect ( ESqlToken tokenTobeAdded ) { \n\tswitch ( tokenTobeAdded ) { \n\t\tcase COLUMN : if ( mPreviousToken != ESqlToken . CONDITION && mPreviousToken != ESqlToken . NOTHING ) { \n\t\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t\t} \n\t\t$F332 case OPERATOR : if ( mPreviousToken != ESqlToken . COLUMN ) { \n\t\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t\t} \n\t\t$F332 case VALUE : if ( mPreviousToken != ESqlToken . OPERATOR ) { \n\t\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t\t} \n\t\t$F332 case CONDITION : if ( mPreviousToken != ESqlToken . VALUE && mPreviousToken != ESqlToken . WHERE ) { \n\t\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t\t} \n\t\t$F332 case WHERE : if ( mPreviousToken != ESqlToken . CONDITION && mPreviousToken != ESqlToken . NOTHING ) { \n\t\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t\t} \n\t\t$F332 $F2377 } \n\tmPreviousToken = tokenTobeAdded ; \n\t} \n"}, {"code": "String toWhereConditionPart $F2 { \n\tif ( mPreviousToken != ESqlToken . VALUE && mPreviousToken != ESqlToken . WHERE ) { \n\t\tthrow new D6RuntimeException ( $F3902 + $F797 ( mSgSQL ) + STRING00 ) ; \n\t\t} \n\t$F1226 ( mSgSQL ) } \n"}, {"code": "public static Long parseLong ( String param ) { \n\ttry { \n\t\tif $F337661 ( StringUtils , param ) $F15111 ( Long , param ) } \n\tcatch ( Exception e ) $F9654 ( param ) $F724 } \n"}, {"code": "public static Integer parseInt ( String param ) { \n\ttry { \n\t\tif $F337661 ( StringUtils , param ) $F15111 ( Integer , param ) } \n\tcatch ( Exception e ) $F9654 ( param ) $F724 } \n"}, {"code": "public static Boolean parseBoolean ( Integer param ) { \n\t$F90659 ( param ) $F544188 ( param ) $F232 } \n"}, {"code": "public static boolean isWhitespace ( int ch ) { \n\treturn $F1954516 ( CHAR_WHITE_SPACE , ch , TAB ) || LF == ch || CR == ch ; \n\t} \n"}, {"code": "public static boolean isEmpty $F3019 ( target , specialValueAsEmpty ) { \n\t$F50634 ( isEmpty , target ) return matcher ( target ) . isEmpty ( specialValueAsEmpty ) ; \n\t} \n"}, {"code": "public static boolean isBlank $F3019 ( target , specialValueAsEmpty ) { \n\tif $F309775 ( Strings , target ) $F233 return isEmpty ( WHITESPACE . removeFrom ( target ) , specialValueAsEmpty ) ; \n\t} \n"}, {"code": "public static String chop ( String target ) { \n\t$F61710 ( isEmpty , target , EMPTY ) int $F12037 ( len , target ) , lastIdx = $F3745 ; \n\tif ( len >= INT00 && $F48429 ( target , len ) == LF && $F48429 ( target , len ) == CR ) { \n\t\t$F2016 ( len , EMPTY ) $F16051 ( lastIdx ) } \n\treturn replace ( target ) . afters ( lastIdx ) . byNone ( ) . last ( ) ; \n\t} \n"}, {"code": "public static boolean contains $F3019 ( target , containWith ) $F60738 ( contains , target , Arrays , containWith ) "}, {"code": "public static boolean contains $F101521 ( target , containWith ) { \n\t$F56352 ( isNull , target ) return matcher ( target ) . contains ( containWith ) ; \n\t} \n"}, {"code": "public static int indexAny $F3019 ( target , indexWith ) { \n\treturn indexAny ( target , INT00 , $F998 ( Arrays , indexWith ) ) ; \n\t} \n"}, {"code": "public static int indexAny ( String target , Integer fromIndex , String ... indexWith ) { \n\treturn indexAny ( target , fromIndex , $F998 ( Arrays , indexWith ) ) ; \n\t} \n"}, {"code": "public static int indexAny ( String target , Integer fromIndex , $F14584 ( indexWith ) ) { \n\t$F61710 ( isNull , target , INDEX_NONE_EXISTS ) return matcher ( target ) . indexs ( fromIndex , checkNotNull ( indexWith ) . toArray ( $F90532 ( indexWith ) ) ) ; \n\t} \n"}, {"code": "public static boolean endAny $F3019 ( target , endWith ) $F60738 ( endAny , target , Arrays , endWith ) "}, {"code": "public static boolean endAny $F101521 ( target , endWith ) { \n\t$F56352 ( isNull , target ) return matcher ( target ) . ends ( endWith ) ; \n\t} \n"}, {"code": "public static boolean startAny $F3019 ( target , startWith ) { \n\treturn startAny ( target , INT00 , $F998 ( Arrays , startWith ) ) ; \n\t} \n"}, {"code": "public static boolean startAny ( String target , Integer toffset , String ... startWith ) { \n\treturn startAny ( target , toffset , $F998 ( Arrays , startWith ) ) ; \n\t} \n"}, {"code": "public static boolean startAny ( String target , Integer toffset , $F14584 ( startWith ) ) { \n\t$F56352 ( isNull , target ) return matcher ( target ) . starts ( toffset , startWith ) ; \n\t} \n"}, {"code": "public static Betner betn $F16060 ( target , left , right ) { \n\treturn betn ( target ) . between ( left , right ) ; \n\t} \n"}, {"code": "public static Betner betnNext $F1195 ( target , leftSameWithRight ) { \n\treturn betn ( target ) . betweenNext ( leftSameWithRight ) ; \n\t} \n"}, {"code": "public static Betner betnLast $F1195 ( target , leftSameWithRight ) { \n\treturn betn ( target ) . betweenLast ( leftSameWithRight ) ; \n\t} \n"}, {"code": "public static Betner after $F1195 ( target , separator ) { \n\treturn betn ( target ) . after ( separator ) ; \n\t} \n"}, {"code": "public static Betner before $F1195 ( target , separator ) { \n\treturn betn ( target ) . before ( separator ) ; \n\t} \n"}, {"code": "public static boolean successful ( HttpResponse response ) { \n\tint status = assertNotNull ( response ) . getStatusLine ( ) . getStatusCode ( ) ; \n\treturn $F379249 ( status ) ; \n\t} \n"}, {"code": "public static boolean status ( HttpResponse response , int code , int ... codes ) { \n\tint status = assertNotNull ( response ) . getStatusLine ( ) . getStatusCode ( ) ; \n\t$F23159 ( status , code ) if $F124033 ( codes ) { \n\t\tfor ( int statusCode : codes ) { \n\t\t\t$F23159 ( status , statusCode ) } \n\t\t} \n\t$F213 } \n"}, {"code": "public static boolean async ( InvocationContext context ) { \n\treturn ! isDetached ( context , Async . class ) && ( $F12746 ( context ) . isAnnotationPresent ( Async . class ) || ( $F713495 ( context ) . isAnnotationPresent ( Async . class ) ) ) ; \n\t} \n"}, {"code": "public static boolean hierarchyTerminal ( $F2613 ( type ) , $F14584 ( packagePrefixes ) ) { \n\t$F2250 ( name , type ) if $F14587 ( packagePrefixes ) { \n\t\tfor ( String packagePrefix : packagePrefixes ) { \n\t\t\tif $F19401 ( name , packagePrefix ) $F1668 } \n\t\t$F232 } \n\treturn $F308422 ( name ) ; \n\t} \n"}, {"code": "private String buildFacetString $F93279 ( facetNames , facetValues ) { \n\t$F1200 ( builder ) if $F45435 ( facetNames , facetValues ) { \n\t\t$F3747 ( pairsCount ) if $F58479 ( facetNames , facetValues ) { \n\t\t\tpairsCount = $F67014 ( facetNames , facetValues ) ? $F3413 ( facetValues ) : $F3413 ( facetNames ) ; \n\t\t\t$F16516 ( log ) } \n\t\telse $F85302 ( pairsCount , facetNames ) for ( $F6610 ( i , pairsCount ) ) { \n\t\t\ttry { \n\t\t\t\t$F1232 ( builder ) ( $F198 ( facetNames , i ) ) . append ( STRING00 ) . append ( URLEncoder . encode ( $F198 ( facetValues , i ) , STRING00 ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( UnsupportedEncodingException ignore ) $F1645 } \n\t\t} \n\telse $F52772 ( log ) $F1226 ( builder ) } \n"}, {"code": "public $F3244 executeMultiplePreparedStatements ( $F21 statements , Collection inParams ) throws SQLException { \n\t$F210827 ( result ) if ( statements . length == $F3413 ( inParams ) ) { \n\t\t$F195833 ( result , inParams ) ; \n\t\t$F380799 ( conn ) $F380801 ( conn , dataSource ) $F396485 ( conn ) try { \n\t\t\t$F680835 ( inParamsIt , inParams ) $F1987 ( count ) while $F11310 ( inParamsIt ) { \n\t\t\t\t$F3244 params = ( $F3244 ) $F11311 ( inParamsIt ) ; \n\t\t\t\tresult [ count ] = executePreparedStatement ( statements [ count ] , new StatementInput ( params ) , false , conn ) ; \n\t\t\t\tcount ++ ; \n\t\t\t\t} \n\t\t\t$F374904 ( conn ) } \n\t\tcatch ( SQLException e ) $F4760 ( e ) $F116932 ( conn ) } \n\telse $F382730 return result ; \n\t} \n"}, {"code": "public $F57272 executeBatchPreparedStatement ( String statement , Collection inParamsBatch ) throws SQLException $F56238 ( executeBatchPreparedStatement , statement , inParamsBatch ) "}, {"code": "public $F57272 executeBatchPreparedStatement ( String statement , Collection inParamsBatch , boolean isCallable ) throws SQLException { \n\t$F380799 ( conn ) $F403331 ( ps ) try { \n\t\t$F380801 ( conn , dataSource ) $F396485 ( conn ) if ( isCallable ) { \n\t\t\tps = conn . prepareCall ( statement ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F1754961 ( ps , conn , statement ) } \n\t\t$F680835 ( x , inParamsBatch ) $F1292 ( System ) ( new LogEntry ( $F356082 ( statement , inParamsBatch ) ) ) ; \n\t\twhile $F11310 ( x ) { \n\t\t\t$F3244 inParams = ( $F3244 ) $F11311 ( x ) ; \n\t\t\tfor ( int i = INT00 ; \n\t\t\ti < $F27612 ( inParams ) ; \n\t\t\ti ++ ) { \n\t\t\t\ttry { \n\t\t\t\t\tif ( inParams [ i ] instanceof JdbcNullObject ) { \n\t\t\t\t\t\tps . setNull ( i + INT00 , ( ( JdbcNullObject ) inParams [ i ] ) . getType ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tps . setObject ( i + INT00 , inParams [ i ] ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tcatch ( SQLException e ) { \n\t\t\t\t\t$F1292 ( System ) ( new LogEntry ( e ) ) ; \n\t\t\t\t\tthrow new SQLException ( $F320 ( i ) + inParams [ i ] + STRING00 , $F7207 ( statement ) + inParams [ i ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F343917 ( ps ) } \n\t\t$F57272 i = $F403385 ( ps ) ; \n\t\t$F374904 ( conn ) return i ; \n\t\t} \n\tcatch ( SQLException e ) { \n\t\tStringBuffer sb = new StringBuffer ( $F47756 ( e ) + statement + STRING00 ) ; \n\t\t$F680835 ( x , inParamsBatch ) while $F11310 ( x ) { \n\t\t\t$F1218 ( sb ) $F3244 inParams = ( $F3244 ) $F11311 ( x ) ; \n\t\t\tfor ( $F2674 ( i , inParams ) ) { \n\t\t\t\tsb . append ( ( i != INT00 ? STRING00 : STRING00 ) + ( inParams [ i ] instanceof String ? STRING00 : STRING00 ) + inParams [ i ] + ( inParams [ i ] instanceof String ? STRING00 : STRING00 ) ) ; \n\t\t\t\t} \n\t\t\t$F1218 ( sb ) } \n\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , $F320 ( statement ) , sb ) ) ; \n\t\tthrow new SQLException ( $F47756 ( e ) + statement + STRING00 ) ; \n\t\t} \n\t$F164361 ( ps , conn ) } \n"}, {"code": "public ResultSetCopy executeQuery ( String query ) throws SQLException { \n\t$F1292 ( System ) ( new LogEntry $F2821 ( query ) ) ; \n\tResultSetCopy result = null ; \n\tConnection conn ; \n\tif $F268 ( dataSourceReadOnly ) { \n\t\t$F380801 ( conn , dataSourceReadOnly ) } \n\telse { \n\t\t$F380801 ( conn , dataSource ) } \n\t$F438650 ( s , conn ) $F439144 ( rs , s , query ) ; \n\tresult = new ResultSetCopy ( rs , maxRowLog ) ; \n\t$F1109 ( rs ) $F1109 ( conn ) $F1292 ( System ) ( new LogEntry $F2756 ( result ) ) ; \n\treturn result ; \n\t} \n"}, {"code": "public int executeUpdate ( String update ) throws SQLException { \n\t$F1292 ( System ) ( new LogEntry $F2821 ( update ) ) ; \n\t$F529814 ( conn , dataSource ) $F438650 ( s , conn ) int result = $F526652 ( s , update ) ; \n\t$F1109 ( conn ) $F1292 ( System ) ( new LogEntry $F13407 ( result ) ) ; \n\treturn result ; \n\t} \n"}, {"code": "public void process ( $F109288 argq , Object state ) { \n\tString $F92798 ( command , argq ) ; \n\tif $F268 ( command ) { \n\t\t$F138681 ( System ) $F29890 ( System , command ) } \n\t} \n"}, {"code": "static $F1372 T iterate ( Object o , Closure < IterateBean , Object > closure ) { \n\treturn ( T ) iterateNamedObjectFromLeaf ( null , STRING00 , o , closure ) ; \n\t} \n"}, {"code": "static int mergeDelimitedFrom ( InputStream in , $F1975 buf , Object message , Schema schema , boolean decodeNestedMessageAsGroup ) throws IOException { \n\tfinal int $F61219 ( size , in ) ; \n\tif $F9467 ( size ) $F249190 final int len = size < INT00 ? size : CodedInput . readRawVarint32 ( in , size ) ; \n\tif $F2523 ( len ) throw ProtobufException . negativeSize ( ) ; \n\tif $F319 ( len ) { \n\t\tif $F18017 ( len , buf ) { \n\t\t\tthrow new ProtobufException ( $F113408 ( len , buf ) ) ; \n\t\t\t} \n\t\t$F454277 ( fillBufferFrom , in , buf , len ) final ByteArrayInput input = new ByteArrayInput ( $F40542 ( buf , len , decodeNestedMessageAsGroup ) ) ; \n\t\ttry { \n\t\t\tschema . mergeFrom ( input , message ) ; \n\t\t\t} \n\t\tcatch ( ArrayIndexOutOfBoundsException e ) { \n\t\t\tthrow ProtobufException . truncatedMessage ( e ) ; \n\t\t\t} \n\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t} \n\treturn len ; \n\t} \n"}, {"code": "static int mergeDelimitedFrom ( DataInput in , Object message , Schema schema , boolean decodeNestedMessageAsGroup ) throws IOException { \n\tfinal byte $F80523 ( size , in ) ; \n\tfinal int len = INT00 == $F18692 ( size ) ? size : CodedInput . readRawVarint32 ( in , size ) ; \n\tif $F2523 ( len ) throw ProtobufException . negativeSize ( ) ; \n\tif $F319 ( len ) { \n\t\tif ( len > CodedInput . DEFAULT_BUFFER_SIZE && in instanceof InputStream ) { \n\t\t\tfinal CodedInput input = new CodedInput ( new LimitedInputStream ( ( InputStream ) in , len ) , decodeNestedMessageAsGroup ) ; \n\t\t\tschema . mergeFrom ( input , message ) ; \n\t\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F127211 ( buf , len ) in . readFully ( buf , INT00 , len ) ; \n\t\t\tfinal ByteArrayInput input = new ByteArrayInput ( $F40542 ( buf , len , decodeNestedMessageAsGroup ) ) ; \n\t\t\ttry { \n\t\t\t\tschema . mergeFrom ( input , message ) ; \n\t\t\t\t} \n\t\t\tcatch ( ArrayIndexOutOfBoundsException e ) { \n\t\t\t\tthrow ProtobufException . truncatedMessage ( e ) ; \n\t\t\t\t} \n\t\t\tinput . checkLastTagWas ( INT00 ) ; \n\t\t\t} \n\t\t} \n\tif ( ! schema . isInitialized ( message ) ) throw new UninitializedMessageException ( message , schema ) ; \n\treturn len ; \n\t} \n"}, {"code": "public final String getTags ( final Priority priority ) { \n\tif ( priority == Priority . HIGH ) $F356 ( highTags ) else if ( priority == Priority . NORMAL ) $F356 ( normalTags ) else $F356 ( lowTags ) } \n"}, {"code": "public String getPackageCategoryName $F2 { \n\tif $F560 ( hasAnnotations ) { \n\t\tString fileName = $F68814 ( getAnnotations ) . next ( ) . getFileName ( ) ; \n\t\tif $F1202 ( fileName ) { \n\t\t\treturn Messages . Tasks_NamespaceDetail ( ) ; \n\t\t\t} \n\t\t} \n\treturn Messages . Tasks_PackageDetail ( ) ; \n\t} \n"}, {"code": "$F1 public $F1372 T unwrap $F7907 ( clazz ) { \n\treturn AtmosphereResource . class . isAssignableFrom ( clazz ) ? $F14239 ( clazz , resource ) : null ; \n\t} \n"}, {"code": "public IStack $F282 tierOneUp ( boolean newStack ) { \n\t++ tier ; \n\tIStack $F282 result ; \n\tif ( newStack || $F94640 ( tierStack , tier ) ) { \n\t\tif ( logging ) { \n\t\t\tresult = new LogStack $F50 ( new ProcessStack $F50 $F2 , System . out ) ; \n\t\t\t} \n\t\telse { \n\t\t\tresult = new ProcessStack $F50 $F2 ; \n\t\t\t} \n\t\t$F528 ( tierStack , result ) } \n\telse $F28971 ( result , getTierStack ) return result ; \n\t} \n"}, {"code": "protected IStack $F282 removeTierStack $F2 { \n\tIStack $F282 $F51324 ( result , tierStack , tier ) ; \n\t-- tier ; \n\treturn result ; \n\t} \n"}, {"code": "public Primitive getPrimitiveVariable ( Object key ) { \n\tPrimitive object = null ; \n\tfor ( $F58460 ( i , working ) ; \n\ti >= INT00 ; \n\t-- i ) { \n\t\t$F53092 $F199 ( map , working , i ) ; \n\t\tobject = ( Primitive ) $F198 ( map , key ) ; \n\t\t$F1981461 ( object ) } \n\tif $F112 ( object ) object = ( Primitive ) $F198 ( global , key ) ; \n\treturn object ; \n\t} \n"}, {"code": "public Object getVariable ( Object key ) { \n\t$F105146 ( object ) for ( $F58460 ( i , working ) ; \n\ti >= INT00 ; \n\t-- i ) { \n\t\t$F53092 $F199 ( map , working , i ) ; \n\t\t$F13002 ( object , map , key ) $F1981461 ( object ) } \n\tif $F112 ( object ) $F13002 ( object , global , key ) return object ; \n\t} \n"}, {"code": "public boolean setVariable $F28114 ( key , value ) { \n\t$F2233 ( success ) $F105146 ( object ) for ( $F58460 ( i , working ) ; \n\ti >= INT00 ; \n\t-- i ) { \n\t\t$F53092 $F199 ( map , working , i ) ; \n\t\t$F13002 ( object , map , key ) if $F268 ( object ) { \n\t\t\t$F2725 ( map , key , value ) success = true ; \n\t\t\t$F332 } \n\t\t} \n\tif ( ! success ) { \n\t\t$F13002 ( object , global , key ) if $F268 ( object ) { \n\t\t\t$F2725 ( global , key , value ) success = true ; \n\t\t\t} \n\t\t} \n\treturn success ; \n\t} \n"}, {"code": "public boolean setNewVariable $F28114 ( key , value ) { \n\t$F2233 ( success ) $F14067 ( success , setLocalVariable , key , value ) if ( ! success ) { \n\t\t$F564 ( setGlobalVariable , key , value ) success = true ; \n\t\t} \n\treturn success ; \n\t} \n"}, {"code": "public boolean setLocalVariable $F28114 ( key , value ) { \n\t$F2233 ( success ) if $F4340 ( working ) { \n\t\t$F53092 $F72537 ( map , working ) ; \n\t\t$F2725 ( map , key , value ) success = true ; \n\t\t} \n\treturn success ; \n\t} \n"}, {"code": "public boolean removeLastBlockVariableMap $F2 { \n\t$F2233 ( success ) if ( testing ) $F24354 ( success ) else { \n\t\tif $F4340 ( working ) { \n\t\t\tif ( $F88384 ( working ) != null ) success = true ; \n\t\t\t} \n\t\t} \n\treturn success ; \n\t} \n"}, {"code": "public boolean restoreLastMapFromArchive $F2 { \n\t$F2233 ( success ) List < $F53092 > object = null ; \n\tif $F4340 ( oldBlockHierarchy ) { \n\t\t$F257150 ( object , oldBlockHierarchy ) ; \n\t\tif $F268 ( object ) $F562063 ( working , object , success ) } \n\treturn success ; \n\t} \n"}, {"code": "public synchronized ExtendedLogger createFileLogger $F1195 ( addOnId , level ) { \n\ttry { \n\t\tLoggerContext ctx = LogManager . getContext ( false ) ; \n\t\tConfiguration config = ( ( org . apache . logging . log4j . core . LoggerContext ) ctx ) . getConfiguration ( ) ; \n\t\tLayout layout = PatternLayout . createLayout ( STRING00 , config , null , null , true , false , null , null ) ; \n\t\tAppender fileAppender = FileAppender . createAppender ( $F171508 ( File ) + addOnId + STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , STRING00 , layout , null , STRING00 , null , config ) ; \n\t\t$F4599 ( fileAppender ) config . addAppender ( fileAppender ) ; \n\t\tAppender consoleAppender = ConsoleAppender . createAppender ( layout , null , STRING00 , STRING00 , null , null ) ; \n\t\t$F4599 ( consoleAppender ) config . addAppender ( consoleAppender ) ; \n\t\tAppenderRef fileRef = AppenderRef . createAppenderRef ( STRING00 , Level . DEBUG , null ) ; \n\t\tAppenderRef consoleRef = AppenderRef . createAppenderRef ( STRING00 , Level . DEBUG , null ) ; \n\t\tAppenderRef [ ] refs = new AppenderRef $F21532 ( fileRef , consoleRef ) ; \n\t\tLoggerConfig loggerConfig = LoggerConfig . createLogger ( STRING00 , Level . DEBUG , addOnId , STRING00 , refs , null , config , null ) ; \n\t\tloggerConfig . addAppender ( fileAppender , Level . DEBUG , null ) ; \n\t\tloggerConfig . addAppender ( consoleAppender , Level . DEBUG , null ) ; \n\t\tconfig . addLogger ( addOnId , loggerConfig ) ; \n\t\t( ( org . apache . logging . log4j . core . LoggerContext ) ctx ) . updateLoggers ( ) ; \n\t\t$F7386 ( ctx , addOnId ) ; \n\t\tExtendedLogger $F53602 ( logger , ctx , addOnId ) ; \n\t\treturn logger ; \n\t\t} \n\tcatch ( Exception e ) $F212308 ( fileLogger , e ) } \n"}, {"code": "@ Weight ( value = Weight . Unit . VARIABLE , comment = STRING00 ) public static void checkPoint $F6904982 ( timePointName ) { \n\t$F114619 ( time , System ) $F119109 ( stackDepth , ThreadUtils ) final List < TimeData > $F145 ( list , REGISTRY ) ; \n\tfinal Iterator < TimeData > $F9005 ( iterator , list ) ; \n\t$F2233 ( detected ) while $F11310 ( iterator ) { \n\t\tfinal TimeData $F11312 ( timeWatchItem , iterator ) ; \n\t\tif ( timeWatchItem . isTimePoint ( ) && timeWatchItem . getDetectedStackDepth ( ) >= stackDepth && timePointName . equals ( timeWatchItem . getAlertMessage ( ) ) ) { \n\t\t\tdetected |= true ; \n\t\t\tfinal long detectedDelay = time - timeWatchItem . getCreationTimeInMilliseconds ( ) ; \n\t\t\ttry { \n\t\t\t\ttimeWatchItem . getAlertListener ( ) . onTimeAlert ( detectedDelay , timeWatchItem ) ; \n\t\t\t\t} \n\t\t\tcatch ( Exception ex ) { \n\t\t\t\tfinal UnexpectedProcessingError error = new UnexpectedProcessingError $F2756 ( ex ) ; \n\t\t\t\tMetaErrorListeners . fireError ( $F18429 ( error ) ) ; \n\t\t\t\t} \n\t\t\t$F126979 ( iterator ) } \n\t\t} \n\tif ( ! detected ) $F504 ( timePointName ) } \n"}, {"code": "@ Weight ( value = Weight . Unit . VARIABLE , comment = STRING00 ) public static void cancel $F2 { \n\t$F119109 ( stackDepth , ThreadUtils ) final List < TimeData > $F145 ( list , REGISTRY ) ; \n\tfinal Iterator < TimeData > $F9005 ( iterator , list ) ; \n\twhile $F11310 ( iterator ) { \n\t\tfinal TimeData $F11312 ( timeWatchItem , iterator ) ; \n\t\tif ( timeWatchItem . getDetectedStackDepth ( ) >= stackDepth ) $F51479 ( iterator ) } \n\tif $F6132 ( list ) $F51479 ( REGISTRY ) } \n"}, {"code": "public Optional < OutputControllerModel > getOutputController ( Identifiable identifiable ) { \n\treturn $F6151 ( outputControllers ) ( outputController - > outputController . getID ( ) . equals ( $F181913 ( identifiable ) ) ) . findFirst ( ) ; \n\t} \n"}, {"code": "public static Configuration loadConfig $F410003 ( configFile , compressSpaces ) { \n\tif $F11857 ( configFile ) { \n\t\treturn Configuration . newConfig ( OneOrOther . < File , Path > ofOne ( configFile ) ) ; \n\t\t} \n\tConfiguration config = new Configuration ( OneOrOther . < File , Path > ofOne ( configFile ) , compressSpaces ) ; \n\ttry ( BufferedReader reader = new BufferedReader ( new InputStreamReader $F47438 ( configFile ) ) ) $F5704 ( loadConfig , config , reader , compressSpaces ) $F114755 ( e ) return config ; \n\t} \n"}, {"code": "public static Configuration loadConfig ( Path configFile , boolean compressSpaces ) { \n\tif ( Files . notExists ( configFile ) ) { \n\t\treturn Configuration . newConfig ( OneOrOther . < File , Path > ofOther ( configFile ) ) ; \n\t\t} \n\tConfiguration config = new Configuration ( OneOrOther . < File , Path > ofOther ( configFile ) , compressSpaces ) ; \n\ttry ( BufferedReader reader = Files . newBufferedReader ( $F330182 ( configFile , Charset ) ) ) $F5704 ( loadConfig , config , reader , compressSpaces ) $F114755 ( e ) return config ; \n\t} \n"}, {"code": "public static Configuration newConfig ( $F52903 File configFile ) { \n\treturn new Configuration ( OneOrOther . < File , Path > ofOne ( configFile ) , false ) ; \n\t} \n"}, {"code": "public void setProperty $F136219 ( category , key , value ) { \n\tthis . setProperty ( $F227400 ( category , key , value ) ) ; \n\t} \n"}, {"code": "public void setProperty $F16060 ( category , key , value ) { \n\tcategory = ( this . compressedSpaces ? $F12757 ( category ) : category ) . trim ( ) ; \n\tif $F309775 ( Strings , category ) category = STRING00 ; \n\tkey = ( this . compressedSpaces ? $F12757 ( key ) : key ) . trim ( ) . replace ( $F1286 ) ; \n\tvalue = ( this . compressedSpaces ? $F12757 ( value ) : value ) . trim ( ) ; \n\tif ( ! this . categories . containsKey ( category ) ) this . categories . put ( category , Maps . $F4356 newLinkedHashMap $F2 ) ; \n\t$F274202 currCat = this . categories . get ( category ) ; \n\t$F2725 ( currCat , key , value ) this . categories . put ( category , currCat ) ; \n\t} \n"}, {"code": "public void setDefault $F16060 ( category , key , value ) { \n\tif ( this . hasProperty ( category , key ) ) $F254 $F1949297 ( this , category , key , value ) } \n"}, {"code": "public boolean hasProperty $F1195 ( category , key ) { \n\treturn this . categories . containsKey ( category ) && this . categories . get ( category ) . containsKey ( key ) ; \n\t} \n"}, {"code": "public boolean getBoolean $F1195 ( category , key ) { \n\tString $F6800 ( value , this , category , key ) ; \n\treturn $F2091 ( Boolean , value ) || $F9140 ( value ) ; \n\t} \n"}, {"code": "public String getProperty $F16060 ( category , key , defaultValue ) { \n\tcategory = ( this . compressedSpaces ? $F12757 ( category ) : category ) . trim ( ) ; \n\tif $F309775 ( Strings , category ) category = STRING00 ; \n\tkey = ( this . compressedSpaces ? $F12757 ( key ) : key ) . trim ( ) . replace ( $F1286 ) ; \n\ttry { \n\t\treturn this . categories . get ( category ) . get ( key ) . replace ( $F1286 ) ; \n\t\t} \n\tcatch ( NullPointerException e ) $F356 ( defaultValue ) } \n"}, {"code": "public int getInt $F1195 ( category , key ) { \n\tString value = $F6799 ( this , category , key ) . toLowerCase ( ) . trim ( ) ; \n\t$F138236 ( Integer , value ) } \n"}, {"code": "public double getDouble $F1195 ( category , key ) { \n\tString value = $F6799 ( this , category , key ) . toLowerCase ( ) . trim ( ) ; \n\t$F79300 ( Double , value ) } \n"}, {"code": "private void save ( OneOrOther < File , Path > configFile ) throws IOException { \n\tif ( configFile . isOne ( ) ) { \n\t\tFile config = configFile . getOne ( ) ; \n\t\tthis . saveToWriter ( getFileWriter ( config ) ) ; \n\t\t} \n\telse { \n\t\tPath config = $F565917 ( configFile ) ; \n\t\tthis . saveToWriter ( getPathWriter ( config ) ) ; \n\t\t} \n\t} \n"}, {"code": "protected void detectHandlerMethods $F2 { \n\tprocessAtmostRequestMappingInfo ( ) ; \n\ttry { \n\t\tregisterNativeFunctionHandlers ( handlerMappingInfoStorage . getHandlerMappingInfos ( ) , NativeFunctionResponseBodyHandler . class ) ; \n\t\tregisterNativeFunctionHandlers ( handlerMappingInfoStorage . getHandlerWithViewMappingInfos ( ) , NativeFunctionModelAndViewHandler . class ) ; \n\t\t} \n\t$F153429 ( e ) } \n"}, {"code": "private void registerNativeFunctionHandlers ( Map < String , HandlerDefinition > mappingInfos , Class < ? extends AbstractNativeFunctionHandler > handlerClassType ) throws SecurityException , NoSuchMethodException { \n\tIterator < Entry < String , HandlerDefinition > > $F11306 ( iterator , mappingInfos ) ; \n\twhile $F11310 ( iterator ) { \n\t\tEntry < String , HandlerDefinition > $F11312 ( mappingInfo , iterator ) ; \n\t\t$F19202 ( url , mappingInfo ) HandlerDefinition $F4377 ( handlerDefinition , mappingInfo ) ; \n\t\t$F5605 ( registerNativeFunctionHandler , url , handlerDefinition , handlerClassType ) } \n\t} \n"}, {"code": "private void registerNativeFunctionHandler ( String url , HandlerDefinition handlerDefinition , Class < ? extends AbstractNativeFunctionHandler > handlerClassType ) throws SecurityException , NoSuchMethodException { \n\tNativeFunction atmosFunction = ( NativeFunction ) $F433453 ( handlerDefinition ) ; \n\t$F14066 ( atmosHandler , getHandler , atmosFunction , handlerClassType ) $F2612 handlerType = $F4380 ( atmosHandler ) ? $F466709 ( getApplicationContext ) ( ( String ) atmosHandler ) : $F298 ( atmosHandler ) ; \n\tif ( atmosHandler instanceof NativeFunctionModelAndViewHandler ) { \n\t\t( ( NativeFunctionModelAndViewHandler ) atmosHandler ) . setViewName ( handlerMappingInfoStorage . getViewName ( url ) ) ; \n\t\t} \n\tfinal $F2612 userType = ClassUtils . getUserClass ( handlerType ) ; \n\tMethod method = userType . getMethod ( AbstractNativeFunctionHandler . HANDLER_METHOD_NAME , HttpServletRequest . class , HttpServletResponse . class ) ; \n\tRequestMethodsRequestCondition requestMethodsRequestCondition = getRequestMethodsRequestCondition ( handlerDefinition . getHttpMethods ( ) ) ; \n\tRequestMappingInfo mapping = new RequestMappingInfo ( new PatternsRequestCondition ( url ) , requestMethodsRequestCondition , null , null , null , null , null ) ; \n\t$F5605 ( registerHandlerMethod , atmosHandler , method , mapping ) } \n"}, {"code": "private RequestMethodsRequestCondition getRequestMethodsRequestCondition $F22 ( httpMethods ) { \n\tRequestMethod [ ] requestMethods = new RequestMethod $F13558 ( httpMethods ) ; \n\tfor ( $F2674 ( i , requestMethods ) ) $F115411 ( requestMethods , i , RequestMethod , httpMethods ) return new RequestMethodsRequestCondition ( requestMethods ) ; \n\t} \n"}, {"code": "private void processAtmostRequestMappingInfo $F2 { \n\tContext cx = $F74628 ( Context ) ; \n\tglobal = new Global ( cx ) ; \n\ttry { \n\t\tcx . setOptimizationLevel ( $F3745 ) ; \n\t\tif $F112 ( debugger ) { \n\t\t\t$F72292 ( debugger , RhinoDebuggerFactory ) } \n\t\tcx . setDebugger ( debugger , new Dim . ContextData $F2 ) ; \n\t\tatmosLibraryStream = $F2597701 ( getClass , ATMOS_JS_FILE_NAME ) ; \n\t\t$F142887 ( isr , atmosLibraryStream ) global . defineProperty ( STRING00 , getApplicationContext ( ) , INT00 ) ; \n\t\tcx . evaluateReader ( global , isr , ATMOS_JS_FILE_NAME , INT00 , null ) ; \n\t\tfor ( String userSourceLocation : userSourceLocations ) { \n\t\t\tFile dir = new File ( getServletContextPath ( ) + userSourceLocation ) ; \n\t\t\tif $F15346 ( dir ) { \n\t\t\t\t$F237590 ( fileArray , dir ) for ( String fileName : fileArray ) { \n\t\t\t\t\tFile jsFile = new File ( $F22645 ( dir ) + fileName ) ; \n\t\t\t\t\tif $F2503 ( jsFile ) { \n\t\t\t\t\t\t$F29430 ( reader , jsFile ) ; \n\t\t\t\t\t\tglobal . defineProperty ( $F383883 ( handlerMappingInfoStorage ) ) ; \n\t\t\t\t\t\tcx . evaluateReader ( global , reader , fileName , INT00 , null ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F29430 ( reader , dir ) ; \n\t\t\t\tglobal . defineProperty ( $F383883 ( handlerMappingInfoStorage ) ) ; \n\t\t\t\tcx . evaluateReader ( global , reader , $F507 ( dir ) , INT00 , null ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F1109 ( atmosLibraryStream ) } \n\t$F153429 ( ex ) } \n"}, {"code": "private Object getHandler ( NativeFunction atmosFunction , Class < ? extends AbstractNativeFunctionHandler > handlerTypeClass ) { \n\t$F105146 ( handler ) try { \n\t\t$F12678 handlerConst = handlerTypeClass . getConstructor ( NativeFunction . class , Global . class ) ; \n\t\t$F390323 ( handler , handlerConst , atmosFunction , global ) ; \n\t\t} \n\t$F153429 ( e ) return handler ; \n\t} \n"}, {"code": "public static Dater iso ( String date ) { \n\treturn of ( DatatypeConverter . parseDateTime ( Strs . WHITESPACE . removeFrom ( checkNotNull ( date ) ) ) ) ; \n\t} \n"}, {"code": "public static Dater of ( Date date , DateStyle dateStyle ) { \n\treturn of ( date ) . with ( dateStyle ) ; \n\t} \n"}, {"code": "public static Dater of ( String date , DateStyle dateStyle ) { \n\treturn from ( date ) . with ( dateStyle ) ; \n\t} \n"}, {"code": "public static Dater of ( Date date , String pattern ) { \n\treturn of ( date ) . with ( pattern ) ; \n\t} \n"}, {"code": "public static Dater of $F1195 ( date , pattern ) { \n\treturn new Dater ( $F63468 ( checkNotNull , date , pattern ) ) ; \n\t} \n"}, {"code": "public Comparer $F57801 until ( String targetDate ) { \n\treturn until ( this . style . from ( ) . apply ( targetDate ) ) ; \n\t} \n"}, {"code": "public Comparer $F57801 since ( String targetDate ) { \n\treturn since ( this . style . from ( ) . apply ( targetDate ) ) ; \n\t} \n"}, {"code": "public String asText ( DateStyle dateStyle ) { \n\tDateStyle prevStyle = this . style ; \n\tcheckNotNull ( dateStyle ) . setLocale ( prevStyle . locale ( ) ) ; \n\tdateStyle . setFormatSymbols ( prevStyle . formatSymbols ( ) ) ; \n\tString dayText = with ( dateStyle ) . asText ( ) ; \n\twith ( prevStyle ) ; \n\treturn dayText ; \n\t} \n"}, {"code": "public DateUnit add $F2 { \n\tif ( this . add . isPresent ( ) ) $F2975 ( add ) return ( this . add = Optional . of ( ( DateUnit ) new DateUnit ( this ) { \n\t\t$F1 protected DateUnit handle $F12004 ( calendarField , amount ) { \n\t\t\tCalendar c = asCalendar ( ) ; \n\t\t\t$F373 ( c , calendarField , amount ) $F1296699 ( target , c ) return this ; \n\t\t\t} \n\t\t} \n\t) ) . get ( ) ; \n\t} \n"}, {"code": "public Dater setClock $F65855 ( hour , minute , second ) { \n\treturn set ( ) . hours ( hour ) . minutes ( minute ) . second ( second ) ; \n\t} \n"}, {"code": "public Dater setClock ( String clock ) { \n\t$F19733 ( tip ) checkArgument ( checkNotNull ( clock ) . length ( ) == INT00 , tip ) ; \n\t$F5033 pieces = $F63084 ( Splitter ) . splitToList ( clock ) ; \n\tcheckArgument ( $F3414 ( pieces ) , tip ) ; \n\treturn setClock ( Ints . tryParse ( $F3416 ( pieces ) ) , Ints . tryParse ( $F3416 ( pieces ) ) , Ints . tryParse ( $F3416 ( pieces ) ) ) ; \n\t} \n"}, {"code": "public DateUnit set $F2 { \n\tif ( this . set . isPresent ( ) ) $F2975 ( set ) return ( this . set = Optional . of ( ( DateUnit ) new DateUnit ( this ) { \n\t\t$F1 protected DateUnit handle $F12004 ( calendarField , amount ) { \n\t\t\tCalendar c = asCalendar ( ) ; \n\t\t\t$F52836 ( c , calendarField , amount ) $F1296699 ( target , c ) return this ; \n\t\t\t} \n\t\t} \n\t) ) . get ( ) ; \n\t} \n"}, {"code": "public boolean inThisDay ( Date theTargetDate ) { \n\tDate [ ] thisDay = asDayRange ( ) ; \n\treturn theTargetDate . compareTo ( thisDay [ INT00 ] ) >= INT00 && theTargetDate . compareTo ( thisDay [ INT00 ] ) <= INT00 ; \n\t} \n"}, {"code": "public boolean inGivenDay ( Date theGivenDate ) { \n\tDate [ ] givenDay = of ( theGivenDate ) . asDayRange ( ) ; \n\treturn this . target . compareTo ( givenDay [ INT00 ] ) >= INT00 && this . target . compareTo ( givenDay [ INT00 ] ) <= INT00 ; \n\t} \n"}, {"code": "public $F21 asRangeText $F1195 ( beginClock , endClock ) { \n\t$F4728 ( thisDay ) return new String [ ] { \n\t\tof ( ( thisDay = $F459670 ( asDayText ) ) + beginClock ) . with ( style ) . asText ( ) , of ( thisDay + endClock ) . with ( style ) . asText ( ) } \n\t; \n\t} \n"}, {"code": "public Date [ ] asRange $F1195 ( beginClock , endClock ) { \n\t$F4728 ( thisDay ) return new Date [ ] { \n\t\tof ( ( thisDay = $F459670 ( asDayText ) ) + beginClock ) . get ( ) , of ( thisDay + endClock ) . get ( ) } \n\t; \n\t} \n"}, {"code": "public String interval ( Date target ) { \n\t$F100768 ( unit ) $F228962 ( dayUnit , DAY , unit ) $F228962 ( hourUnit , HOUR , unit ) $F228962 ( minUnit , MINUTE , unit ) double interval = sinceMillis ( target ) / unit ; \n\tIntervalDesc $F145 ( desc , theIntervalDesc ) ; \n\tif $F128568 ( interval ) { \n\t\tif ( interval / ( $F62866 * dayUnit ) > NUM00 ) $F3342 ( asText , target ) if ( interval / $F196874 ( dayUnit ) > NUM00 ) { \n\t\t\treturn String . format ( STRING00 , ( int ) ( interval / $F196874 ( dayUnit ) ) , desc . getMonthAgo ( ) ) ; \n\t\t\t} \n\t\tif ( interval / $F196874 ( dayUnit ) > NUM00 ) { \n\t\t\treturn String . format ( STRING00 , desc . getDayAgo ( ) ) ; \n\t\t\t} \n\t\tif ( ( interval / $F196874 ( dayUnit ) <= NUM00 ) && ( interval / dayUnit >= NUM00 ) ) { \n\t\t\treturn String . format ( STRING00 , $F244373 ( interval , dayUnit ) , desc . getDayAgo ( ) ) ; \n\t\t\t} \n\t\tif ( ( interval / dayUnit < NUM00 ) && ( interval / hourUnit >= NUM00 ) ) { \n\t\t\treturn String . format ( STRING00 , $F244373 ( interval , hourUnit ) , desc . getHourAgo ( ) ) ; \n\t\t\t} \n\t\tif ( ( interval < hourUnit ) && ( interval >= minUnit ) ) { \n\t\t\treturn String . format ( STRING00 , $F244373 ( interval , minUnit ) , desc . getMinuteAgo ( ) ) ; \n\t\t\t} \n\t\treturn desc . getJustNow ( ) ; \n\t\t} \n\t$F867 ( asText , target ) } \n"}, {"code": "public boolean isSameDay ( Calendar calendar ) { \n\tCalendar c1 = asCalendar ( ) ; \n\treturn ( c1 . get ( Calendar . ERA ) == calendar . get ( Calendar . ERA ) && $F134957 ( c1 , Calendar ) == $F134957 ( calendar , Calendar ) && c1 . get ( Calendar . DAY_OF_YEAR ) == calendar . get ( Calendar . DAY_OF_YEAR ) ) ; \n\t} \n"}, {"code": "private static String analyst ( String date ) { \n\t$F4728 ( style ) $F2233 ( hasDiagonal ) Replacer r = $F73741 ( Replacer , checkNotNull , date ) ; \n\tif ( hasDiagonal = r . contain ( STRING00 ) ) { \n\t\tr . update ( r . lookups ( STRING00 ) . with ( STRING00 ) ) ; \n\t\t} \n\tif ( r . containAll ( $F1286 ) ) { \n\t\tstyle = DateStyle . ISO_FORMAT ; \n\t\t} \n\telse if ( r . contain ( STRING00 ) ) { \n\t\tstyle = DateStyle . CST_FORMAT ; \n\t\t} \n\telse if ( r . contain ( STRING00 ) ) { \n\t\tstyle = DateStyle . GMT_FORMAT ; \n\t\t} \n\telse { \n\t\tswitch $F14206 ( date ) { \n\t\t\t$F570858 ( style ) $F60794 style = r . contain ( STRING00 ) ? DateStyle . HH_mm_ss : DateStyle . yyyyMMdd ; \n\t\t\t$F332 $F60794 style = DateStyle . yyyy_MM_dd ; \n\t\t\t$F332 $F60794 style = DateStyle . yyyyMMddHHmmss ; \n\t\t\t$F332 $F60794 style = DateStyle . yyyy_MM_dd_HH_mm_ss ; \n\t\t\t$F332 } \n\t\t} \n\treturn hasDiagonal ? $F57565 ( r , style ) . lookups ( STRING00 ) . with ( STRING00 ) : style ; \n\t} \n"}, {"code": "$F762 public void combine ( Key key , Iterable $F247148 values , TaskInputOutputContext context ) throws $F10627 { \n\tcombine = true ; \n\t$F7280 ( writer , context ) init ( ) ; \n\tif $F268 ( inputLabels ) $F890 ( setupLabel , key ) else { \n\t\tKey k = new Key $F2 ; \n\t\tfor ( ValueWritable vw : key . getGrouping ( ) ) { \n\t\t\tk . getGrouping ( ) . add ( new ValueWritable ( $F89392 ( vw ) . toString ( ) , $F269 ( vw ) ) ) ; \n\t\t\t} \n\t\t$F205228 ( defaultGroupRecord , k ) } \n\t$F205228 ( currentRecord , key ) $F96963 ( recordIte , values ) summarize ( writer ) ; \n\t} \n"}, {"code": "$F1 public void setup ( Context context ) throws $F10627 { \n\t$F1357 ( this , context ) inputLabels = $F5105 ( context ) . getStrings ( SimpleJob . FILETER_OUTPUT_LABELS ) ; \n\tif $F112 ( inputLabels ) { \n\t\tinputLabels = $F5105 ( context ) . getStrings ( SimpleJob . BEFORE_SUMMARIZER_OUTPUT_LABELS ) ; \n\t\t} \n\tboolean label = $F5105 ( context ) . getStrings ( SimpleJob . SUMMARIZER_OUTPUT_LABELS ) == null ? true : false ; \n\twriter = new BasicWriter ( label ) ; \n\tsummarizerSetup ( ) ; \n\t} \n"}, {"code": "public void setupInMapper $F2 { \n\tinputLabels = $F5105 ( context ) . getStrings ( SimpleJob . FILETER_OUTPUT_LABELS ) ; \n\tif $F112 ( inputLabels ) { \n\t\tinputLabels = $F5105 ( context ) . getStrings ( SimpleJob . BEFORE_SUMMARIZER_OUTPUT_LABELS ) ; \n\t\t} \n\tboolean label = $F5105 ( context ) . getStrings ( SimpleJob . SUMMARIZER_OUTPUT_LABELS ) == null ? true : false ; \n\twriter = new BasicWriter ( label ) ; \n\t} \n"}, {"code": "private void setupLabel ( Key key ) { \n\t$F1987 ( i ) Key k = new Key $F2 ; \n\tfor ( ValueWritable vw : key . getGrouping ( ) ) { \n\t\t$F89392 ( vw ) . set ( inputLabels [ i ++ ] ) ; \n\t\tk . getGrouping ( ) . add ( new ValueWritable ( $F89392 ( vw ) . toString ( ) , $F269 ( vw ) ) ) ; \n\t\t} \n\t$F205228 ( defaultGroupRecord , k ) valuesLabels = new String [ inputLabels . length - i ] ; \n\tfor ( $F2674 ( j , valuesLabels ) ) { \n\t\tvaluesLabels [ j ] = inputLabels [ i ++ ] ; \n\t\t} \n\t} \n"}, {"code": "protected Record next ( Writer writer ) { \n\tValue $F11312 ( value , recordIte ) ; \n\tif $F268 ( valuesLabels ) { \n\t\t$F1987 ( i ) for ( ValueWritable vw : $F6534 ( value ) ) { \n\t\t\t$F89392 ( vw ) . set ( valuesLabels [ i ++ ] ) ; \n\t\t\t} \n\t\t} \n\t$F28157 ( currentRecord , value ) writer . setDefaultRecord ( currentRecord ) ; \n\treturn currentRecord ; \n\t} \n"}, {"code": "public static < E extends Comparable $F26212 > Builder $F26212 naturalOrder $F2 { \n\treturn new Builder $F26212 ( $F63511 ( Ordering ) ) ; \n\t} \n"}, {"code": "$F762 public static $F1372 Reflecter $F1372 from ( T target ) { \n\treturn $F1984167 ( Decisions ) . apply ( target ) ? ( ( $F76523 ( target ) ) . isArray ( ) ? ( Reflecter $F1372 ) from ( ObjectArrays . newArray ( ( $F76523 ( target ) ) . getComponentType ( ) , INT00 ) ) : from ( $F76523 ( target ) ) ) : new Reflecter $F1372 ( target ) ; \n\t} \n"}, {"code": "$F762 public static $F1372 Reflecter $F1372 from $F7907 ( target ) { \n\treturn new Reflecter $F1372 ( ( T ) Suppliers2 . toInstance ( $F10830 ( target ) ) . get ( ) ) ; \n\t} \n"}, {"code": "public $F64694 F val ( String propName ) { \n\tTriple < String , Field , Reflecter $F282 > triple = getNestRefInfo ( propName ) ; \n\treturn $F3027012 ( triple ) . getPropVal ( triple . getC ( ) , triple . getL ( ) ) ; \n\t} \n"}, {"code": "public $F2338 Reflecter $F1372 val ( String propName , V propVal ) { \n\tTriple < String , Field , Reflecter $F282 > triple = getNestRefInfo ( propName ) ; \n\t$F3027012 ( triple ) . setPropVal ( triple . getC ( ) , triple . getL ( ) , propVal ) ; \n\tthis . isChanged = true ; \n\treturn this ; \n\t} \n"}, {"code": "$F762 public $F58280 Reflecter $F58280 getReflecter ( String propName ) { \n\treturn ( Reflecter $F58280 ) getNestRefInfo ( propName ) . getR ( ) ; \n\t} \n"}, {"code": "public < Dest > Dest copyTo ( Object dest , String ... excludes ) { \n\treturn from ( dest ) . setExchanges ( exchangeProps ) . setExchangeFuncs ( exchangeFuncs ) . setAutoExchange ( autoExchange ) . setExcludePackagePath ( excludePackagePath ) . setTrace ( trace ) . populate ( asMap ( ) , excludes ) . get ( ) ; \n\t} \n"}, {"code": "$F762 public $F2338 Map $F46098 asMap $F2 { \n\treturn ( Map $F46098 ) $F14933 ( mapper ) ( ) ; \n\t} \n"}, {"code": "public $F2338 Reflecter $F1372 populate ( Map $F46098 properties ) { \n\treturn populate ( properties , $F210479 ) ; \n\t} \n"}, {"code": "public $F2338 Reflecter $F1372 populate ( Map $F46098 properties , String ... excludes ) $F60738 ( populate , properties , Arrays , excludes ) "}, {"code": "public $F2338 Reflecter $F1372 populate $F3019 ( json , excludes ) { \n\treturn JSONer . addJsonExchangeFunc ( this ) . populate ( JSONer . readNoneNullMap ( json ) , excludes ) ; \n\t} \n"}, {"code": "public $F2338 Reflecter $F1372 populate ( Map $F46098 properties , $F14584 ( excludes ) ) { \n\tif ( $F384 ( Decisions ) . apply ( properties ) ) $F356 ( this ) if ( this . delegate . get ( ) . getClass ( ) . isArray ( ) ) { \n\t\t$F105146 ( els ) if ( null != ( els = properties . get ( JSONer . ReadJSON . itemsF ) ) ) { \n\t\t\tthis . delegate = Optional . fromNullable ( Resolves . $F1372 get ( this . delegate . get ( ) . getClass ( ) , els ) ) ; \n\t\t\t} \n\t\treturn this ; \n\t\t} \n\tif ( this . autoExchange ) $F4537 ( autoExchange ) fieldLoop ( new TransformMap2ObjVal $F2338 ( properties , excludes ) ) ; \n\tthis . isChanged = true ; \n\treturn this ; \n\t} \n"}, {"code": "public $F72962 Reflecter $F1372 exchWithField ( final Function < Pair < Field , I > , O > exchangeFunc , Decision $F278543 decision ) { \n\tthis . fieldHolder . get ( ) . filterAsGather ( decision ) . loop ( new Decisional $F278543 $F2 { \n\t\t$F1 protected void decision ( Field input ) { \n\t\t\texchWithField ( $F507 ( input ) , $F507 ( input ) , exchangeFunc ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn this ; \n\t} \n"}, {"code": "public $F72962 Reflecter $F1372 exchWithField ( String targetFieldName , String keyFromPropMap , Function < Pair < Field , I > , O > exchangeFunc ) { \n\t$F564 ( exchange , targetFieldName , keyFromPropMap ) $F2725 ( exchangeFieldFuncs , keyFromPropMap , exchangeFunc ) return this ; \n\t} \n"}, {"code": "public $F72962 Reflecter $F1372 exchange ( Function $F72962 exchangeFunc , String ... inOutWithSameNameProps ) { \n\tfor ( String propName : inOutWithSameNameProps ) { \n\t\t$F88980 ( exchange , propName , exchangeFunc ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public Reflecter $F1372 autoExchange $F2 { \n\tif ( ! this . autoExchangeAdd ) { \n\t\texchange ( Funcs . TO_BOOLEAN , booleanD ) ; \n\t\texchange ( Funcs . TO_BYTE , byteD ) ; \n\t\texchange ( Funcs . TO_DOUBLE , doubleD ) ; \n\t\texchange ( Funcs . TO_FLOAT , floatD ) ; \n\t\texchange ( Funcs . TO_INTEGER , integerD ) ; \n\t\texchange ( Funcs . TO_LONG , longD ) ; \n\t\texchange ( Funcs . TO_SHORT , shortD ) ; \n\t\texchange ( Funcs . TO_DATE , dateD ) ; \n\t\texchange ( Funcs . TO_CHARACTER , characterD ) ; \n\t\texchange ( Funcs . TO_STRING , stringD ) ; \n\t\texchange ( Funcs . TO_BIGDECIMAL , bigDecimalD ) ; \n\t\texchange ( Funcs . TO_BIGINTEGER , bigIntegerD ) ; \n\t\tthis . autoExchangeAdd = true ; \n\t\t} \n\tthis . autoExchange = Boolean . TRUE ; \n\treturn this ; \n\t} \n"}, {"code": "public Reflecter $F1372 exchange $F1195 ( targetFieldName , keyFromPropMap ) $F142432 ( exchangeProps , targetFieldName , keyFromPropMap , this ) "}, {"code": "public $F72962 Reflecter $F1372 exchange ( String targetFieldName , String keyFromPropMap , Function $F72962 exchangeFunc ) { \n\t$F564 ( exchange , targetFieldName , keyFromPropMap ) $F2725 ( exchangeFuncs , keyFromPropMap , exchangeFunc ) return this ; \n\t} \n"}, {"code": "$F762 public $F2338 Mapper $F46098 mapper $F2 { \n\tif ( ! isChanged && $F30197 ( nameValMap ) ) { \n\t\treturn ( Mapper $F46098 ) $F144 ( nameValMap ) ; \n\t\t} \n\t$F1708702 ( fm , Maps ) if $F30198 ( fieldHolder ) { \n\t\tfieldLoop ( new TransformFields2Map $F282 ( fm , this . trace ) ) ; \n\t\t} \n\tnameValMap = Optional . of ( $F2704 ( Mapper , fm ) ) ; \n\tthis . isChanged = false ; \n\treturn ( Mapper $F46098 ) $F144 ( nameValMap ) ; \n\t} \n"}, {"code": "public $F2338 Reflecter $F1372 propLoop ( final Decision < Pair < Field , V > > decision ) { \n\tfieldLoop ( new Decisional $F278543 $F2 { \n\t\t$F762 $F1 protected void decision ( Field input ) { \n\t\t\tdecision . apply ( ( Pair < Field , V > ) Pair . of ( input , getPropVal ( input , $F507 ( input ) ) ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn this ; \n\t} \n"}, {"code": "public $F28644 Reflecter $F1372 keyValLoop ( final Decision < Triple < K , Field , V > > decision ) { \n\tfieldLoop ( new Decisional $F278543 $F2 { \n\t\t$F762 $F1 protected void decision ( Field input ) { \n\t\t\tdecision . apply ( ( Triple < K , Field , V > ) Triple . of ( $F507 ( input ) , input , getPropVal ( input , $F507 ( input ) ) ) ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\treturn this ; \n\t} \n"}, {"code": "public Reflecter $F1372 ignore $F555968 ( mod ) { \n\treturn filter ( new Decision $F278543 $F2 { \n\t\t$F1 public boolean apply ( Field input ) { \n\t\t\treturn ! ( ( $F4896 ( mod ) & $F19994 ( input ) ) != INT00 ) ; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public Reflecter $F1372 filter ( Decision $F278543 decision ) { \n\tthis . fieldHolder . get ( ) . filter ( decision ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Reflecter $F1372 setExchanges $F7169 ( exchangeMap ) { \n\t$F11484 ( exchangeProps , checkNotNull , exchangeMap ) return this ; \n\t} \n"}, {"code": "public Reflecter $F1372 setExchangeFuncs ( Map < String , Function $F19378 > exchangeFuncMap ) { \n\t$F11484 ( exchangeFuncs , checkNotNull , exchangeFuncMap ) return this ; \n\t} \n"}, {"code": "public Reflecter $F1372 setExcludePackagePath $F8238 ( excludePackages ) { \n\tfor ( $F24293 ( pkg , checkNotNull , excludePackages ) ) { \n\t\tif ( ! this . excludePackagePath . contains ( pkg ) ) { \n\t\t\tthis . excludePackagePath . add ( pkg ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public boolean hasDefaultConstructor $F2 { \n\tif $F34250 ( delegate ) $F1668 final $F335277 constructors = delegateClass ( ) . getConstructors ( ) ; \n\tfor ( final $F12678 constructor : constructors ) { \n\t\tif $F509947 ( constructor ) $F233 } \n\t$F213 } \n"}, {"code": "public Method getMethod ( String methodName ) { \n\treturn checkNotNull ( $F11360 ( methods ) ( checkNotNull ( methodName ) ) , STRING00 , methodName , $F40175 ( delegateClass ) ) ; \n\t} \n"}, {"code": "public $F2141314 methods $F2 { \n\tif ( this . methodHolder . isPresent ( ) ) { \n\t\treturn this . methodHolder . get ( ) ; \n\t\t} \n\t$F2141314 $F71201 ( methodMap , Maps ) ; \n\t$F172327 ( currentClass , delegateClass ) while $F268 ( currentClass ) { \n\t\tfor ( $F159648 ( m , currentClass ) ) { \n\t\t\t$F10869 ( m ) $F180983 ( methodMap , m ) } \n\t\t$F7916 ( currentClass ) } \n\treturn ( this . methodHolder = $F326 ( Optional , methodMap ) ) . get ( ) ; \n\t} \n"}, {"code": "$F762 public $F7905 delegateClass $F2 { \n\treturn $F30197 ( delegate ) ? ( $F7905 ) $F144 ( delegate ) . getClass ( ) : null ; \n\t} \n"}, {"code": "$F1 $F762 public E get ( int index ) { \n\tPreconditions . checkElementIndex ( index , size ) ; \n\treturn ( E ) array [ index + offset ] ; \n\t} \n"}, {"code": "public static $F26212 E toObject ( $F52984 ( clazz ) , $F388606 entities , Map < com . google . appengine . api . datastore . Key , Object > references , AppEngineDatastoreService datastore ) { \n\treturn $F175949 ( toObject , clazz , entities , references , datastore ) ; \n\t} \n"}, {"code": "public static $F388606 toEntities ( com . google . appengine . api . datastore . Key parent , Object entity ) { \n\t$F388606 entities = new ArrayList $F377533 $F2 ; \n\t$F43477 ( clazz , entity ) if ( ! clazz . isAnnotationPresent ( org . eiichiro . acidhouse . Entity . class ) ) $F9654 ( clazz ) Entity e = new Entity ( Keys . create ( parent , toKind ( clazz ) , Entities . keyValue ( entity ) ) ) ; \n\t$F528 ( entities , e ) for ( $F243264 ( field , clazz ) ) { \n\t\tif ( field . isAnnotationPresent ( Key . class ) ) $F42718 if ( field . isAnnotationPresent ( Transient . class ) ) $F42718 try { \n\t\t\t$F10869 ( field ) $F2744 ( object , field , entity ) $F90687 ( object ) $F104884 ( type , field ) boolean unindexed = field . isAnnotationPresent ( Unindexed . class ) ; \n\t\t\tif ( field . isAnnotationPresent ( Referential . class ) ) { \n\t\t\t\tcom . google . appengine . api . datastore . Key reference = Keys . create ( toKind ( type ) , Entities . keyValue ( object ) ) ; \n\t\t\t\tsetProperty ( e , $F507 ( field ) , reference , unindexed ) ; \n\t\t\t\t$F23605 } \n\t\t\tif $F540 ( isCoreValue , type ) { \n\t\t\t\tsetProperty ( e , $F507 ( field ) , object , unindexed ) ; \n\t\t\t\t} \n\t\t\telse if $F540 ( isCollection , type ) { \n\t\t\t\t$F37414 ( collection , object ) $F2612 element = ( $F2612 ) ( $F1708860 ( field ) ) . getActualTypeArguments ( ) [ INT00 ] ; \n\t\t\t\tif $F540 ( isCoreValue , element ) { \n\t\t\t\t\tsetProperty ( e , $F507 ( field ) , collection , unindexed ) ; \n\t\t\t\t\t} \n\t\t\t\telse if $F540 ( isEntity , element ) { \n\t\t\t\t\tfor ( Object o : collection ) { \n\t\t\t\t\t\tentities . addAll ( $F103949 ( toEntities , e , o ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlogger . warning ( $F16937 ( field ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse if $F540 ( isArray , type ) $F89060 ( logger , field ) else if $F540 ( isEntity , type ) { \n\t\t\t\tentities . addAll ( $F103949 ( toEntities , e , object ) ) ; \n\t\t\t\t} \n\t\t\telse if $F540 ( isEmbedded , type ) { \n\t\t\t\tfor ( $F243264 ( f , type ) ) { \n\t\t\t\t\tif ( f . isAnnotationPresent ( Transient . class ) ) $F42718 $F10869 ( f ) $F2744 ( o , f , object ) $F90687 ( o ) $F104884 ( t , f ) if ( isCoreValue ( t ) || ( isCollection ( t ) && isCoreValue ( ( $F2612 ) ( $F1708860 ( f ) ) . getActualTypeArguments ( ) [ INT00 ] ) ) ) { \n\t\t\t\t\t\tsetProperty ( e , $F428531 ( field , f ) , o , f . isAnnotationPresent ( Unindexed . class ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\tlogger . warning ( $F16937 ( f ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse $F89060 ( logger , field ) } \n\t\tcatch ( Exception exception ) { \n\t\t\tthrow new UncheckedException ( exception ) ; \n\t\t\t} \n\t\t} \n\treturn entities ; \n\t} \n"}, {"code": "public static Lock toLock ( Entity entity ) { \n\treturn new Lock ( $F256936 ( entity ) , $F1107524 ( entity , TRANSACTION_PROPERTY ) , ( Date ) $F767 ( entity , TIMESTAMP_PROPERTY ) ) ; \n\t} \n"}, {"code": "public static Entity toEntity ( Lock lock , com . google . appengine . api . datastore . Key parent ) { \n\tEntity entity = new Entity ( LOCK_KIND , $F13745 ( lock ) , parent ) ; \n\tentity . setUnindexedProperty ( TRANSACTION_PROPERTY , $F4649399 ( lock ) ) ; \n\tentity . setUnindexedProperty ( TIMESTAMP_PROPERTY , $F273254 ( lock ) ) ; \n\treturn entity ; \n\t} \n"}, {"code": "$F762 public static AppEngineGlobalTransaction toTransaction ( $F2408299 transactions , AppEngineDatastoreService datastore ) { \n\tAppEngineGlobalTransaction transaction = null ; \n\tMap < Long , Entity > logs = new TreeMap < Long , Entity > $F2 ; \n\tfor ( Entity tx : transactions ) { \n\t\tif ( $F255533 ( tx ) ( TRANSACTION_KIND ) ) { \n\t\t\ttransaction = new AppEngineGlobalTransaction ( $F256936 ( tx ) , null , null ) ; \n\t\t\t} \n\t\telse if ( $F255533 ( tx ) ( LOG_KIND ) ) { \n\t\t\tlogs . put ( $F712 ( tx ) . getId ( ) , tx ) ; \n\t\t\t} \n\t\t} \n\tfor ( Long sequence : $F7837 ( logs ) ) { \n\t\tEntity $F199 ( log , logs , sequence ) ; \n\t\t$F388606 entities = new ArrayList $F377533 $F2 ; \n\t\tfor ( Blob proto : ( List < Blob > ) $F767 ( log , PROTO_PROPERTY ) ) { \n\t\t\tOnestoreEntity . EntityProto entityProto = new OnestoreEntity . EntityProto $F2 ; \n\t\t\tentityProto . mergeFrom ( $F15649 ( proto ) ) ; \n\t\t\tentities . add ( EntityTranslator . createFromPb ( entityProto ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tLog l = new Log ( sequence , Enum . valueOf ( Log . Operation . class , $F1107524 ( log , OPERATION_PROPERTY ) ) , toObject ( Class . forName ( $F1107524 ( log , CLASS_PROPERTY ) ) , entities , new HashMap < com . google . appengine . api . datastore . Key , Object > $F1415 , datastore ) ) ; \n\t\t\tl . state ( State . PREPARED ) ; \n\t\t\ttransaction . logs ( ) . add ( l ) ; \n\t\t\t} \n\t\tcatch ( ClassNotFoundException e ) { \n\t\t\tthrow new UncheckedException ( e ) ; \n\t\t\t} \n\t\t} \n\treturn transaction ; \n\t} \n"}, {"code": "public static $F388606 toEntities ( AppEngineTransaction transaction , com . google . appengine . api . datastore . Key parent ) { \n\t$F388606 entities = new ArrayList $F377533 $F2 ; \n\tcom . google . appengine . api . datastore . Key key = Keys . create ( parent , TRANSACTION_KIND , $F13745 ( transaction ) ) ; \n\tentities . add ( new Entity ( key ) ) ; \n\tfor ( Log log : transaction . logs ( ) ) { \n\t\tEntity entity = new Entity ( Keys . create ( key , LOG_KIND , $F8650030 ( log ) ) ) ; \n\t\tentity . setUnindexedProperty ( OPERATION_PROPERTY , log . operation ( ) . name ( ) ) ; \n\t\tentity . setUnindexedProperty ( CLASS_PROPERTY , log . entity ( ) . getClass ( ) . getName ( ) ) ; \n\t\tList < Blob > blobs = new ArrayList < Blob > $F2 ; \n\t\tentity . setUnindexedProperty ( PROTO_PROPERTY , blobs ) ; \n\t\t$F528 ( entities , entity ) for ( Entity e : toEntities ( log . entity ( ) ) ) { \n\t\t\tEntityProto proto = EntityTranslator . convertToPb ( e ) ; \n\t\t\t$F133791 ( bytes , proto ) blobs . add ( new Blob ( bytes ) ) ; \n\t\t\t} \n\t\t} \n\treturn entities ; \n\t} \n"}, {"code": "public static String toKind $F2614 ( clazz ) { \n\tif ( clazz . getAnnotation ( org . eiichiro . acidhouse . Entity . class ) == null ) $F9654 ( clazz ) return $F19101 ( clazz ) ; \n\t} \n"}, {"code": "public static FilterOperator toFilterOperator ( ComparableFilter . Operator operator ) { \n\tif ( operator == ComparableFilter . Operator . EQUAL_TO ) { \n\t\treturn FilterOperator . EQUAL ; \n\t\t} \n\telse if ( operator == ComparableFilter . Operator . GREATER_THAN ) { \n\t\treturn FilterOperator . GREATER_THAN ; \n\t\t} \n\telse if ( operator == ComparableFilter . Operator . GREATER_THAN_OR_EQUAL_TO ) { \n\t\treturn FilterOperator . GREATER_THAN_OR_EQUAL ; \n\t\t} \n\telse if ( operator == ComparableFilter . Operator . LESS_THAN ) { \n\t\treturn FilterOperator . LESS_THAN ; \n\t\t} \n\telse if ( operator == ComparableFilter . Operator . LESS_THAN_OR_EQUAL_TO ) { \n\t\treturn FilterOperator . LESS_THAN_OR_EQUAL ; \n\t\t} \n\telse if ( operator == ComparableFilter . Operator . NOT_EQUAL_TO ) { \n\t\treturn FilterOperator . NOT_EQUAL ; \n\t\t} \n\telse { \n\t\t$F265335 ( operator ) } \n\t} \n"}, {"code": "public static SortDirection toSortDirection ( Order . Direction direction ) { \n\tif ( direction == Order . Direction . ASC ) { \n\t\treturn SortDirection . ASCENDING ; \n\t\t} \n\telse if ( direction == Order . Direction . DESC ) { \n\t\treturn SortDirection . DESCENDING ; \n\t\t} \n\telse { \n\t\t$F265335 ( direction ) } \n\t} \n"}, {"code": "$F1 public void renewToken $F2 { \n\tCreateTokenRequest createTokenRequest = new CreateTokenRequest $F2 ; \n\tcreateTokenRequest . setUser ( $F199648 ( credentials ) ) ; \n\tcreateTokenRequest . setPassword ( $F2962 ( credentials ) ) ; \n\tCreateTokenResponse createTokenResponse ; \n\ttry $F24579 ( createTokenResponse , send , createTokenRequest ) catch ( ValidationConstraintViolationException vcve ) { \n\t\tthrow new AuthorizationException ( vcve ) ; \n\t\t} \n\tHttpStatus status = HttpStatus . getStatus ( $F24713 ( createTokenResponse ) ) ; \n\tif $F57964 ( status ) { \n\t\tif ( status . equals ( HttpStatus . Unauthorized ) ) { \n\t\t\tthrow new AuthorizationException ( HttpStatus . Unauthorized . toString ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tthrow new CommunicationErrorException ( status ) ; \n\t\t\t} \n\t\t} \n\tString $F530853 ( newToken , createTokenResponse ) ; \n\ttokenStore . setToken ( newToken ) ; \n\t} \n"}, {"code": "$F1 $F762 public $F1372 T send ( $F3668909 request ) { \n\tif $F112 ( request ) { \n\t\tthrow new CommunicationErrorException $F6 ; \n\t\t} \n\tPathUtil . infixPotentialPathDefaults ( request , $F298 ( request ) ) ; \n\t$F178644 ( RequestUtil , request ) T response ; \n\ttry { \n\t\tresponse = $F164406 ( dispatchByMethod , request ) ; \n\t\t} \n\tcatch ( AuthorizationException ae ) { \n\t\trenewToken ( ) ; \n\t\tresponse = $F164406 ( dispatchByMethod , request ) ; \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "public static TokenType create $F957371 ( name ) { \n\tTokenType toReturn = DynamicEnum . register ( new TokenType ( name ) ) ; \n\t$F528 ( values , toReturn ) return toReturn ; \n\t} \n"}, {"code": "protected void useCleanPlugin ( Element ... elements ) throws MojoExecutionException { \n\t$F35073 tempElems = new $F51 $F3714 ( Arrays , elements ) ; \n\ttempElems . add ( new Element $F1287 ) ; \n\texecuteMojo ( plugin ( groupId ( STRING00 ) , artifactId ( STRING00 ) , version ( STRING00 ) ) , goal ( STRING00 ) , configuration ( tempElems . toArray ( new Element $F31920 ( tempElems ) ) ) , $F209 ( executionEnvironment , project , session , pluginManager ) ) ; \n\t} \n"}, {"code": "public static < RESULT , FAILURE extends Throwable > ProcessorChainLink < RESULT , FAILURE > from ( Processor < RESULT , FAILURE > processor ) { \n\tassertNotNull ( processor , $F81320 ( ProcessorChainLink . class . getName ( ) ) . append ( STRING00 ) . append ( Processor . class . getName ( ) ) . toString ( ) ) ; \n\treturn new ProcessorChainLink < RESULT , FAILURE > ( processor ) ; \n\t} \n"}, {"code": "public ProcessorChainLink < RESULT , FAILURE > setSuccessor ( ProcessorChainLink < RESULT , FAILURE > successor ) { \n\tthis . successor = assertNotNull ( successor , $F81320 ( ProcessorChainLink . class . getName ( ) ) . append ( STRING00 ) . toString ( ) ) ; \n\treturn successor ; \n\t} \n"}, {"code": "public String asJson ( final ObjectSpecification objectSpec ) { \n\tfinal LayoutMetadata metadata = new LayoutMetadata $F2 ; \n\tmetadata . setColumns ( Lists . < ColumnRepr > $F1841750 ) ; \n\tfinal MemberGroupLayoutFacet mglf = objectSpec . getFacet ( MemberGroupLayoutFacet . class ) ; \n\tfinal ColumnSpans columnSpans = mglf . getColumnSpans ( ) ; \n\tfinal $F1043 actionIdsForAssociations = Sets . newTreeSet ( ) ; \n\tColumnRepr columnRepr ; \n\tcolumnRepr = addColumnWithSpan ( metadata , $F198471 ( columnSpans ) ) ; \n\tupdateColumnMemberGroups ( objectSpec , MemberGroupLayoutHint . LEFT , columnRepr ) ; \n\tcolumnRepr = addColumnWithSpan ( metadata , columnSpans . getMiddle ( ) ) ; \n\tupdateColumnMemberGroups ( objectSpec , MemberGroupLayoutHint . MIDDLE , columnRepr ) ; \n\tcolumnRepr = addColumnWithSpan ( metadata , $F198472 ( columnSpans ) ) ; \n\tupdateColumnMemberGroups ( objectSpec , MemberGroupLayoutHint . RIGHT , columnRepr ) ; \n\tcolumnRepr = addColumnWithSpan ( metadata , columnSpans . getCollections ( ) ) ; \n\t$F564 ( updateCollectionColumnRepr , objectSpec , columnRepr ) $F5605 ( addActions , objectSpec , metadata , actionIdsForAssociations ) final Gson gson = $F7018 . setPrettyPrinting ( ) . create ( ) ; \n\t$F766739 ( gson , metadata ) } \n"}, {"code": "public static synchronized void start $F2 { \n\tif $F42444 ( status ) $F254 init ( ) ; \n\t$F24610 ( t , System ) $F39336 ( Transactions ) $F39336 ( queueWorker ) $F21992 ( operationLog ) $F4599 ( messageListener ) operationLog . listUndone ( new Closure < MessageBean , Object > $F2 { \n\t\t$F1 public Object call ( MessageBean input ) { \n\t\t\ttry { \n\t\t\t\tqueueWorker . runRealWrite ( input ) ; \n\t\t\t\toperationLog . markDone ( $F6210 ( input ) ) ; \n\t\t\t\t} \n\t\t\tcatch ( Throwable e ) { \n\t\t\t\t$F938352 ( queueWorker , input , e ) } \n\t\t\t$F724 } \n\t\t} \n\t) ; \n\t$F98647 ( startupUpdator , queueWorker ) $F4599 ( queueWorker ) $F4599 ( startupUpdator ) try $F25018 ( fileExchange ) catch ( BindException e ) { \n\t\t$F433908 ( LOG , e ) $F17380 ( System ) } \n\tstatus = STRING00 ; \n\tLOG . info ( $F320 ( nodeId ) + $F101254 ( System , t ) + STRING00 ) ; \n\t} \n"}, {"code": "public static synchronized void stop $F2 { \n\tif $F42444 ( status ) $F254 $F24610 ( t , System ) $F7294 ( startupUpdator ) $F7294 ( messageListener ) $F7294 ( fileExchange ) $F7294 ( queueWorker ) status = STRING00 ; \n\tLOG . info ( $F320 ( nodeId ) + $F101254 ( System , t ) + STRING00 ) ; \n\t} \n"}, {"code": "public static IntArrayND wrap ( IntTuple t , IntTuple size ) { \n\t$F292612 ( Objects , t ) $F292612 ( Objects , size ) int totalSize = IntTupleFunctions . reduce ( size , INT00 , <missing ')'> ( a , b ) - > a * b ) ; \n\tif ( $F1976 ( t ) != totalSize ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + STRING00 + size + STRING00 + totalSize + STRING00 ) ; \n\t\t} \n\treturn new TupleIntArrayND ( t , size ) ; \n\t} \n"}, {"code": "public static MutableIntArrayND wrap ( MutableIntTuple t , IntTuple size ) { \n\t$F292612 ( Objects , t ) $F292612 ( Objects , size ) int totalSize = IntTupleFunctions . reduce ( size , INT00 , <missing ')'> ( a , b ) - > a * b ) ; \n\tif ( $F1976 ( t ) != totalSize ) { \n\t\tthrow new IllegalArgumentException ( STRING00 + $F1976 ( t ) + STRING00 + STRING00 + size + STRING00 + totalSize + STRING00 ) ; \n\t\t} \n\treturn new MutableTupleIntArrayND ( t , size ) ; \n\t} \n"}, {"code": "public static ToIntFunction < IntTuple > asFunction ( final IntArrayND array ) { \n\t$F292612 ( Objects , array ) return new ToIntFunction < IntTuple > $F2 { \n\t\t$F1 public int applyAsInt ( IntTuple s ) $F30911 ( array , s ) } \n\t; \n\t} \n"}, {"code": "public static IntArrayND createSubArray ( IntArrayND parent , IntTuple fromIndices , IntTuple toIndices ) { \n\treturn new SubIntArrayND $F2144 ( parent , fromIndices , toIndices ) ; \n\t} \n"}, {"code": "public static MutableIntArrayND createSubArray ( MutableIntArrayND parent , IntTuple fromIndices , IntTuple toIndices ) { \n\treturn new MutableSubIntArrayND $F2144 ( parent , fromIndices , toIndices ) ; \n\t} \n"}, {"code": "public static int min ( IntArrayND array ) { \n\treturn $F5025 ( array ) . parallel ( ) . reduce ( Integer . MAX_VALUE , Math : : <missing ';'> min ) ; \n\t} \n"}, {"code": "public static int max ( IntArrayND array ) { \n\treturn $F5025 ( array ) . parallel ( ) . reduce ( Integer . MIN_VALUE , Math : : <missing ';'> max ) ; \n\t} \n"}, {"code": "$F1 protected MessageFormat resolveMessageFormat ( Locale locale , String code ) { \n\t$F5618 ( msg , getStringOrNull , messages , code ) if $F268 ( msg ) $F14249 ( createMessageFormat , msg , locale ) $F724 } \n"}, {"code": "public static final String implodeParams ( $F60785 ( params ) , final String glue ) { \n\t$F19733 ( returnValue ) if $F4389 ( params ) { \n\t\treturn $F732076 ( params ) ; \n\t\t} \n\t$F579548 ( returnValue , params ) for ( $F2674 ( i , params ) ) { \n\t\treturnValue += glue + $F119932 ( params , i ) ; \n\t\t} \n\treturn returnValue ; \n\t} \n"}, {"code": "protected static ElementValue extractValue ( final String field , final AnnotationEntry entry ) { \n\tElementValue result = null ; \n\tfor ( final ElementValuePair p : entry . getElementValuePairs ( ) ) { \n\t\tif ( field . equals ( p . getNameString ( ) ) ) { \n\t\t\t$F92469 ( result , p ) $F332 } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public void setAccessed ( String id ) { \n\tT $F368035 ( obj , get , id ) ; \n\tif $F268 ( obj ) { \n\t\tobj . setAccessed ( ) ; \n\t\t} \n\t} \n"}, {"code": "public void purge $F2 { \n\t$F24610 ( startTime , System ) $F57820 ( objectPurged ) Set < Map . Entry $F7903 > $F91395 ( set , map ) ; \n\t$F24614 ( time , System , minUnactiveTime ) for ( Iterator < Map . Entry $F7903 > $F60361 ( i , set ) ; \n\t$F11309 ( i ) ; \n\t) { \n\t\tMap . Entry $F7903 $F11312 ( entry , i ) ; \n\t\tT $F4377 ( object , entry ) ; \n\t\tif ( object . getLastAccess ( ) < time && object . canPurge ( ) ) { \n\t\t\t$F16605 ( i ) objectPurged ++ ; \n\t\t\t} \n\t\t} \n\tif $F14980 ( log ) { \n\t\tif $F2015 ( objectPurged ) { \n\t\t\tif $F3507 ( log ) { \n\t\t\t\tlog . info ( $F6035 ( name , objectPurged ) + $F101254 ( System , startTime ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\telse { \n\t\t\tlog . info ( $F6035 ( name , objectPurged ) + $F101254 ( System , startTime ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static void addDependencyFactory ( Class ... dependencyFactoryClasses ) { \n\tfor ( Class dependencyFactoryClass : dependencyFactoryClasses ) { \n\t\tif ( ! dependencyFactoryClass . isAnnotationPresent ( DependencyFactory . class ) ) { \n\t\t\tthrow new AvicennaRuntimeException $F13407 ( dependencyFactoryClass ) ; \n\t\t\t} \n\t\tif ( Avicenna . dependencyFactories . contains ( dependencyFactoryClass ) ) { \n\t\t\tthrow new AvicennaRuntimeException $F13407 ( dependencyFactoryClass ) ; \n\t\t\t} \n\t\ttry { \n\t\t\taddDependencyFactoryToContainer ( $F6892 ( dependencyFactoryClass ) ) ; \n\t\t\tAvicenna . dependencyFactories . add ( dependencyFactoryClass ) ; \n\t\t\t} \n\t\tcatch ( InstantiationException e ) $F924679 ( e ) catch ( IllegalAccessException e ) $F924679 ( e ) } \n\t} \n"}, {"code": "public static void addDependencyFactory $F30965 ( dependencyFactories ) { \n\tfor ( Object dependencyFactory : dependencyFactories ) { \n\t\tif ( ! $F298 ( dependencyFactory ) . isAnnotationPresent ( DependencyFactory . class ) ) { \n\t\t\tthrow new AvicennaRuntimeException ( $F298 ( dependencyFactory ) + STRING00 ) ; \n\t\t\t} \n\t\tif ( Avicenna . dependencyFactories . contains ( $F298 ( dependencyFactory ) ) ) { \n\t\t\tthrow new AvicennaRuntimeException ( $F298 ( dependencyFactory ) + STRING00 ) ; \n\t\t\t} \n\t\taddDependencyFactoryToContainer ( dependencyFactory ) ; \n\t\tAvicenna . dependencyFactories . add ( $F298 ( dependencyFactory ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static void inject $F30965 ( objects ) { \n\ttry { \n\t\tfor ( Object object : objects ) { \n\t\t\t$F110706 ( clazz , object ) for ( Field field : ReflectionHelper . getFields ( clazz ) ) { \n\t\t\t\tif ( field . isAnnotationPresent ( InjectHere . class ) ) { \n\t\t\t\t\t$F39336 ( qualifiers ) for ( $F489254 ( annotation , field ) ) { \n\t\t\t\t\t\tif ( $F26817 ( annotation ) . isAnnotationPresent ( Qualifier . class ) ) { \n\t\t\t\t\t\t\tqualifiers . add ( $F26817 ( annotation ) . getCanonicalName ( ) ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t$F10869 ( field ) field . set ( object , dependencyContainer . get ( DependencyIdentifier . getDependencyIdentifierForClass ( field , qualifiers ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new AvicennaRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static $F1372 void defineDependency $F68870 ( clazz , dependency ) $F173484 ( defineDependency , clazz , dependency ) "}, {"code": "public static $F1372 void defineDependency ( $F7906 ( clazz ) , $F992 ( qualifiers ) , T dependency ) { \n\t$F596982 $F90458 ( qs ) ; \n\t$F74989 ( qualifiers , qs ) dependencyContainer . add ( DependencyIdentifier . getDependencyIdentifierForClass ( clazz , qs ) , new DependencySource ( clazz , dependency ) ) ; \n\t} \n"}, {"code": "public static $F1372 T get ( $F7906 ( clazz ) , $F992 ( qualifiers ) ) { \n\t$F596982 $F90458 ( qs ) ; \n\t$F74989 ( qualifiers , qs ) return dependencyContainer . get ( DependencyIdentifier . getDependencyIdentifierForClass ( clazz , qs ) ) ; \n\t} \n"}, {"code": "private static void addDependencyFactoryToContainer ( Object dependencyFactory ) { \n\ttry { \n\t\t$F110706 ( clazz , dependencyFactory ) for ( Field field : ReflectionHelper . getFields ( clazz ) ) { \n\t\t\tif ( field . isAnnotationPresent ( Dependency . class ) ) { \n\t\t\t\t$F39336 ( qualifiers ) for ( $F489254 ( annotation , field ) ) { \n\t\t\t\t\tif ( $F26817 ( annotation ) . isAnnotationPresent ( Qualifier . class ) ) { \n\t\t\t\t\t\tqualifiers . add ( $F26817 ( annotation ) . getCanonicalName ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tdependencyContainer . add ( DependencyIdentifier . getDependencyIdentifierForClass ( field , qualifiers ) , new DependencySource ( DependencySource . DependencySourceType . FIELD , field , null , dependencyFactory , field . isAnnotationPresent ( $F390320 ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tfor ( $F68547 ( method , clazz ) ) { \n\t\t\tif ( method . isAnnotationPresent ( Dependency . class ) ) { \n\t\t\t\t$F39336 ( qualifiers ) for ( $F489254 ( annotation , method ) ) { \n\t\t\t\t\tif ( $F26817 ( annotation ) . isAnnotationPresent ( Qualifier . class ) ) { \n\t\t\t\t\t\tqualifiers . add ( $F26817 ( annotation ) . getCanonicalName ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tdependencyContainer . add ( DependencyIdentifier . getDependencyIdentifierForClass ( method , qualifiers ) , new DependencySource ( DependencySource . DependencySourceType . METHOD , null , method , dependencyFactory , method . isAnnotationPresent ( $F390320 ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new AvicennaRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private String readResource $F62952 ( resourceName ) throws IOException { \n\treturn new BufferedReader ( new InputStreamReader ( $F35366 ( getClass , resourceName ) , DEFAULT_CHARSET ) ) . lines ( ) . collect ( $F6783 ( Collectors ) ) ; \n\t} \n"}, {"code": "private PrivateKey getPemPrivateKey $F62952 ( keyString ) throws EncryptionException { \n\ttry { \n\t\tfinal String privKeyPEM = $F4120 ( keyString ) . replaceAll ( $F1286 ) ; \n\t\tfinal Base64 b64 = new Base64 $F2 ; \n\t\tfinal $F1975 $F142712 ( decoded , b64 , privKeyPEM ) ; \n\t\tfinal PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec ( decoded ) ; \n\t\t$F1706800 ( kf , KeyFactory , ALGORITHM ) return kf . generatePrivate ( spec ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException | InvalidKeySpecException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "private PublicKey getPemPublicKey $F62952 ( keyString ) throws EncryptionException { \n\ttry { \n\t\tfinal String publicKeyPEM = $F4120 ( keyString ) . replaceAll ( $F1286 ) ; \n\t\tfinal Base64 b64 = new Base64 $F2 ; \n\t\tfinal $F1975 $F142712 ( decoded , b64 , publicKeyPEM ) ; \n\t\tfinal X509EncodedKeySpec spec = new X509EncodedKeySpec ( decoded ) ; \n\t\t$F1706800 ( kf , KeyFactory , ALGORITHM ) return kf . generatePublic ( spec ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException | InvalidKeySpecException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public $F1975 encrypt ( final String text , final KeyType keyType ) throws EncryptionException { \n\tfinal Key key = keyType == KeyType . PRIVATE ? privateKey : publicKey ; \n\ttry { \n\t\t$F1706800 ( cipher , Cipher , ALGORITHM ) $F382251 ( cipher , Cipher , key ) final $F1975 cipherText = cipher . doFinal ( $F99115 ( text , DEFAULT_CHARSET ) ) ; \n\t\treturn cipherText ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public String decrypt ( $F117585 ( text ) , final KeyType keyType ) throws EncryptionException { \n\tfinal Key key = keyType == KeyType . PRIVATE ? privateKey : publicKey ; \n\ttry { \n\t\t$F1706800 ( cipher , Cipher , ALGORITHM ) cipher . init ( Cipher . DECRYPT_MODE , key ) ; \n\t\t$F1975 $F380233 ( dectyptedText , cipher , text ) ; \n\t\t$F6097 ( dectyptedText , DEFAULT_CHARSET ) } \n\tcatch ( NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public String sign $F62952 ( message ) throws EncryptionException { \n\ttry { \n\t\t$F14492 ( sign , Signature ) sign . initSign ( privateKey ) ; \n\t\tsign . update ( $F99115 ( message , DEFAULT_CHARSET ) ) ; \n\t\treturn new String ( Base64 . encodeBase64 ( $F2632 ( sign ) ) , DEFAULT_CHARSET ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException | InvalidKeyException | SignatureException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public boolean verify $F96892 ( message , signature ) throws EncryptionException { \n\ttry { \n\t\t$F14492 ( sign , Signature ) sign . initVerify ( publicKey ) ; \n\t\tsign . update ( $F99115 ( message , DEFAULT_CHARSET ) ) ; \n\t\treturn sign . verify ( Base64 . decodeBase64 ( $F99115 ( signature , DEFAULT_CHARSET ) ) ) ; \n\t\t} \n\tcatch ( SignatureException | NoSuchAlgorithmException | InvalidKeyException e ) { \n\t\tthrow new EncryptionException $F2756 ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static Statement close ( Statement stmt , Logger logExceptionTo ) $F22720 ( close , stmt , logExceptionTo ) "}, {"code": "public static PreparedStatement close ( PreparedStatement stmt , Logger logExceptionTo , Object name ) { \n\t$F90659 ( stmt ) try { \n\t\t$F2760615 ( stmt ) } \n\tcatch ( SQLException e ) { \n\t\t( $F63500 ( logExceptionTo , logger ) ) . warn ( STRING00 + ( name == null ? $F797 ( stmt ) : name ) + STRING00 , e ) ; \n\t\t} \n\tclose ( ( Statement ) stmt , logExceptionTo , name ) ; \n\t$F724 } \n"}, {"code": "public static PreparedStatement close ( PreparedStatement stmt , Logger logExceptionTo ) $F22720 ( close , stmt , logExceptionTo ) "}, {"code": "public static ResultSet close ( ResultSet rs , Logger logExceptionTo , Object name ) { \n\t$F90659 ( rs ) try $F2453 ( rs ) catch ( SQLException e ) { \n\t\t( $F63500 ( logExceptionTo , logger ) ) . warn ( STRING00 + ( name == null ? $F797 ( rs ) : name ) + STRING00 , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static ResultSet close ( ResultSet rs , Logger logExceptionTo ) $F22720 ( close , rs , logExceptionTo ) "}, {"code": "public static ResultSet close ( ResultSet rs , PreparedStatement stmt , Logger logExceptionTo , Object name ) { \n\t$F5605 ( close , rs , logExceptionTo , name ) $F5605 ( close , stmt , logExceptionTo , name ) $F724 } \n"}, {"code": "public static Connection close ( Connection conn , Logger logExceptionTo , Object name ) { \n\t$F90659 ( conn ) try $F2453 ( conn ) catch ( SQLException e ) { \n\t\t( $F63500 ( logExceptionTo , logger ) ) . warn ( STRING00 + ( name == null ? $F797 ( conn ) : name ) + STRING00 , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static Connection close ( Connection conn , Logger logExceptionTo ) $F22720 ( close , conn , logExceptionTo ) "}, {"code": "@ Weight ( Weight . Unit . NORMAL ) public static < T extends Closeable > T defer ( $F623 final T closeable ) { \n\tif $F268 ( closeable ) { \n\t\tdefer ( new Deferred $F2 { \n\t\t\t$F217640 ( serialVersionUID ) $F1 public void executeDeferred $F2 throws Exception { \n\t\t\t\tIOUtils . closeQuetly ( closeable ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\t} \n\treturn closeable ; \n\t} \n"}, {"code": "@ Weight ( value = Weight . Unit . VARIABLE , comment = STRING00 ) public static void cancelDeferredActions $F2 { \n\t$F119109 ( stackDepth , ThreadUtils ) final List < Deferred > $F145 ( list , REGISTRY ) ; \n\tfinal Iterator < Deferred > $F9005 ( iterator , list ) ; \n\twhile $F11310 ( iterator ) { \n\t\tfinal Deferred $F11312 ( deferred , iterator ) ; \n\t\tif ( $F2969884 ( deferred ) >= stackDepth ) $F51479 ( iterator ) } \n\tif $F6132 ( list ) $F51479 ( REGISTRY ) } \n"}, {"code": "public static ConfigurationWrapper wrap ( Object toWrap ) { \n\t$F24434 ( toWrap ) if ( toWrap instanceof Bootstrap ) { \n\t\treturn new BootstrapAnnotationWrapper ( ( Bootstrap ) toWrap ) ; \n\t\t} \n\telse if ( toWrap instanceof Configuration ) { \n\t\treturn new ConfigurationAnnotationWrapper ( ( Configuration ) toWrap ) ; \n\t\t} \n\tthrow new IllegalArgumentException $F318111 ( toWrap ) ; \n\t} \n"}, {"code": "public $F5033 getList $F2 { \n\t$F88216 $F88219 ( ret , list ) ; \n\tfor ( AbstractManager manager : list ) { \n\t\tret . add ( $F6291 ( manager ) ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "public List < D6TableMetaInfo > getTablesInfo ( DBConnInfo dbConnInfo ) { \n\tfinal List < D6TableMetaInfo > retTablesInfo = new ArrayList < D6TableMetaInfo > $F2 ; \n\tfinal Connection conn = new DBConnCreator ( dbConnInfo ) . createDBConnection ( ) ; \n\t$F172635 ( tableList ) $F391030 ( rs ) try { \n\t\tfinal DatabaseMetaData $F380815 ( metaData , conn ) ; \n\t\trs = metaData . getTables ( null , null , STRING00 , $F199040 ) ; \n\t\ttry { \n\t\t\twhile $F88402 ( rs ) { \n\t\t\t\t$F620060 ( tableName , rs ) $F528 ( tableList , tableName ) } \n\t\t\t} \n\t\t$F2454 ( rs ) for ( String tableName : tableList ) { \n\t\t\tfinal D6TableMetaInfo tableInfo = new D6TableMetaInfo $F2 ; \n\t\t\t$F1357 ( tableInfo , tableName ) final Map < String , D6ColumnMetaInfo > colInfoMap = new LinkedHashMap < String , D6ColumnMetaInfo > $F2 ; \n\t\t\trs = metaData . getColumns ( null , null , tableName , null ) ; \n\t\t\ttry { \n\t\t\t\twhile $F88402 ( rs ) { \n\t\t\t\t\tD6ColumnMetaInfo colMeta = new D6ColumnMetaInfo $F2 ; \n\t\t\t\t\tcolMeta . columnName = $F2303 ( rs ) ; \n\t\t\t\t\tcolMeta . typeName = $F2303 ( rs ) ; \n\t\t\t\t\tcolMeta . columnSize = $F218337 ( rs ) ; \n\t\t\t\t\tcolMeta . isNullable = $F5755 ( $F2303 ( rs ) ) ; \n\t\t\t\t\tcolMeta . isAutoIncrement = $F5755 ( STRING00 ) ; \n\t\t\t\t\tcolMeta . dataType = $F218337 ( rs ) ; \n\t\t\t\t\tcolInfoMap . put ( colMeta . columnName , colMeta ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F2454 ( rs ) rs = metaData . getPrimaryKeys ( $F125296 ( tableName ) ) ; \n\t\t\ttry { \n\t\t\t\twhile $F88402 ( rs ) { \n\t\t\t\t\t$F620060 ( columnName , rs ) $F620060 ( pkName , rs ) final short primaryKeySequentialIndex = rs . getShort ( STRING00 ) ; \n\t\t\t\t\tfinal D6ColumnMetaInfo $F199 ( colMeta , colInfoMap , columnName ) ; \n\t\t\t\t\tif $F268 ( colMeta ) { \n\t\t\t\t\t\t$F1357 ( colMeta , pkName ) colMeta . isPrimaryKey = true ; \n\t\t\t\t\t\tcolMeta . primaryKeySeqNum = primaryKeySequentialIndex ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t$F2454 ( rs ) final Statement $F403407 ( stmt , conn ) ; \n\t\t\ttry { \n\t\t\t\trs = stmt . executeQuery ( $F320 ( tableName ) ) ; \n\t\t\t\ttry { \n\t\t\t\t\t$F391053 ( rmd , rs ) for ( int i = INT00 ; \n\t\t\t\t\ti <= $F385476 ( rmd ) ; \n\t\t\t\t\ti ++ ) { \n\t\t\t\t\t\tString columnName = $F442577 ( rmd , i ) ; \n\t\t\t\t\t\tfinal D6ColumnMetaInfo $F199 ( colMeta , colInfoMap , columnName ) ; \n\t\t\t\t\t\tif $F268 ( colMeta ) { \n\t\t\t\t\t\t\tcolMeta . className = rmd . getColumnClassName ( i ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t$F2454 ( rs ) } \n\t\t\t$F2454 ( stmt ) for ( $F88222 ( columnName , colInfoMap ) ) { \n\t\t\t\tD6ColumnMetaInfo $F199 ( colMeta , colInfoMap , columnName ) ; \n\t\t\t\ttableInfo . columnList . add ( colMeta ) ; \n\t\t\t\t} \n\t\t\t$F528 ( retTablesInfo , tableInfo ) } \n\t\t} \n\t$F1441403 ( e ) finally { \n\t\ttry $F2453 ( conn ) $F400407 } \n\treturn retTablesInfo ; \n\t} \n"}, {"code": "public static void set ( MutableIntArrayND a0 , IntSupplier s ) { \n\ta0 . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\ta0 . set ( t , $F67166 ( s ) ) ; \n\t\t} \n\t) ; \n\t} \n"}, {"code": "public static MutableIntArrayND apply ( IntArrayND a0 , IntArrayND a1 , IntBinaryOperator op , MutableIntArrayND result ) { \n\tUtils . checkForEqualSizes ( a0 , a1 ) ; \n\tMutableIntArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F90858 ( operand0 , a0 , t ) $F90858 ( operand1 , a1 , t ) int r = op . applyAsInt ( operand0 , operand1 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "public static MutableIntArrayND apply ( IntArrayND a0 , IntUnaryOperator op , MutableIntArrayND result ) { \n\tMutableIntArrayND $F304 ( finalResult , validate , a0 , result ) ; \n\tfinalResult . coordinates ( ) . parallel ( ) . forEach ( t - > <missing ';'> { \n\t\t$F90858 ( operand0 , a0 , t ) int r = op . applyAsInt ( operand0 ) ; \n\t\t$F52836 ( finalResult , t , r ) } \n\t) ; \n\treturn finalResult ; \n\t} \n"}, {"code": "private static MutableIntArrayND validate ( IntArrayND a , MutableIntArrayND result ) { \n\tif $F112 ( result ) { \n\t\tresult = IntArraysND . create ( $F1976 ( a ) ) ; \n\t\t} \n\telse { \n\t\tUtils . checkForEqualSizes ( a , result ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F1 public void add $F1195 ( key , value ) { \n\t$F8219 ( values , this , key ) if $F112 ( values ) { \n\t\tthis . put ( key , $F89159 ) ; \n\t\t} \n\t$F9874 ( this , key , value ) } \n"}, {"code": "$F1 public void asDefinitionText $F968436 ( sb ) { \n\t$F1218 ( sb ) for ( final E item : list ) { \n\t\t$F1218 ( sb ) $F7255 ( sb , item ) $F1218 ( sb ) } \n\t} \n"}, {"code": "$F1 public void asSetter $F968436 ( sb ) { \n\t$F1218 ( sb ) $F48974 ( firstTime ) for ( final E item : list ) { \n\t\t$F956196 ( firstTime , sb ) $F1218 ( sb ) $F7255 ( sb , item ) $F1218 ( sb ) firstTime = false ; \n\t\t} \n\t$F1218 ( sb ) } \n"}, {"code": "$F1 public boolean isSelected ( final Comparable $F26212 value , final boolean caseSensitive ) { \n\tif ( $F385 ( list ) && $F3416 ( list ) instanceof String && ! caseSensitive ) { \n\t\treturn list . contains ( $F57885 ( value ) . toLowerCase ( ) ) ; \n\t\t} \n\t$F15335 ( list , value ) } \n"}, {"code": "$F1 public E normalizeValue ( final E value , final boolean caseSensitive ) { \n\tE bestSoFar = null ; \n\tif $F38436 ( value ) $F356 ( value ) $F105093 ( stringValue , value ) for ( final E listItem : list ) { \n\t\t$F105093 ( stringListItem , listItem ) $F90983 ( stringValue ) $F90983 ( stringListItem ) if $F19401 ( stringListItem , stringValue ) { \n\t\t\tif ( $F431193 ( stringListItem , stringValue ) ) { \n\t\t\t\t$F548236 ( caseSensitive , listItem ) return value ; \n\t\t\t\t} \n\t\t\tif $F268 ( bestSoFar ) $F356 ( value ) bestSoFar = listItem ; \n\t\t\t} \n\t\t} \n\t$F99796 ( bestSoFar ) return value ; \n\t} \n"}, {"code": "$F1 public void usage ( final UsageBuilder str , final int indentLevel ) { \n\t$F1218 ( str ) for ( final E item : list ) { \n\t\t$F276983 ( str , item ) ; \n\t\t} \n\t} \n"}, {"code": "public void dump ( YamlNode data , OutputStream output ) { \n\tgetDelegate ( ) . dump ( data , new OutputStreamWriter $F101640 ( output , Charset ) ) ; \n\t} \n"}, {"code": "public void dumpAll ( Iterator < ? extends YamlNode > data , Writer output ) { \n\tgetDelegate ( ) . dumpAll ( data , output ) ; \n\t} \n"}, {"code": "public void dumpAll ( Iterator < ? extends YamlNode > data , OutputStream output ) { \n\tgetDelegate ( ) . dumpAll ( data , new OutputStreamWriter $F101640 ( output , Charset ) ) ; \n\t} \n"}, {"code": "public void dumpAll ( Iterable < ? extends YamlNode > data , Writer output ) { \n\tdumpAll ( $F58450 ( data , output ) ) ; \n\t} \n"}, {"code": "public void dumpAll ( Iterable < ? extends YamlNode > data , OutputStream output ) { \n\tdumpAll ( $F58450 ( data , output ) ) ; \n\t} \n"}, {"code": "public Stream < YamlNode > loadStream ( Reader yaml ) { \n\treturn StreamSupport . stream ( loadAll ( yaml ) . spliterator ( ) , false ) ; \n\t} \n"}, {"code": "private Iterable < YamlNode > cast ( $F60784 nodes ) { \n\t$F15270 $F15271 - > new UnmodifiableIterator < YamlNode > $F2 { \n\t\tprivate final $F221107 $F60361 ( iter , nodes ) ; \n\t\t$F58993 ( iter ) $F1 public YamlNode next $F2 { \n\t\t\treturn ( YamlNode ) $F11311 ( iter ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "protected Dataset < Sequence > getDataset ( SequenceFeaturizer $F1775 featurizer ) { \n\tList < Sequence > $F54 ( trainingData ) ; \n\ttry ( MStream $F641 lines = $F49969 ( corpus ) ) { \n\t\t$F224247 ( lines , line ) { \n\t\t\t$F35682 ( line ) if ( StringUtils . isNotNullOrBlank ( line ) ) { \n\t\t\t\tSequenceInput $F1775 input = new SequenceInput $F50 $F2 ; \n\t\t\t\tfor ( $F8125 ( i , line ) ) { \n\t\t\t\t\t$F14215 ( c , line , i ) if $F136771 ( Character , c ) { \n\t\t\t\t\t\tinput . setLabel ( $F40941 ( input ) , STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\t$F2067021 ( input , c ) } \n\t\t\t\t\t} \n\t\t\t\ttrainingData . add ( featurizer . extractSequence ( $F16599 ( input ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t) ; \n\t\t} \n\t$F183999 ( Throwables , e ) return $F8650030 ( Dataset ) . type ( DatasetType . OffHeap ) . source ( $F5025 ( trainingData ) ) ; \n\t} \n"}, {"code": "@ LogExecTime public void verifyImageSource $F1195 ( locator , src ) { \n\tjtImage . verifyImageSource ( locator , src ) ; \n\t} \n"}, {"code": "@ LogExecTime public void verifyElementContains $F1195 ( locator , value ) { \n\tjtCore . verifyElementContains ( locator , value ) ; \n\t} \n"}, {"code": "@ LogExecTime public void verifyElementText $F16060 ( locator , value , message ) { \n\tjtCore . verifyElementText ( locator , value , message ) ; \n\t} \n"}, {"code": "@ LogExecTime public void typeTinyMceEditor $F1195 ( locator , value ) { \n\tjtTinyMce . typeTinyMceEditor ( locator , value ) ; \n\t} \n"}, {"code": "@ LogExecTime public void attachFile $F1195 ( locator , fileUrl ) { \n\tjtInput . attachFile ( locator , fileUrl ) ; \n\t} \n"}, {"code": "@ LogExecTime public void verifyTextPresent $F1195 ( text , msg ) { \n\tjtCore . verifyTextPresent ( text , msg ) ; \n\t} \n"}, {"code": "@ LogExecTime public void dragAndDropToObject $F1195 ( locator , targetLocator ) { \n\tjtEvent . dragAndDropToObject ( locator , targetLocator ) ; \n\t} \n"}, {"code": "@ LogExecTime public void dragAndDropWithPause $F157451 ( locator , targetLocator , pause ) { \n\tjtEvent . dragAndDropWithPause ( locator , targetLocator , pause ) ; \n\t} \n"}, {"code": "@ LogExecTime public void fireEvent $F1195 ( locator , eventName ) { \n\tjtCore . fireEvent ( locator , eventName ) ; \n\t} \n"}, {"code": "@ LogExecTime public void typeHidden $F1195 ( locator , value ) { \n\tjtInput . typeHidden ( locator , value ) ; \n\t} \n"}, {"code": "public static long copy ( Readable from , Appendable to ) throws IOException { \n\tcheckNotNull ( from ) ; \n\tcheckNotNull ( to ) ; \n\t$F33795 ( buf , CharBuffer , BUF_SIZE ) $F57820 ( total ) while ( $F33778 ( from , buf ) != $F3745 ) { \n\t\t$F33783 ( buf ) $F1212 ( to , buf ) total += $F58025 ( buf ) ; \n\t\t$F39336 ( buf ) } \n\treturn total ; \n\t} \n"}, {"code": "static Reader asReader ( final Readable readable ) { \n\tcheckNotNull ( readable ) ; \n\tif ( readable instanceof Reader ) { \n\t\treturn ( Reader ) readable ; \n\t\t} \n\treturn new Reader $F2 { \n\t\t$F1 public int read $F66102 ( cbuf , off , len ) throws IOException { \n\t\t\treturn read ( $F61476 ( CharBuffer , cbuf , off , len ) ) ; \n\t\t\t} \n\t\t$F1 public int read ( CharBuffer target ) throws IOException { \n\t\t\t$F261844 ( readable , target ) } \n\t\t$F1 public void close $F2 throws IOException { \n\t\t\tif $F67094 ( readable ) { \n\t\t\t\t( ( Closeable ) readable ) . close ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 public ComparableEqu convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\ttry { \n\t\treturn $F627 ( ComparableEqu , valueStr ) ; \n\t\t} \n\tcatch ( final Exception pse ) { \n\t\tthrow new ParseException ( $F2443 ( pse ) , INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void exportCommandLineData ( final StringBuilder out , final int occ ) { \n\tuncompileQuoter ( out , $F43698 ( getValue , occ ) ) ; \n\t} \n"}, {"code": "$F1 public Equ [ ] getValueAsEquationArray $F2 throws ParseException { \n\tfinal Equ [ ] result = new Equ $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) result [ r ] = getValue ( r ) . delegate ; \n\treturn result ; \n\t} \n"}, {"code": "public void addObject ( E object ) { \n\tif $F385392 ( stopped ) $F223381 ( log ) $F528 ( objectList , object ) if ( $F385 ( objectList ) && stopedThreadNumber == INT00 && ! threadMap . containsKey ( $F9820 ( Thread ) ) ) { \n\t\tsynchronized ( threadList ) { \n\t\t\ttry $F212965 ( threadList ) $F136996 } \n\t\t} \n\tsynchronized ( objectList ) { \n\t\t$F239242 ( objectList ) } \n\t} \n"}, {"code": "public void waitUntilWorkDone $F2 { \n\twhile ( $F85850 ( objectListSize ) || $F85850 ( getRunningThreadNumber ) ) { \n\t\tif ( stopped ) { \n\t\t\tlog . fatal ( $F25036 ( objectListSize , getRunningThreadNumber ) + getThreadPoolSize ( ) ) ; \n\t\t\t$F254 } \n\t\tif $F3507 ( log ) { \n\t\t\tlog . debug ( $F25036 ( objectListSize , getRunningThreadNumber ) + getThreadPoolSize ( ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tlog . info ( $F25036 ( objectListSize , getRunningThreadNumber ) + getThreadPoolSize ( ) ) ; \n\t\t\t$F15578 ( Thread ) } \n\t\t$F136996 } \n\t$F2109 ( log ) for ( InnerConsumerThread thread : threadList ) { \n\t\ttry { \n\t\t\tthread . threadWorkDone ( ) ; \n\t\t\tsynchronized ( thread ) { \n\t\t\t\t$F239242 ( thread ) } \n\t\t\t} \n\t\tcatch ( Throwable e ) { \n\t\t\tlog . error ( $F51159 ( thread , e ) ) ; \n\t\t\t} \n\t\t} \n\t$F279380 ( objectList ) if $F14980 ( log ) { \n\t\tlog . info ( $F25036 ( objectListSize , getRunningThreadNumber ) + getThreadPoolSize ( ) ) ; \n\t\t} \n\tlog . info ( $F25036 ( objectListSize , getRunningThreadNumber ) + getThreadPoolSize ( ) ) ; \n\t} \n"}, {"code": "S3Response invoke ( $F623 String bucket , $F623 String object , $F623 String temporaryEndpoint ) throws S3Exception , CloudException , InternalException { \n\tif $F3507 ( wire ) { \n\t\t$F45360 ( wire ) $F45360 ( wire ) } \n\tHttpClient client = null ; \n\t$F2233 ( leaveOpen ) try { \n\t\t$F1200 ( url ) HttpRequestBase method ; \n\t\tint status ; \n\t\tif $F268 ( bucket ) { \n\t\t\tbucket = AWSCloud . encode ( bucket , false ) ; \n\t\t\t} \n\t\tif ( object != null && $F9141 ( object ) && $F9141 ( object ) && $F9141 ( object ) ) { \n\t\t\tobject = AWSCloud . encode ( object , false ) ; \n\t\t\t} \n\t\tif $F268 ( temporaryEndpoint ) { \n\t\t\ttemporaryEndpoint = AWSCloud . encode ( temporaryEndpoint , false ) ; \n\t\t\t} \n\t\tif ( provider . getEC2Provider ( ) . isAWS ( ) ) { \n\t\t\t$F1218 ( url ) String regionId = $F20708 ( provider ) . getRegionId ( ) ; \n\t\t\tif $F112 ( temporaryEndpoint ) { \n\t\t\t\t$F22092 ( validDomainName , isValidDomainName , bucket ) if $F221503 ( bucket , validDomainName ) { \n\t\t\t\t\t$F1212 ( url , bucket ) if ( $F14586 ( regionId ) && $F35562 ( regionId ) ) { \n\t\t\t\t\t\t$F1218 ( url ) $F1212 ( url , regionId ) url . append ( AWSCloud . getRegionSuffix ( regionId ) + STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\turl . append ( STRING00 + AWSCloud . getRegionSuffix ( $F20708 ( provider ) . getRegionId ( ) ) + STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tif ( $F14586 ( regionId ) && $F35562 ( regionId ) ) { \n\t\t\t\t\t\t$F1218 ( url ) $F1212 ( url , regionId ) url . append ( AWSCloud . getRegionSuffix ( regionId ) + STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\telse { \n\t\t\t\t\t\turl . append ( STRING00 + AWSCloud . getRegionSuffix ( $F20708 ( provider ) . getRegionId ( ) ) + STRING00 ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\tif $F53108 ( bucket , validDomainName ) $F101691 ( url , bucket ) } \n\t\t\telse $F101691 ( url , temporaryEndpoint ) } \n\t\telse if ( provider . getEC2Provider ( ) . isStorage ( ) && $F9139 ( provider . getProviderName ( ) ) ) { \n\t\t\t$F1218 ( url ) if $F112 ( temporaryEndpoint ) { \n\t\t\t\tif $F268 ( bucket ) $F101691 ( url , bucket ) $F1218 ( url ) } \n\t\t\telse $F101691 ( url , temporaryEndpoint ) } \n\t\telse { \n\t\t\t$F1987 ( idx ) if ( ! $F20708 ( provider ) . getEndpoint ( ) . startsWith ( STRING00 ) ) $F1219 ( url ) else { \n\t\t\t\tidx = $F20708 ( provider ) . getEndpoint ( ) . indexOf ( STRING00 ) ; \n\t\t\t\tif $F9467 ( idx ) { \n\t\t\t\t\tidx = $F35341 ; \n\t\t\t\t\t$F1218 ( url ) } \n\t\t\t\telse { \n\t\t\t\t\tidx = $F35341 ; \n\t\t\t\t\t$F1218 ( url ) } \n\t\t\t\t} \n\t\t\t$F19733 ( service ) if ( provider . getEC2Provider ( ) . isEucalyptus ( ) ) $F24706 ( service ) if $F112 ( temporaryEndpoint ) { \n\t\t\t\turl . append ( $F20708 ( provider ) . getEndpoint ( ) . substring ( idx ) ) ; \n\t\t\t\tif ( ! $F20708 ( provider ) . getEndpoint ( ) . endsWith ( STRING00 ) ) $F28710 ( url , service ) else $F8284 ( url , service ) } \n\t\t\telse { \n\t\t\t\t$F1212 ( url , temporaryEndpoint ) $F1218 ( url ) $F1212 ( url , service ) } \n\t\t\tif $F268 ( bucket ) $F101691 ( url , bucket ) } \n\t\tif $F268 ( object ) $F8284 ( url , object ) else if $F268 ( parameters ) { \n\t\t\t$F48974 ( first ) if ( object != null && $F472364 ( object ) ) $F57412 ( first ) for ( $F24106 ( entry , parameters ) ) { \n\t\t\t\t$F19202 ( key , entry ) $F6102 ( val , entry ) if ( first ) { \n\t\t\t\t\t$F1218 ( url ) first = false ; \n\t\t\t\t\t} \n\t\t\t\telse $F1219 ( url ) if $F268 ( val ) { \n\t\t\t\t\turl . append ( AWSCloud . encode ( key , false ) ) ; \n\t\t\t\t\t$F1218 ( url ) url . append ( AWSCloud . encode ( val , false ) ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\turl . append ( AWSCloud . encode ( key , false ) ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\tif ( provider . getEC2Provider ( ) . isStorage ( ) && provider . getProviderName ( ) . equalsIgnoreCase ( STRING00 ) ) { \n\t\t\theaders . put ( AWSCloud . P_GOOG_DATE , getDate ( ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\theaders . put ( AWSCloud . P_AWS_DATE , provider . getV4HeaderDate ( null ) ) ; \n\t\t\t} \n\t\tif $F16029 ( contentType , body ) { \n\t\t\tcontentType = STRING00 ; \n\t\t\t$F6257 ( headers , contentType ) } \n\t\telse $F6379 ( contentType , headers ) method = action . getMethod ( $F797 ( url ) ) ; \n\t\tString host = $F8004 ( method ) . getHost ( ) ; \n\t\t$F6257 ( headers , host ) if ( action . equals ( S3Action . PUT_BUCKET_TAG ) ) try { \n\t\t\theaders . put ( STRING00 , $F35558 ( toBase64 , computeMD5Hash , body ) ) ; \n\t\t\t} \n\t\tcatch ( NoSuchAlgorithmException e ) $F27418 ( logger , e ) catch ( IOException e ) $F27418 ( logger , e ) if $F268 ( headers ) { \n\t\t\tfor ( $F24106 ( entry , headers ) ) { \n\t\t\t\tmethod . addHeader ( $F18327 ( entry ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tif $F268 ( body ) { \n\t\t\t( ( HttpEntityEnclosingRequestBase ) method ) . setEntity ( new StringEntity ( body , APPLICATION_XML ) ) ; \n\t\t\t} \n\t\telse if $F268 ( uploadFile ) { \n\t\t\t( ( HttpEntityEnclosingRequestBase ) method ) . setEntity ( new FileEntity ( uploadFile , contentType ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\t$F4728 ( hash ) if ( method instanceof HttpEntityEnclosingRequestBase ) { \n\t\t\t\ttry { \n\t\t\t\t\thash = provider . getRequestBodyHash ( EntityUtils . toString ( ( ( HttpEntityEnclosingRequestBase ) method ) . getEntity ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( IOException e ) $F10474555 ( e ) } \n\t\t\telse { \n\t\t\t\thash = provider . getRequestBodyHash ( STRING00 ) ; \n\t\t\t\t} \n\t\t\tString signature ; \n\t\t\tif ( provider . getEC2Provider ( ) . isAWS ( ) ) { \n\t\t\t\tsignature = provider . getV4Authorization ( new String ( provider . getAccessKey ( ) [ INT00 ] ) , new String ( provider . getAccessKey ( ) [ INT00 ] ) , $F21352 ( method ) , $F797 ( url ) , SERVICE_ID , headers , hash ) ; \n\t\t\t\tif $F268 ( hash ) { \n\t\t\t\t\tmethod . addHeader ( AWSCloud . P_AWS_CONTENT_SHA256 , hash ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tsignature = provider . signS3 ( new String ( provider . getAccessKey ( ) [ INT00 ] , STRING00 ) , provider . getAccessKey ( ) [ INT00 ] , $F21352 ( method ) , null , contentType , headers , bucket , object ) ; \n\t\t\t\t} \n\t\t\tmethod . addHeader ( AWSCloud . P_CFAUTH , signature ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException e ) $F27418 ( logger , e ) if $F3507 ( wire ) { \n\t\t\twire . debug ( $F39055 ( url ) ) ; \n\t\t\twire . debug ( $F1705936 ( method ) . toString ( ) ) ; \n\t\t\tfor ( Header header : $F1104446 ( method ) ) { \n\t\t\t\twire . debug ( $F828 ( header ) + $F269 ( header ) ) ; \n\t\t\t\t} \n\t\t\t$F45360 ( wire ) if $F268 ( body ) { \n\t\t\t\ttry { \n\t\t\t\t\twire . debug ( EntityUtils . toString ( ( ( HttpEntityEnclosingRequestBase ) method ) . getEntity ( ) ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F137000 $F45360 ( wire ) } \n\t\t\telse if $F268 ( uploadFile ) { \n\t\t\t\t$F45360 ( wire ) $F45360 ( wire ) } \n\t\t\t} \n\t\tattempts ++ ; \n\t\tclient = provider . getClient ( $F46335 ( body , uploadFile ) ) ; \n\t\tS3Response response = new S3Response $F2 ; \n\t\tHttpResponse httpResponse ; \n\t\ttry { \n\t\t\tAPITrace . trace ( $F5646 ( provider , action ) ) ; \n\t\t\t$F465011 ( httpResponse , client , method ) if $F3507 ( wire ) { \n\t\t\t\twire . debug ( $F5983 ( httpResponse ) . toString ( ) ) ; \n\t\t\t\tfor ( Header header : $F1104446 ( httpResponse ) ) { \n\t\t\t\t\twire . debug ( $F828 ( header ) + $F269 ( header ) ) ; \n\t\t\t\t\t} \n\t\t\t\t$F45360 ( wire ) } \n\t\t\t$F6061 ( status , httpResponse ) ; \n\t\t\t} \n\t\tcatch ( IOException e ) { \n\t\t\tlogger . error ( $F189756 ( url , e ) ) ; \n\t\t\t$F10474554 ( e ) } \n\t\tresponse . headers = $F1104446 ( httpResponse ) ; \n\t\t$F5922 ( entity , httpResponse ) $F99950 ( input ) if $F268 ( entity ) { \n\t\t\ttry { \n\t\t\t\t$F757248 ( input , entity ) ; \n\t\t\t\t} \n\t\t\tcatch ( IOException e ) $F22213713 ( e ) } \n\t\ttry { \n\t\t\tif ( status == HttpStatus . SC_OK || status == HttpStatus . SC_CREATED || status == HttpStatus . SC_ACCEPTED ) { \n\t\t\t\tHeader clen = $F6005 ( httpResponse ) ; \n\t\t\t\t$F188800 ( len ) if $F268 ( clen ) { \n\t\t\t\t\tlen = Long . parseLong ( $F269 ( clen ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif $F86701 ( len ) { \n\t\t\t\t\ttry { \n\t\t\t\t\t\tHeader ct = $F6005 ( httpResponse ) ; \n\t\t\t\t\t\tif ( ( ct != null && ( $F269 ( ct ) . startsWith ( STRING00 ) || $F269 ( ct ) . startsWith ( STRING00 ) ) ) || ( action . equals ( S3Action . GET_BUCKET_TAG ) && input != null ) ) { \n\t\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\t\tresponse . document = parseResponse ( input ) ; \n\t\t\t\t\t\t\t\treturn response ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t$F2454 ( input ) } \n\t\t\t\t\t\telse if ( ct != null && $F269 ( ct ) . startsWith ( STRING00 ) && len < INT00 ) $F2200 else { \n\t\t\t\t\t\t\tresponse . contentLength = len ; \n\t\t\t\t\t\t\tif $F268 ( ct ) { \n\t\t\t\t\t\t\t\tresponse . contentType = $F269 ( ct ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t$F1357 ( response , input ) $F1357 ( response , method ) leaveOpen = true ; \n\t\t\t\t\t\t\treturn response ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\tcatch ( IOException e ) { \n\t\t\t\t\t\t$F27417 ( logger , e ) $F22213712 ( e ) } \n\t\t\t\t\t} \n\t\t\t\telse $F356 ( response ) } \n\t\t\telse if ( status == HttpStatus . SC_NO_CONTENT ) $F356 ( response ) if ( status == HttpStatus . SC_FORBIDDEN ) { \n\t\t\t\tthrow new S3Exception ( status , STRING00 , STRING00 , STRING00 + ( $F215486 ( url ) ) ) ; \n\t\t\t\t} \n\t\t\telse if ( status == HttpStatus . SC_NOT_FOUND ) { \n\t\t\t\tthrow new S3Exception ( status , null , null , STRING00 ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tif ( status == HttpStatus . SC_SERVICE_UNAVAILABLE || status == HttpStatus . SC_INTERNAL_SERVER_ERROR ) { \n\t\t\t\t\tif $F9869 ( attempts ) { \n\t\t\t\t\t\tString msg ; \n\t\t\t\t\t\tif ( status == HttpStatus . SC_SERVICE_UNAVAILABLE ) $F24706 ( msg ) else $F24706 ( msg ) $F27417 ( logger , msg ) $F22213712 ( msg ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\tleaveOpen = true ; \n\t\t\t\t\t\tif $F268 ( input ) { \n\t\t\t\t\t\t\ttry $F2453 ( input ) $F137000 } \n\t\t\t\t\t\ttry $F8848 ( Thread ) $F147063 $F4282 ( invoke , bucket , object ) } \n\t\t\t\t\t} \n\t\t\t\ttry { \n\t\t\t\t\tDocument doc ; \n\t\t\t\t\ttry { \n\t\t\t\t\t\t$F38536 ( logger , status ) $F10937 ( doc , parseResponse , input ) } \n\t\t\t\t\t$F116932 ( input ) if $F268 ( doc ) { \n\t\t\t\t\t\tString endpoint = null , code = null , message = null , requestId = null ; \n\t\t\t\t\t\t$F1108468 ( blocks , doc ) if $F330633 ( blocks ) { \n\t\t\t\t\t\t\tNode $F1593177 ( error , blocks ) ; \n\t\t\t\t\t\t\tNodeList attrs ; \n\t\t\t\t\t\t\t$F356716 ( attrs , error ) ; \n\t\t\t\t\t\t\tfor ( $F12267 ( i , attrs ) ) { \n\t\t\t\t\t\t\t\t$F356721 ( attr , attrs , i ) if ( $F2486379 ( attr ) && $F356736 ( attr ) ) $F22635934 ( code , attr ) else if ( $F2486379 ( attr ) && $F356736 ( attr ) ) $F22635934 ( message , attr ) else if ( $F2486379 ( attr ) && $F356736 ( attr ) ) $F22635934 ( requestId , attr ) else if ( $F2486379 ( attr ) && $F356736 ( attr ) ) $F22635934 ( endpoint , attr ) } \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\tif ( endpoint != null && $F14426 ( code ) ) { \n\t\t\t\t\t\t\tif $F268 ( temporaryEndpoint ) { \n\t\t\t\t\t\t\t\tthrow new CloudException $F2821 ( endpoint ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\telse $F12176 ( invoke , bucket , object , endpoint ) } \n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\tif $F112 ( message ) { \n\t\t\t\t\t\t\t\tthrow new CloudException $F74619 ( status , requestId , code ) ; \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tthrow new S3Exception $F3192 ( status , requestId , code , message ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\telse $F22213674 } \n\t\t\t\tcatch ( IOException e ) { \n\t\t\t\t\tif ( status == HttpStatus . SC_FORBIDDEN ) { \n\t\t\t\t\t\tthrow new S3Exception ( $F40425 ( status ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F22213712 ( e ) } \n\t\t\t\tcatch ( RuntimeException e ) $F22213713 ( e ) catch ( Error e ) $F22213713 ( e ) } \n\t\t\t} \n\t\tfinally { \n\t\t\tif ( ! leaveOpen ) { \n\t\t\t\tif $F268 ( input ) { \n\t\t\t\t\ttry $F2453 ( input ) $F137000 } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\tfinally { \n\t\tif $F119064 ( leaveOpen , client ) { \n\t\t\t$F279531 ( client ) . shutdown ( ) ; \n\t\t\t} \n\t\tif $F3507 ( wire ) { \n\t\t\t$F45360 ( wire ) $F45360 ( wire ) } \n\t\t} \n\t} \n"}, {"code": "$F1 public RestQueryResult executeQuery ( Request request , String repositoryName , String workspaceName , String language , String statement , long offset , long limit ) throws RepositoryException { \n\t$F90518 ( repositoryName ) $F90518 ( workspaceName ) $F90518 ( language ) $F90518 ( statement ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tQuery $F2207 ( query , createQuery , language , statement , session ) ; \n\tbindExtraVariables ( request , session . getValueFactory ( ) , query ) ; \n\tQueryResult $F34204 ( result , query ) ; \n\tRestQueryResult restQueryResult = new RestQueryResult $F2 ; \n\t$F21 columnNames = $F520397 ( result ) ; \n\t$F5605 ( setColumns , result , restQueryResult , columnNames ) String baseUrl = RestHelper . repositoryUrl ( request ) ; \n\t$F249 ( setRows , offset , limit , session , result , restQueryResult , columnNames , baseUrl ) return restQueryResult ; \n\t} \n"}, {"code": "$F1 public RestQueryPlanResult planQuery ( Request request , String repositoryName , String workspaceName , String language , String statement , long offset , long limit ) throws RepositoryException { \n\t$F90518 ( repositoryName ) $F90518 ( workspaceName ) $F90518 ( language ) $F90518 ( statement ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\torg . modeshape . jcr . api . query . Query $F2207 ( query , createQuery , language , statement , session ) ; \n\tbindExtraVariables ( request , session . getValueFactory ( ) , query ) ; \n\torg . modeshape . jcr . api . query . QueryResult result = query . explain ( ) ; \n\tString plan = result . getPlan ( ) ; \n\treturn new RestQueryPlanResult ( plan , statement , language , query . getAbstractQueryModelRepresentation ( ) ) ; \n\t} \n"}, {"code": "protected RoxableTest getMethodAnnotation ( Description description ) throws NoSuchMethodException { \n\treturn $F2457909 ( description ) . getMethod ( $F8534 ( description ) ) . getAnnotation ( RoxableTest . class ) ; \n\t} \n"}, {"code": "private String getName ( Description description , RoxableTest mAnnotation ) { \n\tif ( mAnnotation == null || $F2941 ( mAnnotation ) == null || $F2941 ( mAnnotation ) . isEmpty ( ) ) { \n\t\treturn Inflector . getHumanName ( $F8534 ( description ) ) ; \n\t\t} \n\telse { \n\t\t$F374404 ( mAnnotation ) } \n\t} \n"}, {"code": "protected String getCategory ( RoxableTestClass classAnnotation , RoxableTest methodAnnotation ) { \n\tif ( methodAnnotation != null && methodAnnotation . category ( ) != null && ! methodAnnotation . category ( ) . isEmpty ( ) ) { \n\t\treturn methodAnnotation . category ( ) ; \n\t\t} \n\telse if ( classAnnotation != null && classAnnotation . category ( ) != null && ! classAnnotation . category ( ) . isEmpty ( ) ) { \n\t\treturn classAnnotation . category ( ) ; \n\t\t} \n\telse if ( $F210436 ( configuration ) != null && ! $F210436 ( configuration ) . isEmpty ( ) ) { \n\t\treturn $F210436 ( configuration ) ; \n\t\t} \n\telse if $F268 ( category ) $F356 ( category ) else $F356 ( DEFAULT_CATEGORY ) } \n"}, {"code": "private $F1043 getTags ( RoxableTest methodAnnotation , RoxableTestClass classAnnotation ) { \n\t$F1043 tags = CollectionHelper . getTags ( $F11283 ( configuration ) , methodAnnotation , classAnnotation ) ; \n\t$F215029 ( tags , DEFAULT_TAG ) return tags ; \n\t} \n"}, {"code": "private $F1043 getTickets ( RoxableTest methodAnnotation , RoxableTestClass classAnnotation ) { \n\treturn CollectionHelper . getTickets ( configuration . getTickets ( ) , methodAnnotation , classAnnotation ) ; \n\t} \n"}, {"code": "public void serialize ( DocumentImpl doc ) throws IOException { \n\torg . w3c . dom . Document $F1908922 ( w3cDoc , doc ) ; \n\tif ( w3cDoc instanceof HTMLDocumentImpl ) { \n\t\t$F36360 ( writer ) DocumentType dt = w3cDoc . getDoctype ( ) ; \n\t\tif $F268 ( dt ) { \n\t\t\tif ( $F746072 ( dt ) != null ) { \n\t\t\t\t$F36360 ( writer ) writer . write ( $F746072 ( dt ) ) ; \n\t\t\t\t$F36360 ( writer ) } \n\t\t\tif ( $F2169018 ( dt ) != null ) { \n\t\t\t\t$F36360 ( writer ) writer . write ( $F2169018 ( dt ) ) ; \n\t\t\t\t$F36360 ( writer ) } \n\t\t\t} \n\t\t$F36360 ( writer ) } \n\telse $F100253 ( writer ) if ( $F681055 ( doc ) != null ) { \n\t\twrite ( ( ( ElementImpl ) $F681055 ( doc ) ) . getNode ( ) ) ; \n\t\t} \n\t$F6369 ( writer ) } \n"}, {"code": "private void write ( Node n ) throws IOException { \n\tif $F581924 ( n , Node ) { \n\t\tif ( noescape ) { \n\t\t\twriter . write ( $F384104 ( n ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\tStrings . escapeXML ( $F384104 ( n ) , writer ) ; \n\t\t\t} \n\t\t$F254 } \n\tif $F1582724 ( n , Node ) { \n\t\t$F581981 ( tag , n ) $F36360 ( writer ) $F21494 ( writer , tag ) $F504940 ( attrs , n ) for ( $F12267 ( i , attrs ) ) { \n\t\t\t$F356721 ( attr , attrs , i ) String value = $F384104 ( attr ) . trim ( ) ; \n\t\t\tif ( ! value . equals ( HTML . DEFAULT_ATTRS . get ( $F267464 ( attr ) ) ) ) { \n\t\t\t\t$F36360 ( writer ) writer . write ( $F267464 ( attr ) ) ; \n\t\t\t\t$F36360 ( writer ) $F36360 ( writer ) Strings . escapeXML ( value , writer ) ; \n\t\t\t\t$F36360 ( writer ) } \n\t\t\t} \n\t\tboolean emptyTag = HTML . EMPTY_TAGS . contains ( tag ) ; \n\t\tif ( emptyTag ) { \n\t\t\t$F36360 ( writer ) $F36360 ( writer ) } \n\t\t$F36360 ( writer ) $F190203 ( emptyTag ) noescape = HTML . RAW_TAGS . contains ( tag ) ; \n\t\t$F356718 ( children , n ) for ( $F12267 ( i , children ) ) { \n\t\t\t$F3463997 ( write , children , i ) ; \n\t\t\t} \n\t\tnoescape = false ; \n\t\t$F36360 ( writer ) $F36360 ( writer ) $F21494 ( writer , tag ) $F36360 ( writer ) } \n\t} \n"}, {"code": "public T get ( Instant effectivAt ) { \n\tEntry < Instant , ValueListEntry $F1372 > $F22378 ( floorEntry , values , effectivAt ) ; \n\t$F90659 ( floorEntry ) ValueListEntry $F1372 $F4377 ( vle , floorEntry ) ; \n\tif ( ! ( effectivAt . isBefore ( vle . expires ) ) ) $F724 $F61396 ( vle ) } \n"}, {"code": "public final ChildSelector $F1372 element ( QName qname , ElementConstraint ... constraints ) { \n\tElementEqualsConstraint nameConstraint = new ElementEqualsConstraint ( qname ) ; \n\treturn new ChildSelector $F1372 ( getContext ( ) , getCurrentSelector ( ) , ElementSelector . gatherConstraints ( nameConstraint , constraints ) ) ; \n\t} \n"}, {"code": "public final ChildSelector $F1372 element ( String localName , ElementConstraint ... constraints ) { \n\treturn element ( new QName ( localName ) , constraints ) ; \n\t} \n"}, {"code": "public final ChildSelector $F1372 elements ( QName ... names ) { \n\tElementSelector $F1372 parent = getCurrentSelector ( ) ; \n\tChildSelector $F1372 newSelector = null ; \n\tfor ( QName name : $F998 ( Arrays , names ) ) { \n\t\tnewSelector = new ChildSelector $F1372 ( getContext ( ) , parent , ( ElementConstraint ) new ElementEqualsConstraint ( name ) ) ; \n\t\tparent = newSelector ; \n\t\t} \n\treturn newSelector ; \n\t} \n"}, {"code": "public final ChildSelector $F1372 child ( ElementConstraint ... constraints ) { \n\treturn new ChildSelector $F1372 ( getContext ( ) , getCurrentSelector ( ) , $F998 ( Arrays , constraints ) ) ; \n\t} \n"}, {"code": "public final ElementSelector $F1372 descendant ( ElementConstraint ... constraints ) { \n\treturn new DescendantSelector $F1372 ( getContext ( ) , getCurrentSelector ( ) , $F998 ( Arrays , constraints ) ) ; \n\t} \n"}, {"code": "public final ElementSelector $F1372 descendant ( QName qname , ElementConstraint ... constraints ) { \n\tElementEqualsConstraint nameConstraint = new ElementEqualsConstraint ( qname ) ; \n\treturn new DescendantSelector $F1372 ( getContext ( ) , getCurrentSelector ( ) , ElementSelector . gatherConstraints ( nameConstraint , constraints ) ) ; \n\t} \n"}, {"code": "public final ElementSelector $F1372 descendant ( String localName , ElementConstraint ... constraints ) { \n\treturn descendant ( new QName ( localName ) , constraints ) ; \n\t} \n"}, {"code": "public static $F1372 $F58399 notNull $F58489 ( iterable ) { \n\treturn iterable == null ? Collections . EMPTY_LIST : iterable ; \n\t} \n"}, {"code": "public static $F1372 $F23339 asList $F58489 ( iterable ) { \n\t$F28729 ( result ) $F289412 ( item , iterable , result ) return result ; \n\t} \n"}, {"code": "public static $F28723 int compare $F54099 ( left , right ) { \n\tint result ; \n\tif $F112 ( left ) { \n\t\tif $F112 ( right ) $F12286 ( result ) else $F16052 ( result ) } \n\telse { \n\t\tif $F112 ( right ) $F12286 ( result ) else { \n\t\t\t$F68212 ( result , left , right ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static $F1372 $F58224 offer ( T head , $F52903 $F58224 tail ) { \n\t$F58224 result = newArrayInstance ( $F76161 ( tail ) ) ; \n\t$F60852 ( result , head ) $F35447 ( System , tail , result ) return result ; \n\t} \n"}, {"code": "public static $F1372 $F58224 offerArray ( $F58224 prepend , $F58224 tail ) { \n\tif $F954651 ( prepend ) $F356 ( tail ) else if $F954651 ( tail ) $F356 ( prepend ) else { \n\t\t$F58224 result = newArrayInstance ( tail , $F35439 ( prepend , tail ) ) ; \n\t\t$F35447 ( System , prepend , result ) $F35450 ( System , tail , result , prepend ) return result ; \n\t\t} \n\t} \n"}, {"code": "$F762 public static $F1372 $F58224 newArrayInstance ( $F58224 template , int length ) { \n\treturn newArrayInstance ( ( $F7905 ) $F64289 ( template ) , length ) ; \n\t} \n"}, {"code": "$F762 public static $F1372 $F58224 newArrayInstance ( $F7906 ( baseClass ) , int length ) { \n\treturn ( $F58224 ) $F64293 ( Array , baseClass , length ) ; \n\t} \n"}, {"code": "public static boolean equal $F28114 ( thisObject , thatObject ) { \n\treturn thisObject == null ? thatObject == null : $F5249 ( thisObject , thatObject ) ; \n\t} \n"}, {"code": "public static $F2612 getLoggingClass ( Object object ) { \n\t$F43477 ( result , object ) if ( $F19101 ( result ) . matches ( STRING00 ) ) $F7917 ( result ) return result ; \n\t} \n"}, {"code": "public static String join $F18538 ( separator , parts ) { \n\t$F1200 ( builder ) $F48974 ( first ) for ( String part : parts ) { \n\t\tif ( first ) $F57412 ( first ) else $F8284 ( builder , separator ) $F1212 ( builder , part ) } \n\t$F1226 ( builder ) } \n"}, {"code": "public static $F1372 $F23339 toList ( TypedIterable $F1372 iterable ) { \n\t$F28729 ( result ) $F289412 ( item , iterable , result ) return result ; \n\t} \n"}, {"code": "public static String cat $F30965 ( components ) { \n\t$F1200 ( stringBuilder ) if $F5678 ( components ) { \n\t\t$F83900 ( stringBuilder , components ) for ( $F61008 ( i , components ) ) { \n\t\t\tstringBuilder . append ( BagObject . PATH_SEPARATOR ) . append ( $F119932 ( components , i ) ) ; \n\t\t\t} \n\t\t} \n\t$F1226 ( stringBuilder ) } \n"}, {"code": "public Integer extractNumFound $F1195 ( jsonString , recordId ) { \n\t$F1987 ( numFound ) if $F109626 ( StringUtils , jsonString ) $F356 ( numFound ) Object $F137181 ( document , JSON_PROVIDER , jsonString ) ; \n\tif ( document instanceof LinkedHashMap ) { \n\t\tMap documentMap = ( LinkedHashMap ) document ; \n\t\tif $F55319 ( documentMap ) { \n\t\t\tMap response = ( LinkedHashMap ) $F1169 ( documentMap ) ; \n\t\t\tnumFound = ( int ) $F1169 ( response ) ; \n\t\t\t} \n\t\telse { \n\t\t\tLOGGER . severe ( STRING00 + jsonString ) ; \n\t\t\t} \n\t\t} \n\telse { \n\t\tLOGGER . severe ( $F320 ( document ) + $F298 ( document ) ) ; \n\t\t} \n\treturn numFound ; \n\t} \n"}, {"code": "public void addCrudService ( Class clazz , BundleContext bundleContext , JcrRepository repository ) throws RepositoryException { \n\t$F218100 ( jcrom , clazz ) ; \n\tJcrCrudService $F405312 jcromCrudService ; \n\tjcromCrudService = new JcrCrudService $F50 $F2144 ( repository , jcrom , clazz ) ; \n\tcrudServiceRegistrations . put ( $F70035 ( jcromCrudService , registerCrud , bundleContext ) ) ; \n\t} \n"}, {"code": "private ServiceRegistration registerCrud ( BundleContext context , JcrCrudService crud ) { \n\tDictionary prop = jcromConfiguration . toDictionary ( ) ; \n\tprop . put ( Crud . ENTITY_CLASS_PROPERTY , $F699823 ( crud ) ) ; \n\tprop . put ( Crud . ENTITY_CLASSNAME_PROPERTY , $F699823 ( crud ) . getName ( ) ) ; \n\tServiceRegistration serviceRegistration = context . registerService ( new String [ ] { \n\t\tCrud . class . getName ( ) , JcrCrud . class . getName ( ) } \n\t, crud , prop ) ; \n\treturn serviceRegistration ; \n\t} \n"}, {"code": "public static void sleep $F226825 ( durationInMillis ) { \n\ttry $F12419 ( Thread , durationInMillis ) catch ( InterruptedException e ) { \n\t\t$F176425 ( LOG , e ) $F3537 ( Thread ) } \n\t} \n"}, {"code": "public static void sleep $F563402 ( duration , unit ) { \n\ttry { \n\t\tThread . sleep ( $F139742 ( unit , duration ) ) ; \n\t\t} \n\tcatch ( InterruptedException e ) { \n\t\t$F176425 ( LOG , e ) $F3537 ( Thread ) } \n\t} \n"}, {"code": "$F1 public String serialize ( InvocationContext context , Object input ) { \n\treturn input == null ? STRING00 : $F6258 ( String , input ) ; \n\t} \n"}, {"code": "protected void init ( $F7906 ( cls ) , Key ... keys ) { \n\t$F95965 ( targetColumns ) $F7909 ( clazz , cls ) while ( clazz != null && $F554308 ( clazz ) ) { \n\t\t$F271609 ( fields , clazz ) for ( Field f : fields ) { \n\t\t\t$F352575 ( m , f ) if ( Modifier . isTransient ( m ) || $F381185 ( Modifier , m ) ) $F42718 if ( $F28230 ( f ) . equals ( $F23401 . getName ( ) ) ) $F42718 if ( ! $F28230 ( f ) . equals ( Translator . class . getName ( ) ) ) { \n\t\t\t\t$F6945 ( targetColumns , f ) types . put ( $F507 ( f ) , $F511 ( f ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F7916 ( clazz ) } \n\t$F111040 ( columns , targetColumns ) for ( $F10914 ( i , targetColumns ) ) $F44601 ( columns , i , targetColumns ) } \n"}, {"code": "$F1 public $F25622 find ( final SearchTerm [ ] terms , JiteratorFilter $F1372 filter , Boolean orderDesc , String ... orderFields ) throws PersistenceException { \n\tPopulatorThread $F1372 populator ; \n\tpopulator = new PopulatorThread $F1372 ( new JiteratorPopulator $F1372 $F2 { \n\t\tpublic void populate ( Jiterator $F1372 iterator ) throws PersistenceException { \n\t\t\t$F391030 ( rs ) try { \n\t\t\t\t$F4728 ( index ) $F21685 ( values , terms ) FindOperator operator = null ; \n\t\t\t\tfor ( $F2674 ( i , terms ) ) { \n\t\t\t\t\tindex = terms [ i ] . getColumn ( ) ; \n\t\t\t\t\tvalues [ i ] = $F62538 ( terms , i ) . toString ( ) ; \n\t\t\t\t\tswitch ( terms [ i ] . getOperator ( ) ) { \n\t\t\t\t\t\tcase EQUALS : operator = FindOperator . EQ ; \n\t\t\t\t\t\t$F332 case GREATER_THAN : operator = FindOperator . GT ; \n\t\t\t\t\t\t$F332 case GREATER_THAN_OR_EQUAL_TO : operator = FindOperator . GE ; \n\t\t\t\t\t\t$F332 case LESS_THAN : operator = FindOperator . LT ; \n\t\t\t\t\t\t$F332 case LESS_THAN_OR_EQUAL_TO : operator = FindOperator . LE ; \n\t\t\t\t\t\t$F332 $F2377 throw new PersistenceException $F500 ( operator ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\trs = $F34105 ( getSession , index , getPrimaryKeyField ) . find ( $F70078 ( values , operator ) ) ; \n\t\t\t\twhile $F88402 ( rs ) { \n\t\t\t\t\tT object = get ( getValue ( getPrimaryKeyField ( ) , INT00 , rs ) ) ; \n\t\t\t\t\tif $F268 ( object ) $F22707 ( iterator , object ) } \n\t\t\t\t} \n\t\t\tcatch ( Exception e ) { \n\t\t\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t\t\t} \n\t\t\tfinally { \n\t\t\t\ttry $F2453 ( rs ) catch ( SQLException e ) { \n\t\t\t\t\tthrow new PersistenceException $F26312 ( e ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t) ; \n\tpopulator . populate ( ) ; \n\t$F115962 ( populator ) } \n"}, {"code": "private IndexSession getSession $F3019 ( index , columns ) throws PersistenceException { \n\tIndexSession session = null ; \n\tString sessionKey = index + $F57426 ( Arrays , columns ) ; \n\ttry { \n\t\tif $F112 ( hsClient ) { \n\t\t\thsClient = new HSClientImpl $F2144 ( handlerSocketHost , port , poolSize ) ; \n\t\t\t} \n\t\t$F13002 ( session , indexSessions , sessionKey ) if $F112 ( session ) { \n\t\t\tsession = hsClient . openIndexSession ( database , this . getSqlNameForClassName ( getEntityClassName ( ) ) , index , columns ) ; \n\t\t\t$F2725 ( indexSessions , sessionKey , session ) } \n\t\treturn session ; \n\t\t} \n\tcatch ( Exception e ) $F5070055 ( e ) } \n"}, {"code": "private Server __buildServer $F2 { \n\tServer mServer = new Server $F2 ; \n\tConnector [ ] connectors = getConnectors ( mServer ) ; \n\tif $F44788 ( connectors ) $F47776 for ( Connector connector : connectors ) { \n\t\tmServer . addConnector ( connector ) ; \n\t\t} \n\tServletContextHandler handler = new ServletContextHandler ( ServletContextHandler . SESSIONS ) ; \n\thandler . setContextPath ( STRING00 ) ; \n\thandler . setResourceBase ( $F108 ( System ) ) ; \n\tfor ( Map . Entry < String , List < Class $F1106837 > > filterEntry : $F708 ( filterMap ) ) { \n\t\tfor ( Class $F1106837 filterClass : $F269 ( filterEntry ) ) { \n\t\t\thandler . addFilter ( filterClass , $F712 ( filterEntry ) , EnumSet . of ( DispatcherType . REQUEST ) ) ; \n\t\t\t} \n\t\t} \n\tfor ( Map . Entry < String , Class < ? extends HttpServlet > > servletEntry : $F708 ( servletMap ) ) { \n\t\thandler . addServlet ( $F63130 ( servletEntry ) ) ; \n\t\t} \n\tfor ( Class < ? extends EventListener > eventListenerClass : servletContextListenerSet ) { \n\t\ttry { \n\t\t\tEventListener $F117556 ( eventListener , eventListenerClass ) ; \n\t\t\thandler . addEventListener ( eventListener ) ; \n\t\t\t} \n\t\tcatch ( IllegalAccessException | InstantiationException ex ) $F11568 ( ex ) } \n\tif $F268 ( errorHandler ) $F2124031 ( handler , errorHandler ) $F11093 ( mServer , handler ) return mServer ; \n\t} \n"}, {"code": "protected Connector [ ] getConnectors ( Server server ) { \n\tServerConnector http = new ServerConnector ( server ) ; \n\t$F16249 ( http , DEFAULT_HTTP_PORT ) return new Connector $F21535 ( http ) ; \n\t} \n"}, {"code": "public void start $F2 { \n\tstop ( ) ; \n\tif $F7301 ( isInitialized ) { \n\t\tonInit ( ) ; \n\t\t$F10411 ( server , __buildServer ) } \n\ttry $F25018 ( server ) $F11569 ( e ) } \n"}, {"code": "public SC registerServletContextListener ( Class < ? extends ServletContextListener > servletContextListener ) { \n\t__throwIfInitialized ( ) ; \n\t$F92938 ( servletContextListener ) $F528 ( servletContextListenerSet , servletContextListener ) return ( SC ) this ; \n\t} \n"}, {"code": "public SC registerFilter ( Class $F1106837 filterClass , String urlPattern ) { \n\t__throwIfInitialized ( ) ; \n\tList < Class $F1106837 > $F199 ( filterList , filterMap , urlPattern ) ; \n\tif $F112 ( filterList ) { \n\t\t$F195528 ( filterList ) $F2725 ( filterMap , urlPattern , filterList ) } \n\t$F215029 ( filterList , filterClass ) return ( SC ) this ; \n\t} \n"}, {"code": "public final SC registerFilter ( Class $F1106837 filterClass ) { \n\tWebFilter webFilter = filterClass . getAnnotation ( WebFilter . class ) ; \n\tif $F112 ( webFilter ) throw new IllegalArgumentException ( String . format ( STRING00 , WebFilter . class . getName ( ) , $F507 ( filterClass ) ) ) ; \n\t$F21 $F105040 ( urlPatterns , webFilter ) ; \n\tif $F4389 ( urlPatterns ) $F58904 ( urlPatterns , webFilter ) if $F4389 ( urlPatterns ) throw new IllegalArgumentException $F17128 ( String , filterClass ) ; \n\t$F22199 ( urlPattern , urlPatterns , registerFilter , filterClass ) return ( SC ) this ; \n\t} \n"}, {"code": "public SC registerServlet ( Class < ? extends HttpServlet > servletClass , String urlPattern ) { \n\t__throwIfInitialized ( ) ; \n\tif ( $F2734 ( servletMap , urlPattern ) && $F198 ( servletMap , urlPattern ) != servletClass ) throw new IllegalArgumentException ( String . format ( STRING00 , urlPattern , $F198 ( servletMap , urlPattern ) ) ) ; \n\t$F2725 ( servletMap , urlPattern , servletClass ) return ( SC ) this ; \n\t} \n"}, {"code": "public final SC registerServlet ( Class < ? extends HttpServlet > servletClass ) { \n\tWebServlet webServlet = servletClass . getAnnotation ( WebServlet . class ) ; \n\tif $F112 ( webServlet ) throw new IllegalArgumentException ( String . format ( STRING00 , WebFilter . class . getName ( ) , $F507 ( servletClass ) ) ) ; \n\t$F21 $F105040 ( urlPatterns , webServlet ) ; \n\tif $F4389 ( urlPatterns ) $F58904 ( urlPatterns , webServlet ) if $F4389 ( urlPatterns ) throw new IllegalArgumentException $F17128 ( String , servletClass ) ; \n\t$F22199 ( urlPattern , urlPatterns , registerServlet , servletClass ) return ( SC ) this ; \n\t} \n"}, {"code": "public static String formatFallback $F404410 ( pattern , arguments ) { \n\t$F9439 ( sb , pattern ) for ( Object argument : arguments ) $F105011 ( sb , argument ) $F1226 ( sb ) } \n"}, {"code": "public static String format ( final String pattern , final Locale locale , final Object ... arguments ) { \n\tMessageFormat format = new MessageFormat ( pattern , locale ) ; \n\t$F150600 ( format , arguments ) } \n"}, {"code": "public static String format ( final ResourceBundle bundle , final String key , final Object ... arguments ) { \n\tString $F6800 ( pattern , ResourceBundles , bundle , key ) ; \n\t$F107527 ( arguments , pattern ) if $F8962 ( pattern , key ) $F14249 ( formatFallback , pattern , arguments ) return format ( pattern , $F600772 ( bundle ) , arguments ) ; \n\t} \n"}, {"code": "$F1 public void write $F9459 ( b , off , len ) throws IOException { \n\tfor ( OutputStream child : children ) $F157403 ( child , b , off , len ) } \n"}, {"code": "$F1 public void write $F2665 ( b ) throws IOException { \n\tfor ( OutputStream child : children ) $F125961 ( child , b ) } \n"}, {"code": "$F1 protected void valueCreate ( $F21 strings , Value value ) { \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tvalue . addPrimitiveValue ( $F18575 ( labels , i , strings ) ) ; \n\t\t} \n\tfor ( Entry < $F19413 , $F21 > entry : $F708 ( simpleJoinMap ) ) { \n\t\t$F19413 $F14625 ( p , entry ) ; \n\t\t$F48974 ( b ) for ( $F2674 ( i , dataJoinNo ) ) { \n\t\t\tif ( ! $F198 ( p , i ) . matcher ( $F102016 ( strings , dataJoinNo , i ) ) . matches ( ) ) $F57412 ( b ) } \n\t\tif ( b ) { \n\t\t\t$F36803 ( masters , simpleJoinMap , p ) for ( $F2674 ( i , masterLabels ) ) { \n\t\t\t\tvalue . addPrimitiveValue ( $F18575 ( masterLabels , i , masters ) ) ; \n\t\t\t\t} \n\t\t\t$F332 } \n\t\t} \n\t} \n"}, {"code": "public static $F1372 $F8938 dup $F67145 ( collection ) { \n\tif $F540 ( isEmpty , collection ) return $F398159 ; \n\treturn new $F292748 ( collection ) ; \n\t} \n"}, {"code": "public static $F1372 $F8938 newSet $F81342 ( contents ) { \n\t$F8939 ( set ) ; \n\tif $F44788 ( contents ) $F24894 ( newSet ) set = $F67644 ( newSet , contents ) ; \n\t$F26089 ( Collections , set , contents ) return set ; \n\t} \n"}, {"code": "public static $F1372 $F8938 newUnmodifiableSet $F81342 ( contents ) { \n\t$F8939 ( set ) ; \n\tif $F44788 ( contents ) $F11597 ( Collections ) if $F4389 ( contents ) return Collections . singleton ( contents [ INT00 ] ) ; \n\tset = $F67644 ( newSet , contents ) ; \n\t$F26089 ( Collections , set , contents ) $F8957 ( Collections , set ) } \n"}, {"code": "public static $F1372 $F8938 newUnmodifiableSet $F67145 ( contents ) { \n\tif $F540 ( isEmpty , contents ) $F11597 ( Collections ) if $F3415 ( contents ) return Collections . singleton ( $F20822 ( contents ) ) ; \n\treturn Collections . unmodifiableSet ( dup ( contents ) ) ; \n\t} \n"}, {"code": "public static $F1372 $F23339 makeSureInit $F40295 ( ts ) { \n\tif $F112 ( ts ) { \n\t\t$F245206 ( ts ) ; \n\t\t} \n\treturn ts ; \n\t} \n"}, {"code": "public static $F1372 boolean isContainString ( $F40294 ( stringObjects ) , Object stringObject ) { \n\tif ( $F1930 ( ListUtil , stringObjects ) || stringObject == null ) $F1668 for ( T tempStringObject : stringObjects ) { \n\t\tif ( $F39589 ( stringObject ) ( $F797 ( tempStringObject ) ) ) $F233 } \n\t$F213 } \n"}, {"code": "$F12506 public static $F1372 AutoCloseableIterator $F1372 concat ( final AutoCloseableIterator $F1372 ... inputs ) { \n\treturn concat ( $F57867 ( ImmutableList , inputs ) ) ; \n\t} \n"}, {"code": "public static $F1372 AutoCloseableIterator $F1372 concat ( final Collection < AutoCloseableIterator $F1372 > inputs ) { \n\treturn new AutoCloseableIterator $F1372 ( com . google . common . collect . Iterators . concat ( $F16599 ( inputs ) ) , new AutoCloseable $F2 { \n\t\t$F1 public void close $F2 throws Exception { \n\t\t\t$F208565 ( firstException ) for ( AutoCloseableIterator $F8941 i : inputs ) { \n\t\t\t\ttry $F2453 ( i ) catch ( Exception e ) { \n\t\t\t\t\t$F1620 ( firstException , e ) } \n\t\t\t\t} \n\t\t\t$F118467 ( firstException ) } \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F762 $F5446012 < K extends K0 , V extends V0 > RemovalListener $F28644 getRemovalListener $F2 { \n\treturn ( RemovalListener $F28644 ) MoreObjects . firstNonNull ( removalListener , NullListener . INSTANCE ) ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif ( $F3413 ( values ) < getParameterCount ( ) ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\t$F102635 ( sb ) for ( $F81130 ( p , getParameterCount ) ) { \n\t\t\tsb . insert ( INT00 , values . popString ( ) ) ; \n\t\t\t} \n\t\tvalues . push ( $F797 ( sb ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "protected synchronized void addPrefix $F62952 ( prefixString ) { \n\tif $F268 ( prefixString ) { \n\t\tfinal $F1043 prefixes = getPrefixes ( ) ; \n\t\t$F528 ( prefixes , prefixString ) setPrefixes ( prefixes ) ; \n\t\t} \n\t} \n"}, {"code": "public static URI createSha1Urn $F347039 ( file ) throws IOException { \n\t$F45360 ( LOG ) if ( $F1203 ( file ) == NUM00 ) $F9471 return createSha1Urn ( $F1097 ( file ) ) ; \n\t} \n"}, {"code": "public static URI createSha1Urn $F124759 ( buf ) throws IOException { \n\tfinal MessageDigest md = new Sha1 $F2 ; \n\t$F98647 ( md , buf ) final $F1975 $F429252 ( sha1 , md ) ; \n\ttry { \n\t\treturn new URI ( STRING00 + $F12341 ( Base32 , sha1 ) ) ; \n\t\t} \n\tcatch ( final URISyntaxException e ) { \n\t\t$F5572 ( LOG , e ) throw new IOException ( STRING00 + $F12341 ( Base32 , sha1 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static URI createSha1Urn ( final InputStream is , final MessageDigest md ) throws IOException { \n\t$F45360 ( LOG ) $F180515 ( buffer ) int read ; \n\ttry { \n\t\twhile $F453114 ( read , is , buffer ) { \n\t\t\t$F380247 ( md , buffer , read ) } \n\t\t} \n\t$F191053 ( IOUtils , is ) final $F1975 $F429252 ( sha1 , md ) ; \n\t$F45360 ( LOG ) try { \n\t\treturn new URI ( STRING00 + $F12341 ( Base32 , sha1 ) ) ; \n\t\t} \n\tcatch ( final URISyntaxException e ) { \n\t\t$F5572 ( LOG , e ) throw new IOException ( STRING00 + $F12341 ( Base32 , sha1 ) ) ; \n\t\t} \n\t} \n"}, {"code": "public static String hash $F62952 ( str ) { \n\ttry { \n\t\tfinal MessageDigest md = new Sha1 $F2 ; \n\t\tfinal $F1975 hashed = md . digest ( $F108365 ( str ) ) ; \n\t\tfinal $F1975 encoded = Base64 . encodeBase64 ( hashed ) ; \n\t\treturn $F136017 ( encoded ) ; \n\t\t} \n\tcatch ( final UnsupportedEncodingException e ) { \n\t\t$F5572 ( LOG , e ) $F3956 } \n\t} \n"}, {"code": "public boolean authenticate $F1195 ( appId , apiKey ) throws MnoConfigurationException { \n\treturn $F26568 ( appId , apiKey ) && $F615478 ( appId , api ) && $F464251 ( apiKey , api ) ; \n\t} \n"}, {"code": "public boolean authenticate ( HttpServletRequest request ) throws MnoException { \n\t$F51313 ( authHeader , request ) $F158927 ( authHeader ) $F96174 ( auth , authHeader ) if ( $F227907 ( auth ) || ! $F1305352 ( auth ) ) $F1668 $F1975 decodedStr = DatatypeConverter . parseBase64Binary ( auth [ INT00 ] ) ; \n\t$F159660 ( creds ) try { \n\t\tcreds = ( $F136017 ( decodedStr ) ) . split ( STRING00 ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\tthrow new MnoException ( $F45920 ( Arrays , auth ) , e ) ; \n\t\t} \n\tif $F4389 ( creds ) { \n\t\treturn $F187359 ( authenticate , creds ) ; \n\t\t} \n\telse $F1668 } \n"}, {"code": "public $F96 toMetadataHash $F2 { \n\t$F457548 ( hash ) $F6257 ( hash , marketplace ) hash . put ( STRING00 , app . toMetadataHash ( ) ) ; \n\thash . put ( STRING00 , api . toMetadataHash ( ) ) ; \n\thash . put ( STRING00 , sso . toMetadataHash ( ) ) ; \n\thash . put ( STRING00 , connec . toMetadataHash ( ) ) ; \n\thash . put ( STRING00 , webhook . toMetadataHash ( ) ) ; \n\treturn hash ; \n\t} \n"}, {"code": "$F1 public $F1372 T unwrap $F7907 ( clazz ) { \n\treturn $F19884 . isAssignableFrom ( clazz ) ? $F14239 ( clazz , session ) : null ; \n\t} \n"}, {"code": "public static $F5033 complementaryPyCcLib $F2 throws IOException { \n\tif $F112 ( complementaryLibs ) { \n\t\t$F89160 ( complementaryLibs ) ; \n\t\tInputStream inputStream = API . class . getClassLoader ( ) . getResourceAsStream ( FILE ) ; \n\t\tPropertyResourceBundle labels = new PropertyResourceBundle ( inputStream ) ; \n\t\t$F5499 $F395730 ( bundleKeys , labels ) ; \n\t\twhile $F5506 ( bundleKeys ) { \n\t\t\tString key ; \n\t\t\tif ( KEY . equals ( $F5508 ( key , bundleKeys ) ) ) { \n\t\t\t\t$F221952 ( value , labels , key ) if $F14587 ( value ) { \n\t\t\t\t\t$F30789 ( values , value ) for ( String v : values ) $F113391 ( complementaryLibs , v ) } \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\treturn complementaryLibs ; \n\t} \n"}, {"code": "$F1 public GenericContext < ElementType > lookup ( final Predicate < ElementType > pPredicate ) { \n\treturn lookup ( pPredicate , Integer . MAX_VALUE , new GenericContext < ElementType > $F2 ) ; \n\t} \n"}, {"code": "$F1 public < TargetContextType extends IModifyableContext < ElementType > > TargetContextType lookup ( final Predicate < ElementType > pPredicate , final TargetContextType pTarget ) { \n\treturn lookup ( pPredicate , Integer . MAX_VALUE , pTarget ) ; \n\t} \n"}, {"code": "$F1 public GenericContext < ElementType > lookup ( final Predicate < ElementType > pPredicate , final int pMaxCount ) { \n\treturn lookup ( pPredicate , pMaxCount , new GenericContext $F50 $F2 ) ; \n\t} \n"}, {"code": "$F1 public < TargetContextType extends IModifyableContext < ElementType > > TargetContextType lookup ( final Predicate < ElementType > pPredicate , final int pMaxCount , final TargetContextType pTarget ) { \n\tif $F3730 ( pMaxCount ) { \n\t\tfor ( final ElementType lElement : fElements ) { \n\t\t\tif $F65607 ( pPredicate , lElement ) $F69555 ( pTarget , lElement ) if ( pTarget . getCurrentElementCount ( ) >= pMaxCount ) $F333 } \n\t\t} \n\treturn pTarget ; \n\t} \n"}, {"code": "$F1 public float readFloat $F2 throws IOException { \n\treadTally += INT00 ; \n\tif ( order == ByteOrder . BIG_ENDIAN ) { \n\t\treturn $F259859 ( in ) ; \n\t\t} \n\telse { \n\t\t$F33779 ( in , w4 ) return $F57987 ( ByteBuffer , w4 ) . order ( ByteOrder . LITTLE_ENDIAN ) . asFloatBuffer ( ) . get ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void readFully $F2665 ( b ) throws IOException { \n\t$F248405 ( in , b ) $F102747 ( readTally , b ) } \n"}, {"code": "$F1 public short readShort $F2 throws IOException { \n\treadTally += INT00 ; \n\tif ( order == ByteOrder . BIG_ENDIAN ) $F24895 ( readShort ) else { \n\t\t$F33779 ( in , w2 ) return $F57987 ( ByteBuffer , w2 ) . order ( ByteOrder . LITTLE_ENDIAN ) . asShortBuffer ( ) . get ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public String readUTF $F2 throws IOException { \n\t$F99079 ( result , in ) readTally += $F17883 ( result ) ; \n\treturn result ; \n\t} \n"}, {"code": "$F762 public static $F2338 Map $F46098 toUnderscoreHash ( Map $F46098 hash ) { \n\t$F90659 ( hash ) Map $F46098 newHash = new HashMap $F46098 $F2 ; \n\tfor ( Map . Entry $F46098 entry : $F708 ( hash ) ) { \n\t\tV $F4377 ( value , entry ) ; \n\t\tif $F5619 ( value ) { \n\t\t\tvalue = ( V ) toUnderscoreHash ( $F2749 ( value ) ) ; \n\t\t\t} \n\t\tnewHash . put ( MnoStringHelper . toSnakeCase ( $F712 ( entry ) ) , value ) ; \n\t\t} \n\treturn newHash ; \n\t} \n"}, {"code": "$F1 public void writeChar ( int v ) throws IOException { \n\twork [ INT00 ] = ( byte ) $F64185 ( v ) ; \n\twork [ INT00 ] = ( byte ) ( $F3080089 ( v ) ) ; \n\t$F968705 ( write , work ) } \n"}, {"code": "$F1 public void writeInt ( int v ) throws IOException { \n\twork [ INT00 ] = ( byte ) $F5237505 ( v ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\t$F968705 ( write , work ) } \n"}, {"code": "$F1 public void writeLong ( long v ) throws IOException { \n\twork [ INT00 ] = ( byte ) $F5237505 ( v ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\twork [ INT00 ] = ( byte ) ( NUM00 & $F13996 ( v ) ) ; \n\t$F968705 ( write , work ) } \n"}, {"code": "$F1 public void writeShort ( int v ) throws IOException { \n\twork [ INT00 ] = ( byte ) $F64185 ( v ) ; \n\twork [ INT00 ] = ( byte ) ( $F3080089 ( v ) ) ; \n\t$F968705 ( write , work ) } \n"}, {"code": "$F1 public void write $F9459 ( b , off , len ) throws IOException $F157403 ( inner , b , off , len ) "}, {"code": "private static $F28644 Multimap $F28644 filterFiltered ( FilteredMultimap $F28644 multimap , Predicate < ? super $F58047 > entryPredicate ) { \n\tPredicate $F58198 predicate = Predicates . and ( multimap . entryPredicate ( ) , entryPredicate ) ; \n\treturn new FilteredEntryMultimap $F28644 ( multimap . unfiltered ( ) , predicate ) ; \n\t} \n"}, {"code": "private static $F28644 SetMultimap $F28644 filterFiltered ( FilteredSetMultimap $F28644 multimap , Predicate < ? super $F58047 > entryPredicate ) { \n\tPredicate $F58198 predicate = Predicates . and ( multimap . entryPredicate ( ) , entryPredicate ) ; \n\treturn new FilteredEntrySetMultimap $F28644 ( multimap . unfiltered ( ) , predicate ) ; \n\t} \n"}, {"code": "private static Document loadTemplateDocument ( String templateName , DocumentBuilder builder , Reader reader ) throws IOException { \n\t$F75199 ( READ_AHEAD_SIZE ) $F98218 ( bufferedReader , reader ) $F1697681 ( bufferedReader , READ_AHEAD_SIZE ) $F44616 ( cbuf , READ_AHEAD_SIZE ) for ( $F72243 ( i , READ_AHEAD_SIZE ) ) { \n\t\t$F61221 ( c , bufferedReader ) if $F9467 ( c ) { \n\t\t\tthrow new IOException $F7261 ( String , templateName ) ; \n\t\t\t} \n\t\tcbuf [ i ] = ( char ) c ; \n\t\t} \n\t$F96911 ( header , cbuf ) if $F409685 ( header ) { \n\t\tthrow new TemplateException $F2756 ( templateName ) ; \n\t\t} \n\t$F48974 ( isXML ) if $F113362 ( header ) $F57412 ( isXML ) else if $F113362 ( header ) $F24354 ( isXML ) else { \n\t\t$F26016 ( log , templateName ) if $F380592 ( header ) $F57412 ( isXML ) } \n\t$F7296 ( bufferedReader ) return isXML ? builder . loadXML ( bufferedReader ) : builder . loadHTML ( bufferedReader ) ; \n\t} \n"}, {"code": "public static $F1372 T create ( final InterfaceDescriptor $F1372 descriptor , final Invoker invoker ) { \n\t$F544121 ( descriptor ) $F544121 ( invoker ) InvocationProxy $F1372 invocationProxy = new InvocationProxy $F1372 $F83235 ( descriptor , invoker ) ; \n\treturn invocationProxy . toProxy ( ) ; \n\t} \n"}, {"code": "private void createLibFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( libLocation ) ) ) Files . createDirectories ( $F21277 ( libLocation ) ) ; \n\t} \n"}, {"code": "private void createResourceFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( resourceLocation ) ) ) Files . createDirectories ( $F21277 ( resourceLocation ) ) ; \n\t} \n"}, {"code": "private void createPropertiesFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( propertiesLocation ) ) ) Files . createDirectories ( $F21277 ( propertiesLocation ) ) ; \n\t} \n"}, {"code": "private void createLogsFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( logsLocation ) ) ) Files . createDirectories ( $F21277 ( logsLocation ) ) ; \n\t} \n"}, {"code": "private void createSystemFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( systemLocation ) ) ) Files . createDirectories ( $F21277 ( systemLocation ) ) ; \n\t} \n"}, {"code": "private void createSystemDataFolder $F2 throws IOException { \n\tif ( ! Files . exists ( $F21277 ( systemDataLocation ) ) ) Files . createDirectories ( $F21277 ( systemDataLocation ) ) ; \n\t} \n"}, {"code": "$F1 public Object getObject ( String key ) { \n\t$F101516 ( path , Key , key ) int $F24330 ( index , binarySearch , path ) ; \n\tif $F9869 ( index ) { \n\t\tPair pair = container [ index ] ; \n\t\tObject found = pair . value ; \n\t\treturn $F4389 ( path ) ? found : ( ( Bag ) found ) . getObject ( path [ INT00 ] ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public BagObject put $F844 ( key , object ) { \n\t$F10508 ( object , objectify ) if $F268 ( object ) { \n\t\t$F101516 ( path , Key , key ) Pair $F24330 ( pair , getOrAddPair , path ) ; \n\t\tif $F4389 ( path ) { \n\t\t\t$F197582 ( pair , object ) } \n\t\telse { \n\t\t\tBagObject bagObject = ( BagObject ) pair . value ; \n\t\t\tif $F112 ( bagObject ) { \n\t\t\t\tpair . value = ( bagObject = new BagObject $F2 ) ; \n\t\t\t\t} \n\t\t\t$F89110 ( bagObject , path , object ) } \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public BagObject add $F844 ( key , object ) { \n\t$F101516 ( path , Key , key ) Pair $F24330 ( pair , getOrAddPair , path ) ; \n\tif $F4389 ( path ) { \n\t\tBagArray bagArray ; \n\t\tObject found = pair . value ; \n\t\tif ( ( $F10507 ( object , objectify ) ) == null ) { \n\t\t\tif $F112 ( found ) { \n\t\t\t\tpair . value = ( bagArray = new BagArray $F2 ) ; \n\t\t\t\t} \n\t\t\telse if ( found instanceof BagArray ) { \n\t\t\t\tbagArray = ( BagArray ) found ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\tpair . value = ( bagArray = new BagArray $F1415 ) ; \n\t\t\t\t$F528 ( bagArray , found ) } \n\t\t\t$F96756 ( bagArray ) } \n\t\telse { \n\t\t\tif $F112 ( found ) { \n\t\t\t\t$F197582 ( pair , object ) } \n\t\t\telse { \n\t\t\t\tif ( found instanceof BagArray ) { \n\t\t\t\t\tbagArray = ( BagArray ) found ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tpair . value = ( bagArray = new BagArray $F1415 ) ; \n\t\t\t\t\t$F528 ( bagArray , found ) } \n\t\t\t\t$F528 ( bagArray , object ) } \n\t\t\t} \n\t\t} \n\telse { \n\t\tBagObject bagObject = ( BagObject ) pair . value ; \n\t\tif $F112 ( bagObject ) { \n\t\t\tpair . value = ( bagObject = new BagObject $F2 ) ; \n\t\t\t} \n\t\tbagObject . add ( $F88900 ( path , object ) ) ; \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public BagObject remove ( String key ) { \n\t$F101516 ( path , Key , key ) int $F24330 ( index , binarySearch , path ) ; \n\tif $F9869 ( index ) { \n\t\tif $F4389 ( path ) { \n\t\t\t$F68266 ( gapIndex , index ) System . arraycopy ( container , gapIndex , container , index , count - gapIndex ) ; \n\t\t\t-- count ; \n\t\t\t} \n\t\telse { \n\t\t\tBagObject found = ( BagObject ) $F114893 ( container , index ) ; \n\t\t\tfound . remove ( path [ INT00 ] ) ; \n\t\t\t} \n\t\t} \n\treturn this ; \n\t} \n"}, {"code": "public boolean has ( String key ) { \n\t$F101516 ( path , Key , key ) int $F24330 ( index , binarySearch , path ) ; \n\ttry { \n\t\treturn $F9869 ( index ) && ( $F4389 ( path ) || ( ( BagObject ) $F114893 ( container , index ) ) . has ( path [ INT00 ] ) ) ; \n\t\t} \n\tcatch ( ClassCastException classCastException ) $F1668 } \n"}, {"code": "public $F21 keys $F2 { \n\t$F97640 ( keys , count ) for ( $F72243 ( i , count ) ) { \n\t\tkeys [ i ] = container [ i ] . key ; \n\t\t} \n\treturn keys ; \n\t} \n"}, {"code": "$F1 protected Object getOptionValue ( $F109288 argq ) { \n\treturn Integer . parseInt ( $F16604 ( argq ) ) ; \n\t} \n"}, {"code": "private long copyLarge ( final InputStream input , final OutputStream output , final int bufferSize ) throws IOException { \n\t$F127211 ( buffer , bufferSize ) $F57820 ( count ) $F1987 ( n ) while ( $F3745 != $F34941 ( n , input , buffer ) ) { \n\t\t$F34945 ( output , buffer , n ) count += n ; \n\t\t} \n\t$F3509 ( log , count ) return count ; \n\t} \n"}, {"code": "public static $F3244 addAll ( $F3244 array1 , $F3244 array2 ) { \n\tif $F112 ( array1 ) $F3342 ( clone , array2 ) else $F22988 ( array2 , clone , array1 ) $F3244 joinedArray = ( $F3244 ) Array . newInstance ( $F64289 ( array1 ) , $F35439 ( array1 , array2 ) ) ; \n\t$F35447 ( System , array1 , joinedArray ) try { \n\t\t$F35450 ( System , array2 , joinedArray , array1 ) } \n\tcatch ( ArrayStoreException ase ) { \n\t\tfinal Class $F64290 ( type1 , array1 ) ; \n\t\tfinal Class $F64290 ( type2 , array2 ) ; \n\t\tif $F263302 ( type1 , type2 ) { \n\t\t\tthrow new IllegalArgumentException ( $F253174 ( type2 , type1 ) ) ; \n\t\t\t} \n\t\tthrow ase ; \n\t\t} \n\treturn joinedArray ; \n\t} \n"}, {"code": "public static $F1975 addAll $F135889 ( array1 , array2 ) { \n\tif $F112 ( array1 ) $F3342 ( clone , array2 ) else $F22988 ( array2 , clone , array1 ) $F1975 joinedArray = new byte $F35440 ( array1 , array2 ) ; \n\t$F35447 ( System , array1 , joinedArray ) $F35450 ( System , array2 , joinedArray , array1 ) return joinedArray ; \n\t} \n"}, {"code": "public static $F3244 add ( $F3244 array , Object element ) { \n\tClass type ; \n\tif $F268 ( array ) { \n\t\t$F384363 ( type , array ) } \n\telse if $F268 ( element ) { \n\t\t$F384363 ( type , element ) } \n\telse { \n\t\t$F351767 ( type ) ; \n\t\t} \n\t$F3244 newArray = ( $F3244 ) copyArrayGrow1 ( array , type ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F18550 add ( $F18550 array , boolean element ) { \n\t$F18550 newArray = ( $F18550 ) $F4396449 ( copyArrayGrow1 , array , Boolean ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F1975 add ( $F1975 array , byte element ) { \n\t$F1975 newArray = ( $F1975 ) $F4396449 ( copyArrayGrow1 , array , Byte ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F2666 add ( $F2666 array , char element ) { \n\t$F2666 newArray = ( $F2666 ) $F4396449 ( copyArrayGrow1 , array , Character ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F79106 add ( $F79106 array , double element ) { \n\t$F79106 newArray = ( $F79106 ) $F4396449 ( copyArrayGrow1 , array , Double ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F73786 add ( $F73786 array , float element ) { \n\t$F73786 newArray = ( $F73786 ) $F4396449 ( copyArrayGrow1 , array , Float ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F55422 add ( $F55422 array , long element ) { \n\t$F55422 newArray = ( $F55422 ) $F4396449 ( copyArrayGrow1 , array , Long ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public static $F83763 add ( $F83763 array , short element ) { \n\t$F83763 newArray = ( $F83763 ) $F4396449 ( copyArrayGrow1 , array , Short ) ; \n\t$F349377 ( newArray , element ) return newArray ; \n\t} \n"}, {"code": "public T annotationType ( $F410888 AnnotationType annotationType ) { \n\t$F248555 ( this , annotationType ) return $F586252 ( Cast , this ) ; \n\t} \n"}, {"code": "public T filter ( $F410888 SerializablePredicate < ? super HString > filter ) { \n\t$F1357 ( this , filter ) return $F586252 ( Cast , this ) ; \n\t} \n"}, {"code": "public AnnotationType [ ] getAnnotationTypes $F2 { \n\tif $F6132 ( annotationType ) { \n\t\treturn new AnnotationType [ ] { \n\t\t\tTypes . TOKEN } \n\t\t; \n\t\t} \n\treturn annotationType . toArray ( new AnnotationType $F31920 ( annotationType ) ) ; \n\t} \n"}, {"code": "public T toStringFunction ( $F410888 SerializableFunction < HString , String > toStringFunction ) { \n\t$F1357 ( this , toStringFunction ) return $F586252 ( Cast , this ) ; \n\t} \n"}, {"code": "public T trimFunction ( $F410888 SerializableFunction < HString , HString > trimFunction ) { \n\t$F1357 ( this , trimFunction ) return $F586252 ( Cast , this ) ; \n\t} \n"}, {"code": "public static void sleep ( final TimeUnit timeUnit , final long units ) { \n\ttry $F12419 ( timeUnit , units ) catch ( final InterruptedException ignored ) $F890 ( ignore , ignored ) } \n"}, {"code": "public static void ignore $F61660 ( ignored ) { \n\t$F5572 ( ignore , ignored ) for ( final IgnoredExceptionListener listener : ignoredExceptionListeners ) $F381470 ( listener , ignored ) } \n"}, {"code": "$F1 public void exceptionCaught ( IoSession session , Throwable cause ) throws Exception { \n\t$F182618 ( log , session , cause ) this . sensorIoAdapter . exceptionCaught ( session , cause ) ; \n\t} \n"}, {"code": "$F1 public void messageReceived ( IoSession session , Object message ) throws Exception { \n\t$F133680 ( log , session , message ) if ( this . sensorIoAdapter == null ) { \n\t\t$F131442 ( log , session , message ) $F254 } \n\tif ( message instanceof SampleMessage ) { \n\t\tif ( this . sensorIoAdapter != null ) { \n\t\t\tthis . sensorIoAdapter . sensorSampleReceived ( session , ( SampleMessage ) message ) ; \n\t\t\t} \n\t\t} \n\telse if ( message instanceof HandshakeMessage ) { \n\t\t$F133680 ( log , session , message ) if ( this . sensorIoAdapter != null ) { \n\t\t\tthis . sensorIoAdapter . handshakeMessageReceived ( session , ( HandshakeMessage ) message ) ; \n\t\t\t} \n\t\t} \n\telse $F131443 ( log , session , message ) } \n"}, {"code": "$F1 public void messageSent ( IoSession session , Object message ) throws Exception { \n\t$F133680 ( log , message , session ) if ( this . sensorIoAdapter == null ) { \n\t\t$F131442 ( log , session , message ) $F254 } \n\tif ( message instanceof HandshakeMessage ) { \n\t\t$F133680 ( log , session , message ) if ( this . sensorIoAdapter != null ) { \n\t\t\tthis . sensorIoAdapter . handshakeMessageSent ( session , ( HandshakeMessage ) message ) ; \n\t\t\t} \n\t\t} \n\telse if ( message instanceof SampleMessage ) { \n\t\tif ( this . sensorIoAdapter != null ) { \n\t\t\tthis . sensorIoAdapter . sensorSampleSent ( session , ( SampleMessage ) message ) ; \n\t\t\t} \n\t\t} \n\telse $F131443 ( log , session , message ) } \n"}, {"code": "$F1 public void sessionClosed ( IoSession session ) throws Exception { \n\t$F3509 ( log , session ) if ( this . sensorIoAdapter != null ) { \n\t\tthis . sensorIoAdapter . sensorDisconnected ( session ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void sessionOpened ( IoSession session ) throws Exception { \n\t$F3509 ( log , session ) if ( this . sensorIoAdapter != null ) { \n\t\tthis . sensorIoAdapter . sensorConnected ( session ) ; \n\t\t} \n\t} \n"}, {"code": "protected Corpus onComplete ( Corpus corpus , ProcessorContext context , Counter $F641 counts ) $F356 ( corpus ) "}, {"code": "public static String getPaymentButton ( int receiverId , String secret , String email , String bankId , String subject , String body , int amount , Date expiresDate , String notifyUrl , String returnUrl , String cancelUrl , String pictureUrl , String custom , String transactionId , String button ) { \n\t$F1200 ( builder ) builder . append ( $F467391 ( API_URL , CREATE_PAYMENT_PAGE_ENDPOINT ) ) ; \n\t$F41421 ( builder , receiverId ) $F1232 ( builder ) ( $F139972 ( subject ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( body ) ) . append ( STRING00 ) ; \n\t$F41421 ( builder , amount ) $F1232 ( builder ) ( expiresDate != null ? $F31809 ( expiresDate ) / INT00 : STRING00 ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( notifyUrl ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( returnUrl ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( cancelUrl ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( custom ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( transactionId ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( email ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( bankId ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( $F139972 ( pictureUrl ) ) . append ( STRING00 ) ; \n\t$F1232 ( builder ) ( KhipuService . HmacSHA256 ( secret , getConcatenated ( $F113309 ( receiverId , email , bankId , subject , body , amount , expiresDate , notifyUrl , returnUrl , cancelUrl , pictureUrl , custom , transactionId ) ) ) ) . append ( STRING00 ) ; \n\t$F285360 ( builder , AMAZON_IMAGES_URL ) . append ( button ) . append ( STRING00 ) ; \n\t$F1218 ( builder ) $F1226 ( builder ) } \n"}, {"code": "$F1 public String getDefaultContentDisposition ( Property binaryProperty ) throws RepositoryException { \n\t$F617002 ( parentNode , getParentNode , binaryProperty ) $F2250 ( parentName , parentNode ) if $F109626 ( StringUtil , parentName ) $F24706 ( parentName ) return DEFAULT_CONTENT_DISPOSITION_PREFIX + parentName ; \n\t} \n"}, {"code": "$F1 public String getDefaultMimeType ( Property binaryProperty ) throws RepositoryException { \n\ttry { \n\t\tBinary binary = binaryProperty . getBinary ( ) ; \n\t\treturn binary instanceof org . modeshape . jcr . api . Binary ? ( ( org . modeshape . jcr . api . Binary ) binary ) . getMimeType ( ) : DEFAULT_MIME_TYPE ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\t$F26016 ( logger , e ) return DEFAULT_MIME_TYPE ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Result updateBinary ( Request request , String repositoryName , String workspaceName , String binaryPropertyAbsPath , InputStream binaryStream , boolean allowCreation ) throws RepositoryException { \n\t$F2508946 ( CheckArg , binaryStream ) $F95228 ( parentPath , binaryPropertyAbsPath ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tNode parent = ( Node ) itemAtPath ( parentPath , session ) ; \n\t$F6990 ( lastSlashInd , binaryPropertyAbsPath ) String propertyName = lastSlashInd == $F3745 ? binaryPropertyAbsPath : $F3735 ( binaryPropertyAbsPath , lastSlashInd ) ; \n\t$F2233 ( createdNewValue ) try { \n\t\tProperty binaryProperty = null ; \n\t\ttry { \n\t\t\t$F148586 ( binaryProperty , parent , propertyName ) Binary binary = session . getValueFactory ( ) . createBinary ( binaryStream ) ; \n\t\t\t$F28157 ( binaryProperty , binary ) } \n\t\tcatch ( PathNotFoundException e ) { \n\t\t\tif ( ! allowCreation ) { \n\t\t\t\treturn new Result ( Status . NOT_FOUND ) ; \n\t\t\t\t} \n\t\t\tBinary binary = session . getValueFactory ( ) . createBinary ( binaryStream ) ; \n\t\t\tbinaryProperty = $F26647 ( parent , propertyName , binary ) ; \n\t\t\tcreatedNewValue = true ; \n\t\t\t} \n\t\t$F488159 ( session ) RestProperty restItem = ( RestProperty ) $F40543 ( createRestItem , request , session , binaryProperty ) ; \n\t\tResult result = new Result $F2 ; \n\t\tresult . status ( createdNewValue ? Status . CREATED : Status . OK ) ; \n\t\t$F390061 ( result , restItem ) return result ; \n\t\t} \n\tfinally { \n\t\t$F182732 ( binaryStream , logger , e ) } \n\t} \n"}, {"code": "$F1 public Result uploadBinary ( Request request , String repositoryName , String workspaceName , String filePath , InputStream binaryStream ) throws RepositoryException { \n\t$F2508946 ( CheckArg , binaryStream ) $F30789 ( segments , filePath ) $F5088 ( parsedSegments ) for ( String segment : segments ) { \n\t\tif $F337661 ( StringUtil , segment ) $F529 ( parsedSegments , segment ) } \n\tif $F6132 ( parsedSegments ) { \n\t\treturn $F224399 ( exceptionResponse , filePath ) ; \n\t\t} \n\tSession $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tNode fileNode ; \n\ttry { \n\t\t$F614192 ( fileNode , session , filePath ) ; \n\t\t} \n\tcatch ( PathNotFoundException e ) $F67413 ( fileNode ) try { \n\t\tNode content ; \n\t\tint responseStatus ; \n\t\tif $F112 ( fileNode ) { \n\t\t\tString $F72537 ( filename , parsedSegments ) ; \n\t\t\t$F19733 ( parentPath ) Node $F614192 ( parent , session , parentPath ) ; \n\t\t\tfor ( String childName : parsedSegments ) { \n\t\t\t\ttry { \n\t\t\t\t\tparent = $F605163 ( parent , childName ) ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( PathNotFoundException e ) { \n\t\t\t\t\tparent = parent . addNode ( childName , JcrConstants . NT_FOLDER ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\tfileNode = parent . addNode ( filename , JcrConstants . NT_FILE ) ; \n\t\t\tcontent = fileNode . addNode ( JcrConstants . JCR_CONTENT , JcrConstants . NT_RESOURCE ) ; \n\t\t\tresponseStatus = Status . CREATED ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( ! JcrConstants . NT_FILE . equalsIgnoreCase ( fileNode . getPrimaryNodeType ( ) . getName ( ) ) ) { \n\t\t\t\treturn $F224399 ( exceptionResponse , filePath ) ; \n\t\t\t\t} \n\t\t\tcontent = fileNode . getNode ( JcrConstants . JCR_CONTENT ) ; \n\t\t\tresponseStatus = Status . OK ; \n\t\t\t} \n\t\tBinary binary = session . getValueFactory ( ) . createBinary ( binaryStream ) ; \n\t\tProperty binaryProperty = content . setProperty ( JcrConstants . JCR_DATA , binary ) ; \n\t\t$F488159 ( session ) RestItem restItem = $F40543 ( createRestItem , request , session , binaryProperty ) ; \n\t\treturn new Result ( responseStatus ) . render ( restItem ) ; \n\t\t} \n\tfinally { \n\t\t$F182732 ( binaryStream , logger , ioe ) } \n\t} \n"}, {"code": "public static CharSequence ltrim ( CharSequence str ) { \n\tint len ; \n\tint i ; \n\tif ( str == null || ( $F12037 ( len , str ) ) <= INT00 ) $F3956 for ( $F70770 ( i , len ) ) if ( ! $F145798 ( Character , str , i ) ) $F332 if ( i >= len ) $F3956 return $F36093 ( str , i , len ) ; \n\t} \n"}, {"code": "public static int indexOf ( CharSequence str , char ch ) { \n\tfor ( $F8125 ( i , str ) ) if $F52438 ( str , i , ch ) return i ; \n\t$F16096 } \n"}, {"code": "$F762 public static < T , L extends LoggerInformer > L getLogger ( String name ) { \n\treturn ( L ) $F7386 ( SLF4JLoggerFactory , name ) ; \n\t} \n"}, {"code": "$F762 public static < T , L extends LoggerInformer > L getLogger $F7907 ( clazz ) { \n\treturn ( L ) $F7386 ( SLF4JLoggerFactory , clazz ) ; \n\t} \n"}, {"code": "public static TrackingExecutorService createTrackingExecutorService ( ExecutorService executorService , Identifiable identifiable ) throws IllegalIDException { \n\treturn new TrackingExecutorService ( executorService , identifiable ) ; \n\t} \n"}, {"code": "$F762 public V getComponent $F2 { \n\tif ( this . component == null ) { \n\t\ttry { \n\t\t\tthis . component = ( V ) Application . getControllerManager ( ) . getComponentBuilder ( ) . build ( this ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new ControllerException $F2756 ( e ) ; \n\t\t\t} \n\t\tif ( this . component == null ) { \n\t\t\tthrow new ControllerException $F6 ; \n\t\t\t} \n\t\t} \n\treturn this . component ; \n\t} \n"}, {"code": "$F1 public final Controller getRoot $F2 { \n\tController superController = this ; \n\twhile $F1154 ( superController ) $F44772 ( superController ) return superController ; \n\t} \n"}, {"code": "public static Range valueOf $F62952 ( value ) { \n\tfinal Optional < $F100441 > vals = parse ( value ) ; \n\tif $F30198 ( vals ) { \n\t\treturn new Range ( $F144 ( vals ) [ INT00 ] , $F144 ( vals ) [ INT00 ] ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String toCamelCase ( String str ) { \n\t$F21 wordList = $F9283 ( str ) . split ( STRING00 ) ; \n\t$F19733 ( finalStr ) for ( String word : wordList ) $F58271 ( finalStr , capitalize , word ) return finalStr ; \n\t} \n"}, {"code": "$F762 $F1 public Integer execute $F2 { \n\t$F464872 ( logger ) if $F3415 ( properties ) $F10873 GetList $F26212 $F199 ( command , session , metamodel ) ; \n\tif $F268 ( filters ) { \n\t\tcommand . filter ( filters . toArray ( new Filter $F45 $F25623 ) ) ; \n\t\t} \n\t$F1987 ( i ) for ( E entity : $F34203 ( command ) ) { \n\t\tfor ( Property $F19378 property : $F7837 ( properties ) ) { \n\t\t\t$F2744 ( object , properties , property ) if ( object instanceof Modification ) { \n\t\t\t\tModification $F282 modification = ( Modification $F282 ) object ; \n\t\t\t\t( ( Property $F81647 ) property ) . set ( entity , modification . apply ( $F198 ( property , entity ) ) ) ; \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t( ( Property $F81647 ) property ) . set ( entity , object ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t$F98647 ( session , entity ) i ++ ; \n\t\t} \n\treturn i ; \n\t} \n"}, {"code": "$F1 public $F1372 AppEngineUpdate $F26212 set ( Property < ? , T > property , T value ) { \n\tif $F112 ( property ) $F9654 ( property ) $F2725 ( properties , property , value ) return this ; \n\t} \n"}, {"code": "$F1 public $F1372 Update $F26212 set ( Property < ? , T > property , Modification $F1372 modification ) { \n\tif $F112 ( property ) $F9654 ( property ) $F2725 ( properties , property , modification ) return this ; \n\t} \n"}, {"code": "$F1 synchronized public void write ( final byte $F1628162 , final int off , final int len ) throws IOException { \n\tfinal $F1975 encoded = CommonUtils . encode ( this . key , data , off , len ) ; \n\t$F21494 ( os , encoded ) } \n"}, {"code": "private String mapToFogbugzUrl $F7169 ( params ) throws UnsupportedEncodingException { \n\tString output = this . getFogbugzUrl ( ) ; \n\tfor ( $F88222 ( key , params ) ) { \n\t\t$F75598 ( value , params , key ) if $F386 ( value ) { \n\t\t\toutput += STRING00 + $F572448 ( URLEncoder , key ) + STRING00 + $F572448 ( URLEncoder , value ) ; \n\t\t\t} \n\t\t} \n\tFogbugzManager . log . info ( STRING00 + output ) ; \n\treturn output ; \n\t} \n"}, {"code": "private Document getFogbugzDocument $F7169 ( parameters ) throws IOException , ParserConfigurationException , SAXException { \n\tURL uri = new URL ( this . mapToFogbugzUrl ( parameters ) ) ; \n\t$F176293 ( con , uri ) $F117558 ( dbFactory , DocumentBuilderFactory ) $F356672 ( dBuilder , dbFactory ) return dBuilder . parse ( $F7587 ( con ) ) ; \n\t} \n"}, {"code": "public FogbugzCase getCaseById ( int id ) throws InvalidResponseException , NoSuchCaseException { \n\tList < FogbugzCase > caseList = this . searchForCases ( $F18256 ( Integer , id ) ) ; \n\tif $F4340 ( caseList ) { \n\t\tthrow new InvalidResponseException $F6 ; \n\t\t} \n\t$F24494 ( caseList ) } \n"}, {"code": "public List < FogbugzCase > searchForCases ( String query ) throws InvalidResponseException , NoSuchCaseException { \n\t$F460951 ( params ) $F4395 ( params ) $F6257 ( params , query ) params . put ( STRING00 , STRING00 + this . getCustomFieldsCSV ( ) ) ; \n\t$F356673 ( doc ) try { \n\t\tdoc = this . getFogbugzDocument ( params ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new InvalidResponseException $F26312 ( e ) ; \n\t\t} \n\t$F1987 ( caseCount ) try { \n\t\tNode casesContainer = $F3380927 ( doc ) ; \n\t\tcaseCount = Integer . parseInt ( $F1514424 ( casesContainer ) . getTextContent ( ) ) ; \n\t\t} \n\tcatch ( NumberFormatException e ) { \n\t\tlog . log ( $F73922 ( Level , e ) ) ; \n\t\t} \n\tif $F2523 ( caseCount ) { \n\t\tthrow new NoSuchCaseException $F2821 ( query ) ; \n\t\t} \n\t$F1108468 ( caseNodes , doc ) ArrayList < FogbugzCase > caseList = new ArrayList < FogbugzCase > $F2 ; \n\tfor ( $F12267 ( i , caseNodes ) ) { \n\t\tcaseList . add ( this . constructCaseFromXmlNode ( $F12268 ( caseNodes , i ) ) ) ; \n\t\t} \n\treturn caseList ; \n\t} \n"}, {"code": "public List < FogbugzEvent > getEventsForCase ( int id ) { \n\ttry { \n\t\t$F460951 ( params ) $F4395 ( params ) $F907848 ( params , Integer , id ) $F4395 ( params ) Document doc = this . getFogbugzDocument ( params ) ; \n\t\tList < FogbugzEvent > eventList = new ArrayList < FogbugzEvent > $F2 ; \n\t\t$F1108468 ( eventsNodeList , doc ) if ( eventsNodeList != null && $F12265 ( eventsNodeList ) != INT00 ) { \n\t\t\tfor ( $F12267 ( i , eventsNodeList ) ) { \n\t\t\t\t$F384091 ( currentNode , eventsNodeList , i ) eventList . add ( new FogbugzEvent ( Integer . parseInt ( $F3380929 ( currentNode ) ) , id , $F3380929 ( currentNode ) , Integer . parseInt ( $F3380929 ( currentNode ) ) , Integer . parseInt ( $F3380929 ( currentNode ) ) , DatatypeConverter . parseDateTime ( $F3380929 ( currentNode ) ) . getTime ( ) , $F3380929 ( currentNode ) , $F3380929 ( currentNode ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn eventList ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tFogbugzManager . log . log ( Level . SEVERE , $F45920 ( Integer , id ) , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public FogbugzEvent getLastAssignedToGatekeepersEvent ( int caseId ) { \n\tList < FogbugzEvent > eventList = this . getEventsForCase ( caseId ) ; \n\t$F5223 ( Collections , eventList ) $F16921 ( Collections , eventList ) for ( FogbugzEvent ev : eventList ) { \n\t\tint person = ev . getPerson ( ) ; \n\t\tif ( ev . getPersonAssignedTo ( ) == this . gatekeeperUserId && person != this . gatekeeperUserId && person != this . mergekeeperUserId ) $F356 ( ev ) } \n\t$F724 } \n"}, {"code": "public boolean saveCase ( FogbugzCase fbCase , String comment ) { \n\ttry { \n\t\t$F460951 ( params ) if ( $F6210 ( fbCase ) == INT00 ) { \n\t\t\t$F4395 ( params ) params . put ( STRING00 , $F463425 ( fbCase ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F4395 ( params ) params . put ( STRING00 , $F1230937 ( Integer , fbCase ) ) ; \n\t\t\t} \n\t\tparams . put ( STRING00 , Integer . toString ( fbCase . getAssignedTo ( ) ) ) ; \n\t\tparams . put ( STRING00 , Integer . toString ( fbCase . getOpenedBy ( ) ) ) ; \n\t\tparams . put ( STRING00 , fbCase . tagsToCSV ( ) ) ; \n\t\tif ( this . featureBranchFieldname != null && ! this . featureBranchFieldname . isEmpty ( ) ) { \n\t\t\tparams . put ( this . featureBranchFieldname , fbCase . getFeatureBranch ( ) ) ; \n\t\t\t} \n\t\tif ( this . originalBranchFieldname != null && ! this . originalBranchFieldname . isEmpty ( ) ) { \n\t\t\tparams . put ( this . originalBranchFieldname , fbCase . getOriginalBranch ( ) ) ; \n\t\t\t} \n\t\tif ( this . targetBranchFieldname != null && ! this . targetBranchFieldname . isEmpty ( ) ) { \n\t\t\tparams . put ( this . targetBranchFieldname , fbCase . getTargetBranch ( ) ) ; \n\t\t\t} \n\t\tif ( this . approvedRevisionFieldname != null && ! this . approvedRevisionFieldname . isEmpty ( ) ) { \n\t\t\tparams . put ( this . approvedRevisionFieldname , fbCase . getApprovedRevision ( ) ) ; \n\t\t\t} \n\t\tif ( this . ciProjectFieldName != null && ! this . ciProjectFieldName . isEmpty ( ) ) { \n\t\t\tparams . put ( this . ciProjectFieldName , fbCase . getCiProject ( ) ) ; \n\t\t\t} \n\t\tparams . put ( STRING00 , fbCase . getMilestone ( ) ) ; \n\t\t$F6257 ( params , comment ) Document doc = this . getFogbugzDocument ( params ) ; \n\t\tFogbugzManager . log . info ( $F39054 ( doc ) ) ; \n\t\t$F232 } \n\tcatch ( Exception e ) { \n\t\tFogbugzManager . log . log ( Level . SEVERE , STRING00 + $F1230937 ( Integer , fbCase ) , e ) ; \n\t\t} \n\t$F213 } \n"}, {"code": "private String getCustomFieldsCSV $F2 { \n\t$F19733 ( toReturn ) if ( this . featureBranchFieldname != null && ! this . featureBranchFieldname . isEmpty ( ) ) { \n\t\ttoReturn += STRING00 + this . featureBranchFieldname ; \n\t\t} \n\tif ( this . originalBranchFieldname != null && ! this . originalBranchFieldname . isEmpty ( ) ) { \n\t\ttoReturn += STRING00 + this . originalBranchFieldname ; \n\t\t} \n\tif ( this . targetBranchFieldname != null && ! this . targetBranchFieldname . isEmpty ( ) ) { \n\t\ttoReturn += STRING00 + this . targetBranchFieldname ; \n\t\t} \n\tif ( this . approvedRevisionFieldname != null && ! this . approvedRevisionFieldname . isEmpty ( ) ) { \n\t\ttoReturn += STRING00 + this . approvedRevisionFieldname ; \n\t\t} \n\tif ( this . ciProjectFieldName != null && ! this . ciProjectFieldName . isEmpty ( ) ) { \n\t\ttoReturn += STRING00 + this . ciProjectFieldName ; \n\t\t} \n\treturn toReturn ; \n\t} \n"}, {"code": "public List < FogbugzMilestone > getMilestones $F2 { \n\ttry { \n\t\t$F460951 ( params ) $F4395 ( params ) Document doc = this . getFogbugzDocument ( params ) ; \n\t\tList < FogbugzMilestone > milestoneList = new ArrayList < FogbugzMilestone > $F2 ; \n\t\t$F1108468 ( milestonesNodeList , doc ) if ( milestonesNodeList != null && $F12265 ( milestonesNodeList ) != INT00 ) { \n\t\t\tfor ( $F12267 ( i , milestonesNodeList ) ) { \n\t\t\t\t$F384091 ( currentNode , milestonesNodeList , i ) milestoneList . add ( new FogbugzMilestone ( Integer . parseInt ( $F3380929 ( currentNode ) ) , $F3380929 ( currentNode ) , Boolean . valueOf ( $F3380929 ( currentNode ) ) , Boolean . valueOf ( $F3380929 ( currentNode ) ) ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\treturn milestoneList ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tFogbugzManager . log . log ( $F188619 ( Level , e ) ) ; \n\t\t} \n\treturn new ArrayList < FogbugzMilestone > $F2 ; \n\t} \n"}, {"code": "public boolean createMilestone ( FogbugzMilestone milestone ) { \n\ttry { \n\t\t$F460951 ( params ) if ( $F6210 ( milestone ) != INT00 ) $F201447 $F4395 ( params ) $F4395 ( params ) $F4395 ( params ) $F6479 ( params , milestone ) Document doc = this . getFogbugzDocument ( params ) ; \n\t\tFogbugzManager . log . info ( $F39054 ( doc ) ) ; \n\t\t$F232 } \n\tcatch ( Exception e ) { \n\t\tFogbugzManager . log . log ( Level . SEVERE , $F2282 ( milestone ) , e ) ; \n\t\t} \n\t$F213 } \n"}, {"code": "public $F57272 compressRenaming $F60858 ( olderReverseRenaming ) { \n\t$F57272 renaming = new int [ Math . max ( olderReverseRenaming . length , this . supportCounts . length ) ] ; \n\tthis . reverseRenaming = new int [ this . nbFrequents ] ; \n\t$F1987 ( newItemID ) $F584047 ( greatestBelowMaxCandidate , Integer ) for ( int item = INT00 ; \n\titem < this . supportCounts . length ; \n\titem ++ ) { \n\t\tif ( this . supportCounts [ item ] > INT00 ) { \n\t\t\t$F62115 ( renaming , item , newItemID ) this . reverseRenaming [ newItemID ] = olderReverseRenaming [ item ] ; \n\t\t\tthis . distinctTransactionsCounts [ newItemID ] = this . distinctTransactionsCounts [ item ] ; \n\t\t\tthis . supportCounts [ newItemID ] = this . supportCounts [ item ] ; \n\t\t\tif ( item < this . maxCandidate ) $F1619 ( greatestBelowMaxCandidate , newItemID ) newItemID ++ ; \n\t\t\t} \n\t\telse { \n\t\t\t$F121331 ( renaming , item ) } \n\t\t} \n\tthis . maxCandidate = greatestBelowMaxCandidate + INT00 ; \n\tArrays . fill ( renaming , this . supportCounts . length , renaming . length , $F3745 ) ; \n\tthis . maxFrequent = newItemID - INT00 ; \n\tthis . compactedArrays = true ; \n\t$F1357 ( this , renaming ) return renaming ; \n\t} \n"}, {"code": "public Throwable getRootCause $F2 { \n\t$F13855 ( throwable , super ) if ( throwable instanceof IDelegated ) { \n\t\treturn ( ( IDelegated ) throwable ) . getRootCause ( ) ; \n\t\t} \n\tif $F112 ( throwable ) { \n\t\treturn $F201445 ; \n\t\t} \n\telse $F356 ( throwable ) } \n"}, {"code": "public void printStackTrace ( PrintStream stream ) { \n\tif $F872 ( getRootCause ) { \n\t\tstream . println ( $F2443 ( this ) ) ; \n\t\tgetRootCause ( ) . printStackTrace ( stream ) ; \n\t\t} \n\telse $F264781 ( this , stream ) } \n"}, {"code": "public void printStackTrace ( PrintWriter writer ) { \n\tif $F872 ( getRootCause ) { \n\t\t$F99098 ( writer , getMessage ) getRootCause ( ) . printStackTrace ( writer ) ; \n\t\t} \n\telse $F264781 ( this , writer ) } \n"}, {"code": "public InputStream getAsStream $F2 throws CacheException { \n\ttry { \n\t\tif $F173173 ( file ) { \n\t\t\t$F45360 ( logger ) $F35372 ( file ) } \n\t\t} \n\tcatch ( IOException e ) { \n\t\tlogger . error ( $F24398 ( file ) ) ; \n\t\tthrow new CacheException ( $F11870 ( file ) , e ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public static String footprint ( String stringToFootprint ) { \n\ttry { \n\t\t$F14492 ( md , MessageDigest ) return byteArrayToHexString ( md . digest ( $F15649 ( stringToFootprint ) ) ) ; \n\t\t} \n\tcatch ( NoSuchAlgorithmException nsae ) $F303410 ( LOGGER , stringToFootprint ) } \n"}, {"code": "private static String byteArrayToHexString $F2665 ( byteArray ) { \n\t$F1200 ( result ) for ( $F2674 ( i , byteArray ) ) { \n\t\tresult . append ( Integer . toString ( $F65706 ( byteArray , i ) + INT00 , INT00 ) . substring ( INT00 ) ) ; \n\t\t} \n\t$F1226 ( result ) } \n"}, {"code": "private ClassLoader getDefaultClassLoader $F2 { \n\tClassLoader classLoader ; \n\ttry { \n\t\t$F3945 ( classLoader , Thread ) ; \n\t\t} \n\tcatch ( Throwable ex ) $F67413 ( classLoader ) if $F112 ( classLoader ) { \n\t\tclassLoader = ClassPathResource . class . getClassLoader ( ) ; \n\t\t} \n\treturn classLoader ; \n\t} \n"}, {"code": "private String asString $F2 { \n\ttry { \n\t\treturn $F33739 ( IOUtils , asInputStream ) ; \n\t\t} \n\tcatch ( IOException e ) $F52214 ( path , e ) } \n"}, {"code": "private InputStream asInputStream $F2 { \n\t$F39440 ( inputStream , classLoader , path ) if $F112 ( inputStream ) $F228325 ( path ) return inputStream ; \n\t} \n"}, {"code": "$F15734 public static ObjectId massageToObjectId ( Object o ) { \n\t$F90659 ( o ) if ( o instanceof ObjectId ) return ( ObjectId ) o ; \n\tif $F4380 ( o ) { \n\t\t$F13374 ( s , o ) if $F540 ( isValid , s ) return new ObjectId ( s ) ; \n\t\t} \n\t$F724 } \n"}, {"code": "public String toHexString $F2 { \n\t$F164230 ( buf ) for ( final byte b : toByteArray ( ) ) { \n\t\tbuf . append ( String . format ( STRING00 , b & INT00 ) ) ; \n\t\t} \n\t$F1226 ( buf ) } \n"}, {"code": "$F12506 public static $F1372 T firstNotNull $F81342 ( args ) { \n\tfor ( T arg : args ) { \n\t\t$F99796 ( arg ) } \n\t$F724 } \n"}, {"code": "public static Object parse ( Reader in ) { \n\ttry { \n\t\tJSONParser parser = new JSONParser $F2 ; \n\t\t$F47343 ( parser , in ) } \n\t$F94354 } \n"}, {"code": "public static Object parse ( String s ) { \n\t$F643750 ( in , s ) $F867 ( parse , in ) } \n"}, {"code": "public static Object parseWithException ( Reader in ) throws $F287380 { \n\tJSONParser parser = new JSONParser $F2 ; \n\t$F47343 ( parser , in ) } \n"}, {"code": "public static void writeJSONString ( Object value , Writer out ) throws IOException { \n\tif $F112 ( value ) { \n\t\t$F36360 ( out ) $F254 } \n\tif $F4380 ( value ) { \n\t\t$F36360 ( out ) out . write ( $F68995 ( escape , value ) ) ; \n\t\t$F36360 ( out ) $F254 } \n\tif $F199207 ( value ) { \n\t\tif ( $F162264 ( value ) . isInfinite ( ) || $F162264 ( value ) . isNaN ( ) ) $F36360 ( out ) else $F88635 ( out , value ) $F254 } \n\tif $F199202 ( value ) { \n\t\tif ( $F162270 ( value ) . isInfinite ( ) || $F162270 ( value ) . isNaN ( ) ) $F36360 ( out ) else $F88635 ( out , value ) $F254 } \n\tif $F5645 ( value ) { \n\t\t$F88635 ( out , value ) $F254 } \n\tif $F5650 ( value ) { \n\t\t$F88635 ( out , value ) $F254 } \n\tif ( ( value instanceof JSONStreamAware ) ) { \n\t\t( ( JSONStreamAware ) value ) . writeJSONString ( out ) ; \n\t\t$F254 } \n\tif ( ( value instanceof JSONAware ) ) { \n\t\tout . write ( ( ( JSONAware ) value ) . toJSONString ( ) ) ; \n\t\t$F254 } \n\tif $F5619 ( value ) { \n\t\tJSONObject . writeJSONString ( ( Map ) value , out ) ; \n\t\t$F254 } \n\tif $F5624 ( value ) { \n\t\tJSONArray . writeJSONString ( ( Collection ) value , out ) ; \n\t\t$F254 } \n\tif $F184886 ( value ) { \n\t\tJSONArray . writeJSONString ( $F162293 ( value ) , out ) ; \n\t\t$F254 } \n\t} \n"}, {"code": "public static $F26212 Multiset $F26212 unmodifiableMultiset ( Multiset $F39164 multiset ) { \n\tif ( multiset instanceof UnmodifiableMultiset || multiset instanceof ImmutableMultiset ) { \n\t\t$F762 Multiset $F26212 result = ( Multiset $F26212 ) multiset ; \n\t\treturn result ; \n\t\t} \n\treturn new UnmodifiableMultiset $F26212 $F540 ( checkNotNull , multiset ) ; \n\t} \n"}, {"code": "public static $F26212 Multiset $F26212 intersection ( final Multiset $F26212 multiset1 , final Multiset $F45 multiset2 ) { \n\tcheckNotNull ( multiset1 ) ; \n\tcheckNotNull ( multiset2 ) ; \n\treturn new AbstractMultiset $F26212 $F2 { \n\t\t$F1 public int count ( Object element ) { \n\t\t\tint count1 = $F70341 ( multiset1 , element ) ; \n\t\t\treturn $F2015 ( count1 ) ? INT00 : Math . min ( count1 , $F70341 ( multiset2 , element ) ) ; \n\t\t\t} \n\t\t$F1 $F26213 createElementSet $F2 { \n\t\t\treturn Sets . intersection ( multiset1 . elementSet ( ) , multiset2 . elementSet ( ) ) ; \n\t\t\t} \n\t\t$F1 Iterator < $F59243 > entryIterator $F2 { \n\t\t\tfinal Iterator < $F59243 > $F59773 ( iterator1 , multiset1 ) ; \n\t\t\treturn new AbstractIterator < $F59243 > $F2 { \n\t\t\t\t$F1 protected $F59243 computeNext $F2 { \n\t\t\t\t\twhile $F11310 ( iterator1 ) { \n\t\t\t\t\t\t$F59243 $F11312 ( entry1 , iterator1 ) ; \n\t\t\t\t\t\tE $F61964 ( element , entry1 ) ; \n\t\t\t\t\t\tint count = Math . min ( $F61277 ( entry1 ) , $F70341 ( multiset2 , element ) ) ; \n\t\t\t\t\t\tif $F3730 ( count ) $F14249 ( immutableEntry , element , count ) } \n\t\t\t\t\t$F24894 ( endOfData ) } \n\t\t\t\t} \n\t\t\t; \n\t\t\t} \n\t\t$F1 int distinctElements $F2 { \n\t\t\treturn $F33007 ( elementSet ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "$F57800 public static $F26212 Multiset $F26212 difference ( final Multiset $F26212 multiset1 , final Multiset $F45 multiset2 ) { \n\tcheckNotNull ( multiset1 ) ; \n\tcheckNotNull ( multiset2 ) ; \n\treturn new AbstractMultiset $F26212 $F2 { \n\t\t$F1 public int count $F59695 ( element ) { \n\t\t\tint count1 = $F70341 ( multiset1 , element ) ; \n\t\t\treturn $F2015 ( count1 ) ? INT00 : Math . max ( INT00 , count1 - $F70341 ( multiset2 , element ) ) ; \n\t\t\t} \n\t\t$F1 Iterator < $F59243 > entryIterator $F2 { \n\t\t\tfinal Iterator < $F59243 > $F59773 ( iterator1 , multiset1 ) ; \n\t\t\treturn new AbstractIterator < $F59243 > $F2 { \n\t\t\t\t$F1 protected $F59243 computeNext $F2 { \n\t\t\t\t\twhile $F11310 ( iterator1 ) { \n\t\t\t\t\t\t$F59243 $F11312 ( entry1 , iterator1 ) ; \n\t\t\t\t\t\tE $F61964 ( element , entry1 ) ; \n\t\t\t\t\t\tint count = $F61277 ( entry1 ) - $F70341 ( multiset2 , element ) ; \n\t\t\t\t\t\tif $F3730 ( count ) $F14249 ( immutableEntry , element , count ) } \n\t\t\t\t\t$F24894 ( endOfData ) } \n\t\t\t\t} \n\t\t\t; \n\t\t\t} \n\t\t$F1 int distinctElements $F2 { \n\t\t\treturn Iterators . size ( entryIterator ( ) ) ; \n\t\t\t} \n\t\t} \n\t; \n\t} \n"}, {"code": "public static boolean containsOccurrences ( Multiset $F45 superMultiset , Multiset $F45 subMultiset ) { \n\tcheckNotNull ( superMultiset ) ; \n\tcheckNotNull ( subMultiset ) ; \n\tfor ( $F63209 entry : $F708 ( subMultiset ) ) { \n\t\tint superCount = superMultiset . count ( $F61274 ( entry ) ) ; \n\t\tif ( superCount < $F61277 ( entry ) ) $F1668 } \n\t$F232 } \n"}, {"code": "public static boolean removeOccurrences ( Multiset $F45 multisetToModify , $F58426 ( occurrencesToRemove ) ) { \n\tif ( occurrencesToRemove instanceof Multiset ) { \n\t\treturn removeOccurrencesImpl ( multisetToModify , ( Multiset $F45 ) occurrencesToRemove ) ; \n\t\t} \n\telse $F14249 ( removeOccurrencesImpl , multisetToModify , occurrencesToRemove ) } \n"}, {"code": "private static $F26212 boolean removeOccurrencesImpl ( Multiset $F26212 multisetToModify , Multiset $F45 occurrencesToRemove ) { \n\tcheckNotNull ( multisetToModify ) ; \n\tcheckNotNull ( occurrencesToRemove ) ; \n\t$F2233 ( changed ) Iterator < $F59243 > $F59773 ( entryIterator , multisetToModify ) ; \n\twhile $F11310 ( entryIterator ) { \n\t\t$F59243 $F11312 ( entry , entryIterator ) ; \n\t\tint removeCount = occurrencesToRemove . count ( $F61274 ( entry ) ) ; \n\t\tif ( removeCount >= $F61277 ( entry ) ) { \n\t\t\t$F16605 ( entryIterator ) changed = true ; \n\t\t\t} \n\t\telse if $F3730 ( removeCount ) { \n\t\t\tmultisetToModify . remove ( $F61274 ( entry ) , removeCount ) ; \n\t\t\tchanged = true ; \n\t\t\t} \n\t\t} \n\treturn changed ; \n\t} \n"}, {"code": "public final Thread launch $F2 { \n\tif ( state != RUN ) { \n\t\tonLaunch ( ) ; \n\t\tstate = RUN ; \n\t\tThread thread = ( $F36865 ( this ) ) ; \n\t\t$F4599 ( thread ) return thread ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "ConnectionWrapper obtainConnection $F2 { \n\tsynchronized ( allConnections ) { \n\t\tif $F386 ( availableConnections ) { \n\t\t\tConnectionWrapper connWrap = ( ConnectionWrapper ) $F18644 ( availableConnections ) ; \n\t\t\t$F528 ( usedConnections , connWrap ) if $F100141 ( usedConnections , maxNrOfConcurrentConnectionsCounted ) $F85302 ( maxNrOfConcurrentConnectionsCounted , usedConnections ) return connWrap ; \n\t\t\t} \n\t\telse { \n\t\t\tif ( $F100617 ( allConnections , initialNrofConnections ) || $F100617 ( allConnections , maxNrofConnections ) ) { \n\t\t\t\ttry { \n\t\t\t\t\tConnectionWrapper $F2207 ( connWrap , createConnectionWrapper , dbUrl , dbUsername , dbUserpassword ) ; \n\t\t\t\t\t$F528 ( allConnections , connWrap ) $F528 ( usedConnections , connWrap ) $F1292 ( System ) ( new LogEntry ( $F89126 ( allConnections ) ) ) ; \n\t\t\t\t\treturn connWrap ; \n\t\t\t\t\t} \n\t\t\t\tcatch ( SQLException sqle ) { \n\t\t\t\t\tnrofErrors ++ ; \n\t\t\t\t\t$F1292 ( System ) ( new LogEntry $F4489 ( dbUrl , sqle ) ) ; \n\t\t\t\t\tthrow new ResourceException $F4489 ( dbUrl , sqle ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\t$F1292 ( System ) ( new LogEntry $F500 ( maxNrofConnections ) ) ; \n\t\t\t\t} \n\t\t\t$F724 } \n\t\t} \n\t} \n"}, {"code": "void replaceConnection ( ConnectionWrapper connWrap ) { \n\tsynchronized ( allConnections ) { \n\t\ttry { \n\t\t\tif $F114419 ( usedConnections , connWrap ) { \n\t\t\t\tnrofReset ++ ; \n\t\t\t\t$F6953 ( allConnections , connWrap ) $F35759 ( connWrap ) . close ( ) ; \n\t\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 + ( connWrap . getLastStatement ( ) != null ? STRING00 + connWrap . getLastStatement ( ) + STRING00 : STRING00 ) ) ) ; \n\t\t\t\tConnectionWrapper $F2207 ( newConnWrap , createConnectionWrapper , dbUrl , dbUsername , dbUserpassword ) ; \n\t\t\t\t$F528 ( availableConnections , newConnWrap ) $F528 ( allConnections , newConnWrap ) } \n\t\t\telse { \n\t\t\t\tnrofErrors ++ ; \n\t\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( SQLException sqle ) { \n\t\t\tnrofErrors ++ ; \n\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , $F320 ( dbUrl ) , sqle ) ) ; \n\t\t\t} \n\t\ttry { \n\t\t\tif $F268232 ( connWrap ) { \n\t\t\t\t$F35759 ( connWrap ) . close ( ) ; \n\t\t\t\t} \n\t\t\t} \n\t\tcatch ( SQLException sqle ) { \n\t\t\tnrofErrors ++ ; \n\t\t\t$F1292 ( System ) ( new LogEntry ( Level . CRITICAL , STRING00 , sqle ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void stop $F2 { \n\tisStarted = false ; \n\t$F680835 ( i , allConnections ) while $F11310 ( i ) { \n\t\tConnectionWrapper connWrap = ( ConnectionWrapper ) $F11311 ( i ) ; \n\t\ttry { \n\t\t\t$F35759 ( connWrap ) . close ( ) ; \n\t\t\t} \n\t\tcatch ( SQLException e ) { \n\t\t\tnrofErrors ++ ; \n\t\t\t$F1292 ( System ) ( new LogEntry ( e ) ) ; \n\t\t\t} \n\t\t} \n\t$F39336 ( allConnections ) $F39336 ( availableConnections ) $F39336 ( usedConnections ) } \n"}, {"code": "public void setProperties ( Properties properties ) throws ConfigurationException { \n\tString dbDriver = $F108 ( properties ) . toString ( ) ; \n\tif $F112 ( dbDriver ) { \n\t\t$F1390509 } \n\tdbUrl = $F108 ( properties ) . toString ( ) ; \n\tdbUsername = $F108 ( properties ) . toString ( ) ; \n\tdbUserpassword = $F108 ( properties ) . toString ( ) ; \n\tif $F1101727 ( properties ) { \n\t\tinitialNrofConnections = Integer . valueOf ( $F108 ( properties ) ) ; \n\t\tmaxNrofConnections = Integer . valueOf ( $F108 ( properties ) ) ; \n\t\t} \n\telse { \n\t\tinitialNrofConnections = Integer . valueOf ( properties . getProperty ( $F6265 ( initialNrofConnections ) ) ) ; \n\t\tmaxNrofConnections = Integer . valueOf ( properties . getProperty ( $F6265 ( maxNrofConnections ) ) ) ; \n\t\t} \n\tconnectionRequestTimeout = Integer . valueOf ( properties . getProperty ( $F6265 ( connectionRequestTimeout ) ) ) ; \n\tconnectionTimeout = Integer . valueOf ( properties . getProperty ( $F6265 ( connectionTimeout ) ) ) ; \n\tconnectionTimeoutCheck = Integer . valueOf ( properties . getProperty ( $F6265 ( connectionTimeoutCheck ) ) ) ; \n\tconnectionTestStatement = properties . getProperty ( STRING00 , connectionTestStatement ) . toString ( ) ; \n\tcreateReadOnlyConnections = Boolean . valueOf ( properties . getProperty ( $F6265 ( createReadOnlyConnections ) ) ) ; \n\tdefaultIsolationLevel = isolationLevelStrings . indexOf ( properties . getProperty ( $F6265 ( defaultIsolationLevel ) ) ) ; \n\ttry { \n\t\t$F24414 ( Class , dbDriver ) Enumeration drivers = DriverManager . getDrivers ( ) ; \n\t\tdriverInfo = STRING00 ; \n\t\t$F1987 ( count ) while $F5506 ( drivers ) { \n\t\t\tcount ++ ; \n\t\t\tDriver driver = ( Driver ) $F5507 ( drivers ) ; \n\t\t\tdriverInfo += $F320 ( count ) + $F1352255 ( driver ) + STRING00 + driver . getMinorVersion ( ) + STRING00 ; \n\t\t\t} \n\t\t} \n\tcatch ( ClassNotFoundException cnfe ) { \n\t\tthrow new ConfigurationException $F500 ( dbDriver ) ; \n\t\t} \n\tresetStatistics ( ) ; \n\t} \n"}, {"code": "$F1 public < NK , NV > FMap < NK , NV > map ( BiFunction < $F62572 , $F60570 , Product2 < ? extends NK , ? extends NV > > f ) { \n\tHashFMap < NK , NV > ret = new HashFMap $F50 ( $F225616 ( this ) ) ; \n\tfor ( java . util . Map . Entry $F28644 entry : entrySet ( ) ) { \n\t\tProduct2 < ? extends NK , ? extends NV > t = f . apply ( $F18327 ( entry ) ) ; \n\t\tret . put ( t . get1 ( ) , t . get2 ( ) ) ; \n\t\t} \n\treturn ret ; \n\t} \n"}, {"code": "$F1 void _prepareResponseDataOnlyOnce ( HttpServletRequest req ) { \n\tif ( $F25201 ( req , KEY_INIT ) == null ) { \n\t\t$F25217 ( pathInfo , req ) $F95338 ( pathInfo ) $F4771 ( embeddedPath , getMappedDirPath ) $F1210 ( embeddedPath ) $F91907 ( embeddedPath , pathInfo ) $F1210 ( embeddedPath ) InputStream is = EmbeddedFileServlet . class . getResourceAsStream ( embeddedPath ) ; \n\t\tboolean isDir ; \n\t\tif $F112 ( is ) $F57412 ( isDir ) else { \n\t\t\ttry { \n\t\t\t\t$F88338 ( is ) ; \n\t\t\t\tisDir = false ; \n\t\t\t\t} \n\t\t\tcatch ( NullPointerException ex ) { \n\t\t\t\tisDir = true ; \n\t\t\t\ttry $F2453 ( is ) catch ( NullPointerException | IOException ignored ) $F1645 is = null ; \n\t\t\t\t} \n\t\t\tcatch ( IOException ex ) { \n\t\t\t\tisDir = false ; \n\t\t\t\t$F47921 ( req , KEY_IO_ERR , ex ) req . setAttribute ( KEY_INIT , true ) ; \n\t\t\t\t$F47921 ( req , KEY_IS_DIR , isDir ) $F254 } \n\t\t\t} \n\t\t$F47921 ( req , KEY_IS_DIR , isDir ) if ( isDir ) { \n\t\t\tembeddedPath = String . format ( $F177181 ( embeddedPath , getIndexFilename ) ) ; \n\t\t\tis = EmbeddedFileServlet . class . getResourceAsStream ( embeddedPath ) ; \n\t\t\t} \n\t\t$F47921 ( req , KEY_INPUT_STREAM , is ) req . setAttribute ( KEY_MIME , _getMimeType ( embeddedPath ) ) ; \n\t\treq . setAttribute ( KEY_INIT , true ) ; \n\t\t} \n\t} \n"}, {"code": "protected static void premain ( final String agentArgument , final Instrumentation instrumentation , final BaseAgent agent ) { \n\t$F38495 ( instrumentation ) $F38495 ( agent ) if $F6132 ( INSTANCES ) { \n\t\tinstrumentation . addTransformer ( new DropshipTransformer $F2 ) ; \n\t\t} \n\t$F528 ( INSTANCES , agent ) } \n"}, {"code": "$F52903 public static ILogger getLogger ( $F623 ILogger logger ) { \n\treturn logger == null ? new NullLogger $F2 : logger ; \n\t} \n"}, {"code": "private String processTemplate ( Template template , Object model ) { \n\tif $F268 ( template ) { \n\t\t$F6364 ( sw ) try { \n\t\t\t$F283966 ( template , model , sw ) } \n\t\tcatch ( Exception e ) { \n\t\t\tthrow $F231778 ( e ) ; \n\t\t\t} \n\t\t$F1226 ( sw ) } \n\t$F3956 } \n"}, {"code": "public String getCppReturnType ( ClassModel classModel ) { \n\tString type = processTemplate ( cppReturnType , $F4501 ( newHashMap , classModel ) ) ; \n\t$F579828 ( type ) $F867 ( getCppType , classModel ) } \n"}, {"code": "public $F110277 getFunctions ( ClassModel classModel ) { \n\t$F110277 result = newHashMap ( ) ; \n\tfor ( $F88222 ( name , functions ) ) { \n\t\tresult . put ( name , new TemplateFunction ( $F94142 ( functions , name , classModel ) ) ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected $F1372 T _execute ( final String string_url , final HttpMethod method , final RequestCallback callback , final ResponseExtractor $F1372 extractor ) { \n\t$F13173 ( _LOG_ , method , string_url ) $F279031 ( uri ) try { \n\t\t$F35380 ( url , string_url ) uri = $F5740 ( url ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F201489 ( _LOG_ , ex ) throw new HttpException ( ex ) ; \n\t\t} \n\t$F67491 ( response ) try { \n\t\tRestTemplate rest = new RestTemplate $F2 ; \n\t\tresponse = rest . execute ( uri , method , callback , extractor ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\t$F201489 ( _LOG_ , ex ) throw new HttpException ( ex ) ; \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "private RestTemplate _newRestTemplate $F2 { \n\tRestTemplate template = new RestTemplate $F2 ; \n\tList < $F16584 > converters = getMessageConverters ( ) ; \n\tif $F268 ( converters ) { \n\t\ttemplate . setMessageConverters ( getMessageConverters ( ) ) ; \n\t\t} \n\treturn template ; \n\t} \n"}, {"code": "public $F1372 T getObject ( final String url , $F58638 ( response_type ) , final Object ... uri_variables ) { \n\t_LOG_ . debug ( $F6035 ( url , response_type ) + $F18256 ( Arrays , uri_variables ) ) ; \n\t$F639394 ( request_headers ) request_headers . setContentType ( getObjectMediaType ( ) ) ; \n\tHttpEntity $F45 request_entity = new HttpEntity $F9233 ( request_headers ) ; \n\tHttpEntity $F1372 response = null ; \n\ttry { \n\t\tresponse = _newRestTemplate ( ) . exchange ( url , HttpMethod . GET , request_entity , response_type , uri_variables ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new HttpException ( ex ) ; \n\t\t} \n\tT $F429344 ( body , response ) ; \n\treturn body ; \n\t} \n"}, {"code": "public void getToWrite ( final String url , final OutputStream output ) { \n\tgetToWrite ( url , output , ( $F21 ) null ) ; \n\t} \n"}, {"code": "public void getToWrite ( final String url , final OutputStream output , final String ... accept_media_types ) { \n\t_execute ( url , HttpMethod . GET , new AcceptHeaderRequestCallback ( accept_media_types ) , new OutputStreamResponseExtractor ( output ) ) ; \n\t} \n"}, {"code": "public void getToWrite ( final String url , final Writer output ) { \n\tgetToWrite ( url , output , ( $F21 ) null ) ; \n\t} \n"}, {"code": "public void getToWrite ( final String url , final Writer output , final String ... accept_media_types ) { \n\t_execute ( url , HttpMethod . GET , new AcceptHeaderRequestCallback ( accept_media_types ) , new WriterResponseExtractor ( output ) ) ; \n\t} \n"}, {"code": "public $F1372 String postObject ( final String url , final T object , $F58638 ( type ) ) { \n\t$F13173 ( _LOG_ , url , type ) $F639394 ( request_headers ) request_headers . setContentType ( getObjectMediaType ( ) ) ; \n\tHttpEntity $F1372 request_entity = new HttpEntity $F1372 ( object , request_headers ) ; \n\t$F279031 ( location ) try { \n\t\tlocation = _newRestTemplate ( ) . postForLocation ( url , request_entity ) ; \n\t\t} \n\tcatch ( Exception ex ) { \n\t\tthrow new HttpException ( ex ) ; \n\t\t} \n\t$F1226 ( location ) } \n"}, {"code": "public String postByRead ( final String url , final InputStream input , final String media_type ) { \n\tInputStreamRequestCallback callback = new InputStreamRequestCallback ( $F120302 ( input , MediaType , media_type ) ) ; \n\tString location = _execute ( url , HttpMethod . POST , callback , new LocationHeaderResponseExtractor $F2 ) ; \n\treturn location ; \n\t} \n"}, {"code": "public String postByRead ( final String url , final Reader input , final String media_type ) { \n\tString location = _execute ( url , HttpMethod . POST , new ReaderRequestCallback ( input , MediaType . parseMediaType ( media_type ) ) , new LocationHeaderResponseExtractor $F2 ) ; \n\treturn location ; \n\t} \n"}, {"code": "public static boolean clearDirectory ( File directory ) { \n\tAssert . isTrue ( $F2602 ( directory ) , STRING00 ) ; \n\t$F49579 ( files , directory ) $F48974 ( allDeleted ) for ( File file : files ) { \n\t\tif $F15346 ( file ) $F890 ( clearDirectory , file ) allDeleted &= $F11954 ( file ) ; \n\t\t} \n\treturn allDeleted ; \n\t} \n"}, {"code": "public static void copyFile $F24631 ( sourceFile , destinationFile ) throws $F461707 { \n\tStreams . copyStream ( $F1097 ( sourceFile ) , $F11930 ( destinationFile ) , true ) ; \n\t} \n"}, {"code": "$F57800 public static $F26212 FluentIterable $F26212 of ( $F64808 elements ) { \n\treturn from ( $F58884 ( Lists , elements ) ) ; \n\t} \n"}, {"code": "$F57800 $F67996 public final FluentIterable $F26212 append ( Iterable $F39164 other ) { \n\treturn from ( $F227197 ( Iterables , iterable , other ) ) ; \n\t} \n"}, {"code": "$F57800 $F67996 public final FluentIterable $F26212 append ( E ... elements ) { \n\treturn from ( Iterables . concat ( $F3036 ( iterable , Arrays , elements ) ) ) ; \n\t} \n"}, {"code": "$F67996 public final FluentIterable $F26212 filter ( Predicate $F59476 predicate ) { \n\treturn from ( $F59687 ( Iterables , iterable , predicate ) ) ; \n\t} \n"}, {"code": "$F67996 public final FluentIterable $F26212 skip ( int numberToSkip ) { \n\treturn from ( Iterables . skip ( iterable , numberToSkip ) ) ; \n\t} \n"}, {"code": "$F67996 public final FluentIterable $F26212 limit ( int size ) { \n\treturn from ( Iterables . limit ( iterable , size ) ) ; \n\t} \n"}, {"code": "public final ImmutableList $F26212 toSortedList ( $F66518 comparator ) { \n\treturn $F2704 ( Ordering , comparator ) . immutableSortedCopy ( iterable ) ; \n\t} \n"}, {"code": "public final $F2338 ImmutableMap < E , V > toMap ( Function < $F59475 , V > valueFunction ) { \n\treturn Maps . toMap ( iterable , valueFunction ) ; \n\t} \n"}, {"code": "public final < C extends Collection $F59476 > C copyInto ( C collection ) { \n\tcheckNotNull ( collection ) ; \n\tif $F5624 ( iterable ) { \n\t\tcollection . addAll ( $F14239 ( Collections2 , iterable ) ) ; \n\t\t} \n\telse { \n\t\tfor ( E item : iterable ) $F529 ( collection , item ) } \n\treturn collection ; \n\t} \n"}, {"code": "private Registry startRmiRegistryProcess ( Configuration configuration , final int port ) { \n\ttry { \n\t\t$F347579 ( javaHome , System , JAVA_HOME ) $F4728 ( command ) if $F112 ( javaHome ) $F24706 ( command ) else { \n\t\t\tif $F1202 ( javaHome ) $F693326 ( command , javaHome ) else $F693326 ( command , javaHome ) } \n\t\t$F210 ( internalProcessStart , configuration , port , command ) } \n\tcatch ( Exception e1 ) { \n\t\t$F5572 ( LOGGER , e1 ) throw new UnsupportedOperationException ( $F39054 ( e1 ) , e1 ) ; \n\t\t} \n\t} \n"}, {"code": "$F4862 public Optional < EventCallable > registerCaller ( Identification identification ) throws IllegalIDException { \n\tif ( identification == null || $F2734 ( callers , identification ) ) $F9163 ( Optional ) EventCaller eventCaller = new EventCaller ( events ) ; \n\t$F2725 ( callers , identification , eventCaller ) $F23015 ( Optional , eventCaller ) } \n"}, {"code": "$F762 public void unregisterCaller ( Identification identification ) { \n\tif $F28586 ( callers , identification ) $F254 $F198 ( callers , identification ) . localEvents = null ; \n\t$F6953 ( callers , identification ) } \n"}, {"code": "public void fireEvent ( EventModel event ) throws IllegalIDException , org . intellimate . izou . events . MultipleEventsException { \n\t$F88368 ( events ) if $F6132 ( events ) $F529 ( events , event ) else { \n\t\tthrow new org . intellimate . izou . events . MultipleEventsException $F2 ; \n\t\t} \n\t} \n"}, {"code": "$F623 public MessageDescriptor $F560864 getExc $F2 { \n\treturn exc != null ? exc : ( base != null ? base . exc : null ) ; \n\t} \n"}, {"code": "public static Object putAttribute $F844 ( key , attribute ) $F28330 ( putAttribute , key , attribute ) "}, {"code": "public static Object putAttribute ( String key , Object attribute , boolean inheritable ) { \n\tif ( inheritable ) { \n\t\tObject value = $F835003 ( inheritableAttributeHolder ) ( key , attribute ) ; \n\t\tif $F112 ( value ) { \n\t\t\tvalue = $F144 ( localAttributeHolder ) . remove ( key ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F144 ( localAttributeHolder ) . remove ( key ) ; \n\t\t\t} \n\t\treturn value ; \n\t\t} \n\telse { \n\t\tObject value = $F835003 ( localAttributeHolder ) ( key , attribute ) ; \n\t\tif $F112 ( value ) { \n\t\t\tvalue = $F144 ( inheritableAttributeHolder ) . remove ( key ) ; \n\t\t\t} \n\t\telse { \n\t\t\t$F144 ( inheritableAttributeHolder ) . remove ( key ) ; \n\t\t\t} \n\t\treturn value ; \n\t\t} \n\t} \n"}, {"code": "public static boolean hasAttribute ( String key ) { \n\tif ( $F144 ( localAttributeHolder ) . containsKey ( key ) ) $F233 return $F144 ( inheritableAttributeHolder ) . containsKey ( key ) ; \n\t} \n"}, {"code": "public static Object getAttribute ( String key ) { \n\tObject value = $F355654 ( localAttributeHolder , key ) ; \n\tif $F112 ( value ) { \n\t\tvalue = $F355654 ( inheritableAttributeHolder , key ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "public static Object removeAttribute ( String key ) { \n\tObject value = $F144 ( localAttributeHolder ) . remove ( key ) ; \n\tif $F112 ( value ) { \n\t\tvalue = $F144 ( inheritableAttributeHolder ) . remove ( key ) ; \n\t\t} \n\telse { \n\t\t$F144 ( inheritableAttributeHolder ) . remove ( key ) ; \n\t\t} \n\treturn value ; \n\t} \n"}, {"code": "public static $F1975 hexToByte ( String s ) throws IOException { \n\tint l = $F98416 ( s ) ; \n\tbyte $F1628162 = $F9432 ( l ) ; \n\t$F1987 ( j ) if ( $F1203 ( s ) % INT00 != INT00 ) $F9471 for ( $F6610 ( i , l ) ) { \n\t\t$F87188 ( c , s , j ) int n , b ; \n\t\t$F1085748 ( n , HEXINDEX , c ) if $F9467 ( n ) $F9471 b = $F74482 ( n ) ; \n\t\t$F134458 ( c , s , j ) $F1085748 ( n , HEXINDEX , c ) b += $F18692 ( n ) ; \n\t\t$F165567 ( data , i , b ) } \n\treturn data ; \n\t} \n"}, {"code": "public static String byteToHex ( $F2049991 ) { \n\t$F58133 ( len , b ) $F2666 s = new char $F115569 ( len ) ; \n\tfor ( $F382971 ( i , j , len ) ) { \n\t\tint c = ( $F96078 ( b , i ) ) & INT00 ; \n\t\ts [ j ++ ] = HEXCHAR [ $F121257 ( c ) ] ; \n\t\ts [ j ++ ] = $F2686 ( HEXCHAR , c ) ; \n\t\t} \n\t$F2692 ( s ) } \n"}, {"code": "$F1 public void close $F2 { \n\tSet < PhynixxXAResource $F1372 > tmpXAResources = new HashSet < PhynixxXAResource $F1372 > $F2 ; \n\tsynchronized ( xaresources ) { \n\t\tif ( this . xaresources . size ( ) > INT00 ) $F28731 ( tmpXAResources , xaresources ) } \n\tfor ( Iterator < PhynixxXAResource $F1372 > $F9005 ( iterator , tmpXAResources ) ; \n\t$F11309 ( iterator ) ; \n\t) { \n\t\tPhynixxXAResource $F1372 $F11312 ( xaresource , iterator ) ; \n\t\t$F1109 ( xaresource ) } \n\tthis . getXATransactionalBranchRepository ( ) . close ( ) ; \n\t} \n"}, {"code": "$F1 public RestItem item ( Request request , String repositoryName , String workspaceName , String path , int depth ) throws RepositoryException { \n\tSession $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tItem $F304 ( item , itemAtPath , path , session ) ; \n\t$F4845 ( createRestItem , request , depth , session , item ) } \n"}, {"code": "$F1 public RestItem addItem ( Request request , String repositoryName , String workspaceName , String path , String requestBody ) throws RepositoryException { \n\tJsonNode requestBodyJSON = stringToJSONObject ( requestBody ) ; \n\t$F8494 ( parentAbsPath , parentPath , path ) $F95228 ( newNodeName , path ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\tNode parentNode = ( Node ) $F581153 ( session , parentAbsPath ) ; \n\tNode $F2207 ( newNode , addNode , parentNode , newNodeName , requestBodyJSON ) ; \n\t$F488159 ( session ) RestItem restNewNode = $F40543 ( createRestItem , request , session , newNode ) ; \n\treturn restNewNode ; \n\t} \n"}, {"code": "$F1 public void addItems ( Request request , String repositoryName , String workspaceName , String requestContent ) throws RepositoryException { \n\tObjectNode requestBody = stringToJSONObject ( requestContent ) ; \n\tif $F19799 ( requestBody ) { \n\t\tSession $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\t\tTreeMap $F355706 nodesByPath = createNodesByPathMap ( requestBody ) ; \n\t\t$F5605 ( addMultipleNodes , request , nodesByPath , session ) } \n\t} \n"}, {"code": "$F1 public void deleteItems ( Request request , String repositoryName , String workspaceName , String requestContent ) throws RepositoryException { \n\tArrayNode requestArray = stringToJSONArray ( requestContent ) ; \n\t$F268435 ( requestArray ) Session $F2207 ( session , getSession , request , repositoryName , workspaceName ) ; \n\t$F90455 $F22291 ( pathsInOrder ) ; \n\tfor ( $F10914 ( i , requestArray ) ) { \n\t\tpathsInOrder . add ( absPath ( $F457286 ( requestArray , i ) ) ) ; \n\t\t} \n\t$F18610 ( pathsInOrderList , pathsInOrder ) $F16921 ( Collections , pathsInOrderList ) for ( String path : pathsInOrderList ) $F565 ( doDelete , path , session ) $F488159 ( session ) } \n"}, {"code": "public Link $F264737 to ( Consumer $F264737 consumer ) $F499952 ( this , consumer ) "}, {"code": "public static $F1372 TypeRefer of $F7907 ( target ) { \n\treturn of ( $F326 ( TypeToken , target ) ) ; \n\t} \n"}, {"code": "$F10880 $F1 public int compare ( WritableComparable a , WritableComparable b ) { \n\tif ( a instanceof Key && b instanceof Key ) { \n\t\tComparable oneIdentifier = Key . class . cast ( a ) . identifier ( ) ; \n\t\tComparable otherIdentifier = Key . class . cast ( b ) . identifier ( ) ; \n\t\t$F68214 ( identifier , oneIdentifier , otherIdentifier ) $F43796 ( identifier ) Map < Integer , SortWritable > oneSort = Key . class . cast ( a ) . getSort ( ) ; \n\t\tMap < Integer , SortWritable > otherSort = Key . class . cast ( b ) . getSort ( ) ; \n\t\tif $F58479 ( oneSort , otherSort ) $F17551 for ( Entry < Integer , SortWritable > entry : $F708 ( oneSort ) ) { \n\t\t\tint $F14625 ( priority , entry ) ; \n\t\t\tSortWritable $F4377 ( one , entry ) ; \n\t\t\tSortWritable $F199 ( other , otherSort , priority ) ; \n\t\t\tif ( ObjectUtil . typeCompareTo ( $F19286 ( one , other ) ) != INT00 ) $F17551 $F68214 ( cmpare , one , other ) if $F319 ( cmpare ) { \n\t\t\t\tif ( $F810184 ( one ) . get ( ) == Record . SORT_LOWER ) $F356 ( cmpare ) else { \n\t\t\t\t\treturn - cmpare ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\t$F8383 } \n\t$F18621 ( super , a , b ) } \n"}, {"code": "public void setGenericPoolConfig ( GenericObjectPoolConfig cfg ) throws Exception { \n\tif ( this . genericObjectPool != null ) { \n\t\tthis . genericObjectPool . close ( ) ; \n\t\t} \n\tif $F112 ( cfg ) { \n\t\tcfg = new GenericObjectPoolConfig $F2 ; \n\t\t} \n\tthis . genericObjectPool = new GenericObjectPool < IPhynixxManagedConnection $F404 > ( new MyPoolableObjectFactory $F404 ( this ) , cfg ) ; \n\t} \n"}, {"code": "public void releaseConnection ( IPhynixxManagedConnection $F404 connection ) { \n\tif ( connection == null || ! connection . hasCoreConnection ( ) ) $F255 try { \n\t\tthis . genericObjectPool . returnObject ( connection ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t} \n\t$F221777 ( LOG , connection ) } \n"}, {"code": "public void connectionReleased ( IManagedConnectionEvent $F404 event ) { \n\tIPhynixxManagedConnection $F404 proxy = event . getManagedConnection ( ) ; \n\tif ( ! proxy . hasCoreConnection ( ) ) $F255 else { \n\t\tthis . releaseConnection ( proxy ) ; \n\t\t} \n\t$F221777 ( LOG , proxy ) } \n"}, {"code": "public void connectionFreed ( IManagedConnectionEvent $F404 event ) { \n\tIPhynixxManagedConnection $F404 proxy = event . getManagedConnection ( ) ; \n\tif ( ! proxy . hasCoreConnection ( ) ) $F255 else { \n\t\tthis . freeConnection ( proxy ) ; \n\t\t} \n\t$F221777 ( LOG , proxy ) } \n"}, {"code": "$F762 private void initializeFields $F528898 ( defaultEncoding , high , normal , low ) { \n\t$F1357 ( this , high ) $F1357 ( this , normal ) $F1357 ( this , low ) $F1357 ( this , defaultEncoding ) } \n"}, {"code": "public MavenAggregatedReport createAggregatedAction ( final MavenModuleSetBuild build , final Map < MavenModule , List < MavenBuild > > moduleBuilds ) { \n\treturn new MavenTasksResultAction ( build , getHealthDescriptor ( ) , defaultEncoding , high , normal , low , new TasksResult ( build , defaultEncoding , new TasksParserResult $F2 , false , high , normal , low ) ) ; \n\t} \n"}, {"code": "public static $F28644 Multimap $F28644 constrainedMultimap ( Multimap $F28644 multimap , MapConstraint $F62573 constraint ) { \n\treturn new ConstrainedMultimap $F28644 ( multimap , constraint ) ; \n\t} \n"}, {"code": "public static $F28644 SetMultimap $F28644 constrainedSetMultimap ( SetMultimap $F28644 multimap , MapConstraint $F62573 constraint ) { \n\treturn new ConstrainedSetMultimap $F28644 ( multimap , constraint ) ; \n\t} \n"}, {"code": "public static $F28644 SortedSetMultimap $F28644 constrainedSortedSetMultimap ( SortedSetMultimap $F28644 multimap , MapConstraint $F62573 constraint ) { \n\treturn new ConstrainedSortedSetMultimap $F28644 ( multimap , constraint ) ; \n\t} \n"}, {"code": "public static $F28644 BiMap $F28644 constrainedBiMap ( BiMap $F28644 map , MapConstraint $F62573 constraint ) { \n\treturn new ConstrainedBiMap $F28644 $F36080 ( map , constraint ) ; \n\t} \n"}, {"code": "public Constraint wampTypeMatchers ( WampMessageType ... typesToMatch ) { \n\tMessageMatcher $F45 [ ] typeMatchers = new MessageMatcher $F45 $F13558 ( typesToMatch ) ; \n\tfor ( $F2674 ( i , typesToMatch ) ) { \n\t\tWampMessageType typeToMatch = typesToMatch [ i ] ; \n\t\ttypeMatchers [ i ] = new WampMessageTypeMatcher ( typeToMatch ) ; \n\t\t} \n\t$F867 ( matchers , typeMatchers ) } \n"}, {"code": "private Constraint wampDestMatchers ( WampMessageType type , String ... patterns ) { \n\tList < MatcherBuilder > $F27615 ( matchers , patterns ) ; \n\tfor ( String pattern : patterns ) { \n\t\tmatchers . add ( new PathMatcherMessageMatcherBuilder ( pattern , type ) ) ; \n\t\t} \n\treturn new Constraint ( matchers ) ; \n\t} \n"}, {"code": "$F1 protected void configureService ( Environment environment , ApplicationContext context ) { \n\tsuper . configureService ( environment , context ) ; \n\t$F4328320 ( environment ) ( new ArtifactIdVersionResource $F560 ( getArtifactId ) ) ; \n\t} \n"}, {"code": "public void release $F2 { \n\tIPhynixxManagedConnection $F404 con = this . connection ; \n\tif $F268 ( connection ) { \n\t\tthis . connection . removeConnectionListener ( this ) ; \n\t\t} \n\tthis . connection = null ; \n\t} \n"}, {"code": "private static Document createXML $F1693 ( root , useNamespace ) { \n\ttry { \n\t\torg . w3c . dom . Document doc = $F8889 ( getDocumentBuilder , useNamespace ) . newDocument ( ) ; \n\t\tdoc . appendChild ( $F384063 ( doc , root ) ) ; \n\t\treturn new DocumentImpl ( doc ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Document parseXML ( String string ) { \n\ttry { \n\t\treturn loadXML ( $F1739355 ( string ) ) ; \n\t\t} \n\tcatch ( UnsupportedEncodingException e ) { \n\t\tthrow new BugError $F6 ; \n\t\t} \n\t} \n"}, {"code": "private static Document loadXML ( InputSource source , boolean useNamespace ) { \n\ttry { \n\t\torg . w3c . dom . Document doc = $F8889 ( getDocumentBuilder , useNamespace ) . parse ( source ) ; \n\t\treturn new DocumentImpl ( doc ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t$F26192 ( close , source ) } \n"}, {"code": "private Document loadXML ( URL url , boolean useNamespace ) { \n\t$F99950 ( stream ) try { \n\t\tstream = $F5759 ( url ) . getInputStream ( ) ; \n\t\tInputSource $F1753722 ( source , stream ) ; \n\t\treturn useNamespace ? loadXMLNS ( source ) : loadXML ( source ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t$F26192 ( close , stream ) } \n"}, {"code": "$F1 public Document loadHTML ( Reader reader ) { \n\treturn loadHTML ( reader , $F175113 ( Charset ) . name ( ) ) ; \n\t} \n"}, {"code": "private static Document loadHTML ( InputSource source , boolean useNamespace ) throws $F592403 { \n\tDOMParser parser = new DOMParser $F2 ; \n\tparser . setFeature ( FEAT_NAMESPACES , useNamespace ) ; \n\t$F184476 ( parser , source ) return new DocumentImpl ( $F724201 ( parser ) ) ; \n\t} \n"}, {"code": "private static Document loadHTML ( URL url , boolean useNamespace ) { \n\t$F99950 ( stream ) try { \n\t\tstream = $F5759 ( url ) . getInputStream ( ) ; \n\t\treturn loadHTML ( $F592411 ( stream ) , useNamespace ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new DomException ( e ) ; \n\t\t} \n\t$F26192 ( close , stream ) } \n"}, {"code": "private static void close ( InputSource source ) { \n\tif $F268 ( source ) { \n\t\tif ( source . getByteStream ( ) != null ) { \n\t\t\tclose ( source . getByteStream ( ) ) ; \n\t\t\t} \n\t\tif ( source . getCharacterStream ( ) != null ) { \n\t\t\tclose ( source . getCharacterStream ( ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "private static javax . xml . parsers . DocumentBuilder getDocumentBuilder ( Schema schema , boolean useNamespace ) throws ParserConfigurationException { \n\t$F117558 ( dbf , DocumentBuilderFactory ) dbf . setIgnoringComments ( true ) ; \n\tdbf . setIgnoringElementContentWhitespace ( true ) ; \n\tdbf . setCoalescing ( true ) ; \n\tif $F268 ( schema ) { \n\t\tdbf . setFeature ( FEAT_DOCTYPE_DECL , true ) ; \n\t\tdbf . setValidating ( false ) ; \n\t\tdbf . setFeature ( FEAT_SCHEMA_VALIDATION , true ) ; \n\t\t$F356661 ( dbf ) $F37367 ( dbf , schema ) } \n\telse { \n\t\tdbf . setFeature ( FEAT_SCHEMA_VALIDATION , false ) ; \n\t\tdbf . setValidating ( false ) ; \n\t\tdbf . setNamespaceAware ( useNamespace ) ; \n\t\t} \n\tjavax . xml . parsers . DocumentBuilder $F195956 ( db , dbf ) ; \n\tdb . setEntityResolver ( new EntityResolverImpl $F2 ) ; \n\tdb . setErrorHandler ( new ErrorHandlerImpl $F2 ) ; \n\treturn db ; \n\t} \n"}, {"code": "$F1 public User getCurrentUser $F2 { \n\tHttpSession session = $F1316230 ( getRequest ) ( false ) ; \n\t$F90659 ( session ) return ( User ) $F25201 ( session , SESSION_ATTR_USER ) ; \n\t} \n"}, {"code": "public $F1372 void executeOnSome ( final $F57897 optional , final $F1954773 closure ) { \n\tfinal OptionalVisitor < Void , T > visitor = new OptionalVisitor < Void , T > $F2 { \n\t\tpublic Void visitNone ( final None $F1372 none ) $F2200 public Void visitSome ( final Some $F1372 some ) { \n\t\t\tclosure . execute ( $F3051101 ( some ) ) ; \n\t\t\t$F724 } \n\t\t} \n\t; \n\t$F14605 ( optional , visitor ) } \n"}, {"code": "public $F1372 $F25622 filterNones ( final Collection $F60404 c ) { \n\tfinal $F25622 result = new $F398215 $F2 ; \n\tfinal OptionalVisitor < Void , T > visitor = new OptionalVisitor < Void , T > $F2 { \n\t\tpublic Void visitNone ( final None $F1372 none ) $F2200 public Void visitSome ( final Some $F1372 some ) { \n\t\t\tresult . add ( $F3051101 ( some ) ) ; \n\t\t\t$F724 } \n\t\t} \n\t; \n\tfor ( final $F57897 current : c ) $F61175 ( current , visitor ) return result ; \n\t} \n"}, {"code": "public $F276197 Optional $F64714 transformSome ( final Optional $F124684 optional , final Transformer $F276197 transformer ) { \n\tfinal OptionalVisitor < Optional $F64714 , T1 > visitor = new OptionalVisitor < Optional $F64714 , T1 > $F2 { \n\t\tpublic Optional $F64714 visitNone ( final None $F124684 none ) { \n\t\t\treturn new NoneImpl $F64714 $F2 ; \n\t\t\t} \n\t\tpublic Optional $F64714 visitSome ( final Some $F124684 some ) { \n\t\t\tfinal T1 original = $F3051101 ( some ) ; \n\t\t\tfinal T2 $F21341 ( transformed , transformer , original ) ; \n\t\t\treturn new SomeImpl $F64714 ( transformed ) ; \n\t\t\t} \n\t\t} \n\t; \n\treturn $F14604 ( optional , visitor ) ; \n\t} \n"}, {"code": "public $F1372 boolean isNone ( final $F57897 optional ) { \n\tfinal OptionalVisitor < Boolean , T > visitor = new OptionalVisitor < Boolean , T > $F2 { \n\t\tpublic Boolean visitNone ( final None $F1372 none ) $F233 public Boolean visitSome ( final Some $F1372 some ) $F1668 } \n\t; \n\treturn $F14604 ( optional , visitor ) ; \n\t} \n"}, {"code": "public $F1372 T someObject ( final $F57897 optional ) throws IllegalArgumentException { \n\tfinal ObjectRef objectRef = new ObjectRefImpl $F2 ; \n\tfinal OptionalVisitor $F69720 visitor = new OptionalVisitor $F69720 $F2 { \n\t\tpublic T visitNone ( final None $F1372 none ) $F24432 public T visitSome ( final Some $F1372 some ) { \n\t\t\treturn $F3051101 ( some ) ; \n\t\t\t} \n\t\t} \n\t; \n\treturn $F14604 ( optional , visitor ) ; \n\t} \n"}, {"code": "private final void init $F2 throws ServletException { \n\tServletConfig conf ; \n\tServletContext ctx ; \n\t$F3509 ( logger , servlet ) $F89029 ( servlet ) if ( ( conf = servlet . getServletConfig ( ) ) == null ) $F3687 if ( ( $F611974 ( ctx , conf ) ) == null ) $F3687 if ( isName ) dispatcher = ctx . getNamedDispatcher ( nameOrPath ) ; \n\telse dispatcher = ctx . getRequestDispatcher ( nameOrPath ) ; \n\tif $F112 ( dispatcher ) throw new ServletException $F500 ( nameOrPath ) ; \n\t} \n"}, {"code": "private void readObject ( ObjectInputStream in ) throws $F41220 { \n\t$F60618 ( in ) try $F4537 ( init ) catch ( ServletException e ) $F3084 ( e ) } \n"}, {"code": "protected Dataset < Sequence > loadDataset $F2 throws Exception { \n\treturn $F8650030 ( Dataset ) . type ( DatasetType . InMemory ) . source ( $F905 ( Corpus ) . source ( corpus ) . format ( corpusFormat ) . build ( ) . stream ( ) . filter ( d - > d . getAnnotationSet ( ) . isCompleted ( Types . PART_OF_SPEECH ) ) . flatMap ( d - > d . sentences ( ) . stream ( ) ) . map ( sentence - > { \n\t\t<missing ';'> SequenceInput $F26725 input = new SequenceInput $F50 $F2 ; \n\t\tfor ( int i = INT00 ; \n\t\ti < sentence . tokenLength ( ) ; \n\t\ti ++ ) { \n\t\t\tPOS pos = sentence . tokenAt ( i ) . getPOS ( ) ; \n\t\t\t$F2201 ( pos ) input . add ( sentence . tokenAt ( i ) , $F344048 ( pos ) ) ; \n\t\t\t} \n\t\treturn $F144 ( featurizer ) . extractSequence ( $F16599 ( input ) ) ; \n\t\t} \n\t"}, {"code": "protected void train $F2 throws Exception { \n\tDataset < Sequence > train = loadDataset ( ) ; \n\tif $F3730 ( minFeatureCount ) { \n\t\ttrain = train . preprocess ( PreprocessorList . create ( new MinCountFilter ( minFeatureCount ) . asSequenceProcessor ( ) ) ) ; \n\t\t} \n\tSequenceLabeler labeler = $F147938 ( getLearner , train ) ; \n\tPOSTagger tagger = new POSTagger ( $F63229 ( featurizer , labeler ) ) ; \n\t$F21494 ( tagger , model ) } \n"}, {"code": "public boolean matches $F1560513 ( method ) { \n\t$F2755 ( validateNotNull , method ) if $F268 ( m_patterns ) { \n\t\tfor ( String pattern : m_patterns ) { \n\t\t\tif ( $F507 ( method ) . matches ( pattern ) ) $F233 } \n\t\t} \n\t$F213 } \n"}, {"code": "public Option [ ] getOptions $F2 throws IllegalAccessException , InvocationTargetException , InstantiationException { \n\tif $F112 ( m_options ) { \n\t\tList $F44783 options = new ArrayList $F44783 $F2 ; \n\t\tConfiguration config = getMethod ( ) . getAnnotation ( $F53706 ) ; \n\t\tfor ( Class < ? extends CompositeOption > option : config . extend ( ) ) { \n\t\t\tfor ( Option o : $F6892 ( option ) . getOptions ( ) ) $F529 ( options , o ) } \n\t\tfor ( Option o : ( Option [ ] ) $F1998574 ( getMethod ) ( m_configInstance ) ) $F529 ( options , o ) m_options = options . toArray ( new Option $F31920 ( options ) ) ; \n\t\t} \n\treturn m_options ; \n\t} \n"}, {"code": "$F1 public ISource locate ( String path ) { \n\tif $F28525 ( path ) { \n\t\treturn new UnfoundSource $F2 ; \n\t\t} \n\tResourceSource reSource = new ResourceSource ( path ) ; \n\tif ( ! $F88338 ( reSource ) ) { \n\t\treturn new UnfoundSource ( path ) ; \n\t\t} \n\treturn reSource ; \n\t} \n"}, {"code": "public static ComparableSimpleDateFormat compile $F62952 ( valueStr ) { \n\tfinal ComparableSimpleDateFormat cp = new ComparableSimpleDateFormat $F2 ; \n\tcp . delegate = $F277222 ( valueStr ) ; \n\tcp . pattern = valueStr ; \n\treturn cp ; \n\t} \n"}, {"code": "$F1 public String format ( int index ) { \n\t$F1200 ( sb ) final RomanNumeral [ ] $F9005 ( values , RomanNumeral ) ; \n\tfor ( $F14116 ( i , values ) ) { \n\t\twhile ( index >= values [ i ] . weight ) { \n\t\t\t$F96987 ( sb , values , i ) index -= values [ i ] . weight ; \n\t\t\t} \n\t\t} \n\t$F1226 ( sb ) } \n"}, {"code": "private static void reportError ( List messages , String fileName , int lineNr , String line , String errorMessage ) { \n\tmessages . add ( $F6239 + STRING00 + fileName + STRING00 + lineNr + STRING00 ) ; \n\t$F528 ( messages , errorMessage ) } \n"}, {"code": "public static $F21 disectCommandLine ( String line ) { \n\treturn StringSupport . split ( line , STRING00 , STRING00 , false , false , false ) . toArray ( $F28560 ) ; \n\t} \n"}, {"code": "public void addFile $F21370 ( zipEntry , input ) throws IOException { \n\tif $F268 ( input ) { \n\t\tstream . putNextEntry ( $F289818 ( zipEntry ) ) ; \n\t\t$F47449 ( Streams , input , stream ) } \n\t} \n"}, {"code": "public void addFile $F234476 ( zipEntry , data ) throws IOException { \n\tstream . putNextEntry ( $F289818 ( zipEntry ) ) ; \n\t$F21494 ( stream , data ) } \n"}, {"code": "public void addFile ( String zipEntry , ByteArrayOutputStream baos ) throws IOException { \n\taddFile ( zipEntry , $F21499 ( baos ) ) ; \n\t} \n"}, {"code": "public void addFile $F296938 ( zipEntry , file ) throws IOException { \n\tString zipEntryName = $F127290 ( Strings , zipEntry ) ? zipEntry : $F507 ( file ) ; \n\t$F653753 ( logger , file , zipEntryName ) try $F22663 ( input , file ) $F565 ( addFile , zipEntryName , input ) } \n"}, {"code": "public void addFile $F1195 ( zipEntry , filename ) throws IOException { \n\taddFile ( zipEntry , $F2592 ( filename ) ) ; \n\t} \n"}, {"code": "public void addFiles $F2763 ( zipEntries ) throws IOException { \n\t$F717967 ( logger , zipEntries ) for ( $F88222 ( zipEntry , zipEntries ) ) { \n\t\t$F2744 ( value , zipEntries , zipEntry ) if $F184886 ( value ) { \n\t\t\t$F3509 ( logger , zipEntry ) addFile ( zipEntry , $F162293 ( value ) ) ; \n\t\t\t} \n\t\telse if ( value instanceof InputStream ) { \n\t\t\t$F3509 ( logger , zipEntry ) addFile ( zipEntry , ( InputStream ) value ) ; \n\t\t\t} \n\t\telse if ( value instanceof ByteArrayOutputStream ) { \n\t\t\t$F3509 ( logger , zipEntry ) addFile ( zipEntry , ( ByteArrayOutputStream ) value ) ; \n\t\t\t} \n\t\telse if $F2651 ( value ) { \n\t\t\t$F3509 ( logger , zipEntry ) addFile ( zipEntry , ( File ) value ) ; \n\t\t\t} \n\t\telse if $F4380 ( value ) { \n\t\t\t$F3509 ( logger , zipEntry ) addFile ( $F11504 ( zipEntry , value ) ) ; \n\t\t\t} \n\t\telse $F5573 ( logger , zipEntry ) } \n\t} \n"}, {"code": "public static $F1975 append $F135889 ( a , b ) { \n\t$F1975 z = new byte $F35440 ( a , b ) ; \n\t$F35447 ( System , a , z ) $F35450 ( System , b , z , a ) return z ; \n\t} \n"}, {"code": "public static long toLong $F2665 ( b ) { \n\treturn ( ( ( $F115151 ( b ) ) & INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) + ( ( ( $F115151 ( b ) ) & INT00 ) < < INT00 ) ) ; \n\t} \n"}, {"code": "public static boolean areEqual $F135889 ( a , b ) { \n\t$F58133 ( aLength , a ) if $F72355 ( aLength , b ) $F1668 for ( $F6610 ( i , aLength ) ) { \n\t\tif $F184063 ( a , i , b ) $F1668 } \n\t$F232 } \n"}, {"code": "public static int compareTo $F135889 ( lhs , rhs ) { \n\t$F120613 ( lhs , rhs ) $F43807 ( lhs ) if $F112 ( rhs ) { \n\t\treturn $F336477 ; \n\t\t} \n\tif $F250577 ( lhs , rhs ) { \n\t\treturn ( ( $F135825 ( lhs , rhs ) ) ? $F3745 : $F336477 ) ; \n\t\t} \n\tfor ( $F2674 ( i , lhs ) ) { \n\t\tif ( lhs [ i ] < rhs [ i ] ) $F17551 else if ( lhs [ i ] > rhs [ i ] ) $F17553 } \n\t$F8383 } \n"}, {"code": "public static ByteBuffer allocateAndReadAll ( int size , ReadableByteChannel channel ) throws IOException { \n\t$F33795 ( buf , ByteBuffer , size ) int justRead ; \n\t$F1987 ( totalRead ) while ( totalRead < size ) { \n\t\t$F3509 ( logger , totalRead ) if ( $F34941 ( justRead , channel , buf ) < INT00 ) throw new EOFException $F500 ( totalRead ) ; \n\t\ttotalRead += justRead ; \n\t\t} \n\t$F450459 ( buf ) return buf ; \n\t} \n"}, {"code": "public static ByteBuffer slice ( ByteBuffer buf , int off , int len ) { \n\t$F375815 ( localBuf , buf ) $F133680 ( logger , off , len ) $F63769 ( localBuf , off ) localBuf . limit ( off + len ) ; \n\tlogger . debug ( STRING00 , $F57991 ( localBuf ) , $F57994 ( localBuf ) ) ; \n\tlocalBuf = $F118664 ( localBuf ) ; \n\tlogger . debug ( STRING00 , $F57991 ( localBuf ) , $F57994 ( localBuf ) ) ; \n\treturn localBuf ; \n\t} \n"}, {"code": "protected void setPropertyOnNode ( Node node , String propName , Object value ) throws RepositoryException { \n\tboolean encoded = $F14140 ( propName , BASE64_ENCODING_SUFFIX ) ; \n\tif ( encoded ) { \n\t\tint newLength = $F9508 ( propName , BASE64_ENCODING_SUFFIX ) ; \n\t\tpropName = newLength > INT00 ? $F2529 ( propName , newLength ) : STRING00 ; \n\t\t} \n\t$F15921 ( values , convertToJcrValues , node , value , encoded ) if $F112 ( values ) { \n\t\tnode . setProperty ( propName , ( Value ) null ) ; \n\t\t} \n\telse if ( values instanceof Value ) { \n\t\tnode . setProperty ( propName , ( Value ) values ) ; \n\t\t} \n\telse { \n\t\tnode . setProperty ( propName , ( $F275087 ) values ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void deleteItem ( Request request , String rawRepositoryName , String rawWorkspaceName , String path ) throws RepositoryException { \n\t$F90518 ( rawRepositoryName ) $F90518 ( rawWorkspaceName ) $F90518 ( path ) Session $F2207 ( session , getSession , request , rawRepositoryName , rawWorkspaceName ) ; \n\t$F564 ( doDelete , path , session ) $F488159 ( session ) } \n"}, {"code": "protected Item updateItem ( Item item , JsonNode jsonItem ) throws RepositoryException { \n\tif $F1513914 ( item ) { \n\t\treturn updateNode ( ( Node ) item , jsonItem ) ; \n\t\t} \n\treturn updateProperty ( ( Property ) item , jsonItem ) ; \n\t} \n"}, {"code": "protected Node updateNode ( Node node , JsonNode jsonNode , VersionableChanges changes ) throws RepositoryException { \n\tJsonNode properties = jsonNode ; \n\tif $F11436 ( jsonNode , PROPERTIES_HOLDER ) $F13003 ( properties , jsonNode , PROPERTIES_HOLDER ) changes . checkout ( node ) ; \n\tif $F11436 ( properties , PRIMARY_TYPE_PROPERTY ) { \n\t\tString primaryType = $F302945 ( properties , PRIMARY_TYPE_PROPERTY ) ; \n\t\t$F35682 ( primaryType ) if ( $F25052 ( primaryType ) && ! node . getPrimaryNodeType ( ) . getName ( ) . equals ( primaryType ) ) { \n\t\t\tnode . setPrimaryType ( primaryType ) ; \n\t\t\t} \n\t\t} \n\t$F130047 ( mixinsToRemove ) if $F11436 ( properties , MIXIN_TYPES_PROPERTY ) { \n\t\tmixinsToRemove = $F33692 ( updateMixins , node , properties , MIXIN_TYPES_PROPERTY ) ; \n\t\t} \n\tfor ( $F63081 iter = $F196235 ( properties ) ; \n\t$F11309 ( iter ) ; \n\t) { \n\t\t$F93978 ( key , iter ) if ( $F177282 ( PRIMARY_TYPE_PROPERTY , key , MIXIN_TYPES_PROPERTY ) || $F5249 ( CHILD_NODE_HOLDER , key ) ) $F42718 setPropertyOnNode ( $F56749 ( node , key , properties ) ) ; \n\t\t} \n\tif $F540 ( hasChildren , jsonNode ) $F5704 ( updateChildren , node , jsonNode , changes ) for ( String mixinToRemove : mixinsToRemove ) { \n\t\tnode . removeMixin ( mixinToRemove ) ; \n\t\t} \n\treturn node ; \n\t} \n"}, {"code": "public static String readEnvironment ( String environmentName ) throws MnoConfigurationException { \n\tString $F9829 ( property , System , environmentName ) ; \n\tif $F540 ( isNullOrEmpty , property ) { \n\t\tthrow new MnoConfigurationException $F2821 ( environmentName ) ; \n\t\t} \n\treturn property ; \n\t} \n"}, {"code": "public static String readEnvironment $F1195 ( environmentName , defaultValue ) { \n\tString $F9829 ( property , System , environmentName ) ; \n\t$F61710 ( isNullOrEmpty , property , defaultValue ) return property ; \n\t} \n"}, {"code": "private void create ( Connection conn ) throws SQLException { \n\t$F45360 ( logger ) try { \n\t\t$F403331 ( stmt ) $F391030 ( rs ) try { \n\t\t\t$F1754961 ( stmt , conn , CREATE_SEQ ) stmt . setString ( INS_NAME , getName ( ) ) ; \n\t\t\tstmt . setLong ( INS_NEXT_KEY , nextKey ) ; \n\t\t\tstmt . setLong ( INS_INTERVAL , interval ) ; \n\t\t\tstmt . setLong ( $F285551 ( INS_UPDATE , System ) ) ; \n\t\t\tif ( $F403332 ( stmt ) != INT00 ) { \n\t\t\t\tlogger . warn ( $F24138 ( getName ) ) ; \n\t\t\t\t$F232324 ( sequence ) } \n\t\t\t} \n\t\tfinally { \n\t\t\tif $F268 ( rs ) { \n\t\t\t\ttry $F2453 ( rs ) catch ( SQLException ignore ) $F1645 } \n\t\t\tif $F268 ( stmt ) { \n\t\t\t\ttry $F2453 ( stmt ) catch ( SQLException ignore ) $F1645 } \n\t\t\t} \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "public synchronized long next $F2 throws PersistenceException { \n\t$F45360 ( logger ) try { \n\t\t$F380799 ( conn ) sequence ++ ; \n\t\tif $F14980 ( logger ) { \n\t\t\tlogger . info ( $F35284 ( getName , sequence ) ) ; \n\t\t\t} \n\t\tif ( sequence == nextKey ) { \n\t\t\tlogger . info ( $F24138 ( getName ) ) ; \n\t\t\ttry { \n\t\t\t\tInitialContext $F501390 ( ctx ) ; \n\t\t\t\tDataSource ds = ( DataSource ) $F175362 ( ctx , dataSourceName ) ; \n\t\t\t\t$F380801 ( conn , ds ) conn . setReadOnly ( false ) ; \n\t\t\t\treseed ( conn ) ; \n\t\t\t\tif ( ! $F396480 ( conn ) ) $F442654 ( conn ) } \n\t\t\tcatch ( SQLException e ) $F5070055 ( e ) catch ( NamingException e ) $F5070055 ( e ) finally { \n\t\t\t\tif $F268 ( conn ) { \n\t\t\t\t\ttry $F2453 ( conn ) catch ( SQLException ignore ) $F1645 } \n\t\t\t\t} \n\t\t\t} \n\t\tlogger . info ( $F160068 ( sequence , getName ) ) ; \n\t\treturn sequence ; \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "private void reseed ( Connection conn ) throws SQLException { \n\t$F45360 ( logger ) try { \n\t\t$F403331 ( stmt ) $F391030 ( rs ) try { \n\t\t\tdo { \n\t\t\t\t$F1754961 ( stmt , conn , FIND_SEQ ) stmt . setString ( SEL_NAME , getName ( ) ) ; \n\t\t\t\t$F359656 ( rs , stmt ) if $F963541 ( rs ) { \n\t\t\t\t\tlogger . info ( $F24138 ( getName ) ) ; \n\t\t\t\t\t{ \n\t\t\t\t\t\ttry $F2453 ( rs ) catch ( SQLException ignore ) $F1645 rs = null ; \n\t\t\t\t\t\ttry $F2453 ( stmt ) catch ( SQLException ignore ) $F1645 stmt = null ; \n\t\t\t\t\t\t} \n\t\t\t\t\tsequence = NUM00 ; \n\t\t\t\t\tnextKey = sequence + interval ; \n\t\t\t\t\tcreate ( conn ) ; \n\t\t\t\t\t} \n\t\t\t\telse { \n\t\t\t\t\tlong ts ; \n\t\t\t\t\t$F148232 ( sequence , rs , SEL_NEXT_KEY ) ; \n\t\t\t\t\t$F148232 ( interval , rs , SEL_INTERVAL ) ; \n\t\t\t\t\t$F62356 ( interval , defaultInterval ) nextKey = sequence + interval ; \n\t\t\t\t\t$F148232 ( ts , rs , SEL_UPDATE ) ; \n\t\t\t\t\t{ \n\t\t\t\t\t\ttry $F2453 ( rs ) catch ( SQLException ignore ) $F1645 rs = null ; \n\t\t\t\t\t\ttry $F2453 ( stmt ) catch ( SQLException ignore ) $F1645 stmt = null ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F1754961 ( stmt , conn , UPDATE_SEQ ) stmt . setLong ( UPD_NEXT_KEY , nextKey ) ; \n\t\t\t\t\tstmt . setLong ( $F285551 ( UPD_SET_UPDATE , System ) ) ; \n\t\t\t\t\tstmt . setString ( UPD_NAME , getName ( ) ) ; \n\t\t\t\t\tstmt . setLong ( UPD_WHERE_KEY , sequence ) ; \n\t\t\t\t\tstmt . setLong ( UPD_WHERE_UPDATE , ts ) ; \n\t\t\t\t\tif ( $F403332 ( stmt ) != INT00 ) { \n\t\t\t\t\t\t$F232324 ( sequence ) $F16516 ( logger ) } \n\t\t\t\t\telse { \n\t\t\t\t\t\tif ( ! $F396480 ( conn ) ) $F442654 ( conn ) } \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\twhile ( sequence == $F37372 ) ; \n\t\t\t$F105723 ( logger , sequence , nextKey ) } \n\t\tfinally { \n\t\t\tif $F268 ( rs ) { \n\t\t\t\ttry $F2453 ( rs ) catch ( SQLException ignore ) $F1645 } \n\t\t\tif $F268 ( stmt ) { \n\t\t\t\ttry $F2453 ( stmt ) catch ( SQLException ignore ) $F1645 } \n\t\t\t} \n\t\t} \n\tfinally $F155966 ( logger ) } \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\t$F19733 ( adjustments ) if $F126320 ( getParameterCount ) adjustments = values . popString ( ) ; \n\t\tfinal DateTimeFormatter dtf = DateTimeFormatter . ofPattern ( values . popString ( ) ) ; \n\t\tfinal String dateInputObject = values . popString ( ) ; \n\t\tfinal LocalDateTime $F121890 ( convertedInputDate , LocalDateTime , dateInputObject , dtf ) ; \n\t\tvalues . push ( CalendarFactory . modify ( convertedInputDate , adjustments ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public void connectFailed ( final URI uri , final SocketAddress sa , final IOException ioe ) { \n\tif $F102513 ( uri , sa , ioe ) $F24432 final ProxyDecorator $F199 ( p , proxies , sa ) ; \n\tif $F268 ( p ) { \n\t\tif ( $F2421522 ( p ) >= INT00 ) $F6954 ( proxies , sa ) } \n\telse { \n\t\tif $F268 ( defaultSelector ) { \n\t\t\tdefaultSelector . connectFailed ( uri , sa , ioe ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "$F1 public List < Proxy > select $F334154 ( uri ) { \n\t$F24434 ( uri ) final String $F140203 ( protocol , uri ) ; \n\tif $F406351 ( protocol ) { \n\t\tfinal ArrayList < Proxy > $F54 ( proxyList ) ; \n\t\tfor ( final ProxyDecorator p : $F387 ( proxies ) ) { \n\t\t\tproxyList . add ( $F27741 ( p ) ) ; \n\t\t\t} \n\t\treturn proxyList ; \n\t\t} \n\tif $F268 ( defaultSelector ) { \n\t\treturn $F175683 ( defaultSelector , uri ) ; \n\t\t} \n\telse { \n\t\tfinal ArrayList < Proxy > $F54 ( proxyList ) ; \n\t\tproxyList . add ( Proxy . NO_PROXY ) ; \n\t\treturn proxyList ; \n\t\t} \n\t} \n"}, {"code": "public MessageDescriptor < ? extends M > getSubtype ( $F623 final $F34817 discriminatorValue ) { \n\t$F254102 ( subtypeMap , getSubtypes ) $F30910 ( subtypeMap , discriminatorValue ) } \n"}, {"code": "public Set < MessageDescriptor < ? extends M > > getSubtypes $F2 { \n\t$F3279 ( subtypes ) Set < MessageDescriptor < ? extends M > > list = new HashSet < MessageDescriptor < ? extends M > > $F2 ; \n\tfor ( Provider < MessageDescriptor < ? extends M > > provider : subtypeProviders ) { \n\t\tMessageDescriptor < ? extends M > $F145 ( subtype , provider ) ; \n\t\t$F528 ( list , subtype ) } \n\tMap < $F34817 , MessageDescriptor < ? extends M > > map = new HashMap < $F34817 , MessageDescriptor < ? extends M > > $F2 ; \n\tfor ( MessageDescriptor < ? extends M > subtype : list ) { \n\t\tmap . put ( subtype . getDiscriminatorValue ( ) , subtype ) ; \n\t\t} \n\tsubtypes = $F57565 ( ImmutableCollections , list ) ; \n\t$F207814 ( subtypeMap , ImmutableCollections , map ) ; \n\treturn subtypes ; \n\t} \n"}, {"code": "protected void initResourceConfig ( WebConfig webConfig ) throws ServletException { \n\ttry { \n\t\tField field = ServletContainer . class . getDeclaredField ( STRING00 ) ; \n\t\t$F10869 ( field ) field . set ( this , createResourceConfig ( webConfig ) ) ; \n\t\t} \n\tcatch ( ReflectiveOperationException e ) { \n\t\t$F2945497 ( e ) } \n\tcatch ( BeansException e ) { \n\t\t$F2945497 ( e ) } \n\t} \n"}, {"code": "protected ResourceConfig createResourceConfig ( WebConfig webConfig ) throws BeansException { \n\treturn WebApplicationContextUtils . getWebApplicationContext ( $F8813 ( webConfig ) ) . getBean ( webConfig . getServletConfig ( ) . getInitParameter ( REST_APPLICATION ) , ResourceConfig . class ) ; \n\t} \n"}, {"code": "public void closeLogger ( String loggerName ) { \n\tif ( this . openLoggers . containsKey ( loggerName ) ) { \n\t\ttry { \n\t\t\tthis . openLoggers . get ( loggerName ) . close ( ) ; \n\t\t\t} \n\t\tcatch ( Exception e ) { \n\t\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t\t} \n\t\tthis . openLoggers . remove ( loggerName ) ; \n\t\t} \n\t} \n"}, {"code": "public synchronized Set < IDataLogger > recover $F2 throws Exception { \n\tSet < IDataLogger > dataLoggers = new HashSet < IDataLogger > $F2 ; \n\t$F1043 loggerNames = this . loggerFactory . findLoggerNames ( ) ; \n\tfor ( String loggerName : loggerNames ) { \n\t\tthis . instanciateLogger ( loggerName , true ) ; \n\t\t} \n\treturn dataLoggers ; \n\t} \n"}, {"code": "public synchronized void close $F2 { \n\tMap < String , IDataLogger > copiedLoggers = new HashMap < String , IDataLogger > ( this . openLoggers ) ; \n\tfor ( IDataLogger dataLogger : $F387 ( copiedLoggers ) ) $F516274 ( dataLogger ) this . openLoggers . clear ( ) ; \n\t} \n"}, {"code": "public static Pipe newPipe ( final XMLStreamReader parser ) { \n\tfinal XmlInput xmlInput = new XmlInput ( parser ) ; \n\treturn new Pipe $F2 { \n\t\tprotected Input begin ( Pipe . Schema $F45 pipeSchema ) throws IOException { \n\t\t\ttry { \n\t\t\t\tif ( $F2932579 ( parser , START_ELEMENT ) || ! pipeSchema . wrappedSchema . messageName ( ) . equals ( $F147493 ( parser ) ) ) { \n\t\t\t\t\tthrow new XmlInputException ( STRING00 + pipeSchema . wrappedSchema . messageName ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tif ( $F2932578 ( parser ) == END_ELEMENT ) $F2200 } \n\t\t\tcatch ( XMLStreamException e ) { \n\t\t\t\tthrow new XmlInputException ( e ) ; \n\t\t\t\t} \n\t\t\treturn xmlInput ; \n\t\t\t} \n\t\tprotected void end ( Pipe . Schema $F45 pipeSchema , Input input , boolean cleanupOnly ) throws IOException { \n\t\t\tif ( cleanupOnly ) { \n\t\t\t\ttry $F2453 ( parser ) catch ( XMLStreamException e ) $F1645 $F254 } \n\t\t\tassert input == xmlInput ; \n\t\t\ttry $F2453 ( parser ) catch ( XMLStreamException e ) $F1645 } \n\t\t} \n\t; \n\t} \n"}, {"code": "$F1 $F762 protected HttpRequestBase process ( InvocationContext context , HttpRequestBase request ) { \n\ttry { \n\t\tif ( request instanceof HttpEntityEnclosingRequestBase ) { \n\t\t\tList < Entry < Entity , Object > > entities = Metadata . onParams ( $F397541 , context ) ; \n\t\t\tif $F6132 ( entities ) { \n\t\t\t\tthrow new MissingEntityException ( context ) ; \n\t\t\t\t} \n\t\t\tif $F4340 ( entities ) { \n\t\t\t\tthrow new MultipleEntityException ( context ) ; \n\t\t\t\t} \n\t\t\tObject entity = $F19166 ( entities ) ; \n\t\t\tSerialize metadata = ( metadata = $F12746 ( context ) . getAnnotation ( Serialize . class ) ) == null ? $F713495 ( context ) . getAnnotation ( Serialize . class ) : metadata ; \n\t\t\tif ( metadata != null && ! isDetached ( context , Serialize . class ) ) { \n\t\t\t\t$F762 AbstractSerializer serializer = ( $F11145 ( metadata ) == UNDEFINED ) ? Serializers . resolve ( $F13768 ( metadata ) ) : Serializers . resolve ( $F11145 ( metadata ) ) ; \n\t\t\t\tentity = $F224492 ( serializer , context , entity ) ; \n\t\t\t\t} \n\t\t\tHttpEntity $F124796 ( httpEntity , Entities , entity ) ; \n\t\t\t( ( HttpEntityEnclosingRequestBase ) request ) . setHeader ( HttpHeaders . CONTENT_TYPE , ContentType . getOrDefault ( httpEntity ) . getMimeType ( ) ) ; \n\t\t\t( ( HttpEntityEnclosingRequestBase ) request ) . setEntity ( httpEntity ) ; \n\t\t\t} \n\t\t} \n\tcatch ( MissingEntityException mee ) { \n\t\tif ( ! ( request instanceof HttpPost ) ) { \n\t\t\tStringBuilder errorContext = $F81320 ( STRING00 ) . append ( $F397541 . getSimpleName ( ) ) ; \n\t\t\tthrow new RequestProcessorException $F94896 ( errorContext , mee ) ; \n\t\t\t} \n\t\t} \n\tcatch ( MultipleEntityException mee ) { \n\t\tStringBuilder errorContext = $F81320 ( STRING00 ) . append ( $F397541 . getSimpleName ( ) ) . append ( STRING00 ) ; \n\t\tthrow new RequestProcessorException $F94896 ( errorContext , mee ) ; \n\t\t} \n\tcatch ( EntityResolutionFailedException erfe ) { \n\t\tStringBuilder errorContext = $F81320 ( STRING00 ) . append ( $F397541 . getSimpleName ( ) ) . append ( STRING00 ) . append ( RequestUtils . class . getName ( ) ) . append ( STRING00 ) ; \n\t\tthrow new RequestProcessorException $F94896 ( errorContext , erfe ) ; \n\t\t} \n\tcatch ( Exception e ) { \n\t\tthrow new RequestProcessorException $F209248 ( context , getClass , e ) ; \n\t\t} \n\treturn request ; \n\t} \n"}, {"code": "private void flushBuffer $F2 { \n\tremoves . ensureCapacity ( $F3413 ( buffer ) ) ; \n\tfor ( Iterator < LoggingEvent > $F60361 ( i , buffer ) ; \n\t$F11309 ( i ) ; \n\t) { \n\t\ttry { \n\t\t\tLoggingEvent event = ( LoggingEvent ) $F11311 ( i ) ; \n\t\t\tdoLog ( event ) ; \n\t\t\t$F528 ( removes , event ) } \n\t\tcatch ( Exception e ) { \n\t\t\terrorHandler . error ( STRING00 , e , ErrorCode . FLUSH_FAILURE ) ; \n\t\t\t} \n\t\t} \n\t$F24149 ( buffer , removes ) $F39336 ( removes ) } \n"}, {"code": "$F1 public void t $F27155 ( format , arguments ) { \n\tthis . t ( $F57432 ( StringFormatter , format , arguments ) ) ; \n\t} \n"}, {"code": "$F1 public LoadBalancerHealthCheck getLoadBalancerHealthCheck ( $F197020 String providerLBHealthCheckId , $F623 String providerLoadBalancerId ) throws $F22199250 { \n\t$F11106846 ( APITrace , provider ) try { \n\t\t$F4357 parameters = getELBParameters ( getContext ( ) , ELBMethod . DESCRIBE_LOAD_BALANCERS ) ; \n\t\tELBMethod method ; \n\t\tNodeList blocks ; \n\t\tDocument doc ; \n\t\tif $F108359 ( providerLoadBalancerId ) $F2200 $F6257 ( parameters , providerLoadBalancerId ) method = new ELBMethod $F209248 ( provider , getContext , parameters ) ; \n\t\ttry $F875790 ( doc , method ) catch ( EC2Exception e ) { \n\t\t\tString $F714213 ( code , e ) ; \n\t\t\tif $F603265 ( code ) $F2200 $F22782927 ( logger , e ) $F22213712 ( e ) } \n\t\t$F12121463 ( blocks , doc ) if $F330633 ( blocks ) { \n\t\t\tLoadBalancerHealthCheck lbhc = toLBHealthCheck ( providerLoadBalancerId , $F491906 ( blocks ) ) ; \n\t\t\treturn lbhc ; \n\t\t\t} \n\t\t$F724 } \n\t$F133621 ( APITrace ) } \n"}, {"code": "public static Pipe newPipe ( $F1975 data , int offset , int length , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_SMILE_FACTORY . _getBufferRecycler ( ) , data , false ) ; \n\tfinal SmileParser parser = newSmileParser ( null , data , offset , offset + length , false , context ) ; \n\treturn JsonIOUtil . newPipe ( parser , numeric ) ; \n\t} \n"}, {"code": "public static Pipe newPipe ( InputStream in , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_SMILE_FACTORY . _getBufferRecycler ( ) , in , false ) ; \n\tfinal SmileParser parser = newSmileParser ( in , context . allocReadIOBuffer ( ) , INT00 , INT00 , true , context ) ; \n\treturn JsonIOUtil . newPipe ( parser , numeric ) ; \n\t} \n"}, {"code": "static SmileParser newSmileParser ( InputStream in , $F1975 buf , int offset , int limit , boolean bufferRecyclable , IOContext context ) throws IOException { \n\treturn new SmileParser ( context , DEFAULT_SMILE_FACTORY . getParserFeatures ( ) , DEFAULT_SMILE_FACTORY . getSmileParserFeatures ( ) , $F4836 ( DEFAULT_SMILE_FACTORY ) , DEFAULT_SMILE_FACTORY . getRootByteSymbols ( ) . makeChild ( $F30935 ) , in , buf , offset , limit , bufferRecyclable ) ; \n\t} \n"}, {"code": "public static $F1372 void mergeFrom ( $F1975 data , int offset , int length , T message , $F931805 schema , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_SMILE_FACTORY . _getBufferRecycler ( ) , data , false ) ; \n\tfinal SmileParser parser = newSmileParser ( null , data , offset , offset + length , false , context ) ; \n\ttry { \n\t\tJsonIOUtil . mergeFrom ( parser , message , schema , numeric ) ; \n\t\t} \n\t$F2454 ( parser ) } \n"}, {"code": "public static $F1372 void mergeFrom ( InputStream in , T message , $F931805 schema , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_SMILE_FACTORY . _getBufferRecycler ( ) , in , false ) ; \n\tfinal SmileParser parser = newSmileParser ( in , context . allocReadIOBuffer ( ) , INT00 , INT00 , true , context ) ; \n\ttry { \n\t\tJsonIOUtil . mergeFrom ( parser , message , schema , numeric ) ; \n\t\t} \n\t$F2454 ( parser ) } \n"}, {"code": "public static $F1372 void writeListTo ( OutputStream out , $F40294 ( messages ) , $F931805 schema , boolean numeric ) throws IOException { \n\tfinal IOContext context = new IOContext ( DEFAULT_SMILE_FACTORY . _getBufferRecycler ( ) , out , false ) ; \n\tfinal SmileGenerator generator = newSmileGenerator ( out , context . allocWriteEncodingBuffer ( ) , INT00 , true , context ) ; \n\ttry { \n\t\tJsonIOUtil . writeListTo ( generator , messages , schema , numeric ) ; \n\t\t} \n\t$F2454 ( generator ) } \n"}, {"code": "$F1 public String read ( final SocketChannel channel , final String charset , int bufferSize ) throws IOException { \n\tfinal ByteBuffer $F33793 ( buffer , ByteBuffer , bufferSize ) ; \n\t$F325745 ( byteStream ) while $F38432 { \n\t\tfinal int $F33796 ( readBytes , channel , buffer ) ; \n\t\t$F544146 ( readBytes ) if $F3730 ( readBytes ) { \n\t\t\tfinal $F1975 bytes = readBytes == bufferSize ? $F57979 ( buffer ) : Arrays . copyOf ( $F57979 ( buffer ) , readBytes ) ; \n\t\t\t$F21494 ( byteStream , bytes ) } \n\t\t$F39336 ( buffer ) } \n\treturn new String ( $F21499 ( byteStream ) , charset ) ; \n\t} \n"}, {"code": "public $F61574 X cast ( final $F61575 cls ) { \n\t$F24434 ( cls ) $F178778 ( beanClass , bean ) if $F36627 ( cls , beanClass ) $F14241 ( cls , bean ) throw new ClassCastException $F24635 ( beanClass , cls ) ; \n\t} \n"}, {"code": "$F762 public T getInstance $F2 { \n\tif $F112 ( beanClassName ) $F2200 else try { \n\t\tT beanInstance ; \n\t\t$F7905 beanClass = null ; \n\t\ttry { \n\t\t\ttry { \n\t\t\t\t$F3947 ( classLoader , Thread ) beanClass = ( $F7905 ) $F35481 ( Class , beanClassName , classLoader ) ; \n\t\t\t\t} \n\t\t\tcatch ( ClassNotFoundException cnfe ) $F182702 ( beanClassName , cnfe ) $F48912 constructor = ( $F48912 ) beanClass . getConstructor ( $F23401 ) ; \n\t\t\t$F233036 ( beanInstance , constructor , properties ) } \n\t\tcatch ( NoSuchMethodException nsme ) { \n\t\t\t$F146792 ( beanInstance , beanClass ) if $F14587 ( properties ) { \n\t\t\t\tBeanInfo validatorInfo = $F2442112 ( Introspector , beanClass ) ; \n\t\t\t\t$F391516 propertyDescriptors = $F2052575 ( validatorInfo ) ; \n\t\t\t\tfor ( BeanProperty beanProperty : properties ) { \n\t\t\t\t\tString $F1325730 ( propertyName , beanProperty ) ; \n\t\t\t\t\t$F289127 ( writeMethod ) for ( PropertyDescriptor propertyDescriptor : propertyDescriptors ) { \n\t\t\t\t\t\tif $F26397 ( propertyDescriptor , propertyName ) { \n\t\t\t\t\t\t\t$F104978 ( writeMethod , propertyDescriptor ) ; \n\t\t\t\t\t\t\t$F332 } \n\t\t\t\t\t\t} \n\t\t\t\t\tif $F112 ( writeMethod ) { \n\t\t\t\t\t\tthrow new RuntimeException ( $F7207 ( propertyName ) + $F214962 ( beanClass ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t$F2612 $F558742 ( parameterType , writeMethod ) ; \n\t\t\t\t\tif ( BeanProperty . class . equals ( parameterType ) ) $F128916 ( writeMethod , beanInstance , beanProperty ) else if $F286366 ( parameterType ) { \n\t\t\t\t\t\tif ( beanProperty . hasAttributes ( ) ) { \n\t\t\t\t\t\t\tthrow new RuntimeException ( $F320 ( propertyName ) + $F1391686 . getSimpleName ( ) + STRING00 ) ; \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\twriteMethod . invoke ( beanInstance , beanProperty . getPropertyValue ( ) ) ; \n\t\t\t\t\t\t} \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t} \n\t\treturn beanInstance ; \n\t\t} \n\t$F11569 ( e ) } \n"}, {"code": "$F1 public Object invoke ( final Invocation invocation ) throws Exception { \n\t$F544121 ( invocation ) MethodDescriptor $F19378 $F28311 ( method , invocation ) ; \n\tDataTypeDescriptor $F45 resultd = ( DataTypeDescriptor $F45 ) $F115961 ( method ) ; \n\tMessageDescriptor $F560864 excd = descriptor . getExc ( ) ; \n\tRpcRequest request = protocol . getRequest ( invocation ) ; \n\treturn session . send ( request , resultd , excd ) ; \n\t} \n"}, {"code": "protected String generateETagHeaderValue $F2665 ( bytes ) { \n\t$F13905 ( builder ) DigestUtils . appendMd5DigestAsHex ( bytes , builder ) ; \n\t$F1218 ( builder ) $F1226 ( builder ) } \n"}, {"code": "public Set < ModuleModel > getReferencedModules $F2 { \n\tSet < ModuleModel > $F6940 ( set ) ; \n\t$F308 ( set , exportedModules ) $F308 ( set , importedModules ) return set ; \n\t} \n"}, {"code": "public Set < ClassModel > getAllClassDependencies $F2 { \n\tHashSet < ClassModel > $F6940 ( result ) ; \n\tfor ( ModuleModel module : allModuleDependencies ) { \n\t\tfor ( ClassModel clazz : module . classes ) { \n\t\t\tClassModel . getAllClassDependencies ( result , clazz ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "List $F39164 list $F2 { \n\t$F26217 result = new $F67642 $F2 ; \n\twhile $F560 ( hasNext ) $F1434 ( result , next ) return result ; \n\t} \n"}, {"code": "public Object create ( $F2613 ( iface ) , ClassLoader proxyLoader ) { \n\treturn create ( $F301079 ( iface ) , proxyLoader ) ; \n\t} \n"}, {"code": "public Object create ( $F3704 ( ifaces ) , ClassLoader proxyLoader ) { \n\treturn Proxy . newProxyInstance ( proxyLoader , ifaces , new XRemotingInvocationHandler ( serializer , requester ) ) ; \n\t} \n"}, {"code": "public String resolveReposUrl $F2 throws IOException { \n\ttry { \n\t\tURL url ; \n\t\ttry $F880504 ( url , defaultRepositoryUrl ) catch ( MalformedURLException e ) { \n\t\t\turl = $F18459 ( defaultRepositoryUrl ) . toURL ( ) ; \n\t\t\t} \n\t\tif ( ! $F38526 ( url ) ) { \n\t\t\tlog . info ( STRING00 , $F5162 ( url ) ) ; \n\t\t\treturn defaultRepositoryUrl ; \n\t\t\t} \n\t\tProperties config = loadConfig ( ) ; \n\t\t$F3446 ( config , defaultRepositoryUrl ) $F4771 ( localIp , determinateLocalIP ) $F4282 ( resolveRepos , localIp , config ) } \n\tcatch ( Exception e ) { \n\t\t$F428173 ( log , e ) return defaultRepositoryUrl ; \n\t\t} \n\t} \n"}, {"code": "private String determinateLocalIP $F2 throws IOException { \n\t$F182016 ( socket ) try { \n\t\t$F35380 ( url , defaultRepositoryUrl ) int port = $F7133 ( url ) > $F3745 ? $F7133 ( url ) : url . getDefaultPort ( ) ; \n\t\t$F133680 ( log , defaultRepositoryUrl , port ) InetAddress address = Inet4Address . getByName ( $F7130 ( url ) ) ; \n\t\tsocket = $F220964 ; \n\t\tsocket . connect ( $F133252 ( address , port ) , INT00 ) ; \n\t\t$F142883 ( stream , socket ) InetAddress localAddress = $F42553 ( socket ) ; \n\t\t$F1109 ( stream ) String $F369033 ( localIp , localAddress ) ; \n\t\t$F129732 ( log , localIp ) return localIp ; \n\t\t} \n\t$F116932 ( socket ) } \n"}, {"code": "private Properties loadConfig $F2 throws IOException { \n\t$F507433 ( configUrl , String , defaultRepositoryUrl , DIST_DIR , RESOLVE_CONFIG_FILE ) $F129732 ( log , configUrl ) CloseableHttpClient client = HttpClients . createDefault ( ) ; \n\t$F5937 ( httpget , configUrl ) CloseableHttpResponse contentResponse ; \n\ttry { \n\t\t$F465011 ( contentResponse , client , httpget ) } \n\tcatch ( ConnectTimeoutException e ) { \n\t\tthrow new ConnectException $F26312 ( e ) ; \n\t\t} \n\t$F6063 ( statusCode , contentResponse ) $F133680 ( log , configUrl , statusCode ) if ( statusCode == HttpStatus . SC_NOT_FOUND ) { \n\t\t$F129732 ( log , configUrl ) $F724 } \n\telse if ( statusCode != HttpStatus . SC_OK ) { \n\t\t$F9662 ( msg , configUrl ) msg += $F5983 ( contentResponse ) . toString ( ) ; \n\t\t$F11567 ( msg ) } \n\t$F5922 ( entity , contentResponse ) BufferedInputStream inputStream = new BufferedInputStream $F11860 ( entity ) ; \n\t$F472 ( properties ) $F29433 ( properties , inputStream ) $F1109 ( contentResponse ) $F1109 ( client ) return properties ; \n\t} \n"}, {"code": "private String resolveRepos $F497998 ( localIp , config ) { \n\tfor ( $F75783 ( key , config ) ) { \n\t\t$F105093 ( ipPraefix , key ) $F2090 ( repos , config , ipPraefix ) if $F19401 ( localIp , ipPraefix ) { \n\t\t\tlog . info ( $F320 ( localIp ) , ipPraefix , repos ) ; \n\t\t\treturn repos ; \n\t\t\t} \n\t\telse { \n\t\t\tlog . debug ( $F320 ( localIp ) , ipPraefix , repos ) ; \n\t\t\t} \n\t\t} \n\t$F131442 ( log , localIp , defaultRepositoryUrl ) return defaultRepositoryUrl ; \n\t} \n"}, {"code": "public Timecode getElapsed $F2 { \n\tif $F560 ( isRunning ) $F112162 ( stop ) ; \n\t$F62727 ( durationMillis , stop , start ) if $F2015 ( start ) durationMillis = INT00 ; \n\tTimecode elapsed = new Timecode ( Timecode . Type . TYPE_AUDIO_CD ) ; \n\telapsed . setFramesPerSecond ( INT00 ) ; \n\telapsed . setFrames ( ( int ) durationMillis ) ; \n\t$F90693 ( elapsed ) return elapsed ; \n\t} \n"}, {"code": "public static $F1372 RuntimeSchema $F1372 createFrom ( $F7906 ( typeClass ) , $F8237 ( exclusions ) , IdStrategy strategy ) { \n\tif ( $F77483 ( typeClass ) || $F37558 ( Modifier , typeClass ) ) { \n\t\tthrow new RuntimeException ( $F339973 ( typeClass ) ) ; \n\t\t} \n\tfinal Map < String , $F1638019 > fieldMap = findInstanceFields ( typeClass ) ; \n\tfinal ArrayList < Field $F1372 > fields = new ArrayList < Field $F1372 > $F4371 ( fieldMap ) ; \n\t$F1987 ( i ) $F1987 ( maxFieldMapping ) $F2233 ( annotated ) for ( $F1638019 f : $F387 ( fieldMap ) ) { \n\t\tif $F6913 ( exclusions , f ) { \n\t\t\tif ( f . getAnnotation ( Deprecated . class ) != null ) $F94093 ( i ) final Tag tag = f . getAnnotation ( Tag . class ) ; \n\t\t\tfinal int fieldMapping ; \n\t\t\tfinal String name ; \n\t\t\tif $F112 ( tag ) { \n\t\t\t\tif ( annotated ) { \n\t\t\t\t\tthrow new RuntimeException ( $F3902 + Tag . class . getSimpleName ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tfieldMapping = ++ i ; \n\t\t\t\t$F105043 ( name , f ) } \n\t\t\telse { \n\t\t\t\tif ( ! annotated && $F385 ( fields ) ) { \n\t\t\t\t\tthrow new RuntimeException ( $F3902 + Tag . class . getSimpleName ( ) ) ; \n\t\t\t\t\t} \n\t\t\t\tannotated = true ; \n\t\t\t\t$F294768 ( fieldMapping , tag ) if $F2523 ( fieldMapping ) $F116297 ( fieldMapping , typeClass ) name = tag . alias ( ) . isEmpty ( ) ? $F507 ( f ) : tag . alias ( ) ; \n\t\t\t\t} \n\t\t\tfinal Field $F1372 field = RuntimeFieldFactory . getFieldFactory ( $F717117 ( f , strategy ) ) . create ( fieldMapping , name , f , strategy ) ; \n\t\t\t$F528 ( fields , field ) $F63640 ( maxFieldMapping , Math , fieldMapping ) } \n\t\t} \n\tif $F6132 ( fields ) $F228325 ( typeClass ) return new RuntimeSchema $F1372 ( typeClass , fields , maxFieldMapping , RuntimeEnv . newInstantiator ( typeClass ) ) ; \n\t} \n"}, {"code": "$F762 static $F1372 Pipe . Schema $F1372 resolvePipeSchema ( $F931805 schema , $F76331 clazz , boolean throwIfNone ) { \n\tif ( $F560857 . isAssignableFrom ( clazz ) ) { \n\t\ttry { \n\t\t\tjava . lang . reflect . Method m = clazz . getDeclaredMethod ( STRING00 , $F4528367 ) ; \n\t\t\treturn ( Pipe . Schema $F1372 ) m . invoke ( null , $F389221 ) ; \n\t\t\t} \n\t\t$F148617 } \n\tif ( MappedSchema . class . isAssignableFrom ( $F298 ( schema ) ) ) return ( ( MappedSchema $F1372 ) schema ) . pipeSchema ; \n\tif ( throwIfNone ) $F96540 ( clazz ) $F724 } \n"}, {"code": "$F1 public Date convert ( final String valueStr , final boolean _caseSensitive , final Object target ) throws ParseException { \n\tif $F112 ( sdf ) if $F872 ( getFormat ) try { \n\t\tsdf = new SimpleDateFormat $F560 ( getFormat ) ; \n\t\t} \n\tcatch ( final Exception e ) { \n\t\tthrow new ParseException ( $F5962 ( e ) , INT00 ) ; \n\t\t} \n\ttry { \n\t\tif $F112 ( sdf ) { \n\t\t\tfinal LocalDateTime ldt = TemporalHelper . parseWithPredefinedParsers ( valueStr ) ; \n\t\t\treturn new Date ( CalendarFactory . asDateLong ( ldt ) ) ; \n\t\t\t} \n\t\t$F47343 ( sdf , valueStr ) } \n\tcatch ( final Exception e ) { \n\t\tthrow new ParseException ( $F606779 ( toString , getFormat ) + STRING00 + $F2443 ( e ) , INT00 ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void exportXmlData ( final StringBuilder out , final int occ ) { \n\tsynchronized ( TemporalHelper . getOutputSDF ( ) ) { \n\t\tout . append ( TemporalHelper . getOutputSDF ( ) . format ( getValue ( occ ) ) ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 public Date [ ] getValueAsDateArray $F2 throws ParseException { \n\tfinal Date [ ] result = new Date $F96057 ( size ) ; \n\tfor ( $F81130 ( r , size ) ) $F994355 ( result , r , getValue ) return result ; \n\t} \n"}, {"code": "public static OAuthRequest attachFile ( File file , OAuthRequest request ) throws IOException { \n\t$F4771 ( boundary , generateBoundaryString ) request . addHeader ( $F6265 ( boundary ) ) ; \n\trequest . addBodyParameter ( $F4308 ( file ) ) ; \n\t$F13905 ( boundaryMessage ) $F11338 ( boundaryMessage , boundary ) ( STRING00 ) . append ( $F507 ( file ) ) . append ( STRING00 ) . append ( STRING00 ) . append ( STRING00 ) . append ( STRING00 ) ; \n\t$F9662 ( endBoundary , boundary ) $F21492 ( buffer ) buffer . write ( $F2659 ( boundaryMessage ) ( CHARSET_NAME ) ) ; \n\tbuffer . write ( $F2456380 ( Files , file ) ) ; \n\tbuffer . write ( $F99115 ( endBoundary , CHARSET_NAME ) ) ; \n\trequest . addPayload ( $F21499 ( buffer ) ) ; \n\t$F1109 ( buffer ) return request ; \n\t} \n"}, {"code": "public void close $F2 throws SQLException { \n\tmore = false ; \n\t$F544983 ( exclusive ) $F189248 ( rs ) $F189248 ( stmt ) } \n"}, {"code": "$F1 public E next $F2 throws NoSuchElementException { \n\tif ( ! more ) $F269725 try { \n\t\tE ret = converter . resultSetIteratorRow2Obj ( rs ) ; \n\t\tadvance ( ) ; \n\t\treturn ret ; \n\t\t} \n\tcatch ( NoSuchElementException e ) $F4760 ( e ) catch ( SQLException e ) $F3084 ( e ) $F3085 ( e ) } \n"}, {"code": "public List < ISubmission > omit ( List < ISubmission > submissions , ISubmitter submitter ) { \n\tArrayList < ISubmission > filteredSubmissions = new ArrayList < ISubmission > $F2 ; \n\tfor ( ISubmission submission : submissions ) { \n\t\tif ( ! submission . getSubmitter ( ) . equals ( submitter ) ) $F529 ( filteredSubmissions , submission ) } \n\treturn filteredSubmissions ; \n\t} \n"}, {"code": "public List < ISubmission > include ( List < ISubmission > submissions , $F14584 ( submitters ) ) { \n\tArrayList < ISubmission > filteredSubmissions = new ArrayList < ISubmission > $F2 ; \n\tfor ( ISubmission submission : submissions ) { \n\t\tif ( submission . getSubmitter ( ) != null ) { \n\t\t\tif ( submitters . contains ( submission . getSubmitter ( ) . getSubmitter ( ) ) ) $F528 ( filteredSubmissions , submission ) } \n\t\t} \n\treturn filteredSubmissions ; \n\t} \n"}, {"code": "private static $F28644 ImmutableSortedMap $F28644 of ( Comparator $F67024 comparator , K k1 , V v1 ) { \n\treturn new RegularImmutableSortedMap $F28644 ( new RegularImmutableSortedSet $F53007 ( $F326 ( ImmutableList , k1 ) , checkNotNull ( comparator ) ) , $F326 ( ImmutableList , v1 ) ) ; \n\t} \n"}, {"code": "public static String secondsToHoursMinutesSeconds $F226825 ( secs ) { \n\tfinal double minutesRemaining = $F281513 ( secs ) ; \n\tfinal double hoursRemaining = Math . floor ( secs / INT00 / INT00 ) ; \n\tfinal double secondsRemaining = secs % INT00 ; \n\t$F102635 ( sb ) if $F85871 ( hoursRemaining ) { \n\t\tsb . append ( ( int ) hoursRemaining ) ; \n\t\t$F1218 ( sb ) } \n\tif $F85871 ( minutesRemaining ) { \n\t\tsb . append ( ( int ) minutesRemaining ) ; \n\t\t$F1218 ( sb ) } \n\tsb . append ( ( int ) secondsRemaining ) ; \n\t$F1218 ( sb ) $F1226 ( sb ) } \n"}, {"code": "public static String encodeParameterStringWithPrefix ( $F428742 ( params ) , final String prefix ) { \n\t$F1200 ( queryStringBuilder ) for ( $F259678 ( entry , params ) ) { \n\t\t$F6788 ( queryStringBuilder , prefix ) ( $F712 ( entry ) ) . append ( STRING00 ) . append ( $F269 ( entry ) ) ; \n\t\t$F1218 ( queryStringBuilder ) } \n\tif $F1216 ( queryStringBuilder ) { \n\t\t$F128283 ( queryStringBuilder ) } \n\t$F1226 ( queryStringBuilder ) } \n"}, {"code": "public static String encodeHttpBasic $F96892 ( username , password ) { \n\t$F134034 ( encode , username , password ) return STRING00 + Base64 . encodeBase64String ( $F133818 ( encode , Charsets ) ) ; \n\t} \n"}, {"code": "void waitForAllDropletEventsToComplete ( $F197020 String instanceId , int timeout ) throws $F22202330 { \n\t$F22213656 ( APITrace , getProvider ) try { \n\t\tlong wait = $F13205 ( System ) + $F391375 ( timeout ) ; \n\t\t$F2233 ( eventsPending ) while ( $F471060 ( System , wait ) ) { \n\t\t\tActions actions = DigitalOceanModelFactory . getDropletEvents ( getProvider ( ) , instanceId ) ; \n\t\t\tfor ( Action action : $F597700 ( actions ) ) { \n\t\t\t\tif ( $F9139 ( $F2373 ( action ) ) ) $F24354 ( eventsPending ) } \n\t\t\t$F107614 ( eventsPending ) try $F136995 ( Thread ) catch ( InterruptedException e ) $F333 } \n\t\t} \n\t$F133621 ( APITrace ) } \n"}, {"code": "public $F197020 Iterable < VirtualMachineProduct > listProducts ( $F197020 VirtualMachineProductFilterOptions options , $F623 Architecture architecture ) throws $F22202330 { \n\t$F19733 ( cacheName ) if $F268 ( architecture ) { \n\t\t$F177215 ( cacheName , architecture ) } \n\tCache < VirtualMachineProduct > cache = Cache . getInstance ( getProvider ( ) , STRING00 + cacheName , VirtualMachineProduct . class , CacheLevel . REGION , new TimePeriod < Day > ( INT00 , TimePeriod . DAY ) ) ; \n\tIterable < VirtualMachineProduct > $F22069 ( products , cache , getContext ) ; \n\tif ( products != null && $F58739 ( products ) ) $F356 ( products ) List < VirtualMachineProduct > list = new ArrayList < VirtualMachineProduct > $F2 ; \n\tSizes availableSizes = ( Sizes ) DigitalOceanModelFactory . getModel ( getProvider ( ) , org . dasein . cloud . digitalocean . models . rest . DigitalOcean . SIZES ) ; \n\tif $F268 ( availableSizes ) { \n\t\tfor ( Size s : availableSizes . getSizes ( ) ) { \n\t\t\tVirtualMachineProduct product = toProduct ( s ) ; \n\t\t\t$F12701 ( product , list ) } \n\t\t$F238782 ( cache , getContext , list ) } \n\telse { \n\t\tlogger . error ( STRING00 + getProvider ( ) . getCloudName ( ) + STRING00 ) ; \n\t\t$F22213673 } \n\treturn list ; \n\t} \n"}, {"code": "public String getString ( String key , $F9704 ( notFound ) ) { \n\t$F6597 ( object , getObject , key ) return $F4380 ( object ) ? ( String ) object : $F144 ( notFound ) ; \n\t} \n"}, {"code": "public BagObject getBagObject ( String key , Supplier < BagObject > notFound ) { \n\t$F6597 ( object , getObject , key ) return ( object instanceof BagObject ) ? ( BagObject ) object : $F144 ( notFound ) ; \n\t} \n"}, {"code": "public BagArray getBagArray ( String key , Supplier < BagArray > notFound ) { \n\t$F6597 ( object , getObject , key ) return ( object instanceof BagArray ) ? ( BagArray ) object : $F144 ( notFound ) ; \n\t} \n"}, {"code": "public Boolean getBoolean ( String key , Supplier $F34636 notFound ) { \n\t$F24282 ( getParsed , key , Boolean ) new , notFound ) ; \n\t} \n"}, {"code": "public Long getLong ( String key , Supplier $F57801 notFound ) { \n\t$F24282 ( getParsed , key , Long ) new , notFound ) ; \n\t} \n"}, {"code": "public Integer getInteger ( String key , Supplier $F60867 notFound ) { \n\t$F24282 ( getParsed , key , Integer ) new , notFound ) ; \n\t} \n"}, {"code": "public Double getDouble ( String key , Supplier $F67569 notFound ) { \n\t$F24282 ( getParsed , key , Double ) new , notFound ) ; \n\t} \n"}, {"code": "public Float getFloat ( String key , Supplier $F73848 notFound ) { \n\t$F24282 ( getParsed , key , Float ) new , notFound ) ; \n\t} \n"}, {"code": "$F1 public void prepare $F2 throws HibiscusException { \n\tHttpEntityEnclosingRequestBase request = ( HttpEntityEnclosingRequestBase ) this . httpRequest ; \n\ttry { \n\t\trequest . setURI ( getURI ( ) ) ; \n\t\tfor ( BasicNameValuePair header : $F429113 ( httpClient ) ) { \n\t\t\trequest . addHeader ( $F447537 ( header ) ) ; \n\t\t\t} \n\t\t} \n\tcatch ( URISyntaxException e1 ) { \n\t\tthrow new HibiscusException ( e1 ) ; \n\t\t} \n\tfinal String requestBody = $F226407 ( httpClient ) ; \n\tfinal int contentLength = $F206761 ( requestBody ) ? $F1203 ( requestBody ) : INT00 ; \n\tif $F3730 ( contentLength ) { \n\t\ttry { \n\t\t\trequest . setEntity ( new StringEntity ( requestBody , $F57607 ( httpClient ) ) ) ; \n\t\t\t} \n\t\tcatch ( UnsupportedEncodingException e2 ) { \n\t\t\tthrow new HibiscusException ( STRING00 + $F57607 ( httpClient ) + STRING00 , e2 ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public < R , T extends R > T getBean ( final $F597379 cls ) { \n\tfinal BeanProvider provider = beanProviderFor ( cls ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public $F1372 T getPrototypeBean ( final $F9735 creator ) { \n\tfinal PrototypeProvider provider = new PrototypeProvider ( name , repository - $F227504 ( creator ) ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public $F1372 T getPrototypeBean ( final Function < BeanAccessor , T > creator ) { \n\tfinal PrototypeProvider provider = new PrototypeProvider ( name , creator ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public < T , P1 , P2 , P3 > T getPrototypeBean ( final ConstructorWith3Parameters < T , P1 , P2 , P3 > creator , final P1 param1 , final P2 param2 , final P3 param3 ) { \n\tfinal PrototypeProvider provider = new PrototypeProvider ( name , beans - > creator . create ( param1 , param2 , param3 ) ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public < T , P1 > T getPrototypeBean ( final ConstructorWithBeansAnd1Parameter < T , P1 > creator , final P1 param1 ) { \n\tfinal PrototypeProvider provider = new PrototypeProvider ( name , beans - > creator . create ( beans , param1 ) ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public < T , P1 , P2 > T getPrototypeBean ( final ConstructorWithBeansAnd2Parameters < T , P1 , P2 > creator , final P1 param1 , final P2 param2 ) { \n\tfinal PrototypeProvider provider = new PrototypeProvider ( name , beans - > creator . create ( beans , param1 , param2 ) ) ; \n\treturn provider . getBean ( this , dryRun ) ; \n\t} \n"}, {"code": "public $F1372 $F8938 getBeansOfType $F65165 ( cls ) { \n\tfinal $F8938 $F6940 ( result ) ; \n\tparent . ifPresent ( parent - > result . addAll ( parent . getBeansOfType ( cls ) ) ) ; \n\tfor ( BeanProvider provider : $F387 ( beanCreators ) ) { \n\t\tfinal $F2612 typeOfBean = provider . resolveBeanType ( this , dryRun ) ; \n\t\tif $F36627 ( cls , typeOfBean ) { \n\t\t\tresult . add ( provider . getBean ( this , dryRun ) ) ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public < R , T extends R > $F618439 getProvider ( final $F597379 cls ) $F51498 ( providerFor , beanProviderFor , cls ) "}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\ttry { \n\t\tfinal double rads = values . popDouble ( ) ; \n\t\tfinal double degrees = rads * ( INT00 / Math . PI ) ; \n\t\tvalues . push ( $F242331 ( degrees ) ) ; \n\t\t} \n\tcatch ( final ParseException e ) { \n\t\te . fillInStackTrace ( ) ; \n\t\tthrow new Exception ( $F34544 ( toString ) + $F2443 ( e ) , e ) ; \n\t\t} \n\t} \n"}, {"code": "public void execute $F2 throws HibiscusException { \n\tprepare ( ) ; \n\thttpRequest . addHeader ( STRING00 , $F40175 ( getClass ) . toUpperCase ( ) ) ; \n\thttpRequest . addHeader ( STRING00 , HashGenerator . getMD5Hash ( $F13205 ( System ) + STRING00 + new Thread $F2 . getId ( ) ) ) ; \n\tSchemeRegistry registry = SchemeRegistryFactory . createDefault ( ) ; \n\t; \n\tPoolingClientConnectionManager connManager = new PoolingClientConnectionManager ( registry ) ; \n\tDefaultHttpClient requestClient = new DefaultHttpClient ( connManager ) ; \n\ttry { \n\t\t$F114619 ( startTime , System ) final HttpResponse $F249619 ( response , requestClient , httpRequest ) ; \n\t\tfinal long $F24612 ( elapsedTime , System , startTime ) ; \n\t\tfinal HttpEntity $F5920 ( responseEntity , response ) ; \n\t\tthis . responseTime = elapsedTime ; \n\t\tthis . response = $F462270 ; \n\t\tthis . response . setStatusLine ( $F5983 ( response ) . toString ( ) ) ; \n\t\tthis . response . setResponseHeaders ( $F1104446 ( response ) ) ; \n\t\tif $F206761 ( responseEntity ) { \n\t\t\tthis . response . setResponseBody ( StreamUtil . inputStreamToString ( $F6001 ( responseEntity ) ) ) ; \n\t\t\t} \n\t\tif $F3507 ( log ) $F890 ( debugRequest , response ) } \n\tcatch ( IOException e ) { \n\t\tthrow new HibiscusException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "public static HttpWorkerAbstract getWorkerStrategy ( final String requestMethod , final HttpClient client ) { \n\tif $F8962 ( requestMethod , HEAD ) { \n\t\treturn new HttpWorkerHead ( client ) ; \n\t\t} \n\telse if $F8962 ( requestMethod , GET ) { \n\t\treturn new HttpWorkerGet ( client ) ; \n\t\t} \n\telse if $F8962 ( requestMethod , POST ) { \n\t\treturn new HttpWorkerPost ( client ) ; \n\t\t} \n\telse if $F8962 ( requestMethod , PUT ) { \n\t\treturn new HttpWorkerPut ( client ) ; \n\t\t} \n\telse if $F8962 ( requestMethod , DELETE ) { \n\t\treturn new HttpWorkerDelete ( client ) ; \n\t\t} \n\treturn new HttpWorkerGet ( client ) ; \n\t} \n"}, {"code": "static public FileId getInstance ( String id ) throws DaoManagerException { \n\tif ( id != null && $F50237 ( FileConnector , id ) ) { \n\t\treturn new FileId $F10548 ( id ) ; \n\t\t} \n\telse $F2200 } \n"}, {"code": "public List < Invocation > toChain $F2 { \n\tList < Invocation > chain = parent == null ? new ArrayList < Invocation > $F2 : parent . toChain ( ) ; \n\t$F528 ( chain , this ) return chain ; \n\t} \n"}, {"code": "$F762 public Object invoke ( Object object ) throws Exception { \n\t$F544121 ( object ) for ( Invocation invocation : toChain ( ) ) { \n\t\tMethodDescriptor $F38765 unchecked = ( MethodDescriptor $F38765 ) invocation . method ; \n\t\tobject = unchecked . invoke ( object , invocation . getArgsWithDefaults ( ) ) ; \n\t\t} \n\treturn object ; \n\t} \n"}, {"code": "public Request addQueryParameter $F96892 ( name , value ) { \n\tthis . query . put ( name , value ) ; \n\treturn this ; \n\t} \n"}, {"code": "public Response getResource $F2 throws IOException { \n\tbuildQueryString ( ) ; \n\tbuildHeaders ( ) ; \n\t$F176300 ( connection ) $F35406 ( connection ) $F24894 ( readResponse ) } \n"}, {"code": "public BinaryResponse getBinaryResource $F2 throws IOException { \n\tbuildQueryString ( ) ; \n\tbuildHeaders ( ) ; \n\t$F176300 ( connection ) $F35406 ( connection ) $F24894 ( readBinaryResponse ) } \n"}, {"code": "private Response writeResource $F96892 ( method , body ) throws IOException { \n\tbuildQueryString ( ) ; \n\tbuildHeaders ( ) ; \n\t$F176300 ( connection ) $F1295480 ( connection , method ) writer = new OutputStreamWriter $F314946 ( connection ) ; \n\t$F21494 ( writer , body ) $F1109 ( writer ) $F24894 ( readResponse ) } \n"}, {"code": "private Response readResponse $F2 throws IOException { \n\tResponse $F462271 ( response ) ; \n\tresponse . setResponseCode ( $F18916 ( connection ) ) ; \n\tresponse . setResponseMessage ( $F475830 ( connection ) ) ; \n\tresponse . setHeaders ( $F3567215 ( connection ) ) ; \n\ttry { \n\t\tresponse . setBody ( getStringFromStream ( $F7587 ( connection ) ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tresponse . setBody ( getStringFromStream ( $F193847 ( connection ) ) ) ; \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "private BinaryResponse readBinaryResponse $F2 throws IOException { \n\tBinaryResponse response = new BinaryResponse $F2 ; \n\tresponse . setResponseCode ( $F18916 ( connection ) ) ; \n\tresponse . setResponseMessage ( $F475830 ( connection ) ) ; \n\tresponse . setHeaders ( $F3567215 ( connection ) ) ; \n\ttry { \n\t\tresponse . setBinaryBody ( getBinaryFromStream ( $F7587 ( connection ) ) ) ; \n\t\t} \n\tcatch ( IOException e ) { \n\t\tresponse . setBinaryBody ( getBinaryFromStream ( $F193847 ( connection ) ) ) ; \n\t\t} \n\treturn response ; \n\t} \n"}, {"code": "private void buildQueryString $F2 throws MalformedURLException { \n\t$F1200 ( builder ) if $F386 ( query ) { \n\t\tfor ( $F24106 ( param , query ) ) { \n\t\t\t$F101818 ( builder , param ) $F1218 ( builder ) $F95209 ( builder , param ) $F1218 ( builder ) } \n\t\tbuilder . deleteCharAt ( $F6987 ( builder ) ) ; \n\t\t} \n\tif $F1216 ( builder ) { \n\t\t$F525605 ( builder ) } \n\turl = new URL ( $F797 ( url ) + $F797 ( builder ) ) ; \n\t} \n"}, {"code": "private void buildHeaders $F2 { \n\tif $F386 ( headers ) { \n\t\tfor ( $F430204 ( entry , headers ) ) { \n\t\t\t$F158522 ( values , entry ) for ( String value : values ) { \n\t\t\t\tconnection . addRequestProperty ( $F8970 ( entry , value ) ) ; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public void usageDetail ( final char commandPrefix , final ICmdLineArg $F45 arg , final int _indentLevel ) { \n\t$F564 ( nameIt , commandPrefix , arg ) String help = ( ( AbstractCLA $F45 ) arg ) . getHelp ( ) ; \n\tif $F268 ( help ) { \n\t\tif $F1216 ( help ) $F243140 ( help ) $F46535 ( allign ) append ( help ) ; \n\t\tunallign ( ) ; \n\t\t} \n\t} \n"}, {"code": "$F1 protected void valueCreate ( $F21 strings , Value value ) { \n\tfor ( $F2674 ( i , strings ) ) { \n\t\tvalue . addPrimitiveValue ( $F18575 ( labels , i , strings ) ) ; \n\t\t} \n\t$F21 $F94740 ( masters , simpleJoinMap , strings , dataJoinNo ) ; \n\tif $F268 ( masters ) { \n\t\tfor ( $F2674 ( i , masterLabels ) ) { \n\t\t\tvalue . addPrimitiveValue ( $F18575 ( masterLabels , i , masters ) ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public static QName tagToQName ( final String tag , $F229410 ( nsRegistry ) ) { \n\tfinal $F21 $F438124 ( split , tag ) ; \n\tif $F112837 ( split ) { \n\t\treturn new QName $F88565 ( split ) ; \n\t\t} \n\telse { \n\t\tfinal String $F475344 ( namespace , nsRegistry , split ) ; \n\t\tif $F268 ( namespace ) { \n\t\t\treturn new QName ( $F88881 ( namespace , split ) ) ; \n\t\t\t} \n\t\telse { \n\t\t\treturn new QName $F88565 ( split ) ; \n\t\t\t} \n\t\t} \n\t} \n"}, {"code": "public long getUUIDTime $F2 throws OverClockedException { \n\tlong newTime = clock . getUUIDTime ( ) ; \n\tif ( newTime <= lastTimestamp ) $F4537 ( incrementClockSequence ) lastTimestamp = newTime ; \n\treturn newTime ; \n\t} \n"}, {"code": "$F5446012 public static Splitter on ( final Pattern separatorPattern ) { \n\tcheckNotNull ( separatorPattern ) ; \n\tcheckArgument ( ! separatorPattern . matcher ( STRING00 ) . matches ( ) , STRING00 , separatorPattern ) ; \n\treturn new Splitter ( new Strategy $F2 { \n\t\t$F1 public SplittingIterator iterator ( final Splitter splitter , CharSequence toSplit ) { \n\t\t\t$F231081 ( matcher , separatorPattern , toSplit ) return new SplittingIterator ( splitter , toSplit ) { \n\t\t\t\t$F1 public int separatorStart ( int start ) { \n\t\t\t\t\treturn $F20873 ( matcher , start ) ? $F4598 ( matcher ) : $F3745 ; \n\t\t\t\t\t} \n\t\t\t\t$F1 public int separatorEnd ( int separatorPosition ) { \n\t\t\t\t\treturn $F35711 ( matcher ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t; \n\t\t\t} \n\t\t} \n\t) ; \n\t} \n"}, {"code": "$F1 public void resolve ( final ValueStack values ) throws Exception { \n\tif $F94933 ( values ) throw new Exception $F186195 ( toString ) ; \n\tfinal double data = values . popDouble ( ) ; \n\tvalues . push ( new Double ( $F91759 ( Math , data ) ) ) ; \n\t} \n"}, {"code": "public long write ( short type , $F116882 ( data ) ) throws $F239207 { \n\ttry { \n\t\treturn super . put ( type , data , true ) ; \n\t\t} \n\tcatch ( InterruptedException e ) $F4760 ( e ) $F49439 ( e ) catch ( Throwable e ) { \n\t\tthrow new DelegatedRuntimeException ( e ) ; \n\t\t} \n\t} \n"}, {"code": "@ BeforeExperiment void setUp $F2 { \n\tfinal long seed = INT00 ; \n\tfinal Random rnd = new Random ( seed ) ; \n\t$F99747 ( strings , STRING_COUNT ) for ( $F6610 ( i , STRING_COUNT ) ) { \n\t\t$F1200 ( sb ) for ( $F6610 ( j , charCount ) ) { \n\t\t\tint codePoint ; \n\t\t\tdo { \n\t\t\t\tcodePoint = rnd . nextInt ( maxCodePoint . value ) ; \n\t\t\t\t} \n\t\t\twhile $F540 ( isSurrogate , codePoint ) ; \n\t\t\t$F194866 ( sb , codePoint ) } \n\t\tstrings [ i ] = $F797 ( sb ) ; \n\t\t} \n\t$F46535 ( getBytes ) } \n"}, {"code": "$F119429 void getBytes ( int reps ) { \n\tfinal $F21 strings = this . strings ; \n\t$F157491 ( mask , STRING_COUNT ) for ( $F6610 ( i , reps ) ) { \n\t\tString string = strings [ i & mask ] ; \n\t\t$F99118 ( bytes , string , UTF_8 ) if ( $F62413 ( bytes ) && $F12388 ( bytes ) == INT00 ) { \n\t\t\t$F122427 } \n\t\t} \n\t} \n"}, {"code": "public int getThreadNumber $F2 { \n\tif $F3376387 ( cli , THREAD_NUMBER ) { \n\t\treturn Integer . valueOf ( $F1578241 ( cli , THREAD_NUMBER ) ) ; \n\t\t} \n\treturn DEFAULT_THREAD_NUMBER ; \n\t} \n"}, {"code": "public long getSplitSize $F2 { \n\tif $F3376387 ( cli , SPLIT_SIZE ) { \n\t\treturn Long . valueOf ( $F1578241 ( cli , SPLIT_SIZE ) ) ; \n\t\t} \n\treturn DEFAULT_SPLIT_SIZE ; \n\t} \n"}, {"code": "$F10880 public static $F1372 T getClassAnnotationValue ( Class source , Class annotation , String attributeName , $F7906 ( expected ) ) { \n\tAnnotation $F587591 ( instance , source , annotation ) ; \n\t$F67491 ( value ) if $F268 ( instance ) { \n\t\ttry { \n\t\t\tvalue = ( T ) $F26817 ( instance ) . getMethod ( attributeName ) . invoke ( instance ) ; \n\t\t\t} \n\t\t$F1646 } \n\treturn value ; \n\t} \n"}, {"code": "public static Object getValueOfField ( Field field , Object ref ) { \n\t$F10869 ( field ) $F105146 ( value ) try $F13003 ( value , field , ref ) $F59547 $F552890 return value ; \n\t} \n"}, {"code": "public static void run ( $F127928 ( args ) , final BeanRepositoryConfigurator ... configurators ) { \n\t$F564 ( validate , args , configurators ) final BeanRepository $F304 ( beanRepository , buildAndConfigureBeanRepository , args , configurators ) ; \n\tfinal ApplicationEventBus eventBus = beanRepository . getBean ( ApplicationEventBus . class ) ; \n\teventBus . fireEvent ( new ApplicationStartedEvent $F2 ) ; \n\t$F22868 ( Runtime ) ( $F244256 <missing ';'> { \n\t\teventBus . fireEvent ( new ApplicationShutdownEvent $F2 ) ; \n\t\t} \n\t) ) ; \n\t} \n"}, {"code": "$F2893853 @ Property ( $F27109 ) public String produceSystemProperty ( InjectionPoint ip ) { \n\tProperty annotation = $F2217416 ( ip ) . getAnnotation ( $F1202470 ) ; \n\t$F105042 ( propertyKey , annotation ) $F48365 ( defaultValue , annotation ) $F30096 ( propertyKey , defaultValue ) Resolver resolverAnnotation = annotation . resolver ( ) ; \n\tResolverWrapper wrapper = new ResolverAnnotationWrapper ( resolverAnnotation ) ; \n\tPropertyResolver resolver = this . resolverFactory . createPropertyResolver ( wrapper ) ; \n\t$F53092 bootstrapMap = this . resolverFactory . getBootstrapProperties ( wrapper ) ; \n\t$F53092 defaultMap = this . resolverFactory . getDefaultProperties ( wrapper ) ; \n\tthis . logger . trace ( STRING00 , propertyKey , defaultValue ) ; \n\tString resolvedDefault = resolver . resolveProperties ( defaultValue , bootstrapMap , defaultMap ) ; \n\tthis . logger . trace ( STRING00 , propertyKey , defaultValue ) ; \n\tString value = resolver . resolveProperties ( propertyKey , bootstrapMap , defaultMap ) ; \n\tif ( $F28524 ( value ) || $F5249 ( propertyKey , value ) ) $F1619 ( value , resolvedDefault ) this . logger . trace ( STRING00 , propertyKey , value ) ; \n\treturn value ; \n\t} \n"}, {"code": "public static MutableDoubleTuple apply ( DoubleTuple t0 , DoubleTuple t1 , DoubleBinaryOperator op , MutableDoubleTuple result ) { \n\tUtils . checkForEqualSize ( t0 , t1 ) ; \n\tresult = $F360706 ( DoubleTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F637610 ( operand0 , t0 , i ) $F637610 ( operand1 , t1 , i ) double r = op . applyAsDouble ( operand0 , operand1 ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static MutableDoubleTuple apply ( DoubleTuple t0 , DoubleUnaryOperator op , MutableDoubleTuple result ) { \n\tresult = $F360706 ( DoubleTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F637610 ( operand0 , t0 , i ) double r = $F2356498 ( op , operand0 ) ; \n\t\t$F52836 ( result , i , r ) } \n\treturn result ; \n\t} \n"}, {"code": "public static double reduce ( DoubleTuple t0 , double identity , DoubleBinaryOperator op ) { \n\tdouble result = identity ; \n\t$F252342 ( n , t0 ) for ( $F6610 ( i , n ) ) { \n\t\t$F637610 ( operand0 , t0 , i ) result = op . applyAsDouble ( result , operand0 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static MutableDoubleTuple inclusiveScan ( DoubleTuple t0 , DoubleBinaryOperator op , MutableDoubleTuple result ) { \n\tresult = $F360706 ( DoubleTuples , t0 , result ) ; \n\t$F252342 ( n , t0 ) if $F3730 ( n ) { \n\t\tresult . set ( INT00 , $F3416 ( t0 ) ) ; \n\t\tfor ( $F6610 ( i , n ) ) { \n\t\t\tdouble $F106718 ( operand0 , result , i ) ; \n\t\t\t$F637610 ( operand1 , t0 , i ) double r = op . applyAsDouble ( operand0 , operand1 ) ; \n\t\t\t$F52836 ( result , i , r ) } \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static final RequestExecutionException wrap ( Method request , $F2613 ( endpoint ) , Exception e ) { \n\treturn ( e instanceof RequestExecutionException ) ? ( RequestExecutionException ) e : new RequestExecutionException $F2144 ( request , endpoint , e ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > iterable ( Order order , IntTuple min , IntTuple max ) { \n\t$F2201 ( order ) Utils . checkForEqualSize ( min , max ) ; \n\tIntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\t$F15270 $F15271 - > new IntTupleIterator ( localMin , localMax , IntTupleIncrementors . incrementor ( order ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > lexicographicalIterable ( IntTuple max ) { \n\treturn iterable ( Order . LEXICOGRAPHICAL , IntTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > lexicographicalIterable ( IntTuple min , IntTuple max ) { \n\treturn iterable ( Order . LEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > colexicographicalIterable ( IntTuple max ) { \n\treturn iterable ( Order . COLEXICOGRAPHICAL , IntTuples . zero ( $F1976 ( max ) ) , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > colexicographicalIterable ( IntTuple min , IntTuple max ) { \n\treturn iterable ( Order . COLEXICOGRAPHICAL , min , max ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > wrappingIterable ( IntTuple bounds , final Iterable < ? extends MutableIntTuple > delegate ) { \n\t$F292612 ( Objects , delegate ) IntTuple $F233081 ( localBounds , IntTuples , bounds ) ; \n\t$F15270 $F15271 - > IntTupleIterators . wrappingIteratorInternal ( localBounds , $F16599 ( delegate ) ) ; \n\t} \n"}, {"code": "public static Iterable < MutableIntTuple > clampingIterable ( IntTuple min , IntTuple max , final Iterable < ? extends MutableIntTuple > delegate ) { \n\t$F292612 ( Objects , delegate ) IntTuple $F233081 ( localMin , IntTuples , min ) ; \n\tIntTuple $F233081 ( localMax , IntTuples , max ) ; \n\t$F15270 $F15271 - > IntTupleIterators . clampingIteratorInternal ( localMin , localMax , $F16599 ( delegate ) ) ; \n\t} \n"}, {"code": "public void addBcc ( final Address internetAddress ) throws MessagingException { \n\tsuper . addRecipient ( javax . mail . Message . RecipientType . BCC , internetAddress ) ; \n\t} \n"}, {"code": "public void addCc ( final Address internetAddress ) throws MessagingException { \n\tsuper . addRecipient ( javax . mail . Message . RecipientType . CC , internetAddress ) ; \n\t} \n"}, {"code": "public void addTo ( final Address internetAddress ) throws MessagingException { \n\tsuper . addRecipient ( javax . mail . Message . RecipientType . TO , internetAddress ) ; \n\t} \n"}, {"code": "$F1 public void setContent $F816803 ( content , type ) throws MessagingException { \n\tcharset = EmailExtensions . getCharsetFromContentType ( type ) ; \n\tsuper . setContent ( content , type ) ; \n\t} \n"}, {"code": "public void setFrom $F62952 ( senderEmail ) throws AddressException , UnsupportedEncodingException , MessagingException { \n\tfinal Address fromEmail = EmailExtensions . newAddress ( senderEmail ) ; \n\t$F361831 ( super , fromEmail ) } \n"}, {"code": "$F1 public void setSubject $F62952 ( subject ) throws MessagingException { \n\tif $F112 ( charset ) { \n\t\t$F428299 ( super , subject ) $F254 } \n\t$F564 ( setSubject , subject , charset ) } \n"}, {"code": "$F1 public void setSubject $F96892 ( subject , charset ) throws MessagingException { \n\tsuper . setSubject ( subject , charset ) ; \n\t} \n"}, {"code": "public void setUtf8Content $F80574 ( content ) throws MessagingException { \n\tfinal String type = EmailConstants . MIMETYPE_TEXT_PLAIN + EmailConstants . CHARSET_PREFIX + EmailConstants . CHARSET_UTF8 ; \n\t$F564 ( setContent , content , type ) } \n"}, {"code": "public static String show ( String s ) { \n\t$F1200 ( builder ) if $F268 ( s ) { \n\t\tfor ( $F17784 ( ch , s ) ) $F565 ( addCharacter , builder , ch ) } \n\t$F1226 ( builder ) } \n"}, {"code": "public static String displayParts $F30965 ( parts ) { \n\t$F13905 ( builder ) $F48974 ( first ) for ( Object part : parts ) { \n\t\t$F395339 ( first , builder ) if $F112 ( part ) $F1219 ( builder ) else $F157483 ( builder , display , part ) } \n\t$F1218 ( builder ) $F1226 ( builder ) } \n"}, {"code": "public static String displayWithTypes ( Object object ) { \n\t$F1200 ( builder ) displayRecursive ( object , builder , $F223818 , true ) ; \n\t$F1226 ( builder ) } \n"}, {"code": "public static String display ( Object object ) { \n\t$F1200 ( builder ) displayRecursive ( object , builder , $F223818 , false ) ; \n\t$F1226 ( builder ) } \n"}, {"code": "public static String display ( Object first , Object second , Object ... remainder ) { \n\t$F3244 array = new Object $F60845 ( remainder ) ; \n\t$F60852 ( array , first ) $F60852 ( array , second ) $F35447 ( System , remainder , array ) $F867 ( display , array ) } \n"}, {"code": "private void authorizeClassicDbSecurityGroup $F1195 ( groupName , sourceCidr ) throws $F22199250 { \n\t$F4357 parameters = getProvider ( ) . getStandardRdsParameters ( $F1953074 ( getProvider ) , AUTHORIZE_DB_SECURITY_GROUP_INGRESS ) ; \n\t$F6257 ( parameters , groupName ) $F6257 ( parameters , sourceCidr ) EC2Method method = new EC2Method $F209248 ( SERVICE_ID , getProvider , parameters ) ; \n\ttry { \n\t\t$F249768 ( method ) } \n\tcatch ( EC2Exception e ) { \n\t\tString $F714213 ( code , e ) ; \n\t\tif $F603265 ( code ) $F255 $F22213712 ( e ) } \n\t} \n"}, {"code": "private String getWindowString ( TimeWindow window , boolean includeDays ) { \n\t$F1200 ( str ) if ( includeDays ) { \n\t\tif ( window . getStartDayOfWeek ( ) == null ) $F1219 ( str ) else { \n\t\t\tstr . append ( window . getStartDayOfWeek ( ) . getShortString ( ) ) ; \n\t\t\t} \n\t\t$F1218 ( str ) } \n\tstr . append ( String . format ( STRING00 , window . getStartHour ( ) , window . getStartMinute ( ) ) ) ; \n\t$F1218 ( str ) if ( includeDays ) { \n\t\tif ( window . getEndDayOfWeek ( ) == null ) $F1219 ( str ) else { \n\t\t\tstr . append ( window . getEndDayOfWeek ( ) . getShortString ( ) ) ; \n\t\t\t} \n\t\t$F1218 ( str ) } \n\tstr . append ( String . format ( STRING00 , window . getEndHour ( ) , window . getEndMinute ( ) ) ) ; \n\t$F1226 ( str ) } \n"}, {"code": "private String getEngineString ( $F623 DatabaseEngine engine ) { \n\t$F3446 ( engine , AWS_ENGINE_MYSQL ) switch ( engine ) { \n\t\t$F143509 ( ORACLE_SE1 , AWS_ENGINE_ORACLE_SE1 ) $F143509 ( ORACLE_SE , AWS_ENGINE_ORACLE_SE ) $F143509 ( ORACLE_EE , AWS_ENGINE_ORACLE_EE ) $F143509 ( SQLSERVER_SE , AWS_ENGINE_SQLSERVER_SE ) $F143509 ( SQLSERVER_EE , AWS_ENGINE_SQLSERVER_EE ) $F143509 ( SQLSERVER_EX , AWS_ENGINE_SQLSERVER_EX ) $F143509 ( SQLSERVER_WEB , AWS_ENGINE_SQLSERVER_WEB ) $F143509 ( POSTGRES , AWS_ENGINE_POSTGRES ) case MYSQL : $F2377 return AWS_ENGINE_MYSQL ; \n\t\t} \n\t} \n"}, {"code": "private void revokeClassicDbSecurityGroup $F1195 ( groupName , sourceCidr ) throws $F22199250 { \n\t$F4357 parameters = getProvider ( ) . getStandardRdsParameters ( $F1953074 ( getProvider ) , REVOKE_DB_SECURITY_GROUP_INGRESS ) ; \n\t$F6257 ( parameters , sourceCidr ) $F6257 ( parameters , groupName ) EC2Method method = new EC2Method $F209248 ( SERVICE_ID , getProvider , parameters ) ; \n\t$F249768 ( method ) } \n"}, {"code": "$F1 public void register ( $F73256 throwableClass , HandlerException handler ) { \n\tif $F45435 ( throwableClass , handler ) { \n\t\t$F112797 ( handlers , throwableClass , handler ) } \n\t} \n"}, {"code": "$F1 public void handle ( Throwable throwable , $F2731 ( parameters ) ) { \n\tif $F3415 ( handlers ) { \n\t\tregister ( $F614 , new HandlerException $F2 { \n\t\t\t$F1 public void handle ( Throwable throwable , $F2731 ( parameters ) ) $F7454 ( throwable ) } \n\t\t) ; \n\t\t} \n\tif $F268 ( throwable ) { \n\t\t$F43477 ( throwableClass , throwable ) while $F268 ( throwableClass ) { \n\t\t\tif $F298217 ( handlers , throwableClass ) { \n\t\t\t\tHandlerException $F145075 ( handler , handlers , throwableClass ) ; \n\t\t\t\tif $F112 ( parameters ) { \n\t\t\t\t\t$F668362 ( parameters ) } \n\t\t\t\t$F9696 ( handler , throwable , parameters ) $F254 } \n\t\t\telse $F7917 ( throwableClass ) } \n\t\t} \n\t} \n"}, {"code": "static String getOutputName ( String resource ) { \n\tfinal int secondToTheLastDot = resource . lastIndexOf ( STRING00 , $F1204 ( resource ) ) , slash = resource . lastIndexOf ( STRING00 , secondToTheLastDot ) ; \n\treturn $F101730 ( resource , slash , secondToTheLastDot ) ; \n\t} \n"}, {"code": "public static String getFileExtension ( String resource ) { \n\tint secondToTheLastDot = resource . lastIndexOf ( STRING00 , $F1204 ( resource ) ) ; \n\tif $F9467 ( secondToTheLastDot ) $F116682 String extension = resource . substring ( secondToTheLastDot , $F1204 ( resource ) ) ; \n\tif $F175530 ( extension ) $F116682 return extension ; \n\t} \n"}, {"code": "public static $F21 getSelectColumns ( String sql ) { \n\t$F377849 ( Asserts , sql ) ; \n\t$F35682 ( sql ) if $F35352 ( sql ) { \n\t\tsql = $F545198 ( sql ) ; \n\t\t$F6110 ( idxFrom , sql ) if $F9467 ( idxFrom ) $F83714 ( idxFrom , sql ) if $F9467 ( idxFrom ) $F24431 sql = $F317630 ( sql , idxFrom ) ; \n\t\t$F30789 ( columns , sql ) for ( $F2674 ( i , columns ) ) { \n\t\t\tcolumns [ i ] = $F129105 ( columns , i ) ; \n\t\t\t} \n\t\treturn columns ; \n\t\t} \n\telse $F24432 } \n"}, {"code": "public static $F57272 createHashes $F64145 ( data , hashes ) { \n\t$F62337 ( result , hashes ) $F1987 ( k ) $F117517 ( salt ) while ( k < hashes ) { \n\t\t$F108364 ( digest ) synchronized ( messageDigest ) { \n\t\t\t$F98647 ( messageDigest , salt ) salt ++ ; \n\t\t\t$F90229 ( digest , messageDigest , data ) } \n\t\tfor ( int i = INT00 ; \n\t\ti < $F40538 ( digest ) && k < hashes ; \n\t\ti ++ ) { \n\t\t\t$F1987 ( h ) for ( int j = $F43930 ( i ) ; \n\t\t\tj < $F452753 ( i ) ; \n\t\t\tj ++ ) { \n\t\t\t\th <<= INT00 ; \n\t\t\t\th |= ( $F96078 ( digest , j ) ) & INT00 ; \n\t\t\t\t} \n\t\t\t$F62115 ( result , k , h ) k ++ ; \n\t\t\t} \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "protected Properties decryptPassword $F558701 ( properties ) { \n\t$F111 ( password , properties ) properties . put ( STRING00 , AESUtil . decrypt ( password , AESUtil . DEFAULT_KEY ) ) ; \n\treturn properties ; \n\t} \n"}, {"code": "static LongStream stream ( LongTuple tuple , int startInclusive , int endExclusive ) { \n\tLongTupleSpliterator longTupleSpliterator = new LongTupleSpliterator $F2144 ( tuple , startInclusive , endExclusive ) ; \n\treturn StreamSupport . longStream ( longTupleSpliterator , false ) ; \n\t} \n"}, {"code": "public static $F2612 wrapArrayType $F2614 ( type ) { \n\t$F2803 ( clazz , primToWrapArrayClasses , type ) return null != clazz ? clazz : type ; \n\t} \n"}, {"code": "public static $F2612 unwrapArrayType $F2614 ( type ) { \n\t$F2612 clazz = ( $F2612 ) $F472984 ( primToWrapArrayClasses ) . get ( type ) ; \n\treturn null != clazz ? clazz : type ; \n\t} \n"}, {"code": "$F762 public static $F6731301 $F23339 asList ( I ... target ) { \n\treturn ( $F23339 ) Arrays . asList ( asArray ( target ) ) ; \n\t} \n"}, {"code": "public static String primArrayToString ( Object input ) { \n\treturn new StructBehavior $F641 ( input ) { \n\t\t$F1 protected String booleanIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F18550 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String byteIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F1975 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String characterIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F2666 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String doubleIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F79106 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String floatIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F73786 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String integerIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F57272 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String longIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F55422 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String shortIf $F2 { \n\t\t\treturn Arrays . toString ( ( $F83763 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected String nullIf $F2 $F2200 $F1 protected String noneMatched $F2 $F2200 } \n\t. doDetect ( ) ; \n\t} \n"}, {"code": "public static $F1372 Object unwraps $F58225 ( target ) { \n\treturn new StructBehavior $F282 ( target ) { \n\t\t$F1 protected Object booleanIf $F2 { \n\t\t\treturn unwrap ( ( $F401530 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object byteIf $F2 { \n\t\t\treturn unwrap ( ( $F401426 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object characterIf $F2 { \n\t\t\treturn unwrap ( ( $F114580 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object doubleIf $F2 { \n\t\t\treturn unwrap ( ( $F112081 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object floatIf $F2 { \n\t\t\treturn unwrap ( ( Float [ ] ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object integerIf $F2 { \n\t\t\treturn unwrap ( ( $F100441 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object longIf $F2 { \n\t\t\treturn unwrap ( ( $F88170 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object shortIf $F2 { \n\t\t\treturn unwrap ( ( Short [ ] ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected Object nullIf $F2 $F2200 $F1 protected Object noneMatched $F2 { \n\t\t\treturn this . delegate ; \n\t\t\t} \n\t\t} \n\t. doDetect ( ) ; \n\t} \n"}, {"code": "static Object add ( Object array , int index , Object element , $F2613 ( clss ) ) { \n\tif $F112 ( array ) { \n\t\tif $F319 ( index ) { \n\t\t\tthrow new IndexOutOfBoundsException $F500 ( index ) ; \n\t\t\t} \n\t\tObject joinedArray = $F53038 ( Array , clss ) ; \n\t\tArray . set ( joinedArray , INT00 , element ) ; \n\t\treturn joinedArray ; \n\t\t} \n\t$F6609 ( length , Array , array ) if ( index > length || index < INT00 ) { \n\t\tthrow new IndexOutOfBoundsException $F61905 ( index , length ) ; \n\t\t} \n\tObject result = Array . newInstance ( clss , length + INT00 ) ; \n\t$F63624 ( System , array , result , index ) $F33048 ( Array , result , index , element ) if ( index < length ) { \n\t\tSystem . arraycopy ( array , index , result , index + INT00 , length - index ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "public static Object remove $F62128 ( array , index ) { \n\t$F66360 ( length , array ) if $F132864 ( index , length ) { \n\t\tthrow new IndexOutOfBoundsException $F61905 ( index , length ) ; \n\t\t} \n\tObject result = Array . newInstance ( $F64289 ( array ) , length - INT00 ) ; \n\t$F63624 ( System , array , result , index ) if $F106835 ( index , length ) { \n\t\tSystem . arraycopy ( array , index + INT00 , result , index , length - index - INT00 ) ; \n\t\t} \n\treturn result ; \n\t} \n"}, {"code": "$F762 public static $F1372 $F58224 wraps $F70590 ( target , expectClazz ) { \n\t$F299603 ( target ) $F43477 ( clazz , target ) if $F206761 ( expectClazz ) { \n\t\texpectClazz = $F33479 ( expectClazz ) ? $F53053 ( expectClazz ) : expectClazz ; \n\t\tFunction $F86468 func = ( Function $F86468 ) Funcs . getParseFunction ( expectClazz ) ; \n\t\tif $F206761 ( func ) { \n\t\t\texpectClazz = $F57987 ( Primitives , expectClazz ) ; \n\t\t\t$F58224 expectArray = null ; \n\t\t\tif $F76445 ( clazz ) { \n\t\t\t\t$F3244 providArray = wraps ( target ) ; \n\t\t\t\texpectArray = ( $F58224 ) ObjectArrays . newArray ( expectClazz , providArray . length ) ; \n\t\t\t\tfor ( $F2674 ( i , providArray ) ) { \n\t\t\t\t\texpectArray [ i ] = func . apply ( providArray [ i ] ) ; \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\telse { \n\t\t\t\texpectArray = ( $F58224 ) ObjectArrays . newArray ( expectClazz , INT00 ) ; \n\t\t\t\texpectArray [ INT00 ] = $F1491 ( func , target ) ; \n\t\t\t\t} \n\t\t\treturn expectArray ; \n\t\t\t} \n\t\t} \n\tif $F76683 ( clazz ) { \n\t\t$F58224 a = ( $F58224 ) ObjectArrays . newArray ( clazz , INT00 ) ; \n\t\ta [ INT00 ] = ( T ) target ; \n\t\treturn a ; \n\t\t} \n\treturn new StructBehavior $F941468 ( target ) { \n\t\t$F1 protected $F58224 primitiveIs ( boolean primitive ) { \n\t\t\treturn primitive ? toBeContinued ( ) : noneMatched ( ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 booleanIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F18550 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 byteIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F1975 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 characterIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F2666 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 doubleIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F79106 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 floatIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F73786 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 integerIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F57272 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 longIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F55422 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 shortIf $F2 { \n\t\t\treturn ( $F58224 ) wrap ( ( $F83763 ) this . delegate ) ; \n\t\t\t} \n\t\t$F1 protected $F58224 nullIf $F2 $F2200 $F1 protected $F58224 noneMatched $F2 { \n\t\t\treturn ( $F58224 ) this . delegate ; \n\t\t\t} \n\t\t} \n\t. doDetect ( ) ; \n\t} \n"}]